{
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction_hand\n    \n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9 * 60  # class starts at 9:00 AM, converted to minutes\n    end_time = 10 * 60   # class ends at 10:00 AM, converted to minutes\n\n    # Duration of the class in minutes\n    duration = end_time - start_time\n\n    return duration  # returns duration in minutes\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / 0.6\n    original_amount = remaining_after_bag / 0.8\n    return original_amount\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for n in range(1, 100): # Choosing a reasonable upper limit for school students in a year\n        if ((n ** 2) + 5) + 26 == (n + 1) ** 2:\n            return n ** 2 + 5\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n\n    chemistry_students = total_students - (physics_students + biology_students)\n\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy = 37\n    john = 15\n    \n    # Let x be the number of apples Amy gives to John.\n    # After giving x apples, Amy's apples will be (amy - x) and John's will be (john + x).\n    # Amy will have 4 more apples than John, so we have:\n    # (amy - x) = (john + x) + 4\n    # Solving for x gives us:\n    x = (amy - john - 4) / 2\n    \n    return int(x)\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    # Calculate the sum of squares from 5^2 to 15^2\n    # Using the formula for the sum of squares from 1^2 to n^2: [1/6 * n * (n + 1) * (n + 2)]\n    # We need to subtract the sum of squares from 1^2 to 4^2 to get the sum from 5^2 to 15^2\n\n    n = 15\n    sum_squares_to_n = (1/6) * n * (n + 1) * (n + 2)\n\n    m = 4\n    sum_squares_to_m = (1/6) * m * (m + 1) * (m + 2)\n\n    ans = sum_squares_to_n - sum_squares_to_m\n    return int(ans)\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n\n    # Let x be the cost price for the house which made a profit\n    # 10% profit means sale price is 110% of cost price\n    # Therefore, x * 1.10 = sale_price\n    # Thus, x = sale_price / 1.10\n    profit_house_cost = sale_price / 1.10\n\n    # Let y be the cost price for the house which incurred a loss\n    # 10% loss means sale price is 90% of cost price\n    # Therefore, y * 0.90 = sale_price\n    # Thus, y = sale_price / 0.90\n    loss_house_cost = sale_price / 0.90\n\n    # Calculate total cost price\n    total_cost = profit_house_cost + loss_house_cost\n\n    # Calculate total sale price\n    total_sale = 2 * sale_price\n\n    # Calculate profit or loss\n    profit_or_loss = total_sale - total_cost\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    total_plants = 9\n    select_plants = 4\n    \n    # Calculate the number of permutations for arranging 4 out of 9 plants\n    num_ways = factorial(total_plants) // factorial(total_plants - select_plants)\n    \n    return num_ways\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To ensure a win, Fred has to leave a multiple of 4 \n    # for George, forcing him into a position where no matter \n    # what George picks, Fred can always pick a number that maintains \n    # multiples of 4 until 1 orange is left for George's move.\n    \n    # In the first move, to ensure he wins, Fred must take a \n    # number of oranges that leaves a multiple of 4 on the table.\n    # Since 15 is not a multiple of 4, Fred needs to take a certain number \n    # of oranges to leave a multiple of 4. The closest multiples of 4 are 12 \n    # and 16. Since we can't have 16 oranges on the table, Fred aims to leave 12.\n    \n    # To leave 12 oranges on the table, Fred must take 15 - 12 = 3 oranges.\n    fred_first_turn = 15 % 4\n\n    return fred_first_turn\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + (3 * jane_saved)\n    return ali_saved\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    blouse_pants_combinations = shirts * pants * shoes\n    dress_shoes_combinations = dresses * shoes\n    dress_heels_combinations = dresses * heels\n    \n    total_combinations = blouse_pants_combinations + dress_shoes_combinations + dress_heels_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    tom_age = symbols('tom_age')\n    equation = Eq(4 * tom_age - 5, 43)\n    \n    tom_age_solution = solve(equation, tom_age)\n    \n    return tom_age_solution[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_multipliers = 2 + 3 + 5\n    ans = common_factor * sum_of_multipliers\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    # Convert the fraction to a decimal\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n    \n    # Compare the values\n    if fraction_value > decimal_value:\n        ans = \"3/20 is larger\"\n    elif fraction_value < decimal_value:\n        ans = \"0.16 is larger\"\n    else:\n        ans = \"They are equal\"\n    \n    return ans\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDE'):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C'):\n            count += 1\n        elif perm.index('A') < perm.index('B') and perm.index('A') > perm.index('C'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n    total_eggs = (cupcakes / 15) * eggs_per_15_cupcakes\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    total_skipping = 40\n    total_long_jump = 31\n    both_events = 21\n\n    only_one_event = (total_skipping - both_events) + (total_long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Sara jogs from 6.30 am to 8.30 am, which is 2 hours\n    jog_time = 2  # hours\n    jog_speed = 8  # km/h\n    jog_distance = jog_time * jog_speed  # Distance = time * speed\n    \n    # Sara walks from 8.30 am to 9.30 am, which is 1 hour\n    walk_time = 1  # hour\n    walk_speed = jog_speed / 2  # half of jogging speed\n    walk_distance = walk_time * walk_speed  # Distance = time * speed\n\n    # Total distance travelled during the exercise\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of each type of note\n    x = symbols('x')\n\n    # Each note's value is multiplied by its quantity and the sum is set to 280\n    equation = Eq(5*x + 10*x + 20*x, 280)\n\n    # Solve the equation to find the number of each note\n    sol = solve(equation, x)\n\n    # Total number of notes is 3 times the number of each type since there are equal numbers of £5, £10 and £20 notes\n    total_notes = 3 * sol[x]\n\n    return total_notes\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    # There are 9 options for the first digit (1-9, can't be 0),\n    # and 10 options for the second digit (0-9).\n    # The third digit must be the same as the first, so there is only 1 option for it.\n    # Hence, for every first digit, there are 10 palindromes.\n    return 9 * 10\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # For the last digit of any whole number, we need to consider the last digit of each factor in the product separately.\n    # In this case, we are dealing with the repeated product of 2, 7, and 9.\n\n    # The last digit of a power of 2 repeats every 4 times: 2, 4, 8, 6.\n    # Since we have 100 2s, the pattern will complete 25 times (100/4),\n    # and we'll be back to the starting digit, which is 2.\n\n    last_digit_of_2_power_100 = 2\n\n    # The last digit of a power of 7 repeats every 4 times: 7, 9, 3, 1.\n    # Since we have 100 7s, the pattern will complete 25 times (100/4),\n    # and we'll be back to the starting digit, which is 7.\n\n    last_digit_of_7_power_100 = 7\n\n    # The last digit of a power of 9 repeats every 2 times: 9, 1.\n    # Since we have 100 9s, the pattern will complete 50 times (100/2),\n    # and we'll be back to the starting digit, which is 9.\n\n    last_digit_of_9_power_100 = 9\n\n    # Multiplying the last digits together to get the last digit of the whole expression\n    last_digit = (last_digit_of_2_power_100 * last_digit_of_7_power_100 * last_digit_of_9_power_100) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond_operation(M, N):\n        return M * N + N + 1\n\n    def square_operation(M, N):\n        return 8 * M - N * N\n\n    diamond_result = diamond_operation(7, 6)\n    square_result = square_operation(diamond_result, 9)\n\n    return square_result\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # Let's first assume we want to minimize the largest pile\n    # We can then increment the size of each pile under the condition\n    # that the previous pile must have fewer marbles than the current one\n    for largest_pile in range(1, 17):\n        for pile3 in range(1, largest_pile):\n            for pile2 in range(1, pile3):\n                for pile1 in range(1, pile2):\n                    if pile1 + pile2 + pile3 + largest_pile == 16:\n                        return largest_pile\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    # Start checking from the first prime number, which is 2.\n    p = 2\n    while True:\n        # Check if p and p+107 are both prime.\n        if isprime(p) and isprime(p + 107):\n            # If they are, we have found our solution.\n            return p\n        # Increment p to check the next number.\n        p += 1\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    A = 60 * (1 + 1/2 + 1/3 + 1/4 + 1/5)\n    return A\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n\n    if students % capacity == 0:\n        minibusses_needed = students // capacity\n    else:\n        minibusses_needed = (students // capacity) + 1\n\n    return minibusses_needed\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    total_time = 12  # total time taken from first to fourth floor\n    # Assuming each flight of stairs between floors takes equal time\n    # There are three intervals between first to fourth floor: 1st to 2nd, 2nd to 3rd, 3rd to 4th\n    time_per_floor = total_time / 3  # time taken to go from one floor to the next\n    return time_per_floor\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    sum_value = 0\n    for i in range(1, 2008):\n        sum_value += (i**2 + (i+1)**2) / (i * (i+1))\n    \n    return round(sum_value)\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    original_average = 159\n    wrong_height_recorded = 126\n    correct_height = 162\n    correct_average = 163\n\n    # The difference made by the wrong entry\n    difference_in_height = correct_height - wrong_height_recorded\n\n    # The difference in average due to the wrong entry\n    difference_in_average = correct_average - original_average\n\n    # The number of girls can be found by dividing the total difference made by the wrong entry\n    # by the difference it made in average height.\n    num_girls = difference_in_height / difference_in_average\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    result = 24 / 100 * 25\n    return result\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = 12345679 * 63\n    return ans\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    n = (13 + 1) // 2  # 13 is the last odd number, n is the total number of terms\n    sum_n = (n * (n + 1) // 2)  # Sum of the first n natural numbers\n    ans = sum_n ** 2  # Square of the sum_n formula\n    return ans\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    # The given series is of the squares of the first 10 odd numbers.\n    # The formula for the sum of squares of the first n natural numbers is \n    # 1^2 + 2^2 + ... + n^2 = n(n + 1)(2n + 1)/6\n    # However, since we want the sum of squares of the first m odd numbers,\n    # we need to find the value of n such that n = 2m - 1.\n    # For the nth odd number: n = 2m - 1 => m = (n + 1) / 2\n    # Replace n with (n+1)/2 in the above formula and simplify.\n    # After simplifying we get the sum of squares of first m odd numbers as:\n    # m(4m^2 - 1)/3\n    \n    # The 10th odd number is 19, so m = 10\n    m = 10\n    ans = m * (4*m**2 - 1) // 3\n    return ans\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 2 * a + 4\n\n    ans = 200\n    for i in range(199, 0, -1):\n        ans = hash_op(ans, i)\n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    from fractions import Fraction\n\n    result = Fraction(3, 2)\n    for i in range(3, 10):\n        result *= Fraction(i+1, i)\n\n    return result\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ken, beth = symbols('ken beth')\n    equation1 = Eq(ken, beth + 75)\n    equation2 = Eq(4/5 * beth, 2/5 * ken)\n\n    solutions = solve((equation1, equation2), (ken, beth))\n\n    total_seashells = solutions[ken] + solutions[beth]\n\n    return total_seashells\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    # Lengths of the ribbons\n    a = 56\n    b = 42\n    c = 84\n\n    # Calculate the greatest common divisor of the three lengths\n    greatest_length = gcd(gcd(a, b), c)\n\n    return greatest_length\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    ans = number + 10000\n    return ans\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $2 and $10 notes\n    notes_2, notes_10 = symbols('notes_2 notes_10')\n\n    # Total number of notes is 40\n    equation1 = Eq(notes_2 + notes_10, 40)\n    \n    # After spending, the number of $10 notes becomes 0.6 * notes_10 (since he spent 40%)\n    # and the number of $2 notes becomes 0.75 * notes_2 (since he spent 25%)\n    equation2 = Eq(0.6 * notes_10, (4/5) * (0.75 * notes_2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (notes_2, notes_10))\n\n    # Calculate the cost of the gift: 40% of the $10 notes and 25% of the $2 notes\n    spent_10_notes = 0.4 * solutions[notes_10] * 10\n    spent_2_notes = 0.25 * solutions[notes_2] * 2\n\n    gift_cost = spent_10_notes + spent_2_notes\n\n    return gift_cost\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for x in range(1, 50):\n        if (x ** 3 - 2) == int((x ** 3 - 2) ** 0.5 + 0.5) ** 2:\n            return x ** 3 - 2\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark = 26\n    sue = mark / 2\n    total = mark + sue\n    return total\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from itertools import combinations\n\ndef solution():\n    # Since each kid gets at least 2 oranges, we subtract these 6 oranges first\n    remaining_oranges = 13 - 3*2  # each child gets 2, so we deduct 6 first\n\n    # Now, distribute the remaining oranges such that each kid could get 0 or more\n    # Think of the problem as placing 2 separators in the 7 remaining spots\n    # number of ways to do this will be the same as the number of ways to choose 2 spots\n    # out of 7+2-1 (oranges + separators - 1)\n    num_ways = len(list(combinations(range(remaining_oranges + 2), 2)))\n    return num_ways\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = sum(range(1, 10)) + 7  # Ranges from 1 to 9 and an additional 7 for the repeated 7\n    return ans\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the two original numbers be x and y\n    x, y = symbols('x y')\n\n    # The sum of the two numbers is 11.63\n    equation1 = Eq(x + y, 11.63)\n\n    # Oliver accidentally shifted the decimal point in y one position to the left\n    # and got an answer of 5.87 instead.\n    equation2 = Eq(x + y/10, 5.87)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate 100 times the difference between the two numbers\n    difference = abs(solutions[x] - solutions[y]) * 100\n\n    return difference\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    ans = (7/8) * 32\n    return ans\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    return 342 // 6\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sally, john = symbols('sally john')  # Define symbols for Sally and John's ages\n    \n    # Equation 1: Sally will be 6 times older than John in 3 years\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    \n    # Equation 2: The sum of their ages is 50\n    equation2 = Eq(sally + john, 50)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sally, john))\n    \n    return solutions[sally]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # The first digit of a 4-digit number can't be 0\n            continue\n        paso = p*1000 + a*100 + s*10 + o\n        if p + a + s + o == (p*10 + a) - (s*10 + o):\n            return paso\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # In the given expression, we can multiply the terms in the parenthesis to get a telescoping product:\n    # Each term in the multiplication has the form (1 + 1/(2^(2^k)))\n    # Multiplied by the next one, we get a series of terms that cancels out as in a telescoping series:\n    # (1 + 1/2) * (1 + 1/4) * (1 + 1/16) * ... up to (1 + 1/(2^(2^2009)))\n    # Notice that when you multiply (1 + 1/(2^k)) by (1 + 1/(2^(2*k))), we get: 1 + 1/(2^k) + 1/(2^(2*k)) + 1/(2^(3*k))\n    # However, the following term (1 + 1/(2^(4*k))) cancels out the 1/(2^(2*k)) term, leaving behind:\n    # 1 + 1/(2^k) + 1/(2^(4*k))\n    \n    # Hence, the given product simplifies to:\n    # 1 + 1/2 + 1/(2^2) + 1/(2^4) + ... + 1/(2^(2^(2009))) = 2 * (1 - 1/(2^(2^n)))\n    \n    # We know that our sum of the fractions on the left should give a number less than 2,\n    # And it's also clear that the largest power of 2 in the denominator comes from the last fraction.\n    # Thus, we can infer that n is 2009, as that is the number we substitute to arrive at 2^(2^2009).\n    \n    n = 2009\n    return n\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n\n    equation1 = Eq(harry + liam, 640)\n    equation2 = Eq(harry + 90, 3 * (liam - 90))\n\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    first_day = 3\n    difference = 3\n    total_days = 7\n\n    total_questions = (2*first_day + difference*(total_days-1)) * total_days // 2\n\n    return total_questions\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # Rate at which the man drinks the orange juice alone\n    man_rate = 1 / 15\n    \n    # Rate at which the man and his wife together drink the orange juice\n    together_rate = 1 / 12\n    \n    # Rate at which the wife drinks the orange juice alone\n    wife_rate = together_rate - man_rate\n    \n    # Calculate the number of days the wife will take to finish the barrel of orange juice alone\n    wife_days = 1 / wife_rate\n    \n    return wife_days\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Since the increments between successive hours are consistent, we are dealing\n    # with an arithmetic sequence: 20, 28, 36. The common difference 'd' can be found by subtracting\n    # two consecutive terms.\n    difference = 28 - 20\n\n    # The sequence started at 7 o'clock and first counted sequence is at 9 o'clock,\n    # which is the third term in the sequence. We need to find the first term.\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d,\n    # we can find the first term by plugging in the third term's value and solving for a_1:\n    # a_3 = a_1 + (3 - 1) * d\n    third_term = 20\n    first_term = third_term - (3 - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2 ** 10) % 3\n    return remainder\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n    \n    ans = snake_length_cm / insect_length_cm\n    return ans\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from itertools import combinations\n\ndef solution():\n    white_balls, red_balls, black_balls = (9, 5, 6)\n    total_count = 0\n\n    for white_left in range(3, 9):\n        for red_left in range(2, 6):\n            for black_left in range(0, 4):\n                white_picked = white_balls - white_left\n                red_picked = red_balls - red_left\n                black_picked = black_balls - black_left\n                if white_picked + red_picked + black_picked == 10:\n                    total_count += (combinations(range(white_balls), white_picked) * \n                                    combinations(range(red_balls), red_picked) * \n                                    combinations(range(black_balls), black_picked))\n\n    return total_count\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1\n    largest = 0\n    adder = 2\n    while term < 100:\n        largest = term\n        term += adder\n        adder += 2\n    return largest\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    mean_three_numbers = 120\n    mean_four_numbers = 150\n\n    total_three_numbers = mean_three_numbers * 3\n    total_four_numbers = mean_four_numbers * 4\n\n    fourth_number = total_four_numbers - total_three_numbers\n\n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = initial_mass - given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    ans = 372 * 6\n    return ans\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We set up the congruences according to the given problem\n    # first_even % 7 == 0 -> first_even is a multiple of 7\n    # (first_even + 2) % 8 == 0 -> second even (which is first_even + 2) is a multiple of 8\n    # (first_even + 4) % 9 == 0 -> third even (which is first_even + 4) is a multiple of 9\n    congruences = [(0, 7), (2, 8), (4, 9)]\n\n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    first_even = solve_congruence(*congruences)[0]\n\n    # Calculating the sum of the three consecutive even numbers\n    total_sum = first_even + (first_even + 2) + (first_even + 4)\n\n    return total_sum\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let's denote the original number of pearls as 'x'\n    # According to the problem, half fell onto the floor, so we have x/2 pearls\n    # A fourth rolled under the chair, so we have x/4 pearls\n    # A sixth fell into her lap, so we have x/6 pearls\n    # And 3 pearls remained on the strand\n    # Combining these, we can form the following equation to represent the total:\n    # x/2 + x/4 + x/6 + 3 = x\n    # To solve for 'x', we'll find a common denominator and solve the algebraic equation\n    common_denom = 12  # Common denominator for 2, 4, and 6\n    x = symbols('x')\n    equation = Eq((x/2)*common_denom/2 + (x/4)*common_denom/4 + (x/6)*common_denom/6 + 3 * common_denom, x * common_denom)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n\n    mangoes_half_full_weight = half_full_weight - (full_weight - half_full_weight)\n    empty_basket_weight = mangoes_half_full_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    position_from_front = 6\n    position_from_back = 6\n    between_pip_and_bud = 5\n    \n    total_children = position_from_front + between_pip_and_bud + position_from_back - 1\n    return total_children\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruence equations\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    # Solve congruences using the Chinese Remainder Theorem\n    result, _ = solve_congruence(*congruences)\n    return result\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    # Find the common difference using the formula for the nth term of an arithmetic sequence:\n    # nth term = first_term + (n-1) * common_difference\n    common_difference = (fourth_term - first_term) // (4 - 1)\n\n    # Find the last term using the formula for the nth term of an arithmetic sequence:\n    last_term = first_term + (total_rows - 1) * common_difference\n\n    # Find the sum of the arithmetic sequence using the formula:\n    # sum = (number of terms / 2) * (first term + last term)\n    sum_of_sequence = (total_rows / 2) * (first_term + last_term)\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_family_age = 29 * 6\n    total_children_age = 64\n    total_parents_age = total_family_age - total_children_age\n    \n    # Since there are 6 family members and we subtracted the children, there must be 2 parents\n    number_of_parents = 6 - 4\n    \n    average_parents_age = total_parents_age / number_of_parents\n    average_parents_age_3_years_ago = average_parents_age - 3\n\n    return average_parents_age_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    days_spent = 5\n    target_total_paintings = 56\n    \n    paintings_per_day = total_paintings_done / days_spent\n    total_days_needed = target_total_paintings / paintings_per_day\n    \n    more_days_needed = total_days_needed - days_spent\n    return int(more_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    result = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    ans = result // 3\n    return ans\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n\n    leaves = pieces_of_paper // interval\n\n    return leaves\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    # a5 = a1 + 4d = 8 (where a1 is the first term, and d is the common difference)\n    # a12 = a1 + 11d = 50\n\n    # Solving the system of equations:\n    # a1 + 4d = 8 => a1 = 8 - 4d (Equation 1)\n    # a1 + 11d = 50 => 8 - 4d + 11d = 50 => 7d = 50 - 8 => 7d = 42\n\n    d = 42 / 7  # d is the common difference\n\n    return d\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    ans = 95 * (37 + 42 + 21)\n    return ans\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud, bob = symbols('pip bud bob')\n\n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n\n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest_number = min(numbers, key=lambda x: abs(x - 0.1))\n\n    return closest_number\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import combinations, permutations\n\ndef time_to_cross(people_times, direction='->'):\n    if direction == '->':\n        return max(people_times)  # Time taken by the slowest person when going\n    else:\n        return min(people_times)  # Time taken by the fastest person when returning\n\ndef solution():\n    people_times = [7, 9, 4, 10]\n    min_time = float('inf')\n\n    # Generate all possible pairs of people to cross the river\n    for pair in combinations(people_times, 2):\n        remaining = people_times.copy()\n\n        # Cross the river with the pair and remove them from the remaining list\n        first_cross_time = time_to_cross(pair, '->')\n        for p in pair:\n            remaining.remove(p)\n\n        # Return the fastest person with the boat\n        return_time = time_to_cross(pair, '<-')\n        remaining.append(min(pair))\n\n        # Generate permutations for the next two people to cross the river\n        for next_pair in permutations(remaining, 2):\n            last_remaining = remaining.copy()\n\n            # Cross the river with the next pair and remove them from the remaining list\n            second_cross_time = time_to_cross(next_pair, '->')\n            for p in next_pair:\n                last_remaining.remove(p)\n\n            # Return the fastest person with the boat\n            return_time += time_to_cross(next_pair, '<-')\n            last_remaining.append(min(next_pair))\n\n            # Last person crosses the river, no need to return the boat\n            third_cross_time = time_to_cross(last_remaining, '->')\n\n            # Calculate the total time taken for this scenario\n            total_time = first_cross_time + return_time + second_cross_time + third_cross_time\n\n            # Update the minimum time if the current scenario is better\n            min_time = min(min_time, total_time)\n\n    return min_time\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    return 29 + 37 + 76 + 63 + 24 + 45 + 61 + 55\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    # Let the length of the total journey be x meters\n    # The usual time taken for the journey is 30 minutes, or 0.5 hours\n    # Because Maria arrives 5 minutes late, the total time taken is 35 minutes, or 35/60 hours\n    # Let v be the usual speed (meters per minute)\n    # Then the usual speed is x / 30 minutes\n    # After the rain starts and the speed is reduced by 20%, the speed becomes 0.8 * v\n    # The time taken to cover 2400 meters after the rain starts is 2400 / (0.8 * v)\n    # The total time of the journey before rain starts is 35 minutes - time taken after rain starts, in minutes\n    # We can then set up the equation:\n    # time_before_rain + time_after_rain = 35 minutes\n    # (x - 2400) / v + 2400 / (0.8 * v) = 35\n    # We rearrange this equation to solve for x\n    # multiplying all terms by v to clear fractions gives\n    # (x - 2400) + 2400 / 0.8 = 35 * v\n    # x - 2400 + 3000 = 35v\n    # x + 600 = 35v\n    # x = 35v - 600\n    # now remember that v = x / 30\n    # substituting this back into the equation for x gives\n    # x = 35 * (x / 30) - 600\n    # Simplify and solve for x:\n    # 30x = 35x - 18000\n    # 5x = 18000\n    # x = 18000 / 5\n    # x = 3600 meters\n    return 3600\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n    total_children = jacob + sisters + brothers\n    return total_children\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    a1 = 2\n    d = 3\n    an = 242\n    \n    # Determine the number of terms in the original sequence\n    n = ((an - a1) // d) + 1\n    \n    # Calculate the sum of the first three terms\n    sum_of_first_three = a1 + (a1 + d) + (a1 + 2 * d)\n    \n    # Each time we erase the first three terms, we effectively remove 3 terms\n    while n > 3:\n        n -= 3\n        # We also update the first term of the sequence to be the next in line after removing three terms\n        a1 += 3 * d\n    \n    # The second number on the blackboard will be the first term plus the common difference\n    second_number = a1 + d\n    \n    return second_number\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    original_people = 5\n    original_days = 15\n    target_days = 7\n\n    # Work is the same in both cases, so people * days is constant\n    work = original_people * original_days\n\n    # We need to find out how many people would complete the work in target_days\n    people_needed = work / target_days\n\n    # We want to know how many MORE people are needed\n    additional_people = people_needed - original_people\n\n    # Since the number of people must be an integer, and we want at least that many,\n    # we round up if additional_people is not an integer\n    if additional_people > int(additional_people):\n        additional_people = int(additional_people) + 1\n    else:\n        additional_people = int(additional_people)\n\n    return additional_people\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    return round(final_value, 4)\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    # Let the original number of students in School A be 'a' and in School B be 'b'.\n    # According to the problem, we have two equations:\n    # a + b = 1050 (Total number of students)\n    # a - 20 = b + 10 (School A still has 10 more students than School B after transferring 20 students)\n    \n    # From the second equation, we can express 'a' in terms of 'b':\n    # a = b + 30\n    \n    # Now we replace 'a' from the first equation with the expression we found:\n    # b + 30 + b = 1050\n    \n    # Combine like terms to solve for 'b':\n    # 2b + 30 = 1050\n    # 2b = 1020\n    # b = 510\n    \n    # Now we can find 'a' using the value of 'b':\n    # a = b + 30\n    # a = 510 + 30\n    # a = 540\n    \n    # Thus, School A originally has 540 students.\n    return 540\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temperature = -3  # Temperature at 5:00 am\n    rate_of_increase = 2  # Celsius degrees increased per hour\n\n    # Calculate the elapsed time from 5:00 am to 10:30 am in hours\n    hours_elapsed = 5 + (30 / 60)\n\n    # Calculate the temperature increase\n    temperature_increase = rate_of_increase * hours_elapsed\n\n    # Calculate the temperature at 10:30 am\n    temperature_at_1030am = initial_temperature + temperature_increase\n\n    return temperature_at_1030am\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    remaining_after_A = x / 2 - 1\n    remaining_after_B = remaining_after_A / 2 - 2\n    remaining_after_C = remaining_after_B - (remaining_after_B / 3 + 3)\n\n    equation = Eq(remaining_after_C, 49)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Worst case: Darrell draws all the pencils of the other two colors first\n    blue_pencils = 3\n    green_pencils = 3\n    white_pencils = 3\n\n    # Drawing all blue and white pencils first\n    draws_without_green = blue_pencils + white_pencils\n\n    # He needs one more draw to be sure to get a green pencil\n    draws_to_get_green = draws_without_green + 1\n\n    return draws_to_get_green\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3 / 4\n    number_of_boys = total_students * fraction_boys\n    number_of_girls = total_students - number_of_boys\n    \n    return int(number_of_girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import factorint\n    \n    # Factorize 2240 to get its prime factors\n    factors = factorint(2240)\n    \n    # For 2240/n to be a square, each prime factor's exponent in n must be\n    # one less than an even number (to make the exponent in 2240/n even)\n    n = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            n *= prime\n            \n    return n\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(3, 5, 9, 3 * 7)\n    return ans\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    # Inclusion-Exclusion Principle for Two Sets\n    both_competitions = (math_students + art_students) - total_students\n    return both_competitions\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n    \n    # If every kid eats 18 candies, then 12 more candies are needed\n    equation1 = Eq(kids * 18, candies + 12)\n    \n    # If every kid eats 15 candies, the candies are just enough to be distributed to 2 more kids\n    equation2 = Eq(kids + 2, candies / 15)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 311):\n        for digit in str(number):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    # Let's denote the number of books on the top shelf as n.\n    # The following shelves will then have n + 3, n + 6, ..., up to the last shelf which will have n + 3*6 = n + 18 books.\n    # This forms an arithmetic sequence with the first term as n, the common difference as 3 and number of terms as 7.\n    # The sum of the books on the shelves should be equal to 280.\n\n    # Sum of an arithmetic sequence: S = n/2 * (2a + (n-1)d)\n    # Where n is number of terms, a is the first term, d is the common difference.\n    # We know the sum S = 280, n = 7, d = 3. We need to find a which is the number of books on the top shelf.\n\n    # Plugging everything into the formula: 280 = 7/2 * (2a + (7-1)*3)\n    # Simplifying: 280 = 7/2 * (2a + 18)\n    # Further simplifying: 80 = a + 9\n    a = (280 * 2) / 7 - 18\n\n    return int(a)\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n\n    avril_age_2_years_ago = avril_age_now - 2\n    dad_age_2_years_ago = dad_age_now - 2\n\n    age_difference_2_years_ago = dad_age_2_years_ago - avril_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    total_cost_for_eleven = cost_per_item * 11\n    return total_cost_for_eleven\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from math import sqrt, pow\n\n    expression = 16.7 - pow((-4.56)**2 - (8.1)**3 / (7.2)**3 / (-sqrt(6 + 3/4) - (-30.15)), 1/3)\n    ans = round(expression, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    oliver_age_now = 20\n    lin_age_now = 26\n    total_age_future = 48\n    years_later = (total_age_future - (oliver_age_now + lin_age_now)) / 2\n    return int(years_later)\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    total_distance = 440\n    ratio_jayden = 7\n    ratio_carter = 4\n    total_ratio = ratio_jayden + ratio_carter\n\n    # Distance covered by Jayden in one \"round\"\n    distance_by_jayden = (ratio_jayden / total_ratio) * total_distance\n\n    # Distance from A to the meeting point = Jayden's distance in one round\n    return distance_by_jayden\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_age, mrs_age = symbols('mr_age mrs_age')\n\n    equation1 = Eq((mr_age - 7) / (mrs_age - 7), 6/5)\n    equation2 = Eq(mr_age + mrs_age, 69)\n\n    solutions = solve((equation1, equation2), (mr_age, mrs_age))\n\n    return solutions[mr_age]\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    # Let x be the initial number of stickers John has\n    # Sam had 7y stickers and Peter had 5y stickers at first\n    # After giving 20% of their stickers, Sam has 7y - 0.2 * 7y = 5.6y stickers\n    # After giving 20% of their stickers, Peter has 5y - 0.2 * 5y = 4y stickers\n    # After receiving the stickers, John has x + 0.2 * 7y + 0.2 * 5y = x + 2.4y stickers\n    # We know John's stickers increased by 80%, so x + 2.4y = 1.8x, which simplifies to 2.4y = 0.8x\n    # We also know Sam has 20 stickers more than John in the end, so 5.6y = (x + 2.4y) + 20\n    # Let's solve these two equations to find the values of x and y\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    eq1 = Eq(2.4*y, 0.8*x)\n    eq2 = Eq(5.6*y, (x + 2.4*y) + 20)\n    solutions = solve((eq1, eq2), (x, y))\n    peter_Stickers = 5 * solutions[y]\n    \n    return peter_Stickers\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # Calculate the total score of the 5 students\n    total_score_5_students = 5 * 87\n\n    # Calculate the new total score including Jim's score for 6 students\n    total_score_6_students = 6 * 88\n\n    # Calculate Jim's score\n    jim_score = total_score_6_students - total_score_5_students\n\n    return jim_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6  # One-fifth of the length of the wood is 6cm\n    full_length = one_fifth_length * 5  # Calculate the full length of the wood\n    one_third_length = full_length / 3  # Calculate one-third of the full length\n    return one_third_length  # Return the one-third length of the wood\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    discount_first = 0.10\n    discount_second = 0.20\n\n    price_after_first_discount = initial_price * (1 - discount_first)\n    final_price = price_after_first_discount * (1 - discount_second)\n\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of baseball bats bought \n    x = symbols('x')\n    \n    # Initial Total Cost for x bats\n    total_cost = 135 * x\n    \n    # Revenue after selling (x - 3) bats\n    revenue = 185 * (x - 3)\n    \n    # Formulate the equation based on profit being total revenue - total cost\n    # Plus additional $2945 profit\n    equation = Eq(revenue, total_cost + 2945)\n    \n    # Solve for x\n    bats_bought = solve(equation, x)[0]\n    \n    return bats_bought\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    equation1 = Eq(raja - 286, kumar - 109)\n    equation2 = Eq(kumar - 109, 4 * (raja - 286))\n\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    total_boys = 47\n    capacity_minibus = 6\n    \n    number_of_minibusses = (total_boys + capacity_minibus - 1) // capacity_minibus\n    \n    return number_of_minibusses\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    # Given that triangle + triangle = square\n    equation1 = Eq(triangle + triangle, square)\n    \n    # Given that square + triangle = circle\n    equation2 = Eq(square + triangle, circle)\n    \n    # Given that diamond = circle + square + triangle\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solving the three equations to find the value of diamond in terms of triangle\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    # Number of triangles equal to diamond\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    chair_cost = symbols('chair_cost')\n    \n    # Create equation based on the problem statement\n    # Let's assume cost of chair is c. Therefore, cost of table is c + 160.\n    # Mrs Lim bought 1 table and 5 chairs: c + 160 + 5c = 328\n    # Simplify: 6c + 160 = 328\n    equation = Eq(6 * chair_cost + 160, 328)\n    \n    # Solve the equation\n    solved_values = solve(equation, chair_cost)\n    \n    # Get the cost of one chair\n    return solved_values[0]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    ans = 879 + 268\n    return ans\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the rate of the hot tap be \"h\" and the rate of the cold tap be \"c\".\n    h, c = symbols('h c')\n\n    # Since the cold tap is twice as fast as the hot tap, we have c = 2 * h.\n    equation1 = Eq(c, 2 * h)\n\n    # Both taps together fill the bath in 10 minutes, so their combined rate is 1/10 baths per minute.\n    equation2 = Eq(h + c, 1/10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (h, c))\n\n    # The time taken to fill the bath using just the cold tap is the inverse of its rate.\n    time_cold_tap = 1 / solutions[c]\n\n    return time_cold_tap\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    # Mean of all 10 numbers\n    mean_all = 1111\n    \n    # Total sum of all 10 numbers\n    total_sum = mean_all * 10\n    \n    # Let mean_last_6 be the mean of the last 6 numbers\n    # mean_last_6 - 240 = mean_first_4 \n    # mean_last_6 = mean of the sum of the last 6 numbers / 6\n    # mean_first_4 = mean of the sum of the first 4 numbers / 4\n    # sum_last_6 + sum_first_4 = total_sum\n    # (mean_last_6 * 6) + ((mean_last_6 - 240) * 4) = total_sum\n    # Solving for mean_last_6:\n    mean_last_6 = (total_sum + 240 * 4) / 10\n    \n    return mean_last_6\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money_p = 60\n    bud_money_pounds = 1.10\n    total_money_p = pip_money_p + (bud_money_pounds * 100)\n    ans = total_money_p / 100  # Converting the total back into pounds\n    return ans\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for Rachel's and Alice's candy\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces, they will have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n    # If Alice gives Rachel 10 pieces, Rachel will have 4 more than 3 times Alice's candy\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate the total number of candies they originally had\n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each letter\n    I, S, P = symbols('I S P', integer=True)\n\n    # Set up the equation according to the problem statement\n    equation = Eq(4 * (10 * I + S), 10 * P + I)\n\n    # Define the domain for our digits (1-9 for P and I since they can't be zero, 0-9 for S)\n    domain = {I: range(1, 10), S: range(0, 10), P: range(1, 10)}\n\n    # Search for the solution over the domain\n    for i in domain[I]:\n        for s in domain[S]:\n            for p in domain[P]:\n                # Since all digits must be different, skip if any are the same\n                if len({i, s, p}) == 3:\n                    res = solve(equation.subs({I: i, S: s, P: p}))\n                    if res:\n                        return 10 * p + i\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Jack's speed in the first stage = 7 m/s, distance = 280 m\n    time_first_stage = 280 / 7\n    \n    # Jack's speed in the middle stage = 5 m/s, distance = 400 m\n    time_middle_stage = 400 / 5\n    \n    # Jack's speed in the last stage = 8 m/s\n    # Total distance = 800 m, Distance covered in first two stages = 280 m + 400 m = 680 m\n    # Distance in last stage = 800 m - 680 m = 120 m\n    time_last_stage = 120 / 8\n    \n    # Total time\n    total_time = time_first_stage + time_middle_stage + time_last_stage\n    \n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    jocye_speed_ratio = 3\n    lori_speed_ratio = 2\n    lori_speed = 2 # meters per second\n    time = 10 # seconds\n\n    jocye_speed = (jocye_speed_ratio / lori_speed_ratio) * lori_speed\n    distance_jocye_runs = jocye_speed * time\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    final_value = round(final_value, 1)\n\n    return final_value\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    ans = 727 + 482\n    return ans\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    prob_living_over_20 = 0.6\n    prob_living_over_25_given_over_20 = 0.3 / prob_living_over_20\n    \n    return prob_living_over_25_given_over_20\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don's speed in metres per minute\n    total_distance = 780  # Total distance to the library in metres\n    meeting_point = 360  # Meeting point distance from home in metres\n\n    # Calculate the time taken for Don to walk to the meeting point\n    time_taken = meeting_point / don_speed\n    \n    # Since they meet at the same time, Danny covers the remaining distance to the meeting point in the same time\n    danny_distance_to_meeting = total_distance - meeting_point\n\n    # Calculate Danny's speed\n    danny_speed = danny_distance_to_meeting / time_taken\n\n    return danny_speed\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n\n    num_teams = 5\n    games_played = comb(num_teams, 2)\n\n    return games_played\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    total_digits = 792\n    digits_per_stage = [9, 180, 2700]  # 1-9, 10-99, 100-999\n    stages = [1, 2, 3]\n\n    current_stage = 0\n    while total_digits > digits_per_stage[current_stage]:\n        total_digits -= digits_per_stage[current_stage]\n        current_stage += 1\n\n    pages_in_stage = total_digits // stages[current_stage]\n\n    pages = 0\n    for stage in range(current_stage):\n        if stage == 0:\n            pages += 9\n        else:\n            pages += 90 * (10 ** (stage - 1))\n\n    pages += pages_in_stage + 1\n\n    return pages\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both = 21\n\n    only_one_event = rope_skipping + long_jump - (2 * both)\n\n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    # Convert all quantities to grams\n    flour_g = 1000 + 500       # 1 kg 500 g of flour\n    sugar_g = 1000 + 200       # 1 kg 200 g of brown sugar\n    butter_g = 900             # 900 g of butter\n    \n    # Calculate the total weight of the mixture\n    total_g = flour_g + sugar_g + butter_g\n    \n    # Divide the mixture into 8 cake tins\n    each_tin_g = total_g / 8\n    \n    return each_tin_g\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(j/i for i in range(2, 11) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B have two choices, either they stand on the right or the left.\n    AB_positions = 2\n\n    # After deciding where A and B will stand, there are 2 options left for C and D\n    # They can either line up as C-D or D-C\n    CD_permutations = 2\n\n    # The total number of different ways they can line up is the product of their individual possibilities.\n    num_ways = AB_positions * CD_permutations\n\n    return num_ways\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    return (20 * 27) // 30\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # Worst case for not getting 4 marbles of the same color:\n    # Take 3 red, 3 blue and 3 green. That's 3 * 3 = 9.\n    # The next marble would ensure 4 of the same color.\n    return 3 * 3 + 1  # 3 colors * 3 marbles/color + 1\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    from itertools import permutations\n    digits = '123'\n    perm = permutations(digits, 2)\n    return len(list(perm))\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    even_digits = [d for d in digits if d % 2 == 0]\n    odd_digits = [d for d in digits if d not in even_digits]\n\n    even_digits.sort()\n    odd_digits.sort()\n\n    if len(even_digits) == 0:  # If there are no even digits, we cannot form a 4-digit even number\n        return None\n\n    smallest_even_digit = even_digits[0]\n    remaining_digits = [d for d in digits if d != smallest_even_digit]\n    remaining_digits.sort()\n\n    smallest_number = remaining_digits[0] * 1000 + remaining_digits[1] * 100 + remaining_digits[2] * 10 + smallest_even_digit\n\n    return smallest_number\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 7 == 5 and num % 13 == 11:\n            return num\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n\n    days_for_1_worker = workers * days_for_3_workers\n\n    return days_for_1_worker\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    # Let A = 10x + y\n    # Let B = 200 + 20x + y\n    # According to the given condition B = 6A + 25\n    # So we have 200 + 20x + y = 60x + 6y + 25\n    # By rearranging the terms: 200 + 20x + y - 60x - 6y = 25\n    # Simplify it: 175 - 40x + 5y = 0 -> 35 = 40x - 5y\n    # Further simplify: 7 = 8x - y\n    # Since B is a valid two-digit number and x, y are digits, x can vary from 1 to 9\n    # and y can vary from 0 to 9. We will try to find a pair (x,y) that satisfies the equation.\n    for x in range(1, 10):\n        for y in range(0, 10):\n            if 8 * x - y == 7:\n                A = 10 * x + y\n                return A\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Define the original expression parts\n    a = 285\n    b = 15\n    c = 5\n    d = 2\n\n    # Different combinations of placing brackets\n    results = set([\n        a + b / c - d,\n        a + (b / c) - d,\n        (a + b) / c - d,\n        a + b / (c - d),\n        (a + b / c) - d,\n        a + (b / (c - d)),\n        (a + b) / (c - d),\n        ((a + b) / c) - d,\n        a + ((b / c) - d)\n    ])\n    \n    # Return the number of unique results\n    return len(results)\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    num_rows = 3\n\n    pupils_per_row = total_pupils // num_rows\n\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2*a + b, 18)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    lockers = [False] * 100  # False indicates unlocked, True indicates locked\n\n    # Process for the number 3\n    for i in range(2, 100, 3):  # Starting at 2 because lockers are 0-indexed\n        lockers[i] = not lockers[i]  # Those divisible by 3 will toggle their lock state\n\n    # Process for the number 5\n    for i in range(4, 100, 5):  # Starting at 4 because lockers are 0-indexed\n        lockers[i] = not lockers[i]  # Those divisible by 5 will toggle their lock state\n\n    # Count how many lockers are unlocked\n    unlocked_count = lockers.count(False)\n\n    return unlocked_count\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    total_ways = 0\n    for p in permutations(\"BCDEFG\"):\n        for i in range(7):\n            # Insert A in the middle of B and C\n            lineup = list(p[:i]) + ['A'] + list(p[i:])\n            if 'DE' not in ''.join(lineup) and 'ED' not in ''.join(lineup) \\\n               and ('FG' in ''.join(lineup) or 'GF' in ''.join(lineup)):\n                if (lineup.index('A') - lineup.index('B')) * (lineup.index('A') - lineup.index('C')) < 0:\n                    total_ways += 1\n    return total_ways\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    nicolas_current_level = 4\n    yiding_current_level = 3\n\n    nicolas_target_level = 16\n    speed_ratio = yiding_current_level / nicolas_current_level\n    \n    yiding_target_level = nicolas_target_level * speed_ratio\n\n    return int(yiding_target_level)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x') # x is the cost of one cake\n    # Equation for borrowing $11 when buying 10 cakes\n    equation1 = Eq(10 * x - 11, 0)\n    # Equation for borrowing $26 when buying 13 cakes\n    equation2 = Eq(13 * x - 26, 0)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x))\n\n    # The cost of one cake is the solution for x\n    cost_of_one_cake = solutions[x]\n\n    return cost_of_one_cake\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    boys_average = 50\n    girls_average = 40\n    boys_count = 4\n    girls_count = 6\n\n    total_mass = (boys_average * boys_count) + (girls_average * girls_count)\n    total_count = boys_count + girls_count\n\n    average_mass = total_mass / total_count\n\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = divisor * quotient + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    number1 = 4.6\n    number2 = 13.8\n    ans = (number1 + number2) / 2\n    return ans\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    total_runs = total_matches * 40  # mean score multiplied by number of matches\n    known_scores_sum = 37 + 53 + 29 + 41\n    x = total_runs - known_scores_sum\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "def solution():\n    from math import factorial\n\n    total_letters = len(\"CHEESE\")\n    count_C = \"CHEESE\".count('C')\n    count_H = \"CHEESE\".count('H')\n    count_E = \"CHEESE\".count('E')\n    count_S = \"CHEESE\".count('S')\n\n    ans = factorial(total_letters) // (factorial(count_C) * factorial(count_H) * factorial(count_E) * factorial(count_S))\n\n    return ans\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Total number of three digit numbers (100-999)\n    \n    no_sevens = 8 * 9 * 9  # Numbers without any sevens\n    \n    exactly_one_seven = (1 * 9 * 9) + (1 * 8 * 9) + (1 * 8 * 8)  # One 7 in each position (7xx, x7x, xx7)\n    \n    at_least_two_sevens = total_three_digit_numbers - no_sevens - exactly_one_seven\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    total_animals_initial, cows_initial, goats_initial = symbols('total_animals_initial cows_initial goats_initial')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(cows_initial, 0.65 * total_animals_initial)  # 65% of the animals were cows initially\n    equation2 = Eq(goats_initial, 0.35 * total_animals_initial)  # Rest were goats initially\n    equation3 = Eq(cows_initial + 240, 0.85 * (total_animals_initial + 240))  # Percentage of cows increased by 20% to 85% after addition\n    equation4 = Eq(goats_initial * 2, (total_animals_initial + 240) - (cows_initial + 240))  # The number of goats doubled\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total_animals_initial, cows_initial, goats_initial))\n    \n    return solutions[goats_initial]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for num in range(10000, 100000):  # loop over possible five-digit numbers\n        original_num = int(str(num) + '9')  # append '9' to make the six-digit number\n        new_num = int('9' + str(num))       # prepend '9' to move it to the start\n\n        if new_num == 4 * original_num:     # check if the new number is four times the original\n            return original_num             # return the original six-digit number if condition is met\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, jonathan = symbols('abigail jonathan')\n    equation1 = Eq(abigail, jonathan + 6)\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n\n    solutions = solve((equation1, equation2), (abigail, jonathan))\n\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    # Work rate of Alice\n    alice_work_rate = 1 / 40\n    # Work rate of Bob\n    bob_work_rate = 1 / 60\n    # Total work rate when both are working\n    total_work_rate = alice_work_rate + bob_work_rate\n\n    # Equation to represent total work done is total time worked * combined work rate\n    # total_work_done = alice_days_worked * alice_work_rate + bob_days_worked * bob_work_rate\n    # Since Alice takes some days off, let x be the number of days she takes off.\n\n    # Bob works all 27 days, but Alice works (27 - x) days\n    alice_days_worked = 27 - symbols('x')\n    \n    # Create an equation where total work done equals 1 (since the job is completed)\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((27 - x) * alice_work_rate + 27 * bob_work_rate, 1)\n    days_off = solve(equation, x)\n\n    return days_off[0]\n    \nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a - b\n\n    return new_operation(4, 3) - new_operation(3, 4)\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A == 0 or C == 0:\n            continue\n        num1 = A * 101 + B * 10\n        num2 = C * 101 + D * 10\n        if num1 + num2 == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip - bud, 2)\n    equation2 = Eq(pip + bud, 10)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations for the cost of an apple and a banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost = 5 * solutions[banana]\n\n    return cost\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    percentage_increase = ((final_amount - initial_amount) / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the number of days within which the book should be finished\n    # Let p be the number of pages in the storybook\n    d, p = symbols('d p')\n    \n    # Equation for reading 30 pages a day and finishing 2 days late\n    eq1 = Eq(30 * (d + 2), p)\n    # Equation for reading 39 pages a day and finishing 4 days early\n    eq2 = Eq(39 * (d - 4), p)\n    \n    # Solve the system of equations\n    solution = solve((eq1, eq2), (d, p))\n    \n    # Number of days and number of pages\n    num_days = solution[d]\n    num_pages = solution[p]\n\n    return num_days, num_pages\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    # The sequence 2, 0, 2, 0, 0, 2 repeats every 6 digits\n    sequence_length = 6\n    # Count the number of 2's in one complete sequence\n    number_of_twos_in_sequence = 3\n    \n    # Find how many complete sequences are there in 535 digits\n    complete_sequences = 535 // sequence_length\n\n    # Find the total number of 2's in complete sequences\n    total_twos = complete_sequences * number_of_twos_in_sequence\n\n    # Find the remaining digits after the last complete sequence\n    remaining_digits = 535 % sequence_length\n    \n    # Check how many 2's are there in the remaining part of the sequence\n    remaining_sequence = [2, 0, 2, 0, 0, 2][:remaining_digits]\n    total_twos += remaining_sequence.count(2)\n\n    return total_twos\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = 36 * 37 * 38 * 39 * 40 * 41\n    remainder = product % 7\n    return remainder\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    value = (1000 + 2000 + 2100) / 17\n    return value\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_away_cookies = 55\n\n    remaining_cookies = (morning_cookies + afternoon_cookies) - given_away_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    result = 3102 // 6\n    return result\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    # Let x be the initial total number of coins Owen had\n    # Let f be the initial number of fifty-cent coins\n    # Using the conditions given, we can write the following equations:\n    # f = 2/7 * x (since 2/7 of the coins were fifty-cent coins)\n    # x - f = 5/7 * x (since the rest are one-dollar coins)\n    \n    # After his mother gave him coins:\n    # He received 10 one-dollar coins and 5 dollars worth fifty-cent coins, which is 10 fifty-cent coins\n    # Therefore, the new number of fifty-cent coins is f + 10 and the new number of one-dollar coins is 5/7*x + 10\n    # According to the last condition, the number of one-dollar coins is twice the number of fifty-cent coins\n    # Hence, we get the equation: 5/7*x + 10 = 2(f + 10)\n    \n    # Solving the two equations for x and f:\n    x = symbols('x')\n    f = 2/7 * x\n    equation = Eq(5/7*x + 10, 2*(f + 10))\n    \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    # Let 'a' be the number of adult tickets, and 'c' be the number of child tickets.\n    # We have two equations based on the problem statement:\n    # Equation 1: 5a + 3c = 75 (Total amount for sales of tickets)\n    # Equation 2: a + c = 19 (Total number of tickets sold)\n\n    # We will use these equations to solve for 'a' and 'c'.\n    # From Equation 2, we can express 'c' in terms of 'a': c = 19 - a.\n    # Substitute 'c' in Equation 1 to solve for 'a':\n    # 5a + 3(19 - a) = 75\n    # 5a + 57 - 3a = 75\n    # 2a = 18\n    # a = 9\n\n    # Number of adult tickets sold is 'a'\n    a = (75 - 3 * 19) // 2\n    return a\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    # Calculate how much more does the dress cost than the shirt\n    more_cost = solutions[dress] - solutions[shirt]\n    return more_cost\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's say Anna, Betsy and Charlene initially had A, B and C marbles respectively.\n    A, B, C = symbols('A B C')\n    \n    # Total marbles equation\n    total_marbles_eq = Eq(A + B + C, 168)\n    \n    # After Charlene gives 15 marbles to Betsy: B = B + 15, C = C - 15\n    charlene_gives_eq = Eq(C, B + 15)\n    \n    # After Betsy gives 8 marbles to Anna: A = A+8, B = B - 8\n    betsy_gives_eq = Eq(B - 8, A + 8)\n    \n    # Final ratio equation: A:B:C = 2:5:7\n    ratio_eq = Eq(2*B, 5*A) & Eq(2*C, 7*A)\n    \n    # Solve the system of equations\n    solutions = solve((total_marbles_eq, charlene_gives_eq, betsy_gives_eq, ratio_eq), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # From the given examples, we can infer a potential pattern for the operation Delta.\n    # Let's check if there's a relationship between the numbers and results.\n    # We will do this by checking the differences between the products of the numbers\n    # and the given Delta results to find a consistent pattern.\n\n    # For 4 Delta 1 = 17, if we take the product of 4 and 1, we get 4. The difference is 17 - 4 = 13\n    # For 5 Delta 4 = 29, the product is 5 * 4 = 20. The difference is 29 - 20 = 9\n    # For 8 Delta 16 = 80, the product is 8 * 16 = 128. The difference is 80 - 128 = -48\n    \n    # Let's check the second differences between the products and the actual results\n    # For the first and second, we have 13 - 9 = 4\n    # For the second and third, we have 9 - (-48) = 57\n    \n    # The differences do not show a consistent pattern. However, another approach would be\n    # to look at the operations as (N1 * N2) +/- X, where X is a number to be found.\n    \n    # By examining the given equation, we can also infer that:\n    # (First number squared) - (Second number) = result of Delta operation\n    \n    # Let's verify our hypothesis with the known values\n    # (4^2) - 1 = 16 - 1 = 15 (which is incorrect as it does not equal 17)\n    # (5^2) - 4 = 25 - 4 = 21 (which is incorrect as it does not equal 29)\n    # (8^2) - 16 = 64 - 16 = 48 (which is incorrect as it does not equal 80)\n    \n    # Thus our hypothesis is incorrect based on the provided examples.\n    # So we need to find another pattern that can result in the outputs based on the inputs.\n    \n    # Since the direct operations do not seem to work, let's try combining the numbers in a different way.\n    # We can consider that Delta operation may involve both addition and multiplication in some form.\n    # For instance, a combination of multiplying the first number by a certain factor and adding the second number.\n    \n    # Let's assume the Delta operation is defined as follows:\n    # A Delta B = (A squared) - (A * B) + (B squared)\n    # We can now test this with the known values.\n    \n    op1 = (4**2) - (4 * 1) + (1**2)  # Should result in 17\n    op2 = (5**2) - (5 * 4) + (4**2)  # Should result in 29\n    op3 = (8**2) - (8 * 16) + (16**2)  # Should result in 80\n    # Let's check if they are true\n    if op1 == 17 and op2 == 29 and op3 == 80:\n        # Seems our assumption is correct, now apply it to find 10 Delta 9\n        ans = (10**2) - (10 * 9) + (9**2)\n        return ans\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_savings = 7\n    andy_total_savings = 378\n    brenda_daily_savings = 6\n    \n    days_andy_saved = andy_total_savings // andy_daily_savings\n    brenda_total_savings = brenda_daily_savings * days_andy_saved\n    \n    return brenda_total_savings\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    # Let x be the number of correct answers and (10 - x) be the number of incorrect or skipped questions\n    # 6*x = points for correct answers\n    # 2*(10 - x) = points lost for incorrect or skipped answers\n    # Total points is the difference between points obtained for correct answers and points lost\n    # 6*x - 2*(10 - x) = 44\n\n    # We will find x by simplifying the above equation\n    # 6x - 20 + 2x = 44\n    # 8x = 44 + 20\n    # 8x = 64\n    # x = 64 / 8\n    # x = 8\n\n    # Eddie answered 8 questions correctly\n    num_correct = 8\n    return num_correct\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original volume of the cuboid (V_original) can be considered as 100%\n    # because we need to find the new volume as a percentage of the original volume.\n    V_original = 100  # Let's assume the original volume is 100 units.\n\n    # If the length is increased by 10%, the new length is 110% of the original length.\n    new_length_percentage = 110\n\n    # If the breadth is reduced to 4/5 of the original breadth, the new breadth is 80% of the original breadth.\n    new_breadth_percentage = 80\n\n    # If the ratio of the new height to the original height is 11:10, the new height is 110%\n    # of the original height.\n    new_height_percentage = 110\n\n    # Calculate the new volume as a percentage of the original volume.\n    new_V_percentage = (new_length_percentage / 100) * (new_breadth_percentage / 100) * (new_height_percentage / 100) * V_original\n\n    return new_V_percentage\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    num_contestants = 8\n    ans = factorial(num_contestants) // factorial(num_contestants - 3)\n\n    return ans\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_triangles = comb(num_points, 3)\n    return num_triangles\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    return (30+40+50) * 3\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = 360 * 100 / remaining_work_percentage\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour + 26, second_hour)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # The problem can be rephrased as distributing 40 questions among 5 students,\n    # such that each one gets a unique number of questions and at least 1 question.\n    # For Noa to solve the maximum number of questions, the other four classmates\n    # should solve the least number of questions possible.\n\n    # Since each one has to solve at least one question and they must have a different count,\n    # the minimum questions the other four can solve are 1, 2, 3, and 4 respectively.\n    # This is a total of 1 + 2 + 3 + 4 questions.\n\n    # Calculate the remaining questions for Noa\n    remaining_questions = 40 - (1 + 2 + 3 + 4)\n\n    # Noa solves the remaining questions.\n    return remaining_questions\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    scan, ted = symbols('scan ted')\n    now_ratio = Eq(scan, ted / 4)\n    future_ratio = Eq((scan + 4), (ted + 4) / 3)\n    \n    current_ages = solve((now_ratio, future_ratio), (scan, ted))\n    \n    scan_age = current_ages[scan]\n    ted_age = current_ages[ted]\n    \n    # s/t = 1/9 where s = scan_age - x and t = ted_age - x\n    # solve for x\n    years_ago, = symbols('years_ago')\n    past_ratio = Eq((scan_age - years_ago) / (ted_age - years_ago), 1/9)\n    years_ago_solution = solve(past_ratio, years_ago)\n    \n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    ans = 52.8 * 7\n    return ans\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Jogging time is from 6:30 AM to 7:30 AM which is 1 hour\n    jogging_time = 1  # in hours\n    # Walking time is from 7:30 AM to 9:30 AM which is 2 hours\n    walking_time = 2  # in hours\n\n    # Speed while jogging\n    jogging_speed = 6.5  # in miles per hour\n    # Speed while walking\n    walking_speed = 4.5  # in miles per hour\n\n    # Distance = Speed * Time\n    # Calculate the total distance traveled while jogging\n    distance_jogging = jogging_speed * jogging_time\n    # Calculate the total distance traveled while walking\n    distance_walking = walking_speed * walking_time\n\n    # Total distance traveled is the sum of distances while jogging and walking\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    return round(4321, -3)\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    return 200 * 30 * 60\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    non_foldable, foldable = symbols('non_foldable foldable')\n\n    # Total number of bicycles before sale\n    total_bicycles = 476\n\n    # Number of bicycles sold\n    bicycles_sold = 208\n\n    # Equations based on the problem statement\n    # non_foldable + foldable = total_bicycles\n    equation1 = Eq(non_foldable + foldable, total_bicycles)\n    \n    # (5/9) * non_foldable + (4/7) * foldable = total_bicycles - bicycles_sold\n    equation2 = Eq((5/9) * non_foldable + (4/7) * foldable, total_bicycles - bicycles_sold)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (non_foldable, foldable))\n\n    # Calculate the number of foldable bicycles sold\n    foldable_sold = solutions[foldable] - (4/7) * solutions[foldable]\n\n    return int(foldable_sold)\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    day_distance = 10\n    snail_position = 0\n    day_count = 0\n    \n    while True:\n        day_count += 1\n        snail_position += day_distance\n        if snail_position >= height:\n            break\n        night_distance = day_count\n        snail_position -= night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    mollies = 276\n    goldfish = mollies / 2\n    guppies = goldfish / 2\n    \n    ans = mollies - guppies\n    return ans\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3  # cm per meter\n    real_tree_height_m = 12  # meters\n    real_tree_height_cm = real_tree_height_m * 100  # convert meters to centimeters\n    model_tree_height_cm = real_tree_height_cm * scale_ratio  # calculate the model tree height\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # If each of the 20 students gets at most 2 pieces of candy,\n    # then the maximum number of candies that can be distributed in this way is 20 * 2 = 40.\n    # According to the Pigeonhole Principle, to ensure at least one student gets at least 3 pieces,\n    # we need to add 1 more piece of candy to the total of 40.\n    return 20 * 2 + 1\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    num = 20\n    factors = set()\n    \n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n            \n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    correct_mark = 8\n    wrong_mark = -4\n    total_score = 100\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_mark + wrong_answers * wrong_mark\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_fraction = 1 - 5/8\n    remaining_weight = 6000\n    \n    original_weight = remaining_weight / remaining_fraction\n    return original_weight\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # To maximize the number of socks taken before getting a pair of white socks,\n    # Yohan could take all red and black socks first.\n    red_socks = 10\n    black_socks = 10\n    \n    # After taking all red and black socks, the next two socks he takes must be white\n    # to form a pair of white socks.\n    white_pair = 2\n    \n    # Calculate the maximum number of socks taken before getting a pair of white socks\n    max_socks = red_socks + black_socks + white_pair\n    \n    return max_socks\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    return 765 * 60 / 100\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamp_posts = 3\n\n    # Number of intervals between lamp posts\n    num_intervals = total_flowers / flowers_between_lamp_posts\n\n    # Number of lamp posts is one more than the number of intervals\n    num_lamp_posts = num_intervals + 1\n\n    # Total length of the road is 50m\n    road_length = 50\n\n    # Distance between every 2 lamp posts\n    distance_between_lamp_posts = road_length / num_intervals\n\n    return distance_between_lamp_posts\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    ans = 3 * 126\n    return ans\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    left_of_favorite = 6\n    right_of_favorite_inclusive = 14\n    total_books = left_of_favorite + right_of_favorite_inclusive\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    temp_difference = 17\n\n    final_temp = initial_temp - temp_difference\n\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    length_of_road = 150\n    distance_between_trees = 10\n\n    num_trees = (length_of_road // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    ans = 48 * (5/4)\n    return ans\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    term_position = 5\n    \n    fifth_number = first_number * (ratio ** (term_position - 1))\n    return fifth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    ans = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return ans\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    sweets_total = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_for_friends = (sweets_total - sweets_for_sister) // number_of_friends\n\n    return sweets_for_friends\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Start by assuming the maximum number of apples the last child can get\n    # and decrease until the sum equals 19 while satisfying the distinct condition\n    for max_apples in range(19, 0, -1):\n        apples = max_apples\n        remaining = 19 - apples\n        count = 1\n        # Start assigning apples to the rest of the children\n        while apples > 0 and count < 5:\n            apples -= 1\n            remaining -= apples\n            count += 1\n        # If 4 children have been given distinct apples and the sum is 19, break\n        if remaining > 0 and count == 5:\n            return max_apples\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12  # Length of the square lawn\n    border_distance = 1.5  # Distance from the edge of the garden\n    bush_distance = 3  # Distance between neighbouring rosebushes\n\n    # Effective side length after accounting for border on both sides\n    effective_length = side_length - 2 * border_distance\n\n    # Calculate how many bushes can be planted along one side of the effective length\n    bushes_per_side = effective_length // bush_distance\n\n    # Total bushes required for the perimeter would be bushes per side times four sides\n    # Since each corner bush is counted twice, we subtract 4 to account for this\n    total_bushes = bushes_per_side * 4 - 4\n\n    return int(total_bushes)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # Calculate the work done by P and Q per day\n    p_work_per_day = 1 / 12\n    q_work_per_day = 1 / 8\n\n    # Calculate the work done by Q in 8 hours\n    q_work_per_day_8_hours = q_work_per_day * (8 / 10)\n\n    # Total work done by P and Q in 8 hours per day\n    total_work_per_day = p_work_per_day + q_work_per_day_8_hours\n\n    # Total days needed to complete the job when both work together\n    total_days = 1 / total_work_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    faster_van_speed = 132  # speed of the faster van in km/h\n    slower_van_speed = 78   # speed of the slower van in km/h\n    time = 8                # time in hours after which we want to find the distance apart\n    \n    distance_apart = (faster_van_speed + slower_van_speed) * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    remaining_masks = 360\n\n    total_masks = remaining_masks / (remaining_work_percentage / 100)\n\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be Pinkie's original score\n    x = symbols('x')\n    \n    # Setup the equation\n    equation = Eq(x - 30, (x / 2) + 10)\n    \n    # Solve the equation\n    score = solve(equation, x)\n    \n    return score[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    num_apples = 78\n    from sympy import divisors\n    \n    # Get all divisors of the number of apples\n    all_divisors = divisors(num_apples)\n    \n    # Filter out the odd divisors since we want even numbers of bags\n    even_divisors = [d for d in all_divisors if d % 2 == 0]\n    \n    # Exclude the scenario where there's only one bag since that's not a division\n    ways_to_divide = len(even_divisors) - 1 if 1 in even_divisors else len(even_divisors)\n    \n    return ways_to_divide\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Number of goats that can be exchanged for 9 rabbits\n    goats_for_rabbits = 3\n    # Number of cows that can be exchanged for 2 goats\n    cows_for_goats = 4 / 2\n    \n    # Calculate the number of rabbits that can be exchanged for 1 goat\n    rabbits_per_goat = 9 / goats_for_rabbits\n    \n    # Calculate the number of rabbits that can be exchanged for 2 cows\n    rabbits_for_cows = cows_for_goats * rabbits_per_goat\n    \n    return rabbits_for_cows * 2  # Multiply by 2 because the question asks for 2 cows\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    score = 168\n\n    # Let x be the number of correct answers.\n    # Then attempted - x is the number of wrong answers.\n    # 4x - (attempted - x) = score\n    # 5x - attempted = score\n    # x = (score + attempted) / 5\n\n    correct_answers = (score + attempted) // 5\n    return correct_answers\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Initial ratios\n    ratio_pencils = 4\n    ratio_pens = 5\n\n    # Ratios after the change\n    new_ratio_pencils = 7\n    new_ratio_pens = 8\n\n    # Since one pen is replaced with one pencil, the total number of items remains the same\n    # Let x be the common multiplier of the pencils and pens\n    # Therefore, initial number of pencils = 4x and pens = 5x\n    # After replacing, pencils = 4x + 1 and pens = 5x - 1\n    # The new ratio is 7 : 8\n\n    # Using the cross multiplication method for ratios:\n    # (4x + 1)/7 = (5x - 1)/8\n    # 32x + 8 = 35x - 7\n    # 3x = 15\n    # x = 5\n    \n    x = 5\n    \n    # Total number of pencils and pens initially was 9x\n    total_items = 9 * x\n\n    return total_items\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    num_terms = 10\n\n    total_seats = num_terms / 2 * (2 * first_term + (num_terms - 1) * common_difference)\n    return int(total_seats)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def new_operation(a, b):\n        return a * b - 5 * a + 8\n\n    # Start with the right-most operation and successively apply the operation to the left\n    result = new_operation(5, 4)\n    result = new_operation(6, result)\n    result = new_operation(7, result)\n    result = new_operation(8, result)\n    result = new_operation(9, result)\n    result = new_operation(10, result)\n\n    return result\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    # Total planned profit is 60%, but he actually achieved only 80% of that, so the actual profit is 48%\n    actual_profit_percentage = 60 * 0.8\n\n    # He sold 70% of his books at a profit of 60%\n    first_day_profit_percentage = 70 * 0.6\n\n    # The remaining 30% of books need to account for the remaining profit percentage:\n    # actual_profit_percentage - first_day_profit_percentage\n    remaining_profit_percentage = actual_profit_percentage - first_day_profit_percentage\n\n    # The discount rate on the second day is the negative profit we are looking for\n    # remaining_profit_percentage is the profit on the remaining 30% of books\n    # Let's denote the discount rate as x:\n    # 30 * (1 + x/100) = remaining_profit_percentage\n    discount_rate = (remaining_profit_percentage / 30) - 1\n\n    # Convert the rate to a percentage\n    discount_rate_percentage = discount_rate * 100\n\n    return discount_rate_percentage\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    boys_percentage = 40\n    girls = 72\n    girls_percentage = 100 - boys_percentage\n    total_children = (girls * 100) / girls_percentage\n    \n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    strawberries_eaten = 73\n    strawberries_bought = 52\n\n    final_strawberries = initial_strawberries - strawberries_eaten + strawberries_bought\n\n    return final_strawberries\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # Newspaper pages are usually printed on both sides, \n    # which means two consecutive numbers are on one sheet: \n    # n and n+1. Since the last page number before the missing pages\n    # is 14, the first missing page is 15, on the same sheet as 16.\n    # Similarly, the first page number after the missing pages\n    # is 35, which shares a sheet with page 34.\n    # So the range of missing pages is 15 to 34, inclusive.\n\n    # Calculate the number of missing page numbers:\n    first_missing_page = 15\n    last_missing_page = 34\n    missing_pages = last_missing_page - first_missing_page + 1\n\n    # Calculate the number of missing sheets:\n    # Each sheet has 2 pages, so divide by 2.\n    # Use ceil to account for a possibly odd starting page number.\n    from math import ceil\n    missing_sheets = ceil(missing_pages / 2)\n    \n    return missing_sheets\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tuna_price, curry_price = symbols('tuna_price curry_price')\n    total_tuna = 12 * tuna_price\n    total_curry = 19 * curry_price\n    price_difference = Eq(tuna_price - curry_price, 0.20)\n    total_cost = Eq(total_tuna + total_curry, 39.60)\n\n    solutions = solve((price_difference, total_cost), (tuna_price, curry_price))\n\n    return solutions[tuna_price]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    odd_digits = [digit for digit in digits if digit % 2 != 0]\n    all_combinations = 0\n\n    for tens_digit in digits:  # Choosing the tens digit\n        if tens_digit == 0:\n            continue  # A two-digit number can't have 0 as the tens digit\n        for ones_digit in odd_digits:  # Choosing the ones digit, which has to be odd\n            all_combinations += 1\n\n    return all_combinations\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for number in range(1, 500):\n        if number % 5 == 1 and number % 8 == 4 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    for boys in range(38 + 1):\n        girls = 38 - boys\n        balloons = boys * 2 + girls * 4\n        if balloons == 126:\n            return boys\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    first_number = 10\n    last_number = 25\n    total_numbers = last_number - first_number + 1\n    return total_numbers\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define symbols\n    total_animals_initial, cows_initial, goats_initial = symbols('total_animals_initial cows_initial goats_initial')\n\n    # Equations based on the problem statement\n    eq1 = Eq(cows_initial, 0.65 * total_animals_initial)  # 65% of initial animals were cows\n    eq2 = Eq(goats_initial, total_animals_initial - cows_initial)  # The rest were goats\n    eq3 = Eq(cows_initial + 240, 0.85 * (total_animals_initial + 240))  # Cows increase by 20% when 240 animals are added\n    eq4 = Eq(2 * goats_initial, (total_animals_initial + 240) - (cows_initial + 240))  # Number of goats doubled\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3, eq4), (total_animals_initial, cows_initial, goats_initial))\n\n    # Return the number of goats initially\n    return solutions[goats_initial]\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    product = 1\n    for i in range(3, 20, 2):\n        product *= (1 + 2/i)\n\n    return product\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    total_length_needed_cm = 400 * 85  # Total length needed in centimeters\n    roll_length_cm = 20 * 100          # Length of one roll in centimeters\n    \n    # Calculate the number of rolls needed\n    rolls_needed = total_length_needed_cm / roll_length_cm\n    \n    # Since we can't buy a fraction of a roll, we need to round up\n    rolls_needed = -(-rolls_needed // 1)  # This is a trick to round up a float\n    \n    return int(rolls_needed)\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Emma and John's ages now\n    emma_age_now, john_age_now = symbols('emma_age_now john_age_now')\n\n    # Equation 1: In 3 years, the sum of their ages will be 27\n    equation1 = Eq((emma_age_now + 3) + (john_age_now + 3), 27)\n    \n    # Equation 2: John is 7 years older than Emma\n    equation2 = Eq(john_age_now, emma_age_now + 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (emma_age_now, john_age_now))\n\n    return solutions[emma_age_now]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(40):\n        if cookies % 6 == 5 and (cookies + 3) % 5 == 0:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n    \n    # Mike donates 1/4 of his salary\n    charity = (1/4) * salary\n    \n    # Remainder after donation\n    remainder_after_charity = salary - charity\n    \n    # Spends 5/6 of the remainder on food\n    food = (5/6) * remainder_after_charity\n    \n    # Equation based on the information that he spends £78 more on food than on donation\n    eq = Eq(food - charity, 78)\n    \n    # Solve for salary\n    solved_salary = solve(eq, salary)\n\n    return solved_salary[0]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # The last digit of any number taken to any power cycles after a certain number of times.\n    # The last digit of powers of 2 cycles every 4 times: 2, 4, 8, 6, (2, 4, 8, 6, ...)\n    # Since powers of 2 cycle every 4 times, the last digit of 2 raised to the 2017th power\n    # will be the same as the last digit of 2 raised to the (2017 mod 4 = 1) power, which is 2.\n\n    # The last digit of powers of 3 cycles every 4 times: 3, 9, 7, 1, (3, 9, 7, 1, ...)\n    # Since powers of 3 cycle every 4 times, the last digit of 3 raised to the 2017th power\n    # will be the same as the last digit of 3 raised to the (2017 mod 4 = 1) power, which is 3.\n\n    # Therefore, the last digit of the expression is the last digit of the product of 2 and 3,\n    # which is the last digit of 6.\n    \n    last_digit = (2 * 3) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the time (in minutes) David walks at the faster speed\n    t = symbols('t')\n    \n    # Distance walked at the initial speed of 150m/min for 10 min\n    initial_distance = 150 * 10\n    \n    # Distance walked at the increased speed of (150 + 50)m/min\n    increased_speed_distance = (150 + 50) * t\n    \n    # Total distance is the sum of initial and increased speed distances\n    total_distance = Eq(initial_distance + increased_speed_distance, 3700)\n    \n    # Solve for the time David spent walking at the increased speed\n    time_at_increased_speed = solve(total_distance, t)[0]\n    \n    # Total time spent walking is the time at the initial speed plus the increased speed\n    total_time_spent = 10 + time_at_increased_speed\n    \n    return total_time_spent\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    # the 7th term is a + 6d = 57\n    # the 15th term is a + 14d = 89\n    # where a is the first term and d is the common difference\n    # we can set up the following system of equations:\n    # a + 6d = 57 (1)\n    # a + 14d = 89 (2)\n    # subtracting equation (1) from equation (2) gives us:\n    # 8d = 32\n    # Solving for the common difference d:\n    d = 32 / 8\n\n    return d\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans, _ = solve_congruence(*congruences)\n    \n    while ans < 400:\n        return ans\n        ans += 2 * 3 * 5 * 7\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                number = int(f\"47A1B9C\".replace('A', str(A)).replace('B', str(B)).replace('C', str(C)))\n                if len(set(str(number))) == 7 and number % 9 == 0:\n                    return A + B + C, number\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    current_sweets = 240\n    sweets_change_per_week = 45 - 60  # She gains 45 but eats 60 each week\n    desired_sweets = 150\n    weeks = (desired_sweets - current_sweets) / sweets_change_per_week\n\n    return abs(int(weeks))\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of an apple and the price of an orange\n    apple, orange = symbols('apple orange')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(2 * apple + orange, 40)  # Jessie's purchase\n    equation2 = Eq(apple + 2 * orange, 35)   # Bella's purchase\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, orange))\n    \n    # Calculate how much Carrie pays (1 apple + 1 orange)\n    carrie_pays = solutions[apple] + solutions[orange]\n    \n    return carrie_pays\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    digit_options = 3  # 5, 6, or 7\n    return digit_options ** 3  # Each of the three digits can be one of the three options\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            break\n        sweets += 1\n    return sweets\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    total_money = 140\n    price_per_racket = 49\n    price_per_ball = 1.5\n\n    total_spent_on_rackets = 2 * price_per_racket\n    remaining_money = total_money - total_spent_on_rackets\n\n    num_balls = remaining_money // price_per_ball\n\n    return int(num_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # In the worst case, we might draw all balls of the same colour first before getting a different one\n    # So we start by drawing all 4 balls of one color, then all 4 of another color\n    # After this, the next ball we draw must be of the third colour, thus satisfying our condition\n    balls_needed = 4 + 4 + 1  # All balls of two colours + 1 ball of the remaining colour\n    return balls_needed\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    return 581 - 229\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    heinz_rate = 4\n    jed_chocolates = 137\n    jed_rate = -6\n    \n    week = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_rate\n        jed_chocolates += jed_rate\n        week += 1\n        \n    return week\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # There are 12 points on the circle.\n    # To form a right-angled triangle, we need to pick a set of 3 points where one of the angles is 90 degrees.\n    # Since the points are equally spaced, the right angle will occur at the point opposite another point across the circle.\n    # This is because the diameter of the circle will act as the hypotenuse.\n    \n    # For each point, there is exactly one point opposite it across the circle.\n    # When we choose these two points, the hypotenuse is fixed.\n    # There are 10 remaining points to choose as the third point to form a triangle (excluding the chosen two points).\n    \n    # As we have 12 points to choose from for the first point, and this determines the second point (the opposite one),\n    # we can form 12 * 10 = 120 right-angled triangles.\n\n    ans = 12 * 10\n    \n    return ans\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought - donuts_eaten\n\n    return total_donuts\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    durians_left = total_durians - sold_durians\n    \n    return int(durians_left)\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple_box, orange_box = symbols('apple_box orange_box')\n\n    equation1 = Eq(3 * apple_box + 5 * orange_box, 270)\n    equation2 = Eq(3 * apple_box + 7 * orange_box, 342)\n\n    solutions = solve((equation1, equation2), (apple_box, orange_box))\n\n    return solutions[apple_box], solutions[orange_box]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n\n    solution = solve(equation, c)\n    return solution[0]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # The tiger is in the exact middle and also the 11th in line.\n    # This means there are 10 animals in front of the tiger and 10 animals after the tiger.\n    total_animals = 10 + 1 + 10 # Tiger's position + animals before the tiger + animals after the tiger\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 0.5  # Haribo costs 50 cents, which is $0.50\n    mamee_cost = haribo_cost - 0.3  # Mamee costs 30 cents less than Haribo\n    big_jelly_cost = 6 * mamee_cost  # Big packet of jelly costs 6 times as much as Mamee\n\n    return big_jelly_cost\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    number = 2405 + 1827\n    return number_to_words(number)\n\nfrom num2words import num2words\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_flavor = 2\n    cherry_flavor = 7\n    mint_flavor = 1\n    \n    if mint_flavor > 0:\n        max_candies = lemon_flavor + cherry_flavor\n    else:\n        max_candies = lemon_flavor + cherry_flavor + mint_flavor\n\n    return max_candies\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the common number of roses in the four new vases.\n    x = symbols('x')\n\n    # Nancy initially divides 24 roses into 3 vases, so each vase gets 24/3 roses.\n    # After her mother brings more roses, there are 4 vases with equal roses (x each).\n    # Therefore, the total number of roses after adding those brought by her mother is 24 + 4*x.\n    # Since each of the new four vases has the same number of roses as each of the original three vases:\n    equation = Eq(x, 24/3)\n\n    # Solve for x\n    x_value = solve(equation, x)[0]\n\n    # Calculate the total number of roses by adding the original 24 to the new roses in the 4 vases.\n    total_roses = 24 + 4 * x_value\n\n    return total_roses\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    halfway = (-18 + (-2)) / 2\n    return halfway\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    racket, shuttlecock = symbols('racket shuttlecock')\n    \n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n    \n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n    \n    return solutions[racket]\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if (10 * a + b) % 2 == 0:\n                for c in range(10):\n                    if (10 * b + c) % 3 == 0 and (100 * a + 10 * b + c) % 9 == 0:\n                        for d in range(10):\n                            if (10 * c + d) % 5 == 0 and (100 * b + 10 * c + d) % 11 == 0:\n                                return 1000 * a + 100 * b + 10 * c + d\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    # Price of a strawberry cake\n    strawberry_cake = 3\n\n    # Price of a marble cake, which is $2 more than a strawberry cake\n    marble_cake = strawberry_cake + 2\n\n    # Price of a cheese cake, which is thrice as much as a marble cake\n    cheese_cake = marble_cake * 3\n\n    # Price of 2 cheese cakes\n    price_2_cheese_cakes = cheese_cake * 2\n\n    return price_2_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n    number = solve_congruence(*congruences)\n\n    return [num for num in number[0] if num < 80][0]\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    games_played = num_teachers - 1  # In a single elimination tournament, games played is one less than number of participants\n\n    return games_played\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for the sons' and daughters' ages\n    s1, s2, d1, d2 = symbols('s1 s2 d1 d2', integer=True)\n    \n    # Equations based on the given conditions\n    equation1 = Eq(s1 + s2 + d1 + d2, 55) # Sum of ages is 55\n    equation2 = Eq(s1 - s2, 3) # Sons were born three years apart\n    equation3 = Eq(d1 - d2, 2) # Daughters were born two years apart\n    equation4 = Eq(s2, 2 * d1) # Younger son is twice the age of the older daughter\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (s1, s2, d1, d2))\n\n    # Find the youngest child\n    youngest_age = min(solutions[s1], solutions[s2], solutions[d1], solutions[d2])\n\n    return youngest_age\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n    \n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    return 20 + 19 + 18 + 17 + 16 - 15 - 14 - 13 - 12 - 11\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wallet, watch = symbols('wallet watch')\n\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurring_sequence = [4, 2, 8, 5, 7, 1]  # Digits of the recurring part\n    sequence_length = len(recurring_sequence)\n    total_sum = 0\n\n    for i in range(58):\n        total_sum += recurring_sequence[i % sequence_length]\n\n    return total_sum\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n\n    average_distance = total_distance / number_of_people\n\n    return average_distance\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2\n    permutations = factorial(total_books)\n    permutations //= factorial(3) * factorial(4) * factorial(2) * factorial(2)\n    return permutations\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution exchanged from bottle A to B and vice versa\n    x = symbols('x')\n\n    # Initial amounts of sugar\n    sugar_A = 50 * 0.11\n    sugar_B = 50 * 0.47\n\n    # After the exchange, the amount of sugar in A and B will be the same\n    # New amount of sugar in A is (initial sugar - sugar removed + sugar added)\n    # New amount of sugar in B is (initial sugar + sugar removed - sugar added)\n    # Since the sugar concentrations in A and B are supposed to be equal, we create an equation\n    equation = Eq((sugar_A - 0.11 * x + 0.47 * x) / 50, (sugar_B + 0.11 * x - 0.47 * x) / 50)\n\n    # Solve for x\n    solution_exchanged = solve(equation, x)\n\n    return solution_exchanged[0]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    tom_length = 13\n    nick_extra_length = 25\n\n    nick_length = tom_length + nick_extra_length\n    difference = nick_length - tom_length\n\n    return difference\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken_tenders = 18\n    total_students = 50\n    \n    percentage = (students_choosing_chicken_tenders / total_students) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    total_length_cm = 20 * 100 # convert meters to centimeters\n    distance_apart_cm = 40\n    first_cauliflower_distance_cm = 20\n\n    # calculate the usable length of the plot after the first cauliflower is planted\n    usable_length_cm = total_length_cm - (2 * first_cauliflower_distance_cm)\n\n    # calculate the number of cauliflowers that can be planted\n    num_cauliflowers = usable_length_cm / distance_apart_cm\n\n    return int(num_cauliflowers)\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    from itertools import permutations\n\n    # create all possible permutations of the three numbers\n    perms = [''.join(p) for p in permutations('136', 3)]\n\n    # convert to set to remove duplicates and convert to ints\n    unique_perms = set(map(int, perms))\n\n    # count unique three-digit numbers\n    count = len(unique_perms)\n\n    return count\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    total_candies = 15\n    piles = 4\n    count = 0\n\n    for combo in combinations(range(1, total_candies), piles - 1):\n        if sum(combo) < total_candies:\n            count += 1\n            \n    ans = count\n    return ans\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    prime_counts = []\n    primes_list = []   \n    for num in range(1, 51):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            prime_counts.append(num)\n            primes_list.append((num, num - 6, num + 6))\n    ans = len(prime_counts), primes_list\n    return ans\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    base_value = 250\n    ans = (percentage / 100) * base_value\n    return ans\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_length_metres = 3.7 + 64 / 100  # convert 64cm to metres and add to 3.7m\n    length_to_subtract_metres = 2 + 7 / 100  # convert 7cm to metres and add to 2m\n    final_length_metres = total_length_metres - length_to_subtract_metres  # subtract lengths in metres\n    return final_length_metres\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    eq1 = Eq(1 * banana + 2 * pear, 94)\n    eq2 = Eq(1 * banana + 1 * pear, 62)\n\n    solutions = solve((eq1, eq2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    a, b = 1, 2\n    while True:\n        a, b = b, a + b\n        if a == 21:\n            break\n    return b\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    return 19 + 23 + 19 + 22 + 20\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # The sequence is a geometric sequence where each term is 2 times the previous term.\n\n    # The n-th term of a geometric sequence can be calculated using a * r^(n-1),\n    # where a is the first term and r is the common ratio.\n    # Here, a = 1 and r = 2.\n\n    # Therefore the 20th term is 1 * 2^(20-1) = 2^19\n    twentieth_term = 2**19\n\n    # And the 17th term is 1 * 2^(17-1) = 2^16\n    seventeenth_term = 2**16\n\n    # Dividing the 20th term by the 17th term.\n    result = twentieth_term / seventeenth_term\n\n    return result\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    # The sum of two positive integers is 35.\n    # To maximize the product of two numbers with a fixed sum,\n    # the numbers should be as close to each other as possible,\n    # because the product of two numbers of varying sizes is\n    # smaller than the product of two numbers that are more equal.\n    # The two numbers are x and (35-x), their product is x*(35-x)\n    # The derivative of x*(35-x) will give us a maximum value when\n    # when the numbers are closest to each other.\n    # Since 35 is an odd number, we cannot split it into two equal integers,\n    # but we can split it into 17 and 18 which are closest to each other.\n    x = 17\n    y = 35 - x\n    return x * y\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earnings = 70\n    days_worked = 6  # from Monday to Saturday\n\n    total_earnings = average_daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    return minutes * seconds_per_minute\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Average number of books for Alice, Becky, and Crystal\n    average_abc = 60\n    # Total number of books for Alice, Becky, and Crystal\n    total_abc = average_abc * 3\n\n    # New average when Dennis is included\n    new_average_abcd = average_abc + 10\n    # Total number of books for Alice, Becky, Crystal and Dennis\n    total_abcd = new_average_abcd * 4\n    \n    # Books Dennis has\n    dennis_books = total_abcd - total_abc\n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    net_distance_per_day = 5 - 3\n    total_distance = 16 - 5  # Subtract the first day's climb, as after that it could slide back.\n    days = 1  # Counting the first day\n\n    while total_distance > 0:\n        total_distance -= net_distance_per_day\n        days += 1\n    \n    return days\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    # Smallest two-digit prime number\n    smallest_two_digit_prime = 11\n    # Largest two-digit square number\n    largest_two_digit_square = 9**2\n\n    # Product of the smallest two-digit prime number and the largest two-digit square number\n    product = smallest_two_digit_prime * largest_two_digit_square\n\n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1st_to_4th = 9\n    number_of_intervals_1st_to_4th = 4 - 1\n    distance_per_interval = distance_1st_to_4th / number_of_intervals_1st_to_4th\n\n    number_of_intervals_1st_to_9th = 9 - 1\n    distance_1st_to_9th = distance_per_interval * number_of_intervals_1st_to_9th\n\n    return distance_1st_to_9th\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n    \n    mike_height = (john_height * ratio_mike) / ratio_john\n    return mike_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    num_chocolate = 233\n    \n    if all(num_chocolate % i != 0 for i in range(2, num_chocolate)):\n        ans = True  # Michael is correct, 233 is prime and cannot be divided evenly\n    else:\n        ans = False  # Michael is incorrect, 233 is not prime and can be divided evenly\n    \n    return ans\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    # Since we already know the place values for each digit\n    hundredths = 7 * 0.01\n    tenths = 6 * 0.1\n    ones = 4 * 1\n    \n    # Combine the values to get the number\n    number = ones + tenths + hundredths\n    \n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_ship = 22\n    speed_current = 3\n    total_speed_downstream = speed_ship + speed_current\n    distance = 200\n    \n    time = distance / total_speed_downstream\n    \n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peaches, class_a, class_b = symbols('peaches class_a class_b')\n\n    # If all peaches are given to Class A, each student can get 5 peaches and there will be 10 peaches left.\n    equation1 = Eq(peaches, 5 * class_a + 10)\n    \n    # If all peaches are given to Class B, each student can get 8 peaches, we will need 2 more peaches.\n    equation2 = Eq(peaches, 8 * class_b - 2)\n    \n    # It is known that Class A has 3 more students than Class B.\n    equation3 = Eq(class_a, class_b + 3)\n\n    solutions = solve((equation1, equation2, equation3), (peaches, class_a, class_b))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_a_pen = pen_cost // pencil_cost\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    # Let's assume the number of correct answers is x.\n\n    # For each correct answer, Justin gets 6 points.\n    # For each incorrect answer, Justin loses 2 points.\n    # The total number of questions is 10.\n\n    # Total score is then 6x - 2(10 - x) = 36\n    # 6x - 20 + 2x = 36\n    # 8x - 20 = 36\n    # 8x = 56\n    # x = 7\n\n    correct_answers = (36 + 20) // 8\n\n    return correct_answers\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    # Number of ways he can take a train, a bus, or a plane\n    ways_train = 4\n    ways_bus = 3\n    ways_flight = 2\n\n    # Total number of ways he can choose\n    total_ways = ways_train + ways_bus + ways_flight\n\n    return total_ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Calculate total ways to arrange 7 dancing (D) between 3 playing a sketch (P) with at least 1 D between every 2 P\n    # We look at the 3 P as dividers, there are 4 spots between and around P to insert D performances\n    spots = 4\n\n    # Choose how many D to put in each of the 4 spots\n    # We distribute 7 D into 4 spots, which is equivalent to putting 7 identical items into 4 distinct boxes\n    # Such that each box has at least one item, we must first place 1 item in each box then distribute the remaining 3 items freely\n    d_combinations = factorial(spots + 7 - 1) // (factorial(7) * factorial(spots - 1))\n\n    # Calculate the factorial for number of D and P\n    d_factorial = factorial(7)\n    p_factorial = factorial(3)\n\n    # Final answer is product of combinations and permutations of D and P\n    ans = d_combinations * d_factorial * p_factorial\n    return ans\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize the number 28512 into its prime factors\n    factors = factorint(28512)\n    \n    # Cube number means that each prime factor's power should be a multiple of 3\n    # Find h by ensuring that each factor's exponent in the product becomes a multiple of 3\n    h = 1\n    for prime, exp in factors.items():\n        if exp % 3 != 0:\n            h *= prime ** (3 - (exp % 3))\n            \n    return h\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Define the number of M&Ms of each color\n    red = 3\n    yellow = 4\n    brown = 5\n\n    # Calculate the smallest number of M&Ms he needs to take out\n    # To be sure to get 2 M&Ms of different colours, Bart has to go through the worst case scenario:\n    # Taking all of one color and one more (which will be of a different color for sure).\n    # This ensures that no matter what, he will have 2 different colors.\n    # The smallest amount is by taking all red (the fewest) and one more from the others.\n    ans = red + 1  # All the red ones plus one more to guarantee a different color\n\n    return ans\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "import math\n\ndef solution():\n    # n = total number of friends\n    # dp[n] = number of ways to arrange n friends around the round table such that no one sits in their own chair (a derangement problem)\n    n = 7\n    dp = [0] * (n + 1)\n    \n    # base cases\n    dp[1] = 0\n    dp[2] = 1\n    \n    # recursive relation: dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2])\n    for i in range(3, n + 1):\n        dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2])\n    \n    # The answer is the total number of derangements for n friends\n    return dp[n]\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    # Each father shakes hands with all the people from other families\n    # So each father shakes hands with 9 other fathers, 9 mothers, and 9 children\n    handshakes_per_father = 9 + 9 + 9\n\n    # Each mother shakes hands with all the fathers and children from other families\n    # So each mother shakes hands with 9 fathers and 9 children\n    handshakes_per_mother = 9 + 9\n\n    # Each child shakes hands with all the fathers and mothers from other families\n    # So each child shakes hands with 9 fathers and 9 mothers\n    handshakes_per_child = 9 + 9\n\n    # There are 10 fathers, 10 mothers, and 10 children\n    total_handshakes = (10 * handshakes_per_father) + \\\n                       (10 * handshakes_per_mother) + \\\n                       (10 * handshakes_per_child)\n\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = 31415925\n    ans = (a + b) * (a - b)  # Using (a+b)(a-b) = a^2 - b^2\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits (1, 3, 5, 7, 9)\n    odd_digits = 5\n    \n    # There are 5 choices for each digit in a 3-digit number\n    choices_for_first_digit = odd_digits  # Cannot be 0\n    choices_for_second_digit = odd_digits\n    choices_for_third_digit = odd_digits\n    \n    # By multiplication principle, total possibilities is the product of choices\n    total_possibilities = choices_for_first_digit * choices_for_second_digit * choices_for_third_digit\n    \n    return total_possibilities\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_sequence = \"85274\"\n    index = (79 - 1) % len(recurring_sequence)  # 79th digit falls into the sequence, index should be 0-based\n    return int(recurring_sequence[index])\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    # Since the number we're looking for is divisible by both 17 and 19\n    # it must be divisible by their least common multiple (LCM).\n    lcm = 17 * 19\n    \n    # The maximum three-digit number is 999. We then subtract 2009 from it\n    # and find the remainder when dividing by the lcm. The number we're looking for\n    # will be 999 minus this remainder.\n    max_number = 999\n    remainder = (max_number + 2009) % lcm\n    \n    if remainder == 0:\n        largest_number = max_number\n    else:\n        # We need to subtract the remainder to get the largest number\n        # that after adding 2009 is divisible by the lcm.\n        largest_number = max_number - remainder\n        \n    return largest_number\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    total_bill = 82\n    hours_parked = 40  # Free parking hours allotted\n\n    # Calculate the bill for hours between 40 and 50\n    for extra_hours1 in range(11):  # From 0 to 10 hours (which is the range of the next price segment)\n        bill_segment1 = extra_hours1 * 5\n        \n        # Calculate the bill for hours between 50 and 60\n        for extra_hours2 in range(11):  # From 0 to 10 hours (which is the range of the next price segment)\n            bill_segment2 = extra_hours2 * 8\n            \n            # Calculate the bills for hours above 60\n            remaining_bill = total_bill - bill_segment1 - bill_segment2\n            if remaining_bill >= 0 and remaining_bill % 15 == 0:\n                extra_hours3 = remaining_bill // 15\n                hours_parked += extra_hours1 + extra_hours2 + extra_hours3\n                return hours_parked\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    correct_sum = sum(range(1, 63))\n    tim_sum = 1939\n    missing_page_number = correct_sum - tim_sum\n    return missing_page_number\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # We use the worst-case scenario based on the Pigeonhole Principle.\n    # The worst case will be extracting all marbles of one color, then all of another color,\n    # and all of yet another color without getting 4 different colors.\n    # This case ensures we do not get 4 different colors until after following marbles are drawn:\n    # All red (4), all but one green (6), all blue (6), and then one orange to make 4 different colors.\n    # So we must draw 4 + 6 + 6 + 1 = 17 marbles.\n    ans = 4 + (7 - 1) + 6 + 1\n    return ans\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for ticket1 in range(1000):\n        ticket2 = ticket1 + 1\n        if ticket1 + ticket2 == 777:\n            return ticket2\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # Define a recursive function to calculate ways of climbing steps avoiding the fifth step\n    def count_ways(steps, avoid):\n        # If there are no steps, there is only one way to stay where you are\n        if steps == 0:\n            return 1\n        # If steps is at the step to avoid, return 0 as it is not a valid way\n        if steps == avoid:\n            return 0\n        # If steps is negative, there are no ways to go to a negative step\n        if steps < 0:\n            return 0\n        \n        # Recursively find the count of ways for 1, 2 and 3 steps subtracted\n        return (count_ways(steps - 1, avoid) + count_ways(steps - 2, avoid) + \n                count_ways(steps - 3, avoid))\n    \n    # Calculate the number of ways to reach the fourth and the sixth step,\n    # as ways to reach fifth are not allowed\n    ways_to_4 = count_ways(4, 5)\n    ways_after_5 = count_ways(10 - 5, 5) # avoid has no effect as 5 is not in the range\n\n    # The total ways would be ways to reach the step four\n    # multiplied by ways to proceed from step six\n    total_ways = ways_to_4 * ways_after_5\n\n    return total_ways\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9  # 10% depreciation is the same as retaining 90% of the value\n    years = 5\n\n    final_value = initial_value * (depreciation_rate ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    return 5 / 16\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_earnings_per_day = 60\n    days_in_a_week = 7\n\n    total_earnings = average_earnings_per_day * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    num = 3016\n    return num - 100\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # Smallest four odd numbers are 1, 3, 5, and 7.\n    smallest_sum = 1 + 3 + 5 + 7\n    # Subtract the smallest sum from the total to find the maximum possible value for the fifth number\n    max_fifth_number = 85 - smallest_sum\n    return max_fifth_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    return 23.2 - 14.7\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n\n    # Define the equation based on the problem\n    # T% of first $30000\n    tax_first_30000 = (T/100) * 30000\n\n    # (T+3)% of the remaining (income - 30000)\n    tax_above_30000 = ((T+3)/100) * (income - 30000)\n\n    # Total tax is sum of both parts\n    total_tax = tax_first_30000 + tax_above_30000\n\n    # Tax paid equals (T+1)% of annual income\n    tax_paid = (T+1)/100 * income\n\n    # Setting up the equation total_tax equals tax_paid\n    equation = Eq(total_tax, tax_paid)\n\n    # We solve the equation for income\n    solution_income = solve(equation, (income))\n\n    # Note that we assume T is a given constant and remove solutions less than 30000\n    # since those are invalid based on the wording of the problem\n    valid_solutions = [sol.evalf() for sol in solution_income if sol > 30000]\n\n    return valid_solutions[0] if valid_solutions else None\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    still_water_speed = 88\n    current_speed = 12\n    downstream_speed = still_water_speed + current_speed\n    distance = 500\n    time = distance / downstream_speed\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes_to_seconds = 2.5 * 60\n    return int(minutes_to_seconds)\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    twenty_cent, fifty_cent = symbols('twenty_cent fifty_cent')\n    \n    equation1 = Eq(twenty_cent + fifty_cent, 21)\n    equation2 = Eq(20 * twenty_cent + 50 * fifty_cent, 630)\n    \n    solutions = solve((equation1, equation2), (twenty_cent, fifty_cent))\n    \n    return solutions[fifty_cent]\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the distance between A and B as D\n    # and the speed of Alan per minute as S (in meters).\n    D, S = symbols('D S')\n\n    # Phillip's speed per minute will be S + 15 (in meters)\n    # Phillip takes 12 minutes, so the distance is (S + 15) * 12\n    equation1 = Eq(D, (S + 15) * 12)\n\n    # Alan takes 12 + 3 minutes, so the distance is S * (12 + 3)\n    equation2 = Eq(D, S * 15)\n\n    # Solving the equations will provide us with the distance D\n    solution = solve((equation1, equation2), (D, S))\n\n    return solution[D]\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    girls_combinations = comb(8, 4)\n    boys_combinations = comb(12, 3)\n    total_combinations = girls_combinations * boys_combinations\n    return total_combinations\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    from math import sqrt, floor\n\n    # Initialize count of perfect squares\n    count = 0\n\n    # Iterate through the numbers and check for perfect squares\n    for i in range(1, 10):\n        number = int(\"2\" + \"5\" * (i - 1))\n        if floor(sqrt(number))**2 == number:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    alice_after_spending = 68.10 - 25.40\n    alice_initial = alice_after_spending + 36\n    return alice_initial\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean1 = 28\n    mean2 = 11\n    count1 = 5\n    count2 = 12\n\n    total_sum1 = mean1 * count1\n    total_sum2 = mean2 * count2\n    total_count = count1 + count2\n    overall_mean = (total_sum1 + total_sum2) / total_count\n\n    return overall_mean\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_amount = (discount_percentage / 100) * original_price\n    discounted_price = original_price - discount_amount\n    return discounted_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance = 74\n    space_between_benches = 7\n    number_of_benches = 9\n\n    # Total length that benches take up\n    bench_length = (total_distance - (space_between_benches * (number_of_benches - 1))) / number_of_benches\n\n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, candies = symbols('A B candies')\n\n    # If each student in class A gets 4 candies, 20 more candies are needed\n    equation1 = Eq(4 * A, candies - 20)\n\n    # If each student in class B can get 6 candies, there will be 16 candies left\n    equation2 = Eq(6 * B, candies - 16)\n\n    # The number of students in class A is twice of class B\n    equation3 = Eq(A, 2 * B)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, candies))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    total_cut_arms = 21\n    arms_regrown = 5\n    arms_cut_before_regrowing = total_cut_arms // (arms_regrown + 1)\n    remaining_arms_cut = total_cut_arms % (arms_regrown + 1)\n\n    original_arms = total_cut_arms - arms_cut_before_regrowing - remaining_arms_cut\n\n    return original_arms\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # In the worst case scenario, we could take out all gold coins before getting any silver coin\n    worst_case_gold = 6 \n    # But we need at least 1 silver to ensure we have 2 different coloured coins,\n    # which means we need to take out an additional coin (a silver one) after 6 gold coins\n    additional_silver = 1\n    # Calculating the minimum number of coins needed to be taken out\n    min_coins = worst_case_gold + additional_silver\n\n    return min_coins\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    distance_between_trees = 20 / (5 - 1)  # from 1st to 5th tree -> 4 intervals\n    number_of_intervals = 14 - 8  # from 8th to 14th tree -> 6 intervals\n    return distance_between_trees * number_of_intervals\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    # You can choose at most 12 numbers to form the circle.\n    # This is because if you choose a number, you cannot choose its multiple or factor,\n    # which on average prohibits at least one other number apart from the chosen number itself.\n    # Since there are 24 numbers, you can choose at most 24/2 = 12 numbers.\n    return 12\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_per_minute = 60  # meters per minute\n    time_in_seconds = 150  # seconds\n    time_in_minutes = time_in_seconds / 60\n\n    distance = speed_per_minute * time_in_minutes\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    return 38*32 + 37*33 + 36*34\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # The sum of the 3 largest numbers must be less than or equal to 2021.\n    # Let's assume rest of the seven numbers are 1 (minimum value for whole numbers)\n    # Since the 3rd greatest number is 246, we need to find the minimum value for the 4th greatest number.\n    \n    sum_of_seven_smallest = 7  # Assuming they are all 1\n    remaining_sum = 2021 - sum_of_seven_smallest\n    sum_of_three_largest = remaining_sum - 246  # Remove the 3rd largest number\n\n    # Since the 3rd greatest number is 246, the fourth number must be less than or equal to 246\n    # We also know that the sum of the 5th to the 10th number is at least 7\n    # This means the sum of the 3rd and 4th numbers is at most 2021 - 7 = 2014\n    # Since the 3rd number is 246, the 4th must be at most 2014 - 246 = 1768\n    \n    # But the 4th must also be less than or equal to 246, otherwise it would be the 3rd largest number\n    # Therefore, the possible maximum for the 4th number is 246\n    \n    # Since we are trying to minimize the value of the 4th largest number, we should maximize the value of the largest number\n    # Hence, we can start by setting the 2nd largest number equal to 246 (1 less than the 3rd largest number)\n    # Then, to maximize the largest number, we reduce the 4th largest from 246 to the smallest it can be\n    # while still keeping the sum of the numbers as 2021.\n    # The minimum the 4th largest number can be is therefore the remaining sum minus the largest possible 1st and 2nd numbers\n\n    max_second_number = 246 - 1\n    max_first_number = sum_of_three_largest - max_second_number\n    min_fourth_number = 246 - (max_first_number - 246)\n\n    return min_fourth_number\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    devi, jerry = symbols('devi jerry')\n    \n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4)/(jerry + 4), 5/7)\n    \n    solutions = solve((equation1, equation2), (devi, jerry))\n    \n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey_age, father_age = symbols('grey_age father_age')\n    equation1 = Eq(father_age, grey_age * 3)\n    equation2 = Eq(father_age, grey_age + 30)\n\n    solution = solve((equation1, equation2), (grey_age, father_age))\n\n    return solution[father_age]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    pip_apples = 5\n    bud_apples = 1\n    total_parts = pip_apples + bud_apples\n    \n    pip_part_graph = ('Pip', pip_apples * ['|'])\n    bud_part_graph = ('Bud', bud_apples * ['|'])\n    \n    graph = {'Pip': pip_part_graph[1], 'Bud': bud_part_graph[1]}\n    \n    return graph\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    ans = 10 * (numerator / denominator)\n    return ans\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n    \n    # According to the Pigeonhole Principle:\n    # if n items are put into m containers, with n > m, then at least one container must contain more than Math.floor(n / m) items.\n    min_books_in_most_loaded_layer = (total_books + layers - 1) // layers\n    \n    return min_books_in_most_loaded_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    # first term of the sequence (a1)\n    first_row_seats = 48 \n    # last term of the sequence (an)\n    last_row_seats = 80  \n    # common difference (d)\n    difference = 4 \n\n    # number of terms (n) can be found by formula: an = a1 + (n-1)d\n    # Rearrange the formula to find n: n = ((an - a1) / d) + 1\n    num_rows = ((last_row_seats - first_row_seats) // difference) + 1\n\n    # sum of the arithmetic sequence (Sn) = n/2 * (a1 + an)\n    total_seats = (num_rows / 2) * (first_row_seats + last_row_seats)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 6, 9]\n    perm = permutations(digits)\n    return len(list(perm))\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    ans = 0.12 + 0.345 + 0.6789\n    return ans\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    return 3 * 37 * 9\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    # Three-digit number format: XYZ where X != 0 and X,Y,Z can be 0,1,2\n    # X can be chosen in 2 ways (1 or 2, since it can't be 0)\n    # Y can be chosen in 3 ways (0, 1, or 2)\n    # Z can be chosen in 3 ways (0, 1, or 2)\n    ans = 2 * 3 * 3\n    return ans\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n\n    while ans < 100:\n        ans += 3 * 5 * 7\n\n    return ans if ans < 200 else None\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = remainder + 1\n\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    veron, eliza, betty = symbols('veron eliza betty')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + eliza + veron, 855)\n\n    solutions = solve((equation1, equation2, equation3), (veron, eliza, betty))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')  # y represents Hazel's age in three years\n\n    hazel_current_age = y - 3  # Since y is Hazel's age in three years, subtract 3 to get her current age\n    jessica_current_age = hazel_current_age - 3  # Jessica is 3 years younger than Hazel\n\n    hazel_next_year_age = hazel_current_age + 1  # Hazel's age next year\n    jessica_next_year_age = jessica_current_age + 1  # Jessica's age next year\n\n    total_age_next_year = hazel_next_year_age + jessica_next_year_age  # The total age of Hazel and Jessica next year\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals, initial_goats = symbols('total_animals initial_goats')\n\n    # We need two equations based on the information given:\n    # Equation 1: 65% are cows, so (100 - 65)% are goats. \n    # Equation 2: After adding 240 animals, the percentage of cows becomes 85%\n    # The number of goats is doubled, so initially it was half of that after addition.\n\n    equation1 = Eq(initial_goats, total_animals * (100 - 65) / 100)\n    equation2 = Eq(85 / 100 * (total_animals + 240), total_animals * 65 / 100 + 240 - initial_goats / 2)\n\n    solutions = solve((equation1, equation2), (total_animals, initial_goats))\n\n    return solutions[initial_goats]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    first_section_cm = 30\n    second_section_cm = 1.5 * 100\n    third_section_cm = 150 / 10\n\n    total_width_cm = first_section_cm + second_section_cm + third_section_cm\n    \n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    age_difference = 38 - melanie_age\n    uncle_age = melanie_age + age_difference\n    return uncle_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    pence_in_pound = 100\n    \n    total_pence = pounds * pence_in_pound\n    percentage = (pence / total_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    facing_teacher = 50\n    \n    for student in range(1, 51):\n        if student % 4 == 0 or student % 6 == 0:\n            facing_teacher -= 1\n\n    return facing_teacher\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    start_time = datetime.strptime(\"15:25\", \"%H:%M\")\n    film_duration = timedelta(minutes=108)\n    end_time = start_time + film_duration\n    return end_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # Degree of monomial is the sum of the exponents of all variables\n    # In -x^3y^(2n), the exponents are 3 for x and 2n for y\n    # According to the problem, the total degree is 5\n    # So, we have 3 + 2n = 5\n    # Solving for n gives us n = (5 - 3) / 2\n\n    n = (5 - 3) / 2\n    return n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(19, 8) + Fraction(81, 12) + Fraction(30, 16)\n    ans = result.numerator // result.denominator + Fraction(result.numerator % result.denominator, result.denominator)\n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    # Let's denote sister's age now as 'sister_age'.\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    \n    # Amy’s age 5 years ago is same as her sister’s age 3 years later.\n    sister_age_3_years_later = amy_age_5_years_ago\n    # Therefore, sister's current age is 3 years less than that.\n    sister_age_now = sister_age_3_years_later - 3\n    \n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # There are 13 different ranks of cards (1 through 10, J, Q, K)\n    # Drawing one card from each rank will result in 13 cards\n    num_ranks = 13\n\n    # To ensure at least two cards of the same rank, draw one more\n    num_draws = num_ranks + 1\n\n    return num_draws\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    smallest_number = float('inf')  # Initialize with an infinitely large number\n\n    # Iterating over all 3-digit numbers\n    for i in range(100, 1000):\n        if i % 2 == 0:  # Check if the number is even\n            digits_sum = sum(int(digit) for digit in str(i))  # Sum of digits of the number\n            if digits_sum == 21:  # Check if the sum of digits is 21\n                smallest_number = min(smallest_number, i)  # Update the smallest number\n\n    return smallest_number\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1/i for j in range(2, 21) for i in range(j, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part_amount = 18\n    whole_amount = part_amount * (5 / 3) # Inverse the fraction to find the whole\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    total_amount = 156\n    price_cactus = 2\n    price_sunflower = 7\n\n    for sunflowers in range(total_amount // price_sunflower + 1):\n        cacti = sunflowers + 6\n        if price_sunflower * sunflowers + price_cactus * cacti == total_amount:\n            return cacti\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the price of a book as a symbol\n    book_price = symbols('book_price')\n\n    # Given: a pencil cost 40p which is £0.40\n    pencil_price = 0.40\n\n    # Sarah's purchase: 8 books + 3 pencils\n    # Rebecca's purchase: 3 books + 8 pencils\n    # Sarah paid £1.00 more than Rebecca\n    # Setting up the equation: 8*book_price + 3*pencil_price = 3*book_price + 8*pencil_price + 1.00\n    \n    equation = Eq(8 * book_price + 3 * pencil_price, 3 * book_price + 8 * pencil_price + 1.00)\n\n    # Solving the equation for the price of a book\n    book_price_solution = solve(equation, book_price)\n\n    # Return the price of the book as a float\n    return float(book_price_solution[0])\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares_sum = sum([i**2 for i in range(2, 21, 2)])\n    odd_squares_sum = sum([i**2 for i in range(1, 20, 2)])\n    ans = even_squares_sum - odd_squares_sum\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    water_poured = 2 * 6\n    remaining_water = total_water - water_poured\n    return remaining_water\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define symbols for the unknowns (Liverpool fans and Manchester United fans)\n    L, M = symbols('L M')\n    \n    # Liverpool fans at first is L, Manchester United fans at first is M\n    # 1000 more Liverpool fans than Manchester United fans\n    equation1 = Eq(L, M + 1000)\n    \n    # 30 minutes later, Liverpool fans are L + 472, Manchester United fans are M + 4836\n    # Then, Manchester United fans are 3 times Liverpool fans\n    equation2 = Eq(M + 4836, 3 * (L + 472))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (L, M))\n    \n    return solutions[L]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price = symbols('book_price')  # Define a symbol for book price\n    pencil_price = 0.40  # Given pencil price in £\n    \n    # Equation: Sarah's total cost - Rebecca's total cost = £1.00\n    equation = Eq((8 * book_price + 3 * pencil_price) - (3 * book_price + 8 * pencil_price), 1)\n    \n    # Solve for book price\n    book_price_solution = solve(equation, book_price)\n    \n    return book_price_solution[0]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_additional_points = 18\n    jack_points = andrew_points + jack_additional_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    \n    return comb(total_players, players_needed)\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    # Initial amount left after giving to Mike\n    initial_left = 3 + 2\n    \n    # Double the amount to reverse the action of giving half to Nini\n    before_nini = 2 * initial_left\n    \n    # Double the amount to reverse the action of giving half to Bob\n    before_bob = 2 * before_nini\n    \n    # Double the amount to reverse the action of giving half to her mother\n    original_amount = 2 * before_bob\n    \n    return original_amount\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    A_students, B_students, peaches = symbols('A_students B_students peaches')\n\n    # Class A: 5 peaches per student + 10 leftover\n    equation1 = Eq(peaches, 5 * A_students + 10)\n\n    # Class B: 8 peaches per student - 2 more needed\n    equation2 = Eq(peaches, 8 * B_students - 2)\n\n    # Class A has 3 more students than class B\n    equation3 = Eq(A_students, B_students + 3)\n\n    # Solve equations\n    solutions = solve((equation1, equation2, equation3), (A_students, B_students, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    sequence = ''\n    number = 1\n    while len(sequence) < 2023:\n        sequence += str(number)\n        number += 1\n    return int(sequence[2022])\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    sum_of_numbers = 450\n\n    third_number = sum_of_numbers - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the number of T-shirts, and c be the number of caps\n    t, c = symbols('t c')\n\n    # The ratio of T-shirts to caps is 8:5\n    equation1 = Eq(t/c, 8/5)\n\n    # Siti sold 1/4 of T-shirts and 1/5 of caps\n    # The amount collected for the items sold is $132\n    equation2 = Eq((1/4) * t * 3 + (1/5) * c * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    # Since we want the number of T-shirts Siti had at first, we return t\n    return solutions[t]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    # To find out the age on 31/12/98.\n    # The person is saying tomorrow is his 11th birthday, that means today he's still 10\n    age_on_311298 = 10\n    \n    # Now, we need to find out the age on 31/12/01\n    # Since he turns 11 on 1/1/99, we will find out the difference in years between 99 and 01.\n    years_difference = 2001 - 1999\n    \n    # Add the difference in years to the age on 31/12/98\n    age_on_311201 = age_on_311298 + years_difference + 1 # Adding 1 for the year 1999\n\n    return age_on_311201\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 6, 2, 5]\n    all_possible_numbers = [''.join(map(str, perm)) for perm in permutations(digits)]\n    odd_numbers = [int(num) for num in all_possible_numbers if int(num) % 2 != 0]\n    smallest_odd_number = min(odd_numbers)\n\n    return smallest_odd_number\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    students = 40\n    boat_capacity = 6\n    trips = (students + boat_capacity - 1) // boat_capacity\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    nth_term = 36\n    \n    ordinal_number = int((nth_term - first_term) / common_difference + 1)\n    \n    return ordinal_number\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for tens_digit in [2, 3, 5, 7]:\n        for ones_digit in [2, 3, 5, 7]:\n            N = 10 * tens_digit + ones_digit\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catches = 8\n    run_aways = 5\n    library_catches = 9\n\n    final_catch = initial_catches - run_aways + library_catches\n\n    return final_catch\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_per_picture = 10  # Time to paint one picture in minutes\n    total_time = 80  # One hour and twenty minutes in total\n\n    num_pictures = total_time // time_per_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    # The problem can be visualized as two individuals standing opposite \n    # to each other on a circle. We want to find the number of people between \n    # them, which when doubled and added to 2 (to include the two people themselves),\n    # would be the total number of people in the game.\n\n    # Person 6 will stand directly opposite to person 19 if the total number of \n    # people is twice the difference between positions 19 and 6 plus 2.\n    position_difference = 19 - 6\n    total_people = (position_difference * 2) + 2\n\n    return total_people\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n    # There are 5 students, and the number of ways to arrange 5 students in a line\n    # is the same as the number of permutations of these 5 students.\n    num_students = 5\n    num_ways = factorial(num_students)\n    return num_ways\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    # Let x be the number of pears Anne has initially\n    # Then Charlie has x - 6 pears\n    \n    # After Anne gives 6 pears to Charlie, they have the same number of pears,\n    # So Anne has x - 6 pears, and Charlie has (x - 6) + 6 = x pears\n\n    # The combined number of pears is 38, which leads us to:\n    # (x - 6) + x = 38\n    # 2x - 6 = 38\n    # 2x = 44\n    # x = 22\n\n    # Anne originally has 22 pears\n    return 22\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    # Let x be the number of game cards Eric has\n    # Joe has 7 times as many game cards as Eric, so Joe has 7x game cards\n    # After giving away some cards, they both end up with 168 cards\n    # So Joe gives away (7x - 168) cards to Eric\n    # Then, Eric's new number of cards would be x + (7x - 168)\n    # This sum must equal 168, so we have x + (7x - 168) = 168\n    # Simplifying this equation gives 8x - 168 = 168\n    # Solving for x gives x = 336 / 8\n    x = 336 // 8\n    \n    # Now we know Eric originally has x cards, and Joe needs to give (7x - 168) cards\n    joe_give = 7 * x - 168\n    \n    return joe_give\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swimming = 14\n    joanne_swimming = 5\n    more_swimming = amy_swimming - joanne_swimming\n    return more_swimming\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, b, c, d = symbols('a b c d')\n\n    # Construct the equation according to the problem\n    equation = Eq(1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a, 1370)\n\n    # Solve the equation\n    solutions = solve(equation, (a, b, c, d))\n\n    # Check that the solution is valid (all digits must be integers)\n    if all(s.is_integer for s in solutions.values()):\n        # Construct the number from the digits\n        abcd = 1000*solutions[a] + 100*solutions[b] + 10*solutions[c] + solutions[d]\n        return abcd\n    else:\n        return None\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    \n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    isaac, joseph = symbols('isaac joseph')\n    equation1 = Eq(isaac, 5 * joseph)\n    equation2 = Eq(joseph + 154, 9/10 * isaac)\n    \n    solutions = solve((equation1, equation2), (isaac, joseph))\n    \n    return solutions[isaac]\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    # Since the question specifies that Mina wants to split the apples into\n    # 2 groups with different numbers in each group, we are essentially looking\n    # for the number of ways to create a partition with nonzero positive integers\n    # that add up to 10 and consist of exactly 2 parts.\n    # This is equivalent to finding the number of pairs (x, y) such that x + y = 10\n    # and x != y. We can simply iterate over the possible values for the first group\n    # and calculate the corresponding value for the second group.\n    count = 0\n    for x in range(1, 10):  # The first group can have between 1 and 9 apples\n        y = 10 - x  # The second group will have the remaining apples\n        if x != y:  # Make sure the groups have different numbers of apples\n            count += 1  \n    # Since there are two groups, every distinct pair is counted twice (once for each order),\n    # so we need to divide the count by 2 to get the correct number of ways.\n    return count // 2\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n    \n    num = factorial(29)\n    count = 0\n    while num % 10 == 0:\n        count += 1\n        num //= 10\n        \n    return count\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    # Convert base 8 number to base 10\n    N = int('12345654321', 8)\n    \n    # Find remainder of N divided by 7 and by 9\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    \n    # Sum the remainders\n    result = remainder_7 + remainder_9\n    \n    return result\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let's assume the length of the path is 'd' meters.\n    # When Linda has jogged 1200 m, Ted has jogged (d - 1200) meters.\n\n    # According to the problem, the speed ratio of Linda to Ted is 3:4.\n    # So the distance ratio when they meet should also be 3:4, \n    # because they started at the same time and speed is constant.\n\n    # Therefore, we can form the ratio equation:\n    # Linda's distance (1200 m) / Ted's distance (d - 1200 m) = 3 / 4\n    # Solving the equation for 'd' will give us the length of the path.\n\n    # 1200 / (d - 1200) = 3 / 4\n    # Cross multiply to solve for 'd':\n    # 4 * 1200 = 3 * (d - 1200)\n    # 4800 = 3d - 3600\n    # 4800 + 3600 = 3d\n    # 8400 = 3d\n    # d = 8400 / 3\n    d = 8400 / 3\n\n    return d\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # The number 2018A is divisible by 9 if the sum of its digits is divisible by 9.\n    # We know the sum of digits of 2018 is 2 + 0 + 1 + 8 = 11.\n    # We need to find A such that (11 + A) is divisible by 9.\n    # Since 18 is the next smallest multiple of 9 after 11, A must be 18 - 11 = 7.\n\n    # Now we have the 5-digit number 20187.\n    # To find the remainder when 20187 is divided by 8, we simply take the last three digits and find their remainder when divided by 8.\n    remainder = 187 % 8\n\n    return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    ryan_front = 5\n    elvis_behind = 7\n    between_ryan_elvis = 1\n    # Ryan is in front of Elvis and there is 1 squirrel between them,\n    # so the total number of squirrels is the sum of \n    # Ryan's front, Elvis' behind, Ryan himself, Elvis himself, and the 1 squirrel between them.\n    total_squirrels = ryan_front + between_ryan_elvis + elvis_behind + 2  # +2 for Ryan and Elvis themselves\n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    # This is a classic example of a problem known as the \"derangement\" problem.\n    # It is also known as the \"subfactorial\" or \"!n\" problem.\n    # For a set of n elements, the number of derangements is given by:\n    # !n = (n - 1) * (!(n - 1) + !(n - 2))\n    # with base cases: !1 = 0 and !2 = 1.\n\n    # Recursive function to find derangement of n\n    def derangement(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    \n    # There are 6 students\n    num_students = 6\n    \n    # Calculate the derangement for 6 students\n    return derangement(num_students)\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    \n    # 3 workers * 3 days = total work units required to build the wall\n    total_work_units = workers * days_for_3_workers\n    \n    # Work units per day by 1 worker = total work units needed / 1 worker\n    days_for_1_worker = total_work_units / 1\n    \n    return days_for_1_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    return 25 / 100 * 64\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((3 * x + 3) / 6, (5 * x - 2) / 8)\n    x_value = solve(equation, x)\n    return x_value[0]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    total_amount = 45\n    percentage = 30\n    ans = (total_amount * percentage) / 100\n    return ans\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    return sum([i for i in range(1, 20, 2)])\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_current = symbols('jack_current')\n\n    # Equation representing the problem statement\n    equation = Eq(jack_current - 5, (jack_current + 8) / 2)\n\n    # Solve the equation to find Jack's current age\n    solutions = solve(equation, jack_current)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    percentage_spent_on_bag = 70\n    remaining_after_bag = 100 - percentage_spent_on_bag\n    percentage_spent_on_purse = (3 / 8) * remaining_after_bag\n\n    return percentage_spent_on_purse\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    # Setup the equations based on the problem statement\n    equation1 = Eq(timmy, kenny - 12)  # Timmy used 12 fewer straws than Kenny\n    equation2 = Eq(ron, kenny + 20)    # Ron used 20 more straws than Kenny\n    equation3 = Eq(kenny + timmy + ron, 284)  # Total straws used\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    # Return the number of straws Ron used\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('EDUCATION')\n    total_vowels = len('EUAIO')\n    \n    # Total arrangements without restriction.\n    total_arrangements = factorial(total_letters)\n    \n    # Total arrangements where vowels are together.\n    # Treat all vowels as a single entity.\n    vowels_together = factorial(total_vowels) * factorial(total_letters - total_vowels + 1)\n    \n    # Subtract arrangements where vowels are together from total arrangements.\n    arrangements_with_consonants_separated = total_arrangements - vowels_together\n    \n    return arrangements_with_consonants_separated\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    return 86.3 + 7\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    # Let x be the original number of pupils in School P\n    # The original number of pupils in School Q is then (3/2) * x due to the 2:3 ratio\n\n    # After admitting 240 pupils each, the numbers become:\n    # School P: x + 240\n    # School Q: (3/2) * x + 240\n\n    # The new ratio is 3:4, so we can set up the equation:\n    # (x + 240) / ((3/2) * x + 240) = 3/4\n    # Cross multiply to solve for x:\n    # 4 * (x + 240) = 3 * ((3/2) * x + 240)\n    # 4x + 960 = (9/2) * x + 720\n    # Multiply both sides by 2 to clear the fraction:\n    # 8x + 1920 = 9x + 1440\n    # x = 1920 - 1440\n    # x = 480\n\n    return 480\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    initial_students = 5\n    candies_per_student_initially = 12\n    total_candies = initial_students * candies_per_student_initially\n    new_student_count = initial_students + 1\n    candies_per_student_now = total_candies // new_student_count\n    return candies_per_student_now\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    # Sharon can buy 11 sweets initially.\n    sweets = 11\n    wrappers = 11\n\n    # Keep exchanging wrappers for sweets until not enough wrappers left.\n    while wrappers >= 3:\n        # For every 3 wrappers, she gets 1 sweet.\n        new_sweets = wrappers // 3\n        # Decrement wrappers by the number used to exchange for sweets.\n        wrappers -= new_sweets * 3\n        # Increment sweets and wrappers by the number of new sweets.\n        sweets += new_sweets\n        wrappers += new_sweets\n\n    return sweets\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:40 AM', '%I:%M %p')\n    duration = timedelta(hours=4, minutes=50)\n    departure_time = arrival_time + duration\n    return departure_time.strftime('%I:%M %p').lstrip('0')\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for num in range(10, 100):  # Smallest two-digit number is 10\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    total_weight_kg = 5\n    cost_per_kg = 10 / total_weight_kg\n    bag_weight_kg = 250 / 1000\n    sell_price_per_bag = 0.65\n    \n    num_bags = total_weight_kg / bag_weight_kg\n    total_revenue = num_bags * sell_price_per_bag\n    total_cost = 10\n    \n    profit = total_revenue - total_cost\n    percentage_profit = (profit / total_cost) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Since BP and CP are angle bisectors, by the Angle Bisector Theorem, we know that:\n    # m∠ABP = m∠PBC and m∠ACP = m∠PCB\n    # Let m∠ABP = x and m∠ACP = y\n    # Since it is given that m∠BAC is 50 degrees we can express the other angles as:\n    # m∠ABC = 2x and m∠ACB = 2y\n    # The sum of angles in a triangle is 180 degrees:\n    # In triangle ABC: m∠BAC + m∠ABC + m∠ACB = 180 degrees\n    # Substituting the expressions in terms of x and y, we have:\n    # 50 + 2x + 2y = 180\n    # 2x + 2y = 130\n    # x + y = 65\n    \n    # The angle BPC is the exterior angle for triangle ABC at vertex P, thus:\n    # m∠BPC = m∠ABP + m∠ACP\n    # Substituting the expressions in terms of x and y:\n    # m∠BPC = x + y\n    \n    # But we have already found that x + y = 65\n    # Therefore:\n    ans = 65\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Number of roads from Ayton to Beeton\n    ayton_to_beeton = 4\n    \n    # Number of roads from Beeton to Ceeton\n    beeton_to_ceeton = 5\n    \n    # Number of roads from Ceeton to Deeton\n    ceeton_to_deeton = 6\n    \n    # Number of roads directly from Ayton to Deeton\n    ayton_to_deeton_direct = 3\n    \n    # Total ways of Ayton to Deeton through Beeton and Ceeton\n    ayton_to_deeton_indirect = ayton_to_beeton * beeton_to_ceeton * ceeton_to_deeton\n    \n    # Total different ways from Ayton to Deeton\n    total_ways = ayton_to_deeton_direct + ayton_to_deeton_indirect\n\n    return total_ways\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of each type of bird\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n\n    # Establish equations based on the problem statement\n    eq1 = Eq(two_tailed, 5 + 2 * eight_tailed)  # two-tailed birds are 5 more than twice the number of eight-tailed birds\n    eq2 = Eq(three_tailed, 2 + six_tailed / 2)  # three-tailed birds are 2 more than half the number of six-tailed birds\n    # total number of tails is 2 less than four times the total number of heads\n    eq3 = Eq(2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed, 4 * (two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - 2)\n    # difference between the total number of heads and tails is 241\n    eq4 = Eq(two_tailed + three_tailed + six_tailed + 2 * eight_tailed - (2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed), 241)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    numerator = 15\n    denominator = 20\n    known_numerator = 3\n\n    ans = (denominator * known_numerator) / numerator\n\n    return int(ans)\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n    return twelfth_term\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count_twice = 0\n\n    # Find all numbers that are multiples of two different combinations of 2, 3, and 4\n    # The common multiples of 2 and 3 (lcm(2,3)=6), not including multiples of 4 as they would be triple underlined\n    common_23 = set(range(6, 2017, 6)) - set(range(12, 2017, 12))\n\n    # The common multiples of 2 and 4 (lcm(2,4)=4), which is essentially just multiples of 4, excluding multiples of 3\n    common_24 = set(range(4, 2017, 4)) - set(range(12, 2017, 12))\n\n    # The common multiples of 3 and 4 (lcm(3,4)=12), not including multiples of 2 as they would be triple underlined\n    common_34 = set(range(12, 2017, 12)) - set(range(24, 2017, 24))\n\n    # Merge the sets to count all unique numbers that are underlined exactly twice\n    underlined_twice = common_23.union(common_24).union(common_34)\n\n    # Count these numbers\n    count_twice = len(underlined_twice)\n\n    return count_twice\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the amount of money Joe had initially\n    joe_initial = symbols('joe_initial')\n\n    # Sally had $3.75 initially and spent $2.50\n    sally_after_spending = 3.75 - 2.50\n    \n    # Joe spent $2.50\n    joe_after_spending = joe_initial - 2.50\n\n    # Together they have $5 after spending money on ice-cream\n    equation = Eq(sally_after_spending + joe_after_spending, 5)\n\n    # Solve for the initial amount of money Joe had\n    joe_initial_amount = solve(equation, joe_initial)\n\n    return joe_initial_amount[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_days = 3\n    last_days = 5\n    average_first = 135\n    average_last = 151\n\n    total_trees_first = first_days * average_first\n    total_trees_last = last_days * average_last\n    total_days = first_days + last_days\n\n    total_trees = total_trees_first + total_trees_last\n    average_total = total_trees / total_days\n\n    return average_total\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    ans = 876 * 3\n    return ans\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    equation = Eq(149 + magic_number, 5 * (21 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from itertools import combinations\n\ndef solution():\n    menu_options = [15, 20, 12, 6]  # The number of options for salads, soups, vegetables, and sandwiches\n    num_choices = 2  # The number of choices Eddie can make\n    total_combinations = 0\n\n    # Calculate combinations within each category\n    for count in menu_options:\n        total_combinations += count\n\n    # Calculate the combinations of categories Eddie can choose from\n    category_combinations = list(combinations(menu_options, num_choices))\n\n    # Calculate total combinations by multiplying the options in each selected category\n    total_lunch_combinations = sum(x[0] * x[1] for x in category_combinations)\n\n    return total_lunch_combinations\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0:\n            digits = [int(d) for d in str(i)]\n            if sum(digits) == 7:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    num1 = 202\n    num2 = 22\n    \n    equation = Eq(num1 + magic_number, 6 * (num2 + magic_number))\n\n    magic_number_solution = solve(equation, magic_number)\n\n    return magic_number_solution[0]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    # Start with the smallest possible square (1x1) and incrementally test larger squares\n    total_students = 0\n    side_length = 1  # Initial side length of the square\n    \n    while True:\n        if side_length % 2 == 0:\n            # If side length is even, the number of girls is square of (side_length // 2)\n            girls = (side_length // 2) ** 2\n            # The boys fill the outer two layers, which is the total square minus the girls square\n            boys = side_length * side_length - girls\n        else:\n            # If side length is odd, the number of boys is square of (side_length // 2 + 1)\n            boys = (side_length // 2 + 1) ** 2\n            # The girls fill the inner layers, which is the total square minus the boys square\n            girls = side_length * side_length - boys\n\n        if boys - girls == 32:\n            # Correct condition, calculate the total students\n            total_students = boys + girls\n            break\n        \n        # Increment the side length to check the next potential square size\n        side_length += 1\n\n    return total_students\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "from sympy import isprime, primerange\n\ndef solution():\n    for n in primerange(1, 10000):\n        if all(isprime(n + i) for i in [2, 4, 106, 308]):\n            ans = n\n            break\n    return ans\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    daily_use = 20\n    days_last = total_plasters / daily_use\n    \n    return int(days_last)\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    equation1 = Eq(mangoes - strawberries, 448)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n\n    equation = Eq(apples, lemons + 12)\n\n    solutions = solve((equation), (total_items))\n\n    lemons_count = total_items.subs(total_items, solutions[0]) - (2/3) * solutions[0] - (1/9) * solutions[0]\n\n    return int(lemons_count)\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume Max originally has x dollars, and Anthony originally has y dollars\n    # We know that after Max buys the chocolates, their money is in the ratio 2:5\n    # So (x - 12) / y = 2 / 5\n    # And after Anthony buys the chocolates, their money is in the ratio 8:13\n    # So x / (y - 12) = 8 / 13\n\n    x, y = symbols('x y')\n    equation1 = Eq((x - 12) / y, 2 / 5)\n    equation2 = Eq(x / (y - 12), 8 / 13)\n\n    # Solving the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    def combinations(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n    \n    # This is a problem of distributing n identical items to k distinct containers\n    # Such that each container has at least one item.\n    # It is equivalent to distributing n - k items with no restriction.\n    # This is known as a combination with repetition problem and can be calculated as:\n    # C(n+k-1, k-1) \n    n = 20 - 6  # We give 1 pen to each kid first, so we have 14 left to distribute\n    k = 6 - 1  # Now we have 5 partitions to distribute the rest of the pens\n    ans = combinations(n + k - 1, k)\n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    base_unit_digit = 4\n    cycle = [base_unit_digit]\n    \n    # Find the cycle pattern of unit digits\n    for i in range(1, 4):  # Only need to consider up to 4^4 since it's a cycle\n        new_digit = (base_unit_digit * cycle[i - 1]) % 10\n        if new_digit == base_unit_digit:\n            break\n        cycle.append(new_digit)\n\n    # Calculate the position in the cycle for 444^2022\n    cycle_position = 2022 % len(cycle)\n\n    # Get the unit digit. Use -1 because cycle is 0-indexed and we need the last one if remainder is 0.\n    ans = cycle[cycle_position - 1] if cycle_position != 0 else cycle[-1]\n    return ans\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Initialize the minimum number of marbles for the biggest pile\n    # It will be at least 4 since there are 4 piles and at most 13 \n    # since the remaining piles need to have a different number of marbles\n    min_biggest_pile = 13\n\n    for biggest_pile in range(min_biggest_pile, 0, -1):\n        remaining_marbles = 16 - biggest_pile\n        # Initialize list to store number of marbles in the smaller piles\n        smaller_piles = []\n        # Fill the smaller piles ensuring each has a different number of marbles\n        for pile in range(biggest_pile - 1, 0, -1):\n            if remaining_marbles - pile in smaller_piles or remaining_marbles - pile <= 0:\n                break\n            smaller_piles.append(pile)\n            remaining_marbles -= pile\n        # Check if we managed to divide the marbles into 4 distinct piles\n        if len(smaller_piles) == 3 and remaining_marbles not in smaller_piles and remaining_marbles > 0:\n            return biggest_pile\n\n    return None\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Define a dictionary to convert all measurements to the same unit\n    units = {\n        'millimetres': 1,\n        'centimetres': 10,\n        'metres': 1000,\n        'kilometres': 1000000\n    }\n\n    # Define a list of tuples where each tuple contains the measurement and its respective unit\n    measurements = [\n        (10, 'millimetres'),\n        (100, 'centimetres'),\n        (10, 'metres'),\n        (2, 'kilometres'),\n        (2800, 'centimetres'),\n        (2500, 'metres'),\n        (100, 'millimetres'),\n        (100, 'metres')\n    ]\n\n    # Convert all measurements to the same unit (e.g., millimetres) and find the smallest one\n    min_length = min(measurement[0] * units[measurement[1]] for measurement in measurements)\n    \n    return min_length\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_term = 30\n    common_diff = 4\n    last_term = 70\n\n    # Calculate the number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // common_diff) + 1\n\n    # Calculate the sum of the arithmetic sequence\n    total_pages = (num_terms * (first_term + last_term)) // 2\n\n    return total_pages\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n     \n    difference = smallest_6_digit_number - largest_5_digit_number\n    \n    return difference\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    # There are 6 options for the first digit (1-6), but to be a three-digit number it cannot be 0.\n    first_digit_options = 5  # (1, 2, 3, 4, 5)\n    \n    # There are 5 options remaining for the second digit, as it can't be the same as the first one.\n    second_digit_options = 5\n    \n    # There are only 3 options for the third digit, as it has to be an odd number and not one of the first two digits.\n    third_digit_options = 3  # (1, 3, 5)\n    \n    # Using the multiplication principle to find the total number of combinations.\n    total_combinations = first_digit_options * second_digit_options * third_digit_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let's denote r as the number of red stickers and b as the number of blue stickers\n    # Initially, the number of red and blue stickers is equal, so r = b\n    # Liz gave away 2/3 of her red stickers, so she is left with 1/3 r \n    # If she is left with 1/4 of her stickers, this means (1/3)*r + remaining_blue_stickers = 1/4*(r + b),\n    # Since r = b (initially), we get (1/3)*r + remaining_blue_stickers = 1/4*(2*r)\n\n    r, remaining_blue_stickers = symbols('r remaining_blue_stickers')\n\n    initial_stickers = 2 * r  # Since r = b\n    remaining_stickers = (1/3) * r + remaining_blue_stickers\n    total_remaining_stickers = 1/4 * initial_stickers\n\n    # Create equation based on the above description\n    equation = Eq(remaining_stickers, total_remaining_stickers)\n\n    # Now we solve for the remaining_blue_stickers\n    remaining_blue_stickers_solution = solve(equation, remaining_blue_stickers)[0]\n\n    # The fraction of blue stickers Liz gave away is (b - remaining_blue_stickers) / b\n    # Since r = b, we replace b with r\n    blue_stickers_fraction = (r - remaining_blue_stickers_solution) / r\n    \n    # Simplify the fraction to get the final form\n    blue_stickers_fraction_simplified = blue_stickers_fraction.simplify()\n\n    return blue_stickers_fraction_simplified\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n\n    total_students = swim_only + basketball_only + both + neither\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of 4.\n    # We can use the formula for the sum of the first n terms of an arithmetic sequence: Sn = n/2 * (a1 + an)\n    # where Sn is the sum of n terms, a1 is the first term, an is the last term, and n is the number of terms.\n\n    a1 = 3  # first term\n    an = 19  # last term\n    d = 4  # common difference\n    n = (an - a1) // d + 1  # number of terms\n\n    Sn = n * (a1 + an) // 2  # sum of the arithmetic sequence\n\n    return Sn\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    ans = 324 * 24\n    return ans\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    current_steps = 1991\n    while True:\n        current_steps += 1\n        if str(current_steps) == str(current_steps)[::-1]:\n            break\n    return current_steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    lucky_count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            lucky_count += 1\n    return lucky_count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201 + 1):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    for cows in range(26):\n        ducks = 25 - cows\n        if cows * 4 + ducks * 2 == 68:\n            return ducks\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    # Total number of children\n    total_children = 11 + 5\n\n    # Total combined height of the children\n    total_height = 122.5 * total_children\n\n    # Let's denote the average height of the boys as 'b'\n    # Then the average height of the girls will be 'b + 3.2'\n\n    # The total height of the boys would be '5 * b'\n    # The total height of the girls would be '11 * (b + 3.2)'\n\n    # According to the problem statement, the sum of the total heights is equal to total_height\n    # 5 * b + 11 * (b + 3.2) = total_height\n\n    # We can now solve for 'b'\n    b = (total_height - 11 * 3.2) / (11 + 5)\n\n    # The average height of the girls would be 'b + 3.2'\n    average_height_girls = b + 3.2\n\n    return average_height_girls\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Using the inductive formula for the maximum number of regions into which n planes can divide space:\n    # R(n) = R(n-1) + n\n    # For n triangles (planes), the maximum number of regions R(n) is given by the n-th triangular number plus n.\n    # The nth triangular number is given by T(n) = n*(n+1)/2.\n    # Hence, R(n) = T(n) + n = n*(n+1)/2 + n = n/2 * (n+1 + 2)\n    \n    n = 5\n    ans = n * (n + 1) // 2 + n  # integer division because we can only have a whole number of regions\n    return ans\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')  # Define variables for girls\n    boys = 70 - girls         # Number of boys is total students minus number of girls\n\n    # Equation based on total average score\n    total_average_eq = Eq((girls * 70 + boys * 63) / 70, 66)\n    \n    # Solve the equation for the number of girls\n    num_girls = solve(total_average_eq, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Total number of terms n is given as 9\n    n = 9\n    \n    # Sum of the arithmetic sequence is given as 1503\n    sum_n = 1503\n    \n    # Average of the terms = sum of the terms / number of terms\n    average = sum_n / n\n    \n    # In an arithmetic sequence of odd numbers, the average is the middle term.\n    # Since the numbers are consecutive and odd, the difference (d) between terms is 2.\n    # The first term (a1) can be computed as the middle term minus 4d\n    a1 = average - 4 * 2\n    \n    return int(a1)\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    bookmarks_gift_4 = 8\n    bookmarks_gift_6 = -10\n\n    # Let x be the number of pupils and y be the total bookmarks Mr. Wong has.\n    # If he gives each pupil 4 bookmarks, he has 8 left:\n    # 4 * x + 8 = y\n    # If he gives each pupil 6 bookmarks, he is short of 10:\n    # 6 * x = y - 10\n    \n    # Rearranging the equations:\n    # y - 4x = 8 (1)\n    # y - 6x = -10 (2)\n    \n    # Subtracting (2) from (1) gives us\n    # 4x - 6x = 8 - (-10)\n    # -2x = 18\n    # x = -18 / -2\n    # x = 9 pupils\n    \n    # Using x to find y from any of the two initial equations:\n    # y - 4*9 = 8  or  y - 6*9 = -10\n    # y = 8 + 36 or y = -10 + 54\n    # y = 44 or y = 44\n\n    # Mr. Wong had 44 bookmarks\n    return 44\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    term32 = 157\n    term108 = 537\n    difference = (term108 - term32) / (108 - 32)\n    \n    first_term = term32 - (32 - 1) * difference\n    \n    return int(first_term)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    candies_left_with_kate = 42\n    candies_jane_gave_to_kate = candies_left_with_kate / (1 - 1/4)\n    candies_jane_had = (candies_jane_gave_to_kate + 4) * 3\n    candies_donna_gave_to_jane = candies_jane_had / (1 - 1/2)\n    candies_donna_had = (candies_donna_gave_to_jane - 3) * 2\n    return candies_donna_had\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are 4 individuals, labelled A, B, C, D\n    # A starts with the ball and after 3 passes it must return to A\n    \n    # Choose the first person to receive the ball from A (3 options, as it can't be A)\n    # Choose the second person to receive the ball (2 options, as it can't be A or the first receiver)\n    # The last pass must be to A\n    # Total number of different methods = 3 * 2\n    \n    ans = 3 * 2\n    return ans\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    number_of_days = 5\n\n    total_cost = cost_per_day * number_of_days\n\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) / 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    jason_books = 30\n    anthea_books = jason_books - 4  # Anthea's books after Jason gives her 4 books\n\n    # Both have the same number after Jason gives Anthea 4 books, so:\n    # jason_books - 4 = anthea_books + 4\n    # Working this out gives us anthea_books at the beginning:\n    # jason_books - 4 = (jason_books - 4) + 4\n    # Simplifying gives us:\n    anthea_books_at_start = anthea_books\n\n    # Calculate the difference at first\n    difference_at_first = jason_books - anthea_books_at_start\n\n    return difference_at_first\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) // (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for p, q in permutations(range(10), 2):\n        qp = q * 10 + p\n        pq = p * 10 + q\n        if pq - qp == (q + p):\n            return qp\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    # The position of the first guest that gets both a face mask and a mug\n    # will be at the least common multiple (LCM) of 4 and 10\n    from math import lcm\n    first_guest_position = lcm(4, 10)\n    return first_guest_position\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    return sum(range(27, 34))\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_s = 2  # William's speed in metres per second\n    time_s = 12 * 60   # 12 minutes converted to seconds\n\n    distance = speed_m_per_s * time_s  # Distance = Speed * Time\n\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    ans = (2020 * 68) + (505 * 128)\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n    concentration = (total_sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the efficiencies\n    a, b = symbols('a b')\n\n    # a's efficiency is twice b's\n    equation1 = Eq(a, 2 * b)\n\n    # Time taken by A to finish work is 12 days less than B\n    # Since efficiency * time = work, considering work as a constant (in this case, 1 job)\n    # a_time * a = 1, b_time * b = 1\n    # Therefore, a_time = 1/a, b_time = 1/b and b_time = a_time + 12\n    equation2 = Eq(1/a, 1/b + 12)\n\n    # Solve the system of equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Get the efficiencies\n    a_efficiency = solutions[a]\n    b_efficiency = solutions[b]\n\n    # Combined efficiency when A and B work together\n    combined_efficiency = a_efficiency + b_efficiency\n\n    # Total time for A and B to complete the work together is 1/combined_efficiency\n    total_time = 1 / combined_efficiency\n\n    return total_time\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10\n    newspaper_cost = 2.20\n    change_received = 4.83\n\n    tissues_cost = total_paid - (newspaper_cost + change_received)\n\n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initially, the number of boys and girls is the same\n    initial_condition = Eq(boys, girls)\n\n    # After 3/5 of the boys and 42 girls left, there were 12 more boys than girls\n    after_condition = Eq(boys - (3/5)*boys, girls - 42 + 12)\n\n    # Solving the equations\n    solutions = solve((initial_condition, after_condition), (boys, girls))\n\n    # The total number of students at first is the sum of boys and girls\n    total_students = solutions[boys] + solutions[girls]\n\n    return total_students\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours for the time difference\n    late_time = 12 / 60  # 12 minutes in hours\n    early_time = 4 / 60   # 4 minutes in hours\n\n    # Let x be the distance from home to office and t the normal time to travel.\n    # When Mike travels at 3 km/h, he is late by 'late_time', so the equation is:\n    # x / 3 = t + late_time\n    # When he travels at 5 km/h, he is early by 'early_time', so the equation is:\n    # x / 5 = t - early_time\n    # From the two equations, we can solve for x as follows:\n    # x = 3 * (t + late_time) and x = 5 * (t - early_time)\n    # Equating them gives: 3 * (t + late_time) = 5 * (t - early_time), which simplifies to\n    # 3t + 3 * late_time = 5t - 5 * early_time\n    # Solving for t gives:\n    # 3 * late_time + 5 * early_time = 2t\n    t = (3 * late_time + 5 * early_time) / 2\n\n    # The distance x can now be found using one of the initial relations:\n    x = 3 * (t + late_time)\n\n    return x\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 11111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from math import factorial\n\ndef solution():\n    digits = 3  # number of digits available\n    ans = 0  # initialize variable to hold the number of combinations\n\n    # calculate combinations for each possible length\n    for length in range(1, digits + 1):\n        ans += factorial(digits) // factorial(digits - length)\n\n    return ans\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    baskets_of_tomatoes = 27\n    baskets_of_cucumbers = 3 + 3 * baskets_of_tomatoes\n    return baskets_of_cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    # Symbolic math can be used to solve the two equations\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces of candy, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If Alice gives Rachel 10 pieces, Rachel has 4 more than 3 times Alice's pieces\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solving the system of equations for rachel and alice\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # The total amount of candy is the sum of what Rachel and Alice originally had\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for boys (b) and girls (g)\n    b, g = symbols('b g')\n    \n    # Apply given conditions\n    ratio_morning = Eq(b/g, 3/2)\n    ratio_afternoon = Eq((b + 12)/(g + 12), 19/14)\n    \n    # Solve the two equations to find the number of boys and girls\n    solutions = solve((ratio_morning, ratio_afternoon), (b, g))\n    \n    # Calculate the total number of children in the gardens in the afternoon\n    total_children_afternoon = solutions[b] + 12 + solutions[g] + 12\n    \n    return total_children_afternoon\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_pencil_case = 6.25\n    total_cost = 12 * cost_per_pencil_case\n    return total_cost\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    temperature_increase = 13 - (-8)\n    return temperature_increase\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n    \n    # For four different colored socks\n    num_ways_diff_colored = factorial(4)\n    \n    # For two pairs of different colored socks (e.g., ABAB)\n    # Since pairs are identical, consider one pair as one item. Then we have \"AABB\".\n    # There are 4!/2!2! ways to arrange them, due to the pairs being identical.\n    num_ways_two_pairs = factorial(4) // (factorial(2) ** 2)\n    \n    return num_ways_diff_colored, num_ways_two_pairs\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    card_a = 40\n    card_b = card_a / 2\n    card_c = card_b / 2\n\n    total_value = card_a + card_b + card_c\n\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    g_earth = 9.81  # acceleration due to gravity on Earth in m/s^2\n    g_moon = g_earth / 6  # acceleration due to gravity on the Moon in m/s^2\n\n    period_earth = 1  # period of the pendulum on Earth in seconds\n\n    # The formula for the period T of a simple pendulum: T = 2*pi*sqrt(L/g)\n    # Because the length of the pendulum L is the same in both cases, and 2*pi is a constant,\n    # the ratio of the periods T_moon/T_earth is the square root of the inverse ratio of g:\n    period_moon = period_earth * (g_earth / g_moon) ** 0.5\n\n    return period_moon\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_first_bar = 23\n    length_second_bar = 37\n    length_welded_part = 3\n\n    full_length = length_first_bar + length_second_bar - length_welded_part\n\n    return full_length\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    for william_correct in range(11):\n        justin_correct = william_correct + 4\n        if justin_correct > 10:\n            break\n        william_points = william_correct * 6 - (10 - william_correct) * 2\n        justin_points = justin_correct * 6 - (10 - justin_correct) * 2\n        if justin_points + william_points == 96 and justin_points - william_points == 24:\n            return william_correct\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 3, 1)\n    end_date = datetime(2023, 4, 15)\n    \n    day_count = (end_date - start_date).days + 1 # +1 because the start day counts as a day of the trip\n\n    return day_count\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's work rate per day\n    rate_A = 1 / 15\n    # B's work rate per day\n    rate_B = 1 / 10\n    # Combined work rate per day\n    combined_rate = rate_A + rate_B\n    # Work done in 3 days\n    work_done = 3 * combined_rate\n    # Remaining work\n    remaining_work = 1 - work_done\n    # Days for B to finish the remaining job\n    days_for_B = remaining_work / rate_B\n    \n    return days_for_B\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles**0.5) # Side length of the wall\n    red_tiles = 0\n    green_tiles = 0\n    layers = side_length // 2  # half the number of layers since they repeat in red-green pairs\n    if side_length % 2 == 1:  # If odd, center tile will be red\n        red_tiles += 1\n    for layer in range(layers):\n        # Each layer contributes 4 sides minus 4 for the corners counted twice\n        if layer % 2 == 0:  # Red layer\n            red_tiles += (side_length - layer*2) * 4 - 4\n        else:  # Green layer\n            green_tiles += (side_length - layer*2) * 4 - 4\n    more_tiles = abs(red_tiles - green_tiles)\n    dominant_color = \"red\" if red_tiles > green_tiles else \"green\"\n    \n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    side_length = 100 ** 0.5  # Since people are in a square array\n    if side_length.is_integer():\n        # If side length is an integer, all sides have the same number of people\n        people_in_outer_layer = 4 * (side_length - 1)\n    else:\n        side_length = int(side_length) + 1  # Taking the next integer if not perfect square\n        people_in_outer_layer = (side_length * 4) - 4  # Accounting for overlapping corners\n\n    return int(people_in_outer_layer)\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = -4  # The common difference is the decrement between terms\n\n    # The nth term of an arithmetic sequence is given by: a_n = a_1 + (n-1)*d\n    # We want to find n such that a_n < 0\n    # 50 + (n-1)*(-4) < 0\n    # (n-1)*(-4) < -50\n    # n-1 > 50/4\n    # n > 12.5\n    # Since n must be an integer, we take the next whole number which is 13\n    # However, the 13th term is the first negative term (we want the count until the first negative)\n    # So the number of non-negative terms is 12\n\n    return 12\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Nim game strategy: make the XOR of the pile sizes equal to 0.\n    # Tom will win if the XOR of the two pile sizes is not zero at the beginning,\n    # and he can always make a move that maintains the XOR = 0 condition.\n    a_cards = 88\n    b_cards = 52\n    if a_cards ^ b_cards == 0:\n        return \"No winning strategy, Tom will lose if Jane plays perfectly.\"\n    else:\n        for cards_to_take in range(1, a_cards + 1):\n            if (a_cards - cards_to_take) ^ b_cards == 0:\n                return f\"Tom should take {cards_to_take} cards from Pile A.\"\n\n        for cards_to_take in range(1, b_cards + 1):\n            if a_cards ^ (b_cards - cards_to_take) == 0:\n                return f\"Tom should take {cards_to_take} cards from Pile B.\"\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    remaining_after_sister = 4 / 7  # 1 - 3/7\n    remaining_after_mum = 7 / 8  # 1 - 1/8\n    remaining_cash = remaining_after_sister * remaining_after_mum\n\n    # He has $280 left after giving money to his sister and mum\n    initial_cash = 280 / remaining_cash\n\n    return initial_cash\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Since this is a number puzzle, and the knowledge point indicates vertical forms,\n    # we can deduce that the digits of A must add up to a number where every digit is 9,\n    # as that's the only way to get a final number composed exclusively of 9s in every digit.\n\n    # Given the pattern, for every digit of A, when added to B's corresponding digit (which is 0),\n    # we must get 9. And since B is 0, each digit of A must therefore be 9 to satisfy the condition.\n    # So, if A has n digits, the value of A is a number consisting of n digits of 9.\n\n    # To determine n, we have to look at the problem more carefully. Since there is no B provided,\n    # we must assume that A's every digit is simply 9.\n\n    # Assuming the simplest case where A has only one digit, the maximum sum we could get is:\n    # A + A (single digit form) = 9 + 9 = 18. This form would violate the condition, as the result\n    # would have a digit other than 9.\n\n    # Therefore, we can assume that A has multiple digits. Let's assume it has two digits (99).\n    # Then A + A = 99 + 99 = 198. Again, we get a number that violates the condition,\n    # as it doesn't consist solely of 9s.\n\n    # Let's increase the number of digits in A to three (999):\n    # Then A + A = 999 + 999 = 1998, and again, this is invalid.\n\n    # This pattern shows that each time we add a digit of 9 to A, the sum will start with digit 1\n    # followed by all 9s except for the last digit which will be 8.\n\n    # The only way to solve this is to make an assumption that will turn the last digit into a 9\n    # without affecting the other digits.\n    # Assumption: Carry-over from the preceding addition causes the last digit to add up to 9.\n    # A must therefore end with a 0 to cause a carry-over.\n\n    # To satisfy this, A will have to contain n-1 digits of 9 and end with a 0 (e.g., 9990).\n    # 9990 + 9990 = 19980, which satisfies the condition for the last digit.\n\n    # However, due to the carry-over, all digits but the first changed from 9. This is incorrect.\n    # Therefore, A needs to be 99990.\n    # 99990 + 99990 = 199980, and now all but the first two digits are 9.\n\n    # The pattern suggests that if we add enough 9s followed by a 0 at the end of A,\n    # all digits after the first will be 9s.\n\n    # Testing with five 9s followed by a 0 (999990):\n    # 999990 + 999990 = 1999980.\n\n    # Following this logic, the correct A will have one less 9 than the total number of digits.\n    # So, if A has n digits, it will have n-1 consecutive 9s followed by a 0 to complete the number.\n\n    # The sums will be in the form of \"1\" followed by n-1 digits of 9, and a trailing 0.\n\n    # To find the exact length of A, we need the minimum number of 9s such that addition of\n    # a single digit (the carry over) will turn the next 8 into 9. This is achieved with A as:\n    # A = \"9999999990\", because:\n    # 9999999990 + 9999999990 = 19999999980, which is a number that meets all the conditions.\n\n    # Therefore, the value of A is 9999999990.\n    A = 9999999990\n    return A\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cups = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cups\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # Utilize the Pigeonhole Principle, where n pigeons (apples) are put into m holes (students)\n    # If n > m * (k - 1), then at least one hole contains k or more pigeons (apples).\n    # Here, we want to find the smallest m such that there's at least one student with 3 apples.\n    \n    apples = 80\n    apples_per_student = 2  # One student gets at least 3, so we start by giving 2 to each to find the smallest class size.\n    \n    # Calculate the number of students needed to ensure one student gets at least 3 apples.\n    num_students = (apples + apples_per_student - 1) // apples_per_student\n\n    return num_students\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, white, black = symbols('red white black')\n    total_balls = 34\n    \n    equation1 = Eq(red * 2, white) # Red to white ratio 1:2\n    equation2 = Eq(white * 4, black * 3) # White to black ratio 3:4\n    equation3 = Eq(red + white + black, total_balls)\n    \n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n    \n    return solutions[red]\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    equation1 = Eq(6 * cheesecake + 7 * logcake, 1426)\n    equation2 = Eq(4 * cheesecake, 3 * logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    total_cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return total_cost\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n\n    each_receive = total_amount / people\n\n    return each_receive\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Since 2014! will have at least one 2 and one 5, it is guaranteed to end with a 0.\n    # Therefore, the last digit of 2014! is 0.\n    return 0\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5 * 5  # Area of the base in cm^2\n    hole_area = 1 * 1  # Area of the hole in cm^2\n    net_base_area = base_area - hole_area  # Net area in cm^2\n    \n    height = 480 / net_base_area  # Volume divided by the net area in cm\n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    ans = sum(i * (2*i - 1) for i in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n    pencils_for_pen = pen_cost // pencil_cost\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 1002, 2):\n        total_sum += i - (i+1)\n    return total_sum\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yellow, green = symbols('yellow green')\n\n    # initial ratio condition\n    equation1 = Eq(yellow/green, 3/2)\n    # final ratio condition after adding beads\n    equation2 = Eq((green + 20)/(yellow + 5), 3/2)\n\n    solutions = solve((equation1, equation2), (yellow, green))\n\n    return int(solutions[yellow] + solutions[green])\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x in range(1, 13):  # first number\n        for y in range(1, 13):  # second number\n            z = 13 - x - y  # third number\n            if z > 0 and z != x and z != y and x < y < z:  # excluding 0, unique numbers, and enforce an order to avoid duplicates\n                count += 1\n    return count\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_sisters = 13 * 2\n    marbles_left = 16\n\n    initial_marbles = marbles_given_to_brother + marbles_given_to_sisters + marbles_left\n\n    return initial_marbles\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n\n    # Checking for 2-digit palindromic numbers: xx\n    for x in range(1, 10):\n        count += 1\n\n    # Checking for 3-digit palindromic numbers: xyx\n    for x in range(1, 10):\n        for y in range(0, 10):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    sum = 0\n    for i in range(1, 21):\n        sum += (2 * i - 1)\n    return sum\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    meeting_time = 4\n    \n    # Calculate the distance each person traveled\n    amy_distance = amy_speed * meeting_time\n    christen_distance = christen_speed * meeting_time\n    \n    # Total distance between the two starting points\n    total_distance = amy_distance + christen_distance\n\n    # Time taken for Christen to reach Amy's starting point\n    time_for_christen = total_distance / christen_speed\n\n    return time_for_christen\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    ans = 617 + 385\n    return ans\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    return 2570 / 10000\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '013689'\n    count = 0\n    for p in permutations(digits, 4):\n        if p[-1] in '068' and p[0] != '0':  # Last digit must be even and not start with 0.\n            count += 1\n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    # total number of questions\n    total_questions = 50\n    # marks for each correct answer\n    correct_marks = 4\n    # deduction for each wrong answer\n    wrong_deduction = 1\n    # Tobby's total score\n    total_score = 110\n\n    # let's denote the number of correct answers as correct_answers\n    # the number of wrong answers is then (total_questions - correct_answers)\n    # setting up the equation for the total score:\n    # correct_marks * correct_answers - wrong_deduction * (total_questions - correct_answers) = total_score\n\n    # we'll solve the equation:\n    # 4 * correct_answers - 1 * (50 - correct_answers) = 110\n    # 4 * correct_answers - 50 + correct_answers = 110\n    # 5 * correct_answers = 110 + 50\n    # correct_answers = 160 / 5\n    correct_answers = (total_score + total_questions) / (correct_marks + wrong_deduction)\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    lemon_ratio = 4\n    chocolate_ratio = 5\n    total_ratio = lemon_ratio + chocolate_ratio\n    lemon_cakes = remaining_cakes * (lemon_ratio / total_ratio)\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    # There are 9 choices for the first digit (1-9, cannot be 0)\n    # There are 9 choices for the second digit (0-9 excluding the first digit)\n    # There are 2 choices for the position of the third digit (same as first or second digit)\n    \n    # Total number of possibilities for exactly two different digits in a three-digit number:\n    count = 9 * 9 * 2\n    \n    # However, we have overcounted the cases where all three digits are the same (e.g., 111, 222)\n    # For each of the 9 possible digits, there is one case of this type\n    overcount = 9\n    \n    # Final count is total possibilities minus overcounted cases\n    ans = count - overcount\n    \n    return ans\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    from math import lcm\n    ans = lcm(2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Lily sends to Judy.\n    x = symbols('x')\n    \n    # Let L be the number of books Lily has and J be the number Judy has.\n    # When Lily sends x books to Judy, they both have the same amount.\n    # So, Lily originally had x more books than Judy.\n    # This gives us two equations:\n    # L - x = J + x  (1)\n    # L = J + x      (2)\n\n    # (1) is equivalent to L - J = 2x\n    # Since we want to find the value of x, we substitute L from (2) into (1):\n    # J + x - J = 2x\n    # x = 2x  (which has no solution since it's incorrect)\n\n    # We should correct our equations. L - x is not equal to J + x.\n    # Correct equations:\n    # L - x = J + x  (Both have the same amount)\n    # From the above equation we solve for L - J\n    # L - J = 2x\n    \n    # Now we solve for x which is the amount of books that makes them equal\n    # and 2x will be the initial difference between the books Lilly had more than Judy.\n    eq = Eq(L - J, 2 * x)\n    solved_x = solve(eq, x)[0]\n    \n    # We return 2x as the answer for how many more books did Lily have than Judy at the beginning.\n    return 2 * solved_x\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # All the permutations involve Lily passing to either Cici or April in the first move\n    # Then the second pass has two options, pass it back to Lily or to the third person\n    \n    # First pass - 2 options (Cici or April)\n    # Second pass - 2 options for each scenario in First pass\n    # Total = First pass options * Second pass options for each possibility of the first pass\n    \n    first_pass_options = 2\n    second_pass_options_per_first_pass = 2\n\n    total_ways = first_pass_options * second_pass_options_per_first_pass\n    return total_ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    average_first_four = 89\n    num_assignments = 4\n    fifth_score = 94\n\n    total_first_four = average_first_four * num_assignments\n    total_five = total_first_four + fifth_score\n    average_five = total_five / (num_assignments + 1)\n\n    return average_five\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    total_arms = 81\n    wibbles = 11\n    wibble_arms = 6 * wibbles\n    wobble_arms = total_arms - wibble_arms\n    wobbles = wobble_arms // 5\n    \n    return wobbles\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "from sympy import primerange, solve, symbols\n\ndef solution():\n    a, b = symbols('a b')\n    primes = list(primerange(1, 180))  # a and b are prime and their combinations won't exceed 179\n    for prime_a in primes:\n        for prime_b in primes:\n            if 7*prime_a + 9*prime_b == 179:\n                return prime_a + prime_b\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    # Loop through each possible 3-digit number\n    for num in range(100, 1000):\n        # Convert to string for easy digit extraction\n        str_num = str(num)\n        hundreds = int(str_num[0])\n        tens = int(str_num[1])\n        ones = int(str_num[2])\n\n        # Apply the given conditions\n        if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n            return num\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = boys * 2\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    return 0.15 * 420\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    minutes = 32\n    quarter_of_sixth_of_eighth = (1/4) * (1/6) * (1/8) * minutes\n    seconds = quarter_of_sixth_of_eighth * 60\n    return seconds\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbolic representation for the amount collected by each friend\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n\n    # Alan and Bilal's amounts are given\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n\n    # Relations between the amounts collected by Chloe, David, and Emily\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n\n    # The total amount collected by everyone\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (alan, bilal, chloe, david, emily))\n\n    # Returning the amount collected by Chloe\n    return solutions[chloe]\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # The given operation is associative (a # b) # c = a # (b # c)\n    # Expanding the operation: a # b = a + b - (ab)/910, we see that each operation a # b can be rewritten as:\n    # a # b = (910a + 910b - ab) / 910 = (910*(a+b) - ab) / 910\n    # The operation effectively adds the numbers while factoring out their product over 910.\n    # When we apply this operation in a chain, starting from the right:\n    # 2 # 1 = (2 + 1 - (2*1)/910) = 3 - 2/910\n    \n    # Let's calculate the consecutive operations from right to left.\n    accumulator = 1\n    for i in range(2, 2017):\n        accumulator = i + accumulator - (i * accumulator) / 910\n        \n    return accumulator\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    # Let's denote the two numbers as x and y, where x is the larger number.\n\n    # x + y = 80 (sum of the two numbers)\n    # x - y = 40 (difference of the two numbers)\n\n    # Adding these two equations will help us eliminate y:\n    # 2x = 120\n    # Thus, x = 120 / 2\n    x = 120 / 2\n\n    # Now we can find y by substituting x in one of the original equations:\n    # x + y = 80  =>  y = 80 - x\n    y = 80 - x\n\n    # The smaller number is y\n    return y\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick = boys * girls\n    return ways_to_pick\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    count = 0\n    # Each kid has to get at least one eraser, loop starts from 1 instead of 0\n    for x1 in range(1, 6):\n        for x2 in range(1, 6):\n            x3 = 6 - x1 - x2\n            if x3 >= 1:  # making sure the third kid gets at least one eraser\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    for correct_answers in range(7):  # Valerie can't answer more than 6 questions correctly\n        wrong_answers = 6 - correct_answers\n        score = 5 * correct_answers - 2 * wrong_answers\n        if score == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    # Convert 24 minutes to hours\n    time_maverick_thinks = 24 / 60\n    \n    # Calculate the distance Maverick thinks he traveled in that time\n    distance_maverick_thinks = time_maverick_thinks * 15\n    \n    # Calculate the distance Kelvin traveled in that time\n    distance_kelvin_traveled = time_maverick_thinks * 10\n    \n    # Calculate the initial gap plus distance Kelvin traveled\n    total_distance_to_catch_up = 10 + distance_kelvin_traveled\n    \n    # Check if Maverick's thought is correct\n    is_maverick_correct = distance_maverick_thinks == total_distance_to_catch_up\n    \n    if is_maverick_correct:\n        # Maverick is correct\n        return time_maverick_thinks * 60  # Convert hours back to minutes\n    else:\n        # Kelvin is correct, calculate the correct time taken by Maverick to catch up\n        # The relative speed at which Maverick is catching up to Kelvin\n        relative_speed = 15 - 10\n        \n        # Time taken for Maverick to catch up is the gap divided by the relative speed\n        correct_time_maverick_takes_hours = 10 / relative_speed\n        \n        # Convert hours to minutes\n        return correct_time_maverick_takes_hours * 60\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    plum_trees = 41\n    distance_plum = 4\n    total_distance = (plum_trees - 1) * distance_plum\n\n    distance_pine = 5\n    pine_trees = total_distance // distance_pine + 1\n\n    return pine_trees\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the current age of the younger man, y is the current age of the older man\n\n    equation1 = Eq(y - x, x - 4)\n    equation2 = Eq(y - x, 61 - y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    original_hours = 9\n    target_hours = 3\n    original_people = 10\n    \n    # Calculate the total work done by 10 people in 9 hours\n    total_work = original_people * original_hours\n    \n    # Calculate the number of people required to do the total work in 3 hours\n    required_people = total_work / target_hours\n    \n    return required_people\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    cost_of_bag = 120\n    fraction_remaining_after_book = 1 - 1/3\n    fraction_spent_on_bag = 2/5\n\n    # the money spent on the bag is 2/5 of the remaining money after buying the book\n    remaining_money_after_book = cost_of_bag / fraction_spent_on_bag\n\n    # the remaining money after buying the book is 2/3 of the original amount\n    original_money = remaining_money_after_book / fraction_remaining_after_book\n\n    return original_money\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_petrol = week1 + week2 + week3\n    return total_petrol\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    difference = 4\n    nancy_weight = candy_weight - difference\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_watermelons = symbols('total_watermelons')\n\n    first_day_sold = total_watermelons / 3\n    remaining_after_first_day = total_watermelons - first_day_sold\n    second_day_sold = 0.6 * remaining_after_first_day\n    remaining_after_second_day = remaining_after_first_day - second_day_sold\n    \n    equation = Eq(remaining_after_second_day, 48)\n\n    total_initial_watermelons = solve(equation, total_watermelons)\n\n    return total_initial_watermelons[0]\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    # Apply the provided formula for sum of squares from 1 to n\n    sum_squares_n = (n * (n + 1) * (2 * n + 1)) // 6\n    # Calculate the sum of the squares from 1 to the term before the first relevant term\n    sum_squares_before_first = ((first_term - 1) * first_term * (2 * (first_term - 1) + 1)) // 6\n    # Subtract to get the sum from the first relevant term to n\n    ans = sum_squares_n - sum_squares_before_first\n    \n    return ans\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):  # Ensure x2 is greater than x1\n            for x3 in range(x2 + 1, 9):  # Ensure x3 is greater than x2\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    # Number of desks in front of Jessica\n    desks_in_front_of_jessica = 5\n    \n    # Number of desks behind Judy\n    desks_behind_judy = 7\n    \n    # Jessica sits in front of Judy, hence we have 1 desk (Jessica's) between the desks in front\n    # of Jessica and behind Judy\n    total_desks = desks_in_front_of_jessica + desks_behind_judy + 1 + 1  # Plus 1 for Jessica's and 1 for Judy's desks\n\n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    return 9 - (-8) + 7 - (-6) + 5 - (-4) + 3 - (-2) + 1\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(0.75 * x - 5, 2.5)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    start_amount = 1000\n    delta = -11\n    current = start_amount\n    while current > 0:\n        current += delta\n    return current + 11  # to get the first negative number\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    return product % 100\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    first_number = 0.11\n    middle_number = 0.126\n    difference = middle_number - first_number\n    \n    second_number = middle_number + difference\n\n    return second_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n\n    sweets_per_classmate = total_sweets // classmates\n\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    ratio = 7 / 12\n    toffees = chocolates * ratio\n    return int(toffees)\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "网络故障，请重试"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for number in range(28, 41):\n        if number % 4 == 0 and 9 in [i for i in range(1, number + 1) if number % i == 0]:\n            return number\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    return 21 + 27 + 19 - 17 + 22 + 18\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    mangoes_cost_per_case = 56\n    mangoes_cases = 24\n    lychees_cases = 19\n\n    total_cost = 2826\n    mangoes_total_cost = mangoes_cost_per_case * mangoes_cases\n\n    lychees_total_cost = total_cost - mangoes_total_cost\n    lychees_cost_per_case = lychees_total_cost / lychees_cases\n\n    return lychees_cost_per_case\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                totals.add(i + j + k)\n\n    return len(totals)\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if int(\"5{}3\".format(A)) * int(\"2{}6\".format(B)) == int(\"106{}58\".format(C)):\n                    return A + B + C\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n    \n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage = 65 / 100\n    decimal = 0.507\n    fraction = 1 / 4\n    \n    ans = percentage + decimal + fraction\n    return ans\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    unique_numbers = set()\n    for perm in permutations('1122', 3):\n        if perm[0] != '0':\n            unique_numbers.add(''.join(perm))\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Since it's a multiplication tiling puzzle, we need to figure out P, Q, and R\n    # We know that: A=9, B=5, D=8 (from the given vertical multiplication)\n    # Therefore, the multiplication is 95 * 8 = 760\n    # Hence, E=7, P=6, Q=0, R=0\n    # Now, the value of P+Q+R\n    P = 6\n    Q = 0\n    R = 0\n    return P + Q + R\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children_with_name, children_without_name = symbols('children_with_name children_without_name')\n    \n    equation1 = Eq(10 * children_without_name + 15 * children_with_name, 555)\n    equation2 = Eq(children_with_name + children_without_name, 50)\n\n    solutions = solve((equation1, equation2), (children_with_name, children_without_name))\n\n    return solutions[children_with_name]\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Jogging time from 7:30 am to 8:30 am is 1 hour\n    jogging_speed = 5  # miles per hour\n    jogging_distance = jogging_speed * 1  # hours * miles/hour\n\n    # Walking time from 8:30 am to 10:30 am is 2 hours\n    walking_speed = 3  # miles per hour\n    walking_distance = walking_speed * 2  # hours * miles/hour\n\n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Let the smallest number be x, then the numbers are x, x+1, x+2, x+3, x+4\n    # Their sum is given by x + (x + 1) + (x + 2) + (x + 3) + (x + 4) = 100\n    # Simplify the equation to 5x + 10 = 100\n    # Solve for x: 5x = 90\n    x = (100 - 10) // 5\n    return x\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    # We need to find the value of q such that 44000/q is a perfect cube.\n    # We need to factorize 44000 and find its cube factors.\n    # Prime factorization of 44000 = 2^5 * 5^3 * 11\n    # To make 44000/q a perfect cube, q must include factors that allow the remaining factors of 44000 to be a perfect cube.\n    # Therefore, q can be the product of the cube root of any factors that are not a perfect cube.\n    \n    # 44000 = 2^5 * 5^3 * 11^1\n    # The factors that are not perfect cubes are 2^2 and 11^1 (2^3 is a perfect cube, and 5^3 is a perfect cube).\n    # Hence q should multiply with the factors to make a perfect cube.\n    # So it should be 2^2 * 11 = 4 * 11 = 44 to make the division result in a perfect cube.\n    \n    q = 4 * 11\n    return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_10_boxes = 10 * 3\n    oranges_in_5_boxes = 5 * 7\n    oranges_left = total_oranges - (oranges_in_10_boxes + oranges_in_5_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n\n    bags_used = (total_balls - 2) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # There are 13 different numbers and 4 patterns, so there can be at most 2 cards with the\n    # same number among any set of 2*13 = 26 cards without violating the condition.\n    # To guarantee that at least 3 cards will have the same number, we need to draw one more card.\n    return (2 * 13) + 1\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800  # The length of the road in meters\n    num_trees = 21  # The number of trees to be planted\n\n    # The number of intervals is one less than the number of trees\n    num_intervals = num_trees - 1\n\n    # The distance between each tree is the total length divided by the number of intervals\n    distance_between_trees = total_length / num_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    # Initial number of notebooks Andy has\n    andy_notebooks = 149\n    # Notebooks given to sister\n    notebooks_given = 38\n    \n    # Compute the final number of notebooks for Andy and his sister\n    andy_final = andy_notebooks - notebooks_given\n    sister_final = andy_final\n    \n    # Compute the initial number of notebooks for Andy's sister\n    sister_initial = sister_final - notebooks_given\n\n    return sister_initial\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    return (3/4) * 28\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    total_distance = 90\n    num_trees = 9\n\n    distance_between_each_tree = total_distance / (num_trees + 1)\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "def solution():\n    from sympy import isprime\n\n    original_number = \"200\"\n    prime_count = 0\n\n    # Change each digit one by one (three different digits can be changed)\n    for position in range(3):\n        # Try replacing it with all other 10 digits (0-9)\n        for digit in \"0123456789\":\n            if position == 0 and digit == \"0\":\n                # Skip because we can't have a number starting with 0.\n                continue\n            if digit == original_number[position]:\n                # Skip because the digit is the same as in the original number.\n                continue\n            # Create a new number by changing one digit.\n            new_number = int(original_number[:position] + digit + original_number[position+1:])\n            # Check if the new number is prime.\n            if isprime(new_number):\n                prime_count += 1\n\n    return prime_count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    eq1 = Eq(x + y, 72)\n    eq2 = Eq(x, 2 * y)\n\n    solutions = solve((eq1, eq2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    possible_cards = {\n        'spades': ['A', 'J', 'K'],\n        'hearts': ['3', '5', 'K'],\n        'diamonds': ['2', '7', 'J'],\n        'clubs': ['A', '7']\n    }\n\n    # When Eddie says he doesn't know the card, it means the card is not uniquely identifiable by its suit,\n    # which excludes the Ace of Spades and the Ace of Clubs, as they are unique to their suits.\n    # So we remove 'A' from 'spades' and 'clubs'.\n    possible_cards['spades'].remove('A')\n    possible_cards['clubs'].remove('A')\n\n    # After Avril confidently claims she knows the card after Eddie's statement,\n    # it must be a card with a number not found in any other suit since she now has enough information to be sure.\n    # So, we can remove any number that appears in more than one suit.\n    # This removes '7' from 'diamonds' and 'clubs', and 'J' from 'spades' and 'diamonds'.\n    # Also, 'K' can be removed as it's present in both 'spades' and 'hearts'.\n    cards_to_remove = []\n    for suit, numbers in possible_cards.items():\n        for number in numbers:\n            if sum(number in nums for nums in possible_cards.values()) > 1:\n                cards_to_remove.append((suit, number))\n    for suit, number in cards_to_remove:\n        possible_cards[suit].remove(number)\n\n    # Now, Eddie claims that he knows the card after Avril's declaration.\n    # Since Eddie only knows the suit, and he is now able to determine the card,\n    # there must only be one card left in the suit that is possible, thus determining the card.\n    for suit, numbers in possible_cards.items():\n        if len(numbers) == 1:\n            return (suit, numbers[0])\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean_value = 5\n    numbers = [3, 4, 6, 10]\n    sum_of_numbers = mean_value * 5  # Total sum of 5 numbers with a mean of 5\n\n    sum_of_known_numbers = sum(numbers)\n    fifth_number = sum_of_numbers - sum_of_known_numbers  # The fifth number to reach the mean\n\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n    emily_position_from_back = danny_position_from_back - 1\n\n    total_people = people_in_front_of_emily + emily_position_from_back + 1  # +1 for Emily herself\n\n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    time_for_one_cut = 12 / 3  # Since cutting into 4 sections means making 3 cuts\n    total_cuts_needed = 5 * 4  # For cutting 5 times into 4 sections each\n    time_needed = (total_cuts_needed - 5) * time_for_one_cut  # Subtract 5 because we start with one uncut piece each time\n    return time_needed\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days_to_finish, total_pages = symbols('days_to_finish total_pages')\n\n    # If Vanessa reads 30 pages a day, she finishes in days_to_finish + 2 days\n    equation1 = Eq(total_pages, 30 * (days_to_finish + 2))\n\n    # If she reads 39 pages a day, she finishes in days_to_finish - 4 days\n    equation2 = Eq(total_pages, 39 * (days_to_finish - 4))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (days_to_finish, total_pages))\n\n    return solutions[days_to_finish], solutions[total_pages]\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    pages_with_5 = 30\n    count = 0\n    page = 0\n\n    while count < pages_with_5:\n        page += 1\n        if '5' in str(page):\n            count += str(page).count('5')\n\n    return page\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n    cost_per_cup = total_cost / number_of_cups\n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Find the step where Celeste made a mistake\n    correct_steps = 13 - 2 * (2 * x - 3) == 5 - (x - 2)\n    celeste_steps = 13 - 4 * x + 6 == 5 - x + 2\n\n    # If Celeste's steps are incorrect, determine the correct age\n    if not correct_steps.equals(celeste_steps):\n        # Return the correct age, not Celeste's incorrect conclusion\n        return solution[0]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10+9+8+7+6)-(5+4+3+2+1)\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_worker_per_day = 2\n    total_workers = 2\n    total_rooms = 4\n\n    rooms_per_day_for_all_workers = rooms_per_worker_per_day * total_workers\n    days_needed = total_rooms / rooms_per_day_for_all_workers\n\n    return days_needed\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    # Kate buys 1 apple and 2 oranges. She paid 48p.\n    equation1 = Eq(apple + 2 * orange, 48)\n    \n    # Jade buys 1 apple and 1 orange. She paid 31p.\n    equation2 = Eq(apple + orange, 31)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    pocket_money, price_per_ball = symbols('pocket_money price_per_ball')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(4 * price_per_ball + 27, pocket_money)\n    equation2 = Eq(2 * price_per_ball + (151/100), pocket_money)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pocket_money, price_per_ball))\n\n    # Get the answer for pocket_money\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_badges = total_badges * (3 / 8)\n    remaining_badges = total_badges - given_badges\n    \n    return remaining_badges\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n\n    # Iterate through hundreds, tens and ones\n    for h in range(1, 10):    # Hundreds place must not be zero\n        for t in range(0, 10):    # Tens place can be zero\n            for o in range(0, 10):    # Ones place can be zero\n                if [h, t, o].count(0) == 1:    # Only one zero is allowed\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jason, will, tom = symbols('jason will tom')\n    \n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n    \n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n    \n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    equation1 = Eq(elias, 5 * aileen)\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    return solutions[elias] - 88, solutions[aileen] - 8\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    number_of_staircases = 3\n    total_steps = steps_per_staircase * number_of_staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    people_behind = 14\n    total_people = 23\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    thomas, gerald = symbols('thomas gerald')\n\n    equation1 = Eq(thomas, 5*gerald/3)\n    equation2 = Eq(thomas + gerald, 104)\n\n    solutions = solve((equation1, equation2), (thomas, gerald))\n\n    thomas_pieces = solutions[thomas]\n    gerald_pieces = solutions[gerald]\n\n    return thomas_pieces - gerald_pieces\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    return sum(range(11, 32, 2))\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    ans = sum(range(2, 9))\n    return ans\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    return 730 / 1000\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert base 8 numbers to base 10, add them, then convert back to base 8\n    num1 = int(\"25\", 8)\n    num2 = int(\"37\", 8)\n\n    # Add the numbers in base 10\n    sum_base10 = num1 + num2\n\n    # Convert the sum back to base 8\n    ans = oct(sum_base10)[2:]  # [2:] is used to remove the '0o' prefix\n    return ans\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    fraction = 8 / 11\n    amount = 1.54\n    result = fraction * amount\n    return result\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults, children = symbols('boys girls adults children')\n    total_people = boys + girls + adults\n\n    equation1 = Eq(boys, 2 / 7 * girls)\n    equation2 = Eq(adults, 2 / 3 * (boys + girls))\n    equation3 = Eq(adults, boys + 1228)\n\n    equations = (equation1, equation2, equation3)\n    solutions = solve(equations, (boys, girls, adults))\n\n    ans = solutions[boys] + solutions[girls] + solutions[adults]\n\n    return ans\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    # Let's denote x as the number of tennis rackets the shop purchased initially.\n    cost_per_racket = 150\n    selling_price_per_racket = 175\n    remaining_rackets = 8\n    \n    # Setting up the equation:\n    # (Number of rackets sold * Selling price) - (Initial number of rackets * Cost price) = Profit\n    # (x - 8) * 175 - x * 150 = 525\n    # Solving for x:\n    \n    # Profit made from sold rackets\n    profit_per_sold_racket = selling_price_per_racket - cost_per_racket\n    \n    # Total profit made excluding the profit from the unsold rackets\n    total_profit_excl_unsold = 525 + (remaining_rackets * cost_per_racket)\n    \n    # Calculating the number of rackets sold that accounted for this profit\n    rackets_sold_for_profit = total_profit_excl_unsold / profit_per_sold_racket\n    \n    # Total initial rackets is the sum of rackets left and rackets sold for profit\n    initial_rackets = rackets_sold_for_profit + remaining_rackets\n    \n    return initial_rackets\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Let x be the initial amount of money each had.\n    # Chloe's remaining amount = x - 20d, where d is the number of days they spent money.\n    # Gordon's remaining amount = x - 25d.\n    \n    # When Chloe had $157 left, Gordon had $82 left.\n    # We can set up the following two equations:\n    # x - 20d = 157\n    # x - 25d = 82\n    \n    # Subtract one equation from the other to find out d:\n    # (x - 20d) - (x - 25d) = 157 - 82\n    # 5d = 75\n    # d = 15\n    \n    # Now that we have d, we can substitute back into any of the two equations to find x.\n    # Using Chloe's remaining amount to find x:\n    # x - 20 * 15 = 157\n    # x - 300 = 157\n    # x = 157 + 300\n    # x = 457\n    \n    # So, Gordon had $457 at first too, since both had an equal amount.\n    \n    return 457\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    circles = 10\n    regions = 1 + circles * (circles + 1) // 2\n    return regions\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2*x - 4 * (5 - x))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x in range(1, 14):\n        for y in range(1, 14):\n            z = 14 - x - y\n            if z > 0 and z != x and z != y and x < y < z:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the average value of jewels in box P before the transfer\n    # Let y be the average value of jewels in box Q before the transfer\n    x, y = symbols('x y')\n\n    # Since the average value of the jewels in P increases by £1000 when a £5000 jewel is removed,\n    # the sum of the jewels in P before the transfer is 3x and will become 2(x + 1000) after removing one jewel\n    equation1 = Eq(3 * x - 5000, 2 * (x + 1000))\n\n    # Similarly, the sum of the jewels in Q is 3y and will become 4(y + 1000) after adding one £5000 jewel\n    equation2 = Eq(3 * y + 5000, 4 * (y + 1000))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total value before the transfer\n    total_value = 3 * solutions[x] + 3 * solutions[y]\n\n    return total_value\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    n = 10\n    count_2 = 0\n    count_5 = 0\n    \n    for i in range(1, n + 1):\n        while i % 2 == 0:\n            count_2 += 1\n            i = i // 2\n        while i % 5 == 0:\n            count_5 += 1\n            i = i // 5\n            \n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons = total_melons / 5\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.50\n    total_revenue = remaining_melons * selling_price_per_melon\n    profit = total_revenue - cost_price\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    for n in range(1, 100): # We start from 1 because having 0 neighbors is not possible\n        if (150 - 17) % n == 0 and (100 - 5) % n == 0:\n            return n\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # length of the line in cm\n    interval = 1      # distance between crosses in cm\n    crosses = (line_length // interval) + 1  # +1 for the cross at the beginning\n\n    return crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    ans = 6.23 - 5.72\n    return ans\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6  # \"red, red, green, yellow, yellow, green\" has 6 balloons\n    green_balloons_in_pattern = 2  # There are 2 green balloons in the pattern\n\n    full_patterns = 75 // pattern_length  # Number of complete patterns\n    remaining_balloons = 75 % pattern_length  # Number of balloons in the incomplete pattern\n\n    # Incomplete pattern can have at most 1 green balloon because green balloons occur in pairs in the pattern\n    green_balloons_in_incomplete_pattern = 1 if remaining_balloons > 2 else 0\n\n    total_green_balloons = (full_patterns * green_balloons_in_pattern) + green_balloons_in_incomplete_pattern\n\n    return total_green_balloons\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of marbles Sandra had originally more than Jessica\n    x = symbols('x')\n\n    # After Sandra gave Jessica 13 marbles, Sandra had 6 fewer marbles than Jessica\n    # Original situation: Sandra = Jessica + x\n    # After giving: Sandra - 13 = Jessica + 13 - 6\n    # This reduces to: Jessica + x - 13 = Jessica + 7\n    # Therefore, we have the equation: x - 13 = 7\n    \n    equation = Eq(x - 13, 7)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_first_and_sixth = 60\n    number_of_intervals_between_first_and_sixth = 6 - 1  # subtract 1 to get the intervals between posts\n    distance_between_posts = distance_between_first_and_sixth / number_of_intervals_between_first_and_sixth\n\n    number_of_intervals_between_first_and_ninth = 9 - 1  # intervals between the 1st and 9th post\n    distance_between_first_and_ninth = distance_between_posts * number_of_intervals_between_first_and_ninth\n\n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    num_teams = 3\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    n = 1\n    count_1s, count_2s = 0, 0\n    while True:\n        str_n = str(n)\n        count_1s += str_n.count('1')\n        count_2s += str_n.count('2')\n        if count_1s == 15 and count_2s == 14:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Let's denote the initial number of candies as c\n    # Kate ate 1/3 of c at home, so she had 2/3*c left\n    # She shared 26 pieces with each of her 7 friends, that is 7*26\n    # She also kept 22 pieces for herself\n    # Therefore, the equation is: 2/3*c = 7*26 + 22\n    # We solve this equation to find c\n\n    # Calculate the total candies Kate gave to her friends and what she kept\n    shared_and_kept = 7 * 26 + 22\n    # Now calculate the initial number of candies (c)\n    initial_candies = (shared_and_kept * 3) / 2\n    return int(initial_candies)\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_current_floor = 9\n    bob_current_floor = 5\n    top_floor = 25\n    \n    # Assuming the rate is constant, we can find the ratio of Bob's position to Andy's position.\n    rate_ratio = bob_current_floor / andy_current_floor\n\n    # When Andy reaches the top floor, we can calculate Bob's floor using the same ratio.\n    bob_top_floor = rate_ratio * top_floor\n\n    return int(bob_top_floor)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    return 8 / (2/3)\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if (12 * 10 + m) == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the total number of words James needs to type as W, and his original speed as S words per minute.\n    W, S = symbols('W S')\n    \n    # If he types at speed S, he finishes in 3 minutes.\n    equation1 = Eq(W, 3 * S)\n    \n    # If he types at speed S + 30, he finishes in 2 minutes.\n    equation2 = Eq(W, 2 * (S + 30))\n    \n    # Solve the system of equations to find W.\n    solutions = solve((equation1, equation2), (W, S))\n    \n    return solutions[W]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0] * 10  # Initialize all lights to be off\n\n    # Ms. Lily presses every other light starting from 1\n    for i in range(0, 10, 2):\n        lights[i] = 1  # Switch on the light\n\n    # Sam presses each even-numbered light 7 times\n    for i in range(1, 10, 2):\n        # Pressing a switch an odd number of times changes its state\n        # Pressing a switch an even number of times does not change its state\n        # Since 7 is odd, the state of the even-numbered lights will change\n        lights[i] = 1 - lights[i]  # Toggle the light\n\n    # Count the number of lights that are on\n    ans = sum(lights)\n    return ans\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the amount of water in Pail A\n    # Let y be the amount of water in Pail B\n\n    x, y = symbols('x y')\n    equation1 = Eq(x, 2/3 * y)  # Pail A has 2/3 as much water as Pail B.\n    equation2 = Eq(x + 4, 7/8 * (y - 4))  # When 4 liters are poured from B to A.\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Total water in both pails would be x + y\n    total_water = solutions[x] + solutions[y]\n\n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    depth = 8\n    day_climb = 3\n    night_slip = 2\n    net_movement = day_climb - night_slip\n    \n    # Since the worm slips down at night, we need to find a day where after it climbs,\n    # it either reaches the top or exceeds it.\n\n    day = 0\n    current_depth = 0\n    \n    # Loop until the worm reaches the surface\n    while current_depth < depth:\n        day += 1\n        current_depth += day_climb  # worm climbs up in the daytime\n        \n        # Check if the worm has reached or exceeded the surface\n        if current_depth >= depth:\n            break\n        current_depth -= night_slip  # worm slips back at night\n\n    return day\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let 't' be the cost of a table and 'c' be the cost of a chair\n    t, c = symbols('t c')\n\n    # according to the question\n    equation1 = Eq(t, 2 * c)  # A table cost two times as much as a chair\n    equation2 = Eq(2 * t + 3 * c, 280)  # Two tables and three chairs cost $280\n\n    # solving the equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    # Returning the cost of each table\n    return solutions[t]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900\n    initial_sugar_percentage = 0.06\n    final_sugar_percentage = 0.10\n\n    initial_sugar_content = initial_volume * initial_sugar_percentage\n    final_sugar_content = initial_volume * final_sugar_percentage\n\n    additional_sugar_needed = final_sugar_content - initial_sugar_content\n\n    return additional_sugar_needed\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_already_made = 20\n    time_already_spent = 2  # hours\n    total_parts_needed = 100\n\n    # Eddy's calculation for parts per hour\n    parts_per_hour = parts_already_made / time_already_spent\n\n    # Eddy's calculation for the remaining time needed\n    total_time_needed_eddy = total_parts_needed / parts_per_hour\n\n    # Correct calculation for the remaining time needed\n    remaining_parts_needed = total_parts_needed - parts_already_made\n    remaining_time_needed = remaining_parts_needed / parts_per_hour\n\n    return remaining_time_needed, total_time_needed_eddy != remaining_time_needed\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    total_bars = 4\n    total_cost = cost_per_bar * total_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # To ensure 3 different colored balls, we should consider the worst case scenario\n    # using the pigeonhole principle.\n    # First, draw all balls of a single color (e.g., 5 red balls).\n    red_balls = 5\n    # Then, draw all balls of another single color (e.g., 5 white balls).\n    white_balls = 5\n    # After that, drawing just one more ball (of any color) guarantees the third color.\n    one_more_ball = 1\n    \n    # Total balls drawn to ensure 3 different colored balls:\n    balls_drawn = red_balls + white_balls + one_more_ball\n    return balls_drawn\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 4 + 2 * grade4)\n    equation2 = Eq(grade6, 8 + 3 * grade4)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    # Total combinations of taking 2 balls of 5 different colors\n    # Combination for choosing any one color times 5 (since there are 5 colors)\n    # Plus the combination of choosing 2 different colors.\n    total_combinations = comb(5, 1) * comb(2, 2) + comb(5, 2) * comb(2, 1) * comb(2, 1)\n    \n    # According to the Pigeonhole principle if we have n pigeonholes and m pigeons,\n    # and if m > n, then at least one pigeonhole must contain more than one pigeon.\n    # Here, the pigeonholes represent the different possible combinations of balls\n    # and the pigeons represent the people. Therefore, there must be at least one\n    # combination repeated, which happens when we have one more person than the\n    # total combinations. So, the students' count is total_combinations + 1.\n    return total_combinations + 1\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # There are four categories of numbers with respect to division by 4:\n    # 1. Divisible by 4 (remainder 0 when divided by 4)\n    # 2. Remainder 1 when divided by 4\n    # 3. Remainder 2 when divided by 4 (these numbers, when squared, are divisible by 4)\n    # 4. Remainder 3 when divided by 4\n    \n    # We need at least one number from category 1 or two numbers from category 3 to have a product divisible by 4.\n    # Since the numbers drawn are random, we must account for the worst-case scenario where we draw only from categories 2 and 4.\n    \n    # We start drawing numbers, and after drawing all numbers from categories 2 and 4, we are not guaranteed to have a product divisible by 4.\n    # Only after drawing one more number (at this point, it must come from category 1 or 3), can we ensure a product divisible by 4.\n    \n    # Count integers from 10 to 41 (inclusive) with remainders 1 and 3 when divided by 4\n    count_remainder_1_or_3 = 0\n    for num in range(10, 42):\n        if num % 4 == 1 or num % 4 == 3:\n            count_remainder_1_or_3 += 1\n    \n    # We then draw one more number to guarantee the condition, hence we add 1.\n    ans = count_remainder_1_or_3 + 1\n\n    return ans\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    ans = 20504 // 8\n    return ans\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    common_difference = (third_term - first_term) // 2\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # converting 2 m 20 cm into cm\n    each_piece_length = total_length_cm / 2\n    return each_piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    \n    total_cost = number_of_cakes * cost_per_cake\n    \n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = sum((50+i)*(50-i) for i in range(-4, 5))\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n    from math import isqrt, sqrt\n\n    # Smallest two-digit prime number\n    smallest_two_digit_prime = list(primerange(10, 100))[0]\n\n    # Largest two-digit square number\n    # We start by finding the square root of the largest two-digit number, which is 99.\n    # Then we find the largest integer whose square is still a two-digit number.\n    square_root_of_99 = isqrt(99)\n    # We check if the square of the number is still two-digits; if not, reduce it by 1.\n    while square_root_of_99**2 >= 100:\n        square_root_of_99 -= 1\n    largest_two_digit_square_number = square_root_of_99 ** 2\n\n    # Product of the smallest two-digit prime number and the largest two-digit square number\n    product = smallest_two_digit_prime * largest_two_digit_square_number\n\n    return product\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    total_cards = 876\n    # Let x be the number of cards Hisham has, so Melissa has 2x cards.\n    # Total number of cards is x + 2x = 876\n    x = total_cards // 3  # Hisham's cards\n    melissa_cards = 2 * x  # Melissa's cards\n    # When Melissa gives some cards to Hisham, they will both have the same number:\n    # (Melissa's cards - number of given cards) = (Hisham's cards + number of given cards)\n    # Hence, cards to give = (Melissa's cards - Hisham's cards) / 2\n    cards_to_give = (melissa_cards - x) // 2\n    return cards_to_give\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian is 14, his father is 41, age difference is 41 - 14 = 27\n    age_difference = 41 - 14\n\n    # Start at Brian's current age, iterate to find the next time their ages are the reverse of each other\n    brians_age = 14\n    while True:\n        brians_age += 1\n        fathers_age = brians_age + age_difference\n        if str(fathers_age) == str(brians_age)[::-1]:\n            return brians_age\n            \nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd_rate = 1 / 0.96\n    coffee_price_eur = 4.8\n\n    coffee_price_usd = coffee_price_eur * euro_to_usd_rate\n\n    return coffee_price_usd\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_N = None\n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = p\n        N = a + b / c + (d / e) * f - (g + h / j)\n        if N == int(N):\n            max_N = max(N, max_N) if max_N is not None else N\n    return max_N\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books = 3900\n    total_new_books = 510\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n\n    initial_chinese = (ratio_chinese / (ratio_chinese + ratio_malay + ratio_english)) * total_books\n    initial_malay = (ratio_malay / (ratio_chinese + ratio_malay + ratio_english)) * total_books\n    initial_english = (ratio_english / (ratio_chinese + ratio_malay + ratio_english)) * total_books\n\n    new_chinese = initial_chinese * 1.20\n    new_malay = initial_malay * 1.10\n\n    new_books_accounted_for = new_chinese + new_malay - initial_chinese - initial_malay\n    new_english = total_new_books - new_books_accounted_for + initial_english\n\n    percentage_increase_english = ((new_english - initial_english) / initial_english) * 100\n\n    return percentage_increase_english\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    total_juniors = 12\n    total_seniors = 8\n    average_juniors = 10\n    average_all = 14\n\n    total_score_all = average_all * (total_juniors + total_seniors)\n    total_score_juniors = average_juniors * total_juniors\n    total_score_seniors = total_score_all - total_score_juniors\n\n    average_seniors = total_score_seniors / total_seniors\n\n    return average_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    rounded_number = 9700\n    smallest_possible_value = rounded_number - 50\n    return smallest_possible_value\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago, combined age was 10 years.\n    combined_age_four_years_ago = 10\n\n    # Each year, each dog ages by 1 year, so combined they age by 2 years.\n    # Four years have passed, so we add 4 * 2 years to their combined age.\n    combined_age_now = combined_age_four_years_ago + 4 * 2\n\n    # In 2 more years, they will age another 2 * 2 years combined.\n    combined_age_in_two_years = combined_age_now + 2 * 2\n\n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    # Define the total score and points for correct and incorrect answers\n    total_points = 66\n    correct_points = 4\n    incorrect_points = -2\n    # Rex answered all but one, so the number of questions Rex answered\n    total_answered_questions = 24\n\n    # Initialize the correct and incorrect answers count\n    correct_answers = 0\n    incorrect_answers = 0\n\n    # The condition is that the total score is 66 and Rex answered 24 questions\n    # Loop through all possible numbers of correct questions Rex could get right\n    for i in range(0, total_answered_questions + 1):\n        correct_answers = i\n        incorrect_answers = total_answered_questions - i\n        score = (correct_answers * correct_points) + (incorrect_answers * incorrect_points)\n        if score == total_points:\n            return correct_answers\n\n    # If no answer is found (panalty in case the puzzle is wrong)\n    return \"No valid number of correct answers found\"\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    correct_percent = 0.60\n    correct_marks = 5\n    wrong_marks = -2\n    unanswered_marks = 1\n    \n    correct_questions = int(total_questions * correct_percent)\n    incorrect_questions = total_questions - correct_questions\n    unanswered_questions = total_questions - correct_questions\n    \n    # Let x be the number of correct answers and y be the number of wrong answers.\n    # Then the number of unanswered questions will be (correct_questions - x).\n    # So the total score will be: 5x - 2y + (correct_questions - x)\n    # This simplifies to: 4x - 2y + correct_questions = 264. We know x + y = correct_questions.\n    \n    # From the above, we can now write two equations:\n    # 4x - 2(correct_questions - x) + correct_questions = 264\n    # x + y = correct_questions\n    \n    # Now we can solve this system for x.\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    equation1 = Eq(4*x - 2*(correct_questions - x) + correct_questions, 264)\n    equation2 = Eq(x + y, correct_questions)\n    \n    # Now we will solve these equations.\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # According to the pigeonhole principle, to guarantee at least 2 apples\n    # in a container, there should be one more apple than the number of containers\n    # since 1 apple in each container only totals up to the number of containers.\n    containers = 10\n    min_apples = containers + 1\n    \n    return min_apples\n    \nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * 10**(-2021)\n    denominator = 92 * 10**(-2023)\n    return numerator / denominator\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made = 160\n    butter_used = 50  # in grams\n\n    desired_cookies = 300\n\n    butter_needed = (butter_used * desired_cookies) / cookies_made\n\n    return butter_needed\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra_initial, timm_initial = symbols('dedra_initial timm_initial')\n\n    # Dedra had $4 times as much money as Timm at first\n    equation1 = Eq(dedra_initial, 4 * timm_initial)\n    # Both received $72 each\n    dedra_final = dedra_initial + 72\n    timm_final = timm_initial + 72\n    # Now, Dedra has twice as much money as Timm\n    equation2 = Eq(dedra_final, 2 * timm_final)\n\n    solutions = solve((equation1, equation2), (dedra_initial, timm_initial))\n\n    return solutions[dedra_initial]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    digits = ''\n    number = 1\n    \n    while len(digits) < 1000:\n        digits += str(number)\n        number += 1\n\n    return int(digits[999])\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    return (19 + 2) // 3\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n    equation1 = Eq(jane, jack + 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    only_A = A - (AC + AE - ACE)\n    only_C = C - (AC + CE - ACE)\n    only_E = E - (AE + CE - ACE)\n    only_AC = AC - ACE\n    only_AE = AE - ACE\n    only_CE = CE - ACE\n\n    total_fruits = only_A + only_C + only_E + only_AC + only_AE + only_CE + ACE\n\n    return total_fruits\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    return 6.91 - 0.13\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    ans = 257.36 / 0.4\n    return ans\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    n = 18  # total number of pupils\n    r = 3   # number of pupils to be seated in a row\n\n    # Number of ways to choose r pupils from n using permutations\n    permutations = factorial(n) // factorial(n - r)\n\n    return permutations\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    salary_per_month = 1.4\n    total_debt = 5.04\n    months_needed = total_debt / salary_per_month\n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack = 4\n    jason = symbols('jason')\n\n    # Since Bruce and Willie have the same age as Jason\n    bruce = jason\n    willie = jason\n\n    # The total age of the 4 children is 19 years\n    total_age = Eq(jack + jason + bruce + willie, 19)\n\n    # Solve for Jason's age\n    jason_age = solve(total_age, jason)[0]\n\n    return jason_age\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    # Let's denote the number of erasers Andy had as E and the number of friends as F\n    # E = 5F + 3, this is the case where each friend gets 5 erasers and 3 are left\n    # E = 6F - 2, this is the case where each friend gets 6 erasers and 2 more are needed\n\n    # Now, we are going to loop over a practical range of numbers for F and try to find a common E\n\n    for F in range(1, 100):  # We try for up to 100 friends which should be more than enough\n        E1 = 5*F + 3\n        E2 = 6*F - 2\n        if E1 == E2:\n            return E1  # Returning the number of erasers when both conditions match\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jake, john = symbols('jake john')\n\n    # The sum of Jake's and John's ages is 44\n    equation1 = Eq(jake + john, 44)\n\n    # In 14 years, Jake will be twice as old as John\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jake, john))\n\n    # John's age in 14 years\n    john_in_14_years = solutions[john] + 14\n\n    return john_in_14_years\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n\n    return rachel\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    years = 3\n\n    principal = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return principal\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'y' be the age of the youngest child\n    youngest = symbols('youngest')\n    \n    # Since the children were born at regular intervals of 15 months,\n    # and the oldest is now six times as old as the youngest,\n    # we can express the oldest's age as '6 * youngest'\n    \n    # We calculate the total age difference between the consecutive children\n    # There are 8 age gaps (since there are 9 children), each of 15 months\n    # So, total_months = 8 * 15 = 120 months\n    total_months = 8 * 15\n\n    # However, since we are looking for the ages in years, we convert months to years\n    # total_years = total_months / 12\n    total_years = total_months / 12\n\n    # Now we can write an equation showing that the age of the oldest child\n    # equals the age of the youngest plus the total_years\n    equation = Eq(6 * youngest, youngest + total_years)\n    \n    # Solve for the youngest child's age\n    solution = solve(equation, youngest)\n\n    return solution[0]\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # We can explore all different ways to insert two pairs of brackets to the equation,\n    # and then calculate the expression.\n    # There won't be many combinations.\n    # We are evaluating the following possible insertions of two pairs of brackets:\n    # 1. ((15+5)*5+(15-6)+7)\n    # 2. (15+(5*5)+(15-6)+7)\n    # 3. (15+5)*(5+(15-6)+7)\n    # 4. 15+(5*(5+(15-6))+7)\n    # 5. 15+(5*5)+((15-6)+7)\n    # 6. 15+((5*5+15)-6+7)\n    # 7. 15+5*((5+15)-6+7)\n    # There could be other combinations, but some are equivalent due to the associativity\n    # and commutativity of addition. So we check these distinct ones for the smallest result.\n    \n    # Evaluating the expressions\n    results = []\n    results.append(((15+5)*5+(15-6)+7))\n    results.append((15+(5*5)+(15-6)+7))\n    results.append((15+5)*(5+(15-6)+7))\n    results.append(15+(5*(5+(15-6))+7))\n    results.append(15+(5*5)+((15-6)+7))\n    results.append(15+((5*5+15)-6+7))\n    results.append(15+5*((5+15)-6+7))\n    \n    # Finding the smallest result\n    ans = min(results)\n    return ans\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    return 2018 - 786\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    total = 0\n    for i in range(1, 2008):\n        total += (i**2 + (i+1)**2) / (i * (i+1))\n    return round(total)\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Since the change increases the value by 5877, we can infer that the difference must be because of the place value change\n    # When we change the ones place to the first digit, the place value contribution increases by a factor of 999 (1000 - 1)\n    # Let the ones digit (which is also the first digit after change) be 'd'\n    # The increase of place value is then d * 999\n    # Set the equation: d * 999 = 5877\n    # Solve for the ones digit 'd'\n    d = 5877 // 999\n\n    # Given d, the smallest original combination will have d as the first digit and the lowest possible digits (0) in between\n    # Since the ones place changes to d, the original ones digit is 0\n    # Thus, the smallest original combination is d000\n    smallest_original = d * 1000\n\n    return smallest_original\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let x be the number of sweets Jiaxiang has\n    # Then Cayden has x + 5 sweets\n    # After Cayden gives Jiaxiang 10 sweets:\n    # Jiaxiang will have x + 10 sweets\n    # Cayden will have x + 5 - 10 = x - 5 sweets\n    # The difference in number of sweets they have now will be:\n    # (x + 10) - (x - 5) = 10 + 5 = 15\n    difference_after_giving = 15\n    return difference_after_giving\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = (2.5 * 7.7) + (0.25 * 23)\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) + 1 if 50 % 11 != 0 else 50 // 11\n    last_multiple = 150 // 11\n    ans = last_multiple - first_multiple + 1\n    return ans\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 * 0.01) * 74 - 0.3 / (2/15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Initial average of 5 pupils\n    initial_average = 72\n    \n    # Initial total score of 5 pupils\n    initial_total = initial_average * 5\n    \n    # New average of 6 pupils including Mary\n    new_average = 75\n    \n    # New total score of 6 pupils including Mary\n    new_total = new_average * 6\n    \n    # Mary's score is the difference between the new total and initial total\n    marys_score = new_total - initial_total\n    \n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60  # m/s\n\n    # Total distance for the end of the train to cross the bridge is the length of the train plus the length of the bridge\n    total_distance = train_length + bridge_length\n\n    # Time taken to cross the bridge is the total distance divided by the speed\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    morning_cookies = 200 * (1 / 5)\n    remainder_cookies = 200 - morning_cookies\n    afternoon_cookies = remainder_cookies * (3 / 4)\n    return afternoon_cookies\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    greatest_number = 0\n    for number in range(100, 1000):\n        if number % 9 == 0 and number % 2 != 0:\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                greatest_number = max(greatest_number, number)\n    return greatest_number\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "def solution():\n    from math import comb\n    # Number of doughnuts to be distributed after giving each student one doughnut\n    doughnuts_left = 11 - 4\n    # Since each student must get at least one doughnut, we distribute the remaining\n    # doughnuts to 4 students, which is equivalent to the problem of placing \n    # 3 separators among the 7 doughnuts (which creates 4 partitions).\n    # This can be done in \"11 - 1 choose 4 - 1\" ways, or \"10 choose 3\"\n    return comb(doughnuts_left + 4 - 1, 4 - 1)\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    correct_time = distance / speed\n    return correct_time\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # Calculate the worst-case scenario which is getting all marbles of one color first\n    # before getting any marble of the next color.\n    # We do this by adding up the maximum marbles of each color ignoring one less marble\n    # for each of the other colors.\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # draw maximum of every color but one less for each of the other colors\n    max_draw = (red - 1) + (green - 1) + (blue - 1) + orange \n    \n    # Add 1 because we want to be guaranteed to have 4 different color marbles, which means\n    # drawing one more after having all the other colors.\n    return max_draw + 1\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Possible coin values in pence that are multiples of 5\n    coin_values = [5, 10, 20, 50, 100, 200]\n    \n    # Total change received in pence\n    total_change = 500  # Five pound note\n\n    # Iterate through all combinations of 5 different coins\n    for i in range(len(coin_values)):\n        for j in range(i+1, len(coin_values)):\n            for k in range(j+1, len(coin_values)):\n                for l in range(k+1, len(coin_values)):\n                    for m in range(l+1, len(coin_values)):\n                        # Sum of values of the selected coins\n                        if (coin_values[i] + coin_values[j] + coin_values[k] +\n                            coin_values[l] + coin_values[m]) == total_change:\n                            # Amount spent is the remainder of total_change after receiving the coins\n                            return 500 - (coin_values[i] + coin_values[j] + coin_values[k] +\n                                          coin_values[l] + coin_values[m])\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    return 0.2 * 7\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop = 11\n    \n    midnight_temp = midday_temp - drop\n\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    for ten_notes in range(1, 38):\n        two_notes = 38 - ten_notes\n        spent_ten_notes = 0.8 * ten_notes\n        spent_two_notes = 0.75 * two_notes\n        remaining_ten_notes = ten_notes - spent_ten_notes\n        remaining_two_notes = two_notes - spent_two_notes\n        if remaining_ten_notes == 3 * remaining_two_notes:\n            cost_of_fan = spent_ten_notes * 10 + spent_two_notes * 2\n            return cost_of_fan\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    current_honey_per_hive = 50 / 5  # Amount of honey one hive produces in a year\n    desired_honey = 90\n    # Calculate the number of hives needed to produce the desired amount of honey\n    hives_needed = desired_honey / current_honey_per_hive\n    # Calculate how many more hives are needed in addition to the current hives\n    more_hives_needed = hives_needed - 5\n    return more_hives_needed\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    # Let the original number of erasers Ali has be 7x and Kumar has be 5x.\n    # After giving away 10 erasers, Ali has 7x - 10\n    # After receiving 10 erasers, Kumar has 5x + 10\n    # The new ratio is (7x - 10) / (5x + 10) = 1/5\n    # Solve for x\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Create equation based on the problem statement\n    equation = Eq((7*x - 10) / (5*x + 10), 1/5)\n\n    # Solve for x\n    solution_x = solve(equation, x)\n\n    # Calculate the total number of erasers they have originally\n    total_erasers = 7 * solution_x[0] + 5 * solution_x[0]\n\n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 23  # the 23rd student\n\n    # Formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    import math\n    # Calculate horizontal distance from A\n    horizontal_distance = 15 - 9\n    # Calculate vertical distance from A\n    vertical_distance = 3 + 5\n    # Calculate the shortest distance using Pythagoras theorem\n    shortest_distance = math.sqrt(horizontal_distance ** 2 + vertical_distance ** 2)\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(1*banana + 3*pear, 84)\n    equation2 = Eq(1*banana + 1*pear, 48)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_minutes = 8 * 60 + 20\n    activity_and_break = 45 + 20\n\n    activities = (total_minutes + 20) // activity_and_break\n\n    return activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 92)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 3, 5, 8]\n    count = 0\n    for perm in permutations(digits, 4):\n        if perm[0] > 5:  # The first digit must be greater than 5 to form a number greater than 5000\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variable\n    x = symbols('x')\n    \n    # Create the equation\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    b_days = symbols('b_days')\n\n    # A's efficiency is twice B's, so A would finish in half the time B takes\n    a_days = b_days / 2\n\n    # Equation representing A's time being 5 days less than B's time\n    equation = Eq(a_days, b_days - 5)\n\n    # Solve for B's days\n    b_days_solution = solve(equation, b_days)\n\n    return b_days_solution[0]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    num = 123456\n    # The divisibility rule for 11 is that the difference between the sum\n    # of the digits in the odd positions and the sum of the digits in the\n    # even positions should be either 0 or divisible by 11.\n    \n    # Splitting the number into its digits\n    digits = [int(digit) for digit in str(num)]\n\n    # Sum of the digits in the odd and even positions\n    odd_positions_sum = sum(digits[0::2])\n    even_positions_sum = sum(digits[1::2])\n    \n    # Calculate the difference\n    difference = abs(odd_positions_sum - even_positions_sum)\n    \n    # Check if the number is divisible by 11\n    divisible_by_11 = difference % 11 == 0\n\n    # George's answer\n    george_correct = (num % 11 == 1)\n    \n    # Return correct answer and whether George was correct\n    correct_remainder = num % 11\n    return (george_correct, correct_remainder)\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = 1/5 * total_bulbs\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # length in meters\n    final_length_m = 78 / 100  # length in cm converted to meters\n    melted_length_m = initial_length_m - final_length_m\n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n    ans = (percentage / 100) * total_grams\n    return ans\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # The number of ways to reach the i-th step\n    ways = [0] * 10  # Initialize with 10 elements (0 to 9 steps)\n    ways[0] = 1  # Base case: 1 way to stay on the ground floor (0 steps)\n    for i in range(1, 10):  # Starting from the first step up to the 9th\n        # Add the number of ways to reach the current step from i-1, if i-1 is >= 0\n        if i - 1 >= 0:\n            ways[i] += ways[i - 1]\n        # Add the number of ways to reach the current step from i-4, if i-4 is >= 0\n        if i - 4 >= 0:\n            ways[i] += ways[i - 4]\n    return ways[9]  # Return the number of ways to reach the 9th step\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    ans = 3549 // 7\n    return ans\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    \n    # At the first stop\n    passengers_after_first_stop = initial_passengers - (2/5) * initial_passengers + 7\n    \n    # At the next stop\n    passengers_after_second_stop = passengers_after_first_stop - (1/4) * passengers_after_first_stop + 13\n    \n    return int(passengers_after_second_stop)\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Create a list of the numbers to be cubed\n    numbers = [i * 0.5 for i in range(1, 21)] # because 10 is the last term and increment is 0.5\n    \n    # Use the formula for the sum of cubes of the first n numbers: (1+2+...+n)^2\n    sum_of_numbers = sum(numbers)\n    ans = sum_of_numbers ** 2\n    \n    return ans\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimate = 35\n    tolerance = 5\n    actual_min_value = estimate - (tolerance / 2)\n    return actual_min_value\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    # Let 'x' be the number of years it will take for the sum of their ages to be 40\n    # We can set up the equation based on the sum of their current ages (22) and the sum after x years (40)\n    # current_age_sum + x_years_each = future_age_sum\n    # 22 + 2x = 40\n    # Solve for x\n    x_years_each = (40 - 22) / 2\n    return int(x_years_each)\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for x1 in range(98, 103):\n        for x2 in range(98, 103):\n            for x3 in range(98, 103):\n                if x1 + x2 + x3 == 300:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    # Position of the elephant from left to right is 10\n    elephant_pos_left_to_right = 10\n    \n    # Number of toys between the rabbit and the elephant\n    toys_between = 5\n    \n    # Calculate the position of the rabbit from left to right\n    rabbit_pos_left_to_right = elephant_pos_left_to_right - toys_between - 1\n    \n    # Calculate the position of the rabbit from right to left\n    total_toys = 40\n    rabbit_pos_right_to_left = total_toys - rabbit_pos_left_to_right\n    \n    return rabbit_pos_right_to_left\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nancy_rate = 1 / 6\n    combined_rate = 1 / 4\n    tim = symbols('tim')\n    \n    tim_rate = 1 / tim\n    equation = Eq(nancy_rate + tim_rate, combined_rate)\n    \n    tim_days = solve(equation, tim)[0]\n    \n    return tim_days\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    num_pencils = 0\n    while True:\n        num_pencils += 1\n        if (num_pencils % 2 == 1 and num_pencils % 3 == 2 and\n            num_pencils % 4 == 3 and num_pencils % 5 == 4):\n            return num_pencils\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 1 + 3  # Ewan + 3 sisters\n    biscuits_each = total_biscuits // people_count\n    return biscuits_each\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert total mass of the sauce to grams for calculation convenience\n    total_mass_grams = 172000  # 172 kg in grams\n\n    # Ratio of packets P:Q:R = 7:3:2\n    # Let the common ratio multiplier be 'x'\n    # Mass of P in grams per packet = 300g\n    # Mass of Q in grams per packet = 400g\n    # Mass of R in grams per packet = 500g\n\n    # Total mass = (Number of packets P * Mass per packet P) +\n    #              (Number of packets Q * Mass per packet Q) +\n    #              (Number of packets R * Mass per packet R)\n    # Total mass = (7x * 300) + (3x * 400) + (2x * 500) = 172000\n    # Simplify the equation to find 'x'\n    # 2100x + 1200x + 1000x = 172000\n    # 4300x = 172000\n    # x = 172000 / 4300\n    x = total_mass_grams / 4300\n\n    # Calculate the total number of packets\n    # Total packets = 7x + 3x + 2x\n    total_packets = 7*x + 3*x + 2*x\n\n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]  # Initialize the list of known numbers\n    mean = 12  # Given mean value\n\n    # Sum of known numbers\n    known_sum = sum(numbers)\n\n    # Since the mean is the sum of the numbers divided by the number of numbers\n    # We can calculate the total sum by multiplying the mean by the number of numbers (including 'a')\n    total_sum = mean * (len(numbers) + 1)\n\n    # The value of 'a' is the difference between the total sum and the sum of the known numbers\n    a = total_sum - known_sum\n\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "from math import lcm\n\ndef solution():\n    # Convert times to seconds for common comparison\n    light1_period = 1 * 60  # 1 minute in seconds\n    light2_period = 1.5 * 60  # 1.5 minutes in seconds\n    all_green_period = 9 * 60  # 9 minutes in seconds\n\n    # Find the least common multiple of the first two traffic lights\n    lcm_first_two = lcm(light1_period, light2_period)\n\n    # Consider the third light - it should be a divisor of the all_green_period\n    # and should be at least 30 seconds (the shortest possible time)\n    shortest_possible_time = None\n    for i in range(30, all_green_period + 1):\n        if all_green_period % i == 0:\n            if lcm(lcm_first_two, i) == all_green_period:\n                shortest_possible_time = i\n                break\n\n    return shortest_possible_time\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to the same unit: centimeters\n    pink = 2.5 * 100   # convert from meters to centimeters\n    blue = 220         # already in centimeters\n    orange = 30.5      # already in centimeters\n    \n    # Use max function to find the longest ribbon\n    longest = max(pink, blue, orange)\n    \n    # Determine which ribbon is the longest\n    if longest == pink:\n        return \"pink\"\n    elif longest == blue:\n        return \"blue\"\n    else:\n        return \"orange\"\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    # Sum all the times for each action\n    total_time = 10 + 15 + 5 + 15\n    \n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.5\n    original_price = sale_price / (1 - discount_rate)\n\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    # Calculate the total people carried by each color of cars\n    total_people_red = 3 * 10\n    total_people_blue = 12 * 15\n    total_people_green = 15 * 20\n    \n    # Calculate the total people carried by all cars\n    total_people = total_people_red + total_people_blue + total_people_green\n    \n    # Calculate the total number of cars\n    total_cars = 3 + 12 + 15\n    \n    # Calculate the average amount of people per car\n    average_people = total_people / total_cars\n    \n    return average_people\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Let the distance between City F and City G be 'd' km\n    # Let Eleanor's speed be 'e' km/h\n    # Given information:\n    # Eleanor takes 4 hours to travel from City F to City G => d = 4 * e (Equation 1)\n    # Rachel travels at a uniform speed of 84 km/h\n    # Eleanor and Rachel meet after which Eleanor takes 1.5 more hours to reach city G,\n    # while Rachel is still 39km away from City F\n    \n    # In 1.5 hours, distance travelled by Rachel = 84 * 1.5 km\n    distance_travelled_by_rachel = 84 * 1.5\n\n    # Total distance to be covered by Rachel to reach City F = d - 39 km\n    # The distance covered by Rachel when they pass each other is (d - 39 - distance_travelled_by_rachel)\n    \n    # The same distance is covered by Eleanor in 1.5 hours as she is reaching G at that time.\n    # So, e * 1.5 = d - 39 - distance_travelled_by_rachel\n\n    # From Equation 1, we can substitute d with 4 * e\n    e = (4 * e) - 39 - distance_travelled_by_rachel\n\n    # Hence, e * 1.5 = (4 * e) - 39 - distance_travelled_by_rachel\n    # Now we solve for 'e' (Eleanor's speed)\n    \n    # e * 1.5 - 4 * e = -39 - distance_travelled_by_rachel\n    # -2.5 * e = -39 - distance_travelled_by_rachel\n    e = (39 + distance_travelled_by_rachel) / 2.5\n    \n    # Now we substitute e back into Equation 1 to find 'd'\n    d = 4 * e\n    \n    return d\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    n = 4\n    k = 3\n    res = 0\n    for i in range(1, k + 1):\n        res += int(str(n) * i)\n    return res\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    boys_percent = (boys / total_students) * 100\n    return boys_percent\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollars = 64\n    exchange_rate = 1.25\n    us_dollars = canadian_dollars / exchange_rate\n    return us_dollars\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    return (8 - 1) + (10 - 1) + 1\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    total_score_needed = 5 * 90\n    # Since each student has a unique whole score, we start from the lowest possible score\n    for lowest_score in range(100):\n        scores = set(range(lowest_score, lowest_score + 5))\n        if sum(scores) == total_score_needed and len(scores) == 5:\n            return min(scores)\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Convert 1 m 30 cm to cm\n    additional_length = 130  # 1 m = 100 cm, so 1 m 30 cm = 130 cm\n    \n    # Define symbols\n    A, B, C = symbols('A B C')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(A, 3 * B)\n    equation2 = Eq(C, B + 56)\n    equation3 = Eq(A, C + additional_length)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Sum the lengths of A, B, and C\n    total_length = solutions[A] + solutions[B] + solutions[C]\n    \n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest = max(numbers)\n    smallest = min(numbers)\n    \n    ans = (2 * largest) - (3 * smallest)\n    return ans\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "def solution():\n    from math import factorial as fact\n\n    # Calculate total possible strings of 3 different letters from 5 letters\n    total_strings = fact(5) // fact(5 - 3)\n    \n    # Calculate the number of strings containing both A and B\n    # The remaining spot can be filled by any of the 3 remaining letters\n    strings_with_AB = 3\n    \n    # Calculate the probability\n    probability = strings_with_AB / total_strings\n\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_students = 50 * 0.16\n    female_students = 70 * 0.10\n    total_students = male_students + female_students\n    total_members = 50 + 70\n    percentage_students = (total_students / total_members) * 100\n\n    return percentage_students\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300\n    total_fruit_juice = (200 * 0.35) + (300 * 0.50)\n    concentration = (total_fruit_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 3 * 48 / 4\n    return int(x)\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    amy_gives = (amy_apples - john_apples - 4) / 2\n    return int(amy_gives)\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of papers and y be the original number of papers she plans to mark per hour.\n    x, y = symbols('x y')\n\n    # After working for an hour, she has 4 hours left and needs to mark 6 more papers per hour.\n    equation1 = Eq((y + 6) * 4, x - y)\n\n    # If she marks 10 more papers per hour, she will finish in 3 hours (1 hour earlier than planned).\n    equation2 = Eq((y + 10) * 3, x)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The total number of papers is x.\n    return solutions[x]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) What fraction of the chicken pies more than vegetable pies?\n    chicken_more_than_vegetable_fraction = Fraction(chicken_pies - vegetable_pies, chicken_pies)\n\n    # (2) What fraction of the vegetable pies less than fruit pies?\n    vegetable_less_than_fruit_fraction = Fraction(fruit_pies - vegetable_pies, fruit_pies)\n\n    return chicken_more_than_vegetable_fraction, vegetable_less_than_fruit_fraction\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    markers_given_away = 7\n    markers_left = total_markers - markers_given_away\n    bags_of_markers = markers_left // 5\n\n    return bags_of_markers\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be non-zero for a 2-digit number\n        for b in range(10):  # 'b' can be zero\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip_amount = bill * tip_percentage\n    tax_amount = bill * tax_percentage\n\n    total_cost = bill + tip_amount + tax_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    return greatest_1_digit_even + smallest_2_digit_odd\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    # Counting the sum of digits for each page number\n    for page in range(1, 208):\n        # Split the page number into its digits and sum them\n        total_sum += sum(map(int, str(page)))\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_completed = 3/4\n    total_designs = made_designs / fraction_completed\n    return total_designs\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through all three-digit numbers\n        digits = [int(d) for d in str(i)]  # Split the number into digits\n        if sum(digits) == 4:  # Check if the sum of the digits is 4\n            count += 1  # Increment the count if condition is met\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total money be 'm', cost of wristband 'w', and cost of cap 'c'.\n    m, c, w = symbols('m c w')\n\n    # According to the problem, we have the following equations:\n    # Equation for spending 2/5 on 4 caps and 6 wristbands\n    eq1 = Eq((2/5) * m, 4 * c + 6 * w)\n    # Cost of each cap is 3 times the cost of each wristband\n    eq2 = Eq(c, 3 * w)\n    # Note that the number of caps bought with 1/3 of remaining money is an integer,\n    # But we needn't declare it since we should extract how many caps were bought in terms of 'c' and 'w'\n\n    # Solving the equations to find the price of a cap (c) and wristband (w) in terms of the total money (m)\n    solutions = solve((eq1, eq2), (c, w))\n\n    # From the solution, we can find how much money is remaining after the first purchase, which is (3/5)m\n    remaining_money = (3/5) * m\n\n    # Caleb spent 1/3 of his remaining money to buy more caps.\n    # Money spent for more caps is therefore 1/3 * (3/5)m = 1/5m\n    # Number of additional caps bought is money spent on caps divided by the price of one cap\n    additional_caps = (1/5) * m / solutions[c]\n\n    # The total number of caps is the initial purchase (4) plus the additional caps\n    total_caps = 4 + additional_caps\n\n    return int(total_caps)\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Constants based on the physics of freefall\n    g = 9.8  # acceleration due to gravity in m/s^2\n    h1 = 3000  # initial height in meters\n    h2 = 2000  # final height in meters\n\n    # Using the kinematic equation: v^2 = u^2 + 2*g*h\n    # where u is the initial velocity (0 m/s for a jump), v is the final velocity,\n    # g is the acceleration due to gravity, and h is the change in height.\n    # Since we're looking for the final velocity at 2,000 m and the jump starts at 3,000 m,\n    # the height difference (h) is 1,000 m.\n    # The initial velocity (u) is 0 m/s as the jump starts from rest.\n    # We need to find the final velocity (v).\n\n    # Symbol for the unknown final velocity\n    v = symbols('v')\n    \n    # Equation for final velocity\n    equation = Eq(v**2, 2 * g * (h1 - h2))\n\n    # Solve the equation for final velocity (take the positive square root only)\n    final_velocity = solve(equation, v)[1]  # Taking the second solution because it's positive\n\n    return final_velocity\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # There are 13 possible consecutive sequences (1-2-3-4, ..., 10-11-12-13)\n    # Since there are 4 suits and the worst case scenario is drawing one from each suit\n    # before you start completing a consecutive sequence, you can draw 3 (the maximum\n    # that do not contribute to a consecutive sequence) from each of the 13 possibilities\n    # Then the next card you draw must start completing a consecutive sequence\n    \n    # So you would need to draw 3 cards (non-consecutive-sequence-contributors)\n    # from each of the 13 possibilities + 1 (the consecutive sequence starter)\n    cards_needed = 3 * 13 + 1\n    \n    return cards_needed\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations([0, 2, 4, 5, 6, 8, 9], 7):\n        B, D, E, F, H, I, J = perm\n        if B % 2 == 0 and (10 * A + B) % 2 == 0 and (100 * A + 10 * B + C) % 3 == 0 \\\n           and (1000 * A + 100 * B + 10 * C + D) % 4 == 0 \\\n           and (10000 * A + 1000 * B + 100 * C + 10 * D + E) % 5 == 0 \\\n           and (100000 * A + 10000 * B + 1000 * C + 100 * D + 10 * E + F) % 6 == 0 \\\n           and (1000000 * A + 100000 * B + 10000 * C + 1000 * D + 100 * E + 10 * F + G) % 7 == 0 \\\n           and (10000000 * A + 1000000 * B + 100000 * C + 100000 * D + 10000 * E + 1000 * F + 100 * G + H) % 8 == 0 \\\n           and (100000000 * A + 10000000 * B + 1000000 * C + 100000 * D + 10000 * E + 1000 * F + 100 * G + 10 * H + I) % 9 == 0 \\\n           and (1000000000 * A + 100000000 * B + 10000000 * C + 1000000 * D + 100000 * E + 10000 * F + 1000 * G + 100 * H + 10 * I + J) % 10 == 0:\n            return {'A': A, 'B': B, 'C': C, 'D': D, 'E': E, 'F': F, 'G': G, 'H': H, 'I': I, 'J': J}\n\nA, C, G = 3, 1, 7\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    ashley_age_3_years_ago = ashley_age - 3\n    brothers_age_3_years_ago = ashley_age_3_years_ago - 2\n    brother_current_age = brothers_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    def printed_page_number(real_page_number):\n        return real_page_number - (real_page_number // 3)\n\n    low, high = 1, 89\n    while low < high:\n        mid = (high + low + 1) // 2\n        if printed_page_number(mid) >= 89:\n            high = mid - 1\n        else:\n            low = mid\n\n    return low\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        if adults * 5 + children * 3 == 75:\n            return adults\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3\n    count_5 = 600 // 5\n    count_15 = 600 // 15  # Multiples of both 3 and 5 are multiples of 15\n\n    # Inclusion-Exclusion Principle: |A ∪ B| = |A| + |B| - |A ∩ B|\n    count = count_3 + count_5 - count_15\n    \n    return count\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    ans = 123 + 468\n    return ans\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    # Difference in age between Tom and Grandma in 10 years\n    age_difference = 60 - 20\n    # Grandma's current age\n    grandma_age_now = 10 + age_difference\n    return grandma_age_now\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies = symbols('candies')\n    students_B = symbols('students_B')\n    students_A = 2 * students_B\n\n    # Equation for class A: candies = 4 * students_A - 20\n    # Equation for class B: candies = 6 * students_B + 16\n    eq_A = Eq(candies, 4 * students_A - 20)\n    eq_B = Eq(candies, 6 * students_B + 16)\n\n    # Substitute students_A with 2 * students_B in equation A\n    eq_A_sub = eq_A.subs(students_A, 2 * students_B)\n    \n    # Solve the system of equations\n    solution = solve((eq_A_sub, eq_B), (candies, students_B))\n\n    return solution[candies]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ans = 0\n\n    # Jeremy has 5 ten-pence, 3 twenty-pence and 1 fifty-pence coins\n    for ten_p in range(6):  # He can use 0 to 5 ten-pence coins\n        for twenty_p in range(4):  # He can use 0 to 3 twenty-pence coins\n            for fifty_p in range(2):  # He can use 0 or 1 fifty-pence coin\n                total = ten_p * 10 + twenty_p * 20 + fifty_p * 50\n                # If total amount is 70 pence, Jeremy can make up 70 pence to pay\n                if total == 70:\n                    ans += 1\n\n    return ans\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # Using the Pigeonhole Principle, the worst case is taking all different colors first\n    # There are 3 red and 3 green, so after taking one of each color (3+1),\n    # we are sure to have 2 stickers of the same color.\n    return 3 + 1\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Maximum number of balls she can take out without getting 4 of the same color:\n    # 3 blue + 3 orange + 3 yellow = 9 balls\n    # She can have 3 balls of each without having 4 of the same color\n    # The next ball she picks must then be the fourth of some color\n    ans = 3 + 3 + 3 + 1\n    return ans\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    duckling_legs = 4 * 2  # 4 ducklings with 2 legs each\n    baby_goose_legs = 2 * 2  # 2 baby geese with 2 legs each\n    remaining_legs = 36 - duckling_legs - baby_goose_legs  # Total legs minus the legs of ducklings and geese\n    lamb_legs = 4  # Each lamb has 4 legs\n    \n    num_lambs = remaining_legs // lamb_legs  # The number of lambs\n\n    return num_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    # Number of teams\n    n = 5\n    # Number of matches using the handshake problem formula\n    num_matches = n * (n - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation: number of boys is three times the number of girls\n    equation1 = Eq(boys, 3 * girls)\n    # Equation: 2 sweets per boy and 4 sweets per girl give a total of 570 sweets\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_number = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_number = int(''.join(map(str, sorted(digits))))\n    difference = largest_number - smallest_number\n    return difference\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # For a pyramid made of cubes, each layer from the top has one less cube on a side\n    # The top three layers can be calculated by the sum of squares of the side lengths\n    layer1 = 1**2  # top layer with 1x1 cubes\n    layer2 = 2**2  # second layer with 2x2 cubes\n    layer3 = 3**2  # third layer with 3x3 cubes\n\n    total_boxes = layer1 + layer2 + layer3\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_spent = 2.35 + 0.78 + 0.65\n    change = 5 - total_spent\n    return round(change, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    total_good_copies = 600\n    good_copies_A = (3/5) * total_good_copies\n    good_copies_B = (2/5) * total_good_copies\n\n    # For every 4 good copies from A, there's 1 bad copy, so we can say every 5 copies include 1 bad copy.\n    # Similarly, for every 5 good copies from B, there's 1 bad copy, resulting in 6 copies to include 1 bad copy.\n    total_copies_A = good_copies_A * (5/4)\n    total_copies_B = good_copies_B * (6/5)\n\n    total_copies_needed = total_copies_A + total_copies_B\n\n    return int(total_copies_needed)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    # Simplify the expression\n    # (a) * (a) - (a) * (a - b) = (a * b) where a = (1.2 + 1.23 + 1) and b = 1\n    a = 1.2 + 1.23 + 1\n    b = 1\n    ans = a * b\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of hours farmer takes to harvest alone,\n    # and the number of hours his son takes to harvest alone.\n    farmer_hours = symbols('farmer_hours')\n    son_hours = symbols('son_hours')\n\n    # Given total work equivalent when worked separately\n    total_work = 24\n\n    # Work equation when they work together\n    # work_done_together = time_taken_together * (work_done_by_farmer_in_1_hour + work_done_by_son_in_1_hour)\n    work_together_eq = Eq((1 / farmer_hours + 1 / son_hours), 1 / 16)\n\n    # Work done by the son in his 6 hours is equivalent to total work minus farmer's work in 16 hours\n    # work_done_by_son_in_his_6_hours = total_work - (farmer_work_in_16_hours)\n    son_work_eq = Eq(6 / son_hours, total_work - (16 / farmer_hours))\n\n    # Solve the system of equations\n    solutions = solve((work_together_eq, son_work_eq), (farmer_hours, son_hours))\n\n    return solutions[son_hours]\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    days_in_january = 31\n    total_smiles_in_january = average_smiles_per_day * days_in_january\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    num_students = 40\n    side_length = math.isqrt(num_students)\n    return side_length\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Calculate the amount of sugar in each solution\n    sugar_annie = 300 * 0.15\n    sugar_becky = 400 * 0.25\n    sugar_carol = 300 * 0.35\n\n    # Calculate the total amount of sugar\n    total_sugar = sugar_annie + sugar_becky + sugar_carol\n\n    # Calculate the total weight of the solution\n    total_solution = 300 + 400 + 300\n\n    # Calculate the concentration of the resulting sugar solution\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10  # initial drop height in meters\n    bounce_height = initial_height / 2  # height after first bounce\n    total_distance = initial_height + bounce_height * 2\n\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(dorothy, 96)\n    equation3 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1 / 6\n    expected_number_of_5s = total_rolls * probability_of_5\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 36 == 0:\n            return number\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_permutations = factorial(5)  # Total permutations without restrictions\n    # Permutations where Hugh is between Louise and Richard\n    permutations_with_Hugh_between = factorial(3) * factorial(2)\n    # Subtract the unwanted permutations from the total permutations\n    count = total_permutations - permutations_with_Hugh_between\n    \n    return count\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10 - 1 + 1\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    from fractions import Fraction\n\n    # Total matches equal to the sum of fractions of won, drawn and lost matches.\n    lost_matches = 10\n    total_matches = lost_matches * (1 / Fraction(2, 5) + 1 / Fraction(7, 20) + 1)\n\n    # Calculate the number of won and drawn matches using their respective fractions.\n    won_matches = total_matches * Fraction(2, 5)\n    drawn_matches = total_matches * Fraction(7, 20)\n\n    # Points calculation.\n    points = won_matches * 3 + drawn_matches * 1\n\n    return int(points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Compute the number that Johnny is dividing\n    number = divisor * quotient + remainder \n    \n    # Check if the remainder is smaller than the divisor (error checking)\n    if remainder >= divisor:\n        return \"Error in remainder\"\n        \n    # Return the correct number\n    return number\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    ans = sum([(4*i + 2)*((-1)**(i+1)) for i in range(20)])\n    return ans\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = initial_price * 0.10\n    second_discount = (initial_price - first_discount) * 0.20\n    final_price = initial_price - first_discount - second_discount\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    # Let's symbolize the unknown mean of the last 5 numbers as `mean_last_5`\n    # We know that the mean of all 8 numbers is 555, so the sum of all 8 numbers is 8 * 555.\n    total_sum = 8 * 555\n\n    # Let mean_last_5 be the mean of the last 5 numbers.\n    # The sum of the last 5 numbers will be 5 * mean_last_5\n    \n    # Also, the mean of the first 3 numbers is (mean_last_5 - 296).\n    # The sum of the first 3 numbers will be 3 * (mean_last_5 - 296).\n    \n    # The total sum of all numbers is the sum of the first 3 and last 5 numbers:\n    # 3 * (mean_last_5 - 296) + 5 * mean_last_5 = total_sum\n    # 3 * mean_last_5 - 3 * 296 + 5 * mean_last_5 = total_sum\n    # 8 * mean_last_5 = total_sum + 3 * 296\n    # mean_last_5 = (total_sum + 3 * 296) / 8\n    mean_last_5 = (total_sum + 3 * 296) / 8\n\n    return mean_last_5\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    last_number = 100\n    step = 2  # She is counting by twos\n    crossed_out_numbers = last_number // step\n    return crossed_out_numbers\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n    equation3 = Eq(vicky, 99)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 5\n\n    work_rate = initial_people / initial_days  # Work rate per day\n    required_people = work_rate * target_days  # People needed for 5 days at the same work rate\n\n    additional_people = required_people - initial_people\n\n    return int(additional_people)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n    bud_position_from_front = pip_position + children_between + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), (rasidah * (1 - 3/5)) / 2)\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_current_age = 53\n    mother_current_age = 81\n\n    years_ago = symbols('years_ago')\n    equation = Eq((isaac_current_age - years_ago), (mother_current_age - years_ago) / 3)\n    \n    ans = solve(equation, years_ago)\n    return ans[0]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Defining the congruences based on the problem statement\n    congruences = [(2, 4), (3, 5), (6, 9)]\n\n    # Using the Chinese Remainder Theorem to find the smallest solution that fits all congruences\n    age = solve_congruence(*congruences)\n\n    return age[0]  # Returning the grandma's age\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    conversion_factor = 2.2\n\n    kilograms = pounds / conversion_factor\n\n    return kilograms\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_oplus(a, b):\n        return sum(range(a, b)) - b\n\n    return custom_oplus(5, 10) - custom_oplus(4, 9)\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8  # m/s\n    cat_speed = 3    # m/s\n    distance_behind = 500  # metres\n    \n    relative_speed = elena_speed - cat_speed  # m/s\n    time_to_catch_up = distance_behind / relative_speed  # seconds\n    \n    return time_to_catch_up\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    chocolate_price = 75  # price per chocolate bar in pence\n    pen_price = 95        # price per pen in pence\n    chocolates = 4        # number of chocolate bars\n    pens = 3              # number of pens\n    total_note_value = 1000  # total note value in pence (£10 note)\n\n    # Total cost calculation in pence\n    total_cost = (chocolate_price * chocolates) + (pen_price * pens)\n\n    # Change calculation in pence\n    change = total_note_value - total_cost\n\n    # Convert the change to pounds (£)\n    change_in_pounds = change / 100\n\n    return change_in_pounds\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    all_permutations = list(permutations(digits, 3))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for number in range(2, 21):\n        if isprime(number) and isprime(number + 6) and isprime(number - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i + 1] - differences[i] for i in range(len(differences) - 1)]\n    next_second_difference = second_differences[-1]\n    next_difference = differences[-1] + next_second_difference\n    next_number = 50 + next_difference\n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "from math import factorial\n\ndef solution():\n    # We want a five-digit even number, so the last digit has to be 2 or 4\n    # There are 2 choices for the last digit\n    last_digit_choices = 2\n    \n    # For the first digit, we cannot have 0, and we've already used one digit at the end, so there are 4 choices\n    first_digit_choices = 4\n    \n    # For the second, third, and fourth digits, we have 3, 2, and 1 choice respectively\n    # These choices come after we've selected the first and last digits\n    remaining_digit_choices = factorial(3)\n    \n    # Total combinations is the product of choices for each place\n    total_ways = first_digit_choices * remaining_digit_choices * last_digit_choices\n    \n    return total_ways\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            if tens + ones == 15:\n                return tens * 10 + ones\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    mean_weight_initial = 50\n    mean_weight_new = 52\n    num_apples_initial = 8\n    num_apples_new = 9\n\n    total_weight_initial = mean_weight_initial * num_apples_initial\n    total_weight_new = mean_weight_new * num_apples_new\n\n    weight_extra_apple = total_weight_new - total_weight_initial\n\n    return weight_extra_apple\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # The lights that remain on are those that are toggled an odd number of times.\n    # This will only occur for lights that have an odd number of divisors i.e., perfect squares.\n    # Therefore, we need to find all the perfect square numbers between 1 and 250.\n    num_lights_on = 0\n    for i in range(1, 251): # Using 251 as the range is exclusive of the stopping value\n        if (i ** 0.5).is_integer():\n            num_lights_on += 1\n    return num_lights_on\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    x = symbols('x')\n    equation = Eq(sqrt(-x), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    ans = sum(range(96, 100))\n    return ans\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages = symbols('pages')\n    original_time = pages / 50\n    increased_time = pages / 70\n    time_difference = Eq(original_time - increased_time, 2)\n\n    ans = solve(time_difference, pages)\n\n    return ans[0]\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    num_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n\n    while True:\n        start_date += one_year\n        # Adjust for leap year\n        if (start_date.year % 4 == 0 and start_date.year % 100 != 0) or (start_date.year % 400 == 0):\n            start_date += one_day\n        # Check if the date falls on a Monday\n        if start_date.weekday() == 0:\n            return start_date.year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    return 5842 + 351\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 100):  # Limiting search range for efficiency\n        dividend = divisor * 8 + 7  # Calculate dividend based on equation\n        if dividend % divisor == 7:  # Check for the remainder\n            return dividend, divisor\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Time spent jogging from 6:30 AM to 7:30 AM is 1 hour\n    jogging_time = 1  # hour\n    jogging_speed = 6  # miles per hour\n    jogging_distance = jogging_time * jogging_speed\n\n    # Time spent walking from 7:30 AM to 9:30 AM is 2 hours\n    walking_time = 2  # hours\n    walking_speed = 5  # miles per hour\n    walking_distance = walking_time * walking_speed\n\n    # Total distance traveled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    savings_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_savings = original_amount + (savings_per_day * days_saved) - lent_to_brother - spent_on_snacks\n\n    return total_savings\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n\n    meters_per_day_per_company = total_expressway / (companies * days)\n\n    return meters_per_day_per_company\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount_percent = 10\n    num_members = 30\n\n    discount_amount = normal_cost * (discount_percent / 100)\n    discounted_cost = normal_cost - discount_amount\n\n    cost_per_member = discounted_cost / num_members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_cost = 0.8  # $0.80\n    additional_cost_per_minute = 0.05  # $0.05\n    total_cost = 1.4  # $1.4\n    additional_cost = total_cost - base_cost  # Additional cost apart from the base cost\n\n    # Calculate additional minutes beyond the first 15 minutes\n    additional_minutes = additional_cost / additional_cost_per_minute\n    \n    # Total minutes is the sum of the first 15 minutes and additional minutes\n    total_minutes = 15 + additional_minutes\n    return int(total_minutes)\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    last_digit_2_power = pow(2, 2017, 10)  # Last digit of 2^2017\n    last_digit_3_power = pow(3, 2017, 10)  # Last digit of 3^2017\n    last_digit_product = (last_digit_2_power * last_digit_3_power) % 10\n    return last_digit_product\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the variable which is the placeholder in the underline\n    x = symbols('x')\n\n    # Set up the equation according to the question\n    equation = Eq(4 * x - 13, 55)\n\n    # Solve the equation\n    result = solve(equation, x)\n\n    # Return the solution\n    return result[0]\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # from the given pattern, it seems like the operation ◈ multiplicates the two numbers and then subtracts the first number from the result\n    # the given operation seems to be: a ◈ b = a * b - a\n    # we use that operation to find 9 ◈ 20\n    \n    a = 9\n    b = 20\n    result = a * b - a\n    \n    return result\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x - 4) / 2) + 11, 37)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5 + 1) * 5  # Find the first multiple of 5 after 56\n    last_multiple = 120 // 5 * 5  # Find the last multiple of 5 before 120\n    \n    number_of_multiples = (last_multiple - first_multiple) // 5 + 1\n    \n    return number_of_multiples\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina was 50 years old on 10th May 2005.\n    gina_birth_year = 2005 - 50\n\n    # James was 20 years old on 10th May 1997.\n    james_birth_year = 1997 - 20\n\n    # Find the age of James when Gina was 35.\n    # We calculate the year when Gina was 35.\n    year_when_gina_35 = gina_birth_year + 35\n\n    # Calculate James' age at that year.\n    age_of_james = year_when_gina_35 - james_birth_year\n\n    return age_of_james\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_amount = 2 + 1/2\n    num_quarters_in_one = 4\n    ans = total_amount * num_quarters_in_one\n    return ans\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5\n    eddie_position_from_back = 9\n    people_between = 2\n    \n    total_people = lucy_position + people_between + eddie_position_from_back\n    \n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        if int(f\"26{B}789\") % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    primes = [2, 3, 5, 7]  # The prime numbers less than 8\n    for number in range(3 * 5 * 7 * 8):  # The loop range is based on the LCM of the divisors 3, 5, 7, and 8\n        remainders = set()\n        remainders.add(number % 3)\n        remainders.add(number % 5)\n        remainders.add(number % 7)\n        remainders.add(number % 8)\n        \n        # Check if the remainders set is a subset of the primes set\n        # Since we need four different prime numbers, we check for set equality\n        if remainders == set(primes):\n            return number\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # convert meters to centimeters\n    dress_length_cm = 5 * 100 + 8  # convert meters to centimeters\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm / 9\n\n    stripe_length_m = stripe_length_cm // 100  # meters part of the stripe length\n    stripe_length_cm_remainder = stripe_length_cm % 100  # centimeters part of the stripe length\n\n    return stripe_length_m, stripe_length_cm_remainder\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 4) * 7 - 21, 35)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of orchids, tulips, and roses\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # The equations based on the given problem\n    equation1 = Eq(orchids/tulips, 3/5)  # Ratio of orchids to tulips\n    equation2 = Eq(orchids + tulips + roses, 3616)  # Total number of flowers\n    # Flowers left after selling\n    equation3 = Eq(orchids * (1 - 0.40) + tulips * (1 - 1/5) + roses * (1 - 0.25), 2644)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    # Total number of pupils\n    total_pupils = 30\n    # Total number of right-handed pupils\n    right_handed = 21\n    # Total number of girls\n    girls = 16\n    \n    # Maximum number of left-handed pupils\n    max_left_handed = total_pupils - right_handed\n    \n    # The smallest number of girls who are right-handed is the total number of girls\n    # minus the maximum possible number of left-handed girls\n    # Since not all girls are right-handed, we have at least one left-handed girl\n    \n    # If all left-handed pupils are girls, the remaining girls must be right-handed\n    min_right_handed_girls = girls - max_left_handed\n    \n    # If min_right_handed_girls is negative, it means there are not enough left-handed\n    # pupils to make all the girls left-handed. In that case, the minimum number of\n    # right-handed girls is the total number of right-handed pupils minus the number of\n    # boys, since all the boys must be right-handed in the worst case scenario.\n    min_right_handed_girls = max(min_right_handed_girls, right_handed - (total_pupils - girls))\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n\n    equation1 = Eq(12 * books + 9 * files, 336)\n    equation2 = Eq(books, files + 14)\n\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if (chickens * 2 + rabbits * 4) == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    # The ones digit of a number raised to any power will cycle through a pattern.\n    # For example, the powers of 2 cycle as 4, 8, 6, 2, and then repeat.\n    ones_digit = {\n        0: [0],\n        1: [1],\n        2: [6, 2, 4, 8],\n        3: [1, 3, 9, 7],\n        4: [6, 4],\n        5: [5],\n        6: [6],\n        7: [1, 7, 9, 3],\n        8: [6, 8, 4, 2],\n        9: [1, 9]\n    }\n\n    # Calculate the sum of the ones digits for each number raised to the 2013th power\n    total_ones_digit = 0\n    for number in range(1, 10):\n        cycle = ones_digit[number]\n        # The length of the cycle for current number\n        cycle_length = len(cycle)\n        # 2013 mod cycle_length gets us the position in the cycle\n        cycle_position = 2013 % cycle_length\n        # Add the ones digit for the current number's 2013th power\n        total_ones_digit += cycle[cycle_position-1] if cycle_position != 0 else cycle[-1]\n\n    # The ones digit of the result is the ones digit of the sum of ones digits\n    ans = total_ones_digit % 10\n\n    return ans\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Worst case: Peter takes out one of each color first\n    # After that, the next sock must match one of the previously taken out socks\n    num_socks = 3 + 1  # One of each color plus one to guarantee a match\n    return num_socks\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    # Convert both times to a 24-hour clock\n    departure_time = 20  # 8 pm Japan time\n    arrival_time = 1 + 24  # 1 am France time (add 24 because it's the next day)\n\n    # Calculate the difference in time between the two countries\n    time_difference = 7  # Japan is 7 hours ahead\n\n    # Calculate the flight time considering the time difference\n    flight_duration = (arrival_time - departure_time) - time_difference\n\n    return flight_duration\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    answer = solutions[square] + solutions[diamond]\n    return answer\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    pages = 131\n    digits = 0\n\n    for p in range(1, pages+1):\n        digits += len(str(p))\n    \n    return digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    total_score = 168\n    correct_score = 4\n    incorrect_penalty = -1\n\n    # Let the number of correct answers be x\n    # The number of incorrect answers will be (attempted_questions - x)\n    # 4x - (attempted_questions - x) = total_score\n    # 4x - attempted_questions + x = total_score\n    # 5x = total_score + attempted_questions\n    # x = (total_score + attempted_questions) / 5\n    \n    correct_answers = (total_score + attempted_questions) / (correct_score + abs(incorrect_penalty))\n    \n    return int(correct_answers)\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    x, y = symbols('x y')\n\n    # Equation 1: The sum of the two numbers is 71\n    equation1 = Eq(x + y, 71)\n\n    # Equation 2: The difference of the two numbers is 9\n    equation2 = Eq(x - y, 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Since x is the bigger number, we return the solution for x\n    return solutions[x]\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    ans = 391 * 7\n    return ans\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let x be the smallest of the five consecutive even numbers\n    # Then the five numbers are x, x+2, x+4, x+6, and x+8\n    # Their sum is: x + (x+2) + (x+4) + (x+6) + (x+8) = 5x + 20\n    # This sum is equal to 200, so we can set up the equation and solve for x\n    # 5x + 20 = 200\n    # 5x = 180\n    # x = 180 / 5\n    # x = 36\n    return 36  # This is the smallest number\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let `x` be the amount of sugar solution transferred from A to B in grams\n    x = symbols('x')\n\n    # Initial amount of sugar in A: 50g * 10% = 5g\n    # Initial amount of sugar in B: 30g * 20% = 6g\n    # After transferring, amount of water in A: 50 - x\n    # After transferring, amount of water in B: 30 - x\n    # After transferring, amount of sugar in A: 5 - 0.1x\n    # After transferring, amount of sugar in B: 6 + 0.1x\n\n    # The concentration of sugar in both containers is the same after transfer\n    equation = Eq((5 - 0.1*x)/(50 - x), (6 + 0.1*x)/(30 + x))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    from sympy import symbols, Sum, factorial, simplify\n\n    k = symbols('k', integer=True)\n    num_terms = 100 - 97 + 1\n\n    summation = Sum((100 - k) / factorial(k + 3), (k, 0, num_terms)).doit()\n\n    return simplify(summation)\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Katie needs 8 minutes to cut a piece of wood into 5 sections\n    # This means she makes 4 cuts, because it's from one piece to 5 sections (5 - 1 = 4 cuts)\n    time_for_4_cuts = 8\n    \n    # Calculate the time for one cut\n    time_for_1_cut = time_for_4_cuts / 4\n    \n    # To cut a piece of wood into 6 sections, she needs to make (6 - 1) cuts\n    cuts_needed_for_6_sections = 6 - 1\n    \n    # Calculate the total time needed for the cuts\n    total_time = time_for_1_cut * cuts_needed_for_6_sections\n    \n    return total_time\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    votes_for_peter_to_win = total_votes // 2 + 1  # To win, Peter needs more than half of the votes\n\n    current_votes_for_peter = 35\n    additional_votes_needed = votes_for_peter_to_win - current_votes_for_peter\n\n    return additional_votes_needed\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys + girls, 995)\n    equation2 = Eq(girls, boys - 7)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # For 2-digit numbers, the first digit cannot be 0.\n    # Therefore, there are 2 choices for the first digit (1 or 2),\n    # and 3 choices for the second digit (0, 1, or 2).\n\n    first_digit_choices = 2\n    second_digit_choices = 3\n\n    total_numbers = first_digit_choices * second_digit_choices\n\n    return total_numbers\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    ans = 87 * 23\n    return ans\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    # Comparing the units of the numbers given\n    # Finding the highest value of the unit place in both numbers\n    num1 = 31\n    num2 = 32\n    \n    # Extracting the unit's digits\n    unit1 = num1 % 10\n    unit2 = num2 % 10\n    \n    # Comparing the units\n    if unit1 > unit2:\n        highest_unit_value = num1\n    else:\n        highest_unit_value = num2\n\n    return highest_unit_value\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # in pence\n    val_5p = 5\n    val_10p = 10\n    val_20p = 20\n\n    # Since we have an equal number of each coin, we can divide total_amount by the sum\n    # of the values of a single set of coins (5p + 10p + 20p)\n    num_coins_per_type = total_amount // (val_5p + val_10p + val_20p)\n\n    # Total number of coins is three times the number of one type because we have\n    # 5p, 10p, and 20p coins:\n    total_coins = num_coins_per_type * 3\n\n    return total_coins\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction = 189\n    percentage_reduction = (reduction / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    n = 9  # Number of terms\n    total_sweets = 135  # Total sweets eaten in n days\n\n    # Using the formula for the sum of an arithmetic sequence: total_sweets = n/2 * (2a + (n - 1)d)\n    # where a is the first term and d is the common difference (in this case d=3)\n    # We have only one unknown in this equation, which is a (first day sweets)\n    # Solving for a gives: a = (2*total_sweets/n - (n - 1)*3)/2\n\n    # We also know that the last term l = a + (n - 1)d\n    # Substituting the value of a computed above in the expression for l gives:\n    # l = (2*total_sweets/n - (n - 1)*3)/2 + (n - 1)*3\n\n    # Simplifying the expression for l gives: l = total_sweets/n + (n - 1)*3/2\n    # Note that total_sweets/n is the average sweets eaten per day if he ate the same amount every day.\n    # Since he eats 3 more every day, after the first day, he would have eaten (n - 1)*3/2 more sweets by the last day.\n\n    d = 3  # common difference\n    l = total_sweets / n + (n - 1) * d / 2  # last day sweets\n\n    return int(l)\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_amount = 100\n    book_percentage = 0.10\n    dvd_percentage = 0.20\n\n    spent_on_book = initial_amount * book_percentage\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * dvd_percentage\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money = 28   # Amount in dollars\n    gift_cost = 20     # Cost in dollars\n\n    money_left = (total_money - gift_cost) * 100  # Convert the remaining money to cents\n\n    return money_left\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    interest_rate = 0.06\n    years = 5\n\n    balance = principal * ((1 + interest_rate) ** years)\n\n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    total_digits = 0\n    \n    # Pages 1-9 use 1 digit each\n    if 185 >= 9:\n        total_digits += 9\n    \n    # Pages 10-99 use 2 digits each\n    if 185 >= 99:\n        total_digits += (99 - 10 + 1) * 2\n    else:\n        total_digits += (185 - 9) * 2\n        return total_digits\n    \n    # Pages 100-185 use 3 digits each\n    total_digits += (185 - 99) * 3\n    \n    return total_digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percentage = 10 / 100  # 10% pay rise\n    increase_amount = annual_salary * pay_rise_percentage\n    new_annual_salary = annual_salary + increase_amount\n    new_monthly_salary = new_annual_salary / 12\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    return 704 - 457\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if (month * 31 + day * 12) == 376:\n                # Check if the day is possible for the given month\n                if month == 2 and day > 28:\n                    continue  # Skip impossible dates for February\n                if month in [4, 6, 9, 11] and day > 30:\n                    continue  # Skip impossible dates for months with 30 days\n                return f'{day:02d}{month:02d}'\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    total_product = 4.08 * 20\n    known_product = 1.08 * 20\n    missing_number_product = total_product - known_product\n    missing_number = missing_number_product / 20\n    return missing_number\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    ans = sum([119, 117, 113, 109, 105, 101] - [115, 111, 107, 103, 99])\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    ans = 158 * 23\n    return ans\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    total_numbers = 2022\n    \n    divisible_by_7 = total_numbers // 7\n    divisible_by_17 = total_numbers // 17\n    divisible_by_both = total_numbers // (7 * 17)\n\n    ans = total_numbers - (divisible_by_7 + divisible_by_17 - divisible_by_both)\n    return ans\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    cost_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = cost_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_original_price = 6  # in pounds\n    protractor_original_price = 0.30  # in pounds (30p)\n\n    calculator_sale_price = calculator_original_price * 0.75  # reduced by a quarter\n    protractor_sale_price = protractor_original_price * 0.50  # half price\n\n    num_calculators = 8\n    num_protractors = 20\n\n    total_cost = (calculator_sale_price * num_calculators) + (protractor_sale_price * num_protractors)\n\n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_ratio = 40\n    milk_ratio = 80\n    tom_flour = 25\n\n    tom_milk = (tom_flour * milk_ratio) / flour_ratio\n\n    return tom_milk\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n\n    total_sweets = sweets_taken + sweets_left\n\n    return total_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    younger, older = symbols('younger older')\n    equation = Eq(older - 18, 62)\n    \n    solution = solve((equation), (older))\n    \n    return solution[older]\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Total amount of grass is the same in either case. \n    # If we represent the amount of grass as G, the rate of work of one ox as R, and time as T,\n    # we can write the following equations:\n    # G = 27 oxen * R * 6 weeks\n    # G = 23 oxen * R * 9 weeks\n    # Equating both and canceling G gives us:\n    # 27 * 6 = 23 * 9\n    # From this, we can derive the rate of work R = 23 * 9 / (27 * 6)\n    # Knowing the rate R, we can figure out how many weeks T it would take for 21 oxen to finish:\n    # G = 21 oxen * R * T\n    # T = G / (21 oxen * R)\n    # T = (27 * 6) / (21 oxen * (23 * 9 / (27 * 6)))\n    # T = (27 * 6 * 27 * 6) / (21 * 23 * 9)\n    \n    T = (27 * 6 * 27 * 6) / (21 * 23 * 9)\n    return T\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = (2015**3 - 2014 * (2015**2 + 2016))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds_of_tonnes = (2/3) * tonnes\n    # Converting tonnes to kilograms (1 tonne = 1000 kilograms)\n    ans = two_thirds_of_tonnes * 1000\n    return ans\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen's bike ride time is 1 hour (from 7:30 to 8:30)\n    bike_speed = 10 # miles per hour\n    bike_distance = 1 * bike_speed\n\n    # Ellen's train ride time is 2 hours (from 8:30 to 10:30)\n    train_speed = 50 # miles per hour\n    train_distance = 2 * train_speed\n\n    # Total distance traveled\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # Use stars and bars theorem for the distribution with empty boxes allowed.\n    # Choose 2 out of (5+3-1) places to put dividers.\n    from math import comb\n    num_ways = comb(5 + 3 - 1, 3 - 1)\n    return num_ways\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    return (0.02) ** 2\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue_marbles = symbols('blue_marbles')\n    red_marbles = blue_marbles + 25\n    green_marbles = red_marbles + 32\n\n    equation = Eq(blue_marbles + red_marbles + green_marbles, 112)\n\n    solutions = solve(equation, blue_marbles)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = 'TEENAGE'\n    letter_freq = {letter: word.count(letter) for letter in set(word)}\n    numerator = factorial(len(word))\n    denominator = 1\n    for freq in letter_freq.values():\n        denominator *= factorial(freq)\n    \n    num_arrangements = numerator // denominator\n    \n    return num_arrangements\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # 3rd from front, 2nd from back -> There are 3+2-1 rows\n    rows = 3 + 2 - 1\n    # 4th from left, 3rd from right -> There are 4+3-1 columns\n    columns = 4 + 3 - 1\n    # Total students = rows * columns\n    total_students = rows * columns\n    return total_students\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for amounts of money\n    ema, keng_wee = symbols('ema keng_wee')\n    \n    # Ema had $360 less than Keng Wee\n    equation1 = Eq(ema, keng_wee - 360)\n    \n    # Ema spent 1/4 of her money\n    ema_spent = ema / 4\n    \n    # Keng Wee spent 4/7 of his money\n    keng_wee_spent = (4 / 7) * keng_wee\n    \n    # After spending, they have the same amount left\n    equation2 = Eq(ema - ema_spent, keng_wee - keng_wee_spent)\n    \n    # Solve the system of equations for the amount of money Keng Wee had at first\n    solution = solve((equation1, equation2), (ema, keng_wee))\n    \n    # Return the amount of money Keng Wee had at first\n    return solution[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount = 0.25\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    num = 216\n    while True:\n        num += 1\n        if sum(map(int, str(num))) == 9:\n            return num\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    ans = one_fourth_of_36 * 10\n    return ans\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    ans = 6.4 * 2.7\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # If Lucas was the 3rd from the front and 2nd from the back,\n    # there are 3 + 2 - 1 = 4 people in his column. (Subtract 1 because Lucas is counted twice)\n    column_count = 3 + 2 - 1\n    \n    # If Lucas was the 4th from the left and 3rd from the right,\n    # there are 4 + 3 - 1 = 6 people in his row. (Subtract 1 because Lucas is counted twice)\n    row_count = 4 + 3 - 1\n    \n    # The total number of students is the product of the number of rows and columns.\n    total_students = row_count * column_count\n\n    return total_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys_before, girls_before = symbols('boys_before girls_before', integer=True)\n\n    # Initially, the number of girls was 9/11 of that of boys.\n    equation1 = Eq(girls_before, (9/11) * boys_before)\n\n    # After 2 girls are transferred in, the number of girls becomes 10/11 of that of boys.\n    equation2 = Eq(girls_before + 2, (10/11) * boys_before)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys_before, girls_before))\n\n    # Calculate the total number of students now\n    total_students_now = solutions[boys_before] + (solutions[girls_before] + 2)\n\n    return total_students_now\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    result = 5 / (1/4)\n    return result\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    return 37 + 38 + 40 + 43 + 42 + 41\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    ans = (77.5 * 52 / 100) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 0\n    for i in range(1, 11):\n        ans += sum((j / i for j in range(1, i + 1))) + sum((j / i for j in range(i - 1, 0, -1)))\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(2*(3*x - y), 2*x + 4)\n    solution_2x_y = solve(equation, (x, y))[x] - y\n\n    return solution_2x_y\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost = (3 * 31) + (2 * 17) + 78 + 105\n    change = 500 - total_cost\n    return change\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim, tan = symbols('lim tan')\n\n    equation1 = Eq(lim + tan, 390)\n    equation2 = Eq(lim, 5 * tan)\n\n    solutions = solve((equation1, equation2), (lim, tan))\n\n    return solutions[lim] - solutions[tan]\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan = symbols('zehan')\n\n    equation = Eq(zehan + 12, 3 * zehan)\n\n    current_age = solve(equation, zehan)\n\n    return current_age[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from itertools import combinations\n\ndef solution():\n    total_students = 15\n    team_size = 5\n    count = 0\n\n    # all possible combinations for the team\n    all_combinations = list(combinations(range(total_students), team_size))\n\n    # subtract 3 from total_students for A, B, C\n    students_without_abc = total_students - 3\n\n    for combo in all_combinations:\n        # Check if exactly one of A(0), B(1), or C(2) is in the combo\n        if sum(1 for i in range(3) if i in combo) == 1:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    num_tickets = 7\n\n    cost_per_ticket = total_cost / num_tickets\n\n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the initial amount of lemon juce in the bottle\n    x = symbols('x')\n    ratio_initial = 2 / 3\n    ratio_final = 6 / 5\n\n    # Equation based on the proportion of lemon juice in the initial mixture\n    # before 80ml of lemon juice was added\n    equation1 = Eq(x / (3/2 * x), ratio_initial)\n    \n    # Equation based on the proportion of lemon juice in the final mixture\n    # after 80ml of lemon juice was added.\n    equation2 = Eq((x + 80) / (5/6 * (x + 80)), ratio_final)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    return 3 * 6\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    shaila_sweets = 36\n    total_ratio = 5 + shaila_ratio\n    total_sweets = (shaila_sweets / shaila_ratio) * total_ratio\n    \n    return total_sweets\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings, spent_on_dresses, spent_on_earrings = symbols('savings spent_on_dresses spent_on_earrings')\n    spent_on_dresses = 177\n    spent_on_earrings = 129\n\n    # Equation representing what she spent and half of what she gave to her mother:\n    # (savings / 3) / 2 + spent_on_dresses + spent_on_earrings = savings - (savings / 3)\n    equation = Eq((savings / 3) / 2 + spent_on_dresses + spent_on_earrings, savings - (savings / 3))\n\n    # Solve for savings\n    solutions = solve(equation, savings)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_speakers = 75\n    japanese_speakers = 45\n\n    both_languages = (french_speakers + japanese_speakers) - total_teachers\n    only_french = french_speakers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60\n    increased_speed = usual_speed * 1.3\n    time_lost_minutes = 9\n    time_lost_hours = time_lost_minutes / 60\n\n    time_to_destination_with_usual_speed = time_lost_hours / (increased_speed / usual_speed - 1)\n    distance = usual_speed * time_to_destination_with_usual_speed\n\n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(((x + 8) * 8 - 8) / 8, 80)\n    solved = solve(equation, x)\n    return solved[0]\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n\n    for red_ropes in range(total_ropes + 1):\n        blue_ropes = total_ropes - red_ropes\n        length = 2 * red_ropes + 3 * blue_ropes\n        if length == total_length:\n            return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    total_skipping_rope = 40\n    total_long_jump = 31\n    both_events = 21\n\n    only_one_event = (total_skipping_rope - both_events) + (total_long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    percentage = 30 / 100\n    part_value = 21\n    P = part_value / percentage\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    # Total savings in the first half of the year\n    first_half_savings = 366\n    # Average monthly savings in the second half of the year\n    second_half_avg = 65\n    # Number of months in the second half of the year\n    months_in_second_half = 6\n\n    # Total savings in the second half of the year\n    second_half_savings = second_half_avg * months_in_second_half\n\n    # Total electricity saved over the entire year\n    total_savings_year = first_half_savings + second_half_savings\n\n    # Number of months in a year\n    months_in_year = 12\n\n    # Average monthly savings throughout the year\n    avg_monthly_savings = total_savings_year / months_in_year\n\n    return avg_monthly_savings\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    child_count = 0\n    while True:\n        child_count += 1\n        if child_count % 7 == 0 and child_count % 9 == 2:\n            return child_count\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    total_number = 22\n    count = 0\n\n    for x in range(1, total_number//2):\n        if (total_number-x) != x:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, v be the original speed and t be the original time.\n    d, v, t = symbols('d v t')\n\n    # Original speed and time relation\n    eq1 = Eq(v * t, d)\n\n    # If speed increases by 25%, time decreases by 20 mins.\n    # New speed = v + (25/100)*v = 1.25*v\n    # New time = t - 20/60 hours (as 20 mins = 20/60 hours)\n    # => (1.25*v)*(t - 20/60) = d\n    eq2 = Eq(1.25 * v * (t - 20/60), d)\n\n    # If speed decreases by 45 m/min, time increases by 75%.\n    # New speed = v - 45\n    # New time = t + 75/100*t = 1.75*t\n    # => (v - 45)*(1.75*t) = d\n    eq3 = Eq((v - 45) * 1.75 * t, d)\n\n    # Solving the equations simultaneously\n    solutions = solve((eq1, eq2, eq3), (d, v, t))\n\n    # We need the distance 'd'\n    return solutions[d]\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    used_flour = brownies + cookies + muffins\n    used_flour = used_flour.simplify()\n    \n    return used_flour\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for i in range(1, 42):  # Starting from 1, since a factor cannot be 0\n        if 41 % i == 0:  # Check if 41 is a multiple of i\n            A = i + 41 / i  # The smallest factor and the greatest factor of A\n            if isinstance(A, float) and A.is_integer():\n                A = int(A)\n                break\n\n    seventh_multiple_of_A = A * 7\n    return seventh_multiple_of_A\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # The ratio of height to width is 3:4\n    ratio_height = 3\n    ratio_width = 4\n\n    # Given height of the television screen\n    height = 21  # in cm\n\n    # Calculate the width using the ratio\n    width = (height / ratio_height) * ratio_width\n\n    # Calculate the perimeter of the screen\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    ans = 1\n    for i in range(2, 12):\n        ans *= (1 + 1 / i)\n    return ans\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    return 98 // 7\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, 3 * sheena / 5)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    buzz, jessie = symbols('buzz jessie')\n    \n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n    \n    solutions = solve((equation1, equation2), (buzz, jessie))\n    \n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let x be the larger number and y be the smaller number.\n    # We have been given that x - y = 36 and x + y = 98.\n\n    # Adding the two equations, we get:\n    # (x + y) + (x - y) = 98 + 36\n    # 2x = 134\n    # x = 134 / 2\n    x = 134 / 2\n\n    # Substitute the value of x into one of the equations:\n    # x + y = 98\n    # (134 / 2) + y = 98\n    y = 98 - (134 / 2)\n    \n    return int(y)\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number_str = '3' * 12\n    number = int(number_str)\n\n    remainder = number % 7\n\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    number_of_terms = (last_term - first_term) // 2 + 1\n\n    sum_of_series = (first_term + last_term) * number_of_terms // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Calculate the last digit of each number raised to the power of 100\n    last_digit_4 = (4 ** 100) % 10  # Last digit of 4^100\n    last_digit_7 = (7 ** 100) % 10  # Last digit of 7^100\n    last_digit_9 = (9 ** 100) % 10  # Last digit of 9^100\n    last_digit_11 = (11 ** 100) % 10  # Last digit of 11^100\n\n    # As the last digit of 11^100 would be 1 (any number ending with 1 raised to any power will end with 1)\n    # Now, multiply the last digits of each number\n    last_digit = (last_digit_4 * last_digit_7 * last_digit_9 * 1) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    score = 78\n    correct_answer_percent = 70\n    correct_answer_marks = 3\n    wrong_answer_marks = -1\n    \n    # Calculate number of questions answered correctly and answered wrong\n    correct_answers = (total_questions * correct_answer_percent) / 100\n    wrong_answers = total_questions - correct_answers\n    \n    # Solve the equation\n    # correct_answers * correct_answer_marks + wrong_answers * wrong_answer_marks = score\n    # since wrong_answers = total_questions - correct_answers, we substitute this in the equation\n    # correct_answers * correct_answer_marks + (total_questions - correct_answers) * wrong_answer_marks = score\n    # correct_answers * (correct_answer_marks - wrong_answer_marks) + total_questions * wrong_answer_marks = score\n    # correct_answers = (score - total_questions * wrong_answer_marks) / (correct_answer_marks - wrong_answer_marks)\n    correct_answers = (score - total_questions * wrong_answer_marks) / (correct_answer_marks - wrong_answer_marks)\n    \n    return int(correct_answers)\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # The ratio of files to rulers should remain the same as the quantities scale up.\n    # Therefore, the cost will also scale up by the same ratio.\n    cost_of_6_files_and_10_rulers = 40\n    ratio = (9 + 15) / (6 + 10)  # Total number of new items divided by total number of original items\n    cost_of_9_files_and_15_rulers = cost_of_6_files_and_10_rulers * ratio\n    \n    return cost_of_9_files_and_15_rulers\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, jessie = symbols('john jessie')\n    equation1 = Eq(john, 5/13 * jessie)\n    equation2 = Eq(john + 600, 1/2 * (jessie - 600))\n\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    # Initialize the number of 1s and 2s used\n    ones_used = 0\n    twos_used = 0\n    N = 0\n\n    # Increment N until we find a number that uses 15 ones and 14 twos\n    while not (ones_used == 15 and twos_used == 14):\n        N += 1\n        # Count the number of 1s and 2s in the current integer\n        ones_used += str(N).count('1')\n        twos_used += str(N).count('2')\n\n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_format = \"%H:%M\"\n    start_time = datetime.strptime(\"10:30\", time_format)\n    end_time = datetime.strptime(\"11:00\", time_format)\n\n    baking_duration = end_time - start_time\n\n    return baking_duration.seconds // 60  # converting timedelta seconds to minutes\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t, c = symbols('t c')  # number of T-shirts and Caps\n\n    # Equations based on the given ratios and sold items\n    equation1 = Eq(t / c, 8 / 5)\n    equation2 = Eq((t / 4) * 3 + (c / 5) * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    # Return the number of T-shirts Siti had at first, which must be an integer\n    return int(solutions[t])\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    # Calculate total cost in pence\n    total_cost = (3 * 12) + (5 * 11)\n    \n    # Convert £2 to pence\n    amount_paid = 200\n    \n    # Change in pence\n    change_pence = amount_paid - total_cost\n    \n    # Convert pence to pounds and pence\n    pounds = change_pence // 100\n    pence = change_pence % 100\n    return (pounds, pence)\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    # Arithmetic sequence details\n    first_age = 7  # age of youngest child\n    common_difference = 2  # years apart between children\n    total_children = 7\n\n    # Calculate Harvir's age, being the oldest\n    harvir_age = first_age + (total_children - 1) * common_difference\n\n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n    total_spent = calendar_price + ball_price\n\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    total_used_flour_kg = (1/5) + (1/2)  # Convert fractions to a total in kilograms\n    remaining_flour_kg = 360 / 1000  # Convert grams to kilograms\n\n    initial_flour_kg = total_used_flour_kg + remaining_flour_kg  # Sum used flour and remaining flour\n\n    return initial_flour_kg\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    # Given costs\n    cost_orange = 26\n    cost_lemon = 30\n\n    # Total amount Gordon spent in pence (since costs are in pence)\n    total_spent_pence = 500  # 5 pounds in pence\n\n    # Now, let's assume Gordon bought x oranges and y lemons.\n    # We seek integer solutions for x and y that satisfy the equation:\n    # 26x + 30y = 500\n\n    # Initialize count to track number of possible combinations\n    count = 0\n    # Initialize variables for storing a valid combination\n    num_oranges = 0\n    num_lemons = 0\n\n    # Try all possible combinations within a reasonable range.\n    # We are finding the integer solutions within the constraint of total amount spent.\n    for x in range(total_spent_pence // cost_orange + 1):  # Number of oranges cannot exceed this\n        for y in range(total_spent_pence // cost_lemon + 1):  # Number of lemons cannot exceed this\n            if cost_orange * x + cost_lemon * y == total_spent_pence:\n                count += 1\n                num_oranges = x\n                num_lemons = y\n\n    # The problem asks for the total number of fruits\n    return num_oranges + num_lemons\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    # There are 4 people to arrange in a circle. Fix one person's position to break the circle.\n    # Now there are (4 - 1)! ways to arrange the remaining people.\n    num_people = 4\n    ans = factorial(num_people - 1)\n    return ans\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original = symbols('original')\n    equation = Eq(original + 24, 3 * original)\n    \n    solution = solve(equation, original)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n\n    def star(a, b):\n        return 3 * a - 2 * b\n\n    result = delta(star(delta(3, 4), 5), 6)\n    \n    return result\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    female_day1, male_day1 = symbols('female_day1 male_day1')\n\n    # On the first day, the number of male visitors was 450 more than the number of female visitors\n    equation1 = Eq(male_day1, female_day1 + 450)\n\n    # On the second day, the number of female visitors increased by 15%\n    female_day2 = female_day1 * 1.15\n\n    # On the second day, the number of male visitors decreased by 18%\n    male_day2 = male_day1 * 0.82\n\n    # The total number of visitors for the second day was 1354\n    equation2 = Eq(female_day2 + male_day2, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (female_day1, male_day1))\n\n    total_visitors_day1 = solutions[female_day1] + solutions[male_day1]\n    \n    return int(total_visitors_day1)\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for Leo and Jason's initial amounts\n    leo, jason = symbols('leo jason')\n    \n    # Leo had $220 more than Jason initially\n    equation1 = Eq(leo, jason + 220)\n    \n    # After receiving their salaries\n    leo_salary = leo + 180\n    jason_salary = jason + 1100\n    \n    # Now Jason has 2 times as much money as Leo\n    equation2 = Eq(jason_salary, 2 * leo_salary)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (leo, jason))\n    \n    # Jason's current amount after receiving the salary\n    jasons_current_amount = solutions[jason] + 1100\n    \n    return jasons_current_amount\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n\n    # Calculate permutation of all books\n    perm_all_books = factorial(total_books)\n\n    # Calculate permutation of identical books\n    perm_biographies = factorial(3)\n    perm_scifi = factorial(4)\n    perm_magazines = factorial(2)\n    perm_schoolbooks = factorial(2)\n\n    # Total ways to arrange books: Perm_all_books / (Perm_biographies * Perm_scifi * Perm_magazines * Perm_schoolbooks)\n    num_ways = perm_all_books // (perm_biographies * perm_scifi * perm_magazines * perm_schoolbooks)\n\n    return num_ways\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    # Iterate over all permutations of the digits 0-9, for the letters E, F, C, B, H\n    for perm in permutations(range(10), 5):\n        E, F, C, B, H = perm\n        \n        # Create the numbers from each permutation\n        AB = 10 * E + F  # First two digits\n        BC = 10 * F + C  # Middle two digits\n        CD = 10 * C + B  # Middle two digits - 1\n        DE = 10 * B + H  # Last two digits\n\n        # Check if the condition is satisfied\n        if DE - AB == BC and CD - AB == DE:\n            # Compute the value of EFCBH\n            EFCBH = 10000 * E + 1000 * F + 100 * C + 10 * B + H\n            return EFCBH\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "from math import comb\n\ndef solution():\n    total_pencils = 7\n    pencil_cases = 3\n\n    # Since the pencil cases are identical, we can do a transformation:\n    # Adding 1 pencil to each case so that the division becomes a problem\n    # of dividing pencils into cases such that each case has at least one pencil.\n    total_pencils += pencil_cases\n\n    # Now calculate using combination with repetitions (stars and bars method):\n    # C(n + k - 1, k - 1) where n is the total_pencils and k is the pencil_cases.\n    ways = comb(total_pencils - 1, pencil_cases - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_week = 7\n    total_robots = robots_per_day * days_in_week\n    return total_robots\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "网络故障，请重试"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "网络故障，请重试"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    total_children = 50\n    total_amount = 555\n    price_without_name = 10\n    price_with_name = 15\n\n    # Let's say x children bought shirts with names, then (total_children - x) bought without names\n    # Form the equation: 10 * (total_children - x) + 15 * x = total_amount\n    \n    # We can solve for x:\n    x = (total_amount - (price_without_name * total_children)) / (price_with_name - price_without_name)\n    \n    return int(x)\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the time walked at the initial speed be t minutes\n    t = symbols('t')\n    \n    # Distance walked at the initial speed is 150 * t\n    distance_initial = 150 * t\n    \n    # Time walked at the increased speed is (t - 10) since he starts 10 minutes later\n    # Distance walked at the increased speed is (150 + 50) * (t - 10)\n    distance_increased = (150 + 50) * (t - 10)\n    \n    # Total distance is 3700 metres\n    equation = Eq(distance_initial + distance_increased, 3700)\n    \n    # Solve the equation for t\n    time_walked_initial_speed = solve(equation, t)[0]\n    \n    # Total walking time is time spent walking at initial speed plus 10 minutes\n    total_walking_time = time_walked_initial_speed + 10\n    \n    return total_walking_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of male and female visitors on the first day\n    male, female = symbols('male female')\n\n    # Equation for the first day\n    equation1 = Eq(male, female + 450)\n\n    # Equations for the second day\n    equation2 = Eq(female * 1.15 + male * 0.82, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male, female))\n\n    return solutions[male]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    students = 40\n    position = 1  # initially, the last student will be in position 1 (if we count from the back)\n    \n    while students > 1:\n        # every round, half of the students leave (those who report odd numbers)\n        students //= 2\n        position *= 2  # the position of the last student doubles each time\n\n    # to find out the original position, count from the beginning\n    ans = 2**position // 2\n    return ans\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore is 7 hours ahead of London.\n    # When it's 05:00 in Singapore, it's 22:00 of the previous day in London.\n    singapore_departure_time = 5\n    london_arrival_time = 11\n    \n    # Flight time calculation, considering the day change\n    if london_arrival_time >= singapore_departure_time - 7:\n        flight_duration = (24 - singapore_departure_time) + london_arrival_time\n    else:\n        flight_duration = london_arrival_time - (singapore_departure_time - 7)\n    \n    return flight_duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    ways = factorial(total_cards) // (factorial(4) * factorial(3) * factorial(7))\n    return ways\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5    # smallest multiple of 5\n    second_digit = 1   # smallest odd number among the natural numbers\n    third_digit = 9    # largest single digit odd number\n    fourth_digit = 2   # smallest even number\n    fifth_digit = 8    # largest single digit that is a multiple of 2\n    sixth_digit = 3    # smallest odd number greater than 1\n    seventh_digit = 0  # must be a multiple of 2 and 5, so it is 0\n\n    # Combine digits into phone number\n    phone_number = int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n    return phone_number\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages = 80\n    pages_per_day_increase = 5\n    first_day_pages = 20\n    days = 1\n\n    while total_pages > first_day_pages + pages_per_day_increase * days:\n        total_pages -= first_day_pages + pages_per_day_increase * days\n        days += 1\n\n    return total_pages + days * (first_day_pages + (days - 1) * pages_per_day_increase // 2)\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds = 4/9\n    cashew_nuts = 1/3\n    difference = almonds - cashew_nuts\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    # Johnny's attempted solution\n    quotient = 9\n    remainder = 2\n    multiplier = 4\n\n    # Check Johnny's calculation\n    johnny_answer = (quotient * multiplier) + remainder\n\n    # The correct way to verify Johnny's work is by multiplying the quotient by the divisor and adding the remainder\n    correct_answer = (quotient * multiplier) + remainder\n\n    return correct_answer\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum_positive = sum(range(4, 55, 4))   # Sum of positive terms: 4 + 8 + ... + 52\n    sum_negative = sum(range(2, 51, 4))   # Sum of negative terms: -2 - 6 - ... - 50\n    ans = sum_positive - sum_negative     # Subtract sum of negatives from sum of positives\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We have the following congruences:\n    # x ≡ 3 (mod 6)\n    # x ≡ 4 (mod 7)\n    # x ≡ 1 (mod 8)\n\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    for S in range(1, 10):  # S cannot be 0 as it is the first digit\n        for A in range(10):\n            for M in range(10):\n                for O in range(10):\n                    if len(set([S, A, M, O])) == 4:  # All digits must be different\n                        SASMO = int(f\"{S}{A}{S}{M}{O}\")\n                        OGAMS = int(f\"{O}{G}{A}{M}{S}\")\n                        if SASMO * 4 == OGAMS and SASMO % 10 == S:\n                            return SASMO\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = 40 - boys\n    \n    equation = Eq(4 * boys - 3 * girls, 62)\n    solution = solve(equation, boys)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    sequence = []\n    for i in range(1, 11):\n        sequence.extend([i] * i)\n    median_index = len(sequence) // 2\n    ans = sequence[median_index]\n    return ans\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the part that Noa cuts from both ropes.\n    cut_part = symbols('cut_part')\n\n    # Define the equations based on the problem statement.\n    equation = Eq((65 - cut_part), 3 * (29 - cut_part))\n\n    # Use the solve function to find the value of the cut part.\n    solution = solve(equation, cut_part)\n\n    # Return the solution.\n    return solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n    expected_number_of_5s = total_rolls * probability_of_5\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    numerator = 12\n    denominator_original = 18\n    denominator_new = 6\n\n    # Using the property of equivalence of fractions: a/b = c/d => a*d = b*c\n    ans = (numerator * denominator_new) / denominator_original\n\n    return ans\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    ratio1 = Eq(A/B, 2/3)\n    ratio2 = Eq(B/C, 6/5)\n    average = Eq((A + B + C) / 3, 45)\n    \n    solutions = solve((ratio1, ratio2, average), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    total_spent = 441\n    cost_per_dress = 7  # Let x be the cost of one dress\n    number_of_dresses = 6\n    cost_per_skirt = 35\n    number_of_skirts = 3\n\n    total_dress_cost = number_of_dresses * cost_per_dress\n    total_skirt_cost = number_of_skirts * cost_per_skirt\n\n    # Now we have total_spent = total_dress_cost * x + total_skirt_cost\n    # Solving for x\n    x = (total_spent - total_skirt_cost) / total_dress_cost\n\n    return x\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9\n    odd_digits = 5\n    \n    # For a 3-digit number, each digit location (hundreds, tens, ones) can have one of the 5 odd digits\n    # Since the digits can be reused, there are 5 options for each digit\n    # Using the rule of product (multiplication principle):\n    \n    count = odd_digits * odd_digits * odd_digits\n    \n    return count\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    # Observe the pattern, the sum is always (n-1)/n for n terms\n    # Thus, for 2011 terms the sum should be (2011-1)/2011\n    k = 2011 - 1\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    combined_rate_days = 8\n    energetic_days = 12\n\n    # Energetic painter's rate is 1/12 houses per day\n    energetic_rate = 1 / energetic_days\n\n    # Combined rate of both decorators is 1/8 houses per day\n    combined_rate = 1 / combined_rate_days\n\n    # Lazy painter's rate is the combined rate minus the energetic painter's rate\n    lazy_rate = combined_rate - energetic_rate\n\n    # Lazy painter takes 1 / lazy_rate days to paint the house on his own\n    lazy_days = 1 / lazy_rate\n\n    return lazy_days\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += i**2\n    return remainder_sum % 3\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original length be l and the original width be w\n    # After increasing the length by 12cm, the new length is l + 12\n    # The perimeter of the new rectangle is twice the sum of the new length and the original width\n    # So, 2 * (l + 12 + w) = 38\n    l, w = symbols('l w')\n    \n    equation = Eq(2 * (l + 12 + w), 38)\n    \n    # The perimeter of the original rectangle is twice the sum of the original length and width\n    # So, original_perimeter = 2 * (l + w)\n    # We subtract 24 (which is 2*12) from the new perimeter to get the original perimeter\n    original_perimeter = 38 - 24\n\n    return original_perimeter\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    total_ratio = nell_ratio + joe_ratio\n    nell_sweets = 24\n\n    total_sweets = (nell_sweets * total_ratio) // nell_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    # Let the number of stamps Natasha has be x.\n    # Then the number of stamps Jamie-Anne has is x + 18.\n    # According to the ratio 5:3, we have:\n    # (x + 18) / x = 5 / 3\n    # Cross multiply:\n    # 3(x + 18) = 5x\n    # 3x + 54 = 5x\n    # 54 = 5x - 3x\n    # 54 = 2x\n    # x = 27\n    # Therefore, Natasha has 27 stamps and Jamie-Anne has 27 + 18 = 45 stamps.\n    # Total number of stamps is 27 (Natasha) + 45 (Jamie-Anne)\n    return 27 + 45\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    # Iterate through possible values for a and b to find the solution\n    for a in range(10):\n        for b in range(10):\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sana, mina = symbols('sana mina')\n    \n    # Sana had 8 times as many coins as Mina\n    equation1 = Eq(sana, 8 * mina)\n    \n    # The sum of coins that Sana and Mina had initially\n    equation2 = Eq(sana + mina, 234)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sana, mina))\n    \n    # Mina gives away 12 coins\n    mina_left = solutions[mina] - 12\n    \n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = (3/7) * total_grapes\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = (3/8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    small_bag_weight = 3/4\n    number_of_small_bags = remaining_after_tuesday / small_bag_weight\n    return round(number_of_small_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    num_students = 123\n    total_flour = flour_per_student * num_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    pounds_in_pence = pounds * 100\n    percentage = (pence / pounds_in_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Time taken to cycle from the first to the eleventh lamppost\n    time_for_ten_lampposts = 50\n    # Time taken to cycle past each lamppost\n    time_per_lamppost = time_for_ten_lampposts / 10\n    # Time given to find out the number of lampposts Uncle Sam will cycle past\n    given_time = 80\n    # Number of lampposts he will cycle past in the given time\n    num_lampposts = given_time / time_per_lamppost\n\n    # We add 1 because he starts at the first lamppost\n    return int(num_lampposts) + 1\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Each corner is counted twice in the calculation of 6 flowers per side\n    # Jill needs to subtract the 4 corner flowers because they've been counted twice\n    total_flowers = (6 * 4) - 4\n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n    apples_fraction = 2/3\n    bananas_fraction = 1/9\n    lemons_fraction = 1 - (apples_fraction + bananas_fraction)\n\n    apples = apples_fraction * total_items\n    lemons = lemons_fraction * total_items\n\n    equation = Eq(apples - lemons, 12)\n\n    total_items_solution = solve(equation, total_items)[0]\n    lemons_count = lemons_fraction * total_items_solution\n\n    return lemons_count\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    factors_of_4 = [1, 2, 4]\n    digit_ones = sum(factors_of_4)\n    digit_hundreds = 8\n    digit_thousands = digit_hundreds + 1\n    digit_tens = digit_hundreds - digit_ones\n    digit_ten_thousands = 4\n    \n    ans = (digit_ten_thousands * 10000) + (digit_thousands * 1000) + (digit_hundreds * 100) + (digit_tens * 10) + digit_ones\n    return ans\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    additional_length = 56\n    football_field_length = basketball_court_length + additional_length\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount = (original_price - 67.50) / original_price * 100\n\n    return ana_discount\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    smallest_s = None\n    min_diff = float('inf')\n\n    for s in range(1, 1000):  # arbitrary upper limit to find smallest s\n        for r in range(1, s):\n            frac = r/s\n            if (3/10) < frac < (5/16) and s < min_diff:\n                min_diff = s\n                smallest_s = s\n\n    return smallest_s\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n\n    total_two_days = first_day + second_day\n    total_steering_wheels = total_two_days / (5/6)\n\n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    return 1.3 - 0.02\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Number of seats occupied by 15 children\n    children_seats = 15 * (40 / 40)  # every child takes the place of 1 child\n\n    # Remaining seats for adults can be calculated by converting children seats to adult seats\n    remaining_adult_seats = (40 - children_seats) * (40 / 24)  # every adult takes the place of (40 / 24) children\n\n    # The greatest number of adults is the largest whole number of remaining adult seats\n    max_adults = int(remaining_adult_seats)\n\n    return max_adults\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 28 to get its prime factorization\n    factors = factorint(28)\n    # To make it a perfect square, each prime factor power should be even\n    # Multiply the number by those prime factors which have odd powers\n    product = 1\n    for prime in factors:\n        if factors[prime] % 2 != 0:\n            product *= prime\n    return product\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    pancakes_per_3_min = 2\n    total_minutes = 12\n    pancakes_per_minute = pancakes_per_3_min / 3\n    total_pancakes = pancakes_per_minute * total_minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5 * x - 8)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    number_of_sizes = 3\n\n    # Use the Pigeonhole Principle to determine the minimum number of students\n    # wearing the same size of uniforms\n    min_students_same_size = (total_students // number_of_sizes) + 1\n\n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    def triangle_operation(a, b):\n        return (a + 2) / b\n\n    inner = triangle_operation(6, 4)\n    ans = triangle_operation(8, inner)\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    \n    dvd_player = 740\n    remaining_money_after_dvd = salary - dvd_player\n    television_set = (3/4) * remaining_money_after_dvd\n    remaining_money = salary / 5\n\n    equation = Eq(remaining_money_after_dvd - television_set, remaining_money)\n\n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    russell = symbols('russell')\n\n    equation = Eq(russell + 32, 4 * (russell - 16))\n\n    age = solve(equation, russell)\n\n    return age[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    result = 40 / 100 * 120\n    return result\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    # The position number directly opposite in a circle will be half the number of people playing the game away from any position.\n    # We'll find the difference between positions 6 and 19 and multiply by 2 to find the total number of people.\n    \n    difference = abs(6 - 19)\n    total_people = difference * 2\n    \n    return total_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    # Loop through each possible value for A and B\n    for A in range(10):\n        for B in range(10):\n            # Construct Pip's number and Bud's number\n            pips_number = int(f\"{A}{B}{B}{A}\")\n            buds_number = int(f\"{A}{B}{A}{B}\")\n            # Check if the sum of both numbers is 5510\n            if pips_number + buds_number == 5510:\n                return pips_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Original number of students in class 6A and 6B\n    num_students_6A, num_students_6B = symbols('num_students_6A num_students_6B')\n    \n    # Initial condition (before reshuffling)\n    equation1 = Eq(num_students_6A, 4/9 * num_students_6B)\n    \n    # After reshuffling, the number of students became equal in both classes\n    # 6A loses 3 students and 6B gains 3, while 6B loses 18 students and 6A gains 18\n    equation2 = Eq(num_students_6A - 3 + 18, num_students_6B + 3 - 18)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (num_students_6A, num_students_6B))\n    \n    return solutions[num_students_6A]\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # To cut a metal rod up into two pieces, it requires 1 cut, which takes 2 minutes.\n    # To cut a metal rod up into five pieces, it requires 4 cuts.\n    # Assuming time taken for each cut is the same (as for the first cut),\n    # the total time taken for 4 cuts would be:\n    \n    cuts_needed = 5 - 1\n    time_per_cut = 2\n    \n    total_time = cuts_needed * time_per_cut\n    \n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # Total number of spelling books on the shelves.\n    total_spelling_books = 72\n    # Number of spelling books per shelf.\n    spelling_books_per_shelf = 9\n    # Total number of shelves.\n    total_shelves = 15\n\n    # Calculate the number of shelves filled with spelling books.\n    spelling_shelves = total_spelling_books / spelling_books_per_shelf\n    # Calculate the number of shelves filled with math books.\n    math_shelves = total_shelves - spelling_shelves\n\n    # Since each shelf contains 4 math books, calculate the total number of math books.\n    math_books_per_shelf = 4\n    total_math_books = math_books_per_shelf * math_shelves\n\n    return int(total_math_books)\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    time_to_fourth_floor = 6  # minutes\n    floors_walked = 4 - 1  # from first to fourth floor is 3 intervals\n    \n    # Calculate the time for one floor interval\n    time_per_floor = time_to_fourth_floor / floors_walked\n    \n    # Calculate the time to the tenth floor\n    floors_to_tenth = 10 - 1  # from first to tenth is 9 intervals\n    time_to_tenth_floor = time_per_floor * floors_to_tenth\n    \n    return time_to_tenth_floor\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    # Set up the proportion such that the amount of chocolate (x) is to 40g as 75g of biscuits is to 100g.\n    # This gives us x/40 = 75/100\n    # Solving for x:\n    x = (40 * 75) / 100\n    return x\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    daily_earnings = 90\n    days_in_a_week = 7\n\n    total_weekly_earnings = daily_earnings * days_in_a_week\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pastas = 2\n    sauces = 3\n    toppings = 2\n    \n    combinations = pastas * sauces * toppings\n    \n    return combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    for n in range(1, 33):  # Assuming n is a whole number less than 32 since 32 divided by a number greater than 32 will be less than 1\n        if (32 / n) == (n / 2):\n            return n\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # The 8th student is opposite the 16th student, meaning there are 16-8 = 8 students in between them.\n    # Since they are opposite, the total number of students must be twice the number of students in between plus the two ends,\n    # so initially there were 8 * 2 = 16 students in the circle.\n    \n    initial_students = 16\n    \n    # After new students join, the 8th student is now opposite the 22nd student.\n    # This means there are now 22 - 8 = 14 students in between them, and thus the circle has 14 * 2 + 2 = 30 students.\n\n    new_students = 30\n    \n    # The number of new students is the difference between the new total and the initial number of students.\n    new_students_joined = new_students - initial_students\n\n    return new_students_joined\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    distance_1 = 280\n    distance_2 = 400\n    distance_3 = 800 - distance_1 - distance_2\n    \n    speed_1 = 7\n    speed_2 = 5\n    speed_3 = 8\n    \n    time_1 = distance_1 / speed_1\n    time_2 = distance_2 / speed_2\n    time_3 = distance_3 / speed_3\n    \n    total_time = time_1 + time_2 + time_3\n    \n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a, b, and c be the final number of marbles Anna, Betsy, and Charlene had, respectively.\n    a, b, c = symbols('a b c')\n\n    # Use the ratio given to express a, b, c in terms of a single variable, let's say a\n    # The final ratios give us:\n    # a : b : c = 2 : 5 : 7\n\n    # Since the total is still 168 after the exchanges, and using the ratio we get the equations:\n    eq1 = Eq(a + b + c, 168)\n    eq2 = Eq(5*a, 2*b)  # From the ratio 2:5 (Anna:Betsy)\n    eq3 = Eq(7*a, 2*c)  # From the ratio 2:7 (Anna:Charlene)\n\n    # Betsy received 15 from Charlene and gave away 8 to Anna.\n    # So in the end, Betsy has 15 - 8 = 7 more than she initially had.\n    # Let's use b_initial for the initial number of marbles Betsy had\n\n    # Therefore, we can relate b_initial to b (final amount) with the following\n    b_initial = b - 7  # As b = b_initial + 7\n\n    # Now we solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (a, b, c))\n\n    # Find the initial number of marbles Betsy had\n    b_initial_value = solutions[b] - 7\n\n    return b_initial_value\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - 9*6 - 7*6\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n\n    ways = factorial(total_cards) // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n\n    return ways\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lollipops, gum_drops = symbols('lollipops gum_drops')\n    \n    # Initial ratio equation\n    initial_ratio_eq = Eq(lollipops / gum_drops, 5/7)\n    \n    # Ratio after adding candies\n    new_ratio_eq = Eq((lollipops + 120) / (gum_drops + 120), 4/5)\n    \n    # Solve the equations\n    solutions = solve((initial_ratio_eq, new_ratio_eq), (lollipops, gum_drops))\n    \n    # Total pieces of candy now\n    total_candies = solutions[lollipops] + solutions[gum_drops] + 120 + 120\n    \n    return total_candies\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n    \n    for i in range(1, 269):  # Page numbers start from 1 to 268\n        total_digits += len(str(i))\n    \n    return total_digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    # Calculate the greatest common divisor of the two sides of the rectangle\n    side1 = 136  # Convert meters to centimeters for better precision\n    side2 = 80   # Convert meters to centimeters for better precision\n    square_side = gcd(side1, side2)\n\n    # Calculate the number of squares we can cut\n    num_squares = (side1 // square_side) * (side2 // square_side)\n\n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    # We have three choices (4, 5, 7) for each of the three digits\n    # However, to ensure the number is odd, the last digit must be 5 or 7\n    # Therefore, for the last digit, we only have 2 choices\n\n    choices_for_last_digit = 2  # 5 or 7\n    choices_for_first_digit = 3  # 4, 5, or 7\n    choices_for_middle_digit = 3  # 4, 5, or 7\n\n    count = choices_for_first_digit * choices_for_middle_digit * choices_for_last_digit\n\n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    less_than = 201\n    count_by_5 = (less_than - 1) // 5\n    count_by_7 = (less_than - 1) // 7\n    count_by_5_and_7 = (less_than - 1) // (5 * 7)\n    \n    ans = count_by_5 + count_by_7 - count_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n    chris_spent = Eq(durian + 2 * pineapple + 3 * watermelon, 440)\n    dylan_spent = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    solutions = solve((chris_spent, dylan_spent), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    # Number of matches formula for a league where each team plays each other twice: \n    # n * (n - 1) = Number of matches, where n is the number of teams\n    \n    # We are given that the total number of matches is 30.\n    # Hence, n * (n - 1) = 2 * 30 = 60\n    # We solve the quadratic equation n^2 - n - 60 = 0 to find n.\n    \n    from math import sqrt\n    \n    # Solving using quadratic formula x = [ -b ± sqrt(b^2 - 4ac) ] / 2a\n    a = 1\n    b = -1\n    c = -60\n    \n    # Calculate discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Find two solutions using quadratic formula\n    solution1 = (-b + sqrt(discriminant)) / (2*a)\n    solution2 = (-b - sqrt(discriminant)) / (2*a)\n    \n    # Since the number of teams can't be negative, we take the positive solution\n    ans = int(solution1)\n    \n    return ans\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for x in range(1, 1350):  # The original number has to be between 1 and 1350, because 1350 has a ones digit of 0\n        if x - int(str(x)[:-1]) == 135:  # Check if the number minus the number without its last digit equals 135\n            return x\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n    \n    # Each trip can take 5 students across the river, but one has to return with the boat\n    # So that's effectively 4 students crossing per round trip, except for the last trip.\n    \n    # The last trip does not need anybody to return the boat.\n    # So the total number of trips is calculated by taking one off the total (last trip doesn't require return trip), then dividing by 4 (since 4 effective crossings each round trip), and then rounding up any fractions by adding 1.\n \n    trips_for_crossing = (students - 1) // 4\n    if (students - 1) % 4 != 0:\n        trips_for_crossing += 1\n        \n    # Plus one for the last trip across\n    trips_for_crossing += 1\n    \n    # The total number of trips includes all those trips across the river,\n    # But we also need to count the trips back, which is all trips across minus the final trip\n    total_trips = trips_for_crossing * 2 - 1\n    \n    return total_trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let x be the total number of students involved in the streaming exercise.\n    # A: students that chose Grade A Math (80% of x)\n    # B: students that chose Grade B Math (35% of x)\n    # Neither: students that chose neither A nor B (10% of x)\n    # Both: students that chose both A and B (not directly given, but stated as 75 students)\n    \n    # According to the principle of inclusion-exclusion:\n    # Total students = A + B - Both + Neither\n    # x = 0.8x + 0.35x - 75 + 0.1x\n    # Combine like terms:\n    # x = 1.25x - 75\n    # 0 = 0.25x - 75\n    # 0.25x = 75\n    # x = 75 / 0.25\n    x = 75 / 0.25\n    \n    return int(x)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2\n    hundreds = 3\n\n    ans = hundreds * 100 + tens * 10 + ones\n\n    return ans\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "def solution():\n    from sympy import divisors\n\n    # Factor count dictionary for 1 to 13\n    factor_counts = {number: len(divisors(number)) for number in range(1, 14)}\n\n    # Set of possible numbers based on what the two students with raised hands might have\n    possible_numbers_with_hand_raised = {number for number, count in factor_counts.items() if count not in factor_counts.values()[:number-1]}\n\n    # Remove numbers with unique factor counts from the factor counts dictionary\n    for number in possible_numbers_with_hand_raised:\n        del factor_counts[number]\n    \n    # Assuming one of the two students that raised their hand has the number 1\n    # What Alice, May, and Mark can't have\n    alice_cant_have = possible_numbers_with_hand_raised | {1}\n    mays_cant_have = {1} | {number for number in possible_numbers_with_hand_raised if number < 3}\n    marks_cant_have = {1}\n\n    # Alice knows her number is odd so take all odd numbers from factor_counts without possible numbers\n    alices_possible_numbers = set(number for number in factor_counts if number % 2 != 0 and number not in alice_cant_have)\n    \n    # Among Alice's possible numbers, find those which satisfy the condition for May and Mark\n    for alice_number in alices_possible_numbers:\n        may_number = alice_number - 2\n        mark_number = may_number - 1\n        \n        if may_number in factor_counts and may_number not in mays_cant_have and \\\n           mark_number in factor_counts and mark_number not in marks_cant_have:\n            # These are Alice, May, and Mark's Numbers so remove them from the list\n            remaining_numbers = set(range(1, 14)) - {alice_number, may_number, mark_number} - possible_numbers_with_hand_raised\n            break\n    \n    # Calculate the product of the remaining numbers\n    product = 1\n    for number in remaining_numbers:\n        product *= number\n\n    return product\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "from math import factorial\n\ndef solution():\n    num = factorial(100)\n    denom = factorial(99) + factorial(98)\n    ans = num / denom\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages of Frank, Alex, and Paul\n    frank, alex, paul = symbols('frank alex paul')\n\n    # Frank is older than Alex and Alex is older than Paul\n    # Frank - Alex = Alex - Paul\n    equation1 = Eq(frank - alex, alex - paul)\n    \n    # The sum of their ages is 99\n    # Frank + Alex + Paul = 99\n    equation2 = Eq(frank + alex + paul, 99)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    # Return the age of Alex\n    return solutions[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 4, 6, 9]\n    all_numbers = [int(''.join(map(str, perm))) for perm in permutations(digits)]\n\n    return sum(all_numbers) / len(all_numbers)\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original situation: same number of boys and girls\n    original_condition = Eq(boys, girls)\n\n    # Final situation: 60 boys left, and 12 girls left\n    final_condition = Eq(girls - 12, 2 * (boys - 60))\n\n    # Solve the system of equations\n    solution = solve((original_condition, final_condition), (boys, girls))\n    return solution[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    # The greatest 1-digit number is 9, so the hundred's place is fixed at 9.\n    hundred_digit = 9\n    # Loop through possible digits for tens and ones places.\n    # Since the number is even, the ones place must be an even number (0, 2, 4, 6, 8).\n    for tens_digit in range(1, 10):\n        for ones_digit in [0, 2, 4, 6, 8]: # Keeping the loop to even digits\n            # The digits are different and add up to 15.\n            if tens_digit != ones_digit and tens_digit + ones_digit == 15:\n                # If the conditions satisfy, concatenate the digits to form the 3-digit number.\n                return hundred_digit * 100 + tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    van_speed = 80  # km per hour\n    car_speed = 120  # km per hour\n    time_difference = 3  # hours\n\n    # Distance covered by van in 3 hours\n    van_distance = van_speed * time_difference\n\n    # Relative speed between the van and the car\n    relative_speed = car_speed - van_speed\n\n    # Time taken to catch up\n    catch_up_time = van_distance / relative_speed\n\n    return catch_up_time\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    hats = range(5)  # 4 hats + 1 option not to choose any hat\n    shirts = range(3)  # 3 shirts\n    pants = range(2)  # 2 pairs of pants\n    skirt = range(1)  # 1 skirt (must bring)\n\n    count = len(hats) * len(shirts) * len(pants) * len(skirt)\n    return count\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # Convert repeating decimals to fractions\n    num1 = 1 / 99\n    num2 = 1 / 99\n\n    # In repeating decimals, the product should also be a repeating decimal\n    # Calculate the product as a fraction, since python automatically simplifies it\n    product = num1 * num2\n\n    # Turn the product back into a decimal to find the repetend\n    # The repetend in a product of two numbers with repetends of equal length\n    # is either the same length or double the length.\n    # We check for this by examining the denominator of the product.\n    denominator = product.as_integer_ratio()[1]\n\n    # Find how many 9s there are in the denominator, which corresponds to the repetend length\n    repetend_length = len(str(denominator)) - 2\n\n    return repetend_length\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Printer A's rate per minute\n    rate_A = 300 / 12\n    # Printer B's rate per minute\n    rate_B = 300 / 10\n    \n    # Total rate when both printers are working together\n    total_rate = rate_A + rate_B\n    \n    # Time given is half an hour, which is 30 minutes\n    time = 30\n    \n    # Total pages printed is rate multiplied by time\n    pages_printed = total_rate * time\n    \n    return int(pages_printed)\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of items Rena bought be 'total'\n    total = symbols('total')\n\n    # Two-thirds of the total are apples\n    apples = (2/3) * total\n    # One-ninth of the total are bananas\n    bananas = (1/9) * total\n    # The rest are lemons\n    lemons = total - apples - bananas\n\n    # Rena bought 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    # Solve the equation for the total number of items\n    total_items_solution = solve(equation, total)\n\n    # Calculate the number of lemons from the total number of items\n    num_lemons = total_items_solution[0] - (2/3) * total_items_solution[0] - (1/9) * total_items_solution[0]\n\n    return num_lemons\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime(\"01/01/2019\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"31/12/2019\", \"%d/%m/%Y\")\n    count_3 = 0\n\n    while start_date <= end_date:\n        date_str = start_date.strftime(\"%d/%m/%Y\")\n        count_3 += date_str.count('3')\n        start_date += timedelta(days=1)\n\n    return count_3\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    return 33033\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    # Let the common ratio multiplier be x\n    # Therefore, the number of durian, chocolate, and strawberry puffs sold are 3x, 4x, and 2x respectively.\n    \n    # Price per puff for each type\n    durian_price = 5\n    chocolate_price = 3\n    strawberry_price = 4\n    \n    # Total amount collected\n    total_amount = 560\n    \n    # Equation based on the total amount collected from the sales of puffs\n    # (durian puffs amount) 3x * $5 + (chocolate puffs amount) 4x * $3 + (strawberry puffs amount) 2x * $4 = $560\n    # Solve for x\n    x = (total_amount) / (3*durian_price + 4*chocolate_price + 2*strawberry_price)\n    \n    # Find the amount collected from the sale of durian puffs\n    amount_durian = 3 * x * durian_price\n    \n    return amount_durian\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from itertools import permutations\n\n    levels = list(range(1, 19))  # Levels 1 through 18\n\n    for perm in permutations(levels, 4):\n        A, B, C, D = perm\n        # Conditions based on the problem statement\n        if A > C and A < D:  # Condition (1)\n            # Name assignments\n            for names in permutations(perm, 4):\n                Zachary, Yvonne, Xavier, Waylon = names\n                # Conditions based on the name assignments\n                if B < Xavier and D == 5 * Yvonne and \\\n                        Zachary + 2 - Xavier == Zachary - Waylon and \\\n                        Zachary == Yvonne + Xavier:  # Conditions (2), (3), (4), (5)\n                    return A  # the level at which A stays\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # The cuboid is cut into 7*5*14 = 490 small cubes.\n    # Since the dimensions of the cuboid are in the ratio 7:5:14, \n    # dividing each dimension by the GCD (which is 7) will give the number of small cubes along each edge:\n    # 7/7 = 1, 5/7 = 5/7, 14/7 = 2.\n    # Therefore, the length of each small cube is 1/7 of the smallest dimension of the cuboid.\n    # The small cubes that have exactly three faces painted yellow\n    # are the cubes at the corners of the cuboid.\n    # Since the cuboid has 8 corners, and each corner cube has exactly 3 faces painted,\n    # there are 8 such small cubes.\n    \n    return 8\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(0, 10):\n            original_number = tens * 10 + ones\n            swapped_number = ones * 10 + tens\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    initial_investment = 10000\n    first_interest = 1.191\n    second_interest = 1.166\n\n    final_amount = initial_investment * first_interest * second_interest\n\n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raisin_roll, donut = symbols('raisin_roll donut')\n\n    equation1 = Eq(5*raisin_roll + 6*donut, 14.70)\n    equation2 = Eq(raisin_roll, 3*donut)\n\n    solutions = solve((equation1, equation2), (raisin_roll, donut))\n\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n    \n    students_school_1 = 24\n    students_school_2 = 36\n    students_school_3 = 42\n    \n    # Find the greatest common divisor (GCD) of the three numbers\n    gcd12 = gcd(students_school_1, students_school_2)\n    gcd123 = gcd(gcd12, students_school_3)\n    \n    return gcd123\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # 3 notebooks + 4 pencil cases + 5 erasers = $50\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n    # 1 notebook + 1 pencil case = $6\n    equation2 = Eq(notebook + pencil_case, 6)\n    # 1 pencil case + 1 eraser = $9\n    equation3 = Eq(pencil_case + eraser, 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n    \n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Given S_n = n/2 * (2a + (n - 1)d), where S_n is the sum of the first n terms,\n    # a is the first term, and d is the common difference of the arithmetic sequence.\n    # We have two equations:\n    # S_9 = 9/2 * (2a + (9 - 1)d) = 99\n    # S_27 = 27/2 * (2a + (27 - 1)d) = 540\n\n    # Equation 1: 9a + 36d = 198\n    # Equation 2: 27a + 702d = 2160\n\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    equation1 = Eq(9*a + 36*d, 198)\n    equation2 = Eq(27*a + 702*d, 2160)\n\n    # Solve the above system of equations to find a and d\n    solutions = solve((equation1, equation2), (a, d))\n    \n    # With a and d discovered, find the sum of the first 16 terms\n    # S_16 = 16/2 * (2a + (16 - 1)d)\n    S_16 = 16/2 * (2*solutions[a] + (16 - 1)*solutions[d])\n\n    return S_16\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for units in range(1, 10):\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    # Calculate the total number of terms up to the last number (12 in this case)\n    total_terms = sum(range(1, 13))\n\n    # Since we are looking for the median, we need the middle term(s)\n    # If the number of terms is odd, there is a single middle term\n    # If the number of terms is even, the median is the average of the two middle terms\n    if total_terms % 2 == 1:\n        # Find the middle term index\n        middle_idx = total_terms // 2\n    else:\n        # Find the indices of the two middle terms\n        middle_idx1 = total_terms // 2 - 1\n        middle_idx2 = total_terms // 2\n    \n    # Go through the sequence until we find the median value(s)\n    counter = 0  # Counts the number of terms passed\n    for i in range(1, 13):  # The sequence ends at 12\n        counter += i\n        if total_terms % 2 == 1:\n            # If there's a single middle term, find which number corresponds to it\n            if counter >= middle_idx + 1:\n                return i\n        else:\n            # If there are two middle terms, find the numbers corresponding to them\n            if counter >= middle_idx1 + 1:\n                # If middle terms fall within the same number, return this number\n                if counter - i < middle_idx1 + 1:\n                    return i\n                else:\n                    # If middle terms fall between two numbers, calculate the average\n                    return (i + i - 1) / 2\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 8]\n    all_permutations = permutations(digits)\n    return len(list(all_permutations))\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    total_loafs_needed = 24\n    cups_needed = total_loafs_needed / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    count = 0\n    # Start with 7 and go up to 40\n    for number in range(7, 41):\n        count += len(str(number))\n    return count\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    group_stage_matches = 8 * (4 * (4 - 1) // 2) # Each group with 4 teams, round-robin matches\n    knockout_rounds_matches = 15  # Fixed number of elimination matches for 16 teams (8 for round of 16, 4 quarterfinals, 2 semifinals, 1 third place play-off, and 1 final)\n    \n    total_matches = group_stage_matches + knockout_rounds_matches\n    \n    return total_matches\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    # Calculate the least common multiple (LCM) of the flash rates\n    from math import gcd\n    lcm = (4 * 6) // gcd(4, 6)\n    \n    # There are 60 minutes in an hour\n    # Number of times they flash together per minute is (60 / LCM)\n    flashes_per_minute = 60 // lcm\n    \n    # Including the first and the last time in one hour\n    ans = (flashes_per_minute * 60) + 1\n    \n    return ans\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Triple the number and add 1 to get 22\n    # Let the number be x, then 3x + 1 = 22\n    # Solve for x: x = (22 - 1) / 3\n    x = (22 - 1) / 3\n    return x\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    french_artist_paintings = 40\n    landscapes = int(0.4 * total_paintings)\n    french_artist_landscapes = 25\n\n    still_lifes = total_paintings - landscapes\n    french_artist_still_lifes = french_artist_paintings - french_artist_landscapes\n    \n    non_french_artist_still_lifes = still_lifes - french_artist_still_lifes\n    \n    return non_french_artist_still_lifes\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of the rose drink\n    max_vol_per_glass = total_volume // 9  # Maximum volume per glass\n\n    return max_vol_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    weight1 = 100\n    concentration1 = 0.50\n    \n    weight2 = 400\n    concentration2 = 0.80\n    \n    total_weight = weight1 + weight2\n    total_rice = (weight1 * concentration1) + (weight2 * concentration2)\n    \n    new_concentration = total_rice / total_weight\n\n    return new_concentration\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_min = 300 / 60\n\n    distance = speed_m_per_min * time_min\n\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    ans = 30.03 - 3.3\n    return ans\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    sum_last_5_digits = 0\n    \n    for i in range(1, 2018):\n        num = int(\"2\" * i)\n        sum_last_5_digits = (sum_last_5_digits + num) % 100000\n\n    return sum_last_5_digits\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n    \n    days_final = (horses_initial * days_initial) / horses_final\n    \n    return days_final\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    # Search for all 4-digit numbers\n    for num in range(1000, 10000):\n        # Treat the number as a string to manipulate digits\n        str_num = str(num)\n        # Rearrange the digits by placing the first digit at the end\n        new_str_num = str_num[1:] + str_num[:1]\n        # Get the new number and check if it follows the given condition\n        new_num = int(new_str_num)\n        if new_num - num == 4707:\n            return num    # This is the house number\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Let 'n' be the number of years later needed for their ages to sum up to 48\n    oliver_current_age = 20\n    lin_current_age = 26\n    combined_ages_future = 48\n    \n    # Every year, each person gets 1 year older, so the total increase per year is 2 years (one for each)\n    # We need to find 'n' such that: (oliver_current_age + n) + (lin_current_age + n) = combined_ages_future\n    n = (combined_ages_future - (oliver_current_age + lin_current_age)) // 2\n    \n    return n\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n    return closest_number\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    multiple = 1\n    while True:\n        number = 35 * multiple\n        if str(number)[-2:] == '35' and sum(int(digit) for digit in str(number)) == 35:\n            return number\n        multiple += 1\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    watch = 4 * y\n    handbag = 20\n    each_child = y - 5\n    total_money = 8 * y\n\n    # Money after spending on watch and handbag\n    remaining_money = total_money - watch - handbag\n    \n    # Each child gets (y-5), so for 2 children\n    children_money = 2 * each_child\n\n    # Setting equation equal to the remaining_money\n    equation = Eq(remaining_money, children_money)\n\n    # Solve the equation\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    years = list(range(1901, 2000))\n    leap_years = [year for year in years if (year % 4 == 0)]\n    normal_years = [year for year in years if year not in leap_years]\n    days = len(leap_years) * 366 + len(normal_years) * 365\n    return days + 1  # including 1st January 2000\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    deposit_cycle = 2  # Deposit on the first day of each cycle\n    spend_cycle = 2  # Spend on the second day of each cycle\n    deposit_amount = 10\n    spend_amount = 8\n    cycles_passed = days // deposit_cycle  # Number of complete cycles\n    remaining_days = days % deposit_cycle  # Days after the last complete cycle\n\n    # Calculate the total amount after complete cycles\n    money_after_cycles = initial_amount + (deposit_amount - spend_amount) * cycles_passed\n\n    # Add or subtract money for the days remaining after the last complete cycle\n    # Note that if there's an odd remaining day, it's a deposit day\n    if remaining_days == 1:\n        total_amount = money_after_cycles + deposit_amount\n    else:\n        total_amount = money_after_cycles\n\n    return total_amount\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for i in range(1, 100):  # Numbers less than 100\n        if i % 3 != 0 and i % 7 != 0:  # Cannot be divided exactly by 3 or 7\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    n = 12\n    # The sum of an arithmetic series: n/2 * (first_term + last_term)\n    strikes = n * (1 + n) // 2\n    return strikes\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    number_of_coins = 40 / 10  # total number of ten-pence coins in 40 pence\n    total_weight = weight_per_coin * number_of_coins  # total weight of all coins\n    return total_weight\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    correct = symbols('correct')\n\n    total_questions = 6\n    marks_for_correct = 5\n    marks_deducted_for_wrong = 2\n\n    wrong = total_questions - correct\n    equation = Eq(marks_for_correct * correct - marks_deducted_for_wrong * wrong, 23)\n\n    solutions = solve(equation, correct)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults_to_children = 1 / 4\n    adults = total_people / (1 + ratio_adults_to_children)\n    return int(adults)\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    initial_speed = 10  # in meters per second\n    angle = 37  # in degrees\n    g = 9.81  # acceleration due to gravity in meters per second squared\n    \n    # Convert the angle to radians for calculations\n    angle_rad = math.radians(angle)\n    \n    # Calculate the height raised (h) using the formula: (v^2 * sin^2(angle)) / (2 * g)\n    # Since the ramp is frictionless, all kinetic energy will be converted to potential energy at the highest point.\n    h = (initial_speed ** 2) * (math.sin(angle_rad) ** 2) / (2 * g)\n    \n    # Calculate the distance (d) along the ramp using the formula: (v^2 * sin(2 * angle)) / g \n    # This formula comes from rearranging the range formula of a projectile: R = (v^2 * sin(2 * theta)) / g\n    d = (initial_speed ** 2) * math.sin(2 * angle_rad) / g\n    \n    return h, d\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    start_seat = 3\n\n    last_received_seat = (start_seat + total_candies - 1) % total_children\n    return last_received_seat if last_received_seat != 0 else total_children\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # Let the number of buttons James has be J and Nina has be N.\n    # According to the problem:\n    # J + N = 22 (Total number of buttons)\n    # J + 4 = N - 4 (After Nina gives 4 buttons to James, they have the same number of buttons)\n\n    from sympy import symbols, Eq, solve\n\n    J, N = symbols('J N')\n    equation1 = Eq(J + N, 22)  # Total buttons equation\n    equation2 = Eq(J + 4, N - 4)  # After Nina gives James 4 buttons\n\n    solutions = solve((equation1, equation2), (J, N))\n\n    return solutions[N]\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Maximum balls Sheila could take out without having 2 groups of 4 balls of the same colour:\n    # This would be when she takes out 3 blue balls, 3 orange balls, and 2 yellow balls\n    max_without_two_groups_of_4 = 3 + 3 + 2\n\n    # To ensure she gets 2 groups of 4 balls of the same color, she must take out one more ball\n    balls_to_take_out = max_without_two_groups_of_4 + 1\n    \n    return balls_to_take_out\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    total_players = 64\n    players_in_match = 4\n\n    matches_required = 0\n\n    while total_players > 1:\n        matches_required += total_players // players_in_match\n        total_players = total_players // players_in_match\n\n    return matches_required\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    return sum(numbers)\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for i in range(1000, 10000):\n        str_i = str(i)\n        new_i = int(str_i[1:] + str_i[0])\n        if new_i - i == 4707:\n            return i\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    num_bags_flour = 4\n\n    flour_weight = (total_weight - cheese_weight) / num_bags_flour\n\n    return flour_weight\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assume the exchange rate is missing in the question and should be provided.\n    # The variable exchange_rate should represent how many pounds one would get for one ruble.\n    # Hence, the number of CDs Richard can buy in St Petersburg is the total amount of money he has divided by the cost of one CD.\n    # Since the exchange rate is missing, we will use a placeholder variable 'exchange_rate'.\n    \n    exchange_rate = 1  # Placeholder for the actual exchange rate, should be replaced with the actual rate\n    amount_in_rubles = 14  # The amount Richard spent in pounds\n    cost_of_cd_in_rubles = exchange_rate * amount_in_rubles\n    \n    # Number of CDs he could buy in St Petersburg with the same amount of money.\n    num_cds = amount_in_rubles // cost_of_cd_in_rubles\n    \n    return int(num_cds)\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "from sympy import isprime\n\ndef solution():\n    # Iterate through the possible answers.\n    ages = [28, 39, 52, 84]\n    for age in ages:\n        # If 3 years ago the age was a square number\n        if (age - 3)**0.5 % 1 == 0:\n            # If next year the age will be a prime number\n            if isprime(age + 1):\n                # If in 12 years the age will be a cube number\n                if round((age + 12)**(1/3))**3 == age + 12:\n                    return age\n                \nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    ans = 168 * 91\n    return ans\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Bart needs to take 1 chip of each color to ensure he has 2 different colors.\n    # Worst case scenario:\n    # 1. Bart takes all 3 red chips.\n    # 2. Then, Bart takes all 4 yellow chips. \n    # After these steps, the next chip he takes must be brown, achieving his goal.\n\n    # Total chips taken = red + yellow + 1 (next chip should be brown)\n    chips_to_take = 3 + 4 + 1\n    return chips_to_take\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Andrew to Bernice ratio when Andrew is at level 5\n    andrew_bernice_ratio = 5 / 3\n    \n    # Bernice to Cassandra ratio when Bernice is at level 6\n    bernice_cassandra_ratio = 6 / 10\n    \n    # Combining both ratios to get the Andrew to Cassandra ratio\n    andrew_cassandra_ratio = andrew_bernice_ratio * bernice_cassandra_ratio\n    # This gives us Andrew's level when Cassandra is at level 19\n    andrew_level_at_cassandra_19 = andrew_cassandra_ratio * 19\n    \n    return int(andrew_level_at_cassandra_19)\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_op(a, b):\n        return a * b + a + b\n\n    for x in range(100):  # Range is arbitrary, just needs to be large enough to include potential 'x' values\n        if new_op(2, new_op(x, 4)) == 59:\n            return x\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    repeat_length = len(pattern)\n    total_digits = 43\n\n    # Calculate how many complete repetitions of the pattern fit into 43 digits\n    complete_repetitions = total_digits // repeat_length\n\n    # Calculate the remaining digits after the complete repetitions\n    remaining_digits = total_digits % repeat_length\n\n    # Calculate the sum of the digits in the pattern\n    sum_of_pattern = sum(int(digit) for digit in pattern)\n\n    # Calculate the total sum of the complete repetitions\n    total_sum = complete_repetitions * sum_of_pattern\n\n    # Add the sum of the remaining digits to the total sum\n    for i in range(remaining_digits):\n        total_sum += int(pattern[i])\n\n    return total_sum\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # sum of the first n terms of an arithmetic sequence is given by: S_n = n/2 * (2a + (n - 1)d)\n    # where a is the first term and d is the common difference\n\n    # S_9 = 72  => 9/2 * (2a + 8d) = 72\n    # S_23 = 736 => 23/2 * (2a + 22d) = 736\n\n    # We have two equations and two unknowns (a and d)\n\n    # Solving the system using the formula for the sum of an arithmetic sequence\n    # Dividing both sides of the equations by the number of terms to get an equation for a term involving a and d\n    # 72 / 9 = 1/2 * (2a + 8d) => 16 = 2a + 8d => a + 4d = 8  (equation 1)\n    # 736 / 23 = 1/2 * (2a + 22d) => 32 = 2a + 22d => a + 11d = 16 (equation 2)\n\n    # Subtract equation 1 from equation 2 to find d\n    # (a + 11d) - (a + 4d) = 16 - 8\n    # a + 11d - a - 4d = 8\n    # 7d = 8\n    # d = 8 / 7\n\n    d = 8 / 7\n\n    # Plug the value of d back into equation 1 to find a\n    # a + 4 * (8 / 7) = 8\n    # a + 32 / 7 = 8\n    # a = 8 - 32 / 7\n    # a = 56 / 7 - 32 / 7\n    # a = 24 / 7\n\n    a = 24 / 7\n\n    # Now we want to find the sum of the first 16 terms\n    # S_16 = 16/2 * (2a + (16 - 1)d)\n    # S_16 = 8 * (2 * 24/7 + 15 * 8/7)\n    # S_16 = 8 * (48/7 + 120/7)\n    # S_16 = 8 * 168/7\n    # S_16 = 8 * 24\n    # S_16 = 192\n\n    S_16 = 8 * (2 * a + 15 * d)\n\n    return int(S_16)\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz_minutes = 30\n    quizzes = 4\n    total_time_minutes = time_per_quiz_minutes * quizzes\n    total_time_hours = total_time_minutes / 60\n    return total_time_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometres = 4.7\n    centimetres = kilometres * 100000  # 1 kilometre = 100000 centimetres\n    return centimetres\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Speed of Shafur and Samuel\n    speed_shafur = 54  # in km/h\n    speed_samuel = 66  # in km/h\n\n    # Time both Shafur and Samuel travelled before Samuel turned back\n    time_initial = 40 / 60  # 40 minutes in hours\n\n    # Distance Samuel travelled more than Shafur before turning back\n    distance_extra = speed_samuel * time_initial - speed_shafur * time_initial\n\n    # Time it takes for Shafur to cover the extra distance at his speed\n    time_shafur_extra = distance_extra / speed_shafur\n\n    # Total time Shafur travelled\n    time_shafur_total = time_initial + time_shafur_extra\n\n    # Distance between Town X and Town Y\n    distance_X_Y = speed_shafur * time_shafur_total\n\n    return distance_X_Y\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_current_age = 61\n    grandsons_ages = [4, 7, 12]\n    years = 0\n    \n    while sum(grandsons_ages) != grandpa_current_age:\n        years += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        grandpa_current_age += 1\n    \n    return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the costs of each table and chair\n    cost_table, cost_chair = symbols('cost_table cost_chair')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(4 * cost_table + 9 * cost_chair, 504)  # Total cost of tables and chairs is $504\n    equation2 = Eq(cost_table, 3 * cost_chair)  # Each table costs as much as 3 chairs\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_table, cost_chair))\n\n    # Extract the cost of each chair\n    return solutions[cost_chair]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for num_5p in range(0, 41, 5):  # Iterate through possible multiples of 5p up to 40\n        for num_10p in range(0, 41, 10):  # Iterate through possible multiples of 10p up to 40\n            if num_5p + num_10p == 40:    # Check if the current combination of 5p's and 10p's adds up to 40p\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    term = first_term\n    num_terms = 0\n\n    while term > 0:\n        num_terms += 1\n        term += difference\n\n    return num_terms\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for num in range(100, 1000):\n        product = 1\n        for digit in str(num):\n            product *= int(digit)\n        if 100 <= product <= 999:\n            return num\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    capacity = 9\n    vases_needed = -(-flowers // capacity)  # Ceiling division to cover all flowers\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "from sympy import Rational, sqrt, Pow\n\ndef solution():\n    # Expression 1\n    expr1_numerator = 7 / Rational(-10, 3)\n    expr1_denominator = sqrt(-Rational(27, 1000), 3)\n    expr1 = expr1_numerator / expr1_denominator\n\n    # Expression 2\n    expr2_numerator = Pow(2, 3) / Pow(4, 2)\n    expr2_denominator = Rational(1, 8) * (Rational(18, 10) - (Rational(2, 10) * 7))\n    expr2 = expr2_numerator / expr2_denominator\n\n    # Expression 3\n    expr3_part1 = Rational(1, 10) / Rational(1, 7)\n    expr3_part2 = 2 * Rational(3, 10)\n    expr3 = expr3_part1 + expr3_part2\n\n    # Final answer\n    ans = expr1 + expr2 - expr3\n\n    return ans\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 + 2) // 3 * 3  # first multiple of 3 after 38\n    last_multiple = 81 // 3 * 3  # last multiple of 3 before 81\n\n    num_multiples = (last_multiple - first_multiple) // 3 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    ans = lcm(12, 15)\n    return ans\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Calculate the sum of the increasing sequence from 3 to 10 (exclusive)\n    # and the sum of the decreasing sequence from 10 to 3 (exclusive).\n    # Then, add the value of the peak of the pyramid, which is 10, once.\n    increasing_sum = sum(range(3, 10))\n    decreasing_sum = sum(range(10, 3, -1))\n    peak_value = 10\n    total_sum = increasing_sum + decreasing_sum + peak_value\n\n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Pip has £50 more than Bud\n    equation1 = Eq(pip - bud, 50)\n\n    # Pip has spent 80% of his pocket money\n    pip_left = pip - 0.8 * pip\n\n    # Bud has spent 3/4 of her pocket money\n    bud_left = bud - 3/4 * bud\n\n    # The ratio of Pip's leftover pocket money to that of Bud is 6:5\n    equation2 = Eq(6/5, pip_left / bud_left)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_phones = 78\n    february_sales = 13\n    january_sales = 22\n\n    # Number of phones remaining after February sales\n    phones_after_february = remaining_phones + february_sales\n\n    # Total phones before February sales (twice the number after February sales)\n    initial_phones_after_january = phones_after_february * 2\n\n    # Total phones initially (twice the number after January sales plus January sales)\n    initial_phones = (initial_phones_after_january + january_sales) * 2\n\n    return initial_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    # Find the base number\n    base = (18 * 7) / 3\n    # Calculate 5/6 of the base number\n    ans = (base * 5) / 6\n    return ans\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    # There are 5 people in a knockout tournament.\n    # In each round, half of the participants (rounded up) are eliminated.\n    # Thus, 4 games need to be played to determine the winner:\n    # 1st round: 5 players, 2 games (3 players left)\n    # 2nd round: 3 players, 1 game (winner of this game, and last round's winner who had a bye, are left)\n    # Final Round: 2 players, 1 game\n    # Total games = 2 (1st round) + 1 (2nd round) + 1 (final)\n    num_games = 2 + 1 + 1\n    return num_games\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    difference = 50\n\n    pencils = (total_items - difference) / 2\n    return int(pencils)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    jan_to_apr = 500 * 4\n    may_to_jul = 300 * 3\n    aug_to_sep = 400\n    oct_to_dec = 300 * 3\n\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    avg_per_month = total_spent / 12\n\n    return avg_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    apples_from_bud = 16\n    \n    total_apples = (boxes * apples_per_box) + apples_from_bud\n    \n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_required = 4 * 70  # 4 red packets with $70 each\n    shortfall = 15\n    initial_amount = total_required - shortfall\n    return initial_amount\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for number in range(4, 52):\n        count += str(number).count('3')\n        if number == 23:\n            return count\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # There are 5 people in a one-on-one knockout tournament\n    # In a knockout tournament, each game eliminates one player\n    # Therefore, to decide one winner from 5 players, we will need 4 games\n    # Game 1: Reduces 5 players to 4\n    # Game 2: Reduces 4 players to 3\n    # Game 3: Reduces 3 players to 2\n    # Game 4: Reduces 2 players to 1 (the winner)\n    ans = 5 - 1\n    return ans\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    ans = 19 + 6 + 12 + 13 + 21 + 4 + 8 + 17\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    return 8 + 10 - 1\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Chris's position from the front and back gives the total number of rows\n    rows = 7 + 4 - 1\n    # Chris's position from the left and right gives the total number of columns\n    cols = 3 + 7 - 1\n    # Total number of students is the number of rows times the number of columns\n    total_students = rows * cols\n\n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # 4 years ago, the combined age of the two dogs\n    combined_age_4_years_ago = 10\n    \n    # Each year, the combined age would increase by 2 (since there are 2 dogs)\n    # So in 4 years, the combined age will have increased by 4 * 2\n    increase_in_4_years = 4 * 2\n    \n    # The combined age at present\n    present_combined_age = combined_age_4_years_ago + increase_in_4_years\n    \n    # In 2 more years, the combined age will have increased by 2 * 2\n    increase_in_2_more_years = 2 * 2\n    \n    # The combined age in 2 years\n    combined_age_in_2_years = present_combined_age + increase_in_2_more_years\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    result = 3.5 * (4/5) + 5.5 * 0.8 + 0.8\n    return result\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_pence_coins = symbols('ten_pence_coins')\n\n    twenty_pence_coins = 2 * ten_pence_coins\n    five_pence_coins = ten_pence_coins / 2\n\n    total_amount = 5 * five_pence_coins + 10 * ten_pence_coins + 20 * twenty_pence_coins\n    \n    equation = Eq(total_amount, 1575)  # The amount needs to be in pence\n\n    solutions = solve(equation, ten_pence_coins)\n\n    twenty_pence_count = 2 * solutions[0]\n\n    return twenty_pence_count\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define symbols for number of marbles for each girl initially\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Eq1: Total number of marbles initially\n    eq1 = anna + betsy + charlene - 168\n\n    # Transactions\n    betsy += 15  # Charlano gives 15 marbles to Betsy\n    anna += 8    # Betsy gives 8 marbles to Anna\n    betsy -= 8\n\n    # Eq2: Ratio of final number of marbles\n    eq2 = 2 * (betsy + 8) - anna\n    eq3 = 5 * (betsy + 8) - betsy\n    eq4 = 7 * (betsy + 8) - charlene\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (anna, betsy, charlene))\n\n    return solutions[betsy] - 15  # subtract the 15 marbles received to find initial count\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    twelfth_term = 140\n    n = 12\n\n    common_difference = (twelfth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys - 1)\n    equation2 = Eq(girls / 2, boys - girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "from sympy import divisors\n\ndef solution():\n    # Prime factorization of 2016\n    # 2016 = 2^5 * 3^2 * 7\n    # Possible divisors under 10: 1, 2, 3, 4, 6, 7, 8\n    possible_divisors = [d for d in divisors(2016) if d < 10]\n\n    # Function to find all possible combinations of divisors that multiply to 2016\n    def find_combinations(idx, product, ages):\n        if product == 1 and len(ages) == 4: \n            return [ages]\n        elif len(ages) == 4 or idx >= len(possible_divisors):\n            return []\n        \n        combinations = []\n        divisor = possible_divisors[idx]\n\n        # Including the current divisor\n        if product % divisor == 0:\n            combinations += find_combinations(idx + 1, product // divisor, ages + [divisor])\n        # Excluding the current divisor\n        combinations += find_combinations(idx + 1, product, ages)\n        \n        return combinations\n    \n    # Find all the unique combinations where the product of ages is 2016\n    age_combinations = find_combinations(0, 2016, [])\n    \n    # Sum the ages of each combination and return the unique sums\n    sums_of_ages = {sum(combination) for combination in age_combinations}\n    \n    # Since we know there's a unique answer, return the only sum we get\n    return sums_of_ages.pop()\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    part_remaining = 1 - (3/5)\n    remaining_grams = 60\n    original_mass = remaining_grams / part_remaining\n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration_days = 3 * 7  # 3 weeks, 7 days each\n    end_date = start_date + timedelta(days=duration_days)\n    return end_date.date().strftime(\"%Y-%m-%d\")\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n    \n    while base_10_number > 0:\n        digit = base_10_number % 6\n        base_6_number = str(digit) + base_6_number\n        base_10_number //= 6\n        \n    return base_6_number\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # Since speed = distance/time, and time in hours for 30 minutes is 0.5 hours, we can set up the equations based on the distances covered in each 30-minute interval.\n    # distance = speed * time\n    # For the first 30 minutes: distance = x * 0.5 miles\n    # For the second 30 minutes: distance = (x-20) * 0.5 miles\n    # For the last 30 minutes: distance = (x+10) * 0.5 miles\n    # The total distance is the sum of these, which is 70 miles.\n    \n    equation = Eq(x * 0.5 + (x - 20) * 0.5 + (x + 10) * 0.5, 70)\n\n    # Now we solve for x using sympy's solve function\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    total_cost = total_cost_per_person * number_of_people\n    tip_percent = 10\n    tip_amount = total_cost * (tip_percent / 100)\n    total_payment_with_tip = total_cost + tip_amount\n    paid_amount = 50\n    change = paid_amount - total_payment_with_tip\n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    depth = 10\n    climb = 4\n    slide = 2\n    day = 0\n    current_depth = 0\n\n    while current_depth < depth:\n        day += 1\n        current_depth += climb\n        if current_depth >= depth:\n            break\n        current_depth -= slide\n    \n    return day\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    s = 0\n    n = 1\n    while True:\n        s += 5 * n\n        if s % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    ans = (6 / 7) * 42\n    return ans\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    apples = 27\n    children = 5\n    min_apples_for_child = 1\n\n    # Initialize distribution with 1 each for the first 4 children\n    distribution = [min_apples_for_child] * (children - 1)\n    \n    # Remaining apples\n    remaining_apples = apples - sum(distribution)\n    \n    # Sort so the array is in ascending order\n    distribution.sort()\n    \n    # One by one increment the counts from the beginning until they are unique\n    while len(set(distribution)) < len(distribution):\n        for i in range(len(distribution) - 1):\n            distribution[i] += 1\n            remaining_apples -= 1\n            if len(set(distribution)) == len(distribution):\n                break\n    \n    # The least possible number for the kid with most apples\n    min_most_apples = remaining_apples\n\n    return min_most_apples\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    return 953 + 1065\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # Since there are three bars, and the alcoholic is not in two of them,\n    # there is 100% chance they're in the third bar.\n    probability = 1\n    \n    return probability\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    original_number = (18 * 7) / 3\n    required_fraction = (original_number * 5) / 6\n    \n    return required_fraction\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # If Jason wants to win, he has to leave Belinda in a situation where she will have to pick the last marble.\n    # In order to ensure Jason's victory, he should always aim to leave a multiple of 4 marbles for Belinda, \n    # because whatever Belinda does (picking 1, 2 or 3 marbles), Jason can pick 3, 2 or 1 marbles respectively\n    # to still leave a multiple of 4 for Belinda's next turn.\n    \n    # To get to the nearest lower multiple of 4 (which is 24), Jason needs to pick:\n    marbles_to_take = 26 % 4\n    \n    # If the number of marbles Jason should take is 0 (since 26 is already a multiple of 4),\n    # Jason can take any number because he is guaranteed to win by following the strategy above.\n    # However, since he needs to take at least 1 marble, he can pick 1.\n    if marbles_to_take == 0:\n        marbles_to_take = 1\n\n    return marbles_to_take\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    volunteer, tree = symbols('volunteer tree')\n    \n    # If each volunteer plants 4 trees, 5 trees will be left.\n    equation1 = Eq(volunteer * 4 + 5, tree)\n    \n    # If each volunteer plants 7 trees, one volunteer will have nothing to plant.\n    equation2 = Eq((volunteer - 1) * 7, tree)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (volunteer, tree))\n\n    return solutions\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "def solution():\n    partitions = []\n    for x1 in range(1, 25):\n        for x2 in range(1, 25):\n            if x2 == x1:\n                continue\n            for x3 in range(1, 25):\n                if x3 in (x1, x2):\n                    continue\n                for x4 in range(1, 25):\n                    if x4 in (x1, x2, x3):\n                        continue\n                    for x5 in range(1, 25):\n                        if x5 in (x1, x2, x3, x4):\n                            continue\n                        for x6 in range(1, 25):\n                            if x6 in (x1, x2, x3, x4, x5):\n                                continue\n                            for x7 in range(1, 25):\n                                if x7 in (x1, x2, x3, x4, x5, x6):\n                                    continue\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 25:\n                                    sorted_partition = sorted([x1, x2, x3, x4, x5, x6, x7])\n                                    if sorted_partition not in partitions:\n                                        partitions.append(sorted_partition)\n    return partitions\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    for girls_per_side in range(1, 100):  # Arbitrary upper limit\n        boys_per_side = girls_per_side + 2  # Boys wrap around the girls, so there's a difference of 2\n        \n        total_girls = (girls_per_side ** 2) - ((girls_per_side - 2) ** 2) if girls_per_side > 1 else 1\n        total_boys = (boys_per_side ** 2) - (girls_per_side ** 2)\n        \n        if total_boys - total_girls == 55:\n            total_students = total_girls + total_boys\n            return total_students\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let G represent the growth of grass per week.\n    # Let C represent the number of cows that can be sustained for 6 weeks.\n\n    G, C = symbols('G C')\n\n    # 120 cows eat up the grass in 12 weeks.\n    # So, the total amount of grass consumed by 120 cows in 12 weeks is equal to the initial grass plus 12 * growth rate.\n    equation1 = Eq(120 * 12, G * 12 + 120 * 6)\n\n    # 150 cows eat up the grass in 8 weeks.\n    # So, the total amount of grass consumed by 150 cows in 8 weeks is equal to the initial grass plus 8 * growth rate.\n    equation2 = Eq(150 * 8, G * 8 + 150 * 6)\n\n     # C cows can eat up the grass in 6 weeks.\n    # So, C * 6 is the total amount of grass needed for C cows in 6 weeks which should be equal to the initial grass plus 6 * growth rate.\n    equation3 = Eq(C * 6, G * 6 + C * 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (G, C))\n    \n    return solutions[C]\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    missing_number = symbols('missing_number')\n    equation = Eq(10 / missing_number, 14 / 21)\n\n    solution = solve(equation, missing_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    # The sequence is an arithmetic sequence where each term increases by 6.\n    first_term = 5\n    difference = 6\n    # Count the number of terms from the first term (5) to the last given term (41)\n    num_terms_given = (41 - first_term) // difference + 1\n    # Calculate the next term by adding the difference to the last given term\n    next_term = first_term + difference * num_terms_given\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets = -(-children // bars_per_packet)  # ceiling division\n\n    return packets\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 5 / 100 * 180\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(number):\n        return sum([i for i in range(1, number) if number % i == 0])\n\n    n = 2  # The smallest possible perfect number is 2\n    while True:\n        if sum_of_factors(n) == n:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    total = 0\n    for i in range(15, 7, -2):\n        total += (i - (i - 2))\n    return total\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    term_number = 10\n    last_term_value = 31\n    term_difference = 28 - 25\n\n    first_term_value = last_term_value - (term_number - 1) * term_difference\n\n    return first_term_value\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial number of stickers in Bag A\n    # Let y be the initial number of stickers in Bag B\n    # x + y = 270  (total number of stickers)\n    # (y + 56) / (x - 56) = 3/2  (ratio after moving stickers)\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 270)\n    equation2 = Eq((y + 56) / (x - 56), 3/2)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    num_boxes = -(-total_cakes // cakes_per_box)  # Ceiling division to round up to the nearest whole box\n\n    return num_boxes\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_for_friends = (total_sweets - sweets_for_sister) // number_of_friends\n\n    return sweets_for_friends\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for muffins that Lovelle and Makayla initially have\n    lovelle_muffins, makayla_muffins = symbols('lovelle_muffins makayla_muffins')\n    \n    # Equation 1: Total muffins they had initially\n    eq1 = Eq(lovelle_muffins + makayla_muffins, 3998)\n    # Equation 2: Muffins left after selling\n    eq2 = Eq(lovelle_muffins - 462, makayla_muffins - (2/5) * makayla_muffins)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2), (lovelle_muffins, makayla_muffins))\n    \n    return solutions[lovelle_muffins]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money = symbols('original_money')\n\n    equation = Eq((1/4 + 2/7) * original_money, 225)\n\n    solutions = solve(equation, original_money)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    sum_of_integers = 30\n    # Using the fact that the maximum number of positive integers summing up to 30\n    # would be if we use all 1's, which gives us exactly 30 integers.\n    ans = sum_of_integers\n    \n    return ans\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # The worst scenario to get 10 cards of the same color is to pick 9 cards of each of the other three colors\n    # since we want at least one color to have 10 cards\n    # That is 9 (blue cards) + 9 (green cards) + 9 (yellow cards) and then anything we pick next\n    # has to be of the same color as one we have picked 9 of, because we only have 4 colors\n    \n    # According to the Pigeonhole principle, at least this many cards must be chosen\n    # to guarantee 10 cards of one color.\n    num_cards = (9 * 3) + 1\n\n    return num_cards\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    gap_between_daffodils = 1.1\n    number_of_daffodils = 8\n    number_of_gaps = number_of_daffodils - 1  # since there's a daffodil at each end\n\n    length_of_row = number_of_gaps * gap_between_daffodils\n\n    return length_of_row\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n    \n    length_per_piece = total_length / pieces\n    \n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n\n    total_books = boxes * books_per_box\n\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1+1, 9):  # Ensure x2 is greater than x1 for distinct numbers\n            x3 = 9 - x1 - x2\n            if x1 < x2 < x3:  # Ensure x3 is greater than x2 for distinct numbers\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    fraction_jane = 1 / (1 + 1.5)\n    alex_drinks = total_juice * (1 - fraction_jane)\n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n    time = distance / speed\n    time = time if time == int(time) else int(time) + 1  # Ensure time is rounded up to the next integer\n    return time\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_boys = 7\n    total_girls = 5\n    group_size = 4\n    \n    # All combinations without restriction\n    total_combinations = comb(total_boys + total_girls, group_size)\n\n    # Combinations with girls only\n    girls_only_combinations = comb(total_girls, group_size)\n\n    # Final answer: All combinations minus combinations with girls only\n    ans = total_combinations - girls_only_combinations\n    return ans\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    number_to_find = (1/2) * (4/1) * 16\n    return number_to_find\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_fruits = 18 + 30  # pears + strawberries\n    friends_count = 6\n    fruits_per_friend = total_fruits // friends_count\n    \n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Cost of bag\n    bag_cost = 60\n    # Money spent on bag is 2/5 of the remaining money after buying the book\n    remaining_after_book = bag_cost * (5/2)\n    # Total money after spending on the book is 3/4 of the original money (1 - 1/4)\n    original_money = remaining_after_book / (3/4)\n    return original_money\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    total_digits = 157\n    digits_per_page = 1\n    current_pages = 9\n    pages_counted = 0\n\n    while total_digits > current_pages * digits_per_page:\n        total_digits -= current_pages * digits_per_page\n        pages_counted += current_pages\n        digits_per_page += 1\n        current_pages *= 10\n\n    pages_counted += total_digits // digits_per_page\n\n    return pages_counted\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for number in range(201, 242, 2):  # Iterating through odd numbers only\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(10):\n            total_price = int(str(i) + \"679\" + str(j))\n            if total_price % 72 == 0:\n                unit_price = total_price // 72\n                return unit_price\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # The length of the train in meters\n    train_speed = 40    # The speed of the train in meters per second\n\n    # The time it takes for the train to pass the pole can be found by\n    # dividing the length of the train by its speed.\n    time_to_pass = train_length / train_speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for number in range(10, 100):  # 2-digit numbers start from 10 to 99\n        if sum(map(int, str(number))) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_savings = 24\n    spent_on_dvd = total_savings / 3\n    remaining_after_dvd = total_savings - spent_on_dvd\n    spent_on_book = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - spent_on_book\n\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    \n    for year in range(years):\n        initial_rabbits *= 3  # Rabbits give birth to 3 times as many rabbits as last year\n        initial_rabbits //= 2  # Wolves eat half the total population of rabbits\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in class B.\n    x = symbols('x')\n\n    # Since class A has twice as many students as class B,\n    # class A has 2x students.\n\n    # If each student in class A gets 4 candies, 20 more candies are needed.\n    # Total candies for class A = 4 * (2x) + 20\n\n    # If each student in class B gets 6 candies, there will be 16 candies left.\n    # Total candies for class B = 6 * x - 16\n\n    # The total amount of candies is the same for both cases.\n    equation = Eq(4 * (2 * x) + 20, 6 * x - 16)\n\n    # Solve the equation for x.\n    num_students_class_B = solve(equation, x)[0]\n\n    # Now we can find the total amount of candies.\n    # Total candies = 4 * (2 * num_students_class_B) + 20\n    total_candies = 4 * (2 * num_students_class_B) + 20\n\n    return total_candies\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    # Calculate the time taken for each mile\n    time_for_first_mile = 1 / 60  # hours\n    time_for_second_mile = 1 / 30  # hours\n    \n    # Total time taken for both miles\n    total_time = time_for_first_mile + time_for_second_mile\n    \n    # Total distance covered\n    total_distance = 2  # miles\n    \n    # Average speed is total distance divided by total time\n    average_speed = total_distance / total_time  # miles per hour\n    \n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    total_amount_required = 12\n    num_washes = total_amount_required // amount_per_wash + 1\n    return int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    initial_candies = 2\n    days_elapsed = 4 - 1 # because she starts counting from the first day\n\n    candies_eaten_on_fourth_day = initial_candies * (2 ** days_elapsed)\n\n    return candies_eaten_on_fourth_day\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n', integer=True)\n    equation1 = Eq((290 - a) % n, 0)\n    equation2 = Eq((235 - (a + 2)) % n, 0)\n    equation3 = Eq((200 - (a + 5)) % n, 0)\n\n    solutions = solve((equation1, equation2, equation3), (a, n))\n\n    for _, number in solutions:\n        if number > 1:\n            return number\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_earnings_per_day = 70\n    number_of_working_days = 6\n\n    total_earnings = average_earnings_per_day * number_of_working_days\n    \n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angle_small, angle_large = symbols('angle_small angle_large')\n\n    equation1 = Eq(angle_large, 2 * angle_small)\n    equation2 = Eq(angle_small + angle_large + 90, 180)\n\n    solutions = solve((equation1, equation2), (angle_small, angle_large))\n\n    return solutions[angle_large]\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "from itertools import permutations\n\ndef solution():\n    for p, i, s in permutations(range(10), 3):\n        if p == 0 or i == 0 or s == 0:  # Skip if any digit is zero\n            continue\n        pi = p * 10 + i\n        is_ = i * 10 + s\n        if 4 * is_ == pi:\n            return pi\n    return None\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_elderly = 9\n    total_sum = 765\n    # Formula for the sum of an arithmetic sequence: n/2 * (a1 + an)\n    # We know the sum of ages: 765 and the number of terms is 9.\n    # We need to find the middle term of the sequence - which is mean of sequence when n is odd.\n    \n    # a1 is the first term (age of the youngest), and an is the last term (age of the oldest).\n    # We can use the formula to express the sum in terms of a1: total_sum = n/2 * (2*a1 + (n - 1)*d)\n    # We know d = 1 because ages are consecutive integers.\n    # Now we solve for a1: 765 = 9/2 * (2*a1 + 8*1)\n    # a1 = (total_sum / (n/2) - (n - 1)*d) / 2\n    \n    # Finding the first term (youngest age)\n    a1 = (total_sum / (total_elderly/2) - (total_elderly - 1)) / 2\n\n    # Finding the middle term, which is (n+1)/2 th term (middle age)\n    middle_term_index = (total_elderly + 1) // 2\n    middle_age = a1 + (middle_term_index - 1)\n\n    return int(middle_age)\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n    \n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + earring, 438)\n    \n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Total distance between the first and the last peach tree\n    total_distance = 3 * (41 - 1)\n    \n    # Calculate number of lamp posts, including both ends of the stretch of road\n    num_lamp_posts = (total_distance // 8) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    total_sunshine_six_days = 3 * 6\n    sunday_sunshine = 10\n    total_sunshine_week = total_sunshine_six_days + sunday_sunshine\n    average_sunshine_week = total_sunshine_week / 7\n    return average_sunshine_week\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed\n\n    walking_time = 24  # min for the whole journey\n    total_distance = walking_speed * walking_time\n\n    half_distance = total_distance / 2\n\n    walking_half_time = half_distance / walking_speed\n    running_half_time = half_distance / running_speed\n\n    total_time = walking_half_time + running_half_time\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    # There are 79 trees, which create 80 intervals (since there are no trees at both ends)\n    intervals = 79 + 1  # This includes the intervals at the beginning and at the end of the road\n    \n    # The road is 320 m long\n    road_length = 320\n    \n    # The distance between each tree is the length of the road divided by the number of intervals\n    distance_between_trees = road_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_saw_movie = boys * 0.50\n    girls_saw_movie = girls * 0.60\n\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n\n    return int(total_saw_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n    gave_mother = savings / 3\n    spent_dresses = 177\n    spent_earrings = 129\n    left = (savings - gave_mother - spent_dresses - spent_earrings)\n    \n    equation = Eq(left, gave_mother / 2)\n\n    solutions = solve(equation, savings)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # Using stars and bars method. The question is equivalent to solving\n    # a + b + c = 6 where a, b, and c are non-negative integers.\n    # Placing 2 bars among 6 apples (\"stars\") to create 3 partitions.\n    # C(n + k - 1, k - 1) is the formula for combinations with repetitions\n    # where n is the number of types of objects (apples) and k is the number of containers (baskets).\n    from math import comb\n    ans = comb(6 + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n\n    remainder = total_length % cut_length\n\n    return remainder\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    whole_number = 1\n    fractional_part = 3 / 100\n    decimal_number = whole_number + fractional_part\n    return decimal_number\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    sum_of_N_values = 0\n    for N in range(1, 2018):\n        if 2018 % N == 11:\n            sum_of_N_values += N\n    return sum_of_N_values\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker = 6\n    total_skirts = 0\n    workers = 0\n    \n    for day in range(1, 10):\n        workers += 1\n        total_skirts += workers * skirts_per_worker\n    \n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if chickens * 2 + cows * 4 == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    # The sequence is an arithmetic sequence with a common difference of 3\n    # and a first term of 11\n    first_term = 11\n    common_difference = 3\n    \n    # Define a list of numbers to check\n    numbers_to_check = list(range(30, 61))\n    \n    # List to store numbers from the sequence that are also in the range 30-60\n    numbers_in_sequence = []\n    \n    # Loop over numbers to check and see if they fit in the sequence\n    for num in numbers_to_check:\n        if (num - first_term) % common_difference == 0:\n            numbers_in_sequence.append(num)\n    \n    return numbers_in_sequence\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    number = \"\"\n    i = 1\n    while len(number) < 2023:\n        number += str(i)\n        i += 1\n\n    ans = int(number[2022])  # Indexing starts from 0\n    return ans\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    class_size = total_sweets // min_sweets_per_student\n\n    return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    equation1 = Eq(3*apple + 2*banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n    banana_cost = solutions[banana]\n\n    cost_for_5_bananas = 5 * banana_cost\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 150000\n    first_50k_tax = 0.08 * 50000\n    remaining_income = income - 50000\n    remaining_tax = 0.08 + T / 100\n    total_tax = first_50k_tax + remaining_income * remaining_tax\n    tax_equation = Eq(total_tax, 15000)\n\n    T_value = solve(tax_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    # Let's denote the number of correct answers as 'c' and incorrect ones as 'i'.\n    # We know that:\n    # Woody answered all but one question, so the number of answered questions is 24.\n    # The total number of questions is 25, hence the number of un-attempted question is 1.\n    # For a correct answer: 4 points, for an incorrect one: -2 points, and for un-attempted: 0 points.\n    # The score for correct answers will be 4c and for incorrect answers will be -2i.\n    # Woody's total score is 66 points.\n    # We can then form an equation: 4c - 2i = 66\n    # Since he answered 24 questions in total, c + i = 24\n    # We have a system of two equations with two unknowns.\n\n    for correct_answers in range(25):\n        incorrect_answers = 24 - correct_answers\n        if 4*correct_answers - 2*incorrect_answers == 66:\n            return correct_answers\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n\n    return n\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    boys = 432\n    days_in_january = 31\n    return (boys // days_in_january) + (boys % days_in_january > 0)\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    count = 0\n    for hundred in [2, 3]:\n        for ten in [0, 2, 3]:\n            for unit in [0, 2, 3]:\n                if len(set([hundred, ten, unit])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    num_other_cars = 31 - 1\n    space_between_cars = 5\n    total_spaces = 31 + 1  # spaces before the first car, between cars, and after last car\n\n    total_length = first_car_length + (other_cars_length * num_other_cars) + (space_between_cars * total_spaces)\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # Given sequence information\n    nth_7 = 105\n    nth_8 = 120\n    nth_9 = 135\n    \n    # Determining the common difference\n    common_diff = nth_8 - nth_7  # or nth_9 - nth_8\n    \n    # Finding the first term (a1) using the 7th term information\n    a1 = nth_7 - (7 - 1) * common_diff\n    \n    # Finding the 100th term using the formula: an = a1 + (n-1)*d\n    nth_100 = a1 + (100 - 1) * common_diff\n    \n    return nth_100\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_away = 23\n    chocolates_left = total_chocolates - chocolates_given_away\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards, 4):\n        # Join the tuple to form a string, then convert to integer\n        num = int(''.join(perm))\n        if num > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    ans = 5272 // 4\n    return ans\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    # Ratio parts for Sue, Sarah, and Ian respectively\n    ratio_sue = 2\n    ratio_sarah = 3\n    ratio_ian = 5\n\n    # Total ratio parts\n    total_ratio_parts = ratio_sue + ratio_sarah + ratio_ian\n\n    # Since Sarah received 12 sweets and her ratio is 3 parts\n    sweets_per_part = 12 / ratio_sarah\n\n    # Total sweets\n    total_sweets = sweets_per_part * total_ratio_parts\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    # Cost of one packet of biscuits in pence (because £1 = 100p)\n    cost_biscuits_pence = 73\n\n    # Cost of one large cake in pence (£1.13 = 113p)\n    cost_cakes_pence = 113\n\n    # Total cost of biscuits (7 packets)\n    total_biscuits = 7 * cost_biscuits_pence\n\n    # Total cost of cakes (9 large cakes)\n    total_cakes = 9 * cost_cakes_pence\n\n    # Total cost in pence\n    total_cost_pence = total_biscuits + total_cakes\n\n    # Convert total cost back to pounds\n    total_cost_pounds = total_cost_pence / 100\n\n    # Amount of money Malcolm has (£20)\n    malcolm_money = 20\n\n    # Change received (in pounds)\n    change = malcolm_money - total_cost_pounds\n\n    # returning the answer\n    return round(change, 2)\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    growth_rate = 1/5\n    current_length = 30\n    original_length = current_length / (1 + growth_rate)\n\n    return original_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    litres_week1 = 27\n    litres_week2 = 25\n    litres_week3 = 30\n\n    total_litres = litres_week1 + litres_week2 + litres_week3\n\n    return total_litres\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    \n    return total_apples\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from math import factorial\n\ndef solution():\n    # Calculate total permutations without any conditions\n    total_permutations = factorial(7)\n    \n    # For A to be in the middle of B and C, we treat A, B and C as a single unit and there are three\n    # possible positions for A (since there are 5 positions, but B and C can be on either side)\n    # Since B and C can switch places, we multiply by 2\n    ABC_permutations = 3 * 2\n    \n    # D and E want to be next to each other, we treat D and E as a single unit.\n    # There are 2 possible positions for D and E within the unit (D-E or E-D)\n    DE_permutations = factorial(2)\n\n    # Calculate total permutations by taking total permutations and dividing by\n    # permutations of B and C around A (which we treated as one unit)\n    # and permutations of D and E (which we treated as one unit)\n    ans = (total_permutations / factorial(3)) * ABC_permutations * DE_permutations\n    \n    return int(ans)\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms  # Jessie's error was adding instead of multiplying\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Lunch finished at 2.50pm\n    lunch_finished_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    \n    # Total time before lunch is 10 minutes of playing and 20 minutes of watching TV\n    total_time_before_lunch = timedelta(minutes=(10 + 20))\n    \n    # Adding 20 minutes for the duration of the lunch\n    total_time_before_lunch += timedelta(minutes=20)\n    \n    # Benson reached home at lunch_finished_time - total_time_before_lunch\n    benson_reached_home_time = lunch_finished_time - total_time_before_lunch\n    \n    # The output should be only the time, so we format the result to output only the time part\n    return benson_reached_home_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from math import factorial as fact\n\ndef solution():\n    # There are 4 digits: 2, 0, 1, 7.\n    # For a 3-digit number, we cannot use 0 as the first digit.\n\n    # The number of ways to form a 3-digit number:\n    # First digit: 3 ways (cannot be 0) -> 2, 1, or 7\n    # Second digit: 3 remaining ways\n    # Third digit: 2 remaining ways\n    # Total: 3 * 3 * 2 = 18 ways\n\n    three_digit_numbers = 3 * 3 * 2\n\n    # For a 4-digit number, all digits must be used.\n    # The first digit cannot be 0, so there are 3 choices for the first digit,\n    # and the remaining 3 digits can be arranged in 3! ways.\n\n    # The number of ways to form a 4-digit number:\n    # First digit: 3 ways (cannot be 0)\n    # The rest of the digits: 3! ways\n    # Total: 3 * 3! = 3 * 6 = 18 ways\n\n    four_digit_numbers = 3 * fact(3)\n\n    # The total number of ways to form a 3-digit or a 4-digit number:\n    total_numbers = three_digit_numbers + four_digit_numbers\n\n    return total_numbers\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peter_initial, sam_initial = symbols('peter_initial sam_initial')\n\n    # Sam had 40 stickers more than Peter: sam_initial = peter_initial + 40\n    equation1 = Eq(sam_initial, peter_initial + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    sam_after_giving = sam_initial - 0.20 * sam_initial\n    peter_after_receiving = peter_initial + 0.20 * sam_initial\n\n    # Peter gave 25% of his stickers to Sam\n    sam_final = sam_after_giving + 0.25 * peter_after_receiving\n    peter_final = peter_after_receiving - 0.25 * peter_after_receiving\n\n    # In the end, Sam had 96 stickers more than Peter: sam_final = peter_final + 96\n    equation2 = Eq(sam_final, peter_final + 96)\n\n    # Solve the two equations to find the initial amount of stickers\n    solutions = solve((equation1, equation2), (peter_initial, sam_initial))\n\n    return solutions[peter_initial]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if number % 3 == 2 and number % 4 == 2 and number % 5 == 2 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    return 6.5 / 0.5\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    num_terms = 14\n\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_terms = num_terms * (first_term + last_term) / 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time_str = \"12:40 PM\"\n    duration_hours = 2\n    duration_minutes = 40\n\n    # Convert string to datetime object\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M %p\")\n    \n    # Create a timedelta object with the duration hours and minutes\n    duration = timedelta(hours=duration_hours, minutes=duration_minutes)\n    \n    # Add duration to arrival_time to find the leaving time\n    leaving_time = arrival_time + duration\n    \n    # Convert leaving_time back to string in the desired format (e.g., \"3:20 PM\")\n    leaving_time_str = leaving_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n    \n    return leaving_time_str\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_crystals = symbols('initial_crystals')\n    \n    equation = Eq(initial_crystals / 2 + 10 - 14 + 20, 35)\n    solutions = solve(equation, initial_crystals)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_rabbits = 14\n    pattern_length = 5  # There are 5 rabbits in the repeating pattern: 1 black, 2 white, 2 grey\n    grey_in_pattern = 2  # There are 2 grey rabbits in each repeating pattern\n\n    # Calculate the number of complete patterns needed to have 14 grey rabbits\n    complete_patterns = grey_rabbits // grey_in_pattern\n    remaining_grey = grey_rabbits % grey_in_pattern\n\n    # If there are any remaining grey rabbits, we need one more pattern\n    total_patterns = complete_patterns if remaining_grey == 0 else complete_patterns + 1\n\n    # Finally, calculate the total number of rabbits by multiplying the number of patterns by rabbits per pattern\n    total_rabbits = total_patterns * pattern_length\n\n    return total_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 5, 8]\n    all_permutations = set(permutations(digits, 3))\n\n    numbers = []\n    for perm in all_permutations:\n        if perm[0] != 0:  # Exclude numbers starting with 0\n            number = perm[0] * 100 + perm[1] * 10 + perm[2]\n            numbers.append(number)\n\n    return max(numbers) - min(numbers)\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    students_A = 12\n    students_B = 15\n    students_C = 18\n\n    # Calculate the greatest common divisor of all three numbers\n    gcd_AB = gcd(students_A, students_B)\n    gcd_ABC = gcd(gcd_AB, students_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1234'\n    even_digits = '24'\n    total_count = 0\n\n    for perm in permutations(digits):\n        if perm[-1] in even_digits:  # The last digit must be even\n            total_count += 1\n            \n    return total_count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    num = 180\n    count = 0\n    for i in range(1, num+1):\n        if num % i == 0 and i % 9 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    total_nines = 181\n    pages_with_one_nine = 10 + (90 - 10)  # from 9 to 99, except those with a leading 9\n    pages_with_two_nines = 10  # 90-99 all have two nines\n    pages_with_three_nines = 0  # Start with zero pages with three nines\n    \n    remaining_nines = total_nines - (pages_with_one_nine + 2 * pages_with_two_nines)\n    # each page in the 900s range has at least one '9'\n    pages_in_900s = 100  # from 900 to 999\n    \n    # Now check how many pages are there with two '9s' in 900s, all pages from 990 to 999\n    pages_with_two_nines_in_900s = 10\n    remaining_nines -= pages_in_900s + pages_with_two_nines_in_900s\n    \n    # If remaining nines are less than pages_with_two_nines_in_900s, it means we don't reach 999\n    if remaining_nines < pages_with_two_nines_in_900s:\n        pages_in_900s = remaining_nines\n        remaining_nines = 0\n\n    # Every 100 pages, we get 20 nines: 10 from the tens place (x9x) and 10 from the units place (xx9)\n    pages_count = 100 * (remaining_nines // 20)\n    extra_nines = remaining_nines % 20\n    # Add tens place nines\n    if extra_nines > 10:\n        pages_count += (extra_nines - 10) * 10\n        extra_nines = 10\n    # Add units place nines\n    pages_count += extra_nines\n    \n    return 99 + pages_in_900s + pages_count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        number = int(f'26{a}539')\n        if number % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    # Compound Interest formula: A = P * (1 + r)^t\n    # Where P is the principal amount, r is the annual interest rate,\n    # t is the time (years), and A is the amount at the end of the investment.\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = price_per_box * number_of_boxes\n\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    budget_pence = 200  # Budget in pence\n    single_price = 12   # Cost for single sweet\n    triple_price = 30   # Cost for three sweets\n\n    # Maximum number of sweets if bought in sets of three\n    max_triples = budget_pence // triple_price\n    remaining_budget = budget_pence % triple_price\n\n    # Additional sweets that can be bought with the remaining budget\n    additional_sweets = remaining_budget // single_price\n\n    # Total maximum sweets\n    total_sweets = (max_triples * 3) + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # We have to put 10 balls into 7 boxes, with at least 1 in each box.\n    # This means we have to distribute 10 - 7 = 3 balls into the 7 boxes.\n    # This is a problem of combinations with repetition, which can be calculated using the formula:\n    # (n + r - 1) choose (r), where n is the number of types (boxes) and r is the number of items to choose (extra balls).\n    # In our case n = 7 (boxes) and r = 3 (extra balls).\n\n    n = 7\n    r = 10 - 7\n    ans = comb(n + r - 1, r)  # Calculate combinations\n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # To ensure victory, Felix can follow a strategy that leaves an odd number of candies\n    # every time John has a turn.\n    # Felix goes first and eats 1 candy, leaving 9 candies.\n    # Whatever John does next, eats 1 or 2 candies, Felix can always eat to leave a multiple of 3.\n    # This way, when there are 3 candies left, it's John's turn, and he cannot win.\n    # Felix will win by eating the last candy on his next turn.\n    winning_strategy = \"Felix should go first and ensure that after each round, there is a multiple of 3 candies left.\"\n\n    return winning_strategy\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length // pipe_length\n\n    if total_length % pipe_length != 0:\n        num_pipes += 1\n\n    return num_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    return (38 + 8 * 9 - 15) / 5\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n  count = 0\n  for i in range(1, 2017):\n    underline_count = 0\n    if i % 2 == 0:\n      underline_count += 1\n    if i % 3 == 0:\n      underline_count += 1\n    if i % 4 == 0:\n      underline_count -= 1  # Every multiple of 4 is also a multiple of 2\n    if underline_count == 2:\n      count += 1\n  return count\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age_now = 7\n    may_age_then = 10\n    kenny_age_difference = 2\n\n    # Let's denote Kenny's younger brother's age as x.\n    # Then, Kenny's age will be x + kenny_age_difference.\n    # According to the condition, when May is 10, \n    # the sum of the ages of Kenny and his brother will be 3 times May's age:\n    # (x + (x + kenny_age_difference)) = 3 * may_age_then\n\n    # Let's define the symbolic variable for Kenny's younger brother's current age\n    x = symbols('x')\n\n    # Equation based on the problem statement\n    equation = Eq(x + (x + kenny_age_difference), 3 * may_age_then)\n\n    # Solve the equation for x\n    younger_brother_age_now = solve(equation, x)[0]\n\n    # Calculating Kenny's current age\n    kenny_age_now = younger_brother_age_now + kenny_age_difference\n\n    # The difference in age between Kenny and May\n    age_difference_kenny_may = kenny_age_now - may_age_now\n\n    return age_difference_kenny_may\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count = 0\n    page = 0\n    while count < 28:\n        page += 1\n        count += str(page).count('3')\n    return page\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    total_amount = sum(coins)\n    for lost_coin in coins:\n        if (total_amount - lost_coin) == 2 * (total_amount // 2):\n            return lost_coin\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let the total amount of water needed be x litres\n    # If he uses 5-litre pail, he overflows by 4 litres, so the actual size is x + 4.\n    # If he uses 3-litre pail, he needs 4 more pails of water to fill the tank, i.e. tank size is x - 12 (because each pail is 3 litres)\n    # So we can deduce the following equations:\n    # x + 4 = 5n (n is a number of 5-litre pails)\n    # x - 12 = 3m (m is a number of 3-litre pails)\n    \n    # Since we are just looking for the value of x, that matches both conditions, we can inspect the equations by incrementing n\n    # Starting from n=1 and incrementing till we find a compatible x that satisfies the second equation\n    \n    n = 1\n    while True:\n        x = 5 * n - 4  # Rearrange first equation to solve for x\n        if (x + 12) % 3 == 0:  # Check if it satisfies the second equation\n            break\n        n += 1\n    \n    return x  # This is the number of litres needed to fill the fish tank\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    girls_combinations = comb(8, 4)\n    boys_combinations = comb(12, 3)\n    total_combinations = girls_combinations * boys_combinations\n    return total_combinations\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    first_bus_time = datetime.strptime(\"15:55\", \"%H:%M\")\n    second_bus_time = datetime.strptime(\"16:35\", \"%H:%M\")\n    missed_time = first_bus_time + timedelta(minutes=4)\n    wait_time = second_bus_time - missed_time\n    return wait_time.total_seconds() / 60\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # symbol representing the original number of boys\n    boys = symbols('boys')\n    \n    # since removing 1/11 of boys and 5 girls equalizes the count,\n    # the original number of girls is (152 - boys)\n    # after removing 1/11 of boys and 5 girls, both counts become equal\n    equation = Eq(boys - boys/11, (152 - boys) - 5)\n    \n    # solve for the number of boys\n    num_boys = solve(equation, boys)\n    \n    return num_boys[0]\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n\n    trees = (road_length // distance_between_trees) + 1\n\n    return trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    capacity = 8\n    lorries = (workers + capacity - 1) // capacity\n    return lorries\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # If the average of some 4 of these 5 numbers is 36, 38, 39, 45 and 49\n    # Then the sum of these 4 numbers would be 4 times the average\n    sum_36 = 4 * 36\n    sum_38 = 4 * 38\n    sum_39 = 4 * 39\n    sum_45 = 4 * 45\n    sum_49 = 4 * 49\n    \n    # The total sum of all 5 numbers is the sum of any 4 numbers plus the 5th number\n    # This sum is constant for all 5 combinations of 4 numbers\n    total_sum = sum([sum_36, sum_38, sum_39, sum_45, sum_49])\n\n    # Since this is the total sum for all combinations including each number exactly once\n    # We divide by 4 (since each number was counted 4 times in total)\n    total_sum = total_sum // 4\n\n    # The largest sum of 4 numbers which does not include the largest number gives the total sum minus the largest number\n    sum_without_largest = min([sum_36, sum_38, sum_39, sum_45, sum_49])\n\n    # The largest number is the total sum minus the smallest sum of 4 numbers\n    largest_number = total_sum - sum_without_largest\n\n    return largest_number\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    pages_first_3_days = 40\n    average_next_4_days = 20\n    pages_last_2_days = 60\n    total_pages = pages_first_3_days + (average_next_4_days * 4) + pages_last_2_days\n\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [\n        (3, 4),\n        (3, 5),\n        (3, 9)\n    ]\n    \n    ans, _ = solve_congruence(*congruences)\n    while ans < 1000:\n        if ans < 200:\n            return ans\n        ans += 4 * 5 * 9  # Product of the moduli since they are pairwise coprime.\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    room = 1  # Start with one room and increase until conditions are met\n    while True:\n        students = room * 4 + 6  # If 4 students live in one room, 6 students are left without a room\n        if (students - 1) % 5 == 0 and (students - 1) // 5 == room - 1:\n            # If 1 less than total students is divisible by 5 and the number of rooms\n            # is 1 less than current number of rooms, the conditions are met\n            return students\n        room += 1\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    # The possible values for a die are from 1 to 6\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                # Check if the sum is 12 and all dice show different numbers\n                if d1 + d2 + d3 == 12 and len({d1, d2, d3}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_current_age = 70\n    grandsons_ages = [6, 12, 18]\n    total_years_passed = 0\n\n    while True:\n        bill_future_age = bill_current_age + total_years_passed\n        grandsons_future_ages = [age + total_years_passed for age in grandsons_ages]\n        if bill_future_age == sum(grandsons_future_ages):\n            return bill_future_age\n        total_years_passed += 1\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_weight_g = 15\n    \n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_weight_g\n    \n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_sum_initial = 7 * 9  # mean * number of numbers\n    total_sum_final = 6 * 10   # new mean * new number of numbers after removing one\n\n    number_removed = total_sum_initial - total_sum_final\n    return number_removed\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people * (1/3)\n    people_remaining = total_people - people_left\n\n    return int(people_remaining)\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    interval_aytown = 15\n    interval_beeville = 12\n    interval_ceeford = 8\n\n    lcm_ab = lcm(interval_aytown, interval_beeville)\n    lcm_abc = lcm(lcm_ab, interval_ceeford)\n\n    # Since the period started at 10:00 AM, we need to add the LCM to this time\n    minutes_past = 10 * 60  # Convert 10:00 AM to minutes\n    next_time_minutes = minutes_past + lcm_abc\n\n    # Convert minutes back to hours and minutes\n    next_hour = next_time_minutes // 60\n    next_minute = next_time_minutes % 60\n\n    # Formatting to a 24-hour clock format if needed\n    next_time = \"{:02d}:{:02d}\".format(next_hour, next_minute)\n\n    return next_time\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    marks_correct = 5\n    marks_incorrect = -2\n    total_marks = 79\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * marks_correct + incorrect_answers * marks_incorrect == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # calculate the maximum number of students who play exactly two sports\n    max_two_sports = (swimmers + cyclists + table_tennis_players) - total_students\n\n    # calculate the minimum number of students who play all three sports\n    min_all_three = (swimmers + cyclists + table_tennis_players) \\\n                    - max_two_sports - 2 * total_students\n\n    return min_all_three if min_all_three > 0 else 0\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    factor = 3999 * 2014\n    ans = (factor * 2014.2014 + factor * 3999.3999) / 12.0012\n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_seconds = 30  # time taken to pass the tree in seconds\n    train_length = 360  # length of the train in meters\n\n    # Speed = Distance / Time\n    speed = train_length / time_seconds  # speed in meters per second\n\n    # Convert speed from m/s to km/h\n    speed_kmh = speed * 3.6  # 1 m/s is equal to 3.6 km/h\n\n    return speed_kmh\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    net_progress = day_climb - night_slide\n    days = 0\n    current_distance = 0\n\n    while True:\n        days += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n    \n    return days\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Collect the number of marbles of each color in a sorted list.\n    marbles = sorted([12, 9, 8, 3])\n    \n    # To ensure we have 4 marbles of different colors, we need to consider the worst-case scenario.\n    # This means, we pick all marbles of one color, then all marbles of a second color\n    # and then all marbles of a third color before finally picking 1 marble of the remaining color.\n    # As the list is sorted, we pick all marbles from the first three colors and add 1 from the last color.\n    min_draws = marbles[0] + marbles[1] + marbles[2] + 1\n\n    return min_draws\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    # Eddie has 8 choices from Chinese restaurants,\n    # 6 choices from Mexican restaurants,\n    # and 4 choices from fast food restaurants\n    total_choices = 8 + 6 + 4\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Each person is numbered with even numbers starting from 2, which means the interval is 2.\n    # To find a person directly opposite another, they must be half the circumference (number of people) away.\n    for i in range(1, 50):\n        if (2 + 2 * i) % (2 * 2 * i) == (24 % (2 * 2 * i)):\n            return 2 * i\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_stationery_percent = 20\n    saving_less_than_food = 6\n\n    books_stationery = (books_stationery_percent / 100) * pocket_money\n    food_plus_transport = pocket_money - books_stationery\n    # Let the amount spent on transport be x\n    # Then the amount on food is 3x\n    # And savings are 3x - 6\n    # So we have x + 3x + (3x - 6) = food_plus_transport\n    transport = (food_plus_transport + 6) / 7\n    food = 3 * transport\n    savings = food - saving_less_than_food\n\n    savings_percent = (savings / pocket_money) * 100\n    return savings_percent\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n    return ages[-1]  # Assuming we want the current age.\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n\n    return lcm(24, 64)\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    for num in range(10, 100):\n        if 75 % num == 0 and num % 6 == 3:\n            return num\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    incorrect_subtrahend = 41\n    incorrect_answer = 50\n    correct_subtrahend = 14\n\n    incorrect_minuend = incorrect_subtrahend + incorrect_answer\n    correct_answer = incorrect_minuend - correct_subtrahend\n\n    return correct_answer\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum((-1)**(i%2) * (40 - 2*i) for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    apples_justin = 4\n    apples_sisters_each = 5\n    sisters_count = 4\n    apples_left = 20\n\n    total_apples_before = apples_justin + (apples_sisters_each * sisters_count) + apples_left\n\n    return total_apples_before\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    return 45.36 + 1.25 + 2.75 + 4.64\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total_count = 0\n\n    # The numbers must be four digits, so we can loop over the range of first digits from 3 to 5.\n    for first_digit in range(3, 6):\n        # If the first digit is 3, the second digit can be any from 1,2,4,5,6 (5 options)\n        # If the first digit is 4, the second can also be 1,2,3,5,6 (5 options)\n        # If the first digit is 5, the second can be 1,2,3,4,6 (5 options)\n        for second_digit in [1, 2, 3, 4, 5, 6]:\n            if second_digit != first_digit:\n                # For the third digit, we used two different digits already, so 4 options remain\n                for third_digit in [1, 2, 3, 4, 5, 6]:\n                    if third_digit != first_digit and third_digit != second_digit:\n                        # Similarly for the last digit, 3 options remain\n                        for fourth_digit in [1, 2, 3, 4, 5, 6]:\n                            if fourth_digit != first_digit and fourth_digit != second_digit and fourth_digit != third_digit:\n                                # Now we build number and check if it's in the range.\n                                number = int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}\")\n                                if 3267 <= number <= 5120:\n                                    total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    # Let the side of the original square array be x.\n    # Then the number of soldiers in the original square array is x^2.\n    # After 31 soldiers join, the new array has a side of x+1, so the number becomes (x+1)^2.\n    # The difference between the new and the old number of soldiers is exactly 31:\n    # (x+1)^2 - x^2 = 31\n    # Expanding the equation gives:\n    # x^2 + 2x + 1 - x^2 = 31\n    # Simplifying the equation gives:\n    # 2x + 1 = 31\n    # Subtracting 1 from both sides gives:\n    # 2x = 30\n    # Dividing by 2 gives:\n    # x = 15\n    # The total number of soldiers in the new array is (x+1)^2:\n    # (15 + 1)^2 = 16^2\n    # Thus the answer is:\n    ans = 16**2\n    return ans\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    total = 56\n    part = 21\n    fraction_of_total = part / total\n    denominator = 3 / fraction_of_total\n    return int(denominator)\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2\n    b = 6.77\n    c = 8.88\n    d = 6.3\n\n    ans = (a + b + c) * (b + c + d) - (a + b + c + d) * (b + c)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    february_saved = total_saved - january_saved - march_saved\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    final_amount = 7320.5\n    years = 4\n\n    # Using the formula for compound interest A = P * (1 + r/n)^(nt)\n    # where A is the final amount, P is the principal, r is the annual interest rate,\n    # n is the number of times interest is compounded per year, and t is the time in years.\n    # In this case, interest is compounded annually, so n = 1.\n    # We need to solve for r, so we rearrange the formula to get r.\n    # (A/P) = (1 + r/1)^(1*t)\n    # (A/P)^(1/t) = 1 + r\n    # r = (A/P)^(1/t) - 1\n    interest_rate = (final_amount / principal) ** (1 / years) - 1\n\n    return interest_rate\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = 1 * 60 + 20  # One hour and twenty minutes in minutes\n    pictures_painted = total_minutes // minutes_per_picture\n    return pictures_painted\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n    return seconds_per_minute * minutes\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    interest_rate = 0.08\n    years = 4\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    return 7.3 - 2.64\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Total apples to distribute\n    total_apples = 30\n    # Other children (excluding Ann)\n    other_children = 5\n    # Each child gets at least one apple\n    apples_for_others = other_children * 1\n    # The largest possible number of apples Ann can get is the total\n    # minus the amount given to the other children\n    max_apples_for_ann = total_apples - apples_for_others\n    return max_apples_for_ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        num1 = int(''.join(perm[:3]))\n        num2 = int(''.join(perm[3:5]))\n        num3 = int(''.join(perm[5:]))\n        if num2 == 2 * num1 and num3 == 4 * num1:\n            return num3\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Options for wearing pants and shirts\n    pants_and_shirts_combinations = shirts * pants * shoes\n\n    # Options for wearing a dress\n    dress_combinations = dresses * (shoes + heels)\n\n    # Total combinations\n    total_combinations = pants_and_shirts_combinations + dress_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, teddy_bear = symbols('book teddy_bear')\n    \n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n    \n    solutions = solve((equation1, equation2), (book, teddy_bear))\n    \n    return solutions[book]\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum([sum([1/j for i in range(1, j)]) for j in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    total_score = 29\n    correct_score = 4\n    incorrect_score = -2  # points deduced, hence negative\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * correct_score + incorrect_answers * incorrect_score\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern = [1, 2, 3, 4, 5]\n    pattern_length = len(pattern)\n    total_digits = 52\n    full_patterns, remaining_digits = divmod(total_digits, pattern_length)\n\n    sum_full_patterns = sum(pattern) * full_patterns\n    sum_remaining_digits = sum(pattern[:remaining_digits])\n\n    ans = sum_full_patterns + sum_remaining_digits\n    return ans\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n\n    num_kites = total_paper // paper_per_kite\n\n    return int(num_kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    number_of_trees = 79\n    road_length = 320\n    # Number of intervals is 1 more than number of trees\n    number_of_intervals = number_of_trees + 1\n    distance_between_trees = road_length / number_of_intervals\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    # Convert all to grams\n    total_mass_in_g = (total_mass_kg * 1000) + total_mass_g\n    soil_mass_in_g = (soil_mass_kg * 1000) + soil_mass_g\n\n    # Calculate the mass of the pack of sand in grams\n    sand_mass_in_g = total_mass_in_g - soil_mass_in_g\n\n    # Find the difference in mass between the soil pack and sand pack in grams\n    difference_in_mass_g = abs(soil_mass_in_g - sand_mass_in_g)\n\n    # Convert the difference back to kg and g\n    difference_in_mass_kg = difference_in_mass_g // 1000\n    difference_in_mass_g = difference_in_mass_g % 1000\n\n    # The result should be given in kg and g, so we combine them\n    ans = (difference_in_mass_kg, difference_in_mass_g)\n    return ans\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen traded 10 fish for 4 rabbits, so the exchange rate is 10 fish per 4 rabbits, or 2.5 fish per rabbit\n    fish_per_rabbit = 10 / 4\n\n    # Oscar traded 5 rabbits for 6 packs of wheat, so the exchange rate here is 5 rabbits per 6 packs of wheat, or 1 rabbit for 1.2 packs of wheat\n    rabbits_per_pack_of_wheat = 5 / 6\n\n    # To find out how many fish equals 12 packs of wheat, we can set up the proportion:\n    # (fish_per_rabbit / 1 rabbit) = (X fish / 12 packs of wheat)\n    # where X is the number of fish for 12 packs of wheat we are looking for\n\n    # First, calculate the number of fish per pack of wheat\n    fish_per_pack_of_wheat = fish_per_rabbit / rabbits_per_pack_of_wheat\n\n    # Finally, find the number of fish for 12 packs of wheat\n    ans = fish_per_pack_of_wheat * 12\n\n    return ans\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "def solution():\n    total_length = 10 + 4/5\n    short_rod_length = 3/10\n    number_of_short_rods = total_length / short_rod_length\n    \n    return int(number_of_short_rods)\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    # Since the highest common factor is 75, which is 3^1 * 5^2,\n    # Both M and N must include the factor of 75.\n\n    # M has 12 factors and N has 10 factors. The number of factors of a number is\n    # determined by adding 1 to the exponent of the prime factors and multiplying them.\n    # If M = 3^a * 5^b and N = 3^c * 5^d (where both M and N include the factor 75):\n    # The number of factors for M = (a+1) * (b+1) = 12\n    # The number of factors for N = (c+1) * (d+1) = 10\n\n    # Since the exponents of prime factors of 75 are 1 and 2, for both M and N:\n    # a must be at least 1 and b must be at least 2.\n\n    # We need to find the exponents a and b for M, and c and d for N such that:\n    # (a+1)*(b+1) = 12 and (c+1)*(d+1) = 10\n\n    factors_M = []\n    factors_N = []\n\n    # Calculate factors for M\n    for a in range(1, 13):  # Start with exponent 1 (for prime factor 3) as 3^0 would not suffice\n        for b in range(2, 13):  # Start with exponent 2 (for prime factor 5) because of HCF containing 5^2\n            if (a+1) * (b+1) == 12:\n                factors_M.append((a, b))\n\n    # Calculate factors for N\n    for c in range(1, 11):  # Can't be 0 for the same reason\n        for d in range(2, 11):\n            if (c+1) * (d+1) == 10:\n                    factors_N.append((c, d))\n\n    # M and N are now in the form of 3^a * 5^b and 3^c * 5^d respectively.\n    # We have to consider the highest common factor of 75 already in their prime factorization.\n\n    results = []\n    for a, b in factors_M:\n        for c, d in factors_N:\n            M = 3**a * 5**b\n            N = 3**c * 5**d\n            # Check if GCD is indeed 75 for this pair of exponents\n            if min(a, c) == 1 and min(b, d) == 2:\n                results.append((M, N))\n\n    # Return the sum of M and N from the pair that satisfy the HCF condition.\n    # Note: There should be only one valid pair meeting both the factors condition and HCF condition.\n    if results:\n        return sum(results[0])\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_cost = 2800\n    deal_laptop_count = 30\n    required_laptop_count = 20\n\n    cost_without_deal = single_laptop_cost * required_laptop_count\n    cost_per_laptop_with_deal = deal_cost / deal_laptop_count\n    cost_with_deal = cost_per_laptop_with_deal * required_laptop_count\n\n    savings = cost_without_deal - cost_with_deal\n\n    return savings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Calculate the factorial of a number\n    def fact(n):\n        return factorial(n)\n\n    # There are 5 positions where dancing performances can be placed between singing performances\n    # (S _ S _ S _ S _ S _ S) - The underscores represent possible places for dancing\n    # We need to choose 4 places out of these 5 to put the dancing performances\n    num_ways_to_place_dancing = fact(5) // (fact(4) * fact(5-4))\n    \n    # There are 6 singing performances, which can be arranged in any order among themselves\n    num_ways_to_arrange_singing = fact(6)\n    \n    # Similarly, there are 4 dancing performances that can be arranged among themselves\n    num_ways_to_arrange_dancing = fact(4)\n    \n    # The total number of ways to arrange these performances is the product of the above possibilities\n    total_ways = num_ways_to_place_dancing * num_ways_to_arrange_singing * num_ways_to_arrange_dancing\n\n    return total_ways\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount = 35 / 100\n    final_price = original_price * (1 - discount)\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let p represent the number of penguins\n    p = symbols('p')\n    \n    # Two equations based on the problem statement\n    # If 3 fish is given to each penguin, 5 fish will be left\n    equation1 = Eq(3*p + 5, 4*p - 15)\n\n    # Solve the equation for p\n    num_penguins = solve(equation1, p)\n\n    # Return the number of penguins\n    return num_penguins[0]\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Let's denote the number of buttons Nina has originally as n\n    # and the number of buttons James has originally as j.\n    # Therefore, we have two equations based on the given information:\n    # n + j = 22 (total number of buttons they have)\n    # n - 4 = j + 4 (after Nina gives James 4 buttons, they have the same number)\n    \n    # By combining the two equations, we get:\n    # (n - 4) - (j + 4) = 0\n    # n - j - 8 = 0\n    # n - j = 8\n    \n    # Let's solve these two equations:\n    # n + j = 22\n    # n - j = 8\n    # Adding these two, we get:\n    # 2n = 30\n    # Thus, n = 15\n    # Since Nina has more buttons than James, n should be greater than j.\n    \n    nina_original = 15\n    return nina_original\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_wage = 5.12\n    hours_worked = 8\n    earnings = hourly_wage * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    mistaken_result = -14\n    subtracted_instead_of_adding = 26\n    original_number = mistaken_result + subtracted_instead_of_adding\n    correct_result = original_number + subtracted_instead_of_adding\n    \n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height / ratio_matthew) * ratio_kelly\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    return 0.35 * 80\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    for i in range(4): # Half-time score for team 1\n        for j in range(3): # Half-time score for team 2\n            # Conditions for possible half-time scores:\n            # Team 1's half time score can't exceed their final score\n            # Team 2's half time score can't exceed their final score\n            # Team 1's half time score must be less than or equal to team 2's if they eventually lost\n            if i <= 3 and j <= 2 and (i >= j or i == 2 and j == 0):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n\n    cards_lost = original_cards * fraction_lost\n\n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    clara, emma = symbols('clara emma')\n    \n    equation1 = Eq(clara, 5 * emma)\n    equation2 = Eq(clara + emma, 1002)\n    \n    solutions = solve((equation1, equation2), (clara, emma))\n    \n    return solutions[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    num_students = 6\n    num_monitors = 2\n    return comb(num_students, num_monitors)\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of boys (b) and girls (g) who can swim\n    g, b = symbols('g b', positive=True, integer=True)\n    # Let the number of girls who cannot swim be g1.\n    g1 = g * 3 / 8\n    # Let the number of boys who cannot swim be b1.\n    b1 = b * 3 / 5\n    # Number of pupils who cannot swim is 20, and it is equal for boys and girls.\n    \n    # Since an equal number of boys and girls cannot swim\n    # the number of girls who cannot swim equals the number of boys who cannot swim\n    # g - g1 = b - b1\n    # And the total number of pupils who cannot swim is 20.\n    # (g - g1) + (b - b1) = 20\n\n    eq1 = Eq(g - g1, b - b1)\n    eq2 = Eq((g - g1) + (b - b1), 20)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (g, b))\n\n    # Total pupils in class is equal to number of boys plus number of girls.\n    total_pupils = solutions[g] + solutions[b]\n\n    return total_pupils\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    half_mangoes_weight = half_full_weight - (full_weight / 2)\n    empty_basket_weight = half_full_weight - half_mangoes_weight\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percentage = 85 / 100\n    amount = 400\n    result = percentage * amount\n    return result\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(8.5 - 4 * (x - 1.5) + 3.2 * (x - 2), 2.5 * x + 3 * (2.5 - x))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    bud_sweets = 16\n    pip_fraction = 3 / 5\n\n    total_sweets = bud_sweets / (1 - pip_fraction)\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    # Calculate the product of 6 and 5\n    product = 6 * 5\n    \n    # Find the percentage of 40 that equals the product\n    percentage = (product / 40) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    return 5 * 57 * 4\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    total_cost_for_3_cups = 30\n    number_of_cups_initially = 3\n    number_of_cups_mandy_wants = 5\n\n    cost_per_cup = total_cost_for_3_cups / number_of_cups_initially\n    total_cost_for_mandy = cost_per_cup * number_of_cups_mandy_wants\n\n    return total_cost_for_mandy\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    big_mushroom_houses = 5\n    small_mushroom_houses = 9\n    total_rabbits = 38\n    rabbits_in_big_houses = big_mushroom_houses * 4\n\n    rabbits_in_small_houses = total_rabbits - rabbits_in_big_houses\n    rabbits_per_small_house = rabbits_in_small_houses / small_mushroom_houses\n\n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    daily_earnings = 60\n    days_in_a_week = 7\n\n    total_earnings = daily_earnings * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        if i % 2 == 0:\n            ans += (i**2) - (i - 1)**2\n        else:\n            ans += (i - 1)**2 - (i**2)\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    ways = [0]*(6+1)\n    ways[0] = 1\n\n    for i in range(1, 7):\n        ways[i] += ways[i-1] if i-1 >= 0 else 0\n        ways[i] += ways[i-2] if i-2 >= 0 else 0\n        ways[i] += ways[i-3] if i-3 >= 0 else 0\n\n    return ways[6]\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    return 5 - 1.02\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Mike's position is always the 2nd when counted from any side in a rectangular array.\n    # This means that the number of desks must be in the form of (n+1) by (m+1), with Mike sitting\n    # at (1, 1), if you start counting from zero. Being 2nd in line from all sides means he can't\n    # be at the edges of the rectangle. Also, for it to be a perfect rectangle, both n and m must\n    # be greater than 1.\n    \n    # We start looking for solutions where rows and columns are greater than 2 (since Mike is not on edge)\n    # and keep checking smaller rectangular arrays, reducing one row and one column each time.\n    \n    # Starting values for n and m can't be too high as they would exceed normal class sizes, \n    # hence we can choose an upper bound (like 50) which is more than sufficient \n    # for a classroom size.\n    \n    for n in range(3, 51):  # Starting from 3 as Mike can't be at the first row or column\n        for m in range(3, 51):  # Same rationale for columns\n            # Since Mike is 2nd in the order from all sides, he is sitting at (1,1) index when counting from zero\n            # Therefore, the class should have (n - 1) students before him and (m - 1) students to one side of him.\n            # We can validate the rectangle using Mike's information where (n - 1) x (m - 1) must equal total students - 1\n            \n            total_students = n * m  # Total students in the classroom\n            if (n - 1) * (m - 1) == total_students - 1:\n                return total_students\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    total_months = 5  # From March to July inclusive\n    \n    total_pizzas = average_pizzas_per_month * total_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    total_sum = 21 + 22 + 23  # Calculate the sum\n    for i in range(1, total_sum + 1):  # Find the number that fits the box\n        if 2 * 3 * i == total_sum:\n            return i\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n\n    # Abigail is three times as old as Ryan\n    equation1 = Eq(abigail, 3 * ryan)\n    # In 6 years, Abigail will be 42\n    equation2 = Eq(abigail + 6, 42)\n\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    # How old will Ryan be in 2 years\n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_ship = 33  # ship speed in still water in km/h\n    speed_current = 3  # speed of the current in km/h\n    distance = 150  # distance to travel upstream in km\n\n    # Effective speed upstream = speed of ship - speed of current\n    effective_speed_upstream = speed_ship - speed_current\n\n    # Time = distance / speed\n    time_upstream = distance / effective_speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    # A drink and a box of popcorn together cost 90p\n    equation1 = Eq(drink + popcorn, 90)\n    # Two drinks and a box of popcorn together cost £1.45 (£1.45 = 145p)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4\n    if first_multiple < 56:\n        first_multiple += 4\n    last_multiple = (92 // 4) * 4\n    number_of_multiples = (last_multiple - first_multiple) // 4 + 1\n    return number_of_multiples\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms / 2) * (first_term + last_term)\n    \n    return int(sum_seq)\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum([i if (60 - i) % 4 < 2 else -i for i in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # The ones digit of a power of 9 cycles every 4 powers: 9, 1, 9, 1, ...\n    # Since 999 is 9 * 111, we only need to consider the last digit of 9's power\n    # 99 mod 4 = 3 (since 99 divided by 4 leaves a remainder of 3)\n    # So we look for the ones digit in 9^3\n    \n    ones_digit = (9 ** 3) % 10  # Gives us the ones digit of 9^3\n    \n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for Claire's current age\n    claire_current_age = symbols('claire_current_age')\n    \n    # Equation for Claire's age in 6 years being three times her current age\n    age_in_6_years_eq = Eq(claire_current_age + 6, 3 * claire_current_age)\n    \n    # Solving the equation\n    claire_current_age_solution = solve(age_in_6_years_eq, claire_current_age)[0]\n    \n    # Claire's age two years from now\n    claire_age_in_2_years = claire_current_age_solution + 2\n    \n    return claire_age_in_2_years\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time the journey should have taken\n    x = symbols('x')\n\n    # Journey took 11/12 of the supposed time and arrived 5 minutes late\n    # It also left 15 minutes late, so the actual journey time is x - 15 (minutes)\n    # Setting up the equation: actual time is 11/12 of the expected time - 5 minutes late\n    equation = Eq((11/12) * x - 5, x - 15)\n\n    # Solve for x\n    expected_time = solve(equation, x)\n\n    return expected_time[0]\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            break\n    return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_number_product = total_product - known_product\n    missing_number = missing_number_product / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    fare = 44\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]  # Possible coin denominations in pence\n    num_coins = 0\n    pay = max(coins)  # Pay with the largest coin possible, assuming Susan has it\n\n    # Change given back\n    change = pay - fare\n    for coin in coins:\n        while change >= coin:\n            change -= coin\n            num_coins += 1\n\n    # Minimum number of coins is the number used to give change + 1 coin given to pay\n    return num_coins + 1\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people\n    \n    return sweets_per_person\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    # Number of legs per chicken\n    legs_per_chicken = 8 / 4\n    \n    # Total number of chickens on Tom's farm\n    total_chickens = 9\n    \n    # Total number of legs\n    total_legs = legs_per_chicken * total_chickens\n    \n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    advance = 3\n    slide_back = 1\n    distance_after_sliding = advance - slide_back\n    days = 0\n    height_after_last_day = 0\n\n    while height_after_last_day < total_distance:\n        days += 1\n        height_after_last_day += advance\n        if height_after_last_day >= total_distance:\n            break\n        else:\n            height_after_last_day -= slide_back\n\n    return days\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from itertools import combinations\n\ndef solution():\n    books = 19  # Total number of books\n    kids = 4    # Total number of kids\n\n    # Since each kid should get at least one book, we distribute one to each first\n    books -= kids\n    \n    # Now we need to distribute the remaining books to the kids\n    # This is equivalent to putting 3 separators in the 18 positions available (19 - 1)\n    # to divide the books into 4 parts, i.e., C(15, 3)\n    ans = len(list(combinations(range(books), kids - 1)))\n    \n    return ans\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    ans = 7052 + 832 - 523\n    return ans\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    # Assign symbolic variables to each item\n    motorbikes, tricycles, vans = symbols('motorbikes tricycles vans')\n    \n    # Each motorbike has 2 wheels, each tricycle has 3 wheels, each van has 4 wheels\n    equation1 = Eq(2*motorbikes + 3*tricycles + 4*vans, 101)\n    \n    # There are 35 more motorbike and van wheels than tricycle wheels\n    equation2 = Eq(2*motorbikes + 4*vans - 3*tricycles, 35)\n    \n    # There are 13 more tricycle and van wheels than motorbike wheels\n    equation3 = Eq(3*tricycles + 4*vans - 2*motorbikes, 13)\n    \n    # Solve the system of equations to find the number of motorbikes, tricycles, and vans\n    solutions = solve((equation1, equation2, equation3), (motorbikes, tricycles, vans))\n    \n    # Since we need to find how many more motorbikes than vans there are, we take the difference\n    more_motorbikes_than_vans = solutions[motorbikes] - solutions[vans]\n    \n    return more_motorbikes_than_vans\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a, b = 2, 3\n    while b < 100:\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # We have 4 colors, so we want to make sure we have at least 1 of each color.\n    # To use the pigeonhole principle, we consider the worst-case scenario:\n    # That is, Jane could pick all the marbles of one color before getting to a new color.\n    # Since we want at least 1 of each of the 4 colors, we must go through the worst case where she picks the\n    # maximum amount of 3 colors without getting the fourth.\n    \n    # Calculate the number of marbles she must draw to ensure 4 different colored marbles\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n    \n    # She could pick all the marbles of one color, then all of another, and then all of another.\n    # That's 3 full colors worth of marbles. Add one more to ensure the fourth color.\n    marbles_drawn = (red - 1) + (green - 1) + (blue - 1) + 1\n    \n    return marbles_drawn\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # With 6 identical pens and 3 different colour pencil cases, \n    # considering that no pencil case can be empty, we can think of this as a partition problem\n    # of putting 6 indistinguishable items into 3 distinguishable boxes. This is equivalent to the\n    # problem of partitioning the number 6 into exactly 3 positive parts.\n    \n    # The partitions of 6 into 3 parts are:\n    # (1, 1, 4), (1, 2, 3)\n    # There are no other partitions because we cannot have zero pens in a case, and (2, 2, 2) is not allowed\n    # because the cases are distinguishable (the pens inside are not).\n\n    # We therefore have exactly 2 ways to distribute the pens.\n\n    return 2\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the amount of water in each tank\n    TA, TB, TC, TD = symbols('TA TB TC TD')\n    \n    # Given conditions\n    equation1 = Eq(TA, 5 * TB)         # Tank A has 5 times as much as Tank B\n    equation2 = Eq(TB, TC + 5)         # Tank B has 5 more liters than Tank C\n    equation3 = Eq(TC + TD, TA)        # Tank C and D together have as much as Tank A\n    equation4 = Eq(TD, 41)             # Tank D has 41 liters of water\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (TA, TB, TC, TD))\n    \n    # Water in Tank B\n    return solutions[TB]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((i + 2) ** 2 - i ** 2 for i in range(2, 41, 4))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    required_cups = 30\n    gallons_needed = required_cups / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_Pip = 9\n    people_behind_Bud = 10\n    # Plus Pip and Bud themselves\n    total_people = people_in_front_of_Pip + people_behind_Bud + 2\n\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    return 68 + 75\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all possible combinations of 2 zeros, 2 ones, and 2 twos\n    digits_combinations = set(permutations('001122', 6))\n    \n    # Filter out the invalid dates\n    valid_dates = set()\n    for combo in digits_combinations:\n        yyyy = \"2014\"\n        mm = combo[0] + combo[1]\n        dd = combo[2] + combo[3]\n        \n        # Check if month is valid (01-12)\n        if mm < \"01\" or mm > \"12\":\n            continue\n        \n        # Check if day is valid based on month\n        if mm in {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"}:\n            if dd < \"01\" or dd > \"31\":\n                continue\n        elif mm in {\"04\", \"06\", \"09\", \"11\"}:\n            if dd < \"01\" or dd > \"30\":\n                continue\n        elif mm == \"02\":\n            if dd < \"01\" or dd > \"28\":\n                continue\n        \n        # This is a valid date for 2014\n        valid_dates.add(yyyy + mm + dd)\n        \n    return len(valid_dates)\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    # Given numbers and average\n    given_numbers = [4, 5, 6, 9, 3, 9]\n    average = 6\n    total_numbers = 8\n    total_sum = average * total_numbers\n    \n    # Calculating the sum of given numbers\n    sum_of_given_numbers = sum(given_numbers)\n    \n    # Finding the sum of p and q\n    sum_of_p_q = total_sum - sum_of_given_numbers\n    \n    # The difference between the highest and lowest values is 6\n    # q is the highest, 3 is the lowest value from the given numbers\n    difference = 6\n    q_minus_lowest = difference\n    \n    # Therefore, q = 3 + difference\n    q = 3 + difference\n    \n    # Since p < q and q is the smallest possible, p should be as big as possible\n    # Hence p should be q - 1\n    p = q - 1\n    \n    # But we should check if the sum of p and q is equal to the remaining sum we need\n    while p + q != sum_of_p_q:\n        q += 1  # Trying the next value of q\n        p = q - 1  # Making p to be the new value of q - 1\n    \n    return q\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_number = ((last_term - first_term) // difference) + 1\n\n    return term_number\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    both = symbols('both')\n    \n    football = 3 * both\n    basketball = 4 * both\n    total_students = 36\n    \n    equation = Eq(football + basketball - both, total_students)\n\n    solution = solve(equation, both)\n\n    return solution[both]\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    x = symbols('x')\n    eq1 = Eq(x % 7, 3)\n    eq2 = Eq(x % 11, 7)\n    eq3 = Eq(x % 13, 9)\n\n    # Since 7, 11, and 13 are pairwise coprime, their LCM is their product\n    lcm_7_11_13 = 7 * 11 * 13\n\n    # Now we can set up the congruence using Chinese Remainder Theorem\n    crt_solution = solve((eq1, eq2, eq3), x)\n\n    # We need the smallest positive solution greater than or equal to 10000 \n    smallest_solution = min(filter(lambda num: num >= 10000, crt_solution))\n\n    # Because the solution will be in the form of a set, we get the first (and only) element\n    ans = smallest_solution.evalf()\n\n    return int(ans)\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Adam's speed in km/h\n    adam_speed = 60\n    # Jacob's speed in km/h\n    jacob_speed = 80\n\n    # Adam's remaining time to get home in hours\n    adam_remaining_time = 0.5\n\n    # Total time both were driving in hours\n    total_driving_time = 3 + adam_remaining_time\n\n    # Distance Adam has driven\n    adam_distance = total_driving_time * adam_speed\n\n    # Distance Jacob has driven (he drove for 3 hours when he reached home)\n    jacob_distance = 3 * jacob_speed\n\n    # The total distance between their homes is the sum of the distances they've driven\n    total_distance = adam_distance + jacob_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    term_number = 21\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def solution():\n    def custom_operation(a, b):\n        return ((a * b + 16) / (a + b)) ** 2\n        \n    result = custom_operation(custom_operation(custom_operation(1, 2), 3), 4)\n    final_result = custom_operation(result, 5)\n    \n    return int(final_result)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    # Prime factorization of 252 is 2^2 * 3^2 * 7\n    # To find the number of factors, we add 1 to each of the exponents and multiply them together\n    factors_of_2 = 2 + 1\n    factors_of_3 = 2 + 1\n    factors_of_7 = 1 + 1\n    \n    # Number of factors is the product of these\n    num_factors = factors_of_2 * factors_of_3 * factors_of_7\n    \n    return num_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n\n    # Using the Pigeonhole principle, we divide the number of cakes by the number of layers and round up\n    max_cakes_in_a_layer = -(-total_cakes // total_layers)  # Ceiling division\n\n    return max_cakes_in_a_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    GST_rate = 0.07\n    total_paid = 0.91\n    cost_before_GST = total_paid / (1 + GST_rate)\n    return cost_before_GST\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # Assuming Lucy takes one marble at a time.\n    # After taking 3 marbles, it is guaranteed that she will have 2 marbles of the same colour\n    # because of the Pigeonhole Principle.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    weight_kg_1 = 2.49\n    weight_g_2 = 670\n    weight_kg_3 = 3\n    weight_g_3 = 80\n    \n    total_weight_g = (weight_kg_1 * 1000) + weight_g_2 + (weight_kg_3 * 1000) + weight_g_3\n    \n    return int(total_weight_g)\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    next_meet_time_in_seconds = lcm(ashley_time, ben_time, charlie_time)\n\n    hours, seconds = divmod(next_meet_time_in_seconds, 3600)\n    minutes, seconds = divmod(seconds, 60)\n\n    start_time_hours = 10\n    next_meet_hours = start_time_hours + hours\n    next_meet_hours %= 24  # In case it goes past midnight\n\n    return f\"{str(next_meet_hours).zfill(2)}:{str(minutes).zfill(2)}\"\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_minutes = 60\n    cycling_fraction = 1/3\n    cycling_minutes = total_minutes * cycling_fraction\n    jogging_minutes = total_minutes - cycling_minutes\n    return jogging_minutes\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n    \n    equation = Eq(justin + 18, 4 * (justin - 6))\n    \n    age_now = solve(equation, justin)\n    \n    return age_now[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    common_difference = 18 - 22\n    last_term = 2\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Initialize variables for the problem\n    total_apples = 30\n    children = 6\n\n    # The least amount of apples we can distribute to the first children are 1, 2, 3, ... (children-1)\n    least_distributed = sum(range(children))  # This covers the minimum distribution to 5 children\n\n    # Subtract the least distributed apples from total to get the maximum possible for the last child\n    max_for_last_child = total_apples - least_distributed\n\n    return max_for_last_child\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    # Given values\n    distance = 273  # miles\n    sam_mileage = 72.8  # Sam's average mileage (miles per gallon)\n    additional_gallons_tom = 6 + 3/4  # Additional gallons Tom uses\n\n    # Sam's petrol consumption in gallons for the trip\n    sam_gallons = distance / sam_mileage\n\n    # Tom's petrol consumption in gallons for the trip\n    tom_gallons = sam_gallons + additional_gallons_tom\n\n    # Tom's average rate of petrol consumption (miles per gallon)\n    tom_mileage = distance / tom_gallons\n\n    return tom_mileage\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # Bart will draw the M&M's one by one until he gets two of different colors\n    # To guarantee he gets two of different colors, he must pick at least one of each color\n    # Therefore he will need to pick 1 red, 1 yellow, and 1 brown to ensure he has two of different colors\n    # However, since he picks without looking, he could pick three of the same color first (which is the worst case)\n    # After picking 3 of the same color, the fourth will definitely be of a different color\n    # Hence, the minimum number of M&M's Bart needs to take is 4\n    \n    return 4\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    return 77.5 * 0.52 + 5.2 * 2.25\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    ans = 3017 + 4962\n    return ans\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for i in range(10):\n        number = int(f\"24572{i}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    ans = 9039 + 93\n    return ans\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    shirts = 2\n    skirts = 2\n    combination = shirts * skirts\n    return combination\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # Since we recognize the pattern as powers of 3, we can fill in the blanks accordingly.\n    # 1 = 3^0, 3 = 3^1, 27 = 3^3, 81 = 3^4\n    # So the missing term should be 3^2\n    missing_term = 3**2\n    return missing_term\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # Given that the 7th term is 105, 8th term is 120, and 9th term is 135,\n    # We can determine the common difference by subtracting the 7th term from the 8th term\n    # or the 8th term from the 9th term\n    # Both approaches should give us the same common difference\n    \n    common_difference = 120 - 105  # or 135 - 120, which equals 15\n    \n    # The nth term of an arithmetic sequence can be found by the formula:\n    # nth_term = first_term + (n - 1) * common_difference\n    \n    # To find the 100th term, we need the first term. We can find the first term using the 7th term.\n    # first_term = 7th_term - (7 - 1) * common_difference\n    first_term = 105 - (7 - 1) * common_difference\n\n    # Now we can find the 100th term\n    nth_term = first_term + (100 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    number1 = int('45', 7)\n    number2 = int('66', 7)\n    sum_base10 = number1 + number2\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    return ans\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges_initial, lemons_initial = symbols('oranges_initial lemons_initial')\n\n    # Initial condition ratio\n    equation1 = Eq(oranges_initial / lemons_initial, 3/5)\n\n    # After selling 48 oranges condition ratio\n    equation2 = Eq((oranges_initial - 48) / lemons_initial, 1/2)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (oranges_initial, lemons_initial))\n\n    # Solution for the number of lemons initially\n    return solutions[lemons_initial]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    rabbits = 8\n    days = 5\n    carrots_per_day_per_rabbit = 4\n\n    total_carrots_in_barn = rabbits * days * carrots_per_day_per_rabbit\n\n    return total_carrots_in_barn\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Calculate how much of a bale a horse, cow, and sheep eat per day\n    horse_rate = 1/2\n    cow_rate = 1/3\n    sheep_rate = 1/12\n    \n    # Calculate total eating rate per day\n    total_rate = horse_rate + cow_rate + sheep_rate\n    \n    # Calculate how many days 22 bales will last\n    days = 22 / total_rate\n    \n    return days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    ans = (5 / 8) * 160\n    return ans\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    # Let m be the current age of the mother and d be the current age of the daughter.\n    # Let x be the number of years it will take for the daughter to reach her mother's age.\n    # Then, we have the following system of equations:\n    # m + x = 75 (1)\n    # m - d = d - 3 (2)\n    \n    # Solve equation (2) for x:\n    # x = m - d\n    # Substitute equation (2) into equation (1):\n    # m + (m - d) = 75\n    # 2m - d = 75\n    \n    # Rearrange equation (2) to find d:\n    # 2d = m + 3\n    \n    # Substitute 2d into the second equation:\n    # 2m - (m + 3) / 2 = 75\n    # Multiply everything by 2 to get rid of the fraction:\n    # 4m - m - 3 = 150\n    # 3m = 153\n    # m = 153 / 3\n    # m = 51\n\n    # The mother is currently 51 years old.\n    return 51\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    digits = '2014'  # These digits will be fixed in every date.\n    # Generate all possible 2-digit month and day combinations where 0, 1, 2 are equally represented.\n    # Since there are two 0s in '2014', there should be two 1s and two 2s in the month and day.\n    for month_day in permutations('011222', 4):\n        month = int(''.join(month_day[:2]))\n        day = int(''.join(month_day[2:]))\n        # Check if the month is valid (01-12)\n        if 1 <= month <= 12:\n            # Check if the day is valid. For simplicity, consider all months to have 31 days.\n            # For months with less than 31 days, the extra days will not form a valid date and hence not counted.\n            if 1 <= day <= 31:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # Since Isabella wants to make sure she gets 3 red apples, she might take out all non-red apples first.\n    # So, she takes out all 11 green and 7 yellow apples.\n    total_non_red_apples = 11 + 7\n\n    # Since she needs 3 red apples, she needs to take out 2 more to guarantee that.\n    total_red_apples_needed = 2\n\n    # The number of apples she needs to take out will be all the non-red plus two more red apples to ensure she has 3 red apples.\n    total_apples_needed = total_non_red_apples + total_red_apples_needed\n    \n    return total_apples_needed\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Assuming all boys are right-handed, there would be 30 - 16 = 14 boys,\n    # and therefore all 14 boys would be right-handed.\n    # The remainder of right-handed pupils would be the smallest number of girls\n    # that are right-handed since not all the girls are right-handed.\n    right_handed_girls = right_handed - (total_pupils - girls)\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = (20 - 19) + (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    total_spent = 6400\n    discount = 0.80  # 80% off\n    saved = total_spent / (1 - discount)\n    \n    return saved - total_spent\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    combinations = 6 * 5 // 2 # Total number of games played in a round-robin tournament\n    points = combinations * 2 # Each game gives out 2 points (either 2-0 or 1-1)\n    return points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    capacity_per_minibus = 8\n\n    minibuses_needed = (children + capacity_per_minibus - 1) // capacity_per_minibus\n    \n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    return 101 + 97 + 102 + 99 + 98 + 103 - 100\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Assuming the worst case where Jane picks the maximum number of marbles of the same color first.\n    # Since there are 4 red, she could pick all 4 red marbles first.\n    max_red = 4\n    \n    # Then, she could pick all 7 green ones.\n    max_green = 7\n    \n    # Then, she could pick all 6 blue ones.\n    max_blue = 6\n    \n    # At this point, no matter what she picks next, it would have to be an orange marble.\n    # So she just needs to pick one more to be sure she has all four colors.\n    one_orange = 1\n    \n    # The total number of marbles is the sum of all the maximums and one more.\n    ans = max_red + max_green + max_blue + one_orange\n    \n    return ans\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # There are 90 more boys than girls in the school.\n    equation1 = Eq(boys, girls + 90)\n    \n    # The ratio of the number of girls who can swim to the number of girls who can not swim is 31:49.\n    equation2 = Eq(girls_swim / girls_not_swim, 31 / 49)\n    equation3 = Eq(girls_swim + girls_not_swim, girls)\n    \n    # The number of boys who can swim is 120 less than the number of boys who can not swim.\n    equation4 = Eq(boys_swim, boys_not_swim - 120)\n    equation5 = Eq(boys_swim + boys_not_swim, boys)\n    \n    # There are 1690 pupils in the school.\n    equation6 = Eq(girls + boys, 1690)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), \n                      (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Calculate the number of pupils who cannot swim\n    total_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n    \n    return total_not_swim\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for number in range(1, 101):\n        if (number % 2 == 0) and (number % 3 == 0) and (number % 5 == 0) and (number % 7 == 6):\n            return number\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    n = 1\n    factorial_zeros = 0\n    \n    while factorial_zeros < 28:\n        n += 1\n        num = n\n        five_count = 0\n        \n        while num % 5 == 0:\n            num //= 5\n            five_count += 1\n        \n        factorial_zeros += five_count\n\n    ans = n - 1\n    return ans\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import isprime\n\n    ans = None\n    for a in range(2, 42): # since a is prime and 3a must be less than 41\n        if isprime(a):\n            for b in range(2, 42):\n                if isprime(b) and 3*a + 7*b == 41:\n                    ans = a + b\n                    return ans\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    price_per_tender_4pc = 7 / 4\n    price_per_tender_6pc = 8.5 / 6\n    return '4pc' if price_per_tender_4pc < price_per_tender_6pc else '6pc'\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n    bet_amount = 1\n    win_amount = 10\n    win_rolls = 0\n\n    # Calculate the total number of favorable outcomes\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            if dice1 + dice2 > 10:\n                win_rolls += 1\n\n    # Calculate the total number of possible outcomes\n    total_combinations = 6 * 6\n    \n    # Calculate the probability of winning\n    prob_win = win_rolls / total_combinations\n    \n    # Calculate expected winnings\n    expected_winnings = prob_win * win_amount\n    \n    # Calculate expected losses per roll\n    expected_loss_per_roll = bet_amount - expected_winnings\n    \n    # Total expected loss over 60 rolls\n    total_expected_loss = expected_loss_per_roll * total_rolls\n\n    return total_expected_loss\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from fractions import Fraction\n\n    # Let's denote the salary as 's'.\n    # Kiera spends $740 on a new phone.\n    # The remaining salary is then s - 740.\n\n    # Then 75% of the remaining salary is spent on rent.\n    # We are given that she has 1/5 of her salary left after these expenditures.\n\n    # Set up the equation to represent the situation:\n    # s - 740 (money spent on phone) - 0.75 * (s - 740) (money spent on rent) = 1/5 * s (money left)\n    # Simplify the above equation to find 's'.\n\n    # Let's solve the equation:\n    # 1.0 * s - 740 - 0.75 * (s - 740) = 1/5 * s\n    # 1.0 * s - 740 - 0.75s + 0.75 * 740 = 1/5 * s\n    # 0.25s + (0.75 * 740 - 740) = 1/5 * s\n    # 0.25s - 0.25 * 740 = 1/5 * s\n    # (0.25 - 1/5) * s = 0.25 * 740\n    # (5/20 - 4/20) * s = 740/4\n    # s/20 = 740/4\n    # s = 740/4 * 20\n\n    s = (740/4) * 20  # Calculate the salary\n\n    return s\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    total_weight_without_3_apples = 280\n    weight_of_3_apples = total_weight_with_apples - total_weight_without_3_apples\n    weight_of_5_apples = weight_of_3_apples * (5/3)\n    weight_of_basket = total_weight_with_apples - weight_of_5_apples\n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "def solution():\n    from itertools import permutations\n    numbers = '234'\n    unique_numbers = set()\n\n    # Get all permutations of the given numbers without repetitions\n    for i in range(1, len(numbers) + 1):\n        for permutation in permutations(numbers, i):\n            unique_numbers.add(int(''.join(permutation)))\n\n    ans = len(unique_numbers)\n    return ans\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    # Start from 02:31 and look for the next time when 0, 1, 2, 3 all appear together\n    time = [0, 2, 3, 1]  # corresponds to 02:31\n    minutes_passed = 0\n\n    while True:\n        # Increment minutes\n        time[2] += 1\n        if time[2] == 10:\n            time[2] = 0\n            time[1] += 1\n\n        # Increment hours if needed\n        if time[1] == 10:\n            time[1] = 0\n            time[0] += 1\n\n        # Reset to 01:00 from 09:59\n        if time[0] == 1 and time[1] == 0 and time[2] == 0:\n            time[3] = 0\n            \n        minutes_passed += 1\n\n        # Check if the current time contains the digits 0, 1, 2, 3\n        if set(time) == {0, 1, 2, 3}:\n            break\n\n    return minutes_passed\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    after_class = 150 + 100\n    originally = after_class * 2\n    return originally\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n\n    equation1 = Eq(lynn - 160, mary - 58)\n    equation2 = Eq(mary - 58, 3 * (lynn - 160))\n\n    solutions = solve((equation1, equation2), (lynn, mary))\n\n    return solutions[lynn] - 160\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n\n    def triangle(A, B):\n        return 5 * A - B * B\n\n    ans = triangle(diamond(4, 2), 6)\n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * 3/7\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * 3/8\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    \n    bag_weight = 3/4\n    num_bags = remaining_after_tuesday / bag_weight\n    \n    return int(num_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    remaining_tickets = 28\n    sold_percentage = 60 / 100\n    total_capacity = remaining_tickets / (1 - sold_percentage)\n\n    return int(total_capacity)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_classes = 6\n    sixth_grade_classes = 3\n    fifth_grade_students_per_class = 36\n    sixth_grade_students_per_class = 38\n\n    total_fifth_grade_students = fifth_grade_classes * fifth_grade_students_per_class\n    total_sixth_grade_students = sixth_grade_classes * sixth_grade_students_per_class\n\n    total_students = total_fifth_grade_students + total_sixth_grade_students\n\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = (quotient + 1)  # since quotient = (dividend - remainder) / divisor\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    deⅵ, jerry = symbols('deⅵ jerry')\n\n    equation1 = Eq(deⅵ, jerry + 8)\n    equation2 = Eq((deⅵ + 4)/(jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (deⅵ, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum([64, 60, 56, 52, 48, 44]) - sum([62, 58, 54, 50, 46])\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Let's represent the actual number that Serene wanted to subtract as 'ab'\n    # and let the incorrect number she used as 'a5b3'.\n\n    for a in range(1, 10):  # 'a' could be any digit from 1 to 9 for tens place\n        for b in range(0, 10):  # 'b' could be any digit from 0 to 9 for ones place\n            actual_num = 10 * a + b\n            incorrect_subtrahend = 10 * a + 5\n            correct_subtrahend = 10 * a + 3\n            mistaken_num = 10 * (5 - a) + (3 - b)\n\n            correct_diff = actual_num - correct_subtrahend\n            incorrect_diff = actual_num - incorrect_subtrahend\n\n            # Checking if the incorrect difference is 36 as per the question\n            if mistaken_num == 36:\n                return correct_diff\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    num = symbols('num')\n    equation = Eq(5 * num - 4, 41)\n\n    solved_num = solve(equation, num)\n\n    return solved_num[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jug_capacity = 250\n\n    num_jugs = (total_ml + jug_capacity - 1) // jug_capacity\n\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1  # 49 red balls and 1 blue ball\n    \n    # Let x be the number of red balls to be removed.\n    # We want the percentage of red balls to be 90% after removing x red balls.\n    # So the new total number of balls will be (total_balls - x) and the number of red balls will be (49 - x).\n    # We set up the equation: (49 - x) / (total_balls - x) = 0.9\n    \n    # By solving for x, we have:\n    # (49 - x) = 0.9 * (total_balls - x)\n    # 49 - x = 0.9 * (50 - x)\n    # 49 - x = 45 - 0.9x\n    # 49 - 45 = x - 0.9x\n    # 4 = 0.1x\n    # x = 4 / 0.1\n    # x = 40\n\n    x = 40  # Number of red balls to remove\n    return x\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    result = 0\n    numerator = 100\n    denominator = 97\n    for i in range(0, 98):\n        result += numerator / denominator\n        numerator *= (99 - i)\n        denominator *= (97 - i)\n    return result\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    weight_of_empty_box = 12\n    weight_of_matches = total_weight_with_matches - weight_of_empty_box\n    number_of_matches = 220\n\n    weight_per_match = weight_of_matches / number_of_matches\n\n    return weight_per_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, birds = symbols('cows birds')\n\n    equation1 = Eq(cows + birds, 1300)      # Total number of animals\n    equation2 = Eq(4*cows + 2*birds, 3440)  # Total number of legs\n\n    solutions = solve((equation1, equation2), (cows, birds))\n\n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    ans = sum(n % i == 0 for i in range(1, n + 1))\n    return ans\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for velocities\n    v_f = symbols('v_f')\n\n    # Masses of the cars\n    m1 = m2 = 500  # kg\n\n    # Velocities of the cars before impact\n    v1_north = 20  # m/s (due north)\n    v2_west = 30   # m/s (due west)\n\n    # Conservation of momentum in the north direction (y-axis)\n    momentum_north = Eq(m1 * v1_north + 0, (m1 + m2) * v_f)\n\n    # Conservation of momentum in the west direction (x-axis)\n    momentum_west = Eq(0 - m2 * v2_west, 0)\n\n    # Solve the system of equations\n    solutions = solve((momentum_north, momentum_west), (v_f))\n\n    # The final velocity vector is the same magnitude as the northward velocity\n    # but it has a directional component (northward and 0 westward)\n    return solutions[v_f]\n\n# Storing the final velocity in ans\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    # Greatest 3-digit number is 999, so we start from 999 and go backwards until we find a number that fits the criteria\n    for num in range(999, 99, -1):\n        # The number must be odd and divisible by 9\n        if num % 2 == 1 and num % 9 == 0:\n            # Convert the number into string to access the tens digit\n            str_num = str(num)\n            # Check if the tens digit is divisible by 4\n            if int(str_num[1]) % 4 == 0:\n                # If the number fits the criteria, return it as the largest possible number\n                return num\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens = 83\n    pens_given_to_ben = 28\n    ben_pens = (jenny_pens - pens_given_to_ben) / 2\n    return ben_pens\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    weeks = 8\n    total_books = books_per_week * weeks\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    total_length = 2 * (21 - 1)  # Since there are trees at both ends, calculate the total length\n    num_lamp_posts = (total_length // 10) + 1  # Calculate the number of lamp posts needed at 10m intervals, including both ends\n    return num_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n    total_cost = 14438\n    combo_cost = 2960\n\n    equation1 = Eq(5 * laptop + 4 * dvd_player, total_cost)\n    equation2 = Eq(laptop + dvd_player, combo_cost)\n\n    solutions = solve((equation1, equation2), (laptop, dvd_player))\n\n    return solutions[dvd_player]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    # There are 3 different sizes\n    sizes = 3\n    # Each size has 5 available colours\n    colours_per_size = 5\n    # Total number of different types of handbags\n    total_handbags = sizes * colours_per_size\n    \n    return total_handbags\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    # Let x be the total weight of the group before Aaron joined, and n the number of people\n    # Average weight before Aaron = x / n\n    # After Aaron joined, the total weight is x + 45 and the number of people is n + 1.\n    # New average after Aaron = (x + 45) / (n + 1) = 61\n\n    # After Ben joined, the total weight is x + 45 + 71 and the number of people is n + 2.\n    # New average after Ben = (x + 116) / (n + 2) = 62\n\n    # Setting up two equations based on the above information:\n    # (x + 45) / (n + 1) = 61 => x + 45 = 61(n + 1)\n    # (x + 116) / (n + 2) = 62 => x + 116 = 62(n + 2)\n\n    # Solve the two equations to get x and n\n    from sympy import symbols, Eq, solve\n    n, x = symbols('n x')\n    equation1 = Eq(x + 45, 61 * (n + 1))\n    equation2 = Eq(x + 116, 62 * (n + 2))\n\n    solutions = solve((equation1, equation2), (x, n))\n\n    # Calculate the original average weight (before Aaron joined)\n    original_average = solutions[x] / solutions[n]\n\n    return original_average\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        square, circle, triangle = perm\n        if square == 0:  # Square can't be 0 because it's the leading digit in a 3-digit number\n            continue\n        \n        num1 = (square * 100) + (circle * 10) + square\n        num2 = (circle * 100) + (triangle * 10) + circle\n        sum_num = num1 + num2\n        \n        # Check if the sum is a 3 digit number with all distinct digits and square as the first digit\n        if len(set(str(sum_num))) == 3 and str(sum_num)[0] == str(square):\n            return triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    # Initialize counter for pairs\n    count = 0\n    \n    # Iterate through all possible pairs\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern = '12345'\n    pattern_length = len(pattern)\n    num_repetitions = 2000 // pattern_length\n    remaining_digits = 2000 % pattern_length\n\n    sum_full_patterns = sum(map(int, pattern)) * num_repetitions\n    sum_remaining_digits = sum(map(int, pattern[:remaining_digits]))\n\n    return sum_full_patterns + sum_remaining_digits\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15\n    coffee_cost = 3.69\n    milk_cost = 0.89\n\n    sugar_cost = total_cost - (coffee_cost + milk_cost)\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hour in range(1, 12):\n        if hour == (12 - hour) * 2:\n            return hour\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Worst case, Sheila takes out all but 3 of the blue balls\n    max_blue = 5 - 3\n    \n    # Worst case, Sheila takes out all but 3 of the orange balls\n    max_orange = 4 - 3\n\n    # Worst case, Sheila takes out all but 3 of the yellow balls\n    max_yellow = 2 - 1\n    \n    # Add 1 to the result because we are looking for the first ball that would guarantee\n    # having at least 4 balls of the same color\n    balls_to_take = max_blue + max_orange + max_yellow + 1\n    \n    return balls_to_take\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    return 2.3 + 9.7 + 5.2 - 2.2\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    price_oranges_per_kg = 1.5\n    price_mangoes_per_kg = 2.3\n    weight_oranges = 4.1\n    weight_mangoes = 2\n\n    total_cost = (price_oranges_per_kg * weight_oranges) + (price_mangoes_per_kg * weight_mangoes)\n\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    mean_value = 5\n    numbers = [2, 3, 8, 4, 7, 6]\n    sum_of_numbers = mean_value * (len(numbers) + 1) # including 'a'\n    a = sum_of_numbers - sum(numbers)\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Work rate of A\n    rate_A = 1 / 15\n    # Work rate of B\n    rate_B = 1 / 10\n    \n    # Combined work rate of A and B\n    combined_rate = rate_A + rate_B\n    \n    # Work done by A and B together in 4 days\n    work_done_4_days = 4 * combined_rate\n    \n    # Remaining work that needs to be done after 4 days\n    remaining_work = 1 - work_done_4_days\n    \n    # Days for B to finish the remaining job\n    days_for_B_to_finish = remaining_work / rate_B\n\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate sum of first half of pyramid: 1 to 13\n    n = 13\n    first_half = (n * (n + 1)) // 2\n    \n    # Calculate sum of second half of pyramid: 13 to 1\n    # Ignore the last number 13 as it is already counted in the first half\n    second_half = first_half - 13\n    \n    # Return sum of first half and second half\n    return first_half + second_half\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    discount = original_price - reduced_price\n    discount_percentage = (discount / original_price) * 100\n    return discount_percentage\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    boys_excess = 52\n\n    # Start with the smallest possible odd square, which will\n    # represent girls since boys form the outside square and are more\n    for girls_side in range(1, 100, 2):  # Assuming the number of students won't exceed 10000\n        boys_side = girls_side + 2  # Boys form the square around the girls\n        total_girls = girls_side ** 2\n        total_boys = boys_side ** 2 - total_girls\n\n        if total_boys - total_girls == boys_excess:\n            # Calculate total students\n            total_students = total_boys + total_girls\n            return total_students\n\n    # If no solution was found, return None or an appropriate flag\n    return None\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    num_bottles = 1000\n    test_tubes = 0\n    \n    while 2 ** test_tubes < num_bottles:\n        test_tubes += 1\n        \n    return test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    num = 100\n    while True:\n        if (num % 5 == 1) and (num % 6 == 1) and (num % 7 == 1):\n            return num\n        num += 1\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Given leg counts\n    duck_legs = 4 * 2  # each duckling has 2 legs\n    goose_legs = 2 * 2 # each baby goose has 2 legs\n\n    # Remaining legs for lambs after considering ducks and geese\n    remaining_legs = 36 - (duck_legs + goose_legs)\n\n    # Each lamb has 4 legs\n    num_lambs = remaining_legs // 4\n\n    return num_lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    litres = 2.5\n    ml_per_litre = 1000\n    n = litres * ml_per_litre\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n    day4_multiplier = 4 / 3\n    day3_multiplier = 5 / 4\n    day2_multiplier = 6 / 5\n    day1_multiplier = 7 / 6\n\n    initial_sweets = remaining_sweets * day4_multiplier * day3_multiplier * day2_multiplier * day1_multiplier\n\n    return int(initial_sweets)\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of cookies Charlene had initially be x.\n    x = symbols('x')\n\n    # Charlene kept half of the cookies plus 8.\n    # Total cookies Charlene kept: 1/2 * x + 8\n\n    # Emerald got the remaining cookies: x - (1/2 * x + 8)\n    # Emerald ate 1/3 of the cookies she got plus 4.\n    # Cookies after Emerald ate: (x - (1/2 * x + 8)) / 3 - 4\n\n    # Hebe got the remaining cookies: ((x - (1/2 * x + 8)) - (1/3 * (x - (1/2 * x + 8)) + 4))\n    # Hebe ate 1/4 of the cookies she got and had 42 left.\n    # Equation: (number of cookies Hebe received) / 4 + 42 = (number of cookies Hebe received)\n\n    hebe_cookies = ((x - (1/2 * x + 8)) - (1/3 * (x - (1/2 * x + 8)) + 4))\n    equation = Eq(hebe_cookies / 4 + 42, hebe_cookies)\n\n    # Solve the equation for x to find the total initial number of cookies.\n    ans = solve(equation, x)[0]\n    return ans\n\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    # Using arithmetic sequence formula: n = (last - first) / difference + 1\n    num_kids = (last_term - first_term) // difference + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teams = symbols('teams')\n\n    # Each team plays every other team twice\n    equation = Eq(teams * (teams - 1) / 2 * 2, 30)\n\n    # Solve for the number of teams\n    num_teams = solve(equation, teams)\n\n    # There should be two solutions, positive and negative, we need the positive one\n    return [team for team in num_teams if team.is_positive][0]\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    sets_made_in_5_days = 720\n    total_sets = 3600\n\n    days_for_total_sets = (total_sets / sets_made_in_5_days) * 5\n\n    return int(days_for_total_sets)\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Calculate the number of ways to reach the 5th step\n    ways_to_fifth = [0] * (5 + 1)\n    ways_to_fifth[0] = ways_to_fifth[1] = 1\n\n    for i in range(2, 5 + 1):\n        ways_to_fifth[i] = ways_to_fifth[i - 1] + ways_to_fifth[i - 2]\n\n    # Calculate the number of ways to reach the 10th step from the 5th step\n    ways_from_fifth_to_tenth = [0] * (10 + 1)\n    ways_from_fifth_to_tenth[5] = 1\n\n    for i in range(6, 10 + 1):\n        ways_from_fifth_to_tenth[i] = ways_from_fifth_to_tenth[i - 1] + ways_from_fifth_to_tenth[i - 2]\n\n    # The total number of ways to reach the 10th step\n    return ways_to_fifth[5] * ways_from_fifth_to_tenth[10]\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Equations based on the problem statement\n    equation1 = Eq(first, second + 1099)\n    equation2 = Eq(third, second - 877)\n    equation3 = Eq(first + second + third, 7656)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    # Return the value of the second number\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 45\n\n    equation = Eq(girls, 3 * boys - 21)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    from sympy import primerange\n\n    # Get prime factors of the numbers\n    primes = list(primerange(1, 30))\n    \n    # Initial count of 2s and 5s which give us zeros at the end of product\n    count_2 = 0\n    count_5 = 0\n\n    # List of numbers in the product\n    numbers = [2, 2, 2, 3, 8, 5, 5, 25]\n\n    # Count the factors of 2 and 5 in each number\n    for number in numbers:\n        while number % 2 == 0:\n            number //= 2\n            count_2 += 1\n        while number % 5 == 0:\n            number //= 5\n            count_5 += 1\n\n    # The number of zeros at the end is determined by the number of pairs of 2 and 5\n    return min(count_2, count_5)\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for n in range(40, 51):\n        if (n**0.5).is_integer():\n            return int(n)\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_amount = 150\n    cup_size = 40\n    cups_poured = 3\n    remaining_water = initial_amount - (cup_size * cups_poured)\n    \n    return remaining_water\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    \n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n    \n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    from math import factorial\n\n    for n in range(1, 100):\n        if factorial(n) * (n + 1) * (n + 2) * (n + 3) == 3024:\n            return n + 3  # the largest of the four consecutive numbers\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    return 527 - 9\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let 'alan' be the number of cards Alan has, then Bob has 'alan + 15' cards\n    alan, bob = symbols('alan bob')\n\n    # Bob has 15 more cards than Alan\n    equation1 = Eq(bob, alan + 15)\n\n    # Colin gives Bob 25 more cards\n    # After receiving cards, Bob has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n\n    # Determine the least common multiple of the pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Calculate the minimum number of packs needed to get at least 1000 markers\n    min_packs = -(-1000 // pack_lcm)  # Ceiling division\n\n    # Calculate the total number of markers and packs Mr Manson will get\n    min_markers = pack_lcm * min_packs\n\n    # Determine how many packs of each type he must buy\n    packs_of_6 = min_markers // 6\n    packs_of_8 = min_markers // 8\n    packs_of_9 = min_markers // 9\n    packs_of_15 = min_markers // 15\n\n    # The total number of packs is the same for each type because Mr Manson buys equal number of packs of the four different sizes\n    total_packs = packs_of_6\n\n    return total_packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    n = 10\n    # handshake with each other student\n    # each pair shakes hands only once\n    handshakes = (n * (n - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    ans = 34 * 19\n    return ans\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    def convert_recurring_decimal_to_fraction(a_non_repeating, a_repeating):\n        # Convert a recurring decimal to a fraction\n        non_repeating_len = len(a_non_repeating)\n        repeating_len = len(a_repeating)\n        \n        denominator = (10**repeating_len - 1) * (10**non_repeating_len)\n        numerator = int(a_non_repeating + a_repeating) - int(a_non_repeating)\n\n        return numerator, denominator\n\n    # For the recurring decimals 0.1(1)99251(7), 0.2(3)456(7), we extract the non-repeating and repeating parts\n    numerator1, denominator1 = convert_recurring_decimal_to_fraction('1', '1992517')\n    numerator2, denominator2 = convert_recurring_decimal_to_fraction('2', '34567')\n\n    lcm_denominator = denominator1 * denominator2 // math.gcd(denominator1, denominator2)\n\n    # Convert to common denominator\n    factor1 = lcm_denominator // denominator1\n    factor2 = lcm_denominator // denominator2\n    adjusted_numerator1 = numerator1 * factor1\n    adjusted_numerator2 = numerator2 * factor2\n\n    # Find n by checking each decimal place\n    n = 1\n    while True:\n        digit1 = (adjusted_numerator1 * 10 ** n) // lcm_denominator % 10\n        digit2 = (adjusted_numerator2 * 10 ** n) // lcm_denominator % 10\n        if digit1 == digit2 == 7:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n\n    anne_apples = solve(total_apples, anne)\n\n    return anne_apples[0]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    numbers = [678, 6798, 6879, 9876, 6987]\n    target = 6789\n    differences = [abs(target - number) for number in numbers]\n    closest_number_index = differences.index(min(differences))\n    return numbers[closest_number_index]\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    diff = (20 / 100) * 90 - (90 / 100) * 20\n    return diff\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    total_pages = 550\n    first_day_pages = 30\n    last_day_pages = 70\n    \n    # Since he reads an arithmetic sequence of pages,\n    # The number of terms (days) in the sequence is\n    # n = (last_term - first_term) / difference + 1\n    # Also, sum of the arithmetic sequence is\n    # S = (n/2) * (first_term + last_term)\n    # So we can equate S with total_pages to find the difference.\n    \n    # We have two equations:\n    # (1) total_pages = (n/2) * (first_day_pages + last_day_pages)\n    # (2) last_day_pages = first_day_pages + (n - 1) * difference\n    \n    # From equation (2) we have:\n    # difference = (last_day_pages - first_day_pages) / (n - 1)\n    # Let's substitute difference into equation (1):\n    \n    # total_pages = (n/2) * (first_day_pages + first_day_pages + (n - 1) * ((last_day_pages - first_day_pages) / (n - 1)))\n    # Simplify equation:\n    # total_pages = n * first_day_pages + (n*(n - 1)/2) * ((last_day_pages - first_day_pages) / (n - 1))\n    \n    # Now we will solve for n:\n    # total_pages = n * first_day_pages + (n/2) * (last_day_pages - first_day_pages)\n    # 2 * total_pages = 2 * n * first_day_pages + n * (last_day_pages - first_day_pages)\n    # 2 * total_pages = n * (2 * first_day_pages + (last_day_pages - first_day_pages))\n    # n = 2 * total_pages / (2 * first_day_pages + (last_day_pages - first_day_pages))\n    \n    # Calculate number of days (terms in the arithmetic sequence)\n    n = 2 * total_pages / (2 * first_day_pages + (last_day_pages - first_day_pages))\n    # Now find the difference by using equation (2)\n    difference = (last_day_pages - first_day_pages) / (n - 1)\n    \n    return int(difference)\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    more_fruit_in_morning = morning_fruit - afternoon_fruit\n\n    return more_fruit_in_morning\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_amount = 10\n\n    water_amount = (water_ratio * orange_amount) / orange_ratio\n    \n    return water_amount\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    target_average = 8.5\n    total_scores_needed = target_average * 5\n    current_total = sum(scores)\n    score_needed = total_scores_needed - current_total\n    \n    return score_needed\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2*x - 5), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the interest rate as a decimal\n    interest_rate = symbols('interest_rate')\n\n    # Since the interest accrued is over two years, the equation for the total money after two years is:\n    # Total = Principal * (1 + interest_rate) * (1 + interest_rate)\n    # The interest is the Total minus the Principal amount (816 = 10000 * (1 + interest_rate)^2 - 10000)\n    # Simplifying this equation:\n    # 10816 = 10000 * (1 + interest_rate)^2\n    # Let's solve for interest_rate\n    equation = Eq(10000 * (1 + interest_rate)**2, 10000 + 816)\n\n    # Solve the equation for interest_rate\n    solutions = solve(equation, interest_rate)\n\n    # We pick the positive solution since interest rate cannot be negative\n    interest_rate_solution = max(solutions)\n\n    # Convert the decimal interest rate to a percentage\n    interest_rate_percent = interest_rate_solution * 100\n\n    return round(interest_rate_percent, 2)\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Johnny should multiply the quotient by the divisor, not the remainder\n    product = quotient * divisor\n\n    # Then add the remainder to this product\n    correct_answer = product + remainder\n\n    return correct_answer\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    result = (43 - 7) / 2\n    return result\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the speed of Hannah in cm/s\n    x = symbols('x')\n    \n    # Speed of Peter is 15 cm/s faster than Hannah\n    speed_of_peter = x + 15\n    \n    # Considering the ratio of time taken (speed is inverse of time for constant distance)\n    # Time of Peter : Time of Hannah = 3 : 4\n    \n    # Since for a constant distance, time is inversely proportional to speed,\n    # We can write this as ratio of their speeds = 4 : 3\n    equation = Eq(4 * x, 3 * (x + 15))\n\n    # Solve the equation\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for mango, pear and apple prices\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins Owen originally had.\n    fifty_cents, one_dollar, x = symbols('fifty_cents one_dollar x')\n\n    # Original amount of fifty-cent coins.\n    equation1 = Eq(fifty_cents, 2 / 7 * x)\n\n    # Original amount of one-dollar coins.\n    equation2 = Eq(one_dollar, 5 / 7 * x)\n\n    # After receiving more coins from his mother.\n    equation3 = Eq(one_dollar + 10, 2 * (fifty_cents + 10))\n\n    # Solving the equations.\n    solutions = solve((equation1, equation2, equation3), (fifty_cents, one_dollar, x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_multiple_choices = 23\n    time_spent_fill_in_the_blank = 35\n\n    time_remaining = total_time - time_spent_multiple_choices - time_spent_fill_in_the_blank\n\n    return time_remaining\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_length = 850  # in meters\n    time_to_cross = 45  # in seconds\n    train_speed = 30    # in meters per second\n\n    # The train covers its own length plus the length of the tunnel in the given time\n    tunnel_length = (train_speed * time_to_cross) - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    # Maximum number of parts created by n circles is given by n^2 + n + 1\n    max_parts_by_circles = circles**2 + circles + 1\n    # A line can intersect each circle at most 2 times,\n    # with each intersection increasing the number of parts by 1\n    max_parts_by_line = circles * 2\n    # Total maximum parts = Parts by circles + additional parts by line\n    total_max_parts = max_parts_by_circles + max_parts_by_line\n    return total_max_parts\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from itertools import permutations\n\ndef solution():\n    entrances = [1, 2, 3, 4]  # Represent the four entrances\n    people = 'JMT'  # Represent Joe, Mike, and Tina\n\n    total_ways = 0\n    for perm in permutations(entrances, len(people)):\n        # perm[0] corresponds to Joe, perm[1] to Mike, perm[2] to Tina\n        # if Joe and Mike do not use the same entrance, count the permutation\n        if perm[0] != perm[1]:\n            total_ways += 1\n\n    return total_ways\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    pocket_money = 55\n    amount_saved = 32.50\n    amount_spent = pocket_money - amount_saved\n\n    transportation = amount_spent / 3\n    food = 2 * transportation\n\n    return food\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # cost for the first 3 tons\n    first_3_tons_cost = 4 * 3\n    \n    # fixed service fee\n    service_fee = 4 \n    \n    # subtract the fixed costs from the total amount\n    remaining_amount = 109 - first_3_tons_cost - service_fee\n    \n    # calculate the number of additional tons she can use\n    additional_tons = remaining_amount // 3\n    \n    # add the first 3 tons to the additional tons she can use\n    total_tons = 3 + additional_tons\n    \n    return total_tons\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9, 3258 % 9\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of cookies each person has\n    amelia = symbols('amelia')\n    bala = symbols('bala')\n    carl = symbols('carl')\n    daniel = symbols('daniel')\n    \n    # Amelia had 160 cookies; this is given\n    equation1 = Eq(amelia, 160)\n    \n    # Bala had 320 more cookies than Daniel\n    equation2 = Eq(bala, daniel + 320)\n    \n    # Bala had half as many cookies as Amelia, Carl, and Daniel\n    equation3 = Eq(bala, (amelia + carl + daniel)/2)\n    \n    # Carl had three fourths as many cookies as Amelia, Bala and Daniel\n    equation4 = Eq(carl, (3/4) * (amelia + bala + daniel))\n    \n    # They had 6230 cookies in total\n    equation5 = Eq(amelia + bala + carl + daniel, 6230)\n    \n    # Solve the system of equations for the variables\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (amelia, bala, carl, daniel))\n    \n    # Extract the solution for Daniel's number of cookies\n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    divisor = 15\n    remainder = 6\n    quotient = 15\n\n    smallest_dividend = divisor * quotient + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote quick gardener's work rate as q and lazy gardener's work rate as l.\n    q, l = symbols('q l')\n\n    # As per the problem statement, two gardeners combined mow the lawn in 8 hours.\n    # This means their combined work rate is 1/8 of the lawn per hour.\n    equation1 = Eq(q + l, 1/8)\n\n    # Quick gardener alone can mow the lawn in 12 hours,\n    # meaning his work rate is 1/12 of the lawn per hour.\n    equation2 = Eq(q, 1/12)\n\n    # Solve the system of equations for q and l.\n    solutions = solve((equation1, equation2), (q, l))\n\n    # Lazy gardener's work rate is found from the solutions.\n    lazy_work_rate = solutions[l]\n\n    # If lazy gardener's work rate is l of the lawn per hour,\n    # it would take him 1/l hours to mow the entire lawn.\n    lazy_time = 1 / lazy_work_rate\n\n    return lazy_time\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    # Equation representing the relation between number of apples and oranges\n    equation1 = Eq(oranges, apples + 32)\n    # Equation representing the total fruits left after giving away\n    equation2 = Eq((apples - apples/3) + (oranges - oranges/2), 100)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    # Total fruits at first is the sum of apples and oranges\n    total_fruits = solutions[apples] + solutions[oranges]\n    \n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9 + 0  # Eve's + Alice's + Irene's candies\n    number_of_girls = 3\n    candy_per_girl = total_candy / number_of_girls\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n    \n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n    \n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n    \n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    tomatoes_given = 7\n    \n    belinda_after = belinda_tomatoes - tomatoes_given\n    matthew_initial = belinda_after - tomatoes_given\n\n    return matthew_initial\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(182 - 5*x - 3*x, 5*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    # [2017] is the greatest integer less than or equal to 2017, which is simply 2017\n    # {201.7} is the fractional part of 201.7, which we obtain by 201.7 - floor(201.7)\n    # [20.17] is the greatest integer less than or equal to 20.17, which is floor(20.17)\n    # {2.017} is the fractional part of 2.017, which we obtain by 2.017 - floor(2.017)\n\n    result = floor(2017) - (201.7 - floor(201.7)) + floor(20.17) - (2.017 - floor(2.017))\n    \n    return result\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import lcm\n\n    green_line_interval = 5\n    red_line_interval = 6\n\n    # Find least common multiple of the two intervals\n    interval_lcm = lcm(green_line_interval, red_line_interval)\n\n    # Calculate the next time both trains will set out together\n    hours = interval_lcm // 60\n    minutes = interval_lcm % 60\n\n    # Starting time is 5 am\n    start_hour = 5\n    next_hour = start_hour + hours\n    next_minute = minutes\n\n    # Format the time\n    if next_minute < 10:\n        next_minute = '0' + str(next_minute)\n    ans = f\"{next_hour}:{next_minute}\"\n\n    return ans\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    ans = 2\n    term = 1\n    for i in range(2, 14, 2):\n        term *= i * (i + 1)\n        ans += term\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity_ml = 990\n    half_jug = jug_capacity_ml / 2\n    cup_capacity = half_jug / 3\n\n    return cup_capacity\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # The distance between the first tree and the 101st tree\n    distance_covered = 100 * 3  # There are 100 intervals of 3 meters each\n    # Time taken to cover this distance is 3 minutes (given)\n    time_taken = 3\n    # Find the walking speed of Olivia (distance/time)\n    walking_speed = distance_covered / time_taken\n    # Total distance from school to home is given to be 4000 meters\n    total_distance = 4000\n    # Time to travel the total distance (distance/speed)\n    total_time = total_distance / walking_speed\n    # Since we need the time in minutes, we convert it from hours to minutes by multiplying by 60\n    # Return the total time in minutes\n    return total_time\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    result = 77.5 * 52 / 100 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n\n    position_from_back = total_cars - position_from_front + 1\n\n    return position_from_back\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # equations based on the given information\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    nearest_thousand = round(number, -3)\n    return nearest_thousand\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    n = 124 // 4\n    sum_of_sequence = (n * (n + 1) // 2) ** 2\n    ans = sum_of_sequence * 4 ** 2\n    return ans\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    return sum([(6 + 5*i) ** 2 for i in range((51 - 6) // 5 + 1)])\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    ans = 2017 + 597\n    return ans\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen the fisher traded 5 fish for 2 rabbits: 5 fish / 2 rabbits\n    # Oscar the hunter traded 4 rabbits for 7 packs of wheat: 4 rabbits / 7 packs of wheat\n\n    # Find the ratio of fish to packs of wheat by multiplying the two ratios:\n    # (5 fish / 2 rabbits) * (4 rabbits / 7 packs of wheat) = (5 * 4) fish / (2 * 7) packs of wheat\n    # Simplifies to 20 fish / 14 packs of wheat\n\n    # We need to find how many fish Owen should give Dennis for 14 packs of wheat.\n    # The ratio is already in terms of 14 packs of wheat, so Owen should give Dennis 20 fish for 14 packs of wheat.\n\n    return 20\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    entrances = [1, 2, 3]  # the three entrances\n\n    # Generate all permutations of people entering through the entrances\n    all_permutations = list(permutations(entrances * 4, 4))\n    valid_permutations = set()\n\n    for perm in all_permutations:\n        if len(set(perm)) != 1:  # At least one person must enter through each entrance\n            valid_permutations.add(perm)\n\n    return len(valid_permutations)\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_questions = 6\n    marks_per_correct = 5\n    penalty_per_wrong = -2\n    total_score = 23\n\n    # Let's assume all answers were correct initially\n    correct_answers = (total_score + total_questions * penalty_per_wrong) / (marks_per_correct - penalty_per_wrong)\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for the number of animals\n    initial_cows, initial_goats = symbols('initial_cows initial_goats')\n\n    # Initial situation: 65% of the animals are cows\n    initial_total = initial_cows + initial_goats\n    equation1 = Eq(initial_cows, 0.65 * initial_total)\n\n    # After adding 240 animals, cows represent 85% of the farm\n    # and the number of goats has doubled\n    new_total = initial_total + 240\n    equation2 = Eq(initial_cows + 240, 0.85 * new_total)\n    equation3 = Eq(2 * initial_goats, new_total - (initial_cows + 240))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (initial_cows, initial_goats))\n\n    # Return the number of goats initially\n    return solutions[initial_goats]\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    justin = Symbol('justin')\n\n    # Create the equation based on the question\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    # Solve the equation for Justin's age\n    justin_age = solve(equation, justin)\n\n    return justin_age[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    total_drawings = 111\n\n    total_time = time_per_drawing * total_drawings\n\n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            break\n    return cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    return 378 - 196\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (3, 6)]\n    num, _ = solve_congruence(*congruences)\n    \n    while num < 100:\n        return num\n        num += 4*5*6\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    first_number = 2.6\n    second_number = 4.8\n    midpoint = (first_number + second_number) / 2\n    return midpoint\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    if total_cost >= 50:\n        total_cost -= 15\n    elif total_cost >= 20:\n        total_cost -= 4\n    return total_cost\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    return 828 + 191\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "from math import factorial\n\ndef solution():\n    # There are 2 boys and they can be arranged in 2! ways, since there will be one boy at each end.\n    boys_permutations = factorial(2)\n    # There are 3 girls and they can be arranged in 3! ways, in the middle.\n    girls_permutations = factorial(3)\n    \n    # The total number of ways they can be seated is the product of the boys' permutations and the girls' permutations.\n    total_arrangements = boys_permutations * girls_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    # Tom's age is a multiple of 3, so he can't be 10\n    # Jason is younger than Tom, so Jason can't be 10\n    # By elimination, Adam is 10 years old\n    return 10\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Since we want to guarantee 3 different colored balls,\n    # in the worst-case scenario, we could draw all balls of two colors first.\n    # That is, 5 red and 5 white balls, for instance.\n    # After this, we draw one more ball to ensure we have 3 different colors.\n    # So the minimum number of balls to draw = 5 (red) + 5 (white) + 1 (yellow) = 11.\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    n = 1\n    while True:\n        num = int('2023' * n)\n        if num % 11 == 0:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    return 224 - 75\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = symbols('b')\n    equation = Eq(4*b - 9, 7)\n    solution = solve(equation, b)\n    return solution[0]\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    max_apples = 0\n    total_apples = 28\n    for avril_apples in range(1, total_apples - 5):  # Avril gets at least one apple\n        remaining_apples = total_apples - avril_apples\n        # Allocate increasing number of apples to the five children\n        child_apples = 1\n        for child in range(5):\n            remaining_apples -= child_apples\n            child_apples += 1\n        # If we managed to give all children at least one apple, and they all have different amounts:\n        if remaining_apples == 0:\n            max_apples = max(max_apples, avril_apples)\n    return max_apples\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_spent = 5 / 8\n    cost_of_laptop = total_money * fraction_spent\n\n    return cost_of_laptop\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    # Lori's speed is 2 meters per second\n    lori_speed_mps = 2\n    # The ratio of Joyce's speed to Lori's speed is 3:2\n    joyce_speed_mps = (3 / 2) * lori_speed_mps\n    # Calculate the distance Joyce can run in 10 seconds\n    distance = joyce_speed_mps * 10\n    return distance\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    initial_average = 60\n    final_average = 70\n\n    # The sum of original two numbers\n    initial_sum = initial_average * 2\n    # The sum of all three numbers needed to have an average of 70\n    final_sum = final_average * 3\n    # The newly added number is the difference between the final sum and initial sum\n    new_number = final_sum - initial_sum\n\n    return new_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    time_left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    time_bus_caught = datetime.strptime(\"16:01\", \"%H:%M\")\n    time_bus_trip = timedelta(minutes=18)\n    time_got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    time_spent_walking_to_bus = time_bus_caught - time_left_school\n    time_spent_walking_home = time_got_home - (time_bus_caught + time_bus_trip)\n\n    total_walking_time = time_spent_walking_to_bus + time_spent_walking_home\n\n    return total_walking_time.seconds // 60\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    difference = 23 - 16\n    last_term = 79\n\n    num_people = ((last_term - first_term) // difference) + 1\n\n    return num_people\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Ken's original amount, Lisa's original amount, and the amount Ken gave to Lisa\n    ken_original, lisa_original, amount_given = symbols('ken_original lisa_original amount_given')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(ken_original, lisa_original + 15)  # Ken had $15 more than Lisa\n    equation2 = Eq(ken_original - amount_given, lisa_original + amount_given + 21)  # Ken had $21 less than Lisa after giving her some money\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ken_original, lisa_original, amount_given))\n\n    return solutions[amount_given]\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    # Let triangle be t, square be s, and circle be c, diamond be d\n    t, s, c, d = symbols('t s c d')\n\n    # Given equations\n    equation1 = Eq(2 * t, s)  # triangle + triangle = square\n    equation2 = Eq(s + t, c)  # square + triangle = circle\n    equation3 = Eq(d, c + s + t)  # diamond = circle + square + triangle\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (t, s, c, d))\n\n    # We want to find the number of triangles in a diamond\n    # From equation3, we can express d = c + s + t\n    # Using equation1 and equation2, we can substitute s and c in terms of t\n    # After substitution, d will be expressed in terms of t only\n    # Then we can determine the number of triangles (t) in a diamond (d)\n\n    # Substituting the values of s and c in terms of t\n    d_in_terms_of_t = solutions[c] + solutions[s] + t\n\n    # Calculate the number of triangles in a diamond\n    number_of_triangles_in_diamond = d_in_terms_of_t / t\n\n    return number_of_triangles_in_diamond\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    # Golden Pyramid Method\n    # Questions 1 to 5 (ascending order): 1 + 2 + 3 + 4 + 5 = 15 trophies\n    # Questions 6 to 9 (descending order): 4 + 3 + 2 + 1 = 10 trophies\n    trophies_ascending = sum(range(1, 6))\n    trophies_descending = sum(range(1, 5))\n    total_trophies = trophies_ascending + trophies_descending\n    \n    return total_trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of cookies eaten each day\n    d1, d2, d3, d4, d5 = symbols('d1 d2 d3 d4 d5')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(d1 + 6, d2)\n    equation2 = Eq(d2 + 6, d3)\n    equation3 = Eq(d3 + 6, d4)\n    equation4 = Eq(d4 + 6, d5)\n    equation5 = Eq(d1 + d2 + d3 + d4 + d5, 100)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (d1, d2, d3, d4, d5))\n\n    return solutions[d1]\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Calculates the total number of elements in the sequence by adding the counts of each number\n    total_elements = sum(range(2, 9))\n\n    # The median is the middle number of the sequence when the sequence is ordered.\n    # Since the sequence is symmetric, the median will be the number with the maximum count\n    # which, given the pattern of the question, is the last number, which is 8.\n    \n    median = 8\n\n    return median\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    total_marbles = 18 + 6 + 8\n    # To ensure 2 red marbles, take out all non-red marbles first\n    non_red_marbles = 18 + 8\n    # After taking out all non-red marbles, take out one more for the first red,\n    # and one last to ensure the second red marble.\n    marbles_to_ensure_two_red = non_red_marbles + 2\n    return marbles_to_ensure_two_red\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest = int(''.join(map(str, sorted(digits))))\n    \n    return largest - smallest\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    # Calculate common difference\n    common_difference = (fourth_term - first_term) / (4 - 1)\n\n    # Calculate sum of arithmetic series\n    sum_of_athletes = ((2*first_term + (total_rows - 1)*common_difference) / 2) * total_rows\n    \n    return int(sum_of_athletes)\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # As this is a classic example of the Monty Hall problem, the best strategy is to always switch.\n    # The initial choice has a 1/3 chance of being the car, and 2/3 chance of being a goat.\n    # After the host opens a gate with a goat, switching will win the car if the initial choice was a goat.\n    # As there's a 2/3 chance the initial choice was a goat, there's a 2/3 chance of winning by switching.\n    \n    # Therefore, you should choose gate 2\n    return \"Gate 2\"\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    # Number of terms in the sequence\n    num_terms = (last_term - first_term) // difference + 1\n\n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    ans = num_terms / 2 * (first_term + last_term)\n\n    return int(ans)\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    count_facing_teacher = 0\n    for i in range(1, 31):\n        # A student turns around for every factor of 2 or 3. A student will face\n        # the teacher in the end if they turn around an even number of times.\n        turns = (i % 2 == 0) + (i % 3 == 0)\n        if turns % 2 == 0:  # Even number of turns means facing the teacher\n            count_facing_teacher += 1\n    return count_facing_teacher\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 2 and num % 3 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    times = 6\n    x = symbols('x')\n    total_spent = times * x\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_money = symbols('original_money')\n    \n    money_after_cds = original_money - 75\n    money_spent_on_batteries = money_after_cds / 4\n    money_left = money_after_cds - money_spent_on_batteries\n    \n    equation = Eq(money_left, original_money / 3)\n    \n    solution = solve(equation, original_money)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Given that 7 trainers can catch 7 pokemon in 7 minutes\n    # This means 1 trainer catches 1 pokemon in 7 minutes\n    # We need to find the number of trainers to catch 49 pokemon in 49 minutes\n    # Since time taken is 49 minutes, same as 7 times the original 7 minutes,\n    # and we want 49 pokemon, which is 7 times the original number of pokemon,\n    # The rate of catching doesn't change, so we still need the same number of trainers.\n\n    return 7  # We need 7 trainers to catch 49 pokemon in 49 minutes\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    total_books = 7\n    students = 3\n\n    ways = factorial(total_books) // (factorial(students) * factorial(total_books - students))\n\n    return ways\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    num_people = 13  # Tommy and his 12 friends\n    mins_per_person = 142\n    total_time = num_people * mins_per_person\n\n    return total_time\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # The number is composed of the sequence \"928\" repeated to form a 99-digit number.\n    # To find the remainder when dividing by 9,\n    # we can use the fact that any number is congruent to the sum of its digits modulo 9.\n\n    # Sum of digits in one sequence of \"928\"\n    digit_sum = 9 + 2 + 8\n\n    # Number of sequences needed to form a 99-digit number\n    num_sequences = 99 // 3  # Each sequence has 3 digits\n\n    # Sum of all digits in the 99-digit number\n    total_digit_sum = digit_sum * num_sequences\n\n    # Find the remainder when the sum of digits is divided by 9\n    remainder = total_digit_sum % 9\n\n    return remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown value\n    operand = symbols('operand')\n    \n    # Create the equation based on the problem statement\n    equation = Eq(operand * 9 + 47 - operand, 84 + 27)\n    \n    # Solve the equation for the unknown symbol\n    solution = solve(equation, operand)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n    \n    percentage_incorrect = (incorrect_identifications / total_people) * 100\n    \n    return percentage_incorrect\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    # Let the three numbers be a, b, and c such that a <= b <= c\n    # Given:\n    # a + b + c = 56 (Equation 1)\n    # (a + b) / 2 = 14 => a + b = 28 (Equation 2)\n    # (b + c) / 2 = 22 => b + c = 44 (Equation 3)\n\n    # Solving Equation 2 and Equation 1,\n    # c = 56 - (a + b) => c = 56 - 28 => c = 28\n\n    # Solving Equation 3 with the value of c\n    # b = 44 - c => b = 44 - 28 => b = 16\n\n    # We now know the value of b and c, we can find a by substituting b\n    # into Equation 2,\n    # a = 28 - b => a = 28 - 16 => a = 12\n\n    # Since the numbers are sorted a <= b <= c, b is the median\n    median = 16\n    return median\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest = min(numbers, key=lambda num: abs(num - 2.5))\n    return closest\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of bars each person bought\n    x = symbols('x') \n    \n    # Eliot buys bars which cost 12p each and pays with three £1 coins (300p)\n    eliot_equation = Eq(12 * x, 300 - x)\n    \n    # Maya buys bars which cost 17p each and pays with four £1 coins (400p)\n    maya_equation = Eq(17 * x, 400 - x)\n    \n    # They each receive the same amount of change, so solve the equations separately\n    eliot_bars = solve(eliot_equation, x)\n    maya_bars = solve(maya_equation, x)\n\n    # Assuming they bought the same amount of bars for the same change\n    # Set the change received by Eliot equal to the change received by Maya\n    change_equation = Eq((300 - 12 * eliot_bars[0]), (400 - 17 * maya_bars[0]))\n    \n    # Solve the change equation for the number of bars\n    ans = solve(change_equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "from itertools import permutations\n\ndef solution():\n    digits = [7, 3, 9, 1]\n    smallest_even_number = float('inf')\n    \n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 2 == 0 and number > 999:\n            smallest_even_number = min(smallest_even_number, number)\n            \n    return smallest_even_number\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for current ages of Jackson and Chloe\n    jackson, chloe = symbols('jackson chloe')\n    \n    # Equation 1: The sum of the current ages of Jackson and Chloe is 54\n    eq1 = Eq(jackson + chloe, 54)\n    \n    # Equation 2: In 3 years, Jackson will be 5 times as old as Chloe\n    eq2 = Eq(jackson + 3, 5 * (chloe + 3))\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (jackson, chloe))\n    \n    # Jackson's age 3 years later\n    jackson_age_in_3_years = solutions[jackson] + 3\n    \n    return jackson_age_in_3_years\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    equation1 = 66 * 2 + 66 * 3\n    equation2 = 66 * 5\n    \n    return equation1 == equation2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dumpling, bun = symbols('dumpling bun')\n    \n    equation1 = Eq(6 * dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * dumpling + 1 * bun, 41)\n    \n    solutions = solve((equation1, equation2), (dumpling, bun))\n    \n    return solutions[dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare_per_km = 1.2\n    total_fare = 8.5\n    base_km = 1.8\n\n    additional_fare = total_fare - base_fare\n    additional_km = additional_fare / additional_fare_per_km\n    total_km = base_km + additional_km\n\n    return total_km\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_volume = 10  # Total litres of orange juice\n    per_container = 2  # Litres per container\n\n    num_containers = total_volume / per_container  # Number of containers needed\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, blue = symbols('red yellow blue')\n\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    bars_received = 8\n    original_bars = bars_received * 2\n    return original_bars\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n    capacity_big_car = 4\n    capacity_small_car = 2\n    \n    big_cars_needed = boys_in_big_cars // capacity_big_car\n    small_cars_needed = girls_in_small_cars // capacity_small_car\n    \n    total_cars_needed = big_cars_needed + small_cars_needed\n    \n    return total_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    mother_age = 36\n    father_age = 42\n    julia_age = 7\n    total_age_sum = 100\n    \n    # Let the number of years be x for which the sum of their ages will be 100\n    # (mother_age + x) + (father_age + x) + (julia_age + x) = total_age_sum\n    # Simplify the equation to find the value of x\n    x = (total_age_sum - (mother_age + father_age + julia_age)) / 3\n    \n    return int(x)\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    apples = 80\n    # All students get at least one apple\n    \n    # If one student gets at least 3 apples, then the minimum number\n    # of apples the rest can get is one each. The classroom can have\n    # a maximum number of students if everyone except one gets one apple.\n    \n    # Therefore the rest of the students will share (80 - 3) apples.\n    remaining_apples_after_three = apples - 3\n    \n    # Each of these students can get at least one apple,\n    # so the size of the class is the number of remaining apples plus one.\n    class_size = remaining_apples_after_three + 1\n    \n    return class_size\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_per_pound = 16\n    pounds_per_kg = 2.2\n    mass_ounces = 56\n\n    # Convert ounces to pounds\n    mass_pounds = mass_ounces / ounces_per_pound\n\n    # Convert pounds to kilograms\n    mass_kg = mass_pounds / pounds_per_kg\n\n    # Return the best approximation\n    return round(mass_kg, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Calculate the sum from 5 to 80\n    sum_ascending = sum(range(5, 81))\n    # Calculate the sum from 79 back to 5\n    sum_descending = sum(range(5, 80))\n    # The total sum is the sum of both parts\n    total_sum = sum_ascending + sum_descending\n    return total_sum\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    ans = 342 * 24\n    return ans\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / 0.8  # Calculate original price before the first discount\n    final_price = 32 - 4  # Calculate final price after the second discount\n    total_discount = original_price - final_price  # Calculate total discount amount\n    total_percentage_discount = (total_discount / original_price) * 100  # Calculate total percentage discount\n    return total_percentage_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    total_people = 5\n    # Since A wants to stand on the left side of B and B wants to stand on the left side of C,\n    # we can treat ABC as a single unit, thus we have 3 \"units\" to arrange.\n    # We need to arrange 3 \"units\" which is ABC, D, and E.\n    unit_arrangements = factorial(total_people - 2)\n    \n    # Within the unit ABC, there is only 1 way to arrange them since A must be to the left of B\n    # and B must be to the left of C.\n    internal_arrangement = 1\n    \n    # Total arrangements is the product of unit arrangements and internal arrangements.\n    total_arrangements = unit_arrangements * internal_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (i * (i + 7)) for i in range(3, 2012, 7))\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Observing the pattern in given mathematical puzzles\n    def pattern(number):\n        return (number % 10) ** 2\n\n    # Applying the pattern to find the answer for 55 * 55\n    ans = pattern(55)\n    \n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    perm = sorted(set(permutations(digits, 6)))\n    return ''.join(perm[504])\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "def solution():\n    import itertools\n\n    max_A = 0\n    for perm in itertools.permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = perm\n        abc = a * 100 + b * 10 + c\n        bcd = b * 100 + c * 10 + d\n        cde = c * 100 + d * 10 + e\n        def_val = d * 100 + e * 10 + f\n        efg = e * 100 + f * 10 + g\n        fgh = f * 100 + g * 10 + h\n        ghi = g * 100 + h * 10 + i\n        A = abc + bcd + cde + def_val + efg + fgh + ghi\n        max_A = max(max_A, A)\n    \n    return max_A\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's work rate per day\n    alice_work_rate = 1 / 40\n    # Bob's work rate per day\n    bob_work_rate = 1 / 60\n    # Combined work rate per day when both are working\n    combined_work_rate = alice_work_rate + bob_work_rate\n\n    # Work done by Bob alone for 27 days\n    work_done_by_bob = 27 * bob_work_rate\n\n    # Total work to be completed is 1 (as the complete job is taken to be 1 unit of work)\n    remaining_work_after_bob = 1 - work_done_by_bob\n\n    # The number of days Alice actually worked (taking x as the days off)\n    # Since remaining work should be equal to the number of days Alice worked times her work rate\n    # We get the equation: remaining_work_after_bob = (27 - x) * alice_work_rate\n    # We solve for x to find the days off\n\n    days_off = (27 - (remaining_work_after_bob / alice_work_rate))\n\n    return days_off\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    ans = 546 * 4\n    return ans\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples_of_6_and_9 = []\n    lcm = 18  # Least common multiple of 6 and 9\n    multiple = lcm\n    while multiple < 50:\n        if multiple > 20:\n            multiples_of_6_and_9.append(multiple)\n        multiple += lcm\n    return multiples_of_6_and_9\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # Calculate common difference from given terms\n    a7 = 105\n    a8 = 120\n    a9 = 135\n    common_difference = a8 - a7\n\n    # Calculate the first term (a1) using the 7th term and the common difference\n    a1 = a7 - (7 - 1) * common_difference\n\n    # Now calculate the 100th term\n    a100 = a1 + (100 - 1) * common_difference\n    \n    return a100\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # Digits can be used: 0, 2, 3\n    # Position of digits: hundreds, tens, ones\n    # Hundreds place cannot be 0, only 2 or 3 is allowed. so we have 2 choices for the hundreds place.\n    # Tens place and ones place can be any of the 3 digits, but since the number must be unique, we only have 2 choices left for each after choosing the hundreds digit.\n    \n    # Number of choices for the hundreds place:\n    hundreds = 2\n    # Number of choices for the tens place (one of the remaining two digits):\n    tens = 2\n    # Number of choices for the ones place (the last remaining digit):\n    ones = 1\n\n    # The total number of different three-digit numbers\n    total_numbers = hundreds * tens * ones\n\n    return total_numbers\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # You have two colors, so to guarantee a matching pair with the worst-case scenario,\n    # you could take one of each color and then one more to ensure the pair.\n    # Therefore, the smallest number of socks that guarantees a matching pair is 3.\n    return 3\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the number of girls in the class\n    g = symbols('g')\n\n    # b represents the number of boys in the class\n    b = 36 - g\n\n    # The total score for girls is 88 * g and for boys is 91 * b\n    # The overall average score is 89, so the total score for the class is 89 * 36\n    # Hence, we set the equation for total score from girls and boys is equal to the class total score\n    equation = Eq(88 * g + 91 * b, 89 * 36)\n\n    # Solve the equation to find the number of girls g\n    solution = solve(equation, g)\n\n    return solution[0]\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    ans = 5297 + 7345\n    return ans\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    # Define the total number of balls\n    total_balls = 136\n    \n    # Given ratio of red balls to white balls is 1:2\n    # Let the number of red balls be r and number of white balls be 2r\n    # Given ratio of white balls to black balls is 3:4\n    # If the number of white balls is 3w, then the number of black balls is 4w\n    # Since the number of white balls is the same in both ratios, we equate 2r to 3w\n    # So, r = (3/2) * w\n    # Now, the total number of balls is the sum of red, white, and black balls\n    # total_balls = r + 2r + (4/3) * 2r = 136\n    # Simplifying the above equation: 136 = r + 2r + (8/3)r\n    # Solving for r: 136 = (1 + 2 + 8/3)r\n    # 136 = (3 + 6 + 8)/3 * r\n    # 136 = 17/3 * r\n    # r = 136 * (3/17)\n    r = total_balls * (3 / 17)\n    \n    return int(r)\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4**2) / 2\n    return int(n)\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    minute_angle = 6 * 30  # 30 minutes * 6 degrees per minute\n    hour_angle = (8 * 30) + (30 / 60) * 30  # 8 hours * 30 degrees per hour + (30/60 hours through the next hour * 30 degrees per hour)\n\n    angle = abs(hour_angle - minute_angle)  # Calculate the absolute difference\n\n    # Adjust angle if it's over 180 degrees to get the smallest angle between hands\n    if angle > 180:\n        angle = 360 - angle\n\n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4\n    remaining_apples = 20\n\n    total_apples = justin_apples + sisters_apples + remaining_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # Four years ago, the combined age was 24 years.\n    age_4_years_ago = 24\n    \n    # Each of the 3 dogs ages 1 year for every year that passes.\n    # So after 4 years, each dog is 4 years older, for a total of 4*3 = 12 years.\n    # Combined age after 4 years is therefore 24 + 12 years.\n    current_combined_age = age_4_years_ago + 3 * 4\n\n    # In 2 more years, each dog will age an additional 2 years, again, for all 3 dogs.\n    # So the combined age will increase by 2*3 = 6 years from their current_combined_age.\n    combined_age_in_2_years = current_combined_age + 3 * 2\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    # Calculate the pattern repetition\n    pattern_length = 3 + 2 + 2  # black + white + red beads in one pattern\n    full_patterns = 65 // pattern_length\n    remaining_beads = 65 % pattern_length\n    \n    # Full patterns consist of 3 black beads each\n    black_beads_from_full_patterns = full_patterns * 3\n\n    # Check if there are remaining black beads in the incomplete pattern\n    black_beads_in_remaining = min(remaining_beads, 3)\n\n    # Total black beads\n    total_black_beads = black_beads_from_full_patterns + black_beads_in_remaining\n\n    return total_black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "def solution():\n    total_minutes = 13 + 23 + 8 + 27\n    wake_up_hour = 7\n    wake_up_minute = 45\n\n    latest_wake_up_time = (wake_up_hour * 60 + wake_up_minute) - total_minutes\n\n    latest_wake_up_hour = latest_wake_up_time // 60\n    latest_wake_up_minute = latest_wake_up_time % 60\n\n    ans = (latest_wake_up_hour, latest_wake_up_minute)\n    return ans\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum([i if i % 4 < 2 else -i for i in range(60, 0, -1)])\n    return ans\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    # Let's use x to represent the original amount of marbles Ryan had\n    # and y to represent the original amount Audrey had.\n    # We are given that the original ratio was 2:7, hence, x/y = 2/7.\n    # After Ryan bought 20 more and Audrey gave away 80, the new ratio was 1:3.\n    # So (x + 20) / (y - 80) = 1/3\n    # We need to setup these two equations and find y.\n\n    # Equation 1: 2y = 7x\n    # Equation 2: 3(x + 20) = y - 80\n\n    # Let's solve these equations step by step:\n    # From Eq 1: x = (2 / 7) * y\n    # Replace x in Eq 2 by substituting the expression from Eq 1\n    # 3((2/7)y + 20) = y - 80\n    # Expanding the equation we get:\n    # (6/7)y + 60 = y - 80\n    # Now, let's solve for y.\n\n    # Bring all the y's to one side\n    # ((6/7)y - y) = -80 - 60\n    # Convert y to the same denominator\n    # ((6/7)y - (7/7)y) = -140\n    # Simplifying\n    # -y/7 = -140\n    # Multiply both sides by -7 to isolate y\n    y = 140 * 7\n\n    return y\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    return 489 + 375 + 92\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    for chickens in range(51):\n        ducks = chickens  # number of chickens is equal to number of ducks\n        cows = 51 - chickens - ducks\n        total_legs = chickens * 2 + ducks * 2 + cows * 4\n        if total_legs == 160:\n            return chickens\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                totals.add(c1 + c2 + c3)\n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drinks = total_juice / 5\n    abigail_drinks = 200\n    anna_drinks = 120\n    \n    juice_left = total_juice - rebekah_drinks - abigail_drinks - anna_drinks\n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n    ans = (percentage / 100) * quantity\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance = 3000  # nautical miles\n    days = 13\n    hours = 22\n    total_time_hours = days * 24 + hours\n  \n    average_speed = total_distance / total_time_hours\n  \n    return round(average_speed)\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # in liters\n    concentration1 = 40  # in percentage\n\n    volume2 = 3  # in liters\n    concentration2 = 70  # in percentage\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * (concentration1 / 100)) + (volume2 * (concentration2 / 100))\n\n    new_concentration = (total_juice / total_volume) * 100\n\n    return new_concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) * 11\n    if first_multiple < 50:\n        first_multiple += 11\n    last_multiple = (150 // 11) * 11\n    if last_multiple > 150:\n        last_multiple -= 11\n    \n    num_multiples = (last_multiple - first_multiple) // 11 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    # There are four entrances, and each person can choose an entrance.\n    # Since Joe and Mike cannot use the same entrance, we have to consider this constraint.\n    \n    # Step 1: Assign an entrance to Joe (4 choices)\n    # Step 2: Assign a DIFFERENT entrance to Mike (3 choices, because he cannot use the same entrance as Joe)\n    # Step 3: Assign an entrance to Tina (she can use any of the remaining 3 entrances)\n    \n    total_ways = 0\n    for pe in permutations(range(4), 3): # Permutations of entrances for Joe, Mike, and Tina\n        joe_entrance, mike_entrance, tina_entrance = pe\n        if joe_entrance != mike_entrance: # Joe and Mike should have different entrances\n            total_ways += 1\n            \n    # Multiple the count by 6 for the six possible entrance orders for Joe, Mike, and Tina.\n    ans = total_ways * 6\n    \n    return ans\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    after_giving_first = initial_stamps - 339\n    after_buying_more = after_giving_first + 455\n    final_stamps = after_buying_more - 777\n    return final_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    albert_and_bella = 2\n\n    total_people = people_in_front_of_bella + people_behind_albert + albert_and_bella\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    for num in range(20, 31):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            return num\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    ans = 36 * 24\n    return ans\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Creating a symbol for Fatouma's current age\n    age = symbols('age')\n\n    # Setting up the equation based on the information provided\n    # In two years, Fatouma's age will be age + 2\n    # Five years ago, Fatouma's age was age - 5\n    # In two years, she will be twice as old as she was five years ago\n    equation = Eq(age + 2, 2 * (age - 5))\n\n    # Solving the equation to find Fatouma's age\n    age_solution = solve(equation, age)\n\n    return age_solution[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    count = 0\n    combinations = []\n\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            for x3 in range(1, 14):\n                if x1 + x2 + x3 == 14 and len({x1, x2, x3}) == 3:\n                    combinations.append((x1, x2, x3))\n                    count += 1\n\n    unique_combinations = []\n    for combo in combinations:\n        if sorted(combo) not in unique_combinations:\n            unique_combinations.append(sorted(combo))\n\n    ans = len(unique_combinations), unique_combinations\n    return ans\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    # Let the initial number of men be m and the initial number of women be w.\n    # After 36 women leave, there are w - 36 women left.\n    # According to the problem, w - 36 = (3/5) * m.\n\n    # Then, after 48 men board the second bus, there are m - 48 men left.\n    # According to the problem, the number of men equals the number of women now.\n    # So m - 48 = w - 36.\n\n    # We have two equations:\n    # 1) w - 36 = (3/5) * m\n    # 2) m - 48 = w - 36\n\n    # We can solve for m from equation 2)\n    # m = w - 36 + 48\n    # Substitute m in equation 1)\n    # w - 36 = (3/5) * (w + 12)\n\n    # Solve for w:\n    w = symbols('w')\n    equation = Eq(w - 36, (3/5) * (w + 12))\n    w_value = solve(equation, w)[0]\n\n    # Now, calculate m using equation m = w - 36 + 48\n    m_value = w_value - 36 + 48\n\n    # The total number of people initially at the bus stop is the sum of m and w.\n    total_people = w_value + m_value\n\n    return total_people\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    num = (1 * 3 * 8) + (2 * 6 * 16) + (3 * 9 * 24)\n    den = (1 * 2 * 4) + (2 * 4 * 8) + (3 * 6 * 12)\n\n    ans = num / den\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    # Heights range from 124 to 132, inclusively. This is a total of 9 possible heights.\n    possible_heights = 132 - 124 + 1\n    \n    # We want to find the minimum class size where at least 4 students have the same height.\n    # To guarantee this using the Pigeonhole Principle, we multiply the number of possibilities by 3 and add 1.\n    # Because if there were 3 students per height (3 x 9), one more student will guarantee a 4th student of the same height.\n    min_class_size = possible_heights * 3 + 1\n\n    return min_class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50  # 3 pens at 50p each\n    paid_amount = 5.00      # Amount paid by Jennifer (£5)\n    change = paid_amount - total_cost  # Calculate change\n    return round(change, 2)  # Round to 2 decimal places\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    more_english_books = english_books - chinese_books\n    \n    return more_english_books\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # Given that there are 15 oranges, we need to find the optimal first move for Fred\n    # We work backwards to determine a winning strategy for any given number of oranges on the table\n    # A winning position is when 4n + 1 oranges remain (where n is a non-negative integer)\n    # And the strategy is to always leave a multiple of 4 for the opponent\n\n    # total oranges on the table starting is 15\n    # to find the next multiple of 4 so that Fred has a winning move\n    # we need to take (15 % 4) oranges which is equal to 3\n\n    optimal_move = 15 % 4\n    return optimal_move\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the time the cake should be ready\n    ready_time = datetime.strptime(\"19:15\", \"%H:%M\")\n    \n    # Calculate the cooking duration\n    cooking_duration = timedelta(hours=1, minutes=25)\n    \n    # Subtract the cooking duration from the ready time to find the start time\n    start_time = ready_time - cooking_duration\n    \n    # Format the start time in the same format as the input \"HH:MM\"\n    start_time_formatted = start_time.strftime(\"%H:%M\")\n    \n    return start_time_formatted\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    total_go = 42\n    total_checkers = 55\n    total_chess = 33\n    both_go_checkers = 18\n    both_go_chess = 10\n    both_checkers_chess = 9\n    all_three = 5\n\n    # Applying the Inclusion-Exclusion Principle\n    total_students = (total_go + total_checkers + total_chess\n                       - both_go_checkers - both_go_chess - both_checkers_chess\n                       + all_three)\n\n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    current_sum = 20 + 26\n    target_sum = 48\n    years_later = target_sum - current_sum\n    return years_later\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    # Since there are 40 poles and the distance between each is 3 m,\n    # there are 39 intervals of 3m each (as there is no pole right outside her school and house).\n    number_of_intervals = 40 - 1\n    distance_between_poles = 3\n    total_distance = number_of_intervals * distance_between_poles\n\n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    cube_root = int(round(245 ** (1 / 3)))\n    p = cube_root ** 3 / 245\n    return p\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_value = 736\n    m_value = cm_value / 100\n    return m_value\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum([64, 60, 56, 52, 48] ) - sum([62, 58, 54, 50, 46])\n    return ans\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    last_year_min_produced = (1 / 4) * 36000 + 1\n    return last_year_min_produced\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 1 + 1  # one on sick leave and one on personal leave\n    present_students = total_students - absent_students\n\n    attendance_rate = (present_students / total_students) * 100\n\n    return round(attendance_rate, 2)\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    return (8 * 15) / 5\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    total_sum = 0\n    for i in range(2, 2018):\n        for j in range(1, i):\n            total_sum += j/i\n    return total_sum\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from sympy import symbols, solve\n\ndef solution():\n    # Define the symbols for each letter\n    E, S, A, M, O = symbols('E S A M O', integer=True)\n    \n    # Define the constraint for all digits being different\n    digits = range(10)\n    \n    # Create the equation based on the problem statement\n    equation = Eq((E*1000 + S*100 + S*10 + E) + 2018, (S*10000 + A*1000 + S*100 + M*10 + O))\n    \n    # Assuming 0 <= each digit <= 9 and each digit is unique, we solve the equation\n    solutions = solve(equation, (E, S, A, M, O), dict=True)\n    \n    # Find the first valid solution where all digits are different\n    # Return the sum S+A+S+M+O\n    for solution in solutions:\n        if all(solution[E] in digits and solution[S] in digits and solution[A] in digits and \n               solution[M] in digits and solution[O] in digits and\n               len(set(solution.values())) == 5): # All digits are different\n            return solution[S] + solution[A] + solution[S] + solution[M] + solution[O]\n    return None\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    percentage = 30\n    total_amount = 270\n\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Tim stands 4th from front to back, so there are 3 people in front of him\n    rows_in_front = 3\n    # Tim stands 3rd from back to front, so there are 2 people behind him\n    rows_behind = 2\n    # Total rows = people in front + Tim + people behind\n    total_rows = rows_in_front + 1 + rows_behind\n\n    # Tim stands 1st from left to right, so there are no people to his left\n    columns_to_left = 0\n    # Tim stands 4th from right to left, so there are 3 people to his right\n    columns_to_right = 3\n    # Total columns = people to Tim's left + Tim + people to right\n    total_columns = columns_to_left + 1 + columns_to_right\n\n    # Total number of band members = total rows * total columns\n    total_band_members = total_rows * total_columns\n\n    return total_band_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Ratio of apples to oranges is initially 3:8\n    original_ratio = Eq(apples / oranges, 3 / 8)\n\n    # After removing one apple, the ratio becomes 1:3\n    new_ratio = Eq((apples - 1) / oranges, 1 / 3)\n\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest = min(numbers, key=lambda n: abs(100 - n))\n    return closest\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    total_amount = 150\n    daily_savings = 2.40\n    weekly_savings = daily_savings * 7\n\n    number_of_weeks = total_amount / weekly_savings\n\n    return int(number_of_weeks) if number_of_weeks.is_integer() else int(number_of_weeks) + 1\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    initial_sum = sum(range(1, 15))  # Sum of numbers from 1 to 14\n    final_sum = initial_sum + 2019  # The new sum after adding 2019\n    \n    # Search for the starting number of the consecutive sequence\n    for start_number in range(1, final_sum // 8):\n        if sum(range(start_number, start_number + 8)) == final_sum:\n            return start_number  # Return the starting number of the sequence\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    ans = (6 + 1/2) / (1/4)\n    return ans\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    # Let r be the weight of one rabbit, k be the weight of one kangaroo, and c be the weight of one chicken\n    # According to the problem statement, we have the following equations:\n    # 1. 2r = 6c  --> r = 3c\n    # 2. 3k = 4r  --> k = 4r/3\n    \n    # Substitute the value of r into the second equation:\n    # k = 4 * (3c) / 3\n    # Simplifying the right side gives us the weight of one kangaroo in terms of chickens\n    k = 4 * 3 / 3\n    \n    # Return the weight of one kangaroo in terms of chickens\n    return int(k)\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    total_permutations = factorial(len(word))\n\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # Define the minimum days required for each task\n    cutting_wood = 3\n    weaving_rope = 1\n    drying_wood = 5\n    mowing_grass = 1\n    preparing_food = 1\n    soaking_grass = 1\n    choosing_wood = 1\n\n    # Some tasks can be done concurrently, such as cutting wood and mowing grass\n    concurrent_tasks = max(cutting_wood + choosing_wood, mowing_grass + soaking_grass + weaving_rope)\n\n    # Total days needed is the sum of the longest concurrent tasks plus the other tasks\n    total_days = concurrent_tasks + drying_wood + preparing_food\n\n    return total_days\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    sum_of_multipliers = 836 + 162 + 2\n    total = common_factor * sum_of_multipliers\n\n    return total\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount // note_value\n\n    return num_notes\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    ans = 342 + 576\n    return ans\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    age_difference = 2\n    \n    ashley_age_three_years_ago = ashley_age - 3\n    brother_age_three_years_ago = ashley_age_three_years_ago - age_difference\n    \n    brother_age_now = brother_age_three_years_ago + 3\n    \n    return brother_age_now\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    left_side = 9 * 5 + 15 * 5\n    Y = left_side // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is the 7th from the front and also in the middle,\n    # so there must be 6 people in front of her and 6 people behind her.\n    dwarves_in_front = 6\n    dwarves_behind = 6\n\n    # Total number of dwarves is the sum of those in front and those behind\n    dwarves_total = dwarves_in_front + dwarves_behind\n\n    return dwarves_total\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    max_participants_per_school = 3  # The school with the \"most\" needs at least 4 to guarantee\n    max_schools = participants // max_participants_per_school\n    \n    if participants % max_participants_per_school != 0:\n        max_schools += 1\n\n    return max_schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    difference = 3\n    last_term = 52\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        x = (2018 + i) / 5\n        fractional_part = x - int(x)\n        total += fractional_part\n\n    return total\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for number in range(1000, 10000):\n        if (number % 6 == 0) and (int(number // 6) ** 0.5).is_integer():\n            if ((number * 6) ** (1/3)).is_integer():\n                return number\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Define the speeds\n    speed_fast = 48\n    speed_slow = 36\n    \n    # The faster train travels 70 km more\n    distance_diff = 70\n    \n    # Let t be the time it takes for the trains to meet\n    # The distance traveled by the faster train is speed_fast * t\n    # The distance traveled by the slower train is speed_slow * t\n    # According to the problem, speed_fast * t = speed_slow * t + 70\n    # We can solve for t: t = distance_diff / (speed_fast - speed_slow)\n    \n    # Calculate time according to the speeds and distances\n    t = distance_diff / (speed_fast - speed_slow)\n    \n    # Calculate total distance\n    distance = (speed_fast * t) + (speed_slow * t)\n    \n    return distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    # First convert the mixed numbers into improper fractions\n    fraction1 = 3 + Fraction(5, 9)\n    fraction2 = 6 + Fraction(4, 9)\n    \n    # Add the two improper fractions together\n    result_fraction = fraction1 + fraction2\n    \n    # Simplify the fraction and convert to mixed number (if needed)\n    simplified_result = result_fraction.limit_denominator()\n    \n    # Create a mixed number representation if the fraction is improper\n    if simplified_result >= 1:\n        whole_number = simplified_result.numerator // simplified_result.denominator\n        new_numerator = simplified_result.numerator % simplified_result.denominator\n        if new_numerator == 0:\n            ans = whole_number\n        else:\n            ans = f\"{whole_number} {new_numerator}/{simplified_result.denominator}\"\n    else:\n        ans = simplified_result\n        \n    return ans\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # From front to back, Tim is the 4th and 3rd from the back.\n    # This means there are 4-1 members before him and 3-1 after, for a total of 4+2 members along this dimension.\n    rows = 4 + 2\n\n    # From left to right, Tim is the 4th and 7th from the right.\n    # This means there are 4-1 members to his left and 7-1 to his right, for a total of 4+6 members along this dimension.\n    columns = 4 + 6\n\n    # The total number of band members is the number of rows times the number of columns.\n    total_members = rows * columns\n\n    return total_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    total = 50 + 20 + 10 + 5\n    brother_total = total // 2\n\n    for lost_coin in [50, 20, 10, 5]:\n        if total - lost_coin == brother_total:\n            return lost_coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    result = 48 / (1 + 1/3) / (6/7)\n    return result\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    for boats in range(1, 100):  # Assuming a reasonable upper limit for the number of boats\n        if (boats + 1) * 6 == (boats - 1) * 9:\n            students = (boats + 1) * 6\n            return students\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    # Create a list for the counts of each remainder when divided by 5\n    counts = [0] * 5\n    \n    # Count the occurrence of each remainder\n    for number in range(1, 101):\n        remainder = number % 5\n        counts[remainder] += 1\n    \n    # Calculate the pairs\n    # Pairs can form between numbers with remainders (1,4), (2,3), and (0,0)\n    pairs = ((counts[1] * counts[4]) +       # Pairs between remainders 1 and 4\n             (counts[2] * counts[3]) +       # Pairs between remainders 2 and 3\n             (counts[0] * (counts[0] - 1)) / 2  # Pairs between numbers with remainder 0 (divided by 2 to avoid double counting)\n            )\n    \n    return int(pairs)\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolates, friends = symbols('chocolates friends')\n\n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - chocolates, 34)\n\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    chocolates_left = solutions[chocolates] - 20 * solutions[friends]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(rasidah, chai_seng - 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), rasidah * (1 - 3/5) / 2)\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for thousands in range(1, 10):\n        for hundreds in range(thousands + 1, 10):\n            tens = thousands + hundreds\n            if tens < hundreds or tens >= 10:  # tens should be in increasing order and should be a single digit\n                continue  \n            for ones in range(1, 10):\n                if ones < tens and thousands + hundreds + tens + ones == 16:\n                    return ones  # Return ones digit\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    count = 0\n\n    for i in digits:\n        for j in digits:\n            if i != '0' and i != j:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007) ** 2\n    return ans\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['2', '4', '6', '8']\n    max_num = 0\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 4 == 0 and num > max_num:\n            max_num = num\n    return max_num\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    uphill_distance = 3 * 5  # Time * speed going uphill\n    downhill_distance = 2 * 10  # Time * speed going downhill\n    total_distance = uphill_distance + downhill_distance\n    total_time = 3 + 2\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Fixed service fee\n    service_fee = 3\n    # Cost for first 5 kWh \n    initial_rate_cost = 2 * 5\n    # Initial total cost before additional usage\n    initial_total_cost = service_fee + initial_rate_cost\n    # Susan's total money minus initial total cost\n    remaining_money = 63 - initial_total_cost\n    # Additional rate cost per kWh\n    additional_rate = 1\n    # kWh used after the first 5 kWh\n    additional_kWh = remaining_money / additional_rate\n    # Total kWh used\n    total_kWh = 5 + additional_kWh\n\n    return total_kWh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    fraction_of_63 = 54\n    whole_number = 63\n    \n    numerator = (fraction_of_63 * 7) / whole_number\n\n    return int(numerator)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    for x in range(1, 3*7*11):  # We can start checking from 1 and go to the product of 3, 7, and 11 as they are coprime\n        if x % 3 == 2 and x % 7 == 6 and x % 11 == 10:\n            return x\n    return None\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = int(f\"{x}{y}\")\n            B = int(f\"4{x}{y}\")\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    value = 4320\n    factor = 3/2\n    count = 0\n\n    # Prime factorization of 4320\n    prime_factors = {2: 5, 3: 3, 5: 1}  # This is the prime factorization of 4320\n\n    # Since we are multiplying by (3/2)^n, we can only do this while there are\n    # factors of 2 remaining in the prime factorization to cancel out the denominator of 3/2.\n    # Once we run out of factors of 2, the number can no longer be an integer.\n    available_twos = prime_factors[2]\n\n    # We can only add 3 to the prime factors until we run out of 2s to cancel the denominator.\n    while available_twos >= n:\n        count += 1\n        available_twos -= 1\n\n    return count\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    big_boxes = 9\n    cookies_per_big_box = 660\n    cookies_per_small_box = 600\n    \n    total_cookies = big_boxes * cookies_per_big_box\n    \n    small_boxes_needed = total_cookies // cookies_per_small_box\n    if total_cookies % cookies_per_small_box != 0:\n        small_boxes_needed += 1\n\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    difference = (-8) - (-19)\n    return difference\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    fruit_juice_weight = (20 * 0.35) + (30 * 0.60)\n    concentration = (fruit_juice_weight / total_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    warehouse_b = symbols('warehouse_b')\n\n    warehouse_a_original = 50\n    warehouse_a_shipped_in = 12\n    warehouse_b_shipped_out = 16\n\n    # warehouse_a_final = warehouse_a_original + warehouse_a_shipped_in\n    # warehouse_b_final = warehouse_b_original - warehouse_b_shipped_out\n    # warehouse_a_final = 2 * warehouse_b_final\n    equation = Eq((warehouse_a_original + warehouse_a_shipped_in), 2 * (warehouse_b - warehouse_b_shipped_out))\n\n    solutions = solve((equation), (warehouse_b))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    prime_numbers = [29, 31, 37, 41, 43]  # I've added the missing prime number 37\n    return prime_numbers[2]  # This will return the third element in the list which is the missing prime number\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    total_cookies = 76\n    cookies_per_box = 6\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    letters = 'COLLEGE'\n    freq = {char: letters.count(char) for char in set(letters)}\n\n    # Calculate the number of permutations of the word\n    num_permutations = factorial(len(letters))\n    for k, v in freq.items():\n        num_permutations //= factorial(v)\n    \n    return num_permutations\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # Total pupils that passed at least one test\n    total_passed_at_least_one = 43\n\n    # Pupils that passed each test\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n\n    # Using inclusion-exclusion principle to find the maximum who passed all three tests\n    # max_all_three_tests = total - (sum of each passed - sum of each pair passed + all three passed)\n    # But given the question, we want to maximize the number who passed all three tests\n    # Therefore, we assume no one passed exactly two tests\n    # max_all_three_tests = total_passed_at_least_one - (passed_math + passed_science + passed_english)\n    max_all_three_tests = passed_math + passed_science + passed_english - total_passed_at_least_one\n    \n    return max_all_three_tests\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    result = 0.5 * 0.2 * 6000\n    return result\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Owen:Oscar = 3 fishes:1 rabbit (3:1)\n    # Oscar:Dennis = 2 rabbits:3 packs of wheat (2:3)\n\n    # To find Owen:Dennis = x fishes:1 pack of wheat\n    # We use the product of the means = product of the extremes for the compounded ratio:\n    # (fishes per rabbit) * (rabbits per pack of wheat) = fishes per pack of wheat\n    # (3/1) * (2/3) = x / 1\n\n    fishes_per_pack_wheat = (3 / 1) * (2 / 3)\n\n    # Simplifying the ratio\n    ans = fishes_per_pack_wheat\n\n    return ans\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    for people in range(1, 1000):  # setting an arbitrary limit for the search\n        benches_3 = people // 3  # Number of benches needed if 3 people sit on a bench\n        benches_7 = people // 7  # Number of benches needed if 7 people sit on a bench\n\n        if people % 3 == 1 and (benches_7 + 3) * 7 == people:\n            return people\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_payment = 120\n    booking_fee = 30\n    hourly_rate = 10\n\n    hours_hired = (total_payment - booking_fee) / hourly_rate\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    least_solution = solve_congruence(*congruences)\n\n    num_pencils = least_solution[0]\n    while num_pencils < 400:\n        num_pencils += least_solution[1]\n\n    if num_pencils < 500:\n        return num_pencils\n    else:\n        return \"No solution in the given range.\"\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):  # Including 0\n        for x2 in range(10):  # Including 0\n            for x3 in range(10):  # Including 0\n                if x1 + x2 + x3 == 9:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell // 2\n    lyn = ginnie // 4\n    total = ginnie + lyn\n    return total\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(21 - 11)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount * 3) / ratio_sum\n    return bigger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mass_empty, mass_full = symbols('mass_empty mass_full')\n    \n    equation1 = Eq(mass_empty + (5/6) * mass_full, 4.6)\n    equation2 = Eq(mass_empty + (2/3) * mass_full, 4.45)\n    \n    solutions = solve((equation1, equation2), (mass_empty, mass_full))\n    \n    mass_empty_grams = solutions[mass_empty] * 1000  # convert kg to grams\n    \n    return mass_empty_grams\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    favorite_number = symbols('favorite_number')\n    equation = Eq(favorite_number * 2 - 3, 19)\n\n    solution = solve(equation, favorite_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    # Loop over all possible 3-digit numbers\n    for i in range(100, 1000):\n        if i % 2 == 1:  # Check if the number is odd\n            # Get the sum of digits\n            digits = [int(d) for d in str(i)]\n            if sum(digits) == 5:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.10\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 1101\n    \n    # One-digit page numbers: 1-9\n    one_digit_pages = 9\n    # Two-digit page numbers: 10-99\n    two_digit_pages = 90 * 2\n    # Three-digit page numbers: 100-999\n    three_digit_pages = 900 * 3\n    \n    # Remaining digits after counting all 1, 2, and 3 digit pages\n    remaining_digits = total_digits - (one_digit_pages + two_digit_pages + three_digit_pages)\n    \n    # Calculate the number of four-digit pages using the remaining digits\n    four_digit_pages = remaining_digits // 4\n    \n    # Total number of pages in the workbook\n    total_pages = 9 + 90 + 900 + four_digit_pages\n    \n    return total_pages\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    # Since this is a multiplication question and we don't have a specific multiplication problem here,\n    # I will demonstrate Python code for a general multiplication problem, for example, 123 * 456.\n    # Please provide a specific multiplication problem if needed.\n    multiplicand = 123\n    multiplier = 456\n    product = multiplicand * multiplier\n    \n    return product\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    term = 1\n    diff = 2\n    while term < 100:\n        diff += 2\n        term += diff\n    return term - diff\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # Let a be Adam's weight, b be Ben's weight, and c be Carl's weight\n    # According to the problem, we have:\n    # a + b = 102 kg\n    # b + c = 97 kg\n    # a + c = 93 kg\n    \n    # We can add all three equations to get:\n    # 2 * (a + b + c) = 102 + 97 + 93\n    total_double_weight = 102 + 97 + 93\n    # The total double weight is the sum of all individual weights counted twice\n    \n    # Now we can divide by 2 to find the total weight\n    total_weight = total_double_weight / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    # the price of a book\n    book_price = 3.40\n    # the price of a magazine\n    magazine_price = 1.60\n    # total amount spent\n    total_amount = 23\n    \n    # Initialize the number of magazines to 0\n    num_magazines = 0\n    \n    # Calculate the number of magazines Clara buys\n    while True:\n        money_spent_on_books = total_amount - (num_magazines * magazine_price)\n        if money_spent_on_books % book_price == 0:\n            return num_magazines\n        num_magazines += 1\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    # Let x be the number of notebooks Andy's sister has initially.\n    # After Andy gives his sister 38 notebooks, they have the same amount.\n    # Therefore, Andy will have 149 - 38 notebooks left.\n    # So, 149 - 38 = x (which will be the number of notebooks Andy's sister has initially).\n    \n    x = 149 - 38\n    \n    return x - 38  # Subtract the 38 notebooks she received to find the initial count.\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n\n    equation1 = Eq(justin, crystal + 64)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    total_pages = solutions[justin] + solutions[crystal] + solutions[ashley]\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50  # Last term of the sequence\n    sum_of_sequence = n * (n + 1) // 2  # Formula to calculate the sum of the first n natural numbers\n    return sum_of_sequence\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Assuming Mr. Lv's age is below 100\n        age_base10_str = str(age)\n        age_base10_str_with_0 = age_base10_str + '0'\n        age_base3_str = format(age, '03')  # Convert to base 3 and pad with leading zeros if necessary\n\n        if age_base3_str == age_base10_str_with_0:\n            return age\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of orchids (o), tulips (t), and roses (r)\n    o, t, r = symbols('o t r')\n\n    # Equation representing the total number of flowers\n    total_equation = Eq(o + t + r, 3616)\n\n    # The ratio of orchids to tulips is 3:5\n    ratio_equation = Eq(o / t, 3 / 5)\n\n    # After sales, we have the remaining flowers equation\n    # 40% of orchids, 1/5 of tulips and 25% of roses are sold\n    remaining_equation = Eq((o - 0.4 * o) + (t - t / 5) + (r - 0.25 * r), 2644)\n\n    # Solve the system of equations for o (orchids), t (tulips), and r (roses)\n    solutions = solve((total_equation, ratio_equation, remaining_equation), (o, t, r))\n\n    return solutions[o]\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = (5/8 + 1/17) * 8 + 9/17\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if i % 7 == 0 and 7007 % i == 0:\n            factors.append(i)\n            if len(factors) == 2:\n                break\n    return sum(factors)\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n    \n    num_people = 7\n    num_seats = 8  # We can actually ignore this since one seat will always be empty\n    \n    # The number of different orders for circular arrangements is (n-1)!\n    ans = factorial(num_people - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    ways = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            x3 = 10 - x1 - x2\n            if x3 > x2 > x1:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n    \n    for i in range(2, 55):\n        j = 55 - i\n        if isprime(i) and isprime(j):\n            return i * j\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Let's denote:\n    # c_cake - the cost of 1 piece of chocolate cake\n    # c_cheese - the cost of 1 piece of cheesecake\n    # c_cookie - the cost of 1 cookie\n\n    # From the problem we know that:\n    # 3 * c_cake = 2 * c_cheese\n    # 3 * c_cheese = 5 * c_cookie\n    # c_cookie = 9\n\n    # We substitute c_cookie with 9\n    # 3 * c_cheese = 5 * 9\n    c_cheese = (5 * 9) / 3\n\n    # Now we find the cost of 1 piece of chocolate cake\n    # 3 * c_cake = 2 * c_cheese\n    c_cake = (2 * c_cheese) / 3\n\n    return c_cake\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # 2 basketballs + 3 volleyballs = 195\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    # 4 basketballs + 5 volleyballs = 355\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    # Initialize the sum to the known digits: 2 + 0 + 1 + 9\n    known_sum = 2 + 0 + 1 + 9\n\n    # Loop through possible digits for A, M, and C\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                # Ensure all digits are different\n                if len(set((2, 0, A, M, C, 1, 9))) == 7:\n                    # Calculate the current sum\n                    current_sum = known_sum + A + M + C\n                    # Check if the current sum is divisible by 9\n                    if current_sum % 9 == 0:\n                        return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, valeria = symbols('mike valeria')\n\n    equation1 = Eq(mike - valeria, 6 - 22)   # After eating the same amount, Mike has 6 left, Valeria has 22\n    equation2 = Eq(mike + valeria, 36)       # Total candy\n\n    solutions = solve((equation1, equation2), (mike, valeria))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_per_day = 1/4 / 3\n    total_days = 1 / part_per_day\n    return total_days\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Melissa's current age as 'm' and her mother's current age as 'mm'\n    m, mm = symbols('m mm')\n\n    # When Melissa was 8, her mother was 32.\n    eq1 = Eq(mm - m, 32 - 8)\n\n    # Melissa's mother is now three times as old as Melissa.\n    eq2 = Eq(mm, 3 * m)\n\n    # Solve the equations to find Melissa's current age 'm'.\n    solutions = solve((eq1, eq2), (m, mm))\n\n    return solutions[m]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    ans = 237 * 3\n    return ans\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    ans = 42 / (2 * 7)\n    return ans\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    # Convert recurring decimals to fractions\n    recurring_decimal = 4 + 73/990\n    non_recurring = 4.73\n    repeating_sevens = 4.77\n    three_decimal = 4.737\n    \n    # Store all numbers in a list\n    numbers = [recurring_decimal, non_recurring, repeating_sevens, three_decimal]\n    \n    # Find the minimum number in the list\n    min_number = min(numbers)\n    \n    return min_number\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n    # Reversing Joel's action\n    joel_action = (remaining_plants + 2) * 2\n    # Reversing Valerie's action\n    valerie_action = (joel_action + 3) * 2\n    # Reversing Ethan's action\n    ethan_action = (valerie_action + 1) * 2\n    return ethan_action\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128  # in meters\n    tunnel_length = 544  # in meters\n    speed = 52  # in meters per second\n\n    # The entire train is in the tunnel once the train's front has entered\n    # and before the train's end has left. Hence, we need to account for \n    # the length of the train and the tunnel.\n    total_distance = train_length + tunnel_length\n    duration = total_distance / speed\n    \n    return duration\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18\n    sold_second_round = remaining_eggs * 2 + 7\n    total_after_first_sale = sold_second_round * 2\n    initial_eggs = total_after_first_sale + 16\n\n    return initial_eggs\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # Since 6/7 = 0.857142 recurring, we know the sequence of digits that repeat are 857142.\n    repeating_sequence = \"857142\"\n\n    # Total length of repeating sequence\n    sequence_length = len(repeating_sequence)\n\n    # The sum of one set of repeating sequence is 8 + 5 + 7 + 1 + 4 + 2\n    sum_of_one_sequence = sum(int(digit) for digit in repeating_sequence)\n\n    # There are total 58 digits, we need to see how many full sequences are there\n    full_sequences = 58 // sequence_length\n\n    # Now we calculate the sum of digits in those full sequences\n    sum_full_sequences = full_sequences * sum_of_one_sequence\n\n    # Find the remaining digits that don't make up a full sequence\n    remaining_digits = 58 % sequence_length\n\n    # Calculate the sum of these remaining digits\n    sum_remaining_digits = sum(int(repeating_sequence[i]) for i in range(remaining_digits))\n\n    # The final sum is the sum of full sequences plus the sum of remaining digits\n    total_sum = sum_full_sequences + sum_remaining_digits\n\n    return total_sum\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P1, P6 = symbols('P1 P6')\n\n    equation1 = Eq(P1 + P6, 120)  # Total students\n    equation2 = Eq(2 * P6 + 0.5 * P1, 180)  # Total buckets of water\n\n    solutions = solve((equation1, equation2), (P1, P6))\n\n    return solutions[P1]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    # Since there are two options for each coin toss (heads or tails)\n    # and there are two coin tosses,\n    # the total number of possible outcomes is 2 (for the first toss) times 2 (for the second toss).\n    outcomes_first_toss = 2\n    outcomes_second_toss = 2\n    total_outcomes = outcomes_first_toss * outcomes_second_toss\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    # Number of teams\n    teams = 5\n    # Number of matches using the Handshake Problem formula\n    matches = teams * (teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    result = 7 / (1/3)\n    return result\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n    \n    pencils = 55\n    pens = 143\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import solve, Eq, symbols, sqrt\n    \n    # Let 's' be the length of a side of the cube\n    s = symbols('s')\n\n    # Using Pythagorean theorem in triangles PAB, PAC, PAD, and PAG\n    # where PB, PC, PD are lengths from P to the vertices of the face of the cube\n    # PG crosses the cube, so we divide it by sqrt(3) since it's a space diagonal of the cube\n    # and PA is the length from P to the opposite vertex A\n    equation1 = Eq(sqrt(2)*s, 60*sqrt(10))\n    equation2 = Eq(s, 60*sqrt(5))\n    equation3 = Eq(sqrt(2)*s, 120*sqrt(2))\n    equation4 = Eq(sqrt(3)*s, 36*sqrt(7))\n\n    # Solving equations\n    # We can directly infer s from equation2\n    s_val = solve(equation2, s)\n    \n    # PA is the diagonal of the cube, which has length sqrt(3)*s\n    pa = sqrt(3) * s_val[0]\n\n    return pa\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen trades 3 fish for 1 rabbit: ratio_fish_rabbit = 3 fish / 1 rabbit\n    ratio_fish_rabbit = 3 / 1\n    \n    # Oscar trades 2 rabbits for 3 packs of wheat: ratio_rabbit_wheat = 2 rabbits / 3 packs of wheat\n    ratio_rabbit_wheat = 2 / 3\n    \n    # Simplifying the continued ratio to find how many fish for 1 pack of wheat\n    # It's a multiplication of the two ratios: ratio_fish_wheat = ratio_fish_rabbit * (1 pack of wheat / ratio_rabbit_wheat)\n    ratio_fish_wheat = ratio_fish_rabbit * (1 / ratio_rabbit_wheat)\n    \n    # Calculate the number of fish for 1 pack of wheat\n    num_fish_for_one_pack_wheat = ratio_fish_wheat\n    \n    return num_fish_for_one_pack_wheat\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Johnny's incorrect step\n    incorrect_product = quotient * remainder  # 9 * 2 = 18\n\n    # Johnny's incorrect addition step\n    incorrect_sum = incorrect_product + divisor  # 18 + 4 = 22\n    incorrect_answer = incorrect_sum\n\n    # Correct way to find the dividend\n    correct_answer = (quotient * divisor) + remainder  # (9 * 4) + 2 = 38\n\n    # Return a tuple with the incorrect answer and the correct answer\n    return incorrect_answer, correct_answer\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    # Initialize a list to store different ways of scoring 8\n    different_ways = []\n    \n    # There are 6 faces on each die, so we iterate through each possibility\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            # If the sum of the scores on dice is 8, we record it\n            if die1 + die2 == 8:\n                # We add the pair as a tuple to the list of different ways\n                different_ways.append((die1, die2))\n    \n    # The answer is the number of different pairs that sum to 8\n    ans = len(different_ways)\n    \n    # Returning each different way clearly and the final result\n    return different_ways, ans\n\n# Call the function and store the result in ans\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed) if boxes_needed.is_integer() else int(boxes_needed) + 1\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Total students before the boys left and the girls entered\n    total_students = symbols('total_students')\n\n    # Number of boys before the boys left\n    boys_before = 0.4 * total_students\n\n    # Number of boys after 16 left\n    boys_after = boys_before - 16\n\n    # Total students after the change\n    total_after = total_students - 16 + 16  # No change in total number of students\n\n    # Boys make up 2/15 of the students after the change\n    equation = Eq(boys_after, 2/15 * total_after)\n\n    # Solve for the total number of students\n    solved_students = solve(equation, total_students)\n\n    # Number of boys before the boys left\n    boys_initial = 0.4 * solved_students[0]\n\n    # Number of girls before the girls entered\n    girls_before = solved_students[0] - boys_initial\n\n    # Number of girls after 16 girls entered\n    girls_after = girls_before + 16\n\n    return girls_after\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solution():\n    digits = ['2', '7', '9']\n    primes = set()\n    \n    # Considering numbers with one, two, and three digits\n    for i in range(1, 4):\n        for p in permutations(digits, i):\n            num = int(''.join(p))\n            if num < 100 and is_prime(num):\n                primes.add(num)\n                \n    return len(primes)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    numerator = (10/3 * 1.9 + 19.5 / 4.5)\n    denominator = (62/75 - 0.16)\n    fraction = numerator / denominator\n\n    div_numerator = 3.5 + 14/3 + 2 + 2/15\n    div_denominator = 0.5 * (1 + 1/20 + 4.1)\n    division = div_numerator / div_denominator\n\n    ans = fraction / division\n    return ans\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n    \n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n    \n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for N in range(1000, 10000):\n        str_N = str(N)\n        for i in range(4):\n            M = int(str_N[:i] + str_N[i+1:])\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of a banana and a pear\n    banana, pear = symbols('banana pear')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(banana + 2*pear, 94)  # Max's purchase\n    equation2 = Eq(banana + pear, 62)    # Emily's purchase\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    percent_swimming = 82\n    percent_jogging = 54\n    percent_neither = 16\n\n    num_swimming = (percent_swimming / 100) * total_students\n    num_jogging = (percent_jogging / 100) * total_students\n    num_neither = (percent_neither / 100) * total_students\n\n    num_both = num_swimming + num_jogging - (total_students - num_neither)\n\n    return int(num_both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work per day\n    work_a_per_day = 1 / 15\n    # B's work per day\n    work_b_per_day = 1 / 10\n\n    # Work done by A and B together in 4 days\n    work_done_in_4_days = 4 * (work_a_per_day + work_b_per_day)\n\n    # Remaining work after 4 days\n    remaining_work = 1 - work_done_in_4_days\n\n    # Number of days B will take to finish the remaining work\n    days_b_to_finish = remaining_work / work_b_per_day\n\n    return days_b_to_finish\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    first_term = (1 + 0.23 + 0.34)\n    second_term = (0.23 + 0.34 + 0.65)\n    third_term = (1 + 0.23 + 0.34 + 0.65)\n    fourth_term = (0.23 + 0.34)\n    \n    ans = (first_term * second_term) - (third_term * fourth_term)\n    \n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    ticket_price = 112\n    number_of_tickets = 16\n    \n    total_cost = ticket_price * number_of_tickets\n    \n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n    trees = (road_length // tree_interval) + 1\n    return trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    total_time_minutes = 2 * 60  # Convert 2 hours to minutes\n    linda_rate = 1 / 5  # Linda's rate in problems per minute\n    cici_rate = 1 / 6  # Cici's rate in problems per minute\n\n    combined_rate = linda_rate + cici_rate  # Combined rate of Linda and Cici per minute\n    total_problems = total_time_minutes * combined_rate  # Total problems solved together\n\n    return int(total_problems)\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    return 15\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_interval = 45\n    \n    # You have to wait the full interval minus the time you are late\n    wait_time = bus_interval - (late_time % bus_interval)\n    \n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    mean_value = 37\n    total_numbers = 10\n    known_numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    sum_known_numbers = sum(known_numbers)\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum_known_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have (amy_apples - x) apples\n    # After receiving x apples, John will have (john_apples + x) apples\n    # The condition is that Amy has 4 more apples than John:\n    # amy_apples - x = john_apples + x + 4\n    # Solving for x gives us:\n    # 2x = amy_apples - john_apples - 4\n    # x = (amy_apples - john_apples - 4) / 2\n\n    x = (amy_apples - john_apples - 4) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_for_nine = 38.79\n    cost_per_book = total_cost_for_nine / 9\n    cost_for_seven_books = cost_per_book * 7\n    return cost_for_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Let's denote the amount of grass needed by one animal for a day as x.\n    # According to the problem:\n    # 14 goats * 15 days * x = 70 rabbits * 8 days * x\n    # Since each goat eats as much grass as 4 rabbits, we can change rabbits to goats in equivalence:\n    # 70 rabbits = 70 / 4 goats = 17.5 goats\n    # We can simplify this equation to find x in terms of goats:\n    # 14 * 15 = 17.5 * 8\n    # Since x cancels out, we do not need to calculate it explicitly to solve the problem.\n\n    # Now we calculate how much pasture is available in terms of 'goat days':\n    total_goat_days = 14 * 15\n\n    # Now we calculate how many 'goat days' 17 goats and 20 rabbits will consume in one day:\n    # Since 1 goat = 4 rabbits, 20 rabbits = 20 / 4 = 5 goats.\n    goats_plus_rabbits_as_goats_per_day = 17 + 5\n\n    # Now we calculate for how many days the available pasture can feed the animals:\n    days_to_feed = total_goat_days / goats_plus_rabbits_as_goats_per_day\n    return days_to_feed\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n\n    equation1 = Eq(chan / 4, toh / 3 + 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    sandra, tasha, riley = symbols('sandra tasha riley')\n    \n    # Set up the equations based on the problem\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, 3 / 5 * sandra)\n    equation3 = Eq(tasha, riley + 60)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n    \n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    climb = 10\n    slide = 1\n    day = 0\n    climbed = 0\n\n    while climbed < height:\n        day += 1\n        climbed += climb\n        if climbed >= height:\n            break\n        climbed -= slide\n        slide += 1\n\n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    def triangle(a, b):\n        result = 0\n        for i in range(b):\n            result += int(str(a) * (i + 1))\n        return result\n\n    ans = triangle(4, 3)\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    savings = [13, 18, 5]\n    mean_savings = sum(savings) / len(savings)\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9**2) - 7\n    return x\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    angel_to_number = {'A': '0', 'n': '1', 'g': '4', 'e': '7', 'l': '5'}\n    devil = \"Devil\"\n    correct_password = \"\"\n    \n    for char in devil:\n        if char in angel_to_number:\n            correct_password += angel_to_number[char]\n        else:\n            # Characters that aren't mapped are added as they are\n            correct_password += char\n\n    is_able_to_unlock = correct_password == \"4005220912\"\n    return is_able_to_unlock, correct_password if not is_able_to_unlock else correct_password\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    # Since we want sums of 6, and the smallest positive integer is 1,\n    # Adding 1 to n parts will result in n, so we need to break down \n    # 6 - n into parts and add the 1 to each part we initially took out\n    for parts in range(2, 6):  # We can split 6 from 2 to 5 parts\n        # A sum of 6 with 'parts' parts is the same as partitioning 6 - parts\n        # into 'parts' non-negative integers, which can be done in comb(6-1, parts-1) ways\n        count += comb(6 - 1, parts - 1)\n    return count\n\n# Importing the comb function from the math module\nfrom math import comb\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "from sympy import symbols, Eq, solve, sqrt\n\ndef solution():\n    x, a = symbols('x a')\n    equation = Eq(sqrt(x), sqrt(a) - 2/sqrt(a))\n    solutions = solve(equation, x)\n    x_value = solutions[0]\n\n    # Replace x in the expression with the value we found\n    expression = sqrt(x_value**2 + 8 * x_value)\n    expression_simplified = expression.simplify()\n\n    # Further simplify to express in terms of a\n    return expression_simplified.subs(x, x_value)\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    # Initialize a counter for the number of ways\n    count = 0\n    \n    # Iterate over all possible triplets of years\n    for i in range(2017, 2034):\n        for j in range(i+1, 2035):\n            for k in range(j+1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n    \n    # Using the Pigeonhole Principle to find the minimum number of sheep\n    # in the sheep pen with the most sheep.\n    # The principle states that if n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item.\n    # For this case, we need to find the maximum, hence:\n    # If there are a objects and b boxes, then at least one box contains at least ceil(a/b) objects\n    min_sheep_in_most_filled_pen = (total_sheep + total_pens - 1) // total_pens\n\n    return min_sheep_in_most_filled_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    boys = 18\n    girls = 27\n    total_members = boys + girls\n\n    mean_age_boys = 16.2\n    mean_age_girls = 16.7\n\n    total_age_boys = mean_age_boys * boys\n    total_age_girls = mean_age_girls * girls\n\n    total_age = total_age_boys + total_age_girls\n    mean_age_all = total_age / total_members\n\n    return mean_age_all\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "from itertools import permutations\n\ndef solution():\n    angel_to_number = {'A': '0', 'n': '1', 'g': '4', 'e': '7', 'l': '5'}\n\n    angel = \"Angel\"\n    devil = \"Devil\"\n    \n    # Convert the angel to the number sequence by using the angel_to_number dictionary\n    angel_number = ''.join(angel_to_number[letter] if letter in angel_to_number else letter for letter in angel.lower())\n    \n    # Generate all permutations of the angel number\n    permutations_of_angel = set([''.join(p) for p in permutations(angel_number)])\n    \n    devil_number_given = \"4005220912\"\n\n    # Check if the given devil number is in the permutations of the angel number\n    if devil_number_given in permutations_of_angel:\n        ans = True\n    else:\n        ans = False\n        correct_devil_number = next(iter(permutations_of_angel))  # Pick one correct password as an example\n\n    return ans, correct_devil_number if not ans else devil_number_given\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    congruences = ((1, 6), (8, 13))\n\n    # Use Chinese Remainder Theorem to find the number that satisfies the conditions\n    num, _ = solve_congruence(*congruences)\n\n    # The number should also be between 200 and 300\n    while num < 200:\n        num += 6 * 13  # The least common multiple of 6 and 13\n\n    return num\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    # Convert the recurring decimals to fractions\n    a = 1/90    # 0.0̅1 = 1/90\n    b = 12/90   # 0.1̅2 = 12/90 (can also be calculated as 1/10 + 2/90)\n    c = 23/90   # 0.2̅3 = 23/90\n    d = 34/90   # 0.3̅4 = 34/90\n    e = 45/90   # 0.4̅5 = 45/90\n    f = 54/90   # 0.5̅4 = 54/90\n    g = 78/90   # 0.7̅8 = 78/90\n\n    # Calculate the sum of the fractions\n    total_sum = a + b + c + d + e + f + g\n\n    return total_sum\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    raye_cycle = 6\n    simon_cycle = 12\n    taylor_cycle = 16\n\n    days_until_meet_again = lcm(raye_cycle, simon_cycle, taylor_cycle)\n\n    return days_until_meet_again\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # Worst case scenarios for each color:\n    # To guarantee a green ball, she can take all yellow and red balls first\n    worst_case_green = 5 + 2\n    \n    # Similarly, to guarantee a yellow ball, she can take all green and red balls first\n    worst_case_yellow = 7 + 2\n    \n    # And to ensure a red ball, she can take all green and yellow balls\n    worst_case_red = 7 + 5\n    \n    # However, we want to ensure 5 balls of any one color.\n    # This would mean she has to go through the worst case of each color,\n    # then take one more to ensure the fifth ball of one color.\n    ans = min(worst_case_green, worst_case_yellow, worst_case_red) + 1\n    return ans\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 10\n    nth_value = 31\n    common_difference = 3\n\n    first_term = nth_value - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    # Define the average speeds\n    speed_sam = 1  # Sam's speed in m/s\n    speed_ben = 0.6  # Ben's speed in m/s\n    \n    # Define the length of the pool and total swimming time in seconds\n    pool_length = 30  # pool length in meters\n    total_time = 10 * 60  # total swimming time in seconds (10 minutes)\n    \n    # Calculate the combined speed and how many lengths they cover together per second\n    combined_speed = speed_sam + speed_ben  # combined speed in m/s\n    lengths_per_second = combined_speed / pool_length  # number of lengths covered per second together\n    \n    # Calculate the total number of meetings\n    total_meetings = lengths_per_second * total_time\n    \n    return int(total_meetings)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    # Split the numbers into their individual digits\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n    \n    # Apply the new operation rule\n    result = a * b + c * d\n    \n    return result\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_bob_cindy = 120\n    doris_height = 126\n    total_height_bob_cindy = 2 * average_bob_cindy  # Since the average is for 2 people\n    total_height = total_height_bob_cindy + doris_height\n    average_height_three_children = total_height / 3\n    return average_height_three_children\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine_money = 24\n    tom_money = 2 * katherine_money\n    gareth_money = 4 * tom_money\n    return gareth_money\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n\n    # Destin will be twice his nephew's age in 6 years\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n\n    # The ratio of Destin's age to his nephew's age was 5:1 six years ago\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    # Sum of their ages in 10 years' time\n    sum_of_ages = (solutions[destin] + 10) + (solutions[nephew] + 10)\n\n    return sum_of_ages\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    # Let x be the number of boys in the class\n    boys_avg = 20\n    girls_avg = 60\n    total_avg = 35\n    total_pupils = 40\n\n    # Total pencils owned by boys = boys_avg * number of boys (x)\n    # Total pencils owned by girls = girls_avg * number of girls (total_pupils - x)\n    # The total average is the total number of pencils divided by the total number of pupils\n    # total_avg * total_pupils = boys_avg * x + girls_avg * (total_pupils - x)\n    \n    # Using this equation, we can solve for x (number of boys)\n    x = (total_avg * total_pupils - girls_avg * total_pupils) / (boys_avg - girls_avg)\n\n    return int(x)\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of pies each had initially.\n    x = symbols('x')\n    \n    # Mrs Tan buys 12 more pies, so she has x + 12 pies.\n    # Mrs Lim gives away 4 pies, so she has x - 4 pies.\n    # Mrs Tan has twice as many pies as Mrs Lim now.\n    equation = Eq(x + 12, 2 * (x - 4))\n    \n    # Solve the equation for x.\n    solution = solve(equation, x)\n    \n    return solution[0]  # Return the number of pies each had initially.\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return 9.97 + 9.98 + 9.99\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 5]\n    all_possible_numbers = list(permutations(digits))\n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    departure_time_hours = 6\n    departure_time_minutes = 35\n    arrival_time_hours = 10\n    arrival_time_minutes = 22\n\n    total_minutes_departure = (departure_time_hours * 60) + departure_time_minutes\n    total_minutes_arrival = (arrival_time_hours * 60) + arrival_time_minutes\n\n    duration_minutes = total_minutes_arrival - total_minutes_departure\n    return duration_minutes\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = '3456'\n    num_repetitions = 50 // len(pattern)\n    remaining_digits = 50 % len(pattern)\n    \n    sum_repeated_pattern = sum(int(digit) for digit in pattern) * num_repetitions\n    sum_remaining_digits = sum(int(pattern[i]) for i in range(remaining_digits))\n    \n    total_sum = sum_repeated_pattern + sum_remaining_digits\n    \n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    # Simplifying the expression first which is equivalent to\n    # 3 * (5/3) * (7/5) * (9/7) * (13/9) * (15/13)\n    # After canceling out the common factors, we are left with\n    ans = 3 * 15\n    return ans\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3/5\n    fraction_second_group = 1/4\n\n    # Calculate the number of sweets for the first group\n    sweets_first_group = fraction_first_group * total_sweets\n\n    # Calculate the number of students in the first group\n    students_first_group = sweets_first_group / 6\n\n    # Remaining sweets after the first group\n    remaining_sweets = total_sweets - sweets_first_group\n\n    # Calculate the number of sweets for the second group\n    sweets_second_group = fraction_second_group * remaining_sweets\n\n    # Calculate the number of students in the second group\n    students_second_group = sweets_second_group / 4\n\n    # Remaining sweets after the second group\n    remaining_sweets -= sweets_second_group\n\n    # Calculate the number of students in the third group\n    students_third_group = remaining_sweets / 5\n\n    # Total number of students\n    total_students = students_first_group + students_second_group + students_third_group\n\n    return int(total_students)\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    father_current_age = (father_future_age - tom_age) + tom_age\n    return father_current_age\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3 / 10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n\n    # Start from the largest odd number below 1000, since 997 is a prime\n    # and check in descending order for the largest odd number \n    # that can't be expressed as a sum of three composite numbers.\n    for number in range(997, 0, -2):\n        can_split = False\n        for x in range(4, number - 7, 2):\n            if is_composite(x):\n                for y in range(x + 2, number - x - 3, 2):\n                    if is_composite(y) and is_composite(number - x - y):\n                        can_split = True\n                        break\n            if can_split:\n                break\n        if not can_split:\n            return number\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n    \n    cycle_days = lcm(25, 20)\n    day = cycle_days % 30\n    month = (cycle_days // 30) % 12\n    start_month = 3\n    \n    next_month = (start_month + month - 1) % 12\n    if next_month == 0:\n        next_month = 12\n\n    next_month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if day == 0:\n        day = next_month_days[next_month - 1]\n        next_month -= 1\n        if next_month == 0:\n            next_month = 12\n\n    return (next_month, day)\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    halfway_point = (17 + 35) / 2\n    return halfway_point\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    # Convert the mixed numbers into improper fractions\n    first_number = 3 + 1/4\n    second_number = 1 + 3/4\n    \n    # Calculate the difference as a decimal\n    difference = first_number - second_number\n    \n    return difference\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "from sympy import primefactors\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]    \n    factor_lists = {card: primefactors(card) for card in cards}\n    \n    not_picked = []\n    for card in cards:\n        # We try to split the remaining cards into two products\n        card_factors = set(factor_lists[card])\n        for other_card in cards:\n            if other_card != card:\n                # Combine all factors of the remaining cards except for the current one\n                factors_combined = card_factors.copy()\n                for yet_another_card in cards:\n                    if yet_another_card != card and yet_another_card != other_card:\n                        factors_combined |= set(factor_lists[yet_another_card])\n                \n                # Compare the product of factors_combined to product of the rest\n                combined_product = 1\n                for factor in factors_combined:\n                    combined_product *= factor\n                \n                product_rest = 1\n                for left_card in cards:\n                    if left_card not in (card, other_card):\n                        product_rest *= left_card\n                \n                if combined_product == product_rest:\n                    not_picked.append(card)\n    \n    return not_picked[0]\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknown variables\n    boys, girls = symbols('boys girls')\n\n    # Set up equations based on the problem statement\n    total_prize = Eq(8 * boys + 5 * girls, 580) # Equation representing distribution of prize\n    ratio_boys_girls = Eq(boys, 3 * girls)      # Equation representing the ratio of boys to girls\n\n    # Solve the system of equations\n    solutions = solve((total_prize, ratio_boys_girls), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    # The numbers between 1 and 100 with a remainder of 3 after dividing by 4 are\n    # 3, 7, 11, ..., 99. This is an arithmetic sequence.\n    \n    first_term = 3\n    last_term = 99\n    common_difference = 4\n\n    # To find the sum of an arithmetic sequence, we use the formula:\n    # sum = (number of terms) * (first term + last term) / 2\n\n    # Calculate the number of terms in the sequence\n    number_of_terms = ((last_term - first_term) // common_difference) + 1\n\n    # Calculate the sum of the sequence\n    sum_of_numbers = number_of_terms * (first_term + last_term) // 2\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    \n    # Loop through all possible values for one of the equal sides\n    for side in range(1, 12 // 2):\n        # The other of the two equal sides\n        other_equal_side = side  \n        # The remaining length is the third side\n        third_side = 12 - 2 * side\n        \n        # Triangle Inequality Theorem: sum of lengths of any 2 sides must be greater than the third side\n        if third_side > 0 and side + other_equal_side > third_side:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percent = 0.15\n    tax_percent = 0.08\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the elder brother and y be the current age of the younger brother\n    x, y = symbols('x y')\n\n    # According to the problem, their current ages add up to 42\n    equation1 = Eq(x + y, 42)\n\n    # A few years ago, let's say z years ago, their ages were (x - z) and (y - z) respectively\n    z = symbols('z')\n    \n    # When the elder brother was the current age of the younger brother, y,\n    # the younger brother was half the current age of the elder brother, x/2.\n    equation2 = Eq(y - z, x / 2)\n\n    # And at that time, the younger brother was at the elder brother's current age minus z years.\n    # This age is y, so we have another equation x - z = y\n    equation3 = Eq(x - z, y)\n\n    # We can now solve these equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Since there may be multiple solutions, we need to find the one where all ages are positive integers\n    for solution in solutions:\n        if all(age.is_real and age > 0 for age in solution):\n            # We are only interested in the current age of the elder brother\n            return solution[0]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    # Using Inclusion-Exclusion Principle\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    return 104 // 4\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n    return strawberries_received\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n    \n    students_A = 8\n    students_B = 12\n    students_C = 20\n    \n    common_factor = gcd(gcd(students_A, students_B), students_C)\n    \n    return common_factor\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    pass_first = 25\n    fail_second = 12\n    \n    # Students who passed the second exam\n    pass_second = total_students - fail_second\n\n    # Only 3 students passed the second but failed the first exam,\n    # therefore, pass_second also includes these 3 students who failed the first exam.\n    # Subtracting these from the number of students who passed the first exam\n    # gives us the number who passed only the first exam.\n    pass_only_first = pass_first - (pass_second - 3)\n    \n    return pass_only_first\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Routes directly from A to D\n    direct_AD = 6\n    \n    # Routes from A to B to C to D\n    ABCD = 7 * 5 * 2\n\n    # Routes from A to C to D\n    ACD = 4 * 2\n\n    # Total routes from A to D\n    ans = direct_AD + ABCD + ACD\n\n    return ans\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the number of chocolate cupcakes and h be the number of cheese cupcakes\n    c, h = symbols('c h')\n\n    # Set up the equations based on the problem\n    total_cupcakes = Eq(c + h, 255)                        # Total cupcakes\n    cupcakes_left = Eq(c * (1 - 0.40), h * (1 - 0.75))     # Cupcakes left after selling\n    \n    # Solve the system of equations\n    solutions = solve((total_cupcakes, cupcakes_left), (c, h))\n\n    # Calculate the number of cupcakes left (either chocolate or cheese since they are equal)\n    cupcakes_left = solutions[c] * (1 - 0.40)\n\n    return cupcakes_left\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen = symbols('pen')\n    pencil_cost = 2  # each pencil costs £2\n    total_cost = 20  # total cost for 2 pens and 3 pencils\n\n    # 2 pens and 3 pencils cost £20\n    equation = Eq(2 * pen + 3 * pencil_cost, total_cost)\n    \n    pen_price = solve(equation, pen)\n\n    return pen_price[0]\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    total_cattle = 5\n    total_days = 10\n\n    hay_per_day_per_cattle = total_hay / (total_cattle * total_days)\n\n    return hay_per_day_per_cattle\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    from sympy import divisors\n\n    # Get all the divisors of 210\n    age_combinations = divisors(210)\n\n    # Filter out divisors above 9 as children are under 10\n    age_combinations = [x for x in age_combinations if x < 10]\n    \n    # Sort to ensure youngest age is first\n    age_combinations.sort()\n\n    # It's the smallest divisor (excluding 1)\n    youngest_age = age_combinations[1]\n\n    return youngest_age\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # Let b represent the number of boys and g represent the number of girls.\n    # We are given the following relationship:\n    # (1/4) * b = (2/5) * g\n    # We also know that the total number of students is 39:\n    # b + g = 39\n\n    # We can solve for b and g using algebraic manipulation.\n    # First, express g in terms of b using the second equation:\n    # g = 39 - b\n\n    # Now substitute g in the first equation and solve for b:\n    # (1/4) * b = (2/5) * (39 - b)\n    # Multiply both sides by 20 to clear denominators:\n    # 5 * b = 8 * (39 - b)\n    # 5b = 312 - 8b\n    # 13b = 312\n    b = 312 // 13\n\n    # Now substitute the value of b in the equation for g:\n    g = 39 - b\n\n    # The number of more boys than girls at the gathering is:\n    ans = b - g\n    return ans\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    killed_fraction = 3/8\n    killed_seedlings = total_seedlings * killed_fraction\n    surviving_seedlings = total_seedlings - killed_seedlings\n    \n    return int(surviving_seedlings)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n    \n    full_days = total_locusts // daily_consumption\n    remaining_locusts = total_locusts - (full_days * daily_consumption)\n    \n    if remaining_locusts == 0:\n        remaining_locusts = daily_consumption\n    \n    return remaining_locusts\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = (77.5 * 52 / 100) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of $5 and $10 notes\n    num_5, num_10 = symbols('num_5 num_10')\n\n    # Equations based on the problem\n    equation1 = Eq(num_5 + num_10, 116)  # Total number of notes\n    equation2 = Eq(num_10 - 0.6 * num_10, (4 / 7) * (num_5 - 0.25 * num_5))  # Ratio after spending\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (num_5, num_10))\n\n    # Calculate the money spent based on the number of notes spent\n    money_spent = 0.6 * solutions[num_10] * 10 + 0.25 * solutions[num_5] * 5\n\n    return money_spent\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = 12 * 92 + 22 * 82 + 32 * 72\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let don = x and ben = y\n    don, ben = symbols('don ben')\n\n    # The initial ratio of Don's to Ben's stickers is 2:3\n    initial_ratio = Eq(don/ben, 2/3)\n\n    # After Don bought another 10 stickers and Ben lost 5 stickers, the ratio becomes 6:7\n    new_ratio = Eq((don + 10)/(ben - 5), 6/7)\n\n    # Solving the system of equations\n    solutions = solve((initial_ratio, new_ratio), (don, ben))\n\n    # Returning Don's initial number of stickers\n    return solutions[don]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = 726 * 8\n    return round(ans, 1)\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    total = 0\n    for i in range(2, 2017, 4):\n        total += i - (i + 1)\n    return total\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        return 0\n    else:\n        return remainder\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    toys_to_give = (amy_toys - sally_toys) // 2\n    return toys_to_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    \n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    max_product = 0\n    \n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    # Calculate the average of the squares by dividing by the number of terms\n    average = 2870 / 20\n\n    # Assign the first odd number\n    first_odd = 1\n\n    # Initialize the sum of the expression\n    sum_expression = 0\n\n    # Loop through the terms, where the odd number from 1 to 39 (20 terms in total)\n    for i in range(20):\n        # Calculate the product of consecutive odd numbers\n        product = first_odd * (first_odd + 2)\n        \n        # Add the product to the sum of the expression\n        sum_expression += product\n        \n        # Move to the next pair of odd numbers\n        first_odd += 2\n\n    # Divide by the number of terms to find the average of the sums\n    average_expression = sum_expression / 20\n\n    # Since it's an arithmetic series, the average times the count gives us the sum\n    ans = average_expression * 20\n    return int(ans)\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n\n    # Define a function to calculate permutations\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    # Initially consider the triplet sisters as a single entity, along with the two boys and two other students.\n    # There are 5 factorial ways to arrange these 5 entities.\n    arrangements = permutations(5, 5)\n    \n    # There are 3 factorial ways to arrange the triplet sisters among themselves.\n    arrangements *= permutations(3, 3)\n    \n    # Now we need to reject the arrangements where the twin brothers are next to each other.\n    # If the twin brothers are next to each other, they can be considered as a single entity.\n    # Thus, we have 4 entities (the brothers as one, the triplet sisters as one, and the two other students).\n    # There are 4 factorial ways to arrange these.\n    incorrect_arrangements = permutations(4, 4)\n    \n    # And within this entity, there are 2 ways to arrange the twin brothers.\n    incorrect_arrangements *= permutations(2, 2)\n\n    # Total correct arrangements are the initial arrangements minus incorrect arrangements.\n    correct_arrangements = arrangements - incorrect_arrangements\n\n    return correct_arrangements\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    \n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    cups_per_gallon = 6\n    cups_needed = 30\n    gallons_needed = cups_needed / cups_per_gallon\n\n    return gallons_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"21{i}{j}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n\n    # Applying the Pigeonhole Principle\n    min_students_per_day = (total_students + days_in_week - 1) // days_in_week\n\n    return min_students_per_day\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # If summer vacation starts on a Friday, then the next Friday will be after 7 days.\n    # Since the vacation lasts for 55 days, the number of Fridays can be calculated by integer division.\n    return 55 // 7 + 1  # Adding 1 because if we start on a Friday, that counts as the first one.\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    return 3 / (1 - 1/2)\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percentage_of_girls_with_glasses = 20\n    total_girls_in_class = 25\n\n    number_of_girls_with_glasses = (percentage_of_girls_with_glasses / 100) * total_girls_in_class\n\n    return int(number_of_girls_with_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of the numbers 2, 3, 4, 5, 6, 8, 9\n    lcm_val = lcm(2, 3, 4, 5, 6, 8, 9)\n\n    # We are given that N gives a remainder of 5 when divided by 7.\n    # So, we need to find a multiple of the lcm_val that gives a remainder of 5 when divided by 7.\n    # We start checking from the lcm_val itself and keep adding the lcm_val until the required condition is satisfied.\n    N = lcm_val\n    while N % 7 != 5:\n        N += lcm_val\n\n    return N\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_a_pen = pen_cost // pencil_cost\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n    total_cost = cost_per_mug * 7 + cost_per_pen * 5\n    change_from_10 = 10 - total_cost\n    return change_from_10\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away = total_pupils * (1/5)\n    pupils_go_to_cathedral = total_pupils - pupils_away\n    return int(pupils_go_to_cathedral)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song = 3  # minutes for one child to sing one song\n    number_of_songs = 2  # total number of songs to sing\n    number_of_children = 50  # total number of children singing\n\n    total_time = time_per_song * number_of_songs * number_of_children\n    return total_time\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    if 0.25 > 0.3:\n        ans = \"25%\"\n    else:\n        ans = \"0.3\"\n    \n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100  # Interest rate per year\n    target_amount = 37100\n    years = (target_amount / principal)**(1/rate) - 1  # Compound interest formula\n\n    return round(years)\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    total_donuts = 6 * 6  # Number of boxes times number of donuts per box\n    donuts_eaten = 3\n    donuts_left = total_donuts - donuts_eaten\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least common multiple of 3 and 7\n    multiple = lcm\n    while True:\n        if str(multiple).endswith('2'):\n            return multiple\n        else:\n            multiple += lcm\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    # Let's denote:\n    # w_apples: weight of the 5 apples together\n    # w_basket: weight of the basket itself\n    # The total weight with 5 apples is 580 grams, \n    # and with 2 apples (after removing 3) is 280 grams. \n    # We deduce that 3 apples weigh 580 - 280 grams.\n\n    # Calculating weight of 3 apples\n    weight_3_apples = 580 - 280\n\n    # Since 3 apples are removed and we're left with 2 apples in the basket\n    # we can find the weight of the basket by subtracting the weight of 2 apples\n    # from the remaining total weight\n    # w_basket = (weight of 5 apples and basket) - weight_3_apples\n    w_basket = 580 - weight_3_apples\n    \n    return w_basket\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    num_weeks = 2\n    return days_in_a_week * num_weeks\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    value1 = 3 * 10**5\n    value2 = 3 * 10**2\n    difference = value1 - value2\n    return difference\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the rates of work as:\n    # r_john for John, r_jonah for Jonah, and r_angus for Angus\n    r_john, r_jonah, r_angus = symbols('r_john r_jonah r_angus')\n\n    # Equation 1: John, Jonah and Angus together takes 27 hours to build the wall\n    equation1 = Eq(1/(r_john + r_jonah + r_angus), 27)\n    \n    # Equation 2: Jonah and Angus together takes 36 hours to build the wall\n    equation2 = Eq(1/(r_jonah + r_angus), 36)\n    \n    # Equation 3: Since John doesn't work in the second scenario, we can find his rate of work\n    # by subtracting Equation 2 from Equation 1.\n    equation3 = Eq(1/r_john, 1/equation1.lhs - 1/equation2.lhs)\n    \n    # Solve for r_john (John's rate of work)\n    solution_r_john = solve((equation3), (r_john))\n    \n    # Time taken for John to build the wall on his own is the inverse of his rate of work\n    time_for_john = 1 / solution_r_john[r_john]\n\n    return time_for_john\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return (2 ** 17) % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    return sum(range(1, 21))\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    def is_solvable_by_coins(z, target):\n        for x in range(target // (4 * z) + 1):\n            for y in range(target // (5 * z) + 1):\n                if 4 * z * x + 5 * z * y == target:\n                    return True\n        return False\n\n    z = 1  # We can assume z = 1 since we are looking for a proportion\n    largest_unsolvable = 0\n    i = 0\n\n    # The Frobenius Number for coins a and b is found generally by (a - 1) * (b - 1) - 1\n    # Frobenius problem known solution for two coin denominations\n    ans = (4 * z - 1) * (5 * z - 1) - 1\n    return ans\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # The sum of the numbers is fixed at 1001.\n    # The maximum possible value for the greatest common divisor (GCD)\n    # would be when all the numbers are equal, but since they are positive integers,\n    # they need to be at least 1.\n    \n    # To have the maximum GCD, we should ideally have each number to be the GCD \n    # itself. So, we seek the largest number 'd' that can be multiplied by 10 \n    # to get a sum close to or equal to 1001.\n    # We start with 1001 and go down to find the maximum possible 'd' \n    # which satisfies this condition. Since we may not find an exact match, \n    # we look for the largest 'd' that divides 1001 and gives a remainder \n    # which can be distributed among the ten numbers to still maintain\n    # their sum as 1001.\n\n    total_sum = 1001\n    for d in range(total_sum, 0, -1):\n        if total_sum % d == 0:\n            # Check if 'd' can be divided equally among \n            # the ten integers to make the sum 1001.\n            if (total_sum // d) <= 10:\n                return d\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Let c be Claire's current age and d be Daniel's current age.\n    # c - 5 and d - 5 are their ages five years ago. Their combined age was 14 then.\n    # The equation for their combined age five years ago is: (c - 5) + (d - 5) = 14.\n    # This simplifies to: c + d - 10 = 14 or c + d = 24.\n    # We are asked to find their combined age in 3 years, which is (c + 3) + (d + 3).\n    # If currently their combined ages sum up to 24, in 3 years it will be: 24 + 3*2 = 30.\n    \n    combined_age_in_3_years = 24 + 3 * 2\n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            if (108200 + 10 * a + b) % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    weight_of_apples_and_pears = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight_of_apples_and_pears\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "from math import gcd\n\ndef solution():\n    length1 = 45\n    length2 = 30\n    greatest_common_divisor = gcd(length1, length2)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    # Let x be the original number of boys\n    # Then the original number of girls will be 152 - x\n    # After removing 1/11 of the boys and 5 girls:\n    # Number of boys left = x - x/11 = 10x/11\n    # Number of girls left = (152 - x) - 5 = 147 - x\n    # We are given that the numbers become the same, therefore:\n    # 10x/11 = 147 - x\n    # Solving for x gives us the original number of boys\n\n    # Calculate the original number of boys (x) by solving the equation:\n    x = (11 * 147) / (11 + 10)  # Move the denominators to the other side and simplify\n\n    return int(x)\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies_before, cakes_before = symbols('cookies_before cakes_before')  # Total number of cookies and cakes before selling\n\n    equation1 = Eq(cookies_before, 3 * cakes_before)  # Thrice as many cookies as cakes\n    equation2 = Eq(cookies_before - 39 + cakes_before - 17, 48)  # After selling, 48 cookies and cakes left\n\n    solutions = solve((equation1, equation2), (cookies_before, cakes_before))\n\n    # Calculate the number of cookies left after selling\n    cookies_left = solutions[cookies_before] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    number = 1\n    while True:\n        if number % 5 == 1 and number % 12 == 3:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    boxes_bought = total_pencils // pencils_per_box\n\n    return boxes_bought\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    \n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n    \n    amanda_cathy_total = solutions[amanda] + solutions[cathy]\n    \n    return amanda_cathy_total\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    return 386 + 99\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    # Initial variables\n    eggs_per_day = 50\n    adult_in_days = 30\n    total_days = 40\n    new_adult_fleas = 0\n\n    # Daily tracking of flea population\n    for day in range(1, total_days + 1):\n        if day > adult_in_days:\n            new_adult_fleas += eggs_per_day\n    \n    return new_adult_fleas\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "openai服务波动，请重试"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (3 * 7) + 24\n    return ans\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    # Number of people who speak each language\n    french = 15\n    japanese = 12\n    italian = 13\n    \n    # Number of people who speak two languages\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    \n    # Number of people who speak all three languages\n    all_three = 1\n    \n    # Using Inclusion-Exclusion Principle to find the total number of people\n    total = french + japanese + italian - (french_japanese + french_italian + japanese_italian) + all_three\n    \n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_drink = 12\n    fraction_water = 3 / 4\n    amount_water = total_drink * fraction_water\n    return amount_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    # This problem involves an arithmetic progression\n    # with the first term a_1 = 3, the common difference d = 3,\n    # and the number of terms n = 22\n\n    a_1 = 3\n    d = 3\n    n = 22\n\n    # The nth term of an arithmetic progression can be calculated as\n    # a_n = a_1 + (n - 1) * d\n    # The sum of an arithmetic progression can be calculated as\n    # S_n = n/2 * (a_1 + a_n)\n\n    # Calculate the nth term\n    a_n = a_1 + (n - 1) * d\n\n    # Calculate the sum of the first n terms\n    S_n = n/2 * (a_1 + a_n)\n\n    return int(S_n)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_amount = story_books + magazines\n    return total_amount\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int('5' + str(abcd))\n        N = int(str(abcd) + '5')\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    num1 = 21 + Fraction(21, 286)\n    num2 = 6 + Fraction(647, 2530)\n    num3 = 1 + Fraction(1370, 2829)\n\n    # Perform the calculations\n    result = num1 / num2 * num3\n\n    # Convert the result to a mixed number\n    mixed_num = result.numerator // result.denominator\n    fraction_part = Fraction(result.numerator % result.denominator, result.denominator)\n\n    # Return the final answer as a mixed number\n    ans = (mixed_num, fraction_part)\n    return ans\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # The dimensions of the cuboid are 6x10x12, so each of the smaller cubes will be of size 1x1x1\n    # because 6*10*12 = 720, which is the number of smaller cubes.\n\n    # Number of smaller cubes on one face lengthwise is 10 x 12\n    # But we need to exclude the edges which also belong to other faces.\n    # So, we subtract 2 for each dimension (one for each edge)\n    pink_cubes_per_face = (10 - 2) * (12 - 2)\n    \n    # A cuboid has six faces, but cubes from the other two dimensions must also be considered:\n    pink_cubes_per_face *= 2  # Multiplies by 2 because we have two faces of this size\n\n    # We do the same for the other two sets of faces:\n    pink_cubes_per_face += 2 * ((6 - 2) * (12 - 2))  # Two faces of size 6x12\n    pink_cubes_per_face += 2 * ((6 - 2) * (10 - 2))  # Two faces of size 6x10\n\n    return pink_cubes_per_face\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 30 / 100 * 1600\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85  # in pounds\n    pencil_price = 0.38  # in pounds\n    ruler_price = 0.59  # in pounds\n    \n    remaining_money = total_money - (pencil_price + ruler_price)\n    \n    return remaining_money\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 's' be the work Star does per hour\n    # Let 'n' be the work Nini does per hour\n    s, n = symbols('s n')\n\n    # Equation representing the work done when Star works for 5 hours and Nini for 20 hours\n    equation1 = Eq(5 * s + 20 * n, 1)\n\n    # Equation representing the work done when Star works for 20 hours and Nini for 8 hours\n    equation2 = Eq(20 * s + 8 * n, 1)\n\n    # Solve the system of equations for 's' and 'n'\n    solutions = solve((equation1, equation2), (s, n))\n\n    # Work that Nini does per hour\n    nini_per_hour = solutions[n]\n\n    # Time it takes Nini to complete the job by herself (1/nini_per_hour)\n    time_for_nini = 1 / nini_per_hour\n\n    return time_for_nini\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    total_candy = 140\n    # Prime factorization of 140 = 2^2 * 5 * 7\n    \n    # Since Valerie only distributes the candies into piles with odd numbers,\n    # we should exclude the power of 2 from the factorization\n    # Any distribution corresponds to a partition of the remaining factors 5 and 7\n    \n    # The number of partitions is determined by the number of divisors of the reduced number\n    # For any prime factor p^k, there are (k + 1) ways to distribute (this includes giving 0 piles that number)\n    # Hence for 5^1 and 7^1, there are (1 + 1)(1 + 1) = 2 * 2 ways\n    \n    number_of_ways = (1 + 1) * (1 + 1)  # (5^0, 5^1) and (7^0, 7^1)\n    \n    return number_of_ways\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for number in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if number % 9 == 5 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # Since there are 20 keys and 20 classrooms, the worst-case scenario is trying every key with each classroom\n    # until the correct key is found as the last option.\n    # This would take 20 attempts for the first classroom, 19 for the second, and so on, down to 1 for the last classroom.\n\n    total_attempts = sum(range(1, 21))  # Sum from 1 to 20\n    return total_attempts\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, the situation of the stacks is as follows:\n    # Stack A: 20 stones, Stack B: 16 stones\n\n    # For Jerry to win, Jerry must move in such a way that Tom is forced to pick the last stone.\n    # Jerry can do this by equalizing the number of stones in both stacks.\n    # Whatever Tom does next, Jerry can always mirror his actions on the other pile,\n    # ensuring that Jerry picks last.\n\n    # Since Stack B has 4 less stones than Stack A, Jerry should take 4 stones from Stack A.\n    stack_name = \"A\"\n    stones_taken = 4\n\n    return stones_taken, stack_name\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Each sheet of the newspaper consists of 4 page numbers\n    # since there are 2 pages on each side (front and back).\n    # The first sheet will have pages 1, 2, 55, and 56.\n    # Page numbers on sheets form an arithmetic sequence, where\n    # the difference between consecutive sheets is 4.\n\n    # For the third sheet, we find the page numbers using the pattern\n    # First page of third sheet (front): 1 + 2 * (3 - 1) = 5\n    # Second page of third sheet: First page + 1 = 5 + 1 = 6\n    # Third page of third sheet (back): 56 - 2 * (3 - 1) = 50\n    # Fourth page of third sheet: Third page - 1 = 50 - 1 = 49\n\n    # Sum of page numbers on the third sheet\n    sum_of_pages = 5 + 6 + 50 + 49\n\n    return sum_of_pages\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3 / 7\n    girls = total_students * fraction_girls\n    return int(girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018 \n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    # Number of peaches that can be exchanged for 1 watermelon\n    peaches_per_watermelon = 6\n\n    # Ratio of apples to peaches\n    apples_per_peach = 3 / 2\n\n    # Calculate the number of apples that can be exchanged for 1 watermelon\n    apples_per_watermelon = peaches_per_watermelon * apples_per_peach\n\n    return apples_per_watermelon\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits_used = 0\n    page = 0\n    while digits_used < 933:\n        page += 1\n        digits_used += len(str(page))\n    return page\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    apple_juice_price = 5\n    apple_juice_cups = 30\n    orange_juice_price = 3\n    orange_juice_cups = 50\n    peach_juice_price = 10\n    peach_juice_cups = 20\n\n    total_cups = apple_juice_cups + orange_juice_cups + peach_juice_cups\n    total_cost = (apple_juice_price * apple_juice_cups + \n                  orange_juice_price * orange_juice_cups + \n                  peach_juice_price * peach_juice_cups)\n    \n    average_cost_per_cup = total_cost / total_cups\n\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for page in range(1, 301):\n        if '3' in str(page):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initially, both boxes have the same number of pens of each color.\n    # After taking 20 pens from box A, we need to check for each color the\n    # minimum number of pens that can be left in box A to have at least 15 pens left.\n    # We return enough pens from box B to ensure this condition.\n\n    min_pens_in_a = 15  # minimum pens of each color required in box A\n    \n    # The number of pens of each color in box A after taking 20 pens out\n    pens_in_a_after = {\n        'blue': 10 - 5,  # Taking 5 out, since removing more would go below 15\n        'red': 15 - 5,\n        'black': 20 - 5,\n        'green': 25 - 5\n    }\n    \n    # Calculate pens to return to box A for each color\n    pens_to_return = sum(\n        max(0, min_pens_in_a - pens) for pens in pens_in_a_after.values()\n    )\n    \n    return pens_to_return\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    # Initialize the number of digits to zero\n    num_digits = 0\n    \n    # Go through all the numbers from 1 to 91\n    for num in range(1, 92):\n        # Convert the number to a string and get its length (number of digits)\n        num_digits += len(str(num))\n        \n    return num_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "from datetime import datetime\n\ndef solution():\n    start_time = datetime.strptime('9:15PM', '%I:%M%p')\n    end_time = datetime.strptime('11:06PM', '%I:%M%p')\n    duration = end_time - start_time\n    return int(duration.total_seconds() / 60)\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    total_diff = 32\n    total_students = 0\n    side_length = 1\n    \n    while True:\n        if side_length % 2 == 0:\n            boys = side_length * 4 - 4\n            girls = (side_length - 2) * 4\n        else:\n            boys = (side_length * 4 - 4) + (side_length - 2) ** 2\n            girls = (side_length - 2) * 4 + ((side_length - 1) - 2) ** 2\n\n        diff = boys - girls\n        \n        if diff == total_diff:\n            total_students = boys + girls\n            break\n\n        side_length += 1\n\n    return total_students\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    ans = 1 / 8\n    return ans\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    milk_chocolates = 12\n    soft_centre_chocolates = 16\n    \n    # Since there are more soft-centre chocolates (16) than milk chocolates (12),\n    # all milk chocolates must have soft-centres.\n    \n    # Let's find out the minimum number of plain chocolates with soft-centres.\n    plain_soft_centre_chocolates = soft_centre_chocolates - milk_chocolates\n\n    # This is the minimum because all milk chocolates have been assumed to have soft-centres.\n    return plain_soft_centre_chocolates\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    quotient = 29\n    remainder = 11\n    sum_dividend_divisor = 431\n\n    # Dividend = divisor * quotient + remainder\n    # If we let divisor be x, then the dividend will be x * quotient + remainder\n    divisor = symbols('x')\n    dividend = divisor * quotient + remainder\n\n    # sum_dividend_divisor is the sum of dividend and divisor\n    equation = Eq(dividend + divisor, sum_dividend_divisor)\n    \n    # Now we solve for the divisor\n    divisor_value = solve(equation, divisor)[0]\n\n    # We can now calculate the dividend\n    dividend_value = divisor_value * quotient + remainder\n\n    # The answer is the difference between the dividend and the divisor\n    difference = dividend_value - divisor_value\n    \n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    violin_players = 11\n    percentage = 12.5\n    total_pupils = violin_players * 100 / percentage\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of each type of coin\n    x = symbols('x')\n\n    # We have 1p, 2p, 5p, and 10p coins, so the total value is x(1+2+5+10)\n    equation = Eq(x * (1 + 2 + 5 + 10), 90)\n    \n    # Solve for x (number of each type of coin)\n    solution = solve(equation, x)\n    \n    # Total number of coins is 4 types of coins * number of each coin\n    total_coins = 4 * solution[0]\n\n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, pears = symbols('apples pears')\n    \n    # Initial condition\n    equation1 = Eq(apples + pears, 105)\n    \n    # After selling fruits\n    equation2 = Eq((apples - apples / 3) / (pears - 2 * pears / 5), 5 / 6)\n    \n    # Solve for apples and pears\n    solutions = solve((equation1, equation2), (apples, pears))\n    \n    # Calculate the total number of apples and pears sold\n    apples_sold = solutions[apples] / 3\n    pears_sold = 2 * solutions[pears] / 5\n    \n    return int(apples_sold + pears_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    ratio_eq = Eq(4 * B, 5 * A)\n    ratio_eq2 = Eq(6 * A, 5 * C)\n    diff_eq = Eq(C - A, 10)\n    \n    solutions = solve((ratio_eq, ratio_eq2, diff_eq), (A, B, C))\n    \n    A_value = solutions[A]\n    B_value = solutions[B]\n    C_value = solutions[C]\n    \n    ans = A_value + B_value + C_value\n    return ans\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n\n    # Treat A, B, C, D as one super-student since they must be together\n    # There are 12 - 3 (because A, B, C, D become one) = 9 remaining positions\n    num_positions = 12 - 3\n    ways_to_order_positions = factorial(num_positions)\n\n    # The four students can be ordered in 4! ways among themselves\n    ways_to_order_ABCD = factorial(4)\n\n    # Multiply the two quantities for the final answer\n    total_ways = ways_to_order_positions * ways_to_order_ABCD\n\n    return total_ways\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    total_games = 6 * 5 // 2  # Each student plays 5 others, but each game counts for 2 students\n    total_points = total_games * 2  # 2 points are distributed per game\n    known_points = 7 + 6 + 5 + 4 + 3\n    remaining_points = total_points - known_points  # Subtract known points from total points\n\n    return remaining_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x and y be the original weights of bags A and B respectively.\n    x, y = symbols('x y')\n\n    # The equations based on the problem statement are:\n    equation1 = Eq(x/y, 5/3)\n    equation2 = Eq((x - 10)/(y + 10), 7/5)\n\n    # Solve the system of equations for x and y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total weight of both bags.\n    total_weight = solutions[x] + solutions[y]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    total_boys = 9\n\n    girls_per_boy = 1 / boys_to_girls_ratio\n    total_girls = total_boys * girls_per_boy\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n\n    difference = (last_line_players - first_line_players) * 2 // (total_players / first_line_players - 1)\n\n    return difference\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 2 and num % 5 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    factors = [48, 925, 38, 435]\n    product = 1\n    for factor in factors:\n        product *= factor\n\n    product_str = str(product)\n    count_zeros = len(product_str) - len(product_str.rstrip('0'))\n    \n    return count_zeros\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    # Convert all masses to the same unit (grams)\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]\n    \n    # Find the maximum mass\n    max_mass = max(masses)\n    \n    return max_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    # Given information\n    thefts = 2\n    bark_probability_when_theft = 0.9\n    days = 1000\n    barks_per_week = 3\n    weeks = days / 7\n    \n    # Calculate the total number of times the dog barks\n    total_barks = barks_per_week * weeks\n\n    # Calculate the probability that the dog barks during the theft\n    prob_bark_during_theft = (thefts * bark_probability_when_theft) / total_barks\n\n    return prob_bark_during_theft\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for each type of candy\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n    \n    # Set up equations based on the problem statement\n    equation1 = Eq(apple, orange + 7) # Tony bought 7 more apple candies than orange candies\n    equation2 = Eq(apple, grape + 3)  # Tony bought 3 more apple candies than grape candies\n    equation3 = Eq(pineapple, orange + 2) # Tony bought 2 more pineapple candies than orange candies\n    equation4 = Eq(apple + orange + grape + pineapple, 25) # Total candies bought\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    girls_ratio = 6 / 11\n    boys_ratio = 1 - girls_ratio\n    boys = total_children * boys_ratio\n    \n    return int(boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    # If he gives 13 stickers to each pupil, he will have an excess of 190 stickers => stickers - 13*pupils = 190\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    \n    # If he gives 17 stickers to each pupil, he will have an excess of 50 stickers => stickers - 17*pupils = 50\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # Since we are looking for the two numbers with the digits from 1 to 9,\n    # and we want the smallest difference, we will make the two numbers as\n    # close to each other as possible.\n    # The smallest number will start with 1 and the largest number will start\n    # with 9, in order to minimize the difference we should then make the next\n    # digit in the smaller number as large as possible and in the larger number\n    # as small as possible.\n\n    # Generating the smallest number by arranging 1 - 9 in ascending order\n    smallest_number = int(\"\".join(map(str, range(1, 10))))\n\n    # Generating the largest number with the same digits in descending order\n    largest_number = int(\"\".join(map(str, range(9, 0, -1))))\n\n    # Calculating the difference\n    min_difference = largest_number - smallest_number\n    \n    return min_difference\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial condition equation: boys = girls - 65\n    equation1 = Eq(boys, girls - 65)\n\n    # After leaving equation: (1 - 2/5) * boys = (1 - 3/7) * girls\n    equation2 = Eq((1 - 2/5) * boys, (1 - 3/7) * girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    boys_left = (1 - 2/5) * solutions[boys]\n    girls_left = (1 - 3/7) * solutions[girls]\n    \n    total_students_left = boys_left + girls_left\n\n    return total_students_left\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    total_pupils = 1690\n    girls_swim_ratio = 31\n    girls_not_swim_ratio = 49\n    boys_swim_less = 120\n    more_boys = 90\n\n    # Total ratios for girls\n    total_girls_ratio = girls_swim_ratio + girls_not_swim_ratio\n    # Let the number of girls be g\n    g = total_pupils / (1 + (more_boys + boys_swim_less) / total_girls_ratio)\n    # Calculating the number of boys\n    b = total_pupils - g\n\n    # Number of girls who can swim and who cannot\n    girls_cannot_swim = (girls_not_swim_ratio / total_girls_ratio) * g\n\n    # Number of boys who can swim and who cannot\n    boys_cannot_swim = (b + boys_swim_less) / 2\n\n    # Total pupils who cannot swim\n    pupils_cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return int(pupils_cannot_swim)\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    result = 2412 // 9\n    return result\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n    \n    num_kids = 3\n    ans = factorial(num_kids)\n    \n    return ans\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # Mike's position being 2nd in line from each side suggests that the square array has 3 columns and rows.\n    # A square array with 3 columns and 3 rows has 9 positions.\n    # Since Mike occupies one of those positions, that leaves 8 positions for other students.\n    ans = 3 * 3  # Total number of students including Mike\n    return ans\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    # Let g represent Geoff's current age, and s represent his sister's current age.\n    # According to the problem, we have g + s = 22.\n\n    # After x years, we want the sum of their ages to be 40:\n    # (g + x) + (s + x) = 40.\n    \n    # Simplifying the equation, we get 2x + (g + s) = 40.\n\n    # Substituting the initial condition g + s = 22 into this equation:\n    # 2x + 22 = 40.\n\n    # Hence, solving for x gives us:\n    x = (40 - 22) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    # Let x be the total number of bricks at first.\n    # We can set up an equation based on the problem description:\n    # First trip: (1/2)x - 26\n    # Remaining after first trip: x - ((1/2)x - 26)\n    # Second trip: (1/2)(x - ((1/2)x - 26)) + 11\n    # Remaining after second trip: x - ((1/2)x - 26) - ((1/2)(x - ((1/2)x - 26)) + 11)\n    # Third trip: 68 are moved\n    # Remaining after third trip: x - ((1/2)x - 26) - ((1/2)(x - ((1/2)x - 26)) + 11) - 68 = 25\n    # Simplifying the equation to find x\n\n    # Let's use sympy to solve the equation\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    remaining_after_first = x - ((1/2) * x - 26)\n    remaining_after_second = remaining_after_first - ((1/2) * remaining_after_first + 11)\n    equation = Eq(remaining_after_second - 68, 25)\n\n    initial_bricks = solve(equation, x)\n    return initial_bricks[0]\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 21):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    return 125 * 34 * 25 * 4 * 8\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # initialize an array to store ways to reach each step\n    ways = [0] * 11\n    ways[0] = 1  # there is one way to stay on the ground (0 steps)\n    \n    # calculate the ways to reach each step\n    for i in range(1, 11):\n        if i >= 2:\n            ways[i] += ways[i - 2]\n        if i >= 3:\n            ways[i] += ways[i - 3]\n    \n    return ways[10]\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n    \n    minimum_dividend = (smallest_divisor * quotient) + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    current_number = '1998'\n    n = len(current_number)\n    while int(current_number) % 33 != 0:\n        current_number += '1998'\n        n += 4  # Since we add four more digits each time\n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    \n    # Each group follows a pattern where the first number is the group number,\n    # the second is the square of the group number,\n    # and the third is the group number multiplied by the second number.\n    first = group_number\n    second = group_number**2\n    third = group_number * second\n    \n    # The sum of the numbers in the group is simply the sum of the three numbers.\n    sum_of_group = first + second + third\n    \n    return sum_of_group\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    return 882 // 14\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    total_miles = 3.75\n    per_run_miles = 1/4\n    number_of_runs = total_miles / per_run_miles\n    return int(number_of_runs)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    girls = (boys / 3) * 2\n    return girls\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 5 == 3 and num % 6 == 4 and num % 9 == 1:\n            return num\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n    \n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n    \n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for the number of erasers that Candice, Doris, and Elly have\n    candice, doris, elly = symbols('candice doris elly')\n    \n    # Given equations based on the problem statement\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    return (14 * 10) / 21\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total = books_about_fish + books_about_birds\n    return total\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for number in range(10, 100):\n        if number % 6 == 0 and number % 9 == 0 and str(number).endswith('0'):\n            return number\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # Let's denote the original number as ABCD (in thousands, hundreds, tens, and ones place respectively)\n    # The new number, with the digit D moved to the front is DABC\n    # According to the problem, DABC = ABCD + 5877\n    # This can be written as:\n    # D*1000 + A*100 + B*10 + C = A*1000 + B*100 + C*10 + D + 5877\n    # Simplifying this, we get:\n    # D*1000 - D = A*1000 + B*100 + C*10 - A*100 - B*10 - C + 5877\n    # D*999 = A*900 + B*90 + C*9 + 5877\n    # Since 999 is 9 * 111, we can divide both sides by 9:\n    # D*111 = A*100 + B*10 + C + 653 (since 5877 / 9 = 653)\n    # This means that for the original equation to hold, D*111 must end with 3 and be greater than 653\n    # Let's iterate through possible values for D (D has to be >6 because DABC is greater than ABCD)\n    \n    for D in range(7, 10):\n        if (D * 111) % 10 == 3:\n            _D = D\n            _A = ((D * 111) - 653) // 100\n            _B = (((D * 111) - 653) % 100) // 10\n            _C = (((D * 111) - 653) % 100) % 10\n            return _A * 1000 + _B * 100 + _C * 10 + _D\n    \nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_to_add = 7 * 10  # equivalent to 7 tens\n    correct_answer = original_number + tens_to_add\n    johnny_answer = 5839\n\n    # Check if Johnny's answer is correct\n    if johnny_answer == correct_answer:\n        return johnny_answer  # Johnny is correct\n    else:\n        return correct_answer  # Johnny is incorrect, return the correct answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    total_sum = 27\n    max_integers = total_sum - (total_sum // 2)\n\n    return max_integers\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # convert 3 m to cm\n    given_lengths_cm = [147, 32.5, 67]  # the given three lengths in cm\n    sum_given_lengths = sum(given_lengths_cm)\n    fourth_length_cm = total_length_cm - sum_given_lengths  # the length of the fourth piece\n    return fourth_length_cm\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    # Probabilities of passing the test\n    p_A = 0.5\n    p_B = 0.4\n    p_C = 0.2\n\n    # Probabilities of failing the test\n    q_A = 1 - p_A\n    q_B = 1 - p_B\n    q_C = 1 - p_C\n\n    # Calculate individual probabilities of passing\n    # Probability that nobody passes\n    prob_no_one = q_A * q_B * q_C\n    # Probability that only one person passes\n    prob_one_A = p_A * q_B * q_C\n    prob_one_B = q_A * p_B * q_C\n    prob_one_C = q_A * q_B * p_C\n    # Probability that two people pass\n    prob_two_AB = p_A * p_B * q_C\n    prob_two_AC = p_A * q_B * p_C\n    prob_two_BC = q_A * p_B * p_C\n    # Probability that all three pass\n    prob_all = p_A * p_B * p_C\n\n    # List of probabilities of 0, 1, 2, 3 people passing\n    prob_list = [prob_no_one, prob_one_A + prob_one_B + prob_one_C, prob_two_AB + prob_two_AC + prob_two_BC, prob_all]\n\n    # Count the number of people that are most likely to pass\n    max_prob = max(prob_list)\n    most_likely = prob_list.index(max_prob)\n\n    return most_likely\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    total_paper = 18\n    interval = 3\n    leaves = total_paper // interval\n    \n    return leaves\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    part1 = (101 + 234 + 567)\n    part2 = (234 + 567 + 89)\n    part3 = (101 + 234 + 567 + 89)\n    part4 = (234 + 567)\n\n    ans = (part1 * part2) - (part3 * part4)\n    \n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1\n    for i in range(2, 11):\n        ans += (i - 1) * 2 / i\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, caps = symbols('watches caps')\n    original_ratio_watches_to_caps = Eq(watches/caps, 8/11)\n    new_ratio_after_selling_caps = Eq(watches/(caps - 88), 12/11)\n    \n    solutions = solve((original_ratio_watches_to_caps, new_ratio_after_selling_caps), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Time taken to travel between 1st and 6th houses is 30 minutes.\n    time_1_to_6 = 30\n\n    # There are 5 equal intervals between the 1st and 6th houses.\n    # Thus, time taken per interval is 30 / 5 minutes.\n    time_per_interval = time_1_to_6 / 5\n\n    # To deliver newspapers to all 10 houses, Sam has to travel through 9 intervals.\n    time_1_to_10 = time_per_interval * 9\n\n    # Return the total time needed in minutes.\n    return time_1_to_10\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    ans = 31 * 56\n    return ans\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B, C, D = symbols('A B C D', integer=True)\n    \n    eq1 = Eq(A, D / 4)\n    eq2 = Eq(B, A - 1)\n    eq3 = Eq(4 * (1000 * A + 100 * B + 10 * C + D), 1000 * D + 100 * C + 10 * B + A)\n    eq4 = Eq(A, 3)\n\n    non_trivial_condition = (A > 0) & (A < 10) & (B > 0) & (B < 10) & (C > 0) & (C < 10) & (D > 0) & (D < 10)\n\n    solutions = solve((eq1, eq2, eq3, eq4, non_trivial_condition), (A, B, C, D))\n\n    for sol in solutions:\n        if len(set(sol)) == 4:\n            return sol[A]*1000 + sol[B]*100 + sol[C]*10 + sol[D]\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05\n    total_length_cm = total_length_m * 100\n    longer_piece_cm = (2/3) * total_length_cm\n    return longer_piece_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    gallons_to_litres = 4.55\n    \n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * gallons_to_litres\n    \n    total_cost = litres_used * cost_per_litre\n    \n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # To ensure that Jack wins, he needs to leave a multiple of 12 coins for Ken,\n    # such that Ken's move always results in a situation where Jack can still pick to make the number of coins left a multiple of 12.\n\n    # Jack's strategy should be to pick enough coins so that the remaining coins are a multiple of 12 after his first move.\n    total_coins = 2015\n    # We loop from 1 to 11 (inclusive) to find the number Jack should pick to leave a multiple of 12.\n    for jack_first_pick in range(1, 12):\n        # If after picking the coins, the remaining coins are a multiple of 12, Jack has a winning strategy.\n        if (total_coins - jack_first_pick) % 12 == 0:\n            return jack_first_pick\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    x1, y1 = 0, 0   # Origin\n    x2, y2 = 4, 8   # Point the line passes through\n    \n    # Since the line passes through the origin, the y-intercept b is 0 \n    b = 0\n    \n    # The slope of the line m is (y2-y1)/(x2-x1)\n    m = (y2 - y1) / (x2 - x1)\n    \n    # Thus the linear equation is y = m*x + b\n    return f\"y={m}x+{b}\"\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    number = 2015\n    sum_of_ones = bin(number).count('1')\n    return sum_of_ones\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # As the consecutive ages form an arithmetic sequence, their mean equals the middle term.\n    # The sum of the youngest three's ages is twice the first term plus 2 times the common difference.\n    # Since we know the sum is 42, we can express this as:\n    # 3 * (first_term + 1 * difference) = 42\n    # first_term + difference = 14\n\n    # The age of the oldest one would be the first term plus 6 times the difference.\n    # So we can express the age of the oldest one as:\n    # first_term + 6 * difference\n\n    # Using substitution, we find that the age of the oldest one is:\n    # (14 - difference) + 6 * difference = 14 + 5 * difference\n    # Now we just need to find a suitable difference that makes this expression an integer,\n    # and as they are consecutive, difference is 1.\n    difference = 1\n    age_oldest = 14 + 5 * difference\n    return age_oldest\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "from math import gcd\n\ndef solution():\n    a = 16\n    b = 28\n    ans = gcd(a, b)\n    return ans\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    for pears in range(1, 1000):  # search within a reasonable number range\n        if pears % 6 == 2 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of passengers\n    x = symbols('x')\n\n    # The equation representing the situation\n    equation = Eq(x * (2/5), x - (x / 3) - 22)\n\n    # Solve the equation\n    initial_passengers = solve(equation, x)\n\n    return initial_passengers[0]\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # Considering the pattern ●○●○○...\n    # We have a repeated sequence \"Black, White, Black, White, White\" (BWBWW) which is of length 5 balls\n    # for every such sequence, there are 2 white balls\n    # Calculate full sequences of BWBWW with 92 white balls\n    white_in_sequence = 2\n    total_sequences = 92 // white_in_sequence\n    \n    # We can have an incomplete sequence at the end, each incomplete sequence can only have at most 1 additional white\n    incomplete_white_balls = 92 % white_in_sequence\n    \n    # Total complete sequence balls = 5 balls per full sequence\n    total_balls_in_full_sequence = total_sequences * 5\n    \n    # Add the incomplete sequence balls (only if incomplete_white_balls are greater than 0, then it would be 2 balls, one black and one white)\n    if incomplete_white_balls == 1:\n        total_balls_in_full_sequence += 2  # Add a pair (Black, White) for the incomplete sequence\n    # if incomplete_white_balls equals to 0, that means the last sequence is complete and we do not need to add extra balls\n    \n    # Return the total number of balls\n    return total_balls_in_full_sequence\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    amount_sharpened_mm = 4\n    amount_sharpened_cm = amount_sharpened_mm / 10\n\n    new_length_cm = original_length_cm - amount_sharpened_cm\n\n    return new_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols\n    sam, peter, john_initial, john_final = symbols('sam peter john_initial john_final')\n\n    # Given ratios and percentage information\n    ratio_sam_peter = 7/5\n    percentage_given = 20/100\n    john_increase = 80/100\n\n    # Equations based on the problem statement\n    equation1 = Eq(sam, peter * ratio_sam_peter)  # Sam's stickers in terms of Peter's\n    equation2 = Eq(john_final, john_initial * (1 + john_increase))  # John's sticker increase by 80%\n    equation3 = Eq(john_final - sam, -20)  # Sam had 20 more stickers than John in the end\n    equation4 = Eq(john_final, john_initial + percentage_given * (sam + peter))  # John's stickers after receiving 20% from both\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter, john_initial, john_final))\n\n    # Returning Peter's initial number of stickers\n    return solutions[peter]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Distance covered at different stages of the race\n    distance_1 = 420  # meters\n    distance_2 = 620  # meters\n    distance_3 = 1200 - (distance_1 + distance_2)  # meters, remaining distance for the third stage\n\n    # Speeds during different stages of the race\n    speed_1 = 7  # meters per second\n    speed_2 = 5  # meters per second\n    speed_3 = 8  # meters per second\n\n    # Time calculations for each stage\n    time_1 = distance_1 / speed_1  # time in seconds\n    time_2 = distance_2 / speed_2  # time in seconds\n    time_3 = distance_3 / speed_3  # time in seconds\n\n    # Total time spent on the race\n    total_time = time_1 + time_2 + time_3\n\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    initial_tests = 4\n    initial_average = 89\n    desired_average = 95\n    full_score = 100\n\n    total_current_marks = initial_tests * initial_average\n    required_total_marks = desired_average * (initial_tests + 1)  # Start with at least 1 more test\n\n    tests_needed = 0\n\n    while total_current_marks < required_total_marks:\n        tests_needed += 1\n        total_current_marks += full_score\n        required_total_marks += desired_average\n\n    return tests_needed\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of $10 notes be x and the number of $2 notes be y\n    x, y = symbols('x y')\n\n    # Equations based on the problem statement\n    equation1 = Eq(x + y, 72)  # Total number of notes\n    equation2 = Eq(x - 0.9*x, 2*(y - 0.75*y))  # Ratio after spending\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    ten_notes_spent = 0.9 * solutions[x]\n    two_notes_spent = 0.75 * solutions[y]\n\n    # Calculate the total money spent on the gift\n    gift_cost = ten_notes_spent * 10 + two_notes_spent * 2\n\n    return int(gift_cost)\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the rates of filling the pool for A, B, and C be a, b, and c respectively\n    # and the time to fill the pool by all three hoses simultaneously be x\n    a, b, c, x = symbols('a b c x')\n\n    # If hoses A and B are turned on together, they fill the pool in 9 hours (rate: 1/9)\n    equation1 = Eq(a + b, 1/9)\n    \n    # If hoses A and C are turned on together, they fill the pool in 12 hours (rate: 1/12)\n    equation2 = Eq(a + c, 1/12)\n    \n    # If hoses B and C are turned on together, they fill the pool in 18 hours (rate: 1/18)\n    equation3 = Eq(b + c, 1/18)\n    \n    # If all three hoses are turned on, we want to find the time x for them to fill the pool\n    equation4 = Eq(a + b + c, 1/x)\n\n    # Solve the equations for x\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, c, x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # There are three colors, so taking one from each color will not guarantee two of the same color.\n    # Therefore, we must take one more to ensure we have at least two of the same color.\n    fewest_markers = 3 + 1\n\n    return fewest_markers\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    for five_dollar_notes in range(0, 58 + 1): # iterate from 0 to 58 notes\n        two_dollar_notes = 58 - five_dollar_notes\n        total_value = 5 * five_dollar_notes + 2 * two_dollar_notes\n        if total_value == 164:\n            return five_dollar_notes\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    # Calculate the common difference of the sequence\n    common_difference = 120 - 105\n    \n    # Calculate the first term of the sequence using the common difference\n    # and the fact that 105 is the 7th term\n    # first_term + 6 * common_difference = 105\n    first_term = 105 - 6 * common_difference\n    \n    # Calculate the 100th term using the common difference and first term\n    hundredth_term = first_term + (100 - 1) * common_difference\n    \n    return hundredth_term\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    total_spent_on_cupcakes = 187.5\n    fraction_spent_on_cupcakes_and_muffins = 5 / 9\n    fraction_spent_on_more_cupcakes = 1 / 6\n    price_of_one_cupcake = total_spent_on_cupcakes / (36 + fraction_spent_on_more_cupcakes * (9/5))\n    price_of_one_muffin = price_of_one_cupcake / 3\n    total_spent_on_muffins = price_of_one_muffin * 32\n\n    return total_spent_on_muffins\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # As there are 10 boxes, and each has at least 2 marbles, \n    # and except for two boxes, all should contain different even numbers of marbles.\n    \n    # Start with the minimal even numbers: 2, 4, 6, 8,...\n    # Two boxes can have the same smallest number of marbles (which is 2).\n    # Calculate the sum of the first 9 minimal distinct even numbers and twice the smallest number.\n    \n    marbles = [i * 2 for i in range(1, 10)]  # even numbers for 9 distinct boxes\n    marbles.append(2)  # same smallest even number for the two boxes that are not distinct\n    \n    # Sum all marbles\n    total_marbles = sum(marbles)\n    \n    return total_marbles\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    ans = sum(range(1, 10)) + sum(range(4, 9))\n    return ans\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    pigeons = 75\n    cages = 20\n    # Pigeonhole Principle dictates at least one cage has to have:\n    # (total number of pigeons // number of cages) + 1 pigeons\n    # if the division has a remainder\n    pigeons_per_cage = (pigeons // cages) + (pigeons % cages > 0)\n    \n    return pigeons_per_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    return 1007 - 1\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    current_steps = 1991\n\n    while True:\n        current_steps += 1\n        if str(current_steps) == str(current_steps)[::-1]:\n            break\n\n    return current_steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    return (387 + 729) / 2\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # Marry had 7/5 as many stickers as Alexis\n    equation1 = Eq(marry, (7/5) * alexis)\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    equation2 = Eq(marry - (marry * 0.2), marry - 0.2 * (7/5) * alexis)\n    equation3 = Eq(alexis - (alexis * 0.2), alexis - 0.2 * alexis)\n    # Charlotte's stickers increased by 80%\n    equation4 = Eq(charlotte + 0.2 * (marry + alexis), charlotte * 1.8)\n    # Marry had 20 stickers more than Charlotte in the end\n    equation5 = Eq(marry - 0.2 * (7/5) * alexis - 20, charlotte)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (marry, alexis, charlotte))\n\n    return int(solutions[alexis])\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n\n    first_day = 8\n    second_day = total_length / 6 + 4\n    two_days_fraction = 5/12\n\n    equation = Eq(first_day + second_day, total_length * two_days_fraction)\n\n    length_solution = solve(equation, total_length)\n\n    return length_solution[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 4, 5]\n    perm = permutations(digits, 3)\n    \n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # Let's denote the original number of bottle caps as 'total_caps'.\n    # According to the question, after giving away 440 caps, Justin had 5/9 of his collection left.\n    # So, we can set up the equation:\n    # (total_caps - 440) / total_caps = 5/9\n    # To find total_caps, we'll solve this equation.\n    \n    # Rearrange the equation to solve for total_caps:\n    # total_caps - 440 = 5/9 * total_caps\n    # (9/9 * total_caps) - (5/9 * total_caps) = 440\n    # (4/9 * total_caps) = 440\n    # total_caps = (440 * 9) / 4\n    \n    total_caps = (440 * 9) // 4  # Using integer division since number of caps should be an integer\n\n    return total_caps\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    # total_perimeter minus corners because corners are counted twice\n    total_perimeter = 2 * (144 + 204) - 4\n    # total wheat minus corners because corners are already planted with wheat\n    total_wheat = 116 - 4\n    # distance between every 2 wheat is total perimeter divided by the remaining wheat to plant\n    distance = total_perimeter / total_wheat\n    return distance\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    number = 35\n    while True:\n        if sum(int(digit) for digit in str(number)) == 35:\n            break\n        number += 35  # Increment by the next multiple of 35\n    return number\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_nuts = 112\n    nuts_sunny_day = 20\n    nuts_rainy_day = 12\n    for rainy_days in range(total_days + 1):\n        sunny_days = total_days - rainy_days\n        if (nuts_sunny_day * sunny_days) + (nuts_rainy_day * rainy_days) == total_nuts:\n            return rainy_days\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    single_bottle_price_p = 15\n    two_bottle_pack_price_p = 28\n    five_bottle_pack_price_p = 60\n    min_cost_p = float('inf')\n    \n    for five_packs in range((17 // 5) + 1):\n        for two_packs in range((17 // 2) + 1):\n            single_bottles = 17 - (5 * five_packs) - (2 * two_packs)\n            if single_bottles >= 0:\n                cost_p = (single_bottle_price_p * single_bottles) + \\\n                         (two_bottle_pack_price_p * two_packs) + \\\n                         (five_bottle_pack_price_p * five_packs)\n                if cost_p < min_cost_p:\n                    min_cost_p = cost_p   \n    return min_cost_p / 100\n    \nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # Number of players\n    n_players = 4\n\n    # In a knockout tournament, each round eliminates half of the players,\n    # so the number of rounds needed is the logarithm base 2 of the number of players.\n    # This is because in each round, one player is knocked out in a game, and\n    # the number of games in each round is half the remaining players.\n    # Hence, log2(n_players) will give us the number of rounds needed.\n\n    import math\n    rounds_needed = math.ceil(math.log2(n_players))\n\n    return rounds_needed\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_correct = 10\n    second_correct = 15\n    both_correct = 7\n\n    only_one_correct = (first_correct - both_correct) + (second_correct - both_correct)\n    \n    return only_one_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n    \n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/05/2023', '%d/%m/%Y')\n\n    days_off = (end_date - start_date).days + 1\n    \n    return days_off\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    rachel, alice = symbols('rachel alice')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of candies originally\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed of the train in m/s\n    time = 5  # time in seconds\n\n    length_of_train = speed * time  # distance formula: distance = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    fib_seq = [1, 1]  # Initialize the sequence with the first two numbers\n    \n    while len(fib_seq) < 8:  # We want to find the 8th number in the sequence\n        next_val = fib_seq[-1] + fib_seq[-2]  # The next number is the sum of the last two\n        fib_seq.append(next_val)  # Add the next number to the sequence\n    \n    return fib_seq[-1]  # The 8th number is the last one in the sequence after the loop\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    operations = [\"+\", \"div\", \"-\"]\n    results = set()\n    \n    # Test all combination of brackets\n    for comb in combinations_with_replacement(range(4), 2):\n        test_eq = \"285+15div5-2\"\n        \n        # Insert brackets in equation based on the combination\n        for pos in comb:\n            test_eq = test_eq[:pos] + \"(\" + test_eq[pos:]\n            test_eq = test_eq[:pos+4] + \")\" + test_eq[pos+4:]\n        \n        # Fix equation for division and evaluate it\n        test_eq = test_eq.replace(\"div\", \"/\")\n        result = eval(test_eq)\n        results.add(result)\n    \n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 40)\n    equation2 = Eq(x + 26, y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towel_price = 10\n    brush_price = 3\n    total_spend = 59\n    brushes_bought = 0\n\n    for brushes in range(total_spend // brush_price):\n        if brush_price * brushes < 10:\n            if (total_spend - brush_price * brushes) % towel_price == 0:\n                brushes_bought = brushes\n\n    return brushes_bought\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_bears = 35\n    days = 5\n    common_difference = 2\n\n    # Let the number of bears made on the first day be x.\n    # Then the total number of bears made over the 5 days forms an arithmetic series:\n    # x, x + 2, x + 4, x + 6, x + 8.\n    # The sum of an arithmetic series is given by the formula:\n    # (number of terms / 2) * (first term + last term)\n    # Therefore, the sum of bears made is:\n    # (5 / 2) * (x + (x + 8)) = 35\n    # Simplify to solve for x:\n    # (5 / 2) * (2x + 8) = 35\n    # 5x + 20 = 35 * 2\n    # 5x = 70 - 20\n    # x = 50 / 5\n    # x = 10\n\n    first_day_bears = (total_bears * 2 - days * common_difference) / days\n    fifth_day_bears = first_day_bears + 4 * common_difference\n\n    return fifth_day_bears\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    result_number = 71\n    subtracted_number = result_number - 8\n    original_number = subtracted_number / 7\n    return original_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    from itertools import permutations\n\n    numbers = ('0', '1', '8')\n    perm = list(permutations(numbers, 3))\n    count = sum(1 for p in perm if p[0] != '0')  # Leading digit must not be '0' for a valid three-digit number\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    blue = 11\n\n    # Draw all pink and grey marbles first\n    draw_non_blue = pink + grey\n\n    # Draw one more to ensure getting a blue marble\n    ans = draw_non_blue + 1\n\n    return ans\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    tax_rate = 0.075  # 7.5% as a decimal\n    tax_paid = 30\n    \n    price_before_tax = tax_paid / tax_rate\n    \n    return price_before_tax\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    count = 0\n    for perm in permutations(range(1, 9)):\n        if all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm) - 1)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    part = 3/10\n    whole = 6/7\n    percentage = (part / whole) * 100\n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # boys = girls - 30\n    equation1 = Eq(boys, girls - 30)\n    # Remaining boys = boys - (3/5)*boys\n    # Remaining girls = girls - (5/8)*girls\n    # Remaining boys = Remaining girls\n    equation2 = Eq(boys - (3/5)*boys, girls - (5/8)*girls)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    frogs_initial, dragonflies_initial = symbols('frogs_initial dragonflies_initial')\n    \n    # Initial condition: frogs = dragonflies + 9\n    initial_condition = Eq(frogs_initial, dragonflies_initial + 9)\n    \n    # After performing magic: frogs + dragonflies turned into frogs = 11 frogs now\n    # dragonflies + frogs turned into dragonflies = 10 dragonflies now\n    magic_frogs = 11 - dragonflies_initial\n    magic_dragonflies = 10 - frogs_initial\n    \n    # Now combining the magic_frogs equation with the initial_condition\n    # dragonflies_initial is equal to magic_dragonflies\n    combined_condition = Eq(dragonflies_initial, magic_dragonflies)\n    \n    # Solve the system of equations\n    solution = solve((initial_condition, combined_condition), (frogs_initial, dragonflies_initial))\n    \n    # Return the number of frogs at the beginning\n    return solution[frogs_initial]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers_to_subtract = [9, 19, 29, 39, 49, 59]\n    ans = 300 - sum(numbers_to_subtract)\n    return ans\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # Define the expression variables\n    a, b, c, d = 285, 15, 5, 2\n    # Original expression results without brackets\n    original_result = a + b / c - d\n    \n    # Different bracket insertions and their results\n    results = set()\n    \n    # 1. ((a+b)/c)-d\n    results.add(((a + b) / c) - d)\n    # 2. (a+(b/c))-d\n    results.add((a + (b / c)) - d)\n    # 3. a+((b/c)-d)\n    results.add(a + ((b / c) - d))\n    # 4. a+(b/(c-d))\n    results.add(a + (b / (c - d)))\n    # 5. (a+b)/(c-d)\n    results.add((a + b) / (c - d))\n    \n    # Counting how many unique results we have obtained\n    # Including the original result if it's different from the ones with brackets\n    ans = len(results) + (1 if original_result not in results else 0)\n    \n    return ans\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n\n    s = (amy_apples - john_apples) // 2\n\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(24):\n        if (24 - i) / 4 == 4:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # Let the rate of work for A, B, and C be a, b, and c respectively.\n    # Since A and B together finish the job in 3 hours, their combined rate is 1/3\n    # Since B and C together finish the job in 4 hours, their combined rate is 1/4\n    # Since A and C together finish the job in 8 hours, their combined rate is 1/8\n\n    # Now, we have the system of equations:\n    # a + b = 1/3\n    # b + c = 1/4\n    # a + c = 1/8\n\n    # We can solve for a, b, and c by combining these equations.\n\n    # From the first and the third equations, subtracting one from the other,\n    # we obtain b - c = (1/3) - (1/8)\n    # which gives us b - c = 8/24 - 3/24\n    b_minus_c = 5/24  # This is the difference between b and c\n\n    # Now we can add the second equation to the difference b - c to solve for b\n    # We have b - c + (b + c) = (1/4) + (5/24)\n    # Resulting in 2b = (1/4) + (5/24)\n    two_b = (1/4) + (5/24)\n    two_b = 6/24 + 5/24  # Find a common denominator\n    two_b = 11/24  # Combine\n\n    # Now solving for b\n    b = two_b / 2\n    b = 11/48\n\n    # Once we have b, we can easily find c by subtracting from the second equation\n    # b + c = 1/4\n    # c = (1/4) - b\n    c = (1/4) - b\n    c = 1/4 - 11/48\n    c = 12/48 - 11/48\n    c = 1/48\n\n    # Similarly we find a by substituting the value of b in the first equation\n    # a + b = 1/3\n    # a = (1/3) - b\n    a = (1/3) - b\n    a = 16/48 - 11/48\n    a = 5/48\n\n    # Now to find how long it would take all three to complete the job together,\n    # we add their rates a + b + c\n    # and find the reciprocal of this sum, which gives us the time to complete the job together\n\n    all_three_rate = a + b + c\n    time_all_three = 1 / all_three_rate\n\n    return time_all_three\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x is the amount of 15% sugar water needed\n\n    # Equation based on the concentration of sugar in the final mixture\n    # 0.45*2 is the amount of sugar in the 45% solution, 0.15*x is the amount of sugar in the 15% solution\n    # (0.45*2 + 0.15*x) / (2 + x) is the concentration of the final mixture\n    equation = Eq((0.45*2 + 0.15*x) / (2 + x), 0.25)\n\n    # Solve for x\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    johnson, vicky = symbols('johnson vicky')\n    \n    equation1 = Eq(johnson + vicky, 48) # The sum of Johnson's and Vicky's coins\n    equation2 = Eq(vicky + 8, johnson - 2) # After Johnson gives 8 coins to Vicky\n    \n    solutions = solve((equation1, equation2), (johnson, vicky))\n    \n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of kids and y be the total number of candies\n    x, y = symbols('x y')\n\n    # If every kid eats 18 candies, then 12 more candies are needed\n    equation1 = Eq(x * 18, y - 12)\n\n    # If every kid eats 15 candies, the candies are just enough\n    # for the same number of kids plus two more\n    equation2 = Eq((x + 2) * 15, y)\n\n    # Solve the two equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We want to find the total number of candies which is y\n    return solutions[y]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n\n    girls = (boys / 3) * 2\n    return girls\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    # Initial sum and the incremental part\n    S, incremental = 0, 0\n\n    # Building the sequence and computing the sum\n    for _ in range(2017):\n        incremental = incremental * 10 + 2\n        S += incremental\n\n    # Extract the last 5 digits of S using modulo operation\n    last_five_digits = S % 100000\n\n    return last_five_digits\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result = (77 - 6) / 7\n    return result\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    return solutions[david] + solutions[eugene]\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_original, tim_original = symbols('sam_original tim_original')\n    total_cookies = 1170\n\n    # After Sam ate her cookies and Tim bought more\n    sam_after = sam_original - sam_original / 4\n    tim_after = tim_original + tim_original / 5\n\n    # Equations based on the problem statement\n    equation1 = Eq(sam_original + tim_original, total_cookies)\n    equation2 = Eq(tim_after - sam_after, 663)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam_original, tim_original))\n\n    # Calculate how many cookies Sam ate\n    cookies_ate = solutions[sam_original] / 4\n\n    return cookies_ate\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    return 297 + 196 + 388 + 199\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    total_kilograms = 0.6\n    cost_per_kilogram = total_cost / total_kilograms\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    fruit_per_day = 24 / 6\n    total_fruit_8_days = fruit_per_day * 8\n    return total_fruit_8_days\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for num in range(200, 301):\n        if all(num % i == 1 for i in [2, 3, 4, 6]) and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    sally_stamps_before = 40\n    ting_stamps_before = 32\n\n    # Let the number of stamps Sally gave to Ting be x\n    # After giving away x stamps, Sally has (40 - x) stamps left\n    # Ting has (32 + x) stamps after receiving x stamps\n    \n    # The ratio of Sally's stamps to Ting's stamps after the exchange is 1:2\n    # (40 - x) : (32 + x) = 1 : 2\n    # Double the first part of the ratio to compare it to the second part\n    # 2 * (40 - x) = (32 + x)\n    # Solve the equation for x\n    \n    x = symbols('x')  # We'll use x to represent the unknown number of stamps Sally gave to Ting\n    equation = Eq(2 * (sally_stamps_before - x), ting_stamps_before + x)\n\n    solution = solve(equation, x)\n\n    sally_stamps_after = sally_stamps_before - solution[0]\n    ting_stamps_after = ting_stamps_before + solution[0]\n\n    return ting_stamps_after\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    jerry_rate = 1 / 18\n    combined_rate = 1 / 6\n\n    tom_rate = combined_rate - jerry_rate\n    tom_time = 1 / tom_rate\n    \n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time in minutes he walked at the increased speed\n    x = symbols('x')\n    \n    # Distance walked at initial speed = 150m/min * 10min\n    initial_distance = 150 * 10\n    \n    # Distance walked at increased speed = (150 + 50)m/min * x\n    increased_distance = (150 + 50) * x\n    \n    # Total distance walked = initial_distance + increased_distance\n    total_distance = initial_distance + increased_distance\n    \n    # Create the equation based on the total distance walked\n    equation = Eq(total_distance, 3700)\n\n    # Solve the equation for x\n    time_at_increased_speed = solve(equation, x)[0]\n    \n    # Total time in the park = initial 10 minutes + time at increased speed\n    total_time = 10 + time_at_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    # The price of each packet is $4, so with $20 one can buy 20 // 4 packets\n    packets_bought = 20 // 4\n    \n    # The number of sweets in a packet is 8, so:\n    sweets_from_packets = packets_bought * 8\n    \n    # For every 2 packets bought, there's 1 sweet free. Thus:\n    free_sweets = packets_bought // 2\n    \n    # The total number of sweets obtained is the sum of packet sweets and free sweets\n    total_sweets = sweets_from_packets + free_sweets\n    \n    return total_sweets\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # Number of pink, purple, and orange counters\n    pink = 5\n    purple = 7\n    orange = 8\n    \n    # Total number of counters before adding extra counters\n    total_counters = pink + purple + orange\n    \n    # Probability of picking a pink counter before adding extra counters\n    prob_pink_before = pink / total_counters\n    \n    # The probability of picking a pink counter after adding x extra counters\n    # should be double the initial probability of picking a pink counter.\n    # Thus, we want to solve for x in:\n    # (pink / (total_counters + x)) = 2 * prob_pink_before\n    # Simplifying, we get:\n    # pink / (total_counters + x) = 2 * (pink / total_counters)\n    # Now, we solve for x.\n    \n    # Calculate the target probability which is double the current probability\n    target_prob_pink = 2 * prob_pink_before\n    \n    # We now have the equation:\n    # pink / (total_counters + x) = target_prob_pink\n    # Cross-multiply to get:\n    # pink = target_prob_pink * (total_counters + x)\n    # simplifying, we get:\n    # x = (pink / target_prob_pink) - total_counters\n    \n    x = (pink / target_prob_pink) - total_counters\n    return int(x)\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - 1/4\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g, b = symbols('g b')\n\n    # Equation based on the initial condition: 40% more boys than girls\n    equation1 = Eq(b, 1.4 * g)\n\n    # Equation based on the condition after 24 boys and 24 girls left the gathering\n    equation2 = Eq(b - 24, 1.5 * (g - 24))\n\n    # Solve the system of equations for g and b\n    solutions = solve((equation1, equation2), (g, b))\n\n    # The number of boys at the gathering at first\n    return solutions[b]\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    n = 16\n    zero_count = 0\n    \n    while n > 0:\n        n //= 5\n        zero_count += n\n    \n    return zero_count\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Worst case, she takes all socks of two different colors without getting a pair\n    # 4 black + 4 grey and still no pair of same color\n    # After this, any next sock she takes will ensure at least a pair\n    # We take 1 more to ensure we have a pair of the third color\n    # Since we want 2 pairs, we take one more to ensure the second pair\n    socks_needed = 4 + 4 + 1 + 1\n\n    return socks_needed\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    # Let x be the initial number of cupcakes and muffins.\n    # After selling 60 cupcakes, the remaining cupcakes are x - 60.\n    # After selling 12 muffins, the remaining muffins are x - 12.\n    # According to the condition, remaining muffins (x - 12) is twice the remaining cupcakes (x - 60).\n    # So the equation is: x - 12 = 2 * (x - 60)\n\n    # Let's solve for x\n    x = symbols('x')\n    equation = Eq(x - 12, 2 * (x - 60))\n    solution = solve(equation, x)\n\n    # The total number of cupcakes and muffins at first is 2x (since both were equal)\n    total = 2 * solution[0]\n\n    return total\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the variable we want to find\n    x = symbols('x')\n\n    # Set up the equation according to the problem statement\n    equation = Eq(5*x + 7, 47)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # We start by giving 1 piece to each child first, so we have 88 - 8 = 80 pieces left to distribute.\n    # We want to distribute the 80 pieces among 8 children uniquely, which means increasing the number of pieces each next child gets.\n    # To make sure the child with the most pieces gets the least possible amount, we need to minimize the difference between portions.\n    # This situation is similar to the case of distributing 80 as a sum of 8 unique positive numbers, which is like partitioning numbers.\n    \n    # Let's start with first child already having 1 candy, and each next child getting one more than the previous.\n    # This creates the initial unique distribution following the smallest possible differences.\n    candies = [i for i in range(1, 9)]\n    remaining_candies = 80 - sum(candies) # Calculate the remaining candies after the initial distribution\n    \n    # Distribute the remaining candies starting from the child who gets the most to ensure minimum candies for the top\n    # recipient. We go in reverse to ensure the most possible number of candies to the last child.\n    while remaining_candies > 0:\n        for i in range(7, -1, -1): # Start from the child who receives the most (index 7)\n            if remaining_candies > 0:\n                candies[i] += 1\n                remaining_candies -= 1\n            else:\n                break\n\n    # The child with the most pieces is the last element of our candies list\n    max_candies = candies[-1]\n\n    return max_candies\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    helen = symbols('helen')\n    george = helen + 3\n\n    # Helen spends $5 each day, so we subtract this from her daily pocket money to find her daily savings\n    daily_savings_helen = helen - 5\n\n    # George spends $5 each day as well, so we do the same for him\n    daily_savings_george = george - 5\n\n    # Helen has saved $60 in total\n    total_savings_helen = 60\n\n    # George would have saved $90 more than Helen when Helen has saved $60\n    total_savings_george = total_savings_helen + 90\n\n    # We can now set up an equation based on the daily savings and total savings\n    equation1 = Eq(daily_savings_helen * (total_savings_helen / daily_savings_helen), total_savings_helen)\n    equation2 = Eq(daily_savings_george * (total_savings_george / daily_savings_george), total_savings_george)\n\n    # Solve the equations for Helen's daily pocket money\n    solution = solve((equation1, equation2), (helen))\n    \n    return solution[helen]\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_los_angeles = 12.25\n    los_angeles_to_shanghai = 12.25 + 1.5\n    round_trip_time = shanghai_to_los_angeles + los_angeles_to_shanghai\n    return round_trip_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    \n    original_ratio = Eq(eddi/wiya, 3/2)\n    new_ratio = Eq((eddi + 4)/wiya, 8/5)\n    \n    solutions = solve((original_ratio, new_ratio), (eddi, wiya))\n    \n    return solutions[wiya]\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    # Calculate the sum of numbers from 1 to 30 using the formula for the sum of an arithmetic series.\n    sum_1_to_30 = (30 * (1 + 30)) // 2\n    # The sequence is symmetric, so we can just double the sum from 1 to 30 and subtract the last term (30) once\n    ans = 2 * sum_1_to_30 - 30\n    return ans\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance driven in the first 2 hours at a speed of 40 km/h\n    distance_first_part = 2 * 40\n    \n    # Remaining distance driven at a speed of 70 km/h\n    distance_second_part = 280\n    \n    # Total distance driven\n    total_distance = distance_first_part + distance_second_part\n    \n    # Time taken to drive the second part of the trip\n    time_second_part = distance_second_part / 70\n    \n    # Total time for the whole trip\n    total_time = 2 + time_second_part\n    \n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_numbers = 0\n    \n    # Case 1: Numbers with exactly two sevens\n    # (7x7, x77, 77x) - x can be 0-9 except 7\n    for x in range(10):\n        if x != 7:\n            total_numbers += 3  # Three permutations for each x\n    \n    # Case 2: Numbers with exactly three sevens\n    # (777)\n    total_numbers += 1\n    \n    return total_numbers\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    # Find the value of the digit in the hundreds place (which is 8 in this case)\n    value_of_8 = (number // 100) % 10 * 100\n    return value_of_8\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    # Let a be the first term and d be the common difference.\n    # From the given information, we have two equations:\n    # a + 8d = a + 14d + 18 (9th term is 18 larger than 15th term)\n    # a + 19d + a + 11d = 88 (sum of 20th and 12th term is 88)\n    \n    # Simplify the equations to find d and then a\n    # Equation 1: 6d = 18 => d = 3\n    # Equation 2: 2a + 30d = 88 => 2a + 90 = 88 => 2a = -2 => a = -1\n    \n    # Once we have a and d, we can find the 32nd term:\n    # a + 31d\n    d = 3\n    a = -1\n    term_32 = a + 31*d\n    \n    return term_32\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "from math import lcm\n\ndef solution():\n    packet_one = 25\n    packet_two = 20\n    least_common_multiple = lcm(packet_one, packet_two)\n\n    days_in_march = 31\n    days_to_next_month = least_common_multiple - days_in_march\n    next_month = 'April'\n\n    date = days_to_next_month + 1\n\n    return f'{date}{next_month}'\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "from fractions import Fraction\n\ndef solution():\n    A = Fraction(1, 1)\n    a1 = A - Fraction(1, 2)\n    a2 = A - Fraction(2, 3)\n    a3 = A - Fraction(7, 8)\n    a4 = A - Fraction(29, 30)\n    a5 = A - Fraction(139, 144)\n    a6 = A - Fraction(839, 840)\n    \n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n    \n    m = a0.numerator\n    n = a0.denominator\n    \n    return m + n\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    pages_4 = 4\n    pages_3 = 3\n\n    for three_page_penpals in range(total_penpals + 1):\n        four_page_penpals = total_penpals - three_page_penpals\n        if four_page_penpals * pages_4 + three_page_penpals * pages_3 == total_pages:\n            return three_page_penpals\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original number as x\n    x = symbols('x')\n\n    # According to the question, the mistakes result in the following equation\n    # (x / 4) - 25 = 2021. We correct it to find the expression (x * 4) + 25\n    mistaken_result = (x / 4) - 25\n    mistake_eq = Eq(mistaken_result, 2021)\n\n    # Solve for x using the mistaken equation\n    x_val = solve(mistake_eq, x)[0]\n\n    # Calculate the correct answer using the value of x\n    correct_answer = (x_val * 4) + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    from sympy import primefactors, factorint\n\n    # The prime factors we are interested in for ending zeros are 2 and 5.\n    # Since 10 = 2 * 5, the number of ending zeros is determined by the\n    # minimum count of 2s and 5s in the prime factorization of the product.\n\n    # Calculate the product\n    product = 75 * 56 * 12 * 105\n\n    # Factor the product into prime factors and count the powers of 2 and 5\n    factors = factorint(product)\n    twos_count = factors.get(2, 0)\n    fives_count = factors.get(5, 0)\n\n    # The number of ending zeros is determined by the least of the powers of 2 and 5\n    zeros_count = min(twos_count, fives_count)\n\n    return zeros_count\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, donna = symbols('chloe donna')\n\n    equation1 = Eq(chloe, 4 * donna)\n    equation2 = Eq(chloe - donna, 816)\n\n    solutions = solve((equation1, equation2), (chloe, donna))\n\n    return solutions[donna]\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    # The equation is (~~~~~+4)/8 = 3\n    # Multiplying both sides by 8 to remove the denominator gives ~~~~~ + 4 = 24\n    # Subtracting 4 from both sides gives ~~~~~ = 20\n    # The symbol ~~~~~ represents a single unknown number, thus the solution to the unknown number is 20\n    ans = 20\n    return ans\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    valid_digits = set('0123456789')\n    # After the first guess, we know two digits are correct but not in the right place: 8765\n    # After the third guess, we know two digits are correct and are in the right place: 8642\n    # This means that 8 and 6 are correct and in the right place (since 7 and 5 are not in the right position from the first guess).\n    # After the second guess 1023, we know 2 of the digits are correct but not in the right place.\n    # Since 8 and 6 are already confirmed in the right place, 7 and 5 are not correct digits (from the first guess),\n    # 0 and 2 must be the other correct digits, but not at the second and third position (from the second guess).\n    # After the fourth guess, we know none of 5430 are correct, therefore, 4 is not the last digit.\n    # So 0 must be the last digit and 2 must be the first one.\n\n    # Assign the known correct digits to their correct positions now\n    number = ['2', 'X', '8', '6', '0']  # X - unknown digit, which can't be 1, 2, 3, 5, 7, 8, 6, 4, 0\n\n    # The second position can't be 1, 3, 5, 7, 8, 6, 4, 0, and also it can't be 2 as it is the first digit.\n    # So the second position must be 9.\n    number[1] = '9'\n\n    # Combine the digits to form the final number\n    ans = int(''.join(number))\n    return ans\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 193): \n        if isprime(a):\n            for b in range(2, 193):\n                if isprime(b):\n                    if 3*a + 11*b == 193:\n                        return a + b\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    # The correct equation should be 7 * (10a + b) = 100a + b\n    # Below is the correct implementation to find the values of a and b\n    for a in range(1, 10):  # a cannot be 0 since it's a tens place digit\n        for b in range(10):  # b can be from 0 to 9\n            if 7 * (10 * a + b) == 100 * a + b:\n                return 10 * a + b\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    remainder_for_4 = 1\n    remainder_for_5 = 2\n    remainder_for_7 = 4\n\n    pencils = 0\n    while True:\n        pencils += 1\n        if (pencils % 4 == remainder_for_4 and\n            pencils % 5 == remainder_for_5 and\n            pencils % 7 == remainder_for_7):\n            return pencils\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2*banana + 3*apple, 1.50)\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    return float(solutions[banana] + solutions[apple])\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # 6 singing (S) and 4 dancing (D) performances\n    # At least 1 S between every 2 D performances implies there can be at most 3 blocks of D\n    # Possible blocks of D: 1, 2, 3.\n    # Count of S's that must be between D blocks: 3 (since 3 intervals created by 4 D's)\n    # Remaining S's to be arranged freely: 6 - 3 = 3 S's\n\n    # Consider D's as dividers splitting S's into 4 segments. For 4 D's, there can be:\n    # a. 1 S in each of the 3 intervals and the remaining 3 S's in any of the 4 segments\n    # b. 2 S's in one interval and 1 in other two, remaining 2 S's are free\n\n    # Calculate combinations treating S's as identical and D's as identical:\n    \n    # Case (a):\n    # Arrange remaining 3 S's in any of 4 places\n    # _ S _ S _ S _ (4 places for remaining S's)\n    # Using the stars and bars method, we get (n+k-1) C (k-1) combinations\n    # where n is the number of free S's and k is the number of segments\n    free_singing = 3\n    segments = 4  # Created by 4 D's\n    ways_to_place_free_s = factorial(free_singing + segments - 1) // (factorial(free_singing) * factorial(segments - 1))\n    \n    # Arrange 4 D's:\n    ways_to_arrange_d = factorial(4) // (factorial(4)) # D's are all identical\n    \n    # Total number of arrangements for case (a):\n    total_ways_case_a = ways_to_place_free_s * ways_to_arrange_d\n    \n    # Case (b): 2 S's in one interval, 1 in the rest, and 2 remaining free S's\n    # 4 choices for which interval gets 2 S's\n    # Then place 2 remaining free S's\n    # Again using the stars and bars method for the free S's\n    free_singing_case_b = 2\n    choices_for_double_s_interval = 3\n    ways_to_place_free_s_case_b = factorial(free_singing_case_b + segments - 1) // (factorial(free_singing_case_b) * factorial(segments - 1))\n    \n    # Total number of arrangements for case (b):\n    total_ways_case_b = choices_for_double_s_interval * ways_to_place_free_s_case_b * ways_to_arrange_d\n    \n    # No other cases are possible given the constraint (at least 1 S between every 2 D)\n    \n    # The answer is the sum of total arrangements for cases (a) and (b)\n    ans = total_ways_case_a + total_ways_case_b\n    \n    return ans\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children, boys, girls = symbols('adults children boys girls')\n\n    equation1 = Eq(adults, 3 * children)  # three times as many adults as children\n    equation2 = Eq(boys, 2 * girls)  # twice as many boys as girls\n    equation3 = Eq(adults, girls + 176)  # 176 more adults than girls\n\n    # As there are only children and adults, and girls and boys, we set:\n    # children = girls + boys\n    # adults = adults\n    # And since every child is either a boy or a girl, we can also say\n    # children = 2 * girls (because boys = 2 * girls and children = boys + girls)\n    \n    equation4 = Eq(adults + children, adults + 2 * girls)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (adults, children, boys, girls))\n\n    # Total people is sum of adults and children\n    total_people = solutions[adults] + solutions[children]\n\n    return total_people\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    # Number of houses built by 3 workers in 4 days\n    houses_3_workers_4_days = 14\n    \n    # Number of houses 3 workers can build in 1 day\n    houses_3_workers_1_day = houses_3_workers_4_days / 4\n    \n    # Number of houses 1 worker can build in 1 day\n    houses_1_worker_1_day = houses_3_workers_1_day / 3\n    \n    # Number of houses 9 workers can build in 1 day\n    houses_9_workers_1_day = houses_1_worker_1_day * 9\n    \n    # Number of houses 9 workers can build in 2 days\n    houses_9_workers_2_days = houses_9_workers_1_day * 2\n    \n    return houses_9_workers_2_days\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # The ones digit of a number raised to a power has a cycle.\n    # For the number 9, the ones digit cycles every 2 powers:\n    # 9^1 = 9 (ones digit is 9)\n    # 9^2 = 81 (ones digit is 1)\n    # 9^3 = 729 (ones digit is 9)\n    # 9^4 = 6561 (ones digit is 1)\n    # And so on...\n\n    # For any power of 99 in the ones digit, we can observe that there is a\n    # pattern where it alternates between 9 and 1\n\n    # Since 99 to any odd power will end with a 9 and to any even power will end with a 1\n    # 999^99 is an odd power, so the ones digit will be 9\n\n    return 9\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "def solution():\n    from math import gcd\n\n    gcd_12_15 = gcd(12, 15)\n    gcd_final = gcd(gcd_12_15, 60)\n\n    return gcd_final\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    min_product = float('inf')\n    ages = []\n    for bob_age in range(11, 29):  # Since Fido is 10 years younger, Bob must be at least 11\n        for rex_age in range(1, bob_age):  # Rex is younger than Bob\n            fido_age = 28 - bob_age - rex_age\n            if fido_age > 0 and fido_age < rex_age and fido_age != bob_age - 10:  # All different, Fido youngest\n                product = bob_age * rex_age * fido_age\n                if product < min_product:\n                    min_product = product\n                    ages = [bob_age, rex_age, fido_age]\n    return min_product\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n    \n    children = (2/5) * total_people\n    women = (1/4) * total_people\n    men = total_people - children - women\n\n    equation = Eq(children, men + 20)\n\n    solution = solve(equation, total_people)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols\n    total_money = symbols('total_money')\n    cost_per_ball = symbols('cost_per_ball')\n\n    # Equations based on the problem statement\n    equation1 = Eq(total_money - 5 * cost_per_ball, 15)\n    equation2 = Eq(total_money - 8 * cost_per_ball, -12)\n\n    # Solve the equations for total_money and cost_per_ball\n    solutions = solve((equation1, equation2), (total_money, cost_per_ball))\n\n    # We are interested in the cost of 1 ball\n    return solutions[cost_per_ball]\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "from fractions import Fraction\n\ndef solution():\n    numerator1 = Fraction(1, 30) + Fraction(1, 6)\n    denominator1 = Fraction(2, 25)\n    part1 = numerator1 / denominator1\n\n    numerator2 = Fraction(2) - Fraction(2, 3)\n    denominator2 = Fraction(8, 3)\n    part2 = numerator2 / denominator2\n\n    ans = part1 + part2\n\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    \n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n    \n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n    \n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let l be the time it takes for Lee to finish the job alone\n    # Let n be the time it takes for Nancy to finish the job alone\n    l, n = symbols('l n')\n    \n    # The rate of work for Lee is 1/l\n    # The rate of work for Nancy is 1/n\n\n    # Together they work at a rate of 1/10 per hour\n    equation1 = Eq(1/l + 1/n, 1/10)\n    \n    # Lee working for 6 hours and Nancy working for 20 hours finishes the job\n    equation2 = Eq(6/l + 20/n, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (l, n))\n    \n    return solutions[n]\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    # Let x be the average score of Class A\n    # Then the average score of Class B will be x + 7\n    # Total score for Class A is 40 * x\n    # Total score for Class B is 30 * (x + 7)\n\n    # Total pupils = 40 (Class A) + 30 (Class B)\n    total_pupils = 40 + 30\n    # Total average score is given as 90 for all pupils\n    total_average = 90\n    # Total score for all pupils is the product of the total pupils and the total average\n    total_score = total_pupils * total_average\n\n    # Create an equation based on the total score\n    # 40x + 30(x + 7) = total_score\n    # Solve for x to find the average score of Class A\n    x = (total_score - 30 * 7) / (40 + 30)\n    # Average score of Class B is 7 marks higher than Class A's average\n    average_B = x + 7\n\n    return average_B\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Let's simplify the denominator using algebraic manipulation\n    # Simplify the fractions in the denominator first\n    # Combine into a single term in the denominator\n    denominator = 1/(2007*2008) + 1/(2008*2009) + 1/2009\n    # The common denominator for the fractions in the denominator is 2007 * 2008 * 2009\n    common_denominator = 2007 * 2008 * 2009\n    \n    # Convert each term to have the common denominator\n    term1 = (2009) * (2008) # Simplified from (2009 * 2008 * 2007) / (2007 * 2008) --> cancels out 2007 and 2008\n    term2 = (2009) * (2007) # Simplified from (2007 * 2008 * 2009) / (2008 * 2009) --> cancels out 2008 and 2009\n    term3 = (2007) * (2008) # Simplified from (2007 * 2008 * 2009) / (2009) --> cancels out 2009\n    \n    # Sum up all three terms\n    summed_terms = term1 + term2 + term3\n    \n    # The value of the original denominator is then the summed terms divided by the common denominator\n    denominator = summed_terms / common_denominator\n    \n    # Now take the reciprocal of the denominator to find the value of the entire expression\n    ans = 1 / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    # Since the highest common factor is 75, both A and B must be multiples of 75.\n    # Therefore, the last two digits of both A and B must be either 25 or 75.\n\n    max_sum = 0\n    # Loop over possible hundreds for A (1-9) and for B (1-9)\n    for a100 in range(1, 10):\n        for b100 in range(1, 10):\n            # Construct A and B with 25 as the last two digits.\n            A = a100 * 100 + 25\n            B = b100 * 100 + 25\n            if A != B and A % 75 == 0 and B % 75 == 0:\n                # If the tens or ones digit is the same, we have two equal digits.\n                # In this case, both A and B end with 25, so they already have two equal digits.\n                # Update max_sum if the sum A + B is greater than the current max_sum.\n                max_sum = max(max_sum, A + B)\n\n            # Construct A and B with 75 as the last two digits.\n            A = a100 * 100 + 75\n            B = b100 * 100 + 75\n            if A != B and A % 75 == 0 and B % 75 == 0:\n                # If the tens or ones digit is the same, we have two equal digits.\n                # In this case, both A and B end with 75, so they already have two equal digits.\n                # Update max_sum if the sum A + B is greater than the current max_sum.\n                max_sum = max(max_sum, A + B)\n\n            # Construct A and B with different hundreds digits and same tens and ones.\n            for common in [25, 75]:\n                A = a100 * 100 + common\n                B = b100 * 100 + common\n                if a100 != b100 and A % 75 == 0 and B % 75 == 0:\n                    max_sum = max(max_sum, A + B)\n\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    # Each bounce is to 1/3 of the previous height, so after the first bounce it was 9 cm.\n    # Let h be the initial height. After the first bounce, it rises to (1/3) * h.\n    # After the second bounce, it rises to (1/3) * ((1/3) * h) = 9 cm.\n    # Therefore, (1/3) * ((1/3) * h) = 9 => ((1/3) * h) = 27 => h = 27 * 3.\n\n    initial_height = 27 * 3\n    return initial_height\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    count = 0\n    for ten_pence in range(6):  # Jeremy can use up to 5 ten-pence coins\n        for twenty_pence in range(4):  # Up to 3 twenty-pence coins\n            for fifty_pence in range(2):  # He has only 1 fifty-pence coin\n                if 10 * ten_pence + 20 * twenty_pence + 50 * fifty_pence == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    a = 250250\n    ans = a**2 - (a-1) * (a+1)\n    return ans\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, caris = symbols('aaron becky caris')\n\n    equation1 = Eq(aaron - becky, becky - caris)\n    equation2 = Eq(aaron + becky + caris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, caris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    total_people = 30\n    people_behind = 16\n\n    people_in_front = total_people - people_behind - 1\n\n    return people_in_front\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 201):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    # A number is divisible by 15 if it is divisible by both 3 and 5.\n    # For divisibility by 5, the last digit must be 0 or 5. In this case, 'a' must be 5.\n    # Now we have to check if the number is also divisible by 3.\n    # For divisibility by 3, the sum of the digits must be a multiple of 3.\n    # The sum of the digits in the number 98a5 is 9 + 8 + a + 5.\n\n    a = 5\n    sum_of_digits = 9 + 8 + a + 5\n\n    # Check if the sum of the digits is divisible by 3\n    if sum_of_digits % 3 == 0:\n        return a\n\n    return \"No solution found, 'a' must be 5 for divisibility by 5, but it is not making the sum divisible by 3.\"\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for J in range(10):\n        if int(f\"125{J}6\") % 4 == 0:\n            ans = J\n            break\n    return ans\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    \n    # 5 tables and 12 chairs cost £720\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    # Each table costs £25 more than each chair\n    equation2 = Eq(table, chair + 25)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the cost of one apple and one peach\n    apple, peach = symbols('apple peach')\n\n    # Equations based on the given word problem\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    # We want the cost of each peach\n    return solutions[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    final_number = 66\n    after_adding = final_number / 6\n    original_number = after_adding - 7\n    return original_number\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey = 177\n    jane = audrey + 32\n    total = audrey + jane\n    return total\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    a = 9\n    result = 33\n\n    # Since a ⨀ b = 5a - 2b and 9 ⨀ x = 33, we can replace a with 9 to get 5*9 - 2x = 33\n    # Then we solve for x.\n    x = (5 * a - result) / -2\n\n    return x\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    def sum_of_squares(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n\n    def sum_of_cubes(n):\n        return (n ** 2 * (n + 1) ** 2) // 4\n    \n    total = 0\n    for i in range(24):\n        total += i * (i + 1) ** 2\n    \n    ans = total\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    ans = 476 // 17\n    return ans\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time = 360  # total time in minutes\n    ratio_up_to_down = 5 / 4\n    \n    # Calculate the time spent going up and down the hill\n    time_up = (ratio_up_to_down / (1 + ratio_up_to_down)) * total_time\n    time_down = total_time - time_up\n\n    # Let the speed going down be x, then the speed going up is x - 10\n    # Setup the equation x * time_down = (x - 10) * time_up\n    # We can solve this equation for x\n    speed_down = (10 * time_up) / (time_down - time_up)\n    speed_up = speed_down - 10\n\n    # Now calculate the distance for both up and down\n    distance_up = speed_up * time_up\n    distance_down = speed_down * time_down\n    \n    # Total distance is the sum of both distances\n    total_distance = distance_up + distance_down\n    \n    return total_distance\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "from math import lcm\n\ndef solution():\n    # The least common multiple of 25 and 20 is the number of days\n    # until she needs to start new packets of both types again.\n    days = lcm(25, 20)\n    \n    # 1st March plus the LCM gives us the result.\n    day = 1\n    march_days = 31\n    # Find the month and day she will start new packets.\n    while days > march_days:\n        days -= march_days\n        if march_days == 31:\n            march_days = 30\n        else:\n            march_days = 31\n    \n    next_start_month = 'March' if days <= 31 else 'April'\n    next_start_day = days\n\n    return f\"{next_start_day} {next_start_month}\"\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n    used_watermelons_per_day = 9\n    used_pineapples_per_day = 9\n\n    days = symbols('days')\n    remaining_watermelons = watermelons - used_watermelons_per_day * days\n    remaining_pineapples = pineapples - used_pineapples_per_day * days\n\n    equation = Eq(remaining_pineapples, 3 * remaining_watermelons)\n\n    days_solution = solve(equation, days)\n\n    return days_solution[0]\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    # Each friend sends a card to every other friend (n-1) friends. This is a combination problem without repeat\n    cards_sent_by_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_by_each  # Law of Multiplication\n    \n    return total_cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    ans = 3.6 * 100\n    return ans\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let Tom's current age be 't' and Jerry's current age be 'j'\n    t, j = symbols('t j')\n    \n    # Tom will be twice his current age in 4 years\n    equation1 = Eq(t + 4, 2 * t)\n    \n    # Three years ago, Tom and Jerry's ages summed up to 10\n    equation2 = Eq((t - 3) + (j - 3), 10)\n    \n    # Solve the system of equations for 't' and 'j'\n    solutions = solve((equation1, equation2), (t, j))\n    \n    # Extract Tom and Jerry's current ages from the solutions\n    tom_age = solutions[t]\n    jerry_age = solutions[j]\n    \n    # Finding out in how many years Jerry's age will be doubled\n    # Let 'n' be the number of years from now when Jerry's age is doubled\n    n = symbols('n')\n    equation3 = Eq(j + n, 2 * j)\n    \n    # Solve the equation for 'n'\n    n_solution = solve(equation3, n)\n    \n    # Extract the number of years from the solution\n    years = n_solution[0]\n    \n    return years\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    car_amount = 24.2 / 4\n    truck_amount = 410 / 50\n    ans = truck_amount - car_amount\n    return ans\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    arrival_time = 9 * 60 + 22  # Convert 9:22 to minutes past midnight\n    bus_interval = 35  # The bus leaves every 35 minutes\n\n    # Calculate the time when the previous bus left\n    previous_bus_time = 9 * 60 + 15  # This is 9:15 in minutes past midnight\n\n    # Calculate how many minutes have passed since the last bus left\n    minutes_passed_since_last_bus = arrival_time - previous_bus_time\n    \n    # Calculate the wait time for the next bus\n    if minutes_passed_since_last_bus % bus_interval == 0:\n        # Aiden arrives just as a bus leaves\n        wait_time = bus_interval\n    else:\n        # Calculate the time until the next bus\n        wait_time = bus_interval - (minutes_passed_since_last_bus % bus_interval)\n\n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_a_week = 7\n    weeks_until_birthday = days_until_birthday // days_in_a_week\n    return weeks_until_birthday\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62  # Eddie's speed in meters per minute\n    brother_speed = 70  # Brother's speed in meters per minute\n    time_to_meet = 5  # Time after which they meet in minutes\n    \n    # Distance Eddie walks until they meet\n    distance_eddie_walks = eddie_speed * time_to_meet\n    \n    # Distance Brother walks until they meet\n    distance_brother_walks = brother_speed * time_to_meet\n\n    # Total distance from their house to the mall is the sum of the distances both walked\n    distance_to_mall = distance_eddie_walks + distance_brother_walks\n    \n    return distance_to_mall\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5 / 9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(39 - (3*x - 4), 34)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import isprime\n\n    # Initial ages of the family members\n    my_age = 7\n    brother_age = 5\n    mother_age = 29\n    father_age = 31\n\n    # Increment the year and check if ages are prime\n    while True:\n        my_age += 1\n        brother_age += 1\n        mother_age += 1\n        father_age += 1\n\n        # Check if all ages are prime for the current year\n        if isprime(my_age) and isprime(brother_age) and isprime(mother_age) and isprime(father_age):\n            return father_age\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    price_after_discount = original_price - discount\n    increase = 0.15 * price_after_discount\n    final_price = price_after_discount + increase\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum([i**2 if i % 2 == 1 else -i**2 for i in range(3, 52)])\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n    lamp_posts = (total_flowers // flowers_between_posts) + 1\n    road_length = 50\n\n    distance_between_posts = road_length / (lamp_posts - 1)\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    circles = 7\n    regions = 1 + circles * (circles + 1) // 2 + circles * (circles - 1) * (circles - 2) // 6\n    return regions\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_in_box = total_books - books_given_away\n    return books_in_box\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Lora and her mother's ages\n    lora, mother = symbols('lora mother')\n\n    # Given that Lora and her mother's age sum up to 44\n    equation1 = Eq(lora + mother, 44)\n    # Given that her mother is 3 times older than Lora\n    equation2 = Eq(mother, 3 * lora)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    ans = 90009\n    return ans\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3/5\n    \n    males = total_adults * fraction_male\n    \n    return int(males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    paths_audio_to_school = 6 * 2\n    paths_book_to_school = 4 * 2\n    paths_chapel_to_school = 5 * 3\n    \n    total_paths = paths_audio_to_school + paths_book_to_school + paths_chapel_to_school\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Let a represent Adam's weight, b represent Ben's weight, and c represent Carl's weight.\n    # According to the problem, we have the following equations:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 93\n\n    # Summing up all three equations, we get:\n    # 2a + 2b + 2c = 102 + 97 + 93\n    total_weight_double = 102 + 97 + 93\n\n    # Since the sum we have is double the actual total weight (because each person's weight has been counted twice), we divide by 2.\n    total_weight = total_weight_double / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    initial_hour = 12\n    initial_minute = 40\n    duration_hours = 2\n    duration_minutes = 40\n\n    final_hour = initial_hour + duration_hours + (initial_minute + duration_minutes) // 60\n    final_minute = (initial_minute + duration_minutes) % 60\n\n    # Format the time properly.\n    final_hour = final_hour % 24  # To take care of the situation where the time crosses midnight\n\n    return (final_hour, final_minute)\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = one_pound_coins * 1.0 + fifty_pence_coins * 0.50 + twenty_pence_coins * 0.20\n\n    return total_value\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    # The unit digit of a number raised to a power is cyclical in pattern.\n    # So, we look at the pattern of the unit digit of powers of 4:\n    # 4^1 = 4 (unit digit is 4)\n    # 4^2 = 16 (unit digit is 6)\n    # 4^3 = 64 (unit digit is 4)\n    # 4^4 = 256 (unit digit is 6)\n    # The pattern of the unit digit is 4, 6, 4, 6 ...\n    # Since the pattern repeats every 2 powers, we can use modulo 2\n    # to find where 2008 would land in the cycle.\n\n    # If power is even, like 2008, the unit digit will be 6\n    # If power is odd, the unit digit will be 4\n    # Since 2008 is even, the unit digit is 6\n    return 6\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson, clive = symbols('benson clive')\n    \n    # Benson and Clive had a total of $705\n    equation1 = Eq(benson + clive, 705)\n    \n    # After Benson bought a calculator for $34, and Clive bought a badminton racket for $63, they had the same amount\n    equation2 = Eq(benson - 34, clive - 63)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (benson, clive))\n    \n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belle_sticks, eddie_sticks = symbols('belle_sticks eddie_sticks')\n    \n    belle_initial_sticks = 49\n    eddie_given_sticks = 11\n    \n    equation = Eq(belle_initial_sticks + eddie_given_sticks, eddie_sticks)\n    \n    solutions = solve(equation, eddie_sticks)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    number_of_lamp_posts = 50\n    distance_between_lamp_posts = 2\n    \n    length_of_road = (number_of_lamp_posts - 1) * distance_between_lamp_posts\n\n    return length_of_road\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temperature = -7\n    warmer_difference = 12\n    exeter_temperature = glasgow_temperature + warmer_difference\n    return exeter_temperature\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    result = ((5/11) + (2/27)) * 11 + (5/27)\n    return result\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    return 6 * 1.3\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote john's coins as j and kofi's coins as k \n    j, k = symbols('j k') \n\n    # we know that total coins they have is 25\n    eq1 = Eq(j + k, 25) \n\n    # If John gives Kofi four coins, K will become k+4 and J will become j-4\n    # Kofi will have three fewer coins than John after the exchange\n    eq2 = Eq(k + 4, j - 4 - 3) \n\n    # solve the system of equations\n    solutions = solve((eq1, eq2), (j, k))\n\n    return solutions[j]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    jason_tea = 983\n    belinda_tea = 179\n\n    total_tea = jason_tea + belinda_tea\n    tea_each = total_tea / 2\n\n    tea_to_give = tea_each - belinda_tea\n\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n\n    digits = '246'\n    perm = permutations(digits)\n    \n    return len(list(perm))\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = 1000 - total_cost\n    \n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = 18 + 2 + 16\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 101, 2):\n        total_sum += (i+1) - i\n    return total_sum\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    numerator = 1\n    denominator = 70\n    result = \"\"\n    for _ in range(500):\n        numerator *= 10\n        digit, numerator = divmod(numerator, denominator)\n        result += str(digit)\n        \n    ans = int(result[499])\n    return ans\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_sweets_after_eating = 4\n    sweets_given_to_neelesh = neelesh_sweets_after_eating + 1\n    total_sweets = sweets_given_to_neelesh * 6\n    sweets_left_with_ayesha = total_sweets - sweets_given_to_neelesh\n    return sweets_left_with_ayesha\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols for the weights of a copper ball and an iron ball\n    copper_weight, iron_weight = symbols('copper_weight iron_weight')\n\n    # Set up the equations based on the total weight information given\n    equation1 = Eq(8 * copper_weight + 9 * iron_weight, 135)\n    equation2 = Eq(6 * copper_weight + 3 * iron_weight, 75)\n\n    # Solve the system of equations for the weights of copper and iron balls\n    solutions = solve((equation1, equation2), (copper_weight, iron_weight))\n\n    # Get the weight of 1 copper ball from the solutions\n    return solutions[copper_weight]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    heads = 53\n    feet = 102\n\n    # Let x be the number of normal rabbits and y be the number of special rabbits.\n    # We have two equations:\n    # 1. x + 3y = heads  -> The total number of heads\n    # 2. 4x + 2y = feet  -> The total number of feet\n\n    # Rearrange equation 1 to find x in terms of y:\n    # x = heads - 3y\n    \n    # Substitute x in equation 2 to find y:\n    # 4(heads - 3y) + 2y = feet\n    # 4*heads - 12y + 2y = feet\n    # 4*heads - 10y = feet\n    # 10y = 4*heads - feet\n    # y = (4*heads - feet) / 10\n\n    special_rabbits = (4*heads - feet) // 10\n    normal_rabbits = heads - 3*special_rabbits\n\n    return normal_rabbits, special_rabbits\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1 / (i * (21 - i)) for i in range(11, 16))\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gummy, lollipop = symbols('gummy lollipop')\n\n    equation1 = Eq(gummy/lollipop, 5/7)\n    equation2 = Eq((gummy + 120)/(lollipop + 120), 4/5)\n\n    solutions = solve((equation1, equation2), (gummy, lollipop))\n    \n    gummy_bears = solutions[gummy]\n    lollipops = solutions[lollipop]\n\n    total_candies_now = gummy_bears + lollipops + 120*2\n    \n    return total_candies_now\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    return 4.5 / 5\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    weight_david_stone = 15\n    weight_andrew_pounds = 275\n    pounds_per_stone = 14\n\n    weight_david_pounds = weight_david_stone * pounds_per_stone\n    weight_difference = abs(weight_andrew_pounds - weight_david_pounds)\n\n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    term_index = 10\n    term_value = 31\n    difference = 3\n    \n    first_term = term_value - (term_index - 1) * difference\n    \n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    num_repetitions = 3\n    total_sum = sum(numbers) * num_repetitions\n    return total_sum\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    sequence = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert numbers from base 3 to base 10, perform the subtraction, and convert back to base 3\n    base_10_number1 = int(str(12101), 3)\n    base_10_number2 = int(str(2210), 3)\n    \n    # Subtract the base 10 numbers\n    answer_base_10 = base_10_number1 - base_10_number2\n    \n    # Convert the result back to base 3\n    ans = ''\n    while answer_base_10 > 0:\n        ans = str(answer_base_10 % 3) + ans\n        answer_base_10 //= 3\n    \n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of marbles in Box C as 'c'.\n    box_c = symbols('box_c')\n\n    # Since the number of marbles in Box B is twice the number in Box C,\n    # we can denote the number of marbles in Box B as '2 * box_c'.\n    box_b = 2 * box_c\n\n    # We know the number of marbles in Box A is 80.\n    box_a = 80\n\n    # The total number of marbles is the sum of marbles in all boxes.\n    total_marbles = box_a + box_b + box_c\n\n    # We set up the equation for the total number of marbles.\n    equation = Eq(total_marbles, 560)\n\n    # We solve for 'box_c'.\n    solution = solve(equation, box_c)\n\n    # Since we have only one solution, we take the first one.\n    return solution[0]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    numbers = list(range(1, 21))  # The first 20 positive integers\n    max_n = 0  # The largest value for n\n    for i in range(1, 21):\n        chosen = {i}\n        for j in range(i + 1, 21):\n            if all(abs(j - k) != 5 for k in chosen):  # Check if no number in 'chosen' differs by 5 with j\n                chosen.add(j)\n        max_n = max(max_n, len(chosen))  # Update the largest value for n if needed\n    return max_n\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cake, biscuit = symbols('cake biscuit')\n\n    equation1 = Eq(cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    john_age, mother_age, age_difference, john_old_age = symbols('john_age mother_age age_difference john_old_age')\n\n    # Equations based on the problem statement\n    equation1 = Eq(john_age + 8, mother_age - 20)\n    equation2 = Eq(mother_age, 5 * john_old_age)\n    equation3 = Eq(john_age - john_old_age, mother_age - 5 * john_old_age)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (john_age, mother_age, john_old_age))\n\n    # Return John's age when his mother was 5 times his age\n    return solutions[john_old_age]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    total_correct = 6\n    total_wrong = 2\n    score_correct = total_correct * 12\n    score_wrong = total_wrong * 0\n    total_questions = total_correct + total_wrong\n    average_mark = (score_correct + score_wrong) / total_questions\n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    from fractions import Fraction\n\n    num = (2017 + Fraction(7, 8)) * (3 + Fraction(2, 3)) - 2016.875 * (Fraction(11, 3))\n    denom = (2017 + Fraction(1, 3)) - 2016.875\n    num_fraction = num / (denom * 17)\n    result = num_fraction * (3 + Fraction(23, 32))\n\n    return float(result)\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for B in range(1, 10):  # B cannot be 0\n        for b in range(10):\n            total_pencils = int(f\"{B}{b}{B}\")\n            if total_pencils % 44 == 0:\n                pencils_per_pupil = total_pencils // 44\n                return pencils_per_pupil\n    return None\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sara, kevin, james = symbols('sara kevin james')\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(sara + kevin + james, 160)\n    \n    solutions = solve((equation1, equation2, equation3), (sara, kevin, james))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import gcd\n\ndef solution():\n    lcm = lambda a, b: a * b // gcd(a, b)\n    return lcm(lcm(4, 6), 7)\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 0\n    found = False\n    \n    while not found:\n        M += 1\n        remainders = set()\n        \n        for divisor in range(2, 11):\n            remainder = M % divisor\n            if remainder == 0 or remainder in remainders:\n                break\n            remainders.add(remainder)\n        else:\n            found = True\n\n    return M\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    lcm = (24 * 8) // math.gcd(24, 8)\n    return lcm\n\nimport math\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    container_capacity = 4\n    containers = (total_apples + container_capacity - 1) // container_capacity\n    return containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    # Given that we do not have the total amount collected,\n    # it is not possible to determine the exact amount collected by Reema.\n    # Hence, we can only express Reema's collection in terms of Romily's collection.\n    romily = symbols('romily')\n    reema = romily - 10\n\n    # Since we do not have the exact amount, we return the expression itself.\n    return reema\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n    \n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    both_competitions = (math_students + art_students) - total_students\n    return both_competitions\n    \nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint\n    \n    factors = factorint(28)\n    multiply_factor = 1\n    \n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            multiply_factor *= prime\n    \n    return multiply_factor\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    length_of_field = 480\n    distance_between_posts = 4\n  \n    num_posts = (length_of_field // distance_between_posts) + 1\n\n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 // 34) * 25\n    return ans\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    pos_sum = 10 + 20 + 30 + 50 + 60 + 70\n    neg_sum = 6 + 16 + 26 + 46 + 56 + 66\n    return pos_sum - neg_sum\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    lunch_end_time = datetime.strptime(\"2:50 PM\", \"%I:%M %p\")\n    total_time_before_lunch = timedelta(minutes=(10 + 20 + 20))\n    reach_home_time = lunch_end_time - total_time_before_lunch\n\n    return reach_home_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "from math import factorial\n\ndef solution():\n    # Treat A and B as a single entity since they have to be next to each other.\n    num_entities = 5  # A&B, C, D, E, F\n\n    # Find the number of ways to arrange these 5 entities.\n    entity_arrangements = factorial(num_entities)\n\n    # Find number of ways A and B can be arranged within their unit.\n    AB_arrangements = factorial(2)\n\n    # Total arrangements is the product of the number of entity arrangements and AB arrangements.\n    total_arrangements = entity_arrangements * AB_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n    for year in range(years):\n        initial_rabbits = (initial_rabbits * 5) / 2\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y, x):\n    return y == 6 * x\n\nans = solution"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for number in range(99, 9, -1):\n        if (number - 3) % 4 == 0 and (number - 3) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    # Let Jessie's weight be x grams.\n    # According to the problem statement, Buzz's weight is 3 times Jessie's weight, so Buzz's weight is 3x grams.\n    # The difference in their weights is 450 grams, so Buzz's weight minus Jessie's weight equals 450 grams.\n    # Thus: 3x - x = 450\n    #      2x = 450\n    #       x = 450 / 2\n    #       x = 225\n    # Therefore, Jessie's weight is 225 grams.\n    # Buzz's weight is 3 times Jessie's weight, which is 3 * 225 grams.\n    buzz_weight = 3 * 225\n    return buzz_weight\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let the number of steps of the escalator be x.\n\n    # When Peter walks at 1 step per second, the escalator moves x - 10 steps in 10 seconds.\n    # Hence, the speed of the escalator is (x - 10) / 10 steps per second.\n\n    # When Peter walks at 2 steps per second, he takes 16 steps. So in 8 seconds, the escalator has moved x - 16 steps.\n    # The speed of the escalator is (x - 16) / 8 steps per second.\n\n    # Since the speed of the escalator is constant, we can equate the two expressions to find x:\n    # (x - 10) / 10 = (x - 16) / 8\n    # Solving for x, we get:\n    # 8*(x - 10) = 10*(x - 16)\n    # 8x - 80 = 10x - 160\n    # 2x = 160 - 80\n    # x = 80 / 2\n    x = 40\n\n    return x\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, green, purple = symbols('red green purple')\n    \n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, 3 * purple / 5)\n    equation3 = Eq(4 * red + 5 * green + 7 * purple, 642)\n    \n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n    \n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    # Starting from 1 because at least one student should get sweets\n    for num_students in range(1, total_sweets + 1):\n        if total_sweets % num_students < 5:\n            max_class_size = num_students\n    return max_class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    # Calculation based on the distributive property of multiplication\n    difference = 248 - 246\n    old_product = 33210\n    increment = difference * 135\n    new_product = old_product + increment\n    return new_product\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 34 - 3 * (2 * x - 2) - 16\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum_of_values = 3 * 10 + 33 * 0.01 + 300 * 0.001\n    return sum_of_values\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    return 25 / 100 * 1200\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # James's height in cm\n    difference = 30     # James is 30 cm shorter than Mark\n\n    mark_height = james_height + difference\n\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    stickers_total = 243\n    stickers_per_child = 6\n    stickers_left = 3\n\n    num_children = (stickers_total - stickers_left) // stickers_per_child\n\n    return num_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation = Eq(jon, miguel + 0.3 * miguel)\n    total = Eq(jon + miguel, 46)\n\n    ans = solve((equation, total), (jon, miguel))\n\n    return ans[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_to_sally = total_blocks / 4\n    remaining_blocks = total_blocks - given_to_sally\n    return remaining_blocks\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds_digit in range(1, 5):  # Hundreds digit can be 2 or 4 (even and less than 5 to be twice the ones)\n        for tens_digit in range(0, 10, 2):  # Tens digit can be any even digit 0-8\n            ones_digit = 2 * hundreds_digit  # Condition (c): ones digit is twice the hundreds\n            number = hundreds_digit * 100 + tens_digit * 10 + ones_digit\n            if number % 2 == 0 and number % 9 == 0 and tens_digit > hundreds_digit:  # Conditions (a), (b), and (d)\n                return number\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols\n    sally, ken = symbols('sally ken')\n\n    # Initial ratio equation: sally/ken = 5/7\n    eq1 = Eq(sally/ken, 5/7)\n\n    # After Ken gives 24 chocolates to Sally\n    eq2 = Eq(sally + 24, 2 * (ken - 24))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (sally, ken))\n\n    # Ken's chocolates in the end\n    ken_chocolates_end = solutions[ken] - 24\n\n    return ken_chocolates_end\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, notebook = symbols('pencil notebook')\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n\n    solutions = solve((equation1, equation2), (pencil, notebook))\n\n    total_cost = solutions[pencil] + solutions[notebook]\n\n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n    extra_bill = bill - 40  # Since first 40 hours are free\n\n    # Calculate hours in the second segment (40-50 hours at $5 per hour)\n    if extra_bill <= 10 * 5:\n        hours = 40 + extra_bill / 5\n        return hours\n    \n    # Calculate hours in the third segment (50-60 hours at $8 per hour)\n    extra_bill -= 10 * 5\n    if extra_bill <= 10 * 8:\n        hours = 50 + extra_bill / 8\n        return hours\n    \n    # Calculate hours in the fourth segment (above 60 hours at $15 per hour)\n    extra_bill -= 10 * 8\n    hours = 60 + extra_bill / 15\n    return hours\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    return 478 - 189\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    vijay, raju, patrick = symbols('vijay raju patrick')\n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((vijay + raju + patrick) / 3, 507)\n    \n    solutions = solve((equation1, equation2, equation3), (vijay, raju, patrick))\n    \n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_of_triangle = 3\n    sides_of_square = 4\n    ans = (sides_of_square * 2) - sides_of_triangle\n    return ans\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 12 / 100\n    new_pay = original_pay + (original_pay * increase_percentage)\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    # Initialize counter for total number of digits used\n    total_digits = 0\n    # Initialize page counter\n    page = 0\n    \n    # The maximum number of digits increases as the page number increases\n    # Pages 1-9: 1 digit each, Pages 10-99: 2 digits each, Pages 100-999: 3 digits each, etc.\n    \n    while total_digits < 1014:\n        page += 1  # Increase page count\n        total_digits += len(str(page))  # Add the number of digits on this page\n        \n    return page\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    ans = 89 * 19\n    return ans\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_saved = amy_weekly * weeks - amy_spent_weekly * weeks\n\n    difference = joanna_total - amy_saved\n\n    return difference\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    first_number = 57 + magic_number\n    second_number = 9 + magic_number\n\n    equation = Eq(first_number, 4 * second_number)\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_teachers = 2\n    total_male_students = 7\n    total_female_students = 6\n\n    # Total ways without the restriction of at least 1 female student\n    total_ways = total_teachers * comb(total_male_students + total_female_students, 4)\n\n    # Total ways with only male students in the committee\n    only_male_ways = total_teachers * comb(total_male_students, 4)\n\n    # Total ways with at least 1 female student\n    ways_with_females = total_ways - only_male_ways\n    return ways_with_females\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    \n    months_needed = debt / monthly_salary\n    \n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = sum((10*i - (6 + (i-1)*10) for i in range(1, 8))) + 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    \n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n    \n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    difference = (fifteenth_number - tenth_number) / (15 - 10)\n    \n    twelfth_number = tenth_number + difference * (12 - 10)\n\n    return int(twelfth_number)\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # The degree of the monomial is the sum of the exponents of all its variables\n    degree_of_x = 3\n    degree_of_y = 5 - degree_of_x  # The total degree is 5, so subtract the degree of x from 5 to find the degree of y\n\n    # Since y has an exponent of 2n, we can find n by dividing the degree of y by 2\n    n = degree_of_y / 2\n    return int(n)\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "from fractions import Fraction\n\ndef solution():\n    milk_per_cup = Fraction(2, 3)\n    tea_per_cup = Fraction(3, 5)\n    cups = 45\n\n    total_milk = milk_per_cup * cups\n    total_tea = tea_per_cup * cups\n\n    total_litres = total_milk + total_tea\n\n    return total_litres\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # The median is the average of the 5th and 6th term in an ordered list of 10 terms\n    median_term1 = n + 7\n    median_term2 = n + 8\n\n    # Given the median is 20, solve for n\n    n = (20 * 2 - median_term1 - median_term2) / 2\n\n    # Calculate the mean as the sum of all terms divided by the number of terms\n    numbers = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    mean = sum(numbers) / len(numbers)\n\n    return mean\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let x, y, z be the weight of the three apples with x < y < z.\n    # If Tim eats the largest apple, the mean weight of the remaining two apples is 70 grams.\n    # Therefore, (x + y) / 2 = 70 => x + y = 140.\n    # If Tim eats the lightest apple, the mean weight of the remaining two apples is 105 grams.\n    # Therefore, (y + z) / 2 = 105 => y + z = 210.\n    # We need to find z - x which is (y + z) - (x + y) = 210 - 140.\n    \n    weight_difference = 210 - 140\n    return weight_difference\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Let the three consecutive whole numbers be x, x+1, and x+2\n    # Then their sum is x + (x + 1) + (x + 2)\n    # We are given that their sum is 60\n    # So, we get the equation x + (x + 1) + (x + 2) = 60\n    \n    # Simplify the equation\n    # 3x + 3 = 60\n    # Subtract 3 from both sides\n    # 3x = 57\n    # Divide both sides by 3\n    # x = 19\n\n    x = (60 - 3) // 3\n    # Since x is the smallest of the three numbers and we want the largest,\n    # we need to find x + 2\n\n    largest_number = x + 2\n    return largest_number\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10\n    per_container_volume = 2\n\n    num_containers = total_volume // per_container_volume\n\n    return num_containers\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaker_pairs = 4\n    # Total handshakes if everyone shakes hands with everyone else: (n * (n - 1)) / 2\n    total_handshakes = (total_members * (total_members - 1)) // 2\n    # Handshakes not done by the four members who did not shake hands with each other: (m * (m - 1)) / 2\n    non_shaken_handshakes = (non_shaker_pairs * (non_shaker_pairs - 1)) // 2\n    # Subtract the non-shaken handshakes from the total handshakes\n    handshakes_happened = total_handshakes - non_shaken_handshakes\n\n    return handshakes_happened\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of a book\n    cost_of_book = symbols('cost_of_book')\n\n    # Given the cost of a pencil\n    cost_of_pencil = 0.40  # 40p which is £0.40\n    \n    # Sarah's total cost\n    sarah_total = 8 * cost_of_book + 3 * cost_of_pencil\n    # Rebecca's total cost\n    rebecca_total = 3 * cost_of_book + 8 * cost_of_pencil\n    \n    # Difference in total cost\n    difference = sarah_total - rebecca_total\n\n    # Create the equation based on the difference\n    equation = Eq(difference, 1.00)  # Sarah paid £1.00 more than Rebecca\n\n    # Solve for the cost of a book\n    solutions = solve(equation, cost_of_book)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of gummy bears each girl buys\n    angela, bernice, candice = symbols('angela bernice candice')\n    \n    # Cost of one gummy bear in pounds\n    cost_per_bear = 6 / 100\n    \n    # Equations based on the problem statement\n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq((angela + bernice + candice) * cost_per_bear, 3.42)\n\n    # Solve the system of equations for the number of gummy bears\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for i in range(1, 10):\n        if int(str(i) + '0') - i == 27:\n            return i\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Since Bob is always the 3rd in line from any direction in a rectangular array,\n    # the array must be of size 3x3 to fulfill this condition.\n    # The number of animals in a 3x3 array is 3 * 3\n    num_animals = 3 * 3\n    return num_animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Number of gaps between plum trees is one less than the number of trees\n    plum_tree_gaps = 41 - 1\n    \n    # Length of the road based on the plum trees and the distance between them\n    road_length = plum_tree_gaps * 4\n    \n    # Number of gaps for pine trees on that road length\n    pine_tree_gaps = road_length / 5\n    \n    # Number of pine trees is one more than the number of gaps (since trees are also planted at both ends)\n    num_pine_trees = pine_tree_gaps + 1\n    \n    return int(num_pine_trees)\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 // 5\n    return ans\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # Since we want a single digit for A that does not change the value of the equation when squared,\n    # we can deduce that A can only be 0 or 1 because they are the only digits that remain \n    # unchanged when squared (0^2=0, 1^2=1).\n    # For all other digits from 2 to 9, the square results in a number greater than 9,\n    # which then would not fit in a single digit place.\n    \n    # So we try both values for A (0 and 1) and check which one works.\n    # We are looking for a value of A that does not alter the equation:\n    # (A + 10A + 100A) must be equal to A^2 + 10*(A^2) + 100*(A^2)\n    # This simplifies to 111A = 111*(A^2), which further simplifies to A = A^2.\n    # This equation holds true for A = 0 or A = 1. Since the question implies a nontrivial solution, \n    # we assume A is 1 because if A is 0, the value of A is insignificant as it makes the whole \n    # number zero whether it is squared or not.\n\n    A = 1\n    \n    # We must verify the condition A + 10A + 100A = A^2 + 10*(A^2) + 100*(A^2)\n    if (A + 10*A + 100*A) == (A**2 + 10*(A**2) + 100*(A**2)):\n        ans = A\n    else:\n        ans = None\n    \n    return ans\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple_over_100 = (100 // 11 + 1) * 11\n    largest_multiple_under_300 = (300 // 11) * 11 - 11\n    ans = smallest_multiple_over_100 + largest_multiple_under_300\n    return ans\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total_salary = 4000 * 12\n    correct_total_salary = incorrect_total_salary - 2800 + 3040\n    correct_average_salary = correct_total_salary / 12\n    return correct_average_salary\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    durian, honeydew = symbols('durian honeydew')\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n    \n    solutions = solve((equation1, equation2), (durian, honeydew))\n    \n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    one_cent, two_cent, five_cent = symbols('one_cent two_cent five_cent')\n\n    # Define the equations based on the height relationship\n    equation1 = Eq(6 * one_cent, 5 * two_cent)      # Height of 6 one-cent coins = 5 two-cent coins\n    equation2 = Eq(4 * one_cent, 3 * five_cent)     # Height of 4 one-cent coins = 3 five-cent coins\n\n    # Define the equation based on the equal height of the three stacks\n    # and the total number of coins used\n    heights_equal = Eq(one_cent, two_cent)          # Heights of the coin stacks are equal\n    total_coins = Eq(one_cent + two_cent + five_cent, 124)  # Sam used a total of 124 coins\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, heights_equal, total_coins), (one_cent, two_cent, five_cent))\n\n    # Calculate the total value of all these coins in cents\n    total_value = solutions[one_cent] + 2 * solutions[two_cent] + 5 * solutions[five_cent]\n\n    return total_value\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amount of water in Container B be x mL.\n    # Therefore, the amount of water in Container A is x + 350 mL.\n    A, B = symbols('A B')\n    \n    # After spilling 500 mL, Container A has (x + 350 - 500) mL of water.\n    # Container B has twice as much water as Container A after the spill.\n    equation = Eq(B, 2 * (A - 500))\n    \n    # We also know that Container A had 350 mL more water than B originally.\n    original_condition = Eq(A, B + 350)\n    \n    # Solving the system of equations.\n    solutions = solve((equation, original_condition), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for blue_pens in range(1, 100):\n        for green_pens in range(1, 100):\n            if blue_pens * 5 == green_pens * 2:\n                red_pens = green_pens // 4\n                if blue_pens + green_pens + red_pens < 100 and blue_pens + green_pens + red_pens > max_red_pens:\n                    max_red_pens = red_pens\n    return max_red_pens\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_money = 200\n    money_after_books = initial_money * (1 - 0.25)\n    money_after_dvd = money_after_books * (1 - 0.20)\n    return money_after_dvd\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m / 12\n\nans = solution(m)"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for num in range(999999, 100000 - 1, -1):\n        if str(num) == str(num)[::-1] and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    boys_initial = 216\n    girls_initial = 153\n    children_joined = 37\n\n    total_children_after_an_hour = boys_initial + girls_initial + children_joined\n\n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    return 56 + 78 + 44 + 22\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83  # in meters\n    shortfall_cm = 10  # shortfall in centimeters\n\n    # Convert shortfall to meters\n    shortfall_m = shortfall_cm / 100\n\n    # Calculate the length of the piece in the garage\n    garage_piece_length_m = desired_length_m - shortfall_m\n\n    # Returning answer in meters\n    return garage_piece_length_m\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of marbles Wei Yan had at first.\n    x = symbols('x')\n    \n    # He gave 3/8 of them to his friends.\n    after_friends = x - (3/8) * x\n    \n    # He gave 5/7 of the remaining marbles to his brother.\n    after_brother = after_friends - (5/7) * after_friends\n    \n    # His cousin then gave him 408 marbles.\n    final_count = after_brother + 408\n    \n    # In the end, he had twice as many marbles as he had at first.\n    equation = Eq(final_count, 2 * x)\n    \n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    pattern_length = len(pattern)\n    sum_of_numbers = 0\n    \n    for i in range(41):\n        sum_of_numbers += pattern[i % pattern_length]\n    \n    return sum_of_numbers\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    result = (2/7) * 315\n    return result\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    count = 0\n    for two_p in range(0, 47 // 2 + 1):\n        for five_p in range(0, 47 // 5 + 1):\n            if (two_p * 2 + five_p * 5) == 47:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = ((9+10+11)/8 - (10+11+12)/9 + (11+12+13)/10 - (12+13+14)/11)\n    denominator = (1/8 - 1/9 + 1/10 - 1/11)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for pins and needles\n    pins, needles = symbols('pins needles')\n\n    # At first, Grace had 2540 pins and needles in total\n    initial_total = Eq(pins + needles, 2540)\n\n    # She sold 1820 pins\n    pins_left = pins - 1820\n\n    # She sold 4/5 of the needles\n    needles_sold = needles * 4 / 5\n    needles_left = needles - needles_sold\n\n    # She had an equal number of pins and needles left\n    equal_left = Eq(pins_left, needles_left)\n\n    # Solving the system of equations\n    solutions = solve((initial_total, equal_left), (pins, needles))\n\n    # Since we want to find the number of needles left\n    needles_left_number = solutions[needles] - solutions[needles] * 4 / 5\n\n    return needles_left_number\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Brian's father's age when Brian turns 14\n    father_age = 41\n    # Age difference between Brian and his father\n    age_difference = father_age - 14\n\n    for brian_age in range(15, 100):\n        father_age = brian_age + age_difference\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(52 - (4 * x - 3), 47)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11):\n            for x3 in range(1, 11):\n                if x1 + x2 + x3 == 11 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count // 6  # Divide by 6 to account for permutations of the same combination\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    number1 = 654876\n    number2 = 279745\n\n    # Rounding to nearest hundred\n    rounded_number1 = round(number1, -2)\n    rounded_number2 = round(number2, -2)\n\n    # Calculating estimated difference\n    estimated_difference = rounded_number1 - rounded_number2\n\n    return estimated_difference\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_passed = 16  # Time in seconds\n    train_length = 480  # Length of the train in meters\n\n    # Speed is distance divided by time\n    speed = train_length / time_passed\n\n    # Convert speed from m/s to km/h by multiplying by 3.6\n    speed_kmh = speed * 3.6\n\n    return speed_kmh\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum([1, 2, 3, 4, 5, 4, 3, 2, 1])\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5kg = cost_per_kg * 3.5\n    return cost_for_3_5kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    return (2 / 5) * 30\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5/8) * 4000\n    return result\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    # Number of ways to partition an integer n using integers >= k is partition(n - k, k)\n    # For this problem we define a recursive partition function\n    def partition(n, k):\n        # Base case: if n is 0, there's one way to do it (no number)\n        if n == 0:\n            return 1\n        # If n is less than k, no partitions are possible\n        elif n < k:\n            return 0\n        # Otherwise, the number of partitions is the sum of:\n        # 1. The number of ways to partition n using integers >= k + 1\n        # 2. The number of ways to partition n - k using integers >= k\n        else:\n            return partition(n, k + 1) + partition(n - k, k)\n    \n    # Calculate the total number of partitions for 8 and subtract 1 (the number itself is not counted)\n    total_partitions = partition(8, 1) - 1\n\n    # Return the total number of partitions minus the ways to partition with same numbers (1 way for each number)\n    # because the question asks for two or more non-zero natural numbers\n    answer = total_partitions - 7\n    return answer\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    number_of_lampposts = 113\n    distance_between_lampposts = 8\n\n    road_length = (number_of_lampposts - 1) * distance_between_lampposts\n\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n\n    failed_percentage = (failed_pupils / total_pupils) * 100\n\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = 0\n    for num in range(1, 51):\n        if '3' in str(num):\n            erased_sum += num\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    types_of_pasta = 4\n    types_of_sauces = 3\n    types_of_toppings = 3\n\n    combinations = types_of_pasta * types_of_sauces * types_of_toppings\n\n    return combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # For each of the 10 classrooms, we need to find the correct key.\n    # For the first classroom, all 10 keys must be tried in the worst case scenario.\n    # For the second classroom, at most 9 keys must be tried (since one is known).\n    # For the third classroom, at most 8 keys must be tried, and so on.\n    # Thus, we sum the number of tries for each classroom which is a decreasing arithmetic series.\n    \n    num_keys = 10\n    num_classrooms = 10\n    max_tries = sum(range(1, num_classrooms + 1))\n\n    return max_tries\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    difference = largest_number - smallest_number\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_poppers = (153 // 12) * 12\n    remaining_poppers = 153 - total_poppers\n    return 12 - remaining_poppers\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # The ones digit of a power of seven follows a repeating cycle of four: 7, 9, 3, 1\n    cycle = [7, 9, 3, 1]\n\n    # Since the pattern repeats every 4 numbers, we find the remainder of 2023 divided by 4\n    remainder = 2023 % 4\n\n    # We subtract 1 because the indexing starts at 0\n    ans = cycle[remainder - 1]\n    return ans\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from sympy import root, N\n\n    # Constants (recurring decimals must be represented as rational numbers)\n    numerator = root(-40/3, 3) * (409/99)**2\n    denominator = 5924/100 - root(100/9, 2)\n\n    # Compute the expression\n    result = numerator / denominator\n\n    # Round to three decimal places\n    ans = N(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    num_str = ''.join(str(x) for x in range(1, 31))\n    removed_str = num_str[:46]\n    new_str = num_str[46:]\n\n    smallest = '1' + '0' * (len(new_str) - 1)\n\n    return int(smallest)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (2, 6), (1, 7)]\n    _, largest_three_digit_num = solve_congruence(*congruences)\n    while largest_three_digit_num > 999:\n        largest_three_digit_num -= 5 * 6 * 7\n    return largest_three_digit_num\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    least_5_digit_palindrome = int(\"10001\")\n    greatest_6_digit_palindrome = int(\"999999\")\n    \n    ans = greatest_6_digit_palindrome - least_5_digit_palindrome\n    return ans\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    children_to_pick = 2\n    combinations = comb(total_children, children_to_pick)\n    return combinations\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    total_members = boys * 4  # Since boys are 1 quarter, total members will be 4 times the boys\n    girls = total_members * 3 // 4  # Three quarters are girls\n\n    return girls\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    ans = (32 - 15) - 12\n    return ans\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for price per one banana and one apple\n    banana, apple = symbols('banana apple')\n\n    # Create the equations based on the information given\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Calculate the price for 1 banana and 1 apple\n    annabella_price = solutions[banana] + solutions[apple]\n\n    return annabella_price\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    while sara_age + lucy_age < 60:\n        sara_age += 1\n        lucy_age += 1\n    return sara_age - 8\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n\n    capacity = (two_seater_benches * 2) + (three_seater_benches * 3)\n\n    return capacity\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    paid = 16  # since we are paying with £1 coins, the closest amount is £16\n    change = paid - book_cost\n    return change\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    numbers = [99, -101, 103, -105, 107, -109, 111, -113, 115, -117, 119]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    A = (201 + 1/7) / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for footballs and basketballs\n    footballs, basketballs = symbols('footballs basketballs')\n\n    # Given relationships\n    initial_ratio_eq = Eq(footballs, (2/5) * basketballs)  # Initial ratio before selling basketballs\n    final_ratio_eq = Eq(footballs, (2/3) * (basketballs - 16))  # Final ratio after selling basketballs\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio_eq, final_ratio_eq), (footballs, basketballs))\n\n    # Calculate total number of footballs and basketballs originally\n    total = solutions[footballs] + solutions[basketballs]\n\n    return total\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n\n    total_marshmallows = marshmallows_per_minute * minutes\n\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the age of the older brother currently\n    # Let y be the age of the younger brother currently\n    x, y = symbols('x y')\n    \n    # Setting up the system of equations based on the problem statement\n    # When x - y years ago, younger brother was 12\n    equation1 = Eq(x - y, 12)\n    \n    # x years from now, when younger brother becomes the same age as older brother's current age,\n    # the older brother will be 27. Hence, x + (x - y) = 27.\n    equation2 = Eq(x + (x - y), 27)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # x is the age of the older brother currently\n    return solutions[x]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Since Rona needs to make sure she has a pair,\n    # she might take out one glove of each color without getting a pair.\n    gloves_without_pair = 5  # One for each color\n    \n    # To ensure she gets a pair, she has to take one more glove\n    gloves_to_get_a_pair = 1\n    \n    # Total gloves Rona needs to take out is the sum of the above two\n    total_gloves = gloves_without_pair + gloves_to_get_a_pair\n\n    return total_gloves\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = (30 + 7) // 8 * 8  # Smallest multiple of 8 greater than or equal to 30\n    last_multiple = 82 // 8 * 8  # Largest multiple of 8 less than or equal to 82\n\n    if first_multiple > last_multiple:  # If there are no multiples in the range\n        return 0\n\n    num_multiples = (last_multiple - first_multiple) // 8 + 1  # Count the multiples\n\n    return num_multiples\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    num_lines = 13\n    max_junctions = num_lines * (num_lines - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increased_price = original_price * (1 + 10/100)\n    final_price = increased_price * (1 - 10/100)\n    return final_price\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the length of the line of students (x)\n    x = symbols('x')\n\n    # Since the teacher runs at 12 km/h and walks back at 8 km/h,\n    # the time it takes for the teacher to cover the length of the line twice is:\n    # time = distance / speed. The teacher covers the distance 2x during the overall time.\n    # We convert 7.2 minutes to hours (7.2/60)\n    equation = Eq((x / 12) + (x / 8), 7.2 / 60)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Since we expect a single solution, we extract it from the list\n    length_line = solution[0]\n\n    return length_line\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Each group plays a single round-robin tournament\n    games_in_group_stage = 4 * ((4 * (4 - 1)) / 2)\n    \n    # Knockout stage has 8 players, results in 7 games (Quarterfinals, Semifinals, Finals, 3rd place match)\n    games_in_knockout_stage = 7\n\n    total_games = games_in_group_stage + games_in_knockout_stage\n    return int(total_games)\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    flora_age_now = 5\n    flora_age_two_years_ago = flora_age_now - 2\n    fathers_age_two_years_ago = 9 * flora_age_two_years_ago\n    fathers_age_now = fathers_age_two_years_ago + 2\n\n    return fathers_age_now\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    for sweets_count in range(31, 40):\n        if sweets_count % 4 == 0 and sweets_count % 6 == 0:\n            return sweets_count\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original amount of stickers Peter has as 'p'.\n    p = symbols('p')\n\n    # Sam had 40 stickers more than Peter initially.\n    sam_initial = p + 40\n\n    # Sam gave 20% of his stickers to Peter, so he has 80% left.\n    sam_after_giving = 0.8 * sam_initial\n\n    # After receiving from Sam, Peter has his initial stickers plus 20% of Sam's initial stickers.\n    peter_after_receiving = p + 0.2 * sam_initial\n\n    # Then Peter gave 25% of his new total to Sam.\n    peter_after_giving = 0.75 * peter_after_receiving\n\n    # So Sam has his total after giving to Peter plus 25% of Peter's new total.\n    sam_final = sam_after_giving + 0.25 * peter_after_receiving\n\n    # In the end, Sam had 96 stickers more than Peter.\n    equation = Eq(sam_final - peter_after_giving, 96)\n    \n    solutions = solve(equation, p)\n\n    return int(solutions[0])\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count('3')\n    ans = count  # the position of the last '3' written by Roy\n    return ans\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        count += str(i * 2).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    pounds_to_pence = 1.25 * 100\n    return pounds_to_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    # Reverse the last step: Ken took 1 less than half of the remaining pieces of candy\n    ken_took = (remaining + 1) * 2\n    remaining += ken_took\n    \n    # Reverse the third step: Nini took 3 more than half of the remaining pieces\n    nini_took = (remaining - 3) * 2\n    remaining += nini_took\n    \n    # Reverse the second step: Ivy took 2 less than half of the pieces left\n    ivy_took = (remaining + 2) * 2\n    remaining += ivy_took\n    \n    # Reverse the first step: Eddie took 1 more than half of the pieces of candy\n    eddie_took = (remaining - 1) * 2\n    remaining += eddie_took\n    \n    return remaining\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Let the distance be d km\n    # Time taken at 4 km/h is d/4 hours\n    # Time taken at 6 km/h is d/6 hours\n\n    # 20 minutes late at 4 km/h is equivalent to 1/3 hour (because 20 minutes is 1/3 of an hour)\n    # 10 minutes early at 6 km/h is equivalent to -1/6 hour (because 10 minutes is 1/6 of an hour)\n\n    # Therefore, we have two equations:\n    # d/4 - d/6 = 1/3 (since being 20 minutes late means he took 1/3 of an hour more than the actual time)\n    # d/6 - d/4 = -1/6 (since being 10 minutes early means he took 1/6 of an hour less than the actual time)\n\n    # We can solve this equation as follows:\n    # Multiplying the entire equation by 12 (LCM of 4 and 6) to get rid of fractions:\n    # 3d - 2d = 4\n    # d = 4\n\n    # Hence, the distance d is 4 km\n    return 4\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    # Distance the snail climbs during the day except on the 6th day\n    daily_climb = 7\n    # Distance the snail climbs on the 6th day\n    sixth_day_climb = 3\n    # Total distance climbed until the end of the 5th day\n    total_climb_by_day5 = daily_climb * 5\n    # Distance remaining after the 5th day's climb\n    remaining_distance = 18 - total_climb_by_day5\n    # Since the snail reaches the top on the 6th day, the climb of the 6th day must be equal to the remaining distance\n    # So the slide down distance is the difference between the usual daily climb and the 6th day's climb\n    nightly_slide = daily_climb - (remaining_distance - sixth_day_climb)\n    \n    return nightly_slide\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    letters = \"CYZZ\"\n    unique_permutations = set(permutations(letters))\n    count = len(unique_permutations)\n    return count\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert each height estimate to meters for comparison\n    height_m = 5  # meters\n    height_cm_to_m = 120 / 100  # centimeters to meters\n    height_mm_to_m = 50 / 1000  # millimeters to meters\n    height_ft_to_m = 8 * 0.3048  # feet to meters\n\n    # Array to hold converted heights\n    heights_in_meters = [height_m, height_cm_to_m, height_mm_to_m, height_ft_to_m]\n\n    # Acceptable human height range (in meters)\n    min_height = 0.5\n    max_height = 2.5\n\n    # Check which estimates might be correct (within the range of plausible human heights)\n    plausible_heights = [h for h in heights_in_meters if min_height <= h <= max_height]\n\n    # Since we need to return the position of the plausible height in the original order, find the index\n    ans = heights_in_meters.index(plausible_heights[0]) + 1\n\n    return ans\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # Let's assume there are 'b' boys in the art club\n    # There are '3 * b' girls in the art club since there were 3 times as many girls as boys\n    # Each girl took 2 paintbrushes, so the total by girls is '2 * (3 * b)'\n    # Each boy took 3 paintbrushes, so the total by boys is '3 * b'\n    # They took 99 paintbrushes in total, so we have '2 * (3 * b) + 3 * b = 99'\n    \n    # Let's solve the equation to find 'b'\n    # 6 * b + 3 * b = 99\n    # 9 * b = 99\n    # b = 99 / 9\n    b = 99 // 9\n\n    # The number of girls is 3 times the number of boys\n    g = 3 * b\n\n    return g\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    class_a = 12\n    class_b = 16\n    class_c = 20\n\n    ans = gcd(gcd(class_a, class_b), class_c)\n    return ans\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12 ** 2\n    n = (3 ** 2) * (2 ** 3)\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    # Given data\n    boys = 18\n    girls = 12\n    average_boys = 74\n    average_all = 82\n    \n    # Calculate the total score for boys\n    total_boys_score = boys * average_boys\n    \n    # Calculate the total score for all participants\n    total_score = (boys + girls) * average_all\n    \n    # Calculate the total score for girls\n    total_girls_score = total_score - total_boys_score\n    \n    # Calculate the average score for girls\n    average_girls = total_girls_score / girls\n\n    return average_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    # Find the least common multiple of 2, 3, and 5\n    from math import lcm\n    ans = lcm(2, 3, 5)\n    return ans\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    n = 15\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    marked_fish = 100\n    second_catch_total = 200\n    second_catch_marked = 25\n\n    pond_population = (marked_fish * second_catch_total) / second_catch_marked\n\n    return int(pond_population)\n\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_food = 12 * 15\n    days_for_20_rabbits = total_food / 20\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = sum(solutions.values())\n\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solution = solve((equation1, equation2), (boys, girls))\n\n    return solution[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    money_received = 22\n    dress_cost = 56\n\n    total_money = susan_money + money_received\n    money_needed = dress_cost - total_money\n\n    return money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    wake_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    breakfast_start_time = wake_up_time + timedelta(minutes=25)\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    arrival_time = breakfast_end_time + timedelta(minutes=35)\n    registration_time = arrival_time - timedelta(minutes=5)\n\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    mass_per_packet = 0.23\n    num_packets = 6\n    total_mass = mass_per_packet * num_packets\n    return total_mass\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(77//2 + 1):\n        for three_gram_weights in range(77//3 + 1):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Function to calculate the sum of first k natural numbers squared\n    def sum_of_squares(k):\n        return (k * (k + 1) // 2) ** 2\n    \n    # Calculation using the given formula for cubes of numbers from 1 to n\n    sum_1_to_20 = sum_of_squares(20)\n    sum_1_to_9 = sum_of_squares(9)\n    \n    # The result for numbers from 10 to 20 will be the difference between the two sums\n    ans = sum_1_to_20 - sum_1_to_9\n\n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_dollars = 2 + 1/2\n    quarters_in_one_dollar = 4\n    ans = total_dollars * quarters_in_one_dollar\n    return int(ans)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    average_score = 90\n    num_assignments = 5\n    scores = [96, 85, 89, 92]\n\n    total_actual = sum(scores)\n    total_needed = average_score * num_assignments\n\n    fifth_score = total_needed - total_actual\n\n    return fifth_score\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (4, 5), (6, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    # Let the number of girls who can swim be 31x\n    # Let the number of girls who cannot swim be 49x\n    # Then the total number of girls is 31x + 49x = 80x\n\n    # Let the number of boys who cannot swim be y\n    # Then the number of boys who can swim is y - 120\n    # The total number of boys then is y + (y - 120) = 2y - 120\n\n    # The total number of students is the sum of boys and girls\n    # We have 80x + 2y - 120 = 1690\n\n    # There are 90 more boys than girls\n    # We have 2y - 120 = 80x + 90\n\n    # Solving the two equations\n    # 80x + 2y - 120 = 1690\n    # 2y - 80x = 210\n\n    # Combining the two equations to find the value of y (boys who cannot swim)\n    # 80x + 2y - 120 = 1690     | *1\n    # 2y - 80x = 210            | *2\n    # -------------------------\n    # 80x + 2y - 120 + 80x - 2y = 1690 - 420\n    # 160x = 1270\n    # x = 1270 / 160\n    x = 1270 // 160\n    \n    # Now find y using the second equation\n    # 2y - 80x = 210\n    y = (80 * x + 210) // 2\n\n    # Number of pupils who cannot swim is the sum of girls who cannot swim \n    # and boys who cannot swim\n    # Girls who cannot swim = 49x\n    # Boys who cannot swim = y\n    cannot_swim = (49 * x) + y\n\n    return cannot_swim\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # Since we want at least 5 different colors with at least 10 pencils for each color,\n    # we can take a worst-case scenario approach where we pick the maximum number of pencils\n    # of the same color without fulfilling the condition, then add the minimum pencils to meet the condition.\n\n    # First, we pick the maximum number of pencils of 4 different colors \n    # (one less than the required number of different colors) without fulfilling the condition.\n    max_same_color = 4 * (10 - 1)  # 4 colors, 9 pencils each\n\n    # Now, we need to ensure that we have at least 5 different colors with at least 10 pencils each.\n    # Once we have 9 pencils of each of 4 colors, we will pick at least one more pencil for each\n    # This will give us 10 pencils for each of the 4 colors: 4 * 10 = 40\n    # At this point, to ensure a fifth color, we will need to pick at least 10 pencils of a new color.\n    min_fifth_color_pencils = 10\n\n    # The minimum number of pencils is the sum of the above two quantities.\n    min_pencils = max_same_color + min_fifth_color_pencils   \n\n    return min_pencils\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    total_pupils = 200\n    pupils_per_coach = 34\n\n    num_coaches = (total_pupils + pupils_per_coach - 1) // pupils_per_coach\n\n    return num_coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Initially the ratio was 4:7\n    initial_ratio = Eq(pip / bud, 4 / 7)\n\n    # After Santa gave 5 sweets to Bud, the ratio changed to 8:15\n    new_ratio = Eq((pip / (bud + 5)), 8 / 15)\n\n    # Use sympy's solve function to solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (pip, bud))\n\n    # Since we want the number of sweets Pip had, we return solutions[pip]\n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    length = 144\n    width = 204\n    total_wheats = 116\n    \n    # Subtract the corner wheats as they are counted twice when taking lengthwise and widthwise counts\n    wheats_on_edges = total_wheats - 4\n    \n    # Divide the remaining wheats evenly between the length and the width, taking into account that wheats are on both sides\n    wheats_on_length = (wheats_on_edges // 2) + 1\n    wheats_on_width = (wheats_on_edges // 2) + 1\n    \n    # Calculate the distances, subtracting one since wheat is at every corner\n    distance_lengthwise = (length - 1) / (wheats_on_length - 1)\n    distance_widthwise = (width - 1) / (wheats_on_width - 1)\n    \n    # Assuming the distance between every 2 wheat is the same on both length and width\n    distance_between_wheats = distance_lengthwise if distance_lengthwise == distance_widthwise else None\n\n    return distance_between_wheats\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5 = 5 ** 20 % 10  # The last digit of 5 raised to any positive integer is 5\n    last_digit_7 = 7 ** 30 % 10  # The last digit of 7 raised to any power cycles every 4 powers: 7, 9, 3, 1,...\n\n    ans = (last_digit_5 * last_digit_7) % 10  # Multiply the last digits and find the last digit of the result\n    return ans\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    # List of prime numbers between 2 and 45\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    \n    # Iterate through all possible combination of primes for A, B, and C\n    for A in primes:\n        for B in primes:\n            for C in primes:\n                # Skip if any two numbers are the same\n                if A == B or B == C or A == C:\n                    continue\n                \n                # A: Their numbers not forming a correct addition equation\n                if A + B == C or A + C == B or B + C == A:\n                    continue\n                \n                # B: Difference between B's number and 1 is 7\n                if abs(B - 1 - A) != 7 and abs(B - 1 - C) != 7:\n                    continue\n                \n                # C: Multiplying C by 2 can form an addition equation\n                if (2 * C) == (A + B) or (2 * C) == (A + C) or (2 * C) == (B + C):\n                    # If all conditions satisfy, return the sum of A, B and C\n                    return A + B + C\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    length1 = 39\n    length2 = 52\n    ans = gcd(length1, length2)\n    return ans\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the points for grade A and b be the points for grade B\n    a, b = symbols('a b')\n\n    # Simon's equation: 4a + 4b = 36\n    simon = Eq(4 * a + 4 * b, 36)\n\n    # Peter's equation: 2a + 3b = 22\n    peter = Eq(2 * a + 3 * b, 22)\n\n    # Solve the equations\n    solutions = solve((simon, peter), (a, b))\n\n    # Calculate the score for someone with 3 A grades and 5 B grades\n    score = 3 * solutions[a] + 5 * solutions[b]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    # The chocolate bar has 16 squares.\n    # Joe decides to share it with his friend.\n    # This implies the chocolate bar will be divided between Joe and his friend, so each gets half.\n    num_squares = 16 // 2  # The integer division ensures we get a whole number\n\n    return num_squares\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    return 999 / 2\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    children_between = 2\n    amanda_from_end = 7\n\n    total_children = laura_position + children_between + amanda_from_end - 1\n\n    return total_children\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # Define the numbers based on the constraints\n    A = 2  # A is the smallest prime number\n    B = 4  # B is the smallest composite number\n    C = 1  # C is neither prime number nor composite number or zero\n    D = A - 2  # D is 2 less than the smallest prime number\n    E = 9  # E is the largest composite number up to 10\n    F = 5  # F only has factors 1 and 5\n    G = 4  # G is the greatest factor of 8\n    H = 6  # H is the lowest multiple of 6\n\n    # Convert the digits into a phone number string\n    phone_number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n\n    return phone_number\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    Marry, Alexis, Charlotte = symbols('Marry Alexis Charlotte')\n    \n    # Since Charlotte's stickers increased by 80%, this means Charlotte's initial stickers is 100%.\n    # After receiving stickers from Marry and Alexis, her stickers became 180%.\n    # Thus, the amount Charlotte received from Marry and Alexis combined is 80% of her initial stickers.\n\n    # Equation for Charlotte's received stickers in terms of her initial amount.\n    Charlotte_initial = Charlotte / 1.8\n    \n    # Marry gives away 20% of her stickers, left with 80%, similarly for Alexis.\n    # If Marry had 20 more stickers than Charlotte at the end, we get:\n    equation1 = Eq(Marry - 0.2 * Marry, Charlotte_initial + 20)\n    equation2 = Eq(Alexis - 0.2 * Alexis, Charlotte_initial)\n    \n    # Using the ratio 7 : 5 for Marry and Alexis\n    equation3 = Eq(Marry / Alexis, 7/5)\n    \n    # We are not directly given the relationship between Marry and Alexis' donations to Charlotte,\n    # but we can express the donations in terms of Charlotte's initial stickers,\n    # considering the 20% they gave is equal to 80% of Charlotte's initial stickers.\n    # We find the sum of the donations and set it equal to 0.8 times Charlotte's initial amount.\n    equation4 = Eq(0.2 * Marry + 0.2 * Alexis, 0.8 * Charlotte_initial)\n\n    # Solving the system of equations for Marry, Alexis, Charlotte.\n    solutions = solve((equation1, equation2, equation3, equation4), (Marry, Alexis, Charlotte))\n    \n    # We want to find the initial number of stickers Alexis had.\n    return solutions[Alexis]\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    before_stop = 322 - 60 + 42\n    return before_stop\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_in_a_day = 24 * 60 * 60\n    fraction_of_day = 1/4 * 1/6 * 1/8\n    seconds = seconds_in_a_day * fraction_of_day\n\n    return int(seconds)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3*x), 92)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    family_members = 3  # Eddie, mom, and dad\n    others = 3  # Assuming there are 3 other people to line up with the family\n    \n    # Treat Eddie, mom, and dad as a single unit first. Now we have 4 units to arrange: Eddie's family (as one unit) and the three other people.\n    units_to_arrange = others + 1  # family as one unit + other people\n\n    # The number of ways to arrange these 4 units is 4 factorial.\n    from math import factorial\n    unit_arrangements = factorial(units_to_arrange)\n\n    # Now arrange the family members among themselves, which is 3 factorial.\n    family_arrangements = factorial(family_members)\n\n    # By the principle of multiplication, the total arrangements is the product of the two arrangement possibilities.\n    total_arrangements = unit_arrangements * family_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    return 34 * 100\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from math import factorial\n\ndef solution():\n    # Total number of digits (2s and 3s)\n    total_digits = 5\n    \n    # Number of 2's and 3's we have\n    count_2 = 3\n    count_3 = 2\n    \n    # Count the permutations without considering identical elements\n    permutations = factorial(total_digits)\n    \n    # Divide by the count of duplicates for 2's and 3's\n    permutations /= (factorial(count_2) * factorial(count_3))\n    \n    # Exclude permutations where the first digit is zero (not applicable here),\n    # and permutations with less than 4 digits (also not applicable here)\n    \n    return int(permutations)\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for thousands_units in range(1, 10):  # Thousands and units digit must be the same and non-zero\n        for tens in range(0, 10):\n            for hundreds in range(0, 10):\n                pips_number = 1000 * thousands_units + 100 * hundreds + 10 * tens + thousands_units\n                buds_number = 1000 * tens + 100 * thousands_units + 10 * thousands_units + hundreds\n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Let the total amount of grass be G\n    # If 25 cows can be fed for 10 days, the grass consumed by 1 cow in 1 day is G / (25 * 10)\n    # If 15 cows can be fed for 20 days, the grass consumed by 1 cow in 1 day is G / (15 * 20)\n    # These two amounts should be equal, so we set up the equation G / (25 * 10) = G / (15 * 20) and solve for G\n    # Simplifying, we get 1 cow can eat G / 250 units of grass per day\n    # We want to find out how many cows can be fed for 50 days, so we have cows * 50 * (G / 250) = G\n    # Solving for cows, we get cows = (G / (G / 250)) / 50 = 250 / 50\n\n    cows = (25 * 10) / 50\n\n    return cows\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    # assuming that John reads at least one page a day\n    # and each day he reads one page more than the previous day\n    # this forms an arithmetic progression\n    # we're finding the maximum number of days (n) where the sum\n    # of the arithmetic progression does not exceed 95 pages\n    n = 1\n    while (n * (n + 1)) // 2 <= 95:\n        n += 1\n    return n - 1  # we subtract 1 because n will be one more than the number of days he can read\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n    original_ratio = Eq(oranges / lemons, 3/5)\n    new_ratio = Eq((oranges - 48) / lemons, 1/2)\n    \n    solutions = solve((original_ratio, new_ratio), (oranges, lemons))\n    return solutions[lemons]\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    correct_minuend = 166\n    incorrect_difference = 81\n\n    subtrahend = incorrect_minuend - incorrect_difference\n    correct_difference = correct_minuend - subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3\n    third_day = (5 / 3) * second_day\n    total = first_day + second_day + third_day\n    \n    return int(total)\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # The 3 maths books can be arranged among themselves in 3! ways.\n    math_books_arrangements = factorial(3)\n    \n    # The 2 English books can be arranged among themselves in 2! ways.\n    english_books_arrangements = factorial(2)\n    \n    # Now consider the 3 maths books as one unit and 2 English books as one unit.\n    # There are 3 other books, so we have 3 + 1 (maths unit) + 1 (English unit) = 5 units in total.\n    # These 5 units can be arranged in 5! ways.\n    unit_arrangements = factorial(5)\n    \n    # The total arrangements would be the product of all individual arrangements.\n    total_arrangements = math_books_arrangements * english_books_arrangements * unit_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount_rate = 0.30\n    additional_discount = 100\n    tax_rate = 0.10\n    \n    discounted_price = original_price * (1 - discount_rate)\n    price_after_additional_discount = discounted_price - additional_discount\n    final_price = price_after_additional_discount * (1 + tax_rate)\n    \n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    num_cakes = 250 / flour_per_cake\n    return int(num_cakes)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    total_rate = ivy_rate + kevin_rate\n    work_done_in_half_time = total_rate * 6  # 6 days of full work\n    remaining_work = 1 - work_done_in_half_time\n    days_for_iva_to_finish = remaining_work / ivy_rate\n    kevin_days_off = 12 - days_for_iva_to_finish\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ophelia, penelope = symbols('ophelia penelope')\n    \n    # Before Penelope bought more diamonds\n    equation1 = Eq(ophelia, 4 * penelope)\n    \n    # After Penelope bought more diamonds\n    equation2 = Eq(penelope + 21, (5/8) * ophelia)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n    \n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (32 * 8) // 20\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n    \n    both_competitions = maths_students + art_students - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Cindy needs to make sure to get at least one pair of the same color.\n    # Worst case scenario (using Pigeonhole Principle):\n    # If Cindy takes one sock of each color (4 black + 3 red), so far there's no pair.\n    # With the next draw, no matter the color, she will definitely have a pair.\n    max_draws_without_pair = 4 + 3\n    next_draw_ensures_pair = 1\n    num_socks_to_ensure_pair = max_draws_without_pair + next_draw_ensures_pair\n    return num_socks_to_ensure_pair\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "def solution():\n    from math import factorial\n\n    n = 9  # total number of statues\n    r = 4  # number of statues to arrange\n\n    arrangements = factorial(n) // factorial(n - r)\n\n    return arrangements\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # in pence\n    new_price_pence = 100 * 100  # converting £1.00 to pence\n    \n    increase = new_price_pence - original_price\n    percentage_increase = (increase / original_price) * 100\n    \n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    original_price = 80\n    gst_percentage = 8\n\n    final_price = original_price + (original_price * (gst_percentage / 100))\n\n    return final_price\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let b represent the number of bicycles and t represent the number of tricycles\n    b, t = symbols('b t')\n\n    # each bicycle has 2 wheels and each tricycle has 3 wheels\n    # the total number of tricycles and bicycles is 300\n    equation1 = Eq(b + t, 300)\n\n    # the total number of tricycle wheels is 180 more than the total number of bicycle wheels\n    # 3t = 2b + 180 -> the total number of wheels for tricycles and bicycles respectively\n    equation2 = Eq(3 * t, 2 * b + 180)\n\n    # solving the system of equations\n    solutions = solve((equation1, equation2), (b, t))\n\n    return solutions[b] # we want to find the number of bicycles\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # Grey rabbits are in a pattern of 2 greys per cycle of 5 rabbits (1 black, 2 white, 2 grey)\n    grey_pattern_amount = 2\n    total_pattern_length = 5\n    \n    # Calculate the total cycles by dividing the number of grey rabbits by the number of grey rabbits per cycle\n    cycles = 14 // grey_pattern_amount\n    \n    # Calculate the total number of rabbits for these full cycles\n    total_rabbits = cycles * total_pattern_length\n    \n    # Check if there are additional grey rabbits that do not make a full cycle\n    remaining_grey_rabbits = 14 % grey_pattern_amount\n    \n    if remaining_grey_rabbits > 0:\n        # If there are additional greys, we need to count the previous colours in the pattern sequence: 1 black and 2 whites\n        total_rabbits += (1 + 2 + remaining_grey_rabbits)\n        \n    return total_rabbits\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    approximate_depreciation = 0.8154\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    final_value_approximated = initial_value * approximate_depreciation\n\n    return round(final_value_approximated, 2)\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    # Given quotient and remainder\n    quotient = 27\n    remainder = 9\n    \n    # The divisor must be more than the remainder, \n    # otherwise the remainder would have been part of the next quotient.\n    # The minimum possible value for the divisor is remainder + 1\n    divisor = remainder + 1\n    \n    # The dividend is given by the formula: dividend = divisor * quotient + remainder\n    dividend = divisor * quotient + remainder\n    \n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 6 + 9\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = 2015 * 2015 - 2016 * 2014\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    not_chocolate_no_foil = 9\n\n    chocolate = total_biscuits - not_chocolate_no_foil - (foil_wrappers - chocolate_with_foil)\n\n    return chocolate\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4/5 * 1\n    return ans\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let the original speed be x metres/minute and the original time be t minutes\n    x, t = symbols('x t', positive=True, real=True)\n    \n    # If speed increases by 25%, new speed becomes 1.25x\n    # New time becomes t - 20 since time decreased by 20 minutes\n    equation1 = Eq(1.25 * x * (t - 20), x * t)\n    \n    # If speed decreases by 45 metres/minute, new speed becomes x - 45\n    # New time becomes 1.75t since time increased by 75%\n    equation2 = Eq((x - 45) * 1.75 * t, x * t)\n    \n    # Now we solve the equations to find the values of x and t\n    solutions = solve((equation1, equation2), (x, t))\n    \n    # The distance the cyclist has to travel, which is speed (x) times time (t)\n    distance = solutions[x] * solutions[t]\n    \n    return distance\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 9 * 0.001 + 7 * 0.01 + 6 * 0.1 + 4\n    rounded_number = round(number, 1)\n    tongtong_correct = rounded_number == 9764.0\n    return rounded_number if not tongtong_correct else tongtong_correct\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    total_amount = 398\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for the original number of crystals Jason had\n    initial_crystals = symbols('initial_crystals')\n\n    # Create the equation based on the problem statement\n    equation = Eq((initial_crystals / 2 + 10) + 20 - 14, initial_crystals - 35)\n\n    # Solve the equation for the initial number of crystals\n    solutions = solve(equation, initial_crystals)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Calculating the number of 2s and 5s in the prime factorization of A.\n    num_twos = 10  # There are 10 2s in the factorization since we have 2 multiplied 10 times.\n    num_fives = 15  # There are 15 5s in the factorization since we have 5 multiplied 15 times.\n\n    # The number of zeros at the end of a number is determined by the number of 10s in its prime factorization\n    # Since 10 is 2 * 5, we need a pair of 2 and 5 to make a 10.\n    # The number of such pairs is the minimum of the count of 2s and 5s.\n    num_zeros = min(num_twos, num_fives)\n\n    return num_zeros\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let's denote the number of carrots Anna had originally as 'a'.\n    a = Symbol('a')\n\n    # According to the problem, initially, Olaf has thrice as many carrots as Anna, so Olaf has 3*a.\n    # After giving away 335 carrots, Olaf has 3*a - 335 carrots left.\n    # At that point, Anna has twice as many carrots as Olaf, so she has 2*(3*a - 335).\n\n    # So we set up the equation as follows: Anna's original amount of carrots plus 335 will be\n    # equal to twice the amount Olaf has after giving away 335 carrots.\n    # a + 335 = 2 * (3*a - 335)\n\n    # Solving for 'a' gives us the number of carrots Anna had originally.\n    equation = a + 335 - 2 * (3*a - 335)\n\n    # Solve the equation for 'a'.\n    ans = solve(equation, a)\n\n    # Return the solution.\n    return ans[0]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    total_permutations = len(list(permutations(digits, 4)))\n    # we can insert the decimal point in 3 different places in a 4 digit number\n    possible_positions_for_decimal = 3\n    return total_permutations * possible_positions_for_decimal\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Bala = 10\n    Ali_and_Bala = 2\n    total_people = people_in_front_of_Ali + Ali_and_Bala + people_behind_Bala\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n    \n    # Total Dodges = Total cars - Total Fords\n    dodges = total_cars - fords\n    # Blue Dodges = Total Blue cars - Blue Fords\n    # Blue Fords = Total Blue cars - Blue Dodges\n    # Black Fords = Total Fords - Blue Fords\n    # Black Dodges = Total Dodges - Blue Dodges\n    \n    # Black Dodges are given as 25, so Blue Dodges = Total Dodges - Black Dodges\n    blue_dodges = dodges - black_dodges\n    \n    # Blue Fords = Total Blue cars - Blue Dodges\n    blue_fords = blue_cars - blue_dodges\n    \n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2/3) * adam_age\n\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    # Convert £30 to pence\n    total_pence = 30 * 100\n\n    # Price of one Summer bedding plant in pence\n    plant_price_pence = 85\n\n    # Calculate the maximum number of plants that can be bought\n    max_plants = total_pence // plant_price_pence\n\n    return max_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4\n    while True:\n        B, C, D = A + 1, A + 2, A + 3\n        if (not all(map(is_prime, [A, B, C, D])) \n            and all(map(is_composite, [A, B, C, D]))):\n            return A + B + C + D\n        A += 1\n    \ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_composite(n):\n    return not is_prime(n)\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # Using the Pigeonhole Principle, to ensure we get at least one ball of each color,\n    # we need to consider the worst-case scenario which would be picking all balls of one color and \n    # then all balls of a second color without having gotten any balls of the third color.\n    # After that, the next ball we pick must be of the third color.\n\n    # Total number of balls for the worst-case in the first two colors\n    blue_and_red = 8 + 10\n\n    # Adding one to ensure we pick at least one green ball in the worst-case scenario\n    min_picks = blue_and_red + 1\n\n    return min_picks\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    number = 0\n    while True:\n        if number % 11 == 5 and number % 7 == 1:\n            break\n        number += 1\n    return number\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_daily_earnings = 120\n    number_of_working_days = 5\n    \n    total_earnings = average_daily_earnings * number_of_working_days\n    \n    return total_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    from math import ceil\n\n    total_apples = 50\n    children = 8\n\n    # Applying the Pigeonhole Principle\n    min_most_apples = ceil(total_apples / children) + (total_apples % children > 0)\n\n    # Maximum apples one can get when others get at least one\n    ans = min_most_apples + (children - 1)\n\n    return ans\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    correct_answer_score = 3\n    wrong_answer_deduction = -2\n    total_score = 125\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_answer_score + wrong_answers * wrong_answer_deduction\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    return (3/8) * 960\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n\n    num1 = 60\n    num2 = 72\n    num3 = 84\n\n    return gcd(gcd(num1, num2), num3)\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    total_counted = 30\n    end_position = 10\n\n    start_position = (end_position - (total_counted % 12)) % 12\n    # Adjust start_position to human-readable format (1-12)\n    if start_position == 0:\n        start_position = 12\n\n    return start_position\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        if (2 + 9 + 6 + digit + 1 + 2) % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    seq = [2, 2]  # the first two numbers of the sequence\n    while len(seq) < 2011:\n        next_num = (seq[-1] + seq[-2]) % 10  # take the last digit of the sum\n        seq.append(next_num)\n    return seq[2010]  # return the 2011th number, index is 2010 because list starts at 0\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds = 24\n    whole_number = (two_thirds * 3) / 2\n    three_quarters = (whole_number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    # Given an odd integer sequence where the first term a1 is 23 and the nth term an is (2k - 1),\n    # the sum of the sequence up to the nth term is m^2. We need to find m such that k > 30.\n    # The sum of an arithmetic series is given by S = n/2 * (a1 + an)\n    # Since the first term a1 is 23 and each subsequent term increases by 2 (odd numbers),\n    # an can be written in terms of the first term and the step: an = a1 + (n - 1) * 2\n    # Equating the sum to m^2: m^2 = n/2 * (a1 + a1 + (n - 1) * 2)\n    # Simplify: m^2 = n/2 * (2 * a1 + (n - 1) * 2)\n    #          m^2 = n/2 * (46 + 2n - 2)\n    #          m^2 = n/2 * (2n + 44)\n    #          m^2 = n * (n + 22)\n    # We need to find the smallest n such that m is an integer and (2n + 21) (the last term in sequence)\n    # results in k > 30\n    \n    n = 1\n    while True:\n        # Calculating the potential m^2\n        m_squared = n * (n + 22)\n        # Check if m_squared is a perfect square\n        m = int(m_squared**0.5)\n        if m * m == m_squared:\n            # Since every term in the sequence is odd and the sequence starts at 23,\n            # the last term is 2n + 21 because 23 is the second odd number (1 is the first).\n            # This means k corresponds to n + 11 since we want (2k - 1) as the last term.\n            k = n + 11\n            if k > 30:\n                return m\n        n += 1\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    time_first_part = 2  # hours\n    speed_first_part = 40  # km/h\n    distance_first_part = time_first_part * speed_first_part\n\n    distance_remaining = 280  # km\n    speed_remaining = 70  # km/h\n    time_remaining = distance_remaining / speed_remaining\n\n    total_time = time_first_part + time_remaining\n    total_distance = distance_first_part + distance_remaining\n\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Alan and Bob's number of cards\n    alan, bob = symbols('alan bob')\n\n    # Bob has $15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    # After Colin gives Bob $25 cards, Bob now has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_savings = original_amount + (daily_savings * days_saved) - lent_to_brother - spent_on_snacks\n\n    return total_savings\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Let the total number of visitors be 100x (an arbitrary multiple of 100 for ease of calculation)\n    # Therefore, 37% of the total visitors are men: 37x\n    # The remaining 63x are women and children in the ratio 4:5\n    # If we say there are 4y women and 5y children, we can say that 4y + 5y = 63x\n    # This simplifies to 9y = 63x, which means y = 7x\n\n    # From the ratio information:\n    # 4y/5y = 4/5 => y = 7x => 4y = 4 * 7x and 5y = 5 * 7x\n\n    # Now we know that the difference between men and children is 12\n    # Therefore, 37x - 5 * 7x = 12\n    # Solve for x:\n    # 37x - 35x = 12\n    # 2x = 12\n    # x = 6\n\n    # Thus we have y = 7x = 7 * 6 = 42\n    # Now we can find the number of women: 4y = 4 * 42 = 168\n\n    # Since the total number of visitors was taken as 100x, and x = 6,\n    # the actual total number of visitors is 100 * 6 = 600\n    # So the number of women will be (4/9) of the total number of visitors excluding men\n    # That is (4/9) of (63/100) * 600 = 168 women\n\n    return 168\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    grass_per_cow_per_day = 1\n\n    total_grass_eaten = cows * days * grass_per_cow_per_day\n\n    return total_grass_eaten\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define symbols\n    banana, apple = symbols('banana apple')\n\n    # equations based on given information\n    equation_ellie = Eq(2 * banana + 3 * apple, 3)\n    equation_beth = Eq(3 * banana + 2 * apple, 4)\n\n    # solving equations\n    solutions = solve((equation_ellie, equation_beth), (banana, apple))\n\n    # Annabella's cost for 10 bananas and 10 apples\n    annabella_cost = 10 * solutions[banana] + 10 * solutions[apple]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from both buckets\n    x = symbols('x')\n\n    # Equation for the big bucket after selling x kilograms\n    equation1 = Eq(89 - x, 12 * (45 - x))\n\n    # Solve for x\n    x_value = solve(equation1, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n\n    # The probability that at least one train is late can be found by subtracting\n    # the probability that neither train is late from 1.\n    prob_neither_late = (1 - prob_to_work_late) * (1 - prob_home_late)\n    prob_at_least_one_late = 1 - prob_neither_late\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    ans = 6.6 + 13.5\n    return ans\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit = 99 - 10 + 1  # Numbers from 10 to 99\n    without_six = (9 - 1) * (10 - 1)  # No sixes in either position\n\n    at_least_one_six = total_two_digit - without_six\n    return at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime(\"1st April\", \"%dst %B\")\n    end_date = datetime.strptime(\"18th May\", \"%dth %B\")\n\n    delta = end_date - start_date\n    return delta.days + 1\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    ans = sum(range(1, 31))\n    return ans\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    # Calculate the last digit of the squares and powers separately\n    last_digit_of_square = (2023 ** 2) % 10\n    last_digit_of_power = (2 ** 2023) % 10\n    \n    # Use the property that the last digit of a sum is the sum of the last digits\n    last_digit_of_sum = (last_digit_of_square + last_digit_of_power) % 10\n    \n    # Cube the last digit and take the last digit of the result\n    ans = (last_digit_of_sum ** 3) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for n in range(1, 2023):\n        if n % 7 != 0 and n % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360  # total distance between the two cars\n    speed_a = 48    # speed of car A in km/h\n    speed_b = 72    # speed of car B in km/h\n\n    # Relative speed is the sum of the speeds of A and B as they are moving towards each other\n    relative_speed = speed_a + speed_b\n\n    # Time = Distance / Speed\n    time = distance / relative_speed\n\n    return time\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    num_lines = 13\n    max_intersections = num_lines * (num_lines - 1) // 2\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_of_5 = 5 ** 20 % 10\n    last_digit_of_7 = 7 ** 20 % 10\n    last_digit = (last_digit_of_5 * last_digit_of_7) % 10\n    return last_digit\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "from math import gcd\n\ndef solution():\n    pencils = 28\n    pens = 63\n    max_students = gcd(pencils, pens)\n    return max_students\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    # Let x be the number of watermelons Helen started with.\n    # After selling 1/3 of x on the first day, she has 2/3x left.\n    # On the second day, she sells 3/5 of the remaining, so she has (2/5)(2/3)x left.\n    # We are told she has 48 watermelons left after the second day.\n    # Setup the equation and solve for x.\n    \n    # (2/5)(2/3)x = 48\n    # (4/15)x = 48\n    # x = 48 * (15/4)\n    x = 48 * (15/4)\n    \n    return x\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mango, orange, pear = symbols('mango orange pear')\n    \n    equation1 = Eq(mango + orange, 3.80) \n    equation2 = Eq(mango + pear, 3.40) \n    equation3 = Eq(4*mango + 2*pear + orange, 13.20)\n    \n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    pasta_packets = 6\n    rice_packets = 5\n    pasta_price_per_packet_pence = 95\n    total_spent_pounds = 11.70\n    \n    total_spent_pence = total_spent_pounds * 100    # convert pounds to pence\n    \n    total_pasta_price = pasta_packets * pasta_price_per_packet_pence\n    total_rice_price = total_spent_pence - total_pasta_price\n    \n    rice_price_per_packet = total_rice_price / rice_packets\n    \n    return rice_price_per_packet\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    # find the least common multiple of 3, 5, and 7\n    lcm = 3 * 5 * 7\n    \n    # since the number is divisible by 5, it must end in 0 or 5, given it is a three digit number starting with 6, it must end with 0\n    # now we just need to find a number that is divisible by lcm and starts with 6 and ends with 0\n    # we'll start checking from 600, as it's the smallest 3-digit number starting with 6 and ending in 0\n    \n    num = 600\n    while True:\n        if num % lcm == 0:\n            return num\n        num += 10  # increment by 10 as the last digit must be 0\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Given values\n    AB = CD = 14  # Length in cm\n    pi = 22 / 7   # Value of pi\n\n    # Calculating the circumference of the whole circle with diameter AB or CD\n    circle_circumference = pi * AB\n\n    # Since we have 2 identical quadrants, that is half a circle\n    half_circle_circumference = circle_circumference / 2\n\n    # Calculating the circumference of semicircles\n    # Semicircle radius is half of AB\n    semicircle_radius = AB / 2\n    semicircle_circumference = pi * semicircle_radius\n\n    # Perimeter is the length around 2 quadrants and 2 semicircles\n    perimeter = half_circle_circumference + 2 * semicircle_circumference\n\n    return perimeter\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    total_cup_noodles = 10\n    chosen_cup_noodles = 6\n    ans = comb(total_cup_noodles, chosen_cup_noodles)\n    return ans\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    \n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days it takes for the lazy decorator to paint the house\n    x = symbols('x')\n\n    # 1/20 is the part of the house the energetic one can paint in a day\n    # 1/x is the part of the house the lazy one can paint in a day\n    # (1/20 + 1/x) is the part of the house they can paint together in a day\n\n    # Since two decorators can paint the house in 12 days, they can paint 1/12 of the house in a day\n    equation = Eq(1/20 + 1/x, 1/12)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    percent = 30 / 100\n    fraction = 2 / 3\n    base = 45\n\n    ans = percent * fraction * base\n\n    return ans\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # The average of the 15 consecutive numbers is 1650 / 15\n    average = 1650 / 15\n    \n    # The sequence is symmetric around the average, the smallest number is 7 less than the average\n    # and the largest is 7 more than the average as there are 15 numbers in total (7 on each side of the average)\n    \n    smallest = average - 7\n    largest = average + 7\n    \n    # Sum of the largest and smallest number\n    sum_of_largest_and_smallest = smallest + largest\n    \n    return int(sum_of_largest_and_smallest)\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    num_pies = 1\n    while not (num_pies % 4 == 0 and num_pies % 6 == 0):\n        num_pies += 1\n    return num_pies\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # Initially, consider the fraction 13/10 to be of the form 1 + x.\n    fraction = 13 / 10 - 1   # This is the x in the expression.\n    \n    # Solve for a, which is the integer part of the reciprocal of x.\n    a = int(1 / fraction)\n    \n    # Subtract the integer part from the reciprocal of x to find the remaining fraction.\n    fraction = 1 / fraction - a\n    \n    # Repeat the process for b.\n    b = int(1 / fraction)\n    fraction = 1 / fraction - b\n\n    # Repeat the process for c.\n    c = int(1 / fraction)\n    \n    # Calculate the value of a + 2b + 3c based on a, b, c found.\n    result = a + 2 * b + 3 * c\n    return result\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boys_per_line = 3\n\n    # Given the ratio of boys to girls in each line is 3:2\n    ratio_boys_girls = 3 / 2\n    girls_per_line = boys_per_line / ratio_boys_girls\n\n    # Total number of girls\n    girls = (boys / boys_per_line) * girls_per_line\n    return int(girls)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n    for i in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # a = 8k + 6\n    # b = 8m + 7\n    # (a + b) = 8(k + m) + 13\n    # when 13 is divided by 8, it leaves a remainder of 5\n    return 5\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    number_of_skirts = 8\n\n    cloth_used_for_skirts = cloth_per_skirt * number_of_skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    number_of_blouses = 2\n\n    cloth_per_blouse = round(remaining_cloth / number_of_blouses, 1)\n\n    return cloth_per_blouse\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    ans = 2189 - 1056\n    return ans\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    digit_count = 0\n    current_number = 1\n    \n    while True:\n        num_str = str(current_number)\n        digit_count += len(num_str)\n        if digit_count >= 2019:\n            return int(num_str[-(digit_count - 2019) - 1])\n        current_number += 1\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # There are 11 rooms and 11 keys, so in the worst-case scenario,\n    # he would try 10 incorrect keys for the first room,\n    # then 9 incorrect keys for the second room and so on.\n    # Finally, for the last room, he doesn't need to try the key because it's the only one left.\n    # Hence, we perform the sum 10 + 9 + 8 + ... + 1\n    ans = sum(range(1, 11))  # This calculates 1+2+3+...+10\n    return ans\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, bernice, cindy = symbols('alice bernice cindy')\n    \n    # Bernice had $240 more beads than Alice\n    eq1 = Eq(bernice, alice + 240)\n    \n    # Cindy had $100 more beads than Bernice\n    eq2 = Eq(cindy, bernice + 100)\n    \n    # Total number of beads\n    eq3 = Eq(alice + bernice + cindy, 1792)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (alice, bernice, cindy))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences can be written as:\n    # n ≡ 1 (mod 2)\n    # n ≡ 2 (mod 3)\n    # n ≡ 3 (mod 4)\n    # n ≡ 4 (mod 5)\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    n, _ = solve_congruence(*congruences)\n\n    return n\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # Total mass in kilograms\n    basket_mass_kg = 500 / 1000  # Basket mass converted to kilograms\n    kitten_mass_kg = 0.6  # Mass of each kitten in kilograms\n    num_kittens = 4  # Number of kittens\n\n    # Total mass of all kittens\n    total_kittens_mass_kg = num_kittens * kitten_mass_kg\n\n    # Mass of the cat is the total mass minus the mass of the basket and kittens\n    cat_mass_kg = total_mass_kg - basket_mass_kg - total_kittens_mass_kg\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_friends = 6\n    cost_per_person = total_cost / number_of_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n    new_price = original_price + (original_price * (increase_percentage / 100.0))\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    number_of_siblings = 3 + 4  # Mary has 3 brothers and 4 sisters\n    mary = 1  # Including Mary\n    total_family_members = number_of_siblings + mary\n\n    # Each family member buys an egg for each of the other siblings\n    eggs_bought = total_family_members * (total_family_members - 1)\n\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import datetime\n\n    time_format = \"%H:%M\"\n    time_of_departure = datetime.strptime(\"7:50\", time_format)\n    time_of_arrival = datetime.strptime(\"8:40\", time_format)\n    \n    journey_duration = time_of_arrival - time_of_departure\n    \n    return journey_duration.seconds // 60\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5 # total number of digits (3x2 and 2x3)\n    num_twos = 3    # how many 2's we have\n    num_threes = 2  # how many 3's we have\n    repeated_twos_ways = factorial(total_digits) // (factorial(num_twos) * factorial(total_digits - num_twos))\n    \n    # Create a four digit number with 3 twos and 1 three\n    three_at_first = 1 * repeated_twos_ways // 3 # Place the 3 at the beginning\n    three_at_second = 1 * repeated_twos_ways // 3 # Place the 3 at the second position\n    three_at_third = 1 * repeated_twos_ways // 3 # Place the 3 at the third position\n    three_at_fourth = 1 * repeated_twos_ways // 3 # Place the 3 at the last position\n    \n    # Add all possible variations\n    count = three_at_first + three_at_second + three_at_third + three_at_fourth\n    \n    return count\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return int(n)\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    \n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    def nth_term(n):\n        return n * (n + 1) / 2\n\n    # the sequence starts from 3 which is the second term of the series (1 * (1 + 1) / 2)\n    missing_term = nth_term(1 + 5)  # we want the 6th term because the sequence starts from the 2nd term\n    return int(missing_term)\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Samuel's original amount of money\n    original_money = symbols('original_money')\n\n    # After spending 1/6 of his money and additional $5 on a DVD\n    money_after_dvd = original_money - (original_money / 6) - 5\n\n    # After spending 2/5 of his remaining money and an additional $12 on magazines\n    money_after_magazines = money_after_dvd - (2/5) * money_after_dvd - 12\n\n    # Equation based on the fact that he had $24 left\n    equation = Eq(money_after_magazines, 24)\n\n    # Solve the equation to find the original amount of money Samuel had\n    solution = solve(equation, original_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_after_handbag = 80 / (1 - 3/5)\n    original_amount = remaining_after_handbag / (1 - 1/5)\n    return original_amount\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    initial_volume = 47\n    poured_out_volume = 5\n    remaining_volume = initial_volume - poured_out_volume\n    tanks = 6\n    \n    volume_per_tank = remaining_volume / tanks\n    \n    return volume_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    grandpa_age = 72\n    johnny_age = 8\n    years = 0\n    \n    while grandpa_age != 5 * (johnny_age + years):\n        years += 1\n    \n    return years\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position = 8\n    bud_position_from_end = 10\n    children_between = 4\n\n    total_children = pip_position + children_between + bud_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Alan's number of cards as 'alan' and Bob's as 'bob'\n    alan, bob = symbols('alan bob')\n\n    # Bob has 15 more Match Dfex cards than Alan -> bob = alan + 15\n    equation1 = Eq(bob, alan + 15)\n\n    # Colin gives Bob 25 cards -> bob = bob + 25\n    # After receiving the cards, Bob now has 3 times as many as Alan -> bob + 25 = 3 * alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    # Alan's number of cards is what we want to find\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    final_amount = 2519.42\n    years = 3\n    \n    interest_rate = round((final_amount / principal) ** (1/years) - 1, 4)\n    interest_rate_percent = round(interest_rate * 100, 1)\n    \n    return interest_rate_percent\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # 10 elderly will not receive any oranges if she gave 20 oranges to each elderly\n    # If she gave 16 oranges to each elderly, she can pack 25 boxes of 2 dozen oranges.\n    # 1 box = 2 dozen oranges = 24 oranges\n    # Total oranges if she gave 16 to each = 25 boxes * 24 oranges/box\n    total_oranges_with_16 = 25 * 24\n    # Extra oranges when giving 16 to each elderly = 16 * 10 because 10 elderly won't receive any\n    extra_oranges = 16 * 10\n    # Total number of oranges Janice has = total oranges with 16 - extra oranges + 20 * 10 (for 10 elderly)\n    total_oranges = total_oranges_with_16 - extra_oranges + 20 * 10\n    \n    # Iterate through all possible number of elderly to find divisible number of oranges\n    for oranges_per_elderly in range(1, total_oranges + 1):\n        if total_oranges % oranges_per_elderly == 0:\n            ans = oranges_per_elderly\n            break\n            \n    return ans\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, m, n = symbols('x m n')\n    delta_operation = Eq(5*m + 3*n, 37)\n    equation_for_x = delta_operation.subs({m: x, n: 9})\n\n    solution_x = solve(equation_for_x, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # According to the pigeonhole principle, to ensure 4 balls of the same colour,\n    # Sheila might take out all balls of the other two colours first.\n    # That is, all 4 orange balls and all 2 yellow balls, which makes 6 balls.\n    # Then, she takes out another 3 blue balls to have 3 blue balls.\n    # The next ball she takes out must be blue to make 4 of the same colour.\n    # So the total number of balls Sheila must take out is:\n    return 4 + 2 + 3 + 1\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15 AM', '%I:%M %p')\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    weight_full = 31\n    weight_partly_full = 27\n    weight_soil_removed = weight_full - weight_partly_full\n    weight_soil_initial = weight_soil_removed * 5  # Because 1/5th was removed\n    weight_empty = weight_full - weight_soil_initial\n    return weight_empty\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Tim's and Tyler's cookies\n    Tim, Tyler = symbols('Tim Tyler')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(Tim / 6, Tyler * 3 / 8)\n    equation2 = Eq(Tim, 9 * (Tyler - 96))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Tim, Tyler))\n    \n    # Calculate the total number of cookies initially\n    total_cookies = solutions[Tim] + solutions[Tyler]\n    \n    return total_cookies\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Sum of odd numbers from 1 to 50\n    # The odd numbers form an arithmetic sequence starting with 1, \n    # with a common difference of 2 and the last term being 49\n    # Number of odd terms = (Last term - First term) / Difference + 1\n    num_odd_terms = (49 - 1) // 2 + 1\n    sum_odds = num_odd_terms * (1 + 49) // 2\n\n    # Sum of even numbers from 1 to 50\n    # The even numbers form an arithmetic sequence starting with 2, \n    # with a common difference of 2 and the last term being 50\n    # Number of even terms = (Last term - First term) / Difference + 1\n    num_even_terms = (50 - 2) // 2 + 1\n    sum_evens = num_even_terms * (2 + 50) // 2\n\n    # Difference between Monica's and Melvin's sums\n    difference = sum_evens - sum_odds\n\n    return difference\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    interval1 = 24  # Trains leave every 24 minutes from platform 1\n    interval2 = 30  # Trains leave every 30 minutes from platform 2\n\n    # Least Common Multiple (LCM) will give us the interval at which both trains leave together\n    lcm_minutes = lcm(interval1, interval2)\n\n    # Initial departure time is 9 a.m., which is 540 minutes from midnight\n    initial_time = 540  \n\n    # Time when both trains leave together is the sum of the initial time and the lcm of intervals\n    next_departure = initial_time + lcm_minutes\n\n    # Convert this time back to hours and minutes\n    hours = next_departure // 60\n    minutes = next_departure % 60\n\n    # Format the hours and minutes to get the next departure time\n    ans = f\"{hours}:{minutes:02d} a.m.\" if hours < 12 else f\"{hours - 12}:{minutes:02d} p.m.\" if hours > 12 else f\"{hours}:{minutes:02d} p.m.\"\n\n    return ans\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    jenny_score = 136\n    missed_marks = total_marks - jenny_score\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 24\n    fraction_filled = 3/4\n    full_tank = part_filled / fraction_filled\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n    \n    # System of equations based on the problem description\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # defining symbols\n    red_initial, white_initial, red_added, white_added = symbols('red_initial white_initial red_added white_added')\n    \n    # initial condition\n    equation1 = Eq(red_initial/white_initial, 3/2)\n    \n    # after Pip adds red balls\n    equation2 = Eq((red_initial + red_added)/white_initial, 5/3)\n    \n    # after Bud adds white balls\n    equation3 = Eq((red_initial + red_added)/(white_initial + white_added), 5/4)\n    \n    # Bud adds 100 more balls than Pip\n    equation4 = Eq(white_added, red_added + 100)\n    \n    # solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (red_initial, white_initial, red_added, white_added))\n    \n    # returning the number of initial white balls\n    return solutions[white_initial]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # For a to have a remainder 6 when divided by 8, a must be of the form 8k + 6 for some integer k\n    # For b to have a remainder 7 when divided by 8, b must be of the form 8n + 7 for some integer n\n    # Adding a and b, we get (8k + 6) + (8n + 7) = 8(k + n) + 13\n    # Dividing this sum by 8 will leave a remainder of 13 % 8, since 8(k + n) is divisible by 8.\n    remainder = (6 + 7) % 8\n    return remainder\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(1/6 * chocolate + 2/3 * vanilla + 7/9 * blueberry, 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    chocolate_cupcakes = solutions[chocolate]\n\n    # Calculate how many chocolate cupcakes Sally sold\n    chocolate_sold = chocolate_cupcakes - (5/6 * chocolate_cupcakes)\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n\n    # Jessica is in front of Judy, so Jessica's desk plus Judy's desk plus the desks between them\n    desks_between_jessica_and_judy = 1\n\n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + desks_behind_judy + 1  # plus Judy's desk\n\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    # Iterate through each number in the sequence\n    for i in range(2, 57):\n        # Count the occurrences of digit \"6\" in each number by converting it to a string\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original average weight\n    # Let n be the original number of people\n    x, n = symbols('x n')\n\n    # Equations according to the problem statements\n    # Equation for the situation when Aaron joined\n    equation1 = Eq((n*x + 45) / (n + 1), 61)\n    # Equation for the situation when Ben joined\n    equation2 = Eq((n*x + 45 + 71) / (n + 2), 62)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (x, n))\n\n    # x represents the original average weight\n    return solutions[x]\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_taken_out = 0\n\n    while total_taken_out < 2989:\n        # Take 2 balls out of Bag A\n        total_taken_out += 1\n        total_taken_out += 1\n\n        if white_balls > 1:\n            # If both are white, put back 1 black (the net effect is -2 white, +1 black)\n            white_balls -= 2\n            black_balls += 1\n        elif black_balls > 1:\n            # If both are black, put back 1 black (the net effect is -1 black)\n            black_balls -= 1\n        else:\n            # If one black and one white, put back 1 white (no net effect)\n            pass\n\n    # After all balls are taken out, the final count in Bag A\n    return white_balls + black_balls, 'white' if white_balls > black_balls else 'black'\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "def solution():\n    for i in range(10000, 100000): # since we know the result is a 5-digit number\n        str_i = str(i)\n        if '0' in str_i or len(set(str_i)) != len(str_i):  # check if '0' is in the number or if all digits are unique\n            continue\n        product = i * 4\n        if len(str(product)) == 5 and len(set(str(product) + str_i)) == 10: # check if the product is a 5-digit number and all digits are unique\n            return product\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    total_work = 6 * 15\n    people_needed = total_work / 2\n    return people_needed\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100\n    return int(n)\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    total_money = 30  # Harry's birthday money\n    expenses = 3.99 + 2.50 + 0.70 + 10.99 + (4 * 1.50)  # total expenses\n    change = total_money - expenses  # change left after expenses\n    return round(change, 2)  # rounding to 2 decimal places for currency\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for digit in range(2, 10):  # hundreds digit must be at least 2 less than units digit, which can be 0 to 9\n        hundreds = digit\n        units = digit + 2\n        if units <= 9:  # units digit must be 9 or less\n            for tens in range(0, 10):  # tens digit can be anything from 0 to 9\n                count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    han, daughter = symbols('han daughter')\n    \n    equation1 = Eq(han, 3 * daughter)\n    equation2 = Eq(han + daughter, 91.2)\n\n    solutions = solve((equation1, equation2), (han, daughter))\n\n    return solutions[han]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (1 - 2/5)\n    initial_chocolates = remaining_after_students / (1 - 80/100)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 100, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # If Samantha has more votes than anyone else,\n    # and there are 25 votes total, we can divide the votes among three students\n    # Considering the case where she has the least number of votes being more than the others:\n    # If she has 's' votes, others could have a maximum of 's-1' votes\n    # Let's denote the other two students' votes as 'x' and 'y'\n    # Using Pigeonhole Principle, if Samantha has the least number of votes being more\n    # then we can assume that the other two have one vote less than her maximum possible\n    # Hence the scenario would be:\n    # s + (s-1) + (s-1) <= 25\n    # 3s - 2 <= 25\n    # 3s <= 27\n    # s <= 9\n    # Since s has to be an integer and more than anyone else, she could have a minimum of 9 votes\n    return 9\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n    \n    for i in range(len(coins)):\n        for j in range(len(coins)):\n            for k in range(len(coins)):\n                if i != j or j != k or i != k:\n                    totals.add(coins[i] + coins[j] + coins[k])\n    \n    return len(totals)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    # Initialize count to zero\n    count = 0\n    \n    # Since there should be two or more non-zero natural numbers that sum up to 5\n    # We don't need to loop through 5, as it can't be split further\n    for x1 in range(1, 5):\n        for x2 in range(1, 5):\n            # Check if x1 and x2 are equal; if so, skip because we want different numbers\n            if x1 == x2:\n                continue\n            # If x1 + x2 == 5, this is a valid partition, so increment count\n            if x1 + x2 == 5:\n                count += 1\n            for x3 in range(1, 5):\n                # Check if x3 is equal to x1 or x2; if so, skip\n                if x3 in {x1, x2}:\n                    continue\n                # If x1 + x2 + x3 == 5, this is a valid partition\n                if x1 + x2 + x3 == 5:\n                    count += 1\n                for x4 in range(1, 5):\n                    # Check if x4 is equal to x1, x2, or x3; if so, skip\n                    if x4 in {x1, x2, x3}:\n                        continue\n                    # If x1 + x2 + x3 + x4 == 5, this is a valid partition\n                    if x1 + x2 + x3 + x4 == 5:\n                        count += 1\n    \n    # The above count includes permutations, but the order doesn't matter for this problem\n    # So we'll need to divide by the factorial of the number of partitions for each case (after 1)\n    # For splitting into two parts, there are 1 unique combination (since 4+1 and 3+2 are the same)\n    # For splitting into three parts, there are 2! ways to arrange them (since 1+1+3 is the only combination)\n    # For splitting into four parts, there is only 1 way (1+1+1+2)\n    # Total unique combinations: 1(combination of 2 parts) + (2! combinations for 3 parts) + 1(combination of 4 parts)\n    \n    ans = 1 + (count - 1)//2 + 1\n    \n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P = 6000  # Principal amount\n    A = 8029.35  # Final amount\n    n = 5  # Number of years\n    x = symbols('x')  # Symbolic representation of the interest rate\n\n    # Equation for compound interest: A = P * (1 + r)**n\n    equation = Eq(A, P * (1 + x/100)**n)\n    \n    # Solving for the interest rate\n    interest_rate = solve(equation, x)\n    \n    return float(interest_rate[0])\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages, digits = 0, 0\n\n    while digits < 291:\n        pages += 1\n        digits += len(str(pages))\n\n    return pages - 1 if digits > 291 else pages\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 1000\n    weight_in_kg = 2.4\n    weight_in_g = weight_in_kg * kg_to_g\n    return weight_in_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_amount = 1500\n    chairs_amount = 360\n    percent = (chairs_amount / total_amount) * 100\n    return percent\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of pages in the magazine\n    x = symbols('x')\n\n    # If Clarice reads another 80 pages, the number of pages she has read becomes 70%\n    # Let y be the number of pages she initially read\n    y = x / 6  # Since the ratio of read to unread is 1:5\n\n    # Set up the equation based on the problem statement\n    equation = Eq(y + 80, 0.7 * x)\n\n    # Solve the equation for x\n    total_pages = solve(equation, x)[0]\n\n    return total_pages\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let x be the number of correct answers CC got\n    # Then Vivi got x + 3 correct answers (because Vivi got 15 more points)\n    \n    # Each correct answer gives 10 points, and each wrong answer gives -5 points\n    # Total points by CC: 10x - 5(10 - x)\n    # Total points by Vivi: 10(x + 3) - 5(10 - (x + 3))\n    \n    # Together they have 95 points\n    # 10x - 5(10 - x) + 10(x + 3) - 5(10 - (x + 3)) = 95\n    # 10x - 50 + 5x + 10x + 30 - 5(10 - x - 3) = 95\n    # 25x - 20 = 95\n    # 25x = 115\n    # x = 4.6 which is not possible since x must be a whole number\n\n    # To handle the step by step approach, we can solve the equation using loop\n    x = 0\n    while True:\n        if 10 * x - 5 * (10 - x) + 10 * (x + 3) - 5 * (7 - x) == 95:\n            return x\n        x += 1\n        \nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    # Mr Toh bought 2 books and 3 magazines for $24.90\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    # 1 book and 1 magazine cost a total of $10\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    teachers = 6\n    girls_per_room = 5\n    teachers_rooms = 3\n\n    girls_rooms = girls // girls_per_room\n    total_rooms = girls_rooms + teachers_rooms\n\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_per_person = 650 / 15\n    flour_needed_for_18 = flour_per_person * 18\n    return flour_needed_for_18\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    adults = 2\n    children = 3\n\n    total_cost = (adults * adult_ticket_price) + (children * child_ticket_price)\n    \n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    num_str = '2581953752'\n    min_sum = float('inf')\n    for i in range(1, len(num_str) - 1):\n        for j in range(i+1, len(num_str)):\n            part1 = int(num_str[0:i])\n            part2 = int(num_str[i:j])\n            part3 = int(num_str[j:len(num_str)])\n            current_sum = part1 + part2 + part3\n            min_sum = min(min_sum, current_sum)\n    return min_sum\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    millimeters = 7000000\n    meters = millimeters / 1000\n    return meters\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    total_members = 99\n    \n    # 9x:10x = Science:Literature\n    # 5y:7y = Literature:Math\n    # 10x = 5y  => y = 2x\n    \n    # Therefore:\n    # Science:Literature:Math = 9x:10x:14x\n    # Total ratio parts = 9x + 10x + 14x = 33x\n    # 33x = 99 => x = 3\n    \n    x = total_members / 33\n    math_club_members = 14 * x\n    literature_club_members = 10 * x\n    \n    more_members_in_math = math_club_members - literature_club_members\n    \n    return int(more_members_in_math)\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Melissa's current age and her mother's current age\n    melissa, mother = symbols('melissa mother')\n\n    # Equation based on the age difference remaining constant\n    equation1 = Eq(mother - melissa, 32 - 8)\n    \n    # Equation based on the current age ratio\n    equation2 = Eq(mother, 3 * melissa)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (melissa, mother))\n\n    # Melissa's current age is the solution we need\n    return solutions[melissa]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Each side has 6 flowers, but since the corners are counted twice \n    # (each corner flower belongs to 2 sides), we subtract 4 to avoid duplication.\n    flowers_per_side = 6\n    total_corners = 4\n    total_flowers = (flowers_per_side - 1) * 4 + total_corners\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    n = 48\n    factors = [i for i in range(1, n+1) if n % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    # Let's denote the original numbers as x and y.\n    # According to the problem, we have:\n    # x + y = 11.63                 (1)\n    # x + 0.1 * y = 5.87            (2)\n    \n    # Let's solve this system of equations:\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 11.63)\n    equation2 = Eq(x + 0.1 * y, 5.87)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The difference between the two original numbers (x - y):\n    difference = solutions[x] - solutions[y]\n\n    # What is one hundred times the difference between the two original numbers?\n    hundred_times_difference = 100 * difference\n\n    return hundred_times_difference\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    total_length = 10\n    piece1 = 4.8\n    piece2 = 2.73\n    piece3 = total_length - (piece1 + piece2)\n\n    lengths = sorted([piece1, piece2, piece3])\n    longest = lengths[2]\n    shortest = lengths[0]\n    difference = longest - shortest\n\n    return difference\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    basketball, volleyball = symbols('basketball volleyball')\n    \n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n    equation2 = Eq(basketball, volleyball + 10)\n    \n    solutions = solve((equation1, equation2), (basketball, volleyball))\n    \n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = '1234'\n    repeated_pattern = (pattern * (47 // len(pattern))) + pattern[:47 % len(pattern)]\n    \n    ans = sum(int(digit) for digit in repeated_pattern)\n    return ans\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_for_six = 2.52\n    cost_per_bottle = cost_for_six / 6\n    cost_for_nine = cost_per_bottle * 9\n    return round(cost_for_nine, 2)\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    equation = Eq((20 * boys + 60 * girls) / 40, 35)\n\n    num_boys = solve(equation, boys)[0]\n    \n    return num_boys\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 as it is a 2-digit number\n        for b in range(10):  \n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    total_cost = 132\n    # Thomas's solution assumes the book and the bag cost 5/6 of the total money Li Yan had.\n    # Since 5 units equal to $132, one unit would be $132 divided by 5.\n    cost_per_unit = total_cost / 5\n    \n    # However, the book cost 1/3 of the total money, and the bag cost 1/2 of the remainder.\n    # Remainer after buying the book is (2/3) of the total money.\n    # Bag cost is thus (1/2) of (2/3) which is (1/3) of the total money.\n    # So together, the book and the bag cost (1/3) + (1/3) = (2/3) of the total money, not (5/6).\n    \n    # Correcting Thomas's mistake:\n    # If 2 units equal to $132, one unit would be $132 divided by 2.\n    correct_cost_per_unit = total_cost / 2\n    # Total money is then 3 units because (1/3) for the book and (2/3) remaining.\n    total_money = correct_cost_per_unit * 3\n    \n    return total_money\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    for num_cupcakes in range(1, 100):\n        if num_cupcakes <= 20:\n            total_cost = 4.50 * num_cupcakes + 12\n        else:\n            total_cost = (4.50 * 20 + 12) + 4.50 * (num_cupcakes - 20) * 0.80\n\n        if total_cost == 120:\n            return num_cupcakes\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pigs, goats = symbols('pigs goats')\n\n    equation1 = Eq(3 * pigs + goats, 440)\n    equation2 = Eq(pigs + 2 * goats, 280)\n\n    solutions = solve((equation1, equation2), (pigs, goats))\n\n    total_cost = 5 * solutions[pigs] + 5 * solutions[goats]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28\n    total_pence = 57\n    # Convert the pence to pounds and add it to the total pounds\n    ans = total_pounds + (total_pence / 100)\n    return ans\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    # Let x be the number of problems Jack answered correctly\n    # Let y be the number of problems Jack answered incorrectly\n    # Let z be the number of problems Jack did not answer\n    # Total problems = x + y + z = 25\n    # Total score Jack got = 4x - y = 61\n    # Since Jack answered more correctly than Johnson, and they both got 61 points\n    # For any given pair (x, y) for Jack, Johnson must have x-1 correct answers and y+1 incorrect answers,\n    # otherwise, they might end up solving the same number of questions correctly.\n    # The equation for Johnson's score would be: 4(x-1) - (y+1) = 61.\n\n    for x in range(25):\n        for y in range(25):\n            z = 25 - x - y\n            if 4*x - y == 61 and 4*(x-1) - (y+1) == 61:\n                return z\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for i in range(10000, 100000):\n        if int(str(i) + '1') == 3 * int('1' + str(i)):\n            return i\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    place_from_back = 12\n    # Subtract one because Rose is counted both in people_in_front and place_from_back\n    total_people = people_in_front + place_from_back - 1\n    return total_people\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_current_age = 8\n    grandmother_age_diff = 42\n    \n    john_future_age = john_current_age + 2\n    grandmother_future_age = john_future_age + grandmother_age_diff\n    \n    total_future_age = john_future_age + grandmother_future_age\n    \n    return total_future_age\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq((x + 45) / 3, 2 * x)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50  # number of terms in the sequence\n    ans = (n * (n + 1)) // 2  # formula for the sum of the first n natural numbers\n    return ans\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    doubled_number = result - 10\n    original_number = doubled_number / 2\n    return original_number\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Using the pigeonhole principle:\n    # Removing 2 blue marbles, 2 yellow marbles and 1 red marble would still not guarantee 3 of the same color.\n    # To guarantee 3 of the same color, we need to remove one more marble from the remaining 4 (2 blue and 2 yellow).\n    # Thus we need to remove 2 (blue) + 2 (yellow) + 1 (red) + 1 (any) = 6 marbles to be sure of having 3 of the same color.\n\n    return 6 \n\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'lazy' be the time it takes for the lazy decorator to paint the house alone\n    lazy = symbols('lazy')\n\n    # Equation based on combined work rate: (1 energetic work rate + 1 lazy work rate) * time = 1 job done\n    equation = Eq((1/10 + 1/lazy) * 6, 1)\n\n    # Solve for 'lazy'\n    days_lazy = solve(equation, lazy)\n\n    return days_lazy[0]\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # Number of marbles of the most abundant color\n    max_color_count = 12\n    # To ensure 4 marbles of different colors, we can draw all marbles of the most abundant color plus one more from each of the other colors\n    # Therefore, we draw 12 red, 1 blue, 1 yellow, and 1 red from the remaining three colors\n    ans = max_color_count + 3  # 12 red + 1 blue + 1 yellow + 1 red\n\n    return ans\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # Let's construct the number string with the square in the middle.\n    num_str = '5' * 19 + 'x' + '9' * 19\n\n    # We'll find the middle digit by trying each possible digit from 0 to 9.\n    for digit in range(10):\n        # Replace the 'x' with the current digit.\n        current_num_str = num_str.replace('x', str(digit))\n        \n        # Convert the string to an actual number.\n        num = int(current_num_str)\n        \n        # Check if this number is divisible by 7.\n        if num % 7 == 0:\n            # If divisible, our search is finished.\n            return digit\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_read_first_day = 40\n    fraction_of_whole_book = 1 / 5\n\n    total_pages = pages_read_first_day / fraction_of_whole_book\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    # Since each brother has to have at least two books, we start by\n    # giving two books to each brother. Now we have 4 books left to distribute.\n    # Let's say the brothers are A, B, and C.\n    # We will now calculate the number of ways to distribute the remaining 4 books.\n    \n    count = 0\n    # We can give 0 to 4 books to the first brother (A),\n    # and then distribute the rest between B and C.\n    for a in range(5):\n        for b in range(5 - a):  # After giving 'a' books to A, only (4-a) books can be given to B.\n            # The rest will go to C.\n            c = 4 - a - b\n            # For this problem, since the books are identical, we just need to count each unique distribution.\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    # Every two-digit number with the unit digit 6 ranges from 16 to 96 (inclusive)\n    # We start with 16 (first such number) and end with 96 (last such number)\n    # Since the tens digit changes from 1 to 9, there are 9 such two-digit numbers.\n    \n    count = 9\n    return count\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    this_time = 105.6\n    more_than_last_time = 14.4\n    last_time = this_time - more_than_last_time\n    total_spent = this_time + last_time\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    first = 3\n    second = 10\n    for _ in range(2021):\n        third = first + second\n        first, second = second, third\n    return third % 3\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Tom is standing at the 10th place, so there are 9 children shorter than him,\n    # and (31 - 10) = 21 children taller than him.\n    # The last child is 131 cm, which is the tallest.\n    # Assume that each child is 1 cm taller than the previous child at minimum.\n    # This assumption ensures that no two children have the same height.\n    # So, we add 1 cm to each step from Tom to the 31st child.\n    \n    # The minimum height of the 10th child would be when the first 9 children\n    # are of the smallest possible height. Start with 1 cm for the first child and \n    # increase by 1 cm for each subsequent child till the 9th child. So the height of the\n    # 9th child will be 9 cm. Therefore, the minimum height of Tom would be 10 cm.\n    \n    # Now, starting from 131 cm (the 31st child's height) and decreasing by \n    # 1 cm for each step backwards, the maximum height of Tom can be calculated.\n    \n    # The difference in terms of number of children between the 31st child\n    # and Tom's position (10th place) is 31 - 10 = 21.\n    # Starting from 131 cm and subtracting 1 cm for each of those 21 children,\n    # we can find Tom's maximum possible height.\n    max_height_tom = 131 - 21\n\n    return max_height_tom\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # symbol for the magic number\n    magic_number = symbols('magic_number')\n    \n    # defining the equation based on the problem statement\n    equation = Eq((208 - magic_number), 9 * (136 - magic_number))\n    \n    # solve the equation\n    solution = solve(equation, magic_number)\n    \n    # return the value of the magic number\n    return solution[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    n = 840\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let x be the number of storybooks Anthea has initially.\n    # Jason has 30 books.\n    # If Jason gives 4 books to Anthea, they will have the same number of books.\n    # So, Jason will have 30 - 4 books, which is 26 books.\n    # And Anthea will have x + 4 books.\n    # At that point, Jason's books = Anthea's books, so we can write the equation:\n    # 26 = x + 4\n    # Now we solve for x:\n    x = 26 - 4\n    \n    # The difference between the number of books they initially have is:\n    # Jason's books - Anthea's books\n    difference = 30 - x\n\n    return difference\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    equation1 = Eq(alan / bella, 4 / 3)\n    equation2 = Eq(alan, chloe + 20)\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_cost = 7.85\n    bar_cost = 1.83\n    number_of_bars = 2\n    note_value = 20\n\n    total_cost = box_cost + (bar_cost * number_of_bars)\n    change = note_value - total_cost\n\n    return change\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    from math import factorial\n\n    # Lily at the left and mother at the right, there are 3 spots in between.\n    # 3 family members can be arranged in these 3 spots in 3! ways.\n\n    ans = factorial(3)\n    return ans\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x represents the number of students\n    # If x students are given $5 each, 3 are left\n    equation1 = Eq(5 * x + 3, 5 * x + 4)\n    # If x students are given $4 each, 9 are left\n    equation2 = Eq(4 * x + 9, 4 * x + 5)\n\n    # Simplify the equations to make them solvable\n    simplified_eq1 = Eq((5 * x + 3) - (5 * x), 1)\n    simplified_eq2 = Eq((4 * x + 9) - (4 * x), 5)\n\n    solutions = solve((simplified_eq1, simplified_eq2), x)\n    \n    # Extract the number of students from the solutions dictionary\n    return solutions[x]\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    last_term = 99\n    difference = 4\n    \n    # Calculate the number of rows using\n    # (last_term - first_term) / difference + 1\n    num_rows = ((last_term - first_term) // difference) + 1\n    \n    # Calculate the sum of an arithmetic series\n    # sum = (num_rows / 2) * (first_term + last_term)\n    total_seats = (num_rows * (first_term + last_term)) // 2\n    \n    return total_seats\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for number in range(10, 100):\n        if number % 5 == 4 and number % 7 == 4:\n            return number\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    amount_in_pounds = 1.28\n    amount_to_subtract = 0.57\n    ans = amount_in_pounds - amount_to_subtract\n    return ans\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    all_perms = list(permutations(range(1, 9), 2))\n    valid_numbers = [10 * tens + ones for tens, ones in all_perms\n                     if ones != 2 * tens and 10 * tens + ones + 5 != 10 * (ones + 5) + tens and ones + tens != 9]\n    \n    valid_numbers = sorted(set(valid_numbers))\n    \n    # Smallest number condition\n    smallest = [num for num in valid_numbers if num % 10 == 2 * (num // 10)]\n    valid_numbers = [num for num in valid_numbers if num not in smallest]\n    \n    # Largest number condition\n    largest = [num for num in valid_numbers if (num % 10) + (num // 10) == 9]\n    valid_numbers = [num for num in valid_numbers if num not in largest]\n    \n    # Second largest condition\n    second_largest = [num for num in valid_numbers if (num // 10) - (num % 10) == 5]\n    valid_numbers = [num for num in valid_numbers if num not in second_largest]\n    \n    # Odd number condition\n    odd_number = [num for num in valid_numbers if num % 2 == 1]\n    valid_numbers = [num for num in valid_numbers if num not in odd_number]\n    \n    second_smallest = sorted(list(set(valid_numbers)-set(smallest)-set(odd_number)-set(largest)-set(second_largest)))[0]\n        \n    return second_smallest\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    children = 3/5 * visitors\n    remaining = visitors - children\n    men = 1/2 * remaining\n    equation = Eq(children, men + 140)\n\n    total_visitors = solve(equation, visitors)[0]\n\n    return total_visitors\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    average_initial = 120\n    sum_initial = average_initial * 3\n    average_new = 150\n    sum_new = average_new * 4\n    fourth_number = sum_new - sum_initial\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    correct_sum = sum(i**2 for i in range(5, 16))\n    kimmy_sum = (15 * 16 * 31) // 6\n    return correct_sum == kimmy_sum, correct_sum\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    correct, incorrect = symbols('correct incorrect')\n\n    # Equation for total questions\n    total_questions_eq = Eq(correct + incorrect, 20)\n    \n    # Equation for the score\n    score_eq = Eq(5*correct - 2*incorrect, 51)\n\n    # Solving both equations simultaneously\n    solutions = solve((total_questions_eq, score_eq), (correct, incorrect))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    # Let's denote the initial amount of money as X.\n    # After spending 6/11 of her money and an additional $5, Amy has (5/11)X - 5 left.\n    # She then spends 3/10 of the remainder and an additional $12, and she has $30 left.\n\n    # Therefore, we can set up the equation:\n    # (5/11)X - 5 - (3/10)((5/11)X - 5) - 12 = 30\n\n    # Let's solve for X using sympy library for symbolic computation:\n    from sympy import symbols, Eq, solve\n\n    X = symbols('X')  # Define the symbol for the unknown variable\n    equation = Eq((5/11)*X - 5 - (3/10)*((5/11)*X - 5) - 12, 30)\n\n    solution = solve(equation, X)  # Solve the equation for X\n\n    return solution[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Sally's and Gillian's current ages\n    sally, gillian = symbols('sally gillian')\n\n    # The ratio of Sally's to Gillian's age is 2:7\n    equation1 = Eq(2*gillian, 7*sally)\n\n    # In 15 years, the ratio of Sally's to Gillian's age will be 1:2\n    equation2 = Eq((sally + 15)*2, (gillian + 15)*1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sally, gillian))\n\n    # Return Sally's current age\n    return solutions[sally]\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    # Peter gave 25% of his stickers (after receiving 20% from Sam) to Sam\n    # In the end, Sam has 96 stickers more than Peter\n    equation2 = Eq(sam - (0.20 * sam) + (0.25 * (peter + (0.20 * sam))), peter + (0.20 * sam) - (0.25 * (peter + (0.20 * sam))) + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    # Return the number of stickers Peter had at first\n    return solutions[peter]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    actual_subtrahend = 75\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n\n    correct_result = mistaken_result + (actual_subtrahend - mistaken_subtrahend)\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    customer_count = 40\n    pen_factor = 3\n    file_factor = 4\n    \n    lcm = (pen_factor * file_factor) // math.gcd(pen_factor, file_factor)\n    ans = customer_count // lcm\n    \n    return ans\n\nimport math\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_minutes = 20\n    lily_minutes = hook_minutes - 5\n    return lily_minutes\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    mass_of_one_apple = 1 / 9\n    total_mass_of_apples_used = 8\n    total_apples_used = total_mass_of_apples_used / mass_of_one_apple\n    apples_per_cake = 4\n    cakes_baked = total_apples_used / apples_per_cake\n    return int(cakes_baked)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    frac_part = 35 / 45\n    answer = frac_part * 9\n    return int(answer)\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_apart = 1.5\n    num_seeds = 12\n    total_distance = distance_apart * num_seeds\n    circumference = total_distance\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    result = (3/8) * 32\n    return result\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    # Let x be the number of pieces of paper cut into three parts\n    # Initially, there were 10 pieces of paper.\n    # After cutting x pieces into three parts each, we gain 2 more parts for each piece cut.\n    # The total number of pieces of paper after cutting is 16.\n    # The equation for the problem is: initial pieces + 2 * cut pieces = final pieces\n    # 10 + 2x = 16\n    # Solve for x:\n    x = (16 - 10) // 2\n\n    return x\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    # Number of boys\n    boys = 12\n    # Number of girls\n    girls = 8\n    # Total number of participants\n    total = boys + girls\n    # Average score of boys\n    avg_boys = 10\n    # Average score of all participants\n    avg_total = 14\n\n    # Total score of all participants\n    total_score = avg_total * total\n    # Total score of boys\n    total_score_boys = avg_boys * boys\n    # Total score of girls (total - boys' scores)\n    total_score_girls = total_score - total_score_boys\n    # Average score of girls\n    avg_girls = total_score_girls / girls\n\n    return avg_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    n = 1\n    while True:\n        if (n * n + 9) + 2 * n + (1 - 16) == (n + 1) * (n + 1):\n            return n * n + 9\n        n += 1\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    postcards_initial = 50\n    envelopes_initial = 5\n    envelopes_additional = 2\n\n    postcards_per_envelope_initial = postcards_initial / envelopes_initial\n    total_envelopes = envelopes_initial + envelopes_additional\n    total_postcards = postcards_per_envelope_initial * total_envelopes\n\n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "from itertools import product\n\ndef solution():\n    coin_values = [1, 2, 5, 10, 20, 50, 100, 200] # pence\n    total_change = 250  # pence\n\n    # Try all combinations of coins until we find one that satisfies the conditions\n    for combination in product(coin_values, repeat=2):\n        if sum(combination) == total_change:\n            return min(combination)\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    sold_ratio = 0.75\n    burnt_ratio = 3/5\n\n    # Let total cookies be x\n    # Burnt cookies: 3/5 * x\n    # Remaining cookies: 2/5 * x\n    # Sold cookies: 3/4 * remaining = 3/4 * (2/5) * x = (3/10) * x\n    # Burnt cookies = 42 + sold cookies\n    # 3/5 * x = 42 + 3/10 * x\n    # 6/10 * x - 3/10 * x = 42\n    # 3/10 * x = 42\n    \n    x = 42 / (3/10)\n\n    return int(x)\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_gram = 0.80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2)-(0.2)**2)/(-1.8)-((41.08-(-2/5)**2)/(3+(-2)**3))\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    apples = 27\n    container_capacity = 4\n    num_containers = -(-apples // container_capacity)  # Ceiling division\n\n    return num_containers\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10**6):\n        original_number = i * 10 + 9  # original number with 9 in units column\n        new_number = int(str(9) + str(i))  # new number with 9 in the leftmost position\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for y in range(10):\n        if (1070 + y) % 6 == 0:\n            return y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    kevin_speed = 80  # Kevin's speed in mph\n    jerry_proportion = 3 / 7  # Jerry's proportion of the distance when they meet\n    jerry_speed_proportion = 2 / 5  # Jerry's speed as a proportion of the road length per hour\n\n    kevin_distance_proportion = 1 - jerry_proportion  # Kevin's proportion of the distance when they meet\n\n    # Since their speeds are constant, the ratio of their distances will be the same as the ratio of their speeds\n    speed_ratio = jerry_proportion / kevin_distance_proportion  # This is the ratio of Jerry's speed to Kevin's speed\n\n    # Now we can relate Kevin's speed to the Jerry's speed\n    jerry_speed = speed_ratio * kevin_speed\n\n    # Now relate the speed of Jerry to the road length\n    road_length = jerry_speed / jerry_speed_proportion\n\n    return road_length\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    result = (a + b) * a\n    return result\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_price = 120\n    discount = 0.50\n    extra_discount = 0.20\n\n    discounted_price = regular_price * (1 - discount)\n    final_price = discounted_price * (1 - extra_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # Total students\n    total_students = 6  # including Laura and Rita\n\n    # Since Laura must stand in the front, we fix Laura's position\n    positions_for_others = total_students - 1  # excluding Laura\n\n    # Rita cannot stand at the end, so she has positions_for_others - 1 choices\n    positions_for_rita = positions_for_others - 1\n\n    # The remaining students (excluding Laura and Rita) can stand in any order\n    # so we calculate the permutations for the remaining students\n    permutations_for_remaining_students = factorial(positions_for_others - 1)\n\n    # Total number of ways:\n    total_ways = positions_for_rita * permutations_for_remaining_students\n\n    return total_ways\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction = 4 / 7\n\n    total_apples = sold_apples / fraction\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the time formats for Singapore and London\n    fmt = '%d-%m-%Y %H:%M'\n\n    # Define the departure time in Singapore\n    sg_departure_str = '24-08-2023 05:00'\n    \n    # Parse the Singapore departure time into a datetime object\n    sg_departure = datetime.strptime(sg_departure_str, fmt)\n\n    # Define the London arrival time\n    lon_arrival_str = '24-08-2023 11:00'\n\n    # Parse the London arrival time into a datetime object\n    lon_arrival = datetime.strptime(lon_arrival_str, fmt)\n\n    # Convert London time to Singapore time by adding the time difference\n    sg_arrival = lon_arrival + timedelta(hours=7)\n\n    # Calculate the flight duration\n    flight_duration = sg_arrival - sg_departure\n\n    # Get the total flight duration in hours\n    total_hours = flight_duration.total_seconds() / 3600\n\n    return total_hours\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    total_pupils = 40\n    total_pencils = total_pupils * 35\n    boys_pencils_avg = 20\n    girls_pencils_avg = 60\n    girls_pencils = total_pencils - (boys_pencils_avg * total_pupils)\n    girls = girls_pencils // (girls_pencils_avg - boys_pencils_avg)\n    boys = total_pupils - girls\n    return boys\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    # Probability of Sally winning a game is 0.3\n    win_probability = 0.3\n    # Probability of Sally drawing a game is 0.1\n    draw_probability = 0.1\n    # Probability of Sally losing a game is 1 - win_probability - draw_probability\n    lose_probability = 1 - win_probability - draw_probability\n    \n    # Probability of Sally winning exactly one of the two games:\n    # This can occur in two ways: Sally wins the first and loses the second OR\n    # Sally loses the first and wins the second.\n    # We use the probability multiplication rule since the games are independent events.\n\n    # Case 1: Sally wins the first game and loses the second game.\n    # Case 2: Sally loses the first game and wins the second game.\n\n    # Probability for Case 1 and Case 2 will be the same as the games are independent.\n    prob_case1 = win_probability * lose_probability\n    prob_case2 = lose_probability * win_probability\n\n    # The total probability of Sally winning exactly one game is the sum of the two cases.\n    total_probability = prob_case1 + prob_case2\n\n    return total_probability\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    for lollipops in range(32, 1000, 4):  # Start at 32 and step by 4 as a multiple of 4 plus 32 leftover\n        if (lollipops - 3) % 7 == 0:       # Check if when put in 7 per box, 3 are left in the last box\n            return lollipops                # If conditions are satisfied, return the number of lollipops\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    from math import gcd\n    \n    # Find the difference between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n    \n    # GCD of differences will be the D\n    D = gcd(gcd(diff1, diff2), diff3)\n\n    # R will be the remainder when any of them is divided by D\n    R = 2010 % D\n\n    # Return the sum of D and R\n    return D + R\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    # Since 1/13 is a recurring decimal, find the repeating cycle.\n    # 1/13 = 0.076923076923... and the cycle length is 6.\n    cycle = \"076923\"\n\n    # The 2012th decimal place would be in the 2012 % 6 = 2nd place of the cycle\n    position = 2012 % 6\n\n    # Since the indexing for the string is zero-based, we subtract 1 from the position\n    return int(cycle[position - 1])\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for number in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if (number // 10 + number % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    def custom_operation(a, b):\n        return a * 3 + b * 4\n    \n    ans = custom_operation(4, 7)\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    equation1 = Eq(eddi/wiya, 8/7)\n    equation2 = Eq((eddi - 4)/(wiya + 4), 18/17)\n\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    return solutions[eddi]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    red_marbles = (5 / 6) * blue_marbles\n    green_marbles = red_marbles / 2\n\n    total_marbles = blue_marbles + red_marbles + green_marbles\n\n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    num = (2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)\n    den = (2017 + 1/3 - 2016.875) * 17\n    result = (num / den) * (3 + 23/32)\n    return result\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let x be the number of students in Class B\n    # Then, Class A has x + 47 students\n    # If y students are moved from Class A to Class B, then:\n    # Class A will have (x + 47 - y) students\n    # Class B will have (x + y) students\n    # We want Class A to have 9 more students than Class B, so:\n    # (x + 47 - y) = (x + y) + 9\n    # Solving for y gives us the number of students to move from Class A to Class B\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(x + 47 - y, x + y + 9)\n    solutions = solve((equation), (y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n\n    piece3 = total_length - piece1 - piece2\n\n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 31):\n        for B in range(1, 31 - A):\n            C = 31 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    ans = 5.221 + 5.8\n    return ans\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    total_baskets = 7\n    \n    return footballs_per_basket * total_baskets\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost = 25000\n    selling_price = cost * (120 / 100)\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Let the two numbers be x (smaller) and y (larger)\n    # The system of equations is:\n    # y - x = 57 (difference between two numbers)\n    # x + y = 77 (sum of the numbers)\n    # We can solve for x first by adding the two equations\n    # (y - x) + (x + y) = 57 + 77\n    # Simplifying gives us:\n    # 2y = 134\n    # Therefore:\n    y = 134 / 2\n    # Now we can find x by substituting the value of y in either of the original equations:\n    # x + y = 77\n    # x = 77 - y\n    x = 77 - y\n\n    return x\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    # Speeds of rabbit and turtle in meters per minute\n    speed_rabbit = 330\n    speed_turtle = 30\n    \n    # Rabbit runs for 10 minutes before sleeping\n    rabbit_distance_before_sleep = speed_rabbit * 10\n    \n    # Time in minutes for the turtle to finish the race\n    time_turtle_finish = 6990 / speed_turtle\n    \n    # Time in minutes for the rabbit to finish the race without sleeping\n    time_rabbit_no_sleep = 6990 / speed_rabbit\n    \n    # Total time the rabbit actually took (including sleeping)\n    time_rabbit = 10 + 215 + (6990 - rabbit_distance_before_sleep) / speed_rabbit\n    \n    # Check who finished first\n    if time_turtle_finish < time_rabbit:\n        # Turtle finished first, calculate the distance rabbit is behind when turtle finished\n        rabbit_distance_when_turtle_finish = rabbit_distance_before_sleep + speed_rabbit * (time_turtle_finish - 10 - 215)\n        distance_between = 6990 - rabbit_distance_when_turtle_finish\n        winner = \"turtle\"\n    else:\n        # Rabbit finished first, calculate the distance turtle is behind when rabbit finished\n        turtle_distance_when_rabbit_finish = speed_turtle * time_rabbit\n        distance_between = 6990 - turtle_distance_when_rabbit_finish\n        winner = \"rabbit\"\n    \n    return (winner, distance_between)\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, adults, girls = symbols('boys adults girls')\n    total_people = 480\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + adults + girls, total_people)\n\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    return solutions[girls]\n  \nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    count = 0\n    for i in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # 3-digit odd number's hundreds place (1-9, odd only)\n        for j in range(0, 10):  # tens place (0-9)\n            for k in range(0, 10, 2):  # ones place (0-9, even only to ensure odd number)\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_cost_pence = total_cost_pounds * 100  # Convert pounds to pence\n    total_avocados = total_pairs * 2  # Each pair consists of two avocados\n\n    cost_per_avocado = total_cost_pence / total_avocados\n\n    return cost_per_avocado\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    max_probability = 0\n    likeliest_score = 0\n    outcomes = {i:0 for i in range(2,13)}\n    \n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            outcomes[die1 + die2] += 1\n            \n    total_outcomes = sum(outcomes.values())\n    \n    for score, frequency in outcomes.items():\n        probability = frequency / total_outcomes\n        if probability > max_probability:\n            max_probability = probability\n            likeliest_score = score\n    \n    return likeliest_score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    # Let x represent the number of girls\n    # Let y represent the number of boys\n\n    # Total students is the sum of boys and girls\n    total_students = 36\n\n    # Given class average\n    class_average = 89\n\n    # Girls' average\n    girls_average = 88\n\n    # Boys' average\n    boys_average = 91\n\n    # Total score is total students times the class average\n    total_score = total_students * class_average\n\n    # x * girls_average + (total_students - x) * boys_average = total_score\n    # 88x + 91(36 - x) = 89 * 36\n    # 88x + 91*36 - 91x = 89 * 36\n    # -3x + 91*36 = 89*36\n    # -3x = 89*36 - 91*36\n    # x = (89*36 - 91*36) / -3\n\n    x = (class_average * total_students - boys_average * total_students) / (girls_average - boys_average)\n\n    return int(x)\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rhinos, deer, ostriches = symbols('rhinos deer ostriches')\n\n    # Since the number of rhinos is equal to the number of deer, we only need one variable for them\n    equation1 = Eq(rhinos, deer)\n    equation2 = Eq(rhinos + deer + ostriches, 28) # total heads\n    equation3 = Eq(4 * (rhinos + deer) + 2 * ostriches, 88) # total legs\n\n    solutions = solve((equation1, equation2, equation3), (rhinos, deer, ostriches))\n\n    return solutions[rhinos]\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_table = 12\n    tables = 8\n\n    # Four people sit at each corner of the square table, so they will be counted multiple times \n    # if we simply multiply people_per_table by tables. We need to subtract the overlap (3 per \n    # table since the first table doesn't share a corner with a previous table) for all but the \n    # first table.\n\n    max_people = (people_per_table * tables) - (3 * (tables - 1))\n    \n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n    equation1 = Eq(xavier, 3 * andrew)\n    equation2 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)\n\n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n    \n    # since only jeffery and boris marbles count is asked, we sum those two\n    ans = solutions[boris] + solutions[jeffery]\n    \n    return ans\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    ans = 9786 // 7\n    return ans\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    digits_per_page = 1\n    pages = 0\n    digits_counted = 0\n\n    while digits_counted < 339:\n        pages += 1\n        digits_counted += digits_per_page\n        if pages >= 10**(digits_per_page):\n            digits_per_page += 1\n\n    return pages\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "from sympy import divisors, isprime\n\ndef solution():\n    count = 0\n    i = 15\n    while True:\n        div = divisors(i)\n        if len(div) == 15:\n            count += 1\n        elif len(div) > 15:\n            break\n        i += 15\n    return count\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15', '%H:%M')\n    travel_duration = timedelta(hours=3, minutes=50)\n    \n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Compute the ones digit of each expression separately\n    ones_digit_32_33 = (32 ** 33) % 10\n    ones_digit_22_29 = (22 ** 29) % 10\n\n    # Compute the ones digit of the subtraction\n    result = (ones_digit_32_33 - ones_digit_22_29) % 10\n\n    return result\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    diff = 52\n    people_count = 0\n\n    # Start with a square size of at least 2x2 to ensure there is an inner layer.\n    n = 3\n    while True:\n        students = n * n - (n - 2) * (n - 2)\n        teachers = (n - 2) * (n - 2)\n        if students - teachers == diff:\n            people_count = students + teachers\n            break\n        n += 2\n\n    return people_count\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100):  # A is a 2-digit number\n        for B in range(1000, 10000):  # B is a 4-digit number\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_diff = max(max_diff, B - A)\n    return max_diff\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    \n    return comb(total_players, players_needed)\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Original condition\n    equation1 = Eq(apples, (5/7) * oranges)\n    # After buying 12 more oranges\n    equation2 = Eq(apples, (2/3) * (oranges + 12))\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # Using the property of exponents, here's how the equation breaks down step-by-step:\n    # 8 * 80 * 100 = 8 * (8 * 10) * (10 * 10) = 8^2 * 10^2\n    # So the boxed number is 10^2 which is 100\n    ans = 10**2\n    return ans\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    from sympy import symbols, Rational, Eq, solve\n\n    # Declare the symbols\n    x, y, z = symbols('x y z')\n\n    # Define the equation as per the given complex fraction form\n    equation = Eq(2014/37, 54 + 1/(x + 1/(y + 1/z)))\n\n    # Simplify the right-hand side to match the left-hand side\n    rhs_simplified = equation.rhs.simplify()\n\n    # Since the equation is supposed to be equal, both sides should be a Rational object with the same numerator and denominator\n    # So, we create equations for x, y, and z using the numerator and the denominator of the rhs_simplified\n    equation_numerator = Eq(rhs_simplified.numerator, 2014 - 54 * 37)\n    equation_denominator = Eq(rhs_simplified.denominator, 37)\n\n    # Solve the equations for x, y, and z\n    solutions = solve((equation_numerator, equation_denominator), (x, y, z), dict=True)\n\n    # Calculate the sum of x, y, and z from the obtained solutions\n    sum_xyz = 0\n    for solution in solutions:\n        # Since x, y, z are distinct integers, we can check if the solution satisfies this condition\n        if len(set(solution.values())) == 3:\n            sum_xyz = sum(solution.values())\n\n    return sum_xyz\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    total_counts = 30\n    ending_position = 10\n    clock_numbers = 12\n\n    # The position Eddie starts counting from is (ending_position - total_counts) mod clock_numbers\n    starting_position = (ending_position - total_counts) % clock_numbers\n\n    # We need the starting position as a clock number, so if the modulo operation results in 0\n    # it actually means he started at 12 o'clock. Otherwise, it's the resulting number.\n    ans = starting_position if starting_position != 0 else clock_numbers\n\n    return ans\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of oil sold from each bucket\n    sold = symbols('sold')\n\n    # Equation representing the remaining oil in big bucket\n    big_bucket = 89 - sold\n    # Equation representing the remaining oil in small bucket\n    small_bucket = 45 - sold\n\n    # Equation representing the final condition after selling\n    equation = Eq(big_bucket, 12 * small_bucket)\n\n    # Solve the equation to find the amount of oil sold from each bucket\n    solution = solve(equation, sold)\n\n    # Return the amount of oil sold from each bucket\n    return int(solution[0])\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    total_jackpot = 131112\n    winners = 9\n    amount_per_person = total_jackpot // winners\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2 / 3) * snake_hibernation\n    frog_hibernation = (5 / 4) * bear_hibernation\n\n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    socks_per_alien = 5  # Each alien has 5 legs, so needs 5 socks, which is 2.5 pairs.\n    shoes_per_alien = 5  # Each alien needs 5 shoes.\n    \n    socks_cost_per_alien = (socks_per_alien / 2) * 12  # Cost of socks for one alien (since socks are sold per pair).\n    shoes_cost_per_alien = shoes_per_alien * 78  # Cost of shoes for one alien (since shoes are sold in sets of 5).\n    \n    total_aliens = 1 + 5  # The alien him/herself and 5 brothers.\n    \n    total_cost = total_aliens * (socks_cost_per_alien + shoes_cost_per_alien)  # Total cost for all aliens.\n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    num = 100\n    while True:\n        if (num % 5 == 1) and (num % 6 == 1) and (num % 7 == 1):\n            return num\n        num += 1\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    # From the given equations\n    # a + 31 = b + 26 = c + 20\n    # Let's assume a + 31 = b + 26 = c + 20 = x, where x is common to all\n    # So a = x - 31, b = x - 26, c = x - 20\n    # So, a, b, c are consecutive primes due to the nature of the equations, we can find them by simple iteration\n\n    # Initialize variables\n    a, b, c = 0, 0, 0\n    \n    # Since 31 + a - 31 = 26 + b - 26 = 20 + c - 20, they are all equal to 'x'\n    x = 31\n\n    # Now, we have to find consecutive prime numbers such that a < b < c and b = a + 5, c = b + 6\n    # We can initialize b as the smallest prime number greater than a = x - 31\n    # Initialize a to the first prime number that makes b and c also prime numbers, considering the conditions\n    from sympy import nextprime\n    \n    a = x - 31\n    b = nextprime(a)\n    while True:\n        c = nextprime(b)\n        if c - b == 6:\n            break\n        else:\n            a = b\n            b = c\n    # Now we know that a, b, c satisfy the conditions given\n\n    # Calculate the product\n    ans = a * b * c\n\n    return ans\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    # Let d be the distance between her home and the park in km\n    # Then the time taken to travel to the park is d/5 hours\n    # And the time taken to travel back home is d/4 hours\n    # Total time taken is 54 min, which is 54/60 hours\n    \n    total_time_hours = 54 / 60  # convert 54 minutes to hours\n\n    # Since total time is the sum of times taken for both trips:\n    # d/5 + d/4 = total_time_hours\n    # To solve for d, we'll find a common denominator and sum the fractions:\n    # (4d + 5d) / 20 = total_time_hours\n    # 9d / 20 = total_time_hours\n    # d = (total_time_hours * 20) / 9\n    \n    d = (total_time_hours * 20) / 9\n    return d\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    ans = sum(range(1, 31))\n    return ans\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of pies baked by Rennie and Joleen\n    rennie, joleen = symbols('rennie joleen')\n    \n    # Set up the equation based on the problem statement\n    equation = Eq((3/4) * rennie, (2/3) * joleen)\n    \n    # Joleen baked 5 more pies than Rennie\n    joleen_pies = rennie + 5\n    \n    # Use the substitution method to solve for the number of pies Rennie baked\n    rennie_pies = solve(equation.subs(joleen, joleen_pies), rennie)[0]\n    \n    # Calculate the number of pies Joleen baked\n    joleen_pies = rennie_pies + 5\n    \n    # Calculate the total number of pies they baked altogether\n    total_pies = rennie_pies + joleen_pies\n    \n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    # Let the number of boys be x\n    # Then the number of girls will be x + 8\n    # The total number of pupils is the sum of boys and girls: x + (x + 8) = 26\n    # Solving for x we get 2x + 8 = 26, then 2x = 18, so x = 9\n    boys = (total_pupils - 8) // 2\n    girls = boys + 8\n    return girls\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    both = symbols('both')\n\n    apples = 3 * both\n    bananas = 5 * both\n    students_total = 35\n\n    equation = Eq(apples + bananas - both, students_total)\n\n    solutions = solve(equation, both)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the rates of work for Lee and Nancy be L and N respectively\n    # If working together they do 1 job in 10 hrs, their combined rate is 1/10\n    # 6 * L + 20 * N = 1 (the total work done by both till the job is finished)\n    L, N = symbols('L N')\n\n    # Form equations based on given information\n    equation1 = Eq(1/10, L + N)  # Combined work for 10 hours\n    equation2 = Eq(6*L + 20*N, 1)  # Total work done when Nancy types for 20 hours and Lee for 6 hours\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (L, N))\n\n    # The time taken for Nancy to finish the job by herself is the inverse of her rate of work\n    time_for_nancy = 1 / solutions[N]\n\n    return time_for_nancy\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    used_oranges_g = 550 + 1050\n    used_oranges_kg = used_oranges_g / 1000\n    remaining_oranges_kg = total_oranges_kg - used_oranges_kg\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0 because it's the first digit of a two-digit number\n        for y in range(0, 10):  # y can be any digit\n            A = 10 * x + y\n            B = 20 * x + 2 * y\n            if B == 6 * A + 25:\n                return A\n    return None  # Return None if no solution is found, though there should be one.\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    common_difference = 3\n    num_of_days = 5\n\n    # Total number of chairs in an arithmetic progression:\n    # S_n = n/2 * (2*a + (n - 1)*d)\n    total_chairs = num_of_days / 2 * (2 * first_day_chairs + (num_of_days - 1) * common_difference)\n\n    return int(total_chairs)\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    result = 111111111 * 99999999\n    return result\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    ans = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n    return ans\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # To ensure getting 3 marbles of the same colour, \n    # Benny must take out 2 blue + 2 yellow + 3 red (1 red + 2 more)\n    # which will ensure that among the 7 marbles taken out, there will be 3 of the same color.\n    ans = 2 + 2 + 3\n    return ans\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    for n in range(100, 191):\n        if (n-3) % 4 == 0 and (n-1) % 13 == 0:\n            return n\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    current_sum_ages = 45\n    increase_in_sum_ages = 5 * 2  # Both will be 5 years older\n\n    future_sum_ages = current_sum_ages + increase_in_sum_ages\n\n    return future_sum_ages\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14  # cost in pence\n    amount_paid = 100     # amount paid in pence (£1 = 100p)\n    change = amount_paid - total_cost  # change in pence\n\n    return change / 100  # convert pence to pounds\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Sebastian (s) and Garrett (g)\n    s, g = symbols('s g')\n\n    # Equation 1: Garrett is 24 years older than Sebastian\n    equation1 = Eq(g, s + 24)\n\n    # Equation 2: In 10 years, Garrett will be thrice as old as Sebastian\n    equation2 = Eq(g + 10, 3 * (s + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, g))\n\n    # Garrett's current age\n    return solutions[g]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Originally, there were 65 fewer boys than girls\n    original_boys = girls - 65\n\n    # After 2/5 of the boys and 3/7 of the girls left\n    boys_left = original_boys - (2/5) * original_boys\n    girls_left = girls - (3/7) * girls\n\n    # Number of boys and girls remaining are equal\n    equation = Eq(boys_left, girls_left)\n\n    # Solve the equation\n    solution = solve(equation, girls)\n\n    # Total number of students that remained in the hall\n    total_students = boys_left + girls_left\n    total_students = total_students.subs(girls, solution[0])\n\n    return total_students\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_rate = 0.06\n    sales_tax_paid = 90\n\n    price_of_sofa = sales_tax_paid / sales_tax_rate\n\n    return price_of_sofa\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    people = 4\n    days = 7\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n\n    total_travel_cost = people * travel_cost_per_person\n    total_hotel_cost = people * days * hotel_cost_per_day_per_person\n    total_spending_money = people * spending_money_per_person\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n\n    total_earnings = march_earnings + april_earnings\n\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "def solution():\n    from math import factorial\n\n    # Treat each group of books as a single entity.\n    # We have 4 groups to arrange (Math, Chemistry, Physics, Biography).\n    num_groups = 4\n    # Total number of ways to arrange these 4 groups.\n    group_arrangement = factorial(num_groups)\n    \n    # Now, consider the arrangement within each group.\n    # Number of ways to arrange 4 math books.\n    math_arrangement = factorial(4)\n    # Number of ways to arrange 3 chemistry books.\n    chem_arrangement = factorial(3)\n    # Number of ways to arrange 2 physics books.\n    phys_arrangement = factorial(2)\n    # There's only 1 biology book, so one way to place it.\n    bio_arrangement = 1\n\n    # The total number of ways is the product of arrangements of all groups and within each group.\n    total_arrangements = group_arrangement * math_arrangement * chem_arrangement * phys_arrangement * bio_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"ORANGES\")\n    total_vowels = len(\"AOE\")\n    total_consonants = total_letters - total_vowels\n\n    # Number of ways to arrange all letters\n    total_arrangements = factorial(total_letters)\n\n    # Number of ways to arrange all vowels together as a single unit\n    arrangements_vowels_together = factorial(total_vowels) * factorial(total_consonants + 1)\n    \n    # Subtract arrangements where vowels are together from total arrangements\n    ans = total_arrangements - arrangements_vowels_together\n\n    return ans\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges, bananas = symbols('apples oranges bananas')\n\n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n\n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    ans = 70017007\n    return ans\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_meters = 8850\n    height_kilometres = height_meters / 1000\n    return height_kilometres\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n    \n    ways = category1 * category2 * category3\n\n    return ways\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import Eq, solve, isprime\n\n    # Assuming a, b, c are symbols representing prime numbers\n    a, b, c = 31, 26, 20\n\n    # Equations based on the given problem\n    equation1 = Eq(31 + a, 26 + b)\n    equation2 = Eq(26 + b, 20 + c)\n\n    # Solve the system of equations for a, b, c\n    solutions = solve((equation1, equation2))\n\n    a_val = solutions[a]\n    b_val = solutions[b]\n    c_val = solutions[c]\n\n    # Check if the solutions are prime numbers, required by the problem statement\n    if isprime(a_val) and isprime(b_val) and isprime(c_val):\n        return a_val * b_val * c_val\n    else:\n        return None\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    perimeter = 12\n    count = 0\n    for a in range(1, perimeter // 2 + 1):\n        for b in range(a, (perimeter - a) // 2 + 1):\n            c = perimeter - a - b\n            # the longest side needs to be less than the sum of the other two\n            if c >= b and a + b > c:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n    \n    # Total number of people\n    n_people = 6\n    # Since the table rotation doesn't change the order, we fix one person's position\n    # and arrange the remaining people.\n    # Hence we arrange (n_people - 1)! ways\n    \n    ans = factorial(n_people - 1)\n    return ans\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    # Let the original number of boys (and girls) be x.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    eq = Eq((x + 12), 2 * (x - 8))\n    solution = solve(eq, x)\n\n    # Return the total number of students at first (boys + girls)\n    return solution[0] * 2\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene_initial, melvin_initial, david_initial = symbols('eugene_initial melvin_initial david_initial')\n    eugene_final, melvin_final, david_final = symbols('eugene_final melvin_final david_final')\n    \n    # Equation 1: Initial total stickers\n    eq1 = Eq(eugene_initial + melvin_initial + david_initial, 260)\n    \n    # Eugene gave Melvin twice as many stickers as Melvin had\n    eugene_after_giving = eugene_initial - 2*melvin_initial\n    melvin_after_receiving = melvin_initial + 2*melvin_initial\n    \n    # Melvin gave David as many stickers as David had\n    melvin_after_giving = melvin_after_receiving - david_initial\n    david_after_receiving = david_initial + david_initial\n    \n    # David gave Eugene as many stickers as Eugene had left\n    david_after_giving = david_after_receiving - eugene_after_giving\n    eugene_final = eugene_after_giving + eugene_after_giving\n    melvin_final = melvin_after_giving\n    david_final = david_after_giving\n    \n    # Equation 2: Ratio of final stickers 46:12:7\n    eq2 = Eq(eugene_final, 46)\n    eq3 = Eq(melvin_final, 12)\n    eq4 = Eq(david_final, 7)\n    \n    # Equation 3: Total stickers based on ratio\n    eq5 = Eq(eugene_final + melvin_final + david_final, 46 + 12 + 7)\n    \n    # Solve the system of equations\n    stickers_counts = solve((eq1, eq2, eq3, eq4, eq5), (eugene_initial, melvin_initial, david_initial))\n\n    return stickers_counts[eugene_initial]\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term + 1)\n    \n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    sum = 0\n    for i in range(80, 55, -2):\n        sum = sum - (i - 1) + i\n    return sum\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Calculate the time for each stage of the race\n    time_first_stage = 280 / 7  # Distance divided by speed\n    time_middle_stage = 400 / 5\n    time_last_stage = (800 - 280 - 400) / 8\n\n    # Sum of the times of all stages\n    total_time = time_first_stage + time_middle_stage + time_last_stage\n\n    return total_time\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # Define the matches in both piles\n    pile_a = 35\n    pile_b = 24\n\n    # The number of matches to leave in order to have a winning strategy\n    # is the XOR of the pile sizes. If the result of XOR is 0, then the player\n    # about to play is in a losing position assuming both players play optimally.\n    xor_result = pile_a ^ pile_b\n\n    if xor_result == 0:\n        # Eddie can't force a win, Wei'er has the winning strategy\n        winner = \"Wei'er\"\n        winning_strategy = \"No winning strategy for Eddie\"\n    else:\n        # Eddie can force a win, the winning strategy is to make the piles equal\n        # by taking matches from the larger pile so that the XOR of their sizes becomes 0.\n        winner = \"Eddie\"\n        # Find the number of matches needed to take from the larger pile\n        if pile_a > pile_b:\n            matches_to_take = pile_a - pile_b\n            winning_strategy = f'Take {matches_to_take} matches from pile A.'\n        else:\n            matches_to_take = pile_b - pile_a\n            winning_strategy = f'Take {matches_to_take} matches from pile B.'\n\n    return winner, winning_strategy\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    result = 21 * (2 / 7)\n    return result\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 5, 7]\n    all_possible_numbers = set(permutations(digits, 3)) # We use a set to avoid duplicates\n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(2, 25 // 2 + 1):\n        if isprime(i) and isprime(25 - i):\n            return i * (25 - i)\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    import math\n    length_ribbon_1 = 15\n    length_ribbon_2 = 45\n    ans = math.gcd(length_ribbon_1, length_ribbon_2)\n    return ans\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_hour = 6\n    start_minute = 52\n    end_hour = 8\n    end_minute = 24\n\n    total_start_minutes = start_hour * 60 + start_minute\n    total_end_minutes = end_hour * 60 + end_minute\n\n    ans = total_end_minutes - total_start_minutes\n    return ans\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12*12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lampposts = 50\n    distance_between = 2\n\n    # The road length is one less interval than the number of lamp posts\n    # because the first lamp post is at the beginning of the road.\n    road_length = (num_lampposts - 1) * distance_between\n\n    return road_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n\n    # Applying the Pigeonhole Principle\n    # minimum_peaches = ceil(total_peaches / total_students)\n    min_peaches, remainder = divmod(total_peaches, total_students)\n    if remainder > 0:\n        min_peaches += 1\n\n    return min_peaches\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    return (18 + 52) / 2\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    first_page = 15\n    last_page = 40\n\n    num_pages = last_page - first_page + 1\n\n    return num_pages\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Since they are consecutive numbers and there are 7 of them,\n    # we can denote them as x, x+1, x+2, x+3, x+4, x+5, x+6\n    # Their sum is 7x + (1+2+3+4+5+6) = 7x + 21\n    # We are given their sum is 140, so we create an equation and solve for x:\n    # 7x + 21 = 140\n    # 7x = 140 - 21\n    # 7x = 119\n    # x = 119/7\n    # x = 17\n    # The smallest number is x, which is the first in the sequence of consecutive whole numbers.\n    x = (140 - 21) // 7\n    return x\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    result = (2/9) * 36\n    return result\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of chocolate, vanilla, and blueberry cupcakes\n    choco, vanilla, blueberry = symbols('choco vanilla blueberry')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(choco, vanilla + 72)  # 72 more chocolate cupcakes than vanilla\n    equation2 = Eq(blueberry, vanilla - 36)  # 36 lesser blueberry cupcakes than vanilla\n    equation3 = Eq(choco - choco/6 + vanilla - 2*vanilla/3 + blueberry - 7*blueberry/9, 427)  # After selling certain fractions\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (choco, vanilla, blueberry))\n\n    # Calculate the number of chocolate cupcakes sold\n    chocolate_sold = solutions[choco] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (3, 9)]\n    least_number_of_children = solve_congruence(*congruences)[0]\n    return least_number_of_children\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_cards_cost = 10 * 45  # Cost of 10 post cards in pence\n    stamps_cost = 10 * 27      # Cost of 10 second class stamps in pence\n    total_cost_pence = post_cards_cost + stamps_cost  # Total cost in pence\n    \n    note_value_pence = 1000  # £10 note in pence\n    \n    change_pence = note_value_pence - total_cost_pence  # Change in pence\n    change_pounds = change_pence / 100  # Change in pounds\n\n    return change_pounds\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # There are initially 3! ways to seat Chantel, Tony and Cale around the table\n    # if Claire's seat is fixed.\n    initial_ways = 3 * 2 * 1  # 3!\n    \n    # However, we must subtract the cases where Tony sits face to face with Claire.\n    # If Claire's seat is fixed, there's only one way Tony can sit face to face with her.\n    # The remaining two (Chantel and Cale) can sit in 2! ways.\n    forbidden_ways = 2 * 1  # 2!\n    \n    # The total number of ways they can sit is the initial number of ways minus the forbidden ones.\n    ans = initial_ways - forbidden_ways\n    return ans\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank's rate of making tables per day\n    frank_rate = 180 / 10\n    \n    # Ryan's rate of making tables per day\n    ryan_rate = 180 / 15\n\n    # Difference in number of tables made by Frank and Ryan in 1 day\n    difference = frank_rate - ryan_rate\n\n    return difference\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of questions be x\n    # Let the actual time Miss Atkinson had for marking be t minutes\n\n    x, t = symbols('x t')\n\n    # If Miss Atkinson marked 4 questions per minute and was 5 minutes late, we have:\n    # (x / 4) - t = 5\n\n    # If Miss Atkinson marked 6 questions per minute and was 5 minutes early, we have:\n    # (x / 6) - t = -5\n\n    # Set up the equations\n    equation1 = Eq((x / 4) - t, 5)\n    equation2 = Eq((x / 6) - t, -5)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (x, t))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    rounded_mass = 7.4\n    smallest_possible_mass = rounded_mass - 0.05\n    return smallest_possible_mass\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    # Loop through all the possible sequences of 5 consecutive 2-digit numbers\n    for i in range(10, 96): \n        # Get the sequence of 5 consecutive numbers starting with i\n        seq = [i, i+1, i+2, i+3, i+4]\n        \n        # Check all combinations of 3 numbers\n        for j in range(5):\n            for k in range(j+1, 5):\n                for l in range(k+1, 5):\n                    # Check the divisibility condition for the sum of 3 numbers by 37 and 60\n                    if sum([seq[j], seq[k], seq[l]]) % 37 == 0:\n                        for m in range(5):\n                            for n in range(m+1, 5):\n                                for o in range(n+1, 5):\n                                    # Make sure we are not considering the same set of indices\n                                    if len(set([j, k, l, m, n, o])) == 5:\n                                        if sum([seq[m], seq[n], seq[o]]) % 60 == 0:\n                                            # Return the largest number in the sequence\n                                            return seq[4]  \n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    wrong_mark = -2\n    total_marks = 79\n\n    # Assume all answers are correct, calculate the marks obtained\n    max_marks = total_questions * correct_mark\n\n    # Calculate the marks lost due to wrong answers\n    # Each wrong answer loses (5 + 2) marks because we lose the 5 marks for the question and get 2 marks deducted\n    marks_lost_per_wrong = correct_mark + abs(wrong_mark)\n\n    # Calculate the number of wrong answers by comparing max_marks with total_marks\n    wrong_answers = (max_marks - total_marks) / marks_lost_per_wrong\n    correct_answers = total_questions - wrong_answers\n    \n    return int(correct_answers)\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    price_per_cake = 0.75     # 75 pence converted to pounds\n\n    # Calculate number of cakes sold\n    num_cakes_sold = total_money_raised / price_per_cake\n\n    return int(num_cakes_sold)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = (3/7) * total_money\n    remainder_after_restaurant = total_money - spent_at_restaurant\n    spent_on_fees = (2/9) * remainder_after_restaurant\n    money_left = remainder_after_restaurant - spent_on_fees\n\n    return money_left\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    # Total candies Amy and Emma have\n    total_candies = 24 + 10\n    # Divide the total candies by 2 to distribute them equally\n    candies_each = total_candies // 2\n    # Amy needs to give the difference between what she has and the equal share\n    candies_to_give = 24 - candies_each\n    \n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution('x', 'y')"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # Since the clock chimes thrice in 6 seconds, each chime takes 2 seconds\n    # (including the time between the chimes).\n    # To find the time needed for one chime, we calculate the time between chimes:\n    # The time interval between the first and the third chime is 4 seconds (6s for three chimes minus 2s for the first chime).\n    # Therefore, there are 2 gaps between the three chimes, so each gap is 2 seconds.\n    one_chime_time = 2\n\n    # The clock chimes 6 times at 6 pm. \n    # There will be 5 gaps (time intervals) between these 6 chimes.\n    # The total time for 6 chimes will include the time for 5 intervals. \n    total_time_for_6_chimes = (6 - 1) * one_chime_time\n\n    return total_time_for_6_chimes\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # P's work rate per hour\n    p_work_rate_per_day = 1 / 12\n    p_work_hours_per_day = 8\n    p_work_rate_per_hour = p_work_rate_per_day / p_work_hours_per_day\n    \n    # Q's work rate per hour\n    q_work_rate_per_day = 1 / 8\n    q_work_hours_per_day = 10\n    q_work_rate_per_hour = q_work_rate_per_day / q_work_hours_per_day\n    \n    # Combined work rate per hour when P and Q work together for 8 hours per day\n    combined_work_rate_per_hour = p_work_rate_per_hour + (q_work_rate_per_hour * (8 / q_work_hours_per_day))\n    \n    # Total hours required to complete the job when P and Q work together\n    total_hours_to_complete = 1 / combined_work_rate_per_hour\n    \n    # Since they work 8 hours a day, divide the total hours by 8 to get the number of days\n    days_to_complete = total_hours_to_complete / 8\n    \n    # Round up since we need whole days\n    whole_days_to_complete = -(-days_to_complete // 1) # Ceiling division\n    \n    return int(whole_days_to_complete)\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    # Convert meters to centimeters\n    meters_in_cm = 3.2 * 100\n    \n    # Calculate the difference in centimeters\n    diff_in_cm = meters_in_cm - 30\n    \n    return diff_in_cm\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    # Given formula for the sum of squares of first n natural numbers: n(n + 1)(2n + 1) / 6\n    n = 10  # Since we are considering squares of 1^2 to 10^2 multiplied by 3\n    sum_of_squares = n * (n + 1) * (2 * n + 1) / 6\n\n    # Pip's answer multiplies the above formula by 3\n    ans = 3 * sum_of_squares\n\n    return int(ans)\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 41):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56  # in pence\n    total_kg = 5\n    total_cost = cost_per_kg * total_kg  # total cost in pence\n\n    pounds_paid = 10\n    pence_paid = pounds_paid * 100  # converting pounds to pence\n\n    change = pence_paid - total_cost  # change in pence\n\n    return change / 100  # converting pence back to pounds for the final answer\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    number = 120\n    factors_count = 1\n    prime_factor = 2\n    while number > 1:\n        if number % prime_factor == 0:\n            exp = 0\n            while number % prime_factor == 0:\n                exp += 1\n                number //= prime_factor\n            factors_count *= (exp + 1)\n        prime_factor += 1\n    return factors_count\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    from math import sqrt\n\n    target = 180\n    min_diff = float('inf')\n\n    for i in range(1, int(sqrt(target)) + 1):\n        if target % i == 0:\n            factor_pair = (i, target // i)\n            diff = abs(factor_pair[0] - factor_pair[1])\n            min_diff = min(min_diff, diff)\n\n    return min_diff\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temp = -8\n    midday_temp = 13\n\n    overall_change = midday_temp - midnight_temp\n\n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for number in range(6, 15):\n        if number % 3 == 0 and 27 % number == 0:\n            return number\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "import math\n\ndef solution():\n    gcf = math.gcd(16, 36)\n    return gcf\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Construct the equation\n    equation = Eq(12*x - 2*(5+x), 20)\n    \n    # Solve the equation\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_weight_durian = 3 * 2.6\n    total_weight_watermelon = 5 * 9.24\n    total_weight = total_weight_durian + total_weight_watermelon\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let's denote the time taken by Max to cover the distance as t (in minutes).\n    t = symbols('t')\n\n    # We know the ratio of speeds of Luca to Max is 2:3, so the ratio of times will be the inverse, i.e. 3:2.\n    # Therefore, Luca takes 3/2 times as much time as Max to walk the same distance.\n    luca_time = 3/2 * t\n\n    # Luca takes 10 more minutes than Max, so we set up the equation: 3/2 * t = t + 10.\n    equation = luca_time - t - 10\n\n    # Solve the equation to find the time taken by Max.\n    max_time = solve(equation, t)[0]\n\n    # The time it would take for Luca to cover the distance at double his usual speed\n    # which means half the time since speed and time are inversely proportional.\n    luca_double_speed_time = luca_time.subs(t, max_time) / 2\n\n    return luca_double_speed_time\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    difference = 1000000 - number\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let x be the original number of pens and pencils.\n    # After giving away 5 pencils, she has x - 5 pencils left.\n    # The remaining number of pens is twice the remaining pencils: 2 * (x - 5).\n    # According to the question, she still has the same number of pens as before giving pencils away.\n    # Therefore, number of pens is still x.\n    # After buying 18 more pens, the total number of pens becomes x + 18.\n    # Now we can set up the equation based on the above conditions:\n    # x = 2 * (x - 5)\n    # Solving for x gives us the original number of pens and pencils.\n\n    # Solve the equation\n    x = (2 * 5) / (2 - 1)\n    \n    # Calculate the final number of pens after buying 18 more\n    final_pens = x + 18\n    \n    return final_pens\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Time spent jogging: From 6:30 AM to 7:30 AM (1 hour)\n    time_jogging = 1  # in hours\n    \n    # Speed while jogging\n    speed_jogging = 6.5  # in miles per hour\n    \n    # Time spent walking: From 7:30 AM to 9:30 AM (2 hours)\n    time_walking = 2  # in hours\n    \n    # Speed while walking\n    speed_walking = 4.5  # in miles per hour\n    \n    # Distance jogging = speed * time\n    distance_jogging = speed_jogging * time_jogging\n    \n    # Distance walking = speed * time\n    distance_walking = speed_walking * time_walking\n    \n    # Total distance = distance jogging + distance walking\n    total_distance = distance_jogging + distance_walking\n    \n    return total_distance\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # According to pigeonhole principle, if we have 4 patterns (A, 2, ..., K) and we want to ensure we have at least one \"A\",\n    # we must consider the worst case where we draw all other patterns first. \n    # There are 12 cards in each pattern that are not \"A\".\n\n    cards_per_pattern_except_A = 12\n    patterns = 4\n\n    # If we draw all non-A cards from all patterns, the next card must be an \"A\".\n    min_draws_to_get_A = (cards_per_pattern_except_A * patterns) + 1\n\n    return min_draws_to_get_A\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 7\n    distance = 320\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # Let x be the number of correct answers and y be the number of wrong answers.\n    # According to the problem, we have two equations:\n    # 1. x + y = 40 (total number of questions)\n    # 2. 2x - y = 71 (Tom's score: 2 marks for each correct and -1 for each wrong)\n    \n    # We can solve for x and y using these two equations:\n    # Adding both equations we get:\n    # 3x = 111\n    # Dividing both sides by 3 we get x:\n    x = 111 // 3\n    \n    # Using the value of x to find y using the first equation:\n    y = 40 - x\n    \n    # Tom's friend, Jimmy, said he is incorrect. Let's check Tom's calculation:\n    # According to Tom's calculation method:\n    tom_wrong_answers = 9  # From Tom's method\n    tom_correct_answers = 31  # From Tom's method\n    \n    # Let's check if Tom's method yields the correct total score:\n    tom_score = 2 * tom_correct_answers - tom_wrong_answers\n    \n    # If Tom's calculated score is not equal to the actual score (71), then his calculation is incorrect.\n    if tom_score != 71:\n        # Tom is incorrect, return the correct number of wrong answers.\n        return y\n    else:\n        # If Tom's score matches, then he was correct, but the question states he is incorrect.\n        # Therefore, regardless, we need to find his mistake, which is in the calculation.\n        # Since the score is correct, it means Tom's method reached the right answer with wrong reasoning.\n        return tom_wrong_answers, y  # Return Tom's wrong answer count and the actual wrong answer count.\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for i in range(1, 226):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n\n    books_per_pile = total_books // piles\n\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cut_length = 45 * 2\n    remaining_length = total_length - cut_length\n    length_of_each_piece = 40\n\n    num_pieces = remaining_length // length_of_each_piece\n\n    return num_pieces\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    \n    # Since 1/10th of left handed students play tennis\n    total_left_handed = left_handed_tennis_players * 10\n    \n    # Given that 25% (which is a quarter) of the girls are left handed\n    total_students = total_left_handed * 4\n    \n    return total_students\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram = 80 / 20  # Number of cookies that can be made with one gram of butter\n    grams_needed = 100 / cookies_per_gram  # Grams of butter needed to make 100 cookies\n    return grams_needed\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime('10:35 AM', '%I:%M %p')\n    travel_time = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_time\n    return arrival_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    count_each_position = 3 # Each digit (6, 7, or 8) can be used in each position.\n    # There are 3 positions in a three-digit number.\n    total_combinations = count_each_position ** 3\n    \n    return total_combinations\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    # Counting\n    total_zeros = 0\n    number = 1\n\n    # Loop until 100 zeros are counted\n    while total_zeros < 100:\n        # Each time a \"0\" appears in the number string, increase count\n        total_zeros += str(number).count('0')\n        \n        # If total_zeros exceeds 100 during counting the zeros in a number\n        # we found the number which contains the 100th zero\n        if total_zeros >= 100:\n            break\n        \n        # Go to the next number\n        number += 1\n\n    return number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # in liters\n    juice_drank_per_week = 9  # in liters\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drank_per_week\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    time = 10\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    bud, pip, tom = symbols('bud pip tom')\n\n    # Formulate equations\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    # Solve equations\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed1 = 180  # meters per minute\n    time1 = 6  # minutes\n    speed2 = 120  # meters per minute\n    time2 = 8  # minutes\n\n    distance1 = speed1 * time1\n    distance2 = speed2 * time2\n\n    total_distance = distance1 + distance2\n\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Given the sum S of n consecutive numbers where n=8, and S=2012:\n    n = 8\n    S = 2012\n\n    # The formula for the sum of an arithmetic sequence is S = n/2 * (first_term + last_term)\n    # We also know that because the numbers are consecutive, the difference between terms is 1\n    # and last_term = first_term + n - 1\n    # Hence, we can replace last_term in the sum formula to get S = n/2 * (2*first_term + n - 1)\n    # Solving for first_term gives us first_term = (S/n - (n - 1)/2)\n\n    first_term = (S/n) - (n - 1)/2\n\n    # Since we want the last term (which is the largest) and last_term = first_term + n - 1, we get:\n    last_term = first_term + n - 1\n\n    # We return the last_term as our answer\n    return int(last_term)\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    \n    neither_red_nor_blue_cars = total_cars - (red_cars + blue_cars)\n\n    return int(neither_red_nor_blue_cars)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    elias_position_from_front = 25 + 1  # Elias is directly behind Danya, so add 1 to Elias's position\n    danya_position_from_back = 14\n    total_people = elias_position_from_front + danya_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    percentage = (42 / 35) * 100\n    return percentage\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of students in both classes\n    A, B = symbols('A B')\n    \n    # Ratio of students in A to B before the transfer\n    equation1 = Eq(A, 5/7 * B)\n    \n    # Ratio of students in A to B after transferring 3 students from B to A\n    equation2 = Eq(A + 3, 4/5 * (B - 3))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the initial number of bottles Faye had.\n    # She swapped 5 times.\n    # Normally, for every 3 bottles, she gets 1 new bottle.\n    # Since she got 1 more bottle than expected after 5 swaps, she must have started with 3 * 4 (number of new bottles she got) + 1 (extra bottle).\n    # Let's denote the total number of initial bottles as x.\n    # Equation: x - 3 * swaps_taken + new_bottles_received + extra_bottle = x\n    # Solving the equation for x gives us the initial number of bottles.\n\n    swaps_taken = 5\n    new_bottles_received = 4\n    extra_bottle = 1\n\n    # Calculate initial bottles using rearranged equation\n    initial_bottles = 3 * new_bottles_received + extra_bottle\n\n    return initial_bottles\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    return 52248 // 12\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let the side of the smaller square array formed by boys be 'x'.\n    # Then the number of boys is x^2.\n    # The larger square array including girls has the side 'x + 1'.\n    # Hence, the number of boys and girls together is (x + 1)^2.\n    # According to the problem, there are 17 more girls than boys. \n    # So, (x + 1)^2 = x^2 + 17\n    # Expanding the equation we get,\n    # x^2 + 2x + 1 = x^2 + 17\n    # Simplifying it we get,\n    # 2x + 1 = 17\n    # Solving for x,\n    # 2x = 17 - 1\n    # x = 16 / 2\n    x = (17 - 1) // 2\n    # Total number of boys\n    num_boys = x**2\n    return num_boys\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    # Let the distance be d km and the original speed be v km/h.\n    # Original time to travel is 6 hours (from 1 pm to 7 pm).\n    # If she travels 2 extra km/h, she will travel for 5 hours (one hour less).\n    # So, we have the equations:\n    # d = 6v   (1)\n    # d = 5(v + 2)   (2)\n    # Equating (1) and (2), we get:\n    # 6v = 5v + 10\n    # Solving for v gives us v = 10 km/h.\n    # Now we can find the distance using either equation (1) or (2):\n    # Using (1): d = 6 * 10 = 60 km\n    # The distance is 60 kilometers.\n    return 60\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_millilitres = 40 * 1000 # Conversion from litres to millilitres\n    rate_per_second = 125 # Flow rate in millilitres per second\n    time_seconds = total_millilitres / rate_per_second # Time calculation in seconds\n    \n    return time_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    digits_per_page = [(9 * (i + 1)) * (10 ** i) for i in range(3)] # Calculate the number of digits if printed up to 9, 99, 999\n    current_page = 0\n    total_digits = 0\n    \n    for i in range(3):\n        if total_digits + digits_per_page[i] < 237:\n            total_digits += digits_per_page[i]\n            current_page += 10 ** (i + 1) - 1\n        else:\n            break\n    \n    remaining_digits = 237 - total_digits\n    pages_with_remaining_digits = remaining_digits // (i + 1)\n    current_page += pages_with_remaining_digits\n    \n    return current_page\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    # Let the first term be a and the common difference be d\n    from sympy import symbols, Eq, solve\n    \n    a, d = symbols('a d')\n\n    # According to the problem description:\n    # a + 8d = a + 14d + 18 -> 6d = -18\n    eq1 = Eq(a + 8*d, a + 14*d + 18)\n    \n    # a + 19d + a + 11d = 88 -> 2a + 30d = 88\n    eq2 = Eq(a + 19*d + a + 11*d, 88)\n    \n    # Solve the two equations for a and d\n    solutions = solve((eq1, eq2), (a, d))\n    \n    # Find the 32nd term: a + 31d\n    a32 = solutions[a] + 31 * solutions[d]\n    \n    return a32\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_total = 1468\n    correct_total = 1462\n    incorrect_day_savings = 1268\n    correct_day_savings = 1082\n    \n    difference_in_savings = incorrect_day_savings - correct_day_savings\n    difference_in_averages = incorrect_total - correct_total\n    \n    number_of_days = difference_in_savings / difference_in_averages\n    return int(number_of_days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # Mr. Tung cuts the rope into 4 equal pieces, which implies 3 cuts.\n    cuts_for_4_pieces = 3\n\n    # It takes him 12 minutes to make 3 cuts\n    minutes_per_cut = 12 / cuts_for_4_pieces\n\n    # To make the rope into 12 pieces, he needs 11 cuts.\n    cuts_for_12_pieces = 11\n\n    # The total time for 11 cuts\n    total_time_for_12_pieces = minutes_per_cut * cuts_for_12_pieces\n\n    return total_time_for_12_pieces\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80  # Calculating the birth year of Lord Ownlynose\n    oak_tree_age_in_2011 = 2011 - birth_year  # Calculating the age of the oak tree in 2011\n    return oak_tree_age_in_2011\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 25\n    position_of_nth = 10\n    common_difference = 28 - 25\n\n    first_term = nth_term - (position_of_nth - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, marry, carol = symbols('lily marry carol')\n\n    equation1 = Eq(carol, marry + 2)\n    equation2 = Eq(marry, lily + 1)\n    equation3 = Eq(4 * lily * marry * carol, 2240)\n\n    solutions = solve((equation1, equation2, equation3), (lily, marry, carol))\n\n    return solutions[carol]\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Chewy's incorrect equation based on the problem statement\n    incorrect_equation = Eq(((8*x + 8) / 2) - 3 * (x + 6), x + 22)\n\n    # Correcting Chewy's equation\n    # (8x + 8) / 2 - 3 * (x + 6) should be simplified correctly\n    correct_eq_lhs = ((8*x + 8) / 2) - 3*(x + 6)\n    \n    # Solve the correct equation\n    correct_eq = Eq(correct_eq_lhs, 0)\n    ans = solve(correct_eq, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = total_flowers * 2 // 5\n    purple_flowers = total_flowers * 1 // 8\n\n    return red_flowers + purple_flowers\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n    return ans\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "from math import comb\n\ndef solution():\n    total_marbles = 10\n    num_piles = 2\n    # One pile must get at least one marble, subtract those from total before distributing the rest\n    remaining_marbles = total_marbles - num_piles\n    \n    # The problem is equivalent to the number of ways to place one divider within the remaining marbles \n    # which is equivalent to choosing num_piles - 1 dividers from remaining_marbles + num_piles - 1 positions\n    # num_piles - 1 is always 1 in this case, simplifying the formula\n    ans = comb(remaining_marbles + 1, num_piles - 1)\n    return ans\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # Constants for conversion\n    liters_per_quart = 0.946353\n    \n    # Capacity of the bottle in liters and the cup in quarts\n    bottle_capacity_liters = 2.5\n    cup_capacity_quarts = 0.5\n    \n    # Convert cup capacity to liters\n    cup_capacity_liters = cup_capacity_quarts * liters_per_quart\n    \n    # Calculate the number of cups that can be filled with the bottle of Coke\n    number_of_cups = bottle_capacity_liters / cup_capacity_liters\n    \n    # Round to nearest integer\n    return round(number_of_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # Number of red, blue, and white cars\n    red_cars = 5\n    blue_cars = 9\n    white_cars = 4\n\n    # To ensure 3 toy cars of the same color, Jeremy needs to take out:\n    # Maximum possible cars of different colors + 1\n    ans = red_cars + blue_cars + white_cars - 2  # -2 because the last two could complete a triplet of any color\n\n    return ans\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    length_cm = 85 + 147  # Sum lengths in centimeters\n    length_m = 2  # Length already in meters\n    total_length_m = length_m + (length_cm / 100)  # Convert cm to m and sum\n\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    ans = 2 + 34 / 100\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    for spiders in range(65):\n        ants = (64 - 8*spiders) / 6\n        if ants >= 0 and ants == int(ants):\n            max_ants = max(max_ants, ants)\n    return int(max_ants)\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    vivian, justin = symbols('vivian justin')\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n    \n    solutions = solve((equation1, equation2), (vivian, justin))\n    \n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    # Number of stamps Hillary has left after all transactions\n    final_stamps = 34\n\n    # Calculate the number of stamps she had initially by performing the inverse operations\n    initial_stamps = final_stamps + 2 - 11 + 14\n\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres = 7.5\n    millilitres_per_litre = 1000\n    ans = litres * millilitres_per_litre\n    return ans\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(((x - 6) * 6 + 6) / 6, 6)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let x be the height from which the ball was initially dropped\n    # After the first bounce, it reaches 3x\n    # After the second bounce, it also reaches 3x\n    # After the third bounce, it reaches (3x) / 2\n    # After the fourth bounce, it reaches (3x) / 4\n    # It is given that after the fourth bounce, it reaches a height of 36 m\n    # Therefore: (3x) / 4 = 36\n    # Solving for x gives us the initial height\n    \n    x = (36 * 4) / 3\n    return x\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 11.63)\n    equation2 = Eq(x + y / 10, 5.87)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    difference = solutions[x] - solutions[y]\n    \n    return difference * 100\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    return 2 * 9 + 200 + 9\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    amount_spent = initial_amount / 2\n    amount_left = initial_amount - amount_spent\n    return amount_left\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "from itertools import permutations\n\ndef solution():\n    for digits in permutations('012345679', 5):\n        num = int('8' + ''.join(digits))\n        if num % 3 == 0 and num % 4 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99  # cost in pence\n    cost_whole_cd = 899  # cost in pence (converted from £8.99 to 899p)\n\n    total_cost_individual_songs = 12 * cost_per_song\n\n    savings = total_cost_individual_songs - cost_whole_cd\n\n    return savings / 100  # convert the savings back to pounds\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    trays_bought = 40\n    total_eggs = eggs_per_tray * trays_bought\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        original = i\n        reversed_num = int(str(original)[::-1])\n        diff = abs(original - reversed_num)\n        results.add(diff)\n    common_difference = results.pop()  # Assuming there is a common difference\n    if all(res == common_difference for res in results):\n        return common_difference\n    else:\n        return None\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    amount_paid = 20\n    change = amount_paid - total_cost\n    return round(change, 2)  # Ensure to round to 2 decimal places\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = []\n    \n    for i in digits:\n        for j in digits:\n            if i != j:\n                two_digit_numbers.append(i + j)\n                \n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    smallest_diff = float('inf')\n    \n    from itertools import permutations\n    all_permutations = permutations('0123456789', 5)\n\n    for perm1 in all_permutations:\n        remaining = [x for x in '0123456789' if x not in perm1]\n        for perm2 in permutations(remaining, 5):\n            num1 = int(''.join(perm1))\n            num2 = int(''.join(perm2))\n            diff = abs(num1 - num2)\n            if diff < smallest_diff:\n                smallest_diff = diff\n\n    return smallest_diff\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter initially\n    eq1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    eq2 = Eq(sam - 0.20 * sam, sam * 0.80)\n\n    # Peter gave 25% of his (now increased) stickers to Sam\n    eq3 = Eq(peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam), peter + 0.20 * sam * 0.75)\n\n    # In the end, Sam had 96 more stickers than Peter\n    eq4 = Eq(sam * 0.80 + 0.25 * (peter + 0.20 * sam), peter + 0.20 * sam * 0.75 + 96)\n\n    # Solve the equations\n    solution = solve((eq1, eq4), (sam, peter))\n\n    return solution[peter]\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n            \nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time = 15  # time in seconds\n    length = 450  # length in meters\n\n    # Speed = Distance / Time\n    speed = length / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n    return factorial\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_solution = salt + water\n    concentration = (salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    # Calculate the ratio of pencil cost to pen cost\n    pencils_per_pen = pen_cost / pencil_cost\n\n    return int(pencils_per_pen)\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_and_bala = 2\n\n    total_people = people_in_front_of_ali + ali_and_bala + people_behind_bala\n\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    num_friends = 4\n    cards_sent_by_each = num_friends - 1  # Each friend sends a card to all other friends\n    total_cards_sent = num_friends * cards_sent_by_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17 + 16 - 15 + 14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for number in range(1, 829):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    num = 1\n    while True:\n        if all(num % i == 0 for i in range(1, 7)):\n            return num\n        num += 1\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    sum = 0\n    for i in range(1, 102):\n        sum += i * (i - 1)\n    return sum\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    jugs_added = 4\n\n    total_water = initial_water + (jug_capacity * jugs_added)\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    total = 400\n\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, total)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    cookies_first_period = 9 * 3\n    cookies_second_period = 15 * 2\n    cookies_third_period = 10 * 2\n    total_days = 3 + 2 + 2\n    total_cookies = cookies_first_period + cookies_second_period + cookies_third_period\n    \n    average_cookies_per_day = total_cookies / total_days\n    \n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Candy's per day work\n    candy_work_per_day = 1 / 20\n    # David's per day work\n    david_work_per_day = 1 / 25\n    \n    # Total work done by Candy in 12 days\n    total_candy_work = 12 * candy_work_per_day\n    \n    # Assume David takes x days off\n    # Days worked by David\n    david_days_worked = 12 - x\n    \n    # Total work done by David\n    total_david_work = david_days_worked * david_work_per_day\n    \n    # The whole job is equal to the work done by Candy and David\n    # Together they complete 1 job\n    job_completed = total_candy_work + total_david_work\n    \n    # We need to find x such that job_completed equals to 1\n    for x in range(13):  # David can take off between 0 to 12 days\n        total_david_work = (12 - x) * david_work_per_day\n        job_completed = total_candy_work + total_david_work\n        if job_completed == 1:\n            return x\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # According to Newton's third law, the force exerted on the book by the table (normal force)\n    # is equal in magnitude and opposite in direction to the force of the book's weight (gravitational force).\n    # Since the book's weight is given as 20N, the magnitude of the force exerted by the table on the book\n    # is also 20N, assuming no other vertical forces are acting on the book.\n    \n    force = 20  # force exerted by the table in Newtons, equal to the weight of the book\n    return force\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')\n    \n    income = 140000 \n    first_50k_tax = 0.05 * 50000\n    remaining_income_tax = (0.08 + T) * (income - 50000)\n\n    total_tax = Eq(first_50k_tax + remaining_income_tax, 15100)\n\n    result = solve(total_tax, T)\n    \n    return result[0]\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')\n    guy_age = y - 3\n    return guy_age\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols\n    total_fruits, apples, pears = symbols('total_fruits apples pears')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(apples, 4/5 * total_fruits)  # equation for the number of apples\n    equation2 = Eq(pears, 1/5 * total_fruits)   # equation for the number of pears\n\n    # After 3/4 of the fruits were removed, we have 1/4 remaining\n    remaining_fruits = 1/4 * total_fruits\n\n    # equation for the remaining apples which is 1/8 of the original\n    equation3 = Eq(apples - remaining_fruits, 7/8 * apples)\n\n    # equation for the remaining pears which is 30\n    equation4 = Eq(pears - remaining_fruits, 30)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total_fruits, apples, pears))\n\n    # Get the total number of fruits at first\n    return solutions[total_fruits]\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # If we want to ensure getting 6 balls of the same type, we consider the worst case scenario\n    # Which means taking out all the balls of the other types without getting 6 of the same.\n    # So we take out all footballs and volleyballs first (6 + 3) and one basketball to avoid getting 6 of the same.\n    # After that, the next ball we take out must result in 6 of the same type (since we already have 5 basketballs out)\n    balls_needed = 6 + 3 + 5 + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the speed v\n    v = symbols('v')\n    \n    # Given values\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h = 5.0   # height in meters \n    m = 2     # mass in kg, but will cancel out in this equation\n    \n    # Potential energy at the top equals kinetic energy at the bottom\n    # mgh = 1/2 * m * v**2\n    # m cancels out, so we solve gh = 1/2 * v**2\n    equation = Eq(g * h, 1/2 * v**2)\n\n    # Solve for the speed v\n    solutions = solve(equation, v)\n\n    # We only consider the positive solution as speed cannot be negative\n    ans = max(solutions)\n\n    return ans\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    number_of_cakes_initial = 6\n    number_of_cakes_desired = 10\n\n    time_per_cake = time_for_6_cakes / number_of_cakes_initial\n    total_time_for_10_cakes = time_per_cake * number_of_cakes_desired\n\n    return total_time_for_10_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percent = 0.15\n    tax_percent = 0.08\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    excess_when_13 = 190\n    excess_when_17 = 50\n    # Let the number of stickers be n and the number of pupils be p\n    # n = 13p + 190\n    # n = 17p + 50\n\n    # Set up the equation n - 13p = 190 and n - 17p = 50\n    # Subtract the two equations: (13p + 190) - (17p + 50) = 0\n    # 13p - 17p + (190 - 50) = 0\n    # -4p + 140 = 0\n    # 4p = 140\n    # p = 140/4\n    p = 140 // 4\n\n    # Use the value of p to compute n\n    n = 13 * p + excess_when_13\n\n    return n\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    initial_speed = 5  # m/s\n    angle = 45  # degrees\n    g = 9.81  # gravity acceleration m/s^2\n    h = 30  # height in meters\n    \n    # Splitting the initial velocity into horizontal (vx) and vertical (vy) components\n    vx = initial_speed * math.cos(math.radians(angle))\n    vy = initial_speed * math.sin(math.radians(angle))\n    \n    # Calculating the time to reach the ground using the formula:\n    # h = vy * t - 0.5 * g * t^2\n    # Here we use quadratic formula to solve for t: (-b + sqrt(b^2 - 4ac)) / (2a)\n    # In this case, a = -0.5 * g, b = vy, c = -h\n    a = -0.5 * g\n    b = vy\n    c = -h\n    \n    # Using the quadratic formula to find time t\n    disc = b**2 - 4*a*c\n    t1 = (-b + math.sqrt(disc)) / (2*a)\n    t2 = (-b - math.sqrt(disc)) / (2*a)\n    \n    # We take the positive time because time cannot be negative\n    t = max(t1, t2)\n    \n    # Velocity in vertical direction at time t (just before hitting the ground)\n    vy_final = vy - g * t\n    \n    # Speed of the arrow when it hits the ground is the magnitude of the velocity vector (vx, vy_final)\n    final_speed = math.sqrt(vx**2 + vy_final**2)\n        \n    return final_speed\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "def solution():\n    from math import comb\n    # Each child must get at least one orange, so we give one orange to each child first.\n    remaining_oranges = 13 - 3\n    \n    # We now have 10 oranges to distribute to 3 kids, which is a combinations problem\n    # with repetition. The formula to calculate this is C(n+k-1, k).\n    # where n is the number of items to choose from, and k is the number to be chosen.\n    # Here n = remaining_oranges and k = 3 - 1 (since we consider the partition).\n    ways = comb(remaining_oranges + 3 - 1, 3 - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    for num in range(10, 100000):  # Start from the smallest two-digit number\n        if sum(map(int, str(num))) == 20 and num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        S, A, M, O, G = p\n        if S == 0 or O == 0:  # Skip if leading digit is 0\n            continue\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        OGAMS = O*10000 + G*1000 + A*100 + M*10 + S\n        if SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    # Calculate the number of choices for each category\n    num_food = 2  # sandwiches or burgers\n    num_drinks = 3  # coffee, milk, or tea\n    num_desserts = 4  # cake, pudding, ice-cream, or pie\n\n    # Apply the principle of multiplication\n    ans = num_food * num_drinks * num_desserts\n\n    return ans\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    return 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28  # Calculate total water in both tanks\n    water_to_transfer = (48 - (total_water / 2))  # Calculate water to transfer from A to B for equal volumes\n    return water_to_transfer\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    # Define variables for the weights\n    elephant_weight = 2\n    cow_weight = elephant_weight * 5 / 2  # Since 2 elephants weigh as much as 5 cows\n    horse_weight = cow_weight * 4 / 3     # Since 4 cows weigh as much as 3 horses\n    pig_weight = horse_weight * 3 / 5     # Since 3 horses weigh as much as 5 pigs\n\n    # Calculate how many pigs weigh as much as 8 elephants\n    weight_of_8_elephants = 8 * elephant_weight\n    number_of_pigs = weight_of_8_elephants / pig_weight\n\n    return int(number_of_pigs)\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    principal = 2000\n    amount = 2519.42\n    years = 3\n\n    interest_rate = (amount / principal) ** (1 / years) - 1\n    return interest_rate\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.5\n    change_received = 0.40\n    total_cost = total_paid - change_received\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    price_mangoes, price_lychees = symbols('price_mangoes price_lychees')\n    \n    # Given that the price of each box of lychees is $6 less than 2 times the price of each box of mangoes\n    equation1 = Eq(price_lychees, 2 * price_mangoes - 6)\n    \n    # Total cost for mangoes and lychees\n    total_cost = 1160\n    \n    # Total cost as an equation\n    equation2 = Eq(24 * price_mangoes + 20 * price_lychees, total_cost)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (price_mangoes, price_lychees))\n    \n    return solutions[price_lychees]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    percentage = 60 / 100\n    fraction = 2 / 5\n    number = 75\n    result = percentage * fraction * number\n    return result\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percentage = 0.18\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "def solution():\n    from math import factorial\n    \n    def nPr(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    # There are 5 'slots' between dancing performances where singing performances can go, plus one at each end\n    # So in total, there are 5 + 2 = 7 'slots' for the 6 singing performances.\n    # This can be done in 7P6 ways.\n    sing_slots = nPr(7, 6)\n    \n    # There are 4 dancing performances, which can be arranged in 4! ways.\n    dance_perms = factorial(4)\n    \n    # Multiply both the singing slots and the dancing perms to get the total arrangements.\n    return sing_slots * dance_perms\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_five_boxes = 350\n    weight_per_box = total_weight_five_boxes / 5\n    total_weight_three_boxes = weight_per_box * 3\n    return total_weight_three_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # Since the comics and fictions must stay together, let's consider the group of comics as one unit and the group of fictions as another unit.\n    # We first find the number of ways to arrange the two groups on the shelf.\n    groups_arrangement = factorial(2)\n\n    # Now, we find the number of ways to arrange the comics within their group.\n    comics_arrangement = factorial(4)\n\n    # And then we find the number of ways to arrange the fictions within their group.\n    fictions_arrangement = factorial(6)\n\n    # The total arrangements is the product of the arrangements of the groups and the arrangements within each group.\n    total_arrangements = groups_arrangement * comics_arrangement * fictions_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Let x be the number of correct answers Dora got\n    # Let y be the number of correct answers Justin got\n    # Since each correct answer gives 10 points, and a wrong answer loses 5 points:\n    # The total score for Dora is 10x - 5(10 - x) and for Justin is 10y - 5(10 - y)\n    # They have 155 points together, so 10x - 5(10 - x) + 10y - 5(10 - y) = 155\n    # Justin has 15 more points than Dora, so 10y - 5(10 - y) - (10x - 5(10 - x)) = 15\n    \n    # Formulating the equations:\n    # 10x - 5(10 - x) + 10y - 5(10 - y) = 155\n    # 10y - 5(10 - y) - (10x - 5(10 - x)) = 15\n    \n    # Simplifying the equations:\n    # 10x - 50 + 5x + 10y - 50 + 5y = 155\n    # 15x + 15y = 155 + 100\n    # 15x + 15y = 255\n    \n    # 10y - 50 + 5y - 10x + 50 - 5x = 15\n    # 15y - 15x = 15\n    \n    # Dividing both sides of the first equation by 15:\n    # x + y = 17\n    \n    # Dividing both sides of the second equation by 15:\n    # y - x = 1\n    \n    # Solving the two equations together:\n    for x in range(11):\n        y = 17 - x\n        if y - x == 1:\n            return x\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n    # Total candies sold by Class A = 3 groups * 12 candies/group = 36 candies\n    total_A = 3 * 12\n    # Total groups in A and B = 3 (from A) + 4 (from B) = 7 groups\n    total_groups = 3 + 4\n    # Total candies sold on average by each group in A and B = 8 candies/group * 7 groups\n    total_avg = 8 * total_groups\n    # Total candies sold by B = (total average candies) - (total candies by A)\n    total_B = total_avg - total_A\n    \n    # Since there are 4 groups in B, we divide total candies by B by the number of groups to find the average\n    avg_B = total_B / 4\n    return avg_B\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n\n    equation1 = Eq(1 / (lee_rate + nancy_rate), 10)\n    equation2 = Eq(6 * lee_rate + 20 * nancy_rate, 1)\n\n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n\n    nancy_time = 1 / solutions[nancy_rate]\n\n    return nancy_time\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    \n    total_ratio = coffee_ratio + milk_ratio\n    \n    coffee_litre = 6\n    \n    total_litre = (coffee_litre / coffee_ratio) * total_ratio\n    \n    return total_litre\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_length = 250\n    used_length = 180\n    number_of_pieces = 10\n\n    remaining_length = total_length - used_length\n    length_per_piece = remaining_length / number_of_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_passengers = 22\n    # One third of the remaining passengers got off which left 22, so 22 is 2/3 of the passengers at that point.\n    passengers_after_first_stop = (remaining_passengers * 3) // 2\n    # Two fifths of the passengers got off at the first stop, so 3/5 remained.\n    initial_passengers = (passengers_after_first_stop * 5) // 3\n    return initial_passengers\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for i in range(20):\n        if i % 4 == 3 and i % 5 == 4:\n            return i\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    ans = 0.45 * 80\n    return ans\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    flavors = 7\n    pick = 2\n    num_combinations = comb(flavors, pick)\n    return num_combinations\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "def solution():\n    from math import gcd\n\n    # Finding the GCD of the first two numbers\n    gcd_6_9 = gcd(6, 9)\n    \n    # Finding the GCD of the previously found GCD and the third number\n    ans = gcd(gcd_6_9, 18)\n    \n    return ans\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, milk, dark = symbols('white milk dark')\n\n    # Ratio equations\n    ratio_white_to_milk = Eq(white / milk, 3 / 7)\n    ratio_milk_to_dark = Eq(milk / dark, 7 / 5)\n    ratio_white_to_dark = Eq(white / dark, 3 / 5)\n\n    # Number of chocolates difference\n    chocolates_difference = Eq(dark - white, 8)\n\n    # Solve the system of equations\n    solutions = solve((ratio_white_to_milk, ratio_milk_to_dark, ratio_white_to_dark, chocolates_difference), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_students = symbols('total_students')\n    \n    badminton_students = total_students / 4 + 3\n    remaining_students = total_students - badminton_students\n    table_tennis_students = remaining_students / 3 - 3\n    football_students = 25\n    \n    equation = Eq(badminton_students + table_tennis_students + football_students, total_students)\n    \n    solutions = solve(equation, total_students)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    total_green = 10\n    desired_probability = 1/3\n    red_balls_to_add = symbols('red_balls_to_add', integer=True)\n    \n    equation = Eq(desired_probability, total_green / (total_green + 5 + red_balls_to_add))\n    solution = solve(equation, red_balls_to_add)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    large_square_side = 6\n    small_square_side = 3\n    ans = (large_square_side // small_square_side) ** 2\n    return ans\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    result = meters * centimeters_per_meter\n    return result\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    # Avril spends 5p which is one-quarter of her money.\n    # Let x be the total amount of money Avril had initially.\n    # Then one-quarter of her money is x / 4.\n    # According to the problem, this equals 5p.\n    # So we have the equation x / 4 = 5. Solve for x.\n    x = 5 * 4  # Multiply both sides by 4 to get the initial amount.\n    return x\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    equation2 = Eq(sam - 0.20 * sam, sam - (sam - 40) / 5)\n\n    # Peter gave 25% of his stickers to Sam\n    equation3 = Eq(peter + 0.20 * sam, (peter + (peter + 40) / 4))\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation4 = Eq(sam - 0.20 * sam + 0.25 * peter, peter + 0.20 * sam - 0.25 * peter + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_spent = 25 + 10\n    change = 50 - total_spent\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # last digit of any number raised to power cycles every 4\n    # so we just need to find the remainder of the exponent when divided by 4\n    last_digit_32 = 32**3 % 10  # 32 to the power of 33 has the same last digit as 32 to the power of 1\n    last_digit_22 = 22**1 % 10  # 22 to the power of 29 has the same last digit as 22 to the power of 1\n\n    # subtract the two last digits\n    result = last_digit_32 - last_digit_22\n\n    # if the result is negative, add 10 to get the positive single-digit equivalent\n    ans = result if result >= 0 else result + 10\n\n    return ans\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def count_sixes(n):\n    # Counts the number of times the digit '6' appears from 1 to n\n    count = 0\n    for i in range(1, n + 1):\n        count += str(i).count('6')\n    return count\n\ndef solution():\n    # We start with a guess and incrementally find the point where '6' appears 18 times\n    pages = 0\n    while True:\n        if count_sixes(pages) >= 18:\n            break\n        pages += 1\n    \n    # Since we want the maximum number of pages, if the next page has a '6', we include it\n    if '6' in str(pages):\n        return pages\n    else:\n        return pages - 1\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 != dice2 and dice1 != dice3 and dice2 != dice3:\n                    if dice1 + dice2 + dice3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    num_fruits = 2\n    num_vegetables = 3\n    combinations = num_fruits * num_vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    return 4619 + 457 + 88\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Set up the proportion where ?/81 = 4/9\n    # Solve for the missing number (?)\n    missing_number = 81 * (4 / 9)\n    \n    return missing_number\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    effective_jump = (2 * jump_up) - slide_down\n    jumps_per_cycle = 2\n\n    # The height the monkey can climb before the potentially final cycle\n    height_before_final = total_height - jump_up\n\n    # How many complete cycles the monkey makes before it can jump out of the tree\n    cycles = height_before_final // effective_jump\n\n    # The height monkey climbed in complete cycles\n    height_after_cycles = cycles * effective_jump\n\n    # Remaining height to be climbed after complete cycles\n    remaining_height = total_height - height_after_cycles\n\n    # If remaining height is greater than a single jump, we need two more jumps; else, one more jump.\n    final_jumps = 2 if remaining_height > jump_up else 1\n\n    # Total jumps = jumps per complete cycles + final_jumps\n    total_jumps = (cycles * jumps_per_cycle) + final_jumps\n    \n    return total_jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    sum = 0\n    for i in range(1, 2013):\n        sum += (i**2) / ((i + 1) * (i + 2))\n    sum += 1/4026\n    ans = sum\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for num in range(1, 100):\n        if (num**0.5).is_integer() and (num + 1) % 5 == 0 and num % 16 == 0:\n            return num\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    # Since it's an arithmetic sequence, we calculate the common difference\n    first_term = 15\n    second_term = 21\n    \n    difference = second_term - first_term  # common difference of the sequence\n\n    # The next term in the sequence is the last term provided plus the common difference\n    last_provided_term = 39\n    next_term = last_provided_term + difference\n    \n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    total_marks = 152\n    correct_mark = 4\n    incorrect_mark = -2\n\n    # Let x be the number of correct answers\n    # Then the number of incorrect answers will be total_questions - x\n    # We set up the equation based on the total marks earned:\n    # correct_mark * x + incorrect_mark * (total_questions - x) = total_marks\n\n    # Solve for x\n    x = (total_marks - incorrect_mark * total_questions) / (correct_mark - incorrect_mark)\n\n    return int(x)\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_in_6_days = 42\n    days_to_calculate = 9\n\n    cans_per_day = cans_in_6_days / 6\n    ans = cans_per_day * days_to_calculate\n\n    return ans\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # Since 16 sausages are to be shared equally among 24 people,\n    # each person should get 16/24 of a sausage. This simplifies to 2/3 of a sausage.\n    # To make this division possible with the least number of cuts, we can first\n    # cut each sausage into 3 equal parts. Now we have 16 * 3 = 48 pieces.\n    # Each person can get 2 of these pieces, making the sharing equal.\n    # Hence, the least number of cuts required is the same as the initial number of sausages,\n    # since we are cutting each sausage into 3 parts.\n    return 16\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    # First, calculate the total number of permutations of the letters in RAINBOW\n    total_perms = factorial(len(\"RAINBOW\"))\n    \n    # Now, calculate permutations where the vowels (A, I, O) are together.\n    # We consider the group of vowels as a single entity, along with the remaining 4 consonants (R, N, B, W)\n    vowels_perms = factorial(len(\"RNBW\") + 1)  # Permutations of the consonants plus the vowel group\n    \n    # Permutations of the vowels among themselves\n    vowels_internal_perms = factorial(len(\"AIO\"))\n    \n    # Total permutations where vowels are together\n    vowels_together_perms = vowels_perms * vowels_internal_perms\n    \n    # Subtract the number of permutations where vowels are together from the total to get permutations where vowels are not together\n    ans = total_perms - vowels_together_perms\n    \n    return ans\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n    \n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the system of equations\n    solved_ages = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years time\n    wendys_age_in_5_years = solved_ages[wendy] + 5\n    \n    return wendys_age_in_5_years\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    # A had 350 more than B initially.\n    equation1 = Eq(A, B + 350)\n    # After spilling 500 mL, B had twice as much as A.\n    equation2 = Eq(B, 2 * (A - 500))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    # Get the initial amount of water in container A\n    return solutions[A]\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    # Calculate the differences between the numbers\n    diff1 = 51 - 39  # Difference between 51 and 39\n    diff2 = 147 - 51  # Difference between 147 and 51\n    diff3 = 147 - 39  # Difference between 147 and 39\n\n    # The unknown integer will be the greatest common divisor (GCD) of these differences\n    # because it has to divide all differences leaving zero remainder.\n    ans = gcd(gcd(diff1, diff2), diff3)\n\n    return ans\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    lovelle_sentences = 3 * 5\n    others_not_speaking_to_lovelle = 12\n    # Every other person also says 3 sentences to each other excluding Lovelle\n    total_statements_without_lovelle = others_not_speaking_to_lovelle * 3\n    # to get the number of members, each will talk to one less than the total number\n    # Adding the number of members interacting with Lovelle\n    # Hence, we divide by 2 to avoid double counting of interactions (A to B and B to A are the same interaction)\n    total_members = (total_statements_without_lovelle + lovelle_sentences) // 2\n    # Adding Lovelle to the team count\n    total_members += 1\n\n    return total_members\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    # Initialize count of digits to zero\n    digit_count = 0\n    \n    # Count digits for 1 to 9\n    digit_count += 1 * 9\n    \n    # Count digits for 10 to 99\n    digit_count += 2 * (99 - 10 + 1)\n    \n    # Count digits for 100 to 325\n    digit_count += 3 * (325 - 100 + 1)\n    \n    return digit_count\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from itertools import permutations\nfrom math import factorial\n\ndef solution():\n    word = \"STATISTIC\"\n    word_len = len(word)\n    num_t = word.count('T')\n    \n    # Calculate total permutations without restriction\n    total_perms = factorial(word_len) // (factorial(word.count('S')) * factorial(word.count('A')) * factorial(num_t) * factorial(word.count('I')) * factorial(word.count('C')))\n    \n    # Calculate permutations with two T's together (to subtract from total)\n    adj_t_perms = factorial(word_len - 1) // (factorial(word.count('S')) * factorial(word.count('A')) * (factorial(num_t - 1)) * factorial(word.count('I')) * factorial(word.count('C')))\n    \n    # Subtracting the permutations with adjacent T's from total permutations to get the answer\n    ans = total_perms - adj_t_perms * (num_t - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n\n    total_tickets = first_week_tickets + second_week_tickets + third_week_tickets\n\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for total_fruit_gums in range(1, 1000):  # Define a large search range\n        remaining_after_music = total_fruit_gums - 2  # Ate 2 in Music lesson\n        shared_at_break = remaining_after_music // 3  # Shared one third\n        if remaining_after_music % 3 == 0:  # Check if the one third can be shared without breaking any fruit gums\n            remaining_after_break = remaining_after_music - shared_at_break\n            if remaining_after_break % 4 == 0:  # Check if remaining can be equally divided in the next 4 lessons\n                return total_fruit_gums\n    return None  # In case there is no such packet size under 1000\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    average_rate = 50\n\n    time_needed = total_pieces / average_rate\n\n    return time_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Sarah and Mark's Pokemon card counts\n    sarah, mark = symbols('sarah mark')\n    \n    # Equation 1: Sarah had $20 more Pokemon cards than Mark initially\n    equation1 = Eq(sarah, mark + 20)\n    \n    # Equation 2: After buying 16 cards, Sarah had 3 times more Pokemon cards than Mark\n    equation2 = Eq(sarah + 16, 3 * mark)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sarah, mark))\n    \n    # Sarah's Pokemon cards before buying new cards today\n    return solutions[sarah]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    ans = round(number/10)*10\n    return ans\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    expression_result = (2018 - 20 + 18)\n    ans = expression_result // 8\n    return ans\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # First chest can be opened by trying all 9 keys\n    attempts_for_first_chest = 9\n    # Second chest can be opened by trying the remaining 8 keys\n    attempts_for_second_chest = 8\n    # Third chest can be opened by trying the remaining 7 keys\n    attempts_for_third_chest = 7\n    # The fourth chest can be opened by the last 6 keys (we need to exclude the last attempt since it's certain the last key should work)\n    attempts_for_fourth_chest = 6\n\n    total_attempts = (attempts_for_first_chest + attempts_for_second_chest + \n                      attempts_for_third_chest + attempts_for_fourth_chest)\n\n    return total_attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    ans = 2.98 * 23\n    return ans\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Observing the pattern: it seems the second digit alternates incrementing by 5 and decrementing by 2\n    # Starting from second number 3445, and going backward to find the missing number\n    # The pattern before 3445 would be to decrement by 2 (since 3445 is +5 from 2945)\n    missing_number = 3445 - 200  # The hundreds digit decrements by 2\n\n    return missing_number\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 26, 2))\n    return ans\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    return 15 / (1/7)\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    # Let's denote the number of mushrooms gathered in the first and second hours as x and y, respectively.\n    # We have two equations based on the problem statement:\n    # equation1: x + y = 40\n    # equation2: x + 26 = y\n\n    # Now we will solve these equations to find the value of y.\n\n    # From equation2 we can express x in terms of y: x = y - 26\n    # Now we substitute x in equation1: (y - 26) + y = 40\n    # Combine the terms to solve for y: 2y = 40 + 26\n    # Divide both sides by 2 to find y: y = (40 + 26) / 2\n    y = (40 + 26) // 2\n\n    return y\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.10\n    num_years = 6\n\n    final_value = initial_value * ((1 - depreciation_rate) ** num_years)\n\n    return final_value\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    women, men = symbols('women men')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(2 * women + 5 * men, 182)\n\n    solutions = solve((equation1, equation2), (women, men))\n\n    return solutions[women]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    # Number of gaps between the coins will be one less than the number of coins\n    num_gaps = 11 - 1\n    # Diameter of each coin\n    coin_diameter = 1.85\n    # Total length is the length covered by the coins' diameters plus the gaps between them\n    # Since the coins are touching, the total length is just the sum of the diameters\n    total_length = coin_diameter * 11 + num_gaps * 0\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    # Initial values for the arithmetic sequence.\n    first_term = 5\n    second_term = 8\n    common_difference = second_term - first_term\n    total_terms = 14\n\n    # The nth term of an arithmetic sequence, a_n = a_1 + (n - 1)*d\n    last_term = first_term + (total_terms - 1) * common_difference\n\n    # Sum of an arithmetic sequence, S_n = n/2 * (a_1 + a_n)\n    sum_sequence = total_terms / 2 * (first_term + last_term)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    ans = round(number / 100) * 100\n    return ans\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator = 3 * 20\n    denominator = 12\n    ans = numerator // denominator\n    return ans\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = (participants * (participants - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "def solution():\n    from math import factorial\n\n    # Since the table is circular, fix one person's position and arrange the remaining\n    # 7 people around the table which is (7-1)! as the circular permutations.\n    num_ways = factorial(7)\n\n    return num_ways\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    temp_difference = night_temp - morning_temp\n    return temp_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # The last digit of a number in multiplication only depends on the last digits of the numbers being multiplied\n    # The last digit of powers of 2 cycles every 4 steps: 2, 4, 8, 6\n    # The last digit of powers of 3 cycles every 4 steps: 3, 9, 7, 1\n    # 2017 modulo 4 is 1 (because 2017 = 4 * 504 + 1)\n    # Therefore, we consider the 1st element in both cycles for the last digits\n\n    last_digit_2 = 2  # The last digit of 2^2017 is the same as the last digit of 2^1, which is 2\n    last_digit_3 = 3  # The last digit of 3^2017 is the same as the last digit of 3^1, which is 3\n    \n    # Multiplying the last digits gives us the last digit of the entire expression\n    last_digit = (last_digit_2 * last_digit_3) % 10  # The last digit after multiplying\n    \n    return last_digit\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_ants = symbols('initial_ants')\n\n    # Let the number of ants initially be x.\n    # After sweeping 3/4 into the neighbour's house, the remaining ants are x - 3/4 * x.\n    remaining_ants_after_sweeping = initial_ants - (3/4) * initial_ants \n\n    # After 2/5 of the remaining ants ran out, the remaining ants are (1 - 2/5) * (x - 3/4 * x).\n    remaining_ants_after_running = (1 - 2/5) * remaining_ants_after_sweeping\n\n    # After 185 hungry ants arrived, the number of ants is (x - 3/4 * x) * (1 - 2/5) + 185.\n    total_ants_after_arrival = remaining_ants_after_running + 185\n\n    # In the end, the number of ants is twice the initial number: 2 * x.\n    equation = Eq(total_ants_after_arrival, 2 * initial_ants)\n\n    initial_ants_number = solve(equation, initial_ants)\n\n    return initial_ants_number[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    return 25 * 123 * 0.4\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_day1 = 89\n    books_day2 = 11\n    total_cost = book_cost * (books_day1 + books_day2)\n    \n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    a, d = symbols('a d')\n    \n    # Equation representing the sum of the first four terms\n    equation1 = Eq(a + (a + d) + (a + 2*d) + (a + 3*d), (a + 4*d) + (a + 5*d) + (a + 6*d) + (a + 7*d) - 32)\n    \n    # Solve the equation for d\n    common_difference = solve(equation1, d)\n\n    return common_difference[0]\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    # Identify the pattern - it's a sequence of square numbers\n    # The n-th term of this sequence is n^2\n    # Therefore, the next term after 49 (which is 7^2), is 8^2\n\n    n = 8\n    next_term = n ** 2\n    return next_term\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    friends = 42\n\n    total_pens = pens_per_friend * friends\n\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    number = 1\n    for i in range(2021):\n        number = number * 2 + 4\n        if number >= 100:\n            number %= 100\n    return number\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    from math import lcm\n\n    # Red light flashes every 15 seconds (60 seconds / 4 flashes)\n    # Green light flashes every 10 seconds (60 seconds / 6 flashes)\n    # Find least common multiple (LCM) of 15 and 10 to find when they flash together\n    period = lcm(15, 10)\n    \n    # Calculate total number of seconds in an hour\n    total_seconds = 60 * 60\n    \n    # Calculate how many times they flash together in an hour\n    flashes_together = total_seconds // period + 1  # Including first and last time\n    \n    return flashes_together\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "from sympy import primerange\n\ndef solution():\n    # Generate a list of primes less than 41\n    primes = list(primerange(1, 41))\n    \n    # Search for pair of primes that satisfy the equation\n    for a in primes:\n        for b in primes:\n            if 3 * a + 7 * b == 41:\n                return a + b\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    return (4.5 + 10.3) / 2\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n    cost_price = selling_price / (1 + profit_percent / 100)\n\n    new_profit = 5000\n    new_selling_price = cost_price + new_profit\n    new_profit_percent = (new_profit / cost_price) * 100\n\n    return new_profit_percent\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n\n    solutions = solve(equation, n)\n\n    return solutions\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_volume_fraction_water = 3/5\n    volume_juice = 120\n    total_volume_per_bottle = volume_juice / (1 - total_volume_fraction_water)\n    volume_water_per_bottle = total_volume_per_bottle * total_volume_fraction_water\n    total_water_for_six_bottles = 6 * volume_water_per_bottle\n    return total_water_for_six_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kg_to_g = 1000\n    n = 8.2 * kg_to_g\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    return factorial(len(\"EARTH\"))\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150\n    friend_speed = 200\n    walking_time = 10\n    running_speed = simon_speed * 2\n\n    # Calculate how far Simon walked away from school\n    simon_walk_distance = simon_speed * walking_time\n    # Calculate how far Simon's friend is from the school\n    friend_walk_distance = friend_speed * walking_time\n    # Calculate the distance Simon's friend walked while Simon was running back\n    friend_walk_back_distance = friend_speed * (simon_walk_distance / running_speed)\n\n    # Total distance between Simon and his friend when Simon gets back to school\n    total_distance = simon_walk_distance + friend_walk_distance + friend_walk_back_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 6):\n        s, e, n, d, m, o = p\n        if s == 0 or m == 0:\n            continue\n        send = s * 1000 + e * 100 + n * 10 + d\n        more = m * 1000 + o * 100 + r * 10 + e\n        if send + more == money:\n            return send * more\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total = factorial(7) # Total permutations of 7 items\n    identical_items = factorial(2)*factorial(2)*factorial(2) # Permutations of identical items (bells, stars, red balls)\n    return total // identical_items\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Store the time each person needs to cross the river\n    times = [1, 2, 5, 10]\n\n    # Strategy:\n    # 1. The two fastest cross together (total 2 minutes).\n    # 2. The fastest returns (total 3 minutes).\n    # 3. The two slowest cross together (total 13 minutes).\n    # 4. The second fastest returns (total 15 minutes).\n    # 5. The two fastest cross again (total 17 minutes).\n    shortest_time = sum(times) - max(times) - times[1] + 2 * times[0]\n\n    return shortest_time\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # Initial volume in litres\n    container_size = initial_volume * 0.25\n    cup_volume = 0.15  # Cup volume in litres (150 ml)\n    cups_filled = 14\n\n    water_used = container_size + (cup_volume * cups_filled)\n    water_left = initial_volume - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    # This is a classic problem known as the derangement or permutation problem\n    # D(n) = (n - 1) * (D(n - 1) + D(n - 2))\n    # For n = 7, we calculate D(7) using the derangement formula\n    \n    def derangement(n):\n        # Base cases D(0) = 1 and D(1) = 0\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    return derangement(7)\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    # The divisibility rule for 99 is that the number must be divisible by both 9 and 11.\n    # For divisibility by 9, the sum of the digits must be a multiple of 9.\n    # For divisibility by 11, the difference between the sum of the digits in odd positions\n    # and the sum of the digits in even positions must be a multiple of 11 (including 0).\n    \n    # Since we know some of the digits, we can start by calculating the fixed sum for the divisibility by 9.\n    fixed_sum = 2 + 3 + 3 + 5  # Sum of the known digits\n\n    # The alternating sum for the positions, considering the known digits and starting from the left (odd position)\n    # is: 2 - X1 + 3 - X2 + 5, where X1 is the second digit and X2 is the third digit.\n    # Since this difference has to be a multiple of 11 (including 0), let's iterate over the possible values\n    # for the unknown digits from 0 to 9 to find valid combinations.\n\n    for X1 in range(10):\n        for X2 in range(10):\n            if (fixed_sum + X1 + X2) % 9 == 0:\n                alternating_sum = 2 - X1 + 3 - X2 + 5\n                if alternating_sum % 11 == 0:\n                    # When both conditions are met, we have a valid number\n                    ans = int(f\"2{X1}{X2}335\")\n                    return ans\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 100\n    while n % 7 != 0:\n        n -= 1\n    return n - 7  # Since we need the largest multiple of 7 that is less than 100\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_time = 24\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages_per_day, total_pages = symbols('pages_per_day total_pages')\n\n    equation1 = Eq(pages_per_day * 8, total_pages)\n    equation2 = Eq((pages_per_day + 2) * (8 - 2), total_pages)\n\n    solutions = solve((equation1, equation2), (pages_per_day, total_pages))\n\n    return solutions[total_pages]\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip bakes 5 loaves in 20 minutes, so in 40 minutes Pip bakes 2 times that\n    pip_loaves = 5 * (40 // 20)\n    \n    # Bud bakes 3 loaves in 15 minutes, so in 45 minutes Bud would bake 3 times that\n    # However, we need to count only up to 40 minutes, that is 2 full cycles of 15 minutes\n    # and 10 minutes leftover, which is 2/3 of the next cycle\n    bud_loaves_full_cycles = 3 * (40 // 15)\n    bud_loaves_partial_cycle = (3 * (40 % 15)) // 15\n    \n    # Total loaves baked by Pip and Bud in 40 minutes\n    total_loaves = pip_loaves + bud_loaves_full_cycles + bud_loaves_partial_cycle\n    \n    return total_loaves\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    return 828 // 9\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # Given that after a year, the value increased by 10% to reach £11,000\n    value_after_increase = 11000\n    # Let original_value be the value of the house before the increase\n    # So we have original_value * 1.10 (10% increase) = £11000\n    original_value = value_after_increase / 1.10\n\n    # Now the house loses 10% of its value this year\n    # New value after decrease = original_value * 0.90 (10% decrease)\n    value_after_decrease = original_value * 0.90\n\n    # Profit or loss is calculated as the difference between the new value and the original\n    profit_or_loss = value_after_decrease - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # He may take all 10 red and 10 black socks before taking any white socks.\n    # Since he needs a pair of white socks, he must take one more sock after the red and black socks.\n    max_red_black_socks = 10 + 10\n    white_socks_for_pair = 2\n\n    total_socks = max_red_black_socks + white_socks_for_pair\n    return total_socks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = 1  # 'a' can be any number, outcome will not depend on its value.\n    ans = (12 * a) / 4 + (2 * a) * 5\n    return ans\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expr = (6*d) + (5*d) - d\n    ans = expr.simplify()\n    return ans\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    # Let x be the total number of cookies Richard had initially.\n    # According to the problem, after eating 3/8 of the cookies in the morning and 1/6 in the afternoon, he is left with 33 cookies.\n    # So the remaining fraction of cookies is 1 - 3/8 - 1/6.\n\n    # Calculate the least common denominator (LCD) for 8 and 6, which is 24\n    # Thus, convert the fractions to have the same denominator:\n    # morning_frac = 3/8 = 9/24 and afternoon_frac = 1/6 = 4/24\n    remaining_frac = 24/24 - (9/24 + 4/24)\n\n    # Now we can say:\n    # remaining cookies = remaining_frac * initial cookies\n    # 33 = remaining_frac * x\n    # x = 33 / remaining_frac\n    x = 33 / remaining_frac\n\n    return int(x)\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    numbers = []\n    for i in range(1, 10):\n        numbers.extend([i] * (i + 2))\n    midpoint = len(numbers) // 2\n    if len(numbers) % 2 == 1:\n        ans = numbers[midpoint]\n    else:\n        ans = (numbers[midpoint - 1] + numbers[midpoint]) / 2\n    return ans\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jemmas_number = symbols('jemmas_number')\n\n    equation = Eq((jemmas_number + 3) * 5, 35)\n\n    solution = solve(equation, jemmas_number)\n\n    return solution[jemmas_number]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2020, 5, 5)  # Assuming any leap year, it won't affect the weekdays\n    end_date = datetime(2020, 6, 7)\n\n    sundays_count = 0\n    current_date = start_date\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # In Python, Monday is 0 and Sunday is 6\n            sundays_count += 1\n        current_date += timedelta(days=1)\n\n    return sundays_count\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    capacity_per_bucket = 8\n    total_capacity = 120\n\n    num_buckets = total_capacity // capacity_per_bucket\n\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed_fraction = 1/4\n\n    left_handed_pupils = total_pupils * left_handed_fraction\n    not_left_handed_pupils = total_pupils - left_handed_pupils\n\n    return int(not_left_handed_pupils)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40\n    num_packets = 25\n    flour_per_packet = total_flour / num_packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for K in range(10):\n        num = int(f\"5{K}27{K}\")\n        \n        # Divisibility rule for 3: sum of digits must be divisible by 3\n        if sum(int(digit) for digit in str(num)) % 3 != 0:\n            continue\n\n        # Divisibility rule for 4: last two digits must form a number divisible by 4\n        if num % 100 % 4 != 0:\n            continue\n        \n        return K  # K satisfies both divisibility rules\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for cookies (c) and brownies (b)\n    c, b = symbols('c b')\n    \n    # Set up the equations based on the problem statement\n    # Initial ratio 4:3\n    equation1 = Eq(c/b, 4/3)\n    \n    # After giving away 6 brownies, ratio becomes 12:7\n    equation2 = Eq(c/(b - 6), 12/7)\n    \n    # Solving the system of equations to find the number of cookies and brownies\n    solutions = solve((equation1, equation2), (c, b))\n    \n    # Since we want the total count, we add cookies and brownies\n    ans = solutions[c] + solutions[b]\n    \n    return ans\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    original_companies = 4\n    original_days = 5\n    original_length = 900\n\n    new_companies = 6\n    new_length = 5400\n\n    original_work_rate = original_companies / original_days\n    new_work_rate = new_companies \n\n    total_original_work = original_length * original_work_rate\n    total_new_work = new_length * new_work_rate\n\n    new_days = total_new_work / total_original_work\n    return new_days\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # Buying a horse for $10 and selling it for $20.\n    profit1 = 20 - 10\n    \n    # Buying it back for $30 and selling it for $40.\n    profit2 = 40 - 30\n    \n    # Total profit is the sum of both transactions.\n    total_profit = profit1 + profit2\n    \n    return total_profit\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of white marbles and y be the initial number of red marbles.\n    # Let p be the number of red marbles Pip adds, and b be the number of white marbles Bud adds.\n    x, y, p, b = symbols('x y p b')\n\n    # Initial ratio: y / x = 3 / 2\n    equation1 = Eq(y / x, 3 / 2)\n\n    # After Pip adds p red marbles: (y + p) / x = 5 / 3\n    equation2 = Eq((y + p) / x, 5 / 3)\n\n    # After Bud adds b white marbles: y / (x + b) = 5 / 4, where b = p + 100\n    equation3 = Eq(y / (x + (p + 100)), 5 / 4)\n\n    # Solve the system of equations for x, y, p, and b\n    solutions = solve((equation1, equation2, equation3), (x, y, p, b))\n\n    # Return the number of initial white balls\n    return solutions[x]\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    # Given Adam spends £93 for 6 tickets\n    adam_spent = 93\n    adam_tickets = 6\n\n    # Calculate the price for one ticket\n    price_per_ticket = adam_spent / adam_tickets\n\n    # Claire spends £124\n    claire_spent = 124\n\n    # Calculate the number of tickets Claire can buy\n    claire_tickets = claire_spent // price_per_ticket\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    tenth_term = 31\n    common_difference = 28 - 25\n    n = 10\n\n    first_term = tenth_term - (n - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    # Since the total sum of the numbers from 1 to 8 is 1+2+3+4+5+6+7+8 = 36\n    total_sum_cards = sum(range(1, 9))\n\n    # Player One's sum is 23, so the sum of Player Two's cards is:\n    player_two_sum = total_sum_cards - 23\n\n    # To find the highest single card Player Two can have, let's assume they have the highest cards possible\n    # Since Player One cannot have any duplicates and has 4 cards, we start by giving Player Two the highest numbers\n    possible_cards = sorted(range(1, 9), reverse=True)\n    player_two_cards = []\n\n    for card in possible_cards:\n        if player_two_sum - card >= 0:\n            player_two_cards.append(card)\n            player_two_sum -= card\n        if len(player_two_cards) == 3:  # The last (4th) card will be the highest possible remaining\n            break\n\n    # The last card would be the answer as we are keeping the largest cards first for Player Two\n    # Since we are asked for the highest single card, we only need the 4th card\n    highest_single_card = total_sum_cards - 23 - sum(player_two_cards)\n\n    return highest_single_card\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of shoes, 2 shoes per pair\n    time_per_shoe = 2  # Time taken to clean one shoe\n    \n    # Since both cobblers work at the same time, we divide the total shoes by 2 to get the time\n    time_to_clean_all_shoes = (total_shoes / 2) * time_per_shoe\n    \n    return time_to_clean_all_shoes\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    def square_sum(n):\n        # Formula for sum of squares: n(n+1)(2n+1)/6\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    ans = sum(square_sum(i) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    score = 168\n\n    # Let x be the number of correct answers\n    # Then, (attempted_questions - x) will be the number of wrong answers\n    # The score is calculated as follows:\n    # 4 * correct answers - 1 * wrong answers = score\n    # 4x - (attempted_questions - x) = score\n    # Simplifying, we get 5x = score + attempted_questions\n    correct_answers = (score + attempted_questions) / 5\n\n    return correct_answers\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "def solution():\n    from math import comb\n    num_players = 6\n    num_handshakes = comb(num_players, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    \n    to_transfer = (luna_dumplings - lucy_dumplings) / 2\n    \n    return to_transfer\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    # two-thirds of the number is 24\n    number = 24 * (3/2)\n    \n    # three-quarters of the number\n    three_quarters = number * (3/4)\n    \n    return three_quarters\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    sum_odd_numbers = sum(i for i in range(1, 20, 2))\n    return sum_odd_numbers\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n    \n    # LCM of pack sizes is the minimum number of markers in each pack set\n    min_pack_set = lcm(6, 8, 9, 15)\n    \n    # Find the smallest multiple of min_pack_set that is greater than or equal to 1000\n    min_markers = min_pack_set\n    while min_markers < 1000:\n        min_markers += min_pack_set\n\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    return 543 - 284\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    total_letters = 9  # The word 'CHALLENGE' has 9 letters\n    vowels_group = 3   # Considering the three vowels (A, E, E) as a single entity\n    \n    # Calculate the permutations of all letters considering the vowels as one entity.\n    # We have to divide by factorial(2) because there are two 'E's which are indistinguishable.\n    permutations_with_vowels_together = factorial(total_letters - vowels_group + 1) // factorial(2)\n    \n    # Now calculate permutations for the vowels among themselves. Here, again we divide by factorial(2) \n    # because of the two 'E's.\n    permutations_of_vowels = factorial(vowels_group) // factorial(2)\n    \n    # Since the vowels are considered as a single entity in the first part, we need to multiply to count\n    # all their internal permutations.\n    ans = permutations_with_vowels_together * permutations_of_vowels\n    \n    return ans\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_seamstress_per_day = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_seamstress_per_day * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    result = 77.5 * (52 / 100) + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Calculate the total spends for each period\n    jan_to_mar = 450 * 3        # January to March, 450 dollars per month for 3 months\n    apr_to_jul = 350 * 4        # April to July, 350 dollars per month for 4 months\n    aug_to_oct = 1250           # August to October, 1250 dollars in total\n    nov_to_dec = 400 * 2        # November to December, 400 dollars per month for 2 months\n\n    # Sum of all spends for the whole year\n    total_year_spend = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # Divide by total number of months to find the average monthly spend\n    average_monthly_spend = total_year_spend / 12\n\n    return average_monthly_spend\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        B, D, E, C = perm\n        if B == 0:\n            continue\n        CBCD = 1000 * C + 100 * B + 10 * C + D\n        CDBC = 1000 * C + 100 * D + 10 * B + C\n        BDEC = 1000 * B + 100 * D + 10 * E + C\n        if CBCD + CDBC == BDEC:\n            return BDEC\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    # Number of cakes and their prices\n    carrot_cakes = 4\n    cheesecakes = 1\n    chocolate_cakes = 5\n    carrot_cake_price = 5\n    cheesecake_price = 10\n    chocolate_cake_price = 12\n\n    # Calculate total revenue from each type of cake\n    total_revenue_carrot = carrot_cakes * carrot_cake_price\n    total_revenue_cheese = cheesecakes * cheesecake_price\n    total_revenue_chocolate = chocolate_cakes * chocolate_cake_price\n\n    # Calculate total revenue\n    total_revenue = total_revenue_carrot + total_revenue_cheese + total_revenue_chocolate\n\n    # Calculate total number of cakes\n    total_cakes = carrot_cakes + cheesecakes + chocolate_cakes\n\n    # Calculate average selling price\n    average_price = total_revenue / total_cakes\n\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n\n    cost_per_person = total_cost / num_people\n\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    dividend = None\n    for divisor in range(1, 100):  # We can start testing from 1 and use a reasonable upper bound for efficiency\n        # Dividend can be calculated as divisor * quotient + remainder, where divisor = quotient in our case\n        temp_dividend = divisor * divisor + 7\n        # Check if this dividend gives our conditions with the same divisor and quotient\n        if temp_dividend // divisor == divisor and temp_dividend % divisor == 7:\n            dividend = temp_dividend\n            break\n    return dividend\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve, Rational\n\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    # The number of cars is four-thirds the number of bikes\n    equation1 = Eq(cars, Rational(4, 3) * bikes)\n\n    # The number of bikes is one quarter more than the number of lorries\n    # bikes = lorries + lorries / 4 = 5/4 * lorries\n    equation2 = Eq(bikes, Rational(5, 4) * lorries)\n\n    # The total number of cars, bikes, and lorries is even and less than 100\n    # We will check each possible even total in the for loop and return the\n    # valid values that satisfy all equations.\n    for total in range(2, 100, 2):\n        equation3 = Eq(cars + bikes + lorries, total)\n        solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n\n        if solutions and all(val.is_integer and val > 0 for val in solutions.values()):\n            return solutions\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    ans = 143 + 22 + 157\n    return ans\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    original_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = original_value * ((1 - depreciation_rate) ** years)\n    \n    return final_value\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    common_difference = 2\n    n = 12\n    \n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    cube_root = 245**(1/3)\n    p = round(cube_root**3 / 245, 10)\n    return p\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n    days = total_pages / pages_per_day\n    return int(days)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    return 6**2 - 4**2\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine = 142\n    elvis = shermaine + 157\n    claudia = elvis + 202\n\n    total_rulers = claudia + elvis + shermaine\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    spent_on_book = 0.10 * initial_amount\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = 0.20 * remaining_after_book\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    # Determine the rates of visitors joining and visitors entering\n    rate_joining = 10  # visitors per minute\n    rate_check_in_single = 25  # visitors per minute per entrance\n    \n    # Calculate the number of visitors after 16 minutes with one entrance\n    visitors_after_16_min = 16 * rate_joining - 16 * rate_check_in_single\n    \n    # Calculate the rate of check-in with two entrances\n    rate_check_in_double = 2 * rate_check_in_single\n\n    # Calculate the time taken for all visitors to enter with two entrances\n    # At this point, the number of visitors is zero\n    # So we set up the equation visitors_after_16_min = time_double * rate_joining - time_double * rate_check_in_double\n    # Then solve for time_double\n    time_double = visitors_after_16_min / (rate_check_in_double - rate_joining)\n\n    return time_double\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # Since 1/3 = 0.3333..., the decimal part consists of repeating '3's.\n    digits_sum = sum(int(digit) for digit in decimal_part)\n    return digits_sum\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    climb_day = 5\n    slide_night = 3\n    accumulated_distance = 0\n    day = 0\n\n    while accumulated_distance < total_distance:\n        day += 1\n        accumulated_distance += climb_day\n        if accumulated_distance >= total_distance:\n            break\n        accumulated_distance -= slide_night\n\n    return day\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n\n    original_number_doubled = final_number - added_number\n    original_number = original_number_doubled / 2\n\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_goals = sum(goals) / len(goals)\n    return mean_goals\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    ans = 8102 - 2018\n    return ans\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    # Number of choices for each category\n    burger_choices = 2\n    side_choices = 3\n    drink_choices = 5\n\n    # Use the Principle of Multiplication\n    total_combos = burger_choices * side_choices * drink_choices\n\n    return total_combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # 10p spent by Avril\n    fraction_of_total_money = 1 / 4  # one-quarter\n\n    total_money = spent / fraction_of_total_money  # calculate the total money\n\n    return total_money\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Number of legs for each animal\n    duck_legs = 3 * 2  # 3 ducks with 2 legs each\n    parrot_legs = 2 * 2  # 2 parrots with 2 legs each\n    rabbit_legs = 1 * 4  # 1 rabbit with 4 legs\n    total_legs_non_cats = duck_legs + parrot_legs + rabbit_legs\n\n    # Total animal legs available for cats\n    cat_legs_available = 32 - total_legs_non_cats\n\n    # Number of legs for one cat\n    cat_legs = 4\n\n    # Number of cats\n    num_cats = cat_legs_available / cat_legs\n\n    return int(num_cats)\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    # Let's denote o as the number of oranges and l as the number of lemons\n    # Initially, the ratio of oranges to lemons is 3:5, so we have o/l = 3/5\n    # After selling 48 oranges, the ratio became 1:2, so we have (o - 48)/l = 1/2\n    # We can set up a system of equations based on these ratios and solve for o and l\n\n    # To make calculation easier, let's convert the ratio to the form of o = k * l, where k is the ratio\n    # For o/l = 3/5, the equation becomes o = (3/5) * l\n    # For (o - 48)/l = 1/2, the equation becomes o - 48 = (1/2) * l\n\n    # From the first equation, we can substitute o in the second equation:\n    # (3/5) * l - 48 = (1/2) * l\n    # Multiply both sides by 10 to clear denominators\n    # (6 * l - 480 = 5 * l)\n\n    # Now we can solve for l:\n    l = 480  # The equation simplifies to l = 480, because 6l - 5l = 1l\n\n    return l\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "from math import gcd\n\ndef solution():\n    class_A = 45\n    class_B = 75\n    class_C = 210\n\n    group_size = gcd(gcd(class_A, class_B), class_C)\n\n    return group_size\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 3 types of fruits: apples (A), pears (P), and cherries (C).\n    # Each student can choose: \n    # 1 fruit type (A or P or C), \n    # 2 fruit types (AP or AC or PC), or \n    # 3 fruit types (APC).\n\n    # Using the pigeonhole principle, the number of possible combinations of choices is:\n    # 3 choices taking 1 at a time + 3 choices taking 2 at a time + 1 choice taking all 3 at a time\n    \n    one_fruit = 3  # (A, P, C)\n    two_fruits = 3  # (AP, AC, PC)\n    three_fruits = 1  # (APC)\n\n    # Total different combinations one can choose\n    total_combinations = one_fruit + two_fruits + three_fruits\n\n    # By the pigeonhole principle, to have at least two students who choose the same combination\n    # We need at least one more student than the number of fruit combinations\n    ans = total_combinations + 1\n\n    return ans\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy_age, father_age, years_ago = symbols('judy_age father_age years_ago')\n    equation1 = Eq(father_age, judy_age + 33)\n    equation2 = Eq(judy_age + father_age, 63)\n    equation3 = Eq(father_age - years_ago, 4 * (judy_age - years_ago))\n\n    solutions = solve((equation1, equation2, equation3), (judy_age, father_age, years_ago))\n\n    return solutions[years_ago]\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n    num_teams = 11\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n\n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    # From the knowledge point, we can think in terms of Least Common Multiple (LCM)\n    # To find the LCM of the numbers: 6, 8, 9, 15\n    from math import lcm\n    lcm_markers = lcm(6, 8, 9, 15)\n    \n    # Now we must find the smallest multiple of lcm_markers that is greater than or equal to 1000\n    # Since we are finding the minimum number of markers, we start at 1000 and keep adding 1 \n    # until we find a number that's a multiple of lcm_markers.\n    \n    markers_needed = lcm_markers\n    while markers_needed < 1000:\n        markers_needed += lcm_markers\n\n    return markers_needed\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rooms = symbols('rooms')\n\n    # If there are 4 people in each room, 40 students don't have dormitories\n    # Hence total students = 4*rooms + 40\n    equation1 = Eq(4*rooms + 40)\n\n    # If there are 6 people in each room, 24 beds will be vacated\n    # Hence total students = 6*rooms - 24\n    equation2 = Eq(6*rooms - 24)\n\n    # Since the total number of students should be the same in each case\n    total_students = solve(equation1 - equation2)[0]\n\n    # Total rooms can be calculated as\n    total_rooms = (total_students - 40) / 4\n\n    return int(total_rooms)\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    # Given values\n    n10 = 23  # The 10th number\n    n15 = 38  # The 15th number\n    position_n = 102  # The position we want to find (n-th number)\n\n    # Common difference calculation\n    common_difference = (n15 - n10) / (15 - 10)\n\n    # First number in the sequence\n    first_term = n10 - (10 - 1) * common_difference\n\n    # The n-th number calculation\n    n102 = first_term + (position_n - 1) * common_difference\n\n    return n102\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    sweets_eaten = 18\n    fraction_eaten = 3 / 5\n    total_sweets = sweets_eaten / fraction_eaten\n    sweets_left_over = total_sweets - sweets_eaten\n    return sweets_left_over\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    age_difference = 9 - 5\n    age_jane_15 = 15\n    age_john_then = age_jane_15 - age_difference\n    return age_john_then\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((13 - x)**2, 25)\n\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n    marked_price = cost_price * 1.20  # 20% above the cost price\n    selling_price = marked_price * 0.80  # sold at 80% of the marked price\n    \n    # The loss was $40, hence cost price - selling price should equal to $40\n    equation = Eq(cost_price - selling_price, 40)\n    cost_price_solution = solve(equation, cost_price)\n\n    return cost_price_solution[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    return ((7 + 3) * 11) - (7 + (3 * 11))\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # The rate at which tap X fills the tank is 1/10 tank per minute\n    rate_x = 1 / 10\n    # The combined rate of taps X and Y is 1/6 tank per minute\n    combined_rate = 1 / 6\n    # The rate at which tap Y fills the tank is the combined rate minus the rate of tap X\n    rate_y = combined_rate - rate_x\n    # The time it takes for tap Y to fill the tank completely is the reciprocal of its rate\n    time_y = 1 / rate_y\n    \n    return time_y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    only_apples = 20 - 10\n    only_strawberries = 30 - 10\n    both = 10\n    neither = 5\n    total_students = only_apples + only_strawberries + both + neither\n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Xuanrui and Yaokuan's markers\n    x, y = symbols('x y')\n    \n    # Equation stating the total number of markers\n    total_markers = Eq(x + y, 708)\n    \n    # Xuanrui gave away 532 markers\n    xuanrui_left = x - 532\n    \n    # Yaokuan sold 3/7 of his markers, so he has 4/7 left\n    yaokuan_left = y - (3/7) * y\n    \n    # After the transactions, they have the same number of markers\n    equal_markers = Eq(xuanrui_left, yaokuan_left)\n    \n    # Solve the system of equations\n    solutions = solve((total_markers, equal_markers), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the current age of the younger brother, 'y' be the current age of the older brother\n    x, y = symbols('x y')\n\n    # When the older brother was 'x' (younger brother's current age), the younger brother was 12\n    # This means the age difference between the brothers is 'x - 12'\n    # So when the older brother was 'x', the younger brother was 'x - (x - 12)' which is 12\n\n    # When the younger brother becomes 'y' (older brother's current age), the older brother will be 27\n    # At that time, the age difference will still be the same: 'y - x'\n    # So, when the younger brother is 'y', the older brother is 'y + (y - x)' which is 27\n\n    equation1 = Eq((y - x), x - 12)\n    equation2 = Eq(y + y - x, 27)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # We want the current age of the older brother\n    return solutions[y]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    original_price = 1050\n    discount_percentage = 12\n    discount_value = original_price * (discount_percentage / 100)\n    final_price = original_price - discount_value\n\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    return 62 + 48 + 18 + 32\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    # Let x be the number of correct answers\n    # then (10-x) is the number of incorrect answers\n    # According to the problem, we can set up the equation:\n    # 6x - 2*(10-x) = 44 where 6x is the points from correct answers\n    # and -2*(10-x) is the points lost for incorrect answers.\n    \n    for x in range(11): # x can be from 0 to 10 as there are 10 questions\n        if (6*x) - 2*(10-x) == 44:\n            return x  # Return the number of correct answered questions\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    total = 0\n    factorial = 1\n    for i in range(1, 9):\n        factorial *= i\n        total += factorial\n\n    return total % 100\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    volume_a = 300  # volume of sugar water in Cup A\n    concentration_a = 0.20  # sugar concentration in Cup A\n    volume_b = 300  # volume of sugar water in Cup B\n    concentration_b = 0.30 # sugar concentration in Cup B\n\n    sugar_a = volume_a * concentration_a  # amount of sugar in Cup A\n    sugar_b = volume_b * concentration_b  # amount of sugar in Cup B\n\n    total_sugar = sugar_a + sugar_b  # total amount of sugar in the mixed solution\n    total_volume = volume_a + volume_b  # total volume of the mixed solution\n\n    concentration_mixture = total_sugar / total_volume  # sugar concentration in the mixture\n\n    return concentration_mixture\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):  # Pages 1 through 200\n        count += str(i).count('4') \n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    pounds_to_dollars = 2.50\n    dollars = 1000\n    pounds = dollars / pounds_to_dollars\n    return pounds\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    gap_length = 1\n    \n    # Subtract the length of the head and add one gap length since the head is also considered a carriage\n    remaining_length = total_length - head_length + gap_length\n    \n    # Each carriage with its gap occupies (carriage_length + gap_length) meters.\n    carriage_with_gap_length = carriage_length + gap_length\n    \n    # Calculate number of carriages by dividing the remaining length by the length of each carriage including the gap\n    # and since the head is counted as one carriage, add 1 to the result.\n    num_carriages = (remaining_length // carriage_with_gap_length) + 1\n\n    return num_carriages\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # In ones place, '8' appears every 10 pages: 8, 18, 28, ..., 288.\n    ones_place = (288 // 10) + 1\n\n    # In tens place, '8' appears on 10 consecutive pages every 100 pages: 80-89, 180-189, ..., 280-288.\n    tens_place = ((288 // 100) * 10) + (8 + 1)  # the additional pages from 280 to 288\n\n    # In hundreds place, '8' does not appear in the book with 288 pages.\n    hundreds_place = 0\n\n    # Correct counts\n    correct_count = ones_place + tens_place + hundreds_place\n\n    return correct_count\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    \n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n    \n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, ryan = symbols('ahmad ryan')\n    # Equation representing the total number of marbles\n    equation1 = Eq(ahmad + ryan, 1442)\n    # Equation representing the relationship between their marble counts\n    equation2 = Eq(ahmad, 6 * ryan)\n\n    # Solve the system of equations to find the number of marbles each person originally has\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n    ahmad_marbles = solutions[ahmad]\n    ryan_marbles = solutions[ryan]\n\n    # Calculate the number of marbles Ahmad must give to Ryan to have the same amount\n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_questions = 50\n    correct_points = 2\n    wrong_points = -1\n    actual_score = 82\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * correct_points + wrong * wrong_points\n        if score == actual_score:\n            return correct\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 1\n    while True:\n        if (24 * x - 8) % 25 == 0:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let the number of $2-notes originally be x\n    # Let the number of $10-notes originally be y\n    # We have two equations based on the problem statement:\n    # x + y = 95 (total number of notes)\n    # 5y + x = 175 (total number of $2-notes after exchanging $10-notes)\n    \n    # From the first equation, we can express y as: y = 95 - x\n    # Substitute y in the second equation:\n    # 5(95 - x) + x = 175\n    # 475 - 5x + x = 175\n    # 475 - 4x = 175\n    # 4x = 475 - 175\n    # 4x = 300\n    # x = 300 / 4\n    # x = 75\n    \n    x = (475 - 175) // 4\n    return x\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 20 * x + 2 * y\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount = original_price * 0.15\n    discounted_price = original_price - discount\n    increase = discounted_price * 0.15\n    final_price = discounted_price + increase\n\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    price_per_kg_1 = 5 / 2.5\n    price_per_kg_2 = 7.70 / 4\n\n    if price_per_kg_1 < price_per_kg_2:\n        ans = '2.5 kg bag'\n    else:\n        ans = '4 kg bag'\n\n    return ans\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = sum(1/x for x in range(2001, 2011))\n    S = 1 / S_inverse\n    ans = int(S)\n    return ans\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each shape\n    tri, squ, cir, dia = symbols('tri squ cir dia')\n\n    # Create the equations based on the given information\n    equation1 = Eq(tri + tri, squ)\n    equation2 = Eq(squ + tri, cir)\n    equation3 = Eq(dia, cir + squ + tri)\n\n    # Solve the equations to find the relationships between shapes\n    solutions = solve((equation1, equation2, equation3), (tri, squ, cir, dia))\n\n    # Find how many triangles (tri) make up a diamond (dia)\n    ans = solutions[dia] / solutions[tri]\n\n    return ans\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    book_price = 4.50\n    num_books = 5\n    total_cost = book_price * num_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We have the following modular equations\n    # x ≡ 2 (mod 4)\n    # x ≡ 2 (mod 5)\n    # x ≡ 8 (mod 9)\n\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_one_fourth_full = 250\n    mass_three_fourth_full = 350\n    mass_half_full = mass_three_fourth_full - (mass_one_fourth_full / 2)\n\n    mass_empty_jar = mass_one_fourth_full - mass_half_full\n    return mass_empty_jar\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    num_trees_each_side = (road_length // interval) + 1\n    total_trees = num_trees_each_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    return lcm(5, 10, 12)\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = (bus_length * number_of_buses) + (distance_between_buses * (number_of_buses - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbol for the original number\n    number = symbols('number')\n    \n    # Mistaken calculation: (number / 4) - 25 = 2021\n    mistake_eq = Eq((number / 4) - 25, 2021)\n    \n    # Solve for the original number\n    original_number = solve(mistake_eq, number)[0]\n    \n    # Correct calculation: (original number * 4) + 25\n    correct_answer = (original_number * 4) + 25\n    \n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    block_height_for_28 = 182\n    unit_block_height = block_height_for_28 / 28\n    block_height_for_42 = unit_block_height * 42\n    return block_height_for_42\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    ans = 45 * 7\n    return ans\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    ans = 4.8 * 5\n    return ans\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    difference = 1\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        if (2 + E + 3 + E + 2) % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation = Eq(x * 3, y * 5)\n    \n    proportional_relation = 'directly'\n    \n    y_when_x_5 = solve(equation.subs(x, 5), y)[0]\n    \n    return (proportional_relation, y_when_x_5)\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # We can denote the sequence as a1, a2, a3, a4, a5, a6, a7 and so on\n    # According to the problem statement:\n    # a4 = 6 and a6 = 15\n    # We also know that each number is the sum of the previous two numbers, therefore:\n    # a3 = a4 - a2\n    # a5 = a6 - a4\n    # But also a5 = a4 + a3 which leads to a5 = a4 + a4 - a2\n    # Thus a6 - a4 = 2a4 - a2\n    # We can find a2 by substituting a4 and a6 values in the above expression\n    # 15 - 6 = 2*6 - a2 => 9 = 12 - a2 => a2 = 3\n    \n    # Now we know a2, and we can find a3:\n    # a3 = a4 - a2 => a3 = 6 - 3 => a3 = 3\n\n    # a5 can be found now since a5 = a4 + a3\n    a5 = 6 + 3\n    \n    # a6 is given as 15, so a7 is the sum of a6 and a5:\n    a7 = a5 + 15\n    \n    return a7\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.50  # 50% above cost\n    discount_price = selling_price * 0.90  # 10% Christmas discount\n\n    profit = discount_price - cost_price\n\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 0  # Initialize variable m (since we start from 0)\n    n = 0  # Initialize variable n (since m < n)\n    while True:  # Loop until break\n        students_original = m**2 + 5  # Calculate students originally with 5 left out\n        students_after = students_original + 18  # Calculate students after 18 join\n        n = int(students_after**0.5)  # Calculate n (the square root of students after)\n\n        # Check if the calculated n creates a perfect square with the students after\n        if n**2 == students_after:\n            break  # Break the loop since the condition is met\n        m += 1  # Try the next m\n        \n    ans = students_original  # Get original student count\n    return ans\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    max_number = 99  # Largest 2-digit number\n    while max_number > 0:\n        if max_number % 3 == 0 and max_number % 5 == 0:\n            return max_number\n        max_number -= 1\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    class_a = 12\n    class_b = 15\n    class_c = 18\n\n    # Finds the Greatest Common Divisor (GCD) of class a and class b\n    gcd_ab = gcd(class_a, class_b)\n    # Finds the GCD of the result above and class c, representing the GCD of all three classes\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    badminton_duration = timedelta(minutes=45)\n    jogging_duration = timedelta(minutes=30)\n    \n    end_time = start_time + badminton_duration + jogging_duration\n    return end_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    total_numbers = 3\n\n    original_total = original_average * total_numbers\n    new_total = new_average * total_numbers\n\n    changed_number = 16\n\n    original_number = original_total - (new_total - changed_number)\n\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n\n    # Total number of boys is 36 - girls\n    boys = 36 - girls\n\n    # Equation based on average scores\n    equation = Eq(88 * girls + 91 * boys, 89 * 36)\n\n    # Solve the equation\n    num_girls = solve(equation, girls)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    from itertools import combinations\n\n    # define vertices of the 3D shape (cube)\n    vertices = range(1, 9)\n    \n    # define edges of the cube\n    edges = [(1,2), (2,3), (3,4), (4,1), (5,6), (6,7), (7,8), (8,5), (1,5), (2,6), (3,7), (4,8)]\n    \n    # count the number of triangles\n    count = 0\n    for triangle in combinations(vertices, 3):\n        if all(edge in edges or (edge[1], edge[0]) in edges for edge in combinations(triangle, 2)):\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    david_weight = 800\n    david_concentration = 5 / 100\n\n    eugene_weight = 200\n    eugene_concentration = 30 / 100\n\n    felix_weight = 300\n    felix_concentration = 10 / 100\n\n    total_weight = david_weight + eugene_weight + felix_weight\n    total_sugar = (david_weight * david_concentration +\n                   eugene_weight * eugene_concentration +\n                   felix_weight * felix_concentration)\n\n    concentration = (total_sugar / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = blue_pens + black_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, gill = symbols('andrew gill')\n    \n    equation1 = Eq(andrew + gill, 62)\n    equation2 = Eq(gill, andrew + 18)\n    \n    solutions = solve((equation1, equation2), (andrew, gill))\n    \n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    juice_in_first = 0.35 * 20\n    juice_in_second = 0.60 * 30\n    total_juice = juice_in_first + juice_in_second\n    \n    percent_concentration = (total_juice / total_volume) * 100\n    \n    return percent_concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    people = 4\n    handshakes = comb(people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    # Total questions\n    total_questions = 25\n\n    # Points for Rex\n    rex_points = 66\n\n    # Questions answered by Rex\n    questions_answered = total_questions - 1\n\n    # Since Rex answered all but one question, use this information to frame the equations.\n    # Let x be the correct answers and y be the incorrect answers.\n    # x + y = questions_answered (since Rex answered all but one question)\n    # 4x - 2y = rex_points (points system, 4 points for correct, minus 2 for incorrect)\n\n    # Simplify the second equation: 4x - 2y = 4x + 2x - 2x - 2y = 4(x + y) - 2(x + y) = 2 * rex_points\n    # Now, we know that x + y = questions_answered and 4(x + y) = 2 * rex_points + 4\n\n    # Solve for x (correct answers)\n    correct_answers = (2 * rex_points + 4) / 4\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_badges, remaining_after_day1, sold_on_day2, total_at_end = symbols('initial_badges remaining_after_day1 sold_on_day2 total_at_end')\n\n    # First day she sold 5/7 of the badges\n    eq1 = Eq(remaining_after_day1, initial_badges - (5/7) * initial_badges)\n\n    # Second day she sold 1/3 of the remaining badges\n    eq2 = Eq(sold_on_day2, (1/3) * remaining_after_day1)\n\n    # After selling on the second day, she made 354 additional badges\n    eq3 = Eq(total_at_end, remaining_after_day1 - sold_on_day2 + 354)\n\n    # In the end, she had 3 times the number of badges she made at first\n    eq4 = Eq(total_at_end, 3 * initial_badges)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (initial_badges, remaining_after_day1, sold_on_day2, total_at_end))\n\n    return solutions[initial_badges]\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    return 3.8 + 59.6 - 12\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    angel = '0141705021'\n    # Since the password represents a pattern, we can create a mapping from 'Angel' to the pattern's digits\n    angel_map = {letter: num for letter, num in zip('Angel', angel)}\n    # Now we can map the attempted password 'Devil' using the previous pattern\n    devil_map = {letter: angel_map.get(letter, '0') for letter in 'Devil'}\n    # Build the password for 'Devil' from the map\n    devil_password = ''.join(devil_map[letter] for letter in 'Devil')\n    \n    # Check if Andy's attempt matches the 'Devil' password\n    attempt = '4005220912'\n    if attempt == devil_password:\n        return True  # Andy can unlock the treasure chest\n    else:\n        return devil_password  # Provide the correct password\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # With four people, the minimum number of rounds required to determine a winner\n    # would be the number of rounds needed to eliminate all but one player.\n    \n    # Since one person is eliminated per game, the number of games needed to\n    # determine a winner in a knockout tournament is one less than the total\n    # number of people, so for four people:\n\n    num_people = 4\n    rounds_to_win = num_people - 1  # Because the winner does not need to be eliminated.\n\n    return rounds_to_win\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n\n    produced_by_both = total_exhibits - not_produced_by_A - not_produced_by_B\n\n    return produced_by_both\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # According to the Pigeonhole Principle, to guarantee one ball of each color, \n    # one must pick one more than the total number of balls minus the number of colors.\n    \n    num_colors = 3 # blue, red, green\n    total_balls = 8 + 10 + 13 # total number of balls from all colors\n\n    min_picks = total_balls - num_colors + 1\n\n    return min_picks\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 6), (3, 7), (5, 11)]\n    ans, _ = solve_congruence(*congruences)\n    # Ensure solution is within given range\n    while ans < 200 or ans > 300:\n        ans += 6 * 7 * 11  # LCM of 6, 7, 11\n    return ans\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # Initialize the smallest number as a high value to find the minimum\n    smallest_number = float('inf')\n\n    # Check all possible combinations of three digit numbers with 7 as one digit\n    for digit1 in range(10):  # loop for the hundreds place\n        for digit2 in range(10):  # loop for the tens place\n            for digit3 in range(10):  # loop for the ones place\n                # Check if 7 is one of the digits\n                if digit1 == 7 or digit2 == 7 or digit3 == 7:\n                    # Check if the difference between any two digits is 4 or less\n                    if abs(digit1 - digit2) <= 4 and abs(digit1 - digit3) <= 4 and abs(digit2 - digit3) <= 4:\n                        # Construct the number from the digits\n                        number = digit1 * 100 + digit2 * 10 + digit3\n                        # Update the smallest_number if a smaller valid number is found\n                        if number < smallest_number and number >= 100:  # Ensure the number is a three-digit number\n                            smallest_number = number\n\n    # Return the smallest valid three-digit number\n    return smallest_number\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    skirt, blouse = symbols('skirt blouse')\n\n    # 3 skirts and 2 blouses cost $317\n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    # Each skirt costs $14 more than a blouse\n    equation2 = Eq(skirt, blouse + 14)\n\n    # Solve the system of equations for blouse\n    solutions = solve((equation1, equation2), (skirt, blouse))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    from sympy import isprime\n    \n    # Since 8 * A needs to be a multiple of 3 when subtracting a multiple of 3 (3 * B),\n    # A must be a multiple of 3. As the only prime number that is a multiple of 3 is 3 itself, A must be 3.\n    A = 3\n\n    # We don't need to find B, as the question only asks for the value of A.\n    return A\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # Given the value after 1 year increase is 110,000\n    value_after_increase = 110000\n    \n    # Calculate the original value before the increase. Increase was 10%.\n    original_value = value_after_increase / 1.1\n    \n    # Calculate the value after 10% decrease in the second year\n    value_after_decrease = original_value * 0.9\n    \n    # Calculate the amount of profit or loss by comparing the original value and the value after decrease\n    profit_or_loss = value_after_decrease - original_value\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange the 3 groups of flowers (roses, jasmines, daisy)\n    group_arrangements = factorial(3)\n    \n    # Number of permutations within each group of different colors\n    # Roses permutations, Jasmines permutations\n    # Daisy has only 1, so no permutations\n    roses_perms = factorial(3)\n    jasmines_perms = factorial(4)\n    \n    # Total number of different ways to arrange the flowers \n    total_perms = group_arrangements * roses_perms * jasmines_perms\n\n    return total_perms\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    small_product = 1*2*3*4*5*6\n    large_product = 1*2*3*4*5*6*7*8\n    \n    count = 0\n    for m in range(small_product, large_product+1):\n        if m % small_product == 0 and large_product % m == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    # The strategy is to use the smallest positive integers possible sequentially.\n    # We start with 1 and go up until the next number would cause the sum to exceed 60.\n    sum = 0\n    max_integers = 0\n    next_integer = 1\n\n    while sum + next_integer <= 60:\n        sum += next_integer\n        max_integers += 1\n        next_integer += 1\n\n    return max_integers\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_rate = 0.20\n    discount_amount = original_price * discount_rate\n    new_price = original_price - discount_amount\n    \n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    rate_ml_per_min = 20  # ml per min\n    minutes_in_hour = 60   # number of minutes in an hour\n    \n    total_ml = rate_ml_per_min * minutes_in_hour\n    total_litres = total_ml / 1000  # convert ml to litres\n    \n    return total_litres\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        s, e, n, d = perm\n        # make sure that the first digit of a number is not zero\n        if s != 0 and n != 0:\n            see = s * 100 + e * 10 + e\n            send = s * 1000 + e * 100 + n * 10 + d\n            mone = m * 1000 + o * 100 + n * 10 + e\n            \n            more = m * 1000 + o * 100 + r * 10 + e\n            if (send + more) == mone:\n                return see\n    return None  # no solution found\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    for age in range(1, 100):  # assuming the age is less than 100 years\n        if all(age % n == 1 for n in [2, 3, 4, 6]) and age % 7 == 0:\n            return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n\n    mark_height = james_height + difference\n\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    # Let n be the number of custard pies George baked.\n\n    # If each friend got 5 pies, George would have 3 pies left.\n    # This means that the number of pies can be expressed as 5x + 3 where x is the number of friends.\n    # If each friend got 6 pies, George would be short of 2.\n    # This means the number of pies can be expressed as 6y - 2 where y is also the number of friends but in this scenario he would be short 2 pies for the last friend.\n    \n    # Thus we're looking for a number which is 3 more than a multiple of 5 (5x + 3) and 2 less than a multiple of 6 (6y - 2)\n    # A brute force approach would be to iterate over multiples of 5 starting from 5 and adding 3. Check against the 6y - 2 condition until we find a common number.\n    \n    # Start checking from 5 (the minimum number of pies that could be given to a single friend) and go up to an arbitrary number that's large enough to find our solution.\n    for i in range(5, 1000, 5):\n        if (i + 3) % 6 == (-2) % 6:\n            return i + 3\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # As there are 3 different colors, Cindy needs to pick a pair from one of these colors.\n    # Using the Pigeonhole Principle, in the worst case scenario, she needs to ensure there's at least one pair.\n    # If she picks one of each color (3 socks), she does not yet have a pair. \n    # However, when she picks the next sock (4th sock), she is guaranteed to have at least one pair of socks of the same color.\n\n    return 4  # 3 (one of each color) + 1\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    # Let x be the number of pieces of paper cut into three parts.\n    # Initially, there are 10 pieces of paper.\n    # After cutting x pieces into three parts, each piece becomes three pieces.\n    # So we get (3 * x) pieces from the cut papers.\n    # The remaining pieces are 10 - x (not cut).\n    # The total number of pieces after cutting is (3 * x) + (10 - x).\n    # We know that the total is 16 pieces.\n    # Therefore, we set up the equation (3 * x) + (10 - x) = 16 and solve for x.\n\n    # (3 * x) + (10 - x) = 16\n    # 3x + 10 - x = 16\n    # 2x + 10 = 16\n    # 2x = 16 - 10\n    # 2x = 6\n    # x = 6 / 2\n    # x = 3\n\n    x = (16 - 10) // 2\n    return x\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Using the pigeonhole principle,\n    # in the worst case we can take 1 red apple and 1 green apple without getting 2 apples of the same color.\n    # To ensure we get 2 apples of the same color, we must take another apple.\n    \n    # Regardless of the color of the apple we take next, we will have 2 apples of the same color,\n    # Either 2 red apples if we took a red one, or 2 green apples if it was a green one.\n    \n    # Hence, we need to take 1 (red) + 1 (green) + 1 (any color) = 3 apples to ensure we have 2 apples of the same color.\n    \n    return 3\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    return 20000 - 20\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    return 6.3 + 8.7 + 9.6 - 2.6\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    water_per_pail = 4\n    number_of_pails = 4\n    water_left = 7\n\n    original_volume = (water_per_pail * number_of_pails) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 47))\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n    return solution[0]\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    books, pencil_box = symbols('books pencil_box')\n\n    equation1 = Eq(2 * books + 3 * pencil_box, 42)\n    equation2 = Eq(2 * books + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (books, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "from math import factorial\n\ndef solution():\n    A = factorial(2010)\n    while A % 10 == 0:\n        A = A // 10\n    return A % 10\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Write the sequence of numbers as described\n    sequence = []\n    for number in range(1, 9):\n        sequence.extend([number] * (number + 1))\n    \n    # Find the median of the sequence\n    median_index = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        median = (sequence[median_index - 1] + sequence[median_index]) / 2\n    else:\n        median = sequence[median_index]\n    \n    return median\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    # The total height of six players\n    total_height_six = 6 * 150\n    \n    # The average height of four players is 2 cm lower than the team's average\n    average_height_four = 150 - 2\n    \n    # The total height of four players\n    total_height_four = 4 * average_height_four\n    \n    # The total height of the other two players\n    total_height_two = total_height_six - total_height_four\n    \n    # The average height of the other two players\n    average_height_two = total_height_two / 2\n    \n    return average_height_two\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    # Given x^20 * y^15 * z^5 = 243\n    # It is known that 243 is 3 raised to the power of 5\n    # 3^5 = 243\n    # Therefore, we can say that x^4 * y^3 * z = 3\n    # We need to find the value of x^8 * y^6 * z^2\n\n    # By the Power rule of exponents (a^m)^n = a^(m * n)\n    # If (x^4 * y^3 * z) = 3, then we want to find (x^4)^2 * (y^3)^2 * (z)^2\n    # Which can be written as x^8 * y^6 * z^2\n    \n    # Since we know x^4 * y^3 * z = 3\n    # We only need to square the value of 3 to get (x^4 * y^3 * z)^2 = 3^2\n    \n    power_value = 3 ** 2\n    return power_value\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    participants = 10\n    # Each handshake involves 2 participants\n    handshakes = comb(participants, 2)\n    return handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    daily_paving = 50\n    days_needed = total_length / daily_paving\n    return days_needed\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "from sympy import isprime\n\ndef solution():\n    x = 42  # Because 42 * x = 42^2, so x must be 42\n    \n    # For y, 42 * y = 2^x * 3^y * 7^z and all exponents must be equal to 1\n    # It means that y must have factors that when multiplied by 42's factors, the powers don't exceed 1\n    # 42 = 2 * 3 * 7, so y must not have these prime factors to keep exponents equal to 1\n    y = 1\n    for factor in [2, 3, 7]:\n        if isprime(factor):\n            y *= factor\n\n    return x + y\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    # Number of cattles\n    num_cattles = 8\n    # Amount of fodder one cattle eats in a day\n    fodder_per_cattle_per_day = 10\n    # Number of days to eat all fodder\n    days = 4\n\n    # Total fodder in the barn originally = (Number of cattles) * (Fodder per cattle per day) * (Number of days)\n    total_fodder = num_cattles * fodder_per_cattle_per_day * days\n    \n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit_weight_ratio = 8\n    rabbit_to_chicken_weight_ratio = 2\n\n    dog_to_chicken_weight_ratio = dog_to_rabbit_weight_ratio * rabbit_to_chicken_weight_ratio\n\n    return dog_to_chicken_weight_ratio\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    remaining_marbles = 35\n    given_to_ollie = 26\n    given_to_nate = 30\n\n    # Calculate the marbles Larry had after giving to Mark but before giving to Nate and Ollie\n    marbles_after_mark = remaining_marbles + given_to_ollie + given_to_nate\n\n    # Calculate the total marbles Larry had initially before giving out any marbles\n    total_marbles = marbles_after_mark * 12/7  # Since 7/12 of the marbles remained, initial marbles is 12/7 of remaining\n\n    return int(total_marbles)\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweets Jess and Jill have originally\n    jess, jill = symbols('jess jill')\n\n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # After giving eight sweets to Jess, Jill now has four sweets for every seven sweets Jess has.\n    # This becomes: Jill' = Jill - 8 and Jess' = Jess + 8\n    # Jill' = 4/7 * Jess'\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Calculate the total number of sweets the girls have altogether\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600\n    concentration = 0.22\n\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    # The sum of the digits from 0 to 9 is 45.\n    # There are 10 occurrences of each digit in each tens place (e.g., 10, 20,..., 90),\n    # and there are 10 tens places.\n    # For the units place, there are 10 full cycles of 0-9 (for numbers 1-90),\n    # plus the digits from 1 to 9 (for numbers 91-99).\n    \n    # Sum for each tens and units place\n    sum_tens = 45 * 10\n    sum_units = 45 * 10 + sum(range(1, 10))\n    \n    # Total sum of all digits\n    total_sum = sum_tens + sum_units\n    return total_sum\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the cost of one pie and y be the number of cakes sold\n    x, y = symbols('x y')\n    \n    # Equation based on the ratio of money collected (15x for pies and 7x for cakes)\n    equation1 = Eq(15*x + 7*(x + 13), 1848)\n    \n    # Equation based on the ratio of the number of pies to cakes sold (4 : 1)\n    equation2 = Eq(4*y, y + 4*y)  # The number of pies sold is 4 times the number of cakes\n    \n    # Solving the equations\n    solution = solve((equation1, equation2), (x, y))\n    cakes_sold = solution[y]\n\n    return cakes_sold\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_amount = 4.44\n    portion_given = total_amount * (1/4)\n    return portion_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):  # 5-digit numbers range from 10000 to 99999\n        if int('1' + str(num)) * 3 == int(str(num) + '1'):\n            return num\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    age_years = 38\n    age_months = 6\n\n    current_date = datetime.now()\n    birth_date = current_date.replace(year=current_date.year - age_years)\n    if(current_date.month > age_months):\n        birth_date = birth_date.replace(month=current_date.month - age_months)\n    else:\n        birth_date = birth_date.replace(year=birth_date.year - 1, month=12 + current_date.month - age_months)\n\n    ans = birth_date.year\n    return ans\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n\n    remaining_length = original_length - cut_length\n\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    ans = sum(i**4 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    remaining_money_after_CDs = 24 + 6\n    money_before_batteries = remaining_money_after_CDs / (1 - 3/5)\n    total_money_initially = (money_before_batteries + 3) / (1 - 1/4)\n    return total_money_initially\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n    for perm in permutations(digits, 4): \n        if perm[-1] in ['0', '6', '8']:  # The last digit must be even\n            if perm[0] != '0':  # The first digit cannot be 0\n                count += 1\n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for i in range(40, 81):\n        if i % 4 == 0 and i % 7 == 0:\n            beads.append(i)\n    return beads[0]\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    v1 = 60  # Qiqi's speed (m/min)\n    v2 = 72  # Weiling's speed (m/min)\n    \n    # Weiling travels for 4 minutes less than Qiqi\n    # Let t be the time Qiqi spent traveling, then Weiling spent t - (2 + 4) minutes\n    \n    # The distance traveled by both is the same, so we can write\n    # v1 * t = v2 * (t - 6)\n    # Solving for t gives us\n    # 60t = 72t - 432\n    # 12t = 432\n    # t = 432 / 12 = 36 (Qiqi's travel time in minutes)\n    \n    # The distance between the library and school is v1 * t\n    distance = v1 * 36\n\n    return distance\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # Since we are only interested in the units digit, we can observe the pattern\n    # in the powers of 9 to find the units digit of each term. We use modulo 10 to\n    # find the units digit.\n    units_digit_2015 = (9**2015) % 10\n    units_digit_2016 = (9**2016) % 10\n    \n    # After finding the units digit of both powers, we add them together and get the units digit of the sum\n    sum_units_digit = (units_digit_2015 + units_digit_2016) % 10\n    \n    return sum_units_digit\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial as fact\n    # First, arrange the 5 men in a row. There are 5! ways to do this.\n    men_arrangements = fact(5)\n    \n    # We now have 6 possible spaces around and between the men to place the 3 women (5 men = 6 spaces).\n    # These spaces are like: _ M _ M _ M _ M _ M _\n    # We have to choose 3 of these 6 spaces to place the women.\n    women_choices = fact(6) // (fact(3) * fact(6 - 3))\n    \n    # Each of the 3 women can be arranged in 3! ways among themselves.\n    women_arrangements = fact(3)\n    \n    # The total number of ways is the product of the above three quantities.\n    total_arrangements = men_arrangements * women_choices * women_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n    # Calculate the greatest common divisor of the two rope lengths\n    longest_piece_length = gcd(45, 30)\n    if longest_piece_length == 180:\n        return (True, longest_piece_length)\n    else:\n        return (False, longest_piece_length)\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    marc_current = 11 * 60 + 50  # Marc's time in minutes\n    marc_slow = 15\n    george_fast = 7\n\n    # Adjust Marc's time to actual time by adding the delay\n    actual_time = marc_current + marc_slow\n\n    # Add half an hour (30 minutes) to the actual time\n    actual_time += 30\n\n    # Now adjust for George's watch being fast\n    george_time = actual_time - george_fast\n\n    # Calculate the hour and minutes for George's watch\n    george_hour = george_time // 60\n    george_minute = george_time % 60\n\n    # Since we're working with a 12 hour clock, ensure the hour is within 1-12\n    george_hour = george_hour if george_hour <= 12 else george_hour - 12\n\n    return f\"{george_hour}:{str(george_minute).zfill(2)}\"\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45\n    total_amount = 540\n    \n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    jump_up = 3\n    slide_down = 2\n    net_gain = jump_up * 3 - slide_down * 3\n    tree_height = 31\n    jumps_per_cycle = 3\n    cycles = (tree_height - jump_up) // net_gain\n    height_after_cycles = cycles * net_gain\n    remaining_height = tree_height - height_after_cycles\n    jumps = cycles * jumps_per_cycle\n\n    while remaining_height > 0:\n        remaining_height -= jump_up\n        jumps += 1\n        if remaining_height <= 0:\n            break\n        remaining_height += slide_down\n\n    return jumps\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    correct_score = 5\n    wrong_penalty = -1\n    total_score = 90\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_score + wrong_answers * wrong_penalty\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    a_rate = 1 / 10\n    b_rate = 1 / 15\n\n    combined_rate = a_rate + b_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # The worst case scenario means we have to assume we draw the maximum number \n    # of marbles of the same color before getting a different color.\n\n    # Start by drawing all red marbles (the largest number), \n    # can get 12 reds and still not have 4 different colors.\n    \n    red_marbles = 12\n\n    # Next, draw all blue marbles, \n    # can have 12 reds + 9 blues and still not have 4 different colors. \n    \n    blue_marbles = 9\n    \n    # Then draw all yellow marbles, \n    # can have 12 reds + 9 blues + 8 yellows and still not have 4 different colors. \n    \n    yellow_marbles = 8\n    \n    # At this point, we have 3 different colors. \n    # We just need to draw one more marble to ensure the fourth color.\n    \n    one_more_marble = 1    \n\n    # Total number of marbles drawn to ensure 4 different colors.\n    total_marbles = red_marbles + blue_marbles + yellow_marbles + one_more_marble\n    return total_marbles\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbol T for the tax percentage\n    T = symbols('T')\n    \n    # Assume the annual income is 'x'\n    x = symbols('x')\n    \n    # Income tax on the first 30000\n    tax_first_30000 = (T / 100) * 30000\n    \n    # Income tax on the remaining amount (x - 30000)\n    tax_above_30000 = ((T + 3) / 100) * (x - 30000)\n    \n    # The income tax paid is (T + 1) % of the annual income\n    total_tax = (T + 1) / 100 * x\n    \n    # Set up the two-part tax equation\n    # If x ≤ 30000, then there is no \"above 30000\" part\n    # In such a case, the tax would be T% of x\n    equation1 = Eq((T / 100) * x, total_tax)\n\n    # If x > 30000, then the tax has two parts: up to 30000 and above\n    equation2 = Eq(tax_first_30000 + tax_above_30000, total_tax)\n\n    # Since the problem expects a value for x that is above 30000\n    # We solve equation2\n    solutions = solve(equation2, (T, x))\n    \n    # As the solution will include values for both T and x\n    # We filter out only the 'x' solutions, assuming the valid answer is the one greater than 30000\n    income = [sol[x] for sol in solutions if sol[x] > 30000]\n\n    # Return the first (and should be the only) income value that meets the conditions\n    return income[0]\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    multiples_of_3_and_7 = [x for x in range(0, 101) if x % 3 == 0 and x % 7 == 0]\n    \n    for number in multiples_of_3_and_7:\n        if (number - 2) % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Calculate Gigi's birth year\n    gigi_birth_year = 2002 - 45\n    # Calculate Jenny's birth year\n    jenny_birth_year = 1995 - 22\n    # Calculate the year when Gigi was 22\n    year_gigi_was_22 = gigi_birth_year + 22\n    # Calculate Jenny's age at that year\n    jennys_age_when_gigi_was_22 = year_gigi_was_22 - jenny_birth_year\n\n    return jennys_age_when_gigi_was_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    term = first_term\n    num_terms = 0\n    \n    while term > 0:\n        term += common_difference\n        if term > 0:\n            num_terms += 1\n\n    return num_terms\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = sum(int(digit) for digit in \"20190406\")\n    missing_digit = 9 - (digits_sum % 9)\n    if missing_digit == 9:\n        missing_digit = 0\n    return missing_digit\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    for number in range(10, 1000):  # reasonably large range to find the number\n        if number % 3 == 0 and number % 8 == 0 and str(number)[-1] == '2':\n            return number\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    return 2.5 * 7 * 4\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(f\"451{last_digit}\")\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from sympy import root, Rational, sqrt\n    numerator = -6.94 - root(9.604, 3)\n    denominator = sqrt(Rational(44541, 67000)) - (-Rational(377, 6) * Rational(5, 3))\n    ans = round(numerator / denominator, 3)\n    return ans\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    count = 0\n    for group1 in range(1, total_apples):\n        group2 = total_apples - group1\n        if group1 < group2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_in_still_water = 25\n    speed_of_current = 3\n    distance = 140\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percent = 15\n    discount = (discount_percent / 100) * original_price\n    sale_price = original_price - discount\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    cost_bracelets = 5 * 0.99\n    cost_cards = 2 * 1.98\n    total_cost = cost_bracelets + cost_cards\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_paid = 12.15\n    cost_per_cupcake = 3.25\n    total_cupcake_cost = 3 * cost_per_cupcake\n    cost_for_2_cans = total_paid - total_cupcake_cost\n    cost_per_can = cost_for_2_cans / 2\n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    for correct_answers in range(21):\n        wrong_answers = 20 - correct_answers\n        score = correct_answers * 5 - wrong_answers * 2\n        if score == 51:\n            return correct_answers\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "from math import lcm\n\ndef solution():\n    first_light_period = 0.5  # in minutes\n    second_light_period = 0.75  # in minutes\n    combined_cycle_time = 9  # in minutes\n    \n    # Calculate the least common multiple (LCM) of the first two traffic lights' periods\n    lcm_two_lights = lcm(int(first_light_period * 60), int(second_light_period * 60)) / 60  # convert to minutes\n\n    # The third traffic light period has to be a divisor of combined_cycle_time and longer than lcm_two_lights\n    min_third_light_period = lcm_two_lights  # start from lcm of the first two lights\n    while min_third_light_period < combined_cycle_time:\n        min_third_light_period += lcm_two_lights\n        \n    # Since the period should be at least 30 seconds, we take the next multiple if it's below 30 seconds\n    if min_third_light_period * 60 < 30:\n        min_third_light_period += lcm_two_lights\n    \n    ans = min_third_light_period\n    return ans\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Each bus seats 36 people\n    bus_capacity = 36\n    \n    # Assume group A had x full buses and y people not fitting in the full buses\n    # Assume group B had z full buses and had to combine 36 - y people with group A to fill a bus\n    # Total members of group A is 36x + y\n    # Total members of group B is 36z + (36 - y)\n    \n    # After all members took pictures with each other, we have (36x + y) * (36z + (36 - y)) pictures\n    # If the total number of pictures taken is P, and it is divisible by 36 with R pictures remaining\n    # Then we have P = 36 * roll + R, where roll is the number of full rolls and R < 36 \n\n    # The remaining pictures on the last roll will be R = P % 36\n    # It is given that 11 members from group A joined with group B in the last bus, so y = 11\n\n    y = 11\n    # Need to find x and z such that the number of pictures (P) modulo 36 gives R, which is the answer\n    # We do brute force starting with 1 bus for both A and B and look for the smallest solution that makes sense\n    for x in range(1, 1000):  # Large enough number to ensure we find a solution\n        for z in range(1, 1000):\n            P = (36 * x + y) * (36 * z + (36 - y))\n            R = P % bus_capacity\n            # Check if it is possible for group A and B to exactly fill the buses\n            if R == (36 - y):\n                return R\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]  # Differences between terms\n    second_diffs = [j - i for i, j in zip(differences[:-1], differences[1:])]  # Differences between differences\n\n    # Since it's a double arithmetic sequence, we can add the last second difference to the last difference\n    next_diff = differences[-1] + second_diffs[-1]\n    next_term = 50 + next_diff\n\n    return next_term\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    known_numbers = [9, 1, 7, 4, 3, 6, 8]\n    mean_value = 5\n    total_numbers = 8\n    \n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(known_numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # There are 3 other players apart from A, let's call them B, C and D.\n    # For every pass, the player with the ball has 3 choices to pass the ball (excluding himself).\n    # Since A is starting and also ending with the ball, we consider only the 2 middle passes.\n\n    # When A passes the ball for the first time, he has 3 choices (B, C, or D).\n    # After the first pass, the player who received the ball will have 2 choices (excluding A and himself).\n    # For the final pass, to ensure the ball returns to A, there is only 1 choice.\n\n    # Therefore, the total number of different passing methods is 3 choices for the first pass\n    # and 2 choices for the second pass.\n    methods = 3 * 2\n    \n    return methods\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    daniel, ming = symbols('daniel ming')\n    \n    equation1 = Eq(daniel, 4 * ming)\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n    \n    solutions = solve((equation1, equation2), (daniel, ming))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper_g = 25\n    number_of_girls = 250\n    \n    # Convert the weight from grams to kilograms\n    total_weight_kg = (weight_per_paper_g * number_of_girls) / 1000\n    \n    return total_weight_kg\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 8, 9]\n    max_product = 0\n\n    for perm in permutations(digits):\n        number1 = perm[0] * 10 + perm[1]\n        number2 = perm[2] * 10 + perm[3]\n        product = number1 * number2\n        max_product = max(max_product, product)\n\n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Let b2 be the length of the second bridge\n    # The line takes 8s to entirely cross the first 9m-long bridge. Thus, the speed of the line is:\n    speed = (9 + 3) / 8  # (length of the first bridge + length of the line) / time to cross the first bridge\n\n    # It takes the line 10s to entirely cross the second bridge, using the same speed we calculate the length:\n    b2_length = speed * 10 - 3  # speed * time to cross the second bridge - length of the line\n\n    return b2_length\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum((1000 - i * 4) ** 2 - (998 - i * 4) ** 2 for i in range(250))\n    return ans\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    target_product = 2688\n    for num in range(2, int(target_product**(1/3)) + 1, 2):\n        if (num * (num + 2) * (num + 4)) == target_product:\n            largest_even = num + 4\n            break\n    return largest_even\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = 11 * 60 + 55  # convert 11:55am to minutes\n    end_time = 13 * 60 + 40    # convert 1:40pm to minutes (13:40 in 24h format)\n\n    duration = end_time - start_time\n    return duration\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    left_side = 11\n    right_side = 7\n    crystal = 1  # Crystal herself needs to be counted\n\n    # Assume Crystal is not on the edge, since there are people on both sides of her.\n    # She's in one row, so we double the count as there are two rows.\n    total_people = (left_side + right_side + crystal) * 2\n\n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 3 == 0 and num % 11 == 0:\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:\n                return num\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n    ways = 0\n    \n    for group1 in range(1, total_cupcakes):\n        group2 = total_cupcakes - group1\n        if group1 < group2:\n            ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(224)\n    num_factors = 1\n    for factor_power in factors.values():\n        num_factors *= (factor_power + 1)\n    return num_factors\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('08:30', '%H:%M')\n    duration_lesson = timedelta(minutes=45)\n    moving_period = timedelta(minutes=5)\n\n    break_time = start_time + 3 * duration_lesson + 2 * moving_period\n    return break_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):      # range for hundreds digit, cannot be 0\n        for b in range(0, 10):  # range for tens digit\n            for c in range(0, 10):  # range for ones digit\n                if b == a + 5 and c == b - 2 and (a + b + c) // 2 == b:\n                    return int(f\"{a}{b}{c}\")\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n    return gcd(gcd(28, 84), 126)\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    five_notes, ten_notes = symbols('five_notes ten_notes')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(five_notes + ten_notes, 57)  # Total number of notes\n    equation2 = Eq(ten_notes - 0.60*ten_notes, 2*(five_notes - 0.25*five_notes))  # After spending conditions\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (five_notes, ten_notes))\n    five_notes_solution = solutions[five_notes]\n    ten_notes_solution = solutions[ten_notes]\n    \n    # Calculate the cost of the bag\n    cost_of_bag = 0.60 * ten_notes_solution * 10 + 0.25 * five_notes_solution * 5\n    \n    return cost_of_bag\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    troy, adam = symbols('troy adam')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(troy, 5 * adam) # Troy had 5 times as many coins as Adam\n    equation2 = Eq(adam + 24, troy / 3) # After Adam took 24 more coins, he had 1/3 as many coins as Troy\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    # Calculate the total number of coins they had at first\n    total = solutions[troy] + solutions[adam]\n\n    return total\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wands, cards = symbols('wands cards')\n    \n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n    \n    solutions = solve((equation1, equation2), (wands, cards))\n    \n    return solutions[wands]\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_money = symbols('initial_money')\n    money_after_CDs = initial_money / 4 + 3\n    remaining_money_after_CDs = initial_money - money_after_CDs\n    money_after_batteries = remaining_money_after_CDs * (3/5) + 6\n    remaining_money = remaining_money_after_CDs - money_after_batteries\n    \n    equation = Eq(remaining_money, 24)\n    ans = solve(equation, initial_money)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        product = 1\n        for digit in str(i):\n            product *= int(digit)\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10): # Hundreds digit must be between 1 and 9\n        for ten in range(10): # Tens digit must be between 0 and 9\n            for one in range(10): # Ones digit must be between 0 and 9 and even\n                if one % 2 == 0: # The number must be even\n                    if hundred + ten + one == 8 and len({hundred, ten, one}) == 3:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Worst case for getting 5 green beads:\n    # Darrell draws all blue and white beads first\n    blue_beads = 5\n    white_beads = 6\n    # Since we want 5 green beads for sure, we leave 4 green beads\n    green_beads_to_leave = 4\n\n    # Now add 1 to ensure the 5th green bead is drawn\n    beads_to_draw = blue_beads + white_beads + green_beads_to_leave + 1\n\n    return beads_to_draw\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    one_half_of_x = one_fourth_of_16\n    x = one_half_of_x * 2\n    return x\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Number of games played in each group during round-robin.\n    # Each person plays against each other person exactly once in a group of 4.\n    # So games in a group is C(4, 2) which is 4*3/2 = 6 games.\n    games_per_group = (4 * (4 - 1)) // 2\n\n    # As there are 4 groups, total games in group stage,\n    group_stage_games = games_per_group * 4\n\n    # For knockout rounds, there are 8 contestants, so 7 games until the winner (8->4->2->1)\n    knockout_games = 8 - 1\n\n    # Total games are sum of group stage games and knockout games\n    total_games = group_stage_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of days able to finish the job by A alone as a\n    # and the number of days able to finish the job by B alone as b\n    a, b = symbols('a b')\n    \n    # A is twice as good a workman as B, meaning A takes half the time\n    eq1 = Eq(a, b / 2)\n    \n    # A finishes the job in 12 days less than B\n    eq2 = Eq(a + 12, b)\n    \n    # Solve the equations to find A and B's working times\n    solutions = solve((eq1, eq2), (a, b))\n    \n    # Now calculate the number of days they can complete the job together\n    # Work rate of A is 1/a and work rate of B is 1/b\n    # Combined work rate is 1/a + 1/b = 1/Total Time\n    total_time = 1 / (1/solutions[a] + 1/solutions[b])\n    \n    return total_time\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    for num in range(1,1000):  # Range can be adjusted if a larger number is expected\n        if num % 5 == 1 and num % 6 == 1 and num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    return solutions[rachel] + solutions[alice]\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    num_plants = 9\n    num_in_row = 4\n    \n    arrangements = factorial(num_plants) // factorial(num_plants - num_in_row)\n\n    return arrangements\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_end = 489\n    stickers_given = 76\n    stickers_bought = 65\n    \n    stickers_start = stickers_end - stickers_bought + stickers_given\n\n    return stickers_start\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n\n    # pineapple weighs 650g more than an apple\n    equation1 = Eq(pineapple, apple + 650)\n\n    # 3 pineapples and 4 apples weigh 5450g altogether\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if (num % 3 == 2) and (num % 4 == 2) and (num % 5 == 2) and (num % 7 == 0):\n            return num\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    # We know that the factors of a number are paired in multiplication to give the number.\n    # Since 15 and 21 are factors of the number, their least common multiple will give the number.\n    from math import gcd\n\n    # Calculate the least common multiple of 15 and 21\n    lcm = (15 * 21) // gcd(15, 21)\n    \n    # Now we find all the factors of the number lcm\n    factors = []\n    for i in range(1, lcm + 1):\n        if lcm % i == 0:\n            factors.append(i)\n\n    # The question states that the number has 8 factors; this check is just to confirm.\n    if len(factors) != 8:\n        raise ValueError(\"The number does not have exactly 8 factors.\")\n\n    # Return sum of all factors\n    return sum(factors)\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef is_subnumber_divisible(number, divisor):\n    return int(number) % divisor == 0\n\ndef solution():\n    digits = '0123456789'\n    for perm in permutations(digits):\n        if perm[0] == '8':\n            number_str = ''.join(perm)\n            if all(is_subnumber_divisible(number_str[:i], i) for i in range(1, 10)):\n                return int(number_str)\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    # Let x be the number of tomatoes Matthew had initially.\n    # Belinda has 36 tomatoes and after giving 7 to Matthew, they will have the same number.\n    # 36 - 7 = x + 7\n    # x = 36 - 7 - 7\n    x = 36 - 7 - 7\n    return x\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10\n    increased_efficiency_rate = original_rate * (1 + 50/100)\n    return increased_efficiency_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    # Calculate the difference between the numbers\n    difference = abs(2012 - 1274)\n\n    # Function to check if a number is odd\n    def is_odd(n):\n        return n % 2 == 1\n\n    # Function to calculate greatest common divisor for odd divisors only\n    def gcd_odd(a, b):\n        while b:\n            a, b = b, a % b\n        return a if is_odd(a) else 1\n\n    # Find the greatest common divisor that is odd\n    D = gcd_odd(difference, difference)\n\n    # The remainder R when 2012 is divided by D\n    R = 2012 % D\n\n    # Return D - R\n    return D - R\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):  # Since there cannot be more than 7 rabbits, the range is 0 to 7\n        ducks = 7 - rabbits\n        if (rabbits * 4 + ducks * 2) == 20:\n            return rabbits\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Total number of numbers that can be written on the blackboard\n    total_numbers = 52\n    \n    # Numbers that can be written in one turn\n    writable_numbers = [1, 3, 4, 6]\n\n    # Initialize an array to store the winning (True) or losing (False) state for each number\n    dp = [False] * (total_numbers + 1)\n\n    # Strategy:\n    # dp[i] represents the winning state when there are i numbers left to write.\n    # If there's a way for the current player to write a certain number of digits (making dp[i - x] False),\n    # it means the current player can force the next player into a losing state (i.e., dp[i] = True).\n    for i in range(1, total_numbers + 1):\n        dp[i] = not all(dp[i - x] for x in writable_numbers if i - x >= 0)\n\n    # If dp[total_numbers] is True, then the player who starts (Betty) can win by following the strategy.\n    # Otherwise, she should let Abby start.\n    betty_should_start = dp[total_numbers]\n\n    # The strategy for Betty to win: write numbers so that Abby is always faced with a losing state (dp value is False).\n    # This requires analyzing the dp array and choosing to leave a number where dp is False.\n    strategy = 'Betty should go {} and should always leave a number of counts which is losing for the opponent.'.format(\n        'first' if betty_should_start else 'second'\n    )\n\n    return strategy\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    grace_juice = (5/7) * total_juice\n    remaining_juice = total_juice - grace_juice\n    evelyn_juice = (1/9) * remaining_juice\n    juice_left = remaining_juice - evelyn_juice\n\n    return juice_left\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    last_digit_of_4_power = pow(4, 2009, 10)\n    last_digit_of_6_power = pow(6, 2010, 10)\n    ans = (last_digit_of_4_power + last_digit_of_6_power) % 10\n    return ans\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    count = 0\n    total_weight = 63\n    for two_gram_weights in range(total_weight // 2 + 1):\n        for five_gram_weights in range(total_weight // 5 + 1):\n            if 2 * two_gram_weights + 5 * five_gram_weights == total_weight:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    n_8 = 8\n    n_22 = 22\n    n_15 = 15\n    \n    S_8 = 32\n    S_22 = 44\n    \n    a_1 = 2 * S_8 / n_8 - S_22 / n_22\n    d = (S_22 / n_22 - S_8 / n_8) / (n_22 - n_8)\n    \n    S_15 = n_15 * (2 * a_1 + (n_15 - 1) * d) / 2\n    \n    return S_15\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    # Average height of the team\n    team_avg_height = 150\n    # Average height of the four players\n    four_players_avg_height = team_avg_height - 2\n    # Total height of the six players\n    total_height_six_players = team_avg_height * 6\n    # Total height of the four players\n    total_height_four_players = four_players_avg_height * 4\n\n    # Total height of the remaining two players\n    total_height_two_players = total_height_six_players - total_height_four_players\n\n    # Average height of the remaining two players\n    avg_height_two_players = total_height_two_players / 2\n\n    return avg_height_two_players\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the flow rates of the pipes A, B, and C\n    a, b, c = symbols('a b c')\n\n    # Equations based on the problem statement:\n    # 1. a + c = pool_capacity + 18\n    # 2. b + c = pool_capacity + 27\n    # 3. b = 2 * a, flow rate of B is twice that of A\n    pool_capacity = symbols('pool_capacity')\n    equation1 = Eq(a + c, pool_capacity + 18)\n    equation2 = Eq(b + c, pool_capacity + 27)\n    equation3 = Eq(b, 2 * a)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2, equation3), (a, b, c, pool_capacity))\n\n    # Return the solved pool capacity\n    return solution[pool_capacity]\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    score_correct = 4\n    score_incorrect = -2\n    score_unattempted = 0\n    total_score = 66\n    questions_attempted = total_questions - 1\n\n    for correct_answers in range(questions_attempted + 1):\n        incorrect_answers = questions_attempted - correct_answers\n        score = correct_answers * score_correct + incorrect_answers * score_incorrect\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    sum_to_20 = sum(range(1, 21))\n    sum_to_19 = sum(range(1, 20))\n    return sum_to_20 + sum_to_19\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    # There are 5 options for the first letter, \n    # 4 remaining options for the second letter,\n    # 3 remaining options for the third letter,\n    # and 2 remaining options for the last letter\n    ans = 5 * 4 * 3 * 2\n    return ans\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):\n        reversed_age = int(str(age)[::-1]) + 1\n        if reversed_age * 2 == age:\n            return age\n        \nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    for i in range(1, 21):\n        if (20 % i == 0) and ((20 + 10) % i == 10):\n            return i\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_amount = 9.32\n    increase_fraction = 1 / 10\n    increased_amount = original_amount + (original_amount * increase_fraction)\n    return increased_amount\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, solve\n\n    total = symbols('total')\n    first_day = total / 2 + 7\n    second_day = (total - first_day) / 2 - 5\n    third_day = 23\n\n    equation = first_day + second_day + third_day - total\n\n    ans = solve(equation, total)\n\n    return ans[0]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction = 4 / 25\n    decimal_number = 0.17\n\n    return fraction > decimal_number\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    initial_volume = 1000  # Initial volume in the jug in ml\n    cup_volume = 200       # Volume poured into each cup in ml\n    number_of_cups = 3     # Number of cups\n    \n    water_used = cup_volume * number_of_cups\n    water_left = initial_volume - water_used\n    \n    return water_left\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of roses and daisies be r and d respectively.\n    r, d = symbols('r d')\n\n    # Equation 1: Total flowers initially\n    equation1 = Eq(r + d, 300)\n\n    # Equation 2: Roses in the park after a few months\n    equation2 = Eq(r + d, 280 + 180)\n\n    # Use the sympy library to solve the system of equations\n    solutions = solve((equation1, equation2), (r, d))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    terms_apart = 15 - 10\n\n    # Calculate the common difference\n    common_difference = term_difference / terms_apart\n    \n    # Now find the 12th term using the common difference\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    count = 0\n    for i in range(1, 251):\n        if i**0.5 == int(i**0.5):  # Check if i is a perfect square\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 60\n    correct_problems = 10 * 0.20 + 20 * 0.80 + 30 * 0.90\n    overall_percentage = (correct_problems / total_problems) * 100\n    return overall_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Area of the living room floor using the larger bricks in square centimeters\n    area_large_bricks = 80 * (60 * 60)\n    \n    # Area of a single small brick in square centimeters\n    area_small_brick = 64 * 100  # converting square decimeters to square centimeters\n\n    # Number of smaller bricks needed\n    num_small_bricks = area_large_bricks / area_small_brick\n\n    return int(num_small_bricks)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    water, fruit = symbols('water fruit')\n\n    equation1 = Eq(2 * water + 3 * fruit, 2.55)\n    equation2 = Eq(water, fruit + 0.15)\n\n    solutions = solve((equation1, equation2), (water, fruit))\n\n    return solutions[fruit]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    for perm in permutations([1, 3, 4, 5, 7, 8]):\n        number = int(''.join(map(str, perm)))\n        if number % 11 == 0 and number > max_number:\n            max_number = number\n    return max_number\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    more_girls = 30\n    # Let the number of boys be b and the number of girls be g\n    # We have two equations:\n    # g = b + 30 (there are 30 more girls than boys)\n    # b + g = 500 (total number of pupils)\n    # We can substitute g from the first equation into the second to find b\n    # b + (b + 30) = 500\n    # 2b + 30 = 500\n    # 2b = 470\n    # b = 235\n    # Now we can find the number of girls (g)\n    # g = b + 30\n    # g = 235 + 30\n    g = 235 + more_girls\n\n    return g\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    number = 91\n\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False  # Found a divisor, 91 is not prime\n\n    return True  # No divisors found, 91 would be prime\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    # Initialize the total number of boys and girls\n    boys = 0\n    girls = 0\n    \n    # The outer layer can only be boys, since this determines the difference \n    # and the pattern alternates with each subsequent layer.\n    # Since the difference is 31, let's find the square that when reduced by one layer of boys \n    # (i.e., reduced by the perimeter of the square minus four corners), \n    # yields a difference of 31 between boys and girls.\n    layer = 1  # Starting from the smallest possible square\n    while True:\n        # Boys are on the outer layer and girls are on the inner one.\n        # Calculate the number of boys for the current layer\n        # For layer 'i' there are 4 sides each with 'i' boys minus the 4 corners counted twice\n        boys_current_layer = layer * 4 - 4\n        # Add the current layer's boys to the total\n        boys += boys_current_layer\n        # Calculate total girls considering they occupy a square of (layer-2)x(layer-2)\n        girls = (layer - 2) ** 2 if layer > 1 else 0\n\n        # Check if the condition is met\n        if boys - girls == 31:\n            # If met, calculate the total number of students (boys + girls)\n            total_students = boys + girls\n            return total_students\n        else:\n            # Move on to the next outer layer and continue the search\n            layer += 2\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    import math\n\n    # total power of 4's (4 is 2^2) and 25's (25 is 5^2)\n    total_power_of_2 = 2018 * 2\n    total_power_of_5 = 2018 * 2\n\n    # A can be expressed in terms of powers of 10 and 2 because 5^2 * 2^2 = 10^2\n    # and 25 is already a perfect square. The smaller power between 2 and 5 will\n    # determine the power of 10, the rest will be the power of 2.\n    min_power = min(total_power_of_2, total_power_of_5)\n    \n    remaining_power_of_2 = total_power_of_2 - min_power\n\n    # Since A is multiplied by powers of 10, which doesn't change its number\n    # of digits, only the remaining 2s will potentially increase the number of digits\n    # Since log10(2) = 0.3010 (approx), the increase in digits can be calculated by\n    # multiplying the remaining_power_of_2 with log10(2) and take the floor plus one.\n    num_of_digits = math.floor(remaining_power_of_2 * math.log10(2)) + 1\n    num_of_digits += min_power // 2 # A factor of 10 contributes 1 digit\n\n    return num_of_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    ribbon_A = 10\n    ribbon_B = 5 * ribbon_A\n    total_length = ribbon_A + ribbon_B\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n    ans = comb(total_players, team_size)\n    return ans\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n    profit_amount = 5000\n    \n    cost_price_original = selling_price / (1 + profit_percentage / 100)\n    profit_percentage_new = (profit_amount / cost_price_original) * 100\n    \n    return profit_percentage_new\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    # Let x be the total number of apples Mr. Aziz had initially.\n    # After selling 1/5 of the apples, he has (4/5)*x apples left.\n    # After selling 80 apples on Tuesday, he has (4/5)*x - 80 apples.\n    # In the end, he was left with 30% of the apples he had at first, which is (30/100)*x.\n    # Equation: (4/5)*x - 80 = (30/100)*x\n    # Solve for x using algebra.\n\n    # (4/5)x - (30/100)x = 80\n    # (80/100)x - (30/100)x = 80\n    # (50/100)x = 80\n    # x = 80 * (100/50)\n    x = 80 * 2\n\n    # The number of apples he had in the end is 30% of initial x.\n    apples_in_the_end = (30/100) * x\n    return int(apples_in_the_end)\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    # Since each pile has at least 1 ball, we start with 1 ball in each and distribute the remaining 7\n    for x1 in range(1, 8):\n        for x2 in range(1, 8):\n            for x3 in range(1, 8):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_between_Danny_Emily = 0  # Emily is directly behind Danny\n    Emily_front = 25\n    Danny_behind = 16\n\n    total_people = Danny_behind + people_between_Danny_Emily + Emily_front + 2  # +2 for Danny and Emily themselves\n\n    return total_people\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first even number be x\n    x = symbols('x')\n    # The seven consecutive even numbers are x, x+2, x+4, x+6, x+8, x+10, x+12\n    # fourth number is x+6, and one-third of sum of first and seventh numbers is (x + x + 12)/3\n\n    # Setting up the equation based on given conditions\n    equation = Eq(x + 6, (x + (x + 12)) / 3 + 6)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Calculate the sum of the seven even numbers\n    first_number = solution[0]\n    sum_seven_numbers = sum([first_number + 2*i for i in range(7)])\n\n    return sum_seven_numbers\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    pieces = 2\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies / 5\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = (3 / 4) * remainder_cookies\n    \n    return afternoon_cookies\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km = 1.5\n    m_per_km = 1000\n    ans = km * m_per_km\n    return ans\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140\n    sum_remaining_numbers = total_sum - 180\n    average_remaining_numbers = sum_remaining_numbers / 8\n    return average_remaining_numbers\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    purple, yellow, white, red = symbols('purple yellow white red')\n    \n    # Ben has twice as many purple orchids as yellow orchids.\n    equation1 = Eq(purple, 2 * yellow)\n    \n    # Ben has 3 times as many yellow orchids as white orchids.\n    equation2 = Eq(yellow, 3 * white)\n    \n    # There are 38 red and white orchids.\n    equation3 = Eq(red + white, 38)\n    \n    # There are 28 red orchids.\n    red_orchids = 28\n\n    # Solve the equations.\n    solutions = solve((equation1, equation2, equation3), (purple, yellow, white))\n\n    # Total = purple + yellow + white + red \n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + red_orchids\n\n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue = 80\n    red = 2 * blue\n    green = blue + 45\n    total_markers = red + blue + green\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n\n    # since trees are planted at both ends, we add 1 to the total count\n    trees_per_side = (length_of_highway // distance_between_trees) + 1\n\n    # trees are planted on two sides of the highway\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    nth_odd_number = 1 + (20 - 1) * 2\n    return nth_odd_number\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    ans = 2 + 5\n    return ans\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    total_rings = johnny_rings + amber_rings + remaining_rings\n\n    return total_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    age_difference = mike_current_age - eddie_current_age\n\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n\n    return mike_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    \n    total_price = lily_book_price + amy_book_price\n\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    sum_of_interior_angles = (sides - 2) * 180\n    interior_angle = sum_of_interior_angles / sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    total = 0\n    for i in range(1, 21):\n        total += int(\"5\" * i)\n    ans = total % 10000\n    return ans\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    # Number of man-days required to build one wall\n    man_days_per_wall = 2 * 3\n    \n    # Number of man-days required to build x walls\n    man_days_for_x_walls = man_days_per_wall * x\n\n    # Time required for y men to build x walls\n    time_for_y_men_to_build_x_walls = man_days_for_x_walls / y\n\n    return time_for_y_men_to_build_x_walls\n\n# Assuming we need to know for y men and x walls as function parameters\nx = 5  # Example value for x walls\ny = 10  # Example value for y men\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    percent_men = 25 / 100\n    fraction_women = 1 / 5\n\n    num_men = total_people * percent_men\n    num_women = total_people * fraction_women\n    num_children = total_people - (num_men + num_women)\n\n    return int(num_children)\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 9 == 0 and number % 2 != 0:\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                return number\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = sum([72, 60, 48, 36, 24, 12])\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Assuming that the description \"(insert pic)\" refers to a missing image that\n    # depicts a pattern, and since there's no further data provided, I'm unable \n    # to write code to solve an unknown pattern. \n\n    # This is a placeholder return value as there is no specific pattern provided \n    # in the question.\n    return None\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # There are 3 colors, so to ensure we get 2 balls of the same color,\n    # we use the Pigeonhole Principle with n+1 draws where n is the number of colors.\n\n    # Therefore, we'll need to draw 3 + 1 = 4 times to ensure at least two balls of the same color.\n    ans = 4  # This is because even if we draw one of each color first, the fourth draw must be the same color as one already drawn.\n    return ans\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    ans = 42 // 6\n    return ans\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    total_shirts = 72\n    # Let the number of checked shirts be x\n    # number of white shirts will be 7 * x\n    # Thus: x + 7 * x = total_shirts (72)\n    x = symbols('x')\n    equation = Eq(x + 7 * x, total_shirts)\n    number_of_checked_shirts = solve(equation, x)[0]\n    number_of_white_shirts = 7 * number_of_checked_shirts\n    return number_of_white_shirts\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 4)\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    total_children = 390\n    \n    equation1 = Eq((1/3) * girls, (1/2) * boys)\n    equation2 = Eq(boys + girls, total_children)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We are given the following congruences:\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n    # x ≡ 5 (mod 6)\n    congruences = [(3, 4), (4, 5), (5, 6)]\n\n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    x, _ = solve_congruence(*congruences)\n\n    # Since we need a number less than 60, we find the smallest x that satisfies the conditions\n    while x >= 60:\n        x -= 4 * 5 * 6  # Because the least common multiple of 4, 5, and 6 is 4*5*6\n\n    return x\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def S(n):\n    return sum(int(digit) for digit in str(n))\n\ndef solution():\n    m = 1\n    while True:\n        if S(m) == 5 * S(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    jan_to_apr = 300 * 4\n    may_to_jul = 250 * 3\n    aug_to_sep = 750\n    oct_to_dec = 300 * 3\n\n    total_amount = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    total_months = 12\n    average_spent = total_amount / total_months\n\n    return average_spent\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters = 24\n    whole_number = (three_quarters * 4) / 3\n\n    return whole_number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - (2 / 100)\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n\n    temperature_drop = temperature_bottom - temperature_top\n\n    return temperature_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age_now = 10\n    father_age_future = 70\n    age_difference = father_age_future - tom_age_now\n    father_age_now = tom_age_now + age_difference\n    return father_age_now\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_fraction = 9 / 20\n    women_percentage = 30 / 100\n    \n    men_count = total_passengers * men_fraction\n    women_count = total_passengers * women_percentage\n    \n    children_count = total_passengers - men_count - women_count\n    \n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jordan, evie, emily = symbols('jordan evie emily')\n    total_votes = 400\n\n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, total_votes)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"0735\", \"%H%M\")\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n    arrival_time = departure_time + journey_duration + walk_duration\n    return arrival_time.strftime(\"%H%M\")\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    ans = []\n    for N in range(200):\n        if sum(int(digit) for digit in str(base4)) == 5 \\\n           and sum(int(digit) for digit in str(base6)) == 8 \\\n           and sum(int(digit) for digit in str(base8)) == 9:\n            ans.append(N)\n    return ans\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are three options for each digit: 0, 2, or 3\n    # However, for the first digit, we can't have 0, so there are only two options for the first position\n    \n    # Number of options for the first digit (hundreds place)\n    first_digit_options = 2\n    \n    # Number of options for the second and third digits (tens and units places)\n    second_digit_options = third_digit_options = 3\n    \n    # Total number of combinations is the product of the options for each digit\n    total_combinations = first_digit_options * second_digit_options * third_digit_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_six_hotdogs = 1.10\n    cost_per_hotdog = cost_six_hotdogs / 6\n    cost_twelve_hotdogs = cost_per_hotdog * 12\n    return cost_twelve_hotdogs\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16  # in pence\n    total_money = 200  # in pence (£2 = 200p)\n    num_bags = total_money // price_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    difference = 14\n    # Let Chip's initial amount be x\n    # Then Dale's initial amount is x - 14\n    # After giving away, Chip has x - 14 acorns\n    # Dale has x acorns because he received 14 from Chip\n    # The total is still 124, hence 2*x - 14 = 124\n    # Solving for x gives us the initial amount Chip had\n    x = (total_acorns + difference) // 2\n    return x\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for number in range(100):\n        if number % 2 == 0 and number % 4 == 0 and number % 3 == 0:\n            if (number ** 0.5).is_integer():\n                return number\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))\n    ans = 51 // min(primes)\n    return ans\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for i in range(10, 100):\n        if i % 4 == 2 and i % 5 == 2:\n            return i\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2  # Sum of fiction and comic books\n    fiction_books = 6\n    comic_books = 2\n\n    # Using the formula for permutations of identical items:\n    # n! / (n1! * n2! * ... * nk!)\n    ans = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    \n    return ans\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    novels, science_books = symbols('novels science_books')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (novels, science_books))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum((-1)**(i+1)*i for i in range(1, 41))\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02  # 2%\n\n    interest = initial_amount * interest_rate\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    pages_4 = 4\n    pages_3 = 3\n\n    for penpals_3 in range(total_penpals + 1):\n        penpals_4 = total_penpals - penpals_3\n        if penpals_3 * pages_3 + penpals_4 * pages_4 == total_pages:\n            return penpals_3\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 24 == 0 and i // 24 == 36:\n            return i\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    apples_pie_g = 750\n    apples_juice_g = 1025\n    \n    # Convert grams to kilograms\n    apples_pie_kg = apples_pie_g / 1000\n    apples_juice_kg = apples_juice_g / 1000\n    \n    # Subtract the used apples from the total\n    remaining_apples_kg = total_apples_kg - (apples_pie_kg + apples_juice_kg)\n    \n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 15\n\n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    number_of_weeks = 4\n\n    growth_per_week = (final_height - initial_height) / number_of_weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # The worst case is that we draw all balls of two colors first.\n    # This would mean we have drawn 5 red and 5 white for example.\n    # Therefore, the next ball we draw, regardless of its color, will ensure\n    # we have 3 different colored balls.\n    # So the minimum number of draws to ensure 3 different colors is:\n    max_same_color_balls = 5  # since there are 5 balls of each color\n    draws = (max_same_color_balls * 2) + 1\n    return draws\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the two pieces of the ribbon\n    x, y = symbols('x y')\n    \n    # Equation representing the relationship between the lengths of the two pieces (one is twice as long as the other)\n    equation1 = Eq(y, 2 * x)\n    \n    # Equation representing the total length of the ribbon\n    equation2 = Eq(x + y, 12.75)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Return the length of the longer piece\n    return solutions[y]\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    # Favorite book is the 14th from the left\n    favorite_from_left = 14\n    # There are 6 books to the right of the favorite\n    books_to_right_of_favorite = 6\n\n    # Total books = Books to the left of the favorite (including the favorite) + Books to the right of the favorite\n    total_books = favorite_from_left + books_to_right_of_favorite\n\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200\n    new_volume = original_volume * (1/2)**3\n    return new_volume\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    gigi_before, lily_before = symbols('gigi_before lily_before')\n    \n    gigi_after = 120 + gigi_before\n    lily_after = 24 + lily_before\n    \n    equation1 = Eq(gigi_after, 3 * lily_after)\n    equation2 = Eq(gigi_before, lily_before)\n    \n    solutions = solve((equation1, equation2), (gigi_before, lily_before))\n    \n    return solutions[gigi_before]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n\n    not_prime_count = sum(1 for i in range(1, 21) if not isprime(i))\n    return not_prime_count\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    ans = 694 * 27\n    return ans\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    for age_difference in range(1, 100):\n        brian_age = 14 + age_difference\n        father_age = 41 + age_difference\n        \n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # hundreds digit; odd and cannot be zero\n        for j in range(10):    # tens digit\n            for k in range(10):  # ones digit\n                if i + j + k == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    time_to_boil_one_egg = 5\n    return time_to_boil_one_egg\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    capacity = 6\n    min_cabins = (students + capacity - 1) // capacity\n    return min_cabins\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a1, a2, a3, a4, aN, d, N = symbols('a1 a2 a3 a4 aN d N')\n    # first four sums to 124\n    equation1 = Eq(a1 + (a1 + d) + (a1 + 2*d) + (a1 + 3*d), 124)\n    # last four sums to 156\n    equation2 = Eq(aN + (aN - d) + (aN - 2*d) + (aN - 3*d), 156)\n    # total sum to 210\n    equation3 = Eq(N*(a1 + aN)/2, 210)\n    \n    # Two extra equations for the nth term and the relationship between first and nth term\n    equation4 = Eq(a1 + (N-1)*d, aN)\n    equation5 = Eq(a1 + 10*d, aN)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (a1, aN, d, N))\n    \n    # Get the number of terms, N, which should be an integer\n    # We can iterate over solutions as solve might return multiple valid solutions\n    for potential_solution in solutions:\n        if potential_solution[N].is_Integer:\n            return potential_solution[N]\n    return None\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough_kg = 11.16\n    dough_per_cookie_g = 45\n    dough_per_brownie_g = 150\n    cookies_baked = 240\n    brownies_baked = 2\n    \n    dough_used_for_cookies_kg = (dough_per_cookie_g * cookies_baked) / 1000\n    dough_used_for_brownies_kg = (dough_per_brownie_g * brownies_baked) / 1000\n    \n    dough_left_kg = total_dough_kg - (dough_used_for_cookies_kg + dough_used_for_brownies_kg)\n    \n    return dough_left_kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    calories_today = symbols('calories_today')\n\n    inequality = Eq(calories_today < calories_yesterday, True)\n\n    return inequality\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    # Reverse the operation of the second day\n    biscuits_after_first_day = (remaining_biscuits + 2) * 2\n    # Reverse the operation of the first day\n    total_biscuits = (biscuits_after_first_day + 4) * 2\n    return total_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    initial_amount = 100\n    total_days = 15\n\n    # Determine the number of full cycles (deposit & spend days)\n    cycle_length = 2  # days\n    full_cycles = total_days // cycle_length\n\n    # Calculate the net change in money for each full cycle\n    cycle_net_change = (5 - 8)  # deposit 5 and then spend 8\n\n    # Calculate the total net change for all full cycles\n    total_net_change = full_cycles * cycle_net_change\n\n    # Check if there's an extra day (odd day) and add the amount for that day\n    if total_days % cycle_length == 1:\n        total_net_change += 5  # deposit on the 15th day\n\n    # Calculate the final amount of money\n    final_amount = initial_amount + total_net_change\n\n    return final_amount\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    pattern_length = len(pattern)\n    index = (1004 - 1) % pattern_length\n    ans = pattern[index]\n    return ans\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    number_of_children = 5\n\n    wine_gums_per_child = total_wine_gums // number_of_children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    difference = 3\n    n = (298 - 10) // difference + 1\n    sum_of_series = n * (2 * first_term + (n - 1) * difference) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    sum = 0\n    for i in range(1, 1001):\n        sum += i\n    return sum\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friends, chocolates = symbols('friends chocolates')\n\n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - chocolates, 34)\n\n    solutions = solve((equation1, equation2), (friends, chocolates))\n\n    remaining_chocolates = solutions[chocolates] - 20 * solutions[friends]\n\n    return remaining_chocolates\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    # We are going to check each 3-digit number to find which one satisfies exactly three conditions\n    for num in range(100, 1000):\n        # Checking each condition\n        condition_A = num % 27 == 0  # multiple of 27\n        condition_B = num % 7 == 0   # multiple of 7\n        condition_C = sum(map(int, str(num))) == 17  # sum of digits is 17\n        condition_D = int(num**0.5)**2 == num  # perfect square\n        condition_E = 89100 % num == 0  # factor of 89100\n\n        # Check if exactly three conditions are true\n        conditions = [condition_A, condition_B, condition_C, condition_D, condition_E]\n        if sum(conditions) == 3:\n            return num\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_amount = 200\n    spent_on_book = 0.15 * initial_amount\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = 0.30 * remaining_after_book\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    ans = 5992 // 7\n    return ans\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Let's denote the number of push-ups Mulan can do as 'm'\n    # According to the question, Mulan can do more push-ups than the best boy soldier\n    # The best boy soldier can do 50 push-ups, therefore Mulan can do more than 50 push-ups\n    # We can represent this fact with an inequality: m > 50\n    # Since we are to return an inequality as a string, we do the following\n\n    return \"m > 50\"\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_needed = 40\n    blown_up = 22\n    burst = 3\n    still_need = total_needed - (blown_up - burst)\n    return still_need\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    teams = 32\n    total_games = teams - 1  # In a knockout tournament, total games = total teams - 1\n    games_played = 29\n    remaining_games = total_games - games_played\n\n    return remaining_games\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    least_pieces = 1\n    while True:\n        children_pieces = [least_pieces + i for i in range(8)]\n        if sum(children_pieces) > 88:\n            break\n        least_pieces += 1\n    return children_pieces[-1] - 1\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Tom takes 4 stones from Stack B, so we have:\n    # Stack A = 20, Stack B = 16\n    # For Jerry to win, Jerry should aim to leave Tom with stacks in such a\n    # way that Tom can't win in the next move no matter what he does.\n    # To achieve this, Jerry should make the two stacks contain an equal\n    # number of stones. Because if both stacks have equal stones, no matter\n    # how many stones Tom takes from any stack, Jerry can always take the\n    # same amount from the other stack, leading to a win eventually.\n\n    # So Jerry must take 4 stones from Stack A to make both stacks equal.\n    # Stack A = 16, Stack B = 16 (after Jerry's move)\n\n    stack_A = 20\n    stack_B = 16\n    take_from_A = stack_A - stack_B\n\n    return (take_from_A, 'A')\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    num1 = 15\n    num2 = 37\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    liters_per_pail = 4\n    remaining_liters = 7\n    \n    original_volume = pails_filled * liters_per_pail + remaining_liters\n    \n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let x be the number of girls\n    # According to the ratio 7:9, for every 7 girls, there are 9 boys\n    # Hence, the number of boys would be (7/9)x + 16\n    \n    # Setup the equation according to the ratio and the condition given\n    # 9/7 * number of girls (x) = number of boys (x + 16)\n    # Solve for x:\n    x = (16 * 7) / (9 - 7)  # Simplified equation (9x = 7x + 16 * 9)\n    \n    # Total number of students is the sum of boys and girls\n    total_students = x + (9/7 * x)\n\n    return int(total_students)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_total = sum([1 + 3 * i for i in range(37)])  # Sum of the sequence without mistake\n    difference = correct_total - 2011  # Difference caused by the mistake\n    mistake_number = difference // 6  # Every mistake cause a difference of 6 (3 for adding and 3 for subtracting)\n    who_made_mistake = 1 + (mistake_number + 1) // 3\n    return who_made_mistake\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Given an arithmetic sequence with 5 consecutive natural numbers\n    # and the sum of the sequence is 160, we need to find the largest term.\n\n    # Let the middle term (3rd term) be 'm', since the numbers are consecutive\n    # the sequence will be (m-2), (m-1), m, (m+1), (m+2)\n    # We can set up the following equation based on the sum of these terms:\n    # (m-2) + (m-1) + m + (m+1) + (m+2) = 160\n    # Simplify to get: 5m = 160\n    # Solve for m:\n    m = 160 // 5\n\n    # Since we want the largest term, which is (m+2):\n    return m + 2\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):\n        for units in range(10):\n            M = hundreds * 100 + units  # tens place is 0\n            S = hundreds + units\n            if M == 67 * S:\n                reversed_M = int(str(M)[::-1])\n                return reversed_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200 # converting 2 meters to cm\n    piece_length_cm = 6\n    \n    num_pieces = stick_length_cm // piece_length_cm\n    \n    return num_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    return 2.7 + 5.31 - 0.08\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "def solution():\n    from math import comb\n    ans = comb(10, 7)\n    return ans\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    from fractions import Fraction\n\n    # Main fraction given\n    main_fraction = Fraction(13, 10)\n    # Subtract 1 to get the fraction part alone\n    fraction_part = main_fraction - 1  # This results in 3/10\n\n    # Reverse the fraction to start calculating c, b, a\n    reversed_fraction = 1 / fraction_part  # This gives 10/3\n\n    # Find c as the integer part of the reversed fraction\n    c = int(reversed_fraction)  # This gives 3\n    # Subtract c to find the next fraction\n    next_fraction = reversed_fraction - c  # 1/3\n\n    # Repeat the process for b\n    reversed_fraction = 1 / next_fraction  # This gives 3\n    b = int(reversed_fraction)  # 3\n    next_fraction = reversed_fraction - b  # 0\n\n    # Repeat the process for a\n    a = int(1 / next_fraction) if next_fraction != 0 else 0  # As the next_fraction is 0, a can be any whole number. \n            # Since 'a' does not affect the initial condition (as any value would satisfy 1/0), we can adopt the simplest, a = 0.\n\n    # Calculate final value of a + 2b + 3c\n    result = a + 2 * b + 3 * c\n\n    return result\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # Since the ones digit of powers of 8 cycles every 4 powers:\n    # 8^1 → 8, 8^2 → 4, 8^3 → 2, 8^4 → 6, then repeats\n    # We find the equivalent power within the cycle\n    power_cycle = 30 % 4  # This gives the position of the power in the cycle\n    \n    # Setting up the cycle of ones digits for powers of 8\n    ones_cycle = [8, 4, 2, 6]\n    \n    # Get the ones digit for the 30th power of 8\n    ones_digit = ones_cycle[power_cycle - 1]  # Subtract 1 to account for zero-indexing\n    \n    return ones_digit\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n    days = total_pages / pages_per_day\n    return int(days)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n    total_points = 52\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        points = correct_answers * correct_points + incorrect_answers * incorrect_points\n        if points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "from math import factorial\n\ndef nCr(n, r):\n    return factorial(n) // (factorial(r) * factorial(n - r))\n\ndef solution():\n    for days in range(1, 100):\n        if nCr(days + 10 - 1, 10 - 1) > 100:\n            return days - 1\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    # Arithmetic sequence sum formula: sum = n/2 * (first_term + last_term)\n    # where n is the number of terms\n    first_term = 10\n    last_term = 155\n    common_difference = 5\n\n    # Calculate the number of terms n\n    n = ((last_term - first_term) // common_difference) + 1\n\n    # Calculate the sum\n    sum_of_sequence = n / 2 * (first_term + last_term)\n    \n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n    ans = right_side / left_side\n    return ans\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    equation = Eq(girls + boys, 100)\n    difference = Eq(girls - boys, 12)\n\n    solutions = solve((equation, difference), (girls, boys))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 21):\n        if number % 6 == 1:\n            total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600  # total weight of the sugar solution\n    concentration_of_sugar = 0.48  # concentration of sugar in the solution\n\n    sugar_weight = total_weight * concentration_of_sugar  # weight of sugar\n    water_weight = total_weight - sugar_weight  # weight of water\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    return 53.4 - 2.5\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    num_repeats = 9\n    number_to_add = 5\n    sum_result = number_to_add * num_repeats\n\n    return sum_result\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Let the age of the youngest dwarf be x.\n    # Since their ages form an arithmetic sequence (consecutive years),\n    # the next two youngest dwarfs will have ages x+1 and x+2. \n    # Their total age will thus be x + (x+1) + (x+2).\n    # According to the question, x + (x+1) + (x+2) = 42.\n    # Simplify to 3x + 3 = 42, solve for x to find the age of the youngest dwarf.\n\n    x = (42 - 3) // 3  # x is the age of the youngest dwarf\n    \n    # The ages of the oldest three dwarfs will then be the next three terms\n    # in the arithmetic sequence, which are: x+4, x+5, and x+6 (since the dwarfs are born\n    # in consecutive years).\n    # The sum of their ages will be x+4 + (x+5) + (x+6).\n\n    oldest_three_sum = (x+4) + (x+5) + (x+6)\n    return oldest_three_sum\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d')\n    abcd = 1000 * a + 100 * b + 10 * c + d\n    abc = 100 * a + 10 * b + c\n    ab = 10 * a + b\n\n    equation = Eq(abcd + abc + ab + a, 1370)\n\n    solutions = solve(equation, (a, b, c, d))\n\n    abcd_value = solutions[a] * 1000 + solutions[b] * 100 + solutions[c] * 10 + solutions[d]\n\n    return abcd_value\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_goals = sum(goals) / len(goals)\n    return mean_goals\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    # Adding the whole numbers and fractions separately\n    whole_numbers = 19 + 199 + 1999 + 19999 + 199999\n    fractions_sum = 4/5 * 5  # As there are 5 terms\n    \n    # Combine the two sums (since the fractions sum to a whole number)\n    ans = whole_numbers + fractions_sum\n    return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    amount_pence = 408\n    fraction = 5 / 8\n\n    result = amount_pence * fraction\n\n    return result\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    total_current_age = janice_age + sister_age\n\n    years_until_total_35 = (35 - total_current_age)\n\n    return years_until_total_35\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_remaining_test = total_marks_for_3_tests - 172\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad, son = symbols('dad son')\n\n    # dad's age six years ago was 5 times son's age six years ago\n    equation1 = Eq(dad - 6, 5 * (son - 6))\n    # The sum of the ages of dad and son this year is 78\n    equation2 = Eq(dad + son, 78)\n\n    solutions = solve((equation1, equation2), (dad, son))\n\n    # We return the age of dad this year\n    return solutions[dad]\n    \nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        ans += i * (1/i) # i/i will just add 1 to the total sum\n        for j in range(1, i):\n            ans += 2 * (j/i) # each j/i is counted twice in the sequence\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for the number of each type of sweet\n    fruit_drops, milk_chocolates, total_sweets = symbols('fruit_drops milk_chocolates total_sweets')\n\n    # Now we define the equations based on the problem statement\n    equation1 = Eq(fruit_drops, 6)  # Eddie bought 6 fruit drops\n    equation2 = Eq(fruit_drops, 2/7 * milk_chocolates)  # 6 fruit drops is 2/7 of milk chocolates\n    equation3 = Eq(milk_chocolates, 3/4 * total_sweets)  # milk chocolates is 3/4 of total sweets\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (fruit_drops, milk_chocolates, total_sweets))\n\n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    football, volleyball = symbols('football volleyball')\n\n    # 1 football and 2 volleyballs costs $60\n    equation1 = Eq(football + 2 * volleyball, 60)\n\n    # 2 footballs costs $60 - $16 (the amount returned)\n    equation2 = Eq(2 * football, 60 - 16)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (football, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from statistics import median, mean, mode\n    from itertools import combinations_with_replacement\n\n    # Since we know the range is 6 and the mode is 7, \n    # the ages must start from 7 and go up to 7+6=13\n    possible_ages = range(7, 14) # 7 to 13 inclusive\n\n    # Use combinations_with_replacement to create all combinations of team ages\n    for ages in combinations_with_replacement(possible_ages, 5):\n        if mean(ages) == 9 and median(ages) == 8 and mode(ages) == 7:\n            return sorted(ages)[-2] # Second oldest\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    total = 1000\n    less_number = 630\n    ans = total - less_number\n    return ans\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    num_terms = (49 - 1) // 2 + 1\n    sum_seq = num_terms * (1 + 49) / 2\n    return int(sum_seq)\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n\n    # There are 3 books to arrange and the number of arrangements\n    # is given by the number of permutations of these 3 books.\n    # The formula for permutations of n objects is n!.\n\n    num_books = 3  # one math, one English, and one science book\n\n    num_arrangements = factorial(num_books)\n\n    return num_arrangements\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "import math\n\ndef solution():\n    # A cannot stand on the first or the last, so there are 3 positions for A.\n    positions_for_A = 3\n    \n    # After placing A, we have 4 people left to arrange in the remaining 4 positions.\n    # This can be done in 4! (factorial) ways.\n    arrangements_for_others = math.factorial(4)\n\n    # The total number of ways is the product of the positions for A and the arrangements for others.\n    total_ways = positions_for_A * arrangements_for_others\n\n    return total_ways\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    num_rounds = math.ceil(math.log(num_people, 2))\n    return num_rounds\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # We need to check all the possible 4-digit numbers\n    for num in range(1000, 10000):\n        num_str = str(num)\n        # All digits must be unique\n        if len(set(num_str)) != 4:\n            continue\n        # Conditions based on the conversation\n        if num_str[0] == '1' and num_str[2] == '7' and num_str[1] != '7' and num_str[3] != '3':  # First response condition\n            if (num_str[0] != '2' and num_str[1] != '7' and num_str[2] == '4' and num_str[3] == '5'):  # Second response condition\n                if (num_str[0] != '3' and num_str[1] != '5' and num_str[2] != '4' and num_str[3] != '1'):  # Third response condition\n                    return int(num_str)\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Assume the number of yellow flowers is y\n    # The number of red flowers is 3 times the yellow flowers, so we have r = 3y\n    # The number of pink flowers is 7 fewer than the yellow flowers, so we have p = y - 7\n    # We're given that p = 3 (there are 3 pink flowers)\n\n    # Assign the known value of pink flowers to p\n    p = 3\n    # Using the relation p = y - 7, we can find the number of yellow flowers\n    y = p + 7\n    # Now, we use the relation r = 3y to find the number of red flowers\n    r = 3 * y\n    \n    # The question asks for the total number of red and yellow flowers\n    total_red_and_yellow = r + y\n    \n    return total_red_and_yellow\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume the number of girls in the morning is g\n    # Then the number of boys in the morning is 1.5g\n    # After 12 boys and 12 girls joined, the number of boys is 1.5g + 12, and the number of girls is g + 12\n    # The ratio of boys to girls becomes 19 : 14\n    # Thus, the equation: (1.5g + 12) / (g + 12) = 19 / 14\n\n    g = symbols('g')\n    equation = Eq((1.5 * g + 12) / (g + 12), 19 / 14)\n\n    # solve the equation for g\n    num_girls_morning = solve(equation, g)[0]\n\n    # Calculate the number of boys in the morning\n    num_boys_morning = 1.5 * num_girls_morning\n\n    # Calculate the total number of children in the afternoon\n    total_children_afternoon = (num_boys_morning + 12) + (num_girls_morning + 12)\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime(\"17:30\", \"%H:%M\")\n    delay = timedelta(minutes=30)\n    actual_arrival_time = scheduled_time + delay\n    return actual_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    initial_ratio = Eq(apples / oranges, 3/8)\n    new_ratio = Eq((apples - 1) / oranges, 1/3)\n\n    solutions = solve((initial_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit goes from 1 to 9\n        for tens in range(0, 10):  # Tens digit goes from 0 to 9\n            for units in range(0, 10):  # Units digit goes from 0 to 9\n                if hundreds > tens and units > tens:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n\n    def count_derangements(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n\n    ans = count_derangements(6)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    # Equation representing the cost relationship between table and chair\n    equation1 = Eq(table, 2 * chair)\n    # Equation representing the total cost of two tables and three chairs\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    # Solving the system of equations for the price of each table\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_money = 48\n    total_classmates = 10\n    notebook_price = 3\n    colour_pencils_price = 9\n    \n    # Maximum number of color pencils she can buy if she buys no notebooks\n    max_colour_pencils = total_money // colour_pencils_price\n    \n    for colour_pencils in range(max_colour_pencils, -1, -1):\n        remaining_money = total_money - (colour_pencils * colour_pencils_price)\n        notebooks = remaining_money // notebook_price\n        if notebooks + colour_pencils == total_classmates:\n            return colour_pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    rows_first_floor = 9\n    seats_per_row_first_floor = 36\n\n    students_first_floor = rows_first_floor * seats_per_row_first_floor\n    students_second_floor = total_students - students_first_floor\n\n    return students_second_floor\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    last_term = 56\n    ratio = last_term // 28  # or directly 2\n    next_term = last_term * ratio\n\n    return next_term\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the first of the six consecutive even numbers\n    x = symbols('x')\n\n    # The sum of six consecutive even numbers is x + (x+2) + (x+4) + (x+6) + (x+8) + (x+10)\n    sum_eq = Eq(x + (x+2) + (x+4) + (x+6) + (x+8) + (x+10), 510)\n\n    # Solve for x\n    solution_x = solve(sum_eq, x)[0]\n\n    # Calculate the six numbers\n    numbers = [solution_x + 2*i for i in range(6)]\n\n    # The mean is the sum divided by the number of terms\n    mean = sum(numbers) / len(numbers)\n\n    # The median is the average of the third and fourth terms of the series\n    median = (numbers[2] + numbers[3]) / 2\n\n    # The difference between the mean and the median\n    difference = mean - median\n\n    return difference\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    prime_factor_2 = 0\n    prime_factor_5 = 0\n    \n    for i in range(1, 51):\n        n = i\n        while n % 2 == 0:\n            prime_factor_2 += 1\n            n //= 2\n        while n % 5 == 0:\n            prime_factor_5 += 1\n            n //= 5\n    \n    # The number of zeros is equal to the lesser number of (2, 5) pairs since 10 = 2 * 5.\n    num_zeros = min(prime_factor_2, prime_factor_5)\n    \n    return num_zeros\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cards Helen has now\n    # Let y be the number of cards Oliver has now\n    x, y = symbols('x y')\n\n    # Original number of cards\n    original_helen = 18\n    original_oliver = 22\n\n    # After the game\n    equation1 = Eq(x - y, 10)  # Helen has 10 more cards than Oliver\n    equation2 = Eq(original_helen + original_oliver, x + y)  # Total number of cards doesn't change\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    card_A_value = 40\n    card_B_value = card_A_value / 2\n    card_C_value = card_B_value / 2\n    total_value = card_A_value + card_B_value + card_C_value\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    concentration = 0.65\n    sugar_weight = total_weight * concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    climbed_up = 23\n    climbed_down = 31\n    climbed_up_again = 17\n    \n    final_height = initial_height + climbed_up - climbed_down + climbed_up_again\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    ans = 94 * 38\n    return ans\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "import math\n\ndef solution():\n    N = 5**100\n    num_digits = int(math.log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    ans = 25 * 71\n    return ans\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of strawberries at first\n    x = symbols('x')\n\n    # Create the equations based on the problem\n    equation = Eq((x + 448) - 900, x / 2)\n\n    # Solve for x\n    mass_of_strawberries = solve(equation, x)[0]\n\n    return mass_of_strawberries\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the first number be x\n    # Then the other four numbers would be x + 1, x + 2, x + 3, and x + 4\n    # The sum of these 5 consecutive numbers is 40\n    # So we set up the equation x + (x+1) + (x+2) + (x+3) + (x+4) = 40\n    # This simplifies to 5x + 10 = 40\n    # Solving for x gives us x = (40 - 10) / 5\n    x = (40 - 10) / 5\n    # x would be the value of the smallest number\n    return x\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    number = symbols('number')\n\n    # Create the equation according to the problem\n    equation = Eq(3 * number - 8, 4)\n\n    # Solve for the number\n    solution = solve(equation, number)\n\n    # Extract the solution\n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    # We subtract 1 to exclude the number 1, which is neither prime nor composite.\n    composite_numbers = total_numbers - prime_numbers - 1\n    \n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2000):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    from itertools import permutations\n\n    # Get all permutations of the digits without repetition\n    digits = '0134689'\n    perm = [''.join(p) for p in permutations(digits) if p[0] != '0']\n\n    # Filter the numbers which are multiples of 9\n    multiples_of_nine = [int(p) for p in perm if int(p) % 9 == 0]\n\n    # Sort to find the largest (M) and smallest (N) numbers\n    multiples_of_nine.sort()\n    M = multiples_of_nine[-1]\n    N = multiples_of_nine[0]\n\n    # Compute (M - N) / 9\n    result = (M - N) // 9\n\n    return result\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    initial_sweets = 33\n    given_away = 8\n    remaining_sweets = initial_sweets - given_away\n    return remaining_sweets\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    n_4 = 39\n    n_12 = 57\n    position_diff = 12 - 4\n    sequence_difference = (n_12 - n_4) / position_diff\n    first_term = n_4 - (3 * sequence_difference)\n    return first_term\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = [1, 3, 5, 2]\n    digits.sort(reverse=True)\n    largest_number = int(''.join(map(str, digits)))\n    return largest_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4000404\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    total_salt = 30 * 0.30 + 20 * 0.20\n    target_concentration = 0.10\n    total_mass_before_adding_water = 30 + 20\n    water_to_add = total_salt / target_concentration - total_mass_before_adding_water\n    return water_to_add\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_sum = 987\n    incorrect_addend = 540\n    correct_addend = 450\n    difference = incorrect_addend - correct_addend\n    correct_sum = incorrect_sum - difference\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Create a symbol for the unknown integer\n    box = symbols('box')\n    \n    # Set up the equation according to the puzzle\n    equation = Eq(box * box + box, 380)\n    \n    # Solve the equation for the unknown integer\n    solutions = solve(equation, box)\n    \n    # Filter out non-integer solutions (if any), and return the positive integer\n    for solution in solutions:\n        if solution.is_integer and solution > 0:\n            return solution\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # in meters per minute\n    vicky_speed = 250  # in meters per minute\n    race_distance = 3000  # in meters\n    \n    johnson_time = race_distance / johnson_speed\n    vicky_time = race_distance / vicky_speed\n    \n    time_difference = vicky_time - johnson_time\n    \n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To make sure to have 29 balls of one color, we need to consider the worst case scenario.\n    # If we start picking balls and want to make sure we have at least 29 balls of the same color,\n    # we need to go through the worst case of picking all the other balls.\n    \n    # So we could pick all 40 red balls and all 30 white balls and still not have 29 of the same color.\n    # After picking all red and white balls, the next ball must be blue, giving us 29 blue balls.\n    # But we need 28 balls of another color and 10 of the last color.\n    # Since we already got 30 white balls, we cannot have 28 of red or white; therefore, we must have 28 blue.\n    # So we need at least one more than all red and all white to ensure 28 blue balls.\n    # And then we have to pick 10 more balls to ensure we have 10 of the last color.\n    \n    total_balls = 40 + 30 + 1 + 10  # 40 red, 30 white, 1 to ensure 28 blue ones, and 10 more to get 10 of the last color\n    return total_balls\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # According to the Pigeonhole Principle, to guarantee at least 3 cards with the same number,\n    # we can draw all different numbers in all suits plus one additional card.\n\n    # Total suits\n    total_suits = 4\n    # Maximum different numbers that can be drawn without exceeding 2 cards per number\n    max_diff_numbers = 2\n\n    # Calculate the total number of draws needed\n    total_draws = (total_suits * max_diff_numbers) + 1\n\n    return total_draws\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n    \n    prime_numbers = list(primerange(1, 21))\n    total_numbers = 20\n    \n    proportion = len(prime_numbers) / total_numbers\n    \n    return proportion\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_known = sum(known_numbers)\n    mean_value = 8\n    total_numbers = 8\n    \n    # total = mean * number_of_values\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - total_known\n    \n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let \"x\" be the volume in liters transferred from each bottle\n    x = symbols('x')\n\n    # Volume of lime in Bottle A initially\n    lime_in_A = 5 * 0.10\n\n    # Volume of lime in Bottle B initially\n    lime_in_B = 3 * 0.20\n\n    # Volume of lime in Bottle A after transfer\n    lime_in_A_after = lime_in_A - (0.10 * x) + (0.20 * x)\n\n    # Volume of lime in Bottle B after transfer\n    lime_in_B_after = lime_in_B - (0.20 * x) + (0.10 * x)\n\n    # Total volume in Bottle A after transfer\n    volume_A_after = 5 - x + x\n\n    # Total volume in Bottle B after transfer\n    volume_B_after = 3 - x + x\n\n    # Forming the equations representing equal concentration\n    equation = Eq(lime_in_A_after / volume_A_after, lime_in_B_after / volume_B_after)\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    # There might be multiple solutions, filter out the valid ones (0 < x <= 3)\n    volume_transferred = [s.evalf() for s in solution if 0 < s <= 3]\n\n    # Return the first valid solution found\n    return volume_transferred[0]\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    first_sum = 1275\n    sum_difference = 51 - 1\n\n    ans = first_sum + sum_difference\n    return ans\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n    for perm in permutations(students):\n        if perm.index('C') in range(perm.index('A') + 1, perm.index('B')) or \\\n           perm.index('C') in range(perm.index('B') + 1, perm.index('A')):\n            if (perm.index('D') == perm.index('E') + 1) or (perm.index('D') == perm.index('E') - 1):\n                if (perm.index('F') == perm.index('G') + 1) or (perm.index('F') == perm.index('G') - 1):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n    combinations = 0\n    for notebook in notebook_prices:\n        for calendar in calendar_prices:\n            combinations += 1\n    return combinations\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    return 546 - 287\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows = (students + tables_per_row - 1) // tables_per_row\n    return rows\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    # Initial digit sequence\n    digit_seq = '123'\n    # Resulting number which holds the sum of the expressions\n    result_number = 0\n\n    # Loop to calculate the sum of all expressions according to the pattern\n    for i in range(1, 124):\n        # Next number to add is the digit sequence repeated i times\n        number_to_add = int(digit_seq * i)\n        result_number += number_to_add\n\n    # Convert the final sum to string to easily access the hundreds digit\n    result_str = str(result_number)\n    # Get the hundreds digit from the resulting number, index from the end -3\n    hundreds_digit = result_str[-3]\n\n    return int(hundreds_digit)\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Ratio of lego length to painting length is the same as their breadths since the proportions are maintained\n    painting_length = 90\n    lego_length = painting_length - 70.5\n    length_ratio = lego_length / painting_length \n\n    # Given painting length to breadth ratio is 5:2, calculate the painting's breadth\n    painting_breadth = (2 / 5) * painting_length\n\n    # Calculate the lego's breadth by applying the same ratio as the length\n    lego_breadth = length_ratio * painting_breadth\n    \n    # Since lego blocks are discrete, the breadth size in terms of lego blocks must be an integer\n    lego_breadth = int(lego_breadth)\n\n    return lego_breadth\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    amounts_lost = [50, 20, 10, 5]\n    brother_amount = (total_amount - max(amounts_lost)) // 2\n    for amount_lost in amounts_lost:\n        if total_amount - amount_lost == 2 * brother_amount:\n            return amount_lost\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # Using the Inclusion-Exclusion Principle\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan's distance in meters\n    kane_distance = 200 - 12.5  # Kane's distance behind Jaan in meters\n    jaan_speed = 8  # Jaan's speed in m/s\n    jaan_time = jaan_distance / jaan_speed  # Time taken by Jaan to finish the race in seconds\n    kane_speed = kane_distance / jaan_time  # Kane's speed in m/s\n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 1.10  # 110p = £1.10\n\n    total_price = cake_price + milk_price\n    actual_pay = total_price - voucher\n    return actual_pay\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # We denote the rates at which John, Raj, and Pete work as J, R, and P\n    J, R, P = symbols('J R P')\n\n    # The equation representing all three working together\n    equation_all_three = Eq(1 * J + 1 * R + 1 * P, 1)\n\n    # The equation for John and Raj\n    # 1 hr 12 min is 1 + 12/60 hours\n    equation_john_raj = Eq(1 * J + 1 * R, 1 / (1 + 12/60))\n\n    # The equation for Raj and Pete\n    # 1 hr 30 min is 1 + 30/60 hours\n    equation_raj_pete = Eq(1 * R + 1 * P, 1 / (1 + 30/60))\n    \n    # Solving the system of equations\n    solutions = solve((equation_all_three, equation_john_raj, equation_raj_pete), (J, R, P))\n\n    # Raj's rate is R. We want the time, so we take the reciprocal of R and convert to minutes\n    time_raj = 1 / solutions[R] * 60\n\n    return time_raj\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_hours = 8\n    normal_rate = 12\n    overtime_hours = 10 - normal_hours\n    overtime_rate = normal_rate * 1.25\n\n    total_pay = (normal_hours * normal_rate) + (overtime_hours * overtime_rate)\n\n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    percentage = 35 / 100\n    number = 60\n    result = percentage * number\n    return result\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the current ages of the elder and younger brothers\n    elder, younger = symbols('elder younger')\n\n    # Total current age equation\n    total_age_eq = Eq(elder + younger, 42)\n\n    # Past age relation equation\n    past_age_eq = Eq(younger - (elder - younger), elder / 2)\n\n    # Solve the system of equations\n    solutions = solve((total_age_eq, past_age_eq), (elder, younger))\n    \n    # Return the age of the elder brother\n    return solutions[elder]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for i in range(10, 100):\n        if i % 5 == 3 and i % 7 == 3:\n            return i\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # A 99-digit number repeating '928' is a sequence of '928' repeated 33 times\n    repeat_times = 99 // 3\n    \n    # Now we need to find the remainder of '928' raised to the power of 33 and divided by 9\n    base_number = 928\n    power = 33\n    divisor = 9\n    \n    # Since '928' is congruent to '1' modulo '9' (because 928 = 9*103 + 1), \n    # any power of '928' is also congruent to '1' modulo '9'\n    remainder = pow(base_number, power, divisor)\n    \n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # Take all balls but 2 of each other color except one.\n    # This is the worst-case scenario before you get three of the same color.\n    # This guarantees the next ball will be the third of some color.\n\n    num_white = 8\n    num_blue = 7\n    num_green = 5\n    num_orange = 2\n    \n    # Take 2 less than the full amount for each color except one.\n    # For the last color, we take all since we want to ensure to have at least\n    # three of this last color when we pick the next ball.\n    balls_to_take = (num_white - 2) + (num_blue - 2) + (num_green - 2) + num_orange\n    \n    # After taking this number of balls, the next one we take\n    # must be the third of some color.\n    balls_to_take += 1  # For the next ball taken.\n\n    return balls_to_take\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for original in range(10, 100):\n        digit_1 = original // 10\n        digit_2 = original % 10\n        swapped = digit_2 * 10 + digit_1\n        if swapped == (original // 3) + 3:\n            return original\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    matches = 30\n    num_teams = 2  # Initialize to a possible minimum number of teams\n\n    while True:\n        total_matches = num_teams * (num_teams - 1)\n        if total_matches == matches:\n            break\n        num_teams += 1\n\n    return num_teams\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes_needed = 66.5 / apples_per_box\n    return round(total_boxes_needed)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    current_sum = 34\n    future_sum = 40\n    difference_in_sum = future_sum - current_sum\n\n    years_later = difference_in_sum // 2\n\n    return years_later\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # Using the Pigeonhole Principle\n    countries = 11\n    participants_per_country_to_guarantee = 5\n\n    # as we want to guarantee 5 participants from the same country, we can fill\n    # up to 4 participants per country without guaranteeing 5 from one country\n    max_participants_without_guarantee = (countries - 1) * (participants_per_country_to_guarantee - 1)\n\n    # The next participant will ensure that there is at least one country with 5 participants\n    min_participants_to_guarantee = max_participants_without_guarantee + 1\n\n    return min_participants_to_guarantee\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[x] + solutions[y] + solutions[z]\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = '0123456789'\n    for perm in permutations(digits, 4):\n        A, B, C, D = perm\n        A, B, C, D = int(A), int(B), int(C), int(D)\n        if A != 0 and A + B == D and B + C == D and C + D == D:\n            return A + B + C + D\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    # Count of four-digit numbers from 1000 to 1999 is 1000\n    total_numbers = 1000\n    \n    # Count of four-digit numbers greater than 1499 is from 1500 to 1999\n    numbers_greater_than_1499 = 1999 - 1499\n    \n    # Probability that a number is greater than 1499\n    probability = numbers_greater_than_1499 / total_numbers\n    \n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    # Let the length of the rope be x meters\n    # Let the circumference of the tree be y meters\n\n    # From the problem we have two equations:\n    # 10y - x = 3 (10 turns around the tree leaves 3 meters of rope)\n    # 12y - x = -3 (12 turns around tree is short by 3 meters of rope)\n\n    # Subtract the second equation from the first to eliminate x and solve for y\n    # (10y - x) - (12y - x) = 3 - (-3)\n    # 10y - x - 12y + x = 6\n    # -2y = 6\n    # y = -6 / -2\n    # y = 3 (circumference of the tree is 3 meters)\n\n    # Now we can solve for x using either of the original equations:\n    # 10y - x = 3\n    # 10*3 - x = 3\n    # 30 - x = 3\n    # x = 30 - 3\n    # x = 27 meters (length of the rope)\n\n    # Finally calculate the length leftover after 8 turns:\n    # 8 turns would wrap 8 * y meters of the rope\n    # leftover = x - 8 * y\n    # leftover = 27 - 8 * 3\n    # leftover = 27 - 24\n    # leftover = 3 meters (left over after 8 turns)\n\n    leftover = 27 - 8 * 3\n    return leftover\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    answer = 28\n    original_number = (answer - 6) / 2\n    return original_number\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    result = 111\n    for i in range(1, 7 + 1):\n        result -= i\n    return result\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    sum_of_squares = (1/6) * n * (n + 1) * (2*n + 1) * (5**2)\n    return int(sum_of_squares)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    # Total number of toys made by A, B, and C\n    total_toys = 659\n    # Toys made by A and B\n    toys_A_and_B = 447\n    # Toys made by B and C\n    toys_B_and_C = 335\n    # Toys made by A or C (twice the number of B since B is counted in both A+B and B+C)\n    toys_A_or_C = (toys_A_and_B + toys_B_and_C) - total_toys\n    \n    # Number of toys made by B\n    toys_B = toys_A_and_B - toys_A_or_C\n\n    return toys_B\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - (13 * pupils), 190)\n    equation2 = Eq(stickers - (17 * pupils), 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total amount of money Mary had\n    total_amount = symbols('total_amount')\n\n    # Create an equation based on the problem description\n    # Mary spent 3/7 of her money on a bag\n    spent = 3/7 * total_amount\n    # The remaining amount is 4/7 since 1 - 3/7 = 4/7\n    remaining = 4/7 * total_amount\n    # The difference between the amount spent and not used was £12\n    equation = Eq(spent - remaining, 12)\n\n    # Solve the equation to find the total amount of money Mary had\n    total_amount_solution = solve(equation, total_amount)\n\n    # Calculate how much Mary spent on the bag\n    amount_spent_on_bag = 3/7 * total_amount_solution[0]\n\n    return amount_spent_on_bag.evalf()\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    salary_per_month = 1.4\n    debt = 5.04\n    months_needed = debt / salary_per_month\n    return months_needed\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Representing the ages of the Seven Dwarfs as an arithmetic sequence\n    a1, d = symbols('a1 d')\n    \n    # The condition for the sum of the ages of the youngest three\n    sum_youngest_three = Eq(a1 + (a1 + d) + (a1 + 2*d), 42)\n    \n    # We solve for 'a1' and 'd' (the first age and the common difference)\n    solutions = solve(sum_youngest_three, (a1, d))\n    \n    # We use the solutions to find 'a1' and 'd'\n    a1_value = solutions[a1]\n    d_value = solutions[d]\n    \n    # The sum of the ages of the oldest three is the sum of the last three terms\n    # We calculate this using the arithmetic sequence formula with the obtained 'a1' and 'd'\n    # The sum of the ages of the oldest three can be represented as (a1 + 6d) + (a1 + 5d) + (a1 + 4d)\n    sum_oldest_three = (a1_value + 6*d_value) + (a1_value + 5*d_value) + (a1_value + 4*d_value)\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n\n    return sum(factors)\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls, boys + 30)\n    equation2 = Eq(girls + boys, 500)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file, storybook = symbols('file storybook')\n\n    equation1 = Eq(7 * file + 4 * storybook, 108)\n    equation2 = Eq(5 * file + 3 * storybook, 80)\n\n    solutions = solve((equation1, equation2), (file, storybook))\n\n    total_cost = solutions[file] + solutions[storybook]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_average = 13\n\n    extra_tray_sausages = 21\n    total_sausages = (initial_trays * initial_average) + extra_tray_sausages\n    total_trays = initial_trays + 1\n\n    new_average = total_sausages / total_trays\n\n    return new_average\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    v_numbers_count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if hundreds > tens and ones > tens and hundreds != ones:\n                    v_numbers_count += 1\n    return v_numbers_count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    return 3.5 / 0.25\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    total = rani + brenda\n    each_share = total // 2\n    amount_to_give = brenda - each_share\n\n    return amount_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red = symbols('blue red')\n\n    total_balls = 125\n\n    equation1 = Eq(blue + red, total_balls)\n    equation2 = Eq((2/5) * blue, (3/5) * red)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    blue_balls = solutions[blue]\n    red_balls = solutions[red]\n\n    return blue_balls - red_balls\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "def solution():\n    from itertools import permutations\n    \n    # Calculate all permutations of 7 books taken 3 at a time\n    all_perms = list(permutations(range(7), 3))\n    \n    # We must divide by the permutations of the 3 students since order doesn't matter for who gets the books\n    count = len(all_perms) // (3!)\n    \n    # For the remaining 4 books, they can be distributed in any order\n    # Since each student can get from 0 to 4 books, we calculate the ways to distribute them\n    additional_distribution = 4**3\n    \n    return count * additional_distribution\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of watches and handbags\n    watch, handbag = symbols('watch handbag')\n\n    # Create the equations based on the given information\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    # Calculate the total cost for 2 watches and 2 handbags\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # The train is 137 m long\n    train_length = 137\n    # The first bridge is 263 m long\n    first_bridge_length = 263\n    # The train takes 20 seconds to cross the first bridge\n    time_first_bridge = 20\n    # The train takes 27 seconds to cross the second bridge\n    time_second_bridge = 27\n\n    # When the train crosses a bridge entirely, the distance covered is the length of the train plus the length of the bridge.\n    # So the speed of the train can be calculated for the first bridge\n    speed = (train_length + first_bridge_length) / time_first_bridge\n\n    # Using the speed, we can calculate the length of the second bridge, because the same speed is used to cross it.\n    second_bridge_length = (speed * time_second_bridge) - train_length\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_age_in_2008 = 80\n    daughter_age_in_1996 = 40\n\n    age_difference_in_years = 2008 - 1996\n    daughter_birth_year = 2008 - grandmother_age_in_2008\n\n    grandmother_age_at_daughter_birth = daughter_birth_year + age_difference_in_years - daughter_age_in_1996\n\n    return grandmother_age_at_daughter_birth\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # A can pass the ball to any of the 3 other individuals.\n    first_pass_options = 3\n\n    # The second pass must exclude A and the person who currently has the ball.\n    # Which means the second person has 2 options to pass the ball.\n    second_pass_options = 2\n\n    # The third pass must be to A, so only 1 option.\n    third_pass_options = 1\n\n    # The total number of different passing methods is the product of the options.\n    total_methods = first_pass_options * second_pass_options * third_pass_options\n\n    return total_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial\n\n    # Treat A and B as one person when they stand next to each other\n    # There are 7 entities to arrange: AB, C, D, E, F, G, H\n    # There are 7! ways to arrange these 7 entities\n    total_ways = factorial(7)\n    \n    # A and B can stand in two different orders (A next to B or B next to A)\n    total_ways *= 2\n    \n    # But we need to subtract the scenarios where C and D are next to each other\n    # There are 6 entities to arrange when C and D are together: AB, CD, E, F, G, H\n    # There are 6! ways to arrange these entities\n    # C and D can also stand in two orders (C next to D or D next to C)\n    # So we subtract (6! * 2) arrangements\n    incorrect_ways = factorial(6) * 2\n    \n    # Calculate the answer\n    ans = total_ways - incorrect_ways\n    \n    return ans\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4 / 5 * 1\n    return ans\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # To ensure each child gets a different number of pieces and the child with the most gets the least possible,\n    # we need to distribute the candies in increasing order starting from 1.\n    # The minimum sequence that satisfies this is the first 7 natural numbers for 7 children: 1, 2, 3, ..., 7.\n    # This sequence adds up to the sum of an arithmetic series of n terms: n(n+1)/2, where n=7 in this case.\n    \n    # Calculate the sum of the first 7 natural numbers\n    candies_given = sum(range(1, 8))  # This is 1 + 2 + 3 + 4 + 5 + 6 + 7\n    \n    # Calculate the remaining candies for the 8th child\n    remaining_candies = 88 - candies_given\n    \n    return remaining_candies\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    total_salt_leroy = 200 * 0.35\n    total_salt_lenny = 300 * 0.50\n    total_solution_weight = 200 + 300\n    final_concentration = (total_salt_leroy + total_salt_lenny) / total_solution_weight\n    return final_concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols representing the amount of candy each person had initially\n    mike_initial, valeria_initial = symbols('mike_initial valeria_initial')\n    \n    # Create the equations based on the problem description\n    # They have a total of 36 pieces\n    total_candy_equation = Eq(mike_initial + valeria_initial, 36)\n    \n    # If both eat the same amount, Mike will have 6 left and Valeria will have 22 left\n    same_amount_eaten_equation = Eq(valeria_initial - mike_initial, 22 - 6)\n    \n    # Solve the system of equations\n    solutions = solve((total_candy_equation, same_amount_eaten_equation), (mike_initial, valeria_initial))\n    valeria_candy = solutions[valeria_initial]\n    \n    return valeria_candy\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    # total mass of the sugar solution\n    total_mass = 300\n    # sugar concentration\n    sugar_concentration = 0.35\n    # Calculate the mass of sugar in the solution\n    mass_sugar = total_mass * sugar_concentration\n    # Calculate the mass of water in the solution\n    mass_water = total_mass - mass_sugar\n\n    return mass_water\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    return int((12 ** (50/75)) - 1)\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    thrown_away_oranges = 34\n    bought_oranges = 25\n    final_oranges = 133\n\n    initial_oranges = final_oranges - bought_oranges + thrown_away_oranges\n    \n    return initial_oranges\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def Psi(a, b):\n    if a < b:\n        return a * b + 2\n    else:\n        return a - b + 2\n\ndef solution():\n    return Psi(Psi(14, 13), 12)\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    return sum(len(str(i)) for i in range(1, 20))\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n\n    # Let girls be 'g' and boys be '36 - g'\n    total_students = 36\n    average_class = 89\n    average_girls = 88\n    average_boys = 91\n    \n    # Eq1: Total score of the class = average_class * total_students\n    # Eq2: Total score of the girls = average_girls * girls\n    # Eq3: Total score of the boys = average_boys * (total_students - girls)\n    # Eq1 = Eq2 + Eq3\n    \n    equation = Eq(average_class * total_students, average_girls * girls + average_boys * (total_students - girls))\n    solution = solve(equation, girls)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    cats_legs = 2 * 4\n    dogs_legs = 2 * 4\n    rabbit_legs = 1 * 4\n\n    total_legs_except_birds = cats_legs + dogs_legs + rabbit_legs\n    birds = (28 - total_legs_except_birds) / 2  # Assuming each bird has 2 legs\n\n    return int(birds)\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    ans = 694 + 888\n    return ans\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_one_sequence = 12\n    total_time = 30\n    number_of_sequences = total_time / time_for_one_sequence\n    # Since Alison takes 12 minutes to walk up from first floor to fifth floor,\n    # this means she walks up 4 flights of stairs (between each pair of floors)\n    flights_per_sequence = 4\n    total_flights = number_of_sequences * flights_per_sequence\n    return int(total_flights)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_more_butter = cookies_per_gram * 21.6\n    \n    return cookies_with_more_butter\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert base 8 number to base 10\n    N_base8 = \"12345654321\"\n    N_base10 = int(N_base8, 8)\n\n    # Calculate the remainders\n    remainder_7 = N_base10 % 7\n    remainder_9 = N_base10 % 9\n\n    # Sum the remainders\n    sum_of_remainders = remainder_7 + remainder_9\n\n    return sum_of_remainders\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(belt + wallet + handbag, 840)\n\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # Fence A (my fence)\n    people_A = 5\n    hours_A = 6\n    \n    # Fence B (neighbour's fence), with length twice that of Fence A\n    length_factor_B = 2  \n    desired_hours_B = 5\n    \n    # To do twice as much work in less time, we need to increase the number of people.\n    # Work is proportional to the number of people and the time they work.\n    # work_done = number_of_people * hours_worked\n    # work_B = length_factor_B * work_A\n    # people_B * desired_hours_B = length_factor_B * (people_A * hours_A)\n    \n    # Solve for the minimum number of people needed for Fence B (people_B)\n    people_B = (length_factor_B * (people_A * hours_A)) / desired_hours_B\n  \n    # Since we can't have a fraction of a person, we round up to the nearest whole person.\n    return int(people_B) if people_B.is_integer() else int(people_B) + 1\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_three_years_ago = 7\n    total_years_added = 3 + 4  # three years ago and four years from now\n    combined_age_in_four_years = combined_age_three_years_ago + (2 * total_years_added)\n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2*book + 3*magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    formula = n * (n + 1) * (n + 2) / 3\n\n    return int(formula)\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    return 637 - 473\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from sympy import divisors\n\n    # Get all divisors of 2016\n    divs = divisors(2016)\n    \n    # Check which divisors are perfect squares and count them\n    count = sum(1 for div in divs if (int(div**0.5))**2 == div)\n    \n    return count\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Let the three consecutive numbers be x, x+1, x+2.\n    # Their sum is 3x + 3 = 60\n    # Solving for x gives us the smallest of the three numbers.\n    x = (60 - 3) // 3\n    # The largest number is then x + 2.\n    largest_number = x + 2\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    x = (22 - 2) / (7 - 3)\n    return x\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    big_pail, small_pail = symbols('big_pail small_pail')\n    \n    # equation for 3 big pails and 4 small pails holding 68 litres\n    equation1 = Eq(3 * big_pail + 4 * small_pail, 68)\n    # equation for 4 big pails and 2 small pails holding 64 litres\n    equation2 = Eq(4 * big_pail + 2 * small_pail, 64)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n    \n    return solutions[big_pail]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if A * 101 + C * 101 + D * 20 == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Calculate the total number of shirts that are not yellow\n    non_yellow_shirts = 6 + 4 + 12  # orange + pink + brown shirts\n    # To ensure that Annabella gets at least 1 yellow shirt,\n    # she must take out all non-yellow shirts plus 1 more shirt.\n    shirts_to_take = non_yellow_shirts + 1\n\n    return shirts_to_take\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # using ceiling division\n\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    ans = 9.8 + 99.8 + 199.8 + 2999.8 + 39999.8 + 1\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Based on the sequence, it seems like the number sequence is decreasing\n    # To find the pattern or rule, we compute the differences between consecutive numbers\n    difference1 = 94 - 80  # Difference between the first and third number\n    difference2 = 80 - 73  # Difference between the third and fourth number\n    difference3 = 73 - 66  # Difference between the fourth and fifth number\n\n    # Assuming the pattern is consistent (linear), we can predict the second number by observing the differences\n    # Let's assume the difference decreases by a fixed amount each time:\n    difference_decrease = difference2 - difference1 \n\n    # Now find the next difference, which should be smaller\n    next_difference = difference1 + difference_decrease\n\n    # Finally, compute the missing number by subtracting the calculated difference from the first number\n    missing_number = 94 - next_difference\n    return missing_number\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The age divided by 2, 3, 4, or 6 has a remainder of 1\n    # but is divisible by 7 with no remainder. Thus, we can set up the following congruences:\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age = solve_congruence(*congruences)\n\n    return age[0]\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    wine_glasses_sold = 25\n    tumblers_sold = 12\n    ml_in_carton = 1000\n\n    total_ml_sold = (wine_glass_ml * wine_glasses_sold) + (tumbler_ml * tumblers_sold)\n    cartons_needed = total_ml_sold / ml_in_carton\n\n    return int(cartons_needed)\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n\n    position_from_end = total_people - position_from_front + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # The last digit of powers of 2 follows a cycle: 2, 4, 8, 6\n    cycle = [2, 4, 8, 6]\n\n    # Since there are 859433 twos, we can find the position in the cycle using modulus\n    position = (859433 - 1) % len(cycle)  # -1 because the cycle starts with 2^1\n\n    # Return the last digit which corresponds to the calculated position in the cycle\n    return cycle[position]\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    count_mult_3 = 60 // 3\n    count_mult_5 = 60 // 5\n    count_mult_15 = 60 // 15\n\n    count_facing = 60 - count_mult_3 - count_mult_5 + count_mult_15\n    return count_facing\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from math import lcm\n\n    # Find the LCM of 2, 4, and 6\n    multiple = lcm(2, 4, 6)\n\n    # Loop through possible ages where age % lcm(2, 4, 6) == 1 and check for age % 7 == 5\n    age = multiple + 1\n    while True:\n        if age % 7 == 5:\n            return age\n        age += multiple\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    a, p, l = symbols('a p l')  # a for avocados, p for peaches, l for lemons.\n\n    # a : p : l = 2 : 9 : 8\n    eq1 = Eq(a, 2 * (p / 9))\n    eq2 = Eq(a, 2 * (l / 8))\n    \n    # After selling fruits\n    a_sold = a - 52\n    p_sold = p - 12\n    l_sold = l - 60\n    \n    # New ratio p_sold : l_sold = 6 : 5\n    eq3 = Eq(p_sold * 5, l_sold * 6)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (a, p, l), dict=True)\n    \n    total_avocados_left = solutions[0][a] - 52\n    total_peaches_left = solutions[0][p] - 12\n    total_lemons_left = solutions[0][l] - 60\n    \n    total_left = total_avocados_left + total_peaches_left + total_lemons_left\n    \n    return total_left\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of sweets Jill and Jess originally have\n    jill, jess = symbols('jill jess')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(jill, 6/5 * jess)\n    equation2 = Eq((jill - 8), 4/7 * (jess + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jill, jess))\n\n    # Calculate the total number of sweets\n    total_sweets = solutions[jill] + solutions[jess]\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef solution():\n    max_divisible_number = 0\n    for n in range(2, 8):  # Starts with at least two digits, up to 7\n        for comb in permutations(range(1, 8), n):\n            num = int(''.join(map(str, comb)))\n            if all(num % d == 0 for d in comb):\n                max_divisible_number = max(max_divisible_number, num)\n    return max_divisible_number\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    max_length = 1\n    n = 1  # Starting number of the sequence\n    while (2 * n * max_length + max_length * (max_length - 1)) // 2 <= 900:\n        # Total of arithmetic sequence of length max_length starting from n\n        # formula for the sum of arithmetic sequence: S_n = n/2 * (2a + (n-1)d),\n        # where n is the number of terms, a is the first term, and d is the difference between the terms\n        total = (max_length * (2 * n + (max_length - 1))) // 2\n        if (900 - total) % max_length == 0:\n            max_length += 1\n        n += 2\n    \n    return max_length - 1\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let the weights of Adam, Ben, and Carl be A, B, and C respectively.\n\n    # From the given problem, we have:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # By adding all equations, we get:\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 93\n    # 2*(A + B + C) = 292\n    # A + B + C = 292 / 2\n    total_weight = 292 / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for number in range(10, 100):  # Check for two-digit numbers\n        if number % 3 == 2 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    num = 120\n    while True:\n        num += 1\n        if num % 53 == 2:\n            break\n    return num\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest = min(numbers)\n    return smallest\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_metres = 2\n    height_centimetres = 2\n    height_total = height_metres + (height_centimetres / 100)\n\n    return height_total\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_score = 60\n    second_score = first_score * 1.25\n    third_score = second_score * 0.80\n    total_score = first_score + second_score + third_score\n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    initial_amount = 5000\n    rate = 0.03\n    years = 2\n    \n    final_amount = initial_amount * ((1 + rate) ** years)\n    \n    return final_amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4*pupils, 8)\n    equation2 = Eq(bookmarks - 6*pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n\n    mean_savings = (january_savings + february_savings + march_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    num_chocolate_bars = 233\n    is_prime = True\n    \n    for i in range(2, num_chocolate_bars):\n        if num_chocolate_bars % i == 0:\n            is_prime = False\n            break\n            \n    return is_prime\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    # This uses the formula for the sum of squares of an arithmetic series:\n    # Sum = n/6 * (2a + (n - 1)d)(a + (n - 1)d + a)\n    # where a is the first term, d is the common difference, and n is the number of terms\n\n    a = 7  # first term\n    d = 7  # common difference, since it's multiples of 7\n    n = (105 - 7) // 7 + 1  # number of terms\n\n    # Applying the sum of squares formula\n    sum_of_squares = n * (2 * a + (n - 1) * d) * (a + (n - 1) * d + a) // 6\n    return sum_of_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    total = 4.22 + 31.49 + 0.76\n    return total\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n\n    primes_between_130_and_150 = list(primerange(130, 151))\n\n    return len(primes_between_130_and_150)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    # Sam's calculation for the first part is correct.\n    first = 56 // 4  # This is the first multiple of 4 after 56.\n    # But Sam's calculation for the second part is off by one.\n    last = 92 // 4   # This is the last multiple of 4 before 92.\n\n    # The number of multiples of 4 is last - first + 1 \n    # (since both first and last are counted as multiples).\n    num_multiples = (last - first) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    num, _ = solve_congruence(*congruences)\n    \n    # Ensure the solution is less than 100\n    while num >= 100:\n        num -= 3 * 4 * 5\n    \n    return num\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    # Let x be the speed of the current.\n    # Distance between Magic Town and Super Town\n    distance = 144\n\n    # Time taken to go downstream\n    time_downstream = 8\n\n    # Speed of the ship in still water\n    speed_still_water = 15\n\n    # Effective speed downstream = speed_still_water + current speed\n    # distance = time_downstream * (speed_still_water + x)\n    # Solve for current speed x\n    x = (distance / time_downstream) - speed_still_water\n\n    # Effective speed upstream = speed_still_water - current speed\n    # time_upstream = distance / (speed_still_water - x)\n    # Calculate time taken to go upstream\n    time_upstream = distance / (speed_still_water - x)\n\n    return time_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny_pieces = 6\n    diff = 5\n    qiqi_pieces = jenny_pieces + diff\n\n    return qiqi_pieces\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    students_to_select = 2\n    num_ways = comb(total_students, students_to_select)\n    return num_ways\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    H, K = symbols('H K')\n\n    equation1 = Eq(H, K + 45)\n    equation2 = Eq(20 * H, 10 * (20 * K))\n\n    solutions = solve((equation1, equation2), (H, K))\n\n    return solutions[H] * 20\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wait_time = timedelta(hours=1, minutes=25)\n    john_wait_time = datetime.strptime('3:15 PM', '%I:%M %p')\n    meet_time = john_wait_time + wait_time\n    return meet_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    lcm, remainder = solve_congruence(*congruences)\n    return remainder\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    for j in range(2, 20):\n        ans += sum(j/i for i in range(j + 1, 21))\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Worker A's work rate per day\n    rate_A = 1 / 15\n    # Worker B's work rate per day\n    rate_B = 1 / 20\n\n    # Total work done in the 2 days both A and B worked together\n    total_work_done = 2 * (rate_A + rate_B)\n\n    # Remaining work to be done by A after B leaves\n    remaining_work = 1 - total_work_done\n\n    # Number of days Worker A needs to finish the remaining job\n    days_for_A_to_finish = remaining_work / rate_A\n\n    return days_for_A_to_finish\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To guarantee that we have at least two balls of the same color, we use the Pigeonhole Principle.\n    # We take one more ball than the number of colors, since after taking one of each color, the next ball must match one of the colors already taken.\n    num_colors = 2  # green and blue\n    balls_needed = num_colors + 1  # take one more than the number of colors\n    return balls_needed\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    # There are 12 zodiac signs, and we want to guarantee that at least 11 students have the same sign.\n    # This is a direct application of the Pigeonhole Principle.\n    \n    # Maximum number of students such that no zodiac sign has 11 students is\n    # 10 students per each of the 12 zodiac signs.\n    max_students_without_11_same_sign = 10 * 12\n    \n    # To guarantee at least 11 students with the same zodiac sign, we need one more.\n    ans = max_students_without_11_same_sign + 1\n    \n    return ans\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef solution():\n    total_count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    \n    # Generate all possible permutations of the students standing in a line\n    for perm in permutations(students):\n        # Convert the permutation into a string to check for conditions easily\n        perm_str = ''.join(perm)\n        \n        # Check for condition 1: A must be between B and C\n        if perm_str.index('A') > perm_str.index('B') and perm_str.index('A') < perm_str.index('C') or \\\n           perm_str.index('A') < perm_str.index('B') and perm_str.index('A') > perm_str.index('C'):\n            # Check for condition 2: D and E must stand together\n            if abs(perm_str.index('D') - perm_str.index('E')) == 1:\n                # Check for condition 3: F and G must not stand together\n                if abs(perm_str.index('F') - perm_str.index('G')) != 1:\n                    # If all conditions are met, increment the count\n                    total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    x = (20 - 5) / 3\n    return x\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # If Ada wants to be sure that she has 10 balls of the same color,\n    # she needs to take into account the worst-case scenario where she picks the balls in such a way\n    # that she doesn't get 10 balls of the same color until the very end.\n\n    # She could pick all yellow balls and all white balls first, which are 5 + 15.\n    # Since she wants 10 balls of the same color, she has to take one more which will be of black color\n    # because it's the only color left.\n    # Then she needs just 9 more black balls to make sure she has 10 black balls.\n\n    # Total balls = Total yellow balls + Total white balls + 9 more black balls\n    least_number_of_balls = 5 + 15 + 9\n\n    return least_number_of_balls\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    number_of_children = 9\n    starting_seat_number = 3\n\n    last_child_seat = (total_candies - 1 + starting_seat_number) % number_of_children\n\n    return last_child_seat if last_child_seat != 0 else number_of_children\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    num_terms = 60\n\n    sum_of_sequence = (num_terms / 2) * (2 * first_term + (num_terms - 1) * common_difference)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    # Spaghetti period\n    spaghetti_period = 7\n    # Apple pie period\n    apple_pie_period = 3\n\n    # Find least common multiple (LCM) of the two periods\n    from math import lcm\n    days_until_repeat = lcm(spaghetti_period, apple_pie_period)\n    \n    # Since they both happen on the 2nd of January, we just add the LCM to this date\n    from datetime import datetime, timedelta\n\n    # Florence eats both on 2nd January, this is the starting point\n    initial_date = datetime(year=2023, month=1, day=2)\n\n    # Calculate the next date she will eat both\n    next_date = initial_date + timedelta(days=days_until_repeat)\n\n    # Answer: When will she next eat them both on the same day?\n    ans = next_date.strftime('%d %B %Y')\n    return ans\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Maximum children with either dogs or cats without considering overlaps\n    max_non_overlap = children_with_dogs + children_with_cats\n\n    # Using Inclusion-Exclusion Principle to find minimum number of children with both\n    children_with_both = max_non_overlap - total_children\n\n    return children_with_both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    sum_of_numbers = 0\n    for i in range(1, 101):\n        for j in range(1, 101):\n            sum_of_numbers += i * j\n    return sum_of_numbers\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    data_range = max(data) - min(data)\n    return data_range\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    shirts, skirts = symbols('shirts skirts')\n    \n    # Number of shirts she had was 36 less than the number of skirts\n    equation1 = Eq(shirts, skirts - 36)\n    \n    # After selling 2/3 of her shirts and 5/6 of her skirts, she had 72 shirts and skirts left\n    equation2 = Eq((shirts * (1 - 2/3)) + (skirts * (1 - 5/6)), 72)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shirts, skirts))\n    \n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    total_months = 3\n    total_saving = monthly_saving * total_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    total_length = 100\n    total_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_from_length = total_length // cloak_length\n    cloaks_from_width = total_width // cloak_width\n\n    total_cloaks = cloaks_from_length * cloaks_from_width\n\n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Speed while going to the place\n    speed_to = 20  # miles per hour\n    \n    # Total distance for the round trip\n    total_distance = 120 * 2  # miles\n    \n    # Time taken to travel to the place\n    time_to = 120 / speed_to  # hours\n    \n    # Expected average speed for the whole trip\n    average_speed = 30  # miles per hour\n    \n    # Total expected time for the whole trip\n    total_expected_time = total_distance / average_speed  # hours\n    \n    # Time allowed for the return trip\n    time_return = total_expected_time - time_to  # hours\n    \n    # Distance of the return trip\n    distance_return = 120  # miles\n    \n    # Speed required for the return trip to meet the average speed expectation\n    speed_return = distance_return / time_return  # miles per hour\n    \n    return speed_return\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statement:\n    # x ≡ 1 (mod 5)\n    # x ≡ 2 (mod 6)\n    # x ≡ 7 (mod 11)\n\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    x, _ = solve_congruence(*congruences)\n\n    # Since we're looking for biscuits between 400 and 800, we need to find\n    # the correct multiple of the solution that falls into that range.\n    while x < 400:\n        x += 5 * 6 * 11\n\n    return x\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_ratio = nell_ratio + joe_ratio\n    sweets_per_ratio = nell_sweets / nell_ratio\n    \n    total_sweets = sweets_per_ratio * total_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    count = 0\n    \n    for i in range(1, 35):\n        count += len(str(i))\n        \n    return count\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes for 1 cut to make 2 pieces\n    # Hence for 5 pieces, he needs to make 4 cuts (since each cut adds one additional piece)\n    # The time taken for each cut remains the same, 2 minutes\n    # So simply multiply the number of cuts with the time for each cut\n\n    cuts_needed = 5 - 1\n    time_per_cut = 2\n\n    total_time = cuts_needed * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(sequence) / len(sequence)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    initial_average = 120\n    final_average = 110\n    num_numbers = 3\n    \n    initial_total = initial_average * num_numbers\n    final_total = final_average * (num_numbers + 1)\n    \n    number_to_add = final_total - initial_total\n    \n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of marbles each person has\n    sean, jovan, heman = symbols('sean jovan heman')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(heman, 3 * jovan)\n    equation3 = Eq(heman, jovan + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sean, jovan, heman))\n\n    # Calculate the total number of marbles\n    total_marbles = solutions[sean] + solutions[jovan] + solutions[heman]\n\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if 140 + m == 8 * (10 + m) - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n    \n    # Using the unitary method\n    # One horse would consume the pile in 12 * 15 days\n    total_feed_days_for_one_horse = horses_initial * days_initial\n    \n    # Now, find out how many days 20 horses would take to consume the same pile\n    days_for_final_horses = total_feed_days_for_one_horse / horses_final\n    \n    return days_for_final_horses\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    common_difference = 4\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    sum_of_series = num_terms * (first_term + last_term) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 12)\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    total_mass = solutions[john] + solutions[charles] + solutions[andy]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n\n    meters_per_company_per_day = (total_expressway / companies) / days\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoe_price_per_leg = 78 / 5\n    sock_price_per_leg = 12 / 2\n\n    total_legs = 6 * 5  # Alien and 5 brothers, each having 5 legs\n\n    total_shoe_cost = shoe_price_per_leg * total_legs\n    total_sock_cost = sock_price_per_leg * total_legs\n\n    total_cost = total_shoe_cost + total_sock_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    import numpy as np\n    data = np.array([3, 2, 3, 5, 2, 4, 4, 1])\n    mean = np.mean(data)\n    deviations = np.abs(data - mean)\n    mad = np.mean(deviations)\n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    from math import comb\n    # The problem of dividing n identical items into k groups (where groups can be empty)\n    # is given by the combinations with repetitions formula: C(n + k - 1, k - 1)\n    ways = comb(13 + 3 - 1, 3 - 1)\n    return ways\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    bud, pip, tom = symbols('bud pip tom')\n\n    # Write the system of equations based on the problem statement\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    # Return the number of sweets Tom has\n    return solutions[tom]\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of $0.50 cookies be denoted by x and the number of $0.10 cookies by y\n    x, y = symbols('x y')\n\n    # David's cookies cost thrice as much as Jeremy's\n    # Equation for the relation between number of cookies\n    equation1 = Eq(x, y - 60)\n\n    # Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies\n    equation2 = Eq(3/5 * x, y)\n\n    # Solve the two equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate how much Jeremy's cookies worth\n    jeremys_cookies_worth = solutions[y] * 0.10\n\n    return jeremys_cookies_worth\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n\n    cards = [6, 12, 35, 175, 245, 300]\n\n    # Product combinations for Candy (2 cards) and Candice (3 cards)\n    candy_combinations = list(combinations(cards, 2))\n    candice_combinations = list(combinations(cards, 3))\n    candy_products = [prod(combo) for combo in candy_combinations]\n    candice_products = [prod(combo) for combo in candice_combinations]\n\n    # Find matching products\n    matching_products = set(candy_products) & set(candice_products)\n    if not matching_products:\n        return None  # No matching products found\n\n    # Identify the cards used for the matching product\n    matching_product = matching_products.pop()\n    used_cards = set()\n\n    for combo in candy_combinations:\n        if prod(combo) == matching_product:\n            used_cards.update(combo)\n            break\n\n    for combo in candice_combinations:\n        if prod(combo) == matching_product:\n            used_cards.update(combo)\n            break\n\n    # The card not picked is the one not in the used_cards set\n    for card in cards:\n        if card not in used_cards:\n            return card\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    ans = next(filter(lambda x: (x - 4) % 7 == 0, possible_totals))\n    return ans\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    first_to_fifth = 20  # the distance between the first and fifth tree\n    interval = first_to_fifth / (5 - 1)  # the interval between each tree\n    total_length = 200  # total length of the road\n    trees_count = (total_length // interval) + 1  # adding 1 for the first tree which is not counted in intervals\n\n    return int(trees_count)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_A = 1 / 12\n    rate_B = 1 / 8\n    combined_rate = rate_A + rate_B\n\n    time_for_half_tank = (1 / 2) / combined_rate\n    return time_for_half_tank\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Initial expression\n    initial_expression = (36 * 21) / (6 * 7)\n    \n    # Step by step simplification based on BODMAS/BIDMAS rules\n    step1 = 36 * 21 / 6 * 7  # Correct simplification, no brackets and division/multiplication have the same precedence\n    step2 = 36 / 6 * 21 * 7  # Incorrect rearrangement, should have been (36 / 6) * 21 * 7\n    # Jason's mistake: He should not have moved 21 outside of the division operation\n\n    # Correct calculation following BODMAS/BIDMAS\n    correct_step2 = (36 / 6) * 21 * 7\n\n    # Comparing Jason's result with the correct result\n    jason_result = 6 * 7 * 21\n    ans = correct_step2 == jason_result  # Check if Jason's answer is correct\n\n    return not ans  # Return False if Jason is correct, True if he made a mistake\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    ans = 4392 // 6\n    return ans\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_of_apples = 5 / 8\n    \n    apples = total_fruit * fraction_of_apples\n    pears = total_fruit - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    # Number of girls on a row or column (excluding corners)\n    girls_each_side = (17 - 4) // 4\n    # Boys in the smaller square before adding the girls\n    boys_per_side = girls_each_side + 1\n    total_boys = boys_per_side ** 2\n    return total_boys\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = 2 * jane_age\n    cousin_age_future = cousin_age_now + 8\n    \n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    \n    # Since there are 3 people between Ann and David, and Ann is the 8th person,\n    # David is 4 positions behind Ann in the queue\n    david_position = ann_position + people_between + 1\n    \n    # David is the second last person in the queue, which means there is one person behind him\n    total_people = david_position + 1\n    \n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    pages_with_8 = 0\n    total_pages = 0\n\n    while pages_with_8 < 22:\n        total_pages += 1\n        if '8' in str(total_pages):\n            pages_with_8 += str(total_pages).count('8')\n\n    return total_pages\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    third_number = 555 - first_number - second_number\n\n    return third_number\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Let's denote the original combination as ABCD, where A, B, C, D are digits.\n    # When the digit D is moved to the first position, the number becomes DABC.\n    # The value of the original combination is 1000A + 100B + 10C + D\n    # The value of the modified combination is 1000D + 100A + 10B + C\n    # According to the problem, the modified number is greater by 5877, so:\n    # (1000D + 100A + 10B + C) - (1000A + 100B + 10C + D) = 5877\n    \n    # Simplifying the above equation gives us:\n    # 999D - 999A + 90A - 90B + B - 9C + C = 5877\n    # (999D - 999A) + (90A - 90B) + (B - 9C + C) = 5877\n    # 999(D - A) + 90(A - B) + (B - 9C + C) = 5877\n    \n    # Since 5877 ends with a 7, D - A must end in a 7 or 2 (because 999 * something that ends in 7 or 2 gives a number ending in 7)\n    # After checking the possibilities we find out that it should be 7 (as 2 would imply A > D which contradicts the problem statement of new number being larger)\n    # Hence, D - A = 7\n    # Now we break down 5877 into 999 parts and a remainder to find out the remaining digits\n    # 5877 = 6 * 999 + (5877 - 6 * 999)\n    # 5877 = 6 * 999 + 183, which says the last part is (B - 9C + C = 183 or B - 8C = 183)\n    # Now, we just need to find combinations of A, B, C, D such that they satisfy the equations and are within 0-9\n\n    for A in range(10):\n        for D in range(A + 1, 10):\n            if D - A == 7:  # D is greater than A by 7 units\n                for B in range(10):\n                    for C in range(10):\n                        if (B - 8 * C) == 183 % 90 and (1000*D + 100*A + 10*B + C) - (1000*A + 100*B + 10*C + D) == 5877:\n                            # Return the original combination\n                            return 1000 * A + 100 * B + 10 * C + D\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = (9 * 8) / 12\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To guarantee 29 balls of one color, we can pick up to 28 balls of each color\n    # without getting 29 of the same color.\n    max_picks_without_29_of_one_color = 28 * 3\n    \n    # To guarantee 28 balls of another color, add another 27 balls for the other two colors\n    # which gives us 28 of the second color for sure.\n    # Since we have 28 balls of each color, the last pick guarantees 10 balls of the last color.\n    # Hence, we add one more to get at least 10 of the last color.\n    minimum_picks_needed = max_picks_without_29_of_one_color + 27 * 2 + 1\n\n    return minimum_picks_needed\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    day_distance = 3\n    night_distance = 1\n    total_distance = 9\n    current_distance = 0\n    day_count = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = maths_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time = 3\n    simple_interest = principal * rate * time\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep_hours = 8\n    mary_sleep_hours = lucy_sleep_hours + 2\n    \n    return mary_sleep_hours\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 1.50 + 4*x, 19)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_england_mountain = 978\n    height_world_mountain = 8848\n\n    difference = height_world_mountain - height_england_mountain\n\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    for num in range(10, 50):\n        if num % 3 == 2 and num % 5 == 3 and all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            return num\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since 10! and onwards include the factor 10 (which is 2*5), and 2014 is greater than 10,\n    # the last digit of 2014! will be 0 (as the product will include at least one factor of 10).\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    n = 2*2*3*8*5*5*5\n    count = 0\n    while n % 10 == 0:\n        n //= 10\n        count += 1\n    return count\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 30\n    original_fraction_numerator = 6\n    original_fraction_denominator = 20\n\n    denominator = (numerator * original_fraction_denominator) / original_fraction_numerator\n\n    return int(denominator)\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(((x + 6) * 3) / 8 - 8, 1)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    new_number = 10 * original_number\n    equation = Eq(original_number + new_number, 253)\n\n    sol = solve(equation, original_number)\n\n    return sol[0]\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alicia, beth, casey = symbols('alicia beth casey')\n    \n    equation1 = Eq(alicia / 2 + beth - 60 + casey - 3 * (alicia / 2), alicia - alicia / 2)\n    equation2 = Eq(alicia + beth + casey, 900)\n    equation3 = Eq(beth - 60, alicia / 2)\n    equation4 = Eq(alicia / 2, casey - 3 * (alicia / 2))\n\n    solutions = solve((equation1, equation2, equation3, equation4), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    number_of_boxes = 8\n\n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // number_of_boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    # Initialize the list to store all the possible numbers Agnes is thinking of\n    possible_numbers = []\n\n    # Loop through numbers less than 90 (since it's mentioned the number is less than 90)\n    for num in range(1, 90):\n        # Check if the number is one more than a multiple of 5\n        if (num - 1) % 5 == 0:\n            # Check if the number is one less than a prime number\n            if all(num % i != 0 for i in range(2, num)):\n                # Check if the number is a multiple of 9\n                if num % 9 == 0:\n                    # All conditions satisfied, the number could be what Agnes is thinking of\n                    possible_numbers.append(num)\n\n    # Since the question implies there's a single number, return the first one that meets the conditions\n    return possible_numbers[0]\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, cayden * 2)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n\n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percentage = 18\n    total_amount = 250\n\n    result = (percentage / 100) * total_amount\n\n    return result\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "import math\n\ndef solution():\n    # There are 4 men and 4 women. We need to alternate them in the lineup.\n    # First, we choose a pattern for the lineup, either starting with a man or a woman.\n    # There are 2 choices for this pattern. \n    # Then, we arrange 4 men in a row, which can be done in 4! ways.\n    # And 4 women in a row, which also can be done in 4! ways.\n    # The total number of ways is the product of all these possibilities.\n    \n    men_arrangements = math.factorial(4)\n    women_arrangements = math.factorial(4)\n    pattern_choices = 2\n    \n    total_ways = pattern_choices * men_arrangements * women_arrangements\n    return total_ways\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    word = 'HAPPY'\n    unique_letters = set(word)\n    frequency = [word.count(letter) for letter in unique_letters]\n    ans = factorial(len(word))\n    for f in frequency:\n        ans //= factorial(f)\n    return ans\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    total_cookies = 100\n    num_days = 5\n    common_difference = 6\n    # sum of arithmetic sequence: n/2 * (2*a1 + (n-1)*d) = S\n    # where n is the number of terms, a1 is the first term, and d is the difference between terms\n    # We want to find a1\n    \n    # total_cookies = num_days/2 * (2*a1 + (num_days-1)*common_difference)\n    # Solving for a1 (first day cookies):\n    # 2 * total_cookies = num_days * (2*a1 + (num_days-1)*common_difference)\n    # 2 * total_cookies = 2 * num_days * a1 + num_days * (num_days - 1) * common_difference\n    # 2 * total_cookies - num_days * (num_days - 1) * common_difference = 2 * num_days * a1\n    # a1 = (2 * total_cookies - num_days * (num_days - 1) * common_difference) / (2 * num_days)\n\n    a1 = (2 * total_cookies - num_days * (num_days - 1) * common_difference) / (2 * num_days)\n\n    return int(a1)\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_three_rolls_mya = cost_per_roll_mya * 3\n    return cost_three_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 72)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n    \n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    fraction_boys = 2/5\n    fraction_girls = 1 - fraction_boys\n    total_children = girls / fraction_girls\n    boys = total_children * fraction_boys\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    from sympy import primefactors, factorint\n\n    factors = factorint(96)\n    count = 1\n    for exponent in factors.values():\n        count *= (exponent + 1)\n        \n    return count\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    peter_and_john = 2  # Counting both Peter and John themselves\n\n    total_people = people_in_front_of_peter + people_behind_john + peter_and_john\n\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    result = 0.60 * 0.10 * 900\n    return result\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_hour = 12\n    flight_duration_hours = 4\n    st_petersburg_time_difference_hours = 3  # Assuming St Petersburg is 3 hours ahead of England\n    arrival_hour = (departure_hour + flight_duration_hours + st_petersburg_time_difference_hours) % 24\n    \n    return arrival_hour\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    num_years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** num_years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 2):\n        N, O = perm\n        if 10 * N + O > 10 * O + N:\n            return 10 * N + O\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = 0\n    for i in range(50, 31, -2):\n        ans += i - (i - 2)\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # There are 3 colors of socks.\n    # If Cindy takes 3 socks, it's possible they are all of different colors.\n    # To ensure at least one pair of the same color, \n    # Cindy needs to take one more sock after having 3 of different colors.\n    socks_needed = 3 + 1\n\n    return socks_needed\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_g = 1000  # 1 kg = 1000 g\n    ans = 2.5 * kg_to_g\n    return ans\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3 / 8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n\n    # Calculate the number of children in the classroom\n    # Let boys be 'b' and girls be 'g'\n    # Since the boys are 3/8 of the total, girls are 5/8\n    fraction_girls = 5 / 8  \n    total_children = total_sweets / (fraction_boys * sweets_per_boy + fraction_girls * sweets_per_girl)\n    \n    # Calculate the number of girls\n    num_girls = total_children * fraction_girls\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    map_distance_cm = 12\n    scale_cm_per_km = 5\n    ground_distance_km = (map_distance_cm / scale_cm_per_km) * 1  # since 5 cm represents 1 km\n    return ground_distance_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    ans = 1\n    for i in range(2, 51):\n        ans *= ((1 / i) - (1 / (52 - i)))\n    return ans\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    # The system of equations based on the remainders\n    eq1 = Eq(x % 7, 5)\n    eq2 = Eq(x % 8, 6)\n    eq3 = Eq(x % 10, 6)\n    \n    # The sum of the quotients\n    eq4 = Eq((x // 6) + (x // 7) + (x // 8), 265)\n    \n    solutions = solve((eq1, eq2, eq3, eq4), x)\n    \n    # We need to return the smallest positive solution that matches the criteria\n    for sol in solutions:\n        if sol.is_real:\n            return sol\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_km_per_hr = 7.2\n    speed_m_per_sec = (speed_km_per_hr * 1000) / (60 * 60)\n    time_sec = 24\n    distance_m = speed_m_per_sec * time_sec\n    return distance_m\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n    \n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # Explanation: A prime number is a positive integer greater than 1 that has no\n    # positive integer divisors other than 1 and itself. A composite number is\n    # a positive integer greater than 1 that is not prime. However, the number\n    # 1 itself is neither prime nor composite. Thus, Pip's statement is not completely\n    # correct because it does not exclude the number 1.\n\n    # Pip's claim check\n    pip_is_correct = True  # Assume Pip is initially correct\n    for number in range(1, 3):  # Check for small numbers, including 1 and a prime (e.g., 2)\n        if number > 1:  # Avoiding checking number 1\n            # Check if number is prime by checking divisibility by any number from 2 to sqrt(n)\n            for divisor in range(2, int(number ** 0.5) + 1):\n                if number % divisor == 0:  # Found a divisor, so it's not prime\n                    break\n            else:  # No divisor found, number is prime\n                if number == 1:  # If the number is 1, Pip's claim fails\n                    pip_is_correct = False\n                    break\n        else:  # If number is 1, Pip's claim fails\n            pip_is_correct = False\n            break\n\n    ans = pip_is_correct\n    return ans\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    foreign_language_students = 54\n\n    # Calculate students taking both classes using the inclusion-exclusion principle\n    both_classes = math_students + foreign_language_students - total_students\n\n    # Calculate students taking only maths class\n    only_math = math_students - both_classes\n    \n    return only_math\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (i + 1) / i\n    return product\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25)*x, 36)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "from itertools import combinations\n\ndef solution():\n    # Generate all distinct combinations of 3 integers that sum up to 11\n    # since the fourth number is determined if the other three are known\n    combs = combinations(range(1, 12), 3)\n    count = 0\n    for comb in combs:\n        if sum(comb) == 11:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    num = 40309\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num - 40309\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    total_sweets = 42\n    kept_by_kasia = 13\n    sweets_to_share = total_sweets - kept_by_kasia\n    sweets_per_friend = sweets_to_share / 2\n\n    lucie_sweets = sweets_per_friend\n    given_to_joan = (2 / 7) * lucie_sweets\n    lucie_keeps = lucie_sweets - given_to_joan\n\n    return lucie_keeps\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    # We want to find n such that:\n    # The total number of boys B = n^2 + (n-2)^2 + (n-4)^2 + ...\n    # The total number of girls G = (n-1)^2 + (n-3)^2 + ...\n    # where n is the length of the outermost layer of the array and n-1 the next and so on\n    # B - G = 52\n    # So we need to calculate the difference and check for which value of n this difference is 52\n    # Also considering that n must be odd, since the inner layer must be boys (1 boy)\n    \n    n = 1 # starting from the smallest possible square array with odd dimensions\n    difference = 0 # initializing the difference between boys and girls\n    while difference != 52:\n        # calculate the total number of boys and girls up to n layers\n        B = sum((2*i + 1)**2 for i in range(n//2 + 1))\n        G = sum((2*i)**2 for i in range(n//2))\n        difference = B - G\n        n += 2 # we are only interested in an array with an odd number of layers\n    \n    # Once we have found the correct n, the total number of students is n^2 which is the total array size\n    total_students = n**2\n    return total_students\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let the weekly pension be represented by 1 (or 100%)\n\n    # On Friday night, he spends one quarter (1/4)\n    friday_spent = 1/4\n\n    # Remaining after Friday night\n    remaining_after_friday = 1 - friday_spent\n\n    # On Saturday night, he spends one third of the remaining amount\n    saturday_spent = remaining_after_friday * (1/3)\n\n    # Remaining after Saturday night\n    remaining_after_saturday = remaining_after_friday - saturday_spent\n\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # If he uses a 5-litre pail, 4 litres of water will overflow,\n    # which means the tank's capacity is 5 - 4 = 1 litre less than a multiple of 5 litres.\n    # Let's call this capacity C.\n\n    # If he uses a 3-litre pail, he needs 4 more pails of water,\n    # so the total water needed with 3-litre pails is (4+1) * 3 = 15 litres.\n\n    # Since this is the water needed and also fills the tank with 3-litre pails,\n    # we can conclude that the tank's capacity C is 15 litres,\n    # as it is just 1 litre less than a multiple of 5 (that is, 15+1=16 which is a multiple of 5)\n    # and it is the right amount of litres using 3-litre pails.\n\n    return 15\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults_to_children = 1 / 4\n    adults = total_people / (1 + ratio_adults_to_children)\n    return int(adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n    \n    total_combinations = num_school_bags * num_pencil_boxes\n    \n    return total_combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, pears = symbols('apples pears')\n    \n    # Original ratio of apples to pears\n    equation1 = Eq(apples/pears, 3/4)\n    \n    # After replacing 36 pears with apples, the number of apples is 1.5 of the number of pears\n    equation2 = Eq((apples + 36) / (pears - 36), 1.5)\n    \n    # Solve the systems of equations\n    solutions = solve((equation1, equation2), (apples, pears))\n    \n    return solutions[apples][0]\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_sequence = \"6129043\"\n    sum_recurring_sequence = sum(int(digit) for digit in recurring_sequence)\n    full_repetitions = 212 // len(recurring_sequence)\n    remaining_digits = 212 % len(recurring_sequence)\n    sum_first_212_digits = (sum_recurring_sequence * full_repetitions) + \\\n                           sum(int(recurring_sequence[i]) for i in range(remaining_digits))\n    return sum_first_212_digits\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    for soldiers in range(1, 1000):\n        if (soldiers + 31) == (int(soldiers ** 0.5) + 1) ** 2:\n            return soldiers + 31\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    # Number of gaps between Ginkgo trees is one less than the number of trees\n    num_ginkgo_trees = 30\n    num_willow_trees_needed = num_ginkgo_trees - 1\n\n    return num_willow_trees_needed\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n > 0:\n            n //= p\n            count += n\n        return count\n\n    zeros_needed = 28\n    prime_factor_5 = 5\n\n    n = 1\n    while count_factors(n, prime_factor_5) < zeros_needed:\n        n += 1\n    return n - 1  # Subtract 1 because we overshoot the actual number of 5's needed\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    ans = (2/3) * 729\n    return ans\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    people = 12\n    handshakes = (people * (people - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # The worst case scenario to not get any pair is to pick one from each color.\n    # That would involve 1 yellow, 1 green, 1 white, 1 red, and 1 black sock, totaling 5 socks.\n    # To ensure one pair, we just need one more sock of any color, which adds up to 6 socks.\n    # To ensure two pairs, we will imagine the worst case scenario:\n    # After we already have one pair, we might pick the other colors (1 green, 1 white, 1 red, and 1 black).\n    # So we add 4 to the 6 we already have, which gives us 10 socks.\n    # Now, to guarantee the second pair, we need only one more sock.\n    # Therefore, the smallest number of socks Daniel must pick is 11.\n    return 11\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    total_cost = 5 * 1.09 + 6 * 0.55\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_current_age = symbols('sam_current_age')\n\n    equation = Eq(sam_current_age + 4, 2 * (sam_current_age - 4))\n\n    sam_age_solution = solve(equation, sam_current_age)\n\n    return sam_age_solution[0]\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    all_numbers = sorted(int(''.join(p)) for p in permutations(digits))\n    n = next(num for num in all_numbers if num % 2 != 0)\n    return n\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    ans = 492.9 + 73.521 + 32.12\n    return ans\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    # The answer must be a multiple of 4 and a factor of 36.\n    # we know the factors of 36 and we check for those in the range\n    # who also respect the other conditions\n    for i in range(10, 21):\n        if 36 % i == 0 and i % 4 == 0:\n            return i\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    result = solve_congruence(*congruences)\n\n    return result[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    # Total letters in RAINBOW\n    total_letters = len(\"RAINBOW\")  \n    \n    # Number of vowels in RAINBOW (A, I, O)\n    num_vowels = 3  \n    \n    # Number of consonants in RAINBOW (R, N, B, W)\n    num_consonants = total_letters - num_vowels  \n    \n    # Calculate factorial of vowels and consonants\n    vowels_fact = factorial(num_vowels)\n    consonants_fact = factorial(num_consonants)\n    \n    # Calculate the ways to arrange the consonants\n    consonant_arrangements = consonants_fact  \n    \n    # Calculate the total number of places we can insert the vowels\n    # We have (num_consonants + 1) places to insert the vowels\n    spaces = num_consonants + 1\n    \n    # For each arrangement of the consonants, there are (spaces choose num_vowels)\n    # possible ways to insert the vowels into the arrangement\n    ways_to_insert_vowels = factorial(spaces) // (factorial(num_vowels) * factorial(spaces - num_vowels))\n    \n    # Total arrangements where vowels are never together\n    total_arrangements = consonant_arrangements * ways_to_insert_vowels\n    \n    # Total arrangements of vowels which we have to subtract (when vowels are together)\n    total_vowel_arrangements = vowels_fact * factorial(spaces)\n    \n    # Subtract the total arrangements where vowels are together from the total possible arrangements\n    ans = (total_letters - total_vowel_arrangements) - consonant_arrangements * (num_consonants - num_vowels + 1) * vowels_fact\n    \n    return ans\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the number of cows, g be the number of goats, and h be the number of chickens\n    c, g, h = symbols('c g h')\n    \n    # Equations based on the given problem\n    equation1 = Eq(h + g, 40)        # chickens and goats combined\n    equation2 = Eq(3 * h, 5 * c)     # 3 times chickens is 5 times cows\n    equation3 = Eq(2 * g, 10 * c)    # 2 times goats is 10 times cows\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g, h))\n    \n    # Calculate the total number of animal feet\n    # Each chicken has 2 feet, each goat has 4 feet, and each cow has 4 feet\n    chicken_feet = 2 * solutions[h]\n    goat_feet = 4 * solutions[g]\n    cow_feet = 4 * solutions[c]\n    total_feet = chicken_feet + goat_feet + cow_feet\n\n    return total_feet\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    first_10_sum = 20\n    first_30_sum = 90\n\n    # Using the formula for the sum of the first n terms of an arithmetic sequence:\n    # sum_n = n/2 * (2a + (n-1)d)\n    # where sum_n is the sum of the first n terms, a is the first term, and d is the common difference\n    # We have two equations based on the given sums:\n    # 10/2 * (2a + (10-1)d) = 20\n    # 30/2 * (2a + (30-1)d) = 90\n\n    # Let's represent the common difference as d\n    # Solve the system of two equations to find a and d\n    \n    # Equation (1) derived from the sum of the first 10 terms:\n    # 5 * (2a + 9d) = 20\n    # 10a + 45d = 20\n\n    # Equation (2) derived from the sum of the first 30 terms:\n    # 15 * (2a + 29d) = 90\n    # 30a + 435d = 90\n    \n    # Simplifying both equations we get:\n    # 10a + 45d = 20  ... (3)\n    # 30a + 435d = 90 ... (4)\n    \n    # Multiply equation (3) by 3 to match the coefficient of a in equation (4)\n    # 30a + 135d = 60\n    \n    # Now let's subtract this new equation from equation (4):\n    # (30a + 435d) - (30a + 135d) = 90 - 60\n    # 300d = 30\n    \n    # Now solving for d\n    d = 30 / 300\n\n    return d\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    # Total number of stickers\n    total_stickers = 117\n    # Ratio of the number of stickers Amy has to Penny's\n    ratio_amy = 5\n    ratio_penny = 4\n    # Total parts\n    total_parts = ratio_amy + ratio_penny\n    # Calculate the number of stickers Penny has based on the ratio\n    stickers_penny = (total_stickers * ratio_penny) / total_parts\n    return int(stickers_penny)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    words_in_6_days = words_in_9_minutes * days\n\n    total_words = words_in_6_days\n\n    return total_words\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6\n    time_seconds = 300\n    \n    speed_mps = speed_kmh * (1000 / 3600) # Convert speed from km/h to m/s\n    distance_meters = speed_mps * time_seconds\n    \n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    total_apples = symbols('total_apples')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(40, (4 / 7) * (1 / 2) * total_apples)\n\n    # Solve for the total number of apples\n    solutions = solve((equation1), (total_apples))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    min_difference = float('inf')\n    closest_number = None\n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        current_difference = abs(2978 - number)\n        if current_difference < min_difference:\n            min_difference = current_difference\n            closest_number = number\n    return closest_number\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    # For n lines, maximum number of regions into which the plane is divided is given by the formula:\n    # R(n) = 1 + n + (n * (n - 1)) / 2\n    n = 10\n    ans = 1 + n + (n * (n - 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_row = 48\n    last_row = 80\n    difference = 4\n\n    # Find the number of rows\n    number_of_rows = ((last_row - first_row) // difference) + 1\n\n    # Sum of arithmetic sequence formula: n/2 * (first_term + last_term)\n    total_seats = number_of_rows / 2 * (first_row + last_row)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    for i in range(10, 100):\n        if i % 7 == 0 and 7007 % i == 0:\n            # Since both numbers are multiples of 7, check if the other factor is also a 2-digit number\n            other_multiple = 7007 // i\n            if 10 <= other_multiple < 100:\n                return i + other_multiple\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    multiplied_by = 2\n    subtracted_value = 10\n\n    original_number = (result + subtracted_value) / multiplied_by\n\n    return original_number\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let the four numbers be a, b, c, d in the row\n    # Given: (a + b) / 2 = 10, so a + b = 20\n    # Given: (c + d) / 2 = 22, so c + d = 44\n    # Given: (a + d) / 2 = 14, so a + d = 28\n\n    # We want to find the average of b and c, which is (b + c) / 2\n\n    # From a + d = 28 and a + b = 20 we can find d in terms of b\n    # a + d = 28 => a = 28 - d\n    # Substitue a in a + b = 20 => 28 - d + b = 20 => d = 8 + b\n\n    # Similarly, from c + d = 44 and a + d = 28 we can find c in terms of b\n    # c + d = 44 => c = 44 - d\n    # Substitute d = 8 + b from above => c = 44 - (8 + b) => c = 36 - b\n\n    # Average of b and c is (b + c) / 2 = (b + (36 - b)) / 2\n    # Simplify (b + 36 - b) / 2 = 36 / 2\n    average_middle = 36 / 2\n\n    return average_middle\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_AB = 22\n    C = 19\n\n    # Sum of A and B based on the average\n    sum_AB = 2 * average_AB\n\n    # Sum of A, B, and C\n    sum_ABC = sum_AB + C\n\n    # Average of A, B, and C\n    average_ABC = sum_ABC / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    average_age_ce = 34\n    average_age_em = 36\n    average_age_cm = 44\n\n    # Using the Inclusion-Exclusion Principle\n    sum_average_double = average_age_ce + average_age_em + average_age_cm\n    # Each individual age is counted twice in sum_average_double\n    average_all_three_subjects = (sum_average_double * 2) / 3  # Twice the total average divided by 3 gives us the average age of all three teachers\n    \n    return average_all_three_subjects\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    birth_year = 1533\n    death_year = 1603\n    birth_month = 9  # September\n    death_month = 3  # March\n    birth_day = 7\n    death_day = 24\n\n    years_passed = death_year - birth_year\n    months_passed = death_month - birth_month\n    days_passed = death_day - birth_day\n\n    # If months_passed is negative, borrow a year\n    if months_passed < 0:\n        years_passed -= 1\n        months_passed += 12  # Borrowing a year adds 12 months\n\n    # If days_passed is negative, borrow a month\n    if days_passed < 0:\n        months_passed -= 1\n        # Borrowing a month; assuming February for simplicity as it does not affect the calculation of years\n        days_passed += 28\n\n    # Final age at death is in years\n    age_at_death = years_passed\n\n    return age_at_death\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n\n    remainder = total_coins % children\n\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n\n    # Using the Pigeonhole Principle, the minimum number in the layer with the most\n    # cakes is obtained by dividing the total number of cakes by the number of layers\n    # and then rounding up to the next integer.\n    most_cakes = -(-total_cakes // layers)\n\n    return most_cakes\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    max_side = 1\n    while (max_side + 1) ** 2 <= 23:\n        max_side += 1\n    cut_length = 23 - max_side**2\n    return cut_length\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    result = ((21 + 1) * 7) - (20 + (1 * 7))\n    return result\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        fraction_part = ((2018 + i) / 5) - ((2018 + i) // 5)\n        total += fraction_part\n    return total\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the common difference\n    d = symbols('d')\n    \n    # The nth term in an arithmetic sequence is given by a_n = a_1 + (n-1)d\n    # Sum of the first n terms in an arithmetic sequence is given by S_n = n/2 * (2a_1 + (n-1)d)\n\n    # a_1 is given as 11 (number of cookies in box 1)\n    a_1 = 11\n    # n is 10 because we have 10 boxes\n    n = 10\n    # S_n (the total number of cookies) is given as 425\n    S_n = 425\n\n    # Set up the equation for the sum of an arithmetic sequence and solve for d\n    eq = Eq(n / 2 * (2 * a_1 + (n - 1) * d), S_n)\n    solution = solve(eq, d)\n    return solution[0]\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n    eq1 = Eq(3/4 * chelsia, 2/3 * benson)\n    eq2 = Eq(chelsia, benson - 18)\n\n    sol = solve((eq1, eq2), (chelsia, benson))\n\n    total_sum = sol[chelsia] + sol[benson]\n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # There are 7 terms in the sequence, and the sum is 357.\n    # Let x be the first term (smallest number) in the sequence,\n    # then the sequence is x, x+2, x+4, ..., x+12, and the sum is 7x + 6*2 (because there are 6 gaps each of 2).\n    # The equation is then 7x + 12 = 357. We need to solve for x.\n    \n    # 7x + 12 = 357\n    # 7x = 357 - 12\n    # 7x = 345\n    # x = 345 / 7 = 49\n    \n    x = (357 - 12) // 7\n    return x\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    repetitions = factorial(2)  # Since 1 is repeated 2 times\n\n    # Total permutations\n    permutations = factorial(total_digits) // repetitions\n\n    return permutations\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n    \n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum([1 / i for i in range(1995, 2009)])\n    A = 1 / A_inverse\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    table_price, chair_price = symbols('table_price chair_price')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(5 * table_price + 12 * chair_price, 720)\n    equation2 = Eq(table_price, chair_price + 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table_price, chair_price))\n\n    return solutions[table_price]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n    ratio_martin = 9\n    ratio_carter = 13\n    speed_difference = 20\n\n    # Since the distance is the same, time * speed = distance\n    # and we have time_martin * martin_speed = time_carter * carter_speed\n    # Given the ratio of times, we can set up the ratio of speeds as the inverse\n    # time_martin / time_carter = carter_speed / martin_speed\n\n    equation1 = Eq(ratio_martin * martin_speed, ratio_carter * carter_speed)\n    equation2 = Eq(martin_speed, carter_speed + speed_difference)\n\n    solution = solve((equation1, equation2), (martin_speed, carter_speed))\n\n    return solution[carter_speed]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    # Loop through all possible combinations where x, y, z > 0 and their sum is 13\n    for x in range(1, 13):\n        for y in range(1, 13):\n            for z in range(1, 13):\n                if x + y + z == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    result = solve_congruence(*congruences)\n    return result[0]\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # There is only one even prime number, which is 2\n    return 2\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the time it takes George to paint the room on his own\n    g = symbols('g')\n\n    # Fred and George's combined work rate\n    combined_rate = 1 / 6\n\n    # Fred's work rate\n    fred_rate = 1 / 9\n\n    # George's work rate equation\n    george_rate = 1 / g\n\n    # Equation based on combined work rate\n    equation = Eq(fred_rate + george_rate, combined_rate)\n\n    # Solve for George's time\n    george_time = solve(equation, g)[0]\n\n    return george_time\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    return 18 - x\n\nans = solution(x)  # You need to replace `x` with the actual amount of cloth used for the dress."
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    ans = Fraction(3) / Fraction(1, 3)\n    return ans\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # According to the Pigeonhole Principle\n    # In the worst-case scenario:\n    # We take out all apples of one color plus one from the other color\n    # to ensure we have at least two apples of the same color\n    num_red_apples = 14\n    num_yellow_apples = 20\n    \n    # Taking all the red apples\n    apples_taken = num_red_apples\n    # Taking one yellow apple to ensure two apples of the same color\n    apples_taken += 1\n    \n    return apples_taken\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let r be the number of red pens sold, and R be the initial number of red pens\n    # Since 20 red pens were left and r red pens were sold, then R - r = 20\n    # The initial ratio is 3:7, which means R/B = 3/7, where B is the initial number of black pens\n    # The final ratio after selling r pens of each is (R - r)/(B - r) = 5/13\n    # Given R - r = 20 and replacing R = R from the first equation into the second, we have:\n    # (20 + r)/(B - r) = 5/13\n    # Use the initial ratio to find a relationship between R and B: B = (7/3) * R\n    # Substitute B in the second ratio equation:\n    # (20 + r)/((7/3) * R - r) = 5/13\n    # Substitute R = 20 + r into the equation:\n    # (20 + r)/((7/3) * (20 + r) - r) = 5/13\n    # Solve for r:\n    r = 0\n    while True:\n        if (20 + r) / ((7/3) * (20 + r) - r) == 5/13:\n            break\n        r += 1\n    return r\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Legs count for each type of pet\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # Fixed number of pets\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n    # Unknown number of birds, represented by the variable num_birds\n\n    # Calculate the total legs of cats, dogs, and the rabbit\n    total_legs_fixed_pets = (num_cats * legs_per_cat) + (num_dogs * legs_per_dog) + (num_rabbits * legs_per_rabbit)\n\n    # Subtract the total_legs_fixed_pets from the total number of legs to find the remaining legs, which belong to birds\n    remaining_legs_for_birds = 28 - total_legs_fixed_pets\n\n    # Since each bird has 2 legs, divide the remaining legs by 2 to find the number of birds\n    num_birds = remaining_legs_for_birds / legs_per_bird\n\n    return int(num_birds)\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    total_entrances = 5\n    total_people = 4\n    # Each person can choose any of the 5 entrances, so it's 5 choices to the power of 4 people.\n    ways = total_entrances ** total_people\n    return ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    return 2.42 * 1.6\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # Initial value of the house after increasing by 5% last year\n    value_after_increase = 10500\n    \n    # To find the original price, we need to reverse the 5% increase\n    original_price = value_after_increase / 1.05\n    \n    # This year, the house loses 5% of its value from last year's value\n    value_after_decrease = value_after_increase * (1 - 0.05)\n    \n    # Calculate the profit or loss by subtracting the original price from this year's value\n    profit_or_loss = value_after_decrease - original_price\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_div_5 = 200 // 5\n    count_div_7 = 200 // 7\n    count_div_5_and_7 = 200 // (5 * 7)\n\n    # Applying the inclusion-exclusion principle\n    ans = count_div_5 + count_div_7 - count_div_5_and_7\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for factor in factors_of_42:\n        if 10 < factor < 20:\n            return factor\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    # average = sum of terms / number of terms\n    # from the question we have average (6) = sum of terms (8 + 3 + 9 + unknown) / 4\n    # so, 6 * 4 = 8 + 3 + 9 + unknown\n    # to find the unknown, we isolate it on one side of the equation\n    total_for_average = 6 * 4\n    known_sum = 8 + 3 + 9\n    unknown = total_for_average - known_sum\n    \n    return unknown\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen_price, ruler_price = symbols('pen_price ruler_price')\n    equation1 = Eq(2 * ruler_price + 9 * pen_price, 21.60)\n    equation2 = Eq(ruler_price, pen_price + 0.90)\n\n    solutions = solve((equation1, equation2), (pen_price, ruler_price))\n\n    return solutions[ruler_price]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    num_bags = total_weight / bag_weight\n    return int(num_bags) if num_bags.is_integer() else int(num_bags) + 1\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    # Performing the inverse operations\n    day_plus_fifty = result + 50  # Step 8: Add 50\n    day = day_plus_fifty % 100  # Step 7: Leon's birth day would be the last two digits\n    month_times_hundred = (day_plus_fifty - day) // 5  # Step 6: Divide by 5\n    month_minus_six = (month_times_hundred + 20) // 5  # Step 5: Add 20, then divide by 5\n    month_minus_twenty_four = month_minus_six - 6  # Step 4: Subtract 6\n    month = month_minus_twenty_four // 4  # Step 3: Divide by 4\n    return (month, day)\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    from sympy import isprime\n    \n    for number in range(1, 50):\n        if number % 3 == 2 and isprime(number) and (number - 2) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '6', '7', '8', '9']\n    for perm in permutations(digits):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:5])) * 10 + int(perm[-1])\n        third_number = int(''.join(perm[5:6])) * 100 + int(perm[1]) * 10 + int(perm[2])\n\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\n    return None\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_price = 5\n    refill_price = 1\n    total_money = 10\n\n    # Calculate the number of cups he can afford\n    # Buy first cup with initial price, then use refill price for subsequent cups\n    if total_money >= initial_cup_price:\n        total_money -= initial_cup_price\n        cups_afforded = 1 + (total_money // refill_price)\n    else:\n        cups_afforded = 0\n\n    return cups_afforded\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    total_peaches_3_monkeys = 96\n    total_days_3_monkeys = 2\n\n    peaches_per_monkey_per_day = total_peaches_3_monkeys / (3 * total_days_3_monkeys)\n    \n    total_monkeys_5 = 5\n    total_days_5 = 4\n    \n    total_peaches_5_monkeys = peaches_per_monkey_per_day * total_monkeys_5 * total_days_5\n    \n    return int(total_peaches_5_monkeys)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "def solution():\n    from math import factorial\n    \n    # Number of ways to arrange the groups themselves (Story, Comic, Science)\n    group_arrangements = factorial(3)\n    \n    # Number of ways to arrange the books within each group\n    story_arrangements = factorial(2)\n    comic_arrangements = factorial(3)\n    science_arrangements = factorial(4)\n    \n    # Total ways of arrangement\n    total_ways = group_arrangements * story_arrangements * comic_arrangements * science_arrangements\n    \n    return total_ways\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    first_50k_tax = 0.06 * 50000\n    remaining_income = income - 50000\n    total_tax_paid = 10000\n\n    tax_equation = Eq(first_50k_tax + (0.06 + T/100) * remaining_income, total_tax_paid)\n\n    solved_T = solve(tax_equation, T)\n\n    return solved_T[0]\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    from math import comb\n\n    # Since each friend will get at least 1 ice-cream, we distribute 1 to each first.\n    # There will be 5 - 3 = 2 ice-creams left to distribute.\n    # The problem then becomes a problem of distributing 2 identical items to 3 different baskets,\n    # which is equivalent to the stars and bars problem in combinatorics.\n    \n    remaining_ice_creams = 5 - 3  # each friend gets one, leaving two to distribute\n    friends = 3 - 1  # We subtract 1 because the formula is (n+k-1) choose (k)\n    \n    # Using the stars and bars method, where n is the remaining ice creams and k is the friends\n    ways = comb(remaining_ice_creams + friends, remaining_ice_creams)\n\n    return ways\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # Calculate the sum of the arithmetic sequence from 4 to 400\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_forward = (num_terms * (first_term + last_term)) // 2\n    \n    # Calculate the sum of the arithmetic sequence from 396 to 4\n    first_term_back = 396\n    last_term_back = 4\n    num_terms_back = ((first_term_back - last_term_back) // difference) + 1\n    sum_backward = (num_terms_back * (first_term_back + last_term_back)) // 2\n    \n    # Sum both sequences together\n    total_sum = sum_forward + sum_backward\n\n    return total_sum\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    ans = 345 * 5\n    return ans\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    average_jan_to_mar = 450\n    average_apr_to_jul = 350\n    total_aug_to_oct = 1250\n    average_nov_to_dec = 400\n    \n    months_jan_to_mar = 3\n    months_apr_to_jul = 4\n    months_aug_to_oct = 3\n    months_nov_to_dec = 2\n    \n    total_jan_to_mar = average_jan_to_mar * months_jan_to_mar\n    total_apr_to_jul = average_apr_to_jul * months_apr_to_jul\n    # total_aug_to_oct is already given\n    total_nov_to_dec = average_nov_to_dec * months_nov_to_dec\n    \n    total_spent = total_jan_to_mar + total_apr_to_jul + total_aug_to_oct + total_nov_to_dec\n    total_months = months_jan_to_mar + months_apr_to_jul + months_aug_to_oct + months_nov_to_dec\n    \n    average_per_month = total_spent / total_months\n    \n    return average_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    # Speeds\n    walk_speed = 40  # m/min\n    cycle_speed = 60  # m/min\n\n    # Assuming the distance to the library is d meters\n    d = 1  # The actual distance does not matter, as it will cancel out\n\n    # Time taken to walk to the library and cycle back\n    walk_time = d / walk_speed\n    cycle_time = d / cycle_speed\n\n    # Total distance is going to the library and coming back\n    total_distance = 2 * d  # d to go and d to return\n    \n    # Total time for the whole trip\n    total_time = walk_time + cycle_time\n\n    # Average speed\n    avg_speed = total_distance / total_time\n\n    return avg_speed\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let's denote the price of one serving of ice cream as p.\n\n    # Sophie wanted to buy 5 servings but was short of $2.30.\n    # This means: 5p = (money given by mother) + 2.30\n\n    # Sophie bought 3 servings and had $0.30 left.\n    # This means: 3p = (money given by mother) - 0.30\n\n    # We can solve these equations for p and the money given by the mother.\n\n    # Now we calculate p using both equations:\n    # Subtracting the second equation from the first gives us:\n    # (5p - 3p) = 2.30 + 0.30\n    # 2p = 2.60\n    # p = 2.60 / 2\n    p = 2.60 / 2\n\n    # Now find out how much money Sophie's mother gave by using the price of one serving:\n    # 3p + 0.30 = money given by mother\n    # 3 * p + 0.30 = money given by mother\n    money_given_by_mother = 3 * p + 0.30\n\n    return money_given_by_mother\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n    \n    solutions = solve(equation, x)\n    \n    return solutions\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    # Here M represents a digit and 127M is a number with M as the units digit\n    # Since the total number of sweets is divisible by 25 (number of bags)\n    # the units digit of the number must be either 0 or 5 for the number to be divisible by 25\n    # We know the number is 127M, so we need to find M such that when M is added to 1270 or 1275,\n    # the number is divisible by 25 (since 1270 and 1275 are the numbers with 0 or 5 in the units place respectively)\n\n    # Iterate over possible units digits that make the number divisible by 25\n    for M in range(10):\n        total_sweets = int(f\"127{M}\")\n        if total_sweets % 25 == 0:\n            # Once the correct M is found, get the number of sweets in each bag by dividing total sweets by number of bags\n            sweets_per_bag = total_sweets // 25\n            return sweets_per_bag\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    # The relationship between x and y given 9:x = y:2 is inversely proportional.\n    # Let's find the value of y when x = 3\n    # Using the cross multiplication property of proportions, we have:\n    # 9 * 2 = x * y ==> 18 = x * y\n\n    # Given x = 3\n    x = 3\n    # Substitute x = 3 into the equation to find y\n    # 18 = 3 * y ==> y = 18 / 3\n    y = 18 / x\n    \n    return y\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    min_odd_number = float('inf')  # Start with a very large number\n\n    for perm in permutations('2356'):\n        number = int(''.join(perm))\n        # Check if the number is odd and if it is smaller than the current smallest\n        if number % 2 != 0 and number < min_odd_number:\n            min_odd_number = number\n    \n    return min_odd_number\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    ans = 391 // 17\n    return ans\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To ensure that at least two balls of the same colour are removed,\n    # one must consider the worst-case scenario: taking out alternating\n    # colours. As there are 7 green balls and 8 blue balls, the maximum\n    # number of attempts to get a pair of the same colour without looking\n    # would be picking all 7 green balls and then one blue ball, or vice\n    # versa. This would total 8 picks (7 of one colour and 1 of the other).\n    # After 8 picks, you are guaranteed to have at least two of the same colour.\n\n    return 8 + 1  # plus one to get at least two of the same colour \n\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let x be the number you started with\n    x = symbols('x')\n    # Follow the instructions step by step with x\n    # Add 3\n    x = x + 3\n    # Multiply by 2\n    x = x * 2\n    # Take away 2\n    x = x - 2\n    # Add 10\n    x = x + 10\n    # Divide by 2\n    x = x / 2\n    # Take away the number you started with (which is represented by the symbol 'x')\n    x = x - symbols('x')\n    # x now represents the number that is left\n\n    return x\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    # Let the total number of bracelets that Felicia had originally be f.\n    # According to the problem, Felicia sold 3/5 of her bracelets,\n    # and Janice bought 2/5 of what Felicia sold.\n    \n    # Let the number of bracelets Janice bought be x.\n    # Then, Felicia has (f - 3f/5) bracelets left and Janice has (96 + x) bracelets now.\n    \n    # The ratio of Felicia's bracelets to Janice's bracelets became 5:7.\n    # Therefore, (f - 3f/5) / (96 + x) = 5 / 7\n    \n    # Solve for x in terms of f:\n    # 7(f - 3f/5) = 5 * (96 + x)\n    # 7(2f/5) = 5 * (96 + x)\n    # 14f/5 = 480 + 5x\n    # 14f = 2400 + 25x\n    # f = (2400 + 25x) / 14\n    \n    # We also know that Janice bought 2/5 of what Felicia sold, so:\n    # x = 2/5 * 3/5 * f\n    # x = 6/25 * f\n    \n    # Now substitute f from the first equation into the x equation:\n    # x = 6/25 * ((2400 + 25x) / 14)\n    # 14x = 6/25 * (2400 + 25x)\n    # 14 * 25 * x = 6 * (2400 + 25x)\n    # 350x = 14400 + 150x\n    # 200x = 14400\n    # x = 14400 / 200\n    # x = 72\n    \n    # Therefore, Janice bought 72 bracelets from Felicia.\n    return 72\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    ans = round(numerator / denominator, 3)\n\n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    return 299 + 199 + 99 + 5\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    total_cost = (20 * 4) + (10 * 5) + (20 * 6)\n    average_cost = total_cost / total_books\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    prime_numbers = list(primerange(50, 101))\n    return len(prime_numbers)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    total_sevens = 0\n    \n    # counting numbers where both hundred and tens place is 7\n    total_sevens += len([f\"77{i}\" for i in range(10) if i != 7])\n\n    # counting numbers where both tens and unit place is 7\n    total_sevens += len([f\"{i}77\" for i in range(1, 10)])\n    \n    # counting numbers where both hundred and unit place is 7\n    total_sevens += len([f\"7{i}7\" for i in range(10) if i != 7])\n\n    # We have counted the number 777 in all three cases; we should subtract 2 times to get it counted only once\n    total_sevens -= 2\n\n    return total_sevens\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n    \n    equation1 = Eq(jack, 5 * kyle)\n    equation2 = Eq(kyle, 2/7 * (jack - 72))\n    \n    solutions = solve((equation1, equation2), (jack, kyle))\n    \n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    max_non_yellow = 6 + 4 + 12  # sum of non-yellow shirts\n    to_get_yellow = max_non_yellow + 1  # must take out all non-yellow shirts plus one more for yellow\n    return to_get_yellow\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multi_pack_price = 3.90\n    individual_price = 0.35\n    total_individual_price = 15 * individual_price\n    savings = total_individual_price - multi_pack_price\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    rate = 0.05\n    time = 11\n\n    interest = principal * rate * time\n    total_amount = principal + interest\n\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4) + (3/4) + (3/4)\n    missing_number = (total - 1) / (1/4)\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    # Number of terms\n    n = 20\n    # Common difference\n    d = 2\n    # Sum of the arithmetic progression\n    S = 560\n    \n    # Formula for the sum of an arithmetic progression: S = n/2 * (2a + (n-1)d)\n    # Where S = sum, n = number of terms, a = first term, d = common difference\n    # Rearrange the formula to find the first term, a:\n    # a = (S/n - (n-1)d/2)\n\n    a = (S / n - (n - 1) * d / 2)\n\n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_height = 8\n    day_climb = 3\n    night_slip = 2\n    net_progress_per_day = day_climb - night_slip\n    days = 0\n    current_height = 0\n\n    while current_height < total_height:\n        days += 1\n        current_height += day_climb\n        if current_height >= total_height:\n            break\n        current_height -= night_slip\n\n    return days\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    # First four days\n    pages_first_four_days = 25 * 4\n    # Following six days\n    pages_following_six_days = 40 * 6\n    # Last five days\n    pages_last_five_days = 80\n    # Total pages read\n    total_pages = pages_first_four_days + pages_following_six_days + pages_last_five_days\n    # Total number of days\n    total_days = 4 + 6 + 5\n    # Average pages per day\n    average_pages_per_day = total_pages / total_days\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    penny_remain = 14\n    brother_after = 12\n    difference = penny_remain - brother_after\n\n    brother_original = brother_after - difference - 10\n\n    return brother_original\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    # Perform the multiplication out of the multiplication table\n    result = 12345679 * 72\n    return result\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Range from 10 to 99 because we're dealing with a two-digit number\n        reversed_age = int(str(age)[::-1])  # Reversing the digits\n        if reversed_age + 1 == age // 2:  # Checking the condition provided in the question\n            return age  # Returning the current age if condition is met\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # We use the pigeonhole principle. Since there are 4 suits, Tom may draw one card from each suit first.\n    # To guarantee that he gets 4 cards from the same suit, he must draw one more after having 3 of each suit.\n    # So the answer is 4 suits * 3 cards/suit + 1\n    ans = 4 * 3 + 1\n    return ans\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    return 26 + 9 + 14 + 21\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    # Number of tickets remaining unsold is the 40% of the total capacity\n    remaining_tickets_percentage = 40\n    remaining_tickets = 28\n    \n    # Since 28 tickets are 40%, we find 1% by dividing by 40, and then 100% for the total capacity\n    total_capacity = (remaining_tickets / remaining_tickets_percentage) * 100\n    return int(total_capacity)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols (the amounts spent by each)\n    amount_spent = symbols('amount_spent')\n\n    # Original amounts saved\n    hayden_saved = 1420\n    mitchell_saved = 505\n\n    # Equations based on the problem\n    remaining_hayden = hayden_saved - amount_spent\n    remaining_mitchell = mitchell_saved - amount_spent\n\n    # Hayden had 4 times as much money as Mitchell after spending\n    equation = Eq(remaining_hayden, 4 * remaining_mitchell)\n\n    # Solve for the amount spent\n    solution = solve(equation, amount_spent)\n\n    # Return the amount spent by each\n    return solution[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    # If one-quarter of a number is 15, we can find the whole number\n    whole_number = 15 * 4\n    # Then, we calculate two-thirds of the whole number\n    two_thirds = (whole_number * 2) / 3\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    # Let the total number of people at the party be x.\n    # Then the number of children is (4/7)x (since 3/7 are adults).\n    # Number of boys among children is (3/8)*(4/7)x = (3/28)x\n    # So, the number of girls among children is (4/7)x - (3/28)x = (16/28 - 3/28)x = (13/28)x\n    # We know the number of girls is 45, so (13/28)x = 45\n    # Solving for x we get x = (28*45)/13\n\n    x = (28*45)/13\n    return int(x)\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Calculate the total value of the two-dollar notes\n    total_two_dollar_notes = 5 * 2\n    \n    # Calculate the total value of the fifty-cent coins in dollars\n    total_fifty_cent_coins = 7 * 0.50\n    \n    # Calculate the total amount of money Jim had initially\n    total_money_initially = total_two_dollar_notes + total_fifty_cent_coins\n    \n    # Cost of the file\n    file_cost = 11.95\n    \n    # Calculate the money left after buying the file\n    money_left = total_money_initially - file_cost\n    \n    return round(money_left, 2)\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_numbers = n * (n+1) // 2\n    return sum_numbers\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = saturday_sales - 435\n\n    total_sales = saturday_sales + sunday_sales\n\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_climb = climb_per_day - slide_per_night\n    \n    # Calculate the number of full days required to reach just below the top\n    days_to_reach_near_top = (total_distance - climb_per_day) // net_climb\n    \n    # Add one more day to climb out completely\n    total_days = days_to_reach_near_top + 1\n    \n    return total_days\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    n = 18  # Total number of pupils\n    r = 3   # Number of pupils to be seated in a row\n\n    # Calculate the number of permutations (ordering matters)\n    ans = factorial(n) // factorial(n - r)\n\n    return ans\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginko_trees = 30\n    willow_trees_between = 2\n    total_willow_trees = (ginko_trees - 1) * willow_trees_between\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_still_water = 28\n    speed_current = 3\n    distance = 150\n\n    speed_upstream = speed_still_water - speed_current\n\n    time_taken = distance / speed_upstream\n\n    return time_taken\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    total = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the weights of Adam, Ben, and Carl\n    adam, ben, carl = symbols('adam ben carl')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    # Solve the system of equations for each person's weight\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    # Get the total weight of all three persons\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight = 500  # in grams\n    cheese_cost_per_kg = 7.48  # in pounds\n    apple_cost = 0.12  # in pounds\n    yoghurt_cost = 0.46  # in pounds\n    \n    num_apples = 8\n    num_yoghurts = 2\n    note_value = 10  # in pounds\n    \n    total_cheese_cost = (cheese_weight / 1000) * cheese_cost_per_kg\n    total_apple_cost = num_apples * apple_cost\n    total_yoghurt_cost = num_yoghurts * yoghurt_cost\n    total_cost = total_cheese_cost + total_apple_cost + total_yoghurt_cost\n    \n    change = note_value - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    # Total number of aircrafts to sell\n    total_aircrafts = 1200\n    # Zack's selling rate in aircrafts per hour\n    zack_rate = 150\n    # Total time (in hours) Andy and Zack work together to sell all aircrafts\n    total_time_together = 6\n    \n    # Total rate of selling aircrafts per hour when Andy and Zack work together\n    total_rate_together = total_aircrafts / total_time_together\n    \n    # Andy's selling rate in aircrafts per hour\n    andy_rate = total_rate_together - zack_rate\n    \n    # Time it would take for Andy to sell all the aircrafts by himself\n    time_for_andy = total_aircrafts / andy_rate\n    \n    return time_for_andy\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    # Initialize the total number of people to 0\n    total_people = 0\n\n    # Loop over possible square sizes (side lengths)\n    for students_side in range(1, 80, 2):  # There should be even numbers of rows if the difference is 80.\n        teachers_side = students_side - 2  # One layer of students on each side makes the teachers' square smaller.\n        \n        # Calculating the number of students and teachers\n        if teachers_side > 0:\n            students = students_side * students_side\n            teachers = teachers_side * teachers_side\n        else:\n            # In the case where there is only an outer layer of students\n            students = students_side * students_side\n            teachers = 0\n        \n        # Check if the difference between students and teachers is 80\n        if students - teachers == 80:\n            total_people = students + teachers\n            break  # We found the correct configuration\n\n    return total_people\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n\n    orange_volume = (orange_ratio / ratio_sum) * total_volume\n\n    return orange_volume\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(x, 3 * y)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    num_days = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_savings = daily_savings * num_days\n    amount_left = original_amount + total_savings - lent_to_brother - spent_on_snacks\n\n    return amount_left\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the amount of money that Steve, Mark and Ryan originally had\n    steve, mark, ryan = symbols('steve mark ryan')\n    \n    # Creating the equations based on the information given in the problem\n    equation1 = Eq(steve, mark + 40)  # Steve had $40 more than Mark\n    \n    # If Steve paid for the meal, the amount left would be in the ratio 3:8:9\n    meal_cost = symbols('meal_cost')\n    equation2 = Eq((steve - meal_cost) * 8, mark * 3)\n    equation3 = Eq((steve - meal_cost) * 9, ryan * 3)\n    \n    # If Ryan paid for the meal, the amount left would be in the ratio 5:4:1\n    equation4 = Eq((ryan - meal_cost) * 4, mark * 5)\n    equation5 = Eq((ryan - meal_cost) * 1, (steve - 40) * 5)\n    \n    # If Mark paid for the meal, the amount left would be in the ratio 10:1:9\n    equation6 = Eq((mark - meal_cost) * 1, steve * 10)\n    equation7 = Eq((mark - meal_cost) * 9, ryan * 1)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), \n                      (steve, mark, ryan, meal_cost))\n    \n    return solutions[meal_cost]\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    money_repaid_to_mum = 10.50\n    remaining_money = total_money - money_repaid_to_mum\n    money_spent_on_magazines = remaining_money / 2\n    money_left = remaining_money - money_spent_on_magazines\n    return money_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    q = 1\n    # We start from 1 and keep increasing q until 44000 / q is a perfect cube\n    while True:\n        if (44000 / q) ** (1/3) % 1 == 0:\n            return q\n        q += 1\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    length, width = symbols('length width')\n    # The length is twice the width\n    equation1 = Eq(length, 2 * width)\n    # The perimeter is 2 times the length plus 2 times the width\n    equation2 = Eq(2 * length + 2 * width, 72)\n    \n    # Solve the two equations to find the length and width\n    solutions = solve((equation1, equation2), (length, width))\n    \n    return solutions[length]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    exponent = 0\n    factor_base = 3\n\n    while number % factor_base == 0:\n        number //= factor_base\n        exponent += 1\n\n    number_of_factors = exponent + 1\n\n    return number_of_factors\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    coefficient_of_static_friction = 0.4  # coefficient of static friction\n    applied_force = 250  # applied force in N\n\n    # magnitude of the maximum static frictional force before the crate starts moving\n    max_static_frictional_force = mass * 9.81 * coefficient_of_static_friction\n\n    # static frictional force is the minimum of the applied force and max static frictional force\n    force_of_static_friction = min(applied_force, max_static_frictional_force)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    n3 = 23  # 3rd term\n    n15 = 155  # 15th term\n\n    # formula for the nth term: an = a1 + (n - 1)*d\n    # since we have the 3rd and 15th term, we can create two equations:\n    # a3 = a1 + (3 - 1)*d = 23\n    # a15 = a1 + (15 - 1)*d = 155\n    # by subtracting the first equation from the second:\n    # a15 - a3 = (a1 + 14*d) - (a1 + 2*d)\n    # 155 - 23 = 14*d - 2*d\n    # 132 = 12*d\n    # d = 132 / 12\n    \n    d = (n15 - n3) / (15 - 3)  # common difference\n\n    return d\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # B's score is 50 less than A's score\n    equation1 = Eq(B, A - 50)\n\n    # If B gives A 25 points, A's score would be 5 times B's score after giving the points\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    i = 1\n    while True:\n        cube = i**3\n        square_candidate = cube + 1\n        \n        # Check if the square_candidate is a perfect square\n        if (int(square_candidate**0.5))**2 == square_candidate:\n            return square_candidate\n        i += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    for nina_buttons in range(1, 24):\n        james_buttons = 24 - nina_buttons\n        if nina_buttons - 6 == james_buttons + 6:\n            return nina_buttons\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30 - 9/20 + 7/12 - 1/3) * 6 * 7/13 * 9.1)\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_parts = 90\n    hours = 5\n    workers = 3\n\n    parts_per_hour_per_worker = total_parts / (workers * hours)\n    \n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    total_distance = 16\n    climb = 5\n    slide = 3\n    progress_per_day = climb - slide\n\n    # The snail reaches the top before sliding down on the last day\n    # hence we subtract the day climb from the total distance\n    days = (total_distance - climb) // progress_per_day\n\n    # If there is no remainder, snail manages to climb out on the last full day itself\n    if (total_distance - climb) % progress_per_day == 0:\n        return days + 1  # we add that final day\n    else:\n        # Otherwise, we add an additional day because the snail climbs the remainder on the next day\n        return days + 2  # we add the last day plus the day it finally climbs out\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Since the relationship is not provided in the question, I'm assuming it is a linear relation for the purpose of this example.\n    # Let's represent it in the form of a linear equation: y = mx + b\n    # where m is the slope (change in tax per bag) and b is the y-intercept (tax charged for 0 bags)\n    \n    # Since we are only writing the equation, no actual values are provided for m and b, we will just use symbols.\n    from sympy import symbols\n\n    m, b = symbols('m b')\n    x, y = symbols('x y')\n\n    equation = m*x + b\n    \n    # Since we need to represent the equation as y = mx + b\n    return equation\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    i = 1\n    while True:\n        if i % 4 == 3 and i % 5 == 3 and i % 7 == 3 and i % 9 == 0:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction = 8 / 100\n    decimal = 0.7\n    \n    if fraction > decimal:\n        ans = \"8/100\"\n    else:\n        ans = \"0.7\"\n        \n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return result\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_payment = 275\n    flat_fee = 30\n    daily_fee_short_term = 25\n    daily_fee_long_term = 20\n    short_term_limit = 5\n\n    # Calculate cost for 5 days or less, since daily fee is higher\n    max_short_term_cost = flat_fee + daily_fee_short_term * short_term_limit\n\n    if total_payment > max_short_term_cost:\n        # Calculate additional days beyond 5 days\n        additional_days = (total_payment - max_short_term_cost) / daily_fee_long_term\n        total_days = short_term_limit + additional_days\n    else:\n        # Calculate total days if kept for 5 days or less\n        total_days = (total_payment - flat_fee) / daily_fee_short_term\n\n    return int(total_days)\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(102-i))\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.1\n    total_distance = initial_height\n\n    while initial_height > 0:\n        initial_height *= rebound_ratio\n        total_distance += 2 * initial_height  # up and down\n\n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # single sheet of paper has 4 pages once folded\n    # numbering order is 1, 2, 3, 4, ... so the sheet with pages sum of 58\n    # will have pages (n), (n+1), (n+2), (n+3)\n    # and their sum is 4n + 6\n    # we solve 4n + 6 = 58 to find the value of n, which is the first page number of that sheet\n    # once we have n, we can calculate the sheet number as (n + 1) // 4 because each sheet holds 4 pages\n\n    pages_sum = 58\n    n = (pages_sum - 6) // 4\n    sheet_number = (n + 1) // 4\n\n    return sheet_number\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    # Initial condition: green = yellow\n    equation1 = Eq(green, yellow)\n\n    # After giving away the cars\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    # Number of green cars after giving away 60\n    green_cars_end = solutions[green] - 60\n\n    return green_cars_end\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    race_distance = 3000\n    buck_speed = 600\n    elephant_speed = 250\n\n    buck_time = race_distance / buck_speed\n    elephant_time = race_distance / elephant_speed\n\n    difference_in_minutes = elephant_time - buck_time\n\n    return difference_in_minutes\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n    sum_forward = (num_terms / 2) * (first_term + last_term)\n    \n    # The backward part of the sequence is the same as the forward part, so just double the sum_forward\n    ans = 2 * sum_forward\n    return int(ans)\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apple_percentage = 15\n    bad_apples = (bad_apple_percentage / 100) * total_apples\n    return int(bad_apples)\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Speeds of Simon and his wife\n    speed_simon = 80  # km/h\n    speed_wife = 60   # km/h\n\n    # Distance between the offices\n    distance = 15  # km\n    \n    # Time at which they left\n    time_left = datetime.strptime(\"6:10 PM\", \"%I:%M %p\")\n    \n    # Relative speed\n    relative_speed = speed_simon - speed_wife  # km/h\n    \n    # Time it takes for Simon to cover the 15km gap between him and his wife\n    time_to_overtake = distance / relative_speed  # hours\n    \n    # Time at which Simon overtakes his wife\n    overtaking_time = time_left + timedelta(hours=time_to_overtake)\n    \n    return overtaking_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    cost_of_12_pencils = 1.80  # Cost of 12 pencils in pounds\n    cost_of_1_pencil = cost_of_12_pencils / 12  # Cost of 1 pencil\n\n    # Ratio of cost of pen to pencil is 7:3\n    cost_of_1_pen = (7 / 3) * cost_of_1_pencil  # Cost of 1 pen\n\n    cost_of_5_pens = 5 * cost_of_1_pen  # Cost of 5 pens\n    return cost_of_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_of_sequence = (first_term + last_term) * num_terms // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    # Assuming there are 2 types of drinks (coffee, milk) and 3 types of food items (hamburger, burrito, bagel)\n    num_drinks = 2\n    num_food_items = 3\n    \n    # Principle of Multiplication: multiply the number of choices for drinks by the number of choices for food items\n    combinations = num_drinks * num_food_items\n    \n    return combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    count = 0\n    for locker in range(1, 101):\n        if locker % 3 == 0:\n            # Locker is locked if divisible by 3\n            if locker % 5 == 0:\n                # If locker is also divisible by 5, it's state is toggled (so it remains unlocked)\n                continue\n            # Locker remains locked if it's only divisible by 3 and not by 5\n        else:\n            # Locker is unlocked if not divisible by 3\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Helper function to calculate the number of ways to reach a given step\n    def ways_to_step(n):\n        if n <= 1:\n            return 1\n        ways = [0] * (n+1)\n        ways[0] = 1\n        ways[1] = 1\n        for i in range(2, n+1):\n            ways[i] = ways[i-1] + ways[i-2]\n        return ways[n]\n\n    # Calculate the number of ways to reach the 5th step\n    ways_to_5th = ways_to_step(5)\n    \n    # Calculate the number of ways to reach the 10th step from the 5th step\n    # Because after the 5th step, 5 steps remain, so it's the same as calculating the number of ways to reach step 5.\n    ways_from_5th_to_10th = ways_to_step(5)\n    \n    # Multiply the number of ways to reach the 5th step with number of ways to reach the 10th from the 5th\n    total_ways = ways_to_5th * ways_from_5th_to_10th\n\n    return total_ways\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    time_to_cook_one_batch = 3  # time in minutes to cook 2 pancakes\n    pancakes_per_batch = 2\n\n    total_time = 12  # total time in minutes\n    total_batches = total_time / time_to_cook_one_batch\n\n    total_pancakes = total_batches * pancakes_per_batch\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # Initial data\n    J = C = 5\n    W = 9\n    M = 7\n\n    # Strategy for minimum time:\n    # 1. The two fastest cross with the boat (J & C) => 5 mins\n    # 2. One of them comes back with the boat => 5 mins (J or C returns)\n    # 3. The two slowest cross with the boat (W & M) => 9 mins (since Wei Jie is the limiting factor)\n    # 4. The faster of the first pair comes back with the boat => 5 mins (J or C returns)\n    # 5. The first two cross again => 5 mins\n    # Total time taken will be the sum of these individual times\n\n    total_time = J + J + W + J + J\n\n    return total_time\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road = 500\n    total_days = 5\n\n    road_per_day = total_road / total_days\n\n    return road_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    # There are 18 different countries, we need to ensure that\n    # at least 9 participants come from the same country\n\n    # By Pigeonhole Principle, if we have 8 people from each of the 18 countries,\n    # we still cannot be sure that any country has 9 participants.\n    # This situation accounts for 8 * 18 participants in total.\n\n    # To ensure that at least one country has 9 participants,\n    # we need to add one more participant to the total.\n    # Therefore the total number should be 8 * 18 + 1\n\n    ans = 8 * 18 + 1\n    return ans\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    average = 2014 // 53\n    largest_number = average + 26\n    return largest_number\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    written_dividend = 88\n    actual_dividend = 98\n    given_quotient = 22\n\n    # Mistakenly used written_variable to calculate A\n    A = written_dividend // given_quotient\n    correct_quotient = actual_dividend // A\n\n    # The result should include both the value of A and the correct quotient\n    return (A, correct_quotient)\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_of_four_calculators = 32\n    cost_of_one_calculator = cost_of_four_calculators / 4\n    cost_of_twelve_calculators = cost_of_one_calculator * 12\n    return cost_of_twelve_calculators\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    lucas_laps_per_minute = 5 / 6.0\n    miller_laps_per_minute = 5 / 10.0\n    relative_speed = lucas_laps_per_minute - miller_laps_per_minute\n    \n    time_to_overtake_once = 1 / relative_speed\n    time_to_overtake_twice = time_to_overtake_once * 2\n\n    return time_to_overtake_twice\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_value = 1670\n    difference = 10 / 2\n    actual_max_value = rounded_value + (difference - 1)\n    return actual_max_value\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    return 5217 % 13\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    total_minutes = hours * minutes_per_hour\n    return total_minutes\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    visitors = symbols('visitors')\n    \n    children = 3/5 * visitors\n    remaining = visitors - children\n    men = 1/4 * remaining\n\n    equation = Eq(children, men + 120)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_cost = 0.8  # $0.80 for the first 15 minutes\n    total_cost = 1.4  # Total cost of $1.40\n    additional_minute_cost = 0.05  # $0.05 for each additional minute\n\n    # Subtract the base cost from the total cost to find the cost of additional minutes\n    additional_minutes_cost = total_cost - base_cost\n\n    # Divide the cost of additional minutes by the cost per minute to find the number of additional minutes\n    additional_minutes = additional_minutes_cost / additional_minute_cost\n\n    # The call lasts 15 minutes plus any additional minutes\n    call_duration = 15 + additional_minutes\n\n    return call_duration\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age_now = 8\n    mother_future_age = 54\n    years_until_tim_is_current_mother_age = mother_future_age - tim_age_now\n    mother_age_now = tim_age_now + years_until_tim_is_current_mother_age\n    \n    return mother_age_now\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_string_length_m = 5.52 # in meters\n    orange_string_length_cm = orange_string_length_m * 100 # converting to centimeters\n\n    # Given: orange_string = 9.2 * purple_string\n    purple_string_length_cm = orange_string_length_cm / 9.2 \n\n    # Given: green_string = purple_string + 24.9cm\n    green_string_length_cm = purple_string_length_cm + 24.9\n\n    # Convert the green string length to meters\n    green_string_length_m = green_string_length_cm / 100\n\n    return green_string_length_m\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 2 == 0 and number % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorter, longer = symbols('shorter longer')\n\n    equation1 = Eq(longer, 5 * shorter)\n    equation2 = Eq(shorter + longer, 49.5)\n\n    solutions = solve((equation1, equation2), (shorter, longer))\n\n    return round(solutions[longer], 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    georges_mum_daily = 60\n    georges_dad_daily = 40\n    days = 3\n    \n    total_money = (georges_mum_daily + georges_dad_daily) * days\n    \n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5  # Total ratio unit for apple and orange\n    total_litres = 36  # Total litres of the fruit drink\n    apple_ratio = 4  # Apple juice ratio part\n\n    apple_juice_litres = (apple_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Proportion of Year 7 pupils after some girls miss school for sports\n    proportion_after = 10 / 100\n    \n    # Total number of pupils at school after the sports event\n    total_after = 400\n    \n    # Number of Year 7 pupils after the sports event\n    year7_after = total_after * proportion_after\n    \n    # Proportion of Year 7 pupils normally at school\n    proportion_normal = 20 / 100\n    \n    # Number of Year 7 pupils that were missing for the sports event\n    # We calculate this using the fact that the number of Year 7 pupils\n    # after the event is equivalent to 10% of the normal total count\n    year7_missing = year7_after / proportion_normal - year7_after\n    \n    # Calculate the total number of pupils normally at school\n    total_normal = total_after + year7_missing\n\n    return int(total_normal)\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    while height_climbed < 25:\n        day += 1\n        height_climbed += 4\n        if height_climbed >= 25:\n            break\n        height_climbed -= 1\n    return day\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # A puzzle where AABC + ACDA = ABCD, solve for A\n    # A can be 1-9, B, C, and D can be 0-9, and they must be unique\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                for D in range(0, 10):\n                    if len({A, B, C, D}) == 4:  # Ensure all digits are unique\n                        AABC = 1100 * A + 100 * B + 10 * C\n                        ACDA = 1000 * A + 100 * C + 10 * D + A\n                        ABCD = 1000 * A + 100 * B + 10 * C + D\n                        if AABC + ACDA == ABCD:\n                            return A\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Nancy can complete the book in 6 days\n    # Together they can complete the book in 4 days\n\n    # Let's use the Work formula:\n    # Work = Rate * Time\n    # Rate = Work / Time\n\n    # Let N be the rate at which Nancy completes the work alone\n    # Let T be the rate at which Tim completes the work alone\n    # Let C be the rate at which they complete the work together\n    # Work is the completion of 1 book in all cases\n\n    # From the question we know that:\n    # N = 1 book / 6 days\n    # C = 1 book / 4 days\n\n    # Therefore:\n    N = 1 / 6\n    C = 1 / 4\n\n    # From the Work Rate formula:\n    # C = N + T\n    # T = C - N\n    # T is what we are trying to find (Tim's rate to complete the book alone)\n\n    T = C - N\n\n    # Time taken by Tim to complete the work is 1 book / T rate\n    time_taken_by_Tim = 1 / T\n\n    return time_taken_by_Tim\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    # Ivy's work rate per day\n    ivy_rate = 1 / 24\n    # Kevin's work rate per day\n    kevin_rate = 1 / 20\n    \n    # total work done by both Ivy and Kevin together in 18 days\n    # assuming Kevin didn't take any day off\n    total_work_without_days_off = 18 * (ivy_rate + kevin_rate)\n    \n    # Since they finished the job in 18 days, the total work equals 1\n    # Find the number of days Kevin actually worked (let's say 'k' days)\n    # Ivy works for all 18 days and Kevin works for 'k' days\n    # Equation: ivy_rate * 18 + kevin_rate * k = total_work == 1\n    # Solve for 'k' using algebra, we move ivy's work to the right side\n    k = (1 - ivy_rate * 18) / kevin_rate\n    \n    # Kevin takes some days off, so subtract the days Kevin actually worked from 18\n    kevin_days_off = 18 - k\n    \n    return int(kevin_days_off)\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    deposit = 5\n    spend = 8\n    cycle_days = 2  # Deposit on one day and spend on the next day\n\n    # Calculate full cycles and the remaining days\n    full_cycles = days // cycle_days\n    remaining_days = days % cycle_days\n\n    net_per_cycle = deposit - spend\n    money_after_full_cycles = initial_amount + (net_per_cycle * full_cycles)\n\n    # Calculate the remaining amount for the rest of the days\n    if remaining_days > 0:\n        money_after_full_cycles += deposit\n\n    return money_after_full_cycles\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    # Define the general term for the sequence of denominators\n    def denominator(n):\n        return n * (n + 1) // 2\n\n    # Calculate and sum up the terms in the sequence\n    sum_terms = 0\n    for n in range(1, 7):\n        sum_terms += n / (denominator(n) * denominator(n + 1))\n\n    # Add the last term to the sum\n    sum_terms += 1 / denominator(7)\n\n    return sum_terms\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def count_zeros(n):\n        count = 0\n        power_of_5 = 5\n        while n//power_of_5 > 0:\n            count += n//power_of_5\n            power_of_5 *= 5\n        return count\n\n    zeros_999 = count_zeros(999)\n    zeros_300 = count_zeros(300)\n\n    ans = zeros_999 - zeros_300\n\n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    result = 4 * a + 0.6 * b\n    return result\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # The number of students on one side of the square outermost layer is the side length of the square\n    side_length = 60 // 4  # Since there are 4 sides, and each side has the same number of students\n\n    # To find the total number of students, we add the students in the outermost layer and all the layers inside\n    # This forms a series of squares with side lengths decreasing by 2 as we go inward (since removing one layer removes 1 student from each end of a side)\n    total_students = 0\n    while side_length > 0:\n        total_students += side_length ** 2\n        side_length -= 2  # Move to the next inner layer\n\n    return total_students\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    jump_up = 3\n    slide_down = 2\n    net_climb = jump_up * 3 - slide_down * 3\n    tree_height = 31\n    jumps_per_cycle = 3\n\n    # The number of full cycles needed to reach just below the top\n    full_cycles = (tree_height - jump_up) // net_climb\n\n    # The distance climbed after the full cycles\n    distance_climbed = full_cycles * net_climb\n\n    # Remaining distance to reach the top\n    remaining_distance = tree_height - distance_climbed\n\n    # Number of additional jumps needed to reach the top \n    # after the full cycles have been completed\n    if remaining_distance > 0:\n        if remaining_distance <= jump_up:\n            additional_jumps = 1\n        elif remaining_distance <= jump_up * 2:\n            additional_jumps = 2\n        else:\n            additional_jumps = 3\n    else:\n        additional_jumps = 0\n\n    # Total jumps = jumps in full cycles + additional jumps to reach the top\n    total_jumps = full_cycles * jumps_per_cycle + additional_jumps\n\n    return total_jumps\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    # Let's denote the total money she had at the start as x.\n    # She spends one-third of her money on a dress, so she has 2/3x left after buying the dress.\n    # Then, she spends three-fifths of what is left on shoes, i.e., she spends 3/5 * 2/3x.\n    # After buying the shoes, she is left with (2/3 - 3/5 * 2/3)x, which equals 40 pounds.\n\n    # We can represent the above as an equation: (2/3 - 3/5 * 2/3)x = 40.\n    # Solving this equation will give us the value of x, the total amount of money she had at the start.\n\n    # Calculate the factor that represents the money spent on shoes\n    shoes_spent_factor = 3/5 * 2/3\n\n    # Calculate the factor that represents the money left after buying the shoes\n    remaining_factor = (2/3 - shoes_spent_factor)\n\n    # Now we can find out the initial amount of money Helen had, denoted as x.\n    x = 40 / remaining_factor\n\n    return x\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 0\n    red_tiles = 0\n    green_tiles = 0\n    \n    while total_tiles > 0:\n        tiles_in_layer = (layer * 4) + 1 if layer > 0 else 1\n        if total_tiles - tiles_in_layer >= 0:\n            if layer % 2 == 0:\n                red_tiles += tiles_in_layer\n            else:\n                green_tiles += tiles_in_layer\n            total_tiles -= tiles_in_layer\n            layer += 1\n        else:\n            if layer % 2 == 0:\n                red_tiles += total_tiles\n            else:\n                green_tiles += total_tiles\n            break\n    \n    if red_tiles > green_tiles:\n        ans = ('red', red_tiles - green_tiles)\n    else:\n        ans = ('green', green_tiles - red_tiles)\n    \n    return ans\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = 18 * 20132013 - 2013 * 180018\n    return ans\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_card_gain = 24\n    total_rounds = 12\n    gain_per_win = 4\n    loss_per_lose = 2\n\n    # Let x be the number of winning rounds, then (total_rounds - x) is the number of losing rounds.\n    # The total card gain can be represented by gain_per_win * x - loss_per_lose * (total_rounds - x).\n    # Thus, setting up the equation:\n    # gain_per_win * x - loss_per_lose * (total_rounds - x) = total_card_gain\n    # 4x - 2(12 - x) = 24.\n\n    # Solving the equation for x (number of winning rounds):\n    x = (total_card_gain + loss_per_lose * total_rounds) / (gain_per_win + loss_per_lose)\n    \n    # Number of losing rounds:\n    losing_rounds = total_rounds - x\n\n    return int(losing_rounds)\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve, Integer\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    # The number of cars is one third more than the number of bikes\n    equation1 = Eq(cars, bikes + Integer(bikes) / 3)\n\n    # The number of bikes is one quarter more than the number of lorries\n    equation2 = Eq(bikes, lorries + Integer(lorries) / 4)\n\n    # The total number of cars, bikes and lorries is an even number and is less than 100\n    for total in range(2, 100, 2):  # Iterate through even numbers less than 100\n        equation3 = Eq(cars + bikes + lorries, total)\n        solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n\n        # Check if the solutions are integers because the vehicles count can't be in fractions\n        if all(isinstance(n, Integer) for n in solutions.values()):\n            return tuple(int(n) for n in solutions.values())\n        \nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of buttons in box B at first\n    # There were x + 64 buttons in box A at first\n    # Let y be the number of buttons added to box A\n    # Ken removed 2y buttons from box B\n    # The number of buttons in box B became x - 2y which is 28 fewer than before, so x - 2y = x - 28\n    # The ratio of the total number of buttons to the buttons left in box B is 4:1\n    \n    x, y = symbols('x y')\n    \n    # Equation for the final number of buttons in box B\n    equation1 = Eq(x - 2*y, x - 28)\n    \n    # Equation for the ratio of the total buttons to the buttons left in box B\n    equation2 = Eq((x + 64 + y) / (x - 2*y), 4/1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Solution for the number of buttons in box A at first\n    buttons_A_initial = solutions[x] + 64\n    \n    return buttons_A_initial\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    length_of_boulevard = 300\n    interval = 10\n\n    num_bins = (length_of_boulevard // interval) + 1\n\n    return num_bins\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    amount_of_flour_per_cake = 326\n    number_of_cakes = 112\n\n    total_flour_needed = amount_of_flour_per_cake * number_of_cakes\n\n    return total_flour_needed\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18\n    rounds = 0\n    while min(x, y, z) > 0:\n        if x >= y and x >= z:\n            x -= 3\n            y += 1\n            z += 1\n        elif y > z:\n            y -= 3\n            x += 1\n            z += 1\n        else:\n            z -= 3\n            x += 1\n            y += 1\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    count = 0\n    for x1 in range(8):  # including the possibility of an empty plate\n        for x2 in range(8 - x1):  # considering the lollipops already in plate x1\n            # remaining lollipops for x3 (can be zero if x1 or x2 are empty)\n            x3 = 7 - x1 - x2\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # It takes 3 minutes to make 3 cuts to get 4 pieces\n    # Each cut takes 1 minute\n    time_per_cut = 3 / 3\n    \n    # To get 8 pieces, we need 7 cuts\n    # Calculating total time for 7 cuts\n    total_time = time_per_cut * 7\n    \n    return total_time\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), (rasidah * (1 - 3/5)) / 2)\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    # Subtract the duplicates and add the new cards\n    final_count = initial_cards - duplicates + new_cards\n\n    return final_count\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Using symbols from sympy to create an equation for the pattern\n    n = symbols('n')\n\n    # The digital root of a number for divisibility by 3 should also be divisible by 3.\n    # 26 = 2 + 6 = 8, we need enough 2011's such that (n*4 + 8 + 7) % 3 == 0\n    # Which simplifies to (n*4 + 15) % 3 == 0 or n*4 % 3 == 0\n    # As the smallest multiple of 4 that is divisible by 3 is 12, it implies that n should be a multiple of 3.\n    equation_for_3 = (n * 4 + 15) % 3\n\n    # For divisibility by 11, the difference between the sum of digits at odd places and even places should be zero or divisible by 11.\n    # Assumption: since the number ends in 7 and starts with 26, the change happens at \"odd places\" less often than \"even places,\" \n    # Therefore, we want to find n such that the sum of (2 digit at starting 26, 1's from each 2011 and 7 at the end)\n    # is equal to the sum of (6 digit from starting 26 and 0's and 1's from each 2011)\n    # The number of 1's and 0's that contribute to the odd and even sums will always be equal (2 of each per 2011 sequence),\n    # regardless of n as we always add pairs of 0 and 1. We can therefore ignore the pairs of 0 and 1 from 2011.\n    # We need to balance the rest: 2 + 7 (odd) against 6 (even), which is already balanced. We don't need to add any 2011's for 11-divisibility.\n    equation_for_11 = ((2 + n + 7) - (6 + n)) % 11\n\n    # Solve the system of modular equations for the smallest n\n    # Find the smallest n which satisfies both conditions\n    min_n = 0\n    while True:\n        if equation_for_3.subs(n, min_n) == 0 and equation_for_11.subs(n, min_n) == 0:\n            break\n        min_n += 1\n\n    return min_n\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "def solution():\n    from math import factorial\n    \n    # First we treat Amy and Judy as one person since they must sit together. \n    # Now we have 7 \"people\" to arrange around the table.\n    arrangements = factorial(7 - 1)  # (n-1)! for circular permutations\n    \n    # Now we need to consider the two arrangements of Amy and Judy next to each other.\n    arrangements *= 2  # Amy can sit to the left or right of Judy.\n    \n    return arrangements\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andy_initial, ben_initial = symbols('andy_initial ben_initial')\n    equation1 = Eq(andy_initial, ben_initial - 84)\n    equation2 = Eq(andy_initial + andy_initial / 3, 1/3 * (ben_initial + ben_initial / 5))\n    \n    solutions = solve((equation1, equation2), (andy_initial, ben_initial))\n    \n    andy_end = solutions[andy_initial] + solutions[andy_initial] / 3\n    \n    return andy_end\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    ans = sum(1/i for i in range(1, 8))\n    return int(ans)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n\n    years = 0\n    amount = principal\n    while amount < final_amount:\n        amount += amount * interest_rate\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n\n    pencils = 56\n    pens = 60\n\n    num_students = gcd(pencils, pens)\n\n    return num_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    numbers = [0.7, 0.04, 1.006]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # Observing the pattern, we can see that positive numbers are increasing by 1,\n    # and negative numbers are increasing (in absolute value) by 1 alternately.\n    # The sequence goes as: positive, negative, positive, negative, ...\n    # To find the next term 'n' after 20, we recognize that it should be negative\n    # and also that it should be the previous negative number minus 1, which is -15 - 1.\n    n = -15 - 1\n    return n\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    max_value = 0\n    for a in range(1, 100):  # iterate over possible smallest numbers\n        for b in range(a + 1, 100):  # iterate over possible second smallest numbers\n            for c in range(b + 1, 100):  # iterate over possible second largest numbers\n                for d in range(c + 1, 100):  # iterate over possible largest numbers\n                    if a + (b + c + d) / 3 == 39 and d + (a + b + c) / 3 == 51:\n                        max_value = max(max_value, d)\n    return max_value\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    target_numerator = 12\n\n    scale_factor = target_numerator / original_numerator\n    target_denominator = original_denominator * scale_factor\n\n    return int(target_denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Given numbers\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n    at_least_one_pass = 43\n\n    # Maximum number passing all three tests is found by using the lower bound for the Inclusion-Exclusion Principle\n    # We start by assuming all students who passed at least one test have passed all three tests\n    all_three_pass = at_least_one_pass\n\n    # We subtract the excess from each subject test takers assuming they passed at least one other test\n    # Then we calculate the maximum overlap (pupils passing all three tests)\n    max_all_three_pass = all_three_pass - (math_pass + science_pass + english_pass - all_three_pass)\n\n    return max_all_three_pass\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Since 4 students raised their hands initially, the number Mr. Tan wrote must have at least 5 divisors among the two-digit numbers.\n    # Furthermore, 6 students raised their hands for the number 24, which means that the number Mr. Tan initially wrote has to share some divisors with 24.\n    # We look for numbers that are divisors of 24 and have at least 5 two-digit multiples.\n\n    # Define factors of 24\n    factors_of_24 = [i for i in range(1, 25) if 24 % i == 0]\n\n    # Find two-digit multiples for each factor of 24\n    possible_numbers = []\n    for factor in factors_of_24:\n        two_digit_multiples = [i for i in range(factor, 100, factor) if 9 < i < 100]\n        if len(two_digit_multiples) >= 5:\n            possible_numbers += two_digit_multiples\n\n    # The sum of all 8 numbers that Tom saw\n    # Each of these numbers must be divisible by the number Mr. Tan wrote on the paper, or not divisible by 24.\n    # Since Tom raised his hand twice, his number is both divisible by Mr. Tan's number and by 24.\n    # His number must also be unique among the 9 numbers which include the numbers of his friends and his own number.\n\n    # We assume Tom's number is the smallest multiple of 24 (which is two-digit)\n    toms_number = min([num for num in possible_numbers if num % 24 == 0])\n\n    # Get all the two-digit numbers that are NOT Tom's number and also either divisible or not divisible by 24\n    # We subtract the \"toms_number\" to exclude it from the sum\n    sum_of_friends_numbers = sum(possible_numbers) - toms_number\n\n    return sum_of_friends_numbers\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    # Simplify the first complex fraction\n    numerator1 = (1/30) + (1/6)\n    denominator1 = 2/25\n    fraction1 = numerator1 / denominator1\n    \n    # Simplify the second complex fraction\n    numerator2 = 2 - (2/3)\n    denominator2 = 8/3\n    fraction2 = numerator2 / denominator2\n    \n    # Add the two simplified fractions\n    ans = fraction1 + fraction2\n    return ans\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    first_8_value = 8 * 1000  # The value of the first 8 in 8844 (thousands place)\n    second_8_value = 8 * 10    # The value of the second 8 in 8844 (tens place)\n    diff = first_8_value - second_8_value\n    return diff\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    for A in range(10):\n        number = int(f\"572{A}\")\n        if number % 4 == 0 and number % 5 == 0:\n            return A\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n    \n    addition = 0\n    while not is_palindrome(40309 + addition):\n        addition += 1\n\n    return addition\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    # Let d be the distance between the school and their home\n    # Ahmad's speed = 80 m/min, his brother's speed = 50 m/min\n    # Ahmad reaches the school, goes back and meets his brother at 210 meters from school\n    # So Ahmad travels a total of d (to school) + d - 210 (back to meeting point)\n    # His brother travels a total of d - 210 (to the meeting point)\n    # Since time is the same for both until they meet,\n\n    # Time taken by Ahmad = (d + d - 210) / 80\n    # Time taken by his brother = (d - 210) / 50\n\n    # both times are equal so we set the equations equal to each other\n    # (d + d - 210) / 80 = (d - 210) / 50\n    # Solving for d\n\n    from sympy import symbols, Eq, solve\n    \n    d = symbols('d')\n    equation = Eq((d + d - 210) / 80, (d - 210) / 50)\n    solution = solve(equation, d)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since the pens are identical and pencil cases are different,\n    # we can think of it as stars and bars problem where we place\n    # separators between pens to distribute in different pencil cases.\n    # However, since none of the pencil cases can be empty, we place\n    # 1 pen in each case first and distribute the remaining 3 pens.\n\n    # After placing 1 pen in each case, we have 3 identical pens left\n    # and 2 bars (or separators) to distribute these pens into 3 different sections.\n    # This is equivalent to finding the number of solutions to the equation\n    # x1 + x2 + x3 = 3 where x1, x2, x3 are non-negative integers.\n\n    # The number of solutions to this equation is the same as the number\n    # of ways of placing 2 indistinguishable separators among 3 indistinguishable items,\n    # which is a combination problem.\n\n    # The formula for combinations with repetition is (n + r - 1) choose (r)\n    # where n is the number of types of items and r is the number of items to choose.\n    \n    # In this case n = 3 (pencil cases) and r = 3 (remaining pens).\n    # (n + r - 1) choose (r) = (3 + 3 - 1) choose (3) = 5 choose 3\n\n    from math import comb\n    ans = comb(5, 3)\n    return ans\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n    length_ribbon1 = 16\n    length_ribbon2 = 24\n\n    longest_piece_length = gcd(length_ribbon1, length_ribbon2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position_from_front = 7\n    number_of_sheep_behind_luna = 4\n\n    total_sheep = luna_position_from_front + number_of_sheep_behind_luna\n\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    target_earnings = 270\n\n    hours_needed = target_earnings / hourly_rate\n\n    return hours_needed\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1 is not necessary to implement in code\n\n    # Step 2: Find the LCM of all the divisors\n    lcm = 5 * 6 * 11\n\n    # Step 3: Solve using Chinese Remainder Theorem\n    # Since we do not have common remainders, the congruence relations are:\n    # x ≡ 1 (mod 5)\n    # x ≡ 2 (mod 6) \n    # x ≡ 7 (mod 11) \n    # solve_congruence accepts a list of tuples [(remainder1, modulus1), ...]\n    remainders_and_moduli = [(1, 5), (2, 6), (7, 11)]\n\n    # Solve the congruences\n    result = solve_congruence(*remainders_and_moduli)\n    \n    # 'result' will hold the common remainder that satisfies all three \n    # congruences and the calculated lcm. We need the remainder only.\n    common_remainder = result[0]\n\n    # Now we subtract the common remainder from the common multiple (LCM)\n    num_biscuits = lcm - common_remainder\n\n    # Check if we are not exceeding our boundary condition which is 500 biscuits\n    while num_biscuits < 500:\n        num_biscuits += lcm\n\n    num_biscuits -= lcm\n\n    return num_biscuits\n    \nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mean_all_students = symbols('mean_all_students')\n\n    # Let's denote x as the mean score of all 10 students\n    # The mean score of the top 3 students is 92, so their total score is 3 * 92\n    total_top_3 = 3 * 92\n\n    # The mean score of the last 7 students is 6 less than x, their total score is 7 * (x - 6)\n    total_last_7 = 7 * (mean_all_students - 6)\n\n    # The total score of all 10 students is the sum of the top 3 and the last 7 students scores\n    total_all_10 = total_top_3 + total_last_7\n\n    # The mean score (x) times the number of students (10) should equal to the total score of all 10 students\n    equation = Eq(mean_all_students * 10, total_all_10)\n\n    # Solve for x\n    mean_score_solution = solve(equation, mean_all_students)\n\n    return mean_score_solution[0]\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:  # ensures all digits are unique\n            for perm in permutations(digits):\n                sequence = [int(perm[i+1]) - int(perm[i]) for i in range(len(perm)-1)]\n                if sorted(sequence) == [1, 1, 1]:  # checks for consecutive digits\n                    count += 1\n                    break  # only count once per year\n    return count\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    num_red_marbles = 0\n\n    for combo in combinations(bags, 3):\n        jaslin_bags = sum(combo)\n        george_bags = sum(bags) - jaslin_bags\n\n        if jaslin_bags == 2 * george_bags:\n            num_red_marbles = george_bags\n            break\n\n    return num_red_marbles\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the number of sweets Andre had originally, and 'b' be the number of sweets Beth had originally.\n    a, b = symbols('a b')\n\n    # According to the problem, Andre and Beth both had a total of 24 sweets.\n    equation1 = Eq(a + b, 24)\n\n    # After the teacher gave 4 sweets each, Andre now has 6 sweets more than Beth.\n    # This means we have to add 4 to both 'a' and 'b' and then compare the two.\n    equation2 = Eq((a + 4) - (b + 4), 6)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (a, b))\n\n    # After solving the equation, we need to return the number of sweets Beth has after getting 4 more sweets.\n    beth_sweets_now = solutions[b] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # Find the largest 5-digit palindromic number that is a multiple of 45\n    # Palindromes have the form: abccba\n    # Multiples of 45 are multiples of both 5 and 9\n    # Since the number is a multiple of 5, it must end in 5 or 0\n    # If it ends in 5 then a must be 9 to be the largest, and to be a palindrome b and c can be whatever\n    # To be a multiple of 9, the sum of the digits must be a multiple of 9\n\n    # Find the largest such palindrome\n    for a in range(9, 0, -1):\n        for b in range(9, -1, -1):\n            for c in range(9, -1, -1):\n                # Construct the number\n                pal = int(f\"{a}{b}{c}{c}{b}5\")\n                # Check if it is a multiple of 45\n                if pal % 45 == 0:\n                    largest = pal\n                    break\n            if 'largest' in locals():\n                break\n        if 'largest' in locals():\n            break\n       \n    # Find the smallest 5-digit palindromic number that is a multiple of 45\n    # If it ends in 0 then a must be 1 to be the smallest, and to be a palindrome b and c can be whatever\n    # To be a multiple of 9, the sum of the digits (here b and c can be from 0 to 9, since the end digits are 0 and 1) must be a multiple of 9\n    \n    for b in range(0, 10):\n        for c in range(0, 10):\n            # Construct the number\n            pal = int(f\"1{b}{c}{c}{b}0\")\n            # Check if it is a multiple of 45\n            if pal % 45 == 0:\n                smallest = pal\n                break\n        if 'smallest' in locals():\n            break\n\n    # Find the difference between the largest and smallest\n    ans = largest - smallest\n    return ans\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest even number be x\n    # Then the five consecutive even numbers are x, x+2, x+4, x+6, x+8\n    # The sum of these numbers is x + (x+2) + (x+4) + (x+6) + (x+8) = 5x + 20\n    # We are given that the sum is 100\n    # So, we set up the equation 5x + 20 = 100\n\n    total_sum = 100\n    additional_sum = 20  # This comes from 2+4+6+8 which are the differences of consecutive even numbers\n    \n    # Solve for x\n    x = (total_sum - additional_sum) / 5\n    \n    return int(x)\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    speed = 550 / 5  # Calculating the speed in km/h\n    distance = speed * 3  # Calculating the distance covered in 3 hours\n\n    return distance\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_fraction = 1 - (2/5)\n    total_apples = 150 / remaining_fraction\n    return int(total_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    ans = lcm(1, 2, 3, 4, 5)\n    return ans\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from itertools import permutations\nfrom math import gcd\n\ndef is_even_arrangement(arrangement):\n    for color in 'RBGYOP':\n        indices = [i for i, block in enumerate(arrangement) if block == color]\n        if (indices[1] - indices[0]) % 2 != 1:  # Check if blocks are separated by an even distance\n            return False\n    return True\n\ndef solution():\n    blocks = 'RRBBYYGGOOPP'\n    total_even = 0\n    total_permutations = 0\n\n    for arrangement in set(permutations(blocks)):\n        total_permutations += 1\n        if is_even_arrangement(arrangement):\n            total_even += 1\n\n    # Simplifying the fraction to get relatively prime m and n\n    divisor = gcd(total_even, total_permutations)\n    m = total_even // divisor\n    n = total_permutations // divisor\n\n    return m + n\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    distance_per_jump = 3  # inches\n    number_of_jumps = 14  # From the 1st post to the 15th post requires 14 jumps\n\n    total_distance = distance_per_jump * number_of_jumps\n\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the time Alan takes on his own to paint the room\n    a = symbols('a')\n\n    # Equation representing the combining effort of Alan and Bob\n    equation = Eq(1/4, 1/a + 1/6)\n\n    # Solve for 'a'\n    alan_time = solve(equation, a)\n\n    return alan_time[0]\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    probability_rain_saturday = 0.7\n    probability_rain_sunday = 0.5\n\n    probability_no_rain_saturday = 1 - probability_rain_saturday\n    probability_no_rain_sunday = 1 - probability_rain_sunday\n\n    probability_no_rain_both_days = probability_no_rain_saturday * probability_no_rain_sunday\n\n    probability_rain_at_least_one_day = 1 - probability_no_rain_both_days\n\n    return probability_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_per_correct = 10\n    points_per_incorrect = -3  # Negative because points are LOST for incorrect answers\n    total_questions = 10\n\n    # Let x be the number of correct answers\n    # The number of incorrect answers will be total_questions - x\n    # total_points = points_per_correct * x + points_per_incorrect * (total_questions - x)\n    # Solve for x\n    for x in range(total_questions + 1):\n        if points_per_correct * x + points_per_incorrect * (total_questions - x) == total_points:\n            incorrect_answers = total_questions - x\n            return incorrect_answers\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    zeros = 28\n    n = 1\n    factors_of_five = 0\n\n    # Check the number of times the number 5 appears in the factorization\n    # of all numbers up to n as each occurrence of 5 can contribute to a zero (with a pair of 2)\n    while factors_of_five < zeros:\n        current = n\n        while current % 5 == 0:\n            factors_of_five += 1\n            current //= 5\n        n += 1\n    \n    # As prime factorization of a ! will give us the number of 5's and 2's\n    # Since 2's will always be more than 5's, we count the number of 5's\n    # The loop will stop when the factors of five exceed required zeros\n    # Hence, return n - 1 as the loop adds 1 extra in the end\n    return n - 1\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(henry + fred + richard, 204.56)\n    equation2 = Eq(richard, henry - 3.24)\n    equation3 = Eq(fred, richard + 5.6)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return solutions[fred]\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    fill_rate_A = 1 / 36\n    fill_rate_B = 1 / 48\n    \n    sequence = [1, 2, 2, 1]  # The sequence of minutes for A and B\n    fill_amounts = [sequence[i % 4] * fill_rate_A if i % 2 == 0 else sequence[i % 4] * fill_rate_B for i in range(4)]\n    \n    cycle_time = sum(sequence)\n    cycle_fill = sum(fill_amounts)\n    \n    cycles_needed = 1 / cycle_fill\n    full_cycles = int(cycles_needed)\n    \n    remaining_fill = 1 - full_cycles * cycle_fill\n    remaining_time = 0\n    i = 0\n    \n    while remaining_fill > 0:\n        if i % 2 == 0:\n            time, rate = sequence[i % 4], fill_rate_A\n        else:\n            time, rate = sequence[i % 4], fill_rate_B\n        fill_time = min(time, remaining_fill / rate)\n        remaining_fill -= fill_time * rate\n        remaining_time += fill_time\n        i += 1\n        \n    total_time = full_cycles * cycle_time + remaining_time\n    \n    return round(total_time)\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    bought_bottles = 10\n    lent_bottle = 1\n    total_bottles = bought_bottles + lent_bottle\n    drinked_bottles = 0\n    \n    while total_bottles >= 2:\n        exchange = total_bottles // 2\n        total_bottles = total_bottles - (exchange * 2) + exchange\n        drinked_bottles += exchange\n    \n    ans = drinked_bottles + bought_bottles  # Including the originally bought bottles\n    return ans\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - 3 * (2*x - 2), 21)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n\n    # Calculate Andrea's position from front\n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n    \n    # Calculate number of children between Vanessa and Andrea\n    children_between = abs(vanessa_position_from_front - andrea_position_from_front) - 1\n\n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sweets_eaten_per_week = symbols('sweets_eaten_per_week')\n    \n    # Initial amount of sweets plus the sweets bought over 7 weeks minus the sweets eaten over 7 weeks\n    equation = Eq(320 + 7 * 30 - 7 * sweets_eaten_per_week, 348)\n    \n    # Solving the equation\n    solution = solve(equation, sweets_eaten_per_week)\n    return solution[0]\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"281{digit}\")\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "from fractions import Fraction\n\ndef solution():\n    path_length = Fraction(5, 6)\n    fenced_length = Fraction(2, 3)\n    unfenced_length = path_length - fenced_length\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    # Let's denote the height of the waterline in pool A as h_a\n    # and the height of the waterline in pool B as h_b.\n    # Let t be the time passed in minutes.\n    # The rate at which pool A drains is 1/10 per minute (full pool height per 10 minutes)\n    # and the rate at which pool B drains is 1/6 per minute (full pool height per 6 minutes)\n\n    # The height of the waterlines after t minutes are inversely proportional to the time it takes to drain each pool.\n    h_a = 1 - t / 10\n    h_b = 1 - t / 6\n\n    # We are looking for the time t at which the height of A's waterline is 3 times that of B's waterline.\n    # So, we set up the equation h_a = 3 * h_b:\n    # 1 - t/10 = 3 * (1 - t/6)\n    \n    # Let's solve for t:\n    t = (3 / 10) / ((1 / 10) - (3 / 6))\n\n    return t\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let the number of sweets Yue Ying has be y\n    # Then Chenxi has y + 5 sweets\n    # After Chenxi gives Yue Ying 10 sweets, Chenxi will have y + 5 - 10 sweets, which is y - 5\n    # Yue Ying will have y + 10 sweets\n    # The difference in number of sweets they have now is (y + 10) - (y - 5), which simplifies to 15\n\n    # Regardless of the starting number of sweets (y), the difference will always be 15 after the exchange\n    return 15\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # Since there is no description of the problem in the question itself,\n    # I'm assuming that \"1\" signifies that there's just one way to arrange the objects in question\n    # because there's no additional information provided.\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    distance = symbols('d')\n    # convert minutes to hours by dividing by 60\n    late_time = 12 / 60\n    early_time = -8 / 60\n\n    equation1 = Eq(distance / 3, distance / 7 + late_time)\n    equation2 = Eq(distance / 7, distance / 3 - early_time)\n\n    speed_solution = solve((equation1, equation2), (distance))\n\n    return distance.subs(speed_solution)\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    total_amount = 200\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 69))\n    for i in primes:\n        if 69 - i in primes:\n            return 69 - i * 2\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    school_A_original, school_B_original = symbols('school_A_original school_B_original')\n\n    equation1 = Eq(school_A_original + school_B_original, 1050)\n    equation2 = Eq(school_A_original - 20 - (school_B_original + 20), 10)\n\n    solutions = solve((equation1, equation2), (school_A_original, school_B_original))\n\n    return solutions[school_A_original]\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # Original equation: 15+5*5+15-6+7\n    # Best placement of brackets to maximize the result:\n    # (15+5)*(5+15)-(6-7)\n\n    # Calculate with given brackets\n    ans = (15+5)*(5+15)-(6-7)\n\n    return ans\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_questions = 10\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        score = correct * 10 - incorrect * 5\n        if score == 70:\n            return correct\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    maths_students = 20\n    both_classes_students = 11\n    neither_classes_students = 10\n    \n    # Total writing students = Total students - Maths only students - Neither classes students\n    writing_only_students = total_students - (maths_students - both_classes_students) - neither_classes_students\n    \n    return writing_only_students\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    digits = \"08072003\"\n    primes = [int(str_digit) for str_digit in digits if isprime(int(str_digit)) and int(str_digit) < 50]\n    return max(primes)\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_average = 54\n    first_two_average = 48\n    total_sum = total_average * 5\n    first_two_sum = first_two_average * 2\n    last_three_sum = total_sum - first_two_sum\n    last_three_average = last_three_sum / 3\n    \n    return last_three_average\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teddy_age, father_age, future_teddy_age = symbols('teddy_age father_age future_teddy_age')\n\n    # When Teddy was 5, his father's age was 7 times his age\n    equation1 = Eq(father_age, 7 * 5)\n\n    # When his father is 40, find Teddy's age\n    equation2 = Eq(father_age - teddy_age, 40 - future_teddy_age)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (teddy_age, future_teddy_age))\n\n    # Teddy's age when his father is 40\n    return solutions[future_teddy_age]\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    numbers = range(1, 18, 2)\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Initialize the number of slices with the initial uncut pizza\n    slices = 1\n\n    # Calculate the maximum number of slices with each cut\n    for cut in range(1, 5):\n        slices += cut\n\n    # Return the maximum number of pizza slices after 4 cuts\n    return slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    # Given: elephant at 10th position from left. \n    # 5 toys from rabbit to elephant, and elephant is to the left of rabbit.\n    elephant_position_from_left = 10\n    toys_between = 5\n\n    # Rabbit's position from left\n    rabbit_position_from_left = elephant_position_from_left + toys_between\n    \n    # Total number of toys\n    total_toys = 40\n\n    # Rabbit's position from right\n    rabbit_position_from_right = total_toys - rabbit_position_from_left + 1\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    total_sum = sum(sum_of_digits(page) for page in range(1, 110))\n\n    return total_sum\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    # Let p be the number of pink dolphins\n    # Let g be the number of gray dolphins\n    # According to the problem, g = 11 * p (g is 11 times the pink dolphins)\n    # Also, p + g = 48 (total number of dolphins)\n    # So, we can replace g in the second equation by 11 * p:\n    # p + 11 * p = 48\n    # 12 * p = 48\n    # p = 48 / 12\n    p = 48 / 12\n    return int(p)  # return the number of pink dolphins as an integer\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base_length = 9\n\n    height = (2 * area) / base_length\n\n    return int(height)\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 33, 3))\n    return ans\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Let the total number of people at the play be represented by the variable 'total_people'.\n    # Let 'adults' represent the number of adults, 'boys' the number of boys, and 'girls' the number of girls.\n    \n    # According to the question, adults = (2/7) * total_people\n    # The remaining audience = total_people - adults\n    # Boys constitute (4/5) of the remaining audience.\n    # Hence, girls = remaining audience - boys\n    # We're also given that adults = girls + 80\n    \n    # We need to verify Adriana's workings and find the mistake, if any, and then calculate the number of people\n    \n    # Let's express everything in terms of 'total_people:'\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for total people\n    total_people = symbols('total_people')\n    \n    # Equations based on the problem statement\n    adults = 2/7 * total_people\n    remaining_audience = total_people - adults\n    boys = 4/5 * remaining_audience\n    girls = remaining_audience - boys\n    \n    # Equation based on the information that there are 80 more adults than girls\n    # adults = girls + 80\n    \n    # Substituting the expressions of adults, boys and girls in terms of total_people\n    equation = Eq(adults, girls + 80)\n    \n    # Solve for total_people\n    equation = equation.subs(girls, (1 - 4/5) * remaining_audience)\n    equation = equation.subs(remaining_audience, total_people - adults)\n    equation = equation.subs(adults, 2/7 * total_people)\n    solution = solve(equation, total_people)\n    \n    # Adriana's calculation of girls is incorrect:\n    # It should be 1/5 of the remaining audience, not of 2/7\n    # Let's check the correct proportion of girls:\n    correct_girls_fraction = 1 - 4/5  # 1/5 of the remaining audience\n    correct_adults_fraction = 2/7\n    correct_difference = correct_adults_fraction - (correct_adults_fraction * correct_girls_fraction)\n    \n    # Compute correct difference fraction\n    correct_people = 80 / (correct_adults_fraction - correct_difference)\n    \n    return correct_people.evalf()\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Since (4^982) = (2^1964), we can rewrite the original expression as:\n    # 2^2019 / (2^1964 - 2^1963)\n    # Let's write the expression in terms of powers of 2 with common exponents\n    # 2^2019 / (2^1963 * (2 - 1))\n    # Simplify the expression now\n    # 2^2019 / 2^1963\n    # Subtract the exponents\n    remainder = 2 ** (2019 - 1963)\n    \n    # Now we want to find the remainder of 2^56 divided by 5\n    # Since 2^4 = 16 and 16 % 5 = 1, we know that (2^4) % 5 is 1\n    # Therefore, (2^56) % 5 is (2^(4*14)) % 5\n    # Which is the same as ((2^4)^14) % 5, equals to (1^14) % 5, equals to 1 % 5\n    remainder = remainder % 5\n    \n    return remainder\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tables, chairs = symbols('tables chairs')\n\n    # initially, the number of tables equals the number of chairs\n    equation1 = Eq(tables, chairs)\n\n    # after selling 42 tables and bringing in 24 chairs, chairs become 4 times the tables\n    equation2 = Eq(chairs + 24, 4 * (tables - 42))\n\n    solutions = solve((equation1, equation2), (tables, chairs))\n\n    return solutions[chairs]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    result = 700 * (35 / 100)\n    return result\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_to_left_of_candy = 4\n    cabinets_to_right_of_candy = 7\n    candy_cabinet = 1\n\n    total_cabinets = cabinets_to_left_of_candy + candy_cabinet + cabinets_to_right_of_candy\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_first_day = 455\n    books_second_day = 198\n    total_books = books_first_day + books_second_day\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # Even numbers have 0, 2, 4, 6, or 8 in the ones place.\n                if hundreds + tens + ones == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        if (1060 + Y) % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = total_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    num_classes = 5\n    total_boxes = boxes_per_class * num_classes\n    return total_boxes\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n\n    # Total number of vehicles\n    eq1 = Eq(motorcycles + cars + lorries, 27)\n\n    # Total number of wheels\n    eq2 = Eq(2*motorcycles + 4*cars + 6*lorries, 96)\n\n    # Number of cars is equal to number of lorries\n    eq3 = Eq(cars, lorries)\n\n    solutions = solve((eq1, eq2, eq3), (motorcycles, cars, lorries))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_squares = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = n * (n + 1) // 2\n    ans = sum_of_squares / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    jar_plus_5_chocolates = 185\n    jar_plus_17_chocolates = 317\n\n    # 17 chocolates - 5 chocolates = 12 chocolates difference\n    weight_of_12_chocolates = jar_plus_17_chocolates - jar_plus_5_chocolates\n    # Find the weight of one chocolate\n    weight_of_one_chocolate = weight_of_12_chocolates / 12\n\n    # Calculate the weight of the jar\n    weight_of_jar = jar_plus_5_chocolates - (5 * weight_of_one_chocolate)\n\n    # Calculate the weight of the jar with 10 chocolates\n    weight_of_jar_plus_10_chocolates = weight_of_jar + (10 * weight_of_one_chocolate)\n\n    return weight_of_jar_plus_10_chocolates\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana_height_cm = 150\n    olaf, kristoff = symbols('olaf kristoff')\n\n    equation1 = Eq(ana_height_cm, olaf + 116)\n    equation2 = Eq(kristoff, 5.5 * olaf)\n\n    solutions = solve((equation1, equation2), (olaf, kristoff))\n\n    kristoff_ana_difference = solutions[kristoff] - ana_height_cm\n\n    return kristoff_ana_difference\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    return 113 - 29\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_sugar_solution = 700\n    sugar_concentration = 0.32\n    sugar_amount = total_sugar_solution * sugar_concentration\n    water_amount = total_sugar_solution - sugar_amount\n    return water_amount\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    # The number is divisible by 2, so the last digit has to be even.\n    # The number is divisible by 5, so the last digit has to be 0 or 5.\n    # As we are searching for the largest number, we'll pick the last digit as 0.\n\n    # To be divisible by 3, the sum of the digits has to be divisible by 3.\n    # If we have 49X0 then sum of the digits would be 4 + 9 + X + 0 = 13 + X\n    # To find the largest X such that when added to 13, the result is divisible by 3, we check the largest single digit number less than or equal to 9\n    \n    for X in range(9, -1, -1):\n        if (13 + X) % 3 == 0:\n            # Once we find the largest X, we construct the largest number and break\n            largest_number = int(f\"49{X}0\")\n            break\n            \n    return largest_number\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    for i in range(1000):\n        number = int(f\"1992{i:03d}\")\n        if number % 2 == 0 and number % 3 == 0 and number % 5 == 0 and number % 11 == 0:\n            return number\n        \nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    number = 3.05\n    fraction = 1/10\n    ans = number - fraction\n    return ans\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_trees = 21\n    road_length = 800\n    \n    distance_between_trees = road_length / (total_trees - 1)\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    # Hazel's age in three years will be 9\n    hazel_in_three_years = 9\n    # So, Hazel's current age is 9 - 3 = 6 years old\n    hazel_current_age = hazel_in_three_years - 3\n    # Jessica is 3 years younger than Hazel, so Jessica's current age is Hazel's age - 3\n    jessica_current_age = hazel_current_age - 3\n    # Their total age next year will be (Hazel's age next year) + (Jessica's age next year)\n    total_age_next_year = (hazel_current_age + 1) + (jessica_current_age + 1)\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_in_year = 12\n    \n    total_second_half = average_second_half * 6\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / months_in_year\n\n    return average_per_month\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_letters = len(word)\n    \n    ans = factorial(total_letters)\n    for count in letter_counts.values():\n        ans //= factorial(count)\n    \n    return ans\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    number_of_terms = (last_term - first_term) + 1\n    sum_of_series = (number_of_terms / 2) * (first_term + last_term)\n    return sum_of_series\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    return gcd(4811, 1981)\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    # Total score for the first five assignments\n    total_for_five = 94 * 5\n    # Total score for all six assignments\n    total_for_six = 92 * 6\n    # Score for the sixth assignment\n    score_sixth = total_for_six - total_for_five\n    \n    return score_sixth\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    purchase_price_per_pair = 65\n    selling_price_per_pair = 74\n    profit_per_pair = selling_price_per_pair - purchase_price_per_pair\n    remaining_pairs = 5\n    total_profit = 440\n\n    pairs_sold = total_profit / profit_per_pair\n    initial_pairs_purchased = pairs_sold + remaining_pairs\n\n    return initial_pairs_purchased\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears, mangoes = symbols('apples pears mangoes', real=True, positive=True)\n\n    # John bought 4/5 as many pears as apples: pears = 4/5 * apples\n    # John bought 2/5 as many mangoes as apples: mangoes = 2/5 * apples\n    # The ratio of the amount of money spent on the apples to the pears was 3:2 => price_apples:price_pears = 3:2\n    # The ratio of the amount of money spent on the pears to the mangoes was 1:5 => price_pears:price_mangoes = 1:5\n    # Total cost of fruits is 150, and each apple cost $0.60:\n    # 0.60 * apples (for apples) + price_per_pear * pears (for pears) + price_per_mango * mangoes (for mangoes) = 150\n\n    price_per_apple = 0.60\n\n    # Use the ratios to set up the relationships between the prices of apples, pears, and mangoes\n    price_per_pear = symbols('price_per_pear')\n    price_per_mango = symbols('price_per_mango')\n\n    equation1 = Eq(pears, 4/5 * apples)\n    equation2 = Eq(mangoes, 2/5 * apples)\n    \n    # Money spent on apples to pears = 3:2\n    equation3 = Eq(0.60 * apples / price_per_pear, 3/2)\n    # Money spent on pears to mangoes = 1:5\n    equation4 = Eq(price_per_pear / price_per_mango, 1/5)\n    equation5 = Eq(0.60 * apples + price_per_pear * pears + price_per_mango * mangoes, 150)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (apples, pears, mangoes, price_per_pear, price_per_mango))\n\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n    return int(total_fruits)\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Musical ends at 7.15 PM\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n\n    # Duration of the second half (5:30 PM to 7:15 PM)\n    half_duration = end_time - datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n\n    # Calculate the start time by subtracting the duration from the end time\n    start_time = end_time - 2 * half_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    initial_cars = symbols('initial_cars')\n\n    equation = Eq(initial_cars + 8 - 10, 30)\n\n    initial_number = solve(equation, initial_cars)\n\n    return initial_number[0]\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    fill_rate_per_day = 10\n    leak_rate_per_night = 3\n\n    # Start from the end of the first day\n    current_water_volume = 3\n    days_passed = 1\n\n    while current_water_volume < total_water_needed:\n        # Each night, some water leaks\n        current_water_volume -= leak_rate_per_night\n        # Each day, the pool is filled more\n        current_water_volume += fill_rate_per_day\n        days_passed += 1\n\n    return days_passed\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    ans = 1234 - 566\n    return ans\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_visit = 24\n    ginny_visit = 36\n\n    ans = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n    return ans\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # Half an hour\n    current_number = 1\n    digits_written = 0\n\n    while True:\n        digits_in_number = len(str(current_number))\n        if digits_written + digits_in_number > total_seconds:\n            break\n        digits_written += digits_in_number\n        current_number += 1\n\n    return current_number - 1\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [1/2 * 30, 1/3 * 36, 1/4 * 40, 1/5 * 60, 1/6 * 96]\n    diff = max(amounts) - min(amounts)\n    return diff\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%20%p')\n    game_duration = timedelta(minutes=225)\n    start_time = end_time - game_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    # Let x be the number we are trying to find\n    # According to the question,\n    # (2 * x / 4)^2 - 4 = 6 * 10\n    # Simplify the equation to find x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # Putting the given into an equation\n    equation = Eq(((2 * x / 4)**2) - 4, 60)\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    # Return the number in the solution set that is positive \n    # (assuming the original number thought of is positive)\n    ans = [s.evalf() for s in solution if s > 0]\n\n    # Since there can be only one positive number that the person has thought of,\n    # we return that number.\n    return ans[0]\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Number of blue, white, and black marbles that can be drawn before drawing a green one\n    non_green_marbles = 5 + 9 + 2  # 5 blue, 9 white, and 2 black\n    # Darrell must draw one more marble to guarantee drawing a green one\n    return non_green_marbles + 1\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "from math import comb\n\ndef solution():\n    teams = 20\n    # Calculate the combinations for 20 teams taken 2 at a time, since each match involves 2 teams\n    matches = comb(teams, 2)\n    return matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_per_3_minutes = 27\n    toys_per_minute = toys_per_3_minutes / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for _ in range(years):\n        initial_rabbits = 3 * initial_rabbits / 2\n\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Let candy_speed be the speed of Candy in meters per minute\n    # Ivy walks 20 meters per minute faster than Candy, so Ivy's speed is candy_speed + 20\n    # Candy started walking 6 minutes after Ivy, so when they meet, Ivy has walked for 12 + 6 = 18 minutes\n    # Let x be the speed of Candy (in meters per minute)\n\n    from sympy import symbols, Eq, solve\n\n    candy_speed = symbols('candy_speed')\n    ivy_speed = candy_speed + 20\n    ivy_time = 18  # Ivy walks 18 minutes\n    candy_time = 12  # Candy walks 12 minutes\n\n    # Distance covered by Ivy: ivy_speed * ivy_time\n    # Distance covered by Candy: candy_speed * candy_time\n    # Total distance is 1200 meters\n    equation = Eq(ivy_speed * ivy_time + candy_speed * candy_time, 1200)\n\n    # Solve the equation for candy_speed\n    solution = solve(equation, candy_speed)\n    return solution[0]\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # Since there are 8 players, each player will play with every other player exactly once.\n    # In a single round-robin format, number of matches = (n*(n-1))/2\n    # where n is the number of players, which in this case is 8.\n    num_matches = (8 * 7) // 2\n    \n    # Now, since each player has a different number of wins and there are no draws in ping-pong,\n    # the maximum number of wins is the sum of the first (n-1) natural numbers.\n    # This is because, the player with max wins would have won against all players, the next highest winner\n    # would have won against all but one (the champion), and so on.\n    \n    # The sum of the first (n-1) natural numbers is given by: s = n(n-1)/2\n    # where n is the number of players which is 8. \n    # Therefore, the champion would have wins equal to (n - 1) since they would have won each match.\n    champion_wins = 8 - 1\n\n    return champion_wins\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_needed = 120 / puffs_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    weight_metal1 = 6\n    weight_metal2 = 14\n    nickel_percent_metal1 = 0.45\n    nickel_percent_metal2 = 0.60\n\n    nickel_weight_metal1 = weight_metal1 * nickel_percent_metal1\n    nickel_weight_metal2 = weight_metal2 * nickel_percent_metal2\n\n    total_nickel = nickel_weight_metal1 + nickel_weight_metal2\n    total_weight = weight_metal1 + weight_metal2\n\n    nickel_concentration = (total_nickel / total_weight) * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    # Initialize the maximum product\n    max_product = 0\n    # Generate all possible combinations of four numbers that sum to 13,\n    # with repetitions allowed\n    for combination in combinations_with_replacement(range(1, 13 + 1), 4):\n        if sum(combination) == 13:\n            # Compute the product of the four numbers\n            product = combination[0] * combination[1] * combination[2] * combination[3]\n            # Update the maximum product if the current product is greater\n            max_product = max(max_product, product)\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = 0\n    while(True):\n        if mother_age == 3 * edward_age:\n            break\n        edward_age += 1\n        mother_age += 1\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_cm_to_m = 1 / 6  # 1 cm represents 6 m\n    playground_length_plan_cm = 5\n\n    # Real length in meters\n    real_length_m = playground_length_plan_cm / scale_cm_to_m\n\n    return real_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    for students in range(1, 1000):\n        # First condition: Original square array with surplus\n        root = int(students ** 0.5)\n        if root * root + 11 == students:\n            # Second condition: Larger square array requires 12 more students\n            larger_root = root + 1\n            if larger_root * larger_root == students + 12:\n                return students\n    return None\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n\n    num_boxes = total_money // cost_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    # Given numbers\n    number1 = 4060800\n    number2 = 4000000\n    number3 = 800\n    \n    # Find the missing number by subtracting known numbers from the total\n    missing_number = number1 - number2 - number3\n\n    return missing_number\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    # Let the number of girls be x.\n    boys = 15\n    apples_per_boy = 30\n    apples_per_girl = 20\n    average_apples_per_person = 26\n\n    # Average number of apples is given by (total_apples) / (total_people)\n    # Total apples = apples picked by boys + apples picked by girls\n    # Total people = number of boys + number of girls\n    # Therefore, (boys * apples_per_boy + x * apples_per_girl) / (boys + x) = average_apples_per_person\n\n    # Solving the equation for x (number of girls):\n    x = (average_apples_per_person * boys - apples_per_boy * boys) / (apples_per_girl - average_apples_per_person)\n    \n    return int(x)\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_distance = 20\n    daily_climb = 6\n    seventh_day_climb = 2\n\n    # Calculate the distance climbed in the first 6 days\n    distance_climbed_in_6_days = daily_climb * 6\n    # On the 7th day, the snail still has to climb the remaining distance to get out\n    remaining_distance_after_6_days = total_distance - distance_climbed_in_6_days\n\n    # Since the snail climbs out on the 7th day, the total climb on the 7th day is the remaining distance\n    seventh_day_total_climb = remaining_distance_after_6_days\n\n    # The net climb on the 7th day is the difference between the seventh day total climb and the actual climb\n    nightly_slide = seventh_day_total_climb - seventh_day_climb\n\n    return nightly_slide\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen = symbols('pen')\n    pencil = pen - 0.5\n    total_cost = Eq(pen + pencil, 4.5)\n\n    price_pen = solve(total_cost, pen)\n\n    return price_pen[0]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    oil_in_tank_A = 673\n    difference = 56\n    oil_in_tank_B = oil_in_tank_A + difference\n    return oil_in_tank_B\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketballs, volleyballs = symbols('basketballs volleyballs')\n\n    equation1 = Eq(basketballs + volleyballs, 12)\n    equation2 = Eq(30 * basketballs + 25 * volleyballs, 340)\n\n    solutions = solve((equation1, equation2), (basketballs, volleyballs))\n\n    return solutions[basketballs]\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000\n    richie_share = total_wealth * (1/3)\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1/2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2/5)\n    archie_share = remaining_after_thrifty - bounty_share\n\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_per_book = 32 / 8\n    total_cost = cost_per_book * 12\n    return total_cost\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    candy_to_lily = (3 / 4) * total_candy\n    remaining_candy = total_candy - candy_to_lily\n    candy_to_brother = (1 / 3) * remaining_candy\n    final_candy = remaining_candy - candy_to_brother\n    \n    return int(final_candy)\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1 / i for i in range(1, n)) for n in range(2, 61))\n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Roy's and Dennis's initial amounts\n    roy, dennis = symbols('roy dennis')\n\n    # Equation based on the total amount of money they shared\n    equation1 = Eq(roy + dennis, 340)\n\n    # Equation based on Dennis having twice as much as Roy after spending\n    equation2 = Eq(dennis - dennis / 4, 2 * (roy - 2 * roy / 3))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (roy, dennis))\n\n    # Calculate the amount of money Dennis had in the end\n    dennis_end_amount = solutions[dennis] - solutions[dennis] / 4\n\n    return dennis_end_amount\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday, saturday, sunday = symbols('friday saturday sunday')\n    \n    equation1 = Eq(saturday, friday + 27)\n    equation2 = Eq(sunday, friday - 14)\n    equation3 = Eq(friday + saturday + sunday, 475)\n    \n    solutions = solve((equation1, equation2, equation3), (friday, saturday, sunday))\n    \n    return solutions[friday]\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    # Start by finding out how many digits are needed for each section of page numbers:\n    # 1 to 9 : 9 pages * 1 digit = 9 digits\n    # 10 to 99 : 90 pages * 2 digits = 180 digits\n    # 100 to ? : Remaining digits will be used here where each page uses 3 digits.\n    \n    # We have used 9+180=189 digits for pages 1 to 99\n    digits_for_1_to_99 = 189\n    remaining_digits = 300 - digits_for_1_to_99\n    \n    # Each page from 100 uses 3 digits, to find out how many pages we can have:\n    pages_with_3_digits = remaining_digits // 3\n    \n    # The last page number will be:\n    last_page_number = 99 + pages_with_3_digits\n    return last_page_number\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of strawberry candies, y be the mass of chocolate candies,\n    # and z be the mass of mint candies in the smallest portion.\n    # Since the mint to chocolate ratio is constant, and strawberry to total is given,\n    # we can set up the equations based on the ratio of strawberry candies \n    # and the total mass of 1371 g.\n    x, y, z = symbols('x y z')\n    \n    # For container 1:\n    # strawberry is 2/5 of the total, chocolate + mint is 3/5 of the total\n    # so we get the first equation based on the mass being the same as 2 times strawberry.\n    # 3/5 of total (y + z) = 2 * strawberry x\n    \n    # For container 2:\n    # strawberry is 2/7 of the total\n    # so we get the second equation:\n    # 5/7 of total (y + z) = 2 * strawberry x\n    \n    # For container 3:\n    # strawberry is 2/9 of the total\n    # so we get the third equation:\n    # 7/9 of total (y + z) = 2 * strawberry x\n    \n    # Total mass of all 3 containers is 1371\n    # so we get the fourth equation:\n    # 3 * strawberry x + 3 * chocolate y + 3 * mint z = 1371\n    \n    equation1 = Eq((3/5)*(y + z), 2*x)\n    equation2 = Eq((5/7)*(y + z), 2*x)\n    equation3 = Eq((7/9)*(y + z), 2*x)\n    equation4 = Eq(3*x + 3*y + 3*z, 1371)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (x, y, z))\n    \n    # Since we want the mass of all strawberry candies\n    # we multiply the strawberry mass of the smallest portion x by 3\n    strawberry_mass = 3 * solutions[x]\n\n    return strawberry_mass\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    ans = 675 // 25\n    return ans\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    ball_cost = 20.45\n    num_balls = 8\n    num_hoops = 6\n    \n    total_ball_cost = ball_cost * num_balls\n    total_hoop_cost = total_cost - total_ball_cost\n    cost_per_hoop = total_hoop_cost / num_hoops\n    \n    return cost_per_hoop\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    each_volume = 3\n    drank_volume = 9\n    container_volume = 5\n    \n    total_juice = total_cartons * each_volume\n    remaining_juice = total_juice - drank_volume\n    \n    containers_needed = -(-remaining_juice // container_volume)  # Ceiling division\n    \n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    steak_weight = 3 + 1/2\n    cost_per_kg = 7.50\n    total_cost = steak_weight * cost_per_kg\n    money_available = 20\n    \n    if money_available >= total_cost:\n        more_money_needed = 0\n    else:\n        more_money_needed = total_cost - money_available\n    \n    return more_money_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddie_position = 12\n\n    position_from_end = total_people - eddie_position + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "from sympy import factorint, sqrt\n\ndef solution():\n    number_factors = factorint(693)\n    product_factors = {}\n\n    # To make the product a perfect square, each prime factor's exponent\n    # in the prime factorization of the product must be even.\n    for prime, exp in number_factors.items():\n        # If the exponent is odd, we need another of this prime factor.\n        if exp % 2 == 1:\n            product_factors[prime] = 1\n\n    # The smallest whole number is the product of the gathered prime factors.\n    smallest_number = 1\n    for prime, exp in product_factors.items():\n        smallest_number *= prime ** exp\n\n    return smallest_number\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Find the unit digit of each term independently\n\n    # For 13^242, since 3^4 ends with 1 and 242 is a multiple of 4, 13^242 will end with the digit 1\n    unit_digit_13 = pow(3, 242 % 4)\n\n    # For 17^379, since 7^4 ends with 1 and 379 % 4 = 3, 17^379 will end with the digit 3^3 = 27, so 7\n    unit_digit_17 = pow(7, 379 % 4)\n\n    # For 4^2012, since the units digit of 4's power cycle is 4, 4^2 is 6, 4^3 is 4 again, and 4^4 is 6 again and so on\n    # we know that 2012 % 2 = 0, so the unit digit will be 6\n    unit_digit_4_powered = 6\n    \n    # Calculate the unit digit of the final expression\n    # We multiply the unit digits of 17^379 and 4^2012 first\n    unit_digit_17_times_4_powered = (unit_digit_17 * unit_digit_4_powered) % 10\n    \n    # Then add it to the unit digit of 13^242\n    ans = (unit_digit_13 + unit_digit_17_times_4_powered) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of a light bowling ball\n    x = symbols('x')\n\n    # Equation: 6*x + 6*(2*x) = 65.7\n    equation = Eq(6*x + 6*(2*x), 65.7)\n\n    # Solve the equation\n    mass_of_light_ball = solve(equation, x)[0]\n\n    # Return the mass to the nearest kg\n    return round(mass_of_light_ball.evalf())\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    # Benson and Clive had a total of $705\n    equation1 = Eq(benson + clive, 705)\n\n    # Benson and Clive spent their money\n    benson_left = benson - 34  # Benson bought a calculator for $34\n    clive_left = clive - 63  # Clive bought a badminton racket for $63\n\n    # They then had the same amount of money left\n    equation2 = Eq(benson_left, clive_left)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stickers Alexis had at first\n    x = symbols('x')\n\n    # Marry had (7/5)x stickers\n    marry_stickers = (7/5) * x\n\n    # Each gave 20% of their stickers to Charlotte\n    marry_gave = marry_stickers * 20 / 100\n    alexis_gave = x * 20 / 100\n\n    # Charlotte's stickers increased by 80%\n    charlotte_stickers = (marry_gave + alexis_gave) / 80 * 100\n\n    # Mary had 20 stickers more than Charlotte in the end\n    equation = Eq(marry_stickers - marry_gave, charlotte_stickers + 20)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Return the number of stickers Alexis had at first\n    return int(solution[0])\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit must be 1-9\n        for j in range(0, 10):  # The second digit can be 0-9\n            # Since the number is palindromic, the third and fourth digits are determined by first and second\n            palindromic_number = int(f\"{i}{j}{j}{i}\")\n            if 1000 <= palindromic_number <= 9999:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq((A + B)/2, 50)\n    equation2 = Eq((B + C)/2, 43)\n    equation3 = Eq((A + C)/2, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    A_val = solutions[A]\n    B_val = solutions[B]\n    C_val = solutions[C]\n\n    average_ABC = (A_val + B_val + C_val) / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n    return sweets_in_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    # Let x be the number of pens Denise has\n    # Jay has 6 times as many pens as Denise\n    # Together they have 126 pens\n    # x + 6x = 126\n    # 7x = 126\n    # x = 126 / 7\n    # x = 18\n    # Denise has 18 pens\n    \n    denise_pens = 126 / 7\n    return denise_pens\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # Cost of 5 chocolate bars\n    chocolate_bar_cost = 5 * 1.26\n    # Since the cost is equal to 6 cookies, find the cost of one cookie\n    cookie_cost = chocolate_bar_cost / 6\n    # Subtract the cost of 4 cookies from the starting amount\n    money_left = 9.05 - (4 * cookie_cost)\n    \n    return round(money_left, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation 1: The boys and girls together should total 650 children\n    equation1 = Eq(boys + girls, 650)\n\n    # Equation 2: Every 3 boys share one ball, and every 2 girls share one ball, and together they have 250 balls.\n    equation2 = Eq(boys / 3 + girls / 2, 250)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # After 25 girls went out, number of girls became 2/3 of the number of boys\n    equation1 = Eq(girls - 25, 2/3 * boys)\n    # After that, 15 boys went out, and the number of boys equals the number of girls\n    equation2 = Eq(boys - 15, girls - 25)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate initial total students\n    total_initial_students = solutions[boys] + solutions[girls]\n\n    return total_initial_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let x be the number of groups of coins in the ratio 8:3\n    # Therefore, we have 0.10 * 8x coins of 10 cents and 0.50 * 3x coins of 50 cents\n    # The total value is 0.10*8x + 0.50*3x = 75.90\n    \n    # Solving for x\n    x = (75.90) / (0.10*8 + 0.50*3)\n    \n    # Now we can calculate the total value of 50 cents coins\n    total_value_50c = 0.50 * 3 * x\n    \n    return total_value_50c\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the unknown as a symbol\n    box = symbols('box')\n    \n    # Setup the equation based on the given information\n    equation = Eq(8 * 11, box * 9 + 34)\n    \n    # Solve the equation\n    solved_values = solve(equation, (box))\n    \n    # Extract the solution for the box variable\n    return solved_values[0]\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    drop_in_temp = 12\n    midnight_temp = midday_temp - drop_in_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    original_price = 6400 / 0.2\n    discount = original_price - 6400\n    return discount\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_side_length = 7\n    hole_side_length = 3\n    volume_prism = 320\n\n    base_area = base_side_length ** 2\n    hole_area = hole_side_length ** 2\n    effective_base_area = base_area - hole_area\n\n    height = volume_prism / effective_base_area\n\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "def solution():\n    from math import factorial\n    # Treat Amy and Judy as a single entity and thus we have 7 entities to arrange.\n    arrangements_of_entities = factorial(7)\n    # Amy and Judy can be arranged in 2! ways as they can swap their seats.\n    arrangements_of_amy_judy = factorial(2)\n\n    # Since the table is round, rotating any arrangement does not give us a new order.\n    # Therefore, we can fix one person's position and arrange the remaining 7 entities.\n    # The result will be the number of arrangements of the 7 entities multiplied by the\n    # number of arrangements of Amy and Judy.\n    return arrangements_of_entities * arrangements_of_amy_judy\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    sum_n = 0\n    n = 0\n    while sum_n < 2008:\n        n += 1\n        sum_n += n\n\n    prev_triangle = sum_n - n\n    position = 2008 - prev_triangle\n\n    return position\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    x_weight = 1.5  # weight of one x in grams\n    equation = Eq(3 * x, 10 * y)\n\n    # since 3 x's balance with 10 y's and weight of one x is known\n    # substitution for x = 1.5 grams in the equation\n    substituted_equation = equation.subs(x, x_weight)\n\n    # solve for y\n    solutions = solve(substituted_equation, y)\n\n    return float(solutions[0])\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    terms = [6, 10, 14, 18, 22, 26]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    # Let x be the number of cucumbers Tommy sold\n    # Therefore, Tommy sold 3 times the number of cucumbers plus 3 more to get the number of tomatoes\n    # Forming the equation: 3x + 3 = 27 (where 27 is the number of tomatoes sold)\n    \n    # Solving for x (number of cucumbers)\n    x = (27 - 3) // 3\n\n    return x\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 5, 9]\n    num_ways = len(list(permutations(digits, 3)))\n    return num_ways\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        digits = [int(digit) for digit in str(i)]\n        if sum(digits) == 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum_of_numbers = sum(range(2, 101, 5))\n    return sum_of_numbers\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    n = 31\n    # The 16th term (a_16) of the arithmetic sequence is 100\n    a_16 = 100\n    # Common difference (d) is given as 6\n    d = 6\n    \n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # We can rearrange this formula to find the first term, a_1\n    a_1 = a_16 - (16 - 1) * d\n    \n    # Now we use the formula for the sum of the first n terms of an arithmetic sequence: S_n = n/2 * (2*a_1 + (n - 1)*d)\n    S_n = n/2 * (2*a_1 + (n - 1)*d)\n    \n    return S_n\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_to_avril = total_bags // 3\n    left_for_pip = total_bags - given_to_avril\n    return left_for_pip\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # Chris needs to ensure that he leaves a multiple of 3 matches after his turn.\n    # This way, no matter how many matches Dylan picks (1 or 2), Chris will always\n    # be able to bring the count back to a multiple of 3 on his next turn.\n\n    # Since there are 7 matches initially, if Chris takes away 1 match, \n    # Dylan will be left with 6 matches.\n\n    # 6 is a multiple of 3, so Chris can always respond to Dylan's moves to maintain\n    # the count as a multiple of 3 and win the game.\n\n    # Thus, Chris must take away 1 match on his first turn to ensure victory.\n    return 1\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        a, b, c = p\n        if a != 0:  # 'A' should not be zero as it is the first digit of a 3-digit number\n            return a * 100 + b * 10 + c\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        ABAC = A*1001 + B*10 + C\n        DBEC = D*1000 + B*100 + E*10 + C\n        ACEDC = A*10000 + C*1000 + E*100 + D*10 + C\n        if ABAC + DBEC == ACEDC and A != 0 and D != 0:\n            return DBEC\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    morning_time = (9 * 60) + 23  # Convert 9.23am to minutes\n    afternoon_time = (13 * 60) + 6  # Convert 1.06pm to minutes (13:06 in 24h format)\n\n    minutes_between = afternoon_time - morning_time\n\n    return minutes_between\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    return 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    ans = 64**2 - 36\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # According to the principles of combinatorics, the number of ways to choose k items from n possibilities\n    # is given by \"n choose k\", which is calculated by the binomial coefficient n! / (k! * (n - k)!).\n    # However, the question does not specify the values for the number of restaurants or the criteria for choosing.\n    # Typically, such problems provide a total number of restaurants (n) and a number to choose (k),\n    # but since this information is missing, we cannot provide a numerical answer.\n\n    # Assuming 'n' represents the number of restaurants available to choose from and he can choose only one,\n    # the number of different choices would simply be 'n' because he has 'n' options to choose from.\n    # Since no specific value for 'n' is given, we return 'n'.\n    \n    return 'n'  # Placeholder for the missing number of restaurants\n\n# We assign 'None' to the 'ans' variable because we do not have enough information to calculate a numerical answer.\nans = None"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    return sum(range(1, 10)) + sum(range(1, 9))\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    return (53-50) + (47-44) + (41-38) + (35-32) + (29-26) + 23\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    ans = 6.6 * 30\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    walking_speed = 8  # Auntie Lina's walking speed in m/min\n\n    time_taken = distance / walking_speed  # The time it takes for Auntie Lina to walk to the wet market\n\n    return int(time_taken)\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, E, _, _ = perm\n        if A == 0:  # A should not be zero as it is the most significant digit in AEEA\n            continue\n        number = A * 1000 + E * 110 + A  # Constructing the number AEEA\n        # Converting the number to set form and comparing it with the permutations\n        # Since all letters stand for different digits, we should have 4 unique digits\n        if len(set(str(number))) == 4:\n            return number\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_age = 4 * 25  # 4 people with an average age of 25\n    ages_known = 14 + 36 + 10  # sum of the ages of Harry, his mom, and sister\n    harrys_dad_age = total_age - ages_known  # age of Harry's dad\n\n    return harrys_dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Classroom doors are typically around 2 meters in height\n    # Convert all measurements to meters for comparison\n    measurements_in_meters = [83, 200 / 100, 8 / 100, 1/2]\n    \n    # Closest measurement to the typical height of a classroom door (approximately 2 meters)\n    closest_measurement = min(measurements_in_meters, key=lambda x: abs(x - 2))\n    \n    return closest_measurement\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Equation representing the total cost\n    total_cost_eq = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    # Equation representing the cost of a notebook and a pencil case\n    notebook_pencil_case_eq = Eq(notebook + pencil_case, 6)\n    # Equation representing the cost of a pencil case and an eraser\n    pencil_case_eraser_eq = Eq(pencil_case + eraser, 8)\n\n    # Solving the system of equations\n    solutions = solve((total_cost_eq, notebook_pencil_case_eq, pencil_case_eraser_eq),\n                      (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    digits_per_page = 1\n    count_of_digits = 0\n    page = 1\n\n    while count_of_digits < 450:\n        count_of_digits += digits_per_page\n        if page == 9 or page == 99:\n            digits_per_page += 1\n        page += 1\n\n    return page - 1  # Subtract 1 because page was incremented after the last count\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    # Represent the total amount Leonard had initially as 'x'.\n    # After spending 5/12 of his money on lunch, the remaining money is (1 - 5/12)x = 7/12x.\n    # Then he spends 2/7 of the remaining money on dinner, so he's left with (1 - 2/7)(7/12)x = (5/7)(7/12)x.\n    # According to the problem, this amount is equal to $45.\n    # Therefore, (5/7)*(7/12)*x = 45.\n\n    # Solve for 'x'.\n    x = 45 / ((5/7) * (7/12))\n\n    return x\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 0\n    page_number = 0\n\n    while total_digits < 1524:\n        page_number += 1\n        total_digits += len(str(page_number))\n        \n    return page_number\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = (5 * 4) / 2  # Total games played in the tournament\n    games_won = 2 + 1 + 4 + 3  # Games won by Lily, Eva, Tina, and Emma\n    gina_won = total_games - games_won  # Games won by Gina\n    return int(gina_won)\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest = max(numbers)\n    smallest = min(numbers)\n    difference = largest - smallest\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "import math\n\ndef solution():\n    g = 9.81  # acceleration due to gravity in m/s^2\n    theta = math.radians(20)  # convert angle to radians\n    d = 400  # distance in meters\n    mu_k = 0.2  # coefficient of kinetic friction\n\n    # Components of gravity along and perpendicular to incline\n    g_parallel = g * math.sin(theta)\n    g_perpendicular = g * math.cos(theta)\n\n    # Force of friction, which is mu_k times the normal force\n    friction_force = mu_k * g_perpendicular\n\n    # Net force along the incline\n    net_force = g_parallel - friction_force\n\n    # Acceleration along the incline (net force divided by mass, but mass cancels out)\n    a = net_force\n\n    # Final speed using kinematic equation: v^2 = u^2 + 2ad (u is initial speed, 0 here)\n    v = math.sqrt(2 * a * d)\n\n    return v\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    total_points = 155\n    point_difference = 15\n    points_correct = 10\n    points_wrong = -5\n\n    for avril_correct in range(11):\n        avril_points = avril_correct * points_correct + (10 - avril_correct) * points_wrong\n        eddie_points = total_points - avril_points\n        \n        if eddie_points - avril_points == point_difference:\n            return avril_correct\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    cost_per_shirt = 5\n    cost_per_bag = 10\n    total_spent = 300\n\n    # Marcus's solution calculates as if 1 bag and 4 shirts are bought per group\n    # which is not correct as per the problem statement\n    # Correct calculation should be for every 4 shirts, 1 bag is bought. \n    # So, for 4 shirts, the cost will be: 4 * cost_per_shirt + cost_per_bag\n\n    # Let the number of groups be g (each group has 4 shirts and 1 bag)\n    g = (total_spent) / (4 * cost_per_shirt + cost_per_bag)\n    \n    # Now, calculate the number of shirts by multiplying number of groups by 4\n    # (since there are 4 shirts in one group)\n    shirts_bought = g * 4\n\n    return int(shirts_bought)\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # 6 men complete the job in 5 days\n    # Therefore, 1 man's 1 day work is 1 / (6 * 5)\n    man_1_day = 1 / (6 * 5)\n    \n    # 5 women complete the job in 6 days\n    # Therefore, 1 woman's 1 day work is 1 / (5 * 6)\n    woman_1_day = 1 / (5 * 6)\n    \n    # Now, 10 men and 5 women will work together\n    # Their one day work will be 10 men's one day work + 5 women's one day work\n    one_day_work = 10 * man_1_day + 5 * woman_1_day\n    \n    # The number of days needed to complete the job by 10 men and 5 women is\n    # the reciprocal of their one day's work\n    num_days = 1 / one_day_work\n\n    return num_days\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys, 3 * girls)  # originally thrice as many boys as girls\n    equation2 = Eq(boys - 12, girls + 20)  # after 12 boys left and 20 girls joined, they are equal\n\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of the different types of coffee beans\n    weight_a = 56\n    weight_b = 96\n    weight_c = 120\n\n    # The greatest possible mass for each small packet would be the greatest common divisor of the three weights\n    ans = gcd(gcd(weight_a, weight_b), weight_c)\n\n    return ans\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors_sum = sum(i + n//i for i in range(1, int(n**0.5)+1) if n % i == 0)\n    return factors_sum\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    # Since each child has to get at least one apple, we distribute one apple to each child first.\n    total_apples = 30\n    children = 6\n    # Distribute one apple to each child\n    apples_remaining = total_apples - children\n    \n    # Now we have to distribute the remaining apples in such a way that one child gets the most.\n    # Start by giving all remaining apples to one child and then redistribute one by one to reduce the max number.\n    max_apples = apples_remaining\n    \n    # We can reduce the count of apples for the child with most apples by giving one apple to each of the other 5 children.\n    # This process is repeated until the maximum number of apples cannot be reduced further without having two children with the same amount.\n    while max_apples > apples_remaining // children:\n        max_apples -= 1\n        apples_remaining -= children - 1  # -1 because we don't take an apple from the kid with the most\n    \n    return max_apples + 1  # +1 because we already gave each child one apple before the redistribution\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana, orange = symbols('apple banana orange')\n    equation1 = Eq(banana, 2 * apple)\n    equation2 = Eq(orange, 3 * apple)\n    equation3 = Eq(apple + banana + orange, 24)\n\n    solutions = solve((equation1, equation2, equation3), (apple, banana, orange))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    # Let the number of years time be y\n    # Given Anna's current age is 8 and her mother's current age is 44\n    # After y years, Anna's age will be 8 + y and her mother's age will be 44 + y\n    # According to the condition, Anna's mother will be 3 times as old as Anna\n    # So we have the equation: 44 + y = 3 * (8 + y)\n    \n    # Let's solve for y\n    y = symbols('y')\n    equation = Eq(44 + y, 3 * (8 + y))\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # Short ribbon length in cm\n    short_length = 40\n    # Long ribbon length in cm\n    long_length = 70\n    # May's short ribbon count\n    may_short_ribbon_count = 7\n    # Nancy's long ribbon count\n    nancy_long_ribbon_count = 18\n    # Difference in total length in cm (converted from 2.4m to cm)\n    length_difference = 240\n    \n    # Calculate Nancy's total ribbon length in cm\n    nancy_total_length = nancy_long_ribbon_count * long_length\n    \n    # Set up the equation:\n    # may_total_length == nancy_total_length + length_difference\n    # may_short_ribbon_count * short_length + may_long_ribbon_count * long_length == nancy_total_length + length_difference\n    # Solve for may_long_ribbon_count\n    may_long_ribbon_count = (nancy_total_length + length_difference - may_short_ribbon_count * short_length) / long_length\n    \n    # May's total piece count is the sum of her short and long ribbons\n    may_total_pieces = may_short_ribbon_count + may_long_ribbon_count\n    \n    return may_total_pieces\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    # Assuming all animals are chickens (with 2 legs), calculate the excess number of legs when compared to 34.\n    total_legs = 34\n    all_chickens_legs = 2 * 12\n    excess_legs = total_legs - all_chickens_legs\n\n    # Since each rabbit has 2 more legs than a chicken (4 legs vs 2 legs for a chicken), divide the excess number of legs by 2 to find the number of rabbits.\n    num_rabbits = excess_legs // 2\n\n    return num_rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    result = 2.4 * 52 / 100 + 7.6 * 52 / 100\n    return result\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for number in range(99, 10, -1):\n        if (number % 4 == 3) and (number % 5 == 3):\n            return number\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_parts = 3 + 1  # Red parts + Blue parts\n    total_litres = 1  # Total litres of 'Purple Fire' paint\n\n    red_paint = (3 / total_parts) * total_litres  # Calculate red paint based on ratio\n\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    # A gives B 40 books => A - 40 = B + 40\n    equation1 = Eq(A - 40, B + 40)\n    \n    # B gives A 40 books => A + 40 = 3 * (B - 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    # given numbers without the missing number\n    given_numbers = [9, 7, 5, 8, 4, 1, 8]\n    # total number of elements including the missing number\n    total_numbers = 8\n    # the mean of all numbers\n    mean_value = 6\n\n    # calculate the sum of given numbers\n    sum_of_given_numbers = sum(given_numbers)\n    # calculate the total sum with the missing number using the mean formula\n    total_sum = mean_value * total_numbers\n    # find the missing number by subtracting the sum of given numbers from the total sum\n    missing_number = total_sum - sum_of_given_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_amount = 68\n    quarter_amount = total_amount / 4\n    remaining_amount = total_amount - quarter_amount\n    return remaining_amount\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red = symbols('blue red')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n    \n    solutions = solve((equation1, equation2), (blue, red))\n    \n    return solutions[blue]\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Amount of grass that can feed 8 cows for 10 days can also feed 4 cows for 15 days\n    # Let the total amount of grass be G\n    # Then 8 cows consuming for 10 days is equal to 4 cows consuming for 15 days\n    # So, 8 * 10 = 4 * 15\n    # We can determine the amount of grass consumed daily by a cow as G / (8 * 10)\n    # We need to find out how many cows can be fed for 5 days which is G / (5 * daily_consumption)\n    # where daily_consumption is G / 80 (from the equation 8 * 10)\n    cows_for_5_days = (8 * 10) / 5\n\n    return cows_for_5_days\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    mass_per_packet = 1.02 / 12\n    total_mass = mass_per_packet * 4\n    return total_mass\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    total_cost = 83\n    tape_cost = 9\n    tape_count = 3\n    cd_count = 4\n\n    total_tape_cost = tape_cost * tape_count\n    total_cd_cost = total_cost - total_tape_cost\n    cd_cost = total_cd_cost / cd_count\n\n    return cd_cost\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    divisor_without_decimal = 122\n    incorrect_result_difference = 99.396\n\n    # The true result should be the incorrect result difference divided by (divisor without decimal point - 1)\n    true_result = incorrect_result_difference / (divisor_without_decimal - 1)\n\n    return true_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    total_cards = 876\n    # total_cards = Hisham's cards + Melissa's cards\n    # Melissa has twice as many cards as Hisham, so let Hisham's cards be x and Melissa's be 2x\n    # x + 2x = total_cards\n    # 3x = total_cards\n    x = total_cards // 3  # Hisham's cards\n    melissa_cards = 2 * x  # Melissa's cards\n    \n    # After giving y cards to Hisham, both will have same number of cards\n    # (x + y) = (melissa_cards - y)\n    # 2y = melissa_cards - x\n    # y = (melissa_cards - x) // 2\n    \n    y = (melissa_cards - x) // 2\n    \n    return y\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    a, b = symbols('a b')\n    eq1 = Eq(a + b, 6) # third number in the sequence\n    eq2 = Eq(a + 2*b, 15) # fifth number in the sequence\n    solutions = solve((eq1, eq2), (a, b))\n    third_number = solutions[a]\n    fourth_number = solutions[b]\n    fifth_number = third_number + fourth_number\n    sixth_number = fourth_number + fifth_number\n    seventh_number = fifth_number + sixth_number\n    return seventh_number\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # This will be a brute-force solution checking different distributions.\n    # Sort the distribution in ascending order to ensure all are unique\n    # and then check for each possible max value if it satisfies the conditions.\n    \n    def distribute(current_sum, child_index, child_count, last_value):\n        # Base case: if we reached the last child, check if we can assign the leftover apples\n        if child_index == child_count - 1:\n            # Make sure the distribution is ascending, hence the current_sum must be greater \n            # than the last_value and the leftover apples should be 1 or more.\n            if current_sum < last_value + 1:  \n                return None\n\n            # Since it's ascending and child_index is the last child, this must be the max\n            return current_sum\n\n        # Try assigning apples to the current child in ascending order\n        for i in range(last_value + 1, current_sum):\n            apples_left = current_sum - i\n\n            # Get the result from the subtrees of recursion\n            result = distribute(apples_left, child_index + 1, child_count, i)\n\n            # If we found a valid distribution, return the amount of apples for the current child\n            if result is not None:\n                return i\n\n        # If not found, return None to represent no valid distribution\n        return None\n\n    # Start the recursive function with the total sum, starting child index, count, and starting value\n    return distribute(50, 0, 8, 0)\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    result = (35 - 8) / 3\n    return result\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "from math import gcd\n\ndef solution():\n    boys = 28\n    girls = 32\n\n    greatest_common_divisor = gcd(boys, girls)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # There are 1000 millilitres in 1 litre\n    return int(n)\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    ans = 36 * sum(1 / (i * (i + 5)) for i in range(1, 32, 5))\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    all_combinations = permutations(digits)\n    valid_numbers = [int(''.join(map(str, combo))) for combo in all_combinations if combo[0] !=0]\n    odd_numbers = [num for num in valid_numbers if num % 2 != 0]\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # 24 men can complete the job in 16 days. This means 1 man can complete the job in 24*16 days.\n    man_days = 24 * 16\n    # Therefore, the daily work done by 1 man is 1/(24*16).\n\n    # Similarly, 16 women can complete the job in 24 days. This implies 1 woman can complete the job in 16*24 days.\n    woman_days = 16 * 24\n    # Hence, the daily work done by 1 woman is 1/(16*24).\n\n    # Now we need to find the total daily work done by 10 men and 6 women.\n    total_daily_work = (10 / man_days) + (6 / woman_days)\n    \n    # The total time required to complete the job by 10 men and 6 women is the inverse of their total daily work.\n    total_time = 1 / total_daily_work\n\n    return total_time\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # number of rectangles\n    n = 4\n    # maximum number of regions created by n rectangles\n    ans = n**2 + n + 1\n    return ans\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Julie, Marion and Ethan's earnings\n    julie, marion, ethan = symbols('julie marion ethan')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    # Calculate the total earnings\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n\n    return total_earnings\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "from math import factorial\n\ndef solution():\n    total_people = 5\n    positions = total_people\n\n    # Total possible ways without any restriction\n    total_ways = factorial(total_people)\n\n    # Ways where Eddie is in the middle\n    ways_with_eddie_in_middle = factorial(total_people - 1)\n\n    # Allowed ways where Eddie is NOT in the middle\n    allowed_ways = total_ways - ways_with_eddie_in_middle\n\n    return allowed_ways\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Given sequence: 96, n, 24, 12, 6\n    # This forms a geometric sequence where each term is divided by a common ratio to get the next term\n    # Let's find the common ratio by dividing the 4th term (12) by the 5th term (6)\n    r = 12 / 6\n    \n    # Since 96 is the first term and 24 is the third term, n is the second term.\n    # To find the second term, we can use the formula for the nth term of a geometric sequence:\n    # a_n = a_1 * r^(n-1), where a_1 is the first term and r is the common ratio\n    # In this case, a_2 = a_1 * r^(2-1) = 96 * r\n    a_2 = 96 / r\n    \n    return a_2\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total sum of money Hamid had initially\n    x = symbols('x')\n\n    # According to the problem, after spending 1/3 of his money on a watch\n    # and $56 on a tie, he is left with 3/8 of the sum of money he had at first\n    equation = Eq(x - x/3 - 56, 3*x/8)\n\n    # Solve the equation for x\n    total_money = solve(equation, x)\n\n    # The total amount Hamid spent is 1/3 of his total money + $56\n    total_spent = (1/3)*total_money[0] + 56\n\n    return total_spent\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    relative_speed = eddie_speed + train_speed  # m/s, because they are moving in opposite directions\n    time_to_pass = 10  # seconds\n\n    train_length = relative_speed * time_to_pass  # length = speed x time\n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    least_number, _ = solve_congruence(*congruences)\n    return least_number\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "def solution():\n    max_value = 0\n    for op1 in ('+', '*'):\n        for op2 in ('+', '*'):\n            for op3 in ('+', '*'):\n                expression = f'1{op1}2{op2}3{op3}4'\n                value = eval(expression)\n                max_value = max(max_value, value)\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_questions = 12\n    correct_mark = 8\n    incorrect_mark = -3\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        total_marks = correct_answers * correct_mark + incorrect_answers * incorrect_mark\n        \n        if total_marks == 63:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    # Total distance the train needs to travel to completely cross the bridge\n    total_distance = 700 + 900  # in meters\n    \n    # Speed of the train\n    speed = 400  # in meters/minute\n    \n    # Time taken to cross the bridge entirely\n    time = total_distance / speed  # in minutes\n    \n    return time\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Number of terms in the sequence\n    n = 60\n\n    # Calculating the average of the first 5 numbers\n    avg_first_5 = 10 / 5\n\n    # Calculating the average of the last 5 numbers\n    avg_last_5 = 120 / 5\n\n    # Calculating the average of all the 60 numbers\n    avg_60_numbers = (avg_first_5 + avg_last_5) / 2\n\n    # Calculating the sum of all the 60 numbers\n    sum_60_numbers = avg_60_numbers * n\n\n    return sum_60_numbers\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for i in range(1995):\n        a, b = b, a + b\n    ans = b % 3\n    return ans\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    # Divisibility rule for 11: Subtract the sum of the first, third, fifth... digits\n    # from the sum of the second, fourth, sixth... digits. If the result is 0 or \n    # divisible by 11, then the entire number is divisible by 11.\n    min_value = float('inf')  # Initialize with a very large number\n    \n    # Generate all permutations of the digits 1 to 9\n    for perm in permutations(range(1, 10), 9):\n        # Check divisibility by 11\n        if (sum(perm[0::2]) - sum(perm[1::2])) % 11 == 0:\n            value = int(''.join(map(str, perm)))  # Form the 9-digit number\n            min_value = min(min_value, value)  # Keep the minimum value\n\n    return min_value\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the variables\n    sam, peter = symbols('sam peter')\n\n    # Writing the equations based on the problem statement\n    equation1 = Eq(sam, peter + 40) # Sam had 40 stickers more than Peter\n    equation2 = Eq(sam - 0.20 * sam + 0.25 * peter, peter - 0.25 * peter + 0.20 * sam + 96) # Transaction and final difference\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel_current_age, mom_current_age = symbols('hazel_current_age mom_current_age')\n\n    # Hazel will be three times her current age in 12 years\n    eq1 = Eq(hazel_current_age * 3, hazel_current_age + 12)\n    # On Hazel’s 18th birthday, her mom will be three times Hazel’s age then\n    eq2 = Eq(mom_current_age + (18 - hazel_current_age), 3 * 18)\n\n    solutions = solve((eq1, eq2), (hazel_current_age, mom_current_age))\n\n    return solutions[mom_current_age]\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    # Initial ages of Peter, Pip, and Pit\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n    # Calculate the difference in age between Peter and the sum of his sons' ages\n    age_diff = peter_age - (pip_age + pit_age)\n    \n    # Since they share the same birthday, the sum of the sons' ages will equal Peter's age\n    # in age_diff years\n    return peter_age + age_diff\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_cubes = ((n * (n + 1)) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 possible pairs of consecutive numbers (1-2, 2-3, ..., 12-13)\n    # For each pair of consecutive numbers, we need to consider the worst case \n    # scenario in terms of drawing. That is, we draw all 4 cards of a single\n    # number before we get a card from its consecutive pair.\n    \n    # Therefore, in the worst case, we can draw all 4 cards of numbers 1 to 12, which gives 12 * 4 cards.\n    # The next card we draw, no matter what it is, will ensure we have two consecutive numbers.\n    # Thus, we need to draw 12 * 4 + 1 cards to ensure we have two consecutive numbers.\n    \n    return 12 * 4 + 1  # Number of cards needed to draw\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Each sheet of the newspaper consists of 4 page numbers: front, back, and two inside pages.\n    # Since the back page is 36, it means there are 36/4 = 9 sheets.\n    # The 5th sheet would contain the pages 5*4-3, 5*4-2, 5*4-1, and 5*4\n    # These correspond to page numbers 17, 18, 19, and 20.\n\n    page_numbers = [5*4-3, 5*4-2, 5*4-1, 5*4]\n    sum_of_pages = sum(page_numbers)\n\n    return sum_of_pages\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    original_profit_margin = 60000   # original profit\n    increased_profit = original_profit_margin * 1.3  # increased profit by 30%\n    profit_difference = increased_profit - original_profit_margin  # difference in profit\n    cost_decrease_per_laptop = 2000 / 5  # cost decrease per laptop, which is 1/5 of the selling price\n    # profit_difference should be equal to the number of laptops times the cost decrease per laptop\n    number_of_laptops = profit_difference / cost_decrease_per_laptop\n    return int(number_of_laptops)\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    return 10 * 2\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    result = (124 + 231) / 5\n    return result\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    for a in range(1, 29):  # 'a' must be less than 28 to be in an arithmetic pattern with other moduli\n        # We're looking for four numbers that are one apart and are valid remainders when M is divided by 7, 9, 28, and a\n        # These will be based on an arithmetic pattern with a common difference 'd'\n        for d in range(1, 7):  # We can start with a difference of 1 and go up to 6 (since 7 is the smallest modulus)\n            # The remainders will be 0*d, 1*d, 2*d, 3*d for the divisors 7, 9, a, 28 respectively\n            M = (0 * d) % 7 == 0 and (1 * d) % 9 == 1 * d and (2 * d) % a == 2 * d and (3 * d) % 28 == 3 * d\n            # If M satisfies the condition for some 'a' and 'd', then we found our M\n            if M:\n                # Since 28 is the largest modulus and it leaves a remainder of 3*d, M must be at least that\n                M = 28 + 3 * d\n                # But it must also leave the correct remainders when divided by 7, 9, a\n                while M % 7 != 0 or M % 9 != 1 * d or M % a != 2 * d:\n                    M += 28  # We increment by 28 since it's the LCM of 7 and 28 (and will maintain the remainder conditions)\n                return M  # This is our smallest possible M\n    return None  # If no such M is found, return None\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    # First term (a) of the arithmetic sequence is the number of seats in the first row\n    a = 48\n    # The common difference (d) in the number of seats between rows\n    d = 4\n    # Last term (l) of the arithmetic sequence is the number of seats in the last row\n    l = 80\n    \n    # Find the number of terms (n) in the arithmetic sequence using the formula: n = (l - a) / d + 1\n    n = (l - a) // d + 1\n    \n    # Find the sum of the arithmetic sequence using the formula: Sum = n/2 * (a + l)\n    Sum = n * (a + l) // 2\n    \n    return Sum\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    count = 0\n    for i in range(1, 130):\n        count += len(str(i))\n\n    return count\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar_weight = 80  # grams of sugar\n    water_weight = 420  # grams of water\n    \n    total_solution_weight = sugar_weight + water_weight\n    sugar_concentration = (sugar_weight / total_solution_weight) * 100\n\n    return sugar_concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    total_students = 0\n    boy_diff = 36\n    side_length = 1  # Starting from the smallest possible square.\n\n    while True:\n        # Calculate the number of students in current layer.\n        # For boys (outer layer), it's (side_length^ 2).\n        # For girls (inner layer), it's ((side_length - 2) ^ 2). Use max to avoid negative numbers.\n        boys = side_length ** 2\n        girls = max((side_length - 2) ** 2, 0)\n\n        # Boys are on the odd layers, girls are on the even layers.\n        if side_length % 2 == 0:\n            total_boys = boys + (side_length - 2) ** 2\n            total_girls = total_students - total_boys\n        else:\n            total_boys = total_students\n            total_girls = girls\n\n        # If the difference matches the condition, break the loop.\n        if total_boys - total_girls == boy_diff:\n            total_students = total_boys + total_girls\n            break\n        elif total_boys - total_girls > boy_diff:\n            # If the difference is too large, it's not possible.\n            # Increment side length and calculate next layer.\n            side_length += 1\n            total_students = boys  # Reset the total_students for next iteration.\n        else:\n            total_students += 4 * (side_length - 1)  # Add the students in the current layer to outer layer.\n            side_length += 2  # Skip to the next suitable layer that could have boys.\n\n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    men_days_for_120m = 3 * 2\n    days_for_1_man_to_dig_1m = men_days_for_120m / 120\n    days_for_1_man_to_dig_880m = days_for_1_man_to_dig_1m * 880\n    days_for_4_men_to_dig_880m = days_for_1_man_to_dig_880m / 4\n    return days_for_4_men_to_dig_880m\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_weeks = 4\n    combined_rate = total_people / combined_weeks\n    \n    gloria_rate = combined_rate - ellie_rate\n    gloria_weeks = total_people / gloria_rate\n    \n    return gloria_weeks\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    return (2 / 5) * 15\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    books_first_shelf = 18\n    books_second_shelf = 24\n    books_moved = 0\n    \n    while not (books_second_shelf == 2 * (books_first_shelf - books_moved)):\n        books_moved += 1\n        books_second_shelf += 1\n        \n    return books_moved\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    import fractions\n\n    # Calculate the sum of the numerators of the given mixed fractions\n    sum_numerators = ((285 * 7) + 6) + ((181 * 11) + 10) + ((153 * 13) + 12)\n    \n    # Calculate the sum of the denominators of the given fractions in the divisor\n    sum_denominators = (7 + 11 + 13)\n    \n    # Calculate the sum of the denominators of the given unit fractions\n    sum_unit_fractions = fractions.Fraction(1, 7) + fractions.Fraction(1, 11) + fractions.Fraction(1, 13)\n    \n    # Calculate the result of the division\n    ans = sum_numerators / sum_denominators / sum_unit_fractions\n\n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    pupils = symbols('pupils')\n\n    band = 5\n    neither_band_nor_choir = pupils * 2/9\n    choir = (pupils - band - neither_band_nor_choir) * 3/4\n\n    equation = Eq(band + choir + neither_band_nor_choir, pupils)\n\n    total_pupils = solve(equation, pupils)\n\n    return total_pupils[0]\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time_in_seconds = 20\n    distance_in_meters = 300\n\n    speed_in_meters_per_second = distance_in_meters / time_in_seconds\n    \n    return speed_in_meters_per_second\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    for lollipops in range(1, 1000):\n        if lollipops % 4 == 32 and (lollipops - 3) % 7 == 0:\n            return lollipops\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    long_tube, short_tube = symbols('long_tube short_tube')\n\n    # One long tube can hold 8 balls, one short tube can hold 5 balls\n    equation = Eq(long_tube * 8 + short_tube * 5, 47)\n\n    # Solving the equation returns a dictionary with all possible combinations of long_tube and short_tube\n    solutions = solve((equation), (long_tube, short_tube))\n\n    # Iterate over solutions to find one with only integer and positive numbers of tubes\n    for solution in solutions:\n        if solution[long_tube].is_integer and solution[short_tube].is_integer:\n            if solution[long_tube] > 0 and solution[short_tube] > 0:\n                return solution[long_tube]\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    # Since it's an arithmetic sequence, the difference is constant.\n    # Calculate the common difference (d) from the given terms.\n    n_term_diff = 9 - 3  # difference in term positions\n    common_difference = (ninth_term - third_term) / n_term_diff\n    \n    # Now calculate the 11th term (a11) using the formula: \n    # a11 = a3 + (11 - 3) * d\n    eleventh_term = third_term + (11 - 3) * common_difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let F be the initial number of Felicia's bracelets\n    # Let J be the initial number of Janice's bracelets, which is given as 96\n    J = 96\n    # Jb be the number of bracelets Janice bought from Felicia\n    \n    # According to the problem:\n    # Felicia sold 3/5 of her bracelets, and Janice bought 2/5 of those\n    # Thus, Janice bought (2/5) * (3/5) * F = (6/25) * F\n    # Then Felicia has remaining bracelets F - (3/5) * F = (2/5) * F\n    # And Janice has J + (6/25) * F bracelets\n    \n    # The new ratio of Felicia's bracelets to Janice's bracelets is 5:7\n    # Therefore, (2/5) * F / (J + (6/25) * F) = 5/7\n    # Solving for F gives us the initial number of Felicia's bracelets\n    # And hence we can find Jb = (6/25) * F\n\n    # Start by solving for F using the ratio 5:7\n    # (2/5) * F / (J + (6/25) * F) = 5/7\n    # Cross-multiplying gives:\n    # 7 * (2/5) * F = 5 * (J + (6/25) * F)\n    # Simplify:\n    # (14/5) * F = 5J + (6/5) * F\n    # Move terms with F on one side:\n    # (14/5) * F - (6/5) * F = 5J\n    # Combine F terms:\n    # (8/5) * F = 5J\n    # Isolate F:\n    F = (5/8) * 5 * J\n\n    # Calculate the number of bracelets Janice bought from Felicia\n    Jb = (6/25) * F\n    return int(Jb)\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    numbers = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    total_sum = sum(n ** 3 for n in numbers)\n    return total_sum\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percent = 15\n    discount_amount = original_price * (discount_percent / 100)\n    sale_price = original_price - discount_amount\n\n    return sale_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    incorrect_result = 2138.4\n    true_result = incorrect_result / (432 - 1)\n    return true_result\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # Calculate the difference of the pairs of numbers\n    diff1 = 2758 - 2017\n    diff2 = 3670 - 2758\n    diff3 = 3670 - 2017\n\n    # Find the greatest common divisor of the differences\n    from math import gcd\n    common_gcd = gcd(gcd(diff1, diff2), diff3)\n    \n    # Find the possible values of A by finding the divisors of the greatest common divisor\n    # Exclude 1 since we are looking for different non-trivial divisors (A should be greater than 1)\n    possible_values_of_A = [i for i in range(2, common_gcd + 1) if common_gcd % i == 0]\n    \n    # Calculate the sum of the possible values of A\n    return sum(possible_values_of_A)\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    candies_for_boys = 5 * boys\n    candies_for_girls = 3 * girls\n    total_candies = 448\n    \n    # Equations based on the problem statement\n    equation1 = Eq(candies_for_boys + candies_for_girls, total_candies)\n    equation2 = Eq(girls, boys + 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Number of children is the sum of boys and girls\n    total_children = solutions[boys] + solutions[girls]\n    \n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    milk, fruit = symbols('milk fruit')\n\n    initial_ratio = Eq(milk / fruit, 7 / 9)\n    after_eating_ratio = Eq((milk - 8) / fruit, 2 / 3)\n\n    solutions = solve((initial_ratio, after_eating_ratio), (milk, fruit))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # We know that the grandmother was 80 in 2008\n    grandmothers_age_in_2008 = 80\n    year_2008 = 2008\n    \n    # We know that the mother was 40 in 1996\n    mothers_age_in_1996 = 40\n    year_1996 = 1996\n    \n    # Calculate the grandmother's age in 1996\n    grandmother_age_in_1996 = grandmothers_age_in_2008 - (year_2008 - year_1996)\n    \n    # Now calculate the grandmother's age when the mother was born (subtract the mother's age in 1996 from the grandmother's age in 1996)\n    grandmothers_age_when_mother_born = grandmother_age_in_1996 - mothers_age_in_1996\n    \n    return grandmothers_age_when_mother_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            return count\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    for bottles_1000_plus in range(350 + 1):\n        bottles_lemonade = 350 - bottles_1000_plus\n        total_income = 4 * bottles_lemonade + 7 * bottles_1000_plus\n        if total_income == 2012:\n            return bottles_1000_plus\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    initial_apples_per_friend = 4\n    additional_apples_per_friend = 1\n    total_initial_apples = 60\n\n    # Find the number of friends\n    number_of_friends = total_initial_apples / initial_apples_per_friend\n\n    # Calculate the total number of apples needed if each friend asks for one more apple\n    total_apples_needed = number_of_friends * (initial_apples_per_friend + additional_apples_per_friend)\n\n    return int(total_apples_needed)\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    max_red_black = 10 + 10  # The maximum number of non-white socks he can take\n    white_pair_needed = 2     # He needs 2 white socks to make a pair\n    max_draws = max_red_black + white_pair_needed  # Maximum draws to ensure a white pair\n    return max_draws\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    for groups_of_6 in range(25):\n        groups_of_4 = 24 - groups_of_6\n        total_students = (groups_of_6 * 6) + (groups_of_4 * 4)\n        if total_students == 112:\n            return groups_of_6\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # Given average of three numbers\n    avg_three_numbers = 60\n    total_of_three_numbers = avg_three_numbers * 3\n    \n    # Given average of four numbers with the fourth number added\n    avg_four_numbers = 90\n    total_of_four_numbers = avg_four_numbers * 4\n    \n    # The fourth number will be the difference\n    fourth_number = total_of_four_numbers - total_of_three_numbers\n    \n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    metres = 0.52\n    centimetres = metres * 100\n    return centimetres\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                if A != B and B != C and A != C:\n                    ABC = 100 * A + 10 * B + C\n                    return ABC\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Initial trade ratios\n    fish_to_rabbit = 3 / 2\n    rabbit_to_wheat = 3 / 4\n\n    # Calculate fish to wheat ratio by combining the ratios\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat\n\n    # Calculate the number of fish Owen should give for 8 packs of wheat\n    fish_for_eight_wheat = 8 / fish_to_wheat\n\n    return fish_for_eight_wheat\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    handbag_after_discount = 428\n    handbag_discount_rate = 0.20\n    total_discount = 121\n\n    handbag_before_discount = handbag_after_discount / (1 - handbag_discount_rate)\n    purse_discount = total_discount - (handbag_before_discount - handbag_after_discount)\n    purse_before_discount = purse_discount / 0.28\n\n    return purse_before_discount\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "from math import factorial\n\ndef solution():\n    # Initialize the result to count number of 0s\n    ans = 0\n    # Calculate the factorial of 25\n    factorial_25 = factorial(25)\n    # Divide the factorial by 10 until there's a remainder\n    while factorial_25 % 10 == 0:\n        ans += 1\n        factorial_25 //= 10\n    return ans\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # The pattern repeats every two digits, and we need to sum the first 20 digits.\n    # Every 2 digits, the sum is A + 2, we have 20 digits, so 10 such pairs.\n    # Hence, the sum of the first 20 digits is 10 * (A + 2) = 80.\n    # Now solve for A\n\n    A = (80 - 10*2) // 10  # Subtract 20 from 80, then divide by 10\n\n    return A\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    total_distance = 25\n    day_distance = 4\n    night_distance = -1\n    cumulative_distance = 0\n    day_count = 0\n    \n    while cumulative_distance < total_distance:\n        day_count += 1\n        cumulative_distance += day_distance\n        if cumulative_distance >= total_distance:\n            break\n        cumulative_distance += night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_a_week = 2\n    weeks = 2\n    total_dancing_times = times_a_week * weeks\n    return total_dancing_times\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Speed of jogging in miles per hour\n    jogging_speed = 6\n    # Speed of walking in miles per hour\n    walking_speed = 5\n\n    # Time spent jogging from 6:30 AM to 7:00 AM in hours\n    jogging_time = 0.5\n    # Time spent walking from 7:00 AM to 8:00 AM in hours\n    walking_time = 1\n\n    # Distance jogged\n    distance_jogging = jogging_speed * jogging_time\n    # Distance walked\n    distance_walking = walking_speed * walking_time\n\n    # Total distance traveled\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import lcm\n\ndef solution():\n    return lcm(6, 10)\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    least_books_in_most_books_layer = (total_books + layers - 1) // layers\n\n    return least_books_in_most_books_layer\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    original_books = symbols('original_books')\n\n    # Write the equations based on the problem\n    original_cost = 3.5 * original_books  # Total cost of original books\n    new_cost = original_cost + 2 * 6  # Total cost after buying 2 more books at $6 each\n    total_books = original_books + 2  # Total number of books after buying 2 more\n\n    # Equation based on the average price after buying 2 more books\n    equation = Eq(new_cost / total_books, 4)\n\n    # Solve the equation to find the number of original books\n    solutions = solve(equation, original_books)\n\n    # Return the total number of books\n    return int(solutions[0] + 2)\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    # Initialize count\n    count = 0\n    \n    # Iterate over possible hundreds place (cannot be 0)\n    for hundreds in [1, 2, 3]:\n        # Iterate over possible tens place (cannot be the same as hundreds)\n        for tens in [0, 1, 2, 3]:\n            if tens != hundreds:\n                # Iterate over possible ones place (cannot be same as hundreds or tens)\n                for ones in [0, 1, 2, 3]:\n                    if ones != hundreds and ones != tens:\n                        count += 1\n                        \n    # Returning the count\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    difference = -4\n    term = first_term\n    num_terms = 0\n\n    while term > 0:\n        num_terms += 1\n        term += difference\n\n    return num_terms\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    # Let x be the original amount of money Elvin had\n    # He spent 120 on a chair, so he had x - 120 left\n    # Then he spent 40% of the remainder on a jacket\n    # Finally, he had 30% of his original amount of money left after shopping\n\n    # Setting up the equation based on the given information\n    # x - 120 is what remained after buying the chair\n    # 0.6 * (x - 120) is what remained after spending 40% of the remainder on a jacket\n    # 0.3 * x is what he finally had left, which is 30% of the original amount\n    # Equating the two expressions, we have:\n    # 0.6 * (x - 120) = 0.3 * x\n    # Solving this equation will give us the original amount of money x\n\n    # Rearrange the equation\n    # 0.6x - 72 = 0.3x\n    # 0.6x - 0.3x = 72\n    # 0.3x = 72\n    # x = 72 / 0.3\n    x = 72 / 0.3\n\n    return x\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n    # rachel gives alice 10 pieces, they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n    # both eat 8 pieces, rachel has 3 times as many as alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    weight_of_cheese_kg = 1.2\n    weight_of_one_piece_g = 30\n\n    # Convert kg to g\n    total_weight_g = weight_of_cheese_kg * 1000\n\n    # Calculate the number of pieces\n    num_pieces = total_weight_g / weight_of_one_piece_g\n\n    return int(num_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # 1 liter = 1.05668821 quarts\n    liters_to_quarts = 2.5 * 1.05668821\n    cup_capacity_quarts = 0.5\n    num_cups = liters_to_quarts / cup_capacity_quarts\n\n    return round(num_cups)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    # Given B=2 and D=0\n    B, D = 2, 0\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    # The six digit number ABCDEF\n                    ABCDEF = A*100000 + B*10000 + C*1000 + D*100 + E*10 + F\n                    # The six digit number EFABCD\n                    EFABCD = E*100000 + F*10000 + A*1000 + B*100 + C*10 + D\n                    # Check if the condition holds: 5 * ABCDEF = 6 * EFABCD\n                    if 5 * ABCDEF == 6 * EFABCD:\n                        # Return the four-digit number represented by \"FACE\"\n                        return A*1000 + C*100 + E*10 + F\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Jogging time\n    jogging_hours = 1  # From 6:30 AM to 7:30 AM\n\n    # Walking time\n    walking_hours = 2  # From 7:30 AM to 9:30 AM\n\n    # Jogging speed (given)\n    jogging_speed = 6  # in miles per hour\n\n    # Walking speed (given)\n    walking_speed = 5  # in miles per hour\n\n    # Total distance traveled: Distance = Speed * Time\n    total_distance = (jogging_hours * jogging_speed) + (walking_hours * walking_speed)\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the symbol b represent the number of sweet wrappers Belle originally had\n    b = symbols('b')\n  \n    # Creating the equation according to the information provided\n    # Angel had 5/6 times Belle's sweet wrappers, then threw away 58\n    # and ended up with 75% (or 3/4) of Belle's sweet wrappers\n    equation = Eq((5/6)*b - 58, (3/4)*b)\n    \n    # Solving the equation\n    belle_wrappers = solve(equation, b)[0]\n\n    return belle_wrappers\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n\n    total_shapes = squares + circles + triangles\n\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    son_age_6_years_ago, dad_age_6_years_ago = symbols('son_age_6_years_ago dad_age_6_years_ago')\n\n    # equation representing the relationship of their ages 6 years ago\n    equation1 = Eq(dad_age_6_years_ago, 5 * son_age_6_years_ago)\n    # equation representing the sum of their current ages\n    equation2 = Eq(dad_age_6_years_ago + 6 + son_age_6_years_ago + 6, 78)\n\n    # solving the system of equations\n    solutions = solve((equation1, equation2), (son_age_6_years_ago, dad_age_6_years_ago))\n\n    # dad's current age\n    dad_current_age = solutions[dad_age_6_years_ago] + 6\n\n    return dad_current_age\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    ans = (4/9) * 36\n    return ans\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of children, and y be the amount each child should originally receive.\n    x, y = symbols('x y')\n    \n    # If there was 20p more, each child would receive 70p.\n    equation1 = Eq(x * (y + 20), 70 * x)\n    \n    # If each child receives 60p, then £2.10 would be left over.\n    equation2 = Eq(x * 60 + 210, x * y)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Return the number of children.\n    return solutions[x]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 0.20\n    bank_charge_percentage = 0.005\n\n    remit = salary * remit_percentage\n    bank_charge = remit * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for vase1 in range(1, 10):\n        for vase2 in range(1, 10):\n            for vase3 in range(1, 10):\n                if vase1 + vase2 + vase3 == 10 and len(set([vase1, vase2, vase3])) == 3:\n                    count += 1\n    return count // 6  # dividing by the number of permutations of the three vases\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    current_balance = -76.20\n    payment_received = 120.75\n    new_balance = current_balance + payment_received\n    return new_balance\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('2 Mar 2023', '%d %b %Y')\n    end_date = datetime.strptime('15 Apr 2023', '%d %b %Y')\n    trip_duration = (end_date - start_date).days + 1\n\n    return trip_duration\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    # Iterate from the smallest possible number with 9 in the units place\n    # to the largest possible number where the condition can still hold.\n    # Since the new number is four times the special number, \n    # the special number needs to be at most 4 digits long (including the 9 at units place).\n    for num in range(109, 10000, 10):  # Increment by 10 to ensure 9 in the unit place.\n        new_num = int(str(num)[-1] + str(num)[:-1])  # Move the last digit to the front.\n        if new_num == 4 * num:\n            return num  # Return the first matching special number\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n    \n    # Eddie is always on the left end, so there's only 1 way to place Eddie\n    places_for_eddie = 1\n    \n    # Avril can only stand next to Eddie, which means there are only 2 positions for Avril (Eddie's right)\n    places_for_avril = 2\n    \n    # The remaining 5 students can be arranged in any order, which is 5!\n    arrangements_of_others = factorial(5)\n    \n    # Use the principle of multiplication\n    total_arrangements = places_for_eddie * places_for_avril * arrangements_of_others\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Logic based on Pigeonhole Principle\n    # Dilly can pick up to 3 blue gloves without guaranteeing a match (2 left and 1 right)\n    # Dilly can also pick up to 4 green gloves without guaranteeing a match (2 left and 2 right)\n    # To ensure a matching pair, Dilly needs to pick at least one more glove\n    # That means Dilly could pick 3 blue + 4 green gloves and still not have a matching pair\n    # Picking one more glove (the 8th) after that will assure a matching pair\n    return 8\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    increase_percentage = 0.45\n\n    new_price = original_price * (1 + increase_percentage)\n\n    return new_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]\n    total_sum = 6 * 8\n    missing_number = total_sum - sum(known_numbers)\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    circumference = 300\n    initial_hole_interval = 3\n    new_hole_interval = 5\n\n    # Determine the remaining circumference after the 30th hole.\n    # The 30th hole is at position number 29 (starting from 0), \n    # Hence, we multiply 29 by the initial interval (3m).\n    distance_dug = initial_hole_interval * 29\n\n    # Remaining circumference to dig\n    remaining_circumference = circumference - distance_dug\n\n    # Calculate the number of new holes needed with 5m interval\n    # Note that we subtract the already present 30th hole (-1)\n    # since it does not need to be redug.\n    additional_holes_needed = int(remaining_circumference / new_hole_interval) - 1\n\n    return additional_holes_needed\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    # There are two parts of the journey, before and after stepping on the 5th step.\n    # Number of ways to reach the 5th step from the start (4 steps):\n    ways_to_5th = fibonacci(5)\n    \n    # Number of ways to go from the 5th step to the 10th step (5 steps):\n    ways_from_5th_to_10th = fibonacci(6)\n    \n    # Total number of ways is the product of the two possibilities.\n    return ways_to_5th * ways_from_5th_to_10th\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    types_of_pasta = 2\n    types_of_sauces = 3\n    types_of_toppings = 2\n\n    combinations = types_of_pasta * types_of_sauces * types_of_toppings\n    return combinations\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n\n    equation = Eq((number + 3) / 4, 12)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for i in range(1, 51):\n        if '3' in str(i):\n            erased_sum += i\n    return erased_sum\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "from itertools import permutations\n\ndef evaluate_expression(brackets):\n    expression = \"15+5*5+15-6+7\"\n    # Insert brackets in the specified positions\n    for i, pos in enumerate(brackets):\n        expression = expression[:pos + i*2] + \"(\" + expression[pos + i*2:]\n        expression = expression[:pos + i*2 + 4] + \")\" + expression[pos + i*2 + 4:]\n    return eval(expression)\n\ndef solution():\n    # Possible positions for brackets\n    # We exclude positions after operators and the last digit\n    positions = [0, 2, 4, 6, 8, 10]\n    max_value = float('-inf')\n    # Generate all permutations of positions for two pairs of brackets\n    for brackets in permutations(positions, 4):\n        # Ensure the first bracket opens before the second one\n        if brackets[0] < brackets[2]:\n            value = evaluate_expression(brackets)\n            if value > max_value:\n                max_value = value\n\n    return max_value\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 792\n    pages_with_one_digit = 9\n    pages_with_two_digits = 90\n    pages_with_three_digits = 900\n\n    # calculating number of digits used if all numbers are less than 100\n    digits_for_one_and_two_digit_pages = pages_with_one_digit * 1 + pages_with_two_digits * 2\n\n    # subtract that number from total digits, the rest are used by three digit page numbers\n    remaining_digits_for_three_digit_pages = total_digits - digits_for_one_and_two_digit_pages\n\n    # calculate the number of three digit pages\n    pages_with_three_digits = remaining_digits_for_three_digit_pages // 3\n\n    # add all pages\n    ans = pages_with_one_digit + pages_with_two_digits + pages_with_three_digits\n    return ans\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_average = 80\n    billy_average_first_four = 89\n    billy_target_average = ivan_average + 10\n\n    # Total score Ivan has after five assignments\n    ivan_total = ivan_average * 5\n\n    # Total score Billy has after four assignments\n    billy_total_first_four = billy_average_first_four * 4\n\n    # Total score Billy aims to have after five assignments\n    billy_target_total = billy_target_average * 5\n\n    # Score Billy needs in the fifth assignment\n    billy_fifth_score = billy_target_total - billy_total_first_four\n\n    return billy_fifth_score\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    needed_pipes = total_length // pipe_length\n    if total_length % pipe_length != 0:\n        needed_pipes += 1\n\n    return needed_pipes\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # The sum of 1000 can be achieved by any two unique whole numbers\n    # such that one number is less than 1000 and the other is 1000 minus the first number.\n    \n    # However, using two whole numbers we need to consider pairs like (1, 999) and (999, 1)\n    # as the same because order does not matter when considering the sum.\n\n    # Since the problem specifies two \"whole numbers\", we acknowledge the possibility of zero as a valid number.\n\n    # Therefore, we need to consider pairs from (0, 1000), (1, 999), ..., (500, 500)\n    # Once we reach (500, 500), any further increment would only repeat the previous pairs in the reverse order.\n   \n    # The count of such unique pairs is equal to 500 + 1 (to include the pair (0, 1000))\n    count = 500 + 1\n\n    return count\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    nth_term = 7\n    value_at_nth = 39\n    common_difference = 44 - 39\n\n    value_at_100th = value_at_nth + (100 - nth_term) * common_difference\n\n    return value_at_100th\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize the number\n    factors = factorint(1260)\n    \n    # To make 1260 * m a perfect square, \n    # each prime factor's exponent in the prime factorization of m \n    # needs to make the combined exponents even.\n    m = 1\n    for prime, exp in factors.items():\n        if exp % 2 != 0:        # Check if the exponent is odd\n            m *= prime          # Multiply m by the prime factor\n\n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    number_of_peaches = 45\n    number_of_apples = 5 + 2 * number_of_peaches\n    return number_of_apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for i in range(1, 28):\n        # Check the remainder when i is divided by 4 and 7\n        if i % 4 == 3 and i % 7 == 3:\n            # Since we want to find the remainder when it's divided by 28\n            # we return i % 28\n            return i % 28\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm = 8 * 11  # Least common multiple of 8 and 11\n    for num in range(10, 100):  # Possible two-digit numbers\n        if num % 8 == 6 and num % 11 == 6:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # The last digit in any number is determined by the last digit of its power.\n    # In this case, we only need to focus on the last digit of 9 raised to any power.\n    # The pattern of the last digit of powers of 9 is: 9, 1, 9, 1, 9, ...\n    # Therefore, the last digit of 999^99 is the same as the last digit of 9^99.\n    \n    # The cycle length for the last digit of powers of 9 is 2.\n    cycle_length = 2\n    # We are interested in the last digit of 9^99\n    power = 99\n    # Calculate the remainder of the power divided by the cycle length\n    remainder = power % cycle_length\n    \n    # If the remainder is 0, the last digit is the same as 9^2, which is 1.\n    # If the remainder is 1, the last digit is the same as 9^1, which is 9.\n    # Since the power 99 is odd, its remainder when divided by 2 will be 1.\n    # Hence, the last digit will be 9 (the last digit of 9^1).\n    if remainder == 0:\n        last_digit = 1\n    else:\n        last_digit = 9\n    \n    return last_digit\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    \n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    return total_spent\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of the 5 other ponies\n    x = symbols('x')\n\n    # Initially, average value of each stable was (x + 250000) / 6\n    # When Rein Beau moved, the average value of the large stable (with 4 ponies) became (x + 250000 - 250000) / 4 + 10000,\n    # And the average value of the small stable (with 2 ponies) became 250000 / 2 + 10000\n\n    # Set up the equation based on the above information:\n    equation = Eq((x + 250000) / 6 + 10000, (x) / 4 + 10000)\n    \n    # Now solve for x\n    total_value = solve(equation, x)\n\n    # The total value of all six ponies is x + the value of Rein Beau\n    total_value_of_ponies = total_value[0] + 250000\n\n    return total_value_of_ponies\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    # Reverse the last step: add 50 to the result\n    reverse_step_5 = result + 50\n    # Since the day of birth was added twice, find the remainder when divided by 100\n    day_of_birth = reverse_step_5 % 100\n    # Undo the addition of the day (twice) and the multiplication by 50\n    reverse_step_3_and_4 = (reverse_step_5 - 2 * day_of_birth) // 50\n    # Undo the addition of 1\n    reverse_step_2 = reverse_step_3_and_4 - 1\n    # Undo the multiplication by 4 to get the month of birth\n    month_of_birth = reverse_step_2 // 4\n    \n    return (month_of_birth, day_of_birth)\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    given_away = 9\n\n    remaining_stickers = (animal_stickers + fruit_stickers) - given_away\n\n    return remaining_stickers\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    return pow(2, 2015, 3)\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    # Treat the 4 students who insist on standing together as one unit.\n    # So we have 5 units to arrange (4 individual students + 1 group of 4 students)\n    units_arrangement = factorial(5)\n    \n    # Those 4 students who want to stand together can be arranged among themselves in 4! ways\n    group_arrangement = factorial(4)\n    \n    # Multiply the two to get the total number of arrangements\n    total_arrangements = units_arrangement * group_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    mixture = sugar + water\n    concentration = (sugar / mixture) * 100\n    return concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    for x in range(1, 60):\n        if x + (x + 1) + (x + 2) == 60:\n            return x + 2\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let's denote the number of gold medals as g and silver medals as s.\n    # We have two equations based on the problem statement:\n    # 5g + 4s = 331 (total points for medals)\n    # g + s = 80 (total number of medals)\n    \n    # We will solve these equations to find the value of g (the number of gold medals).\n    \n    # Now, let's express s in terms of g from the second equation: s = 80 - g\n    # Substitute s in the first equation: 5g + 4(80 - g) = 331\n    \n    for g in range(80 + 1):  # We iterate from 0 to 80 because the number of gold medals cannot exceed the total number of medals.\n        s = 80 - g          # Calculate the number of silver medals based on the current number of gold medals.\n        if 5 * g + 4 * s == 331:  # Check if the total points match the given total.\n            return g  # Return the number of gold medals when the points match.\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_lamb = 8.70\n    weight_lamb = 7\n    cost_beef = 9.40\n    weight_beef = 30\n\n    total_cost = (cost_lamb * weight_lamb) + (cost_beef * weight_beef)\n\n    return total_cost\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m denote the work done by one master per day, and a denote the work done by one apprentice per day.\n    m, a = symbols('m a')\n\n    # Equation for 1 master and 3 apprentices working for 4 days to complete the task: 4*(1*m + 3*a) = 1 task\n    equation1 = Eq(4 * (m + 3 * a), 1)\n\n    # Equation for 2 masters and 1 apprentice working for 3 days to complete the task: 3*(2*m + 1*a) = 1 task\n    equation2 = Eq(3 * (2 * m + a), 1)\n\n    # Solve the system of equations to find the work rates for m and a.\n    solutions = solve((equation1, equation2), (m, a))\n\n    # From the solutions, calculate the time it will take 1 apprentice to complete the task alone, which is 1 / a.\n    time_for_apprentice_alone = 1 / solutions[a]\n\n    return time_for_apprentice_alone\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    women = 80\n    fraction_men = 5 / 8\n    fraction_children = 1 / 3\n\n    # Let x be the total number of spectators\n    # children = (1/3) * x\n    # men = (5/8) * (x - (1/3) * x) = (5/8) * (2/3) * x\n    # women = x - children - men\n    # 80 = x - (1/3) * x - (5/8) * (2/3) * x\n    # 80 = (1 - 1/3 - 5/8 * 2/3) * x\n    # 80 = (24/24 - 8/24 - 10/24) * x\n    # 80 = (24 - 8 - 10) / 24 * x\n    # 80 = 6/24 * x\n    # x = 80 * (24/6)\n    # x = 80 * 4\n    x = women * (24 / (24 - 8 - 10))\n\n    return int(x)\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # From the examples given, it seems that when a★b, if a < b then a★b = b,\n    # and if a > b, then a★b = a + b. So let's apply this logic to 11★10.\n    a = 11\n    b = 10\n    if a < b:\n        ans = b\n    else:\n        ans = a + b\n    return ans\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    elephant_position_from_left = 10\n    rabbit_position_from_right = 9\n    dolls_between = 5\n    \n    total_dolls = elephant_position_from_left + rabbit_position_from_right + dolls_between - 1\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * (11 / 52 / (2 + 3 / 4) * (4.3 - 1.8)) * 26\n    return result\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    for girls_side_length in range(1, 100):\n        boys_side_length = girls_side_length + 2\n        boys = boys_side_length ** 2 - (girls_side_length ** 2)\n        girls = girls_side_length ** 2\n        if boys - girls == 32:\n            total_students = boys + girls\n            return total_students\n            \nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two variables\n    original_roses, months = symbols('original_roses months', integer=True)\n    \n    # Two equations based on the problem statement\n    total_flowers = Eq(original_roses + (300 - original_roses), 300)\n    future_flowers = Eq(original_roses + months, 280)\n    additional_daisies = Eq((300 - original_roses) + months, 180)\n\n    # Solve the system of equations\n    solutions = solve((total_flowers, future_flowers, additional_daisies), (original_roses, months))\n\n    # We want to know how many roses were there originally\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n    \n    prime_numbers = list(primerange(50, 61))\n    sum_of_primes = sum(prime_numbers)\n    \n    return sum_of_primes\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    nth_term = 102\n    \n    # Calculate the common difference\n    common_diff = (fifteenth_term - tenth_term) / (15 - 10)\n    \n    # Calculate the first term\n    first_term = tenth_term - (10 - 1) * common_diff\n    \n    # Calculate the nth term\n    target_term = first_term + (nth_term - 1) * common_diff\n    \n    return target_term\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    \n    non_english_books = total_books - english_books\n    comics = non_english_books // 3\n\n    return comics\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_litres = (coffee_litres * total_ratio) / coffee_ratio\n\n    return latte_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    total_shoots = 10\n    accurate_shoots = 6\n    lose_shoots = 4\n    score_per_accurate_shoot = 5\n    total_score = accurate_shoots * score_per_accurate_shoot\n    average_score = total_score / total_shoots\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('0')\n    return count\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    from fractions import Fraction\n\n    result = (Fraction(1, 30) + Fraction(1, 6)) / Fraction(2, 25) + (2 - Fraction(2, 3)) / Fraction(8, 3)\n    ans = result.simplify()\n\n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    # There's a one-to-one correspondence between splitting a number n into k parts\n    # and putting k-1 separators in the n-1 positions between the numbers 1 and n.\n    # This is a combinations problem, where we choose k-1 positions from n-1 possibilities.\n    \n    n = 8\n    count = 0\n    for k in range(2, n):  # Loop over possible number of parts (at least two parts)\n        count += math.comb(n - 1, k - 1)\n    return count\n\nimport math\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the mass of one apple and one orange\n    apple, orange = symbols('apple orange')\n\n    # Set up equations based on the given information\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    # Extract the solution for the mass of one orange\n    orange_mass = solutions[orange]\n\n    return orange_mass\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253  # in meters\n    tunnel_length = 669  # in meters\n    speed = 104  # in m/s\n\n    # The entire train will be in the tunnel when its end just enters the tunnel until its start just leaves the tunnel.\n    # So, the total distance to be covered is the length of the train plus the length of the tunnel.\n    total_distance = train_length + tunnel_length\n\n    # Time taken to pass through the tunnel completely is the total distance divided by the speed.\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    men_with_bow_ties = 18\n    men_with_spectacles = 23\n\n    # The minimum number of men that could wear both bow ties and spectacles \n    # is the sum of both minus the total (to account for overlap), this \n    # will give us the maximum number of men not wearing either.\n    men_with_both = men_with_bow_ties + men_with_spectacles - total_men\n\n    # The greatest number of men that do not wear bow ties and are not wearing spectacles:\n    ans = total_men - (men_with_bow_ties + men_with_spectacles - men_with_both)\n    \n    return ans\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Given 50 apples distributed to 8 children, we need to find the least number of\n    # apples the child who gets the most can receive when each child has a different number.\n    \n    # We can assign at least 1 apple to each child.\n    remaining_apples = 50 - 8\n    \n    # Since each child must have a different number of apples, we can assign the next\n    # minimum number of apples to the other children.\n    # That is: 1, 2, 3, 4, 5, 6, 7, ...\n    \n    # We iterate in ascending order to distribute the apples. When we reach the last\n    # child, that child will have the least number of apples (compared to giving more\n    # apples to earlier children), which fulfills the extreme value condition.\n    for i in range(7):\n        remaining_apples -= i\n    \n    # The remaining apples now is the least number that the child with the most apples\n    # can have.\n    return remaining_apples\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    return -7 - 4\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    base_amount = 350\n    twenty_percent_of_base = 20 / 100 * base_amount\n    fifty_percent_of_twenty_percent = 50 / 100 * twenty_percent_of_base\n    return fifty_percent_of_twenty_percent\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, green = symbols('blue red green')\n\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    return (1/3) * 414\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Start by assigning the minimum number of apples to each child\n    apples = [1, 2, 3, 4] # The first four children get 1, 2, 3 and 4 apples respectively\n    remaining_apples = 19 - sum(apples)  # Calculate the remaining apples for the fifth child\n    \n    # Since no two children can get the same number of apples, the fifth child gets all remaining\n    # The number of apples the fifth child receives is the largest possible one\n    return remaining_apples\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n\n    # Ali and Bala act as a single unit, plus Charles and Ella makes 3 \"units\"\n    # Dan is fixed at the farthest left, so we arrange the 3 \"units\"\n    units_permutations = factorial(3)\n    \n    # Ali and Bala can arrange themselves in 2! ways.\n    ali_bala_permutations = factorial(2)\n    \n    # Total arrangements = units_permutations * ali_bala_permutations\n    return units_permutations * ali_bala_permutations\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Owen -> Oscar: 3 fishes = 2 rabbits\n    # Oscar -> Dennis: 3 rabbits = 4 packs of wheat\n    # To simplify the ratio between fishes and packs of wheat,\n    # we'll make the number of rabbits the same in both ratios by finding the least common multiple\n    \n    # For 2 rabbits to turn into 3 rabbits, we multiply by 1.5\n    # So we also need to multiply the number of fishes by 1.5 to keep the ratio equivalent\n    owen_to_oscar_fishes_for_three_rabbits = 3 * 1.5\n    \n    # Now we set the resulting number of fishes equal to 4 packs of wheat\n    # Owen (for 3 rabbits equivalent) -> Dennis: 4.5 fishes = 4 packs of wheat\n    \n    # We need to find out how many fishes for 8 packs of wheat\n    owen_to_dennis_fishes_for_eight_packs = (8 / 4) * 4.5\n\n    return owen_to_dennis_fishes_for_eight_packs\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd as find_gcd\n\ndef solution():\n    num1 = 16\n    num2 = 36\n\n    hcf = find_gcd(num1, num2)\n\n    return hcf\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 140 + 1):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    correct_diff = None\n    for tens_subtrahend in range(10):\n        for ones_subtrahend in range(10):\n            for tens_minuend in range(10):\n                for ones_minuend in range(10):\n                    mistook_subtrahend = tens_subtrahend * 10 + 3\n                    correct_subtrahend = tens_subtrahend * 10 + 2\n                    minuend = tens_minuend * 10 + ones_minuend\n                    if minuend - mistook_subtrahend == 36 and tens_minuend == 5:\n                        correct_diff = minuend - correct_subtrahend\n                        return correct_diff\n    return correct_diff\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # The worst case is taking all balls of the largest amount (red balls) and one less than the number of balls of the second largest amount (white balls).\n    # Since we want 3 different coloured balls, we then draw one more which will ensure we have the third colour (yellow).\n\n    # Total red balls\n    red_balls = 15\n    # Total white balls\n    white_balls = 9\n    # One less than the number of white balls\n    white_balls_minus_one = white_balls - 1\n\n    # We now take all the red balls and one less than the white balls. Any ball we take now will be either red, white, or yellow, ensuring that we have all three colours.\n    balls_drawn = red_balls + white_balls_minus_one + 1\n\n    return balls_drawn\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    # This is an arithmetic sequence where the first term is 2, the common difference is 3.\n    # The last term can be identified from the sequence as 35.\n    # The sum of an arithmetic sequence is given by the formula:\n    # Sum = n/2 * (first_term + last_term), where n is the number of terms.\n\n    # Calculate the number of terms 'n'\n    first_term = 2\n    last_term = 35\n    common_difference = 3\n    n = ((last_term - first_term) // common_difference) + 1\n\n    # Calculate the sum\n    sum_of_sequence = n/2 * (first_term + last_term)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n\n    average_students_per_class = total_students / num_classes\n\n    return average_students_per_class\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_for_fences = 3.2\n    used_for_woodpile = 6.5\n\n    remaining_length = total_length - (used_for_fences + used_for_woodpile)\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [2, 7, 8]\n    num_permutations = len(list(permutations(digits, 3)))\n    \n    return num_permutations\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n  \n    # When Ellen gives away 12 sweets\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n    # When Lenny gives away 12 sweets\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n  \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ellen, lenny))\n  \n    # Since we want the total number of sweets\n    total_sweets = solutions[ellen] + solutions[lenny]\n  \n    return total_sweets\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    tax_paid = 10000\n    income = 120000\n    tax_first_50000 = 0.06 * 50000\n    tax_rest = 0.06 * (income - 50000) + T * (income - 50000) / 100\n\n    equation = Eq(tax_first_50000 + tax_rest, tax_paid)\n\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    digits.sort()\n\n    # Create the smallest and second smallest numbers for the first number\n    first_number = digits[1] * 10000 + digits[2] * 1000 + digits[3] * 100 + digits[4] * 10 + digits[5]\n\n    # Create the largest and second largest numbers for the second number\n    second_number = digits[9] * 10000 + digits[8] * 1000 + digits[7] * 100 + digits[6] * 10 + digits[0]\n\n    # Calculate the difference\n    difference = second_number - first_number\n\n    return difference\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    total_ways = 0\n    presents = range(1, 8)  # Represent 7 different presents\n\n    # Car = 1, Puzzle = 2, Calculator = 3, Other four presents = 4, 5, 6, 7\n    # Richard wants 1 or 2\n    # Kevin wants 1 or 3\n\n    for perm in permutations(presents):\n        if (perm[0] == 1 or perm[0] == 2) and (perm[1] == 1 or perm[1] == 3):\n            continue  # Both Richard and Kevin can't get the toy car at the same time\n        if perm[0] in [1, 2] or perm[1] in [1, 3]:\n            total_ways += 1  # Valid permutation\n\n    return total_ways\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200\n    tunnel_length = 500\n    speed = 10\n\n    duration = (train_length + tunnel_length) / speed\n\n    return duration\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    buzz_weight = symbols('buzz_weight')\n    jessie_weight = symbols('jessie_weight')\n\n    equation1 = Eq(buzz_weight, 3 * jessie_weight)\n    equation2 = Eq(buzz_weight - jessie_weight, 450)\n    \n    solutions = solve((equation1, equation2), (buzz_weight, jessie_weight))\n\n    return solutions[buzz_weight]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49\n    pounds_bought = 2\n    total_cost_in_pence = cost_per_pound * pounds_bought\n    money_given_in_pence = 100\n\n    change_in_pence = money_given_in_pence - total_cost_in_pence\n    return change_in_pence\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    while True:\n        # Check if all numbers in the sequence are prime\n        if isprime(n) and isprime(n + 4) and isprime(n + 6) and isprime(n + 132) and isprime(n + 250):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the first rabbit\n    first_rabbit = symbols('first_rabbit')\n\n    # Define the expressions for the second and third rabbits\n    second_rabbit = first_rabbit + 2\n    third_rabbit = (second_rabbit - 0.80)\n\n    # Define the equation based on the total cost\n    total_cost_equation = Eq(first_rabbit + second_rabbit + third_rabbit, 19.70)\n\n    # Solve the equation\n    solution = solve(total_cost_equation, first_rabbit)\n\n    # Get the cost of the first rabbit\n    first_rabbit_cost = solution[first_rabbit]\n\n    return first_rabbit_cost\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200  # total weight of the sugar solution in grams\n    concentration = 0.15  # sugar concentration as a decimal\n\n    amount_sugar = total_weight * concentration  # calculate the amount of sugar in grams\n\n    return amount_sugar\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    speed_jack = 15  # Jack's speed in km/h\n    speed_rose = 10  # Rose's speed in km/h\n    meeting_time = 10  # Time taken to meet in hours\n\n    # The relative speed at which Jack is approaching Rose\n    relative_speed = speed_jack - speed_rose  # in km/h\n\n    # Distance between Town A and Town B is the relative speed times the time it took for Jack to reach Rose\n    distance = relative_speed * meeting_time\n\n    return distance\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((2*i+2)**2 - (2*i)**2 for i in range(1, 1010))\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 4.6 * x - 35 / 100 - 0.57\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    limit = 5000\n    multiples_of_7 = limit // 7\n    multiples_of_13 = limit // 13\n    multiples_of_7_and_13 = limit // (7 * 13)\n\n    ans = multiples_of_7 + multiples_of_13 - multiples_of_7_and_13\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    num = 48739\n    remainder = num % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total = factorial(7) // (factorial(3) * factorial(2) * factorial(2))\n    with_adjacent_S = 0  # Initialize the count of arrangements with adjacent S's\n  \n    for perm in permutations(\"SUCCESS\"):\n        if all(perm[i] != 'S' or perm[i+1] != 'S' for i in range(len(perm) - 1)):\n            with_adjacent_S += 1\n\n    return with_adjacent_S\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n    \n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # Let x be the number of days David worked on the journal alone\n    # Hence, Emma worked (14 - x) days on the journal\n    # David's work rate is 1/10 per day\n    # Emma's work rate is 1/18 per day\n\n    # David's work + Emma's work should equal to 1 (the whole work)\n    # (x/10) + ((14-x)/18) = 1\n\n    # Solve for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x / 10) + ((14 - x) / 18), 1)\n    solution = solve(equation, x)\n\n    # Calculate the number of days Emma worked on the journal\n    emma_days = 14 - solution[0]\n\n    return emma_days\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    tshirts_bought = 138\n    money_left = 56\n    total_tshirts = 145\n\n    # Calculate the price of one T-shirt\n    price_per_shirt = money_left / (total_tshirts - tshirts_bought)\n\n    # Calculate the total money Josephine had at first\n    total_money = price_per_shirt * total_tshirts\n\n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n**2 * (n + 1)**2) // 4\n    sum_of_integers = (n * (n + 1)) // 2\n    ans = sum_of_cubes // sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    total_heights = 132 - 124 + 1\n    class_size = total_heights + 3  # Add 3 to ensure at least 4 students of the same height\n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay = 6.50\n    increase_percent = 12 / 100\n    new_pay = original_pay * (1 + increase_percent)\n    return new_pay\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # She needs 12 minutes to cut a piece of wood into 5 sections\n    # This means she makes 4 cuts, since 5 sections result from 4 cuts\n    cuts_for_5_sections = 4\n    \n    # Time taken for each cut is then\n    time_per_cut = 12 / cuts_for_5_sections\n    \n    # For cutting the piece of wood 5 times, she needs to make 5 cuts\n    cuts_needed = 5\n    \n    # Total time to make 5 cuts is\n    time_needed = cuts_needed * time_per_cut\n    \n    return time_needed\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_amount_in_pence = 126  # £1.26 is 126 pence\n\n    # Let the number of each coin be x\n    # 2p * x + 5p * x = 126\n    # x(2 + 5) = 126\n    # 7x = 126\n    # x = 126 / 7\n    x = total_amount_in_pence / 7\n    \n    # Total number of coins is 3x (since there are three equal sets of coins: 2p, 5p, and 5p)\n    num_coins = 3 * x\n\n    return int(num_coins)\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    base = 3\n    exponent = 2009\n    \n    # Calculate the ones digit of base to the power of exponent\n    ones_digit = (base ** exponent) % 10\n    \n    return ones_digit\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # n is the number of terms, avg is the average value, and d is the common difference for an arithmetic sequence of even numbers\n    n = 14\n    avg = 119\n    d = 2\n    \n    # In an arithmetic sequence of even numbers, the average can also be seen as the 'middle' term\n    # If there are 14 numbers, the seventh and eighth term will surround the average value\n    # The first term (smallest number among the 14 numbers) is 6 numbers away from the seventh term\n    \n    # Middle term (7th term) = avg - (difference between consecutive terms) * (number of terms from first to middle)\n    first_term = avg - ((n // 2) - 1) * d\n\n    return first_term\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    num = 2 * 5  # The number must be a multiple of 2 (even) and 5, so let's start with 10\n    while True:\n        if (num ** 0.5).is_integer():  # Check if the number is a perfect square\n            return num\n        num += 2 * 5  # Increase by the least common multiple of 2 and 5 to maintain conditions\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    senior_discount = 0.20\n    \n    child_ticket_cost = 30\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n    \n    return senior_ticket_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "def solution():\n    from itertools import combinations_with_replacement\n\n    # There are 20 books and 4 - 1 = 3 dividers to separate books among kids\n    # We are using combinations with replacement because books are indistinguishable\n    # and dividers are distinguishable (since they represent unique kids)\n    # We need to choose 3 positions (dividers) out of 20 + 3\n    total_positions = 20 + 4 - 1\n    dividers = 4 - 1\n\n    return len(list(combinations_with_replacement(range(total_positions), dividers)))\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_initial = 3\n    days_initial = 30\n    men_final = 2\n\n    work_done_initial = men_initial * days_initial\n    days_final = work_done_initial / men_final\n\n    return days_final\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for Will's current age\n    will_age = symbols('will_age')\n    \n    # Equation Will's age in 8 years will be 4 times his age 4 years ago\n    equation = Eq(will_age + 8, 4 * (will_age - 4))\n    \n    # Solve the equation\n    solution = solve(equation, will_age)\n    \n    # Will's current age is the only solution to the equation\n    return solution[0]\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    # Let the total number of people be x\n    adults = (2/5) * x\n\n    # Remaining people after adults, which are children\n    children = x - adults\n\n    # Number of boys is 5/9 of the children\n    boys = (5/9) * children\n\n    # Given that the number of girls is 36\n    girls = 36\n\n    # The number of children is sum of boys and girls\n    children = boys + girls\n\n    # Substitute children back into the second equation\n    # children = x - adults\n    # boys + girls = x - adults\n    # (5/9) * (x - (2/5)*x) + 36 = x - (2/5)*x\n    # Now solve the equation for x\n\n    # Since we don't know x yet, we can use sympy to solve for it\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # Create the equation\n    equation = Eq((5/9) * (x - (2/5)*x) + 36, x - (2/5)*x)\n\n    # Solve the equation\n    total_people = solve(equation, x)[0]\n\n    return total_people\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    ways = trains + cars + boats\n\n    return ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    num_days = total_pages / pages_per_day\n    return int(num_days)  # Casting to int in case division returns a float\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Initial conditions\n    total_books = 30\n    minimum_books_per_kid = 2\n    num_kids = 5\n\n    # First, give each kid two books\n    books_remaining = total_books - (minimum_books_per_kid * num_kids)\n\n    # Calculate combinations with repetition for remaining books and kids\n    ans = comb(books_remaining + num_kids - 1, books_remaining)\n\n    return ans\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 0.4 * mike)\n    equation3 = Eq(mike - mason, 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup = solutions[mike] + solutions[mason] + solutions[chewy]\n    return total_soup / 1000  # converting to litres\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000  # Initial amount\n    rate = 0.06  # Interest rate\n    time = 2  # Number of years\n\n    # Compound interest formula A = P * (1 + r)^t\n    balance = principal * ((1 + rate) ** time)\n\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n\n    return likes_neither\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')  # Define the symbols for a jug and a cup\n\n    equation1 = Eq(4 * jug + 5 * cup, 85)  # 4 jugs and 5 cups cost $85\n    equation2 = Eq(2 * jug + 2 * cup, 40)  # 2 jugs and 2 cups cost $40\n\n    solutions = solve((equation1, equation2), (jug, cup))  # Solve the equations\n\n    return solutions[cup]  # We want the cost of one cup\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n\n    total_chairs = classrooms * chairs_per_classroom\n\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    x = symbols('x')\n    inequality = Eq((x + 3) / (2 * x + 5), 0.505)\n    result = solve(inequality, x)\n    max_wins_before_weekend = int(result[0])\n\n    return max_wins_before_weekend\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum(range(2, 89, 4))\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    total_pupils = room_a + room_b\n    pupils_each = total_pupils // 2  # divide by 2 because we want to equalize both rooms\n    return pupils_each\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    operations = ['+', '-', '*', '/']\n    fractions = [Fraction(1, 2), Fraction(1, 9), Fraction(1, 3), Fraction(1, 8), \n                 Fraction(1, 4), Fraction(1, 7), Fraction(1, 5), Fraction(1, 6)]\n    max_sum = 0\n    second_largest_term = None\n    \n    for ops in permutations(operations, 4):\n        terms = [\n            eval(f\"({fractions[0]}{ops[0]}{fractions[1]})\"),\n            eval(f\"({fractions[2]}{ops[1]}{fractions[3]})\"),\n            eval(f\"({fractions[4]}{ops[2]}{fractions[5]})\"),\n            eval(f\"({fractions[6]}{ops[3]}{fractions[7]})\")\n        ]\n        total = sum(terms)\n        if total > max_sum:\n            max_sum = total\n            second_largest_term = sorted(terms)[2]  # get the second largest term\n    \n    A, B = second_largest_term.numerator, second_largest_term.denominator\n    return A + B\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # The coin denominations available in the UK\n    coins = [200, 100, 50, 20, 10, 5, 2, 1] # pence\n\n    # Susan's bus fare\n    fare = 44  # pence\n\n    # Start with the smallest number of coins that can change hands\n    min_coins = 0\n\n    # If Susan pays with a coin larger than her fare,\n    # the number of coins that change hands is always 2 (her coin and the change).\n    # So we start with the smallest coin larger than the fare and include larger coins.\n    for coin in coins:\n        if coin > fare:\n            change = coin - fare\n            # Calculate the number of coins needed for the change.\n            for c in coins:\n                while change >= c:\n                    change -= c\n                    min_coins += 1\n            # We found the smallest number of coins, break the loop\n            break\n\n    # The total number of coins that change hands includes Susan's payment (1 coin)\n    min_coins += 1\n\n    return min_coins\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    left = 20.35\n    \n    initial_amount = spent + left\n    \n    return initial_amount\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # 12 points on a circle, forming a right angled triangle requires one side to be the diameter.\n    # The other two points can be any other distinct points on the circle.\n    # Every pair of points defines one right angled triangle with the point opposite the circle forming the right angle.\n    # Since the circle has 12 points, there are 6 diameters possible.\n    # For each diameter, there are 10 remaining points to choose from for the remaining two points of the triangle.\n    # So for each diameter, we can form 10 * 9 / 2 triangles, dividing by 2 because order doesn't matter for these two points.\n    number_of_diameters = 6\n    combinations_of_points = (10 * 9) // 2\n    total_right_angled_triangles = number_of_diameters * combinations_of_points\n    \n    return total_right_angled_triangles\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    # Given conditions\n    tenth_term = 23\n    fifteenth_term = 38\n    position_tenth = 10\n    position_fifteenth = 15\n    \n    # Find the common difference between terms\n    common_difference = (fifteenth_term - tenth_term) / (position_fifteenth - position_tenth)\n    \n    # Calculate the 12th term\n    twelveth_term = tenth_term + (12 - position_tenth) * common_difference\n    \n    return int(twelveth_term)\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    sequence = [(1, 2), (2, 4), (3, 7), (4, 11), (5, 16), (6, 22), (7, 29), (1, 29)]\n    ans = sum(n / (a * b) for n, (a, b) in enumerate(sequence, start=1))\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n    a, b, c = 24, 36, 42\n    ans = gcd(gcd(a, b), c)\n    return ans\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(200, 0, -1):\n        sum += sign * i\n        # We have a pattern of two additions followed by two subtractions.\n        # We switch sign after every two numbers.\n        if i % 2 == 1:\n            sign *= -1\n    return sum\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_lunch_cost = 4.36\n    num_days = 5\n\n    total_cost = children * daily_lunch_cost * num_days\n\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    for questions_correct in range(21):\n        questions_incorrect = 20 - questions_correct\n        score = questions_correct * 5 - questions_incorrect * 3\n        if score == 76:\n            return questions_correct\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    result = (3/8) * 16\n    return result\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n    \n    # marked price is 20% above cost price\n    marked_price = 1.20 * cost_price\n    # sold price is 90% of the selling (marked) price\n    sold_price = 0.90 * marked_price\n    # profit is the sold price minus cost price\n    profit = Eq(sold_price - cost_price, 120)\n\n    # solve the equations for the cost price\n    solution = solve(profit, (cost_price))\n\n    return solution[cost_price]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    total_people = 38\n\n    total_cost = cost_per_person * total_people\n\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2*x + 5)\n\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    ways_diff_colors = factorial(4)  # Four different colored socks\n    ways_two_pairs = factorial(4) / (factorial(2) * factorial(2))  # Two different colored pairs\n    return int(ways_diff_colors), int(ways_two_pairs)\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    num1 = 13.8\n    num2 = 18.6\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    # We will try every possible digit for a and b\n    for a in range(10):\n        for b in range(10):\n            # Constructing the numbers based on the given equation\n            ab = a * 10 + b\n            ba = b * 10 + a\n            aab = a * 100 + a * 10 + b\n            # Checking if the constructed numbers satisfy the equation\n            if ab + ba + b == aab:\n                return a + b  # If they satisfy the equation, return the sum a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "from math import comb\n\ndef solution():\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n\n    return num_handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    ans = comb(num_points, num_vertices)\n    return ans\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To guarantee a win, Anthea must ensure that she leaves a multiple of 4 for Ben.\n    # This allows her to always maintain a multiple of 4 after Ben's turn by choosing 1, 2, or 3 appropriately\n    total_apples = 18\n\n    # If Anthea takes `x` apples on her first turn, she will leave `total_apples - x` apples on the table.\n    # She needs to leave Ben with a total number of apples that is a multiple of 4.\n    # Therefore, if Anthea takes `x` apples, (total_apples - x) % 4 should be 0.\n    \n    # Check which `x` value satisfies this condition\n    for x in range(1, 4):\n        if (total_apples - x) % 4 == 0:\n            ans = x  # Anthea should take this amount to win\n            break\n\n    return ans\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    \n    # 3 tables have the same mass as 4 chairs\n    equation1 = Eq(3 * table, 4 * chair)\n    # A table is 2kg heavier than a chair\n    equation2 = Eq(table, chair + 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    taller_than_190 = 750\n    between_180_and_190 = total_taller_than_180 - taller_than_190\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial\n    \n    # Judy can stand at 2 different spots (either end)\n    judy_options = 2\n    \n    # The remaining 5 friends can stand in any order, which is a permutation of 5\n    friends_options = factorial(5)\n    \n    # Total arrangements\n    total_options = judy_options * friends_options\n    \n    return total_options\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    # Total sweets they had initially\n    equation1 = Eq(andre + beth, 24)\n    # After receiving sweets from the teacher\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Number of sweets Beth has now after receiving 4 more from the teacher\n    beth_sweets_now = solutions[beth] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    andre, beth = symbols('andre beth')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(andre + beth, 24)  # Andre and Beth have a total of 24 sweets\n    equation2 = Eq(andre + 4, beth + 4 + 6)  # After receiving 4 sweets each, Andre has 6 more sweets than Beth\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Beth's number of sweets after receiving 4 more\n    beth_sweets_now = solutions[beth] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_five_bars = cost_per_bar * 5\n    return cost_for_five_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    return sum([9, 12, 17, 18, 21, 23])\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # Since the Ferrari driver finished in second place after overtaking 5 cars,\n    # it means there was one car that the driver did not overtake.\n    # That car is the one that finished first.\n    \n    # If the Ferrari driver finished second, it means that before overtaking any cars,\n    # the driver was in the last place, which was initially the 7th place \n    # (1st place + 5 overtaken cars + the Ferrari driver).\n    \n    # Therefore, the total number of cars in the race is the number of cars the driver \n    # overtook (5), plus the two leading cars (the first place and the Ferrari in second)\n    total_cars = 5 + 2  # overtaken cars + leading cars\n    \n    return total_cars\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # Set up the equation: x - 6 / 12 = 2\n    # Solve the equation for x:\n    result_after_subtraction_and_division = 2\n    result_after_subtraction = result_after_subtraction_and_division * 12\n    original_number = result_after_subtraction + 6\n    \n    return original_number\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for younger sister's time on maths and English\n    y_math, y_english = symbols('y_math y_english')\n\n    # Equations based on the problem statements\n    equation1 = Eq(y_english, y_math + 12)     # Younger sister spent 12 minutes less on maths than English\n    equation2 = Eq(y_math + y_english + 10, 88)  # Elder sister spent 10 minutes more on maths than younger sister and total is 88 minutes\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (y_math, y_english))\n\n    return solutions[y_english]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    total_sum = 130 * 4\n    remaining_sum = 110 * 3\n    removed_number = total_sum - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from math import lcm\n\ndef solution():\n    # Convert minutes to seconds for easy calculation\n    traffic_light_1_interval = 1 * 60  # 60 seconds\n    traffic_light_2_interval = 1.5 * 60  # 90 seconds\n\n    # Least Common Multiple (LCM) of the intervals for the first two traffic lights (in seconds)\n    lcm_first_two_lights = lcm(traffic_light_1_interval, traffic_light_2_interval)\n\n    # The third light needs to have a timer that is a factor of lcm_first_two_lights\n    # and at least 30 seconds. Since we need to find the smallest such timer,\n    # we start at 30 seconds and increment until we find a timer that divides the lcm evenly.\n    third_light_interval = 30\n    while lcm_first_two_lights % third_light_interval != 0:\n        third_light_interval += 1\n\n    # Convert the interval back to minutes for the final answer\n    ans = third_light_interval / 60  # Convert seconds back to minutes\n    return ans\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # The strategy for Leo to ensure victory is to always leave a multiple of 3 apples after his turn,\n    # so Mia can never pick the last apple. Starting at 14, we know that:\n    # - If Leo takes 1 apple, 13 remain, Mia can then take 1 or 2 apples, leaving 11 or 12, which are not\n    #   multiples of 3, but Leo can then leave a multiple of 3 in the next turn no matter what Mia takes.\n    # - If Leo takes 2 apples, 12 remain, which is a multiple of 3, giving Mia the chance to win.\n    \n    # To win, Leo should take 1 apple, leaving 13 apples, which is not a multiple of 3. This way, after\n    # Mia's turn, Leo can always adjust his next move to leave a multiple of 3, keeping the winning strategy.\n    leo_pick = 1\n    return leo_pick\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let the value of one silver spoon be 's' and one gold ring be 'g'.\n    # According to the problem, 12 silver spoons have three quarters the value of 6 gold rings.\n    # This gives us the equation: 12s = (3/4) * 6g\n    # Simplifying, we get: 12s = 4.5g\n    # Dividing both sides by 4.5 to find the value of one silver spoon in terms of gold rings: s = g / 3\n    # Now we need to find out how many silver spoons equate to the value of 3 gold rings.\n    # If s = g/3, then the number of silver spoons to equate 3 gold rings is 3 * 3 = 9\n    # So, 9 silver spoons have the same value as 3 gold rings.\n\n    return 9\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    students_difference = 55\n    total_students = 0\n    \n    # Since there are more boys than girls, there must be an odd number of layers\n    # We will start from 1 since it's the smallest odd number and boys are on the outermost layer\n    # We will add 2 each time to stay with an odd number of layers\n    for layers in range(1, int(students_difference**0.5)+1, 2):\n        boys = layers * layers  # Number of boys\n        girls = (layers - 1) ** 2 if layers > 1 else 0  # Number of girls\n        if boys - girls == students_difference:\n            total_students = boys + girls  # Total number of students\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    solutions = solve((equation1, equation2), (pencils, markers))\n\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    markers_price = 3\n    paintbrush_price = 1\n    total_price = 28\n    total_items = 12\n    \n    # Assume all items are paintbrushes\n    all_paintbrush_price = total_items * paintbrush_price\n    \n    # The extra cost if a paintbrush is replaced by a marker\n    extra_cost_per_marker = markers_price - paintbrush_price\n    \n    # Calculate the extra total cost\n    extra_total_cost = total_price - all_paintbrush_price\n    \n    # Calculate the number of markers\n    num_markers = extra_total_cost // extra_cost_per_marker\n    \n    return num_markers\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    # Let x be the total number of teachers\n    # Let y be the number of female teachers\n\n    # From the problem we have\n    # (75 * 3 + 60 * y) / (3 + y) = 65\n\n    # Simplify and solve for y\n    y = (65 * 3 - 75 * 3) / (60 - 65)\n\n    return int(y)\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    ans = 527 - 382\n    return ans\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    from_left = 2\n    from_right = 4\n    from_front = 5\n    from_back = 7\n\n    total_columns = from_left + from_right - 1\n    total_rows = from_front + from_back - 1\n\n    total_students = total_columns * total_rows\n\n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 33 and 55\n    factors_33 = factorint(33)\n    factors_55 = factorint(55)\n\n    # Combine the factorization results by multiplying common factors\n    product_factors = {factor: (factors_33.get(factor, 0) + factors_55.get(factor, 0)) for factor in set(factors_33) | set(factors_55)}\n    \n    # To make it a square number, every prime factor's exponent should be even\n    # Calculate the smallest m that makes each exponent even\n    m = 1\n    for factor, exponent in product_factors.items():\n        if exponent % 2 != 0:  # if the exponent is odd\n            m *= factor  # multiply m by the factor to make the exponent even\n\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Each plate has at least 2 pieces of candy, so start by placing 2 in each.\n    # The remaining candy to divide is 8 - 2*3 = 2.\n    remaining_candy = 8 - 2*3\n    \n    # Now the problem is to divide 2 identical candies among 3 plates. \n    # This is equivalent to putting 2 identical items into 3 distinct bins.\n    # This can be solved using stars and bars method (combinatorial objects):\n    # | * * | |    (1 candy for the first plate, 1 candy for the second plate)\n    # | * | * |    (1 candy for the first plate, 1 candy for the third plate)\n    # | | * * |    (1 candy for the second plate, 1 candy for the third plate)\n    # | * | | *    (1 candy for the first plate, 1 candy for the last placeholder not an actual plate)\n    # | | * | *    (1 candy for the second plate, 1 candy for the last placeholder not an actual plate)\n    # | | | * *    (2 candies for the last placeholder, meaning no additional candies for any plate)\n    \n    # We need to choose 2 (bars) spots from 2+3-1=4 (total spots for placing the remaining items and bars).\n    # Which is given by \"4 choose 2\"\n    num_ways = (4 * 3) // (2 * 1)\n    \n    return num_ways\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    ans = 40 * 700\n    return ans\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    import math\n\n    # Since Star must be the first runner, we only need to arrange the remaining 4 teammates\n    number_of_ways = math.factorial(4)\n\n    return number_of_ways\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(1, 10), 4):\n        if perm[0] < perm[1] < perm[2] < perm[3]:\n            num1 = int(''.join(map(str, perm)))\n            num2 = int(''.join(map(str, perm[::-1])))\n            for third_perm in permutations(perm, 4):\n                if third_perm != perm and third_perm[::-1] != perm:\n                    num3 = int(''.join(map(str, third_perm)))\n                    if num1 + num2 + num3 == 26352:\n                        return min(num1, num2, num3)\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    # Define a function that represents the unknown operation\n    # Using the given results to deduce the rules governing the operation\n    def operation(a, b):\n        return (a * b) + (a + b) * 2\n\n    # Apply the deduced operation to calculate 6 ⊗ 12\n    ans = operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # Time taken to make one cut\n    time_per_cut = 60 / (31 - 1)\n\n    # Total time to cut into 50 segments\n    total_time = time_per_cut * (50 - 1)\n\n    return int(total_time)\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    number, _ = solve_congruence(*congruences)\n\n    while number <= 100:\n        number += 3 * 5 * 7\n\n    if number > 200:\n        return None\n\n    return number\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    ans = 123 - 41\n    return ans\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    original_number = 210 / (1 - 0.30)\n    return original_number\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2003\n    while str(year) != str(year)[::-1]:\n        year += 1\n    return year - 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candy, nancy = symbols('candy nancy')\n    \n    original_candy = 11\n    original_nancy = 9\n    \n    equation1 = Eq(candy + nancy, original_candy + original_nancy)\n    equation2 = Eq(nancy - candy, 8)\n    \n    solutions = solve((equation1, equation2), (candy, nancy))\n    \n    return solutions[candy]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = 'ARRANGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_ways = factorial(len(word))\n    \n    for count in letter_counts.values():\n        total_ways //= factorial(count)\n    \n    return total_ways\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    original_price = 200\n    increase_percentage = 0.45\n    new_price = original_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum = 60\n    money_from_dad = 40\n    days = 3  # Monday, Tuesday, and Wednesday\n\n    total_money = (money_from_mum + money_from_dad) * days\n\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for i in range(100, 1000):\n        if i // 24 == 36 and i % 24 == 0:\n            return i\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    temperature_midnight_friday = -5\n    temperature_midday_saturday = 17\n\n    overall_change = temperature_midday_saturday - temperature_midnight_friday\n\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    increment = 1\n\n    while term <= 50:\n        increment += 1\n        term += increment\n\n    return term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost = 43  # cost in pennies\n    booklet_cost = 185  # cost in pennies, since £1 = 100p\n    total_money = 1000  # available amount in pennies, since £10 = 1000p\n\n    total_cost = (3 * pen_cost) + (4 * booklet_cost)\n    change = total_money - total_cost\n\n    return change / 100  # Convert pence back to pounds for the answer\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n    \n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    population = 5398064  # As of my knowledge cutoff in 2023, this is the population of St Petersburg, Russia.\n    return population\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through all 3-digit numbers\n        # Convert the number to a list of digits\n        digits = [int(d) for d in str(i)]\n        # Check the condition for 'X-number' for each pair of adjacent digits\n        if abs(digits[0] - digits[1]) >= 7 and abs(digits[1] - digits[2]) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for i in range(5, 10):  # Thousands digit: only digits from 5 to 9\n        for j in range(1, 10):  # Hundreds digit: any digit from 1 to 9\n            for k in range(1, 10):  # Tens digit: any digit from 1 to 9\n                for l in range(1, 10):  # Ones digit: any digit from 1 to 9\n                    if i % j == 0 and i % k == 0 and i % l == 0:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import primerange\n    \n    prime_numbers = list(primerange(1, 10))  # The third prime is definitely less than 10.\n    third_prime = prime_numbers[2]\n    \n    return third_prime\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown value\n    x = symbols('x')\n\n    # Create the equation according to the problem\n    equation = Eq((x + 7) / 9, 9)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # In a circle, if one position is exactly opposite another, it means they are separated by half of the total number of positions in the circle.\n    # The positions of the 4th child and the 22nd child are opposites, which means that the total number of children is 2 times the difference in their positions.\n    position_difference = 22 - 4\n    total_children = 2 * position_difference\n    return total_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    difference = 4\n    num_weeks = 10\n\n    # Last term of an arithmetic sequence formula: a_n = a_1 + (n-1)d\n    last_term = first_term + (num_weeks - 1) * difference\n\n    # Sum of an arithmetic sequence formula: S_n = n/2 * (a_1 + a_n)\n    total_coins = num_weeks / 2 * (first_term + last_term)\n\n    return int(total_coins)\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2\n    fiona_dresses = gina_dresses // 4\n    return gina_dresses + fiona_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    initial_amount = 35000\n    final_amount = 37100\n    annual_interest_rate = 1.5 / 100  # converting percentage to decimal\n    claimed_years = 5\n    \n    # Calculate the amount after 5 years with the claimed interest rate\n    amount_with_claimed_years = initial_amount * (1 + annual_interest_rate) ** claimed_years\n    \n    # Check if the calculated amount matches the final amount\n    if amount_with_claimed_years == final_amount:\n        return \"right\"\n    else:\n        # Since the claim is wrong, find the actual number of years\n        years = 0\n        amount = initial_amount\n        while amount < final_amount:\n            amount += amount * annual_interest_rate\n            years += 1\n        return years\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # Since all digits in '1258' are incorrect, we can eliminate these digits from consideration\n    incorrect_digits = set('1258')\n\n    # Let's consider possible correct digits from other guesses, excluding the ones from '1258'\n    possible_digits = set('5648362831475629') - incorrect_digits\n\n    # Initialize a dictionary to hold possible positions for each digit\n    possible_positions = {str(d): set(range(4)) for d in possible_digits}\n    \n    # Remove possible positions based on the clues given\n    # For '5648', '6' and '8' cannot be in positions 1 and 3 since '1258' has all wrong positions\n    possible_positions['6'] -= {1}\n    possible_positions['8'] -= {3}\n\n    # Same logic applied to these numbers based on wrong positions in '1258'\n    possible_positions['3'] -= {1, 3}\n    possible_positions['4'] -= {1, 3}\n    possible_positions['7'] -= {1, 3}\n    possible_positions['9'] -= {1, 3}\n\n    # '3628' - '6' could be at position 2 (since '5' is incorrect), '8' could be at position 4\n    possible_positions['6'] -= {0, 3}\n    possible_positions['2'] -= {1, 3}\n    possible_positions['8'] -= {1, 2}\n\n    # '3147' - '7' could be at position 4\n    possible_positions['3'] -= {2, 3}\n    possible_positions['1'] -= {0, 2, 3}\n    possible_positions['7'] -= {0, 1, 2}\n\n    # '5629' - '6' could be at position 2, '9' could be at position 4\n    possible_positions['5'] -= {0, 2, 3}\n    possible_positions['6'] -= {0, 1}\n    possible_positions['9'] -= {0, 1, 2}\n\n    # At this point, we should have one possible position for each digit\n    # Now let's deduce the correct combination by filling in the positions\n    combination = [None] * 4\n    for digit, positions in possible_positions.items():\n        if len(positions) == 1:\n            position = positions.pop()\n            combination[position] = digit\n\n    return ''.join(combination)\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Variables for the known average weights and male teachers\n    avg_all_teachers = 65\n    num_male_teachers = 3\n    avg_male_teachers = 75\n    avg_female_teachers = 60\n\n    # Calculate the total weight of the male teachers\n    total_weight_male_teachers = avg_male_teachers * num_male_teachers\n\n    # Let x be the number of female teachers\n    # The total weight of all the teachers will be the sum of total male weight and (x * avg_female_weight)\n    # The total number of teachers will be x + num_male_teachers\n\n    # Set up the equation: (total_weight_male_teachers + x * avg_female_teachers) / (x + num_male_teachers) = avg_all_teachers\n    # Solve for x to find the number of female teachers\n    \n    # Rearranging the equation we get:\n    # x * avg_female_teachers + total_weight_male_teachers = avg_all_teachers * (x + num_male_teachers)\n    # x * avg_female_teachers + total_weight_male_teachers = avg_all_teachers * x + avg_all_teachers * num_male_teachers\n    # x * (avg_female_teachers - avg_all_teachers) = avg_all_teachers * num_male_teachers - total_weight_male_teachers\n    # x = (avg_all_teachers * num_male_teachers - total_weight_male_teachers) / (avg_female_teachers - avg_all_teachers)\n\n    x = (avg_all_teachers * num_male_teachers - total_weight_male_teachers) / (avg_female_teachers - avg_all_teachers)\n\n    return int(x)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n    mass_half_full = (mass_quarter_full + mass_three_quarters_full) / 2\n    mass_empty_jar = mass_half_full - (mass_three_quarters_full - mass_quarter_full)\n    return mass_empty_jar\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_litres = 13.15\n    bottle_capacity_litres = 9.1\n    cup_capacity_ml = 350\n\n    soda_used_for_bottle = bottle_capacity_litres / 7\n    soda_used_for_cups = 4 * (cup_capacity_ml / 1000)  # Convert ml to litres\n\n    remaining_soda = total_soda_litres - soda_used_for_bottle - soda_used_for_cups\n\n    return remaining_soda\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for father's and son's current ages\n    father, son = symbols('father son')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(father - 6, 5 * (son - 6))  # 6 years ago, father's age was 5 times the son's age\n    equation2 = Eq(father + son, 78)  # The sum of their ages is 78 this year\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (father, son))\n    \n    # Father's current age is what we want to return\n    return solutions[father]\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import sqrt\n\n    # Given values\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    A = 0.08  # amplitude in meters\n    x = 0.04  # displacement from equilibrium in meters\n\n    # Total energy of the oscillator (mechanical energy in a spring system)\n    E_total = (1/2) * k * A**2\n    \n    # Speed of the block v at displacement x\n    # E_total = (1/2) * m * v**2 + (1/2) * k * x**2\n    # Rearrange to solve for v\n    v = sqrt((E_total - (1/2) * k * x**2) * 2 / m)\n\n    return E_total, v\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assuming A, B, C, D, and E are the marks scored by each student\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Given conditions\n    equation1 = Eq((A + B + C) / 3, 95)  # Average mark of A, B and C is 95\n    equation2 = Eq((B + C + D) / 3, 94)  # Average mark of B, C and D is 94\n    equation3 = Eq(E, 96)                # E's mark is 96\n    equation4 = Eq(B, D)                 # B and D have the same score\n\n    # Additional conditions from the problem's context\n    constraints = (A > 91, B > 91, C > 91, D > 91, E > 91, A > E)  # Marks are above 91, A has the highest mark.\n\n    # Solving equations with additional constraints\n    solutions = solve((equation1, equation2, equation3, equation4) + constraints, (A, B, C, D, E))\n\n    # There might be more than one solution set, we filter for the one that satisfies A is highest\n    for s in solutions:\n        if s[A] > s[B] and s[A] > s[C] and s[A] > s[D] and s[A] > s[E]:\n            return s[D]\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # Rose wants to ensure that she leaves a multiple of 3 marbles for Kylie every turn.\n    # This way, no matter if Kylie takes 1 or 2 marbles, Rose can always take the remaining\n    # to make the total taken marbles reach the next multiple of 3.\n    # She needs to take either 1 or 2 marbles first to leave 13 or 12 marbles, both are not\n    # multiples of 3.\n    # To find out the exact number, we can calculate 14 modulo 3, which would give us the\n    # remainder when 14 is divided by 3. This remainder is the number of marbles Rose has\n    # to take to make the remaining number of marbles a multiple of 3.\n\n    marbles = 14\n    remainder = marbles % 3\n\n    # Rose must take this remainder worth of marbles.\n    # If remainder is 0 (meaning 14 is a multiple of 3, which is impossible in this case),\n    # Rose should take 2 because in that position, she cannot win, since both 1 or 2 will\n    # leave a multiple of 3 for Kylie.\n    # But if we have a remainder of 1 or 2, Rose should take that many marbles.\n\n    marbles_to_take = remainder if remainder != 0 else 2\n    \n    return marbles_to_take\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023**0.5\n    b = -2023**0.5\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    return 245 - 182\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pounds = 45\n    value_per_coin = 0.05\n    \n    ans = total_pounds / value_per_coin\n    return int(ans)\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'p' be the distance Pip runs in one minute\n    # Let 'b' be the distance Bud runs in one minute\n    p, b = symbols('p b')\n\n    # Pip runs 20 meters more than Bud each minute\n    equation1 = Eq(p, b + 20)\n\n    # Together they run 540 meters in 3 minutes\n    equation2 = Eq(3 * (p + b), 540)\n\n    # Solving the equations to find the distance Pip runs in one minute\n    solutions = solve((equation1, equation2), (p, b))\n\n    # Calculating the total distance Pip runs in 3 minutes\n    distance_pip_3_min = solutions[p] * 3\n\n    return distance_pip_3_min\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let box_a and box_b represent the original amount of coins in Box A and Box B, respectively.\n    box_a, box_b, box_c = symbols('box_a box_b box_c')\n\n    # Setting up the equations based on the problem statement\n    equation1 = Eq(box_a, 4 * box_b)                    # Box A contains four times as many coins as Box B\n    equation2 = Eq(box_c, 0.06 * box_a + 0.2 * box_b)   # Coins transferred to Box C\n    equation3 = Eq(box_c, 1.22 * (box_b + box_a / 4 ) - 1220) # Coins in Box C after transfer, with 22% increase\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (box_a, box_b, box_c))\n\n    # We return the number of coins in Box A at the beginning\n    return solutions[box_a]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let's assume Sally originally had 100 bottles of drinks (to simplify the calculation with percentages)\n    # It doesn't affect the percentage increase calculation as we're looking for a relative change.\n    original_bottles = 100\n\n    # Initially, 60% were coffee\n    original_coffee = 0.60 * original_bottles\n    # Hence, 40% were tea\n    original_tea = original_bottles - original_coffee\n    \n    # Finally, 40% were coffee, which implies 60% were tea\n    # Let the final total number of bottles be represented by new_bottles\n    final_coffee = 0.40 * original_bottles\n    \n    # Since the number of coffee bottles remained the same, the final total number of bottles\n    # is the same as the number of initial coffee bottles divided by the final percentage of coffee.\n    new_bottles = original_coffee / 0.40\n    final_tea = new_bottles - final_coffee\n    \n    # We calculate the difference in the number of bottles of tea\n    difference_tea = final_tea - original_tea\n    # The percentage increase in the number of bottles of tea\n    percent_increase_tea = (difference_tea / original_tea) * 100\n\n    return percent_increase_tea\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    # Convert hexadecimal (base 16) strings to decimal (base 10)\n    hex1 = int('2A3', 16)\n    hex2 = int('17B', 16)\n    \n    # Sum the two decimal numbers\n    sum_hex = hex1 + hex2\n    \n    # Convert the sum back to a hexadecimal string\n    ans = hex(sum_hex)[2:].upper()\n    \n    return ans\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    ans = 25 / 100 * 30 / 100 * 40 / 100 * 300\n    return ans\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_red = 5 * 2\n    total_green = 2 * 5\n    total_white = 3 * 10\n    \n    total_revenue = total_red + total_green + total_white\n    total_flowers = 5 + 2 + 3\n\n    avg_selling_price = total_revenue / total_flowers\n    \n    return avg_selling_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tricycles, cars = symbols('tricycles cars')\n    equation1 = Eq(tricycles + cars, 24)  # Equation for the number of vehicles\n    equation2 = Eq(3 * tricycles + 4 * cars, 86)  # Equation for the number of wheels\n\n    solutions = solve((equation1, equation2), (tricycles, cars))\n\n    return solutions[tricycles]\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    # Time taken for each task\n    washing_watermelons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n\n    # Since these tasks are done sequentially, we just add the time for each task\n    total_time = washing_watermelons + washing_glasses + juicer_working + pouring_juice\n\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60  # Lewis has 60p which is £0.60\n    james_money_pounds = 1.10  # James has £1.10\n\n    # Convert everything to pounds\n    lewis_money_pounds = lewis_money_p / 100  # Convert pence to pounds\n\n    # Add up the money they have altogether in pounds\n    total_money = lewis_money_pounds + james_money_pounds\n\n    return total_money\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"WINNING\")  # Total number of letters in the word\n    freq_w = 1                      # Frequency of letter 'W'\n    freq_i = 2                      # Frequency of letter 'I'\n    freq_n = 3                      # Frequency of letter 'N'\n    freq_g = 1                      # Frequency of letter 'G'\n\n    total_arrangements = factorial(total_letters) // (factorial(freq_w) * factorial(freq_i) * factorial(freq_n) * factorial(freq_g))\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13-3*2+1):\n        for x2 in range(3, 13-x1-3+1):\n            x3 = 13 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    return 7 * 0.4\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    from itertools import permutations\n\n    def count_derangements(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n\n    ans = count_derangements(6)\n    return ans\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    # Define the prices of lemonade and 1000 Plus\n    lemonade_price = 4\n    plus_price = 7\n    \n    # Define the total income and total bottles\n    total_income = 2012\n    total_bottles = 350\n    \n    # Calculate the maximum number of lemonades that could be sold\n    max_lemonades = total_income // lemonade_price\n    \n    # Initialize the minimum number of 1000 Plus bottles to the total number of bottles\n    min_plus_bottles = total_bottles\n    \n    # Iterate to find the minimum number of 1000 Plus sold for the given conditions\n    for lemonades_sold in range(max_lemonades + 1):\n        # The number of 1000 Plus sold is derived from the remaining income and bottles\n        remaining_income = total_income - (lemonade_price * lemonades_sold)\n        plus_sold = remaining_income // plus_price\n        \n        # Bottles left is the total bottles minus the sum of lemonades sold and 1000 Plus sold\n        bottles_left = total_bottles - (lemonades_sold + plus_sold)\n        \n        # If the remaining income is correctly divisible by the price of 1000 Plus and the bottles left are non-negative\n        if remaining_income % plus_price == 0 and bottles_left >= 0:\n            # Update the minimum number of 1000 Plus sold if the current value of plus_sold is smaller\n            min_plus_bottles = min(min_plus_bottles, plus_sold)\n    \n    return min_plus_bottles\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Let x be the number of blue pens initially\n    # Total pens initially is 96\n    # According to the ratio of blue to red pens 3:5, the numbers are:\n    # blue pens = 3/8 * total, red pens = 5/8 * total\n    blue_pens_initial = 3/8 * 96\n    red_pens_initial = 5/8 * 96\n    \n    # After adding 60 red pens and some unknown number y of blue pens\n    # the total number of pens becomes 96 + 60 + y\n    # 40% of this total is blue pens, hence, 0.4 * (96 + 60 + y) is the total number of blue pens\n    # which is the initial number of blue pens plus y\n    # thus we have the equation: blue_pens_initial + y = 0.4 * (96 + 60 + y)\n    y = symbols('y')\n    equation = Eq(blue_pens_initial + y, 0.4 * (96 + 60 + y))\n    solution = solve(equation, y)\n    \n    return solution[y]\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # in kilograms\n    final_velocity = 8  # in meters per second\n    time = 4  # in seconds\n    \n    # Using the formula F = ma, where a is the acceleration\n    acceleration = final_velocity / time  # a = (v - u) / t, where u(initial velocity) = 0 as the object is stationary.\n    force = mass * acceleration  # F = m * a\n    \n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # Chicken McNugget Theorem (Frobenius Coin Problem) for two numbers\n    # If m and n are relatively prime, then the greatest number that cannot\n    # be obtained using any combination of m and n is mn - m - n.\n    # Since 3 and 7 are relatively prime, we can use this theorem directly.\n    m, n = 3, 7\n    max_unpurchasable = m * n - m - n\n    return max_unpurchasable\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of incorrect answers\n    x = symbols('x')\n    # Correct answers = 12 + 3x\n    # Each correct answer gives 5 points, each incorrect/blank answer loses 2 points\n    # Total points = 5 * (correct answers) - 2 * (incorrect answers)\n    # Jane got 151 points in total\n    equation = Eq(5 * (12 + 3*x) - 2 * x, 151)\n\n    # Solve the equation to find the number of incorrect answers\n    solutions = solve(equation, x)\n\n    # Calculate the number of correct answers\n    correct_answers = 12 + 3 * solutions[0]\n\n    return correct_answers\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from itertools import combinations\n\n    # Calculate factors of a number\n    def factors_count(n):\n        factors = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors += 1\n        return factors\n\n    # Generate a dictionary of numbers and their factors\n    num_factors = {i: factors_count(i) for i in range(1, 14)}\n\n    # Find the numbers with a unique number of factors\n    unique_factors = {v: k for k, v in num_factors.items() if list(num_factors.values()).count(v) == 1}\n\n    # Those with unique factors are figured out by the two students\n    two_students = list(unique_factors.values())\n\n    # For the remaining numbers\n    remaining_numbers = [i for i in range(1, 14) if i not in two_students]\n\n    # Initialize variables to track the status\n    alice_number = may_number = mark_number = None\n    \n    # Now we look for Alice, May, and Mark's numbers based on their statements.\n    # We know Alice's number is odd and May's is 2 smaller than Alice and 1 bigger than Mark.\n    # We must ensure that Alice, May, and Mark's numbers lead to them having a unique understanding\n    # of their own numbers based on the visible numbers.\n    for alice, may, mark in combinations(remaining_numbers, 3):\n        if (alice % 2 != 0 and\n            may == alice - 2 and\n            may - mark == 1 and\n            num_factors[alice] not in [num_factors[p] for p in remaining_numbers if p != alice] and\n            num_factors[may] not in [num_factors[p] for p in remaining_numbers if p != may] and\n            num_factors[mark] not in [num_factors[p] for p in remaining_numbers if p != mark]):\n\n            alice_number = alice\n            may_number = may\n            mark_number = mark\n            break\n\n    # Get the list of numbers not picked\n    not_picked = [i for i in range(1, 14) if i not in two_students + [alice_number, may_number, mark_number]]\n\n    # Calculate the product of the numbers not picked\n    product_not_picked = 1\n    for num in not_picked:\n        product_not_picked *= num\n        \n    return product_not_picked\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    journey_km = 32\n    num_friends = 11\n\n    total_cost = cost_per_km * journey_km\n    cost_per_person = total_cost / num_friends\n\n    return cost_per_person\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert numbers to base 10\n    num1_base10 = int(str(45), 7)\n    num2_base10 = int(str(66), 7)\n\n    # Perform addition in base 10\n    sum_base10 = num1_base10 + num2_base10\n\n    # Convert the sum back to base 7\n    if sum_base10 == 0:\n        return '0'\n    else:\n        ans = ''\n        while sum_base10 > 0:\n            ans = str(sum_base10 % 7) + ans\n            sum_base10 //= 7\n\n    return ans\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    ans = 628 * 5\n    return ans\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Cici's and Linda's current ages\n    cici, linda = symbols('cici linda')\n    \n    # Create an equation representing Linda's age when Cici was born\n    eq1 = Eq(linda - cici, 11)\n    \n    # Create an equation representing the sum of their ages in 4 years\n    eq2 = Eq((cici + 4) + (linda + 4), 37)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (cici, linda))\n    \n    # Calculate Linda's age 3 years from now\n    linda_age_future = solutions[linda] + 3\n    \n    return linda_age_future\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    ans = 67 * 23\n    return ans\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    ratio_j = 5\n    ratio_n = 3\n    difference = 18\n\n    # The difference in number of stamps is 2 parts of the ratio\n    # since 5 - 3 = 2\n    part_value = difference / (ratio_j - ratio_n)\n\n    # Get the actual number of stamps each has\n    stamps_j = part_value * ratio_j\n    stamps_n = part_value * ratio_n\n\n    # Total number of stamps\n    total_stamps = stamps_j + stamps_n\n\n    return total_stamps\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    ans = 0\n    for num in range(161, 15*16):  # The largest number to consider is 15 * 15 + 15\n        if num % 15 == num // 15:\n            ans += num\n    return ans\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # The sum of all matches played is double the actual matches,\n    # because each match involves two players\n    total_matches_played_twice = 4 + 6 + 2 + 1 + 3 + 5\n    # Since each player plays with every other once, there are C(7, 2) matches,\n    # where C is the combination function for choosing 2 out of 7\n    total_matches = (7 * (7 - 1)) // 2\n    # Double the actual matches because each match is counted twice\n    total_matches_twice = 2 * total_matches\n    # Subtract the sum of matches played by A, B, C, D, E, and G\n    # from the total to find the matches played by F,\n    # Note: since the total is counted twice, no need to multiply by 2\n    matches_played_by_F = total_matches_twice - total_matches_played_twice\n\n    return matches_played_by_F\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # Let's find a number N that can be divided by all numbers from 1 to 20 except two consecutive numbers.\n    from math import gcd\n    from functools import reduce\n\n    # Function to find the LCM of two numbers\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    # Function to find the LCM of a list of numbers\n    def lcm_of_list(lst):\n        return reduce(lcm, lst)\n\n    # We start by finding the lcm of all the numbers from 1 to 20 because N should be divisible by all of these\n    # except for the two consecutive numbers that we need to find out.\n    all_nums = set(range(1, 21))\n    lcm_all = lcm_of_list(all_nums)\n\n    # To find the two consecutive numbers that cannot divide N,\n    # We iterate from the smallest two consecutive numbers to the largest ones.\n    for i in range(1, 20):\n        if lcm_all % i != 0 or lcm_all % (i + 1) != 0:\n            possible_N = lcm_all // gcd(i, lcm_all) // gcd(i + 1, lcm_all)\n            divisor_count = sum(possible_N % j == 0 for j in all_nums)\n            if divisor_count == 18:  # we need exactly 18 divisors from 1 to 20\n                return i + (i + 1)  # return the sum of the two numbers\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    # The least possible value of the sum occurs when both numbers are at their minimum\n    # within their respective constraints.\n\n    first_number_min = 5   # minimum value for the first number\n    second_number_min = 2  # minimum value for the second number\n\n    # Calculate the least possible sum\n    least_possible_sum = first_number_min + second_number_min\n\n    return least_possible_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance = 300  # distance from home to school and back\n    speed_uphill = 10  # speed uphill to school\n    speed_downhill = 30  # speed downhill from school\n\n    # Time taken to go uphill (to school)\n    time_uphill = distance / speed_uphill\n\n    # Time taken to go downhill (from school)\n    time_downhill = distance / speed_downhill\n\n    # Total distance for the round trip\n    total_distance = 2 * distance\n\n    # Total time for the round trip\n    total_time = time_uphill + time_downhill\n\n    # Average speed for the round trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    total_entrances = 5\n    total_people = 4\n\n    # Each of the 4 people can choose any of the 5 entrances independently,\n    # so for each person, there are 5 possible ways to enter.\n    # Thus we use the counting principle and raise the number of ways per person\n    # to the power of the total number of people.\n    ways_to_enter = total_entrances ** total_people\n\n    return ways_to_enter\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n\n    number_of_bags = total_peaches // peaches_per_bag\n\n    return number_of_bags\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    apples_total = 226\n    pears_total = 352\n    oranges_total = 157\n\n    apples_distributed = apples_total - 10\n    pears_distributed = pears_total - 28\n    oranges_distributed = oranges_total - 13\n\n    g = gcd(apples_distributed, gcd(pears_distributed, oranges_distributed))\n    \n    ans = g\n    return ans\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n\n    # Judy can stand in 2 different places (first or last)\n    judy_positions = 2\n\n    # The rest 5 friends can stand in any order\n    friends_permutations = factorial(5)\n\n    # Total ways to form the line\n    total_ways = judy_positions * friends_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number1 = 6\n    lcm = 12\n    for number2 in range(1, lcm + 1):\n        if number1 * number2 % lcm == 0 and number1 * number2 // lcm == 1:  # Check if it's the LCM\n            common_factors = set([i for i in range(1, number2 + 1) if number2 % i == 0\n                                  and number1 % i == 0])\n            if common_factors == {1, 2}:  # Check if the only common factors are 1 and 2\n                return number2\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    def find_digit(n):\n        length = 0\n        count = 9\n        digits = 1\n        \n        while n > length + digits * count:\n            length += digits * count\n            digits += 1\n            count *= 10\n        \n        number = 10**(digits - 1) + (n - length - 1) // digits\n        digit_position = (n - length - 1) % digits\n        \n        return int(str(number)[digit_position])\n    \n    ans = find_digit(200)\n    return ans\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    total_tvs_per_day = 500\n    pts_for_qualified = 5\n    pts_lost_for_unqualified = -18\n    total_points = 9931\n\n    # Hypothesis: Assume all TVs are qualified\n    all_qualified = total_tvs_per_day * total_days\n    all_qualified_pts = all_qualified * pts_for_qualified\n\n    # The difference between the hypothesis points and the actual points\n    pt_difference = all_qualified_pts - total_points\n\n    # Since for each unqualified product, there is a net loss of points (5 - (-18) = 23)\n    pts_per_unqualified = pts_for_qualified - pts_lost_for_unqualified\n\n    # If we divide the points difference by pts_per_unqualified, we get the number of unqualified TVs\n    unqualified_tvs = pt_difference / pts_per_unqualified\n\n    # Subtract unqualified TVs from the total to get the number of qualified TVs\n    qualified_tvs = all_qualified - unqualified_tvs\n\n    return int(qualified_tvs)\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost = symbols('cost')\n    \n    # Let's define the price equation based on the problem statement\n    price = cost + 40\n    \n    # The customer buys it with twenty percent off\n    selling_price = price * 0.80\n    \n    # The profit is made by subtracting the cost from the selling price\n    profit_eq = Eq(selling_price - cost, 12)\n    \n    # Solve the profit equation for the actual cost of the shirt\n    solutions = solve(profit_eq, cost)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = (6.25 * 8.27 * 16) + (1.25 * 0.827 * 8)\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Daniel's current age and his daughter's current age\n    daniel, daughter = symbols('daniel daughter')\n\n    # Equation 1: (daniel - 2) = 6 * (daughter - 2)\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n\n    # Equation 2: (daniel + 2) = 4 * (daughter + 2)\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    # Solve the system of equations for Daniel's age and Daughter's age\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Distance between P and Q\n    total_distance = 1800\n    # Distance April met Baye from Q\n    meeting_point_distance_from_Q = 800\n    \n    # Distance April covered to meet Baye\n    distance_april_covered_to_meeting = total_distance - meeting_point_distance_from_Q\n    # Baye's speed is 1 unit (since April's speed is 4 times while coming back and they meet at same time)\n    # In the time April covered 1000m Baye covered 800m, so April's speed is 1000/800 of Baye's speed\n    april_speed_ratio = distance_april_covered_to_meeting / meeting_point_distance_from_Q\n    \n    # April's return journey to P after meeting Baye\n    # When April travels back to P covering 800m, Baye will cover 800m/5 because April's speed is 4 * her original speed\n    baye_distance_during_aprils_return = meeting_point_distance_from_Q / (1 + 4 * april_speed_ratio)\n    \n    # Baye's distance from Q when April reaches P again will be what Baye covered during April's return\n    distance_baye_from_Q = total_distance - baye_distance_during_aprils_return\n\n    return distance_baye_from_Q\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n\n    equation1 = Eq(hens, 6 * roosters)\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n\n    solutions = solve((equation1, equation2), (hens, roosters))\n\n    total_chickens_before = solutions[hens] + solutions[roosters]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    original_sum = 7 * 12\n    new_sum = 8 * 11\n    eighth_number = new_sum - original_sum\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    sequence = [1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    # The repeating sequence of digits is \"538462\"\n    repeating_sequence = \"538462\"\n    \n    # The length of the repeating sequence\n    sequence_length = len(repeating_sequence)\n    \n    # The position we are looking for\n    position = 2021\n    \n    # Find the index within the repeating sequence that corresponds to the position\n    index_in_sequence = (position - 1) % sequence_length\n    \n    # Return the digit at that index in the repeating sequence\n    ans = int(repeating_sequence[index_in_sequence])\n    \n    return ans\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for number in range(1, 101):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    ans = 8000 * 0.7\n    return ans\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # Check for two-digit palindromes (from 11 to 99)\n    for x in range(1, 10):\n        count += 1  # The two-digit palindromes are 11, 22, ..., 99\n\n    # Check for three-digit palindromes (from 101 to 999)\n    for x in range(1, 10):\n        for y in range(0, 10):\n            count += 1  # The three-digit palindromes are 101, 111, ..., 191, 202, ..., 999 which can be formed by x and y\n    \n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n    book_cost = (1/3) * initial_money\n    bag_cost = (2/5) * initial_money\n\n    equation = Eq(book_cost + bag_cost, 132)\n\n    solved = solve(equation, initial_money)\n\n    return solved[0]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    result = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return result\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(C, B - 75)\n    equation3 = Eq(A + B + C, 835)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    ans = 4125 - 837\n    return ans\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Darrell could pick all blue and white beads before getting the green ones\n    # So we consider the worst case scenario\n    max_non_green_beads = 5 + 6  # Blue + White beads\n    green_beads_needed = 5\n    \n    # To be sure to get 5 green beads, we add 1 to the count of max non-green beads\n    beads_to_draw = max_non_green_beads + green_beads_needed \n    \n    return beads_to_draw\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    natural_numbers = 105\n    divisible_by_5 = natural_numbers // 5\n    divisible_by_7 = natural_numbers // 7\n    divisible_by_both = natural_numbers // (5 * 7)\n\n    # Inclusion-Exclusion Principle: |A ∪ B| = |A| + |B| - |A ∩ B|\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_both\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    # Considering the pages in ranges of 1-9, 10-99, 100-215.\n    # 1-9 has 9 pages, each page uses 1 digit: total digits is 9*(1)\n    # 10-99 has 90 pages, each page uses 2 digits: total digits is 90*(2)\n    # 100-215 has 116 pages (since 215-100+1), each page uses 3 digits: total digits is 116*(3)\n    \n    total_digits = (9*1) + (90*2) + (116*3)\n    \n    return total_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') / 3:\n            return num\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    ans = 0\n    for i in range(1, 81 + 1):\n        ans += len(str(i))\n    return ans\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # Number of intervals from the first to the fourth floor\n    intervals_1_to_4 = 4 - 1\n    # Number of minutes John needs to walk one interval\n    minutes_per_interval = 12 / intervals_1_to_4\n    \n    # Number of intervals from the first to the eighth floor\n    intervals_1_to_8 = 8 - 1\n    # Number of minutes John needs to walk from the first to the eighth floor\n    minutes_1_to_8 = minutes_per_interval * intervals_1_to_8\n    \n    return minutes_1_to_8\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    ways = 0\n    for basket1 in range(7):\n        for basket2 in range(7 - basket1):\n            basket3 = 6 - basket1 - basket2\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5 * a - 2 * b\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40):\n        for quotient in range(1, 40):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_per_month = 15\n    number_of_months = 5  # March to July inclusive is 5 months\n    total_pizzas = average_per_month * number_of_months\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n    \n    num_days = ((last_term - first_term) / difference) + 1\n    \n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    ans = 32 * 2.99\n    return ans\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the initial ratio numbers\n    birds_to_squirrels_ratio = 8 / 5\n    # Squirrels increased by 20%\n    squirrel_increase = 0.20\n    \n    # Symbols for current number of birds and squirrels\n    birds_init, squirrels_init = symbols('birds_init squirrels_init')\n    \n    # Equation representing initial situation (Before Increase)\n    equation1 = Eq(birds_init / squirrels_init, birds_to_squirrels_ratio)\n    \n    # The total number of animals remains the same\n    birds_finally, squirrels_finally = symbols('birds_finally squirrels_finally')\n    \n    # Squirrels increased by 20%\n    equation2 = Eq(squirrels_finally, squirrels_init * (1 + squirrel_increase))\n    \n    # The total number of animals remains the same\n    equation3 = Eq(birds_finally + squirrels_finally, birds_init + squirrels_init)\n    \n    # solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (birds_init, squirrels_init, birds_finally, squirrels_finally))\n    \n    # Birds that flew away\n    birds_flew_away = solutions[birds_init] - solutions[birds_finally]\n    # Percentage of birds that flew away\n    percentage_birds_flew = (birds_flew_away / solutions[birds_init]) * 100\n    \n    return percentage_birds_flew\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_cartons = 8\n    volume_per_carton = 3  # in liters\n    drank_volume = 9       # in liters\n    container_volume = 5   # in liters\n\n    total_juice = total_cartons * volume_per_carton\n    remaining_juice = total_juice - drank_volume\n    \n    containers_needed = -(-remaining_juice // container_volume)  # Ceiling division\n\n    return int(containers_needed)\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    first_term = 7\n    common_difference = 8\n    term_to_find = 5  # we are looking for the 5th term\n\n    # An nth term of an arithmetic sequence is defined as:\n    # a_n = a_1 + (n-1)d, where a_1 is the first term and d is the common difference\n    next_term = first_term + (term_to_find - 1) * common_difference\n\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # Given the pattern in operations, one can assume the operation \"◈\" means multiplication followed by subtraction of the multiplication of digits of the first number.\n    # 4◈7 = 4*7 - (4) = 28 - 4 = 24\n    # 6◈22 = 6*22 - (6*2*2) = 132 - 24 = 108 (realizing that the operation subtracts the product of all digits of the first number)\n    # 8◈30 = 8*30 - (8*3*0) = 240 - 0 = 240 (recognizing that zero digit makes the subtraction part zero, hence a mistake in the given pattern 8◈30 should be 240 not 26)\n    \n    # To follow the same operation for 9◈20:\n    result = 9 * 20 - (9*2*0)\n    return result\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 10):     # Since 9/A < 1, A must be greater than 9.\n        if 5/9 < 9/A < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    needed_loafs = 35\n\n    cups_needed = needed_loafs / loafs_per_cup\n\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    num_friends = 4\n    cards_sent_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n    total_students = 39\n    equation1 = Eq(boys / 4, girls * 2 / 5)\n    equation2 = Eq(boys + girls, total_students)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n    difference = solutions[boys] - solutions[girls]\n\n    return difference\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    tanya_left = 3\n    tanya_right = 5\n\n    total_members = tanya_left + tanya_right + 1  # +1 for Tanya herself\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from sympy import symbols, Eq, solve, Integer\n\n    # Define the symbols\n    D, A, R, T, C = symbols('D A R T C')\n\n    # Defining the equations\n    equation1 = Eq(D + A + R + T, 11)\n    equation2 = Eq(T + A + R + T, 12)\n    equation3 = Eq(C + A + R + T, 13)\n\n    # Since they must be integers from 1 to 9 (0 is not allowed), we can use a brute force approach\n    solutions = []\n    for d in range(1, 10):\n        for a in range(1, 10):\n            for r in range(1, 10):\n                for t in range(1, 10):\n                    for c in range(1, 10):\n                        # Make sure all variables are different\n                        if len({d, a, r, t, c}) == 5:\n                            eq1 = d + a + r + t == 11\n                            eq2 = t + a + r + t == 12\n                            eq3 = c + a + r + t == 13\n                            if eq1 and eq2 and eq3:\n                                solutions.append((a, r, t))\n    \n    # Find the solution with the largest possible value of A + R + T\n    largest_value = max(sum(triple) for triple in solutions)\n    return largest_value\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n\n    # Starting from the largest 4-digit number which is 9999\n    # and moving downwards, check if the number is a factor of 87878\n    # and is a prime number.\n    for i in range(9999, 1000, -1):\n        if 87878 % i == 0:\n            if i in primerange(1, i + 1):\n                return i\n\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    distance1 = 280\n    speed1 = 7\n    time1 = distance1 / speed1\n    \n    distance2 = 400\n    speed2 = 5\n    time2 = distance2 / speed2\n    \n    distance3 = 800 - distance1 - distance2\n    speed3 = 8\n    time3 = distance3 / speed3\n    \n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5  # Total weight of all crates\n    max_load_per_van = 12  # Maximum load one van can carry\n\n    # Calculate number of vans needed, using the ceiling of the division to get an integer\n    num_vans = -(-total_weight // max_load_per_van)\n\n    return num_vans\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the initial number of stickers Daniel had\n    d = symbols('d') \n    \n    # After giving away and buying stickers\n    daniel_stickers = d - 24\n    patrick_stickers = d + 10\n    \n    # Equation for Patrick having twice as many stickers as Daniel \n    equation = Eq(patrick_stickers, 2 * daniel_stickers)\n    \n    # Solve for d\n    result = solve(equation, d)\n    \n    return result[0]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    ways = [[i, j, k, l, m] for i in range(6) for j in range(6) for k in range(6) for l in range(6) for m in range(6) if i + j + k + l + m == 5]\n    clean_ways = [sorted(way) for way in ways if 0 not in way]\n    unique_ways = set(tuple(way) for way in clean_ways)\n    return len(unique_ways)\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + (3 * henry_situps)\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = 82\n    plane_height = 569\n    vertical_distance = whale_depth + plane_height\n    \n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # The smallest number of girls who are right-handed would be if all the non-right-handed\n    # pupils were girls.\n    not_right_handed = total_pupils - right_handed\n    \n    # The maximum number of girls who could be not right-handed is equal to the total number of girls\n    # unless there aren't enough non-right-handed pupils, in which case it's the number of non-right-handed pupils.\n    max_not_right_handed_girls = min(girls, not_right_handed)\n    \n    # The total number of girls minus the maximum number that could be not right-handed\n    # gives the smallest number that are right-handed.\n    min_right_handed_girls = girls - max_not_right_handed_girls\n    \n    return min_right_handed_girls\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n    apples = 2 / 3 * total_fruits\n    bananas = 1 / 9 * total_fruits\n    lemons = total_fruits - apples - bananas\n    \n    equation = Eq(apples - lemons, 12)\n    solved = solve(equation, total_fruits)\n\n    lemons_count = lemons.subs(total_fruits, solved[0])\n\n    return int(lemons_count)\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_worker_per_day = 6\n    total_skirts = 0\n    for day in range(1, 10):\n        workers = day\n        daily_skirts = workers * skirts_per_worker_per_day\n        total_skirts += daily_skirts\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n    return qiqi_pizza\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n\n    probability_over_25 = (probability_over_25_given_over_20 / probability_over_20)\n    \n    return probability_over_25\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    rate_per_tap_per_minute = 1 / (5 * 2)  # Liters per minute for one tap\n    time_for_500ml_one_tap = 0.5 / rate_per_tap_per_minute  # Time to fill 500ml with one tap\n    return time_for_500ml_one_tap\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    total_erasers = 246\n    more_erasers = 32\n\n    brother_erasers = (total_erasers - more_erasers) // 2\n    \n    return brother_erasers\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    min_diff = float('inf')  # initialize with infinite\n\n    # Generate all permutations of numbers 1-9\n    from itertools import permutations\n    all_permutations = list(permutations([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n    for perm1 in all_permutations:\n        for perm2 in all_permutations:\n            if perm1 != perm2:  # Make sure the two permutations are different\n                num1 = int(''.join(map(str, perm1)))\n                num2 = int(''.join(map(str, perm2)))\n                diff = abs(num1 - num2)\n                if diff < min_diff:  # Check if the difference is smaller than the current min difference\n                    min_diff = diff\n\n    return min_diff\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    return sum([1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29])\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if (a * a) + (a + a) == 399:\n            return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    difference = 20   # The difference in height between Ben and Sally in cm\n\n    sally_height = ben_height + difference\n\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_visitors = symbols('total_visitors')\n    children = 3/5 * total_visitors\n    remaining = total_visitors - children\n    men = 1/2 * remaining\n    \n    equation = Eq(children, men + 140)\n    \n    solved = solve(equation, total_visitors)\n    \n    return solved[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    all_perms = list(permutations(digits, 3))\n    max_sum = 0\n    for i in range(len(all_perms)):\n        for j in range(i+1, len(all_perms)):\n            num1 = int(''.join(map(str, all_perms[i])))\n            num2 = int(''.join(map(str, all_perms[j])))\n            if len(set(str(num1) + str(num2))) == 6:  # Ensure all digits used once\n                max_sum = max(max_sum, num1 + num2)\n    return max_sum\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_volume = 2000  # millilitres in a 2 litre bottle\n    amount_drank = 350   # millilitres drank\n\n    amount_left = total_volume - amount_drank\n\n    return amount_left\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    percentage = 40 / 100\n    total = 3280\n    result = percentage * total\n    return result\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # The amount of grass a horse eats per day is 4 times a sheep.\n    # So, 20 horses eat as much as 20*4 = 80 sheep would in 12 days.\n    # This means 80 sheep would also eat all the grass in 12 days.\n    \n    # Let's calculate the daily grass consumption rate by both horses and sheep.\n    horse_rate = 1 / (20 * 12)  # The rate at which 1 horse eats grass per day.\n    sheep_rate = 1 / (60 * 24)  # The rate at which 1 sheep eats grass per day.\n    \n    # Since, 1 horse eats as much as 4 sheep:\n    # horse_rate = 4 * sheep_rate\n    # Therefore, we can equate and find the exact values of horse_rate and sheep_rate.\n    sheep_rate = horse_rate / 4\n    \n    # Now, let's find out how long 12 horses and 88 sheep can eat.\n    combined_rate = (12 * horse_rate) + (88 * sheep_rate)\n    \n    # The combined rate is how much of the grassland they eat per day, so the number of days\n    # to eat all the grass is the reciprocal of this rate.\n    days = 1 / combined_rate\n    \n    return days\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Analyzing the given sequence:\n    # 1 (7 added) => 8\n    # 8 (8 added) => 16\n    # 16 (7 added) => 23\n    # 23 (23 added) => 46\n    # 46 (7 added) => 53\n    \n    # From the pattern, we observe that the sequence is alternating between adding 7 and doubling the previous number.\n    # Hence, the next operation should be doubling the last number 53.\n\n    ans = 53 * 2  # Doubling the last number in the sequence\n    return ans\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, pool = symbols('a b c pool')\n\n    # Equation representing when A and C are turned on\n    equation1 = Eq(a + c, pool)\n    \n    # Since 18 tons are from A when A and C are turned on\n    equation2 = Eq(a, 18)\n\n    # Equation representing when B and C are turned on\n    equation3 = Eq(b + c, pool)\n    \n    # Since 27 tons are from B when B and C are turned on\n    equation4 = Eq(b, 27)\n\n    # Given that the flow rate of B is twice that of A\n    equation5 = Eq(b, 2 * a)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (a, b, c, pool))\n\n    return solutions[pool]\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    pay_per_match = 500\n    pay_per_goal = 100\n    num_matches = 20\n    goals_per_match = 2\n\n    total_pay = (pay_per_match * num_matches) + (pay_per_goal * goals_per_match * num_matches)\n\n    return total_pay\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_kilograms = 8\n    cost_per_kilogram = total_cost / total_kilograms\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "def solution():\n    # Since MATH and HTAM are 4-digit numbers and their sum is 12221,\n    # it cannot just be a simple addition. The last digits of MATH and HTAM,\n    # when added, must be giving a carry over.\n    # Thus, M and H must be such that H+M is more than 10.\n\n    # Also, the maximum value for MATH and HTAM can be if M and H are 9,\n    # which is 9999. Adding two such numbers still won't reach 12221, which\n    # means there must be a carry over from the addition occurring at T+A.\n\n    # We can loop through all possible values of M, A, T, H under these constraints\n    # and check for when the condition is satisfied.\n\n    for M in range(1, 10):  # M cannot be 0 as it's a 4-digit number\n        for A in range(10):\n            for T in range(10):\n                for H in range(1, 10):  # H cannot be 0 as it's a 4-digit number\n                    if len({M, A, T, H}) == 4:  # Check that all digits are different\n                        MATH = M*1000 + A*100 + T*10 + H\n                        HTAM = H*1000 + T*100 + A*10 + M\n                        if MATH + HTAM == 12221:\n                            return A + M + T + H\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    num = 1\n    times = 10\n    ans = sum(range(num, num + 2 * times, 2))\n    return ans\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # No leading zeros, 900 possible numbers\n    \n    # Count numbers with no 7 at all: _ _ _\n    no_sevens = 8 * 9 * 9  # 8 choices for the hundreds, 9 each for tens and units\n    \n    # Count numbers with exactly one 7: 7 _ _, _ 7 _, _ _ 7\n    one_seven = 3 * 8 * 9  # Three positions to put one 7, 8 choices for remaining non-seven places\n    \n    # Total numbers with at least two sevens is the complement\n    at_least_two_sevens = total_three_digit_numbers - no_sevens - one_seven\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    cost_per_box = 19.20\n    number_of_balls = 16\n    cost_per_ball = cost_per_box / number_of_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of $2 notes\n    # let y be the number of $5 notes\n    x, y = symbols('x y')\n\n    # Cindy had a total of 55 pieces of notes at first\n    equation1 = Eq(x + y, 55)\n\n    # She spent 1/3 of the number of $2 notes\n    equation2 = Eq(y + 8, (3/7) * (x - x/3 + y + 8))\n\n    # Now solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Total amount of money at first (2 dollar notes * x + 5 dollar notes * y)\n    total_money = 2 * solutions[x] + 5 * solutions[y]\n\n    return total_money\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "def solution():\n    from math import factorial as fact\n    \n    # Mr. Spencer (S) sits between his 2 children (C1 and C2), which we can treat as a block.\n    # Since there are 3 seats left, we can treat the block (SC1C2) and 3 other people (P1, P2, P3)\n    # as 4 entities to arrange.\n    arrangements_of_4 = fact(4)\n    \n    # Within the block (SC1C2), Mr. Spencer can sit in 2 different places (left or right of the child).\n    arrangements_within_block = 2\n    \n    # The 3 other people can be arranged in 3! different ways.\n    arrangements_of_3_people = fact(3)\n    \n    # Total arrangements\n    ans = arrangements_of_4 * arrangements_within_block * arrangements_of_3_people\n\n    return ans\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2\n    sweets_left = total_sweets - sweets_eaten\n    sweets_given_away = sweets_left / 3\n    sweets_remaining = sweets_left - sweets_given_away\n\n    return int(sweets_remaining)\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    num1 = 1.9\n    num2 = 1.99\n    \n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_questions = 6\n    correct_mark = 5\n    wrong_mark = -2\n    total_score = 23\n\n    # Assume that x questions are answered correctly\n    # then, (total_questions - x) questions are answered incorrectly\n    for x in range(total_questions + 1):\n        score = x * correct_mark + (total_questions - x) * wrong_mark\n        if score == total_score:\n            return x\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    # Decompose the numbers 24 and 52 into their prime factors\n    prime_factors_24 = [2, 2, 2, 3]  # 2^3 * 3^1\n    prime_factors_52 = [2, 2, 13]    # 2^2 * 13^1\n\n    # Initialize A and C to be large numbers that will be minimized\n    A = float('inf')\n    C = float('inf')\n\n    # Find all divisors of 24 and for each pair (A, B) check if B is also a factor of 52\n    for i in range(1, 25):\n        if 24 % i == 0:  # check if i is a factor of 24\n            B = 24 // i  # derive B from A and 24\n            if 52 % B == 0:  # check if B is also a factor of 52\n                # Calculate C\n                C_candidate = 52 // B\n                # Update A and C if this pair gives a smaller A + C\n                if i + C_candidate < A + C:\n                    A = i\n                    C = C_candidate\n\n    # The smallest possible value of A + C is then the sum of the minimized A and C\n    ans = A + C\n    return ans\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # in meters\n    speed = 7      # in meters per minute\n    time = distance / speed  # time in minutes\n    return int(time)\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B, C as one unit and E, F as another unit\n    # Now we have 6 units to arrange (A, B, C), D, G, H, (E, F)\n    units_factorial = factorial(6)\n    \n    # Now, A, B, C can be arranged among themselves in 3! ways\n    abc_arrangements = factorial(3)\n    \n    # E, F can be arranged in 2! ways\n    ef_arrangements = factorial(2)\n\n    # Multiplying all possibilities together\n    total_arrangements = units_factorial * abc_arrangements * ef_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result = 18\n    subtracted_result = result - 7\n    original_number = subtracted_result * 3\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    nth_odd_number = 1 + (20 - 1) * 2\n    return nth_odd_number\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    # Let the daily production of scarfs be 'x'\n    # Then the total production 'total' equals 6 * x\n    # If she produces 24 more scarfs per day, the new daily production is 'x + 24'\n    # In this case, the total production still remains the same, which is 6 * x\n    # But now she finishes in (6 - 2) days, that is in 4 days. So, we have the equation:\n    # 6 * x = 4 * (x + 24)\n    \n    # Solving for 'x'\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    x = symbols('x')\n    \n    # Set up the equation according to the problem statement\n    equation = Eq(6 * x, 4 * (x + 24))\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Calculate the total number of scarfs\n    total_scarfs = 6 * solution[0]\n\n    return total_scarfs\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the number of students\n    x = symbols('x')\n\n    # Equation 1: 6x - total_sweets = -26\n    # Equation 2: 5x - total_sweets = -5\n    # Solve the system of equations\n    equation1 = Eq(6 * x - (-26), 0)\n    equation2 = Eq(5 * x - (-5), 0)\n\n    solution = solve((equation1, equation2), x)\n    total_sweets = 6 * solution[x] - 26\n\n    return total_sweets\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    initial_ratio = Eq(boys/girls, 5/3)\n    new_ratio = Eq((boys - 15)/girls, 5/6)\n\n    solutions = solve((initial_ratio, new_ratio), (boys, girls))\n\n    total_pupils = solutions[boys] + solutions[girls]\n\n    return total_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):\n            x3 = 15 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 16, 2))\n    return series_sum\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    A = 675\n    factors = [2, 3, 5]  # prime factors of 675 (3^3 * 5^2)\n\n    # Representation of the square is 2^2n, 3^2m, 5^2k, where k, m, n are non-negative integers\n    # We need to multiply A by a number B such that A * B is a square\n    # Thus, B must contain 3^1 to complete the pair to 3^4 and 5^0 to complete the pair to 5^2\n    # No need for 2 since it's not a factor of A\n\n    B = 3  # Smallest possible value for B to complete the square with 675\n    return B\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_frac = 1/3\n    original_price = sale_price / (1 - discount_frac)\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    current_age_shelby = 65\n    age_difference = current_age_shelby - 5  # Shelby's age 5 years ago\n    age_josh_five_years_ago = (3/5) * age_difference\n\n    # Josh's current age is 5 years more than his age 5 years ago\n    current_age_josh = age_josh_five_years_ago + 5\n\n    return int(current_age_josh)\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    product = 10 * 20 * 30 * 40\n    return product\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_price_pence = 695\n    single_can_price_pence = 65\n    cost_of_12_individual_cans = 12 * single_can_price_pence\n    savings = cost_of_12_individual_cans - multipack_price_pence\n    return savings\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's as B and Carl's as C.\n    # We have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    # Adding all three equations, we get:\n    # 2(A + B + C) = 102 + 97 + 93\n    # A + B + C = (102 + 97 + 93) / 2\n\n    total_weight = (102 + 97 + 93) / 2\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # Let the total work be represented by the number of rooms to paint, which is 1.\n    # If Alan and Bob can paint a room in 4 hours, their combined work rate is 1 room per 4 hours.\n    combined_work_rate = 1 / 4\n\n    # Bob can paint a room in 6 hours on his own, so his individual work rate is 1 room per 6 hours.\n    bob_work_rate = 1 / 6\n\n    # Alan's work rate is the difference between the combined rate and Bob's rate.\n    alan_work_rate = combined_work_rate - bob_work_rate\n\n    # The time it would take for Alan to paint a room on his own is the reciprocal of his work rate.\n    alan_time = 1 / alan_work_rate\n\n    return alan_time\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    ans = 55 / 100 * 80\n    return ans\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500  # initial amount\n    rate_of_interest = 0.08  # interest rate\n    time = 10  # number of years\n\n    # Given the approximation\n    # Instead of calculating 1.08 ** 10, we can directly use the given approximation\n    compound_interest_factor = 2.16\n\n    account_balance = principal * compound_interest_factor\n\n    return account_balance\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    total_count = 0\n\n    # count numbers with four digits starting with \"3\"\n    # the first digit can only be '3', so there are 0 options\n    # the second digit can be from '2, 4, 5, 6', so there are 4 options\n    # the third digit can be any of the remaining numbers, so there are 3 options\n    # the last digit can be any of the remaining numbers, so there are 2 options\n    total_count += 1 * 4 * 3 * 2\n\n    # count numbers with four digits starting with \"4\", \"5\", or \"6\"\n    # the first digit can be '4', '5' or '6', so there are 3 options\n    # the second digit can be any of the remaining numbers, so there are 4 options\n    # the third digit can be any of the remaining numbers, so there are 3 options\n    # the last digit can be any of the remaining numbers, so there are 2 options\n    total_count += 3 * 5 * 4 * 3\n\n    # count numbers with four digits starting with \"32\", \"33\", \"34\", \"35\", or \"36\"\n    # the first two digits can be '32', '33', '34', '35', '36', so there are 5 options\n    # the third digit can be any of the remaining numbers, so there are 3 options\n    # the last digit can be any of the remaining numbers, so there are 2 options\n    total_count += 5 * 4 * 3  # \"3267\" as a start point is already counted\n\n    return total_count\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    ans = 10024 + 3968\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "from math import gcd\n\ndef solution():\n    a = 84\n    b = 108\n    highest_common_factor = gcd(a, b)\n    return highest_common_factor\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food_consumption = 15\n    number_of_weeks = 26\n\n    total_food_needed = weekly_food_consumption * number_of_weeks\n\n    return total_food_needed\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n    equation = Eq(score - 30, (score / 2) + 10)\n\n    solutions = solve(equation, (score))\n\n    return solutions[0]\n    \nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    votes_for_mark = 22\n    votes_for_nicole = 27\n    votes_for_peter = 35\n\n    votes_remaining = total_votes - (votes_for_mark + votes_for_nicole + votes_for_peter)\n    max_votes_other_can_get = max(votes_for_mark, votes_for_nicole)\n\n    votes_needed_for_peter = max_votes_other_can_get + 1 - votes_for_peter\n    votes_needed_total = votes_needed_for_peter + votes_remaining\n\n    return votes_needed_total // 2 + 1\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x') # Let x be the initial amount of money both had\n\n    # Set up the equation accounting for their expenditures and the given multiple\n    equation = Eq((x - 13), 6 * (x - 58))\n\n    # Solve for x\n    initial_amount = solve(equation, x)\n\n    # Calculate the total amount they had at the beginning, which is x (for Alex) plus x (for Nicholas)\n    total = initial_amount[0] * 2\n\n    return total\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - 6*6 - 8*6\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_later = 28\n    days_in_week = 7\n\n    remainder_days = days_later % days_in_week\n\n    # Assuming: Monday -> 0001, Tuesday -> 0002, ..., Sunday -> 0007\n    # Since today is Monday (0001), and 28 days later is 4 weeks exactly,\n    # it will be Monday again. So the answer is 0001.\n    return '0001'\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    initial_flour = 600\n    remaining_flour = 21\n    used_flour = initial_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a = 9 ** (3/2)\n    return a\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    value_of_6 = 6 * (10**-3)\n    return value_of_6\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n\n    number_of_poles = (road_length - interval) // interval\n\n    return number_of_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    pencils_plus_rulers = 52\n    pencil_more_than_rulers = 10\n    \n    rulers = (pencils_plus_rulers - pencil_more_than_rulers) / 2\n    return int(rulers)\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean_value = 11\n    total_numbers = 5\n\n    sum_of_numbers = mean_value * total_numbers\n    sum_current = sum(numbers)\n    x_value = sum_of_numbers - sum_current\n\n    return x_value\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    value1 = 7 * 10**3  # The value of the first 7 (in the thousands place)\n    value2 = 7 * 10**1  # The value of the second 7 (in the tens place)\n    difference = value1 - value2\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # Taking the worst-case scenario for each color\n    # Take 3 reds, still not guaranteed to have 4 of the same\n    # Take 3 yellows, still not guaranteed to have 4 of the same\n    # Next marble will either create a set of 4 reds, 4 yellows or be blue.\n    # If it's blue, we then take 3 more blues to be sure\n    marbles_needed = 3 + 3 + 1 + 3  # Red + Yellow + Next + Blue if Next is not blue\n    return marbles_needed\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    girls_ratio = 6\n    total_boys = 200\n\n    girls = (total_boys / boys_ratio) * girls_ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    decimal_part = '3' * 1000\n    ans = sum(int(digit) for digit in decimal_part)\n    return ans\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    return 0.15 * 29\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original concentration\n    original_concentration = symbols('c')\n\n    # Calculate the concentration after each transfer\n    # After putting solution into A\n    conc_A = (10 * original_concentration) / (30 + 10)\n    # After taking 10 grams from A to B\n    conc_B = (10 * conc_A) / (40 + 10)\n    # After taking 10 grams from B to C\n    conc_C = (10 * conc_B) / (50 + 10)\n\n    # Set up the equation based on the final concentration in C\n    equation = Eq(conc_C, 0.005)\n\n    # Solve the equation for the original concentration\n    original_conc_solution = solve(equation, original_concentration)\n\n    return original_conc_solution[0]\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    # Start from 2 and count by twos until 100\n    # Each number counted is a multiple of 2\n    # Thus, to find the number of multiples of two from 2 to 100\n    # We just need to find the number of even numbers from 2 to 100\n\n    start = 2\n    end = 100\n    step = 2\n\n    crossed_out_multiples = (end - start) // step + 1\n\n    return crossed_out_multiples\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    # 4 * x - 13 = 55\n    # 4 * x = 55 + 13\n    # x = (55 + 13) / 4\n\n    ans = (55 + 13) / 4\n\n    return ans\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    ans = fraction + percentage + decimal\n\n    return ans\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "from sympy import divisors, gcd\n\ndef solution():\n    # Find the divisors of 2016 and 1377\n    divisors_2016 = divisors(2016)\n    divisors_1377 = divisors(1377)\n\n    for div in divisors_2016:\n        if div + 1 in divisors_1377:\n            age2 = div\n            age1 = div + 1\n            age3_factor = 2016 // (age1 * age2)\n            if (age3_factor + 1) * (age2 + 1) * (age1 + 1) == 1377:\n                age3 = age3_factor\n                break\n    \n    # The ages 2 years ago would be one less than last year\n    product_two_years_ago = (age1 - 1) * (age2 - 1) * (age3 - 1)\n    return product_two_years_ago\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    # Total number of people is 5. Two want to stand next to each other,\n    # we can consider them as a single entity. So, we have effectively 4 entities to arrange.\n    # These can be arranged in 4! ways.\n    # The two people who want to stand next to each other can be arranged among themselves in 2! ways. \n    # Therefore, the total number of ways is 4! * 2!.\n    from math import factorial\n    return factorial(4) * factorial(2)\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_first_three_days = 33\n    average_last_four_days = 18\n    total_last_four_days = average_last_four_days * 4\n    total_week = total_first_three_days + total_last_four_days\n    average_per_day = total_week / 7\n    return average_per_day\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    mass_metal1 = 12  # in mg\n    nickel_percent1 = 40  # in %\n\n    mass_metal2 = 13  # in mg\n    nickel_percent2 = 60  # in %\n\n    nickel_mass1 = (nickel_percent1 / 100) * mass_metal1\n    nickel_mass2 = (nickel_percent2 / 100) * mass_metal2\n    total_nickel_mass = nickel_mass1 + nickel_mass2\n\n    total_mass = mass_metal1 + mass_metal2\n    nickel_concentration = (total_nickel_mass / total_mass) * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament, each player plays against every other player exactly once.\n    # With 8 players, each player plays 7 matches (since they don't play against themselves).\n    \n    # If everyone scores a different number of wins and there are no ties,\n    # the possible number of wins are 0, 1, 2, 3, 4, 5, 6, 7.\n    # This is because a player can win between 0 to all of their matches.\n    \n    # Since no two players can have the same number of wins the player with the most wins will be the champion.\n    # The champion will have 7 wins because they won all their matches.\n    \n    return 7\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    numer = 15\n    denom = 1/7\n\n    ans = numer / denom\n\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    def sum_of_n_numbers(n):\n        return n * (n + 1) // 2\n    \n    n = 1\n    while sum_of_n_numbers(n) <= 3405:\n        if sum_of_n_numbers(n) + n == 3405:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Number of terms for different partial sums\n    n_6 = 6\n    n_12 = 12\n    n_18 = 18\n\n    # Given sums of the sequences\n    S_6 = 64\n    S_12 = 156\n\n    # The sum of an arithmetic sequence can be calculated by the formula\n    # S_n = n/2 * (2a + (n - 1)d), where\n    # S_n is the sum of the first n terms, a is the first term, and d is the common difference\n\n    # We need to find a and d using the two given partial sums\n    # S_6 = (n_6/2) * (2a + (n_6 - 1)d) = 64\n    # S_12 = (n_12/2) * (2a + (n_12 - 1)d) = 156\n\n    # We can have two equations with two unknowns (a and d), and solve them\n    # 6/2 * (2a + 5d) = 64\n    # 12/2 * (2a + 11d) = 156\n\n    # Simplifying the two equations:\n    # 3 * (2a + 5d) = 64\n    # 6 * (2a + 11d) = 156\n\n    # Dividing both sides of the second equation by 2 for easier comparison with the first:\n    # 6 * (2a + 5d) = 64\n    # 6 * (2a + 11d) = 156\n\n    # Let's subtract the first equation from the second to eliminate 'a' and solve for 'd'\n    # 6d = 156 - 64\n    # 6d = 92\n    d = 92 / 6\n\n    # Now let's solve for 'a' using the first equation (3 * (2a + 5d) = 64)\n    # 6a + 15d = 64\n    a = (64 - 15 * d) / 6\n\n    # Now that we have 'a' and 'd', we can find S_18\n    S_18 = (n_18 / 2) * (2 * a + (n_18 - 1) * d)\n\n    return S_18\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    # Let c be the number of chickens and p be the number of pens initially.\n    # Initially, we have p = 24\n    # After adding 6 pens, we have p + 6 = 24 + 6 = 30\n    # If the number of chickens per pen dropped by 6, then:\n    # c / 24 - c / 30 = 6\n    # Solving for c gives us the total number of chickens.\n\n    initial_pens = 24\n    new_pens = initial_pens + 6\n    decrease_per_pen = 6\n\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n\n    equation = Eq(c / initial_pens - c / new_pens, decrease_per_pen)\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n    for divisor in range(1, 40 - remainder + 1):\n        for quotient in range(1, (40 - divisor - remainder) + 1):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math_club = 146 + 94\n    ratio_history_to_math = 7 / 8\n    total_history_club = total_math_club * ratio_history_to_math\n    return int(total_history_club)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Since the numbers on Zog are written in reverse,\n    # let's reverse the numbers back to Earth's order to perform the operation.\n    # The first number is 729 on Zog, which is 927 in Earth's order,\n    # and the second number is 26 on Zog, which is 62 in Earth's order.\n    \n    # Subtract the second number from the first in Earth's order.\n    result_earth_order = 927 - 62\n\n    # Now we need to reverse the result to get the answer in Zog's order.\n    # Convert the result to a string, reverse it, and convert it back to integer.\n    result_zog_order = int(str(result_earth_order)[::-1])\n\n    return result_zog_order\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n\n    num1 = 45\n    num2 = 60\n\n    ans = gcd(num1, num2)\n\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    brother_age_then = (ashley_age - 3) - 2\n    brother_age_now = brother_age_then + 3\n    return brother_age_now\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    time_to_pass = 30\n    train_speed = 20\n\n    # Distance covered by the train in 30 seconds\n    distance_covered = train_speed * time_to_pass\n    # Length of the bridge\n    bridge_length = distance_covered - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n    additional_marks = hebe_score - emily_score\n\n    return additional_marks\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Time spent jogging (from 6:30am to 7:00am) = 30 minutes = 0.5 hour\n    jogging_time = 0.5\n    jogging_speed = 9  # Speed while jogging in km/h\n\n    # Distance covered while jogging\n    jogging_distance = jogging_time * jogging_speed\n\n    # Time spent walking (from 7:00am to 8:00am) = 1 hour\n    walking_time = 1\n    walking_speed = 7.5  # Speed while walking in km/h\n\n    # Distance covered while walking\n    walking_distance = walking_time * walking_speed\n\n    # Total distance covered is the sum of distances covered while jogging and walking\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    return 0.23 + 1.9 + 0.083\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 choices for the first digit (it can't be 0)\n    # There are 3 choices for the second digit (0, 3, or 4)\n    # There are 3 choices for the third digit (0, 3, or 4)\n    # Multiplying these choices together gives the total number of different three-digit numbers\n    ans = 2 * 3 * 3\n    return ans\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wins, losses = symbols('wins losses')\n    total_games = 63\n\n    # Equation representing twice as many wins as losses\n    equation1 = Eq(wins, 2 * losses)\n\n    # Equation representing the total number of games\n    equation2 = Eq(wins + losses, total_games)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wins, losses))\n\n    return solutions[losses]\n\nans = solution()\n```\"\""
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    diff = 55 - 44\n    ans = common_factor * diff\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define symbols for the number of cows (c) and goats (g) initially\n    c, g = symbols('c g')\n\n    # equation (1) for initial percentage of cows\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # equation (2) for the total number of animals after adding 240 more\n    equation2 = Eq(c + g + 240, c + 2*g)\n\n    # equation (3) given that the percentage of cows has increased by 20%\n    equation3 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    # There are factorial(3) ways to order the 3 girls as they have to stand together.\n    girl_permutations = factorial(3)\n\n    # Now we treat the girls as a single entity, along with the 3 teachers, making 4 entities.\n    # So we can arrange these 4 entities in factorial(4) ways.\n    entity_permutations = factorial(4)\n\n    # For the 3 boys, we have 5 possible spaces to place them without them being adjacent:\n    # _ G _ T _ T _ T _, where G represents the group of girls and T represents a teacher.\n    # We can choose 3 places out of these 5 to place the boys, which is C(5, 3).\n    boy_places = factorial(5) // (factorial(3) * factorial(5 - 3))\n\n    # For each placement, the boys themselves can be arranged in factorial(3) ways.\n    boy_permutations = factorial(3)\n\n    # Multiply all possibilities together for the final answer.\n    ans = girl_permutations * entity_permutations * boy_places * boy_permutations\n\n    return ans\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # Calculate the area of Triangle X using Heron's formula\n    s_x = (3 + 3 + 3) / 2   # semi-perimeter of Triangle X\n    area_x = (s_x * (s_x - 3) * (s_x - 3) * (s_x - 3)) ** 0.5\n    \n    # Calculate the area of Triangle Y using Heron's formula\n    s_y = (9 + 9 + 9) / 2   # semi-perimeter of Triangle Y\n    area_y = (s_y * (s_y - 9) * (s_y - 9) * (s_y - 9)) ** 0.5\n    \n    # Calculate how many times Triangle X fits into Triangle Y\n    ans = area_y / area_x\n    return ans\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):  # Search through all three-digit numbers\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num  # Return the first number that satisfies the conditions\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_cost = Eq(5*x*12 + 3*x*5, 120)\n    solution = solve(total_cost, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    number_of_students = 5\n    number_to_choose = 2\n    ans = comb(number_of_students, number_to_choose)\n    return ans\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    large_product = 8 * 9 * 10\n    small_product = 1 * 2 * 3\n    difference = large_product - small_product\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soups = 2  # considering soup as optional: choose to have it or not\n    desserts = 3  # considering dessert as optional: choose to have it or not\n    \n    combinations = appetisers * main_courses * soups * desserts\n    return combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    for children in range(100, 201):\n        if children % 8 == 3 and children % 9 == 1:\n            return children\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    # Let the number of blue balls be 'b'.\n    \n    # Total number of balls = 4 red + b blue.\n    total_balls = 4 + b\n\n    # The probability of picking two red balls without replacement is:\n    # (number of ways to pick 2 red balls) / (number of ways to pick any 2 balls)\n    # This is given as 2/7, so we set the equation:\n    # (4/total_balls) * (3/(total_balls - 1)) = 2/7\n\n    # Now we solve this equation for 'b'. We can multiply by (total_balls) * (total_balls - 1) to get rid of the denominators:\n    # 4 * 3 = 2/7 * (total_balls) * (total_balls - 1)\n    # 12 = 2/7 * (total_balls) * (total_balls - 1)\n    # 12 = 2/7 * (4 + b) * (3 + b)\n    # Multiply both sides by 7 to get rid of the fraction:\n    # 84 = 2 * (4 + b) * (3 + b)\n    # Divide both sides by 2:\n    # 42 = (4 + b) * (3 + b)\n    \n    # Now we have a quadratic equation:\n    # b^2 + 7b + 12 - 42 = 0\n    # b^2 + 7b - 30 = 0\n    \n    # Solve the quadratic equation for b\n    from sympy import symbols, Eq, solve\n\n    b = symbols('b')\n    equation = Eq(b**2 + 7*b - 30, 0)\n    \n    # Solve for 'b' and take the positive solution because the number of blue balls cannot be negative\n    solutions = solve(equation, b)\n    blue_balls = [sol for sol in solutions if sol > 0][0]\n\n    return blue_balls\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    # Arithmetic sequence information\n    first_term = 6\n    last_term = 41\n    common_difference = 5\n    \n    # Number of terms in the sequence\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    \n    # Sum of the arithmetic sequence\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # The fraction of the cake that was left after the family ate is 1 - 3/5 = 2/5\n    # Let the original number of slices be x\n    # Terry gave away 2 slices and had 4 slices left, so the remaining cake should be 2/5 of the total slices\n    # So, (2 + 4) / x = 2/5\n    # 6/x = 2/5\n    # x = 6 * 5 / 2\n    # x = 15\n    # The original number of slices is 15\n    return 15\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let danny's time to finish the job be x hours\n    mike, danny = symbols('mike danny')\n\n    # Equation 1: 1/mike + 1/danny = 1/10 for working together\n    equation1 = Eq(1/mike + 1/danny, 1/10)\n\n    # Equation 2: mike works for 8 hours and danny for 13 hours to complete the job\n    # So, 8/mike + 13/danny = 1 (since they finish the job)\n    equation2 = Eq(8/mike + 13/danny, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mike, danny))\n\n    return solutions[danny]\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_1 = 3 * 10**2  # The place value of the 3 in the hundreds\n    place_value_2 = 3 * 10**5  # The place value of the 3 in the hundred thousands\n\n    difference = place_value_2 - place_value_1\n    return difference\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    pencils = 7\n    cases = 2\n    min_pencils = (pencils + cases - 1) // cases  # Pigeonhole principle formula\n    return min_pencils\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    b = 10\n    sum_b = (b * (b + 1)) // 2  # Sum of first 10 natural numbers\n    m = 66 - sum_b  # Since m⊕10 = m + (m+1) + ... + (m+10) = 66\n    return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    distance_between_chess = 3\n\n    # Since a chess is placed at each corner we have to subtract the corners\n    # to avoid counting them twice (once for each side they touch)\n    chess_per_side = (side_length // distance_between_chess) - 1\n\n    # There are 4 sides to the board, but we need to add back the 4 corners we subtracted\n    total_chess = (chess_per_side * 4) + 4\n\n    return total_chess\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "def solution():\n    from math import factorial\n\n    # 2^27 = 2^3 * 3 * 3 * 3 * 3 = (2 * 4 * 4 * 4 * 4) only even digits are 2,4,6,8\n    # There can be 7 2's and four additional digits that are 2, 4, 6, or 8\n    # The additional digits that form the product 2^27 can be (2,2,2,2), (2,2,2,4), (2,2,4,4), (2,4,4,4) and (4,4,4,4)\n    # Consider the 10 digit number as a sequence of 'slots': _ _ _ _ _ _ _ _ _ _\n    # We need to place these fours in the 10 available slots\n    \n    cases = [(2,2,2,2), (2,2,2,4), (2,2,4,4), (2,4,4,4), (4,4,4,4)]\n    count = 0\n    \n    for case in cases:\n        slots = [0] * 10\n        # Place 7 2's in the remaining slots\n        for _ in range(7):\n            slots[_] = 2\n            \n        # Calculate the number of permutations of placing the additional digits in the remaining slots\n        remaining_slots = slots[7:]\n        # Create a list with indices of remaining empty slots\n        empty_slots_indices = [i for i, x in enumerate(remaining_slots) if x == 0]\n        # For each case, we're placing additional four digits in 3 available slots\n        for additional_digit in case:\n            empty_slot_index = empty_slots_indices.pop(0)\n            slots[7 + empty_slot_index] = additional_digit\n\n        # Count the number of available permutations without taking the additional digits order into account\n        unique_digits = set(case)\n        permutations = factorial(10) # 10 slots\n        for digit in unique_digits:\n            permutations //= factorial(case.count(digit)) # divide by the number of occurrences factorial\n        \n        # Avoid counting numbers starting with zero\n        if slots[0] != 0:\n            count += permutations\n    return count\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # If there are fewer than 5 of any digit, none will be painted red.\n    # The smallest number of red squares occurs when 4 digits occur the most times without reaching 5.\n    # That is, 4 occurrences for each of the largest number of distinct digits possible.\n    \n    # Since there are 100 squares and 10 possible digits (0-9),\n    # we want to maximize the number of digits that appear 4 times.\n    # The remaining digits will then occur less than 5 times and not contribute to the red squares.\n\n    # The maximum number of digits that can appear exactly 4 times is given by:\n    max_digits_with_4_occurrences = 100 // 4  # Integer division to find the maximum number of digits\n\n    # Any additional digits will have to appear fewer than 4 times, as we want the least red squares.\n    # These additional occurrences will not be painted red.\n    remaining_squares = 100 % 4\n\n    # The smallest possible number of red squares is then:\n    number_of_red_squares = max_digits_with_4_occurrences * 4\n\n    return number_of_red_squares\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = -4\n    term = first_term\n    num_terms = 0\n    \n    while term > 0:\n        term += difference\n        num_terms += 1\n\n    return num_terms\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent_amount = 2.89\n    received_amount = 4 / 5\n    \n    final_amount = initial_amount - spent_amount + received_amount\n    \n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):  # The square root of the smallest 4-digit number is 32 and of the largest is 99\n        num = i**2\n        str_num = str(num)\n        # Check if the first two and the last two digits are the same\n        if str_num[0] == str_num[1] and str_num[2] == str_num[3]:\n            return num\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    count = 0 \n    n = 1\n    while True:\n        n_factorial = 1\n        # Calculate n!\n        for i in range(1, n + 1):\n            n_factorial *= i\n        # Count the number of trailing zeros by checking factors of 5\n        temp = n_factorial\n        zero_count = 0\n        while temp % 10 == 0:\n            zero_count += 1\n            temp //= 10\n        if zero_count == 28:\n            break\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = 3 * m - 1 + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    combined_speed = 56 + 74  # km per hour\n    initial_distance = 780    # km\n    remaining_distance = 130  # km\n    distance_covered = initial_distance - remaining_distance\n\n    # Time is equal to distance divided by speed\n    time_hours = distance_covered / combined_speed\n\n    return time_hours\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = -1\n    net_distance = day_distance + night_distance\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n    \n    return days\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    return 6 - 4.226\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    known_numbers_sum = sum([3, 4, 6, 10])\n    total_mean = 5\n    total_numbers = 5\n    \n    total_sum = total_numbers * total_mean\n    fifth_number = total_sum - known_numbers_sum\n\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import lcm\n    return lcm(4, 7, 8)\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            consecutives = []\n            for digit in digits:\n                consecutives.append(int(digit))\n            consecutives.sort()\n            diffs = {consecutives[i+1] - consecutives[i] for i in range(len(consecutives)-1)}\n            if diffs == {1}:\n                count += len(set(permutations(str(year))))\n    return count\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 / 10\n    hundredths = 8 / 100\n    \n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    # The recurring decimal 0.8354 with 8 and 4 repeated can be considered a sequence\n    # The sequence of interest is the digits \"8354848484...\"\n    # Since there are 84 digits to consider, and \"84\" are the two repeating digits,\n    # we have 42 repetitions of \"84\" after the initial \"835\".\n    \n    # The sum of digits in \"835\" is 8 + 3 + 5\n    initial_sum = 8 + 3 + 5\n\n    # Each \"84\" repetition adds to the sum 8 + 4\n    repeated_pair_sum = 8 + 4\n\n    # There are 42 instances of \"84\"\n    total_repeated_sum = repeated_pair_sum * 42\n\n    # Adding the initial sum and the total sum of repeated pairs gives us the answer\n    total_sum = initial_sum + total_repeated_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    eddie_km = 15\n    jenny_km = 10\n    jason_km = 8\n    \n    total_km = eddie_km + jenny_km + jason_km\n    number_of_people = 3\n    \n    average_km = total_km / number_of_people\n    \n    return average_km\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # Each strike takes 3 seconds, so time between each successive strike is also 3 seconds.\n    # When it strikes 6 times, there are 5 intervals between the strikes.\n    # Therefore, we can calculate the additional time beyond the first strike.\n\n    intervals_for_6_strikes = 6 - 1\n    total_time_for_6_strikes = 43\n    first_strike_time = 3\n\n    # Calculate the total silent time during the 6 strikes\n    total_silent_time_for_6_strikes = total_time_for_6_strikes - (intervals_for_6_strikes + 1) * first_strike_time\n\n    # Calculate the total silent time for each interval (time between strikes)\n    silent_time_per_interval = total_silent_time_for_6_strikes / intervals_for_6_strikes\n\n    # For 12 strikes, calculate the number of intervals\n    intervals_for_12_strikes = 12 - 1\n\n    # Calculate the total silent time for 12 strikes\n    total_silent_time_for_12_strikes = silent_time_per_interval * intervals_for_12_strikes\n\n    # Calculate the total time for 12 strikes\n    total_time_for_12_strikes = (intervals_for_12_strikes + 1) * first_strike_time + total_silent_time_for_12_strikes\n\n    return total_time_for_12_strikes\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    # To find the number of ways to distribute 20 pens to 6 kids with each getting at least 1 pen,\n    # we can use the concept of stars and bars with n-1 bars separating n+k-1 stars,\n    # where n is the number of pens and k is the number of kids.\n    n = 20 - 6  # We start by giving 1 pen to each kid, and distribute the rest\n    k = 6 - 1   # One fewer bar than the number of kids\n    \n    # Calculate combinations for remaining pens (stars) and kids (bars)\n    ways = factorial(n + k) // (factorial(n) * factorial(k))\n    \n    return ways\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    m = 0\n    # Start iterating to find the possible value of m that leaves 5 students out\n    while True:\n        if ((m * m) + 5) % 18 == 0:\n            n_square = (m * m) + 5 + 18\n            if (int(n_square ** 0.5) ** 2) == n_square:\n                return m * m + 5\n        m += 1\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    people = 6\n    current_hours = 15\n    target_hours = 2\n    \n    # Assuming all people work at the same rate, the number of people needed is inversely proportional to the number of hours.\n    people_needed = people * (current_hours / target_hours)\n\n    return int(people_needed)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz_minutes = 30\n    total_quizzes = 4\n    total_time_minutes = time_per_quiz_minutes * total_quizzes\n    total_time_hours = total_time_minutes / 60\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    non_zero_three_digit_numbers = 9 * 9 * 8\n    at_least_one_zero = total_three_digit_numbers - non_zero_three_digit_numbers\n    return at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # mass of the ball in kg\n    speed = 30  # speed of the ball in m/s\n\n    # Kinetic energy formula: (1/2) * mass * speed^2\n    kinetic_energy = 0.5 * mass * speed ** 2\n\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for number in range(101, 200):\n        if number % 3 == 1 and number % 4 == 1 and number % 5 == 1 and number % 7 == 2:\n            return number\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58  # which is -7\n    n = 7\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for num in range(100, 300):\n        if num % 5 == 2 and num % 6 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    for hundreds in range(9, -1, -1):\n        for tens in range(9, -1, -1):\n            if hundreds + tens == 13:\n                min_number = 1000 + hundreds * 100 + tens * 10 + 7  # greatest odd number for ones place is 7\n                return min_number\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let x be the distance Jerry drives\n    # Then Kevin drives 1.5x since Kevin's speed is 1.5 times Jerry's\n    \n    # The sum of the distances they drive is equal to the total distance apart\n    # x + 1.5x = 225\n    \n    # Combine like terms to solve for x\n    total_distance = 225\n    distance_ratio = 1 + 1.5\n    jerry_distance = total_distance / distance_ratio\n    \n    return jerry_distance\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    num_pieces = 8 + 1  # Since cutting 8 times creates 9 pieces\n    length_per_piece = total_length / num_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    wall_width = 4800\n    picture_width = 210\n    number_of_pictures = 10\n    pictures_to_place = number_of_pictures - 2\n\n    space_between_pictures = (wall_width - (picture_width * number_of_pictures)) / (number_of_pictures - 1)\n    distance_to_third_picture = 1.5 * picture_width + space_between_pictures * 1\n\n    wall_center = wall_width / 2\n    distance_from_center = wall_center - distance_to_third_picture\n\n    return distance_from_center\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    height_fraction = 0.75\n    original_height = 1  # Let's assume the original height is 1 for simplicity\n    target_height = 0.25 * original_height\n    current_height = original_height\n    bounces = 0\n\n    while current_height >= target_height:\n        current_height *= height_fraction\n        bounces += 1\n        \n    return bounces\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    terms = [5, 8, 11, 14, 17, 20]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x') \n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    # Let x be the age of the uncle currently.\n    # If Doris is currently 10 years old, when she reaches her uncle's current age,\n    # she will have aged x - 10 years. At that time, the uncle will be 40 years old.\n    \n    # Therefore, we have the equation:\n    # Current age of uncle + (x - 10) = 40\n    # Solving for x gives us:\n    \n    doris_age = 10\n    age_diff = 40 - doris_age\n    uncle_age = age_diff + doris_age\n\n    return uncle_age\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of one banana and one apple\n    banana, apple = symbols('banana apple')\n    \n    # Ellie's transaction gives us the first equation: 2*banana + 3*apple = 1.50\n    equation1 = Eq(2*banana + 3*apple, 1.50)\n    \n    # Beth's transaction gives us the second equation: 3*banana + 2*apple = 1.45\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    # Annabella's cost for 1 banana and 1 apple\n    cost_for_annabella = solutions[banana] + solutions[apple]\n    \n    return cost_for_annabella\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100  # Convert percentage to decimal\n\n    principal = interest / rate\n\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # First, let's check Timothy's initial condition\n    if 5 < 8:  # This is true, so Timothy's condition of regrouping makes sense\n        # Now let's add 8 and Timothy's answer, which is 7, to see if it equals 15\n        if 8 + 7 == 15:\n            # Timothy's answer checks out mathematically\n            return True\n        else:\n            # If it doesn't, we need to find a number x such that when added to 8, equals 15\n            for x in range(1, 10):  # Since we are using single digits\n                if 8 + x == 15:\n                    # If we find the correct number, we return it\n                    return x\n    else:\n        # If Timothy's initial condition does not hold, his reasoning is incorrect\n        return False\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    return 1348 - 234 - 76 + 2234 - 48 - 24\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money, remaining_money = symbols('original_money remaining_money')\n    \n    # Equation after spending $200 on a watch\n    equation1 = Eq(remaining_money, original_money - 200)\n    \n    # Equation after spending 2/7 of remaining on a shirt\n    equation2 = Eq(remaining_money - (2/7) * remaining_money, (1/3) * original_money)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (original_money, remaining_money))\n\n    return solutions[original_money]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # Treat Tom and Harry as a single entity and include Ronda, so we have 5 entities to arrange.\n    entity_count = 5\n\n    # Ronda's position is fixed at the furthest right, so we arrange the remaining 4 entities.\n    arrangement_of_entities = factorial(entity_count - 1)\n\n    # Tom and Harry can switch places within their entity, which gives 2 additional possibilities.\n    tom_harry_switch = 2\n\n    # The total number of arrangements will be the product of the two calculations.\n    total_arrangements = arrangement_of_entities * tom_harry_switch\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    first_interest_rate = 1.15763\n    second_interest_rate = 1.1664\n    \n    amount_after_three_years = initial_investment * first_interest_rate\n    total_amount_after_five_years = amount_after_three_years * second_interest_rate\n    \n    return round(total_amount_after_five_years, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    rounding_unit = 100\n    lower_bound = rounded_price - rounding_unit / 2\n    return lower_bound + 1 if lower_bound % 1 != 0 else lower_bound\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    v = symbols('v')  # usual speed in km/h\n    t = symbols('t')  # usual time in hours\n    d = symbols('d')  # distance in km\n    \n    # Equation for 20% increase in speed leading to 1 hour earlier arrival\n    equation1 = Eq(v * t, d)  # original speed*time = distance\n    equation2 = Eq(1.2 * v * (t - 1), d)  # increased speed*time = distance\n\n    # Equation for 200 km at usual speed and remaining at 25% increased speed leading to 12 min earlier arrival\n    equation3 = Eq(v * (200 / v) + 1.25 * v * ((d - 200) / (1.25 * v)), t - 12/60)  # time1 + time2 = total time - 12 min\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (v, t, d))\n\n    # Return the distance d\n    return solutions[d]\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    total_scores_current = 89 * 4\n    desired_average = 95\n    tests_taken = 4\n    while True:\n        tests_taken += 1\n        # The total score needed to reach the desired average after additional tests\n        required_total = desired_average * tests_taken\n        # The score Paul needs on the next test to reach the desired average so far\n        needed_test_score = required_total - total_scores_current\n        # If the needed test score is 100 or less, it's possible to reach the desired average\n        if needed_test_score <= 100:\n            break\n        # Add to the current total score as Paul keeps getting full scores until the condition is met\n        total_scores_current += 100\n    return tests_taken - 4  # The number of additional tests needed, excluding the initial 4\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    distance1 = 540\n    distance2 = 300\n    distance3 = 1000 - (distance1 + distance2)\n    \n    speed1 = 9\n    speed2 = 6\n    speed3 = 10\n    \n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    age_difference = uncle_future_age - doris_age\n    \n    uncle_current_age = doris_age + age_difference\n    \n    return uncle_current_age\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    class_performances = 18\n    extra_performances = 2  # Lia and Liz each prepares an extra performance\n    total_performances = class_performances + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # speed of train in m/s\n\n    total_distance = train_length + bridge_length\n    time_to_cross = total_distance / speed\n\n    return time_to_cross\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep, cows = symbols('sheep cows')\n\n    # Original ratio of sheep to cows\n    equation1 = Eq(sheep, (5/7) * cows)\n    \n    # Adjusted number of sheep and cows\n    equation2 = Eq(3/4 * (sheep + 21), cows - 7)\n\n    # Solve for the number of sheep and cows\n    solutions = solve((equation1, equation2), (sheep, cows))\n\n    return solutions[sheep]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    books, pencil_box = symbols('books pencil_box')\n    equation1 = Eq(2 * books + 3 * pencil_box, 42)\n    equation2 = Eq(2 * books + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (books, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    start_time = 8 * 60 + 30  # 8:30 AM in minutes\n    end_time = 9 * 60 + 25    # 9:25 AM in minutes\n\n    n = end_time - start_time  # Difference in minutes\n\n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    # A's efficiency is twice B's\n    # A can complete a job in 6 days\n\n    # Let the total work be LCM of 6 and a number that represents B's day work.\n    # Since A's efficiency is twice of B's, we take B's day work to be 1 unit\n    # Therefore, A's day work is 2 units and total work is 6 * 2 = 12 units\n    # We can avoid actual LCM calculation since we're dealing with efficiencies\n\n    a_day_work = 2  # A's one day work\n    b_day_work = 1  # B's one day work\n\n    # Together one day work\n    one_day_work_together = a_day_work + b_day_work\n\n    # Total work is A's work for 6 days\n    total_work = 6 * a_day_work\n\n    # Days to complete work together\n    days_to_complete_together = total_work / one_day_work_together\n\n    return days_to_complete_together\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    current_sum = 22\n    target_sum = 30\n    years_until_target = target_sum - current_sum\n\n    return years_until_target\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 0.50  # Cost of a packet of Haribo in dollars\n    mamee_cost = haribo_cost - 0.30  # Cost of a packet of Mamee in dollars\n    big_jelly_cost = 6 * mamee_cost  # Cost of a big packet of jelly in dollars\n\n    return big_jelly_cost\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let total_candies be the total number of candies\n    total_candies = symbols('total_candies')\n\n    # Anna received 3/8 of the candies\n    anna = 3/8 * total_candies\n\n    # Belle received 1/4 of the candies\n    belle = 1/4 * total_candies\n\n    # Cathy and Dawn received total_candies - Anna's candies - Belle's candies\n    cathy_and_dawn = total_candies - anna - belle\n\n    # Equation: Anna's candies + Belle's candies = Cathy and Dawn's candies + 90\n    equation = Eq(anna + belle, cathy_and_dawn + 90)\n\n    # Solve the equation for total_candies\n    solutions = solve(equation, total_candies)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    ans = (18 / 36) * 32\n    return ans\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_bricks = 4\n\n    # Reverse Joel's removal\n    joel_half = (remaining_bricks + 2) * 2\n\n    # Reverse Valerie's removal\n    valerie_half = (joel_half + 3) * 2\n\n    # Reverse Ethan's removal\n    initial_bricks = (valerie_half + 1) * 2\n\n    return initial_bricks\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of fish balls Mr. Tan made at first.\n    x = symbols('x')\n\n    # Mr. Tan sold 3/4 of the fish balls in the morning.\n    # So he would have 1 - 3/4 = 1/4 of the fish balls left.\n    morning_left = 1/4 * x\n\n    # Mr Tan then sold 1/3 of the remaining fish balls in the afternoon.\n    # So he would have 1 - 1/3 = 2/3 of the remaining fish balls left after the afternoon.\n    afternoon_left = 2/3 * morning_left\n\n    # Mr Tan made another 506 fish balls, so he had afternoon_left + 506 fish balls.\n    made_additional = afternoon_left + 506\n\n    # At the end, he had twice the number of fish balls he made at first.\n    # Which means afternoon_left + 506 = 2 * x\n    equation = Eq(made_additional, 2 * x)\n\n    # Solve for x.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # Setting up the equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate - chocolate / 6 + vanilla - 2 * vanilla / 3 + blueberry - 7 * blueberry / 9, 427)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Finding the number of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return int(chocolate_sold)\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    ans = 0.23 * 200\n    return ans\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_extra_books = 8\n    beck_books = chris_books + beck_extra_books\n    books_to_give = beck_books - ((beck_books + chris_books) // 2)\n    \n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    result = (5/8) * 92 + 7 * 0.625 + 62.5 / 100\n    return result\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys_ratio = 2\n    girls_ratio = 7\n    boys = 14\n    total_students = boys * (boys_ratio + girls_ratio) // boys_ratio\n    return total_students\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6*6 + 2)\n    solution = solve(equation, circle)\n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    for num in range(400, 501):\n        if num % 3 == 1 and num % 5 == 3 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    n = 36\n    factors = set()\n    \n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    # Number of pigs\n    num_pigs = 8\n    # Number of green apples (one for each pig)\n    green_apples = num_pigs\n    # Number of red apples (one for every two pigs)\n    red_apples = num_pigs // 2\n\n    # Total apples given to pigs\n    total_apples = green_apples + red_apples\n    \n    return total_apples\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds = total_seeds / 4\n    sunflowers_grown = total_seeds - died_seeds\n    return int(sunflowers_grown)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    return solutions[shirt] + solutions[pants]\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    deposit_days = days // 2\n    spending_days = days // 2\n    \n    if days % 2 == 1:\n        deposit_days += 1\n    \n    total_deposits = deposit_days * 10\n    total_spendings = spending_days * 8\n    \n    final_amount = initial_amount + total_deposits - total_spendings\n\n    return final_amount\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on provided conditions\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    # Solve the congruences\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number Michael thinks of\n    x = symbols('x')\n\n    # The equation representing the operations\n    equation = Eq((x * 2 + 178) / 4, 54)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n\n    average_apples = total_apples / num_students\n\n    return average_apples\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # marry and alexis gave 20% of their stickers to charlotte\n    equation1 = Eq(charlotte * 1.80, marry * 0.20 + alexis * 0.20 + charlotte)\n\n    # marry has 20 stickers more than charlotte after giving away\n    equation2 = Eq(marry - marry * 0.20, charlotte + 20)\n\n    # the ratio of marry to alexis stickers is 7:5\n    equation3 = Eq(marry, alexis * (7/5))\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define s as the original speed in km/h\n    s = symbols('s')\n    # The original time to reach the destination is 8 hours\n    original_time = 8\n    # If Nini wants to arrive one hour earlier, the time will be 7 hours\n    earlier_time = 7\n\n    # Using the relationship distance = speed * time\n    # The distance for the original speed and time\n    original_distance = s * original_time\n    # The distance if she travels 5 km/h faster for 7 hours\n    earlier_distance = (s + 5) * earlier_time\n\n    # These two distances should be equal\n    equation = Eq(original_distance, earlier_distance)\n\n    # Solve the equation for s\n    solution = solve(equation, s)\n\n    # Get the original speed\n    original_speed = solution[0]\n\n    # Calculate the distance using the original speed and time\n    distance = original_speed * original_time\n\n    return distance\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_arrangements = 4 * 3 * 2 * 1  # Total ways to arrange 4 people in 4 seats\n    opposite_arrangements = 2 * 1 * 2 * 1  # Ways Claire and Tony sit opposite each other\n\n    return total_arrangements - opposite_arrangements\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['3', '5', '9']\n    all_permutations = sorted(set(permutations(digits)))\n\n    fifth_permutation = all_permutations[4]  # 0-based index, so the fifth position is index 4\n    return int(''.join(fifth_permutation))\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    test_tubes_required = 0\n    while 2 ** test_tubes_required < 1000:\n        test_tubes_required += 1\n    return test_tubes_required\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance = 36\n    initial_chairs = 10\n    removed_chairs = 3\n    remaining_chairs = initial_chairs - removed_chairs\n\n    # Number of intervals between chairs is always one less than the number of chairs\n    initial_intervals = initial_chairs - 1\n    new_intervals = remaining_chairs - 1\n\n    # Original distance between chairs\n    initial_distance_between_chairs = total_distance / initial_intervals\n    \n    # New distance between chairs after removing 3 chairs\n    new_distance_between_chairs = initial_distance_between_chairs * initial_intervals / new_intervals\n\n    return new_distance_between_chairs\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    for x1 in range(2, 9):  # First brother has at least 2 books and at most 8 books (leaving 2 for the others)\n        for x2 in range(2, 9):  # Second brother, same condition as first\n            x3 = 10 - x1 - x2  # Third brother gets the remaining books\n            if x3 >= 2:  # Ensure the third brother has at least 2 books\n                count += 1\n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the angles\n    angle1, angle2 = symbols('angle1 angle2')\n\n    # Sum of angles in quadrilateral is 360\n    # Two right angles are 90 degrees each, so 180 degrees in total\n    total_angle_sum = 360\n    right_angles_sum = 180\n    remaining_angle_sum = total_angle_sum - right_angles_sum\n\n    # One of the remaining angles is five times the other\n    equation1 = Eq(angle1, 5 * angle2)\n    \n    # Sum of the two remaining angles equals the remaining angle sum\n    equation2 = Eq(angle1 + angle2, remaining_angle_sum)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (angle1, angle2))\n\n    largest_angle = max(solutions[angle1], solutions[angle2])\n\n    return largest_angle\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # Let dp[i] be the number of ways to reach the i-th step\n    dp = [0] * 11  # We have 10 steps, use index 1 to 10 (0 is dummy)\n    dp[0] = 1  # Base case: 1 way to stand on the ground\n\n    # Calculate the ways to reach each step, avoiding the 5th\n    for i in range(1, 11):\n        if i != 5:  # Skip the 5th step\n            dp[i] += dp[i - 1] if i - 1 >= 0 else 0\n            dp[i] += dp[i - 2] if i - 2 >= 0 else 0\n            dp[i] += dp[i - 3] if i - 3 >= 0 else 0\n\n    # The number of ways to reach the 10th step, given that we can't step on the 5th step,\n    # is the sum of ways to reach the 7th, 8th, and 9th step (since we can jump over the 5th step from 4th)\n    dp[10] = dp[7] + dp[8] + dp[9]\n\n    return dp[10]\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    ans = 768 / 3\n    return ans\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')\n\n    for small in range(54 // 5 + 1):\n        for medium in range(54 // 7 + 1):\n            for large in range(54 // 10 + 1):\n                if small * 5 + medium * 7 + large * 10 == 54:\n                    min_boxes = min(min_boxes, small + medium + large)\n\n    return min_boxes\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    # Prime factorization of 7007\n    factors = []\n    n = 7007\n    for i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n            \n    # Since the question specifies two 2-digit multiples of 7, and 7*7 is part of the factors,\n    # we can divide the remaining factors into two 2-digit numbers.\n    # One of the numbers will include a 7, and the other will be the product of remaining factors.\n    num1 = 7\n    num2 = 7\n    for f in factors[2:]:  # skip the first two sevens\n        if num1 * f < 100:\n            num1 *= f\n        else:\n            num2 *= f\n            \n    # Return their sum\n    return num1 + num2\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    median = sequence[len(sequence) // 2]\n\n    return median\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6) / 3, 5)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_nine_days = cans_per_day * 9\n    return cans_in_nine_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6 / 7) * 42\n    return ans\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    # The number of visitors joining the line per minute\n    visitors_per_minute = 10\n    # The number of visitors that each entrance can check in per minute\n    check_in_per_entrance = 25\n    # Since with one entrance there is no one waiting after 16 minutes,\n    # we can calculate the total number of visitors at that time\n    total_visitors = visitors_per_minute * 16\n    # With two entrances, the total check-in rate is doubled\n    total_check_in_rate = 2 * check_in_per_entrance\n    # Calculate the time it takes for all visitors to check in with two entrances\n    time_with_two_entrances = total_visitors / total_check_in_rate\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes_driven = 15\n    hours_driven = minutes_driven / 60.0\n    \n    miles_driven = miles_per_hour * hours_driven\n    kilometers_driven = miles_driven * 1.60934  # 1 mile = 1.60934 kilometers\n    \n    return kilometers_driven\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_initial, dragonflies_initial = symbols('frogs_initial dragonflies_initial')\n\n    equation1 = Eq(frogs_initial, dragonflies_initial + 9)\n    equation2 = Eq(frogs_initial - (11 - 10), dragonflies_initial + (10 - 11))\n\n    solutions = solve((equation1, equation2), (frogs_initial, dragonflies_initial))\n\n    return solutions[frogs_initial]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    total_distance = 16\n    day_distance = 5\n    night_distance = 3\n    effective_distance = day_distance - night_distance\n    current_distance = 0\n    day_count = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - given_away\n    num_bottles = remaining_cookies // cookies_per_bottle\n\n    return num_bottles\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, muffins = symbols('cookies muffins')\n\n    # Layla baked 24 more cookies than muffins\n    equation1 = Eq(cookies, muffins + 24)\n\n    # After selling a fraction of muffins and cookies, she had 74 left\n    equation2 = Eq(3/4*muffins + 5/8*cookies, 74)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cookies, muffins))\n    \n    return solutions[cookies]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    greatest_multiple = 999 // 25 * 25\n    return greatest_multiple\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Let's assume that the cost for the metro both ways is 'm',\n    # the cost for a cup of coffee is 'c', and the entry fee to the game is 'e'.\n    # The total cost for Richard alone is (2 * m) + c + e.\n    # And for each friend the cost will be the same minus the return metro cost which Richard already pays for himself.\n    \n    # As we don't have the actual costs, we'll need to assign variable costs to each and solve for the unknown.\n    \n    # We do know that Richard spends a total of $40 for himself and his friends.\n    total_budget = 40\n    \n    # We don't know the individual costs, so let's assign variables to them\n    m, c, e = symbols('m c e')\n    \n    # The equation representing the total spending for Richard and 'f' number of friends will be:\n    # total_cost = (m * 2 + c + e) + f * (m * 2 + c)\n    # This is simplified to the total_budget = (3m + c + e) + f * (2m + c)\n    \n    # Since we can't solve for 4 unknowns with only one equation, we will assume the values for m, c, and e\n    # Let's assume the metro cost (both ways) to be $5, a cup of coffee to be $3, and the entry fee to be $10.\n    # These assumptions could be any reasonable values that add up to less than $40 for Richard.\n    m_val = 5\n    c_val = 3\n    e_val = 10\n    \n    # Now we calculate Richard's expenses for the metro both ways, a cup of coffee, and the entry fee\n    richard_expenses = 2 * m_val + c_val + e_val\n    \n    # We subtract Richard's expenses from the total budget to know how much we have left for friends\n    remaining_budget = total_budget - richard_expenses\n    \n    # With the remaining budget we calculate how many friends he can treat, considering each friend's cost\n    # does not include Richard's metro return cost\n    friend_expense = 2 * m_val + c_val\n    number_of_friends = remaining_budget // friend_expense\n    \n    return number_of_friends\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):   # A should be a digit from 0 to 9\n        num = int(f\"123{A}456{A}789{A}0\")  # The last digit is 0 to ensure the number is even\n        if num % 9 == 0 and num % 5 != 0:  # Check if divisible by 9 and not by 5\n            return A\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    cyclist_additional_time = 143  # in minutes\n    speed_ratio_driver_to_cyclist = 13 / 2\n\n    # Let the time taken by the driver be t minutes\n    # Then the time taken by the cyclist will be t + 143 minutes\n    # Since distance is the same for both, and speed = distance/time,\n    # we have the following equation:\n    # driver's speed / cyclist's speed = cyclist's time / driver's time\n    # (13/2) = (t + 143) / t\n\n    # Solving for t\n    t = (cyclist_additional_time * 2) / (13 - 2)\n\n    return t\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum([i**3 for i in range(2, n+1)])\n    return sum_of_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = (48-47) + (46-45) + (44-43) + (42-41) + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    sausage_rolls_cost = 4 * 24\n    hotdogs_cost = 5 * 81\n    drinks_cost = 7 * 20\n\n    total_cost = sausage_rolls_cost + hotdogs_cost + drinks_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Statements analysis\n    # 1 - All of the statements below are correct.\n    # 2 - None of the statement below is correct.\n    # 3 - One of the statements above is correct.\n    # 4 - All the statements above are correct.\n    # 5 - None of the statement above is correct.\n\n    # Evaluate each statement for logical consistency\n    \n    # If statement 1 is true, then 2-4 must also be true, which cannot happen as only one can be true.\n    if False:\n        return 1\n    \n    # If statement 2 is true, then 1 is false (which it is), 3 is false (as both 1 and 4 would be false), and 4 is false.\n    # However, statement 5 would also be true, making two statements true. So 2 is false.\n    if False:\n        return 2\n    \n    # If statement 3 is true, then it implies either statement 1 or 2 is true, which has been shown to be false.\n    # And, it would also make statement 4 true, which is contradictory since only one can be true, thus 3 is false.\n    if False:\n        return 3\n    \n    # If statement 4 is true, then statement 1 should be true, which is not the case. So 4 is false.\n    if False:\n        return 4\n    \n    # If statement 5 is true, then statement 3 would be false (which makes statement 5 the only true one),\n    # and all the others would be false, which fits our condition. So 5 must be the true statement.\n    if True:\n        return 5\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_coins = symbols('total_coins', integer=True)\n\n    # 1/4 of total coins are heads initially\n    heads_initial = total_coins / 4\n    # Flip 2 more coins\n    heads_after_flip = heads_initial + 2\n    # 1/3 of total coins are heads after flipping 2\n    heads_final = total_coins / 3\n\n    # Set up the equation and solve\n    equation = Eq(heads_after_flip, heads_final)\n    solutions = solve((equation), (total_coins))\n\n    # Return only the positive solution since the number of coins cannot be negative\n    return [s for s in solutions if s.is_positive][0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    # Calculate the total possible ways to arrange 5 singing shows (S) and 3 comedy shows (C)\n    total_ways = factorial(5 + 3) // (factorial(5) * factorial(3))\n    \n    # Calculate the number of invalid ways where 3 comedy shows are together (CCC, SSSSS)\n    # There are 6 slots where CCC can be together and it is considered as one unit with 5 S\n    invalid_ways_3C_together = factorial(6) // (factorial(5))\n    \n    # Calculate the number of invalid ways where 2 comedy shows are together twice (CC, CC, SSSS)\n    # Two comedy shows (considered as one unit like CC) can be placed in 5 slots with 4 S\n    invalid_ways_2C_together = factorial(5) // (factorial(4)) * factorial(2) // (factorial(1) * factorial(1))\n    \n    # The total number of invalid arrangements with consecutive comedy shows is:\n    # ways where all 3 comedy shows are together + ways where two pairs of comedy shows are together\n    total_invalid_ways = invalid_ways_3C_together + invalid_ways_2C_together\n    \n    # The final answer is the difference between all possible arrangements and invalid arrangements\n    ans = total_ways - total_invalid_ways\n    \n    return ans\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    ans = trains + cars + flights\n    return ans\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500\n    total_days = 5\n\n    meters_per_day = total_road / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # Initialize the sum to zero\n    digits_sum = 0\n\n    # Calculate the digits and their sum for the first 2100 digits after the decimal point\n    for i in range(1, 2101):\n        # There's a pattern where every 4th decimal place starts a new sequence\n        # For example, at decimal places 1, 5, 9, ... we have the digit '2'\n        # At decimal places 3, 7, 11, ... we have the digit '3'\n        # And so on, where the digit increases by 1 every 4th place\n\n        # We calculate the position in our sequence (1-indexed)\n        position_in_sequence = (i % 4 if i % 4 != 0 else 4)\n        # Depending on the position, we determine the digit to add\n        digit = (2 + (i - position_in_sequence) // 4) if position_in_sequence == 1 else 0\n        # Sum up the digits\n        digits_sum += digit\n\n    return digits_sum\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    sorted_values = sorted(values)\n    middle_index = len(sorted_values) // 2\n    ans = sorted_values[middle_index]\n    return ans\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    # Let's assume the original number is x\n    # According to the problem, halving x and then subtracting 9 should give us 12\n    # x/2 - 9 = 12\n    # Now we will perform the inverse operations to solve for x\n    \n    # First, let's add 9 to both sides of the equation\n    # x/2 = 12 + 9\n    \n    # Then, let's multiply both sides of the equation by 2 to find x\n    # x = (12 + 9) * 2\n    x = (12 + 9) * 2\n    return x\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    return 2018 - 314\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for choco in range(41, 60):\n        if choco % 4 == 2 and choco % 6 == 2:\n            return choco\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n\n    # For circular permutations, we have (n-1)! ways, here n is 6.\n    ans = factorial(6 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '5', '7', '9']\n    min_even_number = float('inf')\n\n    for perm in permutations(digits, 4):\n        number = int(''.join(perm))\n        if number % 2 == 0 and number < min_even_number:\n            min_even_number = number\n\n    return min_even_number\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let x be the number of steps of the escalator\n    # When Peter walks at 1 step per second, the escalator moves x-10 steps\n    # In 10 seconds, the total steps the escalator would have moved is 10 * (x - 10)\n    \n    # When Peter walks at 2 steps per second, it takes him 16/2 = 8 seconds to reach the top\n    # In 8 seconds, the escalator moves x-16 steps\n    # So, the total steps the escalator would have moved is 8 * (x - 16)\n    \n    # Since the escalator moves at a constant speed, the number of steps it moves in both situations should be the same:\n    # 10 * (x - 10) = 8 * (x - 16)\n    \n    # Now we solve for x\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 10 * (x - 10) - 8 * (x - 16)\n\n    # Solve the equation\n    [ans] = solve(equation, x)\n    return ans\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n\n    ans = total_dollars * quarters_in_one_dollar\n    return ans\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_bar = 72\n    balloon_cost = 20\n    note = 1000\n    change = 388\n\n    money_spent = note - change\n    balloons_spent = money_spent - chocolate_bar\n\n    num_balloons = balloons_spent / balloon_cost\n\n    return int(num_balloons)\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "from math import lcm\n\ndef solution():\n    ans = lcm(3, 4, 10)\n    return ans\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_length = 2000\n\n    ans = (percentage / 100) * total_length\n    return ans\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    capacity = 4\n    kayaks = (students + capacity - 1) // capacity\n    return kayaks\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n    money_spent = total_money * spent_fraction\n    remaining_money = total_money - money_spent\n    \n    # 3 slices of pizza equals 2 cupcakes costs\n    # money_spent = 5 cupcakes + 6 slices of pizza\n    # money_spent = 5 cupcakes + 2 * (3 slices of pizza), because 3 slices = 2 cupcakes\n    # 1 slice of pizza = 2/3 cupcake\n    # Therefore, money_spent = 5 cupcakes + 2 * (2/3 cupcakes) * 6\n    # money_spent = 5 cupcakes + 4 cupcakes = 9 cupcakes\n    # The cost for one cupcake\n    cost_per_cupcake = money_spent / 9\n    \n    # Calculate the maximum number of cupcakes he can buy with the remaining money\n    max_cupcakes = int(remaining_money // cost_per_cupcake)\n\n    return max_cupcakes\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    x = symbols('x')\n    a = 4*sqrt(3)\n    equation = Eq(3*a, sqrt(3*x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    subtract_from = (4 + 2) * 13\n    subtract = 4 + (2 * 13)\n    ans = subtract_from - subtract\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # The ages of the youngest three dwarfs form an arithmetic sequence with a common difference of 1 year.\n    # Let's denote the age of the youngest dwarf as 'a', then the ages of the three youngest dwarfs are:\n    # a, a+1, a+2\n    # Their sum is given as 42 years:\n    # a + (a+1) + (a+2) = 42\n    # 3a + 3 = 42\n    # 3a = 39\n    # a = 13 (age of the youngest dwarf) \n    \n    # Now let's find the age of the oldest dwarf (the seventh one). Since the difference in age is consecutive,\n    # the age of the oldest dwarf will be 'a + 6':\n    # a+6 = 13+6 = 19 (age of the oldest dwarf)\n    \n    # The ages of the oldest three dwarfs will be:\n    # a+4, a+5, a+6\n    # Let's calculate their sum:\n    # (a+4) + (a+5) + (a+6)\n    # = 3a + 15\n    # We have already found that 'a' is 13:\n    # = 3*13 + 15\n    # = 39 + 15\n    # = 54\n    \n    return 54\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for i in range(74, 200):\n        if len(set(str(i))) == len(str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 5]\n    perm = permutations(digits, 3)  # Generate all permutations of length 3\n    count = len(list(perm))          # Count the number of permutations\n    return count\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def is_square(n):\n    return n ** 0.5 == int(n ** 0.5)\n\ndef solution():\n    count = 0\n    for i in range(1, 6):\n        number = int('2' + '5' * (i - 1))\n        if is_square(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    # Initialize the total pieces of paper before and after cutting\n    total_before_cut = 10\n    total_after_cut = 16\n\n    # Since cutting a paper into three parts leads to two more pieces,\n    # we can use the difference between after and before cut to find\n    # cut papers (each cut paper increases the total by 2).\n    cut_papers = (total_after_cut - total_before_cut) // 2\n\n    return cut_papers\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    workers_1 = 6\n    parts_1 = 120\n    minutes_1 = 4\n\n    workers_2 = 3\n    minutes_2 = 10\n\n    # Calculate the production rate per worker per minute\n    rate_per_worker_per_minute = (parts_1 / workers_1) / minutes_1\n\n    # Calculate the number of parts produced by 3 workers in 10 minutes\n    parts_2 = rate_per_worker_per_minute * workers_2 * minutes_2\n\n    return int(parts_2)\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors\n\n    # Find all divisors of 2240\n    divs = divisors(2240)\n    \n    # Iterate over the divisors to find the largest one which gives a square when 2240 is divided by it\n    for d in reversed(divs):\n        quotient = 2240 // d\n        if int(quotient**0.5)**2 == quotient:  # Check if the quotient is a perfect square\n            return d\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = total_pupils * 0.7\n    swimming_girls = 200\n\n    boys_cannot_swim = total_pupils * 0.4 \n    swimming_boys = (total_pupils - swimming_pupils) - boys_cannot_swim\n    girls = swimming_pupils - swimming_boys\n    \n    return girls\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_trees = 8\n    apples_per_tree = 10\n    rotten_ratio = 1/4\n\n    total_apples = total_trees * apples_per_tree\n    rotten_apples = total_apples * rotten_ratio\n    non_rotten_apples = total_apples - rotten_apples\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original_amount = 160\n    new_amount = 168\n    increase = new_amount - original_amount\n    percentage_increase = (increase / original_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice, oatmeal = symbols('rice oatmeal')\n    equation1 = Eq(3 * rice + 3 * oatmeal, 36)\n    equation2 = Eq(rice, 2 * oatmeal)\n\n    solutions = solve((equation1, equation2), (rice, oatmeal))\n\n    return solutions[rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_1_to_n = (n * (n + 1) // 2)\n    ans = sum_1_to_n ** 2\n    return ans\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the required amount of 10% sugar water\n    x = symbols('x')\n\n    # Equation: (Amount of sugar in the 30% solution + Amount of sugar in the 10% solution) / (Total weight of the mixture) = 26%\n    # 30% of 4kg sugar solution + 10% of x kg sugar solution = 26% of (4kg + x kg) mixture\n\n    equation = Eq((0.30 * 4) + (0.10 * x), 0.26 * (4 + x))\n\n    # Solve for x\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    discounted_price = 32\n    further_discount = 4\n    final_price = discounted_price - further_discount\n    original_price = discounted_price / (1 - 0.20)\n    total_discount = original_price - final_price\n    total_discount_percentage = (total_discount / original_price) * 100\n    return total_discount_percentage\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let j be the mass of the empty jar and c be the mass of one chocolate\n    # From the problem statement, we have two equations:\n    # j + 5c = 185\n    # j + 17c = 317\n\n    # We can find the value of one chocolate (c) by subtracting the two equations\n    c = (317 - 185) / (17 - 5)\n\n    # Now we can use the value of c to solve for the mass of the jar (j)\n    j = 185 - 5 * c\n    \n    # Finally, we find the total mass of the jar with 10 chocolates\n    total_mass = j + 10 * c\n    \n    return total_mass\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    import math\n\n    def count_ways(n):\n        count = 0\n        # We only need to check for factors up to sqrt(n) since\n        # all factors come in pairs, a * b = n. If a or b were larger than\n        # sqrt(n) the product would be greater than n.\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                # Find the pair factor of i\n                pair = n // i\n                # If it is a proper divisor (not including n itself)\n                if i != pair and i != 1:\n                    count += 1\n        return count\n\n    ans = count_ways(200)\n\n    return ans\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - a - b + 1\n\n    return custom_operation(custom_operation(2, 3), 4)\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # Total perimeter of the field:\n    perimeter = (144 + 204) * 2\n    \n    # Minus the 4 corners, since there's already a wheat on each corner\n    perimeter -= 4\n    \n    # Division of the remaining perimeter by the number of gaps between wheats\n    # There are 116 wheats, hence 115 gaps between them\n    distance = perimeter / 115\n    \n    return distance\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lana, mark = symbols('lana mark')\n\n    # Lana gave away 1/3 of her sweets\n    lana_gave = lana / 3\n    # Mark ate 34 of his sweets\n    mark_ate = 34\n\n    # After giving away and eating, they have the same amount of sweets\n    equation = Eq(lana - lana_gave, mark - mark_ate)\n\n    # The total amount of sweets they originally had\n    total_sweets = 674\n\n    # Equation representing the total sweets\n    total_equation = Eq(lana + mark, total_sweets)\n\n    solutions = solve((equation, total_equation), (lana, mark))\n\n    lana_initial = solutions[lana]\n    mark_initial = solutions[mark]\n\n    return lana_initial - mark_initial\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    # Let x be the total number of days in the summer holiday.\n    # He spent half of it working, so the remaining time is x/2.\n    # He then spent half of the remaining time reading and relaxing, so now the remaining time is (x/2)/2 = x/4.\n    # After spending 4 days at a friend's house, the remaining time is x/4 - 4.\n    # Lastly, he had exactly 2 weeks (14 days) left for the summer camp, so the remaining time is 14 days.\n    # Therefore, we have x/4 - 4 = 14.\n    \n    # Calculate the total number of days of his summer holiday based on the equation derived.\n    x = (14 + 4) * 4  # Simplified equation: x - 4*4 = 14*4\n    return x\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    time_per_cat_per_fish = 10  # time it takes for one cat to catch one fish in minutes\n    num_cats = 5  # number of cats\n    num_fish = 5  # number of fish\n\n    # As all cats catch the fish at the same time, the time to catch each fish is the same\n    time_to_catch_all_fish = time_per_cat_per_fish\n\n    return time_to_catch_all_fish\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # Since every corner is planted with wheat, we'll subtract them from the total count.\n    wheat_count = 116 - 4\n    \n    # The total perimeter of the field.\n    perimeter = 2 * (144 + 204)\n    \n    # The number of intervals between wheats is the number of wheats minus 1.\n    intervals = wheat_count - 1\n    \n    # The distance between each wheat is the perimeter divided by the intervals.\n    distance = perimeter / intervals\n    \n    return distance\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    # The sequence of operations performed on the number in reverse is:\n    # Divide by 9, multiply by 4, and then subtract 3\n    result = 81\n    result /= 9\n    result *= 4\n    result -= 3\n    \n    return result\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = total_bracelets * (2/7)\n    remainder = total_bracelets - morning_bracelets\n    afternoon_bracelets = remainder * (3/5)\n    remaining_bracelets_needed = total_bracelets - (morning_bracelets + afternoon_bracelets)\n    return remaining_bracelets_needed\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    together_time = 4\n\n    together_rate = total_people / together_time\n\n    gloria_rate = together_rate - ellie_rate\n\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    fraction = 3 / 8\n    whole_number = 48\n\n    ans = fraction * whole_number\n\n    return ans\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_mixture_weight = 15 + 60\n    rice_in_A = 0.40 * 15\n    rice_in_mixture = 0.28 * total_mixture_weight\n    rice_in_B = rice_in_mixture - rice_in_A\n    percent_rice_in_B = (rice_in_B / 60) * 100\n    \n    return percent_rice_in_B\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    rate_per_minute = 15  # milliliters\n    minutes_in_hour = 60\n    hours = 2\n\n    total_milliliters = rate_per_minute * minutes_in_hour * hours\n    total_liters = total_milliliters / 1000  # converting milliliters to liters\n\n    return total_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    distance_per_tree = 10\n\n    # Number of trees planted along the road, including both ends\n    num_trees = (road_length // distance_per_tree) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + pen, 12)\n    equation2 = Eq(book + 2 * pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('123456789', 4):  # Digits E, F, A, C without 0 and 2\n        if p[0] == '0':  # Skip if E is 0, as it would not be a valid digit\n            continue\n        \n        # Fill in the known B and D\n        num_1 = int('2' + p[2] + '0' + p[1] + p[0] + p[3])  # ABCDEF with B=2, D=0\n        num_2 = int(p[0] + p[3] + '2' + p[1] + p[2] + '0')  # EFABCD with B=2, D=0\n        \n        # Check the condition\n        if 5 * num_1 == 6 * num_2:\n            return int(p[2] + p[0] + p[1] + p[3])  # Return FACE\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_change = 2 * 10 + 5 * 5 + 4 * 0.20\n    money_spent = 100 - total_change\n    return money_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A + B + C, 200)\n    equation2 = Eq(A, B * 4/3)\n    equation3 = Eq(A, C + 20)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    from sympy import symbols, Eq, solve, Rational\n\n    a, b, c, d = symbols('a b c d', integer=True)\n    \n    # a > b > c > d: Numbers in descending order\n    average_bcd = (b + c + d) / 3\n    average_acd = (a + c + d) / 3\n    \n    # Sum of smallest number and average of others is 39\n    equation1 = Eq(d + average_bcd, 39)\n    # Sum of the largest number and the average of other three is 51\n    equation2 = Eq(a + average_acd, 51)\n\n    # In terms of d \n    expr_bcd = solve(equation1, b + c + d)[0]\n    # In terms of a\n    expr_acd = solve(equation2, a + c + d)[0]\n    # Since the average_bcd and average_acd differs by one d and one a respectively\n    # we sum them up and subtract four times d to get an equation in terms of a and d\n    equation3 = Eq(expr_bcd + Rational(1,3)*expr_acd, 90 - 4*d - a)\n    \n    # Because the numbers are distinct and positive,\n    # we also know that a > b > c > d => a >= d + 3\n    # Now we loop through the possible values for d\n    largest_a = 0\n    for d_value in range(1, 39):  # d has to be at least 1 and less than 39\n        a_value = solve(equation3.subs(d, d_value))[0]\n        if a_value > d_value + 2 and a_value.is_integer:\n            if a_value > largest_a:\n                largest_a = a_value\n    \n    return largest_a\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5 * y + x))\n\n    solutions = solve(equation, x)\n\n    return solutions[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3  # minutes\n    total_time = 18     # minutes\n    plates = total_time // time_per_plate\n    return plates\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Let x be the distance from the starting point to the shopping mall.\n    # Barbara and Catherine walk for the same amount of time t.\n    # Let's set up the equations based on the information given:\n    # Barbara's distance: 60t = x\n    # Catherine's distance: 45t = x - 60\n    \n    # From Barbara's distance, we get t = x / 60\n    # Substitute t in Catherine's distance:\n    # 45 * (x / 60) = x - 60\n    \n    # Solve for x:\n    # x = (45 * x / 60) + 60\n    # Multiply all terms by 60 to clear the fraction:\n    # 60x = 45x + 60 * 60\n    # 60x - 45x = 60 * 60\n    # 15x = 60 * 60\n    # x = (60 * 60) / 15\n    x = (60 * 60) / 15\n    \n    return x\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nini_age, dad_age = symbols('nini_age dad_age')\n\n    equation1 = Eq(dad_age, nini_age + 25)\n    equation2 = Eq(dad_age + 5, 2 * (nini_age + 5) - 8)\n\n    solutions = solve((equation1, equation2), (nini_age, dad_age))\n\n    return solutions[nini_age]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    count_facing_teacher = 0\n    for student_number in range(1, 51):\n        # Students turn backwards for multiples of 4 and then turn again for multiples of 6,\n        # If the student turns an even number of times, they end up facing the teacher.\n        turns = (student_number % 4 == 0) + (student_number % 6 == 0)\n        if turns % 2 == 0:\n            count_facing_teacher += 1\n    return count_facing_teacher\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    dividend = 471471471471\n    divisor = 157157157157\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    first_day_sold = total_pears * (2/5)\n    remaining_pears = total_pears - first_day_sold\n    second_day_sold = remaining_pears * (7/9)\n\n    return second_day_sold\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    numerator = 2536\n    denominator = 4\n    ans = numerator // denominator\n    return ans\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    # Apply the Pigeonhole Principle: n pigeons (apples) in m pigeonholes (students), if n > km, then there must be one pigeonhole with at least k+1 pigeons.\n    # We know at least one student gets at least 3 apples (let this be the minimum), \n    # so in the worst case, every student gets 3 apples.\n    # Let's find the class size (the number of pigeonholes) where distributing 29 apples (pigeons), \n    # each student can get at least 3 apples.\n\n    # Total apples\n    apples = 29\n    # Minimum apples per student\n    min_apples_per_student = 3\n    \n    # Calculate the class size by iterating over possible class sizes and applying the pigeonhole principle\n    class_size = 0\n    while (class_size * min_apples_per_student) < apples:\n        class_size += 1\n    \n    return class_size\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    # The number of ways to choose 1 boy and 1 girl\n    ways = boys * girls\n\n    return ways\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for number in range(10, 100):\n        if isprime(number):\n            reversed_number = int(str(number)[::-1])\n            if number != reversed_number and isprime(reversed_number):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    percentage_change = ((new_value - original_value) / original_value) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, blue = symbols('green blue')\n\n    # After removing balls, both colors have equal amounts\n    equation1 = Eq(green - 28, blue - (2/5)*blue)\n    # Total number of balls initially was 140\n    equation2 = Eq(green + blue, 140)\n\n    solutions = solve((equation1, equation2), (green, blue))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Since the alcoholic chooses bars at random, the probability of going to any bar is 1 out of 3 (assuming no preference).\n    # If the alcoholic is not at two of the bars, then he must be at the third one.\n    # Therefore, the probability is 100% or 1 (certain) that if he's not at the other two bars, he's at the third one.\n    return 1\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    ans = 5183 - 594\n    return ans\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    return (387 + 729) / 2\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    marked_in_second_catch = 16\n    total_caught_in_both_catches = 100\n    ratio_marked_to_total_in_second_catch = marked_in_second_catch / total_caught_in_both_catches\n\n    estimated_total_fish_in_pond = total_caught_in_both_catches / ratio_marked_to_total_in_second_catch\n\n    return int(estimated_total_fish_in_pond)\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Let n be the distance Nancy walked, so Randy walked n + 10\n    # According to the problem statement, for every 2m Nancy walks, Randy walks 3m\n    # Hence, we have the ratio 2/3 = n / (n + 10)\n    \n    # Solving the equation for n\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    equation = Eq(2/3, n / (n + 10))\n    n_value = solve(equation, n)\n    \n    # Since Randy walks 3m for every 2m Nancy walks, we get the total distance by adding what Nancy and Randy walk\n    total_distance = n_value[0] + (n_value[0] + 10)\n    \n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    \n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    from fractions import Fraction\n\n    numerator = (1 + Fraction(3, 99)) + (3 + Fraction(3, 33)) + (9 + Fraction(3, 11))\n    denominator = (1 + Fraction(1, 99)) + (3 + Fraction(1, 33)) + (9 + Fraction(1, 11))\n\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of Eliot and his cousin\n    eliot_age_now, cousin_age_now = symbols('eliot_age_now cousin_age_now')\n\n    # Given that Eliot will be 16 in 4 years, so now Eliot is 16 - 4 = 12 years old\n    eliot_age_in_4_years = 16\n    eliot_age_now = eliot_age_in_4_years - 4\n\n    # Define the equation that Eliot is now twice his cousin's age\n    equation1 = Eq(eliot_age_now, 2 * cousin_age_now)\n\n    # Solve the equation to find the cousin's age now\n    solutions = solve((equation1), (cousin_age_now))\n\n    # Calculate the cousin's age in 4 years\n    cousin_age_in_4_years = solutions[cousin_age_now] + 4\n\n    return cousin_age_in_4_years\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    from fractions import Fraction\n    x = Fraction('0.2014141414141414').limit_denominator(9900)\n    return x.numerator\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n    \n    # Calculate Ali's number of marbles based on the average of Bronson's and Charlie's\n    equation1 = Eq(ali, (bronson + charlie)/2 - 5)\n    \n    # Bronson has twice as many marbles as Ali\n    equation2 = Eq(bronson, 2 * ali)\n\n    # Use sympy's solve function to solve for ali, bronson, and charlie\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum_even = sum(range(10, 21, 2))\n    sum_odd = sum(range(9, 20, 2))\n    \n    ans = sum_even - sum_odd\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let alice's age be 'a' and her sister's age be 's'.\n    a, s = symbols('a s')\n\n    # Alice is twice as old as her sister now.\n    equation1 = Eq(a, 2 * s)\n    \n    # In 10 years' time, their total age is 53 years old.\n    equation2 = Eq((a + 10) + (s + 10), 53)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (a, s))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # Step in 2 for even numbers\n                if (hundreds + tens + ones == 8) and len({hundreds, tens, ones}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for num in range(100000, 1000000):\n        if str(num)[-1] == '2':\n            new_num = int('2' + str(num)[:-1])\n            if new_num == num // 3:\n                return num\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    \n    passed_second_failed_first = 3\n\n    # Using Inclusion-Exclusion Principle\n    passed_only_first = passed_first_exam - (total_students - failed_second_exam - passed_second_failed_first)\n    \n    return passed_only_first\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_cereal_bars = 43\n    people = 4\n\n    remainder = total_cereal_bars % people\n\n    return remainder\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution(a, b, c):\n    # There are 6 permutations of a, b, c each contributing equally to the 100s, 10s and 1s place.\n    # Each digit will appear twice in each place value (100s, 10s, 1s).\n    return (a + b + c) * (100 + 10 + 1) * 2\n\nans = solution(a, b, c)"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            original = 10 * a + b\n            reverse = 10 * b + a\n            product = original * reverse\n            if product % 100 == 0:\n                return original\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    hours_for_300 = 300 / hourly_rate\n    return hours_for_300\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    large_sack, small_sack = symbols('large_sack small_sack')\n    equation1 = Eq(large_sack, 1.20 * small_sack)\n    equation2 = Eq(large_sack + small_sack, 77)\n\n    solutions = solve((equation1, equation2), (large_sack, small_sack))\n\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    frac = 5 / 9\n    ans = round(frac, 2)\n    return ans\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome number is 10001 (palindrome structure XYZZY)\n    least_5_digit_palindrome = 10001\n\n    # The greatest 6-digit palindrome number is 999999 (palindrome structure XYZZYX)\n    greatest_6_digit_palindrome = 999999\n\n    # Calculate the difference\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    capacity_per_cabin = 6\n    \n    min_cabins = (students + capacity_per_cabin - 1) // capacity_per_cabin\n    \n    return min_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    ans = len(str(list(range(1, 59))))\n    return ans - 2  # substract the brackets []\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    current_length = 0\n    number_length = 0\n    current_num = 1200\n\n    # Calculate lengths of numbers\n    lengths = {i: len(str(i)) for i in range(1, current_num+1)}\n\n    # Iterate in reverse to find the position\n    while current_length < 2011:\n        number_length = lengths[current_num]\n        current_length += number_length\n        current_num -= 1\n\n    # Find the exact digit\n    target_index = number_length - (current_length - 2011)\n    digit = str(current_num + 1)[target_index - 1]\n\n    return int(digit)\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # She had a total of 125 oranges and apples\n    total_fruits_eq = Eq(oranges + apples, 125)\n\n    # She sold half of the apples and 35 oranges\n    # In the end, she had an equal number of oranges and apples left\n    remaining_fruits_eq = Eq(oranges - 35, apples / 2)\n\n    # Solve the system of equations\n    solutions = solve((total_fruits_eq, remaining_fruits_eq), (oranges, apples))\n\n    # The number of oranges Mrs Lee had at first\n    return solutions[oranges]\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    coins = symbols('coins')\n\n    # One quarter of the coins are showing heads\n    equation1 = Eq(coins / 4 + 2, coins / 3)\n\n    # Solve the equation to find the total number of coins\n    total_coins = solve(equation1, coins)\n\n    return total_coins[0]\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_of_favorite = 14\n    books_on_the_right = 6\n\n    total_books = position_of_favorite + books_on_the_right\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    # Calculate the number of terms that are multiples of 5 and less than or equal to 50\n    last_term = 50 // 5\n    sum_multiples = (5 + 50) / 2 * last_term\n    return int(sum_multiples)\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    distance1 = 30 * 5  # distance travelled by first planet in 5 minutes\n    distance2 = 40 * 5  # distance travelled by second planet in 5 minutes\n    total_distance = distance1 + distance2  # total distance between the planets 5 minutes ago\n    return total_distance\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    cars, motorbikes = symbols('cars motorbikes')\n    # Each car has 4 tyres and each motorbike has 2 tyres\n    tyres_equation = Eq(4 * cars + 2 * motorbikes, 490)\n    # The total number of vehicles is 140 (cars + motorbikes)\n    vehicles_equation = Eq(cars + motorbikes, 140)\n    \n    # Solve the system of equations\n    solutions = solve((tyres_equation, vehicles_equation), (cars, motorbikes))\n    \n    return solutions[cars]\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    count = 0\n    for tens in range(1, 6):  # Tens place cannot be 0\n        for ones in range(0, 6):  # Ones place can be 0-5\n            if tens != ones:  # Tens and ones must be different\n                count += 1\n    return count\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.20\n    \n    original_price = paid_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_litres = 36\n    ratio_sum = 4 + 5\n    apple_juice_ratio = 4\n    apple_juice_litres = (apple_juice_ratio * total_litres) / ratio_sum\n    return apple_juice_litres\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the certain number and a be the first remainder\n    d, a = symbols('d a')\n\n    # Set up the equations for remainders\n    eq1 = Eq(190 % d, a)\n    eq2 = Eq(137 % d, a + 4)\n    eq3 = Eq(101 % d, a + 6)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (d, a))\n\n    # Obtaining the value of d from the solutions\n    for sol in solutions:\n        if sol[d].is_Integer and sol[d] > 0:\n            d_value = sol[d]\n            break\n\n    # Calculating the remainder when 299 is divided by the number d\n    remainder = 299 % d_value\n\n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number_to_round = 8.765\n    rounded_number = round(number_to_round, 1)\n    return rounded_number\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    total_boxes = total_avocados // per_box\n\n    return total_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    original_number = (result - 12) / 2\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    number = 1\n    while True:\n        if number % 2 == 1 and number % 13 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    res = (9 / 5) * (25 / 100) + (1 / 4) * 2.2 - 0.25\n    return res\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    students_per_class = 100\n    classes = 5\n    donation_per_student = 5.78\n\n    total_donation = students_per_class * classes * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    climb_rate = 3\n    slide_rate = 1\n    effective_climb = climb_rate - slide_rate\n    \n    # The snail reaches the top during the day so we need to check the day\n    # at which the snail will reach at least 10 meters before the last climb,\n    # since on that day, the slide won't matter as it reaches the top.\n    day = 0\n    distance_climbed = 0\n    while True:\n        day += 1\n        distance_climbed += climb_rate\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_rate\n    \n    return day\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    largest_sum = 0\n    for x in range(2, 200):\n        if all(x % i != 0 for i in range(2, int(x**0.5) + 1)):  # Check if x is prime\n            for y in range(2, 200):\n                if y != x and all(y % i != 0 for i in range(2, int(y**0.5) + 1)):  # Check if y is prime and not equal to x\n                    if x * (2 + y) == 200 + y:\n                        if x + y > largest_sum:\n                            largest_sum = x + y\n    return largest_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "def solution():\n    from math import factorial\n\n    total_digits = 6\n    count_2 = 2\n    count_3 = 2\n    count_4 = 1\n    count_5 = 1\n\n    ans = factorial(total_digits) // (factorial(count_2) * factorial(count_3) * factorial(count_4) * factorial(count_5))\n    return ans\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    spent = 2  # In pence\n    fraction_of_total = 1/4\n    total_money = spent / fraction_of_total\n    return total_money\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    # Calculate the total number of rounds using n choose 2, because each match involves 2 teams\n    # and every pair of teams play against each other exactly once in a round-robin tournament.\n    num_teams = 8\n    total_rounds = num_teams * (num_teams - 1) // 2  # n choose 2\n\n    return total_rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "from fractions import Fraction\n\ndef solution():\n    mixed_number1 = 5 + Fraction(1, 6)\n    mixed_number2 = 6 + Fraction(1, 5)\n    sum_mixed_numbers = mixed_number1 + mixed_number2\n    sum_fractions = Fraction(1, 6) + Fraction(1, 5)\n\n    ans = sum_mixed_numbers / sum_fractions\n    \n    return ans\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_permutations = sorted(int(''.join(p)) for p in permutations(digits))\n    return all_permutations[4]\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    # Calculate the rate of construction per day\n    rate_per_day = 1000 / 5\n    \n    # Calculate the number of days it would take to construct a 2600-meter highway\n    days_to_construct_2600 = 2600 / rate_per_day\n    \n    return days_to_construct_2600\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance = 250\n    time_taken = 5\n    desired_time = 3\n\n    speed = distance / time_taken\n    distance_in_3_hours = speed * desired_time\n\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n    # Doc is 10cm taller than Happy\n    equation1 = Eq(doc, happy + 10)\n    # Happy is 10cm taller than Dopey\n    equation2 = Eq(happy, dopey + 10)\n    # Dopey, Sneezy, Bashful, and Grumpy are the same height\n    equation3 = Eq(dopey, sneezy)\n    equation4 = Eq(dopey, bashful)\n    equation5 = Eq(dopey, grumpy)\n    # Sleepy is 80cm tall\n    equation6 = Eq(sleepy, 80)\n    # Doc and Sleepy have the same combined height as Dopey and Sneezy\n    equation7 = Eq(doc + sleepy, dopey + sneezy)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7))\n    \n    total_height = sum(solutions.values())\n    \n    return total_height\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for number in range(10, 60):\n        if number % 8 == 3 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # The sum of an arithmetic sequence is computed as n/2 * (first_term + last_term)\n    # where n is the number of terms in the sequence.\n\n    # Compute the number of terms.\n    n = 90 - 12 + 1\n\n    # Compute the sum using the formula for the sum of an arithmetic sequence.\n    sum_of_sequence = n // 2 * (12 + 90)\n\n    # Since multiplying any number by an even number (n // 2 is even) results in an even number,\n    # the sum of the sequence is even.\n    # Return \"Even\" as the result since it is asked whether the sum is odd or even.\n    return \"Even\" if sum_of_sequence % 2 == 0 else \"Odd\"\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    # Number of intervals between trees is one less than the number of trees\n    num_intervals = 30 - 1\n\n    # Length of each interval\n    interval_length = 5  # in meters\n\n    # Total length of the road\n    road_length = num_intervals * interval_length\n\n    return road_length\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "from fractions import Fraction\n\ndef solution():\n    product = 1\n    for i in range(2, 10):\n        product *= Fraction(1, 1) + Fraction(1, i)\n    return product\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for i in range(2, 21):\n        if isprime(i) and isprime(i + 6) and isprime(i - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    distance_first_30 = x * (30/60)\n    distance_second_30 = (x - 20) * (30/60)\n    distance_last_30 = (x + 10) * (30/60)\n    \n    # The total distance is the sum of distances for each 30 minute interval\n    equation = Eq(distance_first_30 + distance_second_30 + distance_last_30, 70)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    total_digits = 0\n    # 1-9: 9 pages with 1 digit\n    total_digits += 1 * 9\n    # 10-99: 90 pages with 2 digits\n    total_digits += 2 * 90\n    # 100-345: 246 pages with 3 digits\n    total_digits += 3 * (345 - 99)\n\n    return total_digits\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    # Let's denote the numbers on Qiang's, Rory's, and Sophia's hats as Q, R, and S respectively.\n\n    from sympy import symbols, solve\n\n    Q, R, S = symbols('Q R S')\n\n    # The three equations based on the given conditions are:\n    equation1 = Q + R == 22  # Sophia sees Qiang's and Rory's hats, which sum to 22\n    equation2 = Q + S == 17  # Rory sees Qiang's and Sophia's hats, which sum to 17\n    equation3 = R + S == 11  # Qiang sees Rory's and Sophia's hats, which sum to 11\n\n    # Solve the system of equations for Q, R, S\n    solutions = solve((equation1, equation2, equation3), (Q, R, S))\n\n    # Find the largest number among the solutions Q, R, S\n    largest_num = max(solutions[Q], solutions[R], solutions[S])\n\n    return largest_num\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20  # Total number of students and teachers\n    max_people_per_bus = 25  # Maximum number of people per bus\n\n    # Calculate the number of buses needed\n    buses_needed = total_people / max_people_per_bus\n\n    # Since we can't have a fraction of a bus, we round up to the nearest whole number\n    return -int(-buses_needed)  # Equivalent to math.ceil without importing math\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    total_prize = symbols('total_prize')\n    denise_singles = total_prize / 5\n    denise_doubles = total_prize / 15\n    \n    equation = Eq(denise_singles + denise_doubles, 360)\n    \n    solution = solve(equation, total_prize)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # There are 5 positions left for the other players (not including the coach and captain)\n    # These 5 players can be arranged in any order, so we have 5 factorial possibilities for them.\n    other_players_permutations = factorial(5)\n    \n    # The captain has only two choices: standing on the left or the right side of the coach.\n    captain_choices = 2\n\n    # Apply the multiplication principle\n    total_permutations = captain_choices * other_players_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    penguins = 1  # Start with the case where there's only 1 penguin receiving 1 fish when assigned 6 fish each\n    while True:\n        fish_assigned_3 = penguins * 3 + 25\n        fish_assigned_6 = penguins * 6 - 5\n        if fish_assigned_3 == fish_assigned_6:\n            return penguins\n        penguins += 1\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root_part = (-0.512) ** (1/3)\n    square_part = (-1.2) ** 2\n    ans = cube_root_part + square_part\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_of_terms = 0\n    current_number = 1\n    for i in range(1, 31):\n        sum_of_terms += current_number\n        if i == (current_number * (current_number + 1)) // 2:\n            current_number += 1\n    return sum_of_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = (25 / 100) * 20 + (1 / 5) * 30 + (2 / 3) * 18\n    return ans\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        num = int(f\"1{a}7731\")\n        if num % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n\n    max_other_votes = max(alice_votes, betty_votes)\n    votes_needed_for_cindy = max_other_votes + 1 - cindy_votes\n\n    return votes_needed_for_cindy\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    # Initialize the total number of students as a variable\n    total_students = 0\n\n    # Start with the smallest possible square consisting of boys only, and incrementally increase the size\n    # We will assume the side length of the square made of students is 's',\n    # where 's' starts from one and increases by two for every consecutive layer (boys, girls, boys, ...)\n    s = 1\n\n    while True:\n        # Calculate the number of boys for a given square size 's'\n        n_boys = s**2 if s == 1 else (s**2 - (s - 2)**2)\n        \n        # Calculate the side length of the inner (girls) square\n        s_girls = s - 2\n        \n        # Calculate the number of girls if the side length of the girls' square is positive\n        n_girls = 0 if s_girls <= 0 else (s_girls**2 - (s_girls - 2)**2)\n        \n        # Calculate the total number of boys and girls so far\n        total_boys = n_boys if s == 1 else total_boys + n_boys\n        total_girls = total_girls + n_girls if s > 1 else 0\n        \n        # Check if the current arrangement has 20 more boys than girls\n        if total_boys - total_girls == 20:\n            # Calculate the total number of students\n            total_students = total_boys + total_girls\n            break\n\n        # Increment the square size by 2 for the next iteration\n        s += 2\n        \n    return total_students\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n    \n    solutions = solve((equation1, equation2), (chelsia, brian))\n    \n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina was 50 years old on 10th May 2005\n    gina_age_in_2005 = 50\n    # James was 20 years old on 10th May 1997\n    james_age_in_1997 = 20\n    \n    # Calculate the year when James was born\n    james_birth_year = 1997 - james_age_in_1997\n    \n    # Calculate the year when Gina was 50\n    gina_50_year = 2005\n    \n    # Calculate the difference in years between 2005 and the year James was born\n    years_diff = gina_50_year - james_birth_year\n    \n    # Calculate how old Gina was when James was born\n    gina_age_when_james_born = gina_age_in_2005 - years_diff\n    \n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the total sales\n    x = symbols('x')\n\n    # salary = base + commission for x up to 25000 + commission for x over 25000\n    # commission for x up to 25000 is 2% of min(x, 25000)\n    # commission for x over 25000 is 5% of max(x - 25000, 0)\n    salary = 2500 + 0.02 * x - 0.02 * max(x - 25000, 0) + 0.05 * max(x - 25000, 0)\n    \n    # create the equation based on the salary for July\n    equation = Eq(salary, 3300)\n\n    # solve for x\n    sales = solve(equation, x)\n\n    return sales[0]\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')  # Represent the number of marbles Ryan and Audrey initially had\n\n    # Initial ratio: ryan / audrey = 2 / 7\n    equation1 = Eq(ryan / audrey, 2/7)\n\n    # After Ryan bought 20 more and Audrey gave away 80, the ratio becomes ryan / audrey = 1 / 3\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1/3)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_for_four = 150 - 2\n    total_height_for_four = 4 * average_height_for_four\n    total_height_for_other_two = total_height_for_six - total_height_for_four\n    average_height_for_other_two = total_height_for_other_two / 2\n\n    return average_height_for_other_two\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt\n    p_pass_first = 0.4\n    # Probability of failing the first and passing on the second attempt\n    p_fail_first_pass_second = (1 - p_pass_first) * 0.5\n    # Probability of failing the first two and passing on the third attempt\n    p_fail_first_two_pass_third = (1 - p_pass_first) * (1 - 0.5) * 0.3\n\n    # Total probability of passing before the fourth attempt\n    p_pass_before_fourth = p_pass_first + p_fail_first_pass_second + p_fail_first_two_pass_third\n\n    return p_pass_before_fourth\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Compute each part of the expression individually for clarity.\n    \n    # 7 ÷ -3.3̅  (which is -3 + 1/3)\n    first_numerator = 7 / (-3 + 1/3)\n  \n    # ∛(-0.027) which is -3∛(27 * 10^-3) = -3∛(27) * 10^-1 = -0.3\n    first_denominator = (-0.027) ** (1/3)\n  \n    # 2^3 ÷ 4^2 (4^2 is the square of 2^2, 2^3 / 2^4 = 2^(-1))\n    second_numerator = 2 ** 3 / (4 ** 2)\n  \n    # 0.125 * [1.8 - (0.2 * 7)] = 0.125 * (1.8 - 1.4)\n    second_denominator = 0.125 * (1.8 - (0.2 * 7))\n\n    # 0.1 / 0.1̅4̅2̅8̅5̅7̅ which is 1/142857 = 1/999999 (because 142857 repeated is 1/7 )\n    third_numerator = 0.1 / (1/999999)\n  \n    # 2 * 0.3\n    third_denominator = 2 * 0.3\n\n    # Add the individual parts of the expression\n    result = first_numerator/first_denominator + second_numerator/second_denominator - (third_numerator + third_denominator)\n    \n    return result\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    digits_used = 0\n    page_number = 0\n    while digits_used < 1014:\n        page_number += 1\n        digits_used += len(str(page_number))\n    return page_number\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n    \n    combinations = num_fruits * num_vegetables\n    \n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    routes_from_A_to_B = 2\n    routes_from_B_to_C = 3\n    total_routes = routes_from_A_to_B * routes_from_B_to_C\n    return total_routes\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    number_of_terms = 30\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_terms = (number_of_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_to_complete = total_pieces / pieces_per_hour\n\n    return hours_to_complete\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "from math import factorial\n\ndef solution():\n    n = factorial(15)\n    count = 0\n\n    while n % 10 == 0:\n        n = n // 10\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    equation = Eq(age / 4 + 32, age - 22)\n\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    boys_more_than_girls = 44\n\n    for total_layers in range(1, 100):\n        girls = (total_layers // 2) ** 2\n        boys = girls + boys_more_than_girls\n        \n        if total_layers % 2 == 1:\n            boys += total_layers\n            \n        total_students = boys + girls\n        if total_students == boys ** 0.5 * girls ** 0.5:\n            return total_students\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    # the total distance a snail must climb to get out of the burrow\n    total_distance = 18\n    # distance climbed daily except for the 6th day\n    daily_climb = 7\n    # distance climbed on the 6th day\n    day6_climb = 3\n    # the height reached at the end of the 5th day\n    height_after_5_days = daily_climb * 5\n    # height after the 6th day\n    height_after_6_days = height_after_5_days + day6_climb\n    \n    if height_after_6_days >= total_distance:\n        # If height after 6th day is greater than or equal to total_distance,\n        # the snail doesn't slide down on the 6th night.\n        slide_down_distance = 0\n    else:\n        # otherwise, calculate the sliding distance based on the remaining distance after the sixth day\n        remaining_distance_after_6th_day = total_distance - height_after_6_days\n        # since it manages to get out on the 7th day without sliding back, it must climb exactly the\n        # remaining distance on the 7th day\n        slide_down_distance = daily_climb - remaining_distance_after_6th_day\n    \n    return slide_down_distance\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    # Assign the maximum possible number of apples to the second student\n    # Since all students get a different positive number of apples, we can\n    # start by assigning 1 apple to the first student, which leaves us with\n    # 47 apples. \n    # To maximize the number of apples for the second student, we then give \n    # 2 apples to the third student and 3 to the fourth student, as they\n    # must also receive different positive numbers and be less than the second student.\n    # This leaves the second student with 48 - 1 - 2 - 3 = 42 apples.\n    second_student_max = 48 - 1 - 2 - 3\n\n    return second_student_max\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    fastest = 1      # Eddie's time\n    second = 2       # Jack's time\n    third = 5        # Rose's time\n    slowest = 10     # Mary's time\n\n    # First trip: Fastest and second fastest go together: 2 minutes\n    # Second trip: Fastest goes back: 1 minute\n    # Third trip: Slowest and third slowest go together: 10 minutes\n    # Fourth trip: Second fastest goes back: 2 minutes\n    # Fifth trip: Fastest and second fastest go together: 2 minutes\n    # Total time: 2 + 1 + 10 + 2 + 2 = 17 minutes\n\n    total_time = second + fastest + slowest + second + second\n    return total_time\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let's call the original length of the rectangle 'length'\n    # and the original width 'width'. The rectangle's perimeter is\n    # 2*(length + width). If we increase the length of the rectangle\n    # by 12, the new length will be 'length + 12', and the new perimeter\n    # will be 2 * (length + 12 + width) = 38.\n    #\n    # Thus, we have the equation: 2*(length + 12 + width) = 38\n    # Simplifying it: length + 12 + width = 19\n    # The original perimeter is: 2*(length + width)\n    # We can replace 'length + width' with '19 - 12' from the above equation\n    # So the original perimeter is: 2 * (19 - 12)\n    \n    original_perimeter = 2 * (19 - 12)\n    return original_perimeter\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = 0\n    for i in range(1, 90, 4):\n        ans += i**2 - (i + 1)**2 + (i + 2)**2 - (i + 3)**2\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n    num_students = 4\n    num_ways = factorial(num_students)\n    return num_ways\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # Possible choices for Jenny per day\n    choices = ['chocolate', 'peaches', 'strawberries']\n    \n    # As Jenny eats chocolate on the first day, we remove it from the choices for the second day\n    second_day_choices = [choice for choice in choices if choice != 'chocolate']\n    \n    # Initialize count of ways\n    count = 0\n    \n    for second_day in second_day_choices:\n        # Remaining choices for the third day, excluding what was eaten on the second day\n        third_day_choices = [choice for choice in choices if choice != second_day]\n        \n        # Counting all possibilities for the third day\n        count += len(third_day_choices)\n        \n    return count\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    num_ways = 0\n    for i in range(1, (8 // 2) + 1):  # The second value is determined by the first, so only need to iterate to 8//2\n        num_ways += 1\n\n    return num_ways\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    # Let's denote the total salary as 's'.\n    # After spending 5/9 of her salary, Almaz is left with 4/9 of her salary.\n    # Then she spends 3/4 of the remainder, which is 3/4 of 4/9 of her salary.\n    # We are given that after these expenses, she has $160 left.\n    \n    from sympy import symbols, Eq, solve\n\n    s = symbols('s')\n    television_fraction = 5/9\n    table_fraction = 3/4\n    \n    # Salary left after buying television\n    salary_after_tv = s - (television_fraction * s)\n    # Salary left after buying table\n    salary_after_table = salary_after_tv - (table_fraction * salary_after_tv)\n\n    # Equation for the amount of salary left after all expenses\n    equation = Eq(salary_after_table, 160)\n    # We solve for total salary 's'\n    total_salary = solve(equation, s)\n\n    # Finally, we calculate the cost of the television\n    cost_of_television = total_salary[0] * television_fraction\n\n    return float(cost_of_television)\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    # For circular permutations of n distinct items, the formula is (n-1)!\n    # Since rotating the table doesn't change the order, one seat is considered fixed\n    # and we arrange the remaining 6 people around the table\n    \n    ans = factorial(6)\n    return ans\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    return 50 / (5/3)\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for John and Emma's current ages\n    john, emma = symbols('john emma')\n    \n    # In 3 years, the ages of John and Emma will sum to 27\n    equation1 = Eq(john + 3 + emma + 3, 27)\n    \n    # Emma’s age is the difference between her own and John’s ages\n    equation2 = Eq(john - emma, emma)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, emma))\n    \n    return solutions[emma]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    num_work_days = 6\n\n    total_earnings = average_daily_earnings * num_work_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    return comb(15, 3)\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    quire = 24\n    ream = 20 * quire\n    num_sheets = 2 * ream\n    return num_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed is 48 km/h\n    tom_speed = 48\n    # Jack's speed is 50 km/h\n    jack_speed = 50\n    # Jack left 3 hours later than Tom\n    jack_delay = 3\n    # After 5 more hours, they are 15 km away from each other\n    time_after_jack_left = 5\n    # Total time Tom traveled is jack_delay + time_after_jack_left\n    tom_total_time = jack_delay + time_after_jack_left\n    # Compute the distance Tom traveled\n    tom_distance = tom_speed * tom_total_time\n    # Compute the distance Jack traveled\n    jack_distance = jack_speed * time_after_jack_left\n    # Compute the total distance between A and B. They are 15 km apart after meeting.\n    total_distance = tom_distance + jack_distance + 15\n    \n    return total_distance\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    water_angle = 36\n    total_angle = 360\n    coffee_people = 7\n    cola_percentage = 30\n    \n    water_fraction = water_angle / total_angle\n    tea_fraction = 1 / 4\n    coffee_fraction = coffee_people  # This will be updated once we know the total number of people\n    cola_fraction = cola_percentage / 100\n\n    # since tea_fraction + coffee_fraction + cola_fraction + water_fraction = 1\n    # and coffee_fraction = coffee_people / total_people\n    # we have the following equation\n    \n    # tea_fraction + coffee_people / total_people + cola_fraction + water_fraction = 1\n    \n    # Let's solve for total_people:\n    \n    total_people = coffee_people / (1 - tea_fraction - cola_fraction - water_fraction)\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_pupils = 18\n    fraction_present = 1 - 2 / 5\n    \n    total_pupils = present_pupils / fraction_present\n    \n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    ans = (10 ** 5) / (5 ** 5)\n    return ans\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = 4 + 5\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    numbers = [5.2, 6.7, 4.8]\n    numbers.sort()\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    saturday, sunday = symbols('saturday sunday')\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday, sunday + 43)\n    \n    solutions = solve((equation1, equation2), (saturday, sunday))\n    \n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    spacing = 2\n\n    perimeter = (length + width) * 2\n    num_trees = perimeter / spacing\n\n    # Subtracting the corner tree which has been counted twice\n    num_trees -= 1 \n\n    return int(num_trees)\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    # A child has 2 legs, a dog has 4 legs, and there are 3 times as many dogs as children.\n    # Let's denote the number of children as c and the number of dogs as d.\n    # We have two equations:\n    # 1) d = 3c (there are 3 times as many dogs as children)\n    # 2) 2c + 4d = 56 (the total number of legs)\n\n    # Substitute the first equation into the second gives:\n    # 2c + 4(3c) = 56\n    # 2c + 12c = 56\n    # 14c = 56\n    # c = 56 / 14\n    c = 56 // 14\n\n    return c\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_meters = 1.36\n    meters_to_cm = 100\n    height_cm = height_meters * meters_to_cm\n    return height_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_amount = 500\n    income_tax_rate = 3 / 100\n    income_tax = initial_amount * income_tax_rate\n    final_amount = initial_amount - income_tax\n    return final_amount\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_amount = 110\n    adult_price = 20\n    children_price = 15\n\n    for adults in range(2, total_amount // adult_price + 1):\n        children = (total_amount - (adults * adult_price)) / children_price\n        if children.is_integer() and children >= 0:\n            return int(children)\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 10000):\n            original_number = j * 10 + 9\n            new_number = int(str(9) + str(j))\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_volume_squash = 750  # in millilitres\n    ratio_squash_to_water = 1 / 9\n\n    total_volume_mixture = total_volume_squash * (1 + 1 / ratio_squash_to_water)\n    volume_per_bottle = 1000  # 1 litre = 1000 millilitres\n    \n    full_bottles = int(total_volume_mixture // volume_per_bottle)\n    \n    return full_bottles\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    result = (180 / (0.6 * 100))\n    return result\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    # Using modular exponentiation to find the remainder of 221^2020 / 7\n    base = 221\n    exponent = 2020\n    modulo = 7\n\n    # Reduce the base modulo before exponentiating\n    base %= modulo\n\n    remainder = pow(base, exponent, modulo)\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # Since we only care about the last 2 digits, we can use modulo 100\n    last_two_digits = (6 ** 2015 + (2015 * 6) + 2015 ** 6) % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    from itertools import permutations\n\n    # Fixed digits B and D\n    B, D = 2, 0\n    \n    # Loop through all permutations of the remaining digits for A, C, E, F\n    for perm in permutations([i for i in range(10) if i not in [B, D]], 4):\n        A, C, E, F = perm\n        \n        # Construct the numbers from the digits\n        ABCDEF = A * 10**5 + B * 10**4 + C * 10**3 + D * 10**2 + E * 10 + F\n        EFABCD = E * 10**5 + F * 10**4 + A * 10**3 + B * 10**2 + C * 10 + D\n\n        # Check if the equation holds\n        if 5 * ABCDEF == 6 * EFABCD:\n            FACE = F * 1000 + A * 100 + C * 10 + E\n            return FACE\n\n    return None\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    ans = 736 + 4588\n    return ans\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # From the given factors, we can deduce that the number must be divisible by these factors.\n    # The largest given factor is 8, and since it is one of the factors, the number must be a multiple of 8.\n    # We also know that 7 is a factor, and since 7 is a prime number, the number must be a multiple of 7 as well.\n    # Since the number has exactly 8 factors, it must be of the form p^a * q^b, where p and q are primes and (a+1)(b+1) = 8\n    # In this case, with the primes 2 (from factor 4) and 7, and knowing that 2^3=8 is a factor, our number is 2^3 * 7^1.\n    # a+1 = 4 (for prime 2) and b+1 = 2 (for prime 7) which satisfy the condition (a+1)(b+1) = 8.\n\n    number = (2**3) * (7**1)  # This is 8 * 7 = 56\n    return number\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # Thomas's calculation seems incorrect, \n    # because it incorrectly adds fractions of different parts (book and bag).\n    # We need to calculate the correct total money Li Yan had initially,\n    # given she spent 1/3 on the book, and then 1/2 of the remainder on the bag.\n    \n    # Let 'x' be the total amount of money Li Yan had initially.\n    # According to the problem:\n    # (1/3) * x = cost of the book\n    # (1/2) * (2/3) * x = cost of the bag, which is half of the remainder after buying the book\n    # Adding both costs gives us the total of $132:\n    # (1/3) * x + (1/2) * (2/3) * x = 132\n    # Simplifying,\n    # (1/3) * x + (1/3) * x = 132\n    # (2/3) * x = 132\n    # x = 132 / (2/3)\n    # x = 132 * (3/2)\n    # x = 198\n    \n    # Thus, Li Yan had initially $198\n    initial_money = 132 / (2/3)\n    \n    return initial_money\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    return tens + tenths + hundredths\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_percentage = 10\n    discount_amount = original_price * (discount_percentage / 100)\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of animals initially as 'x'.\n    # Therefore, the number of cows initially is 0.65x and the number of goats is 0.35x.\n    x = symbols('x')\n\n    # After 240 additional animals, the total number becomes x + 240.\n    # The number of cows is now 0.65x + 240 (given that both cows and goats were added)\n    # The new percentage of cows is 65% + 20% = 85% of the new total x + 240.\n    # The number of goats doubled, so it is now 2 * 0.35x.\n\n    # We set up our equations based on the above information:\n    equation1 = Eq(0.85 * (x + 240), 0.65 * x + 240)\n    equation2 = Eq(2 * 0.35 * x, 0.15 * (x + 240))\n\n    # We solve the system of equations.\n    solution = solve((equation1, equation2), (x))\n\n    # We are interested in the initial number of goats, which is 0.35x.\n    initial_goats = 0.35 * solution[x]\n\n    return int(initial_goats)\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    from fractions import Fraction\n\n    first_month_kept = 1 - Fraction(1680, 'x')  # 'x' will represent the total cookies in the box\n    second_month_sold = Fraction(7, 20) + Fraction(1680, 'x')\n    second_month_kept = 1 - second_month_sold\n\n    kept_difference = first_month_kept - second_month_kept\n\n    # The number of cookies kept decreased by 3/20\n    equation = kept_difference - Fraction(3, 20) == 0\n\n    # Solve the equation for 'x'\n    x = equation.as_numer_denom()[1] / equation.as_numer_denom()[0]\n\n    return int(x)\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    # Position of Jolene from the front\n    jolene_pos_front = 6\n\n    # Position of Amy from the back\n    amy_pos_back = 8\n    \n    # Since Amy is directly behind Jolene, we need to find total number of children\n    # Total number of children = Position of Jolene from the front + Position of Amy from the back - 1\n    total_children = jolene_pos_front + amy_pos_back - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps = 0\n    height_after_jumps = 0\n\n    while height_after_jumps < total_height:\n        jumps += 1\n        height_after_jumps += jump_up\n        if height_after_jumps >= total_height:\n            break\n        if jumps % 2 == 0:\n            height_after_jumps -= slide_down\n\n    return jumps\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    number = 1\n    while True:\n        if number % 5 == 1 and number % 6 == 2 and number % 11 == 9:\n            break\n        number += 1\n    return number\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n    perimeter = 5 * side_length\n    # Subtracting 4 because there is a sunflower on each corner\n    number_of_sunflowers = (perimeter - 4 * distance_apart) // distance_apart + 5\n    return int(number_of_sunflowers)\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    budget_pounds = 3\n    budget_pence = budget_pounds * 100\n    num_stamps = budget_pence // stamp_cost_pence\n    return num_stamps\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    total_people = 39\n    boat_capacity = 7\n    trip_time = 2\n\n    trips = (total_people - 1) // (boat_capacity - 1)\n    total_trip_time = trips * trip_time\n\n    # If the last trip is not full, it doesn't need a return trip\n    if total_people % (boat_capacity - 1) == 0:\n        total_trip_time += trip_time\n    else:\n        total_trip_time += trip_time * 2\n    \n    return total_trip_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time Ryan would take at his usual speed\n    t = symbols('t')\n\n    # Usual speed = 45 miles/hour, Distance = 45t\n    # Reduced speed = 30 miles/hour, Distance = 30(t+2)\n    # Since the distance is the same: 45t = 30(t+2)\n    equation = Eq(45 * t, 30 * (t + 2))\n\n    # Solving for t\n    solutions = solve(equation, t)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(100) // factorial(98)\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"976{digit}3\")\n        if number % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def partitions(n, I=1):\n        yield (n,)\n        for i in range(I, n//2 + 1):\n            for p in partitions(n-i, i):\n                yield (i,) + p\n\n    count = 0\n    for _ in partitions(5):\n        count += 1\n    return count\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1997 - 2):\n        a, b = b, (a + b) % 3  # Keep only the remainder to avoid large number calculations\n    return b\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    from fractions import Fraction\n    from decimal import Decimal, ROUND_HALF_UP\n    \n    numerator = Decimal(4.219**2) / Decimal(Fraction(14, 3) + Fraction(38, 59))\n    denominator = Decimal(2.501**3)\n    result = numerator / denominator \n    \n    ans = result.quantize(Decimal('0.001'), rounding=ROUND_HALF_UP)\n    return ans\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    students, sweets = symbols('students sweets')\n\n    equation1 = Eq(sweets - 6*students, -26)\n    equation2 = Eq(sweets - 5*students, -5)\n\n    solutions = solve((equation1, equation2), (students, sweets))\n\n    return solutions[sweets]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Because the difference between neighbouring trees is 1,\n    # the sequence of the number of fruits will form an arithmetic sequence.\n\n    # If the sum of the sequence is an odd number (like 225),\n    # then the sequence must contain an odd number of terms with an even average,\n    # or an even number of terms with an odd average.\n    \n    # For 8 trees (even number of terms), the average must be odd.\n    # An odd average is not possible with differences of 1 between each term.\n    \n    # Therefore, it is impossible to have a sum of 225 with 8 trees\n    # where neighbouring trees have a difference of 1 fruit.\n\n    return \"No, it is not possible.\"\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    # Amin's cookies\n    amin_cookies = 329\n    # Amin baked 97 cookies less than Jessica\n    jessica_cookies = amin_cookies + 97\n    # Jessica baked 58 more cookies than Mary\n    mary_cookies = jessica_cookies - 58\n\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n\n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # There are two arithmetic sequences here: one increasing from 3 to 10, and one decreasing from 10 to 3.\n    # First sequence: 3, 4, 5, ..., 10 has 8 terms because 10 - 3 + 1 = 8\n    # Second sequence: 10, 9, 8, ..., 3 has 8 terms as well because 10 - 3 + 1 = 8\n\n    # Sum of the first sequence: n/2 * (first_term + last_term)\n    sum_increasing = 8/2 * (3 + 10)  # Sum of increasing sequence from 3 to 10\n\n    # Sum of the second sequence: n/2 * (first_term + last_term)\n    sum_decreasing = 8/2 * (3 + 10)  # Sum of decreasing sequence from 10 to 3\n\n    # Total sum is the sum of both sequences.\n    return sum_increasing + sum_decreasing\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Leo's current age and his son's current age\n    leo, son = symbols('leo son')\n\n    # Create equations based on the problem description\n    equation1 = Eq(leo - son, son - 4)\n    equation2 = Eq(leo + (leo - son), 70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo, son))\n\n    # Return Leo's current age\n    return solutions[leo]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # calculate permutations for arranging singing performances SSSS\n    perm_singing = factorial(4)\n    \n    # possible positions for D are between S's and at the beginning and the end (5 possible positions)\n    # D _ S _ S _ S _ S _ D (underscores represent possible positions for D's)\n    # choosing 3 positions out of 5 for D's\n    comb_dancing = factorial(5) // (factorial(3) * factorial(5 - 3))\n    \n    # total arrangements is the product of the two possibilities\n    total_arrangements = perm_singing * comb_dancing\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    # Let x represent the number of years later when Dad's age will be 4 times Heidi's age\n    heidi_current_age = 8\n    dad_current_age = 50\n    \n    # Set up the equation: \n    # Dad's age in x years = 50 + x\n    # Heidi's age in x years = 8 + x\n    # Dad's age in x years = 4 * Heidi's age in x years\n    # Therefore: (50 + x) = 4 * (8 + x)\n    \n    # Solve the equation for x\n    x = (4 * heidi_current_age - dad_current_age) / (4 - 1)\n    \n    return int(x)\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_in_6_minutes = 48\n    minutes_to_calculate = 9\n    words_per_minute = words_in_6_minutes / 6\n    words_in_9_minutes = words_per_minute * minutes_to_calculate\n\n    return int(words_in_9_minutes)\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    ans = 554 + 479\n    return ans\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    count_5 = 0\n    for i in range(1, 61):\n        while i % 5 == 0:\n            count_5 += 1\n            i /= 5\n    return count_5\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    average_initial = 120\n    average_final = 150\n    num_of_initial_numbers = 3\n    num_of_final_numbers = 4\n\n    total_initial = average_initial * num_of_initial_numbers\n    total_final = average_final * num_of_final_numbers\n\n    fourth_number = total_final - total_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    # Given the equation box * 15 = 11 * 14 + 26\n    right_side = 11 * 14 + 26\n    box = right_side / 15\n    return box\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    import math\n\n    r = 1\n    while not math.sqrt(216 * r).is_integer():\n        r += 1\n\n    return r\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    ans = (3/13) * 52\n    return ans\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    daily_climb = 8\n    nightly_slip = 3\n    net_climb_per_day = daily_climb - nightly_slip\n    days_to_climb = 9\n    \n    # Calculate the total distance climbed after 8 full days\n    total_climb_after_full_days = net_climb_per_day * (days_to_climb - 1) # minus one day because on the 9th day it climbs out\n\n    # On the 9th day, the snail climbs out, so we add the full climb for that day without slipping back\n    total_climb = total_climb_after_full_days + daily_climb \n\n    return total_climb\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discounted_price = original_price * (1 - discount_percentage / 100)\n    return discounted_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n\n    # The dividend is given by the formula: dividend = divisor * quotient + remainder\n    # The smallest possible dividend occurs when the divisor is the smallest integer greater than the remainder\n    smallest_divisor = remainder + 1\n    smallest_dividend = smallest_divisor * quotient + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n    \n    return only_french\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "from math import factorial\n\ndef solution():\n    total_permutations = factorial(6)  # Total permutations of 6 people\n    teddy_left_permutations = factorial(5)  # Permutations if Teddy is on the furthest left\n    # Subtract permutations where Teddy is on the furthest left from the total\n    return total_permutations - teddy_left_permutations\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    difference = -4\n    term = first_term\n    num_terms = 0\n\n    while term > 0:\n        num_terms += 1\n        term += difference\n\n    return num_terms\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n    \n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    ans = (4 / 9) * 963\n    return ans\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for number in range(10, 100):\n        if sum(map(int, str(number))) % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # total sum of 7 consecutive numbers\n    sum_value = 280\n    # As they are consecutive, the mean value is the fourth number\n    mean_value = sum_value // 7\n    # The largest number will be the 3rd number after the mean\n    largest_number = mean_value + 3\n    \n    return largest_number\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    bag_of_sweets, can_of_drink = symbols('bag_of_sweets can_of_drink')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(3 * bag_of_sweets + 5 * can_of_drink, 4.90)\n    equation2 = Eq(1 * bag_of_sweets + 3 * can_of_drink, 2.70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bag_of_sweets, can_of_drink))\n\n    return solutions[bag_of_sweets]\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    result = 0\n    sign = 1\n    for n in range(1000, 0, -10):\n        result += sign * n**2\n        sign *= -1\n    return result\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    equation1 = Eq(a + b, 49)\n    equation2 = Eq(a - b, 9)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return max(solutions[a], solutions[b])\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    from math import gcd\n    max_sum = 0\n    # Iterate through possible 3-digit numbers for A and B\n    for A in range(100, 1000):\n        for B in range(100, 1000):\n            # Check if A and B have two equal digits\n            if (len(set(str(A))) < 3 or len(set(str(B))) < 3) and len(set(str(A)) & set(str(B))) >= 1:\n                # Check if the highest common factor of A and B is 75\n                if gcd(A, B) == 75:\n                    # Update the maximum sum\n                    max_sum = max(max_sum, A + B)\n    return max_sum\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    return sum(range(1, 10))\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    # Initialize the sum\n    total_sum = 0\n    # Loop through the series, alternating addition and subtraction\n    for i in range(20, 1, -2):\n        total_sum += i if ((20 - i) // 2) % 2 == 0 else -i\n    return total_sum\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    sum_of_sequence = 8 + 32 + 72 + 128 + 200 + 288 + 392 + 512 + 648\n    return sum_of_sequence\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "def solution():\n    from math import factorial\n\n    # Number of ways to arrange 5 magazines (M) among themselves\n    magazine_perm = factorial(5)\n\n    # We have 5 magazines and we need to put at least 1 magazine between every 2 storybooks\n    # So we will have 6 places to put our 5 storybooks (SB): M _ M _ M _ M _ M _ (The underscores are possible places for storybooks)\n    \n    # Number of ways to arrange 5 storybooks among the 6 possible places\n    # This is equivalent to choosing 5 places out of 6 to place storybooks\n    storybook_combinations = factorial(6) // (factorial(5) * factorial(6 - 5))\n\n    # Total ways to arrange both magazines and storybooks\n    total_ways = magazine_perm * storybook_combinations\n\n    return total_ways\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    skip_next = False\n\n    for throw in throws:\n        if skip_next:\n            position -= throw\n            skip_next = False\n        elif throw == 6:\n            skip_next = True\n        else:\n            position += throw\n\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alex, brayden = symbols('alex brayden')\n    \n    equation1 = Eq(alex + brayden, 756)\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n    \n    solutions = solve((equation1, equation2), (alex, brayden))\n    \n    return solutions[brayden]\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate_money = 13\n    james_money = 28\n    \n    james_gives = (james_money - kate_money) / 2\n    return james_gives\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    ans = 17.1 / 10\n    return ans\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            num = int(f\"42{A}28{B}\")\n            if num % 99 == 0:\n                return int(f\"{A}{B}\")\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum = 10 * 10\n    sum_remaining = 9 * 9\n    removed_number = total_sum - sum_remaining\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6\n    time_seconds = 300\n\n    # Convert speed from km/h to m/s\n    speed_ms = speed_kmh * 1000 / 3600\n    \n    # Distance = speed * time\n    distance_meters = speed_ms * time_seconds\n    \n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount each brother and sister received when they shared equally\n    x = symbols('x')\n\n    # The original sum of money shared among three brothers and a sister\n    original_sum = 4 * x\n\n    # The amount each brother would have received if only the brothers shared the money\n    brother_share = x + 20\n\n    # The sum of money if only the brothers had shared it\n    brothers_sum = 3 * brother_share\n\n    # Equation to solve: the original sum is equal to the sum if only brothers shared it\n    equation = Eq(original_sum, brothers_sum)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0] * 4  # The result times 4 (four siblings)\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    return 25 * 4 * 13\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    # We look for a number that satisfies the following conditions:\n    # 1. After eating 2, one-third of the remaining should be an integer.\n    # 2. After sharing one-third, the result should be divisible by 4.\n\n    # Start with 3 as the smallest possible number of gums (since I ate 2, the original number must be > 2)\n    gums = 3\n    while True:\n        remaining_after_eating_2 = gums - 2\n        if remaining_after_eating_2 % 3 == 0:\n            share_with_friends = remaining_after_eating_2 // 3\n            remaining_after_sharing = remaining_after_eating_2 - share_with_friends\n            if remaining_after_sharing % 4 == 0:\n                return gums\n        gums += 1\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    n = (21 + 1) // 2  # There are n odd numbers up to 21\n    sum_n = n * (n + 1) // 2  # Sum of first n natural numbers\n    ans = sum_n**2  # Square of the sum of first n natural numbers\n    return ans\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of beads each color had initially\n    x = symbols('x')\n    \n    # after giving away some beads\n    red_left = 2 * (x - 112)/3  # red beads left are 2 times green beads left\n    green_left = (x - 112)/3    # green beads left\n    blue_left = x - 112         # blue beads left are x - 112\n\n    # according to the condition\n    total_left = 350          # total beads left are 350\n    blue_red_difference = 50  # blue beads left is 50 fewer than red beads left\n    \n    # setting up the equations based on the problem statement\n    equation1 = Eq(red_left + green_left + blue_left, total_left)\n    equation2 = Eq(red_left - blue_left, blue_red_difference)\n\n    # solve the equations\n    solutions = solve((equation1, equation2), x)\n    \n    # answer is the initial number of blue beads\n    return solutions[x]\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    averages = [36, 38, 39, 45, 49]\n    sum_of_four_numbers = [4 * avg for avg in averages]\n    total_sum = sum(sum_of_four_numbers)\n\n    # Since each number is added 4 times to get the total sum,\n    # to find the actual sum of the 5 numbers, we divide by 4\n    # and then subtract the smallest average (first element in the sorted averages)\n    # since it was included in the average calculations but its corresponding\n    # largest number wasn't.\n    real_total = (total_sum // 4) - min(averages)\n\n    # The largest number is the real total sum minus the sum of the four smallest numbers\n    largest_number = real_total - sum(averages[:-1])\n\n    return largest_number\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    art_fraction = 1 / 3\n    science_fraction = 4 / 5\n\n    science_books = (art_books * art_fraction) / science_fraction\n\n    return science_books\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    # Let x be the number of stickers Katelyn has\n    # According to the ratio, Jared has 5x/2 stickers\n    # We also know that Jared has 60 more stickers than Katelyn\n    # Therefore, we have the equation: 5x/2 - x = 60\n\n    # Solving for x:\n    x = (60 * 2) / 3  # Simplify the equation to x = 120 / 3\n    \n    # Now we know the number of stickers Katelyn has\n    # We can calculate the number of stickers Jared has\n    jared_stickers = (5 * x) / 2\n    \n    # The total number of stickers is the sum of what Katelyn and Jared have\n    total_stickers = x + jared_stickers\n    \n    return int(total_stickers)\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    principal = 10000\n    rate_first_period = 1.05 ** 3\n    rate_second_period = 1.10 ** 2\n    final_amount = round(principal * rate_first_period * rate_second_period, 1)\n    return final_amount\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # If 16 sausages are to be shared among 24 people,\n    # every person should get 16/24 of a sausage.\n    # This ratio simplifies to 2/3 of a sausage per person.\n\n    # To achieve this cutting in the least number of cuts, we can try\n    # to make cuts in such a way that each cut produces 3 equal pieces\n    # from different sausages. We can line up the sausages and then make \n    # cuts across them at 1/3 and 2/3 of the length.\n\n    # To do this, we utilize the fact that the cuts are identical and we can\n    # cut multiple sausages at once. Since every cut will aim to divide each\n    # sausage into 3 parts, the least number of cuts will be the number of cuts\n    # that can divide all 16 sausages into thirds.\n\n    # We will use integer division to calculate the least number of cuts required.\n    # We need 2 cuts per sausage, and we want the total number of cuts to add up to\n    # twice the number of sausages. However, since we can cut through all sausages\n    # in a single slice, we only need 2 such slices.\n\n    # Therefore, the least number of cuts required is 2.\n\n    return 2\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    # Greatest Common Divisor of the three numbers\n    gcd_books = gcd(gcd(42, 63), 28)\n    \n    return gcd_books\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Star's work rate per hour as 's' and Nini's work rate per hour as 'n'.\n    s, n = symbols('s n')\n\n    # According to the problem, we have two equations:\n    # 5*s + 20*n = 1 (job)\n    # 20*s + 8*n = 1 (job)\n    equation1 = Eq(5*s + 20*n, 1)\n    equation2 = Eq(20*s + 8*n, 1)\n\n    # Solving these equations will give us the work rates for Star and Nini.\n    solutions = solve((equation1, equation2), (s, n))\n\n    # We want to find the time it takes for Nini to finish the job by herself.\n    # We can use the equation t*n = 1 (job).\n    # Therefore, t = 1/n\n    time_nini = 1 / solutions[n]\n\n    return time_nini\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    rate_per_company = 900 / (4 * 5) \n    total_days_for_one = 2700 / rate_per_company\n    return total_days_for_one\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Time when Richard's mother arrives at St Petersburg\n    arrival_time = datetime.strptime('12:00', '%H:%M')\n\n    # St Petersburg is 3 hours ahead of Manchester\n    time_difference = timedelta(hours=3)\n\n    # Time when the plane left Manchester\n    departure_time = arrival_time - time_difference\n\n    return departure_time.time()\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    lbs = kg * kg_to_lbs\n    return lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n    \n    ben_height = jane_height - difference\n    \n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    ben_from_front = 6\n    frank_from_back = 9\n    people_between = 10\n\n    total_people = (ben_from_front - 1) + people_between + (frank_from_back - 1) + 1\n\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return latte_litres\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    distance = symbols('distance')\n    \n    # Qiqi's speed (m/min)\n    qiqi_speed = 60  \n    # Weiling's speed (m/min)\n    weiling_speed = 72  \n    # Qiqi start time (min)\n    qiqi_start_time = 0  \n    # Weiling's start time (min) - 2 minutes after Qiqi\n    weiling_start_time = 2  \n    # Weiling arrives 4 minutes earlier than Qiqi\n    arrival_difference = 4  \n    \n    # Qiqi's travel time = distance / speed\n    # Weiling's travel time = distance / speed - weiling_start_time\n    # Weiling arrives 4 minutes earlier than Qiqi \n    # distance / qiqi_speed - (distance / weiling_speed - weiling_start_time) = arrival_difference\n    \n    eq = Eq((distance / qiqi_speed) - (distance / weiling_speed - weiling_start_time), arrival_difference)\n\n    # Solve for distance\n    distance_solution = solve(eq, distance)\n\n    return distance_solution[0]\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    # Starting from the smallest 3-digit number that leaves a remainder of 2 when divided by 8\n    for num in range(102, 1000, 8):  # Increment by 8 since we need the remainder to be 2 out of 8\n        if num % 11 == 2:  # Check if it also leaves a remainder of 2 when divided by 11\n            return num\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(32, 1, -2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = 72 / 100 * 140\n    return result\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of marbles in the jar as x\n    x = symbols('x')\n\n    # According to the problem statement, we have the following equations\n    equation = Eq((2/5)*x + (1/3)*x + 96, x)\n\n    # Solving the equation for x to find the total number of marbles in the jar\n    total_marbles = solve(equation, x)\n\n    # We expect a single solution for the total number of marbles\n    return total_marbles[0]\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    annual_interest_rate = 0.09\n    number_of_years = 5\n    \n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** number_of_years)\n    \n    return round(initial_deposit, 2)\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    return (42663**2) % 9\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    total_sum = 0\n    number = 0\n    for i in range(1, 2016):\n        number = number * 10 + 1\n        total_sum += number\n        total_sum %= 10000  # Keep only the last 4 digits\n    return total_sum\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    return 1 / 20\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    unit_digit_13_pow = pow(13, 242, 10)\n    unit_digit_17_pow = pow(17, 379, 10)\n    unit_digit_4_pow = pow(4, 2012, 10)\n    ans = (unit_digit_13_pow + unit_digit_17_pow * unit_digit_4_pow) % 10\n    return ans\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # To ensure we get 2 marbles of the same colour,\n    # we must consider the worst-case scenario according to the Pigeonhole Principle.\n    # Take 1 blue marble out - (1 blue, 0 yellow)\n    # Then take 1 yellow marble out - (1 blue, 1 yellow)\n    # At this point, no matter which marble we take out next, it will ensure that\n    # we have 2 marbles of at least one of the colours.\n\n    # We need to take out 3 marbles to ensure we have 2 of the same colour.\n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # Initial search range for ages, assuming reasonable human ages\n    for john_age in range(1, 50):\n        mary_age = john_age - 1\n        for child1_age in range(1, 20):\n            child2_age = child1_age + 2\n            child3_age = child2_age + 2\n\n            # Product of John and Mary's ages this year and next year\n            product_john_mary_current = john_age * mary_age\n            product_john_mary_next = (john_age + 1) * (mary_age + 1)\n\n            # Product of the children's ages this year and next year\n            product_children_current = child1_age * child2_age * child3_age\n            product_children_next = (child1_age + 1) * (child2_age + 1) * (child3_age + 1)\n\n            # Check the conditions given in the problem statement\n            if (product_john_mary_current < 2019 and product_children_current < 2019 and\n                    product_john_mary_next > 2020 and product_children_next > 2020):\n                total_age = john_age + mary_age + child1_age + child2_age + child3_age\n                return total_age\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = 8 - 11\n    n = 7\n\n    seventh_term = first_term + (n - 1) * common_difference\n    return seventh_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    remaining = 1/6\n    spent_on_cups = 3/4\n\n    # Let 'x' be the original sum of money\n    # Spent on plates + spent on cups + remaining = original sum\n    # (x - 36) + 3/4*(x - 36) + 1/6*x = x\n    # Combining like terms: (1 + 3/4)(x - 36) + 1/6*x = x\n    # Solving for 'x':\n    # (7/4)(x - 36) + 1/6*x = x\n    # (7/4)*x - (7*36)/4 + 1/6*x = x\n    # Multiplying by 24 (LCM of 4 and 6) to clear fractions:\n    # 24*(7/4)*x - 7*36*6 + 24*(1/6)*x = 24*x\n    # 42*x - 7*36*6 + 4*x = 24*x\n    # 46*x - 7*36*6 = 24*x\n    # 22*x = 7*36*6\n    # x = (7*36*6) / 22\n\n    x = (7*36*6) / 22\n    return x\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for p in permutations(range(1, 10)):\n        A = (100*p[0]+10*p[1]+p[2]) + \\\n            (100*p[1]+10*p[2]+p[3]) + \\\n            (100*p[2]+10*p[3]+p[4]) + \\\n            (100*p[3]+10*p[4]+p[5]) + \\\n            (100*p[4]+10*p[5]+p[6]) + \\\n            (100*p[5]+10*p[6]+p[7]) + \\\n            (100*p[6]+10*p[7]+p[8])\n        max_A = max(max_A, A)\n    return max_A\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # convert 1 hour to seconds\n    one_hour_in_seconds = 1 * 60 * 60\n    # convert 2 minutes 30 seconds to seconds\n    travel_time_per_mile_in_seconds = 2 * 60 + 30\n    # calculate the number of miles in one hour\n    miles_in_one_hour = one_hour_in_seconds / travel_time_per_mile_in_seconds\n\n    return miles_in_one_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 0\n    number = 0\n    \n    for length in range(1, 6):  # The maximum length of an integer with the leftmost digit 8 could be 5.\n        if count + 9 * (10 ** (length - 1)) >= 2012:\n            number = 8 * (10 ** (length - 1)) + (2012 - count - 1)\n            break\n        count += 9 * (10 ** (length - 1))\n    \n    return number\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Let the middle number of the five consecutive natural numbers be x.\n    # Therefore, the five numbers are: x-2, x-1, x, x+1, x+2\n    # The sum of these five numbers will give us the total number of balls, which is 160.\n    # (x-2) + (x-1) + x + (x+1) + (x+2) = 160\n    # Simplifying the equation: 5x = 160\n    # Solving for x gives us the middle number, then x+2 will be the student with the most balls.\n    x = 160 / 5\n    return x + 2\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    from itertools import combinations_with_replacement\n\n    # Remaining envelopes after the minimum requirements for A, B, and C are met\n    remaining = 15 - (2 + 4 + 3)\n\n    # The remaining envelopes can go to any of the 4 mailboxes\n    box_options = 4\n\n    # Count the number of ways to distribute the remaining envelopes among the 4 boxes\n    # Each combination_with_replacement represents a way of placing the envelopes\n    # such that the order of the envelopes doesn't matter, and repetitions are allowed\n    ways = list(combinations_with_replacement(range(box_options), remaining))\n\n    return len(ways)\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    ans = 25 * 80 / 100\n    return ans\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    return sum(i**2 for i in range(2, 21, 2))\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    \n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    income = symbols('income')\n\n    # If the individual's income is less than or equal to $20000\n    # Equation for tax is 0.15 * income = 7000\n    # But we need to consider that the tax is $7000,\n    # which means that the income must be more than $20000.\n    # Therefore, we can set up an equation for income above $20000.\n    # First, calculate tax for the first $20000.\n    tax_for_20000 = 20000 * 0.15\n    # Rest of the income taxed at 20%\n    # income - 20000 is the amount over $20000, taxed at 20%,\n    # and when added to the tax_for_20000 should be equal to $7000.\n\n    equation = Eq(tax_for_20000 + 0.20 * (income - 20000), 7000)\n\n    solutions = solve(equation, income)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    ans = 1.4 * (1/10)\n    return ans\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    decimal = str(1 / 13)[2:]\n    recurring_cycle_length = len(decimal)\n    return int(decimal[(2022 - 1) % recurring_cycle_length])\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "from math import gcd\n\ndef solution():\n    # Lengths of the ropes\n    rope1 = 28\n    rope2 = 14\n    rope3 = 56\n\n    # Calculate Greatest Common Divisor (GCD) of the lengths\n    gcd_two_ropes = gcd(rope1, rope2)\n    max_length = gcd(gcd_two_ropes, rope3)\n\n    return max_length\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if 2 * chickens + 4 * rabbits == total_legs:\n            return chickens\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of packs of potato chips each store had at first\n    x = symbols('x')\n\n    # After A sold 290 packs, B has 3 times as many packs as A\n    equation = Eq(x - 290, 3 * (x - 290))\n\n    # Solve the equation to find the original number of packs x\n    original_number = solve(equation, x)[0]\n\n    # Calculate the total number of packs at both stores at first\n    total_packs = 2 * original_number\n\n    return total_packs\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    # Total students\n    total_students = 30\n    # Boys\n    total_boys = 17\n    # Boys who had packed lunch\n    boys_packed_lunch = 4\n    # Girls who had school lunch\n    girls_school_lunch = 7\n    # Total students who went home, and boys who went home\n    students_went_home = 5\n    boys_went_home = 3\n    \n    # Since 3 of the 5 students who went home were boys, 2 were girls.\n    girls_went_home = students_went_home - boys_went_home\n    \n    # Girls count\n    total_girls = total_students - total_boys\n    \n    # Girls who had packed lunch\n    # Since we know how many girls had school lunch and how many went home,\n    # we can deduce the number of girls who had a packed lunch.\n    girls_packed_lunch = total_girls - (girls_school_lunch + girls_went_home)\n    \n    # Total packed lunch is the sum of boys and girls who had packed lunch\n    total_packed_lunch = boys_packed_lunch + girls_packed_lunch\n    \n    return total_packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark_chocolate = 20 * 6\n    total_milk_chocolate = 20 * 5\n    total_strawberry_chocolate = 20 * 4\n    total_chocolates = 20 + 20 + 20\n    total_cost = total_dark_chocolate + total_milk_chocolate + total_strawberry_chocolate\n    average_cost = total_cost / total_chocolates\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_completed = 720\n    total_sets = 3600\n    days_completed = 5\n\n    sets_per_day = sets_completed / days_completed\n    total_days = total_sets / sets_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    n = 36\n    factors = set()\n    \n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n//i)\n\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    return (100 - 1) // 12\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed in m/s\n    time = 19   # time in seconds\n\n    # The length of the train is speed multiplied by the time it takes to pass the tree\n    length = speed * time\n\n    return length\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Let's denote the man's rate of drinking as M and his wife's rate as W.\n    # M = 1 barrel / 15 days, hence M's work per day = 1/15\n    # M + W = 1 barrel / 12 days, hence their combined work per day = 1/12\n\n    # The man's work per day is 1/15, and together they work at a rate of 1/12 per day.\n    # So, the wife's work per day is:\n    # W = (M + W) - M\n    # W = 1/12 - 1/15\n\n    # Let's calculate the wife's rate W\n    W = 1/12 - 1/15\n\n    # Now to find out how many days the wife would take to finish the barrel on her own,\n    # we take the reciprocal of W.\n    days_for_wife = 1 / W\n\n    return days_for_wife\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    product = 2017\n    for i in range(2, 2018):\n        product *= (1 - 1 / i)\n    return product\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_items = 18 + 30 + 18\n    friends = 6\n    fruits_per_friend = total_items // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    num_tricycles = 6\n    total_wheels = wheels_per_tricycle * num_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    books_needed = 5\n\n    # For every 3 books bought, 1 is free, so buying 4 books costs as 3\n    paid_books = (books_needed // 3) * 3\n    free_books = books_needed // 3\n\n    # Calculate how many books are paid for\n    total_paid_books = books_needed - free_books\n    \n    total_cost = total_paid_books * book_price\n    return total_cost\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Let's assume total people = p\n    # According to the problem, there are 2/5 * p women.\n    # Let's assume children = c\n    # Then, men = 3 * c\n    # Women = c + 190\n    # We know that, people (p) = women + men + children\n    # p = (2/5)*p + 3*c + c => p = (2/5)*p + 4*c\n\n    p, c = symbols('p c')\n    equation1 = Eq((2/5) * p, c + 190)\n    equation2 = Eq(p, ((2/5) * p) + 4 * c)\n\n    # Now, we will solve these two equations to find the values of 'p' and 'c'\n    solutions = solve((equation1, equation2), (p, c))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(2 * x + 6, 3 * x - 3)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for variables\n    boys = symbols('boys')\n\n    # Equations derived from the problem\n    total_pupils = 40\n    total_pencils = 35 * total_pupils\n    girls = total_pupils - boys\n\n    # Boy's pencils + Girl's pencils = total pencils\n    equation = Eq(20 * boys + 60 * girls, total_pencils)\n\n    # Solve the equation\n    boys_count = solve(equation, boys)\n\n    return boys_count[0]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_base = -154\n    mount_fuji_tip = 3776\n    distance = abs(turpan_base) + mount_fuji_tip\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    sum_ = 0\n    for i in range(1, 51):\n        sum_ += int(\"1\" * i)\n    ans = sum_ % 100\n    return ans\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple_price, banana_price = symbols('apple_price banana_price')\n\n    equation1 = Eq(6 * apple_price + 7 * banana_price, 8 * apple_price + 4 * banana_price)\n    prices = solve((equation1), (apple_price, banana_price))\n\n    # Calculate how many bananas can be bought by substituting the prices into equation\n    # Since equations represent the same amount, we can use either equation to calculate.\n    # I chose to use the apple and banana purchase that uses fewer bananas for clearer calculations.\n    bananas_only_eq = Eq(8 * apple_price + 4 * banana_price, 4 * banana_price)\n    bananas = solve(bananas_only_eq, banana_price)[banana_price]\n\n    return bananas\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    count = 0\n    # Since there are at least 2 envelopes in box A, 4 in box B, and 3 in box C,\n    # we start with those as our base number of envelopes and iterate over the possible\n    # number of envelopes in each mailbox\n    for a in range(2, 15):\n        for b in range(4, 15):\n            for c in range(3, 15):\n                # Box D will contain the remaining envelopes\n                d = 15 - (a + b + c)\n                # If box D has a non-negative number of envelopes, then this is a valid distribution\n                if d >= 0:\n                    count += 1\n\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the dividend and y be the correct quotient\n    x, y = symbols('x y')\n\n    # Original incorrect division (without decimal) gives (x / 211) = y - 98.01\n    # Correct division should be (x / 2.11) = y\n    # Equating the two expressions: x / 211 = y - 98.01 and x / 2.11 = y\n    # We derive the system of equations:\n    equation1 = Eq(x / 211, y - 98.01)\n    equation2 = Eq(x / 2.11, y)\n\n    # Solve the system of equations for y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return float(solutions[y])\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_competitors = 30\n    art_competitors = 26\n\n    # Using the inclusion-exclusion principle\n    both_competitors = (math_competitors + art_competitors) - total_students\n\n    return both_competitors\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    john, choonmui = symbols('john choonmui')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(john - 30, 4 * (choonmui - 150))\n    equation2 = Eq(john, choonmui)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (john, choonmui))\n\n    # Access the solution for the amount John had left after spending $30\n    john_left = solutions[john] - 30\n\n    return john_left\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n\n    return seconds_per_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    female_day1, male_day1 = symbols('female_day1 male_day1')\n\n    # Male visitors on the first day were 450 more than female visitors\n    eq1 = Eq(male_day1, female_day1 + 450)\n\n    # Female visitors increased by 15% on the second day\n    female_day2 = female_day1 * 1.15\n\n    # Male visitors decreased by 18% on the second day\n    male_day2 = male_day1 * 0.82\n\n    # Total number of visitors on the second day\n    eq2 = Eq(female_day2 + male_day2, 1354)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (female_day1, male_day1))\n\n    return int(solutions[male_day1])\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    sold_second_time = (remaining_eggs * 2) + 4\n    remaining_after_first_sale = remaining_eggs + sold_second_time\n    total_eggs = (remaining_after_first_sale * 2) - 5\n    return total_eggs\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    speed_mph = 65\n    time_hours = 15 / 60\n\n    miles_travelled = speed_mph * time_hours\n    kilometers_travelled = miles_travelled * 1.60934  # Conversion factor from miles to kilometers\n\n    return kilometers_travelled\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    percentage_increase = 10 / 100\n\n    increased_amount = original_amount * (1 + percentage_increase)\n\n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8\n    scale_ratio = 1 / 20\n    model_length_m = actual_length_m * scale_ratio\n    model_length_cm = model_length_m * 100  # Convert meters to centimeters\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n    \n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n    \n    return like_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from itertools import permutations\n\n    initial_positions = 'ABCD'\n    count = 0\n\n    for perm in permutations(initial_positions):\n        if all(perm[i] != initial_positions[i] for i in range(len(initial_positions))):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    num_pupils = 7\n    balloons_per_pupil = total_balloons // num_pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    ans = 0\n    ways = []\n    for i in range(1, 7):\n        for j in range(1, 7):\n            if i + j == 8:\n                ways.append((i, j))\n                ans += 1\n    return ans\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    distance_after_final_climb = total_distance - distance_per_day\n\n    # Calculate the number of days the snail needs to climb the distance after final climb\n    days_to_almost_climb_out = (distance_after_final_climb // (distance_per_day - slide_per_night))\n\n    # Check if there's any remaining distance after the full days\n    if distance_after_final_climb % (distance_per_day - slide_per_night) != 0:\n        days_to_almost_climb_out += 1\n\n    # Add the final day of climbing to get out of the burrow\n    ans = days_to_almost_climb_out + 1\n\n    return ans\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n    amount = principal * ((1 + rate) ** time)\n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for num in range(2, 100):\n        if num % 7 == 2 and num % 13 == 2:\n            return num\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    total_earned = hourly_rate * 8 * 5\n    debt_remaining = 700 - total_earned\n    return debt_remaining\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    ans = 53 * 627\n    return ans\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    \n    difference = air_ticket - train_ticket\n    \n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n\n    start_time = end_time - work_duration\n    ans = start_time.strftime(\"%I:%M %p\")\n    return ans\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "from sympy import Eq, solve, symbols\n\ndef solution():\n    # Create symbols for each digit\n    a, b, c, A, B, C = symbols('a b c A B C')\n    \n    # Create the equations based on the puzzle\n    eq1 = Eq(a + A, B)\n    eq2 = Eq(b + B, C)\n    eq3 = Eq(c + C, 10 + a)  # considering the carry over\n    eq4 = Eq(A, 10 + b - c)  # considering the carry over\n    eq5 = Eq(B, 10 + c - b - 1)  # considering the carry over from c to b\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5), (a, b, c, A, B, C))\n    \n    # Return the value of A\n    return solutions[A]\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    ans = round(number, -2)\n    return ans\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        digits = [int(d) for d in str(i)]\n        if digits.count(0) == 1 and digits[0] != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "def solution():\n    from math import lcm\n\n    arjun_period = 14  # 2 weeks\n    yahya_period = 10  # 10 days\n\n    ans = lcm(arjun_period, yahya_period)\n    return ans\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Calculate time for each segment\n    time_280m = 280 / 7\n    time_400m = 400 / 5\n    time_120m = (800 - 280 - 400) / 8\n    \n    # Sum times to get total\n    total_time = time_280m + time_400m + time_120m\n    \n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    results = []\n    for i in range(0, 10):\n        for j in range(0, 10):\n            num = int(f\"2{i}9{j}\")\n            if num % 3 == 0 and num % 5 == 0:\n                results.append(num)\n    return sum(results)\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    tree_spacing = 7\n    # Trees are not planted on both ends, subtract 2 * tree_spacing from highway_length\n    usable_length = highway_length - (2 * tree_spacing)\n    # Calculate number of trees that can be planted in the usable length\n    num_trees = (usable_length // tree_spacing) + 1\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    initial_stamps = 34 + 2 - 11 + 14\n    return initial_stamps\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note = 50\n    lucas_loss = cost_of_shoes + fake_note\n    \n    return lucas_loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    number_of_terms = (last_term - first_term) // 1 + 1\n    sum_of_series = (number_of_terms / 2) * (first_term + last_term)\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    ans = (5/7) * 112\n    return ans\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "def solution():\n    from math import factorial\n    # Treat A, B, C as a single person first, so we have 8 \"people\" to arrange.\n    arrange_8_people = factorial(8)\n    # Now, we need to arrange A, B, and C among themselves, which is 3! ways.\n    arrange_ABC = factorial(3)\n    # The final answer is the product of the two arrangements.\n    ans = arrange_8_people * arrange_ABC\n    return ans\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # Original number as string from 1 to 2930 concatenated\n    original_number = ''.join(str(i) for i in range(1, 2931))\n    \n    # Removing the first 46 digits to get the smallest number\n    smallest_number_after_removal = original_number[46:]\n    \n    # Finding the first non-zero digit to avoid leading zeros\n    first_non_zero_digit = next(digit for digit in smallest_number_after_removal if digit != '0')\n    \n    # Removing leading zeros\n    ans = smallest_number_after_removal.lstrip('0')\n    \n    # We need to prepend '1' to the first non-zero digit to get the smallest number\n    ans = '1' + ans.replace(first_non_zero_digit, '', 1)\n   \n    return ans\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, worst case is taking all blue balls first\n    num_blue_balls = 6\n    # One more ball after all blue balls ensures at least one white ball\n    num_balls_needed = num_blue_balls + 1\n    return num_balls_needed\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n\n    ans = james + linda + ben\n    return ans\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    expression_value = (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n    return expression_value\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    # Let's solve the word problem\n\n    # Total length of rulers without overlap\n    total_length_without_overlap = 20 * 3\n    \n    # Total overlap length (2 overlaps of 3 cm each)\n    total_overlap_length = 3 * 2\n    \n    # Effective length of the ruler bundle = Total length - Overlaps\n    length_of_bundle = total_length_without_overlap - total_overlap_length\n    \n    return length_of_bundle\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Star jogs from 6:30 am to 7:30 am for 1 hour at 6 miles/hour\n    jogging_distance = 1 * 6\n    \n    # Star walks from 7:30 am to 9:30 am for 2 hours at 5 miles/hour\n    walking_distance = 2 * 5\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    total_used_cups = 721\n    new_cups = 0\n\n    while total_used_cups >= 7:\n        # Make new cups from used ones\n        made_cups = total_used_cups // 7  \n        new_cups += made_cups\n        \n        # Calculate remaining used cups and add the new cups made (as they can be recycled again)\n        total_used_cups = total_used_cups % 7 + made_cups\n\n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    number = 2000\n    less_number = 222\n    ans = number - less_number\n    return ans\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # Convert plot length into centimeters\n    cauliflower_width = 45\n    distance_between = 15\n    first_cauliflower_position = 20\n\n    remaining_length = plot_length_cm - first_cauliflower_position  # Remaining length after planting the first cauliflower\n    space_per_cauliflower = cauliflower_width + distance_between  # Total space taken by one cauliflower with the gap after it\n    number_of_cauliflowers = remaining_length // space_per_cauliflower\n\n    return int(number_of_cauliflowers)\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    # Number of pages used in first 3 days\n    pages_first_3_days = 14 * 3\n    # Number of pages used in following 2 days\n    pages_next_2_days = 9 * 2\n    # Number of pages used on the sixth day\n    pages_sixth_day = 12\n    # Total number of pages used\n    total_pages = pages_first_3_days + pages_next_2_days + pages_sixth_day\n    # Average pages per day\n    average_pages = total_pages / 6\n    \n    return average_pages\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    import math\n\n    class_a = 8\n    class_b = 12\n    class_c = 20\n\n    # Calculate the greatest common divisor (GCD) for the three numbers\n    gcd = math.gcd(math.gcd(class_a, class_b), class_c)\n\n    return gcd\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    return ans\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # meters per second\n    distance = 1.5 * 10**3  # kilometers to meters\n\n    time = distance / speed_of_sound  # time = distance / speed\n\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    factors = set()\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    return len(factors)\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    num1 = 1234\n    num2 = 678\n\n    difference = num1 - num2\n\n    return difference\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_value = 504\n    average_value = 126\n    difference = 6\n\n    # The number of cards\n    num_cards = total_value // average_value\n\n    # The greatest number\n    greatest_number = average_value + (difference // 2)\n\n    # The smallest number\n    smallest_number = greatest_number - difference\n\n    return smallest_number\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x = number of members in Bowling Club initially\n    # Therefore, 3x = number of members in Badminton Club initially\n    x = symbols('x')\n\n    # Set up the equation based on the information given\n    # After 36 members left the Badminton Club, it has (3x - 36) members\n    # After 4 members left the Bowling Club, it has (x - 4) members\n    # According to the problem, the two clubs had the same number of members in the end\n    equation = Eq(3*x - 36, x - 4)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Calculate the final number of members for each club\n    bowling_members_end = solution[0] - 4\n    badminton_members_end = (3 * solution[0]) - 36\n\n    return (bowling_members_end, badminton_members_end)\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    def count_factors(n, factor):\n        count = 0\n        while n % factor == 0:\n            n //= factor\n            count += 1\n        return count\n\n    # Count 2s and 5s in the factorization of each number in the range\n    count_2s, count_5s = 0, 0\n    for i in range(301, 1000):\n        count_2s += count_factors(i, 2)\n        count_5s += count_factors(i, 5)\n    \n    # The number of zeros at the end of a product is equal to the minimum of number of 2s and 5s in its factorization\n    ans = min(count_2s, count_5s)\n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    return 5.2 / 10\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_fraction = sum(1/denom for denom in range(10, 20))\n    return int(sum_fraction)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / (3 - 2)\n    return x\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of girls and boys\n    girls, boys = symbols('girls boys')\n    \n    # Number of boys is 90 more than number of girls\n    eq1 = Eq(boys, girls + 90)\n    \n    # The total number of pupils in the school\n    eq2 = Eq(girls + boys, 1690)\n    \n    # Solve for the number of girls and boys\n    pupils = solve((eq1, eq2), (girls, boys))\n    \n    # Assign the values to girls and boys\n    girls_num = pupils[girls]\n    boys_num = pupils[boys]\n    \n    # Ratio of swimming to non-swimming girls\n    swim_girls = 31 / (31 + 49) * girls_num\n    non_swim_girls = 49 / (31 + 49) * girls_num\n    \n    # Number of boys who can swim\n    swim_boys = (boys_num - 120) / 2\n    # Number of boys who can not swim\n    non_swim_boys = swim_boys + 120\n    \n    # Total number of pupils who cannot swim\n    total_non_swimmers = non_swim_girls + non_swim_boys\n\n    return int(total_non_swimmers)\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):\n        if i % 6 == 0 and (i - 1) % 13 == 0:\n            return i\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330  # meters per minute\n    turtle_speed = 30   # meters per minute\n    race_distance = 6990  # meters\n    sleep_time = 215  # minutes\n    advantage_time = 10  # minutes\n    \n    # Distance covered by turtle in the first 10 minutes\n    turtle_distance_advantage = turtle_speed * advantage_time\n    # Distance left for the turtle after the first 10 minutes\n    turtle_distance_left = race_distance - turtle_distance_advantage\n    \n    # Time taken for the turtle to finish the race after first 10 minutes\n    turtle_time = turtle_distance_left / turtle_speed\n    \n    # Time taken for the rabbit to catch up to the turtle after waking up\n    rabbit_catchup_time = (turtle_distance_advantage + rabbit_speed * sleep_time) / (rabbit_speed - turtle_speed)\n    \n    # If the rabbit catches the turtle before the turtle finishes the race, the rabbit wins\n    if rabbit_catchup_time < turtle_time:\n        winner = \"rabbit\"\n        # Distance the winner has left after the loser finishes\n        distance_between = rabbit_speed * (turtle_time - rabbit_catchup_time)\n    else:\n        winner = \"turtle\"\n        # Distance the winner has left after the loser finishes\n        distance_between = turtle_speed * (rabbit_catchup_time - turtle_time)\n        \n    return winner, round(distance_between)\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    return 617 - 385\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_only = 20 - 15\n    math_only = 35 - 15\n    both_classes = 15\n\n    total_students = english_only + math_only + both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    rate = 0.10\n    num_years = 2020 - 2018\n\n    initial_amount = final_amount / ((1 + rate) ** num_years)\n\n    return initial_amount\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n\n    # The total number of ways to arrange 7 people in a row\n    total_arrangements = factorial(7)\n    \n    # Arrange the 3 people who don't want to stand next to each other\n    # as if they are a single unit, so we have 5 units (4 individuals + 1 group)\n    group_arrangements = factorial(5)\n    \n    # The number of ways to arrange the 3 people within the group\n    # since the order matters, this is also permutation, which is 3 factorial\n    within_group_arrangements = factorial(3)\n    \n    # The number of ways that the 3 people stand together\n    unwanted_arrangements = group_arrangements * within_group_arrangements\n\n    # Final answer is total arrangements minus the unwanted\n    ans = total_arrangements - unwanted_arrangements\n\n    return ans\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n    \n    # Find the common difference\n    common_diff = (fourth_term - first_term) // (4 - 1)\n    \n    # Total number of athletes is the sum of arithmetic sequence\n    total_athletes = (num_rows / 2) * (2 * first_term + (num_rows - 1) * common_diff)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n > 0:\n            n //= p\n            count += n\n        return count\n\n    return min(count_factors(789, 2), count_factors(789, 5))\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n\n    # Sum of arithmetic sequence formula: n / 2 * (first_term + last_term)\n    sum_of_sequence = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    total_A = 20 * 76\n    combined_avg = 70\n    \n    # Let x be the number of students in Team B\n    # The equation is created by saying that the sum of scores of A and B divided by total number of students (20 + x) equals the combined average\n    # total_A + x * 67 = (20 + x) * combined_avg\n    x = (20 * combined_avg - total_A) / (67 - combined_avg)\n\n    return int(x)\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    # Using the Pigeonhole Principle\n    participants = 100\n    # To guarantee that the most represented school has at least 4 participants,\n    # we find the maximum number of schools by dividing the total participants by 3\n    # and then rounding up to ensure at least one school has 4 or more participants.\n    max_schools = (participants - 1) // 3 + 1\n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perms = permutations(digits, 3)  # Get all permutations of length 3\n    products = []\n    \n    for perm in perms:\n        num1 = perm[0] * 100 + perm[1] * 10 + perm[2]  # First number\n        \n        remaining_digits = set(digits) - set(perm)\n        remaining_perms = permutations(remaining_digits, 3)\n        \n        for rem_perm in remaining_perms:\n            num2 = rem_perm[0] * 100 + rem_perm[1] * 10 + rem_perm[2]  # Second number\n            products.append(num1 * num2)  # Multiplying the two numbers\n      \n    return min(products)  # Return the smallest product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    max_product = 0\n    min_product = float('inf')\n\n    # Generate all permutations of digits 1-9\n    for perm in permutations(range(1, 10), 7):\n        ABCD = perm[0]*1000 + perm[1]*100 + perm[2]*10 + perm[3]\n        EFG = perm[4]*100 + perm[5]*10 + perm[6]\n\n        # Check the sum of ABCD and EFG\n        if ABCD + EFG == 1993:\n            # Update the maximum and minimum products\n            max_product = max(max_product, ABCD * EFG)\n            min_product = min(min_product, ABCD * EFG)\n\n    # Calculate the difference between the maximum and minimum product\n    ans = max_product - min_product\n    return ans\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    # Each die can roll a minimum of 1 and a maximum of 6.\n    min_steps = 1\n    max_steps = 6\n\n    target_position = 25\n    # The minimum number of times to roll a die to reach or exceed the target position\n    # can be found by dividing the target position by the maximum steps (since we want to\n    # reach the target position as quickly as possible).\n    min_rolls = (target_position - 1) // max_steps + 1\n\n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 19\n    common_difference = 50\n    # Find the number of terms in the arithmetic sequence\n    # This can be done by rearranging the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * common_difference\n    # 2019 = 19 + (n - 1) * 50\n    n = ((2019 - first_term) // common_difference) + 1\n    \n    # Use the formula for the sum of an arithmetic series:\n    # sum = n/2 * (first_term + last_term)\n    sum_series = n / 2 * (first_term + 2019)\n\n    return int(sum_series)\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            if tens + ones == 15:\n                return tens * 10 + ones\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    return 2 - (-2 - 2) - (-2 - (-2 - 2))\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    return 43 - 5.2 + 1.03\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    depth = 220\n    climb_rate = 40\n    slip_back = 10\n    effective_climb = climb_rate - slip_back\n    hours = 0\n    current_depth = 0\n    \n    while current_depth < depth:\n        hours += 1\n        current_depth += climb_rate\n        if current_depth >= depth:\n            break\n        current_depth -= slip_back\n    \n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    for i in range(29, 0, -1):\n        if isprime(i):\n            return i\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    return 3989 - (3000 + 80 + 9)\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    total_typists = 5\n    words_typed = 6000\n    time_taken = 20  # minutes\n\n    required_words = 9000\n    sick_typists = 2\n    remaining_typists = total_typists - sick_typists\n\n    # Find the rate at which the group of 5 typists type per minute\n    rate_per_minute = words_typed / time_taken\n    \n    # Find the rate at which one typist types per minute\n    rate_per_typist_per_minute = rate_per_minute / total_typists\n    \n    # Calculate the rate at which the remaining typists type per minute\n    rate_remaining_typists_per_minute = rate_per_typist_per_minute * remaining_typists\n    \n    # Calculate the time required for the remaining typists to type 9000 words\n    time_required = required_words / rate_remaining_typists_per_minute\n    \n    return time_required\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cabbage_price_per_unit = 0.96\n    lettuces_bought_with_same_amount = 6\n\n    total_amount_spent = cabbage_price_per_unit * 8\n    lettuce_price_per_unit = total_amount_spent / lettuces_bought_with_same_amount\n\n    return lettuce_price_per_unit\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_amount = 388\n    shoes_price = 97\n    amount_saved = total_amount - shoes_price\n\n    return amount_saved\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_length = 30\n    original_plants = 11\n    removed_plants = 8\n    remaining_plants = original_plants - removed_plants\n\n    interval = total_length / (remaining_plants - 1)\n    \n    return interval\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "from datetime import datetime\n\ndef solution():\n    start_time = datetime.strptime(\"13:52\", \"%H:%M\")\n    end_time = datetime.strptime(\"14:05\", \"%H:%M\")\n    \n    duration_minutes = (end_time - start_time).seconds // 60\n    cost_per_minute = 14\n    \n    total_cost = duration_minutes * cost_per_minute\n    \n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    # Get all factors of the number 20\n    factors = divisors(20)\n\n    # Calculate the sum of all factors\n    factors_sum = sum(factors)\n\n    return factors_sum\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 0.40 * 320\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    # Counting all combinations with digits 2 and 3 for three-digit numbers\n    # We are counting the number of permutations for each of the following scenarios:\n    # 1. All three digits are the same (222 or 333) - This is not valid as each digit needs to appear at least once\n    # 2. Two digits are the same and one is different (e.g., 223, 332) - This is valid\n    # 3. All three digits are different - This is not valid in the context of only using digits 2 and 3\n\n    # For case 2, there are two choices for the digit that appears twice (2 or 3)\n    # And there are 3 choices for the position of the different digit (first, second, or third place)\n    # Therefore, for case 2, the number of valid combinations is 2 (choices) * 3 (positions) = 6\n\n    return 6\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('17/10/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('20/12/2023', '%d/%m/%Y')\n    current_date = start_date\n\n    sundays = 0\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Check if the current day is Sunday (0 is Monday, 6 is Sunday)\n            sundays += 1\n        current_date += timedelta(days=1)  # Move to the next day\n\n    return sundays\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen = 5.50\n    ruler = 7.60\n    total_payment = pen + ruler\n    return total_payment\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    s, a = symbols('s a')  # s for strawberry tarts, a for apple tarts\n    price_difference = 0.40\n    \n    # Equation 1: Total cost of strawberry tarts is equal to total cost of apple tarts.\n    # Equation 2: Number of apple tarts is twice the number of strawberry tarts.\n    # Equation 3: Total cost for all tarts is $40.\n    \n    equation1 = Eq(s * (a + price_difference), a * a)\n    equation2 = Eq(a, 2 * s)\n    equation3 = Eq(s * (a + price_difference) + a * a, 40)\n    \n    solutions = solve((equation1, equation2, equation3), (s, a))\n    \n    total_tarts = solutions[s] + solutions[a]\n    return total_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "from sympy import lcm\n\ndef solution():\n    # Time in seconds for first two traffic lights\n    first_light_time = 30  # 0.5 minutes is 30 seconds\n    second_light_time = 45  # 0.75 minutes is 45 seconds\n\n    # Calculate the least common multiple of first two traffic lights' times\n    three_lights_lcm = lcm(first_light_time, second_light_time)\n\n    # Every 9 minutes all three should turn green together\n    # Convert 9 minutes to seconds\n    nine_minutes_in_seconds = 9 * 60\n    \n    # Find the LCM of the two LCMs to ensure all conditions are met\n    all_lights_lcm = lcm(three_lights_lcm, nine_minutes_in_seconds) \n\n    # The shortest possible time for the third light is the LCM divided by two,\n    # because there are 3 lights in total and the LCM is when all turns together\n    third_light_time = all_lights_lcm // 2\n    \n    return third_light_time\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    ans = 43 * 16\n    return ans\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n    ways = factorial(5) # As there are 5 skiboards to be assigned to 5 people, this is a permutation of 5 elements.\n    return ways\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return round(percentage_increase, 2)\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    # Symbol x represents the total number of pieces in the puzzle\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # On the first day, 20% of the puzzle is completed\n    first_day_pieces = 0.20 * x\n\n    # On the second day, 60 pieces are added to the completed amount\n    second_day_pieces = first_day_pieces + 60\n\n    # The ratio of fitted to unfitted pieces becomes 2:5\n    # Therefore, fitted pieces (2 parts) to total pieces (2+5=7 parts)\n    ratio_eq = Eq(second_day_pieces, 2 * (x - second_day_pieces) / 5)\n\n    # Solve for x\n    solution = solve(ratio_eq, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_from_left = 18\n    tony_position_from_right = 17\n\n    henry_position_from_right = total_children - henry_position_from_left + 1\n\n    children_between_henry_tony = abs(henry_position_from_right - tony_position_from_right) - 1\n\n    return children_between_henry_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    return 2 * 1000\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_10 = 100 // 10\n    not_multiples_of_10 = total_numbers - multiples_of_10\n    percentage_not_multiples_of_10 = (not_multiples_of_10 / total_numbers) * 100\n    return percentage_not_multiples_of_10\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    original_amount = 4\n    paid_amount = original_amount * 0.30\n    remaining_amount = original_amount - paid_amount\n\n    return remaining_amount\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Number of legs for cats, dogs, rabbit, and birds respectively\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Total legs from known pets\n    total_known_legs = 2 * cat_legs + 2 * dog_legs + 1 * rabbit_legs\n\n    # Remaining legs to be assigned to birds\n    remaining_legs = 28 - total_known_legs\n\n    # Number of birds based on the remaining number of legs\n    birds = remaining_legs // bird_legs\n\n    return birds\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    meeting_time = 10  # time taken in hours to meet\n\n    # Distance covered by Jack until they meet\n    distance_by_jack = jack_speed * meeting_time\n    # Distance covered by Rose until they meet\n    distance_by_rose = rose_speed * meeting_time\n\n    # Total distance between Town A and Town B\n    total_distance = distance_by_jack + distance_by_rose\n\n    return total_distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of cards that Nelson started with be 'nelson' and Oliver be 'oliver'.\n    melvin, nelson, oliver = symbols('melvin nelson oliver')\n    \n    # Melvin started with 40 cards.\n    melvin_start = 40\n    \n    # Melvin gains 5/8 more than his original number from Nelson.\n    melvin += 5/8 * melvin_start\n    \n    # Melvin and Nelson each lose 1/4 of Melvin's original number to Oliver.\n    melvin -= 1/4 * melvin_start\n    nelson -= 1/4 * melvin_start\n    \n    # Oliver gains these cards.\n    oliver += 2 * (1/4 * melvin_start)\n    \n    # In the final round, Melvin gains 1/8 of his original number from Nelson.\n    melvin += 1/8 * melvin_start\n    nelson -= 1/8 * melvin_start\n    \n    # After the final round, Melvin, Nelson, and Oliver all have the same number of cards.\n    # Using the fact that all three have the same number of cards, we can set up the following equations\n    equation1 = Eq(melvin, nelson)\n    equation2 = Eq(nelson, oliver)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (nelson, oliver))\n    \n    # Calculate the total number of cards\n    total_cards = melvin_start + solutions[nelson] + solutions[oliver]\n    \n    return total_cards\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n    \n    cards = [6, 12, 35, 175, 245, 300]\n    products = set(prod(combo) for combo in combinations(cards, 2))\n    \n    for combo in combinations(cards, 3):\n        if prod(combo) in products:\n            for card in cards:\n                if card not in combo:\n                    return card\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    num = 24\n    odd_factors_sum = sum(filter(lambda x: num % x == 0 and x % 2 != 0, range(1, num + 1)))\n    return odd_factors_sum\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let Polly's age be x\n    # Her first child's age would be x - 20\n    # Her second child's age would be x - 22\n    # Her third child's age would be x - 24\n    # The sum of her children's ages would be 3x - 66\n    # According to the question, Polly's age equals the sum of her children's ages\n    # So, x = 3x - 66\n    # Solving for x gives us 2x = 66\n    # Therefore, Polly's age is 33 when the sum of her three children's ages equals her own age\n\n    polly_age = 66 / 2\n    return int(polly_age)\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    common_difference = 2\n\n    number_of_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_sequence = (number_of_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    # Using the distributive law of multiplication over addition\n    calculation = (2 * 5) + (1 * 5)\n    distributive_calculation = (2 + 1) * 5\n\n    # The result should be the same for both expressions\n    ans = calculation == distributive_calculation\n\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight_with_presents = 5 * 20\n    weight_of_presents = 20\n    weight_of_suitcase = total_weight_with_presents - weight_of_presents\n    return weight_of_suitcase\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes >= 0 and big_boxes + small_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Let x be the combined age of the 2 dogs now\n    # Four years ago the combined age was (x - 4 - 4) = (x - 8)\n    # According to the problem, (x - 8) = 10\n    # Solve for x\n    combined_current_age = 10 + 8\n    \n    # In 2 years, the combined age will be (x + 2 + 2)\n    # Calculate combined age in 2 years\n    combined_future_age = combined_current_age + 2 + 2\n    \n    return combined_future_age\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let x be the larger number and y be the smaller number.\n    # According to the problem:\n    # x - y = 39 (1)\n    # x + y = 59 (2)\n    # Adding both equations (1) and (2) to eliminate y, we get:\n    # 2x = 98\n    # Therefore, x = 49\n    # Now we substitute the value of x in equation (2) to find y:\n    # 49 + y = 59\n    # y = 59 - 49\n    y = 59 - 49\n    return y\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = (5 * 4) + (6 * 8)\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n    equation = Eq(10*14 + m, 8*(10 + m) - 3)\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    from math import sqrt\n    \n    # Solve for A, B, and C from the three given equations\n    A_times_B = 30\n    B_times_C = 35\n    C_times_A = 42\n    \n    # Since A, B, and C are natural numbers we can find the common factor between the products\n    A = sqrt(C_times_A / B_times_C * A_times_B)\n    B = sqrt(A_times_B / A)\n    C = sqrt(B_times_C / B)\n    \n    # Calculate the sum of A, B, and C\n    ans = A + B + C\n    return int(ans)\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    return x - 12 + y\n\nans = solution"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percent_value = 15\n    total_amount = 340\n\n    ans = (percent_value / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n    while True:\n        years += 1\n        if (mother_age + years) == 3 * (justin_age + years):\n            break\n    return years\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n    return factorial\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let cora_sweets be the number of sweets Cora has initially\n    # Let qingle_sweets be the number of sweets Qingle has initially\n    cora_sweets, qingle_sweets = symbols('cora_sweets qingle_sweets')\n    \n    # After Cora gives Qingle 8 sweets, Qingle will have 4 more sweets than Cora\n    equation1 = Eq(qingle_sweets + 8, cora_sweets - 8 + 4)\n\n    # Solve the equation for the variables\n    solutions = solve((equation1,), (cora_sweets, qingle_sweets))\n    \n    # The difference in the number of sweets they have at first\n    difference = solutions[cora_sweets] - solutions[qingle_sweets]\n\n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin (0,0), we know that b = 0\n    b = 0\n    \n    # We also know it passes through point (4,8), so we can use this to find m\n    x = 4\n    y = 8\n    \n    # Using the point (4,8) to calculate slope m\n    m = y / x\n    \n    # The equation of the line is y = mx + b, substituting m and b\n    return f\"y = {m}x + {b}\"\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x represent the number of seashells Eric has\n    # Let y represent the number of seashells Jane has\n    x, y = symbols('x y')\n    \n    # The initial conditions give us the equation y = (5/7) * x\n    initial_ratio = Eq(y, (5/7) * x)\n    \n    # After Eric gives Jane 6 seashells we have: \n    # y + 6 (Jane's new amount) to x - 6 (Eric's new amount) as 11:13\n    new_ratio = Eq((y + 6) / (x - 6), 11/13)\n    \n    # Let's solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (x, y))\n    \n    # Find the total number of seashells\n    total_seashells = solutions[x] + solutions[y]\n    \n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    max_number = 0\n    current_number = 0\n    warren_addition = 20\n    naida_subtraction = 1\n\n    while warren_addition > 0:\n        # Warren adds\n        current_number += warren_addition\n        max_number = max(max_number, current_number)\n\n        # Naida subtracts\n        current_number -= naida_subtraction\n        \n        # Update the values for next round\n        warren_addition -= 1\n        naida_subtraction += 1\n\n    return max_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    total_rate = first_faucet_rate + 3 * other_faucet_rate\n    time_to_fill = 1 / total_rate\n    return round(time_to_fill, 2)\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    from sympy import primefactors\n\n    # Prime factorize each number and count the power of 2 and 5\n    num_factors = {2: 0, 5: 0}\n    for number in [48, 925, 38, 435]:\n        factors = primefactors(number, multiple=True)\n        num_factors[2] += factors.count(2)\n        num_factors[5] += factors.count(5)\n\n    # The number of zeros at the end is determined by the minimum of the power of 2 and 5\n    ans = min(num_factors[2], num_factors[5])\n\n    return ans\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['5', '3', '9', '4', '8']\n    even_digit_permutations = [int(''.join(p)) for p in permutations(digits) if int(p[-1]) % 2 == 0]\n    smallest_even = min(even_digit_permutations)\n    \n    return smallest_even\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_players = 52\n    violin_players = 38\n    both = piano_players // 4\n\n    neither = total_pupils - (piano_players + violin_players - both)\n\n    return neither\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    rate_of_interest = 0.05\n    time_period = 11\n\n    amount = principal * (1 + (rate_of_interest * time_period))\n\n    return amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    # Let x be the number of passengers at the start.\n    # After the first stop, 3/5 of the passengers remain on the bus.\n    # After the second stop, 2/3 of the remaining passengers remain on the bus.\n    # This leaves 22 people.\n\n    # Therefore, (3/5) * (2/3) * x = 22\n    # Solve for x:\n    x = 22 / ((3/5) * (2/3))\n    return int(x)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    from sympy import symbols, integrate, sqrt\n\n    x = symbols('x')\n    # Define the area of the quarter circle with radius 1 within the isosceles right triangle\n    quarter_circle_area = integrate(sqrt(1 - x**2), (x, 0, 1))\n\n    # The area of the isosceles right triangle with waist length of 2 is 2\n    triangle_area = 2\n\n    # The probability is the ratio of the quarter circle area to the triangle area\n    probability = quarter_circle_area / triangle_area\n\n    return float(probability)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the digits as symbols\n    A, B, C, D = symbols('A B C D', integer=True)\n\n    # Set up the equations based on the problem\n    equation1 = Eq(A, D / 4)\n    equation2 = Eq(B, A - 1)\n    equation3 = Eq(4 * (A*1000 + B*100 + C*10 + D), D*1000 + C*100 + B*10 + A)\n\n    # Add constraints to the digits\n    constraints = (A > 0, A < 10, B > 0, B < 10, \n                   C >= 0, C < 10, D > 0, D < 10,\n                   A != B, A != C, A != D, B != C, B != D, C != D)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3) + constraints)\n\n    # Find the solution that satisfies the digit constraints\n    for solution in solutions:\n        if solution[A] * 1000 + solution[B] * 100 + solution[C] * 10 + solution[D] < 10000:\n            return solution[A] * 1000 + solution[B] * 100 + solution[C] * 10 + solution[D]\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_a = 10\n    english_a = 15\n    both_a = 2\n\n    either_a = math_a + english_a - both_a\n\n    return either_a\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    time_left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    time_bus_caught = datetime.strptime(\"16:01\", \"%H:%M\")\n    bus_trip_duration = timedelta(minutes=18)\n    time_got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    walking_to_bus_stop = (time_bus_caught - time_left_school).total_seconds() / 60\n    walking_home = (time_got_home - (time_bus_caught + bus_trip_duration)).total_seconds() / 60\n\n    total_walking_time = walking_to_bus_stop + walking_home\n\n    return int(total_walking_time)\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for number in range(100, 201):\n        if str(number) == str(number)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    freddie_num = symbols('freddie_num')\n    equation = Eq(freddie_num / 3 + 10, 25)\n    original_num = solve(equation, freddie_num)\n    \n    return original_num[0]\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]  # Given numbers without 'a'\n    mean_value = 5\n    total_count = len(numbers) + 1  # Including 'a'\n    total_sum = mean_value * total_count  # Total sum to achieve mean of 5\n    sum_without_a = sum(numbers)  # Sum of the known numbers\n    a_value = total_sum - sum_without_a  # Value of 'a'\n\n    return a_value\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    left_side = 2030452\n    right_side_constant = 30000 + 452\n    missing_number = (left_side - right_side_constant) // 2\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    original_length_cm = 150\n    cut_pieces = 2\n    length_per_piece_m = (original_length_cm / cut_pieces) / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # There are 3 colors, so to ensure she gets at least one pair, \n    # she needs to take out one more than 3 times the number of colors\n    num_colors = 3\n    socks_needed = num_colors + 1\n    return socks_needed\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    # 3 * n * 6 = 72\n    # Simplify the equation as follows:\n    # n = 72 / (3 * 6)\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_victoria_row = 6 + 1 + 7 # pupils to the left, Victoria, pupils to the right\n    total_rows = 1 + 1 + 8 # row of pupils in front, Victoria's row, rows of pupils behind\n    total_pupils = pupils_in_victoria_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_scored_in_2_tests = 172\n    marks_scored_in_remaining_test = total_marks_for_3_tests - marks_scored_in_2_tests\n    \n    return marks_scored_in_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100  # Convert percentage to decimal\n    time = 1\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(((number + 3) / 4) * 9, 81)\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator = sum(1 / (i * (31 - i)) for i in range(11, 16))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Distance covered from 8:00 am to 8:30 am\n    distance_covered = 6300 - 1800  # in meters\n    time_elapsed = timedelta(minutes=30)  # 30 minutes from 8:00 to 8:30\n\n    # Calculate speed in m/min\n    speed = distance_covered / time_elapsed.total_seconds() * 60  # converting to m/min\n\n    # Remaining distance to cover\n    remaining_distance = 1800  # in meters\n\n    # Calculate time to cover the remaining distance\n    time_to_cover_remaining = remaining_distance / speed  # in minutes\n    time_to_cover_remaining = timedelta(minutes=time_to_cover_remaining)\n\n    # Calculate the time Peter reached his friend's house\n    time_reached = datetime.strptime(\"08:30\", \"%H:%M\") + time_to_cover_remaining\n\n    ans = time_reached.strftime(\"%H:%M\")\n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Mr. Smith's total sugar\n    smith_sugar = 300 * 0.5 + 600 * 0.2\n    # Total volume of Mr. Smith's drink\n    smith_volume = 300 + 600\n    # Mr. Smith's sugar percentage\n    smith_sugar_percent = smith_sugar / smith_volume\n\n    # Mrs. Smith's total sugar with variable 'x' for the unknown percentage\n    mrs_smith_sugar = 700 * 0.1 + 300 * (x / 100)\n    # Total volume of Mrs. Smith's drink\n    mrs_smith_volume = 700 + 300\n    # Mrs. Smith's sugar percentage expressed as equation\n    equation = Eq(mrs_smith_sugar / mrs_smith_volume, smith_sugar_percent)\n\n    # Solve for 'x'\n    x_value = solve(equation, x)\n\n    return round(x_value[0], 2)\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    return (17 - 2) / 5\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    candy_to_lily = total_candy * (3/4)\n    remaining_candy = total_candy - candy_to_lily\n    candy_to_brother = remaining_candy * (1/3)\n    final_candy = remaining_candy - candy_to_brother\n    return final_candy\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    may_age_when_10 = 10\n    kenny_age, brother_age = symbols('kenny_age brother_age')\n    \n    # Equation 1: Kenny is 2 years older than his brother\n    equation1 = Eq(kenny_age, brother_age + 2)\n    \n    # Equation 2: When May is 10, the sum of Kenny's and his brother's age \n    # will be 3 times May's age when she is 10 (i.e., 30 years).\n    equation2 = Eq(kenny_age + brother_age, 3 * may_age_when_10)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (kenny_age, brother_age))\n    \n    kenny_current_age = solutions[kenny_age] - (10 - 7)  # Kenny's age when May is 7\n    may_current_age = 7\n    \n    # The difference between Kenny's current age and May's current age\n    age_difference = kenny_current_age - may_current_age\n    \n    return age_difference\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Define the variable for the total amount of money Amy had initially\n    m = Symbol('m')\n\n    # Amy spent 1/2 of her money on donuts\n    money_spent_on_donuts = m / 2\n    # Amy spent the remaining (1/2) on muffins\n    money_spent_on_muffins = m / 2\n\n    # Calculate the cost per unit for donuts and muffins\n    cost_per_donut = 10 / 7\n    cost_per_muffin = 6 / 3\n\n    # Set up an equation based on the total items bought\n    # The total amount of money spent on donuts buys 54 more donuts than muffins\n    equation = money_spent_on_donuts / cost_per_donut - money_spent_on_muffins / cost_per_muffin - 54\n\n    # Solve the equation for m\n    money_at_first = solve(equation, m)[0]\n\n    return money_at_first\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Convert weight from kg to g\n    total_weight_g = 5 * 1000  # 5 kg in grams\n    # Calculate the number of bags\n    bag_weight_g = 250\n    num_bags = total_weight_g / bag_weight_g\n    # Calculate the total revenue from selling the bags\n    price_per_bag_p = 65\n    revenue_p = num_bags * price_per_bag_p\n    # Convert revenue from pence to pounds\n    revenue_pounds = revenue_p / 100\n    # Calculate the cost in pounds\n    cost_pounds = 10\n    # Calculate the profit in pounds\n    profit_pounds = revenue_pounds - cost_pounds\n    # Calculate the percentage profit\n    percentage_profit = (profit_pounds / cost_pounds) * 100\n    return percentage_profit\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n\n    # Since each child gets at least one apple, we subtract the minimum number\n    # of apples that each child has to get\n    remaining_apples = total_apples - children\n\n    # The child who gets the most apples will get his/her minimum one apple\n    # plus all of the remaining apples\n    max_apples_for_one_child = 1 + remaining_apples\n\n    return max_apples_for_one_child\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    distance = 30  # in mm\n    # The distance between the 4th and the 9th teeth involves 5 gaps.\n    # If we divide the total distance by 5, we get the distance between each two consecutive teeth.\n    distance_per_gap = distance / 5  # mm per gap\n    # There are 99 gaps between 100 teeth.\n    total_length_mm = distance_per_gap * 99  # in mm\n    # Convert mm to cm\n    total_length_cm = total_length_mm / 10  # in cm\n    return total_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Grandma was 80 years old in 2008\n    grandma_age_2008 = 80\n    # Mum was 40 years old in 1996\n    mum_age_1996 = 40\n    \n    # Calculate the birth year of grandma and mum\n    grandma_birth_year = 2008 - grandma_age_2008\n    mum_birth_year = 1996 - mum_age_1996\n    \n    # Calculate the year when mum was 25\n    year_when_mum_was_25 = mum_birth_year + 25\n    \n    # Calculate grandma's age when mum was 25\n    grandmas_age_when_mum_was_25 = year_when_mum_was_25 - grandma_birth_year\n    \n    return grandmas_age_when_mum_was_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    total_ways = 5!  # Total ways to arrange 5 people\n    bad_ways = 4! * 2  # Ways in which the two particular people stand next to each other\n\n    ans = total_ways - bad_ways\n    return ans\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # Since each friend must get at least one ice-cream cone,\n    # we can first give each friend one cone.\n    # This leaves us with 5 - 3 = 2 cones to distribute freely among the three friends.\n    remaining_cones = 5 - 3\n\n    # This can be visualized as a problem of placing two indistinct items (the cones)\n    # into three distinct bins (friends), which is a combinations with replacement problem.\n    # We can use the formula for combinations with replacement: (n + k - 1) choose k\n    # Here n is the number of bins (friends), and k is the number of items (remaining cones).\n    friends = 3\n    ways = binomial(remaining_cones + friends - 1, remaining_cones)\n\n    return ways\n\ndef binomial(n, k):\n    from math import factorial\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sales = total_vegetables * (2/3)\n    tuesday_sales = (total_vegetables - monday_sales) * (2/5)\n    \n    monday_and_tuesday_sales = monday_sales + tuesday_sales\n    \n    return monday_and_tuesday_sales\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # Maximum balls to pick without getting 16 balls of one color\n    max_not_16_one_color = (15 * 5) - 1  # 15 from each color, -1 to not reach 16th\n    \n    # Since we need 13 of another color, we add 12 from the most abundant color remaining\n    max_not_13_another_color = max_not_16_one_color + (12 * 1) - 1  # 12 from one color, -1 to not reach 13th\n    \n    # Next ball ensures we have 16 of one color and 13 of another color\n    min_balls_to_pick = max_not_13_another_color + 1\n    \n    return min_balls_to_pick\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    return 26.1 / 10000\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    total = sum([5 * i if i % 2 != 0 else -5 * i for i in range(1, (855 // 5) + 1)])\n    return total\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p, q = symbols('p q')\n\n    equation1 = Eq(p, 4 * q)\n    equation2 = Eq(p - q, 2700)\n\n    solutions = solve((equation1, equation2), (p, q))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_biscuits = total_biscuits * (1/4)\n    remaining_biscuits = total_biscuits - given_biscuits\n    return remaining_biscuits\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table_price, chair_price = symbols('table_price chair_price')\n\n    equation1 = Eq(2 * table_price + 5 * chair_price, 220)\n    equation2 = Eq(table_price, 3 * chair_price)\n\n    solutions = solve((equation1, equation2), (table_price, chair_price))\n\n    return solutions[table_price]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    total_spent = 1.55 + 2.25\n    remaining_ratio = 4/5\n    initial_amount = total_spent / (1 - remaining_ratio)\n    return initial_amount\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal_amount = 4000\n    interest_rate = 3.81 / 100\n    time_in_years = 5\n\n    final_amount = principal_amount * (1 + interest_rate)**time_in_years\n\n    return final_amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 40 / 100 * 75\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann = 3\n    sana = 6\n    nancy = 8\n\n    total_coins = joann + sana + nancy\n\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    # speed ratio of Lucas to his mother\n    ratio_lucas = 3\n    ratio_mother = 5\n    total_ratio = ratio_lucas + ratio_mother\n\n    # initial distance between them\n    initial_distance = 20\n    # remaining distance between them\n    remaining_distance = 4\n\n    # distance Lucas has walked\n    distance_lucas = (ratio_lucas / total_ratio) * (initial_distance - remaining_distance)\n\n    return distance_lucas\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    difference = -1\n    num_terms = 30\n\n    # Using the arithmetic sum formula: S_n = n/2 * (2a + (n-1)d)\n    ans = num_terms / 2 * (2 * first_term + (num_terms - 1) * difference)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    target_people = 35\n\n    unit_rate = pizzas_initial / people_initial\n    required_pizzas = unit_rate * target_people\n\n    return int(round(required_pizzas))\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    teams = 16\n    rounds = 0\n    while teams > 1:\n        teams //= 2  # After each round the number of teams are halved\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n    \n    julie_salary = solve(equation, julie)[0]\n    marion_salary = 2 * julie_salary\n    ethan_salary = 5 * julie_salary\n\n    total_salary = julie_salary + marion_salary + ethan_salary\n\n    return total_salary\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use x to represent the number of students in the big class\n    # Let's use y to represent the number of students in the small class\n    x, y = symbols('x y')\n\n    # Each student in the big class gets 2 apples, and each student in the small class also gets 2 apples\n    # The total number of apples given is 48\n    equation1 = Eq(2*x + 2*y, 48)\n\n    # Each student in the big class gets 3 oranges, and each student in the small class gets 2 oranges\n    # The total number of oranges given is 55\n    equation2 = Eq(3*x + 2*y, 55)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the number of students in the small class\n    return solutions[y]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    from math import sqrt\n\n    # Initialize count\n    count = 0\n\n    # Loop through natural numbers from 1 to 2016\n    for i in range(1, 2017):\n        # Multiply by 72 and check if result is a perfect square\n        product = i * 72\n        if sqrt(product).is_integer():\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    num_lollipops = 10\n    total_cost = cost_per_lollipop * num_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    danny_current_age, efron_current_age, years = symbols('danny_current_age efron_current_age years')\n\n    # Given conditions\n    condition1 = Eq(danny_current_age - efron_current_age, 30)  # Efron is 30 years younger than Danny\n    condition2 = Eq(danny_current_age / efron_current_age, 8/3)  # The ratio of Danny's age to Efron's age is 8:3\n\n    # Solve the current ages\n    current_ages = solve((condition1, condition2), (danny_current_age, efron_current_age))\n    danny_current_age = current_ages[danny_current_age]\n    efron_current_age = current_ages[efron_current_age]\n\n    # Future condition\n    condition3 = Eq((danny_current_age + years) / (efron_current_age + years), 5/3)\n\n    # Solve for the number of years in the future when the age ratio is 5:3\n    future_years = solve(condition3, years)\n\n    return future_years[0]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    congruences = [(0, 5), (6, 7), (7, 8)]\n\n    # Use the Chinese Remainder Theorem to solve for the smallest number\n    # that satisfies all congruences\n    _, ans = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_price = 160\n    new_price = 40\n    percent_change = ((new_price - original_price) / original_price) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made = 100\n    butter_used = 40\n    desired_cookies = 150\n\n    # Calculate butter needed for one cookie\n    butter_per_cookie = butter_used / cookies_made\n\n    # Calculate butter needed for desired number of cookies\n    butter_needed = butter_per_cookie * desired_cookies\n    \n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for number in range(1, 405):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    # Choosing a pencil and a ruler\n    pencil_ruler_combinations = pencils * rulers\n\n    # Choosing a pencil and a pen\n    pencil_pen_combinations = pencils * pens\n\n    # Choosing a ruler and a pen\n    ruler_pen_combinations = rulers * pens\n\n    # Now, sum up all the possible combinations\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    num_groups = 8\n    teams_per_group = 4\n    # Each team plays against every other team in the group once\n    games_per_group = teams_per_group * (teams_per_group - 1) // 2\n\n    # Total games in the group stage\n    group_stage_games = num_groups * games_per_group\n\n    # Knockout stage games: Round of 16, quarter-finals, semi-finals,\n    # third place play-off, and the final\n    knockout_stage_games = 16 + 8 + 4 + 2 + 1\n\n    # Total games played throughout the World Cup\n    total_games = group_stage_games + knockout_stage_games\n\n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):\n        first_digit = 1 + 2 * second_digit\n        if first_digit < 10: # Ensuring the first digit is a valid single digit\n            for third_digit in range(0, 10):\n                if 10 <= first_digit + second_digit + third_digit < 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ball_cost, racket_cost = symbols('ball_cost racket_cost')\n    \n    # Equation 1: racket_cost = ball_cost + 28\n    equation1 = Eq(racket_cost, ball_cost + 28)\n    \n    # Equation 2: ball_cost + racket_cost = 30\n    equation2 = Eq(ball_cost + racket_cost, 30)\n    \n    solutions = solve((equation1, equation2), (ball_cost, racket_cost))\n    \n    return solutions[ball_cost]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    return -6 / 6\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # 3 apples and 2 bananas costs £1.25\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    # 1 apple and 1 banana costs £0.48\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost to buy 5 bananas\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    matches = 15\n    n = 1\n    while n * (n - 1) / 2 != matches:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 224 to get its prime factors and their respective exponents\n    factors_dict = factorint(224)\n    \n    # Calculate the number of factors by multiplying the exponents plus one\n    num_factors = 1\n    for exponent in factors_dict.values():\n        num_factors *= (exponent + 1)\n    \n    return num_factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    original_number = 210 / 0.7\n    return original_number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    total_combinations = pencils * rulers * pens\n\n    return total_combinations\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    wrong_points = -2\n    \n    # Let the number of correct answers be x\n    # Since the total number of questions is 10, the number of wrong answers is (10 - x)\n    # Each correct answer gives 6 points, each wrong answer gives -2 points\n    # We have the equation: 6x + (-2)(10 - x) = 44\n\n    # Solving for x:\n    for x in range(total_questions + 1):\n        if correct_points * x + wrong_points * (total_questions - x) == 44:\n            return x\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, tshirt = symbols('shorts tshirt')\n\n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, tshirt))\n\n    return solutions[tshirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    # Let the number of triangles be x\n    # Then the number of quadrilaterals is (x + 82)\n    # There are 2 pentagons, hence the total sides from pentagons is 2 * 5\n    \n    # The total sides can be given by the following equation:\n    # (x * 3) + ((x + 82) * 4) + (2 * 5) = 394\n    \n    # Simplify the equation to solve for x\n    # 3x + 4x + 328 + 10 = 394\n    # 7x + 338 = 394\n    # 7x = 394 - 338\n    # 7x = 56\n    # x = 56 / 7\n    x = 56 // 7\n    \n    # since we want the number of quadrilaterals, we add 82 to x\n    quadrilaterals = x + 82\n\n    return quadrilaterals\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    return 599999 + 59999 + 5999 + 599 + 59 + 5\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n    third_term = second_term + common_difference\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Rachel's and Alice's sweets\n    rachel, alice = symbols('rachel alice')\n\n    # Equation 1: After giving 10 sweets, Rachel and Alice have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # Equation 2: After eating 8 sweets each, Rachel has 3 times the sweets Alice has\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total amount of sweets originally\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    num_gaps = 3  # Since there are four posts, there are three gaps between them\n\n    total_distance = distance_between_posts * num_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for i in range(105, 1000, lcm):  # Start at 105 because it's the first multiple and step by LCM.\n        if str(i).startswith('6'):\n            return i\n    \nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 6 * pears + 5)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = str(2 * 5 * 7 * 2 * 5 * 7 * 2 * 5)\n    ans = sum(int(digit) for digit in product)\n    return ans\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    num1 = int('61', 7)\n    num2 = int('34', 7)\n    difference = num1 - num2\n    ans = format(difference, 'o')\n    return ans\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Let x be the number of all-girl teams\n    # from (iii), we have the number of all-boy teams is 2x\n    # from (ii) \"teams with two or more boys\" = all-boy teams + teams with two boys\n    # hence, 27 = 2x + (15 teams with only one boy), therefore 2x = 27 - 15, we get x = 6\n    # So there are 6 all-girl teams and 2*6 = 12 all-boy teams\n    # Total number of teams = 150 students / 3 students per team = 50 teams\n    # Number of mixed teams (1 boy, 2 girls or 2 boys, 1 girl) is total teams - all-girl teams - all-boy teams = 50 - 6 - 12\n    mixed_teams = 50 - 6 - 12\n    # But we already know there are 15 teams with only 1 boy,\n    # so 15 teams have 2 girls each, and rest mixed_teams - 15 = mixed teams with 1 girl each\n    teams_with_two_girls = 15 \n    # Number of girls in all-girl teams = 6 teams * 3 girls per team\n    girls_in_all_girl_teams = 6 * 3\n    # Number of girls in teams with two girls = 15 teams * 2 girls per team\n    girls_in_teams_with_two_girls = teams_with_two_girls * 2\n    # Number of girls in mixed teams with one girl (27 teams with two or more boys - 12 all-boy teams)\n    girls_in_mixed_teams = (27 - 12) * 1\n    # Total number of girls = girls in all-girl teams + girls in teams with two girls + girls in mixed teams\n    total_girls = girls_in_all_girl_teams + girls_in_teams_with_two_girls + girls_in_mixed_teams\n\n    return total_girls\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # Let's create a variable for each animal's weight in terms of chickens\n    chicken_weight = 1  # The weight of 1 chicken\n    rabbit_weight = 2 * chicken_weight  # The weight of 1 rabbit, as 1 rabbit equals 2 chickens\n    dog_weight = 8 * rabbit_weight  # The weight of 1 dog, as 1 dog equals 8 rabbits\n\n    return dog_weight\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # Since Dilly can't distinguish between left and right gloves,\n    # the worst case scenario to find a matching pair (color-wise) would be:\n    # First picking all gloves of one color without getting a pair, \n    # and then picking one glove of the other color. \n    \n    # For blue gloves: there are 1 left-hand and 3 right-hand gloves.\n    # Dilly can pick all 4 without having a pair of the same hand.\n    \n    # For green gloves: there are 2 left-hand and 4 right-hand gloves.\n    # Dilly can pick both left-hand gloves and then would have to pick\n    # a right-hand glove to guarantee a pair of green gloves.\n    \n    # Picking all blue gloves (4) and then one green glove (1) guarantees a pair.\n    # So the smallest number of gloves Dilly should bring is 4 (blue) + 1 (green) = 5\n    \n    # However, the options provided in the question do not include 5, so the next minimum\n    # would be the option just higher than 5, which is 6.\n\n    return 6\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    initial_students = 5\n    candies_per_student = 12\n    new_total_students = initial_students + 1\n    total_candies = initial_students * candies_per_student\n    new_candies_per_student = total_candies // new_total_students\n\n    return new_candies_per_student\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Let x be the distance between Town A and Town B\n    # At 10 km/h, Ben arrives at 10 am\n    # At 15 km/h, Ben arrives at 8 am\n    # Therefore, the time difference is 2 hours\n    \n    # Time taken at 10 km/h speed\n    time_at_10kmh = x / 10\n    \n    # Time taken at 15 km/h speed\n    time_at_15kmh = x / 15\n    \n    # Difference in time is 2 hours\n    # time_at_10kmh - time_at_15kmh = 2\n    # (x / 10) - (x / 15) = 2\n    # Solving for x gives us x = 30 km\n    \n    x = 30\n    \n    # To find the speed to arrive at 9am, we need to calculate the time taken to travel distance x at that speed\n    # Let s be the speed we want to find\n    # Time taken at speed s is x/s\n    # The time difference between arriving at 10 am and 9 am is 1 hour\n    # So the equation is: time_at_10kmh - (x / s) = 1\n    # Substituting time_at_10kmh with x/10 (which is 30/10 = 3 hours) we get:\n    # 3 - (30 / s) = 1\n    # Solving for s gives us s = 30/(3-1) = 30/2 = 15 km/h\n    \n    s = 30 / (3 - 1)\n    \n    return s\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation1 = Eq(n % 4, 3)\n    equation2 = Eq(n % 5, 4)\n    equation3 = Eq(n % 7, 6)\n\n    solutions = solve((equation1, equation2, equation3), (n))\n\n    return min(solutions)\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    original_price = 120\n    depreciation_rate = 0.04  # 4%\n    years = 5\n    \n    # Calculate the depreciation over the 5 years\n    value_after_years = original_price * ((1 - depreciation_rate) ** years)\n    \n    return value_after_years\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    n = 1\n    while True:\n        boys = n * n\n        girls = (n - 2) * (n - 2)\n        if n > 1 and boys - girls == 52:\n            return boys + girls\n        n += 1\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, yuna = symbols('eugene yuna')\n\n    # initial situation\n    initial_eugene_pins = Eq(eugene, 3 * yuna)\n    \n    # after Yuna buys 76 pins\n    final_yuna_pins = yuna + 76\n    final_eugene_pins = eugene  # Eugene's pins don't change\n\n    # Yuna has 7/9 as many pins as Eugene after buying\n    final_relation = Eq(final_yuna_pins, 7/9 * final_eugene_pins)\n\n    # solve the system of equations\n    solution = solve((initial_eugene_pins, final_relation), (eugene, yuna))\n\n    return solution[eugene]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "def solution():\n    from math import factorial\n\n    word = 'REVISE'\n    frequency = {char: word.count(char) for char in set(word)}\n    total_permutations = factorial(len(word))\n    for freq in frequency.values():\n        total_permutations //= factorial(freq)\n\n    return total_permutations\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # For a number to be divisible by 9, the sum of its digits must be divisible by 9\n    sum_of_digits = 1 + 2 + 3 + 4 + 5  # Sum of the known digits\n    for A in range(10):\n        if (sum_of_digits + A) % 9 == 0:\n            # If the sum including A is divisible by 9, we found our digit\n            six_digit_number = int(f\"12345{A}\")\n            # For the remainder when dividing by 4, we only need to consider the last two digits\n            remainder_when_divided_by_4 = six_digit_number % 4\n            return remainder_when_divided_by_4\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    number = 5 + (8 * 10) + (2 * 100)\n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To win, Kelly should leave a multiple of 3 for Dan\n    # If Kelly takes away 1 match, 10 matches remain\n    # Dan can then take 1 or 2 matches, leaving Kelly with non-multiple of 3\n    # If Kelly takes away 2 matches, 9 matches remain - which is a multiple of 3\n    # Now, no matter whether Dan takes 1 or 2 matches, Kelly can always leave a multiple of 3\n    # By induction, Kelly will win if she starts by taking away 2 matches\n\n    kelly_turn = 2  # Matches Kelly takes to win\n    return kelly_turn\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_flowers = symbols('total_flowers')\n    \n    # red_flowers = 1/2 * total_flowers\n    # remaining_flowers = total_flowers - red_flowers\n    # pink_flowers = 4/7 * remaining_flowers\n    # Equation: red_flowers = pink_flowers + 6\n    \n    # Replacing red_flowers and pink_flowers with expressions in terms of total_flowers \n    equation = Eq((1/2) * total_flowers, (4/7) * (total_flowers - (1/2) * total_flowers) + 6)\n    \n    # Solve the equation for total_flowers\n    solution = solve(equation, total_flowers)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers into improper fractions\n    numerator = Fraction(36, 7) + Fraction(36, 11) + Fraction(36, 23)\n    denominator = Fraction(24, 7) + Fraction(24, 11) + Fraction(24, 23)\n    \n    # Calculate the result\n    result = numerator / denominator\n    return result\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6) * n * (n + 1) * (n + 2)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    import math\n    num_kids = 3\n    ans = math.factorial(num_kids)\n    return ans\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    # The equation to solve is 4 * box - 3 = 65\n    # To find the value in the box, we perform the inverse operations\n    # Add 3 to both sides of the equation and then divide by 4\n    box_value = (65 + 3) / 4\n\n    return box_value\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n\n    # Let the number of cars be 'c' and motorcycles be 'm'\n    # Each car has 4 wheels and each motorcycle has 2 wheels\n    # From the problem we have two equations:\n    # c + m = total_vehicles\n    # 4c + 2m = total_wheels\n\n    # Using substitution or simultaneous equations, we can solve for 'c' and 'm'\n    # We will use the total number of vehicles to express 'm' in terms of 'c':\n    # m = total_vehicles - c\n\n    # Now substitute 'm' in the wheels equation:\n    # 4c + 2(total_vehicles - c) = total_wheels\n    # 4c + 2*total_vehicles - 2c = total_wheels\n    # 2c = total_wheels - 2*total_vehicles\n    # c = (total_wheels - 2*total_vehicles) / 2\n    \n    c = (total_wheels - 2 * total_vehicles) // 2  # Integer division because number of cars must be an integer\n    \n    return c\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, nicole = symbols('jason nicole')\n\n    # Jason originally had 20 stickers\n    jason_initial = 20\n\n    # After Nicole gave Jason 18 stickers\n    jason_final = jason_initial + 18\n\n    # Jason had 5 fewer stickers than Nicole after the exchange\n    nicole_final = jason_final + 5\n\n    # Set up the equation based on Nicole's initial and final number of stickers\n    equation = Eq(nicole - 18, nicole_final)\n\n    # Solve the equation to find the initial number of stickers Nicole had\n    nicole_initial = solve(equation, nicole)\n\n    return nicole_initial[0]\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original dimensions are length (L), breadth (B), and height (H)\n    # New dimensions are:\n    # new length = L * 110%\n    new_length_ratio = 1.10\n    # new breadth = B * 4/5\n    new_breadth_ratio = 4/5\n    # new height ratio = H * 11/10\n    new_height_ratio = 11/10\n\n    # The new volume is a percentage of the original volume\n    new_volume_ratio = new_length_ratio * new_breadth_ratio * new_height_ratio\n\n    # Convert the ratio to a percentage\n    new_volume_percentage = new_volume_ratio * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 39):\n        for three_gram_weights in range(0, 26):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    total_distance_m = total_distance_km * 1000  # Convert km to m\n    num_marshals = 9\n\n    # The number of intervals is one less than the number of marshals\n    num_intervals = num_marshals - 1\n\n    distance_between_marshals_m = total_distance_m / num_intervals\n    return distance_between_marshals_m\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_initial = 180 # meters per minute\n    time_initial = 6 # minutes\n    speed_tired = 120 # meters per minute\n    time_tired = 8 # minutes\n\n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # Initialize the starting layer and tile count\n    layer = 1\n    red_tiles = 0\n    green_tiles = 0\n    \n    # The square has 400 tiles, which implies the length of a side is sqrt(400)\n    square_side = int(400 ** 0.5)\n\n    while layer <= square_side // 2:\n        # Calculate the number of tiles for the current layer\n        # Subtracting 2 * (layer - 1) because we are excluding the previous layers on each side\n        tiles_in_layer = (square_side - 2 * (layer - 1))**2 - (square_side - 2 * layer)**2\n        \n        # Check if the layer is odd or even and assign tiles to the corresponding color\n        if layer % 2 == 1:\n            red_tiles += tiles_in_layer\n        else:\n            green_tiles += tiles_in_layer\n        \n        # Move to the next layer\n        layer += 1\n     \n    # Calculate the dominant color and the difference\n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    tile_difference = abs(red_tiles - green_tiles)\n    \n    return dominant_color, tile_difference\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_sum = 74 * 7\n    correct_sum = incorrect_sum - (81 - 18)\n    correct_average = correct_sum / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    interest_rate = 0.03\n\n    # Calculate interest for the first year\n    first_year_interest = principal * interest_rate\n    # Add the interest to the principal for the second year calculation\n    principal_after_first_year = principal + first_year_interest\n\n    # Calculate interest for the second year\n    second_year_interest = principal_after_first_year * interest_rate\n\n    return second_year_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = 80  # One hour and twenty minutes is 80 minutes\n    number_of_pictures = total_minutes // minutes_per_picture\n    return number_of_pictures\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    mixed_number = 1 + (4/7)\n    decimal_number = round(mixed_number, 1)\n    \n    return decimal_number\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let Megacorp's sales in 2014 be x\n    x = symbols('x')\n    \n    # Vastco sold 68% more widgets than Megacorp in 2014\n    vastco_2014 = x * 1.68\n    \n    # Vastco's sales rose by 32% in 2015\n    vastco_2015 = vastco_2014 * 1.32\n    \n    # Vastco sold 44% more widgets than Megacorp in 2015\n    megacorp_2015 = vastco_2015 / 1.44\n\n    # Create an equation based on the information provided\n    equation = Eq(megacorp_2015, x * (1 + symbols('percentage_increase') / 100))\n\n    # Solve the equation for percentage_increase\n    percentage_increase = solve(equation, symbols('percentage_increase'))[0]\n\n    return percentage_increase\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = \"428571\"  # 3/7 as a recurring sequence.\n    index = (69 - 1) % len(recurring_sequence)  # 69th digit index in the sequence.\n    ans = int(recurring_sequence[index])  # Get the actual digit.\n\n    return ans\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    total_planned_profit = 1.5\n    profit_first_day = 0.7 * total_planned_profit\n    remaining_goods = 1 - 0.7\n    total_actual_profit = 0.82 * total_planned_profit\n    profit_second_day = total_actual_profit - profit_first_day\n    \n    discount_rate_second_day = ((remaining_goods * total_planned_profit - profit_second_day) / remaining_goods) / total_planned_profit\n    \n    return discount_rate_second_day\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    # Calculate the amount of salt in Dylan's solution\n    salt_dylan = 300 * 0.35\n    # Calculate the amount of salt in Daisy's solution\n    salt_daisy = 200 * 0.50\n    # Calculate the total salt\n    total_salt = salt_dylan + salt_daisy\n    # Calculate the total weight of the solution\n    total_solution_weight = 300 + 200\n    # Calculate the concentration of the resulting salt solution\n    concentration = (total_salt / total_solution_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution(y):\n    return y / 2\n\nans = solution(y)"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    for older_son in range(1, 55):\n        for younger_son in range(1, 55):\n            if younger_son == older_son + 3:\n                for older_daughter in range(1, 55):\n                    for younger_daughter in range(1, 55):\n                        if younger_daughter == older_daughter + 2:\n                            if younger_son == 2 * older_daughter:\n                                if older_son + younger_son + older_daughter + younger_daughter == 55:\n                                    return min(older_son, younger_son, older_daughter, younger_daughter)\n    return None\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = 48\n\n    while empty_bottles >= 4:\n        new_bottles = empty_bottles // 4\n        total_bottles += new_bottles\n        empty_bottles = empty_bottles - new_bottles * 4 + new_bottles\n    \n    if empty_bottles == 3:  # If customer can borrow 1 bottle\n        total_bottles += 1\n\n    return total_bottles\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # 1 to 9 has 9 numbers with 1 digit each\n    digits_1_to_9 = 9 * 1\n\n    # 10 to 99 has 90 numbers with 2 digits each\n    digits_10_to_99 = (99 - 10 + 1) * 2\n\n    # 100 to 113 has 14 numbers with 3 digits each\n    digits_100_to_113 = (113 - 100 + 1) * 3\n\n    # Sum all the digits\n    total_digits = digits_1_to_9 + digits_10_to_99 + digits_100_to_113\n\n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    # Let the original number of pearls be x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Half of the pearls fell onto the floor\n    # A fourth rolled under a chair\n    # A sixth fell into her lap\n    # 3 pearls remained on the strand\n    equation = Eq((1/2)*x + (1/4)*x + (1/6)*x + 3, x)\n\n    # Solve the equation for x\n    original_pearls = solve(equation, x)\n\n    return original_pearls[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n    days_per_worker = total_work / 1  # Calculate how many days 1 worker would take\n\n    return days_per_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    black, white, grey = symbols('black white grey')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(black, white + 14)       # Black rabbits are 14 more than white\n    equation2 = Eq(grey, white - 2)         # Grey rabbits are 2 fewer than white\n    equation3 = Eq(black + white + grey, 84)# Total rabbits are 84\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    # Return the number of white rabbits\n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    total_erasers = 246\n    difference = 32\n\n    brother_erasers = (total_erasers - difference) // 2\n\n    return brother_erasers\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    # Total earnings if all glasses delivered safely: $100\n    # Actual earnings: $92\n    # Difference caused by broken glasses: $100 - $92 = $8\n\n    # Since Peter loses $2 for every broken glass (one dollar not earned for delivery, one dollar paid for the glass),\n    # the number of broken glasses is equal to half the difference.\n    \n    broken_glasses = (100 - 92) // 2  # Integer division is used because the number of glasses is an integer\n\n    return broken_glasses\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let n be the number of teams, and the total number of games played in a round-robin\n    # competition with n teams is given by n*(n-1)/2 = 45\n    n = Symbol('n', integer=True)\n    eq = n*(n-1)/2 - 45\n\n    # Solve for n\n    # We need to find the positive solution because number of teams can't be negative or zero\n    teams = solve(eq, n)\n    ans = [t for t in teams if t.is_positive][0]\n\n    return ans\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mayanks_number = symbols('mayanks_number')\n    equation = Eq(2 * mayanks_number + 4, 40)\n\n    solution = solve(equation, mayanks_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    boats = symbols('boats')\n    people = symbols('people')\n    \n    # Create equations based on the problem statement\n    # Equation 1: If there's one less boat, each carries 9 people\n    # Equation 2: If there's one more boat, each carries 6 people\n    equation1 = Eq((boats - 1) * 9, people)\n    equation2 = Eq((boats + 1) * 6, people)\n    \n    # Solve the system of equations for the number of boats and people\n    solutions = solve((equation1, equation2), (boats, people))\n    \n    return solutions[people]\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from math import factorial\n\ndef solution():\n    # Define a function to calculate the combinations\n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Assign number of people and entrances\n    num_people = 4\n    num_entrances = 3\n\n    # Each of the 3 entrances must be used by at least one person:\n    # - One scenario is having one entrance with 2 people and the others with 1 person each\n    # - Three different ways to pick which entrance gets two people\n    # - Combinations of 4 people taken 2 at a time (since two people will go to the same entrance)\n    scenario1 = 3 * combinations(num_people, 2)\n\n    # The other scenario is having all entrances used by one person except one entrance with 2 people\n    # No need to pick as the remaining two people will automatically go to the remaining entrances\n    scenario2 = 3\n    \n    # The total number of ways they can enter is the sum of these two scenarios\n    ans = scenario1 + scenario2\n\n    return ans\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost_bananas = cost_per_banana * 15\n    change = 1200 - total_cost_bananas  # Change from £12, converting pounds to pence\n    return change / 100  # Convert pence back to pounds\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for i in range(1, 57, 2):\n        if i + (i + 2) + (i + 4) == 57:\n            return i\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    # Initialize an empty list to store the possible numbers that fit the condition\n    possible_numbers = []\n\n    # List of given numbers\n    numbers = [2, 6, 1, 10, 5, 3]\n\n    # Loop through each number and check if it meets the condition when divided by 3\n    for number in numbers:\n        if (number * 3) == 6:\n            possible_numbers.append(number)\n\n    # Since we need a single answer and the problem guarantees a solution, we take the first element\n    ans = possible_numbers[0]\n    return ans\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            x3 = 15 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    return 495 // 9\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j represent the number of cookies John had at first\n    # Let p represent the number of cookies Peter had at first\n    j, p = symbols('j p')\n\n    # Given that John had 180 more cookies than Peter\n    equation1 = Eq(j, p + 180)\n\n    # After John sold 4/5 of her cookies, she is left with 1/5\n    # After Peter sold 3/10 of her cookies, she is left with 7/10\n    # John then had 1/2 as many cookies as Peter left\n    equation2 = Eq(j*(1 - 4/5), (p*(1 - 3/10))/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, p))\n\n    # Return the number of cookies John had at first\n    return solutions[j]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for num in range(5, 16):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    import math\n    pencils = 32\n    pens = 40\n    most_students = math.gcd(pencils, pens)\n    return most_students\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 4, 7]\n    perms = permutations(digits, 4)\n    min_sum = float('inf')\n    \n    for p in perms:\n        num1 = p[0] * 10 + p[1]\n        num2 = p[2] * 10 + p[3]\n        if num1 + num2 < min_sum:\n            min_sum = num1 + num2\n\n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks_before = 4 * 60\n    new_test_mark = 70\n    total_tests = 5\n    new_average = (total_marks_before + new_test_mark) / total_tests\n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    horses = 6\n    pigs = 12\n    rabbits = 12\n\n    horse_apples = 20\n    pig_apples = 15\n    rabbit_apples = 5\n\n    total_apples = (horses * horse_apples) + (pigs * pig_apples) + (rabbits * rabbit_apples)\n    total_animals = horses + pigs + rabbits\n\n    average_apples = total_apples / total_animals\n\n    return average_apples\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit must be 1-9 (since it's a 3-digit number)\n        for j in range(10):  # The second digit can be 0-9\n            if (i + j) < 10:  # The sum of the first two digits must be less than 10 (to be a single digit)\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    # Define the full price for each cup of ice-cream\n    full_price_per_cup = 4\n    \n    # Define the total number of cups Pip wants to buy\n    total_cups = 6\n    \n    # Calculate the total cost without any sale plan\n    total_cost = full_price_per_cup * total_cups\n    \n    # Define the discounts and conditions for each sale plan\n    # Sale Plan A: 3 dollars off for every 2 cups bought\n    # Sale Plan B: buy 5 cups get 1 cup free\n    discount_A = 3 * (total_cups // 2)\n    discount_B = full_price_per_cup if total_cups >= 5 else 0\n    \n    # Calculate the final cost for each sale plan\n    final_cost_A = total_cost - discount_A\n    final_cost_B = total_cost - discount_B\n    \n    # Determine the smallest cost among the two plans\n    min_cost = min(final_cost_A, final_cost_B)\n    \n    # Return the final cost Pip has to pay\n    return min_cost\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    # Let the number of students in Class A be x.\n    # Thus, the number of students in Class B will be x - 3.\n    # Let the total number of peaches be P.\n    # From the first condition:\n    # P = 5x + 10\n    # From the second condition:\n    # P = 8(x - 3) - 2\n    \n    # Now we will create a system of equations and solve it.\n    \n    from sympy import symbols, Eq, solve\n\n    x, P = symbols('x P')\n    \n    eq1 = Eq(P, 5 * x + 10)\n    eq2 = Eq(P, 8 * (x - 3) - 2)\n    \n    solution = solve((eq1, eq2), (x, P))\n    \n    return solution[P]\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    num = 3172\n    ans = round(num, -2)\n    return ans\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    # Let x be the amount of money Jayden had left\n    # Benson had 3 times as much left which is 3x\n    # Total amount both had at first was $590\n    # Benson spent $74 and Jayden spent $120\n    # So, 590 - (74 + 120) = 3x + x\n    # Solve for x\n    \n    x = (590 - (74 + 120)) / 4\n    return x\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences are of the form (remainder, modulus)\n    congruences = [(2, 7), (3, 9), (4, 11)]\n\n    # Using the Chinese Remainder Theorem to solve for the least positive integer\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    last_digits = 0\n    for i in range(2017):\n        number = int('2' * (i + 1))\n        last_digits = (last_digits + number) % 100000\n    \n    return last_digits\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3 / 4\n    water_in_orange_drink = total_orange_drink * fraction_water\n    return water_in_orange_drink\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    n = (547 * 479) % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    cm_per_metre = 100\n    centimetres = metres * cm_per_metre\n    return centimetres\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # Betty's speed (b_speed) in metros per minute\n    # Kevin's speed (k_speed) in metros per minute\n    \n    # Since Kevin walked 150 meters in 6 minutes, his speed would be:\n    k_speed = 150 / 6\n    \n    # If both continue walking for another 3 minutes,\n    # Kevin will arrive at the store, that means in 9 minutes from the cinema,\n    # he covers the same distance as Betty does in 6 minutes.\n    \n    # This implies Betty's speed is:\n    b_speed = k_speed * 9 / 6\n    \n    # Now, when Betty is 900m away from the cinema, she walked 9+b minutes\n    # where b is the time she leaves before Kevin\n    # and at her speed (b_speed), the distance she covers is:\n    # distance = b_speed * (9 + b)\n    \n    # Since she is 900m away from the cinema, this equals to 900,\n    # b_speed * (9 + b) = 900\n    # We solve for b to find how many minutes earlier Betty leaves\n    b = (900 / b_speed) - 9\n    \n    return b\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for num in range(1, 381):\n        if num * num + num == 380:\n            return num\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_pet_owners = 143\n    own_dog = 100\n    own_goldfish = 14\n    own_both = 9\n\n    own_neither = total_pet_owners - (own_dog + own_goldfish - own_both)\n\n    return own_neither\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    total_volume = 300\n    raspberry_part = 1\n\n    raspberry_juice_volume = (raspberry_part / total_parts) * total_volume\n\n    return raspberry_juice_volume\n\nans = solution()"
    ]
}