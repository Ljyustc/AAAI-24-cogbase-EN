{
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9\n    end_time = 10\n\n    duration = end_time - start_time\n\n    return duration\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / (1 - 0.40)\n    original_amount = remaining_after_bag / (1 - 0.20)\n    return original_amount\n\nans = solution()"
    ],
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    first = 5\n    sum_squares_n = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_squares_before_first = ((first - 1) * first * (2 * (first - 1) + 1)) // 6\n    ans = sum_squares_n - sum_squares_before_first\n    return ans\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bone_fraction = 27 / 103\n    finger_bone_fraction_of_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bone_fraction\n    finger_bones = hand_bones * finger_bone_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    n = 1\n    while True:\n        initial_square = n ** 2\n        larger_square = (n + 1) ** 2\n        if initial_square + 5 == larger_square - 26:\n            return initial_square\n        n += 1\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students // 6\n    biology_students = (total_students * 2) // 9\n    chemistry_students = total_students - physics_students - biology_students\n    \n    return chemistry_students\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n\n    # Equation: amy_apples - x = john_apples + x + 4\n    # Solve for x\n    x = (amy_apples - john_apples - 4) // 2\n\n    return x\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    return 167 - 43\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    total_plants = 9\n    plants_to_arrange = 4\n\n    # Number of ways to arrange n different items in r places is given by P(n, r) = n! / (n-r)!\n    ways = factorial(total_plants) / factorial(total_plants - plants_to_arrange)\n\n    return int(ways)\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # Based on game strategy, Fred wants to leave George with a multiple\n    # of 4 oranges after his first move, so that he can always leave\n    # George with a multiple of 4 after each of George's moves.\n    # This is because no matter how many oranges George takes (1, 2, or 3),\n    # Fred can always take enough oranges to reach the next multiple of 4.\n    \n    # Thus Fred's first move should leave 12 oranges on the table, which\n    # is a multiple of 4, ensuring that he can take the last orange.\n    \n    # To leave 12 oranges, Fred should take 3 oranges on his first turn.\n    first_move = 3\n    return first_move\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    blouse_pants_shoes = shirts * pants * shoes\n    dress_shoes = dresses * shoes\n    dress_heels = dresses * heels\n    \n    total_combinations = blouse_pants_shoes + dress_shoes + dress_heels\n\n    return total_combinations\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Tom's age and his dad's age\n    toms_age = symbols('toms_age')\n\n    # Equation representing the relationship between their ages\n    equation = Eq(4 * toms_age - 5, 43)\n\n    # Solve the equation\n    solution = solve(equation, toms_age)\n\n    # Assuming there's only one solution since age is a positive number\n    return solution[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    total = common_factor * sum_of_coefficients\n    return total\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    return 66666 * 66666\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    # Let the cost price of the first house be x and the second house be y.\n    # The selling price for both is given as 99000 each.\n\n    # We have two equations based on the information given:\n    # x + 10% of x = 99000 => 1.1x = 99000 => x = 99000 / 1.1\n    # y - 10% of y = 99000 => 0.9y = 99000 => y = 99000 / 0.9\n\n    cost_price_first = 99000 / 1.1\n    cost_price_second = 99000 / 0.9\n\n    # The total cost price for both houses\n    total_cost_price = cost_price_first + cost_price_second\n\n    # The total selling price for both houses\n    total_selling_price = 2 * 99000\n\n    # The overall profit or loss will be the total selling price minus the total cost price\n    overall_profit_loss = total_selling_price - total_cost_price\n\n    return overall_profit_loss\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction = 3 / 20\n    decimal = 0.16\n    if fraction > decimal:\n        ans = '3/20'\n    else:\n        ans = '0.16'\n    return ans\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('ABCDE'):\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C'):\n            count += 1\n        if p.index('A') < p.index('B') and p.index('A') > p.index('C'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_cupcakes = 3 / 15\n    total_eggs = cupcakes * eggs_per_cupcakes\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Speed during jogging\n    jogging_speed = 8  # in km/h\n\n    # Speed during walking (which is half of jogging speed)\n    walking_speed = jogging_speed / 2  # in km/h\n\n    # Time spent jogging from 6.30am to 8.30am is 2 hours\n    time_jogging = 2  # in hours\n\n    # Time spent walking from 8.30am to 9.30am is 1 hour\n    time_walking = 1  # in hours\n\n    # Total distance covered during jogging\n    distance_jogging = jogging_speed * time_jogging\n\n    # Total distance covered during walking\n    distance_walking = walking_speed * time_walking\n\n    # Total distance covered is the sum of distances covered during jogging and walking\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of £5, £10, and £20 notes\n    n5, n10, n20 = symbols('n5 n10 n20')\n    \n    # Since the number of each type of note is equal, we can use one variable\n    n = symbols('n')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(n5, n)  # Equal number of £5 notes\n    equation2 = Eq(n10, n)  # Equal number of £10 notes\n    equation3 = Eq(n20, n)  # Equal number of £20 notes\n    equation4 = Eq(5*n5 + 10*n10 + 20*n20, 280)  # Total value of the notes\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (n5, n10, n20))\n    \n    # Calculate the total number of notes\n    total_notes = solutions[n5] + solutions[n10] + solutions[n20]\n\n    return total_notes\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for digit_1 in range(1, 10):  # Hundreds place cannot be 0 for a three-digit number\n        for digit_2 in range(10):  # Tens place can be from 0 to 9\n            # The one's place must be the same as hundred's to make it palindromic\n            count += 1  # Increment count for each valid palindromic number\n    return count\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # The last digit of a number only depends on the last digits of the factors\n    last_digit_2 = (2 ** 100) % 10  # Last digit of 2^100\n    last_digit_7 = (7 ** 100) % 10  # Last digit of 7^100\n    last_digit_9 = (9 ** 100) % 10  # Last digit of 9^100\n\n    # The product of the last digits will give us the last digit of the whole expression\n    last_digit_expression = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n    return last_digit_expression\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond_op(M, N):\n        return M * N + N + 1\n    \n    def square_op(M, N):\n        return 8 * M - N * N\n        \n    ans = square_op(diamond_op(7, 6), 9)\n    return ans\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # Starting from the smallest number of marbles in the largest pile\n    for biggest_pile in range(1, 17):\n        # We will try to distribute the remaining marbles in the other three piles\n        for second_pile in range(1, biggest_pile):\n            for third_pile in range(1, second_pile):\n                for fourth_pile in range(1, third_pile):\n                    if biggest_pile + second_pile + third_pile + fourth_pile == 16:\n                        return biggest_pile\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    # Calculate the sum of the given fractions\n    A = sum(60 // i for i in range(1, 6))\n    return A\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    # Since we need the sum of squares of odd numbers, we cannot directly use the formula for 1²+2²+3²+......+n².\n    # We will instead sum the squares manually for odd numbers from 1 to 19.\n    ans = sum(i**2 for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n    if students % capacity == 0:\n        ans = students // capacity\n    else:\n        ans = (students // capacity) + 1\n    return ans\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # The time taken to go from the first to the fourth floor is 12 minutes.\n    total_time = 12\n    # If Danny moves at a constant speed, the time taken to go from the first floor to the second floor\n    # will be one-third of the total time because there are three intervals between the first and fourth floors\n    # (from 1st to 2nd, 2nd to 3rd, and 3rd to 4th).\n    time_to_second_floor = total_time / 3\n    \n    return time_to_second_floor\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    total = 0\n    for n in range(1, 2008):\n        total += (n**2 + (n+1)**2) / (n * (n+1))\n    ans = round(total)\n    return ans\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    # Correct average height\n    correct_avg = 163\n    \n    # Incorrect average height due to wrong entry\n    incorrect_avg = 159\n    \n    # Incorrect and correct entry heights\n    incorrect_height = 126\n    correct_height = 162\n    \n    # Difference in heights due to wrong entry\n    # This also equals the sum of differences in average per girl\n    height_difference = correct_height - incorrect_height\n    \n    # Difference in averages\n    avg_difference = correct_avg - incorrect_avg\n    \n    # Number of girls\n    num_girls = height_difference / avg_difference\n    \n    return int(num_girls)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    result = (24 / 100) * 25\n    return result\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = (6 * 9) + (13 * 7) + (12 / 4) - (8 * 5)\n    return ans\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    n = (13 + 1) // 2  # There are (13 - 1) / 2 + 1 odd numbers up to 13\n    sum_of_sequence = n * (n + 1) // 2  # Sum of first n natural numbers\n    ans = sum_of_sequence ** 2  # Square of the sum\n    return ans\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 2 * a + 4\n\n    ans = custom_operation(200, 199)\n    for i in range(188, 0, -1):\n        ans = custom_operation(ans, i)\n\n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    from fractions import Fraction\n    \n    result = (Fraction(3, 2) * Fraction(4, 3) * Fraction(5, 4) * \n              Fraction(6, 5) * Fraction(7, 6) * Fraction(8, 7) * \n              Fraction(9, 8) * Fraction(10, 9))\n    \n    return result\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    apples = 37\n    container_capacity = 4\n\n    containers_needed = -(-apples // container_capacity)  # Ceiling division to get the least number of containers\n\n    return containers_needed\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    import math\n    length1 = 56\n    length2 = 42\n    length3 = 84\n\n    # calculating the Greatest Common Divisor (GCD) of the three lengths\n    gcd_1_2 = math.gcd(length1, length2)\n    gcd_all = math.gcd(gcd_1_2, length3)\n\n    return gcd_all\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    original_number = 9876543\n    ans = original_number + 10000\n    return ans\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_notes = 40\n\n    # Let x be the number of $10 notes and y be the number of $2 notes\n    x, y = symbols('x y')\n\n    # Equations based on the problem statement\n    equation1 = Eq(x + y, total_notes)  # Total notes equation\n    equation2 = Eq((4/5) * (x - (40/100) * x), y - (25/100) * y)  # Ratio after spending\n\n    # Solve equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the amount spent\n    spent_10_notes = (40/100) * solutions[x] * 10\n    spent_2_notes = (25/100) * solutions[y] * 2\n    gift_cost = spent_10_notes + spent_2_notes\n\n    return gift_cost\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    # Iterate over numbers less than 50\n    for i in range(2, 50):\n        cube = i ** 3\n        square = cube - 2\n        if int(square ** 0.5) ** 2 == square:\n            return square\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark = 26\n    sue = mark / 2\n    total = mark + sue\n    return total\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    total_oranges = 13\n    minimum_oranges_per_kid = 2\n    kids = 3\n\n    # Subtract the minimum oranges each kid should get\n    total_oranges -= minimum_oranges_per_kid * kids\n\n    # Generate all combination with replacement for the remaining oranges\n    comb = combinations_with_replacement(range(total_oranges + 1), kids - 1)\n\n    count = 0\n    for c in comb:\n        if sum(c) == total_oranges:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for Beth and Ken's number of seashells\n    beth, ken = symbols('beth ken')\n    \n    # Ken had $75 more seashells than Beth\n    equation1 = Eq(ken, beth + 75)\n    \n    # 4/5 of Beth's seashells is equal to 2/5 of Ken's seashells\n    equation2 = Eq(4/5 * beth, 2/5 * ken)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (beth, ken))\n    \n    # Total number of seashells they had altogether\n    total_seashells = solutions[beth] + solutions[ken]\n    \n    return total_seashells\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = sum(range(1, 10)) + 7  # Adding 7 twice as it appears twice in the sequence\n    return ans\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x and y be the two original numbers\n    x, y = symbols('x y')\n\n    # The sum of the two numbers is 11.63\n    equation1 = Eq(x + y, 11.63)\n\n    # Oliver got an answer of 5.87 instead when he shifted the decimal\n    # In this case, x becomes x/10 (shift the decimal point one position to the left)\n    equation2 = Eq(x / 10 + y, 5.87)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the difference between the two original numbers\n    difference = abs(solutions[x] - solutions[y])\n\n    # Multiply the difference by 100 to get the answer as per the question requirement\n    ans = difference * 100\n\n    return ans\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # Given the pattern of the multiplication, it collapses to 2(1 - 1/(2^(2^2009)))\n    # Therefore, n must satisfy 2^n = 2^2009\n    # Thus, n = 2009\n    return 2009\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    return (7/8) * 32\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    return 342 // 6\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sally, john = symbols('sally john')\n    \n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n    \n    solutions = solve((equation1, equation2), (sally, john))\n    \n    return solutions[sally]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # P cannot be zero as it's the first digit of a 4-digit number\n            continue\n\n        paso = 1000 * p + 100 * a + 10 * s + o\n        opas = 1000 * o + 100 * p + 10 * a + s\n\n        if paso - opas == 3333:\n            return paso\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 7 == 1 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n    \n    total_water = Eq(harry + liam, 640)\n    after_transfer = Eq(harry + 90, 3 * (liam - 90))\n\n    solutions = solve((total_water, after_transfer), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    first_day_questions = 3\n    common_difference = 3\n    number_of_days = 7\n    \n    last_day_questions = first_day_questions + (number_of_days - 1) * common_difference\n    total_questions = (first_day_questions + last_day_questions) * number_of_days / 2\n    \n    return int(total_questions)\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # The rate of drinking orange juice per day by the man alone\n    man_rate = 1 / 15\n    \n    # The combined rate of drinking orange juice per day by the man with his wife\n    combined_rate = 1 / 12\n    \n    # The rate of drinking orange juice per day by the wife alone\n    wife_rate = combined_rate - man_rate\n    \n    # The number of days the wife will take to finish the barrel of orange juice on her own\n    wife_days = 1 / wife_rate\n    \n    return wife_days\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from itertools import combinations\n\ndef solution():\n    # Counting the number of ways to choose white, red, and black balls\n    white_balls = list(range(1, 7))  # Picking from 1 to 6 white balls (because 3 to 8 must be left)\n    red_balls = list(range(2, 6))  # Picking from 2 to 5 red balls\n    black_balls = list(range(3, 7))  # Picking from 3 to 6 black balls (because 0 to 3 must be left)\n\n    total_ways = 0\n    \n    # Iterate through each possible combination of white, red, and black ball counts\n    for white_count in white_balls:\n        for red_count in red_balls:\n            for black_count in black_balls:\n                if white_count + red_count + black_count == 10:  # Sum must be 10 balls\n                    # Calculate combinations for each ball color\n                    white_comb = combinations(range(9), white_count)\n                    red_comb = combinations(range(5), red_count)\n                    black_comb = combinations(range(6), black_count)\n                    # Multiply to find total combinations for this set of counts\n                    total_ways += len(list(white_comb)) * len(list(red_comb)) * len(list(black_comb))\n    \n    return total_ways\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # The number of beans peeled form an arithmetic sequence\n    # 20 beans peeled from 9 to 10\n    # 28 beans peeled from 10 to 11\n    # 36 beans peeled from 11 to 12\n\n    # The common difference (increment each hour) can be found by \n    # subtracting the number of beans between consecutive hours\n    common_difference = 28 - 20  # or 36 - 28, which should yield the same result\n\n    # Since the sequence is increasing and each term represents one hour, \n    # we need to find out how many beans were peeled in the first hour, which is two terms before the 20 beans between 9 and 10.\n    first_hour_beans = 20 - (2 * common_difference)\n\n    return first_hour_beans\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10): # The first digit cannot be zero for a three-digit number\n        for j in range(10): # The second digit can be zero\n            for k in range(10): # The third digit can also be zero\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    power = pow(2, 10)\n    remainder = power % 3\n    return remainder\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let x be the original number of pearls on the strand.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x / 2 + x / 4 + x / 6 + 3, x)\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n    times_smaller = snake_length_cm / insect_length_cm\n    return times_smaller\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1\n    diff = 2\n    while True:\n        next_term = term + diff\n        if next_term < 100:\n            term = next_term\n            diff += 2\n        else:\n            break\n    return term\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    original_mean = 120\n    new_mean = 150\n    original_total = original_mean * 3\n    new_total = new_mean * 4\n\n    fourth_number = new_total - original_total\n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away_mass = 0.76\n    \n    remaining_mass = initial_mass - given_away_mass\n    ans = round(remaining_mass, 1)\n\n    return ans\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    ans = 372 * 6\n    return ans\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    weight_full = 80\n    weight_half_full = 60\n    weight_mangoes_half_full = weight_half_full - (weight_full / 2)\n    weight_empty_basket = weight_full - (2 * weight_mangoes_half_full)\n    \n    return weight_empty_basket\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Let's denote the total number of children in the queue as 'total'.\n    # Pip is the 6th from the front, which means there are 5 children before Pip.\n    # Bud is the 6th from the end, which means there are 5 children after Bud.\n    # There are 5 children between Pip and Bud, including Bud.\n    # Therefore, there are 5 (before Pip) + 1 (Pip) + 5 (between Pip and Bud, including Bud) + 5 (after Bud)\n    total = 5 + 1 + 5 + 5\n    return total\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    x = symbols('x')\n    eq1 = Eq(x % 5, 3)\n    eq2 = Eq(x % 6, 4)\n    eq3 = Eq(x % 7, 1)\n    \n    ans = solve((eq1, eq2, eq3), (x))\n    \n    return min(ans)\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    term_4 = 25\n    total_rows = 25\n\n    # Calculate common difference\n    difference = (term_4 - first_term) / (4 - 1)\n\n    # Calculate last term using formula for nth term of arithmetic sequence\n    last_term = first_term + (total_rows - 1) * difference\n\n    # Calculate sum using formula for sum of arithmetic sequence\n    total_athletes = (total_rows * (first_term + last_term)) / 2\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    average_family_age = 29\n    total_family_members = 6\n    total_age_family = average_family_age * total_family_members\n    total_age_children = 64\n    total_age_parents = total_age_family - total_age_children\n    parents = total_family_members - 4\n    average_age_parents = total_age_parents / parents\n    average_age_parents_3_years_ago = average_age_parents - 3\n    \n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    days_taken = 5\n    total_paintings_target = 56\n\n    paintings_per_day = total_paintings_done / days_taken\n    total_days_needed = total_paintings_target / paintings_per_day\n    more_days_needed = total_days_needed - days_taken\n\n    return int(more_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    total_sum = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    ans = total_sum // 3\n    return ans\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The system of congruences can be represented as:\n    # x ≡ 0 (mod 7)\n    # x + 2 ≡ 0 (mod 8)\n    # x + 4 ≡ 0 (mod 9)\n\n    # Convert them to the form required by solve_congruence():\n    # x ≡ 0 (mod 7) is simply (0, 7)\n    # x + 2 ≡ 0 (mod 8) => x ≡ -2 (mod 8) or (6, 8) because -2 mod 8 = 6\n    # x + 4 ≡ 0 (mod 9) => x ≡ -4 (mod 9) or (5, 9) because -4 mod 9 = 5\n\n    congruences = [(0, 7), (6, 8), (5, 9)]\n    x = solve_congruence(*congruences)\n\n    # x[0] is the solution for the first number, so the sum of the three numbers is:\n    sum_of_numbers = x[0] + (x[0] + 2) + (x[0] + 4)\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n    leaves = pieces_of_paper // interval\n\n    return leaves\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    # The formula for the nth term of an arithmetic sequence is:\n    # a_n = a_1 + (n - 1) * d\n    # where\n    # a_n is the nth term,\n    # a_1 is the first term,\n    # n is the term number, and\n    # d is the common difference.\n\n    # We have the 5th term (a_5) as 8 and the 12th term (a_12) as 50.\n    # Using the formula: a_5 = a_1 + 4d and a_12 = a_1 + 11d\n    # We need to find the common difference (d).\n\n    # Let's set up two equations based on the given terms:\n    # 1) 8 = a_1 + 4d  --> Equation for the 5th term\n    # 2) 50 = a_1 + 11d --> Equation for the 12th term\n\n    # To find the common difference, we can subtract the first equation from the second:\n    # (50 = a_1 + 11d) - (8 = a_1 + 4d)\n    # 50 - 8 = (a_1 + 11d) - (a_1 + 4d)\n    # 42 = 11d - 4d\n    # 42 = 7d\n\n    # Now, we solve for d:\n    d = 42 / 7\n\n    return d\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    # Using the distributive law of multiplication over addition\n    # a * (b + c + d) = a * b + a * c + a * d\n    a = 95\n    b = 37\n    c = 42\n    d = 21\n\n    ans = a * (b + c + d)\n    \n    return ans\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n\n    # Find the number of terms in the original sequence\n    num = 1\n    while first_term + (num - 1) * common_difference <= 242:\n        num += 1\n    num -= 1  # Adjust for last increment where the term would be greater than 242\n\n    # After removing the first three terms each time, we will finally have the 3 numbers after num - 2 operations\n    operations = num - 2\n\n    # Calculate the final first term after the operations\n    final_first_term = first_term + operations * common_difference * 3\n\n    # The second number will be the next term in the sequence\n    second_number = final_first_term + common_difference\n\n    return second_number\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    # Let's define the variables for Pip, Bud, and Bob's weights\n    pip, bud, bob = symbols('pip bud bob')\n    \n    # Establish the equations based on the given averages\n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n    \n    # Return Pip's weight\n    return solutions[pip]\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest_value = min(numbers, key=lambda x: abs(x - 0.1))\n    return closest_value\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    sol = solve(equation)\n\n    return sol[x]\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import combinations\n\ndef solution():\n    # Time taken for each person to cross the river\n    times = [7, 9, 4, 10]\n    \n    # Calculate the time for each possible configuration of crossings\n    # Strategy is to let the fastest (i.e., person 3) ferry the others across\n    def calc_time(config):\n        # Sort in descending order because the quicker person should return with the boat\n        time_cross = sorted(config, reverse=True)\n        # Fastest person rows back unless it's the last trip\n        return sum(time_cross[:-1]) + time_cross[-1] * (len(config) - 1)\n    \n    # Initial best time to an arbitarily large number\n    best_time = float('inf')\n\n    # Generate all combinations of two people to cross first\n    for first_cross in combinations(times, 2):\n        # Calculate the time for the first crossing\n        time_first_cross = max(first_cross)  # Time taken is dictated by the slower person\n        remaining = list(times)\n        # Remove the two people who have crossed from the remaining list\n        remaining.remove(first_cross[0])\n        remaining.remove(first_cross[1])\n        \n        # Fastest person rows back\n        time_return = min(first_cross)\n        remaining.append(time_return)\n        \n        # Generate all combinations of who rows back next\n        for second_cross in combinations(remaining, 2):\n            # Calculate the time for the second crossing\n            time_second_cross = max(second_cross)\n            # Remove the rower who's crossed again\n            remaining_final = list(remaining)\n            remaining_final.remove(second_cross[0])\n            remaining_final.remove(second_cross[1])\n            \n            # Fastest remaining person rows back (always the one who rowed back first)\n            time_final_return = min(remaining_final + list(second_cross))\n            remaining_final.append(time_final_return)\n            \n            # The last trip doesn't require a return, so take only the max time\n            time_last_cross = max(remaining_final)\n            \n            # Calculate the total time taken for this configuration\n            total_time = time_first_cross + time_return + time_second_cross + time_last_cross\n            # If it's better than the best time found so far, update best time\n            if total_time < best_time:\n                best_time = total_time\n\n    return best_time\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    return sum([29, 37, 76, 63, 24, 45, 61, 55])\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'd' be the total distance of the journey in metres\n    # Let 'v' be Maria's usual speed in metres per minute\n    d, v = symbols('d v')\n    \n    # Maria runs for (30 - 5) minutes = 25 minutes at her usual speed\n    usual_time = 25\n    \n    # It takes her 5 minutes more to cover 2400 metres at the reduced speed\n    reduced_time = 5\n    \n    # The speed is reduced by 20%, so her new speed is 80% of the usual speed\n    reduced_speed = 0.8 * v\n    \n    # First part of journey at usual speed (d - 2400) = usual speed * usual time\n    # Second part of journey at reduced speed 2400 = reduced speed * reduced time\n    equation1 = Eq(d - 2400, v * usual_time)\n    equation2 = Eq(2400, reduced_speed * reduced_time)\n    \n    # Solve the system of equations for 'd' (total distance) and 'v' (usual speed)\n    solutions = solve((equation1, equation2), (d, v))\n    \n    # Return the length of the journey\n    return solutions[d]\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n    total_children = jacob + sisters + brothers\n    return total_children\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    original_people = 5\n    original_days = 15\n    target_days = 7\n    work_done = original_people * original_days\n\n    # Since work_done is constant, people * days = work_done\n    # Let x be the number of additional people needed to finish the work in target_days\n    x = symbols('x')\n    equation = Eq((original_people + x) * target_days, work_done)\n\n    additional_people_needed = solve(equation, x)[0]\n    \n    return additional_people_needed\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let A be the original number of students in school A\n    # Let B be the original number of students in school B\n    A, B = symbols('A B')\n    \n    # Equation 1: A + B = 1050 (total number of students in both schools)\n    equation1 = Eq(A + B, 1050)\n    \n    # Equation 2: A - 20 = B + 10  (after moving, school A has 20 students less, and it still has 10 more students than B)\n    equation2 = Eq(A - 20, B + 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    ans = 672 // 8\n    return ans\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temperature = -3  # At 5:00 am\n    rate_of_increase = 2  # degrees Celsius per hour\n    time_elapsed = 5.5  # hours from 5:00 am to 10:30 am\n\n    temperature_increase = rate_of_increase * time_elapsed\n    final_temperature = initial_temperature + temperature_increase\n\n    return final_temperature\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define a symbol for the amount of money Mrs Chan had at first\n    money = symbols('money')\n\n    # Formulate the equation based on the problem statement\n    spent_A = (money / 2) + 1\n    remaining_after_A = money - spent_A\n\n    spent_B = (remaining_after_A / 2) + 2\n    remaining_after_B = remaining_after_A - spent_B\n\n    spent_C = (remaining_after_B / 3) + 3\n    remaining_after_C = remaining_after_B - spent_C\n\n    # The equation shows that after spending in shops A, B, and C, Mrs Chan had $49 left\n    equation = Eq(remaining_after_C, 49)\n\n    # Solve the equation to find out how much money Mrs Chan had at first\n    initial_money = solve(equation, money)\n    \n    return initial_money[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = 7  # number of shelves\n    total_books = 280\n    d = -3  # each shelf has 3 fewer books than the one below\n    \n    # Let the number of books on the top shelf be x\n    x = symbols('x')\n    \n    # Sum of an arithmetic sequence: n/2 * (2a + (n - 1)d)\n    # where a is the first term (x), d is the difference, n is the number of terms\n    # For our case: n/2 * (2x + (n - 1)*d) = total_books\n    equation = Eq(n/2 * (2*x + (n - 1)*d), total_books)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # As the worst case scenario, Darrell may draw all pencils of the other colors first\n    # There are 3 blue and 3 white pencils, so he may draw all of them\n    worst_case_non_green = 3 + 3\n\n    # To ensure at least 1 green pencil, Darrell needs to draw one more after worst case\n    return worst_case_non_green + 1\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3 / 4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Find all divisors of 2240\n    divs = divisors(2240)\n    \n    # Check for each divisor if 2240 divided by that number is a perfect square\n    for d in divs:\n        if is_square(2240 // d):\n            return d\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "from math import lcm\n\ndef solution():\n    sweep_days = 3\n    mop_days = 5\n    cook_days = 9\n    clean_windows_days = 3 * 7  # 3 weeks in days\n\n    # Least Common Multiple (LCM) will give us the days when all chores align again\n    days_until_all_chores_align = lcm(sweep_days, mop_days, cook_days, clean_windows_days)\n\n    return days_until_all_chores_align\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_participants = 30\n    art_participants = 26\n\n    # Inclusion-Exclusion Principle for Two Sets:\n    # |A ∪ B| = |A| + |B| - |A ∩ B|\n    # We need to find |A ∩ B|, which is the number of students who participate in both competitions.\n\n    # total_students = math_participants + art_participants - both_participants\n    both_participants = math_participants + art_participants - total_students\n\n    return both_participants\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of kids, and y be the total number of candies\n    x, y = symbols('x y')\n\n    # If each kid eats 18 candies, then 12 more candies are needed\n    equation1 = Eq(x * 18, y + 12)\n    # If each kid eats 15 candies, then there are enough candies for 2 more kids\n    equation2 = Eq(x * 15, y - (2 * 15))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    sum_digits = 0\n    for page in range(1, 311):\n        for digit in str(page):\n            sum_digits += int(digit)\n    return sum_digits\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    total_cost = cost_per_item * 11\n    return total_cost\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from sympy import root, Rational\n\n    expr = 16.7 - root(((-4.56) ** 2 - (8.1) ** 3) / (7.2 ** 3) / (-root(27/4, 2) - (-30.15)), 3)\n    ans = round(expr.evalf(), 3)\n\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    oliver_age_now = 20\n    lin_age_now = 26\n    \n    years_later = symbols('years_later')\n    equation = Eq((oliver_age_now + years_later) + (lin_age_now + years_later), 48)\n    \n    years_later_solution = solve(equation, years_later)\n    \n    return years_later_solution[0]\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Mr. Lim's and Mrs. Lim's ages\n    MrLim, MrsLim = symbols('MrLim MrsLim')\n\n    # Equation based on the given ratio 7 years ago\n    equation1 = Eq(MrLim - 7, (6/5) * (MrsLim - 7))\n\n    # Equation based on the sum of their current ages\n    equation2 = Eq(MrLim + MrsLim, 69)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (MrLim, MrsLim))\n\n    return solutions[MrLim]\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter, john = symbols('sam peter john')\n    initial_ratio = Eq(sam/peter, 7/5)\n    john_ratio = Eq(0.8*john, 0.2*sam + 0.2*peter)\n    sam_end = Eq(sam - 0.2*sam, john + 20)\n\n    solutions = solve((initial_ratio, john_ratio, sam_end), (sam, peter, john))\n    \n    # Since we need the initial amount of stickers Peter had\n    return solutions[peter]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # Mean score of 5 students\n    mean_five_students = 87\n    # Total score of the 5 students\n    total_score_five_students = mean_five_students * 5\n    \n    # New mean score when Jim's score is included (6 students)\n    new_mean_six_students = 88\n    # Total score of all 6 students\n    total_score_six_students = new_mean_six_students * 6\n\n    # Jim's score is the difference between the total score of 6 students\n    # and the total score of the initial 5 students\n    jim_score = total_score_six_students - total_score_five_students\n    \n    return jim_score\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age = 8\n    dad_age = 5 * avril_age\n    age_difference_2_years_ago = (dad_age - 2) - (avril_age - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    ans = 58 + 63 + 59 + 62 + 63 + 56 + 61\n    return ans\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    discount1 = 0.10\n    discount2 = 0.20\n\n    price_after_first_discount = initial_price * (1 - discount1)\n    final_price = price_after_first_discount * (1 - discount2)\n\n    return final_price\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # The speed ratio of Jayden to Carter is 7:4\n    # Let the distance Jayden covers until the first meeting be x\n    # Distance Carter covers until the first meeting will be (440 - x)\n    # Time taken by both to meet for the first time will be same\n    # Therefore, Jayden's distance / his speed = Carter's distance / his speed\n    # x / 7 = (440 - x) / 4\n    # Solving for x gives x = 280 meters\n    # Jayden meets Carter after covering 280 meters from A\n    \n    # After meeting, Jayden turns back and they both walk towards each other again\n    # Now, Carter has to cover 280 meters to reach A and Jayden has to cover 160 meters to reach B\n    # Let the distance Jayden covers after turning back until the second meeting be y\n    # Therefore, Carter's distance towards A when they meet will be (280 - y)\n    # Again, their time will be same, so:\n    # y / 7 = (280 - y) / 4\n    # Solving for y gives y = 112 meters\n    \n    # Therefore, Jayden meets Carter for the second time after covering:\n    # 280 (distance to first meeting) + 112 (distance after turning back) = 392 meters from A\n    return 440 - 112  # The distance of their meeting place from A will be the remaining 328 meters\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bats = symbols('bats')\n\n    cost_price = 135\n    selling_price = 185\n    profit = 2945\n    remaining_bats = 3\n\n    # The shop makes a profit of selling_price - cost_price for each bat sold\n    # Let's call the total number of bats x\n    # Then the total cost is cost_price * x\n    # The total selling price for (x - remaining_bats) bats is selling_price * (x - remaining_bats)\n    # The total selling price = total cost price + profit\n\n    equation = Eq(selling_price * (bats - remaining_bats), cost_price * bats + profit)\n\n    # Solving the equation\n    solution = solve(equation, bats)\n\n    return solution[0]\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    equation1 = Eq(kumar - 109, 4 * (raja - 286))\n    equation2 = Eq(raja, kumar)\n\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    total_boys = 47\n    capacity_per_minibus = 6\n    num_minibusses = (total_boys + capacity_per_minibus - 1) // capacity_per_minibus\n    return num_minibusses\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair_price = symbols('chair_price')\n    table_price = chair_price + 160\n  \n    equation = Eq(table_price + 5 * chair_price, 328)\n\n    solutions = solve(equation, chair_price)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    ans = 879 + 268\n    return ans\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_sum = 10 * 1111\n    mean_diff = 240\n\n    # Let x be the mean of the last 6 numbers\n    # mean of first 4 numbers is x - 240\n    # 4(x - 240) + 6x = total_sum\n    # 10x - 960 = total_sum\n    # 10x = total_sum + 960\n    x = (total_sum + 960) / 10\n\n    return x\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    # Convert Bud's pounds to pence\n    bud_pence = 110  # £1.10 is equivalent to 110p\n    pip_pence = 60   # Pip has 60p\n    \n    # Calculate the total money in pence\n    total_pence = bud_pence + pip_pence\n    \n    # Return the total money in pence\n    return total_pence\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n\n    # Rachel gives Alice 10 pieces of candy\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # Alice gives Rachel 10 pieces of candy and Rachel will have 4 more than 3 times Alice's candy\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Total number of candy originally\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    for i in range(1, 10):\n        for s in range(10):\n            if i != s:\n                is_value = i * 10 + s\n                pi_value = 4 * is_value\n                p, pi_unit = divmod(pi_value, 100)\n                if pi_unit == i and p == s and len(set([p, i, s])) == 3:\n                    return pi_value\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # First part of the race\n    distance_first = 280\n    speed_first = 7\n    time_first = distance_first / speed_first\n    \n    # Middle part of the race\n    distance_middle = 400\n    speed_middle = 5\n    time_middle = distance_middle / speed_middle\n    \n    # Last part of the race\n    total_distance = 800\n    distance_last = total_distance - (distance_first + distance_middle)\n    speed_last = 8\n    time_last = distance_last / speed_last\n    \n    # Total time for the race\n    total_time = time_first + time_middle + time_last\n    \n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed_ratio = 2\n    joyce_speed_ratio = 3\n    lori_speed = 2  # meters per second\n    time = 10  # seconds\n\n    joyce_speed = (joyce_speed_ratio / lori_speed_ratio) * lori_speed\n    distance_joyce_runs = joyce_speed * time\n\n    return distance_joyce_runs\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the time the cold tap alone takes to fill the bath\n    # Let h be the time the hot tap alone takes to fill the bath\n    c, h = symbols('c h')\n\n    # The rates of the taps are reciprocal of the time taken\n    # Rate of cold tap is twice that of the hot tap\n    equation1 = Eq(1/h, 1/(2*c))\n\n    # Together they take 10 minutes, so their combined rate is 1/10\n    equation2 = Eq(1/h + 1/c, 1/10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, h))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3 / probability_over_20\n    return probability_over_25_given_over_20\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don's speed in metres per minute\n    total_distance = 780  # total distance to the library in metres\n\n    # Distance covered by Don until they meet\n    don_distance = 360\n\n    # Time taken for Don to meet Danny\n    time = don_distance / don_speed\n\n    # Distance covered by Danny until they meet is the remaining distance to the library\n    danny_distance = total_distance - don_distance\n\n    # Speed of Danny is the distance covered by Danny divided by the time taken\n    danny_speed = danny_distance / time\n\n    return danny_speed\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    num_teams = 5\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    total_digits = 792\n    digits_per_page = 0\n    page_number = 1\n    while total_digits > 0:\n        if page_number < 10:\n            digits = 1\n        elif page_number < 100:\n            digits = 2\n        else:\n            digits = 3\n        total_digits -= digits\n        if total_digits >= 0:\n            page_number += 1\n    return page_number - 1\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    # Convert all ingredients weight to grams\n    flour = 1000 + 500   # 1 kg 500 g to grams\n    sugar = 1000 + 200   # 1 kg 200 g to grams\n    butter = 900         # 900 g\n\n    # Calculate the total mixture weight in grams\n    total_mixture = flour + sugar + butter\n\n    # Divide the total mixture into 8 cake tins\n    each_cake_tin = total_mixture / 8\n\n    return each_cake_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    sum_of_series = sum(sum(j / i for i in range(j, 11)) for j in range(1, 11))\n    return sum_of_series\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    from math import factorial as fact\n    \n    # A and B take the two edge positions, which can be arranged in 2! ways\n    # (because AB or BA can only go on the far right or left)\n    AB_positions = fact(2)\n    \n    # C and D take the two middle positions, which can be arranged in 2! ways\n    # (because once AB are placed, CD can only arrange among themselves)\n    CD_positions = fact(2)\n    \n    # Total combinations = AB arrangements * CD arrangements\n    total_combinations = AB_positions * CD_positions\n    \n    return total_combinations\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    ans = (20 / 30) * 27\n    return ans\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # Worst case scenario for not getting 4 marbles of the same color\n    # would involve picking 3 marbles from each color, because as soon as we pick the\n    # 4th marble of any color we have our requirement fulfilled.\n\n    # So the minimum number of marbles Janice must take to ensure she gets at least 4 marbles\n    # of the same color would be (3 from red) + (3 from blue) + (3 from green) + (1 more to ensure the 4th of any color)\n    # i.e., 3 * number of colors + 1\n\n    # Number of colors\n    num_colors = 3  # Red, blue, green\n\n    # Minimum number of marbles she must take out\n    min_marbles = 3 * num_colors + 1  # 3 marbles from each color + 1 extra to ensure 4 of the same color\n\n    return min_marbles\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = set()\n\n    # Form all possible combinations of two digits, allowing repetition\n    for digit1 in digits:\n        for digit2 in digits:\n            if digit1 != digit2:\n                two_digit_numbers.add(digit1 + digit2)\n    \n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    min_number = float('inf')\n    for perm in permutations(digits):\n        if perm[-1] % 2 == 0:  # Ensure the number is even by checking the last digit\n            num = int(''.join(map(str, perm)))\n            if num < min_number:\n                min_number = num\n    return min_number\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 7 == 5 and number % 13 == 11:\n            return number\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n\n    # The total amount of work is workers * days\n    total_work = workers * days_for_3_workers\n    \n    # For 1 worker, the total days is equal to the total work divided by 1 worker\n    days_for_1_worker = total_work / 1\n    \n    return days_for_1_worker\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(0, 10):\n            A = 10 * x + y\n            B = 20 * x + y\n            if B == 6 * A + 25:\n                return A\n    return \"No solution found\"\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "from itertools import permutations\n\ndef solution():\n    expressions = [\n        '285+15/5-2',\n        '(285+15)/5-2',\n        '285+(15/5-2)',\n        '285+15/(5-2)',\n        '(285+15/5)-2',\n        '285+(15/5)-2',\n        '(285+15)/(5-2)',\n        '285/((15/5)-2)',\n        '285/(15/5-2)',\n        '(285/15/5)-2',\n        '285/(15/(5-2))',\n        '(285+15/(5-2))',\n        '285+(15/(5-2))',\n        '285/15/(5-2)',\n        '285/(15/5)-2'\n    ]\n    \n    # Deduplicate results by using set\n    results = set()\n    for expr in expressions:\n        results.add(eval(expr))\n        \n    ans = len(results)\n    \n    return ans\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    num_rows = 3\n\n    pupils_per_row = total_pupils // num_rows\n\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    # Define the equations\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlocked = 0\n    for i in range(1, 101):\n        if i % 3 == 0:\n            unlocked += 1\n        if i % 5 == 0:\n            unlocked = unlocked - 1 if unlocked > 0 else unlocked + 1\n    return 100 - unlocked\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef count_valid_permutations(perm):\n    for i in range(len(perm)):\n        if perm[i] == 'A':\n            if 'B' not in perm[:i] or 'C' not in perm[i+1:]:\n                return False\n        if perm[i] == 'B':\n            if 'A' not in perm[i+1:]:\n                return False\n        if perm[i] == 'C':\n            if 'A' not in perm[:i]:\n                return False\n        if perm[i] == 'D' and i < len(perm) - 1 and perm[i + 1] == 'E':\n            return False\n        if perm[i] == 'E' and i < len(perm) - 1 and perm[i + 1] == 'D':\n            return False\n        if perm[i] == 'D' and i > 0 and perm[i - 1] == 'E':\n            return False\n        if perm[i] == 'E' and i > 0 and perm[i - 1] == 'D':\n            return False\n        if perm[i] == 'F' and 'G' not in [perm[i - 1], perm[(i + 1) % len(perm)]]:\n            return False\n        if perm[i] == 'G' and 'F' not in [perm[i - 1], perm[(i + 1) % len(perm)]]:\n            return False\n    return True\n\ndef solution():\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    valid_permutations = 0\n    \n    for perm in permutations(students):\n        if count_valid_permutations(perm):\n            valid_permutations += 1\n    \n    return valid_permutations\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # Given ratio of steps between Nicolas and Yiding\n    nicolas_steps = 4\n    yiding_steps = 3\n    \n    # Given level Nicolas reached\n    nicolas_target = 16\n    \n    # Calculate Yiding's level based on the ratio\n    yiding_level = (yiding_steps * nicolas_target) / nicolas_steps\n    \n    return int(yiding_level)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cake_cost, borrowed = symbols('cake_cost borrowed')\n    equation1 = Eq(10 * cake_cost + borrowed, 0)\n    equation2 = Eq(13 * cake_cost + borrowed, -26)\n\n    solutions = solve((equation1, equation2), (cake_cost, borrowed))\n\n    return solutions[cake_cost]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50   # Average mass of boys times number of boys\n    total_mass_girls = 6 * 40  # Average mass of girls times number of girls\n    total_children = 4 + 6      # Total number of children\n\n    average_mass = (total_mass_boys + total_mass_girls) / total_children\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = divisor * quotient + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    # total runs in 5 matches = mean score * number of matches\n    total_runs = 40 * 5\n\n    # sum of known scores\n    known_scores = 37 + 53 + 29 + 41\n\n    # calculate x as the remaining runs to reach the total\n    x = total_runs - known_scores\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    word = 'CHEESE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    numerator = factorial(len(word))\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    \n    return numerator // denominator\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the number of cows and goats\n    cows, goats = symbols('cows goats')\n\n    # The initial total number of animals\n    total_initial = cows + goats\n    \n    # The final total number of animals, which is the initial total plus 240 extra animals\n    total_final = total_initial + 240\n\n    # Initially, 65% of the animals are cows\n    equation1 = Eq(cows, 0.65 * total_initial)\n    \n    # After 240 animals are added, the number of cows has increased by 20% of the initial total\n    equation2 = Eq(cows + (0.20 * total_initial), 0.65 * total_final)\n    \n    # The number of goats has doubled after adding 240 animals\n    equation3 = Eq(2 * goats, total_final - (cows + (0.20 * total_initial)))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (cows, goats))\n    \n    # The number of goats at the beginning\n    return solutions[goats]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    # Iterate through possible six-digit numbers with 9 in the units column\n    for number in range(100000, 1000000):\n        if str(number)[-1] == '9': \n            # Remove the 9 from the units column and place it at the start\n            new_number = int(str(number)[:-1])\n            new_number = int('9' + str(new_number))\n            # Check if the new number is four times the original number\n            if new_number == 4 * number:\n                return number\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    minimum_divisor = 1\n\n    minimum_dividend = (quotient * minimum_divisor) + remainder\n\n    return minimum_dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    Abigail, Jonathan = symbols('Abigail Jonathan')\n    \n    # Define the equations based on the problem\n    equation1 = Eq(Abigail, Jonathan + 6)\n    equation2 = Eq(Abigail - 6, 2 * (Jonathan - 6))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (Abigail, Jonathan))\n    \n    return solutions[Jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    alice_daily_work = 1 / 40\n    bob_daily_work = 1 / 60\n    total_work = 1\n\n    # Define the number of days Alice takes off as 'x'\n    for x in range(28):\n        work_done = (27 - x) * alice_daily_work + 27 * bob_daily_work\n        if work_done >= total_work:\n            return x\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b + a - b\n\n    ans = custom_operation(4, 3) - custom_operation(3, 4)\n    \n    return ans\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 4):\n        A, C, B, D = p\n        if A != '0' and C != '0':\n            if int(A+B+A) + int(C+D+C) == 726:\n                return int(A) + int(B) + int(C) + int(D)\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    \n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # Form the system of equations based on the problem statement\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percent_increase = (increase / initial_amount) * 100\n    return percent_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the equations\n    total_days, total_pages = symbols('total_days total_pages')\n\n    # Equation 1: Total pages is equal to 30 pages per day times (total days + 2)\n    equation1 = Eq(total_pages, 30 * (total_days + 2))\n\n    # Equation 2: Total pages is also equal to 39 pages per day times (total days - 4)\n    equation2 = Eq(total_pages, 39 * (total_days - 4))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_days, total_pages))\n\n    return solutions\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = \"2020202020202\"\n    length_of_sequence = len(sequence)\n    total_digits = 535\n    \n    # Number of complete repetitions of the sequence\n    complete_repetitions = total_digits // length_of_sequence\n    \n    # Partial sequence that does not complete a full cycle\n    partial_sequence_length = total_digits % length_of_sequence\n    \n    # Counting '2's in the sequence and the partial sequence\n    full_count_2s = sequence.count('2') * complete_repetitions\n    partial_count_2s = sequence[:partial_sequence_length].count('2')\n    \n    # Total count of '2's\n    total_count_2s = full_count_2s + partial_count_2s\n\n    return total_count_2s\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    return (36 * 37 * 38 * 39 * 40 * 41) % 7\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "网络故障，请重试"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # Analyze the pattern from the given equations\n    # 4 Δ 1 = 17 => (4^2) + 1 = 17\n    # 5 Δ 4 = 29 => (5^2) + 4 = 29\n    # 8 Δ 16 = 80 => (8^2) + 16 = 80\n    # The pattern seems to be (a^2) + b = a Δ b\n    \n    # Let apply the pattern to find 10 Δ 9\n    a = 10\n    b = 9\n    \n    # Apply the discovered pattern\n    ans = (a ** 2) + b\n    return ans\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    cookies_given_away = 55\n\n    remaining_cookies = morning_cookies + afternoon_cookies - cookies_given_away\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of fifty-cent and one-dollar coins\n    fifty_cent, one_dollar = symbols('fifty_cent one_dollar', integer=True)\n    \n    # Define the initial equation: 2/7 of his coins were fifty-cent coins\n    equation1 = Eq(fifty_cent, 2/7 * (fifty_cent + one_dollar))\n    \n    # His mother gave him 10 one-dollar coins and 5 dollars worth of fifty-cent coins (which is 10 fifty-cent coins)\n    equation2 = Eq(one_dollar - 10, 2 * (fifty_cent - 10))\n    \n    # In the end, he had twice as many one-dollar coins as fifty-cent coins\n    equation3 = Eq(one_dollar, 2 * fifty_cent)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (fifty_cent, one_dollar))\n    \n    # The total number of coins at first is the answer\n    total_coins_at_first = solutions[fifty_cent] + solutions[one_dollar]\n    \n    return total_coins_at_first\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    adults, children = symbols('adults children')\n    \n    equation1 = Eq(5 * adults + 3 * children, 75)\n    equation2 = Eq(adults + children, 19)\n\n    solutions = solve((equation1, equation2), (adults, children))\n    \n    return solutions[adults]\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dress, belt, shirt = symbols('dress belt shirt')\n\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (dress, belt, shirt))\n\n    return solutions[dress] - solutions[shirt]\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of marbles each person has after transactions\n    anna_end, betsy_end, charlene_end = symbols('anna_end betsy_end charlene_end')\n    \n    # Equations based on the problem statement\n    total_marbles_eq = Eq(anna_end + betsy_end + charlene_end, 168)\n    charlene_to_betsy_eq = Eq(charlene_end + 15, betsy_end - 15)\n    betsy_to_anna_eq = Eq(betsy_end + 8, anna_end - 8)\n    ratio_eq = Eq(anna_end / betsy_end, 2/5) & Eq(betsy_end / charlene_end, 5/7)\n    \n    # Solve the system of equations\n    solutions = solve((total_marbles_eq, charlene_to_betsy_eq, betsy_to_anna_eq, ratio_eq), \n                      (anna_end, betsy_end, charlene_end))\n    \n    # Calculate Betsy's initial number of marbles before giving 8 to Anna and receiving 15 from Charlene\n    betsy_initial = solutions[betsy_end] - 8 + 15\n    \n    return betsy_initial\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_saved_daily = 7\n    brenda_saved_daily = 6\n    andy_total_saved = 378\n\n    days_passed = andy_total_saved / andy_saved_daily\n    brenda_total_saved = brenda_saved_daily * days_passed\n\n    return brenda_total_saved\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    # Let's denote x as the number of correct answers\n    # and y as the number of incorrect answers.\n\n    # Since Eddie answered all questions,\n    # x + y = 10 (the total number of questions).\n\n    # From the problem's condition, we have:\n    # 6x - 2y = 44 (points for correct answers minus points for incorrect ones).\n\n    # We can solve this system of equations for x and y.\n\n    # From the first equation, y = 10 - x.\n    # Substitute y in the second equation:\n\n    # 6x - 2(10 - x) = 44\n    # 6x - 20 + 2x = 44\n    # 8x - 20 = 44\n    # 8x = 64\n    # x = 8\n    x = (44 + 20) // 8\n\n    return x\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Initial proportions of length, breadth, and height\n    original_length_proportion = 1\n    original_breadth_proportion = 1\n    original_height_proportion = 1\n\n    # Changes made by Candy to the cuboid\n    new_length_proportion = 1.10  # increased by 10%\n    new_breadth_proportion = 0.8  # reduced to 4/5 of the original\n    new_height_proportion = 11 / 10  # ratio of new height to original height is 11:10\n\n    # Original volume proportional to 1*1*1 = 1\n    original_volume = original_length_proportion * original_breadth_proportion * original_height_proportion\n\n    # New volume proportional to the product of the new proportions\n    new_volume = new_length_proportion * new_breadth_proportion * new_height_proportion\n\n    # Express the new volume as a percentage of the original volume\n    volume_percentage = (new_volume / original_volume) * 100\n\n    return volume_percentage\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    num_contestants = 8\n    num_prizes = 3\n\n    ans = factorial(num_contestants) // factorial(num_contestants - num_prizes)\n\n    return ans\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    return comb(num_points, 3)\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sum = 30 + 40 + 50 + 30 + 40 + 50 + 30 + 40 + 50\n    return sum\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = (360 / remaining_work_percentage) * 100\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    total_mushrooms = Eq(first_hour + second_hour, 40)\n    equal_mushrooms = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((total_mushrooms, equal_mushrooms), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # There are 5 students, including Noa, and each needs to solve a different number of questions.\n    # To maximize the number Noa solves, he must solve more than the others.\n    # Let's sort the number of questions each student solves in ascending order.\n    # Since everyone should solve at least one question, let's start assigning questions\n    # with the minimum number possible for the first 4 students: 1, 2, 3, 4.\n    # The sum of these questions is 1 + 2 + 3 + 4 = 10.\n    # Now subtract this sum from the total questions to find out how many Noa can solve.\n    total_questions = 40\n    min_questions_solved = 1 + 2 + 3 + 4  # minimum questions solved by other four students\n    noa_questions = total_questions - min_questions_solved\n    \n    return noa_questions\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    scan, ted = symbols('scan ted')\n    # scan's age now to Ted's age now = 1:4\n    equation1 = Eq(scan * 4, ted)\n    # (scan's age + 4) to (Ted's age + 4) = 1:3\n    equation2 = Eq((scan + 4) * 3, (ted + 4))\n    # Solving the system of equations for scan and ted\n    ages_now = solve((equation1, equation2), (scan, ted))\n\n    scan_now = ages_now[scan]\n    ted_now = ages_now[ted]\n\n    # To find x years ago when the ratio of their ages was 1:9,\n    # we set up the equation: (scan - x) / (ted - x) = 1 / 9\n    x = symbols('x')\n    equation3 = Eq((scan_now - x) * 9, (ted_now - x))\n\n    years_ago = solve(equation3, x)\n\n    return years_ago[0]\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    nearest_ten = round(number, -1)  # Rounds to nearest ten\n    return nearest_ten\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Time spent jogging from 6:30 am to 7:30 am is 1 hour\n    jogging_time = 1  # in hours\n    jogging_speed = 6.5  # in miles per hour\n    # Distance covered while jogging\n    jogging_distance = jogging_speed * jogging_time\n\n    # Time spent walking from 7:30 am to 9:30 am is 2 hours\n    walking_time = 2  # in hours\n    walking_speed = 4.5  # in miles per hour\n    # Distance covered while walking\n    walking_distance = walking_speed * walking_time\n\n    # Total distance travelled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        ""
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10\n        if height_climbed >= 45:\n            break\n        height_climbed -= day\n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    # Let g be the number of guppies\n    g = symbols('g')\n    \n    # Given: Mollies are twice the number of goldfish,\n    # and goldfish are twice the number of guppies.\n    # System of Equations:\n    # m = 2*f\n    # f = 2*g\n    # m = 276\n    \n    # Therefore, the number of mollies m is:\n    m = 276\n    \n    # Since the number of mollies m is twice the number of goldfish f:\n    f = m/2\n    \n    # And the number of goldfish f is twice the number of guppies g:\n    g = f/2\n    \n    # The question asks for the difference between the number of mollies and guppies:\n    difference = m - g\n    \n    return difference\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3  # cm per meter\n    real_tree_height_m = 12  # meters\n    model_tree_height_cm = real_tree_height_m * scale_ratio * 100 # convert meters to cm\n\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # According to the Pigeonhole Principle, if you want to make sure at least one student gets\n    # at least 3 pieces of candy, we need to have enough candy for all but one student to get\n    # 2 pieces and the remaining student to get 3 pieces.\n    # This is because if every student got 2 pieces, giving one more candy would ensure one student has 3.\n    \n    # Total number of students\n    students = 20\n    # Each student can get 2 pieces, so for 19 students we need 2 * 19 pieces\n    # The 20th student needs at least 3 pieces to satisfy the requirement\n    pieces = (students - 1) * 2 + 3\n\n    return pieces\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    from sympy import divisors\n\n    sum_of_factors = sum(divisors(20))\n\n    return sum_of_factors\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    correct_marks = 8\n    wrong_deduction = 4\n    total_marks = 100\n    \n    # Assume all answers are correct\n    max_marks = total_questions * correct_marks\n    \n    # Calculate how many marks she lost compared to the maximum she could get\n    lost_marks = max_marks - total_marks\n    \n    # Each wrong answer results in losing 'correct_marks' plus 'wrong_deduction' marks\n    # So we divide the lost marks by the sum of the deduction per wrong answer\n    wrong_answers = lost_marks // (correct_marks + wrong_deduction)\n    \n    # Correct answers can be found by subtracting wrong answers from total questions\n    correct_answers = total_questions - wrong_answers\n    \n    return correct_answers\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000\n    used_fraction = 5/8\n    remaining_fraction = 1 - used_fraction\n\n    original_flour = remaining_flour / remaining_fraction\n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # To ensure getting a pair of white socks at most, worst case scenario is:\n    # Yohan pulls out all red socks and all black socks first before getting the white ones.\n    max_red_socks = 10\n    max_black_socks = 10\n    # After this, he needs to draw just one white sock to have a pair of white socks,\n    # as he would have already drawn one white sock before.\n    white_socks_for_pair = 1\n    \n    # Total socks drawn at most to get a pair of white socks.\n    total_socks_drawn = max_red_socks + max_black_socks + white_socks_for_pair\n\n    return total_socks_drawn\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    return 765 * 0.60\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n\n    # The number of intervals between lamp posts is found by dividing the total number of flowers\n    # by the number of flowers between each pair of lamp posts. Add 1 to account for the first lamp post.\n    num_intervals = (total_flowers // flowers_between_posts) + 1\n\n    # The total length of the road is 50m. Divide this by the number of intervals to find\n    # the distance between every 2 lamp posts.\n    distance_between_posts = 50 / num_intervals\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    ans = 3 * 126\n    return ans\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    left_books = 6\n    right_position = 14  # Counting from the right, the favorite book is the 14th book.\n\n    # We have 6 books on the left, hence there are 13 books on the right of the favorite book.\n    right_books = right_position - 1\n\n    # Total number of books is the sum of books on the left, the favorite book, and the books on the right.\n    total_books = left_books + 1 + right_books\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temperature = 8\n    temperature_decrease = 17\n\n    final_temperature = initial_temperature - temperature_decrease\n\n    return final_temperature\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    # Since trees are planted at both ends, we start with 2 trees\n    # The remaining trees are planted every 10 meters between the two ends\n    num_trees = 2 + (road_length - 2 * distance_between_trees) / distance_between_trees\n\n    return int(num_trees)\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    result = 48 * (5/4)\n    return result\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1 / 4\n    term_position = 5\n\n    fifth_number = first_number * (ratio ** (term_position - 1))\n    \n    return fifth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    result = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return result\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_for_friends = (total_sweets - sweets_for_sister) / number_of_friends\n\n    return int(sweets_for_friends)\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # To find the largest number of apples one child can get, we need to minimize the number of apples\n    # the other children get, since each child gets at least one apple and no two can get the same number.\n    # Therefore, we start distributing apples to the first four children giving them 1, 2, 3, and 4 apples.\n\n    # Number of apples distributed to the first four children\n    distributed = 1 + 2 + 3 + 4\n\n    # Total apples\n    total_apples = 19\n\n    # Apples remaining for the fifth child\n    remaining = total_apples - distributed\n\n    return remaining\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    length = 12 - 2 * 1.5  # Deduct the distance from the edges on both sides\n    spacing = 3\n\n    # Calculate how many bushes can be fit in one side and round down since we want full bushes only\n    number_of_bushes_per_side = length // spacing\n\n    # Since it's a square lawn, all sides will have the same number of bushes\n    total_bushes = 4 * number_of_bushes_per_side\n\n    return int(total_bushes)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # P's work rate per hour\n    p_rate_per_hour = 1 / (12 * 8)\n    # Q's work rate per hour\n    q_rate_per_hour = 1 / (8 * 10)\n\n    # Combined work rate per hour when both P and Q are working\n    combined_rate_per_hour = p_rate_per_hour + q_rate_per_hour\n\n    # Total hours needed to complete the job when working together 8 hours a day\n    total_hours_together = 1 / combined_rate_per_hour\n\n    # Number of days needed if they work 8 hours each day\n    days_needed = total_hours_together / 8\n\n    return days_needed\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_fast_van = 132  # km/h\n    speed_slow_van = 78   # km/h\n    time_elapsed = 8      # hours\n\n    distance_apart = (speed_fast_van + speed_slow_van) * time_elapsed\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = 360 * (100 / remaining_work_percentage)\n    return total_masks\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n\n    equation = Eq(score - 30, (score / 2) + 10)\n\n    solution = solve(equation, score)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    from sympy import divisors\n\n    # Get all divisors of 78\n    divs = divisors(78)\n    \n    # Filter out the even divisors since the number of bags must be even\n    even_divs = [d for d in divs if d % 2 == 0]\n    \n    # There are as many ways to divide the apples as there are even divisors\n    return len(even_divs)\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    rabbits_per_goat = 9 / 3\n    goats_per_cow = 1 / 2\n    rabbits_per_cow = rabbits_per_goat / goats_per_cow\n    rabbits_for_2_cows = rabbits_per_cow * 2\n    return int(rabbits_for_2_cows)\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    avg = sum(numbers) / len(numbers)\n    return avg\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unanswered_questions = 3\n    answered_questions = total_questions - unanswered_questions\n    total_score = 168\n    correct_answer_score = 4\n    incorrect_answer_penalty = -1\n\n    # Assume all answered questions were correct\n    max_correct_score = answered_questions * correct_answer_score\n\n    # Calculate the difference from the actual score\n    score_difference = max_correct_score - total_score\n\n    # Since each wrong answer reduces the score by 5 (4 - (-1)),\n    # dividing the score difference by 5 gives us the number of wrong answers\n    wrong_answers = score_difference // (correct_answer_score - incorrect_answer_penalty)\n\n    # The number of correct answers is total answered questions minus wrong answers\n    correct_answers = answered_questions - wrong_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Let's denote pencils as 4x and pens as 5x according to the initial ratio\n    # When you replace a pen with a pencil the new number of pencils is 4x+1\n    # and the new number of pens is 5x-1.\n    # The new ratio is 7 to 8, so we have:\n    # (4x + 1) / (5x - 1) = 7 / 8\n    # We cross multiply to solve for x\n    # 8(4x + 1) = 7(5x - 1)\n    # 32x + 8 = 35x - 7\n    # 3x = 15\n    # x = 5\n    # Now we find the total number of pencils and pens using the initial ratio\n    # Total = 4x + 5x = 9x\n    x = 5\n    total = 9 * x\n    return total\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    num_of_terms = 10\n\n    last_term = first_term + common_difference * (num_of_terms - 1)\n    total_seats = (num_of_terms * (first_term + last_term)) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def new_operation(a, b):\n        return a * b - 5 * a + 8\n    \n    result = new_operation(10, 9)\n    result = new_operation(result, 8)\n    result = new_operation(result, 7)\n    result = new_operation(result, 6)\n    result = new_operation(result, 5)\n    result = new_operation(result, 4)\n\n    return result\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    total_profit_planned, discount_rate = symbols('total_profit_planned discount_rate')\n    \n    # Profit earned on the first day: 70% of the books at 60% profit each\n    first_day_profit = 0.70 * 0.60\n\n    # Profit planned to earn from all the books \n    planned_profit_from_all = 1 * 0.60\n\n    # Total final profit was 80% of the planned profit\n    final_total_profit = 0.80 * planned_profit_from_all\n\n    # Profit earned on the second day from the remaining 30% of the books\n    second_day_profit_from_remaining = final_total_profit - first_day_profit\n\n    # Let x be the discount rate on the second day\n    # The profit from the remaining books on the second day is equal to\n    # (1 - discount_rate) times the remaining 30% of the books\n    equation = Eq(1 - discount_rate, second_day_profit_from_remaining / 0.30)\n\n    # Solve for the discount rate\n    discount_rate_solution = solve(equation, discount_rate)\n\n    # Return the discount rate as a percentage\n    return discount_rate_solution[0] * 100\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    boys_percentage = 40\n    girls_count = 72\n    girls_percentage = 100 - boys_percentage\n\n    total_children = (girls_count * 100) / girls_percentage\n  \n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    strawberries_eaten = 73\n    strawberries_bought = 52\n\n    strawberries_now = initial_strawberries - strawberries_eaten + strawberries_bought\n\n    return strawberries_now\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    missing_first_page = 15\n    missing_last_page = 34\n    total_missing_pages = missing_last_page - missing_first_page + 1\n    total_missing_sheets = total_missing_pages // 2 if total_missing_pages % 2 == 0 else (total_missing_pages + 1) // 2\n    return total_missing_sheets\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    return 8**2 + 27\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of a tuna puff and a curry puff\n    tuna_puff_price, curry_puff_price = symbols('tuna_puff_price curry_puff_price')\n    \n    # Create the equations based on the problem statement\n    # Equation for the total cost\n    equation1 = Eq(12 * tuna_puff_price + 19 * curry_puff_price, 39.60)\n    # Equation for the price difference between tuna puff and curry puff\n    equation2 = Eq(tuna_puff_price - curry_puff_price, 0.20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tuna_puff_price, curry_puff_price))\n    \n    # Get the price of tuna puff\n    return solutions[tuna_puff_price]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n\n    for tens in digits:\n        for ones in digits:\n            if tens != ones:  # Ensure two different numbers\n                number = tens * 10 + ones\n                if number % 2 != 0:  # Check if the number is odd\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start_count = 10\n    end_count = 25\n    ans = end_count - start_count + 1\n    return ans\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60.0\n    \n    distance = speed_m_per_min * time_minutes\n    \n    return distance\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_cows, initial_goats = symbols('initial_cows initial_goats')\n\n    equation1 = Eq(initial_cows, 0.65 * (initial_cows + initial_goats))\n    equation2 = Eq(initial_cows * 1.20, 0.65 * (initial_cows + initial_goats + 240))\n    equation3 = Eq(initial_goats * 2, initial_goats + 240)\n\n    solutions = solve((equation1, equation2, equation3), (initial_cows, initial_goats))\n\n    return solutions[initial_goats]\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    # Initialize product as 1\n    product = 1\n    # Iterate through the sequence \n    for i in range(3, 20, 2):\n        # Multiply product by fractions of form (1 + 2/i)\n        product *= (1 + 2/i)\n    return product\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    # Conversion from cm to m\n    string_length_m = 85 / 100\n    # Total length needed in meters\n    total_length_needed_m = 400 * string_length_m\n    # Length of one roll in meters\n    roll_length_m = 20\n    # Calculate the number of rolls needed\n    rolls_needed = total_length_needed_m / roll_length_m\n    # Haoyuan will need to buy whole rolls, so we take the ceiling of the result\n    from math import ceil\n    return ceil(rolls_needed)\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n    balloons_for_boy = 2\n    balloons_for_girl = 4\n\n    # Let the number of boys be x\n    # Then the number of girls will be total_children - x\n    # Total balloons = balloons_for_boy * x + balloons_for_girl * (total_children - x)\n    # Rearrange the equation to solve for x (number of boys)\n    # 2x + 4(total_children - x) = total_balloons\n    # 2x + 4*total_children - 4x = total_balloons\n    # -2x + 4*total_children = total_balloons\n    # x = (4*total_children - total_balloons) / 2\n\n    boys = (balloons_for_girl * total_children - total_balloons) // (balloons_for_girl - balloons_for_boy)\n\n    return boys\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Create symbols for Emma and John's current age\n    emma, john = symbols('emma john')\n    \n    # Equation for the sum of their ages in 3 years\n    equation1 = Eq(john + emma + 3 * 2, 27) # Each will be 3 years older\n    \n    # Equation for the age difference\n    equation2 = Eq(john, emma + 7)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (emma, john))\n    \n    # Emma's current age\n    return solutions[emma]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (-cookies) % 5 == 3:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    donation = salary / 4\n    spending = (5/6) * (salary - donation)\n    \n    equation = Eq(spending, donation + 78)\n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # Calculate the last digit for powers of 2 and 3, since they repeat every 4\n    last_digit_2 = pow(2, 2017 % 4, 10)\n    last_digit_3 = pow(3, 2017 % 4, 10)\n\n    # Multiply the individual last digits to find the last digit of the expression\n    last_digit_expression = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit_expression\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    # Let t be the time (in minutes) spent walking at the faster speed\n    t = Symbol('t')\n    \n    # Distance travelled at the slower speed: 150m/min for 10 mins\n    distance_slow = 150 * 10\n    \n    # Distance travelled at the faster speed: (150m/min + 50m/min) * t\n    distance_fast = (150 + 50) * t\n    \n    # Total distance travelled\n    total_distance = distance_slow + distance_fast\n    \n    # Solve for t using the total distance of 3700m\n    time_fast = solve(total_distance - 3700, t)\n    \n    # Total time spent walking = time at slower speed + time at faster speed\n    total_time = 10 + time_fast[0]\n    \n    return total_time\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    seventh_term = 57\n    fifteenth_term = 89\n    term_diff = 15 - 7\n\n    common_difference = (fifteenth_term - seventh_term) / term_diff\n\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (1, 2),\n        (2, 3),\n        (4, 5),\n        (6, 7)\n    ]\n\n    num, _ = solve_congruence(*congruences)\n    while num < 400:\n        return num\n        num += 2*3*5*7\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    ans = None\n    possible_numbers = []\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if A != B and A != C and B != C and A != 4 and A != 7 and A != 1 and A != 9 and \\\n                   B != 4 and B != 7 and B != 1 and B != 9 and C != 4 and C != 7 and C != 1 and C != 9:\n                    number = 4700000 + A * 10000 + B * 100 + C\n                    if number % 9 == 0:\n                        ans = A + B + C\n                        possible_numbers.append(number)\n\n    return ans, possible_numbers\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    total_sweets = 240\n    sweets_change_per_week = 45 - 60\n    sweets_goal = 150\n    \n    weeks_needed = (total_sweets - sweets_goal) / (-sweets_change_per_week)\n    \n    return int(weeks_needed)\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(2 * apple + orange, 40)\n    equation2 = Eq(apple + 2 * orange, 35)\n    \n    solutions = solve((equation1, equation2), (apple, orange))\n\n    ans = solutions[apple] + solutions[orange]\n    return ans\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    return 3**3\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    # Using the Inclusion-Exclusion Principle\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n    total_money = 140\n\n    money_spent_on_rackets = 2 * racket_price\n    remaining_money = total_money - money_spent_on_rackets\n    number_of_balls = remaining_money // ball_price\n\n    return int(number_of_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Since there are 3 colors, and we want to guarantee 3 different colors,\n    # in the worst case scenario, we pick all balls of two colors first.\n    # 4 purple + 4 white = 8 balls in the worst case without getting a red.\n    # Then we need just 1 more ball to ensure we have the third color (red).\n    # So we need to draw 8 + 1 balls to guarantee 3 different colors.\n    return 8 + 1\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    heinz_weekly_change = 4\n    jed_chocolates = 137\n    jed_weekly_change = -6\n\n    weeks = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_weekly_change\n        jed_chocolates += jed_weekly_change\n        weeks += 1\n    \n    return weeks\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # There are 12 points on the circle, so there are 12 ways to choose the vertex of the right angle,\n    # because each point can be the vertex of the right angle.\n    right_angle_vertex_options = 12\n\n    # Once we have chosen a point for the right angle, we can form a right angle triangle \n    # by choosing two other points which are not adjacent to the vertex (as adjacent points \n    # would result in a straight line, not a right angle). For a point to make a right angled \n    # triangle with the vertex, there have to be exactly one other point between them on the circumference.\n    # There are 4 such points on one side of the vertex, 4 on the opposite (since it's a circle there are \n    # two directions to go from the chosen vertex). And thus, 4 valid points on each side for the first side \n    # of the triangle. When the first side is fixed, there are only 2 options left for the other side \n    # to complete the triangle (since we cannot use the point opposite to the vertex or adjacent points).\n\n    # Hence, from both sides, we can form 4 * 2 triangles. \n    # Since there are 12 starting points to choose, we have:\n    right_angle_triangles_per_vertex = 4 * 2\n\n    # Multiplying the number of vertices by the number of triangles that can be formed from each.\n    total_right_angle_triangles = right_angle_vertex_options * right_angle_triangles_per_vertex\n\n    return total_right_angle_triangles\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    total_donuts = 6 * 6\n    donuts_eaten = 3\n    donuts_left = total_donuts - donuts_eaten\n    return donuts_left\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(3 * apples + 5 * oranges, 270)\n    equation2 = Eq(3 * apples + 7 * oranges, 342)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n    return solutions\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5*(6*c - 1), -35)\n    solution = solve(equation, c)\n    return solution[0]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # If the tiger is the 11th from both the front and the back,\n    # There must be 10 animals in front of him and 10 animals behind him.\n    # Including the tiger, that makes a total of 21 animals.\n    total_animals = (11 - 1) * 2 + 1\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    total_debt = 2.6\n    months_needed = total_debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    part1 = (1/3) * 24\n    part2 = (2/5) * 30\n    part3 = (1/3) * 15\n    ans = part1 + part2 + part3\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    count = 0\n    for combo in combinations_with_replacement(range(0, 5), 3):\n        if sum(combo) == 4 and combo[0] != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of roses in each of the three vases before Nancy's mother brought more roses.\n    x = symbols('x')\n\n    # Since there were 24 roses divided into 3 vases, each vase must have 24 / 3 = 8 roses.\n    vase_initial = 24 // 3\n\n    # Now, Nancy divides more roses into another four vases, with each vase having the same number as before.\n    # Let the total number of roses after her mother brought more be Y, which is also 4 times the amount in each vase.\n    Y = symbols('Y')\n    equation = Eq(4 * vase_initial, Y)\n\n    # Solving for Y to find the total number of roses.\n    total_roses = solve(equation, Y)\n\n    return total_roses[0]\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    ans = 36.42 * 1000\n    return ans\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 0.50  # in dollars\n    mamee_cost = haribo_cost - 0.30  # in dollars\n    big_jelly_cost = 6 * mamee_cost  # in dollars\n    \n    return big_jelly_cost\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    number = 2405 + 1827\n    number_in_words = {\n        0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', \n        6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten', \n        11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', \n        15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen', \n        19: 'nineteen', 20: 'twenty',\n        30: 'thirty', 40: 'forty', 50: 'fifty', 60: 'sixty', \n        70: 'seventy', 80: 'eighty', 90: 'ninety',\n        1000: 'thousand',\n    }\n\n    def in_words(n):\n        if n <= 20:\n            return number_in_words[n]\n        elif n < 100:\n            if n not in number_in_words:\n                return number_in_words[n // 10 * 10] + '-' + number_in_words[n % 10]\n            return number_in_words[n]\n        elif n < 1000:\n            if n % 100 == 0:\n                return number_in_words[n // 100] + ' hundred'\n            return number_in_words[n // 100] + ' hundred and ' + in_words(n % 100)\n        else:\n            if n % 1000 == 0:\n                return in_words(n // 1000) + ' thousand'\n            return in_words(n // 1000) + ' thousand, ' + in_words(n % 1000)\n\n    return in_words(number)\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon = 2\n    cherry = 7\n    mint = 1\n\n    if mint > 0:  # If Will hates mint flavor, this doesn't get counted.\n        max_candies_eaten = lemon + cherry\n    else:\n        max_candies_eaten = lemon + cherry + mint\n\n    return max_candies_eaten\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    halfway = (-18 + -2) / 2\n    return halfway\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(10):\n            if (10 * A + B) % 2 == 0:  # AB is divisible by 2\n                for C in range(10):\n                    if (10 * B + C) % 3 == 0:  # BC is divisible by 3\n                        for D in range(10):\n                            if (10 * C + D) % 5 == 0:  # CD is divisible by 5\n                                if (100 * A + 10 * B + C) % 9 == 0:  # ABC is divisible by 9\n                                    if (100 * B + 10 * C + D) % 11 == 0:  # BCD is divisible by 11\n                                        if len({A, B, C, D}) == 4:  # different digits\n                                            return 1000 * A + 100 * B + 10 * C + D\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    \n    price_of_2_cheese_cakes = 2 * cheese_cake_price\n    return price_of_2_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    for num in range(1, 80):\n        if (num % 2 == 1) and (num % 3 == 2) and (num % 4 == 3) and (num % 5 == 4):\n            return num\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    return 10.256 + 9.2 - 7.51\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    # In a single-elimination tournament, the number of games is always\n    # one less than the number of participants, since each game eliminates\n    # one participant until only the winner remains.\n    num_teachers = 16\n    num_games = num_teachers - 1\n\n    return num_games\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all possible ages for the children considering the sum of ages is 55\n    # The maximum age for any child should be less than 55\n    # Considering the minimum age as 1 to avoid non-natural ages (0 or negative)\n    possible_ages = [age for age in range(1, 55) if age * 2 + 3 + 2 <= 55]\n\n    # Check all permutations of 4 different ages from the possible ages\n    for ages in permutations(possible_ages, 4):\n        older_son, younger_son, older_daughter, younger_daughter = sorted(ages)\n        if (younger_son == older_son + 3 and\n            younger_daughter == older_daughter + 2 and\n            younger_son == 2 * older_daughter and\n            sum(ages) == 55):\n            # Return the youngest child's age\n            return min(ages)\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    # Given ratio of height to width is 3:4\n    # Height is given as 21 cm\n    ratio_height = 3\n    ratio_width = 4\n    height = 21\n\n    # Calculate the width using the ratio\n    width = (ratio_width / ratio_height) * height\n\n    # Calculate the perimeter of the screen\n    # Perimeter = 2 * (height + width)\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    return (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for wallet and watch\n    wallet, watch = symbols('wallet watch')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    decimal_repr = \"428571\"  # periodic part of the decimal representation of 3/7\n    count_digits = 58\n    sum_digits = sum(int(decimal_repr[i % len(decimal_repr)]) for i in range(count_digits))\n    \n    return sum_digits\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books is 11\n    same_biographies = 3\n    same_science_fictions = 4\n    same_magazines = 2\n    same_practice_books = 2\n\n    # Calculate the number of different ways to arrange the books using the formula for permutations\n    # of a multiset: n! / (n1! * n2! * n3! * ... * nk!)\n    # where n is the total number of items, and n1...nk are the identical item counts.\n    ways = factorial(total_books) // (factorial(same_biographies) * factorial(same_science_fictions) * factorial(same_magazines) * factorial(same_practice_books))\n\n    return ways\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount exchanged between bottles A and B\n    x = symbols('x')\n    \n    # Concentration of sugar in bottle A after exchange\n    concentration_A = ((50 * 0.11) - (0.11 * x) + (0.47 * x)) / 50\n    \n    # Concentration of sugar in bottle B after exchange\n    concentration_B = ((50 * 0.47) - (0.47 * x) + (0.11 * x)) / 50\n    \n    # Set the two concentrations equal to each other\n    equation = Eq(concentration_A, concentration_B)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    tom_string_length = 13\n    nick_string_length = tom_string_length + 25\n    difference_length = nick_string_length - tom_string_length\n    return difference_length\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken_tenders = 18\n    total_students = 50\n\n    percentage = (students_choosing_chicken_tenders / total_students) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # Convert from meters to centimeters\n    cauliflower_spacing = 40\n    offset = 20\n\n    # We subtract the initial offset from the plot length to see the usable length\n    usable_length = plot_length_cm - offset\n\n    # Number of cauliflowers is the number of spacing intervals plus 1 (for the first cauliflower)\n    num_cauliflowers = (usable_length // cauliflower_spacing) + 1\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    digits = [1, 3, 6]\n    count = 0\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    square = symbols('square')\n    equation = Eq(8 * square + 3, 75)\n    solution = solve(equation, square)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):\n            for x3 in range(x2 + 1, 15):\n                x4 = 15 - x1 - x2 - x3\n                if x4 > x3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    primes_within_50 = [p for p in range(1,51) if isprime(p)]\n    special_primes = [p for p in primes_within_50 if isprime(p + 6) or isprime(p - 6)]\n    return len(special_primes), special_primes\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    total = 250\n    result = (percentage / 100) * total\n    return result\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7 + (64 / 100)\n    subtract_metres = 2 + (7 / 100)\n    ans = total_metres - subtract_metres\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    # Max's purchase: 1 banana + 2 pears = 94p\n    max_purchase = Eq(banana + 2 * pear, 94)\n\n    # Emily's purchase: 1 banana + 1 pear = 62p\n    emily_purchase = Eq(banana + pear, 62)\n\n    # Solve the system of equations\n    prices = solve((max_purchase, emily_purchase), (banana, pear))\n\n    return prices[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    fib_sequence = [1, 2, 3, 5, 8, 13, 21]\n    next_number = fib_sequence[-1] + fib_sequence[-2]\n    return next_number\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    return 19 + 23 + 19 + 22 + 20\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruits = 48\n    fraction_apples = 5 / 8\n    number_of_apples = total_fruits * fraction_apples\n    number_of_pears = total_fruits - number_of_apples\n    return int(number_of_pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # This sequence is a geometric sequence where each number is 2 times the previous number.\n    # The nth term of the geometric sequence is given by a * r^(n - 1), where\n    # a is the first term and r is the common ratio.\n    # For this sequence, a = 1 and r = 2.\n    \n    # We know the 20th term would be 2^(20 - 1) and the 17th term would be 2^(17 - 1).\n    # The question asks for the 20th number divided by the 17th number.\n    # (2^(20 - 1)) / (2^(17 - 1)) = 2^(20 - 1 - (17 - 1)) = 2^3 = 8\n    # Thus, the answer is 8.\n    \n    ans = 8\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_numbers = 35\n    max_product = 0\n    for i in range(1, sum_of_numbers // 2 + 1):\n        product = i * (sum_of_numbers - i)\n        if product > max_product:\n            max_product = product\n    return max_product\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6\n    total_earnings = average_daily_earnings * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # the average number of books Alice, Becky, and Crystal have\n    average_ABC = 60\n    \n    # calculating the total number of books Alice, Becky, and Crystal have\n    total_ABC = average_ABC * 3\n    \n    # when Dennis is included, the average increases by 10\n    new_average_ABCD = average_ABC + 10\n    \n    # calculating the new total for Alice, Becky, Crystal, and Dennis\n    total_ABCD = new_average_ABCD * 4\n    \n    # Dennis's number of books is the difference between the new total and the old total\n    dennis_books = total_ABCD - total_ABC\n    \n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    total_distance = 16\n    distance_per_day = 5\n    slide_per_night = 3\n    net_distance_per_day = distance_per_day - slide_per_night\n\n    # Calculate the distance just before the final climb\n    distance_before_final_climb = total_distance - distance_per_day\n\n    # Calculate the number of complete days needed to reach just below the burrow's edge\n    days_to_reach_near_top = distance_before_final_climb // net_distance_per_day\n\n    # The snail will climb out on the next day\n    final_day = days_to_reach_near_top + 1\n\n    return final_day\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import primerange, isprime\n\n    # Find the smallest two-digit prime number\n    small_prime = list(primerange(10, 100))[0]\n\n    # Find the largest two-digit square number (squares of 10 down to 1)\n    for i in range(10, 0, -1):\n        square_num = i**2\n        if 10 <= square_num <= 99:  # check if it is a two-digit number\n            large_square = square_num\n            break\n\n    # Return the product\n    return small_prime * large_square\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    # Since the distance between the 1st and 4th flag is 9m,\n    # the distance between each flag (the common difference in an arithmetic sequence) is 9m / (4 - 1).\n    common_difference = 9 / (4 - 1)\n\n    # The distance between the 1st and 9th flag is the sum of the distances\n    # between the 1st and 2nd, 2nd and 3rd, ..., 8th and 9th flags.\n    # Since there are 8 intervals between the 1st and 9th flag,\n    # the total distance is 8 times the common difference.\n    distance = common_difference * (9 - 1)\n\n    return distance\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_height = 19.6\n    ratio_john_to_mike = 2 / 3\n    mikes_height = johns_height / ratio_john_to_mike\n\n    return mikes_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    is_prime = True\n    for i in range(2, 233):\n        if 233 % i == 0:\n            is_prime = False\n            break\n    return is_prime\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    hundredths = 7\n    tenths = 6\n    ones_place = 4\n\n    number = ones_place + tenths / 10 + hundredths / 100\n    \n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_in_still_water = 22\n    speed_of_current = 3\n    distance = 200\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    time_taken = distance / speed_downstream\n\n    return time_taken\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for the three types of rabbits\n    black, white, grey = symbols('black white grey')\n\n    # total number of rabbits\n    total_rabbits = Eq(black + white + grey, 59)\n\n    # black and white rabbits are in total 11 more than grey rabbits\n    black_white_more = Eq(black + white, grey + 11)\n\n    # black rabbits are 9 less than white rabbits\n    black_less_white = Eq(black, white - 9)\n\n    # solve the system of equations\n    solutions = solve((total_rabbits, black_white_more, black_less_white), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of peaches as P and the number of students in class B as n.\n    P, n = symbols('P n')\n\n    # Equation for class A: P = 5*(n + 3) + 10\n    equation1 = Eq(P, 5 * (n + 3) + 10)\n\n    # Equation for class B: P = 8*n - 2\n    equation2 = Eq(P, 8 * n - 2)\n\n    # Solving the system of equations to find the values of P and n\n    solutions = solve((equation1, equation2), (P, n))\n\n    return solutions[P]\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_pen = pen_cost // pencil_cost\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    # Let x be the number of correct answers\n    total_questions = 10\n    points_for_correct = 6\n    points_lost_otherwise = -2\n    total_points = 36\n\n    # Equation based on problem statement:\n    # 6x - 2(10 - x) = 36\n\n    # Simplify equation:\n    # 6x - 20 + 2x = 36\n    # 8x - 20 = 36\n    # 8x = 56\n    # x = 7\n    \n    correct_answers = (total_points + total_questions * points_lost_otherwise) // points_for_correct\n\n    return correct_answers\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n\n    ans = trains + buses + flights\n\n    return ans\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Place the 3 playing a sketch performances (P) with 2 dancing (D) in between as placeholders\n    # we have 3 P's that must be separated, with 4 placeholders (D) between them, and before and after like:\n    # D P D P D P D\n    # We have 4 + 3 extra D's to arrange in the 5 placeholders.\n    # This is equivalent to distributing 4 indistinguishable D's into 5 distinguishable placeholders.\n    # Which is calculated using stars and bars: C(n + k - 1, k).\n    # where n is the number of D's to distribute (4), and k is the number of placeholders (5).\n    \n    n = 4\n    k = 5\n    \n    ways_to_distribute_Ds = factorial(n + k - 1) // (factorial(n) * factorial(k - 1))\n    \n    # Now we need to arrange the initial 3 P's and 4 placeholders (which now have all D's distributed)\n    # Total slots to arrange here will be n_Ps + placeholders = 3 + 4 = 7\n    # The 3 P's are distinguishable and 4 placeholders are distinguishable\n    # So it's a permutation of 7 distinct items.\n    \n    total_slots = 7\n    arrangement_ways = factorial(total_slots)\n    \n    # Total number of arrangements is the product of two.\n    ans = ways_to_distribute_Ds * arrangement_ways\n    \n    return ans\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import symbols, Integer, solveset, S\n\n    h = symbols('h', integer=True)\n    cube_root = Integer(28512) ** (S(1)/3)\n\n    # Since 28512/h should be a cube, h must be a divisor of 28512.\n    # We are looking for the largest divisor of 28512 that makes 28512/h a cube.\n    divisors = [i for i in range(1, int(cube_root) + 1) if 28512 % i == 0]\n    for divisor in divisors[::-1]:  # Start from the largest divisor\n        if Integer(28512 // divisor).is_prime_power(3):  # Check if (28512//divisor) is a cube\n            return 28512 // divisor\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Strategy: Take the maximum number of chips of one color without fulfilling the condition,\n    # then take one more chip to ensure getting two different colors.\n\n    # Take 3 red chips (max number of red chips), still not guaranteed two different colours.\n    # Take another 4 yellow chips (max number of yellow chips), still not guaranteed two different colours.\n    # Take one more chip (any color) to guarantee the second chip is a different color.\n    # Total: 3 (red) + 4 (yellow) + 1 (any) = 8 chips needed to guarantee two different colors.\n    min_chips = 3 + 4 + 1  # without seeing\n\n    return min_chips\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    families = 10\n    father_handshakes = (families - 1) * 3 * families  # Each father shakes hands with 3 people from other 9 families\n    mother_handshakes = (families - 1) * 2 * families  # Each mother shakes hands with 2 people from other 9 families\n    child_handshakes = 0  # Children do not shake hands with each other\n\n    total_handshakes = father_handshakes + mother_handshakes + child_handshakes\n\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    num1 = 31415926\n    num2 = 31415927\n    num3 = 31415925\n\n    ans = (num1 ** 2) - (num2 * num3)  # Applying the difference of two squares formula reversely\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    odd_digits = [1, 3, 5, 7, 9]  # All possible odd digits\n\n    # There are 5 possibilities for each digit, and there are 3 digits\n    count = len(odd_digits) * len(odd_digits) * len(odd_digits)\n    \n    return count\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_sequence = \"85274\"\n    position = (79 - 1) % len(recurring_sequence)  # Adjust for zero-indexing\n    digit = recurring_sequence[position]\n    return int(digit)\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    max_three_digit_number = 999\n    for num in range(max_three_digit_number, 99, -1):\n        if (num + 2009) % (17 * 19) == 0:\n            return num\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    # Initial free hours\n    free_hours = 40\n    # Price tiers\n    tier_1_price = 5\n    tier_2_price = 8\n    tier_3_price = 15\n    # Hour thresholds for each tier\n    tier_1_threshold = 50\n    tier_2_threshold = 60\n    # Total cost charged\n    total_cost = 82\n    \n    # Calculate the total hours parked\n    if total_cost <= (tier_1_threshold - free_hours) * tier_1_price:\n        # If the cost is within the first tier\n        total_hours = free_hours + (total_cost / tier_1_price)\n    elif total_cost <= ((tier_1_threshold - free_hours) * tier_1_price) + \\\n                      ((tier_2_threshold - tier_1_threshold) * tier_2_price):\n        # If the cost is within the second tier\n        total_hours = tier_1_threshold + ((total_cost - \n                 ((tier_1_threshold - free_hours) * tier_1_price)) / tier_2_price)\n    else:\n        # If the cost is in the third tier\n        total_hours = tier_2_threshold + ((total_cost - \n                 ((tier_1_threshold - free_hours) * tier_1_price) - \n                 ((tier_2_threshold - tier_1_threshold) * tier_2_price)) / tier_3_price)\n    \n    return int(total_hours)\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_sum = sum(range(1, 63))\n    missing_number = total_sum - 1939\n    return missing_number\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # Number of marbles of least quantity that we can take before we are forced to take a new color.\n    # We take at most (one less than the total count of that color) marbles of the same color.\n    red = 4 - 1\n    green = 7 - 1\n    blue = 6 - 1\n    # We do not need to consider the orange marbles as we are looking for the worst-case scenario\n    # towards getting all four colors which involves taking as many as possible without getting all four colors.\n  \n    # The next marble we draw has to be the fourth color.\n    # Worst case for drawing marbles to ensure 4 different colors includes drawing all but one of the other colors.\n    marbles_drawn = red + green + blue + 1  # Plus one to ensure the fourth color.\n\n    return marbles_drawn\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(0, 999):\n        next_ticket = i + 1\n        if i + next_ticket == 777:\n            return next_ticket\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # Define a function to calculate the number of ways to reach a step\n    def ways_to_step(n):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        return ways_to_step(n - 1) + ways_to_step(n - 2) + ways_to_step(n - 3)\n    \n    # Calculate the number of ways to reach the 4th step\n    ways_to_fourth = ways_to_step(4)\n    \n    # Calculate the number of ways to reach the 10th step excluding the muddy 5th step\n    # Start from steps 1, 2, and 3 beyond the 4th step since we cannot step on the 5th\n    ways_to_tenth_excluding_fifth = ways_to_step(10 - 4 - 1) + ways_to_step(10 - 4 - 2) + ways_to_step(10 - 4 - 3)\n    \n    # Multiply the ways to reach the 4th step by the number of ways to reach the 10th\n    # step from the 6th, 7th, and 8th steps\n    total_ways = ways_to_fourth * ways_to_tenth_excluding_fifth\n\n    return total_ways\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    years = 5\n    \n    final_value = initial_value * (depreciation_rate ** years)\n    \n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    decimal = 5 / 16\n    return decimal\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_a_week = 7\n\n    total_weekly_earnings = average_daily_earnings * days_in_a_week\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # To maximize the largest number, we must minimize the others.\n    # We start with the smallest positive odd numbers: 1, 3, 5, 7 and keep the fifth variable for the largest number.\n    largest_num = 85 - (1 + 3 + 5 + 7)\n\n    return largest_num\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T, income = symbols('T income')\n    \n    tax_equation = Eq(T/100 * 30000 + (T+3)/100 * (income - 30000), (T+1)/100 * income)\n    solutions = solve((tax_equation, ), (income, T))\n    \n    # Since we expect a single tangible income value, filter for the positive solution \n    income_solution = [sol[income] for sol in solutions if sol[income] > 0]\n    \n    return income_solution[0]\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n\n    return closest\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship_still_water = 88\n    speed_current = 12\n    distance = 500\n\n    speed_downstream = speed_ship_still_water + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes = 2.5\n    seconds_per_minute = 60\n    n = minutes * seconds_per_minute\n    return n\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    for fifty_cent_coins in range(22):  # We use 22 because range is exclusive on the upper bound\n        twenty_cent_coins = 21 - fifty_cent_coins\n        total_value = fifty_cent_coins * 50 + twenty_cent_coins * 20\n        if total_value == 630:  # The total value is in cents\n            return fifty_cent_coins\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    # Let x be the distance that Alan walks per minute\n    # Then (x + 15) is the distance Phillip walks per minute\n    # Phillip arrives 3 minutes earlier than Alan, so Alan walks for 12 + 3 minutes\n    # The total distance (from A to B) covered by Phillip is the same as Alan's when Alan arrives\n    \n    # Distance traveled by Phillip is equal to the distance traveled by Alan when Alan arrives at B\n    # (x + 15) * 12 = x * (12 + 3)\n    # Solving for x we get:\n    # 12x + 180 = 15x\n    # 180 = 3x\n    # x = 60 meters per minute (Alan's speed)\n    \n    # Now we can find the distance between A and B\n    # Distance = speed * time\n    # Phillip's speed is 60 + 15 = 75 meters per minute\n    # Time taken by Phillip to reach B is 12 minutes\n    # Distance (A to B) = 75 * 12\n    distance_AB = 75 * 12\n\n    return distance_AB\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n\n    remainder = total_coins % children\n\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    total_girls = 8\n    total_boys = 12\n    choose_girls = 4\n    choose_boys = 3\n\n    ways_to_choose_girls = comb(total_girls, choose_girls)\n    ways_to_choose_boys = comb(total_boys, choose_boys)\n\n    ans = ways_to_choose_girls * ways_to_choose_boys\n    return ans\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    from math import sqrt, floor\n    \n    count = 0\n    num = 2\n    for i in range(5):\n        if floor(sqrt(num)) == sqrt(num):\n            count += 1\n        num = num * 10 + 5\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice_original, tom_original = symbols('alice_original tom_original')\n    alice_spent = 36\n    alice_after_spent = tom_original - 25.40\n    tom_has = 68.10\n\n    equation1 = Eq(alice_original - alice_spent, alice_after_spent)\n    equation2 = Eq(tom_original, tom_has)\n\n    solutions = solve((equation1, equation2), (alice_original, tom_original))\n\n    return solutions[alice_original]\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean_five_numbers = 28\n    mean_twelve_numbers = 11\n\n    total_five_numbers = mean_five_numbers * 5\n    total_twelve_numbers = mean_twelve_numbers * 12\n\n    total_numbers = total_five_numbers + total_twelve_numbers\n    total_count = 5 + 12\n\n    mean_all_numbers = total_numbers / total_count\n\n    return mean_all_numbers\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_amount = original_price * (discount_percentage / 100)\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance = 74\n    distance_between_benches = 7\n    # The number of gaps between benches is one less than the number of benches\n    number_of_benches = 9\n    number_of_gaps = number_of_benches - 1  \n    total_distance_between_benches = distance_between_benches * number_of_gaps\n    # The length of the bench is the total distance minus the distance covered by the gaps\n    length_of_bench = (total_distance - total_distance_between_benches) / number_of_benches\n    return length_of_bench\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of candies and students in classes A and B\n    candies, students_B = symbols('candies students_B')\n    students_A = 2 * students_B\n\n    # Equations based on the problem statement\n    equation1 = Eq(students_A * 4 + 20, candies)\n    equation2 = Eq(candies - students_B * 6, 16)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (candies, students_B))\n\n    # Returning the number of candies\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    # For each arm cut off after the 5 initial cuts, the total arms cut off increases by 1\n    # But the number of remaining arms stays the same (since a new one grows immediately)\n    # Therefore, for 21 total cuts, the first 5 cuts reduce the number of arms by 5.\n    # The remaining 16 cuts do not change the number of arms the bugbear has.\n    # Thus the original number of arms is the current arms plus the 5 initial cuts.\n    original_arms = 21 - 5\n\n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # Given: 10 different whole numbers add up to 2021.\n    # Also given: The 3rd greatest number is 246.\n    # After arranging the 10 numbers in descending order, let them be:\n    # a1, a2, a3, a4, a5, a6, a7, a8, a9, a10\n    # The 3rd greatest number is 246 means a3 = 246.\n    \n    # To minimize a4 (the 4th greatest number), the first two numbers (a1 and a2) must be as large as possible.\n    # The remaining numbers (a5 to a10) should be as small as possible, starting from 1 (smallest whole number) \n    # and increasing by 1 (as the numbers are distinct).\n    \n    # The 4th greatest number (a4) + a5 + a6 + a7 + a8 + a9 + a10 = 2021 - (a1 + a2 + a3)\n    # Let's find the minimum possible values of a5 to a10.\n    \n    # The minimum values of a5 to a10 will be the first 6 natural numbers because the problem states \"whole numbers,\" \n    # which includes zero. But, since \"different whole numbers\" must be used, we cannot include zero. \n    # Thus, we will start our count from 1.\n    numbers = list(range(1, 7))  # a5 to a10 (1, 2, 3, 4, 5, 6)\n    sum_of_min_a5_to_a10 = sum(numbers)\n    \n    # Now, we will subtract the already known values (a1+a2+a3+sum of a5 to a10) from the total sum 2021 to find a4.\n    a3 = 246  # 3rd greatest, given\n    sum_of_known = sum_of_min_a5_to_a10 + a3\n    remaining_sum = 2021 - sum_of_known\n    \n    # As we want to maximize a1 and a2, their minimum possible values are the next two whole numbers after 246\n    a1 = 247\n    a2 = 248\n    # The minimum value of the 4th greatest number (a4) is whatever remains after subtracting a1 and a2 from the remaining sum.\n    min_a4 = remaining_sum - (a1 + a2)\n    \n    return min_a4\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # Assuming the worst case scenario is where we pull out the same color every time,\n    # we want to guarantee that the next coin we pull out will be a different color.\n\n    same_color_coins = 6  # Number of coins of the same color\n    # We take out all 6 coins of one color (worst case), and then 1 more to guarantee a different color\n    min_coins = same_color_coins + 1\n\n    return min_coins\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # If the distance from 1st tree to the 5th tree is 20 cm,\n    # it means there are 4 intervals between these trees.\n    # So, each interval is 20 cm / 4 intervals = 5 cm per interval.\n\n    interval_distance = 20 / 4\n\n    # The distance from the 8th tree to the 14th tree is 6 intervals.\n    # So, we calculate the total distance for these 6 intervals.\n\n    total_distance = interval_distance * (14 - 8)\n\n    return total_distance\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    count = 0\n    for i in range(1, 25):\n        if i == 1:\n            count += 1  # 1 is not exclusively adjacent with any number\n        else:\n            is_co_prime = True\n            for j in range(2, i):\n                if i % j == 0 and (i + 1) % j == 0:\n                    is_co_prime = False\n                    break\n                if i % j == 0 and (i - 1) % j == 0:\n                    is_co_prime = False\n                    break\n            if is_co_prime:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_meters_per_minute = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n    distance = speed_meters_per_minute * time_minutes\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = 38 * 32 + 37 * 33 + 36 * 34\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey, father = symbols('grey father')\n\n    # When Grey was born, his father was 30 years old\n    # This year, father's age = 3 * Grey's age\n    # Grey's age this year = father's age - 30\n\n    equation1 = Eq(father, 3 * grey)\n    equation2 = Eq(grey, father - 30)\n\n    solutions = solve((equation1, equation2), (grey, father))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n\n    # Number of parts for Bud and Pip\n    parts_bud = 1\n    parts_pip = 5\n\n    # Labels for the parts\n    labels = ['Bud', 'Pip']\n\n    # Sizes for each part\n    sizes = [parts_bud, parts_pip]\n\n    # Colors for each part\n    colors = ['#ff9999','#66b3ff']\n\n    # Explode the 2nd slice (i.e. 'Pip')\n    explode = (0, 0.1)\n\n    # Draw the pie chart\n    plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n            shadow=True, startangle=90)\n    plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n    # Display the graph\n    plt.show()\n\n    # For the purpose of this task, the function doesn't need to return anything because\n    # the drawing of the graph is the end goal. However, if a return value is needed,\n    # we can return the proportions of the parts.\n    return {'Bud': parts_bud, 'Pip': parts_pip}\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    value = 10 * (numerator / denominator)\n    return value\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n    least_books_on_most_populated_layer = (total_books + layers - 1) // layers\n    return least_books_on_most_populated_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    common_difference = 4\n    last_term = 80\n    n = ((last_term - first_term) / common_difference) + 1  # The total number of rows\n\n    # Sum of an arithmetic sequence formula: n/2 * (first_term + last_term)\n    total_seats = n/2 * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 6, 9]\n    perm = permutations(digits)\n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    sum_of_numbers = 0.12 + 0.345 + 0.6789\n    return sum_of_numbers\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    return 3 * 37 * 9\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 3):  # Hundreds place can be 1 or 2 only\n        for tens in range(0, 3):\n            for ones in range(0, 3):\n                if len(set([hundreds, tens, ones])) == 3:  # Different digits in each place\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Our congruences are x ≡ 1 (mod 3), x ≡ 3 (mod 5), and x ≡ 5 (mod 7)\n    congruences = [(1, 3), (3, 5), (5, 7)]\n\n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    x, _ = solve_congruence(*congruences)\n    \n    # Since the number is between 100 and 200, find the smallest x in this range\n    while x < 100:\n        x += 3 * 5 * 7\n\n    return x if x < 200 else None\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    divisor = 12 + 1\n    remainder = 3\n    dividend = divisor * 12 + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')  # Hazel's age in three years\n    # Hazel's current age is (y-3)\n    # Jessica's current age is (y-3) - 3\n    # Next year, Hazel will be (y-3) + 1 and Jessica will be ((y-3) - 3) + 1\n\n    # Equation representing their total age next year\n    total_age_next_year = Eq((y-3) + 1 + ((y-3) - 3) + 1)\n\n    # Solve the equation for the total age next year\n    total_age_solution = solve(total_age_next_year, y)\n\n    return total_age_solution[0]\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the initial number of cows and g be the initial number of goats\n    c, g = symbols('c g')\n\n    # 65% of the total animals were cows initially\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # When 240 animals are added, the number of cows becomes c + 240,\n    # and the percentage of cows becomes 65% + 20% = 85% of the total\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # The number of goats doubled, hence it becomes g + 240 (since 240 animals were added in total)\n    equation3 = Eq(g * 2, g + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    # Return the initial number of goats\n    return solutions[g]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to centimeters\n    section1 = 30  # already in cm\n    section2 = 1.5 * 100  # convert meters to cm\n    section3 = 150 / 10  # convert mm to cm\n\n    # Sum the widths of all sections\n    total_width = section1 + section2 + section3\n\n    return total_width\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    uncle_future_age = 38\n    uncle_current_age = uncle_future_age - (uncle_future_age - melanie_age)\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    total_pence = pounds * 100  # Convert pounds to pence\n\n    percentage = (pence / total_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    still_facing = 50\n    for i in range(1, 51):\n        if i % 4 == 0 or i % 6 == 0:\n            still_facing -= 1\n    return still_facing\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('15:25', '%H:%M')\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    degree_of_monomial = 5\n    degree_of_x = 3\n    degree_of_y = 2   # 2n is the degree of y so degree_of_y represents '2' here.\n\n    # We know that the degree of the monomial is the sum of the degrees of x and y.\n    # So, degree_of_monomial = degree_of_x + degree_of_y * n\n    # Let's solve for n.\n    n = (degree_of_monomial - degree_of_x) / degree_of_y\n\n    return n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers into improper fractions\n    first_number = 2 + Fraction(3, 8)\n    second_number = 6 + Fraction(9, 12)\n    third_number = 1 + Fraction(14, 16)\n    \n    # Sum up the fractions\n    result = first_number + second_number + third_number\n    \n    # Convert to a mixed number (optional step, to match the format of the input)\n    ans = result.numerator // result.denominator + Fraction(result.numerator % result.denominator, result.denominator)\n    \n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    # Amy's age 5 years ago\n    amy_age_5_years_ago = amy_age_now - 5\n    # Sister's age 3 years later\n    sister_age_3_years_later = amy_age_5_years_ago\n    # Sister's age now\n    sister_age_now = sister_age_3_years_later - 3\n\n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # There are 13 different card numbers/letters\n    # To ensure we have two of the same number/letter, we use the Pigeonhole Principle\n    # Drawing one card from each of the 13 numbers/letters will have us draw 13 cards\n    # The next card we draw must be a duplicate of one of these\n\n    max_unique_cards = 13\n    ans = max_unique_cards + 1  # We need one more to ensure a duplicate\n\n    return ans\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    smallest_number = None\n    for i in range(100, 1000, 2):  # check only even numbers\n        if sum(map(int, str(i))) == 21:\n            smallest_number = i\n            break\n    return smallest_number\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum((i / j for i in range(1, 20) for j in range(i + 1, 21)))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part = 18  # 3/5 of the whole amount is given as 18p\n    fraction = 3/5  # The fraction of the whole amount that corresponds to the part\n    whole_amount = part / fraction  # Calculate the whole amount by dividing the part by the fraction\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    total_amount = 156\n    cactus_price = 2\n    sunflower_price = 7\n    # Let s be the number of sunflowers\n    # Then c = s + 6 is the number of cacti\n    # 2c + 7s = 156\n    # Replacing c with s+6\n    # 2(s+6) + 7s = 156\n    # 2s + 12 + 7s = 156\n    # 9s + 12 = 156\n    # 9s = 156 - 12\n    # s = (156 - 12) / 9\n    s = (total_amount - 12) / 9\n    # Now we find c\n    c = s + 6\n\n    return int(c)\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbol for the unknown price of a book\n    book_price = symbols('book_price')\n    \n    # The cost of the pencils is known\n    pencil_price = 0.40  # each pencil costs 40p, which is £0.40\n    \n    # Sarah's total cost\n    sarah_cost = 8 * book_price + 3 * pencil_price\n    # Rebecca's total cost\n    rebecca_cost = 3 * book_price + 8 * pencil_price\n\n    # Sarah paid £1.00 more than Rebecca\n    equation = Eq(sarah_cost - rebecca_cost, 1.00)\n    \n    # Solve the equation for the price of a book\n    solution = solve(equation, book_price)\n    \n    # The price of a book will be the only solution in the list\n    return solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares = sum([x**2 for x in range(2, 21, 2)])\n    odd_squares = sum([x**2 for x in range(1, 20, 2)])\n    ans = even_squares - odd_squares\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    jug_capacity = 2\n    number_of_jugs = 6\n\n    water_used = jug_capacity * number_of_jugs\n    water_left = total_water - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of Liverpool and Manchester United fans at first\n    liverpool_initial, manunited_initial = symbols('liverpool_initial manunited_initial')\n    \n    # Original Difference\n    equation1 = Eq(liverpool_initial, manunited_initial + 1000)\n    \n    # Fans entering after 30 minutes\n    equation2 = Eq(manunited_initial * 3, liverpool_initial + 472 - 4836)\n    \n    # Solve the system of equations to find the initial number of Liverpool fans\n    solutions = solve((equation1, equation2), (liverpool_initial, manunited_initial))\n    \n    return solutions[liverpool_initial]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let x be the cost of one book in pence.\n    x = Symbol('x')\n\n    # Sarah's cost (in pence): 8x (for books) + 3*40 (for pencils)\n    # Rebecca's cost (in pence): 3x (for books) + 8*40 (for pencils)\n    # Sarah paid 100p (1 pound) more than Rebecca.\n    equation = Eq(8 * x + 3 * 40, 3 * x + 8 * 40 + 100)\n\n    # Solve for x.\n    book_cost = solve(equation, x)[0]\n\n    return book_cost\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_additional_points = 18\n    jack_points = andrew_points + jack_additional_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ways_to_choose = comb(total_players, players_needed)\n    return ways_to_choose\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_after_mike = 3 + 2  # Andy had $3 left after giving $2 to Mike\n\n    # She gave half of the remaining to Nini, so before that she had twice the amount\n    before_nini = remaining_after_mike * 2\n\n    # Similarly, before giving half to Bob, she had twice the amount she had before giving to Nini\n    before_bob = before_nini * 2\n\n    # Lastly, before giving half to her mother, she had twice the amount she had before giving to Bob\n    original_money = before_bob * 2\n\n    return original_money\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 7*x + 3*(x + 5) - 45\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of peaches Eddie gets\n    # Let a be the number of students in Class A\n    # Let b be the number of students in Class B\n    x, a, b = symbols('x a b')\n\n    # Equation for Class A\n    # x = 5a + 10\n    equation1 = Eq(x, 5 * a + 10)\n\n    # Equation for Class B\n    # x + 2 = 8b\n    equation2 = Eq(x + 2, 8 * b)\n\n    # Relation between Class A and Class B students\n    # a = b + 3\n    equation3 = Eq(a, b + 3)\n\n    solutions = solve((equation1, equation2, equation3), (x, a, b))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    digit_count, num_digits, i = 0, 0, 0\n    while digit_count < 2023:\n        i += 1\n        num_digits = len(str(i))\n        digit_count += num_digits\n    remaining = digit_count - 2023\n    return int(str(i)[num_digits - remaining - 1])\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    total_sum = 450\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    t_shirts, caps = symbols('t_shirts caps')  # Number of T-shirts and caps\n\n    # Create equations based on the problem statement\n    ratio_eq = Eq(t_shirts / caps, 8 / 5)\n    sales_eq = Eq((1 / 4) * t_shirts * 3 + (1 / 5) * caps * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, sales_eq), (t_shirts, caps))\n\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 98\n    current_year = 01\n    age_on_birthday = 11\n\n    # Calculate the age on 31/12/01\n    age_at_end_of_01 = age_on_birthday + (current_year - birth_year)\n\n    return age_at_end_of_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    all_combinations = sorted([''.join(p) for p in permutations('4625')])\n    for num_str in all_combinations:\n        num = int(num_str)\n        if num % 2 != 0:\n            return num\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    max_per_boat = 6\n\n    trips = (total_students + max_per_boat - 1) // max_per_boat\n\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    nth_term = 36\n\n    ord_number = (nth_term - first_term) / common_difference + 1\n    \n    return int(ord_number)\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let e be the number of game cards Eric has\n    # Let j be the number of game cards Joe has\n    e, j = symbols('e j')\n\n    # Given that Joe has 7 times as many game cards as Eric\n    equation1 = Eq(j, 7 * e)\n\n    # After Joe gives some cards to Eric, they both have 168 cards\n    equation2 = Eq(e + (j - 168), 168)\n    equation3 = Eq(j - (j - 168), 168)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (e, j))\n\n    # Calculate the number of cards Joe must give to Eric\n    cards_to_give = solutions[j] - 168\n\n    return cards_to_give\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for tens_digit in [2, 3, 5, 7]:\n        for ones_digit in [2, 3, 5, 7]:\n            num = tens_digit * 10 + ones_digit\n            if isprime(num):\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    ran_away = 5\n    new_catch = 9\n\n    ans = (initial_catch - ran_away) + new_catch\n\n    return ans\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 80  # minutes (1 hour and 20 minutes)\n\n    num_pictures = total_time_available / time_for_one_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    for n in range(1, 100):  # Assuming the maximum number of players is less than 100\n        if (19 - 6) % n == n // 2:\n            return n\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    # Since we are splitting into 2 groups and groups must have different numbers\n    # One group will have 1 apple, the other 9; one will have 2, the other 8, and so on until one has 5, the other 5\n    # But when we reach the point where one group has 5, the other has 5, they are not different anymore\n    # Hence we only count up to 4 in one group, 6 in the other\n    count = 0\n    for x1 in range(1, 6):\n        x2 = 10 - x1\n        if x1 != x2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n    # There are 5 students, and we need to find the permutations of these 5\n    ans = factorial(5)\n    return ans\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38  # Total number of pears Anne and Charlie have\n\n    # We form a system of equations with A representing Anne's pears\n    # and C representing Charlie's pears as follows:\n    # A - 6 = C + 6 (After Anne gives Charlie 6 pears, they have equal amounts)\n    # A + C = 38 (The total amount of pears they have together)\n    # From these equations we can derive:\n    # A - C = 12 (By subtracting the second equation from twice the first)\n    \n    # Since the total is 38, we can solve for A:\n    # A + (A - 12) = 38\n    # 2A - 12 = 38\n    # 2A = 38 + 12\n    # 2A = 50\n    # A = 25\n    Anne_pears = (total_pears + 12) / 2\n\n    return Anne_pears\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    difference = amy_swims - joanne_swims\n    return difference\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b, c, d = symbols('a b c d')\n    \n    equation = Eq(1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a, 1370)\n    \n    solutions = solve(equation, (a, b, c, d))\n    \n    return 1000*solutions[a] + 100*solutions[b] + 10*solutions[c] + solutions[d]\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    # Sachin's rate of work\n    sachin_rate = 1 / 3\n    # Peter's rate of work\n    peter_rate = 1 / 6\n    # Combined rate of work\n    combined_rate = sachin_rate + peter_rate\n    # Time to clean the flat together\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, joseph = symbols('isaac joseph')\n\n    equation1 = Eq(isaac, 5 * joseph)\n    equation2 = Eq(joseph + 154, (9/10) * isaac)\n\n    solutions = solve((equation1, equation2), (isaac, joseph))\n\n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n\n    # Calculate the factorial of 29\n    fact_29 = factorial(29)\n    # Convert the factorial into string to count the consecutive zeroes at the end\n    fact_29_str = str(fact_29)\n    \n    # Count the zeros from the right\n    count = 0\n    for digit in reversed(fact_29_str):\n        if digit == '0':\n            count += 1\n        else:\n            break\n\n    return count\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    # Convert the octal number to a base-10 integer\n    N_octal = '12345654321'\n    N_decimal = int(N_octal, 8)\n\n    # Calculate the remainders\n    remainder_7 = N_decimal % 7\n    remainder_9 = N_decimal % 9\n\n    # Add the remainders\n    result = remainder_7 + remainder_9\n\n    return result\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let the length of the path be x meters.\n    # According to the problem, when Linda met Ted, she had run 1200m.\n    # Hence, Ted had run (x - 1200) meters.\n    # The speed ratio of Linda to Ted is 3:4, which implies that the distance ratio will also be 3:4.\n    # So, we can set up the following proportion: 1200 / (x - 1200) = 3 / 4.\n    # Solving for x:\n    x = symbols('x')\n    equation = Eq(1200 / (x - 1200), 3 / 4)\n    length_of_path = solve(equation, x)\n\n    return length_of_path[0]\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(10):\n        if (2018 * 10 + A) % 9 == 0:\n            return (2018 * 10 + A) % 8\n    \nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    ryan_front = 5\n    elvis_behind = 7\n    between_ryan_and_elvis = 1\n\n    total_squirrels = ryan_front + between_ryan_and_elvis + 1 + elvis_behind\n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    # This problem is an example of a derangement, also known as a \"hat-check problem\".\n    # The number of derangements of n objects is given by the formula:\n    # !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    \n    # As we're looking at six papers, we set n to 6.\n    n = 6\n    factorial = 1\n    sign = 1\n    derangement = 0\n    \n    for i in range(n+1):\n        if i > 0:\n            factorial *= i\n        derangement += sign / factorial\n        sign *= -1  # Alternate the signs\n\n    # The solution for the derangement of n items is the nearest integer to n! * derangement\n    ans = int(round(factorial * derangement))\n    \n    return ans\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    work_done = workers * days\n\n    # work_done is the total worker-days to build the wall\n\n    # Let 'd' be the number of days it will take for 1 worker to build the wall\n    # Therefore, 1 worker * d days = work_done\n\n    d = work_done / 1  # since we want to find number of days 1 worker takes\n\n    return d\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n    \n    interest = initial_amount * interest_rate\n    \n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25\n    total_weight = 64\n\n    result = (percentage / 100) * total_weight\n\n    return result\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of pupils in School P at first\n    # let y be the number of pupils in School Q at first\n    x, y = symbols('x y')\n\n    # According to the problem, the initial ratio is 2:3\n    equation1 = Eq(x/y, 2/3)\n\n    # After admitting 240 pupils each, the ratio changed to 3:4\n    equation2 = Eq((x + 240)/(y + 240), 3/4)\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    return 45 * 0.30\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    total_sum = sum(number for number in range(1, 21, 2))\n    return total_sum\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_age = symbols('jack_age')\n    equation = Eq(jack_age - 5, (jack_age + 8) / 2)\n\n    solution = solve(equation, jack_age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    # Nora spent 70% of her money on a bag\n    percentage_spent_on_bag = 70\n\n    # Remaining money after buying the bag\n    remaining_money = 100 - percentage_spent_on_bag\n\n    # Nora spent 3/8 of the remaining money on a purse\n    fraction_spent_on_purse = 3 / 8\n\n    # Calculating the percentage of original money spent on purse\n    percentage_spent_on_purse = (remaining_money * fraction_spent_on_purse)\n\n    return percentage_spent_on_purse\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_letters = len('EDUCATION')\n    vowels = 'AUIOE'\n    consonants = 'DCTN'\n    \n    # total permutations of the word EDUCATION\n    total_permutations = factorial(total_letters)\n    \n    # total permutations of vowels (AUIOE)\n    vowel_permutations = factorial(len(vowels))\n    \n    # since vowels are always together, treat them as one single unit\n    # add one to the total consonants since we treat vowels as one unit\n    units = len(consonants) + 1\n    \n    # permutations of entire string considering vowels as one unit\n    all_vowels_together = factorial(units) * vowel_permutations\n    \n    # the result is the difference\n    return total_permutations - all_vowels_together\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    total_candies = 5 * 12\n    new_total_students = 5 + 1\n    candies_per_student_after = total_candies // new_total_students\n    return candies_per_student_after\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    angle_BAC = 50\n    angle_ABC = angle_ACB = (180 - angle_BAC) / 2\n    angle_BPC = 180 - (angle_ABC / 2 + angle_ACB / 2)\n\n    return angle_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    total_sweets = 11                  # Initial number of sweets bought\n    wrappers = total_sweets            # Initial number of wrappers from those sweets\n\n    while wrappers >= 3:               # As long as we have at least 3 wrappers...\n        new_sweets = wrappers // 3     # We can exchange every 3 wrappers for 1 sweet\n        total_sweets += new_sweets     # Add the new sweets to total\n        wrappers = wrappers % 3 + new_sweets  # Update the number of wrappers\n\n    return total_sweets\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    two_tails, three_tails, six_tails, eight_tails = symbols('two_tails three_tails six_tails eight_tails')\n    heads = two_tails + three_tails + six_tails + 2 * eight_tails\n    tails = 2 * two_tails + 3 * three_tails + 6 * six_tails + 8 * eight_tails\n    \n    # Equations based on the problem statement\n    equation1 = Eq(two_tails, 5 + 2 * eight_tails)\n    equation2 = Eq(three_tails, 2 + six_tails / 2)\n    equation3 = Eq(tails, 4 * heads - 2)\n    equation4 = Eq(heads - tails, 241)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (two_tails, three_tails, six_tails, eight_tails))\n    \n    return solutions[three_tails]\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    arrival_time = datetime.strptime(\"11:40\", \"%H:%M\")\n    duration = timedelta(hours=4, minutes=50)\n    leaving_time = arrival_time + duration\n\n    return leaving_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for number in range(10, 100):\n        if number % 5 == 4 and number % 7 == 4:\n            return number\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    cost_price = 10  # cost price in pounds\n\n    sweets_weight_kg = 5\n    sweets_weight_g = sweets_weight_kg * 1000  # convert kg to g\n\n    bag_weight = 250  # weight of sweets per bag in grams\n    number_of_bags = sweets_weight_g / bag_weight\n\n    sell_price_per_bag = 0.65  # sell price per bag in pounds\n\n    total_sell_price = number_of_bags * sell_price_per_bag  # total income from selling all bags\n\n    profit = total_sell_price - cost_price  # profit calculation\n    percentage_profit = (profit / cost_price) * 100  # percentage profit calculation\n\n    return percentage_profit\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Number of roads between Ayton and Beeton is 4\n    # Number of roads between Beeton and Ceeton is 5\n    # Number of roads between Ceeton and Deeton is 6\n    # Number of roads between Ayton and Deeton directly is 3\n\n    # According to the multiplication rule, the total number \n    # of routes from Ayton to Deeton via Beeton and Ceeton is:\n    # routes from Ayton to Beeton * routes from Beeton to Ceeton * routes from Ceeton to Deeton\n    routes_through_beeton_ceeton = 4 * 5 * 6\n\n    # Adding the direct routes from Ayton to Deeton\n    total_routes = routes_through_beeton_ceeton + 3\n\n    return total_routes\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    # Assign values to variables representing the fractions\n    numerator = 15\n    denominator = 20\n    constant_numerator = 3\n\n    # Find the denominator that makes the fractions equivalent\n    equivalent_denominator = (denominator * constant_numerator) / numerator\n\n    return equivalent_denominator\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    # Given data\n    tenth_number = 23\n    fifteenth_number = 38\n    # Calculate the common difference\n    common_difference = (fifteenth_number - tenth_number) / (15 - 10)\n    # Knowing the 10th term, we can now find the 12th term\n    twelfth_number = tenth_number + 2 * common_difference\n    \n    return int(twelfth_number)\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n    for num in range(1, 2017):\n        multiples = 0\n        if num % 2 == 0:\n            multiples += 1\n        if num % 3 == 0:\n            multiples += 1\n        if num % 4 == 0:\n            multiples += 1\n        if multiples == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally = 3.75\n    joe = symbols('joe')\n\n    equation = Eq(sally + joe - 2 * 2.50, 5)\n\n    joe_initial = solve(equation, joe)\n\n    return joe_initial[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_period_days = 3\n    last_period_days = 5\n    first_period_avg = 135\n    last_period_avg = 151\n    \n    total_first_period = first_period_days * first_period_avg\n    total_last_period = last_period_days * last_period_avg\n    \n    total_days = first_period_days + last_period_days\n    total_trees = total_first_period + total_last_period\n    \n    avg_trees = total_trees / total_days\n\n    return avg_trees\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the magic number\n    x = symbols('x')\n    # Create the equation where (149 + x) is 5 times (21 + x)\n    equation = Eq(149 + x, 5 * (21 + x))\n\n    # Solve the equation for x\n    magic_number = solve(equation, x)\n\n    return magic_number[0]\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 7:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(202 + magic_number, 6 * (22 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    boy_diff = 32\n    total_students = 0\n    \n    # Start with a square of side length 1 (for the innermost layer) and increase\n    # by 2 each time to account for the next layer of boys and girls.\n    side_length = 1\n    while True:\n        if side_length % 2 == 0:\n            girls = side_length * side_length\n            boys = (side_length + 2) * (side_length + 2)\n        else:\n            boys = side_length * side_length\n            girls = (side_length - 2) * (side_length - 2) if side_length > 1 else 0\n        \n        if boys - girls == boy_diff:\n            total_students = boys + girls\n            break\n        \n        side_length += 2\n    \n    return total_students\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    while True:\n        # Check if all the numbers n, n+2, n+4, n+106, n+308 are prime\n        if (isprime(n) and isprime(n + 2) and isprime(n + 4) and\n                isprime(n + 106) and isprime(n + 308)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters // 20\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    equation1 = Eq(mangoes - strawberries, 448)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salad_options = 15\n    soup_options = 20\n    vegetable_options = 12\n    sandwich_options = 6\n\n    # Combining two different types of dishes\n    salad_soup = comb(salad_options, 1) * comb(soup_options, 1)\n    salad_vegetable = comb(salad_options, 1) * comb(vegetable_options, 1)\n    salad_sandwich = comb(salad_options, 1) * comb(sandwich_options, 1)\n    soup_vegetable = comb(soup_options, 1) * comb(vegetable_options, 1)\n    soup_sandwich = comb(soup_options, 1) * comb(sandwich_options, 1)\n    vegetable_sandwich = comb(vegetable_options, 1) * comb(sandwich_options, 1)\n\n    # Total combinations\n    total_combinations = (\n        salad_soup +\n        salad_vegetable +\n        salad_sandwich +\n        soup_vegetable +\n        soup_sandwich +\n        vegetable_sandwich\n    )\n\n    return total_combinations\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    # Let x = total number of items\n    # Equation: (2/3)x - (1/9)x = 12\n    equation = Eq((2/3) * total_items - (1/9) * total_items, 12)\n    solutions = solve(equation, total_items)\n    \n    total_items_value = solutions[0]\n    apples = (2/3) * total_items_value\n    bananas = (1/9) * total_items_value\n    lemons = total_items_value - apples - bananas\n\n    return int(lemons)\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, solve\n\n    max_money, anthony_money = symbols('max_money anthony_money')\n\n    equation1 = (max_money - 12) / anthony_money - 2 / 5\n    equation2 = max_money / (anthony_money - 12) - 8 / 13\n\n    solutions = solve((equation1, equation2), (max_money, anthony_money))\n\n    return solutions[max_money]\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    # Function to calculate combinations\n    def comb(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n    \n    # Total pens\n    pens = 20\n    # Total kids\n    kids = 6\n    \n    # Distribute one pen to each kid first to ensure everyone gets at least one\n    # So we have pens - kids pens remaining to distribute\n    remaining_pens = pens - kids\n    \n    # Using the stars and bars method (n+k-1)C(k-1), where\n    # n is the number of remaining items (pens) to distribute,\n    # and k is the number of kids.\n    ans = comb(remaining_pens + kids - 1, kids - 1)\n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # Unit digit pattern for powers of 4: 4, 6, 4, 6, ...\n    # Since the pattern repeats every 2, we only need to look at the exponent modulo 2\n    exponent_mod_2 = 2022 % 2\n\n    # If the result is 0, the unit digit is 6 (even power), otherwise, it's 4 (odd power)\n    unit_digit = 6 if exponent_mod_2 == 0 else 4\n\n    return unit_digit\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # To minimize the number of marbles in the largest pile,\n    # we should first distribute the marbles in the smallest piles.\n    # Let's start with 1 marble in the first pile, 2 in the second, and 3 in the third.\n    # The rest will go into the fourth pile, which would be the largest.\n    \n    # Calculate marbles in fourth pile\n    pile_1 = 1\n    pile_2 = 2\n    pile_3 = 3\n    remaining_marbles = 16 - (pile_1 + pile_2 + pile_3)  # subtract the sum of first three piles from total\n    pile_4 = remaining_marbles  # this is the number of marbles in the biggest pile\n    \n    return pile_4\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    num_days = ((last_day_pages - first_day_pages) // difference) + 1\n    total_pages = (num_days / 2) * (first_day_pages + last_day_pages)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_five_digit_number = 99999\n    smallest_six_digit_number = 100000\n\n    difference = smallest_six_digit_number - largest_five_digit_number\n\n    return difference\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    # Three-digit odd numbers have the form ABC, where C must be odd.\n    odd_digits = [1, 3, 5] # Possible digits for C\n    even_digits = [2, 4, 6] # Possible digits for A if C is odd\n    remaining_digits = [1, 2, 3, 4, 5, 6]\n\n    count = 0\n    for c in odd_digits: # Choose C (1 choice for odd position)\n        for a in even_digits: # Choose A (1 choice)\n            if a != c:\n                for b in remaining_digits: # Choose B (2 choices)\n                    if b != a and b != c:\n                        count += 1\n\n    return count\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let's denote the total number of stickers as 's', and the fraction of blue stickers given away as 'x'.\n    s, x = symbols('s x')\n\n    # If Liz had an equal number of red and blue stickers, she had s/2 red and s/2 blue stickers.\n    # She gave away 2/3 of her red stickers, so she gave away (2/3)*(s/2) = s/3 red stickers.\n    # She was left with s/4 of her stickers, which means she had (s - s/4) stickers left.\n    # The remaining stickers consist of the blue stickers, minus the blue stickers given away,\n    # and the remaining red stickers, which were 1/3 of the original since 2/3 were given away:\n    # (s/2)*(1-x) + (s/2)*(1/3) = s - s/4\n\n    # We create an equation based on the information provided:\n    equation = Eq((s/2)*(1-x) + (s/2)*(1/3), s - s/4)\n\n    # Solve the equation for 'x' to find the fraction of blue stickers Liz gave away.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n    \n    total_students = swim_only + basketball_only + both + neither\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    terms = [3, 7, 11, 15, 19]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Conversion rates to millimetres\n    conversion_factors = {\n        'millimetres': 1,\n        'centimetres': 10,\n        'metres': 1000,\n        'kilometres': 1000000\n    }\n\n    # Quantities in their original units\n    quantities = [\n        (10, 'millimetres'),\n        (100, 'centimetres'),\n        (10, 'metres'),\n        (2, 'kilometres'),\n        (2800, 'centimetres'),\n        (2500, 'metres'),\n        (100, 'millimetres'),\n        (100, 'metres')\n    ]\n\n    # Convert all quantities to millimetres\n    converted_quantities = [\n        (quantity * conversion_factors[unit], unit)\n        for quantity, unit in quantities\n    ]\n\n    # Find the smallest length\n    smallest_length = min(converted_quantities, key=lambda x: x[0])\n\n    return smallest_length[0]  # return only the length in millimetres\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    current_steps = 1991\n    while True:\n        current_steps += 1\n        if str(current_steps) == str(current_steps)[::-1]:\n            return current_steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    # If he gives each pupil 4 bookmarks, he has 8 left\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    \n    # If he gives each pupil 6 bookmarks, he is short of 10 bookmarks\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    # We only need the number of bookmarks\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    ans = 608 * 56\n    return ans\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    # Let's denote the number of cows as 'c' and the number of ducks as 'd'.\n    # We know that cows have 4 legs and ducks have 2 legs.\n    # Therefore, we have the following two equations:\n    # c + d = 25 (total number of animals).\n    # 4c + 2d = 68 (total number of legs).\n    # We can solve these equations to find the number of ducks.\n\n    # number of cows\n    c = (68 - 2 * 25) / 2\n    # number of ducks\n    d = 25 - c\n    return int(d)\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    total_children = 11 + 5\n    total_height = 122.5 * total_children\n    girl_height_more = 3.2\n\n    # Average height of girls is boys average height + 3.2 cm\n    eq1 = Eq(girls, boys + girl_height_more)\n\n    # Total height equals sum of boys' and girls' height\n    eq2 = Eq(11 * girls + 5 * boys, total_height)\n\n    # Solve the simultaneous equations\n    solutions = solve((eq1, eq2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Using the inductive approach for plane division by triangles\n    # Initial case: 0 triangle divides the plane into 1 part\n    # Each new triangle can intersect the existing triangles creating new regions\n    parts = [1]  # base case: no triangles means the entire plane is one part\n    for n in range(1, 6):  # we are interested in 5 triangles\n        parts.append(parts[-1] + n)\n    return parts[-1]\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 70 - girls  # Since the total students is 70\n\n    # Eq1: Total average score equation -> (Girls average * Number of girls) + (Boys average * Number of boys) = Total average * Total students\n    total_score_eq = Eq(70 * girls + 63 * boys, 66 * 70)\n\n    # Solve the equation\n    num_girls = solve(total_score_eq, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # The sum of an arithmetic sequence is given by the formula:\n    # Sum = n/2 * (first_term + last_term)\n    # where n is the number of terms\n    n = 9\n    sum_of_sequence = 1503\n    \n    # Derive the middle term (mt) of the sequence using the formula for the sum of the sequence\n    # Sum = n * mt because the sequence is symmetric around the middle term\n    mt = sum_of_sequence // n\n\n    # Since the step (common difference) is 2 for odd numbers, we calculate the first term\n    first_term = mt - 4 * 2  # Subtract (n-1)/2 steps to get the first term\n\n    return first_term\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    n_32 = 157\n    n_108 = 537\n\n    term_diff = n_108 - n_32\n    position_diff = 108 - 32\n\n    common_difference = term_diff / position_diff\n\n    first_term = n_32 - (common_difference * (32 - 1))\n    \n    return int(first_term)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    # Let's start from the end of the problem and reverse engineer the number of candies Kate had before eating.\n    # We know Kate had 42 candies left after eating 1/4 of them. \n    # This means she had 42 / (1 - 1/4) candies before eating\n    kate_before_eating = 42 / (3/4)\n    # Now, we need to find out how many candies Jane had before giving to Kate\n    # Jane ate 1/3 of the candies plus 4 candies and then she gave the rest to Kate\n    # If x is the number Jane had before eating, then she gave Kate (x - 1/3 * x - 4) candies\n    # We know this amount is equal to the number of candies Kate had before eating\n    jane_before_giving = kate_before_eating + (1/3) * kate_before_eating + 4\n    # Finally, let's find out how many candies Donna had at first\n    # Donna kept half of her candies plus 3 candies and gave the rest to Jane\n    # If y is the number Donna had at first, then she gave Jane (y - 1/2 * y - 3) candies\n    # We know this amount is equal to the number Jane had before giving to Kate\n    donna_initial_candies = (jane_before_giving + (1/2) * jane_before_giving + 3) * 2\n\n    return int(donna_initial_candies)\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # A can pass the ball to any of the other 3 individuals\n    first_pass_options = 3 \n\n    # After the first pass, the receiver can pass to any of the 2 remaining individuals\n    second_pass_options = 2 \n\n    # After the second pass, the receiver has to pass it back to A\n    # so there's only 1 option for the third pass\n    third_pass_options = 1 \n\n    # The total number of different methods is the product of the options for each pass\n    count = first_pass_options * second_pass_options * third_pass_options\n\n    return count\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    total_days = 5\n\n    total_cost = cost_per_day * total_days\n\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let Anthea's initial number of storybooks be 'a'.\n    # According to the question, after giving away 4 storybooks,\n    # Jason will have (30 - 4) storybooks, and Anthea will have (a + 4) storybooks.\n    # At this point, Jason and Anthea will have the same number of storybooks.\n    \n    # Setting up the equation: 30 - 4 = a + 4\n    jason_final = 30 - 4\n    anthea_final = jason_final  # Equal number of storybooks after exchange\n    \n    # Now we can find Anthea's initial number of storybooks by subtracting 4.\n    anthea_initial = anthea_final - 4\n    \n    # The difference between Jason and Anthea's initial number of storybooks is:\n    difference = 30 - anthea_initial\n    \n    return difference\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    ans = 342 + 469\n    return ans\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    result = (36 * 21) / (6 * 7)\n    return result\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        P, Q, R = perm\n        if (10*Q + P) == (R*3 + 1):\n            return 10*Q + P\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    from math import lcm\n    return lcm(4, 10)\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_s = 2\n    time_minutes = 12\n    time_seconds = time_minutes * 60\n    distance = speed_m_per_s * time_seconds\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor_1 = 4\n    common_factor_2 = 101\n    \n    part1 = (2020 // common_factor_1) * (68 // common_factor_2)\n    part2 = (505 // common_factor_2) * 128\n    \n    ans = (common_factor_1 * common_factor_2) * (part1 + part2)\n    \n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n    \n    concentration = (total_sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_money = 10\n    newspaper_cost = 2.20\n    change_received = 4.83\n\n    tissue_cost = total_money - (newspaper_cost + change_received)\n\n    return tissue_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys, girls)\n    equation2 = Eq((2/5) * boys, girls - 42 + 12)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys] * 2  # Total students = boys + girls at first\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Converting minutes to hours for both late and early times\n    late_time = 12 / 60\n    early_time = -4 / 60\n\n    # Let the distance be d\n    # Time = Distance/Speed\n    # Therefore, time taken at 3 km/h is d/3 and at 5 km/h is d/5\n\n    # We can derive two equations based on the given problem:\n    # d/3 = correct_time + late_time\n    # d/5 = correct_time - early_time\n\n    # Since d/3 - d/5 = late_time + early_time, we can set up this equation\n    # (5d - 3d) / 15 = late_time + early_time\n    # 2d / 15 = (12/60) + (-4/60)\n    # 2d / 15 = 8/60\n    # 2d = 15 * 8/60\n    # d = (15 * 8) / (60 * 2)\n    # d = 1 km\n\n    d = (15 * 8) / (60 * 2)  # This is the distance from home to office in km\n    return d\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from itertools import permutations\n\ndef solution():\n    digits = '123'\n    all_permutations = []\n    for i in range(1, len(digits) + 1):\n        all_permutations += list(permutations(digits, i))\n    \n    ans = len(all_permutations)\n    return ans\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    tomatoes = 27\n    cucumbers = 3 + 3 * tomatoes\n    \n    return cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces, they have the same number.\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If Alice gives Rachel 10 pieces, Rachel will have 4 more than 3 times Alice's pieces.\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solve the system of equations for rachel and alice.\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Sum they had in total originally.\n    total = solutions[rachel] + solutions[alice]\n\n    return total\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    # Let the efficiency of A be 2 units/day and B be 1 unit/day\n    # Therefore, A can finish the job in x days and B can finish it in x+12 days\n    # That means A does 1/x of the job per day and B does 1/(x+12) of the job per day\n    # Working together, they can do 1/x + 1/(x+12) of the job per day\n    \n    # Let's find the number of days A would take to finish the job alone\n    # A is twice as efficient as B, which means if B takes b days, A takes b/2 days\n    # We also know A takes 12 days less than B, so b/2 = b - 12\n    # This gives us b = 24 days, and therefore A takes b/2 = 12 days\n    \n    # Now we know A takes 12 days, we can calculate their combined work in terms of job/day\n    a_days = 12\n    b_days = a_days + 12\n    \n    # Combined work rate is 1/12 + 1/24 = 2/24 + 1/24 = 3/24 = 1/8\n    combined_work_rate = 1/a_days + 1/b_days\n    \n    # If working together at a combined rate of 1/8 job/day, they can finish the job in\n    # job/(job/day) = 1 / (1/8) = 8 days\n    days_together = 1 / combined_work_rate\n    \n    return days_together\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of boys and girls.\n    b, g = symbols('b g')\n\n    # Original number of boys to the number of girls was 3:2.\n    equation1 = Eq(b/g, 3/2)\n\n    # After 12 boys and 12 girls joined, the ratio became 19:14.\n    equation2 = Eq((b + 12) / (g + 12), 19/14)\n\n    # Solve the equations for b and g.\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Calculate the total number of children in the afternoon.\n    total_children = solutions[b] + solutions[g] + 12 + 12\n\n    return total_children\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost = 12 * cost_per_case\n    return total_cost\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    temp_last_night = -8\n    temp_today = 13\n    temp_increase = temp_today - temp_last_night\n    return temp_increase\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # Four different colored socks in a row\n    ways_four_socks = permutations(4, 4)\n\n    # Two different colored pairs of socks in a row\n    # Since the socks in pairs are identical, we divide by the permutations of each pair (2!)\n    ways_two_pairs = permutations(4, 4) // (factorial(2) ** 2)\n\n    return ways_four_socks, ways_two_pairs\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    card_A = 40\n    card_B = card_A / 2\n    card_C = card_B / 2\n    total_value = card_A + card_B + card_C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    # The formula for the period of a simple pendulum: T = 2 * pi * sqrt(L/g)\n    # where T is the period, L is the length of the pendulum, and g is the acceleration due to gravity.\n\n    # Given that the period T1 on Earth is 1 s and g1 is Earth's gravity\n    # T1 = 2 * pi * sqrt(L/g1)\n    \n    from math import pi, sqrt\n\n    # We assume the length L of the pendulum is the same on the Moon and on Earth\n    # Let's calculate the constant portion 2 * pi * sqrt(L) since it's the same for both Earth and the Moon\n    g1 = 9.81  # Approximate value of Earth's gravity in m/s^2\n    T1 = 1  # Period on Earth in seconds\n    L = (T1 / (2 * pi))**2 * g1  # Rearrange the formula to solve for L\n\n    # Now, given g2 on the Moon is one-sixth of Earth's gravity\n    g2 = g1 / 6\n    # We calculate the period T2 on the Moon using the same L\n    T2 = 2 * pi * sqrt(L / g2)\n\n    return T2\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_iron_bar1 = 23\n    length_iron_bar2 = 37\n    length_welded_part = 3\n\n    full_length = length_iron_bar1 + length_iron_bar2 - length_welded_part\n\n    return full_length\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    # Let x be the number of correct answers by William\n    # Then Justin has x + 4 correct answers (because Justin gets 24 more points, \n    # which is 4 times the difference in points per question)\n    for x in range(11):  # We check all possible numbers of correct answers\n        justin_points = 6 * (x + 4) - 2 * (10 - (x + 4))\n        william_points = 6 * x - 2 * (10 - x)\n        if (justin_points + william_points) == 96 and (justin_points - william_points) == 24:\n            return x\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime(2023, 3, 1)\n    end_date = datetime(2023, 4, 15)\n\n    return (end_date - start_date).days + 1\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Declare symbol A\n    A = symbols('A')\n\n    # Define the equations based on the vertical form of the number puzzle\n    #   A\n    # + A\n    # ---\n    #  14\n    equation = Eq(2 * A, 14)\n\n    # Solve the equation\n    ans = solve(equation, A)[0]\n\n    return ans\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's daily work rate\n    A_rate = 1 / 15\n    # B's daily work rate\n    B_rate = 1 / 10\n    \n    # Combined work done in 3 days\n    work_done = 3 * (A_rate + B_rate)\n    \n    # Remaining work to be done\n    remaining_work = 1 - work_done\n    \n    # Time for B to finish the remaining work alone\n    time_for_B = remaining_work / B_rate\n    \n    return time_for_B\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    # Assume the wall is n x n tiles where n is odd\n    # Then the tiles are placed:\n    # Red, Green, Red, Green, ..., Red (center)\n    # The number of red layers will be one more than the number of green layers\n    # Let's find out the size of the wall first, which is the square root of the total number of tiles\n    wall_size = int(400**0.5)\n    \n    # Now calculate the number of layers\n    layers = (wall_size + 1) // 2  # This will give us the number of red layers since we add 1\n    \n    # Calculate the number of red and green tiles\n    red_tiles = green_tiles = 0\n    for layer in range(1, layers+1):\n        # The number of tiles in the current layer is (2*layer - 1)^2 - (2*(layer - 1) - 1)^2\n        # where the second term is only subtracted if layer > 1\n        if layer == 1:\n            red_tiles += (2 * layer - 1)**2\n        else:\n            red_tiles += (2 * layer - 1)**2 - (2 * (layer - 1) - 1)**2\n            green_tiles += (2 * (layer - 1) - 1)**2 - (2 * (layer - 2) - 1)**2\n\n    # Generally for an odd-sized wall, red tiles will be more than green tiles\n    more_tiles = red_tiles - green_tiles\n\n    # The color that has more tiles is red\n    dominant_color = \"red\"\n    \n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    # Calculate the side length of the square\n    side_length = int(100 ** 0.5)\n\n    # Calculate the total number of people in the four corners (which are counted only once)\n    corners = 4\n\n    # Calculate the total number of people on the four sides, excluding the corners\n    # Each side has side_length number of people, 4 sides in total, 4 corners are subtracted\n    sides_without_corners = 4 * (side_length - 2)\n\n    # Total number of people in the outermost layer is the sum of corners and sides_without_corners\n    total_outermost = corners + sides_without_corners\n\n    return total_outermost\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # This is the common difference between the terms\n\n    term = first_term\n    num_terms = 0\n    while term > 0:\n        term += difference\n        num_terms += 1\n\n    return num_terms\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # The winning strategy for Tom (who starts first) is to ensure that after his turn,\n    # the number of cards in Pile A and Pile B is the same. This way, no matter what move\n    # Jane makes, Tom can always mirror her move in the other pile, ensuring he gets the last card.\n\n    # Initial numbers of cards in Pile A and Pile B\n    pile_a = 88\n    pile_b = 52\n\n    # Tom's first move should be to make the number of cards in both piles equal\n    # He will do this by taking cards from the larger pile (Pile A)\n    tom_first_move = pile_a - pile_b\n\n    # Return Tom's first move\n    return tom_first_move\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    remaining_after_sister = 1 - 3/7\n    remaining_after_mum = 1 - 1/8\n    initial_cash = 280 / (remaining_after_sister * remaining_after_mum)\n    return initial_cash\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # Assign the total apples and apples per student.\n    total_apples = 80\n    min_apples_per_student = 3\n    \n    # Apply the Pigeonhole Principle with at least one student getting at least 3 apples.\n    # Since we have to give out at least 3 apples, we can subtract that at first to ensure one student gets 3.\n    remaining_apples = total_apples - 3\n    \n    # Now we find the minimum number of students that could get at least one apple each after giving 3 to one student.\n    # Since we can give 1 apple per student, the 'holes' (students) can be equal to the remaining 'pigeons' (apples).\n    min_students = remaining_apples + 1  # We add back the student who got 3 apples.\n\n    return min_students\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    temp_difference = max(temperatures) - min(temperatures)\n    return temp_difference\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cheesecake, logcake = symbols('cheesecake logcake')\n    \n    equation1 = Eq(6*cheesecake + 7*logcake, 1426)\n    equation2 = Eq(4*cheesecake, 3*logcake)\n    \n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n    \n    cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n    \n    return cost\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    number_of_people = 8\n\n    amount_per_person = total_amount / number_of_people\n\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # The last digit of a factorial will be zero if the factorial number is 5 or greater \n    # because factorial of 5 has factor of 2 and 5, so the product of these will give a 0 at the end\n    # and every subsequent multiplication by an integer will just append more zeros at the end\n    return 0\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    return (4 / 50) * 100\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5 * 5  # square base area\n    hole_area = 1 * 1  # hole area\n    effective_base_area = base_area - hole_area  # subtract hole area from base area\n    height = 480 / effective_base_area  # volume = base area * height\n   \n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    ans = sum(i * (2 * i - 1) for i in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    cost_pencil = 5\n    cost_pen = 15\n    \n    pencils_per_pen = cost_pen // cost_pencil\n    \n    return pencils_per_pen\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    # Let the common ratio for the red and white balls be x (i.e., there are x red balls and 2x white balls).\n    # Let the common ratio for the white and black balls be y (i.e., there are 3y white balls and 4y black balls).\n    # Since the white balls share common ratios in both cases, we let 2x = 3y.\n    \n    # Since we also have a total of 34 balls, we can write the total as:\n    # x (red) + 2x (white) + (2x * 4/3) (black) = 34\n    # Simplify the last part since 2x is equal to 3y:\n    # x + 2x + 8x/3 = 34\n    # Multiplying every term by 3 to get rid of the fraction gives:\n    # 3x + 6x + 8x = 3 * 34\n    # 17x = 102\n    # x = 102 / 17 = 6\n    # Since we are looking for the red balls which is x, we just calculate the value of x.\n    \n    x = 102 / 17\n    return int(x)\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 1002, 2):\n        total_sum += i - (i + 1)\n    return total_sum\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yellow, green = symbols('yellow green')\n    # Initial ratio\n    equation1 = Eq(yellow / green, 3/2)\n    \n    # After buying more beads\n    equation2 = Eq((green + 20) / (yellow + 5), 3/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (yellow, green))\n\n    # Total number of beads initially\n    total_initial_beads = solutions[yellow] + solutions[green]\n\n    return total_initial_beads\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    return 12 + 102 + 1002 + 10002\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_sisters = 13 * 2\n    marbles_left = 16\n\n    total_marbles = marbles_given_to_brother + marbles_given_to_sisters + marbles_left\n\n    return total_marbles\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    \n    # Two digit palindromic numbers\n    for i in range(1, 10):  # Only consider the first digit since the last digit will be the same\n        count += 1\n    \n    # Three digit palindromic numbers\n    for i in range(1, 10):  # First and last digit\n        for j in range(0, 10):  # Middle digit can be anything\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum(2*i + 1 for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    meeting_time = 4\n\n    # Calculate the distance they meet from Amy's starting point\n    amy_distance = amy_speed * meeting_time\n\n    # Total distance between starting points\n    total_distance = amy_distance + (christen_speed * meeting_time)\n\n    # Time taken for Christen to reach Amy's starting point\n    time_for_christen = total_distance / christen_speed\n\n    return time_for_christen\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    ans = 617 + 385\n    return ans\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n\n    for perm in permutations(digits, 4):  # Four-digit permutations\n        if perm[-1] in ['0', '6', '8']:  # Check if the number is even\n            if perm[0] != '0':  # The first digit must not be zero\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    correct_mark = 4\n    wrong_mark = -1\n    total_marks = 110\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_mark * correct_answers + wrong_mark * wrong_answers == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    \n    # Ratio of lemon to chocolate is 4:5, so 4x + 5x = remaining_cakes\n    # 9x = remaining_cakes\n    # x = remaining_cakes / 9\n    # lemon_cakes = 4 * x\n    \n    lemon_cakes = (4 / 9) * remaining_cakes\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through all three-digit numbers\n        str_i = str(i)\n        unique_digits = set(str_i)\n        if len(unique_digits) == 2:  # Check if only two unique digits are present\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the number of books Lily initially had\n    # Let y represent the number of books Judy initially had\n    lily, judy = symbols('lily judy')\n\n    # Lily gives 'send' number of books to Judy\n    send = symbols('send')\n\n    # After sending books, both will have the same number of books\n    equation1 = Eq(lily - send, judy + send)\n\n    # Initials amount of books that Lily had is 'send' books more than Judy\n    equation2 = Eq(lily, judy + send)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (lily, judy, send))\n\n    return solutions[send]\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # Define the number of ways each person can pass the ball to the others\n    # Since Lily starts, she can pass to either Cici or April - 2 options\n    # Whoever receives the ball can pass it to one of the remaining two - again 2 options\n    # Therefore, for each of Lily's passes, there are 2 further possibilities\n    # The pattern forms a tree diagram with 2 branches at each passing level, hence after two passes there are 2 * 2 = 4 different ways\n    \n    num_ways = 2 * 2  # Calculation of the total number of different passing ways\n    \n    return num_ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    total_score_first_four = 89 * 4\n    score_fifth_assignment = 94\n    \n    total_score_five_assignments = total_score_first_four + score_fifth_assignment\n    average_score_five_assignments = total_score_five_assignments / 5\n\n    return average_score_five_assignments\n    \nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan = 74\n    bilal = 86\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibbles = 11\n    wibbles_arms = 6\n    total_arms = 81\n\n    # Calculate the number of arms that wibbles have in total\n    total_arms_wibbles = wibbles * wibbles_arms\n\n    # Subtract the total arms of wibbles from the total arms at the conference to get the arms of wobbles\n    wobbles_arms = total_arms - total_arms_wibbles\n\n    # Since each wobble has 5 arms, divide the total wobbles' arms by 5 to find the number of wobbles\n    wobbles = wobbles_arms // 5\n\n    return wobbles\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 180))  # Generate prime numbers less than 180\n    for a in primes:\n        for b in primes:\n            if 7 * a + 9 * b == 179:\n                return a + b\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):  # A 3-digit number cannot have 0 in the hundreds place\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and \\\n                   (tens == 2 * hundreds) and \\\n                   (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    percentage = 15\n    total_amount = 420\n\n    amount = (percentage / 100) * total_amount\n\n    return amount\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    minutes = 32\n    fraction_of_time = (1/4) * (1/6) * (1/8)\n    total_seconds = minutes * 60 * fraction_of_time\n    return total_seconds\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    def hashtag_op(a, b):\n        return a + b - (a * b / 910)\n\n    ans = 1\n    for i in range(2, 2017):\n        ans = hashtag_op(ans, i)\n    \n    return ans\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick = boys * girls\n\n    return ways_to_pick\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    ways = 0\n    for kid1 in range(1, 6):  # kid1 receives at least 1 eraser\n        for kid2 in range(1, 6 - kid1):  # kid2 receives at least 1 eraser\n            kid3 = 6 - kid1 - kid2  # whatever is left goes to kid3\n            if kid3 > 0:  # kid3 should receive at least 1 eraser\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    # Let x be the number of correctly answered questions.\n    # Then, the number of wrongly answered questions is (6 - x).\n    # 5 marks are awarded for each correct answer and 2 marks are deducted for each wrong answer.\n    # The total score is 23.\n    # Therefore, we can form the equation: 5 * x - 2 * (6 - x) = 23\n    \n    # Initialize the number of questions.\n    total_questions = 6\n    \n    for x in range(total_questions + 1):  # +1 because range end is not inclusive\n        if 5 * x - 2 * (total_questions - x) == 23:\n            return x\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    total_length_of_road = (41 - 1) * 4  # Since one tree at each end, subtract 1 from total trees\n    num_pine_trees = (total_length_of_road // 5) + 1  # Plus one for the tree at the end\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    maverick_speed = 15  # km/h\n    kelvin_speed = 10    # km/h\n    maverick_start_behind = 10  # km\n    kelvin_claim_time = 24 / 60  # 24 minutes in hours\n\n    # Calculate the distance Maverick would travel in 24 minutes\n    maverick_distance_24_min = maverick_speed * kelvin_claim_time\n\n    # Calculate the distance Kelvin would travel in 24 minutes\n    kelvin_distance_24_min = kelvin_speed * kelvin_claim_time\n\n    # Calculate the difference in distance after 24 minutes\n    difference_in_distance = maverick_distance_24_min - kelvin_distance_24_min\n\n    # If Maverick caught up in 24 minutes, the difference should be equal to 10 km\n    if difference_in_distance == maverick_start_behind:\n        # Maverick's claim is correct\n        return 24\n    else:\n        # Kelvin's claim is correct, calculate the correct time\n        relative_speed = maverick_speed - kelvin_speed  # relative speed between Maverick and Kelvin\n        # Time required for Maverick to catch up to Kelvin\n        correct_time = maverick_start_behind / relative_speed\n        # Convert hours to minutes\n        correct_time_minutes = correct_time * 60\n        return correct_time_minutes\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    people = 10\n    original_hours = 9\n    target_hours = 3\n\n    rate_per_person = 1 / (people * original_hours)\n    target_people = 1 / (rate_per_person * target_hours)\n\n    return int(target_people)\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_petrol = week1 + week2 + week3\n    return total_petrol\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 0.60)\n    total_watermelons = remaining_after_first_day / (1 - 1/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    sum_squares = (n*(n+1)*(2*n+1))//6 - ((first_term-1)*first_term*(2*(first_term-1)+1))//6\n    return sum_squares\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the younger man and y be the current age of the older man.\n    x, y = symbols('x y')\n\n    # The first statement implies that at some time in the past, the older man (y - (x - 4)) was x years old\n    # and at that time the younger man was 4 years old.\n    equation1 = Eq(y - (x - 4), x)\n    equation2 = Eq(4, x - (y - x))\n\n    # The second statement says that in the future, when the older man is x years old,\n    # the younger man will be 61 years old.\n    equation3 = Eq(x + (y - x), y)\n    equation4 = Eq(x + (x - y), 61)\n\n    # Solve the equations to find the values of x and y.\n    solutions = solve((equation1, equation2, equation3, equation4), (x, y))\n\n    # Since we are looking for the age of the younger man, we return the solution for x.\n    return solutions[x]\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9): # ensure x2 is greater than x1\n            for x3 in range(x2 + 1, 9): # ensure x3 is greater than x2\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    # Since Jessica sits in front of Judy, Judy's desk is also behind Jessica\n    # Therefore, we add 1 to the count for Judy\n    ans = desks_in_front_of_jessica + desks_behind_judy + 1\n    return ans\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    # Let x be the original amount of money Bud had.\n    # She spent 1/3 of it on a book, so she had 2/3 of the money left.\n    # Then she spent 2/5 of the remaining money on a bag.\n\n    # Let's represent the fraction of the money spent on the bag as a portion of the original amount.\n    # 2/3 (remaining after buying the book) * 2/5 (spent on the bag) = (2*2)/(3*5)\n    fraction_spent_on_bag = (2 * 2) / (3 * 5)\n\n    # We know that this fraction of the original amount equals to £120, so we can set up the equation:\n    # fraction_spent_on_bag * x = 120\n    # Solving for x gives us the original amount\n\n    # Therefore, x = 120 / fraction_spent_on_bag\n    original_amount = 120 / fraction_spent_on_bag\n    return original_amount\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    ans = 125 * 8 * 49\n    return ans\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 0.75 * x - 5 - 2.5\n\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_value = 1000\n    decrement = 11\n\n    term = initial_value\n    count = 0\n    while term >= 0:\n        term -= decrement\n        count += 1\n    \n    first_negative_number = initial_value - (count * decrement)\n    \n    return first_negative_number\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    num1 = 0.11\n    midpoint = 0.126\n    distance = midpoint - num1\n    num2 = midpoint + distance\n    return num2\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n\n    sweets_per_classmate = total_sweets // classmates\n\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    unit_rate = 7 / 12  # Toffees per chocolate\n    toffees = chocolates * unit_rate\n    return int(toffees)\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original number of students\n    original_students = 152\n\n    # After removing 1/11 of the boys and 5 girls\n    equation = Eq(boys - boys/11, girls - 5)\n\n    # Total number of boys and girls is the original number of students\n    total_students = Eq(boys + girls, original_students)\n\n    # Solving for the number of boys and girls\n    num_boys_girls = solve((equation, total_students), (boys, girls))\n\n    return num_boys_girls[boys]\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in set(divmod(num, d)[0] for d in range(1, num+1) if num % d == 0):\n            return num\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the cost per box of lychees\n    x = symbols('x')\n    \n    # Equation: cost of mangoes + cost of lychees = total cost\n    equation = Eq(24 * 56 + 19 * x, 2826)\n    \n    # Solve for x\n    cost_per_lychee = solve(equation, x)[0]\n    \n    return cost_per_lychee\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coin_values = [1, 2, 5]\n    unique_totals = set()\n\n    for first_coin in coin_values:\n        for second_coin in coin_values:\n            for third_coin in coin_values:\n                total = first_coin + second_coin + third_coin\n                unique_totals.add(total)\n\n    return len(unique_totals)\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    # Iterate through all the permutations of the numbers 0 to 9\n    # because each of the blank spaces can be any of these digits\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        # Ensure that the multiplier is not 0 (since it's a single digit and leading zero is not allowed)\n        if A == 0:\n            continue\n\n        # The multipliand (_ _ B), the multiplier (A _ C) and the result (_ B C _ _) should follow the regular\n        # multiplication pattern\n        multipliand = int(f\"{B}\")\n        multiplier = int(f\"{A}{C}\")\n        # The result of the multiplication is a 5-digits number where:\n        # - The thousands digit is B (as the result of B*A)\n        # - The last two digits are B and C respectively (as the result of B*C)\n        result = multipliand * multiplier\n\n        # Check and validate the resulting multiplication\n        if str(result)[-1] == str(C) and str(result)[-2] == str(B):\n            # If the result is valid, return the sum of A, B, and C\n            return A + B + C\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(24 * x - 5 * (3 + x), 4)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage = 65 / 100\n    decimal = 0.507\n    fraction = 1 / 4\n\n    ans = percentage + decimal + fraction\n    return ans\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    unique_numbers = set()\n\n    for perm in permutations(cards, 3):\n        num = ''.join(perm)\n        if num[0] != '0':  # Exclude numbers that do not start with '0' to ensure three digits\n            unique_numbers.add(num)\n\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                part1 = int(str(P) + str(Q) + str(P))\n                part2 = int(str(Q) + str(R) + str(Q))\n                if part1 * 2 == part2:\n                    return P + Q + R\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children_with_names, children_without_names = symbols('children_with_names children_without_names')\n    \n    # Equation for the total number of children\n    equation1 = Eq(children_with_names + children_without_names, 50)\n    # Equation for the total cost paid by children\n    equation2 = Eq(10 * children_without_names + 15 * children_with_names, 555)\n    \n    solutions = solve((equation1, equation2), (children_with_names, children_without_names))\n    \n    return solutions[children_with_names]\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Time spent jogging from 7:30 AM to 8:30 AM is 1 hour\n    jogging_time = 1  # in hours\n    jogging_speed = 5  # in miles per hour\n    # Distance covered while jogging\n    jogging_distance = jogging_speed * jogging_time\n\n    # Time spent walking from 8:30 AM to 10:30 AM is 2 hours\n    walking_time = 2  # in hours\n    walking_speed = 3  # in miles per hour\n    # Distance covered while walking\n    walking_distance = walking_speed * walking_time\n\n    # Total distance traveled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    for i in range(1, 100):\n        if sum(range(i, i+5)) == 100:\n            return i\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    for q in range(1, 44001):\n        if (44000 / q) ** (1/3) % 1 == 0:\n            return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_large_boxes = 3 * 10\n    oranges_in_small_boxes = 7 * 5\n    oranges_left = total_oranges - (oranges_in_large_boxes + oranges_in_small_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    remaining_balls = 2\n\n    bags_used = (total_balls - remaining_balls) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # Using the pigeonhole principle, in the worst case scenario, we draw all different numbers\n    # until we're forced to draw a card which has the same number as a previous one.\n    # With 13 different numbers, we could draw one of each number without repeating a number.\n    max_unique_numbers = 13\n    # We have 4 suits, so we can draw one card from each suit for each number\n    # without getting 3 cards of the same number.\n    max_cards_without_3_of_same_number = max_unique_numbers * (4 - 1)\n    # The next card we draw will definitely be the third of the same number.\n    cards_needed_for_3_of_same_number = max_cards_without_3_of_same_number + 1\n    return cards_needed_for_3_of_same_number\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Possible cards based on James' statement\n    possible_cards = {\n        'Spades': ['A', 'J', 'K'],\n        'Hearts': ['3', '5', 'K'],\n        'Diamonds': ['2', '7', 'J'],\n        'Clubs': ['A', '7']\n    }\n    \n    # Analyze Eddie's first statement\n    # He does not know the card, so the suit cannot be Clubs because it has only two possibilities, and he would know which one\n    possible_suits_after_eddie = ['Spades', 'Hearts', 'Diamonds']\n    \n    # Avril's statement tells us that she now knows the card after Eddie said he didn't.\n    # This means the number cannot be '7' or 'K' because they appear in more than one suit.\n    numbers_not_possible_after_avril = ['7', 'K']\n    \n    # Find cards that can be uniquely identified by their number\n    unique_cards_by_number = {}\n    for suit in possible_suits_after_eddie:\n        for number in possible_cards[suit]:\n            if number not in numbers_not_possible_after_avril:\n                if number not in unique_cards_by_number:\n                    unique_cards_by_number[number] = suit\n                else:\n                    # If the number appears in another suit, it's not unique\n                    # and we remove it from the candidate list\n                    unique_cards_by_number.pop(number)\n    \n    # Eddie's second statement implies that he can now also identify the card based on Avril's statement.\n    # So the suit could only be one of the remaining suits where a unique number is given.\n    \n    # There could only be one unique possible suit-number combination left based on the previous filtration\n    for number, suit in unique_cards_by_number.items():\n        card = (suit, number)\n    \n    # Return the identified card\n    return card\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_trees = 21\n    total_distance = 800\n    intervals = total_trees - 1\n\n    distance_per_interval = total_distance / intervals\n\n    return distance_per_interval\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    ans = 32 * 125 * 49\n    return ans\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n\n    sister_notebooks = andy_notebooks // 2 - andy_gives // 2\n\n    if sister_notebooks * 2 + andy_gives == andy_notebooks:\n        return True, sister_notebooks\n    else:\n        return False, sister_notebooks\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    result = (3 / 4) * 28\n    return result\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    distance_between_buildings = 90\n    number_of_gaps = 9 + 1  # There are 9 trees, creating 10 gaps\n    distance_between_each_tree = distance_between_buildings / number_of_gaps\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "def solution():\n    from sympy import isprime\n\n    base_number = 200\n    count = 0\n\n    # Change the hundreds digit\n    for i in range(1, 10):\n        if isprime(i * 100 + base_number % 100):\n            count += 1\n\n    # Change the tens digit\n    for i in range(10):\n        if isprime((base_number // 100) * 100 + i * 10 + base_number % 10):\n            count += 1\n\n    # Change the units digit, excluding 0 and 5 because primes greater than 5\n    # do not end in 0 or 5\n    for i in [1, 2, 3, 4, 6, 7, 8, 9]:\n        if isprime(base_number - (base_number % 10) + i):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(x + 2*x, 72)\n    \n    smaller_number = solve(equation, x)[0]\n    return smaller_number\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean_of_numbers = 5\n    total_sum = mean_of_numbers * 5\n    sum_of_given_numbers = 3 + 4 + 6 + 10\n    fifth_number = total_sum - sum_of_given_numbers\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n    people_behind_danny = danny_position_from_back - 1\n    \n    total_people = people_in_front_of_emily + 1 + 1 + people_behind_danny\n\n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Emma takes 12 minutes to cut a piece of wood into 4 sections\n    # This means she is making 3 cuts (since 4 sections mean 3 cuts)\n    cuts_for_4_sections = 3\n\n    # Each cut takes 12 / 3 minutes\n    time_per_cut = 12 / cuts_for_4_sections\n\n    # To cut the wood 5 times, she will make 5 cuts\n    cuts_to_make_5_times = 5\n\n    # Total time required to make 5 cuts:\n    total_time_for_5_cuts = cuts_to_make_5_times * time_per_cut\n\n    return int(total_time_for_5_cuts)\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days, total_pages = symbols('days total_pages')\n    \n    # If Vanessa reads 30 pages a day, she finishes 2 days late.\n    equation1 = Eq(30 * (days + 2), total_pages)\n    \n    # If she reads 39 pages a day, she finishes 4 days early.\n    equation2 = Eq(39 * (days - 4), total_pages)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (days, total_pages))\n\n    return solution[days], solution[total_pages]\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    page_count = 0\n    count_5 = 0\n    while count_5 < 30:\n        page_count += 1\n        count_5 += str(page_count).count('5')\n    return page_count\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n    \n    cost_per_cup = total_cost / number_of_cups\n    \n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Original equation: 13 - 2 * (2 * x - 3) = 5 - (x - 2)\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n    # Solve the equation to find the value of x\n    solution = solve(equation, x)\n    # Since x represents the age Ms Tan was when she entered kindergarten, solution[0] is the correct answer\n    correct_age = solution[0]\n    return correct_age\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    sum1 = sum(range(6, 11)) # (10+9+8+7+6)\n    sum2 = sum(range(1, 6))  # (5+4+3+2+1)\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    total_rooms = 4\n    workers = 2\n\n    days = total_rooms / (rooms_per_day_per_worker * workers)\n\n    return days\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(apple + 2 * orange, 48)\n    equation2 = Eq(apple + orange, 31)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of pocket money and the cost of a tennis ball\n    pocket_money, cost_per_ball = symbols('pocket_money cost_per_ball')\n\n    # Equation for the first week (4 balls and 27p left)\n    equation1 = Eq(pocket_money, 4 * cost_per_ball + 0.27)\n\n    # Equation for the second week (2 balls and £1.51 left)\n    equation2 = Eq(pocket_money, 2 * cost_per_ball + 1.51)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (pocket_money, cost_per_ball))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    total_pages = 30\n    time_in_hours = 3 / 4\n    time_in_seconds = time_in_hours * 3600  # converting hours to seconds\n\n    seconds_per_page = time_in_seconds / total_pages\n\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_away = total_badges * (3/8)\n    remaining = total_badges - given_away\n\n    return remaining\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if str_num.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)  # Jason has thrice as much money as Will\n    equation2 = Eq(tom, will - 15)   # Tom has $15 less than Will\n    equation3 = Eq(jason + will + tom, 225)  # The total money they have is $225\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    elias, aileen = symbols('elias aileen')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(elias, 5 * aileen)\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    # Calculate the number of stickers they each had in the end\n    elias_end = solutions[elias] - 88\n    aileen_end = solutions[aileen] - 8\n\n    return (elias_end, aileen_end)\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    number_of_staircases = 3\n\n    total_steps = steps_per_staircase * number_of_staircases\n\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    total_pieces = 104\n    thomas_rate = 5\n    gerald_rate = 3\n    unit_rate = thomas_rate + gerald_rate\n    units_eaten = total_pieces / unit_rate\n    thomas_pieces = units_eaten * thomas_rate\n    gerald_pieces = units_eaten * gerald_rate\n    difference = thomas_pieces - gerald_pieces\n    return int(difference)\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    numbers = range(11, 32, 2)  # Create a range from 11 to 31 (inclusive) with a step of 2\n    ans = sum(numbers)  # Calculate the sum of the range\n    return ans\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    number1 = int('25', 8)  # Convert octal 25 to decimal\n    number2 = int('37', 8)  # Convert octal 37 to decimal\n    total = number1 + number2  # Add the decimal numbers\n    ans = oct(total)  # Convert the total back to octal\n    return ans[2:]  # Return the octal number without the prefix '0o'\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    fraction = 8 / 11\n    amount = 1.54\n\n    result = fraction * amount\n\n    return result\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for boys, girls, and adults\n    boys, girls, adults = symbols('boys girls adults')\n\n    # Equation: boys = 2/7 of girls\n    equation1 = Eq(boys, 2/7 * girls)\n\n    # Equation: adults = 2/3 of the total number of children (boys + girls)\n    equation2 = Eq(adults, 2/3 * (boys + girls))\n\n    # Equation: adults = boys + 1228\n    equation3 = Eq(adults, boys + 1228)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n\n    # Calculate total people at the park\n    total_people = solutions[boys] + solutions[girls] + solutions[adults]\n\n    return total_people\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    ans = 5987 + 67 + 983\n    return ans\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    # Let the number of tennis rackets purchased be n\n    # Initial cost price for n rackets = 150 * n\n    # Selling price for (n - 8) rackets = 175 * (n - 8)\n    # Total proceed = Initial cost price + Profit\n    # 175 * (n - 8) = 150 * n + 525\n\n    # Simplify and solve for n\n    # 175n - 1400 = 150n + 525\n    # 25n = 1925\n    # n = 1925 / 25\n\n    n = 1925 / 25\n    return int(n)\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    return 12.4 / 40\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Let's denote the initial amount of money Chloe and Gordon had as x.\n    # Chloe's remaining money is x - 20d where d is the number of days.\n    # Gordon's remaining money is x - 25d.\n\n    # Now, according to the problem, when Chloe has $157 left,\n    # Gordon has $82 left. So we have:\n    # x - 20d = 157\n    # x - 25d = 82\n\n    # Subtracting the second equation from the first gives us:\n    # (x - 20d) - (x - 25d) = 157 - 82\n    # 5d = 75\n\n    # Solve for d, the number of days:\n    d = 75 / 5 \n\n    # Substitute d back into the equation for Gordon's remaining money:\n    # x - 25d = 82\n    x = 82 + 25 * d\n\n    return x\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    # formula to calculate the maximum number of regions created by n circles\n    ans = n * (n - 1) + 2\n    \n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    num_bags = 8\n    pens_per_bag = 4\n    total_pens = num_bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2*x - 4 * (5 - x))\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of the jewels in P before transferring\n    # Let y be the total value of the jewels in Q before transferring\n    x, y = symbols('x y')\n\n    # Equation 1: The average value of the jewels in each box increases by £1000 after transferring\n    # (x - 5000) / 3 + 1000 = (x - 5000 + 5000) / 3\n    # (y + 5000) / 3 + 1000 = (y + 5000 - 5000) / 3\n    equation1 = Eq((x - 5000) / 3 + 1000, x / 3)\n    equation2 = Eq((y + 5000) / 3 + 1000, y / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The total value of all 6 jewels is the sum of the values of jewels in box P and Q before transferring\n    total_value = solutions[x] + solutions[y]\n\n    return total_value\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    product = 1\n    for i in range(1, 11):\n        product *= i\n\n    count_zeros = 0\n    while product % 10 == 0:\n        count_zeros += 1\n        product //= 10\n\n    return count_zeros\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons = total_melons / 5\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.5\n    revenue = remaining_melons * selling_price_per_melon\n    profit = revenue - cost_price\n    \n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    from math import gcd\n\n    # Number of oranges and apples after giving to neighbours\n    oranges = 150 - 17  # 133 oranges to be divided\n    apples = 100 - 5    # 95 apples to be divided\n    \n    # Calculate the greatest common divisor\n    num_neighbours = gcd(oranges, apples)\n    \n    return num_neighbours\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # measured in cm\n    cross_interval = 1  # measured in cm\n\n    # Each cross is 1 cm apart, so we simply add 1 to the line length\n    # because there's a cross at the beginning and every 1 cm along the line.\n    num_crosses = line_length + 1\n\n    return num_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    ans = 6.23 - 5.72\n    return ans\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6\n    green_balloons_period = pattern_length // 2\n\n    total_green_balloons = 75 // pattern_length * green_balloons_period\n\n    remainder_balloons = 75 % pattern_length\n    \n    for i in range(remainder_balloons):\n        if i % pattern_length == 2 or i % pattern_length == 5:\n            total_green_balloons += 1\n\n    return total_green_balloons\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of marbles Sandra had be S and Jessica had be J.\n    S, J = symbols('S J')\n\n    # Sandra had more marbles than Jessica at first, which gives us:\n    # S > J\n\n    # After giving 13 marbles to Jessica, Sandra had 6 fewer marbles than Jessica:\n    # S - 13 = J + 13 - 6\n\n    # We'll set up our equations based on the above information.\n    equation1 = Eq(S - J, 13 + 6)  # Sandra had more marbles than Jessica at first.\n    equation2 = Eq(S - 13, J + 13 - 6)  # After Sandra gave Jessica 13 marbles, Sandra had 6 fewer marbles than Jessica.\n\n    # Solve the system to find the values of S and J.\n    solutions = solve((equation1, equation2), (S, J))\n\n    # The answer is how many more marbles Sandra had than Jessica in the beginning.\n    return solutions[S] - solutions[J]\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_1_and_6 = 60\n    number_of_intervals_1_to_6 = 6 - 1\n    interval_distance = distance_between_1_and_6 / number_of_intervals_1_to_6\n\n    number_of_intervals_1_to_9 = 9 - 1\n    distance_between_1_and_9 = interval_distance * number_of_intervals_1_to_9\n\n    return distance_between_1_and_9\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    num_teams = 3\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    count_1, count_2 = 15, 14\n    total_ones, total_twos = 0, 0\n    N = 0\n\n    while total_ones < count_1 or total_twos < count_2:\n        N += 1\n        total_ones += str(N).count('1')\n        total_twos += str(N).count('2')\n\n    return N\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    pieces_per_friend = 26\n    number_of_friends = 7\n    pieces_left_with_kate = 22\n    \n    pieces_shared = pieces_per_friend * number_of_friends\n    total_pieces_after_eating = pieces_shared + pieces_left_with_kate\n    total_initial_pieces = total_pieces_after_eating * 3  # because she ate 1/3, so 2/3 is left\n\n    return total_initial_pieces\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        ""
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if (12 * 10 + m) == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of words be w, and the original speed be s (words per minute)\n    w, s = symbols('w s')\n\n    # Equation based on the original speed and time (3 minutes)\n    equation1 = Eq(w, 3 * s)\n\n    # Equation based on the increased speed (s+30 words per minute) and decreased time (3 - 1 = 2 minutes)\n    equation2 = Eq(w, 2 * (s + 30))\n\n    # Solve the simultaneous equations for w and s\n    solutions = solve((equation1, equation2), (w, s))\n\n    # Return the total number of words (the value of w)\n    return solutions[w]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0] * 10  # Initialize all lights to off (0)\n\n    # Ms. Lily: Press every other switch (starting with the first one)\n    for i in range(0, 10, 2):\n        lights[i] = 1 - lights[i]\n\n    # Sam: Press each even-numbered switch 7 times\n    for i in range(1, 10, 2):\n        lights[i] = (lights[i] + 7) % 2\n\n    # Count the number of lights that are on (1)\n    ans = lights.count(1)\n\n    return ans\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Equation representing the initial amount of water in A and B\n    equation1 = Eq(A, 2/3 * B)\n    # Equation representing the amount in A and B after transferring 4 liters\n    equation2 = Eq(A + 4, 7/8 * (B - 4))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # The total amount is the sum of water in both pails\n    total_water = solutions[A] + solutions[B]\n\n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    well_depth = 8\n    climb_up = 3\n    slip_down = 2\n    net_climb = climb_up - slip_down\n    days = 0\n    current_height = 0\n    \n    while current_height < well_depth:\n        days += 1\n        current_height += climb_up\n        if current_height >= well_depth:\n            break\n        current_height -= slip_down\n        \n    return days\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    total_volume = 900  # Total volume in ml of the rose syrup\n    initial_sugar_percentage = 6  # Initial sugar percentage\n    final_sugar_percentage = 10  # Final sugar percentage we want to achieve\n    \n    # Calculating the initial amount of sugar in the bottle\n    initial_sugar = total_volume * (initial_sugar_percentage / 100.0)\n    \n    # Let the amount of sugar to be added be x\n    # The final amount of sugar will be initial_sugar + x\n    # The final volume of the solution will be total_volume + x\n    \n    # Setting up the equation for final sugar percentage\n    # final_sugar = (initial_sugar + x) / (total_volume + x) * 100\n    # final_sugar_percentage / 100 = (initial_sugar + x) / (total_volume + x)\n    # final_sugar_percentage / 100 * (total_volume + x) = initial_sugar + x\n    # (final_sugar_percentage / 100) * total_volume + (final_sugar_percentage / 100) * x = initial_sugar + x\n    # (final_sugar_percentage / 100) * x - x = initial_sugar - (final_sugar_percentage / 100) * total_volume\n    # x * ((final_sugar_percentage / 100) - 1) = initial_sugar - (final_sugar_percentage / 100) * total_volume\n    # x = (initial_sugar - (final_sugar_percentage / 100) * total_volume) / ((final_sugar_percentage / 100) - 1)\n    \n    # Solving for x\n    x = (initial_sugar - (final_sugar_percentage * total_volume / 100.0)) / ((final_sugar_percentage / 100.0) - 1)\n    \n    # Returning the absolute value as we are only interested in the magnitude of x\n    return abs(x)\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    number_of_seamstresses = 2\n    number_of_days = 9\n    \n    total_dresses = dresses_per_day_per_seamstress * number_of_seamstresses * number_of_days\n    \n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_already_made = 20\n    hours_already_spent = 2\n    total_parts_needed = 100\n\n    parts_per_hour = parts_already_made / hours_already_spent\n    remaining_parts = total_parts_needed - parts_already_made\n    remaining_hours = remaining_parts / parts_per_hour\n\n    return remaining_hours\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    number_of_bars = 4\n    total_cost = cost_per_bar * number_of_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # Since we want to ensure 3 different colored balls and there are 3 colors,\n    # we must consider the worst-case scenario.\n\n    # Worst-case scenario: draw all balls of the same color first.\n    # So we can draw all 5 red, then all 5 white. \n    # At this point, no matter which ball we draw next, we'll have a different color.\n    total_balls_drawn = 5 + 5 + 1  # All of one color, all of another, and then one more.\n\n    return total_balls_drawn\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    colors = 5\n    color_combinations = comb(colors, 2) + colors  # Choose 2 from 5 colors or the same color\n    people_count = color_combinations + 1  # By Pigeonhole Principle, to guarantee at least one match\n    return people_count\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # We know that for two numbers to have a product divisible by 4, we must have:\n    # Case 1: at least one number is a multiple of 4, or\n    # Case 2: two even numbers that are not multiples of 4.\n    # The worst case scenario (the maximum amount of numbers needed to be drawn to ensure a product is divisible by 4)\n    # would be if we draw all the even numbers that are not multiples of 4 and all the odd numbers first.\n    \n    # There are 16 even numbers from 10 to 41 and half of them are multiples of 4\n    even_not_multiples_of_4 = 8 \n    \n    # There are 16 odd numbers from 10 to 41\n    odd_numbers = 16\n    \n    # Now, we can add one more number which will be a multiple of 4, and this guarantees that we meet the requirement\n    # Hence, we need to draw 8 even numbers that are not multiples of 4, 16 odd numbers and 1 more which will be a multiple of 4.\n    return even_not_multiples_of_4 + odd_numbers + 1\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the number of cards Melissa has, and h be the number of cards Hisham has.\n    m, h = symbols('m h')\n\n    # Melissa had twice as many cards as Hisham.\n    equation1 = Eq(m, 2 * h)\n\n    # Together they had 876 cards.\n    equation2 = Eq(m + h, 876)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (m, h))\n\n    # Number of cards Melissa had.\n    melissa_cards = solutions[m]\n\n    # Number of cards Hisham had.\n    hisham_cards = solutions[h]\n\n    # Quantity Melissa should give to Hisham for them to have the same number.\n    cards_to_give = (melissa_cards - hisham_cards) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    common_difference = (third_term - first_term) / (3 - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 2 * 100 + 20  # Total length in cm\n    piece_length_cm = total_length_cm / 2\n    return piece_length_cm\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    sum = 0\n    for i in range(46, 51):\n        sum += i * (100 - i)\n    return sum\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import isprime, primerange\n\n    # Finding the smallest two-digit prime number\n    smallest_prime = next(primerange(10, 100))\n\n    # Finding the largest two-digit square number\n    # Start with the square root of the largest two-digit number (99) and go backwards\n    for i in range(9, 0, -1):  # 9 to 1 because 10^2 = 100 is a three-digit number\n        largest_square = i**2\n        if len(str(largest_square)) == 2:  # Ensure it is a two-digit number\n            break\n\n    return smallest_prime * largest_square\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian's age when his father was 41 and he noticed the age reversal\n    brian_age_then = 14\n    father_age_then = 41\n    age_difference = father_age_then - brian_age_then\n\n    # Look for the next age where Brian's age is the reverse of his father's age\n    while True:\n        brian_age_then += 1\n        father_age_then += 1\n\n        # find reverse of Brian's current age\n        reverse_age = int(str(brian_age_then)[::-1])\n\n        # check if the reverse of Brian's age equals his father's current age\n        if father_age_then == reverse_age:\n            return brian_age_then\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_dollar = 1 / 0.96\n    coffee_cost_euro = 4.8\n    \n    coffee_cost_dollar = coffee_cost_euro * euro_to_dollar\n    return coffee_cost_dollar\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_value = float(\"-inf\")\n    \n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = p\n        # Calculate the value of the expression for this permutation\n        value = a + b / c + (d / e) * f - (g + h / j)\n        # If the value is a whole number and greater than the max_value, update it\n        if value.is_integer() and value > max_value:\n            max_value = value\n\n    return int(max_value)\n\n# Call the function and store the answer\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    # Total books initially\n    total_books_initial = 3900\n    \n    # Ratio of books\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n\n    # Total Ratio\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n    \n    # Initial number of books\n    initial_chinese_books = (ratio_chinese / total_ratio) * total_books_initial\n    initial_malay_books = (ratio_malay / total_ratio) * total_books_initial\n    initial_english_books = (ratio_english / total_ratio) * total_books_initial\n    \n    # Number of new books purchased\n    new_books = 510\n\n    # Increase in Chinese and Malay books\n    increase_chinese_books = initial_chinese_books * 0.2\n    increase_malay_books = initial_malay_books * 0.1\n\n    # Remaining new books for English books\n    new_english_books = new_books - (increase_chinese_books + increase_malay_books)\n\n    # Percentage increase in the number of English books\n    percent_increase_english = (new_english_books / initial_english_books) * 100\n\n    return percent_increase_english\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    # total participants\n    total_participants = 12 + 8\n    \n    # total score of juniors\n    total_score_juniors = 12 * 10\n    \n    # total score of all participants\n    total_score_all = total_participants * 14\n    \n    # total score of seniors\n    total_score_seniors = total_score_all - total_score_juniors\n    \n    # average score of seniors\n    average_score_seniors = total_score_seniors / 8\n    \n    return average_score_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    rounded_number = 9700\n    smallest_possible_number = rounded_number - 50\n    return smallest_possible_number\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # 4 years ago the combined age was 10\n    combined_age_4_years_ago = 10\n    # Every year, each dog gets one year older, so together they get 2 years older each year\n    # In 4 years, their combined age will increase by 4 * 2\n    # And in the next 2 years, it will increase by 2 * 2\n    increase_in_6_years = (4 + 2) * 2\n    # So we add the increase to the combined age 4 years ago\n    combined_age_in_2_years = combined_age_4_years_ago + increase_in_6_years\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    unanswered = 1\n    answered_questions = total_questions - unanswered\n    rex_score = 66\n    correct_points = 4\n    incorrect_points = -2\n\n    # Let x be the number of correct answers, hence answered_questions - x will be incorrect\n    # correct_points * x + incorrect_points * (answered_questions - x) = score\n    # 4x - 2(24 - x) = 66\n    # 4x - 48 + 2x = 66\n    # 6x = 114\n    # x = 19\n    x = (rex_score + incorrect_points * answered_questions) // (correct_points + abs(incorrect_points))\n    \n    return x\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    correct_answer_marks = 5\n    wrong_answer_marks = -2\n    unanswered_marks = 1\n    \n    # Calculate how many questions were answered\n    answered_questions = int(0.6 * total_questions)\n    unanswered_questions = total_questions - answered_questions\n    \n    # Calculate marks from unanswered questions\n    marks_unanswered = unanswered_marks * unanswered_questions\n    \n    # Create a variable to represent correct questions\n    correct_questions = symbols('correct_questions')\n    \n    # Equation based on the total score\n    total_score_eq = Eq(correct_answer_marks * correct_questions + wrong_answer_marks * (answered_questions - correct_questions) + marks_unanswered, 264)\n    \n    # Solve for the number of correct questions\n    correct_questions_solved = solve(total_score_eq, correct_questions)\n    \n    return correct_questions_solved[0]\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # According to the Pigeonhole Principle,\n    # if there are n containers and we want to ensure at least 2 apples in a container,\n    # we must have n+1 apples, because with n apples each container could have just 1 apple.\n    # For 10 containers, the least number of total apples will be 10 + 1 = 11.\n    containers = 10\n    ans = containers + 1  # One more apple than the number of containers\n    return ans\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 / (10 ** 2022)\n    denominator = 92 / (10 ** 2023)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made = 160\n    butter_used = 50\n    cookies_wanted = 300\n\n    butter_needed = (butter_used * cookies_wanted) / cookies_made\n    return butter_needed\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dedra_initial, timm_initial = symbols('dedra_initial timm_initial')\n    \n    # Dedra had 4 times as much money as Timm at first\n    equation1 = Eq(dedra_initial, 4 * timm_initial)\n    \n    # Both received $72 each - updating their amounts\n    dedra_final = dedra_initial + 72\n    timm_final = timm_initial + 72\n    \n    # Now, Dedra has twice as much money as Timm\n    equation2 = Eq(dedra_final, 2 * timm_final)\n    \n    # Solving the equations to find the initial amounts\n    solutions = solve((equation1, equation2), (dedra_initial, timm_initial))\n    \n    return solutions[dedra_initial]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    # Number of digits up to including 9 (1-digit numbers)\n    digits_1 = 9\n    # Number of digits up to including 99 (2-digit numbers)\n    digits_2 = digits_1 + 2 * (99 - 9)\n    # Number of digits up to including 999 (3-digit numbers)\n    digits_3 = digits_2 + 3 * (999 - 99)\n    \n    # Find out how many digits we have counted so far\n    # And how many digits are left for the 4-digit numbers\n    remaining_digits = 1000 - digits_3\n\n    # Calculate how many complete 4-digit numbers we have in the remaining digits\n    complete_numbers = remaining_digits // 4\n\n    # Calculate the starting number after including all complete 1-, 2-, and 3-digit numbers\n    starting_4_digit_number = 1000\n\n    # Calculate the last complete 4-digit number we include to reach 1000 digits\n    last_complete_4_digit_number = starting_4_digit_number + complete_numbers - 1\n    \n    # Unit digit of the last complete 4-digit number\n    unit_digit = last_complete_4_digit_number % 10\n\n    return unit_digit\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    return (19 + 2) // 3\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jane, jack = symbols('jane jack')\n    \n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n    \n    solutions = solve((equation1, equation2), (jane, jack))\n    \n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    only_A = A - (AC + AE - ACE)\n    only_C = C - (AC + CE - ACE)\n    only_E = E - (AE + CE - ACE)\n    only_AC = AC - ACE\n    only_AE = AE - ACE\n    only_CE = CE - ACE\n\n    total_fruits = only_A + only_C + only_E + only_AC + only_AE + only_CE + ACE\n\n    return total_fruits\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtracting 1 for Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    ans = 257.36 / 0.4\n    return ans\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    num_ways = permutations(18, 3)\n    \n    return num_ways\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    salary_per_month = 1.4\n    debt_in_bitcoins = 5.04\n\n    months_needed = debt_in_bitcoins / salary_per_month\n    \n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jason, bruce, willie = symbols('jack jason bruce willie')\n    jack_age = 4\n\n    equation1 = Eq(jack, jack_age)\n    equation2 = Eq(jason, bruce)\n    equation3 = Eq(jason, willie)\n    equation4 = Eq(jack + jason + bruce + willie, 19)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (jack, jason, bruce, willie))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    for friends in range(1, 100):\n        if 5 * friends + 3 == 6 * (friends - 1) + 1:\n            ans = 5 * friends + 3\n            return ans\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the current age of John be 'john' and Jake be 'jake'\n    jake, john = symbols('jake john')\n    # The sum of their current ages is 44\n    equation1 = Eq(jake + john, 44)\n    # In 14 years, Jake will be twice as old as John\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n\n    # Solving the equations to find John and Jake's current ages\n    solutions = solve((equation1, equation2), (jake, john))\n\n    # John's age in 14 years is his current age plus 14\n    john_age_in_14_years = solutions[john] + 14\n\n    return john_age_in_14_years\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n    return rachel\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    number_of_years = 3\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** number_of_years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define symbols for ages\n    youngest = symbols('youngest')\n\n    # Define relations, 15 months intervals and 6 times as old\n    # Oldest child is youngest + 8 * 15 months, convert months to years by dividing with 12\n    equation = Eq(youngest + 8*15/12, 6*youngest)\n\n    # Solve the equation\n    age_youngest = solve(equation, youngest)\n\n    return age_youngest[0]\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "import itertools\n\ndef solution():\n    # Define the numbers and operators in the expression\n    numbers = [15, 5, 5, 15, -6, 7]  # Using subtraction as adding a negative number\n    operators = ['+', '*', '+', '+', '+']\n\n    # Function to calculate the expression given an order of operations\n    def calculate_expression(ops_order):\n        expression = [str(numbers[0])]\n        for num, op in zip(numbers[1:], operators):\n            expression.append(op)\n            expression.append(str(num))\n        for op in ops_order:\n            pos = expression.index(op)\n            expression = expression[:pos-1] + ['(' + expression[pos-1]] + expression[pos:pos+2] + [')'] + expression[pos+2:]\n        return eval(''.join(expression))\n\n    # Define all possible combinations of two operators to have brackets\n    combinations = list(itertools.combinations(operators, 2))\n    all_possible_results = {}\n\n    # Go through each combination and calculate the expression\n    for comb in combinations:\n        result = calculate_expression(comb)\n        all_possible_results[comb] = result\n\n    # Find the smallest result\n    smallest_result = min(all_possible_results.values())\n    smallest_combination = min(all_possible_results, key=lambda k: all_possible_results[k])\n\n    # Return the smallest result\n    return smallest_result, smallest_combination\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    return 2018 - 786\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2008):\n        total_sum += (i**2 + (i+1)**2) / (i*(i+1))\n    return round(total_sum)\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Loop through possible 4-digit numbers.\n    for initial_number in range(1000, 10000):\n        # Swap ones digit to the first place.\n        ones_digit = initial_number % 10\n        swapped_number = int(str(ones_digit) + str(initial_number)[:-1])\n            \n        # Check if the swapped number is greater by 5877.\n        if swapped_number - initial_number == 5877:\n            return initial_number  # Return the original smallest combination.\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let's denote the sweets Cayden and Jiaxiang have with C and J respectively.\n    # According to the problem, we have:\n    # C = J + 5 (Cayden has 5 more sweets than Jiaxiang)\n    # If Cayden gives Jiaxiang 10 sweets, we'll have:\n    # C_new = C - 10 (Cayden's new amount)\n    # J_new = J + 10 (Jiaxiang's new amount)\n    # We need to find the new difference:\n    # Difference_new = C_new - J_new\n    # But from the first equation, we can rewrite C_new as (J + 5 - 10)\n    # Thus, Difference_new = (J + 5 - 10) - (J + 10)\n    # Simplify the difference\n    # Difference_new = J + 5 - 10 - J - 10\n    # Difference_new = -15\n    # The difference is the absolute value because we can't have negative sweets\n    diff_new = abs(-15)\n    return diff_new\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    return 2.5 * 7.7 + 0.25 * 23\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    # Find the smallest multiple of 11 greater than 50\n    min_multiple = (50 // 11) * 11\n    if min_multiple < 50:\n        min_multiple += 11\n\n    # Find the largest multiple of 11 less than 150\n    max_multiple = (150 // 11) * 11\n    if max_multiple > 150:\n        max_multiple -= 11\n\n    # Calculate the number of multiples of 11 in this range\n    num_multiples = ((max_multiple - min_multiple) // 11) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + 75 / 100 * 74 - 0.3 / (2 / 15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Average score of the 5 pupils is 72%\n    average_score_5 = 72\n    # Total score of the 5 pupils\n    total_score_5 = average_score_5 * 5\n\n    # New average score with Mary's score included for 6 pupils is 75%\n    new_average_score_6 = 75\n    # Total score for 6 pupils\n    total_score_6 = new_average_score_6 * 6\n\n    # Mary's score is the difference between total scores\n    marys_score = total_score_6 - total_score_5\n\n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60\n\n    time = (train_length + bridge_length) / speed\n\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    max_number = 0\n\n    # Iterate through all 3-digit numbers\n    for i in range(100, 1000):\n        # Check if the number is odd, divisible by 9, and the tens digit is divisible by 4\n        if i % 2 != 0 and i % 9 == 0 and (i // 10) % 10 % 4 == 0:\n            max_number = max(max_number, i)\n\n    return max_number\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    # Since each student must get at least one doughnut, we'll first distribute one to each.\n    # This leaves us with 11 - 4 = 7 doughnuts to distribute freely among the 4 students.\n    remaining_doughnuts = 11 - 4\n\n    # If we think of the 7 remaining doughnuts and the 3 dividers that separate the 4 students as objects, \n    # we're actually looking to find the number of ways to arrange these objects. \n    # Hence, we use the combination formula \"n choose k\", where \n    # 'n' is the total number of objects (remaining doughnuts + dividers) \n    # and 'k' is the number of one type of object (dividers).\n    n = remaining_doughnuts + (4 - 1)\n    k = 4 - 1\n\n    # The number of combinations/permutations is given by C(n, k).\n    ways_to_distribute = comb(n, k)\n    \n    return ways_to_distribute\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    actual_time = distance // speed\n    return actual_time\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # Assuming she picks the maximum number of marbles of one color before moving to the next,\n    # Jane might pick all the red, all the green, and all the blue ones without getting any orange.\n    # So she has to pick one marble more than that to be sure of getting one orange.\n    max_red = 4\n    max_green = 7\n    max_blue = 6\n    # 1 is for the guaranteed orange.\n    ans = max_red + max_green + max_blue + 1\n\n    return ans\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Possible coin values in pence\n    coin_values = [5, 10, 20, 50, 100, 200]\n    \n    # Five pound note in pence\n    five_pound_note = 500\n    \n    # Calculate the sum of the change\n    for i in range(len(coin_values)):\n        for j in range(i + 1, len(coin_values)):\n            for k in range(j + 1, len(coin_values)):\n                for l in range(k + 1, len(coin_values)):\n                    for m in range(l + 1, len(coin_values)):\n                        # Check if we have five different coins\n                        change = coin_values[i] + coin_values[j] + coin_values[k] + coin_values[l] + coin_values[m]\n                        if change < five_pound_note:\n                            # Calculate how much was spent\n                            spent = five_pound_note - change\n                            return spent\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_temp = 11\n    midnight_temp = midday_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    total_notes = 38\n    spent_percentage_10 = 0.8\n    spent_percentage_2 = 0.75\n    remaining_ratio = 3  # remaining 10s are thrice as many as 2s\n\n    # Let x be the number of $10 notes\n    # Then, total_notes - x will be the number of $2 notes\n    # We create an equation based on the remaining notes after spending\n    for x in range(total_notes + 1):\n        remaining_10_notes = x * (1 - spent_percentage_10)\n        remaining_2_notes = (total_notes - x) * (1 - spent_percentage_2)\n        # Check if remaining $10 notes are thrice as many as $2 notes\n        if remaining_10_notes == remaining_ratio * remaining_2_notes:\n            num_10_notes = x\n            num_2_notes = total_notes - x\n            break\n            \n    # Calculate the total money spent on the fan from $10 and $2 notes\n    spent_10_notes = num_10_notes * spent_percentage_10 * 10\n    spent_2_notes = num_2_notes * spent_percentage_2 * 2\n    cost_of_fan = spent_10_notes + spent_2_notes\n\n    return cost_of_fan\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    original_hives = 5\n    original_honey = 50\n    target_honey = 90\n\n    # Calculate honey production per hive\n    honey_per_hive = original_honey / original_hives\n    \n    # Calculate the total hives needed for target honey\n    total_hives_needed = target_honey / honey_per_hive\n    \n    # Calculate how many more hives are needed\n    more_hives_needed = total_hives_needed - original_hives\n    \n    return int(more_hives_needed)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    # Let the original number of erasers for Ali be 7x and for Kumar be 5x\n\n    # Ali gives Kumar 10 erasers, so Ali has 7x - 10 and Kumar has 5x + 10\n    # Now their ratio is 1:5, so (7x - 10)/(5x + 10) = 1/5\n\n    # Cross-multiply to solve for x\n    x = symbols('x')\n    equation = Eq((7 * x - 10) / (5 * x + 10), 1 / 5)\n    solution_x = solve(equation, x)\n\n    # Find the total erasers\n    total_erasers = 7 * solution_x[0] + 5 * solution_x[0]\n\n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 23\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    import math\n    # Calculate the horizontal distance from A to B\n    horizontal_distance = 15 - 9  # East 15 km then West 9 km\n    # Calculate the total vertical distance from A to B\n    vertical_distance = 3 + 5  # North 3 km then North 5 km\n    # Use Pythagorean theorem to find the shortest distance\n    shortest_distance = math.sqrt(horizontal_distance ** 2 + vertical_distance ** 2)\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    banana, pear = symbols('banana pear')\n\n    # Setup the equations based on the problem\n    eq1 = Eq(1 * banana + 3 * pear, 84)\n    eq2 = Eq(1 * banana + 1 * pear, 48)\n\n    # Solve the equations\n    solution = solve((eq1, eq2), (banana, pear))\n\n    # Return the cost of one banana\n    return solution[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_minutes = (8 * 60) + 20  # Total minutes in 8 hours and 20 minutes\n    activity_and_break = 45 + 20   # Total minutes for each activity with break\n\n    # Subtracting 20 minutes as there is no break after the last activity\n    activities = (total_minutes - 20) // activity_and_break\n\n    return activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let the weights of Adam, Ben, and Carl be A, B, and C respectively.\n    # From the problem we know that:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 92\n\n    # We want to find A + B + C.\n    # To do that, we add all three given equations:\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 92\n\n    # Simplifying the left side, we get 2A + 2B + 2C, which is 2 * (A + B + C)\n    total_double = 102 + 97 + 92\n\n    # Now we can find the total weight by halving the sum:\n    total_weight = total_double / 2\n    return int(total_weight)\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards, 4):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')  # Define symbols for A's and B's working rates\n\n    # Equation representing A's efficiency being twice B's\n    efficiency_equation = Eq(a, 2 * b)\n\n    # Equation representing A's time to finish work is 5 days less than B's\n    time_equation = Eq(1/a + 5, 1/b)\n\n    # Solve both equations to find B's working rate (b)\n    solutions = solve((efficiency_equation, time_equation), (a, b))\n\n    # The number of days B takes to finish the work is the reciprocal of B's working rate\n    b_days = 1 / solutions[b]\n    return b_days\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    # Applying the divisibility rule for 11: \n    # Subtract the sum of the digits at odd places from the sum of the digits at even places. \n    # If the result is 0 or divisible by 11, then the original number is divisible by 11.\n    digits = [int(digit) for digit in str(number)]\n    odd_sum = sum(digits[::2])     # Sum of digits at odd places.\n    even_sum = sum(digits[1::2])   # Sum of digits at even places.\n    \n    is_divisible = (even_sum - odd_sum) % 11 == 0\n    \n    # Correct the mistake made by George if necessary and find the actual remainder if not divisible.\n    if is_divisible:\n        remainder = 0\n    else:\n        remainder = (even_sum - odd_sum) % 11\n    \n    return remainder\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_percentage = 25 / 100\n    tulip_fraction = 1 / 5\n\n    crocus_bulbs = total_bulbs * crocus_percentage\n    tulip_bulbs = total_bulbs * tulip_fraction\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    start_length_m = 2.06  # initial length in meters\n    end_length_m = 78 / 100  # end length converted to meters (from cm)\n    melted_length_m = start_length_m - end_length_m  # calculate melted length in meters\n\n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n    \n    portion = (percentage / 100) * total_grams\n    \n    return portion\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    def climb(n):\n        # Base cases\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        # Recursive call\n        return climb(n-1) + climb(n-4)\n\n    # Calculate the number of ways to climb 9 steps\n    ans = climb(9)\n    return ans\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    return 3549 // 7\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_in_12_minutes = 17\n    total_minutes = 36\n    planes_in_36_minutes = (planes_in_12_minutes / 12) * total_minutes\n    return planes_in_36_minutes\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    passengers = 35\n    # At the first stop two-fifths get off\n    passengers -= passengers * 2 // 5\n    # Then 7 people get on\n    passengers += 7\n    # At the next stop a quarter of the remaining people get off\n    passengers -= passengers // 4\n    # Then 13 get on\n    passengers += 13\n    return passengers\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    sum_of_cubes = 0\n    n = 20  # Since step is 0.5, 10 is the 20th term (0.5 * 20)\n    sum_n = n * (n + 1) / 2 * 0.5  # Sum of natural numbers up to n, multiplied by 0.5 because of our step\n    sum_of_cubes = sum_n ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    # As the value is rounded to the nearest £5, the least it could be before rounding\n    # is halfway between £35 and the next lower multiple of £5, which is £30.\n    # That halfway point would be £32.50. Any value at £32.50 or above would round up to £35.\n    # Therefore, the least amount the shopping bill could actually be is £32.50.\n    ans = 32.5\n    return ans\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum = 22\n    future_sum = 40\n    years_needed = future_sum - current_sum\n    \n    return years_needed\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for s1 in range(98, 103):\n        for s2 in range(98, 103):\n            s3 = 300 - s1 - s2\n            if 98 <= s3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    # The elephant is at the 10th position from the left\n    elephant_position_left = 10\n    \n    # There are 5 toys from the rabbit to the elephant\n    # Since the elephant is to the right of the rabbit, we subtract 5 from the elephant's position\n    rabbit_position_left = elephant_position_left - 5\n    \n    # Total number of toys is 40, so the position from the right is:\n    # Total toys - position from left + 1\n    rabbit_position_right = 40 - rabbit_position_left + 1\n    \n    return rabbit_position_right\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    tim = symbols('tim')\n\n    # The rate of work Nancy can do per day is 1/6. Hence, Nancy can complete 1/6 of the work in one day.\n    # When Tim and Nancy work together, they can complete the job in 4 days, which means they complete 1/4 of the work in one day.\n    # To find out how much work Tim can do per day, we can set up the equation:\n    # Nancy's work per day + Tim's work per day = Total work per day together\n    # (1/6) + (1/tim) = 1/4\n\n    # Equation representing combined work\n    equation = Eq((1/6) + (1/tim), 1/4)\n\n    # Solve the equation\n    tim_value = solve(equation, tim)\n\n    return tim_value[0]\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1 and pencils % 3 == 2 and\n            pencils % 4 == 3 and pencils % 5 == 4):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people = 1 + 3  # Ewan and his 3 sisters\n    biscuits_per_person = total_biscuits / people\n    return biscuits_per_person\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    result = (3/7) * 385\n    return result\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    total_mass_g = 172 * 1000  # convert kg to g\n    mass_per_packet = [300, 400, 500]  # mass of each packet of P, Q, R respectively\n    ratio = [7, 3, 2]  # ratio of packets of P, Q, R\n\n    # Calculate the total number of parts in the ratio\n    total_parts = sum(ratio)\n\n    # Calculate the total mass represented by each part\n    mass_per_part = total_mass_g / total_parts\n\n    # Calculate the number of packets for each ingredient\n    packets = [mass_per_part / mass_per_packet[i] for i in range(3)]\n\n    # Calculate the total number of packets used\n    total_packets = sum(packets)\n\n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean = 12\n    total = mean * (len(numbers) + 1) # Plus 1 because 'a' is also part of the numbers\n    sum_numbers = sum(numbers)\n    a = total - sum_numbers\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n\n    # Convert all time units to seconds for calculation\n    first_light = 60  # 1 min = 60 seconds\n    second_light = 90  # 1.5 mins = 90 seconds\n    full_cycle = 540  # 9 mins = 540 seconds\n    \n    # Calculate the LCM of the first two lights\n    lcm_first_second = lcm(first_light, second_light)\n    \n    # Calculate the minimum time for the third light in seconds\n    # It has to be a factor of the full cycle and should be >= 30 seconds\n    third_light = min(\n        [time for time in range(30, full_cycle + 1) if full_cycle % time == 0 and lcm_first_second % time == 0]\n    )\n\n    # Convert seconds back to minutes for the answer\n    ans = third_light / 60  # Convert seconds to minutes\n\n    return ans\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to the same unit, for example centimeters.\n    pink_ribbon_cm = 2.5 * 100\n    blue_ribbon_cm = 220\n    orange_ribbon_cm = 30.5\n\n    # Compare their lengths to determine the longest ribbon.\n    longest_ribbon = max(pink_ribbon_cm, blue_ribbon_cm, orange_ribbon_cm)\n    \n    if longest_ribbon == pink_ribbon_cm:\n        return 'pink'\n    elif longest_ribbon == blue_ribbon_cm:\n        return 'blue'\n    else:\n        return 'orange'\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    preparing_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    total_time = preparing_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50  # 50% off\n\n    original_price = sale_price / (1 - discount_rate)\n\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    red_cars = 3\n    blue_cars = 12\n    green_cars = 15\n\n    red_car_capacity = 10\n    blue_car_capacity = 15\n    green_car_capacity = 20\n\n    total_cars = red_cars + blue_cars + green_cars\n    total_capacity = (red_cars * red_car_capacity) + (blue_cars * blue_car_capacity) + (green_cars * green_car_capacity)\n\n    average_capacity = total_capacity / total_cars\n\n    return average_capacity\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    rachel_speed = 84 # Rachel's speed in km/h\n    eleanor_time_to_g = 4 # Eleanor's time to reach City G in hours\n    time_difference = 1.5 # Time difference when Eleanor reached G and Rachel was 39 km away from F\n    remaining_distance_for_rachel = 39 # Rachel's remaining distance to City F in km\n\n    # Distance traveled by Rachel when Eleanor reached City G\n    rachel_distance = rachel_speed * time_difference\n\n    # Total distance between City F and City G\n    total_distance = rachel_distance + remaining_distance_for_rachel + (eleanor_time_to_g - time_difference) * rachel_speed\n\n    return total_distance\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    # George's operation has a mistake, as he used the wrong number of terms for \"4 ⊙ 3\".\n    # The operation \"⊙\" is defined as adding up all numbers that consist of the first number\n    # repeated n times, where n is the second number in the operation.\n    # So, 4 ⊙ 3 should be: 4+44+444\n    \n    # Correct operation\n    ans = 4 + 44 + 444  # This is the sum of 4, 44, and 444 as defined by the operation \"⊙\".\n    return ans\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    percent_boys = (boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    cad_to_usd_rate = 1.25\n    book_price_cad = 64\n    book_price_usd = book_price_cad / cad_to_usd_rate\n    return book_price_usd\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # Since the book is on the 8th shelf from the front and 10th from the back,\n    # there must be 7 shelves before it and 9 shelves after it.\n    # To get the total number of shelves, add the shelves before, the shelf the book is on, and the shelves after.\n    return 7 + 1 + 9\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    for lowest_score in range(1, 100):\n        for second_score in range(lowest_score + 1, 100):\n            for third_score in range(second_score + 1, 100):\n                for fourth_score in range(third_score + 1, 100):\n                    for fifth_score in range(fourth_score + 1, 100):\n                        if (lowest_score + second_score + third_score + fourth_score + fifth_score) / 5 == 90 and fifth_score < 100:\n                            return lowest_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, 3 * B)\n    equation2 = Eq(C, B + 56)\n    equation3 = Eq(A, C + 130)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    total_length = solutions[A] + solutions[B] + solutions[C]\n\n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    smallest = min(numbers)\n    largest = max(numbers)\n    result = (2 * largest) - (3 * smallest)\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from itertools import combinations\n\ndef solution():\n    # Total number of ways to choose 3 letters from 5\n    total_ways = len(list(combinations('ABCDE', 3)))\n    \n    # Number of ways to choose 1 more letter from the remaining 3 letters (C, D, E) after choosing A and B\n    ways_with_A_and_B = len(list(combinations('CDE', 1)))\n    \n    # Probability that A and B will be in the string\n    prob = ways_with_A_and_B / total_ways\n    \n    return prob\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n\n    male_students_percentage = 16\n    female_students_percentage = 10\n\n    male_students = (male_students_percentage / 100) * male_members\n    female_students = (female_students_percentage / 100) * female_members\n\n    total_students = male_students + female_students\n    total_members = male_members + female_members\n\n    students_percentage = (total_students / total_members) * 100\n\n    return students_percentage\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    # Calculate the total amount of fruit juice in both punch bowls before mixing\n    fruit_juice_in_first_bowl = 200 * 0.35\n    fruit_juice_in_second_bowl = 300 * 0.50\n    \n    # Calculate the total volume of the mixture\n    total_volume = 200 + 300\n    \n    # Calculate the total amount of fruit juice in the mixture\n    total_fruit_juice = fruit_juice_in_first_bowl + fruit_juice_in_second_bowl\n    \n    # Calculate the percentage concentration of fruit juice in the mixture\n    percentage_concentration = (total_fruit_juice / total_volume) * 100\n    \n    return percentage_concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 3 * 48 / 4\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy = 37\n    john = 15\n    transfer = (amy - john - 4) / 2\n    return int(transfer)\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of papers\n    x = symbols('x')\n\n    # She wants to finish the work in 5 hours originally\n    # After working for one hour, she has 4 hours left\n    # If she wants to finish the work as planned, she needs to mark\n    # 6 more papers per hour than what she originally planned\n    # Let y be the number of papers she planned to mark per hour initially\n    y = symbols('y')\n    \n    # Original plan\n    original_plan = Eq(5*y, x)\n\n    # Modified plan after one hour, 4 hours remaining\n    modified_plan = Eq(4*(y+6), x - y)\n\n    # Plan if she marks 10 more papers per hour and finishes 1 hour earlier\n    # She would have worked for 3 hours at the increased rate\n    faster_plan = Eq(3*(y+10), x - y)\n\n    # Solve the equations\n    solutions = solve((original_plan, modified_plan, faster_plan), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n    \n    # (1) What fraction of the chicken pies more than vegetable pies?\n    chicken_more_than_vegetable = chicken_pies - vegetable_pies\n    fraction_chicken_more = Fraction(chicken_more_than_vegetable, chicken_pies)\n    \n    # (2) What fraction of the vegetable pies less than fruit pies?\n    fruit_more_than_vegetable = fruit_pies - vegetable_pies\n    fraction_vegetable_less = Fraction(fruit_more_than_vegetable, fruit_pies)\n    \n    return (fraction_chicken_more, fraction_vegetable_less)\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    markers_left = 32 - 7\n    bags = markers_left // 5\n    return bags\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jug, cup = symbols('jug cup')\n    \n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n    \n    solutions = solve((equation1, equation2), (jug, cup))\n    \n    return solutions[cup]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 as we need a 2-digit number\n        for b in range(10):  # b can be 0-9\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip = bill * 0.20\n    tax = bill * 0.10\n    total_cost = bill + tip + tax\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    \n    ans = greatest_1_digit_even + smallest_2_digit_odd\n    return ans\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 208):\n        for digit in str(i):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_completed = 3/4\n    total_designs = made_designs / fraction_completed\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of each wristband as 'w' and the cost of each cap as 'c'\n    w, total_money = symbols('w total_money')\n\n    # Now, we are given that each cap costs 3 times a wristband\n    c = 3 * w\n\n    # Caleb spent 2/5 of his money on 4 caps and 6 wristbands\n    spent_on_caps_and_wristbands = Eq((2/5) * total_money, 4 * c + 6 * w)\n\n    # Solve for total_money using the equation defined above\n    total_money_solution = solve(spent_on_caps_and_wristbands, total_money)[0]\n\n    # Now calculate the remaining money after spending 2/5 of it\n    remaining_money = (3/5) * total_money_solution\n\n    # Caleb bought some more caps with 1/3 of his remaining money\n    money_for_more_caps = (1/3) * remaining_money\n\n    # Number of caps bought with the additional money_for_more_caps\n    additional_caps = money_for_more_caps / c\n\n    # Total caps are initial 4 + the additional caps\n    total_caps = 4 + additional_caps\n\n    return int(total_caps)\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    ans = 5.4 + 3.7\n    return ans\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assuming constant acceleration due to gravity (g = 9.81 m/s^2)\n    g = 9.81  # Gravity in m/s^2\n\n    # Initial conditions\n    h_initial = 3000  # Initial height in meters\n    h_final = 2000    # Final height in meters\n    v_initial = 0     # Initial velocity in m/s (since the skydiver just jumps off)\n\n    # Using the kinematic equation: v_final^2 = v_initial^2 + 2*g*(h_initial - h_final)\n    # We need to find v_final\n    v_final = symbols('v_final')\n\n    # Set up our equation\n    equation = Eq(v_final**2, v_initial**2 + 2*g*(h_initial - h_final))\n\n    # Solve for v_final (taking the positive solution since velocity is in the direction of gravity)\n    solution = solve(equation, v_final)[1]\n\n    return solution.evalf()\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # Since there are 4 suits and we want to ensure 4 consecutive cards,\n    # in the worst case, we can pick the same number from each suit.\n    # After we have 1 card of each suit, the next card must start a new consecutive sequence\n    \n    # We want consecutive cards - worst case is we get one of each number before getting a consecutive one\n    # This would fill up each \"pigeonhole\" (the numbers) with one of each suit,\n    # so on the next draw, we are guaranteed to get a consecutive card.\n    \n    # With 13 different numbers, the worst case is drawing 13 cards of different numbers from each suit.\n    # To guarantee a consecutive number, we need to draw just one more card.\n    \n    return 13 * 4 + 1  # Each number + 1 card to guarantee the consecutive sequence\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    digits = '0123456789'\n    remaining_digits = sorted(set(digits) - {'3', '1', '7'})\n    for perm in permutations(remaining_digits):\n        B, D, E, F, H, I, J = perm\n        number = f'3{B}1{D}{E}{F}7{H}{I}{J}'\n        is_valid = True\n        for k in range(2, 11):\n            if int(number[:k]) % k != 0:\n                is_valid = False\n                break\n        if is_valid:\n            return tuple(map(int, (B, D, E, F, H, I, J)))\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    diff_age_with_brother = 2\n    brother_age = (ashley_age - 3) - diff_age_with_brother\n    return brother_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    total_pages = 89\n    page_count = 0\n    page_number = 0\n    \n    while page_count < total_pages:\n        page_number += 1\n        if page_number % 3 != 0:\n            page_count += 1\n            \n    return page_number\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    # Let the number of adult tickets be x\n    # Let the number of child tickets be y\n    for x in range(20):  # Adults cannot be more than 19 since total is 19 tickets\n        for y in range(20):  # Same for children tickets\n            if (5*x + 3*y == 75) and (x + y == 19):\n                return x  # We only need to find the number of adult tickets\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3\n    count_5 = 600 // 5\n    \n    # For multiples of both 3 and 5, which is the same as multiples of 15\n    count_15 = 600 // 15\n    \n    # Using the inclusion-exclusion principle\n    count = count_3 + count_5 - count_15\n    \n    return count\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    current_age_difference = 60 - 20\n    grandma_current_age = 10 + current_age_difference\n    return grandma_current_age\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, b, candies = symbols('a b candies')\n\n    # Equations based on the problem statement\n    equation1 = Eq(4 * a - candies, -20)  # 4 candies per student in class A, 20 more needed\n    equation2 = Eq(6 * b - candies, 16)   # 6 candies per student in class B, 16 left\n    equation3 = Eq(a, 2 * b)             # Students in class A is twice of class B\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, candies))\n\n    # Return the number of candies\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    \n    # Iterate through the possible numbers of ten-pence coins used (0 to 5)\n    for ten in range(6):\n        # Iterate through the possible numbers of twenty-pence coins used (0 to 3)\n        for twenty in range(4):\n            # Only one choice for fifty-pence coins (0 or 1)\n            for fifty in range(2):\n                if 10*ten + 20*twenty + 50*fifty == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # Worst case: alternate picking of each color\n    # 1 red, 1 green, 1 red -> took 3 stickers but no 2 stickers of same color yet\n    # Next sticker we take must be either red or green, guaranteeing 2 stickers of the same color\n    # So we must take at least 4 stickers to be sure we have 2 stickers of the same colour\n\n    ans = 4\n    return ans\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    blue_balls = 5\n    orange_balls = 4\n    yellow_balls = 2\n\n    # Calculate the worst-case scenario based on the Pigeonhole principle\n    # She needs to draw all balls of the other two colors plus one to ensure she has 4 of the same color\n    max_others = orange_balls + yellow_balls\n    balls_needed = max_others + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    duckling_legs = 4 * 2  # 4 ducklings with 2 legs each\n    baby_geese_legs = 2 * 2  # 2 baby geese with 2 legs each\n    total_other_legs = duckling_legs + baby_geese_legs\n    remaining_legs = 36 - total_other_legs\n    lamb_legs = 4  # Each lamb has 4 legs\n    num_lambs = remaining_legs // lamb_legs\n    return num_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    # Number of teams.\n    num_teams = 5\n    # Since each team plays with every other team exactly once, \n    # we use the formula for the number of handshakes, which is the same \n    # as the number of matches in this context: n * (n - 1) / 2.\n    ans = num_teams * (num_teams - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_sweets = 570\n    \n    # Equation based on the number of sweets given:\n    # 2 sweets per boy and 4 sweets per girl.\n    equation1 = Eq(2 * boys + 4 * girls, total_sweets)\n    \n    # Equation based on the ratio of boys to girls: three times as many boys as girls.\n    equation2 = Eq(boys, 3 * girls)\n    \n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = ['3', '1', '9', '2']\n    largest_number = int(''.join(sorted(digits, reverse=True)))\n    smallest_number = int(''.join(sorted(digits)))\n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Top layer has 1^2 boxes\n    top_layer = 1**2\n    # Second layer has 2^2 boxes\n    second_layer = 2**2\n    # Third layer has 3^2 boxes\n    third_layer = 3**2\n\n    # Total number of boxes is the sum of boxes in each layer\n    total_boxes = top_layer + second_layer + third_layer\n\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed_A = 600 * (3/5)\n    good_copies_needed_B = 600 * (2/5)\n    \n    total_copies_A = good_copies_needed_A * (5/4)\n    total_copies_B = good_copies_needed_B * (6/5)\n    \n    total_copies = total_copies_A + total_copies_B\n    \n    return int(total_copies)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    terms_sum = 1.2 + 1.23 + 1\n    first_product = terms_sum * terms_sum\n    second_product = terms_sum * (1.2 + 1.23)\n    ans = first_product - second_product\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for number in range(100, 200):\n        if str(number) == str(number)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the number of hours the son takes to harvest the crops by himself\n    s = symbols('s')\n\n    # Equation representing the work done (work = rate * time)\n    # The farmer’s rate of work is 1/24 per hour (since he can finish in 24 hours by himself)\n    # The son’s rate of work is 1/s per hour\n    equation = Eq(1/24 * 16 + 1/s * 6, 1)\n\n    # Solve for s\n    son_hours = solve(equation, s)\n\n    return son_hours[0]\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    days_in_january = 31\n    total_smiles_in_january = average_smiles_per_day * days_in_january\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    num_students = 40\n    side_length = math.isqrt(num_students)\n    return side_length\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Calculate the amount of sugar each person has.\n    annie_sugar = 300 * 0.15\n    becky_sugar = 400 * 0.25\n    carol_sugar = 300 * 0.35\n\n    # Calculate the total amount of sugar after mixing.\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n\n    # Calculate the total mass of the solution after mixing.\n    total_solution = 300 + 400 + 300\n\n    # Calculate the concentration of the resulting sugar solution.\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    bounce_height = initial_height / 2\n    total_distance = initial_height + bounce_height * 2\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy = 96\n    timmy = symbols('timmy')\n    kevin = symbols('kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    \n    solutions = solve((equation1, equation2), (timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_five = 1/6\n    expected_number_of_fives = total_rolls * probability_of_five\n    return expected_number_of_fives\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    divisible_by_36 = [i for i in range(100, 1000) if i % 36 == 0]\n    return max(divisible_by_36)\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_ways = factorial(5)  # Total ways to arrange 5 children without any restriction\n\n    # Now, calculate arrangements where Hugh is between Louise and Richard\n    # Treat Louise, Hugh, and Richard as a single unit when Hugh is between them, \n    # so we have 3 units to arrange (LHR unit, the 4th child, and the 5th child)\n    lhr_unit_ways = factorial(3)  # Ways to arrange Louise, Hugh, and Richard in the LHR unit\n    other_two_ways = factorial(3)  # Ways to arrange the LHR unit with the other two children\n\n    # Subtract the invalid arrangements from total arrangements\n    valid_ways = total_ways - (lhr_unit_ways * other_two_ways)\n\n    return valid_ways\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    ans = 10 - 1 + 1\n    return ans\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n    \n    total = (quotient * divisor) + remainder\n    \n    return total\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    terms = [(40 - 2*i) * (-1)**(i+1) for i in range(20)]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    chocolate_price_each = 75  # price in pence\n    pen_price_each = 95        # price in pence\n    number_chocolates = 4\n    number_pens = 3\n    note_value = 1000          # £10 note in pence\n\n    total_cost = (chocolate_price_each * number_chocolates) + (pen_price_each * number_pens)\n    \n    change = note_value - total_cost\n    \n    return change\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    first_price = initial_price * (1 - first_discount)\n    final_price = first_price * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    total_numbers = 8\n    mean_of_all = 555\n    diff_between_means = 296\n\n    # Calculate the total sum of the 8 numbers\n    total_sum = total_numbers * mean_of_all\n\n    # Let the mean of the last 5 numbers be x\n    # Then mean of the first 3 numbers will be x - diff_between_means\n    # We have 3*(x - diff_between_means) + 5*x = total_sum\n    # This simplifies to 8*x - 3*diff_between_means = total_sum\n\n    # Solve for x, the mean of the last 5 numbers\n    mean_of_last_5 = (total_sum + 3 * diff_between_means) / total_numbers\n    return mean_of_last_5\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    start = 2\n    end = 100\n    step = 2\n\n    multiples_of_two = (end - start) // step + 1\n\n    return multiples_of_two\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    from fractions import Fraction\n\n    # Total matches are the sum of wins, draws, and losses\n    # Since losses are given directly, we use the fractions for wins and draws to express total matches\n    losses = 10\n    fraction_wins = Fraction(2, 5)\n    fraction_draws = Fraction(7, 20)\n\n    # Let total_matches be the common denominator of fractions of wins and draws\n    total_matches = fraction_wins.denominator * fraction_draws.denominator\n\n    # Calculate the number of winning and drawing matches\n    wins = total_matches * fraction_wins\n    draws = total_matches * fraction_draws\n\n    # Calculate the total points by awarding 3 points per win and 1 point per draw\n    points = wins * 3 + draws * 1\n\n    # Adjust the total_matches according to the loss ratio\n    total_matches = (total_matches * losses) / (total_matches - wins - draws)\n\n    # Recalculate the number of wins and draws with adjusted total_matches\n    wins = total_matches * fraction_wins\n    draws = total_matches * fraction_draws\n\n    # Recalculate the total points with adjusted total matches\n    points = wins * 3 + draws\n\n    return points\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n\n    # Vicky has 99 stickers.\n    equation1 = Eq(vicky, 99)\n    # She has 3 less than 6 times as many stickers as Timmy.\n    equation2 = Eq(vicky, 6 * timmy - 3)\n    # Kevin has 32 more stickers than Timmy.\n    equation3 = Eq(kevin, timmy + 32)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 5\n\n    rate_per_person = 1 / (initial_people * initial_days)\n    total_work = 1  # assuming the total work to build the bridge is 1 unit\n\n    # Work needed per day to complete the bridge in target_days\n    work_per_day = total_work / target_days\n\n    # People needed to achieve work_per_day\n    people_needed = work_per_day / rate_per_person\n\n    more_people_needed = people_needed - initial_people\n\n    return int(more_people_needed)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n    bud_position_from_front = pip_position + children_between + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for amount of money\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Equations based on the problem statement\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), (rasidah * (1 - 3/5)) / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    # Extracting the value for the amount of money that Rasidah had initially\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_current_age = 53\n    mother_current_age = 81\n\n    years_ago = symbols('years_ago')\n    equation = Eq((isaac_current_age - years_ago), (mother_current_age - years_ago) / 3)\n\n    ans = solve(equation, years_ago)[0]\n\n    return ans\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    grandma_age = solve_congruence(*congruences)\n\n    return grandma_age[0]\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    conversion_factor = 2.2\n    kg = pounds / conversion_factor\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        # Summing continuously from a to b-1\n        sum_pos = sum(range(a, b))\n        # Subtracting b from the sum\n        result = sum_pos - b\n        return result\n\n    # Applying the custom operation for 5⊕10 and 4⊕9 and subtracting the second from the first\n    ans = custom_op(5, 10) - custom_op(4, 9)\n\n    return ans\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8\n    cat_speed = 3\n    distance_behind = 500\n\n    relative_speed = elena_speed - cat_speed\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [1, 2, 3]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for prime in range(2, 21):\n        if isprime(prime) and isprime(prime + 6) and isprime(prime - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    # Find the pattern in the sequence\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    # Second level differences to find double arithmetic pattern\n    double_diff = [differences[i + 1] - differences[i] for i in range(len(differences) - 1)]\n\n    # Next difference in the pattern would be last difference plus constant second level difference\n    next_difference = differences[-1] + double_diff[-1]\n\n    # Next number in the sequence is the last number plus the next difference\n    next_number = 50 + next_difference\n\n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n    digits = ['1', '2', '3', '4', '5']\n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number % 2 == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            if tens + ones == 15:\n                return tens * 10 + ones\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    total_weight_initial = 8 * 50\n    total_weight_final = 9 * 52\n    extra_apple_weight = total_weight_final - total_weight_initial\n    return extra_apple_weight\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # The number of times a particular lamp is toggled is equal to the\n    # number of its divisors. Since every lamp is toggled an even number\n    # of times except for the ones with a square number (because square\n    # numbers have an odd number of divisors), only the lamps which are\n    # at the positions of square numbers will be left on.\n\n    # Find all the square numbers less than or equal to 250\n    squares = [i**2 for i in range(1, int(250**0.5) + 1)]\n\n    # The number of square numbers in the range is the answer\n    ans = len(squares)\n    return ans\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -4**2\n    return x\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    numbers = [99, 98, 97, 96]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pages = symbols('pages')\n    \n    original_time = pages / 50\n    speeded_time = pages / 70\n    equation = Eq(original_time - speeded_time, 2)\n\n    ans = solve(equation, pages)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    count = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n\n    # Iterate through the years until we find the next 28th January that is a Monday\n    year = start_date.year\n    while True:\n        year += 1\n        next_year_date = datetime(year, 1, 28)\n\n        # Account for leap year every 4 years, if the current year is a leap year,\n        # we need to add one additional day to our one_year timedelta\n        if year % 4 == 0:\n            if year % 100 != 0 or (year % 100 == 0 and year % 400 == 0):\n                next_year_date += one_day\n\n        if next_year_date.weekday() == 0:  # 0 is Monday\n            return year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for dividend in range(8, 1000):\n        if (dividend - 7) % 8 == 0:\n            divisor = (dividend - 7) // 8\n            return dividend, divisor\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Calculate the distance covered while jogging\n    jogging_time = 1  # Star jogs from 6:30 AM to 7:30 AM which is 1 hour\n    jogging_speed = 6  # jogging at a speed of 6 miles per hour\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Calculate the distance covered while walking\n    walking_time = 2  # Star walks from 7:30 AM to 9:30 AM which is 2 hours\n    walking_speed = 5  # walking at a speed of 5 miles per hour\n    walking_distance = walking_speed * walking_time\n    \n    # Calculate the total distance\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    saved_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = original_amount + (saved_per_day * days_saved)\n    total_left = total_saved - (lent_to_brother + spent_on_snacks)\n    \n    return total_left\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n\n    expressway_per_company_per_day = total_expressway / (companies * days)\n    return expressway_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.10\n    members = 30\n\n    discounted_cost = normal_cost * (1 - discount)\n    cost_per_member = discounted_cost / members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_charge = 0.8  # The charge for calls up to 15 minutes\n    additional_charge = 0.05  # The charge for each additional minute\n    total_charge = 1.4  # The total amount charged to Ryan\n\n    additional_minutes_cost = total_charge - base_charge\n    additional_minutes = additional_minutes_cost / additional_charge\n\n    base_minutes = 15  # The provided free minutes\n    total_minutes = base_minutes + additional_minutes\n\n    return total_minutes\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    last_digit_of_2_pow = (2 ** (2017 % 4)) % 10\n    last_digit_of_3_pow = (3 ** (2017 % 4)) % 10\n    ans = (last_digit_of_2_pow * last_digit_of_3_pow) % 10\n    return ans\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    ans = (55 + 13) // 4\n    return ans\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Analyzing the pattern\n    # 4◈7 = (4+7) - 4 = 21\n    # 6◈22 = (6+22) - 8 = 20\n    # 8◈30 = (8+30) - 12 = 26\n    # Observing the pattern, it seems like a◈b = (a+b) - 2a = b - a\n    # Let's apply this to 9◈20\n    \n    a = 9\n    b = 20\n    ans = b - a\n   \n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x - 4) / 2 + 11, 37)\n\n    solved_value = solve(equation, x)\n\n    return solved_value[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    # Find the smallest multiple of 5 greater than or equal to 56\n    # and the largest multiple of 5 less than or equal to 120\n    smallest_multiple = (56 + 4) // 5 * 5\n    largest_multiple = 120 // 5 * 5\n    \n    # Calculate the number of multiples of 5 in the range\n    num_multiples = (largest_multiple - smallest_multiple) // 5 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(10 - 2*x + 7*x, 35)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina's age in 2005\n    gina_age_2005 = 50\n    # James's age in 1997\n    james_age_1997 = 20\n    \n    # Finding the year when Gina was 35\n    year_when_gina_35 = 2005 - (gina_age_2005 - 35)\n    \n    # Finding the difference in years between 1997 and the year when Gina was 35\n    years_difference = year_when_gina_35 - 1997\n    \n    # Calculating James's age when Gina was 35\n    james_age_when_gina_35 = james_age_1997 + years_difference\n    \n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_quarters = 2 + 1/2\n    num_quarters = total_quarters * 4\n\n    return int(num_quarters)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5\n    eddie_position = 9\n    people_between = 2\n\n    total_people = (lucy_position - 1) + people_between + (eddie_position - 1) + 1\n\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        if int(f'26{B}789') % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    from sympy import primerange\n\n    # Given prime numbers under 10 (since the remainder must be less than the divisor)\n    # 2, 3, 5, 7 are the prime numbers which could be remainders of the division.\n    primes = list(primerange(1, 10))\n\n    # Initialize potential answers list\n    potential_answers = []\n\n    # Check all 4 permutations of the chosen prime numbers as remainders.\n    from itertools import permutations\n    for remainder in permutations(primes, 4):\n        # Check concurrent remainders using Chinese Remainder Theorem\n        from sympy.ntheory.modular import solve_congruence\n        congruences = [(remainder[0], 3), (remainder[1], 5), (remainder[2], 7), (remainder[3], 8)]\n        solution = solve_congruence(*congruences)\n        if solution:\n            potential_answers.append(solution[0])\n\n    # Return the smallest possible value\n    return min(potential_answers)\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # converting meters to centimeters\n    cut_length_cm = 5 * 100 + 8  # converting meters to centimeters\n    \n    remaining_length_cm = total_length_cm - cut_length_cm\n    stripe_length_cm = remaining_length_cm // 9  # calculating the length of each stripe in centimeters, using floor division for integer result\n    \n    stripe_length_m = stripe_length_cm // 100  # converting centimeters to meters for the stripe length\n    stripe_length_cm_only = stripe_length_cm % 100  # finding the remaining centimeters\n\n    # The length of each stripe of cloth in meters and centimeters\n    ans = (stripe_length_m, stripe_length_cm_only)\n    return ans\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 4) * 7 - 21, 35)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of orchids, tulips, and roses as o, t, and r respectively.\n    o, t, r = symbols('o t r')\n    \n    # Based on the ratio of orchids to tulips, we can write an equation for t in terms of o.\n    equation1 = Eq(t, (5/3) * o)\n    \n    # The initial total number of flowers is 3616\n    equation2 = Eq(o + t + r, 3616)\n    \n    # After selling the flowers, 2644 flowers are left\n    # Sold flowers: 40% of orchids, 1/5 of tulips, and 25% of roses\n    # Still in the shop: 60% of orchids, 4/5 of tulips, and 75% of roses\n    equation3 = Eq(o * 0.6 + t * 0.8 + r * 0.75, 2644)\n    \n    # Now we solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (o, t, r))\n\n    # Return the number of orchids\n    return solutions[o]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Max number of pupils that could be left-handed\n    max_left_handed = total_pupils - right_handed\n\n    # The smallest number of right-handed girls would be when all the left-handed \n    # pupils are girls. So we subtract the max number of left-handed pupils from \n    # the total number of girls\n    right_handed_girls = girls - max_left_handed\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    result = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return result\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n    equation1 = Eq(12 * books + 9 * files, 336)\n    equation2 = Eq(books, files + 14)\n\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    total_animals = 10\n    total_legs = 34\n\n    # Let's denote chickens as x and rabbits as y\n    # We know that x + y = total_animals\n    # And we also know that 2*x + 4*y = total_legs (because chickens have 2 legs and rabbits have 4 legs)\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if 2 * chickens + 4 * rabbits == total_legs:\n            return chickens  # We return the number of chickens since the problem asks for that\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    result = 60.2 / 7\n    return round(result, 10)\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    # Create an empty list to store the last digit of each raising to power 2013\n    ones_digit_list = []\n    # Loop through the numbers 1 to 9\n    for i in range(1, 10):\n        # The last digit pattern of any number raised to any power repeats every 4\n        # So to find the last digit of number^2013, we find the last digit of number^(2013 % 4)\n        last_digit = (i ** (2013 % 4)) % 10\n        # Add the last digit to the list\n        ones_digit_list.append(last_digit)\n    # Sum all last digits and find the last digit of the sum\n    ans = sum(ones_digit_list) % 10\n    return ans\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # In the worst case scenario, Peter would pick a sock of each color before picking a matching one.\n    # So after picking 3 socks (one of each), the next sock he picks must match one of the previously picked ones.\n    return 3 + 1  # 3 socks of different colors + 1 guaranteed match\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    departure_hour_japan = 20  # 8pm in 24-hour format\n    arrival_hour_france = 1    # 1am in 24-hour format\n    duration_in_france = 24 - (departure_hour_japan - arrival_hour_france)  # Time difference calculation\n    time_difference = 7  # Japan is 7 hours ahead\n\n    flight_duration = duration_in_france - time_difference  # Adjusting for time zone differences\n    if flight_duration <= 0:\n        flight_duration += 24  # Correcting for negative duration if flight crossed the midnight\n\n    return flight_duration\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    digits = 0\n    \n    for i in range(1, 132):\n        digits += len(str(i))\n        \n    return digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted_questions = total_questions - not_attempted\n    score = 168\n\n    # Let x be the number of correct answers\n    # Then (attempted_questions - x) is the number of wrong answers\n    # 4 * correct answers - 1 * wrong answers = total score\n    # 4x - (attempted_questions - x) = score\n    # 4x - attempted_questions + x = score\n    # 5x = score + attempted_questions\n    # x = (score + attempted_questions) / 5\n\n    correct_answers = (score + attempted_questions) / 5\n    return int(correct_answers)\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the cost of one necklace and e be the cost of one earring\n    n, e = symbols('n e')\n\n    # Equation based on first scenario: 9 necklaces and 5 earrings cost $1440\n    equation1 = Eq(9 * n + 5 * e, 1440)\n\n    # Equation based on the second scenario: 2 necklaces and 3 earrings cost $439\n    equation2 = Eq(2 * n + 3 * e, 439)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (n, e))\n    \n    # Find the total cost of 1 necklace and 1 earring\n    total_cost = solutions[n] + solutions[e]\n\n    return total_cost\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n    initial_condition = Eq(eugene, 5 * sid)\n    after_spending_condition = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((initial_condition, after_spending_condition), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # Total number of choices for the first digit (1 or 2)\n    choices_for_first_digit = 2\n    \n    # Total number of choices for the second digit (0, 1, or 2)\n    choices_for_second_digit = 3\n    \n    # Using the multiplication rule for counting\n    total_numbers = choices_for_first_digit * choices_for_second_digit\n    \n    return total_numbers\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    average = 200 // 5\n    smallest = average - 2 * 2  # Because it's even and we're looking for the smallest number\n    return smallest\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the volume of sugar solution transferred\n    x = symbols('x')\n    \n    # The initial amount of sugar in container A (in grams)\n    sugar_A_initial = 50 * 0.1\n    \n    # The initial amount of sugar in container B (in grams)\n    sugar_B_initial = 30 * 0.2\n    \n    # The final concentration of sugar in both containers will be the same, so we set up an equation\n    # The amount of sugar in container A after transfer: (sugar_A_initial - 0.1*x + 0.2*x)\n    # The amount of water in container A after transfer: (50 - x + x)\n    # The amount of sugar in container B after transfer: (sugar_B_initial - 0.2*x + 0.1*x)\n    # The amount of water in container B after transfer: (30 - x + x)\n    \n    # We create two equations, one for the sugar concentration remaining the same in A after transfer,\n    # and one for B. The equations are equal since the final concentration is the same in both.\n    equation = Eq((sugar_A_initial - 0.1*x + 0.2*x)/(50), \n                  (sugar_B_initial - 0.2*x + 0.1*x)/(30))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    sum = 0\n    numerator = 1\n    denominator = 1\n    for i in range(97, 2, -1):\n        numerator *= (101 - i)\n        denominator *= i\n        sum += numerator / denominator\n    return sum + 1 # account for the first term which is 100/97\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    time_to_cut_once = 8 / (5 - 1)  # Time to cut the wood into one section\n    time_for_6_cuts = time_to_cut_once * 6  # Time needed for 6 cuts\n    return time_for_6_cuts\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n\n    remaining_votes = total_votes - (mark_votes + nicole_votes + peter_votes)\n    \n    # Peter needs to get more votes than the sum of the votes of the other two candidates\n    required_votes = (mark_votes + nicole_votes + 1 - peter_votes)\n\n    # If the remaining votes are not enough for Peter to win, it's impossible\n    more_votes_needed = max(0, required_votes - remaining_votes)\n\n    return more_votes_needed\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls + 7, boys)\n    equation2 = Eq(boys + girls, 995)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    numbers = [31, 32]\n    units_values = [num % 10 for num in numbers]\n    max_units_val = max(units_values)\n    index_of_max = units_values.index(max_units_val)\n    ans = numbers[index_of_max]\n    return ans\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount_pence = 490  # Total money in the box in pence.\n    # Let's assume the number of each coin type is 'n'.\n    # Since there are equal numbers of 5p, 10p, and 20p coins, we have:\n    # 5n + 10n + 20n = total_amount_pence\n    # The total amount contributed by each type of coin is a multiple of its value, we get:\n    # 35n = total_amount_pence\n    # Solving for n:\n    n = total_amount_pence // 35\n\n    # The total number of coins is 3 times n (since there are 3 types of coins with n coins each)\n    return 3 * n\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction = 189\n    percentage_reduction = (reduction / original_price) * 100\n\n    return percentage_reduction\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_amount = 100\n    book_cost = initial_amount * 0.10\n    remaining_after_book = initial_amount - book_cost\n    dvd_cost = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - dvd_cost\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money = 28  # in dollars\n    gift_cost = 20    # in dollars\n\n    # Convert remaining amount to cents\n    return (total_money - gift_cost) * 100  # in cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n\n    balance = principal * ((1 + rate) ** time)\n\n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    # For 1-9, there are 9 numbers, 1 digit each\n    one_digit = 9\n    \n    # For 10-99, there are 90 numbers, 2 digits each\n    two_digits = 90 * 2 \n    \n    # For 100-185, there are 86 numbers, 3 digits each\n    three_digits = (185 - 99) * 3\n    \n    # Sum of all digits used\n    total_digits = one_digit + two_digits + three_digits\n    \n    return total_digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary_before_raise = 24000\n    monthly_salary_before_raise = annual_salary_before_raise / 12\n    pay_raise_percentage = 10 / 100\n    pay_raise_amount = monthly_salary_before_raise * pay_raise_percentage\n    new_monthly_salary = monthly_salary_before_raise + pay_raise_amount\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Create the equation\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n    \n    # Solve the equation\n    sol = solve(equation, x)\n    \n    # Return the solution\n    return sol[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    ans = 7842 - 998\n    return ans\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    n = 9  # number of terms\n    S = 135  # sum of arithmetic sequence\n    \n    # Since we know the sum of the arithmetic sequence (S = n/2 * (a1 + an)),\n    # and we know every day he eats 3 more sweets than the day before (an = a1 + (n-1)*d),\n    # where d is the common difference,\n    # we can write the system of equations as:\n    # S = n/2 * (2*a1 + (n-1)*d),\n    # we can rewrite as 2*S = n * (2*a1 + (n-1)*d),\n    # And since we know S and n, we have two equations and two unknowns.\n    \n    # Let's use these two equations to find the first term (a1) and the common difference (d).\n    # We can solve one of these equations to find a1 in terms of d (or vice versa) and then plug it back in to find the other variable.\n    # However, since we care about the last day (an), let's find an directly by rewriting S = n/2 * (a1 + an).\n\n    # 2*S = n * (a1 + an), we know S and n, so we need to find a1 + an, then subtract a1 to find an.\n    # Also, from the sum of arithmetic sequence formula we can also say that S = n/2 * (2*a1 + (n-1)*d)\n    # Therefore, comparing the two, we get 2*a1 + (n-1)*d = a1 + an.\n    # This simplifies to a1 = an - (n-1)*d\n    # We can now substitute the value of a1 from the above into 2*S = n * (a1 + an)\n    # So we get 2*S = n * (an - (n-1)*d + an) = n * (2*an - (n-1)*d)\n    # Reorder to find an: 2*an = (2*S/n) + (n-1)*d\n    # Since d is known, which is 3, we can solve for an directly: an = ((2*S/n) + (n-1)*3) / 2\n    \n    d = 3  # common difference (each day 3 more sweets)\n    an = ((2*S/n) + (n-1)*d) / 2\n    \n    return int(an)\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    return 123 - (23 + 56)\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):  # Assuming the month is from January (1) to December (12)\n        for day in range(1, 32):  # Assuming the day is from 1 to 31 (maximum number of days in a month)\n            if month * 31 + day * 12 == 376:  # Check the condition given by Betty\n                if month < 10:\n                    str_month = '0' + str(month)  # Add leading zero for months less than 10\n                else:\n                    str_month = str(month)\n                if day < 10:\n                    str_day = '0' + str(day)  # Add leading zero for days less than 10\n                else:\n                    str_day = str(day)\n                return str_day + str_month  # Return the formatted date of birth as \"ddmm\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    total_left_side = 4.08 * 20\n    total_part_right_side = 1.08 * 20\n    missing_number = (total_left_side - total_part_right_side) / 20\n    return missing_number\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    return (119 + 117 + 113 + 109 + 105 + 101) - (115 + 111 + 107 + 103 + 99)\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    ans = 158 * 23\n    return ans\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = price_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_original_price = 6  # in pounds\n    protractor_original_price = 0.30  # in pounds (30p)\n    \n    calculator_sale_price = calculator_original_price * (1 - 1/4)  # reduced by a quarter\n    protractor_sale_price = protractor_original_price * (1 - 1/2)  # half price\n    \n    total_cost = (8 * calculator_sale_price) + (20 * protractor_sale_price)\n    \n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_needed = 40\n    milk_needed = 80\n    tom_flour = 25\n\n    milk_to_use = (tom_flour / flour_needed) * milk_needed\n\n    return milk_to_use\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    total_sweets = sweets_taken + sweets_left\n    return total_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    younger_age_now = 18\n    older_age_future = 62\n    # Let's assume the difference in age between the younger and older elephant remains the same\n    age_difference = older_age_future - younger_age_now\n    # The older elephant's age now is the age difference plus the current age of the younger elephant\n    older_age_now = younger_age_now + age_difference\n\n    return older_age_now\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # 27 oxen can finish eating in 6 weeks\n    # Rate of work done by one ox in one week is 1/(27*6)\n    # 23 oxen can finish eating in 9 weeks\n    # Rate of work done by one ox in one week is 1/(23*9)\n    # For a constant amount of work, Work = Rate x Time\n    # So, 27 * 6 = 23 * 9 = Total Work\n    total_work = 27 * 6\n\n    # We need to find the time taken by 21 oxen to finish the total_work\n    # Time = Work / Rate\n    # Since the rate is 21 oxen, each doing the work of 1/(27*6) per week\n    # Time taken by 21 oxen to finish the work is total_work / (21 * one_ox_rate)\n    one_ox_rate = 1 / total_work\n    time_taken_by_21_oxen = total_work / (21 * one_ox_rate)\n\n    return time_taken_by_21_oxen\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds_of_tonnes = (2/3) * tonnes\n    kilograms = two_thirds_of_tonnes * 1000  # Since 1 tonne equals 1000 kilograms\n    return kilograms\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Calculate biking distance\n    biking_speed = 10  # 10 miles per hour\n    biking_time = 1  # 7:30 AM to 8:30 AM is 1 hour\n    biking_distance = biking_speed * biking_time\n\n    # Calculate train distance\n    train_speed = 50  # 50 miles per hour\n    train_time = 2  # 8:30 AM to 10:30 AM is 2 hours\n    train_distance = train_speed * train_time\n\n    # Calculate total distance\n    total_distance = biking_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "from sympy.functions.combinatorial.numbers import nT\n\ndef solution():\n    # Represent the problem as distributing n indistinguishable items (balls)\n    # into k distinct bins (boxes), which is the stars and bars problem.\n    # In stars and bars we have n stars (balls) and k - 1 bars (dividers between boxes).\n    # Thus, we have n + k - 1 slots to fill with either stars or bars.\n    # This translates to n + k - 1 choose k - 1.\n    n = 5  # number of balls\n    k = 3  # number of boxes\n    ans = nT(n + k - 1, k - 1)\n    return ans\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    return (0.02) ** 2\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n    \n    # Sum of marbles is the total\n    equation = Eq(blue + red + green, 112)\n    \n    solutions = solve(equation, blue)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = 'TEENAGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    numerator = factorial(len(word))\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    \n    return numerator // denominator\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas is the 3rd from the front and 2nd from the back,\n    # which means there are 3 + 2 - 1 rows (subtracting 1 because Lucas is counted twice)\n    rows = 3 + 2 - 1\n\n    # Lucas is the 4th from the left and 3rd from the right,\n    # which means there are 4 + 3 - 1 columns (subtracting 1 because Lucas is counted twice)\n    columns = 4 + 3 - 1\n\n    # Multiply rows by columns to get the total number of students in the array\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let e be the amount of money Ema had at first\n    # Let k be the amount of money Keng Wee had at first\n    e, k = symbols('e k')\n\n    # Ema had $360 less than Keng Wee\n    equation1 = Eq(e, k - 360)\n\n    # Ema spent 1/4 of her money, so she had 3/4 left\n    # Keng Wee spent 4/7 of his money, so he had 3/7 left\n    # In the end, Ema and Keng Wee had the same amount of money\n    equation2 = Eq(e * 3/4, k * 3/7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (e, k))\n\n    return solutions[k]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    \n    original_price = sale_price / (1 - discount_rate)\n    \n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    def sum_of_digits(n):\n        return sum([int(digit) for digit in str(n)])\n    \n    number = 217  # start with the number immediately greater than 216\n    while sum_of_digits(number) != 9:\n        number += 1\n    \n    return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    one_tenth_x = one_fourth_of_36 * 10\n    return one_tenth_x\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    ans = 6.4 * 2.7\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Lucas is 3rd from front to back: There are 2 people behind him\n    back_to_front = 2\n    # Lucas is 2nd from back to front: There are 1 person in front of him\n    front_to_back = 1\n    \n    # This means there are 3 people including Lucas from front to back\n    total_vertical = front_to_back + back_to_front + 1\n\n    # Lucas is 4th from left to right: There are 3 people to his left\n    left_to_right = 3\n    # Lucas is 3rd from right to left: There are 2 people to his right\n    right_to_left = 2\n    \n    # This means there are 5 people including Lucas from left to right\n    total_horizontal = left_to_right + right_to_left + 1\n\n    # The total number of students is the product of the two dimensions of the rectangle\n    ans = total_vertical * total_horizontal\n    return ans\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of girls (g) and boys (b) before transfer\n    g, b = symbols('g b')\n\n    # Initial condition: the number of girls was 9/11 of that of boys\n    eq1 = Eq(g, 9/11 * b)\n\n    # After 2 girls were transferred in, the number of girls becomes 10/11 of that of boys\n    eq2 = Eq(g + 2, 10/11 * b)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (g, b))\n\n    # Calculate the total number of students after the transfer\n    total_students_after = solutions[g] + 2 + solutions[b]\n\n    return total_students_after\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    ans = 418 * 7\n    return ans\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    return 77.5 * 0.52 + 5.2 * 2.25\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = sum(1/i for i in range(1, 11) for j in range(1, i+1))\n    ans += sum(j/i for i in range(1, 11) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y')\n    equation = Eq(2*(3*x - y), 2*x + 4)\n    solution = solve(equation, (x, y))\n\n    x_value = solution[x]\n    y_value = solution[y]\n    \n    return 2*x_value - y_value\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_paid = 5 * 100  # £5 in pence\n\n    milk_cost = 3 * 31  # 3 litres of milk at 31p per litre\n    crisps_cost = 2 * 17  # 2 packets of crisps at 17p each\n    bread_cost = 78  # 1 large loaf of bread at 78p\n    magazine_cost = 105  # 1 magazine costing £1.05 in pence\n\n    total_cost = milk_cost + crisps_cost + bread_cost + magazine_cost\n    change = total_paid - total_cost\n\n    return change\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    # Let's denote the number of sweets Trevor has as T and Siobhan's sweets as S.\n    # According to the problem, we have two equations:\n    # T = 5 * S (Trevor has five times as many sweets as Siobhan)\n    # T = S + 24 (Siobhan has 24 sweets fewer than Trevor)\n    # We can easily solve these two equations by substituting the first into the second.\n\n    # Substitute T from the first equation into the second equation:\n    # 5 * S = S + 24\n    # 4 * S = 24\n    # S = 24 / 4\n    S = 24 // 4\n    \n    # Now we calculate T:\n    # T = 5 * S\n    T = 5 * S\n\n    return T\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of tiles Mr Lim and Mr Tan have\n    lim, tan = symbols('lim tan')\n\n    # Equation 1: lim + tan = 390 (total number of tiles)\n    equation1 = Eq(lim + tan, 390)\n    \n    # Equation 2: lim = 5 * tan (Mr Lim has 5 times as many tiles as Mr Tan)\n    equation2 = Eq(lim, 5 * tan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lim, tan))\n\n    # Calculate the difference in the number of tiles\n    more_tiles = solutions[lim] - solutions[tan]\n\n    return more_tiles\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    current_age = symbols('current_age')\n    future_age = current_age + 12\n\n    equation = Eq(future_age, 3 * current_age)\n    solution = solve(equation, current_age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # A, B, or C can be chosen in 3 ways since exactly one must be chosen.\n    # There are 12 other students (15 - 3 for A, B, and C)\n    # We need to choose the remaining 4 members of the team from these 12 students.\n    # This can be done in comb(12, 4) ways.\n    # Total combinations is the product of these two choices.\n    total_combinations = 3 * comb(12, 4)\n    \n    return total_combinations\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    num_tickets = 7\n    cost_per_ticket = total_cost / num_tickets\n\n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amount of lemon juice and water\n    original_lemon, water = symbols('original_lemon water')\n    \n    # The initial ratio is 2 parts lemon to 3 parts water\n    initial_ratio = Eq(original_lemon/water, 2/3)\n    \n    # After adding 80ml of lemon juice, the ratio becomes 6 parts lemon to 5 parts water\n    new_ratio = Eq((original_lemon + 80)/water, 6/5)\n    \n    # Solve the system of equations to find the original amount of lemon juice and water\n    solutions = solve((initial_ratio, new_ratio), (original_lemon, water))\n    \n    # Return the amount of original lemon juice\n    return solutions[original_lemon]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    savannah_ratio = 5\n    shaila_sweets = 36\n\n    total_sweets = (shaila_sweets * (savannah_ratio + shaila_ratio)) / shaila_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 's' be the total savings Kim originally had\n    s = symbols('s')\n    \n    # According to the problem, we set up the equation\n    # s/3 is what Kim gave to her mother\n    # So, the money spent on dresses and earrings is 177 + 129\n    # The amount left is s - s/3 - (177 + 129)\n    # According to the last condition, the amount left is also 50% of what she gave to her mother, which is s/3 * 50%\n    # The equation is: s - s/3 - (177 + 129) = (s/3) * (50/100)\n    \n    equation = Eq(s - s/3 - (177 + 129), (s/3) * (50/100))\n    \n    # Solving the equation for 's'\n    solutions = solve(equation, s)\n    \n    return solutions[0]\n    \nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = (french_teachers + japanese_teachers) - total_teachers\n\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.30  # 30% increase in speed\n    time_delay = 9 / 60  # 9 minutes in hours\n\n    # Let 'd' be the distance to travel and 't' be the usual time.\n    # Usual time to reach the destination is t = d / usual_speed\n    # Time with increased speed is (t - time_delay) = d / increased_speed\n    # Equating the distances gives us \n    # usual_speed * t = increased_speed * (t - time_delay)\n    # Solving for 't' we get t = increased_speed * time_delay / (increased_speed - usual_speed)\n    t = increased_speed * time_delay / (increased_speed - usual_speed)\n    \n    # Now we use t to find the distance 'd'\n    d = usual_speed * t\n    return d\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    # Let x be the number we're trying to find.\n    x = symbols('x')\n    # Perform the operations as described in reverse to find the value of x.\n    equation = Eq(((x + 8) * 8 - 8) / 8, 80)\n    # Solve the equation to find x.\n    solution_x = solve(equation, x)\n    # Return the solution.\n    return solution_x[0]\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    original_speed = symbols('original_speed')\n    original_time = symbols('original_time')\n    distance = symbols('distance')\n\n    # Increase speed by 25%, so time decreases by 20 minutes (1/3 hour)\n    equation1 = Eq(original_speed * 1.25, distance / (original_time - 20/60))\n\n    # Decrease speed by 45, so time increases by 75%\n    equation2 = Eq(original_speed - 45, distance / (original_time * 1.75))\n\n    # Distance is constant (original_speed * original_time)\n    equation3 = Eq(distance, original_speed * original_time)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (original_speed, original_time, distance))\n\n    return solutions[distance]\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n    for red_ropes in range(total_ropes + 1):\n        blue_ropes = total_ropes - red_ropes\n        if red_ropes * 2 + blue_ropes * 3 == total_length:\n            return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n    \n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    p = (21 * 100) / 30\n    return p\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    first_half_total = 366\n    second_half_average = 65\n    second_half_total = second_half_average * 6\n    total_kwh = first_half_total + second_half_average * 6\n    average_per_month = total_kwh / 12\n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for children in range(1, 7 * 9 + 1):  # Smallest common multiple is 7*9, so we only need to check up to that\n        if children % 7 == 0 and children % 9 == 2:\n            return children\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for x in range(1, 22):\n        y = 22 - x\n        if x < y:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    total_used = brownies + cookies + muffins\n    total_used_simplified = total_used.simplify()\n\n    return total_used_simplified\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for i in range(1, 42):\n        if 41 % i == 0:\n            smaller_factor = i\n            greater_factor = 41 // i + i\n            if smaller_factor * greater_factor - smaller_factor == 41:\n                A = smaller_factor * greater_factor\n                return A * 7\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    ratio_height = 3\n    ratio_width = 4\n    height = 21\n\n    width = (ratio_width / ratio_height) * height\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "from fractions import Fraction\n\ndef solution():\n    product = 1\n    for i in range(2, 12):\n        product *= Fraction(1, 1) + Fraction(1, i)\n    return product\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    return 98 // 7\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(1/2 * nathan, 1/5 * rosephine)\n    equation2 = Eq(1/5 * rosephine, 3/5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n    \n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation = Eq(buzz, 3 * jessie)\n    difference = Eq(buzz - jessie, 450)\n\n    solution = solve((equation, difference), (buzz, jessie))\n\n    return solution[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Equation 1: x - y = 36\n    # Equation 2: x + y = 98\n    # Solve for y in Equation 2: y = 98 - x\n    # Substitute y in Equation 1: x - (98 - x) = 36\n    # Simplify the equation: 2x - 98 = 36\n    # Solve the equation for x: 2x = 134\n    x = 134 / 2\n    \n    # Now find y using Equation 2\n    y = 98 - x\n    \n    # The smaller number is y\n    return y\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    common_difference = 2\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    last_digit_4 = 4**(100 % 2)\n    last_digit_7 = 7**(100 % 4)\n    last_digit_9 = 9**(100 % 2)\n    last_digit_11 = 1  # The last digit of 11 raised to any power is 1\n\n    last_digit = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n    return last_digit\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    return 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_percentage = 0.70\n    correct_marks = 3\n    wrong_marks = -1\n    total_score = 78\n\n    correct_questions = total_questions * correct_percentage\n    wrong_questions = total_questions - correct_questions\n\n    # Let's denote x as the number of correct answers Meng actually got right (not just 70% of the questions)\n    # Then the number of wrong answers Meng got would be (correct_questions - x),\n    # because those are the questions he answered but got wrong\n\n    # The score can thus be calculated by multiplying the number of correct answers by 3 (points per correct answer)\n    # and the number of wrong answers by -1 (points deducted per wrong answer)\n\n    # So the equation is: 3*x - 1*(correct_questions - x) = total_score\n    # which simplifies to: 3*x - correct_questions + x = total_score\n    # therefore: 4*x = total_score + correct_questions\n    # and finally: x = (total_score + correct_questions) / 4.\n\n    x = (total_score + correct_questions) / (correct_marks - wrong_marks)\n\n    # Since we want the number of questions Meng got correct,\n    # we don't need to compensate for the difference between 70% and the actual number.\n    return int(x)\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Let cost of one file be f and cost of one ruler be r.\n    # The given information can be formulated as: 6f + 10r = 40\n    # We are asked to find the cost of 9 files and 15 rulers, which can be represented as: 9f + 15r\n    # We can notice from the equations that 9 files and 15 rulers is exact 1.5 times of 6 files and 10 rulers.\n    # So we can simply take the known total cost of 6 files and 10 rulers and multiply it by 1.5 to get the cost of 9 files and 15 rulers.\n    cost_for_6_files_10_rulers = 40\n    cost_for_9_files_15_rulers = cost_for_6_files_10_rulers * 1.5\n    return cost_for_9_files_15_rulers\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let john's initial amount of money be 'j' and Jessie's initial amount be 'x'.\n    j, x = symbols('j x')\n\n    # Write the equations based on the problem statement.\n    equation1 = Eq(j, (5/13) * x)   # John had 5/13 of Jessie's money.\n    equation2 = Eq(j + 600, (1/2) * (x - 600))  # After transaction, John has 50% of Jessie's money.\n\n    # Solve the equations to find the values of 'j' and 'x'.\n    solutions = solve((equation1, equation2), (j, x))\n\n    # Calculate the total money they had initially which is 'j' + 'x'.\n    total_money = solutions[j] + solutions[x]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    # Start with 1, since we know the digit 1 appears at least once\n    n = 1 \n    # Counters for the digits 1 and 2\n    count_1, count_2 = 0, 0\n\n    # Continue until we find N where the condition is met\n    while True:\n        # Convert current number to string and count digits 1 and 2\n        str_n = str(n)\n        count_1 += str_n.count('1')\n        count_2 += str_n.count('2')\n\n        # Check if the condition is met\n        if count_1 == 15 and count_2 == 14:\n            break\n        \n        # Increment N\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "def solution():\n    from datetime import datetime\n\n    time_format = \"%H:%M\"\n    time_in = datetime.strptime(\"10:30\", time_format)\n    time_out = datetime.strptime(\"11:00\", time_format)\n\n    baking_time = (time_out - time_in).seconds / 60  # Calculate the difference in minutes\n\n    return int(baking_time)\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t_shirts, caps = symbols('t_shirts caps')\n\n    # Given ratio of T-shirts to caps\n    ratio_equation = Eq(t_shirts / caps, 8 / 5)\n\n    # Siti sold 1/4 of the T-shirts and 1/5 of the caps\n    money_equation = Eq((1 / 4) * t_shirts * 3 + (1 / 5) * caps * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((ratio_equation, money_equation), (t_shirts, caps))\n\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    total_cost = (3 * 12) + (5 * 11)  # total cost in pence\n    total_paid = 200  # total paid in pence (£2 coin)\n\n    change_in_pence = total_paid - total_cost\n\n    # Convert change to pounds and pence\n    change_in_pounds = change_in_pence // 100\n    remaining_pence = change_in_pence % 100\n\n    # Combine into a tuple (pounds, pence)\n    ans = (change_in_pounds, remaining_pence)\n\n    return ans\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_children = 7\n\n    harvir_age = youngest_age + age_difference * (number_of_children - 1)\n\n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_cost = 6.97\n    ball_cost = 2.99\n\n    total_spent = calendar_cost + ball_cost\n\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    muffins_flour = 1/5  # kg\n    cookies_flour = 1/2  # kg\n    remaining_flour = 360 / 1000  # convert g to kg\n\n    initial_flour = muffins_flour + cookies_flour + remaining_flour\n\n    return initial_flour\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    # convert pounds to pence, 1 pound = 100 pence\n    total_amount = 500  # 5 pounds in pence\n    orange_price = 26\n    lemon_price = 30\n\n    for oranges in range(total_amount // orange_price + 1):\n        for lemons in range(total_amount // lemon_price + 1):\n            if (oranges * orange_price) + (lemons * lemon_price) == total_amount:\n                ans = oranges + lemons\n                return ans\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    from math import factorial\n    # Since the table is circular, we fix one person's position and arrange the others.\n    # This is a permutation of the remaining (4 - 1) people.\n    return factorial(4 - 1)\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_eggs = symbols('original_eggs')\n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n\n    solutions = solve(equation, original_eggs)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3*a + 2*b\n\n    def times(a, b):\n        return 3*a - 2*b\n\n    ans = delta(times(delta(3, 4), 5), 6)\n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    total_cookies = 298\n    cookies_per_box = 8\n\n    num_boxes = (total_cookies + (cookies_per_box - 1)) // cookies_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    female_day1, male_day1 = symbols('female_day1 male_day1')\n\n    # Day 1 equations\n    equation1 = Eq(male_day1, female_day1 + 450)\n\n    # Day 2 equations\n    female_day2 = female_day1 + 0.15 * female_day1\n    male_day2 = male_day1 - 0.18 * male_day1\n\n    # Total number of visitors on the second day\n    equation2 = Eq(female_day2 + male_day2, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (female_day1, male_day1))\n\n    total_visitors_day1 = solutions[female_day1] + solutions[male_day1]\n    return total_visitors_day1\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n    initial_difference = 220\n    \n    # Leo had $220 more than Jason at first\n    equation1 = Eq(leo - jason, initial_difference)\n    \n    # Leo got extra $180, Jason got extra $1100\n    equation2 = Eq(leo + 180, jason + 1100)\n    \n    # Now, Jason has 2 times as much money as Leo\n    equation3 = Eq(jason, 2 * (leo + 180))\n    \n    solutions = solve((equation1, equation2, equation3), (leo, jason))\n    \n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Sum of all books\n    biographies_factorial = factorial(3)\n    science_fictions_factorial = factorial(4)\n    magazines_factorial = factorial(2)\n    schoolbooks_factorial = factorial(2)\n\n    # The total number of permutations with indistinguishable objects\n    ans = factorial(total_books) // (biographies_factorial * science_fictions_factorial * magazines_factorial * schoolbooks_factorial)\n    \n    return ans\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        if A == 0:\n            continue\n        F = C * 2 % 10\n        if F in perm:\n            continue\n        H = C * 2 // 10\n        if H in perm or H == A or H == F:\n            continue\n        if (C + H) == B and (A + C) == E and (B + B) == E and (A + E + 1) == F:\n            return E * 10000 + F * 1000 + C * 100 + B * 10 + H\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y, z = symbols('x y z')\n    equation = Eq(x + y + z, 7)\n    solutions = solve(equation, dict=True)\n    \n    # Filter positive integer solutions where x, y and z are non-negative\n    positive_solutions = [sol for sol in solutions if all(val >= 0 for val in sol.values())]\n    # Considering identical objects, we divide by factorial of the number of pencil cases\n    count = len(positive_solutions) // 3!\n    return count\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_per_week = 7\n    robots_per_week = robots_per_day * days_per_week\n    return robots_per_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    number = 345\n    while number >= 9:\n        number -= 9\n    return number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000  # Cost of the mansion in pounds\n    number_of_friends = 5   # Number of friends sharing the cost\n\n    # Each friend's share of the cost\n    share = total_cost / number_of_friends\n\n    return share\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    for names in range(51):\n        if 10 * (50 - names) + 15 * names == 555:\n            return names\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the time (in minutes) David walks at the increased speed\n    t = symbols('t')\n    \n    # The first 10 minutes David walks at 150 m/min\n    first_distance = 150 * 10\n    \n    # Then, David increases his speed to 200 m/min\n    increased_speed = 150 + 50\n    \n    # Distance walked at increased speed\n    second_distance = increased_speed * t\n    \n    # Total distance is the sum of distances at both speeds\n    total_distance = first_distance + second_distance\n    \n    # Equation to solve\n    equation = Eq(total_distance, 3700)\n    \n    # Solve for t\n    time_at_increased_speed = solve(equation, t)[0]\n    \n    # Total time spent walking is the initial 10 minutes plus the time at increased speed\n    total_time = 10 + time_at_increased_speed\n    \n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for male and female visitors on the first day\n    m, f = symbols('m f')\n\n    # Equation 1: On the first day, the number of make visitors was 450 more than the number of female visitors.\n    equation1 = Eq(m, f + 450)\n    \n    # Equation 2: On the second day, the number of female visitors increased by 15%\n    # and the number of make visitors decreased by 18%.\n    # The total number of visitors for the second day was 1354.\n    equation2 = Eq(0.85*m + 1.15*f, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, f))\n\n    return solutions[m]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n\n    while position * 2 <= 40:\n        position *= 2\n\n    return position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore time when the plane took off\n    singapore_takeoff_time = 5\n\n    # London time when the plane landed\n    london_landing_time = 11\n\n    # Singapore is 7 hours ahead of London\n    time_difference = 7\n\n    # Adjust the Singapore takeoff time to London time\n    singapore_takeoff_time_in_london = (singapore_takeoff_time - time_difference) % 24\n    \n    # Calculate flight duration\n    if london_landing_time < singapore_takeoff_time_in_london:\n        duration = (24 - singapore_takeoff_time_in_london) + london_landing_time\n    else:\n        duration = london_landing_time - singapore_takeoff_time_in_london\n\n    return duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7 # Sum of hearts, spades, and diamonds\n    \n    # Calculate permutations of all cards, then divide by permutations of identical cards\n    # to eliminate over-counts due to indistinguishable permutations among identical cards.\n    ways = factorial(total_cards) // (factorial(4) * factorial(3) * factorial(7))\n    \n    return ways\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # smallest multiple of 5\n    second_digit = 1  # smallest odd number among natural numbers\n    third_digit = 9  # largest single-digit odd number\n    fourth_digit = 0  # smallest even number in nature\n    fifth_digit = 8  # largest single digit that is a multiple of 2\n    sixth_digit = 3  # smallest odd number greater than 1 in nature\n    seventh_digit = 0  # a multiple of 2 and 5\n\n    phone_number = int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n    return phone_number\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel * 1.3)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages = 0\n    daily_increase = 5\n    pages_read_on_first_day = 20\n    remaining_pages = 80\n    days = 1\n    \n    # Calculate the total pages based on the arithmetic progression until the last day\n    while remaining_pages > pages_read_on_first_day + daily_increase * (days - 1):\n        pages_today = pages_read_on_first_day + daily_increase * (days - 1)\n        total_pages += pages_today\n        remaining_pages -= pages_today\n        days += 1\n    \n    # Add the remaining pages read on the last day\n    total_pages += remaining_pages\n    \n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds = 4/9\n    cashew_nuts = 1/3\n    difference = almonds - cashew_nuts\n\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Johnny's way of solving\n    johnnys_product = quotient * remainder\n    johnnys_sum = johnnys_product + divisor\n\n    # Correct way of solving\n    correct_product = quotient * divisor\n    correct_sum = correct_product + remainder\n    ans = correct_sum\n\n    return ans\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum_positive = sum(range(4, 55, 4))\n    sum_negative = sum(range(2, 53, 4))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 5):\n        s, a, m, o, g = perm\n        if s == 0 or g == 0:\n            continue\n        sasmo = s * 10000 + a * 1000 + s * 100 + m * 10 + o\n        ogams = o * 10000 + g * 1000 + a * 100 + m * 10 + s\n        if sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    # Let the number of boys be b and the number of girls be g\n    # The total number of students is 40, hence b + g = 40\n    # Each boy distributed 4 bags and each girl distributed 3 bags\n    # According to the problem, the boys distributed 62 more bags than the girls:\n    # 4b - 3g = 62\n    \n    # Since b + g = 40, we can express g in terms of b: g = 40 - b\n    # Substituting g into the second equation:\n    # 4b - 3(40 - b) = 62\n    \n    # Calculating the values\n    b = (62 + 3 * 40) / (4 + 3)\n    return int(b)\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # Since the number n repeats n times before moving to n+1,\n    # we can calculate the total count up to but not including 11.\n    # This is the sum of the first 10 natural numbers.\n    total_count = sum(range(1, 11))\n    \n    # In a sorted list with odd count, the median is the middle number.\n    # Since this list is repeating numbers in sequence, \n    # we just need the middle index to find the median.\n    middle_index = total_count // 2  # Using integer division to get the middle index\n    \n    # To find the number at this index, we need to add up numbers\n    # in sequence until we reach or exceed the middle_index.\n    current_number = 1\n    current_count = 0\n    while current_count < middle_index:\n        current_count += current_number\n        current_number += 1\n    \n    # The current_number - 1 is the median since it's the last number\n    # before we exceed the middle index.\n    median = current_number - 1\n    \n    return median\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the length of the part that has been cut\n    cut_length = symbols('cut_length')\n\n    # Equation representing the relationship after cutting the pieces\n    equation = Eq((65 - cut_length), 3 * (29 - cut_length))\n\n    # Solve the equation\n    solution = solve(equation, cut_length)\n\n    # Return the length of the cut part\n    return solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n    expected_number_of_5s = total_rolls * probability_of_5\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    ans = 15 / 0.05\n    return ans\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    numerator = 12 * 6 / 18\n    return int(numerator)\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A/B, 2/3)\n    equation2 = Eq(B/C, 6/5)\n    equation3 = Eq((A + B + C)/3, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    dress_cost = 7 * x\n    skirt_cost = 35\n    total_cost = 441\n    \n    total_dress_cost = 6 * dress_cost\n    total_skirt_cost = 3 * skirt_cost\n\n    equation = Eq(total_dress_cost + total_skirt_cost, total_cost)\n    \n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    # There are five odd digits: 1, 3, 5, 7, 9\n    odd_digits_count = 5\n\n    # For a three-digit number, each digit can be chosen from the odd digits independently.\n    # There are 5 choices for the first digit (cannot be 0)\n    # 5 choices for the second digit, and 5 choices for the third digit.\n    total_numbers = odd_digits_count * odd_digits_count * odd_digits_count\n\n    return total_numbers\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of days it would take the lazy decorator be x.\n    lazy_days = symbols('lazy_days')\n\n    # 1 work unit is the painting of the entire house\n    # energetic rate = 1 work unit / 12 days\n    energetic_rate = 1 / 12\n\n    # lazy rate = 1 work unit / x days\n    lazy_rate = 1 / lazy_days\n\n    # Combined rate when working together: (1/12 + 1/x) work units per day\n    # It takes them 8 days to paint the house together, so the combined rate times 8 days equals 1 work unit\n    equation = Eq(energetic_rate + lazy_rate, 1 / 8)\n\n    # Solve the equation for lazy_days\n    solution = solve(equation, lazy_days)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += (i**2) % 3\n    ans = remainder_sum % 3\n    \n    return ans\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # Let the original length be x, and the original width be y.\n    # The increased length will be x + 12.\n    # The perimeter of the increased rectangle is 2 * (x + 12) + 2y = 38.\n    # The perimeter of the original rectangle is 2x + 2y.\n    # To find the original perimeter, we have to express y in terms of x, and then find x.\n    \n    # Let's solve the equation: 2 * (x + 12) + 2y = 38.\n    \n    # First, express y in terms of x: 2x + 2 * (x + 12) = 38.\n    x = symbols('x')\n    equation = Eq(2 * x + 2 * (x + 12), 38)\n    x_value = solve(equation, x)[0]\n\n    # Calculate y using the x value we found and the perimeter of the increased rectangle.\n    y_value = (38 - 2 * (x_value + 12)) / 2\n\n    # Now, calculate the perimeter of the original rectangle.\n    original_perimeter = 2 * x_value + 2 * y_value\n    return original_perimeter\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = (nell_sweets * total_ratio) // nell_ratio\n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    nth_term = 11\n    \n    # nth term of an arithmetic sequence is given by a_n = a_1 + (n - 1) * d\n    coins_won_by_11th_student = first_term + (nth_term - 1) * common_difference\n    \n    return coins_won_by_11th_student\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of Jamie-Anne's stamps as J and Natasha's as N.\n    J, N = symbols('J N')\n\n    # Equation representing the ratio J:N = 5:3\n    equation1 = Eq(J/N, 5/3)\n\n    # Equation representing that Jamie-Anne has 18 more stamps than Natasha\n    equation2 = Eq(J, N + 18)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (J, N))\n\n    # Adding the stamps of Jamie-Anne and Natasha to get total number of stamps\n    total_stamps = solutions[J] + solutions[N]\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    a, b = symbols('a b')\n    equation = Eq((10 * a + b) + (10 * b + a) + b, (100 * a + 10 * a + b))\n    solutions = solve(equation, (a, b))\n    \n    # Check for valid solutions where a and b are single digit integers\n    valid_solutions = [s for s in solutions if s[a] in range(1, 10) and s[b] in range(10)]\n    if valid_solutions:\n        # Since we just need to find a + b, add them together from the tuple\n        return valid_solutions[0][a] + valid_solutions[0][b]\n    else:\n        return None  # If there are no valid solutions, return None\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sana, mina = symbols('sana mina')\n    \n    # Sana had 8 times as many coins as Mina\n    equation1 = Eq(sana, 8 * mina)\n    \n    # The total number of coins before Mina gave away\n    equation2 = Eq(sana + mina, 234)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sana, mina))\n    \n    # Calculate how many coins Mina had left after giving away 12 coins\n    mina_left = solutions[mina] - 12\n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_on_monday = (3/7) * total_grapes\n    remaining_after_monday = total_grapes - sold_on_monday\n    sold_on_tuesday = (3/8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_on_tuesday\n    grapes_per_bag = 3/4\n\n    num_bags = remaining_after_tuesday / grapes_per_bag\n    return int(num_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n    total_flour = flour_per_student * number_of_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # If Uncle Sam passes 11 lamp posts in 50 seconds,\n    # then he passes 10 intervals (between the lamp posts) in 50 seconds.\n    # We find the time it takes to pass one interval.\n    time_per_interval = 50 / 10\n\n    # Now we calculate how many intervals Uncle Sam passes in 80 seconds.\n    intervals_in_80_seconds = 80 / time_per_interval\n\n    # The number of lamp posts Uncle Sam will cycle past is one more than the number of intervals.\n    lamp_posts_passed = intervals_in_80_seconds + 1\n\n    # We need an integer number of lamp posts.\n    return int(lamp_posts_passed)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Jill calculates 6 flowers for each side and multiplies by 4, not accounting for the corners being shared\n    # Each corner is counted twice (once for each side that meets at the corner)\n    # Therefore, we subtract the 4 corners that have been double-counted\n    flowers_per_side = 6\n    total_sides = 4\n    double_counted_corners = 4\n\n    # Jill's initial calculation\n    jill_preparation = flowers_per_side * total_sides\n\n    # Correct calculation by removing the double-counted corners\n    correct_flowers = jill_preparation - double_counted_corners\n\n    return correct_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of items\n    x = symbols('x')\n\n    # Create the equation based on the problem description\n    equation = Eq((2/3)*x - (x - (2/3)*x - (1/9)*x), 12)\n\n    # Solve for x (total items)\n    total_items = solve(equation, x)\n\n    # Calculate number of lemons\n    lemons = total_items[0] - (2/3)*total_items[0] - (1/9)*total_items[0]\n\n    return lemons\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 100\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # We already know that the number is between 40000 and 50000 so the ten-thousands digit is 4\n    ten_thousands = 4\n\n    # The digit in the hundreds place has a value of 800\n    hundreds = 8    # because the digit itself represents hundreds\n\n    # The digit in the ones place is the sum of all the factors of 4\n    # Factors of 4 are 1, 2, and 4\n    ones = sum([1, 2, 4])\n\n    # The digit in the thousands place is 1 more than the digit in the hundreds place\n    thousands = hundreds + 1\n\n    # The digit in the tens place is the difference between the digit in the hundreds place and the digit in the ones place\n    tens = hundreds - ones\n\n    # Concatenating the digits to form the number\n    ans = int(f\"{ten_thousands}{thousands}{hundreds}{tens}{ones}\")\n    return ans\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    football_field_length = basketball_court_length + 56\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount = 1 - (67.50 / original_price)\n    ana_discount_percentage = ana_discount * 100\n    return ana_discount_percentage\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "from fractions import Fraction\n\ndef solution():\n    left = Fraction(3, 10)\n    right = Fraction(5, 16)\n    s = 1\n    while True:\n        r = (s * left).numerator\n        while Fraction(r, s) <= left:\n            r += 1\n        if left < Fraction(r, s) < right:\n            return s\n        s += 1\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    # Let x be the total number of steering wheels made\n    steering_wheels_first_day = 300\n    steering_wheels_second_day = 250\n\n    total_first_two_days = steering_wheels_first_day + steering_wheels_second_day\n\n    # The given condition: total of the first two days is 5/6 of the total amount made\n    x = total_first_two_days / (5/6)\n\n    return x\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Number of spaces a child takes up is the same as 24/40 of an adult\n    child_space_ratio = 24 / 40\n\n    # Number of child-equivalent spaces already taken up by 15 children\n    spaces_taken_by_children = 15 * child_space_ratio\n\n    # Total number of child-equivalent spaces available\n    total_spaces_available = 24\n\n    # Number of child-equivalent spaces left for adults\n    spaces_left_for_adults = total_spaces_available - spaces_taken_by_children\n\n    # Since 1 adult takes up 1 child-equivalent space, the number of adults that can fit is\n    # just the number of child-equivalent spaces left\n    number_of_adults = spaces_left_for_adults\n\n    return int(number_of_adults)\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy.ntheory import factorint\n    from math import sqrt\n    \n    num = 28\n    factors = factorint(num)\n\n    # Find the smallest number to multiply with `num` to make it a perfect square\n    # A perfect square has all even powers in its prime factorization.\n    mult = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            mult *= prime\n\n    return mult\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    pancakes_per_3_min = 2\n    total_minutes = 12\n    pancakes_in_12_min = (pancakes_per_3_min / 3) * total_minutes\n    return pancakes_in_12_min\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5 * x - 8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    uniform_sizes = 3\n    min_students_same_size = total_students // uniform_sizes + 1\n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    def custom_triangle(a, b):\n        return (a + 2) / b\n\n    inner_result = custom_triangle(6, 4)\n    ans = custom_triangle(8, inner_result)\n\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    # Equation for the amount spent on DVD player\n    spent_on_DVD = 740\n\n    # Equation for the amount spent on television set\n    spent_on_TV = Eq(3/4 * (salary - spent_on_DVD), salary - spent_on_DVD - (1/5 * salary))\n\n    # Solving the equation\n    solved_salary = solve(spent_on_TV, salary)\n\n    return solved_salary[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'russell' be the current age of Russell\n    russell = symbols('russell')\n\n    # Equation representing the given age condition\n    equation = Eq(russell + 32, 4 * (russell - 16))\n\n    # Solve the equation to find Russell's current age\n    age_now = solve(equation, russell)\n\n    return age_now[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    return 40 / 100 * 120\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    # If 6 is directly opposite to 19, the difference in their positions is half the number of people\n    half_circle = 19 - 6\n    total_people = half_circle * 2\n\n    return total_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                pip_number = 1000 * A + 100 * B + 10 * C + A\n                bud_number = 1000 * A + 100 * C + 10 * B + A\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    # Let x be the original number of students in 6B.\n    # Initially, the number of students in 6A is (4/9)*x.\n    # After the reshuffle, 6A loses 3 students and gains 18, so the new number of students in 6A is (4/9)*x - 3 + 18.\n    # 6B gains 3 students and loses 18, so the new number of students in 6B is x + 3 - 18.\n    # The number of students in both classes are now equal, so we have:\n    # (4/9)*x - 3 + 18 = x + 3 - 18\n    # Solve for x and then compute the initial number of students in 6A.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((4/9)*x - 3 + 18, x + 3 - 18)\n    x_value = solve(equation, x)[0]\n\n    initial_6A_students = (4/9)*x_value\n    return int(initial_6A_students)\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make one cut and hence have two pieces\n    # To have 5 pieces, we need to make 4 cuts\n    # Since each cut takes 2 minutes, 4 cuts will take 4 * 2 = 8 minutes\n    cuts_needed = 4\n    time_per_cut = 2\n    total_time = cuts_needed * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # number of spelling books per shelf\n    spelling_books_per_shelf = 9\n    \n    # total number of spelling books\n    total_spelling_books = 72\n    \n    # number of shelves with spelling books\n    shelves_with_spelling_books = total_spelling_books / spelling_books_per_shelf\n    \n    # total number of shelves\n    total_shelves = 15\n    \n    # number of shelves with math books\n    shelves_with_math_books = total_shelves - shelves_with_spelling_books\n    \n    # number of math books per shelf\n    math_books_per_shelf = 4\n    \n    # total number of math books\n    total_math_books = shelves_with_math_books * math_books_per_shelf\n    \n    return total_math_books\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Time taken to walk from the first floor to the fourth floor.\n    time_first_to_fourth = 6\n    \n    # Number of floor intervals between the first and fourth floor.\n    intervals_first_to_fourth = 4 - 1\n    \n    # Time taken for one floor interval.\n    time_per_interval = time_first_to_fourth / intervals_first_to_fourth\n    \n    # Number of floor intervals between the first and the tenth floor.\n    intervals_first_to_tenth = 10 - 1\n    \n    # Total time taken to walk from the first floor to the tenth floor.\n    time_first_to_tenth = time_per_interval * intervals_first_to_tenth\n    \n    return time_first_to_tenth\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    chocolate_per_biscuit = 40 / 100\n    return 75 * chocolate_per_biscuit\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    number_of_days = 7  # Monday to Sunday inclusive\n\n    total_earnings = average_daily_earnings * number_of_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    combinations = pasta_choices * sauce_choices * topping_choices\n\n    return combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n    solutions = solve(equation, n)\n    return solutions\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # In the first game, for the 8th to be opposite the 16th, there must be 16-1=15*2 students in total\n    initial_students = (16 - 8) * 2\n    \n    # In the second game, for the 8th to be opposite the 22nd, there must be 22-1=21*2 students in total\n    final_students = (22 - 8) * 2\n    \n    # The number of new students is the difference\n    new_students = final_students - initial_students\n    \n    return new_students\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Calculate the time taken for each part of the race\n    time_1 = 280 / 7  # time for the first 280 meters\n    time_2 = 400 / 5  # time for the middle 400 meters\n    time_3 = (800 - 280 - 400) / 8  # time for the last part of the race\n    \n    # Sum the times to get the total time spent\n    total_time = time_1 + time_2 + time_3\n    \n    return int(total_time)\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Set up the equations based on the problem statement\n    total_marbles = Eq(anna + betsy + charlene, 168)\n    after_charlene_gives = Eq(charlene - 15, betsy + 15)\n    after_betsy_gives = Eq(betsy + 15 - 8, anna + 8)\n    ratio = Eq(2*(betsy + 15 - 8), 5*(anna + 8))\n    ratio_2 = Eq(5*(charlene - 15), 7*(anna + 8))\n\n    # Solve the system of equations\n    solutions = solve((total_marbles, after_charlene_gives, after_betsy_gives, ratio, ratio_2), (anna, betsy, charlene))\n\n    return solutions[betsy]\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9*6) - (7*6)\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    # We have to find the permutations of the cards, but since there are indistinguishable\n    # cards among them (4 yellow, 3 red, 7 green), we have to divide the total permutations\n    # by the permutations of each group of indistinguishable cards.\n\n    permutations = factorial(total_cards) // (factorial(4) * factorial(3) * factorial(7))\n    return permutations\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lollipops, gum_drops = symbols('lollipops gum_drops')\n\n    # Original ratio\n    equation1 = Eq(lollipops / gum_drops, 5/7)\n\n    # After adding candies, new ratio\n    equation2 = Eq((lollipops + 120) / (gum_drops + 120), 4/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lollipops, gum_drops))\n\n    total_candy_now = solutions[lollipops] + 120 + solutions[gum_drops] + 120\n\n    return total_candy_now\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 268 + 1):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n    \n    # Given dimensions of the rectangular paper\n    length = 1.36  # in meters\n    width = 0.8    # in meters\n    \n    # Convert the dimensions to centimeters to avoid floating point operations\n    length_cm = int(length * 100)\n    width_cm = int(width * 100)\n    \n    # Calculate the greatest common divisor to find the side length of the largest possible square\n    side_length_of_square = gcd(length_cm, width_cm)\n    \n    # Calculate how many squares we can get from the length and width\n    number_of_squares = (length_cm // side_length_of_square) * (width_cm // side_length_of_square)\n    \n    return number_of_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    # We have three options for each place of the three-digit number.\n    # However, to be odd, the last digit must be either 5 or 7.\n    # Therefore, we have two options for the last place.\n\n    # Number of choices for the first digit (can't be zero, only 4 or 5 or 7)\n    first_digit_options = 3\n    \n    # Number of choices for the second digit (can be 4 or 5 or 7)\n    second_digit_options = 3\n    \n    # Number of choices for the third digit (to make the number odd, only 5 or 7)\n    third_digit_options = 2\n    \n    # By the rule of product, we can multiply the options for each digit place.\n    count = first_digit_options * second_digit_options * third_digit_options\n    \n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    return 854 * 100\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    divisible_by_5 = 200 // 5\n    divisible_by_7 = 200 // 7\n    divisible_by_both = 200 // (5 * 7)\n\n    # Inclusion-Exclusion Principle\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_both\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one of each fruit\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(durian + 2 * pineapple + 3 * watermelon, 440)\n    equation2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n    \n    # Solve the system of equations for the cost of fruits\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n    \n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    # Let n be the number of teams. Each team plays every other team twice.\n    # The total number of matches is given by the formula: matches = n * (n - 1)\n    # So we need to solve for n in the equation n * (n - 1) / 2 = 30\n    # We divide by 2 because each match is counted twice (once for each team)\n    \n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    # Set up the equation based on the total number of matches\n    equation = Eq(n * (n - 1) / 2, 30)\n    # Solve for n\n    solutions = solve(equation, n)\n    \n    # There might be two solutions, one positive and one negative, but the number of teams must be positive\n    num_teams = max(solutions)\n    \n    return num_teams\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum(-1 if i % 2 == 1 else i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    # Let x be the original number with the last digit being d (0-9)\n    # Then the number Vicky writes down is 10 times smaller plus d smaller\n    # x - (x // 10) = 135 + d\n    # we know d is less than 10, so we can check all the possibilities\n    for d in range(10):\n        if 9 * (d + 135) % 10 == 0:\n            x = (d + 135) * 10 + d\n            return x\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    capacity = 5\n    \n    # Each trip can take at most 5 people, hence we'll have to subtract one trip for the boat to come back\n    trips_to_cross = (students // (capacity - 1)) + (0 if students % (capacity - 1) == 0 else 1)\n    # The boat has to come back after each group except the last one\n    trips_to_return = trips_to_cross - 1\n    \n    total_trips = trips_to_cross + trips_to_return\n\n    return total_trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let the total number of students be x\n    # According to the given data:\n    # 0.80x students chose Grade A Math\n    # 0.35x students chose Grade B Math\n    # 0.10x students chose neither\n\n    # Total percentage choosing at least one subject = 100% - 10% (neither) = 90%\n    # Total students choosing at least one subject = 0.90x\n\n    # Let's denote the number of students choosing both subjects as y.\n    # y = 75 (given)\n\n    # Total students choosing at least one subject is sum of students choosing A and B minus the students choosing both (since they are counted twice)\n    # 0.90x = 0.80x + 0.35x - y\n    # Combining like terms and substituting the value of y gives:\n    # 0.90x = (0.80 + 0.35)x - 75\n    # 0.90x = 1.15x - 75\n\n    # We can now solve for x\n    # 0.90x - 1.15x = -75\n    # -0.25x = -75\n    # Dividing both sides by -0.25 gives:\n    # x = 75 / 0.25\n\n    # Calculate x\n    x = 75 / 0.25\n\n    # Return the result\n    return int(x)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2\n    hundreds = 3\n\n    ans = hundreds * 100 + tens * 10 + ones\n    return ans\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n    # Function to get the number of factors of a number\n    def count_factors(n):\n        factors = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors += 1\n        return factors\n\n    # Get all combinations of 9 numbers out of 13\n    all_combinations = list(combinations(range(1, 14), 9))\n    valid_combinations = []\n\n    for comb in all_combinations:\n        factors_count = [count_factors(num) for num in comb]\n        \n        # Exactly two students know the count of factors, so we expect two unique counts\n        unique_factors_count = set(factors_count)\n        if len(unique_factors_count) != len(factors_count) - 2:\n            continue\n        \n        # Now check for Alice, May, and Mark's clues\n        for Alice in comb:\n            # Alice has an odd number\n            if Alice % 2 == 0:\n                continue\n            possible_May = Alice - 2\n            possible_Mark = possible_May - 1\n            if possible_May in comb and possible_Mark in comb:\n                # Found a valid combination\n                valid_combinations.append(comb)\n                break\n\n    # Assuming there's only one valid combination which fits all conditions\n    # Find the product of numbers not in the valid combination\n    remaining_numbers = set(range(1, 14)) - set(valid_combinations[0])\n    ans = prod(remaining_numbers)\n    return ans\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial\n\n    numerator = factorial(100)\n    denominator = factorial(99) + factorial(98)\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frank, alex, paul = symbols('frank alex paul')\n    equation1 = Eq(frank - alex, alex - paul)\n    equation2 = Eq(frank + alex + paul, 99)\n\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    return solutions[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "def solution():\n    from itertools import permutations\n    \n    # Generate all permutations of the digits 1, 4, 6, 9\n    digits = [1, 4, 6, 9]\n    all_numbers = [''.join(map(str, p)) for p in permutations(digits)]\n    \n    # Convert the strings to integers and compute the sum.\n    all_numbers_int = [int(number) for number in all_numbers]\n    total_sum = sum(all_numbers_int)\n    \n    # Calculate the average and return it.\n    average = total_sum / len(all_numbers_int)\n    \n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial condition, equal number of boys and girls\n    equation1 = Eq(boys, girls)\n\n    # After 60 boys and 12 girls left, there were twice as many girls as boys\n    equation2 = Eq(girls - 12, 2 * (boys - 60))\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for tens in range(9):\n        for ones in range(9):\n            if tens != ones and tens + ones == 15:\n                return int(\"9\" + str(tens) + str(ones))\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    van_speed = 80  # km per hour\n    car_speed = 120  # km per hour\n    lead_time = 3  # hours\n\n    # The van travels for 3 hours before the car starts, so it has a lead of:\n    lead_distance = van_speed * lead_time  # km\n\n    # Relative speed at which the car is closing the gap:\n    relative_speed = car_speed - van_speed  # km per hour\n\n    # Time it takes for the car to close the gap:\n    catch_up_time = lead_distance / relative_speed  # hours\n\n    # Mason's answer is incorrect if his result is different than catch_up_time\n    mason_answer = 3  # hours\n    is_mason_correct = (mason_answer == catch_up_time)\n\n    return catch_up_time, is_mason_correct\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    # Calculate the total number of hats combinations, including the option of not taking any hats\n    hats_options = 4 + 1  # 4 hats plus the option of no hat\n    \n    # Since shirts, pants, and the skirt are not optional, the number of combinations is fixed\n    shirts_options = 3  # 3 shirts\n    pants_options = 2   # 2 pairs of pants\n    skirt_options = 1   # 1 skirt\n    \n    # Using the multiplication principle for independent events to find the total number of combinations\n    total_combinations = hats_options * shirts_options * pants_options * skirt_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # Convert the repeating decimals to fractions\n    # The repeating decimal 0.01 can be expressed as the fraction 1/99\n    numerator, denominator = 1, 99\n\n    # The product of two identical fractions 1/99 * 1/99\n    product_numerator = numerator * numerator\n    product_denominator = denominator * denominator\n\n    # Simplify the fraction to find the smallest possible denominator\n    # which gives the length of the repetend\n    # Since 1 is a factor of any number, the smallest possible denominator\n    # after simplification would still be 99 * 99\n    # Thus, the length of the repetend is the same as the number of digits\n    # in the denominator (99 * 99)\n    repetend_length = len(str(product_denominator))\n\n    return repetend_length\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Calculate the rate of printer A and B in pages per minute\n    rate_A = 300 / 12\n    rate_B = 300 / 10\n    \n    # Calculate the total rate when both printers are working together\n    total_rate = rate_A + rate_B\n    \n    # Convert half an hour to minutes\n    time_in_minutes = 0.5 * 60\n    \n    # Calculate the total number of pages printed by both printers in half an hour\n    total_pages = total_rate * time_in_minutes\n    \n    return int(total_pages)\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    ans = 72 * 43\n    return ans\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n    two_thirds_apples = 2 * total_items / 3\n    one_ninth_bananas = total_items / 9\n    lemons = total_items - (two_thirds_apples + one_ninth_bananas)\n    equation = Eq(two_thirds_apples - lemons, 12)\n\n    solutions = solve(equation, total_items)\n    total_items_value = solutions[0]\n    lemons_value = total_items_value - (2 * total_items_value / 3 + total_items_value / 9)\n\n    return lemons_value\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):   # Loop through all months\n        for day in range(1, 32): # Loop through all days\n            # Check validity of day with respect to the month\n            if (month == 2 and day > 28) or \\\n               (month in [4, 6, 9, 11] and day > 30):\n                continue\n            \n            # Format the date into an 8-digit number\n            date_str = f\"{day:02d}/{month:02d}/2019\"\n            # Count the occurrences of '3' in the date\n            count += date_str.count('3')\n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of each puff type\n    durian, chocolate, strawberry = symbols('durian chocolate strawberry')\n    \n    # Define the proportional relationship as equations\n    ratio_eq = Eq(durian/chocolate, 3/4) & Eq(chocolate/strawberry, 4/2)\n\n    # Define the equation for the total money collected\n    money_eq = Eq(5*durian + 3*chocolate + 4*strawberry, 560)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, money_eq), (durian, chocolate, strawberry))\n\n    # Calculate the amount of money collected from durian puffs\n    money_from_durian_puffs = 5 * solutions[durian]\n\n    return money_from_durian_puffs\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B, C, D, Zachary, Yvonne, Xavier, Waylon = symbols('A B C D Zachary Yvonne Xavier Waylon', integer=True)\n    \n    # Define the constraints\n    constraints = [\n        Eq(D, 5 * Yvonne),                    # from (3)\n        Eq(Zachary, Yvonne + Xavier),         # from (5)\n        Eq(Zachary + 2 - Xavier, Zachary - Waylon), # from (4)\n        A > C, A < D,                          # from (1)\n        B < Xavier                            # from (2)\n    ]\n    \n    # Define the domain for each person's level\n    domains = [And(i >= 1, i <= 18) for i in [A, B, C, D, Zachary, Yvonne, Xavier, Waylon]]\n    \n    # Solve the system of equations with the constraints\n    solutions = solve(constraints + domains)\n    \n    # Find all possible levels for A\n    possible_levels_for_A = [s[A] for s in solutions]\n    return possible_levels_for_A\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Since the cuboid is 7x5x14, we can determine the dimensions of the small cubes are 1x1x1.\n    # Cubes that have exactly three faces painted will be the corners of the cuboid.\n    # There are 8 corners on a cuboid.\n    \n    num_corners = 8\n    \n    return num_corners\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):  # The tens digit is between 1 and 9 (inclusive)\n        for ones in range(10):  # The ones digit is between 0 and 9 (inclusive)\n            original_number = 10 * tens + ones  # Construct the original number\n            new_number = 10 * ones + tens  # Construct the number with swapped digits\n            # Check if the condition is met\n            if new_number == original_number / 3 + 3:\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate1 = 1.191\n    rate2 = 1.166\n\n    total_amount = principal * rate1 * rate2\n    \n    return round(total_amount, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raisin_roll, donut = symbols('raisin_roll donut')\n    equation1 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n    equation2 = Eq(raisin_roll, 3 * donut)\n\n    solutions = solve((equation1, equation2), (raisin_roll, donut))\n\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    # Given number of students from each school\n    school_1 = 24\n    school_2 = 36\n    school_3 = 42\n\n    # Find Greatest Common Divisor of all schools\n    gcd_1_2 = gcd(school_1, school_2)\n    greatest_common_divisor = gcd(gcd_1_2, school_3)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    # Let n, p, and e be the cost of a notebook, pencil case, and eraser, respectively.\n    # We have the following equations based on the problem statement:\n    # 1. 3n + 4p + 5e = 50 (Total cost)\n    # 2. n + p = 6 (Cost of a notebook and a pencil case)\n    # 3. p + e = 9 (Cost of a pencil case and an eraser)\n    \n    # Let's express e in terms of p from equation 3:\n    # e = 9 - p\n    # Now we can express n in terms of p from equation 2:\n    # n = 6 - p\n    \n    # Substitute n and e in equation 1 with their expressions in terms of p:\n    # 3(6 - p) + 4p + 5(9 - p) = 50\n    # 18 - 3p + 4p + 45 - 5p = 50\n    # Simplifying: p = 13\n    p = 13\n    \n    return p\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Given sum of first 9 terms (S9) and sum of first 27 terms (S27)\n    S9 = 99\n    S27 = 540\n    \n    # Sum of n terms of an arithmetic sequence: Sn = n/2 * (2a + (n-1)d)\n    # a is the first term, d is the common difference between terms\n    # For S9 and S27:\n    # S9 = 9/2 * (2a + 8d)\n    # S27 = 27/2 * (2a + 26d)\n    # From these two equations, we can form a system of equations to find a and d:\n    \n    # 9/2 * (2a + 8d) = 99\n    # 27/2 * (2a + 26d) = 540\n    # Solve the system of linear equations to find a and d\n    \n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    equation1 = Eq(9/2 * (2*a + 8*d), 99)\n    equation2 = Eq(27/2 * (2*a + 26*d), 540)\n\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Now we have the first term (a) and common difference (d),\n    # we can find the sum of the first 16 terms (S16):\n    # S16 = 16/2 * (2a + (16-1)d)\n    \n    S16 = 16/2 * (2*solutions[a] + (16-1)*solutions[d])\n\n    return S16\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):  # Hundreds digit must be non-zero\n        for ten in range(10):  # Ten digit can be zero\n            for unit in range(10):  # Unit digit can be zero\n                if ten == 0 and unit == 0:  # Skip if both are zero\n                    continue\n                if ten == 0 and hundred % unit == 0:  # Valid if only ten is zero\n                    count += 1\n                elif unit == 0 and hundred % ten == 0:  # Valid if only unit is zero\n                    count += 1\n                elif ten != 0 and unit != 0 and hundred % ten == 0 and hundred % unit == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    # initialize the sum of numbers and number index\n    sum_numbers, num_index = 0, 0\n    # since the median of sequence with length 1 is 1, start with the next number\n    current_number = 2\n    \n    # find the number index where the total count reaches 12's position\n    while sum_numbers < 12:\n        # each number repeats 'current_number' times in the sequence\n        sum_numbers += current_number\n        # when the total count of number surpasses '12's position stop\n        if sum_numbers >= 12:\n            break\n        # move to the next number in the sequence\n        current_number += 1\n        \n    # as we are looking for median, when 'current_number' reaches '12', the median will be '12'\n    if current_number == 12:\n        return 12\n    else:\n        # calculate how many numbers are needed to complete the sequence up to (including) 'current_number'\n        numbers_needed = 12 - (sum_numbers - current_number)\n        \n        # the median is the value at halfway point of the total count, which is 12, hence 'current_number'\n        median = current_number if numbers_needed > current_number // 2 else current_number - 1\n        \n    return median\n    \nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "def solution():\n    from itertools import permutations\n\n    digits = \"458\"\n    permuted_numbers = set(permutations(digits))\n    \n    return len(permuted_numbers)\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    count = 0\n    for num in range(7, 41):\n        count += len(str(num))\n    return count\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    group_stage_games = 0\n    knockout_games = 0\n\n    # Each group consists of 4 teams.\n    # Every team plays against every other team in their group once.\n    # Number of games in a round-robin tournament for n teams: n*(n-1)/2\n    # For 4 teams, 4*(4-1)/2 = 6 games per group\n    # There are 8 groups.\n    group_stage_games = 8 * (4 * (4 - 1) // 2)\n\n    # Knockout stage starts with 16 teams (2 from each group)\n    # Top 8 -> 8 games (1 game each pair)\n    # Top 4 -> 4 games (1 game each pair)\n    # Top 2 -> 2 games (the final and the third-place playoff)\n    knockout_games = 8 + 4 + 2\n\n    return group_stage_games + knockout_games\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    # Number of times the red light flashes in an hour\n    red_flashes_per_hour = 4 * 60  \n    # Number of times the green light flashes in an hour\n    green_flashes_per_hour = 6 * 60  \n\n    # Use the Greatest Common Divisor (GCD) to find the number of common flashes in an hour\n    from math import gcd\n    common_flashes_per_minute = gcd(4, 6)\n    common_flashes_per_hour = common_flashes_per_minute * 60\n\n    # The number of times they flash together will be the number of times\n    # the red light flashes in an hour divided by the number of times they \n    # flash together in a minute (60 / GCD of their flash rates per minute)\n    ans = red_flashes_per_hour // common_flashes_per_minute + 1\n    return ans\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 1, 22)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = int(0.40 * total_paintings)\n    still_lifes = total_paintings - landscapes\n    french_artists_landscapes = 25\n    total_french_artists_paintings = 40\n    still_lifes_french_artists = total_french_artists_paintings - french_artists_landscapes\n    still_lifes_not_french = still_lifes - still_lifes_french_artists\n    return still_lifes_not_french\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # total volume of rose drink in ml\n    max_volume_per_glass = total_volume // 9  # greatest volume that can be poured into each glass equally\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_rice = 100 * 0.5 + 400 * 0.8\n    total_weight = 100 + 400\n    concentration = total_rice / total_weight\n    return concentration\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_seconds = 300\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total = 0\n    number = 0\n    for i in range(2017):\n        number = number * 10 + 2\n        total += number\n    return total % 100000\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n    \n    # Total amount of hay pile is equal for both cases\n    total_hay = horses_initial * days_initial\n    \n    # Find out for how many days can the pile feed 20 horses\n    days_final = total_hay / horses_final\n    \n    return days_final\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for i in range(1000, 10000):\n        first_digit, remaining_digits = divmod(i, 1000)\n        new_number = remaining_digits * 10 + first_digit\n        if new_number - i == 4707:\n            return i\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    oliver_age = 20\n    lin_age = 26\n    target_sum_age = 48\n    years_later = (target_sum_age - (oliver_age + lin_age)) / 2\n    return int(years_later)\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n    return closest_number\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    difference_in_ages_2_years_ago = (mother_age_now - 2) - (sandra_age_now - 2)\n    return difference_in_ages_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    # Initialize the smallest multiple and the current number to be tested\n    smallest_multiple = 35\n    current_number = 35\n\n    while True:\n        # Checking if the sum of digits is 35 and ends with \"35\"\n        if sum(int(digit) for digit in str(current_number)) == 35 and str(current_number).endswith('35'):\n            smallest_multiple = current_number\n            break\n        # Increment the current number by 35 since multiples of 35 are only required\n        current_number += 35\n\n    return smallest_multiple\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    total_money = 8 * y\n    watch_cost = 4 * y\n    handbag_cost = 20\n    each_child_money = (y - 5)\n\n    equation = Eq(total_money, watch_cost + handbag_cost + 2 * each_child_money)\n    solution = solve(equation, y)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    leap_years = 0\n    regular_years = 0\n\n    for year in range(1901, 2000):\n        if year % 4 == 0:\n            leap_years += 1\n        else:\n            regular_years += 1\n\n    days_in_leap_years = leap_years * 366\n    days_in_regular_years = regular_years * 365\n\n    total_days = days_in_leap_years + days_in_regular_years\n    \n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n    deposit = 10\n    spend = 8\n    balance = initial_amount\n\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:  # Odd days (deposits £10)\n            balance += deposit\n        else:  # Even days (spends £8)\n            balance -= spend\n            \n    return balance\n \nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    total_numbers = 99\n    divisible_by_3 = total_numbers // 3\n    divisible_by_7 = total_numbers // 7\n    divisible_by_both = total_numbers // (3*7)\n\n    cannot_divide_exactly = total_numbers - (divisible_by_3 + divisible_by_7 - divisible_by_both)\n\n    return cannot_divide_exactly\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    ans = 5.6 * 2.4\n    return ans\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    num_hours = 12\n    total_strikes = sum(range(1, num_hours + 1))\n    return total_strikes\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_pence = 40  # total pence worth of coins\n    coins_count = total_pence // 10  # number of ten-pence coins\n    total_weight = coins_count * weight_per_coin  # total weight of coins\n\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # Let j be the number of buttons James originally has, and n be the number Nina has.\n    # According to the problem, we have two equations:\n    # j + n = 22 (total number of buttons)\n    # n - 4 = j + 4 (Nina gives James 4 buttons and then they have the same number)\n    \n    # From the second equation, we can express j in terms of n:\n    # j = n - 8\n    \n    # Substituting the expression of j into the first equation:\n    # (n - 8) + n = 22\n    # 2n - 8 = 22\n    # 2n = 30\n    # n = 15\n    \n    # So, Nina originally has 15 buttons.\n    return 15\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    correct = symbols('correct')\n\n    # Correct answers give 5 points, wrong answers deduct 2 points\n    # total questions - correct answers gives the number of wrong answers\n    # 5 * correct - 2 * (6 - correct) = 23\n    equation = Eq(5 * correct - 2 * (6 - correct), 23)\n\n    solution = solve(equation, correct)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults_to_children = 1 / 4\n    adults = total_people / (1 + ratio_adults_to_children)\n    return int(adults)\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    initial_speed = 10  # initial speed in m/s\n    acceleration_due_to_gravity = -9.81  # acceleration due to gravity in m/s^2, negative because it's acting downwards\n    angle_with_horizontal = 37  # angle in degrees\n    angle_with_horizontal_radians = math.radians(angle_with_horizontal)  # converting angle to radians\n\n    # The vertical component of the initial velocity (V_y = V * sin(angle))\n    initial_vertical_velocity = initial_speed * math.sin(angle_with_horizontal_radians)\n\n    # Using the formula: V^2 = U^2 + 2 * a * s, where V = 0 at the maximum height,\n    # rearranging the formula to find s, the distance along the vertical: s = - (U^2) / (2 * a)\n    vertical_distance = - (initial_vertical_velocity ** 2) / (2 * acceleration_due_to_gravity)\n\n    # The actual distance along the ramp is the hypotenuse of the triangle where vertical_distance is the opposite side\n    # Using trigonometry: sin(angle) = opposite / hypotenuse, rearranging: hypotenuse = opposite / sin(angle)\n    ramp_distance = vertical_distance / math.sin(angle_with_horizontal_radians)\n\n    return vertical_distance, ramp_distance\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    starting_seat = 3\n\n    last_receiver_seat = (starting_seat + total_candies - 1) % total_children\n    if last_receiver_seat == 0:\n        last_receiver_seat = total_children\n\n    return last_receiver_seat\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for racket and ball mass\n    racket_mass, ball_mass = symbols('racket_mass ball_mass')\n    \n    # Set up equations based on the given information\n    equation1 = Eq(racket_mass + 3 * ball_mass, 536)\n    equation2 = Eq(2 * racket_mass + 3 * ball_mass, 904)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (racket_mass, ball_mass))\n    \n    # Return the mass of a tennis racket\n    return solutions[racket_mass]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    return sum(numbers)\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Since Sheila needs to get 2 groups of 4 balls of the same color and she is taking out balls one at a time,\n    # we need to consider the worst-case scenario using the Pigeonhole Principle.\n\n    # Let's say she takes out 3 blue balls first, then 3 orange balls, then 2 yellow balls.\n    # At this stage, she has 3+3+2 = 8 balls and hasn't completed any group of 4.\n\n    # Now, no matter what color ball she takes out next, she will complete a group of 4.\n    # So, she needs to take 1 more to make it 9. But we are looking for 2 groups of 4.\n\n    # After completing one group of 4, she could take out the remaining balls of the two colors not completed.\n    # That's 2 blue (if the group was orange or yellow) and 3 orange (if the group was blue or yellow).\n    # So she takes out 2 (remaining blue) + 3 (remaining orange) = 5 more balls to get 14.\n\n    # Now she has one complete group of 4 and all remaining balls from two colors,\n    # so the next ball she takes out will have to complete the second group of 4.\n    # One more ball is needed.\n\n    # Total number of balls to guarantee 2 groups of 4 balls of the same colour = 8 (initial) + 1 (to complete one group)\n    # + 5 (to have all balls from the other two colors) + 1 (to complete the second group) = 15.\n    \n    return 15\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + (30 * 30) + (30 * 30 * 30)\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    total_players = 64\n\n    # In a knockout tournament with 4 players in each match,\n    # only 1 winner proceeds, so 3 players are knocked out in every match.\n    # This means the number of matches needed is 63 (64 - 1).\n    matches_needed = total_players - 1\n\n    return matches_needed\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]  # List of given numbers\n    return sum(numbers)  # Sum the numbers in the list\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for digit1 in range(1, 10):\n        for digit2 in range(10):\n            for digit3 in range(10):\n                for digit4 in range(10):\n                    original_number = digit1*1000 + digit2*100 + digit3*10 + digit4\n                    new_number = digit2*1000 + digit3*100 + digit4*10 + digit1\n                    if new_number - original_number == 4707:\n                        return original_number\n                        \nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    bags_of_flour = 4\n\n    remaining_weight = total_weight - cheese_weight\n    flour_weight = remaining_weight / bags_of_flour\n\n    return flour_weight\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    n1 = 9\n    S1 = 72\n    n2 = 23\n    S2 = 736\n    n3 = 16\n\n    # Sum of the first n terms of an arithmetic sequence: S_n = n/2 * (first_term + last_term)\n    # Alternatively: S_n = n/2 * (2a + (n - 1)d), where a is the first term and d is the common difference.\n\n    # From sum of first 9 and first 23 terms, we can form two equations\n    # S1 = n1/2 * (2a + (n1 - 1)d)\n    # S2 = n2/2 * (2a + (n2 - 1)d)\n\n    # We can solve these two equations to find a and d\n    # Convert them to the form of: a + n1/2 * d = S1/n1 and a + n2/2 * d = S2/n2\n\n    a_plus_n1d2 = S1 / n1\n    a_plus_n2d2 = S2 / n2\n\n    # Subtract the first equation from the second to find d:\n    d = (a_plus_n2d2 - a_plus_n1d2) / ((n2 - n1) / 2)\n\n    # Now we find a using the value of d\n    a = a_plus_n1d2 - (n1 - 1) / 2 * d\n\n    # Finally, we calculate the sum of the first 16 terms using the values of a and d\n    S3 = n3 / 2 * (2 * a + (n3 - 1) * d)\n\n    return int(S3)\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Define the cost of one CD in England\n    cost_in_england = 14\n\n    # According to the provided context, assume that Richard spent the same amount in St. Petersburg\n    # Hence, the money Richard has to spend in St. Petersburg is also £14\n\n    # Define the cost of one CD in St. Petersburg (the exact value is not given in the question)\n    # For the purpose of this solution, we need to define a cost in St. Petersburg to find the number of CDs.\n    # Since the exact value in St. Petersburg is not provided and it is necessary for the calculation,\n    # I will assume a placeholder value. In the real world, we would need the actual cost in St. Petersburg.\n    cost_in_petersburg = 14  # Placeholder value, the real cost would be needed here\n\n    # Calculate the number of CDs that can be bought in St. Petersburg\n    cds_can_buy = cost_in_england // cost_in_petersburg\n\n    return cds_can_buy\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime\n\n    for age in [28, 39, 52, 84]:\n        if isprime(age + 1) and (age + 12)**(1/3) % 1 == 0:\n            age_3_years_ago = age - 3\n            if (age_3_years_ago**(1/2)) % 1 == 0:\n                return age\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    ans = 168 * 91\n    return ans\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Bart can take all of one color which gives him 5 chips\n    # but still he's not sure to have 2 of different colors.\n    # So he needs to take at least 1 more to make sure he\n    # has 2 chips of different colors. So the answer is 6.\n    return 6\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's create a symbol for the levels Andrew and Cassandra reach when Cassandra is at level 19\n    andrew_level = symbols('andrew_level')\n    \n    # The speed ratio of Andrew to Bernice when they reach levels 5 and 3\n    speed_ratio_AB = 5 / 3  # Andrew to Bernice\n    \n    # The speed ratio of Bernice to Cassandra when they reach levels 6 and 10\n    speed_ratio_BC = 6 / 10  # Bernice to Cassandra\n    \n    # Overall speed ratio of Andrew to Cassandra is the product of AB and BC ratios\n    speed_ratio_AC = speed_ratio_AB * speed_ratio_BC\n    \n    # Equation based on the overall speed ratio and where they are when Cassandra is at level 19\n    equation = Eq(andrew_level, speed_ratio_AC * 19)\n    \n    # Solve the equation\n    solution = solve(equation, andrew_level)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a + b\n\n    # We need to solve 2 ∨ (x ∨ 4) = 59\n    # That means 2 * (x ∨ 4) + 2 + (x ∨ 4) = 59\n    # Let y = x ∨ 4, so this simplifies to 2y + y + 2 = 59\n    # Now replace the new operation y = x ∨ 4, which is x*4 + x + 4\n    for x in range(1, 59):\n        y = new_operation(x, 4)\n        if new_operation(2, y) == 59:\n            return x\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = '2345'\n    pattern_sum = sum(int(digit) for digit in pattern)\n    num_full_patterns = 43 // len(pattern)\n    remaining_digits = 43 % len(pattern)\n    total_sum = num_full_patterns * pattern_sum + sum(int(pattern[i]) for i in range(remaining_digits))\n    return total_sum\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz = 30  # minutes\n    total_quizzes = 4\n    total_time_minutes = time_per_quiz * total_quizzes\n    total_time_hours = total_time_minutes / 60  # convert minutes to hours\n\n    return total_time_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometres = 4.7\n    centimeters_per_kilometre = 100000\n    ans = kilometres * centimeters_per_kilometre\n    return ans\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours for use in speed calculations\n    time_driven_initially = 40 / 60\n    \n    # Compute the distance that Samuel turned back at\n    distance_to_turn_back = 66 * time_driven_initially\n    \n    # Calculate how much additional time Shafur drove while Samuel was turning back\n    additional_time_shafur = distance_to_turn_back / 54\n\n    # Total time Shafur drove is the sum of the initial time plus the additional time\n    total_time_shafur = time_driven_initially + additional_time_shafur\n\n    # Distance from Town X to Town Y is the total time Shafur drove multiplied by his speed\n    distance_X_to_Y = 54 * total_time_shafur\n\n    return distance_X_to_Y\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    total = 40\n    ways = 0\n    \n    # The maximum number of 5p coins we can have is total // 5\n    for num_5p in range(0, total // 5 + 1):\n        # The sum of 5p coins so far\n        sum_5p = num_5p * 5\n        \n        # To make the rest of the amount with 10p coins, it must be divisible by 10\n        if (total - sum_5p) % 10 == 0:\n            ways += 1\n            \n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # second term minus first term\n\n    # Find the term number when the sequence becomes negative\n    term_number = 0\n    current_term = first_term\n    while current_term > 0:\n        term_number += 1\n        current_term += difference\n\n    return term_number\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for num in range(100, 1000):\n        digits = [int(d) for d in str(num)]\n        product = 1\n        for d in digits:\n            product *= d\n        if product > 99 and product < 1000:\n            return num\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    vase_capacity = 9\n    vases_needed = -(-flowers // vase_capacity)  # Ceiling division\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the cost of each chair as 'c'\n    c = symbols('c')\n\n    # According to the problem:\n    # 4 * cost of table + 9 * cost of chair = 504\n    # cost of table =  3 * cost of chair\n    # So we replace the cost of table with 3 times the cost of chair in the first equation\n    # 4 * (3 * c) + 9 * c = 504\n    equation = Eq(4 * (3 * c) + 9 * c, 504)\n\n    # We solve for the cost of the chair 'c'\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = -(-38 // 3)  # Ceiling division to find the first multiple of 3 after 38\n    last_multiple = 81 // 3       # Floor division to find the last multiple of 3 before 81\n\n    count_multiples = last_multiple - first_multiple + 1\n\n    return count_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    return lcm(12, 15)\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # calculate the sum of the first part of the pyramid: 3 to 10\n    first_sum = sum(range(3, 11))\n    # calculate the sum of the second part of the pyramid: 3 to 9\n    second_sum = sum(range(3, 10))\n    # find the total sum\n    total_sum = first_sum + second_sum\n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip, bud + 50)\n    equation2 = Eq((pip - 0.8 * pip) / (bud - 3/4 * bud), 6/5)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "网络故障，请重试"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_sevenths = 18\n    number = (three_sevenths * 7) / 3\n    five_sixths = (number * 5) / 6\n    return five_sixths\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    from fractions import Fraction\n    import math\n\n    expression1 = Fraction(7, -10/3) / (Fraction(-27, 1000) ** (1/3))\n    expression2 = (2**3 / 4**2) / (0.125 * (1.8 - (0.2 * 7)))\n    expression3 = Fraction(1, 10) / Fraction(1, 7) + (2 * 0.3)\n    \n    ans = float(expression1 + expression2 - expression3)\n    \n    return ans\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    num_people = 5\n    games_played = num_people - 1\n    \n    return games_played\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    pencils = (total_items - more_pens) // 2\n    return pencils\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    jan_to_apr = 4 * 500\n    may_to_jul = 3 * 300\n    aug_to_sep = 400\n    oct_to_dec = 3 * 300\n    \n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    average_per_month = total_spent / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    apples_from_bud = 16\n\n    total_apples = (boxes * apples_per_box) + apples_from_bud\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_amount = (70 * 4) - 15\n    return total_amount\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_current_age = 61\n    grandsons_ages = [4, 7, 12]\n    years = 0\n    \n    while sum(grandsons_ages) != grandpa_current_age:\n        grandpa_current_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            break\n    return count\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a one-on-one knockout tournament, each game eliminates one person.\n    # Consequently, we need one game per person eliminated.\n    # To determine one winner from 5 people, we need to eliminate 4 people.\n    # Hence, we will have 4 games in total.\n    num_people = 5\n    num_games = num_people - 1\n\n    return num_games\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of marbles\n    anna, betsy, charlene = symbols('anna betsy charlene')\n    \n    # Initial condition before any marbles are given\n    # Anna + Betsy + Charlene = 168\n    initial_eq = Eq(anna + betsy + charlene, 168)\n    \n    # After Charlano gave 15 marbles to Betsy: Betsy_new = Betsy_old + 15\n    # After Betsy gave 8 marbles to Anna: Anna_new = Anna_old + 8, Betsy_new = Betsy_new - 8\n    # At the end: Anna : Betsy : Charlene = 2 : 5 : 7\n    \n    # Let's represent the final amounts of marbles for Anna, Betsy, and Charlene\n    final_anna = anna + 8\n    final_betsy = betsy + 15 - 8\n    final_charlene = charlene\n    \n    # Setup the ratio equation based on the given proportions 2:5:7\n    ratio_eq1 = Eq(final_anna * 5, final_betsy * 2)\n    ratio_eq2 = Eq(final_betsy * 7, final_charlene * 5)\n    \n    # Solve the system of equations for initial amounts of marbles\n    solutions = solve((initial_eq, ratio_eq1, ratio_eq2), (anna, betsy, charlene))\n\n    return solutions[betsy]\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    return sum([19, 6, 12, 13, 21, 4, 8, 17])\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # If a book is on the 8th shelf from the front and 10th from the back,\n    # there must be 7 shelves before it and 9 after it.\n    shelves_before_book = 8 - 1\n    shelves_after_book = 10 - 1\n    total_shelves = shelves_before_book + 1 + shelves_after_book\n\n    return total_shelves\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n    from itertools import permutations\n\n    factors = factorint(2016)\n    product_list = [p**factors[p] for p in factors]\n\n    # Expand the prime factors into all possible combinations that multiply to 2016\n    def expand_factors(product_list):\n        expanded = []\n        for i in range(len(product_list)):\n            expanded.extend([\n                product_list[i] * product for product in expand_factors(product_list[i + 1:])\n            ])\n        expanded.extend(product_list)\n        return list(set(expanded))\n\n    expanded_products = expand_factors(product_list)\n    \n    # Filter out the valid age combinations (all ages must be less than 10)\n    valid_combinations = [\n        comb for comb in permutations(expanded_products, 4)\n        if all(age < 10 for age in comb) and prod(comb) == 2016\n    ]\n\n    valid_sums = [sum(comb) for comb in valid_combinations]\n\n    return min(valid_sums)\n\ndef prod(iterable):\n    result = 1\n    for i in iterable:\n        result *= i\n    return result\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Chris is 7th from the front and 4th from the back, which means there are 6 people in front of him,\n    # 3 people behind him, making it a total of 10 rows.\n    rows = 7 + 4 - 1\n    \n    # Chris is 3rd from the left and 7th from the right, which means there are 2 people to his left,\n    # 6 people to his right, making it a total of 9 columns.\n    columns = 3 + 7 - 1\n    \n    # The total number of students is the number of rows multiplied by the number of columns.\n    total_students = rows * columns\n    \n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    combined_age_4_years_ago = 10\n    combined_age_now = combined_age_4_years_ago + 4*2  # Each dog gets 4 years older\n    combined_age_in_2_years = combined_age_now + 2*2  # Each dog gets 2 years older\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    return 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of coins\n    ten_p, twenty_p, five_p = symbols('ten_p twenty_p five_p')\n    \n    # Define the equations based on the problem\n    equation1 = Eq(twenty_p, 2 * ten_p)\n    equation2 = Eq(five_p, 0.5 * ten_p)\n    equation3 = Eq(5 * five_p + 10 * ten_p + 20 * twenty_p, 1575)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (ten_p, twenty_p, five_p))\n\n    return solutions[twenty_p]\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    twelfth_term = 140\n    n = 12\n\n    common_difference = (twelfth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Each boy has as many sisters as brothers\n    equation1 = Eq(girls, boys - 1)\n    # Each girl has half as many sisters as brothers\n    equation2 = Eq(girls - 1, (boys / 2))\n\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining = 60\n    eaten_fraction = 3 / 5\n    original_mass = remaining / (1 - eaten_fraction)\n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.day\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 11 - 5\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base10_number = 96\n    base6_number = ''\n\n    while base10_number > 0:\n        remainder = base10_number % 6\n        base10_number //= 6\n        base6_number = str(remainder) + base6_number\n\n    return base6_number\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # convert 30 minutes to hours (0.5 hours)\n    time_in_hours = 30 / 60\n\n    # First distance is x mph for 0.5 hours\n    distance_first = x * time_in_hours\n\n    # Second distance is (x - 20) mph for 0.5 hours\n    distance_second = (x - 20) * time_in_hours\n\n    # Last distance is (x + 10) mph for 0.5 hours\n    distance_last = (x + 10) * time_in_hours\n\n    # Total distance is the sum of all distances\n    total_distance = distance_first + distance_second + distance_last\n\n    # Creating equation for the total distance\n    equation = Eq(total_distance, 70)\n\n    # Solving the equation to find the value of x\n    solution = solve(equation, x)\n\n    # We are interested in the positive solution since speed cannot be negative\n    for sol in solution:\n        if sol > 0:\n            return sol\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    cost_per_person = 5.50\n    number_of_people = 6\n    total_cost = cost_per_person * number_of_people\n    tip_percent = 0.10\n    tip_amount = total_cost * tip_percent\n    total_paid = total_cost + tip_amount\n    total_note = 50\n    change = total_note - total_paid\n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    day_climb = 4\n    night_slip = 2\n    well_depth = 10\n    total_climbed = 0\n    day = 0\n\n    while total_climbed < well_depth:\n        day += 1\n        total_climbed += day_climb\n        if total_climbed >= well_depth:\n            break\n        total_climbed -= night_slip\n\n    return day\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # If Jason wants to win, he must leave a multiple of 4 marbles to Belinda,\n    # because whatever Belinda takes (1, 2, or 3 marbles), Jason can then take 4 - Belinda's number,\n    # and always return the state of the game to a multiple of 4 marbles after his turn.\n\n    # Since there are 26 marbles, Jason should take marbles to leave a multiple of 4 (24 marbles).\n    # In other words, Jason should take 26 - 24 = 2 marbles on his first turn.\n\n    marbles_to_take = 26 % 4\n\n    return marbles_to_take\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        total += 5 * n\n        if total % 2013 == 0:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    return (6/7) * 42\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    # Sort the apples in ascending order since each child must have a different number\n    # Start with the minimum number for each child (1 apple) and increase\n    # The maximum number of apples the last child can receive is determined by subtracting\n    # the minimum amount for the remaining children.\n    # We need to find the minimum such value that sums to 27 while following the increasing rule.\n\n    # The first child will get 1 apple\n    # Let's assume the last child will get x apples\n    # Then (1 + 2 + 3 + 4 + x) must equal 27 (since it's an increasing sequence and they must be different)\n    # The sum of first 4 minimal apples is 1+2+3+4 = 10\n    # So, x = 27 - 10\n    # And we want to minimize x, which means we want the smallest x that satisfies the condition\n    \n    total_apples = 27\n    # Calculate the sum of the minimum apples distributed to the first 4 children (1, 2, 3, and 4)\n    min_apples_for_four_children = sum(range(1, 5))\n    # Subtracting from the total gives the minimum number of apples for the last child.\n    min_apples_for_last_child = total_apples - min_apples_for_four_children\n\n    return min_apples_for_last_child\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    ways = []\n    for combo in combinations(range(1, 25), 7):\n        if sum(combo) == 25:\n            ways.append(combo)\n    return len(ways), ways\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # The probability of the alcoholic being in any one of the bars is equally likely\n    # Since he goes to three fixed bars at random, the probability of being in each is 1/3\n    \n    # The probability that he is not in the first two bars is then the probability\n    # that he is in the third bar, which remains 1/3\n\n    return 1/3\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths = 18\n    base_number = (three_sevenths * 7) / 3\n    five_sixths = (base_number * 5) / 6\n    return five_sixths\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    project_duration = timedelta(weeks=3)\n    end_date = start_date + project_duration\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    solutions = solve((equation1, equation2), (pencils, markers))\n\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    volunteers, trees = symbols('volunteers trees')\n    \n    # If each plants 4 trees, 5 trees are left.\n    eq1 = Eq(4 * volunteers + 5, trees)\n    \n    # If each plants 7 trees, one volunteer has nothing to plant.\n    eq2 = Eq(7 * (volunteers - 1), trees)\n\n    solutions = solve((eq1, eq2), (volunteers, trees))\n\n    return solutions\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    total_students = 0\n    layer_diff = 55\n\n    for layer in range(1, layer_diff + 1, 2):\n        total_students += (layer * 4) + (layer + 1) * 4\n        \n    return total_students - layer_diff\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of stickers in Bag A be 'a' and in Bag B be 'b' initially\n    a, b = symbols('a b')\n\n    # Equation 1: Total number of stickers initially\n    equation1 = Eq(a + b, 270)\n\n    # Equation 2: Stickers in Bag B to those in Bag A after moving 56 stickers\n    equation2 = Eq((b + 56) / (a - 56), 3/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # 'a' gives the number of stickers in Bag A initially\n    return solutions[a]\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Total amount of grass produced by the pasture in 12 weeks\n    total_grass_12_weeks = 120 * 12\n    # Total amount of grass produced by the pasture in 8 weeks\n    total_grass_8_weeks = 150 * 8\n    \n    # Since the pasture grows at a constant rate every week,\n    # let w be the weekly growth rate of the pasture and\n    # x be the amount of pasture available at the beginning.\n    # We can setup the following equations:\n    # x + 12w = total_grass_12_weeks\n    # x + 8w = total_grass_8_weeks\n\n    # Subtracting the second equation from the first gives us:\n    # 4w = total_grass_12_weeks - total_grass_8_weeks\n    w = (total_grass_12_weeks - total_grass_8_weeks) / 4\n\n    # Now we can find x using the second equation:\n    x = total_grass_8_weeks - 8 * w\n\n    # Now, we know the initial amount of pasture (x) and the weekly growth rate (w).\n    # We can find out how many cows can the pasture sustain for 6 weeks:\n    # x + 6w = cows * 6\n    # cows = (x + 6w) / 6\n    cows = (x + 6 * w) / 6\n\n    return cows\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # Cross multiply to find the unknown number\n    return (14 * 10) / 21\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    last_term = 41\n    difference = 6\n    next_term = last_term + difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    total_children = 74\n    bars_per_packet = 8\n    \n    packets_needed = (total_children + bars_per_packet - 1) // bars_per_packet\n    \n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 5 / 100 * 180\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def factors_sum(n):\n    factors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i != n // i:\n                factors.append(n // i)\n    return sum(factors)\n\ndef solution():\n    num = 2  # start checking from the smallest positive integer\n    while True:\n        if factors_sum(num) == num:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    ans = (30 - 28) + (26 - 24) + (22 - 20) + (18 - 16) + 14\n    return ans\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    nth_term = 10\n    nth_value = 31\n    difference = 3\n    first_term = nth_value - (nth_term - 1) * difference\n    \n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    num_boxes = total_cakes // cakes_per_box\n    \n    if total_cakes % cakes_per_box != 0:\n        num_boxes += 1\n\n    return num_boxes\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    friends = 6\n\n    sweets_to_give_away = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_to_give_away // friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    # Set up equation based on the problem description\n    equation = Eq((1/4) * initial_money + (2/7) * initial_money, 225)\n\n    # Solve for the initial money\n    solution = solve(equation, initial_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    return 30\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # Using the Pigeonhole Principle\n    # We want to find the minimum number of cards to guarantee 10 of the same color.\n    # If the dealer selects up to 9 cards from each of the first three colors (4, 8, 12),\n    # then he'll collect 9 + 9 + 9 cards. The next card he selects must then be the 10th\n    # card of at least one of the colors.\n\n    cards_needed = (9 * 3) + 1  # Selecting up to 9 cards from each of the first 3 colors and 1 more\n\n    return cards_needed\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap_between_daffodils = 1.1\n    length_of_row = (num_daffodils - 1) * gap_between_daffodils\n    return length_of_row\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 9):\n            for x3 in range(1, 9):\n                if x1 + x2 + x3 == 9 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    # Divide the count by 3! because the boxes are identical and order doesn't matter\n    return count // 6\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n    total_muffins = 3998\n\n    # Lovelle sold 462 muffins\n    lovelle_final = lovelle - 462\n\n    # Makayla sold 2/5 of her muffins\n    makayla_final = makayla - (2 / 5) * makayla\n\n    # They have an equal number of muffins left\n    equation = Eq(lovelle_final, makayla_final)\n\n    # Lovelle and Makayla had 3998 muffins altogether\n    equation_total = Eq(lovelle + makayla, total_muffins)\n\n    # Solve the system of equations\n    solutions = solve((equation, equation_total), (lovelle, makayla))\n    \n    return solutions[lovelle]\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    ratio_alex_to_jane = 1.5  # Alex drinks 50% more than Jane, so the ratio is 1 + 50% = 1.5\n\n    # Let x be the amount Jane drinks, then Alex drinks 1.5x.\n    # The total amount of juice they drink is x (Jane) + 1.5x (Alex) = total_juice.\n    # Therefore, 1x + 1.5x = 2.5x is the total juice.\n    # Solving for x gives us x = total_juice / 2.5.\n    jane_drinks = total_juice / (1 + ratio_alex_to_jane)\n    alex_drinks = ratio_alex_to_jane * jane_drinks\n\n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48 # in meters\n    speed = 8 # meters per minute\n    minutes_taken = distance / speed\n    return int(minutes_taken)\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    one_fourth_of_16 = 1 / 4 * 16\n    missing_number = one_fourth_of_16 * 2\n    return missing_number\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pear = 18\n    total_strawberries = 30\n    total_chocolate = 18\n    num_friends = 6\n\n    pears_per_friend = total_pear // num_friends\n    strawberries_per_friend = total_strawberries // num_friends\n    chocolates_per_friend = total_chocolate // num_friends\n\n    fruits_per_friend = pears_per_friend + strawberries_per_friend  # chocolates are not fruits\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    bag_cost = 60\n    fraction_spent_on_bag = 2 / 5\n    \n    remaining_money_after_book = bag_cost / fraction_spent_on_bag\n    fraction_remaining_after_book = 1 - (1 / 4)\n    \n    original_money = remaining_money_after_book / fraction_remaining_after_book\n    \n    return original_money\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    ans = (15 * 5) / 3\n    return ans\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    total_digits = 157\n    pages = 0\n    digits_used = 0\n\n    # Calculate the number of digits used by pages with 1 digit, 2 digits, etc.\n    for digits_per_page in range(1, 4):  # It won't exceed 3 digits for the page numbers\n        if digits_per_page * (10**digits_per_page - 10**(digits_per_page - 1)) < total_digits - digits_used:\n            digits_used += digits_per_page * (10**digits_per_page - 10**(digits_per_page - 1))\n            pages += 10**digits_per_page - 10**(digits_per_page - 1)\n        else:\n            remaining_digits = total_digits - digits_used\n            pages += remaining_digits // digits_per_page\n            break\n\n    return pages\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for number in range(201, 242, 2):  \n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    total_distance_peach_trees = (41 - 1) * 3  # trees at both ends, subtract 1 from the total count of trees\n    total_distance_lamp_posts = total_distance_peach_trees  # same stretch of road\n\n    # Lamp posts are every 8m, start and end of the road inclusive \n    num_lamp_posts = (total_distance_lamp_posts // 8) + 1  # floor division to get whole lamp posts and add 1 for the start\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for unit_price in range(1, 1000):  # Iterate over possible unit prices\n        total_price = unit_price * 72  # Calculate total price for 72 apparatus\n        str_price = str(total_price) \n        if len(str_price) == 6 and str_price[2:5] == '679':  # Check if the price fits the pattern\n            return unit_price\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # in meters\n    speed = 40          # in meters per second\n\n    time_to_pass = train_length / speed  # time = distance / speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for num in range(10, 100):  # All 2-digit numbers\n        if (num // 10 + num % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    ans = 208 // 8\n    return ans\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_savings = 24\n    spent_on_dvd = total_savings / 3\n    remaining_after_dvd = total_savings - spent_on_dvd\n    spent_on_book = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - spent_on_book\n    \n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    for year in range(3):\n        initial_rabbits = (initial_rabbits * 3) // 2  # Rabbits triple and then half is eaten by wolves\n    return initial_rabbits\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the number of students in class A, 'b' be the number of students in class B, and 'c' be the total number of candies\n    a, b, c = symbols('a b c')\n\n    # From the problem we have the following equations\n    equation1 = Eq(4*a, c - 20)  # Each student in class A gets 4 candies and 20 more are needed\n    equation2 = Eq(6*b, c + 16)  # Each student in class B gets 6 candies and there are 16 candies left\n    equation3 = Eq(a, 2*b)       # The number of students in class A is twice that of class B\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # 'c' is the total number of candies\n    return solutions[c]\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    # Calculate the time taken for each mile\n    time_for_first_mile = 1 / 60  # 1 mile at 60 mph\n    time_for_second_mile = 1 / 30  # 1 mile at 30 mph\n\n    # Calculate total time taken\n    total_time = time_for_first_mile + time_for_second_mile\n\n    # Calculate total distance\n    total_distance = 2  # 2 miles\n\n    # Calculate average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    total_aim = 12\n    number_of_washes = total_aim // amount_per_wash\n    if total_aim % amount_per_wash != 0:\n        number_of_washes += 1\n    return int(number_of_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(0, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    initial_candies = 2\n    days_count = 4\n    candies_eaten = initial_candies * (2 ** (days_count - 1))\n    return candies_eaten\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for number in range(122, 135):  # Start from 122 as 121 is not a 3-digit number\n        if number % 4 == 0 and number % 6 == 0:\n            return number\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n', integer=True)\n\n    # Equations based on the problem statement\n    equation1 = Eq(290 % n, a)\n    equation2 = Eq(235 % n, a + 2)\n    equation3 = Eq(200 % n, a + 5)\n\n    # Since 'a' is a remainder, it should be less than 'n'. Hence, we include the condition 0 <= a < n\n    solutions = solve((equation1, equation2, equation3), (a, n), dict=True)\n    \n    # Filter valid solutions taking into account that n > 1 and a, n are natural numbers\n    valid_solutions = [s for s in solutions if s[n] > 1 and s[a] >= 0]\n\n    # Return the natural number 'n'\n    return valid_solutions[0][n] if valid_solutions else None\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6\n\n    total_weekly_earnings = average_daily_earnings * number_of_working_days\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the smaller angle as 'a'.\n    # The second angle will be '2a' because it is two times larger than the first.\n    # Since one angle is a right angle (90 degrees), we have:\n    # a + 2a + 90 = 180 (sum of angles in a triangle is 180 degrees)\n    a = symbols('a')\n    equation = Eq(a + 2*a + 90, 180)\n\n    # We solve for 'a', the smaller angle\n    solution = solve(equation, a)\n\n    # The largest angle between the two unknown is 2 times the smaller angle\n    largest_angle = 2 * solution[0]\n\n    return largest_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "from itertools import permutations\n\ndef solution():\n    for p, i, s in permutations(range(10), 3):\n        if p == 0 or s == 0:  # Check if P and S are not zero since they are the most significant digits\n            continue\n        is_val = i * 10 + s\n        pi_val = p * 10 + i\n        if 4 * is_val == pi_val:\n            return pi_val\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_girls = 5\n    total_boys = 7\n    group_size = 4\n    \n    # Calculate the number of ways to form a group of 4 with at least 1 boy\n    # We subtract the case where there are no boys in the group from all possible groups\n    total_ways = comb(total_girls + total_boys, group_size)\n    no_boy_ways = comb(total_girls, group_size)\n    \n    return total_ways - no_boy_ways\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    # Since the ages are nine consecutive numbers and form an arithmetic sequence,\n    # we can consider the middle age as 'a', then other ages will be 'a-4', 'a-3', ..., 'a+4'\n    # The sum of these ages will be: (a-4) + (a-3) + ... + a + ... + (a+4) = 9a\n    # According to the problem, the sum should be 765, so we can write:\n    # 9a = 765 ==> a = 765 / 9\n\n    a = 765 // 9\n\n    # The middle age 'a' is the required answer.\n    return a\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + earring, 438)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    monday_to_saturday_total_hours = 3 * 6\n    sunday_hours = 10\n    total_days = 7\n    total_hours = monday_to_saturday_total_hours + sunday_hours\n    average_per_day = total_hours / total_days\n    return average_per_day\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # running speed is 2 times walking speed\n\n    # time taken if walks to school\n    walk_time_to_school = 24  # in minutes\n\n    # total distance to school\n    total_distance_to_school = walking_speed * walk_time_to_school\n\n    # half the distance\n    half_distance_to_school = total_distance_to_school / 2\n\n    # time to walk half the distance\n    walk_time_half_distance = half_distance_to_school / walking_speed\n\n    # time to run half the distance\n    run_time_half_distance = half_distance_to_school / running_speed\n\n    # total time for half walk and half run\n    total_time_half_walk_run = walk_time_half_distance + run_time_half_distance\n\n    return total_time_half_walk_run\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_trees = 79\n    total_distance = 320\n    distance_between_trees = total_distance / (total_trees + 1)\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_saw_movie = boys * 0.50\n    girls_saw_movie = girls * 0.60\n    total_pupils_saw_movie = boys_saw_movie + girls_saw_movie\n\n    return int(total_pupils_saw_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s represent Kim's savings\n    savings = symbols('savings')\n\n    # Kim gave 1/3 of her savings to her mother\n    mother_share = savings / 3\n\n    # Amount spent on dresses and earrings\n    expenses = 177 + 129\n\n    # Amount left is 1/2 of what she gave her mother\n    amount_left = mother_share / 2\n\n    # Equation based on the information\n    equation = Eq(savings - mother_share - expenses, amount_left)\n\n    # Solve the equation for Kim's savings\n    solution = solve(equation, savings)\n\n    return solution[0]\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    each_length = 15\n\n    # Calculate the maximum number of lengths that can be cut\n    max_lengths = total_length // each_length\n\n    # Calculate the length left over\n    length_left_over = total_length - (max_lengths * each_length)\n\n    return length_left_over\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    decimal = 1 + (3/100)\n    return decimal\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    sum_of_N = 0\n    for N in range(1, 2018):\n        if 2018 % N == 11:\n            sum_of_N += N\n    return sum_of_N\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker = 6\n    days = 9\n    total_skirts = sum([(skirts_per_worker * i) for i in range(1, days + 1)])\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if 2 * chickens + 4 * cows == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # We can solve this problem using stars and bars method from combination theory.\n    # Since there are 3 baskets, there need to be 2 dividers (bars) to separate the apples into the baskets.\n    # We can consider this as arranging 6 stars (apples) and 2 bars (dividers).\n\n    total_items = 6  # Total number of apples (stars).\n    dividers = 2  # Total number of dividers (bars).\n\n    # Calculate the total number of ways using the formula for combinations (n+k-1 choose k-1),\n    # where n = total_items (stars) and k = dividers (bars + 1).\n    # We use the combinations function from the math library.\n    from math import comb\n\n    possible_ways = comb(total_items + dividers, dividers)\n    return possible_ways\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    sequence = range(11, 61, 3)  # start at 11, end before 61, step by 3\n    included_numbers = [number for number in range(30, 61) if number in sequence]\n    return included_numbers\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    # Start counting from 1\n    number = 1\n    digit_count = 0  # Holds the sum of the digits\n\n    # Continue the loop until we pass the 2023th digit\n    while digit_count < 2023:\n        # Convert number to string to count digits\n        num_str = str(number)\n        digit_count += len(num_str)\n        \n        # If the number contains our desired digit, find it\n        if digit_count >= 2023:\n            # Desired index in the current number string\n            required_index = 2023 - (digit_count - len(num_str)) - 1\n            # Convert the digit at the required index from string to integer\n            return int(num_str[required_index])\n        \n        # Increment the number to concatenate to the sequence\n        number += 1\n\n# Call the solution function and store the result in variable 'ans'\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    class_size = total_sweets // min_sweets_per_student\n    return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, banana = symbols('apple banana')\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    income = 150000\n    base_tax_rate = 0.08\n    base_tax_amount = 50000 * base_tax_rate\n    additional_income = income - 50000\n    total_tax_paid = 15000\n\n    # Let T be the additional tax rate for the amount above $50,000.\n    # The equation for the total tax paid would be:\n    # base_tax_amount + additional_income * (base_tax_rate + T) = total_tax_paid\n    # Solve for T:\n\n    T = (total_tax_paid - base_tax_amount) / additional_income - base_tax_rate\n\n    # Convert T to percentage\n    T_percentage = T * 100\n\n    return T_percentage\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    woody_score = 66\n    # Since woody answered all but one\n    attempted_questions = total_questions - 1\n    # We iterate over the range of possible correct answers\n    for correct_answers in range(attempted_questions + 1):\n        incorrect_answers = attempted_questions - correct_answers\n        # Calculate score based on correct and incorrect answers\n        score = correct_answers * 4 - incorrect_answers * 2\n        if score == woody_score:\n            return correct_answers\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return int(n)\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    days_in_january = 31\n    boy_count = 432\n\n    min_boys_per_day = boy_count // days_in_january\n    remainder = boy_count % days_in_january\n\n    return min_boys_per_day + (1 if remainder > 0 else 0)\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    from itertools import permutations\n    digits = ['0', '2', '3']\n    \n    # Generate all possible permutations of length 3\n    perms = [''.join(p) for p in permutations(digits, 3)]\n    \n    # Filter out the permutations that do not start with '0'\n    valid_numbers = [int(p) for p in perms if not p.startswith('0')]\n    return len(valid_numbers)\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    number_of_other_cars = 31 - 1\n    gap_between_cars = 5\n    total_gaps = 31 + 1  # gaps before first car, between cars, and after last car\n\n    total_length = first_car_length + (other_cars_length * number_of_other_cars) + \\\n                   (gap_between_cars * total_gaps)\n\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    seventh_term = 105\n    common_difference = 120 - 105\n    nth_term = seventh_term + (100 - 7) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given = 23\n    remaining_chocolates = total_chocolates - chocolates_given\n    return remaining_chocolates\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        number = int(''.join(perm))\n        if number > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "def solution():\n    from itertools import permutations\n    \n    total_count = 0\n    \n    for perm in permutations(\"ABCDEFG\"):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C'):\n            if 'DE' in ''.join(perm) or 'ED' in ''.join(perm):\n                total_count += 1\n        elif perm.index('A') < perm.index('B') and perm.index('A') > perm.index('C'):\n            if 'DE' in ''.join(perm) or 'ED' in ''.join(perm):\n                total_count += 1\n    \n    return total_count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    ans = 5272 // 4\n    return ans\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = sarah_ratio + 2 + 5\n    sarah_sweets = 12\n    total_sweets = (sarah_sweets * total_ratio) / sarah_ratio\n    return total_sweets\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    total_biscuits_cost = 7 * 73  # in pence\n    total_cakes_cost = 9 * 113    # in pence because £1.13 is 113p\n\n    total_cost_pence = total_biscuits_cost + total_cakes_cost\n\n    # Convert total cost to pounds (£1 = 100p)\n    total_cost_pounds = total_cost_pence / 100  # convert pence to pounds\n    \n    change = 20 - total_cost_pounds  # Calculate the change from £20 note\n\n    return round(change, 2)  # round to 2 decimal places for pounds and pence\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n\n    initial_length = current_length / (1 + growth_rate)\n\n    return initial_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_petrol = week1 + week2 + week3\n\n    return total_petrol\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    \n    # The correct way to find the number of combinations is by multiplying the number of tops and bottoms.\n    combinations = tops * bottoms\n\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    lunch_duration = timedelta(minutes=20)\n    tv_duration = timedelta(minutes=20)\n    play_time = timedelta(minutes=10)\n\n    home_arrival_time = lunch_end_time - lunch_duration - tv_duration - play_time\n    return home_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from math import factorial\n\ndef solution():\n    # Set of digits to be used\n    digits = {2, 0, 1, 7}\n    \n    # Function to calculate permutations (nPr)\n    def permutations(n, r):\n        return factorial(n) // factorial(n-r)\n    \n    # For 3-digit numbers, all digits must be used\n    # 0 cannot be the first digit, so we have 3 options for the first place and 3! for the remaining\n    three_digit_numbers = 3 * permutations(3, 2)\n    \n    # For 4-digit numbers, all digits must be used\n    # Again, 0 cannot be the first digit, so 3! options for the 4-digit number\n    four_digit_numbers = permutations(3, 3)\n    \n    # Total number of numbers that can be formed\n    total_numbers = three_digit_numbers + four_digit_numbers\n    \n    return total_numbers\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n    \n    # Sam gave 20% of his stickers to Peter\n    sam_gives = sam * 0.20\n    peter_receives = peter + sam_gives\n    \n    # Peter gave 25% of his stickers to Sam\n    peter_gives = peter_receives * 0.25\n    sam_receives = sam - sam_gives + peter_gives\n\n    # In the end, Sam had 96 stickers more than Peter after the exchange\n    equation2 = Eq(sam_receives, peter_receives - peter_gives + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    num = 1\n    while True:\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    # Convert mixed fraction to improper fraction (6 * 2 + 1) / 2\n    numerator = 6 * 2 + 1\n    denominator = 2\n\n    # Division of fractions is equivalent to multiplying by the reciprocal (2/1)\n    result = (numerator / denominator) * (2 / 1)\n    \n    return result\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    ans = 887 + 96\n    return ans\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    number_of_terms = 14\n    \n    # Use the formula for the sum of an arithmetic sequence: n/2 * (2a + (n - 1)d)\n    sum_of_sequence = number_of_terms / 2 * (2 * first_term + (number_of_terms - 1) * common_difference)\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    # Initialize variables to count the total number of 9s and pages\n    nines_count = 0  \n    page_number = 0\n    \n    # Loop until the count of nines reaches 181\n    while nines_count < 181:\n        page_number += 1  # Move to the next page\n        nines_count += str(page_number).count('9')  # Count 9s in the current page number\n\n    # Since we stop the loop when we have 181 or more nines, the last page number is the answer.\n    return page_number\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of crystals Jason had at first\n    x = symbols('x')\n    \n    # Create the equation based on the problem description\n    equation = Eq(x/2 + 10 + 20 - 14, 35)\n\n    # Solve the equation\n    initial_crystals = solve(equation, x)\n\n    return initial_crystals[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    # Given: 1 black, 2 white, 2 grey pattern\n    # Since there are 14 grey rabbits, and the pattern repeats every 5 rabbits,\n    # we can calculate the number of full pattern repeats.\n    grey_per_repeat = 2\n    pattern_repeats = 14 // grey_per_repeat\n\n    # Calculate the total number of rabbits from the full pattern repeats.\n    rabbits_per_repeat = 5  # 1 black, 2 white, 2 grey\n    total_rabbits = pattern_repeats * rabbits_per_repeat\n\n    # After the full patterns, we need to check if there are additional grey rabbits.\n    remaining_grey = 14 % grey_per_repeat\n    if remaining_grey > 0:\n        # According to the pattern, we need to add the remaining 2 grey, 1 black, and 2 white rabbits.\n        total_rabbits += (remaining_grey + 1) + 2  # Adding 1 black for every new grey, and 2 for a white.\n\n    return total_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    numbers = [0, 1, 5, 8]\n    three_digit_numbers = set()\n\n    for i in numbers:\n        for j in numbers:\n            for k in numbers:\n                if i != j and i != k and j != k and i != 0:\n                    three_digit_numbers.add(i * 100 + j * 10 + k)\n    \n    largest_number = max(three_digit_numbers)\n    smallest_number = min(three_digit_numbers)\n\n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "from math import gcd\n\ndef solution():\n    class_A_students = 12\n    class_B_students = 15\n    class_C_students = 18\n    \n    # Calculate the greatest common divisor of the three class sizes\n    greatest_common_factor = gcd(gcd(class_A_students, class_B_students), class_C_students)\n    \n    return greatest_common_factor\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3', '4']\n    count = 0\n    for p in permutations(digits):\n        if p[-1] in {'2', '4'}:  # Must end with an even digit\n            count += 1\n    return count\n    \nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    ans = 37 * 27\n    return ans\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    num = 180\n    prime_factors_count = 0\n    factor = 9\n\n    # Find divisors of num that are multiples of factor 9\n    for i in range(1, num + 1):\n        if num % i == 0 and i % factor == 0:\n            prime_factors_count += 1\n\n    return prime_factors_count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = 2 / 3 * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return int(total_age)\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n\n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        number = int(f\"26{a}539\")\n        if number % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    yi_yen, kyra = symbols('yi_yen kyra')\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n    \n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n    \n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = price_per_box * number_of_boxes\n    \n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    # Conversion of £2 to pence\n    total_pence = 200 \n    \n    # Cost of purchasing sweets individually\n    single_cost = 12\n    \n    # Cost of purchasing sweets in a bundle of three\n    bundle_cost = 30\n    \n    # Maximum number of sweets in bundles of three\n    max_bundles = total_pence // bundle_cost\n    \n    # Remaining pence after buying maximum bundles of three\n    remaining_pence = total_pence % bundle_cost\n    \n    # Number of additional sweets that can be bought with the remaining pence\n    additional_sweets = remaining_pence // single_cost\n    \n    # Maximum number of sweets\n    max_sweets = (max_bundles * 3) + additional_sweets\n    \n    return max_sweets\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # Since there are 10 identical balls and 7 different boxes with at least 1 ball in each box,\n    # we can firstly place 1 ball in each box, leaving us with 3 balls to distribute.\n    # This is equivalent to distributing 3 indistinguishable items into 7 distinguishable bins,\n    # which can be calculated using combinations with repetition:\n    # Comb(n + r - 1, r), where n is the number of bins and r is the number of items.\n    n = 7  # Number of boxes\n    r = 3  # Remaining balls\n    ans = comb(n + r - 1, r)\n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # Given the game, Felix should aim to leave a multiple of 3 candies for John\n    # This way, whether John picks 1 or 2 candies, Felix can always pick 2 or 1 candies respectively\n    # to get back to a multiple of 3\n\n    # Analyzing the end game scenario:\n    # If there are 3 candies left and it's Felix's turn, he can eat 2 and leave 1 candy for John\n    # then John has no choice but to eat that 1 candy, and Felix wins\n\n    # To ensure victory, Felix should go first and eat 1 candy.\n    # This way, 9 candies are left, which is a multiple of 3\n    # Felix's strategy is simply to keep the number of candies left as a multiple of 3 after each of John's turns\n    \n    # Return Felix's starting move and his strategy\n    starting_move = 1\n    strategy = \"Keep the number of candies left as a multiple of 3 after each of John's turns\"\n\n    return starting_move, strategy\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length // pipe_length\n\n    return num_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    total_numbers = 2016\n    count_double_underlined = 0\n    for number in range(1, total_numbers + 1):\n        # Count how many colors a number would be underlined with\n        colors = 0\n        if number % 2 == 0: \n            colors += 1\n        if number % 3 == 0:\n            colors += 1\n        if number % 4 == 0:\n            colors += 1\n        # If it's underlined exactly twice, increment the count\n        if colors == 2:\n            count_double_underlined += 1\n\n    return count_double_underlined\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let k be the current age of Kenny and b be the age of his brother\n    k, b = symbols('k b')\n\n    # May is currently 7 years old, so in 3 years she will be 10\n    may_age_then = 10\n\n    # The sum of the ages of Kenny and his brother when May is 10\n    total_age_then = 3 * may_age_then\n\n    # Establishing the equations\n    # Equation 1: The sum of the ages of Kenny and his brother will be 3 times May's age when she is 10\n    equation1 = Eq(k + 3 + b + 3, total_age_then)\n\n    # Equation 2: Kenny is 2 years older than his younger brother\n    equation2 = Eq(k, b + 2)\n\n    # Solving the system of equations for the ages of Kenny and his brother\n    solutions = solve((equation1, equation2), (k, b))\n\n    # Kenny's current age is k, May's current age is 7, so the difference is k - 7\n    kenny_age_now = solutions[k]\n    age_difference = kenny_age_now - 7\n\n    return age_difference\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    pages_with_3 = 0\n    current_page = 1\n    \n    while pages_with_3 < 28:\n        if '3' in str(current_page):\n            pages_with_3 += str(current_page).count('3')\n        current_page += 1\n\n    return current_page - 1\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    # Total amount before losing a coin\n    total = 50 + 20 + 10 + 5\n\n    # Check each coin to see if the remaining amount is twice that of the brother's\n    for coin in [50, 20, 10, 5]:\n        if (total - coin) % 2 == 0 and (total - coin) // 2 < coin:\n            return coin  # The coin Zoey lost\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the amount of water the tank can hold.\n    # If he uses a 5-litre pail, 4 litres of water will overflow, which means:\n    # x + 4 = 5 * pails_5 (where pails_5 is the number of 5-litre pails needed to fill and overflow the tank)\n    \n    # If he uses a 3-litre pail, he needs 4 more pails of water, which means:\n    # x = 3 * (pails_3 + 4) (where pails_3 is the number of 3-litre pails needed to fill the tank exactly)\n\n    # Since both equations equal x (the tank's capacity), we can set them equal to each other:\n    # 5 * pails_5 - 4 = 3 * (pails_3 + 4)\n    \n    # To find the solution, we can check for the smallest common x that satisfy both equations:\n    # Start with the smallest possible number of pails_5 (since 4 litres will overflow, there must be at least 1 pail)\n    pails_5 = 1\n    while True:\n        x = 5 * pails_5 - 4\n        if (x - 12) % 3 == 0:  # Subtract the extra 3*4 litres, then check if the remaining is divisible by 3\n            return x\n        pails_5 += 1\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n\n    ans = ways_to_pick_girls * ways_to_pick_boys\n\n    return ans\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55  # Convert 15.55 to minutes\n    second_bus_time = 16 * 60 + 35  # Convert 16.35 to minutes\n \n    # Arrival time after being 4 minutes late for the first bus\n    arrival_time = first_bus_time + 4\n\n    # The time to wait for the second bus\n    wait_time = second_bus_time - arrival_time\n\n    return wait_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n\n    # Original number of students is equal to boys plus girls\n    original_students_eq = Eq(boys + girls, 152)\n\n    # If we remove 1/11 of boys and 5 girls, boys and girls will be equal\n    boys_girls_equal_eq = Eq(boys - boys/11, girls - 5)\n\n    # Solve the system of equations for boys and girls\n    solutions = solve((original_students_eq, boys_girls_equal_eq), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    tree_distance = 5\n\n    # number of intervals is one less than the number of trees\n    num_trees = (road_length // tree_distance) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    num_workers = 70\n    capacity = 8\n    num_lorries = (num_workers + capacity - 1) // capacity\n    return num_lorries\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # Let's denote the 5 different numbers as a, b, c, d, e.\n    # According to the given information, the sum of any 4 of these 5 numbers \n    # should give us 4 possible sums which when divided by 4,\n    # gives us the averages of 36, 38, 39, 45 and 49 respectively.\n    # Let's calculate the total sum of the four combinations \n    \n    sums_of_four = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]\n    total_sum_of_all_combinations = sum(sums_of_four)\n    \n    # Since each number is counted 4 times in the total_sum_of_all_combinations,\n    # we calculate the total sum of the five numbers by dividing this sum by 4\n    total_sum_of_numbers = total_sum_of_all_combinations / 4\n    \n    # Now, the largest number will be the total sum minus the smallest sum of four numbers\n    # which is the sum for the average 36\n    largest_number = total_sum_of_numbers - (36 * 4)\n\n    return largest_number\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days_pages = 40\n    next_four_days_average = 20\n    last_two_days_pages = 60\n\n    next_four_days_pages = next_four_days_average * 4\n\n    total_pages = first_three_days_pages + next_four_days_pages + last_two_days_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    for students in range(1, 1000):  # Assuming a reasonable upper bound\n        if (students - 6) % 4 == 0 and (students + 5) % 5 == 0:\n            return students\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 + d2 + d3 == 12 and len(set([d1, d2, d3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    while True:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        if bill_age == sum(grandsons_ages):\n            break\n    return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    handful_spaghetti_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + handful_spaghetti_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_sum_initial = 7 * 9  # Mean*Number of values\n    total_sum_final = 6 * 10   # New Mean*New Number of values\n\n    number_removed = total_sum_initial - total_sum_final\n\n    return number_removed\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people * (1/3)\n    people_remaining = total_people - people_left\n\n    return int(people_remaining)\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    interval_a = 15\n    interval_b = 12\n    interval_c = 8\n\n    lcm_interval = lcm(interval_a, interval_b, interval_c)\n    \n    hours = lcm_interval // 60\n    minutes = lcm_interval % 60\n    \n    next_arrival_hour = 10 + hours\n    next_arrival_minute = minutes\n\n    return (next_arrival_hour, next_arrival_minute)\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    return (16 - 1) // 5\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    marks_for_correct = 5\n    marks_for_wrong = -2\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        total_marks = (correct_answers * marks_for_correct) + (wrong_answers * marks_for_wrong)\n        if total_marks == 79:\n            return correct_answers\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    max_two_sports_only = (swimmers + cyclists + table_tennis_players) - total_students\n\n    max_individual_sport = max(swimmers, cyclists, table_tennis_players)\n    min_all_three_sports = max_individual_sport - max_two_sports_only\n\n    return min_all_three_sports\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    ans = (3999 * 2014.2014 + 3999.3999 * 2014) / 12.0012\n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_taken = 30  # in seconds\n    length_of_train = 360  # in meters\n    # Speed = Distance / Time\n    speed_of_train = length_of_train / time_taken  # in meters per second\n    # convert speed from m/s to km/h by multiplying with 3.6\n    speed_of_train_kmh = speed_of_train * 3.6\n    \n    return speed_of_train_kmh\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The number has a remainder of 3 when divided by 4, 5 or 9\n    # Hence, the congruences are:\n    #   number ≡ 3 (mod 4)\n    #   number ≡ 3 (mod 5)\n    #   number ≡ 3 (mod 9)\n\n    # Applying Chinese Remainder Theorem to solve the system of congruences\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    number, _ = solve_congruence(*congruences)\n\n    # We need the smallest three-digit number less than 200\n    # We iterate through multiples of the LCM of mods until we find one\n    lcm_mods = 4 * 5 * 9\n    num = number\n    while num < 100:  # Find the first 3-digit number\n        num += lcm_mods\n\n    # Ensure the number is less than 200\n    while num < 200:\n        ans = num\n        num += lcm_mods\n\n    return ans\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    effective_distance_per_day = distance_per_day - slide_per_night\n\n    # The snail climbs out once it reaches the top before sliding down at night\n    days_to_reach_top = (total_distance - distance_per_day) / effective_distance_per_day\n    \n    day_of_success = int(days_to_reach_top) + 1  # since days_to_reach_top will be a decimal less than the correct day\n\n    return day_of_success\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n    \n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n    \n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    for total_people in range(2, 50):\n        interval = total_people // 2\n        if (10 + interval) % total_people == 24 % total_people:\n            return total_people\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_stationery_percentage = 20\n    savings_minus_food = -6\n\n    books_stationery = (books_stationery_percentage / 100) * pocket_money\n    food_plus_transport = pocket_money - books_stationery\n    # Let transport be x, food be 3x, and savings be 3x + savings_minus_food\n    x = food_plus_transport / 4\n    food = 3 * x\n    savings = food + savings_minus_food\n\n    savings_percentage = (savings / pocket_money) * 100\n\n    return savings_percentage\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    ans = 7.72 - 7.54\n    return ans\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    # Consider all factors of 66\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    \n    # Check which factor of 66 would make Meiling's age four years ago a multiple of 6\n    for age_this_year in factors_of_66:\n        age_four_years_ago = age_this_year - 4\n        \n        # Check if her age 4 years ago was a multiple of 6\n        if age_four_years_ago % 6 == 0:\n            return age_this_year\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n    \n    # LCM of the two intervals\n    return lcm(24, 64)\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n    for number_tuple in permutations('123456', 4):\n        number = int(''.join(number_tuple))\n        if 3267 <= number <= 5120:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # To ensure 4 marbles of different colours, we have to consider the worst case scenario\n    # where we pick the maximum number of marbles of one colour before moving to the next.\n    \n    # There are 4 colours: red, blue, yellow, purple (3 red is typo, assuming it should be 3 purple)\n    # The worst case scenario would be picking all marbles of one colour before picking another colour.\n\n    # So we first take all 12 red marbles, but still only have 1 colour.\n    # Next, we take all 9 blue marbles, but still have only 2 colours.\n    # Then, we take all 8 yellow marbles, and at this point we have 3 colours.\n\n    # To ensure the 4th colour, we need to draw only 1 more marble, which is a purple one.\n    # Therefore, the minimum number of draws needed is the sum of all the marbles drawn before plus 1.\n\n    red = 12\n    blue = 9\n    yellow = 8\n    # The last draw is for the 4th colour, which could be red according to the original typo or purple\n    # Assume purple here\n    purple = 3\n\n    # Sum of marbles drawn to ensure 4 different colours\n    draws = red + blue + yellow + 1\n\n    return draws\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    # The factors of 75 are 1, 3, 5, 15, 25, 75\n    # We need to find a 2-digit factor of 75\n    # Additionally, when divided by 6, there is a remainder of 3\n    # Therefore, the number must be of the form 6n + 3\n    # Let's loop through the factors of 75 and check the condition\n    for factor in [15, 25, 75]:\n        if factor >= 10 and factor < 100 and (factor % 6) == 3:\n            return factor\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    # Little Miss Careless saw the subtrahend wrongly\n    incorrect_subtrahend = 41\n    incorrect_difference = 50\n    \n    # Original correct minuend is found by reversing the subtraction\n    correct_minuend = incorrect_subtrahend + incorrect_difference\n    \n    # Correct subtrahend\n    correct_subtrahend = 14\n    \n    # Find the correct difference\n    correct_difference = correct_minuend - correct_subtrahend\n    \n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum([40-38, 36-34, 32-30, 28-26, 24-22])\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters_apples_each = 5\n    number_of_sisters = 4\n    apples_left = 20\n\n    total_apples = justin_apples + (sisters_apples_each * number_of_sisters) + apples_left\n    return total_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    return 45.36 + 1.25 + 2.75 + 4.64\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    amount = 7320.5\n    years = 4\n\n    rate = (amount / principal) ** (1 / years) - 1\n    return round(rate, 4)\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    # Initially, let's assume there were n rows and n columns, so there are n*n soldiers.\n    # According to the problem, after adding 31 soldiers, we have (n+1)*(n+1) soldiers,\n    # which equates to n*n + 31 soldiers.\n    # Hence, the equation becomes: n*n + 31 = (n+1)*(n+1)\n    # Simplifying, we get: 31 = 2n + 1\n    # So, n = (31 - 1) / 2\n    # Finally, the total number of soldiers now is (n+1)*(n+1).\n\n    n = (31 - 1) // 2\n    total_soldiers = (n + 1) * (n + 1)\n    return total_soldiers\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    return 888 // 24\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    result = 56 / 21\n    return int(result)\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    part1 = 3.2 + 6.77 + 8.88\n    part2 = 6.77 + 8.88 + 6.3\n    part3 = 3.2 + 6.77 + 8.88 + 6.3\n    part4 = 6.77 + 8.88\n\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    february_saved = total_saved - (january_saved + march_saved)\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_for_one_picture = 10  # time in minutes\n    total_time_available = 80  # time in minutes (1 hour and 20 minutes)\n    \n    number_of_pictures = total_time_available / time_for_one_picture\n    \n    return int(number_of_pictures)\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    minutes = 8\n    seconds_per_minute = 60\n    return minutes * seconds_per_minute\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    interest_rate = 0.08\n    years = 4\n\n    present_value = final_amount / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    ans = 7.3 - 2.64\n    return ans\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    other_children = 5  # Number of other children\n    total_apples = 30  # Total number of apples\n    min_apples_others = 1  # Each of the other children should get at least one apple\n\n    max_apples_ann = total_apples - (other_children * min_apples_others)\n    return max_apples_ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '6', '7', '8', '9']\n\n    for p in permutations(digits, 3):\n        x1 = int(''.join(p))\n        x2 = 2 * x1\n        x3 = 4 * x1\n        x1_digits = set(str(x1))\n        x2_digits = set(str(x2))\n        x3_digits = set(str(x3))\n        if (x1_digits | x2_digits | x3_digits) == set(digits) and len(x1_digits | x2_digits | x3_digits) == 7:\n            return x3\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Outfits with a shirt, pants and shoes\n    outfits_with_pants = shirts * pants * shoes\n    \n    # Outfits with a dress and shoes\n    outfits_with_dress_shoes = dresses * shoes\n\n    # Outfits with a dress and heels\n    outfits_with_dress_heels = dresses * heels\n\n    # Total outfits\n    total_outfits = outfits_with_pants + outfits_with_dress_shoes + outfits_with_dress_heels\n    \n    return total_outfits\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    # Define the equations based on the problem\n    equation1 = Eq(A + B, 13)  # A and B together weigh 13 kg\n    equation2 = Eq(A + C, 25)  # A and C together weigh 25 kg\n    equation3 = Eq(C, 3 * B)   # C weighs 3 times as much as B\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy = symbols('book teddy')\n    equation1 = Eq(4 * book + 8 * teddy, 164)\n    equation2 = Eq(2 * book + 3 * teddy, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    # Convert everything to grams for easier calculation\n    total_mass_g = 9 * 1000 + 5        # Total mass in grams\n    soil_mass_g = 4 * 1000 + 50        # Soil mass in grams\n\n    # Calculate the mass of the sand by subtracting the soil mass from total mass\n    sand_mass_g = total_mass_g - soil_mass_g\n\n    # Calculate the difference by subtracting soil mass from sand mass, taking absolute value in case of negative result\n    difference_g = abs(sand_mass_g - soil_mass_g)\n\n    # Convert the difference back to kg and g\n    difference_kg = difference_g // 1000  # Convert back to kilograms\n    difference_remainder_g = difference_g % 1000  # Remainder in grams\n\n    # Since we are looking for difference, it should always be positive, so we take the absolute value\n    ans = (difference_kg, difference_remainder_g)\n    return ans\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n    equation1 = Eq(james + nina, 22)\n    equation2 = Eq(nina - 4, james + 4)\n\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = 1  # Start with the initial 1 from the expression\n    for i in range(2, 101):  # Loop from 2 to 100\n        for j in range(1, i):  # Loop over all the numerators for each denominator\n            ans += j / i\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        score = correct * 4 - incorrect * 2\n        if score == 29:\n            return correct\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    from math import gcd\n    from sympy import divisors, primefactors\n\n    # Given that the highest common factor of M and N is 75\n    # and 75 = 3^1 * 5^2, both M and N should be of the form 3^a * 5^b\n    \n    # Given M has 12 factors and N has 10 factors\n    # The number of factors is calculated by (a+1)*(b+1)\n    # Find combinations of (a,b) such that (a+1)*(b+1) = 12 for M\n    # and (a+1)*(b+1) = 10 for N\n    # and gcd(M, N) = 75\n    \n    # Find pairs (a, b) for M\n    M_factors = [(a, b) for a in range(0, 12) for b in range(0, 12) if (a + 1) * (b + 1) == 12]\n    # Find pairs (a, b) for N\n    N_factors = [(a, b) for a in range(0, 10) for b in range(0, 10) if (a + 1) * (b + 1) == 10]\n    \n    # Check if the gcd of any pair from M and N factors is the same as the gcd of M and N (which is 75)\n    for a_M, b_M in M_factors:\n        for a_N, b_N in N_factors:\n            # Calculating M and N\n            M = 3**a_M * 5**b_M\n            N = 3**a_N * 5**b_N\n            # Check if gcd(M, N) is 75\n            if gcd(M, N) == 75:\n                prime_factors_M = primefactors(M)\n                prime_factors_N = primefactors(N)\n                # Check if both M and N have only 3 and 5 as prime factors \n                if set(prime_factors_M).issubset({3, 5}) and set(prime_factors_N).issubset({3, 5}):\n                    return M + N\n    return None\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    sequence_length = 5\n    total_digits = 52\n    \n    # The complete pattern sequences that fit into the 52-digit number\n    complete_sequences = total_digits // sequence_length\n    \n    # Digits in the incomplete part of the pattern at the end\n    remaining_digits = total_digits % sequence_length\n    \n    # Sum of digits in the pattern '12345'\n    pattern_sum = sum(range(1, sequence_length + 1))\n    \n    # Sum of the remaining digits (incomplete part)\n    remaining_sum = sum(range(1, remaining_digits + 1))\n    \n    # Total sum = (sum of complete sequences) + (sum of remaining part)\n    total_sum = (complete_sequences * pattern_sum) + remaining_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_needed_per_kite = 0.36\n    total_paper_available = 4.8\n\n    num_kites = total_paper_available / paper_needed_per_kite\n\n    return int(num_kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_distance = 320\n    number_of_gaps = 79 - 1  # Since there are no trees at the beginning and end, there are 79 - 1 gaps\n\n    distance_between_each_tree = total_distance / number_of_gaps\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Initially Owen trades 10 fish for 4 rabbits\n    fish_to_rabbits_ratio = 10 / 4\n    \n    # Then Oscar trades 5 rabbits for 6 packs of wheat\n    rabbits_to_wheat_ratio = 6 / 5\n    \n    # We need to find out how many fish should be traded for 12 packs of wheat\n    # First, find the total ratio of fish to wheat\n    fish_to_wheat_ratio = fish_to_rabbits_ratio * rabbits_to_wheat_ratio\n    \n    # Calculate the number of fish for 1 pack of wheat\n    fish_per_pack_wheat = 1 / fish_to_wheat_ratio\n    \n    # Calculate the number of fish for 12 packs of wheat\n    fish_for_12_packs_wheat = 12 * fish_per_pack_wheat\n    \n    return fish_for_12_packs_wheat\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    long_rod = 10 + Fraction(4, 5)\n    short_rod = Fraction(3, 10)\n    number_of_short_rods = long_rod // short_rod\n    return number_of_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_price = 149.99\n    deal_laptops = 30\n    deal_price = 2800.00\n    required_laptops = 20\n\n    # Calculate the total price if bought without the deal\n    total_price_without_deal = single_laptop_price * required_laptops\n    \n    # Calculate the price per laptop with the deal\n    price_per_laptop_deal = deal_price / deal_laptops\n    \n    # Calculate the total price with the price per laptop from the deal\n    total_price_with_deal = price_per_laptop_deal * required_laptops\n    \n    # Calculate the savings\n    savings = total_price_without_deal - total_price_with_deal\n    \n    return savings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Calculate the arrangement of 4 dancing performances\n    # There are 5 possible positions for the dancing performances (including the extreme ends)\n    # with at least 1 singing performance between every 2 dancing\n    # which can be seen as dashes in the arrangement: S _ S _ S _ S _ S\n    # so we need to choose 4 out of the 5 available positions for the dancing performances\n    possible_positions_for_dance = 5\n    dance_arrangements = factorial(possible_positions_for_dance) // factorial(possible_positions_for_dance - 4)\n\n    # There are 6 singing performances, and the leftover singing performances can be arranged\n    # in any order in the remaining slots\n    remaining_singing_performances = 6 - possible_positions_for_dance + 1\n    singing_arrangements = factorial(remaining_singing_performances)\n\n    # The total number of arrangements is the product of dance arrangements and singing arrangements\n    total_arrangements = dance_arrangements * singing_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = original_price * (discount_percentage / 100)\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the number of penguins\n    p = symbols('p')\n    # If 3 fish are given to each penguin, there will be 5 fish left\n    equation1 = Eq(3 * p + 5, 4 * p - 15)\n\n    # Solve the equation\n    penguins = solve(equation1, p)\n\n    # Return the number of penguins\n    return penguins[0]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    earnings = hourly_rate * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    incorrect_result = -14\n    error = 26\n    actual_result = (incorrect_result + error) + error\n    return actual_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height * ratio_kelly) / ratio_matthew\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percentage = 35\n    amount = 80\n\n    ans = (percentage / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    for home in range(4):  # The home team can score 0, 1, 2, or 3 goals by halftime\n        for away in range(3):  # The away team can score 0, 1, or 2 goals by halftime\n            # The half time score must be such that remaining goals that can be scored add up to the final score\n            if home <= 3 and away <= 2 and (3 - home + 2 - away) >= 0:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n    cards_lost = original_cards * fraction_lost\n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 as it is the first digit of a two-digit number\n        for b in range(10):  # 'b' can be 0 through 9\n            if 10 * a + b + 10 * b + a + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    clara, emma = symbols('clara emma')\n    equation = Eq(clara, 5 * emma)\n    total_cookies = Eq(clara + emma, 1002)\n\n    solutions = solve((equation, total_cookies), (clara, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "def solution():\n    from math import comb\n    return comb(6, 2)\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Since Mike's desk position is the 2nd from all sides in a rectangular array\n    # This means the array has to be 3 desks long on any side that Mike is 2nd\n    # Hence, the number of students (desks) is 3 * 3\n    count_students = 3 * 3\n    return count_students\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_weight_when_half_full = half_full_weight - (full_weight - half_full_weight)\n\n    empty_basket_weight = full_weight - 2 * mangoes_weight_when_half_full\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    return 85 / 100 * 400\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 8.5 - 4 * (x - 1.5) + 3.2 * (x - 2) - (2.5 * x + 3 * (2.5 - x))\n\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    bud_sweets = 16  # sweets left for Bud\n    pip_fraction = 3/5\n\n    # If Pip ate 3/5 and Bud gets 16, Bud must have 2/5 of the sweets \n    total_sweets = bud_sweets / (2/5)\n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    num = 6 * 5\n    percentage = (num / 40) * 100\n    return percentage\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g, b = symbols('g b')\n\n    # According to the problem, the number of girls who can swim is 3/8 of all girls\n    # The number of boys who can swim is 3/5 of all boys\n\n    # Therefore, the number of girls who cannot swim is (1 - 3/8) of all girls\n    # The number of boys who cannot swim is (1 - 3/5) of all boys\n\n    # We also know that the number of girls who cannot swim is equal to the number of boys who cannot swim\n    # So, (1 - 3/8) * g = (1 - 3/5) * b\n\n    # The total number of pupils who cannot swim is 20\n    # So, (1 - 3/8) * g + (1 - 3/5) * b = 20\n\n    # We have two equations:\n    equation1 = Eq((1 - 3/8) * g, (1 - 3/5) * b)\n    equation2 = Eq((1 - 3/8) * g + (1 - 3/5) * b, 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Total number of pupils is sum of all girls and boys\n    total_pupils = solutions[g] + solutions[b]\n\n    return total_pupils\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    cost_of_3_cups = 30\n    number_of_cups_bought_initially = 3\n    desired_number_of_cups = 5\n\n    cost_per_cup = cost_of_3_cups / number_of_cups_bought_initially\n    total_cost_for_desired_cups = cost_per_cup * desired_number_of_cups\n    \n    return total_cost_for_desired_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    total_rabbits = 38\n    big_houses = 5\n    small_houses = 9\n    rabbits_in_big = big_houses * 4\n    rabbits_in_small_total = total_rabbits - rabbits_in_big\n    rabbits_in_each_small = rabbits_in_small_total // small_houses\n    \n    return rabbits_in_each_small\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_a_week = 7\n\n    total_earnings = average_daily_earnings * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        if i % 2 == 0:\n            ans += i**2\n        else:\n            ans -= i**2\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    def count_ways(steps):\n        if steps == 0:\n            return 1\n        if steps < 0:\n            return 0\n        # Number of ways to reach the current step is the sum of the ways\n        # to reach the three steps before it.\n        return count_ways(steps - 1) + count_ways(steps - 2) + count_ways(steps - 3)\n\n    return count_ways(6)\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # March to July is 5 months\n    total_pizzas = average_pizzas_per_month * number_of_months\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_val = 21 + 22 + 23\n    for i in range(1, sum_val + 1):\n        if 2 * 3 * i == sum_val:\n            return i\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n\n    # Abigail is three times as old as Ryan\n    equation1 = Eq(abigail, 3 * ryan)\n    # In 6 years, Abigail will be 42\n    equation2 = Eq(abigail + 6, 42)\n\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    # Calculate how old Ryan will be in 2 years\n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_still_water = 33\n    speed_current = 3\n    speed_upstream = speed_still_water - speed_current\n    distance = 150\n\n    time = distance / speed_upstream\n    \n    return time\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2*drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4\n    if first_multiple < 56:\n        first_multiple += 4\n    last_multiple = (92 // 4) * 4\n    \n    num_multiples = (last_multiple - first_multiple) // 4 + 1\n    return num_multiples\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    halfway_number = (3.5 + 6.9) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum((-1)**((n+1)//4) * n for n in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    ans = 80 * 125 * 63\n    return ans\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # The ones digit of a number is determined by the ones digit of its powers\n    # The ones digit of 9 raised to any power has a cycle: 9, 1, 9, 1, ...\n    # This means the ones digit of 9^1 is 9, 9^2 is 1, 9^3 is 9, 9^4 is 1, and so on\n\n    # Since we are given 999^99, we only care about the ones digit of 9, which is 9\n    # We have to find the ones digit of that 9 elevated to the 99th power\n\n    # We know the pattern repeats every 2 powers (9, 1), so we find the remainder of 99 divided by the cycle length\n    cycle_length = 2\n    power = 99\n    remainder = power % cycle_length\n\n    # Now the remainder will tell us if we are at the first or second number in the cycle\n    if remainder == 1:\n        ones_digit = 9\n    else:\n        ones_digit = 1\n\n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    # Let x be Claire's current age\n    # In 6 years, Claire's age will be x + 6\n    # At that point, she will be three times her current age: 3 * x\n    # We can write an equation: x + 6 = 3 * x\n\n    # Solving the equation for x\n    x = symbols('x')\n    equation = Eq(x + 6, 3 * x)\n    claires_current_age = solve(equation, x)[0]\n\n    # Claire's age two years from now will be her current age plus 2\n    claires_age_in_two_years = claires_current_age + 2\n\n    return claires_age_in_two_years\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 't' be the time the journey should have taken\n    t = symbols('t')\n\n    # Journey time was 11/12 of the correct time\n    actual_time = (11/12) * t\n\n    # The train was 15 minutes late departing and arrived 5 minutes late\n    # So, actual_time = t - 10 (as 15 - 5 = 10)\n    equation = Eq(actual_time, t - 10)\n\n    # Solve for 't'\n    time_should_have_taken = solve(equation, t)\n\n    return time_should_have_taken[0]\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    \n    missing_number = (total_product - known_product) / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    coins = [1, 2, 5, 10, 20, 50, 100]\n    amount = 100 - 44  # Assuming Susan pays with a £1 coin\n    change_coins = []\n\n    for coin in reversed(coins):\n        while amount >= coin:\n            amount -= coin\n            change_coins.append(coin)\n\n    return len(change_coins)\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # Count of each color marble\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # Worst case scenario with pigeonhole principle: drawing the maximum number of one color\n    # before having to draw from another to guarantee 4 different colored marbles\n    # We have to draw all except one of th green marbles, which is the maximum count,\n    # and then one of each of the other colors.\n    max_single_color = max(red, green, blue, orange)\n    \n    # Subtract one to consider the worst case where we're left with just one color\n    draws = max_single_color - 1\n    \n    # Now add the other three to guarantee each color:\n    draws += 3\n\n    return draws\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return total_legs\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    distance_climbed = 3\n    distance_slid = 1\n    remaining_distance = total_distance - distance_climbed\n    net_distance_per_day = distance_climbed - distance_slid\n    day_count = 1  # Start from the first day\n    \n    while remaining_distance > distance_climbed:\n        day_count += 1\n        remaining_distance -= net_distance_per_day\n    \n    # On the final day, the snail climbs out without sliding back\n    day_count += 1\n    \n    return day_count\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # This is a problem of distributing n identical items to r distinct groups\n    # with at least one item in each group. This can be solved by using\n    # stars and bars method -> (n-1)C(r-1)\n    # Here, n = 19 books, r = 4 kids, and n - r = 15 bars to place + 3 bars to divide\n    \n    total_books = 19\n    kids = 4\n    \n    # Calculate combinations using factorial\n    ans = factorial(total_books - 1) // (factorial(kids - 1) * factorial((total_books - 1) - (kids - 1)))\n    \n    return ans\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    term = 2  # First term in the sequence\n    addend = 1  # Initial difference\n    while term < 100:  # Look for the first three digit number\n        term += addend\n        addend += 1  # Increase the difference for the next term\n    return term\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d')\n\n    equation1 = Eq(a, 5 * b)\n    equation2 = Eq(b, c + 5)\n    equation3 = Eq(c + d, a)\n    equation4 = Eq(d, 41)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, c, d))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((i + 2) ** 2 - i ** 2 for i in range(2, 41, 4))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    milk_per_cup = 1 / 6\n    total_cups = 30\n    total_milk_needed = milk_per_cup * total_cups\n    return total_milk_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    pip_and_bud = 2  # Pip and Bud themselves\n    total_people = people_in_front_of_pip + people_behind_bud + pip_and_bud\n    return total_people\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    # Let m, t, v represent the number of motorbikes, tricycles, and vans respectively\n    # Let w_m, w_t, w_v represent the number of wheels for each motorbike, tricycle, and van respectively\n    # Each motorbike has 2 wheels, so w_m = 2 * m\n    # Each tricycle has 3 wheels, so w_t = 3 * t\n    # Each van has 4 wheels, so w_v = 4 * v\n    # We have the following equations based on the problem statement:\n    # w_m + w_v = w_t + 35 (1)\n    # w_t + w_v = w_m + 13 (2)\n    # w_m + w_t + w_v = 101 (3)\n    \n    # From equation (1) and (2), we can write:\n    # 2*m + 4*v = 3*t + 35 (4)\n    # 3*t + 4*v = 2*m + 13 (5)\n    # From equation (3), we can also write:\n    # 2*m + 3*t + 4*v = 101 (6)\n    \n    # Now we solve the system of equations (4), (5) and (6)\n    for m in range(101):\n        for t in range(101):\n            for v in range(101):\n                if 2*m + 4*v == 3*t + 35 and 3*t + 4*v == 2*m + 13 and 2*m + 3*t + 4*v == 101:\n                    # Number of motorbikes more than vans is m - v\n                    return m - v\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Since pens are identical, we are looking for positive integer solutions (x, y, z) to the equation\n    # x + y + z = 6, where x, y, z are the number of pens in each pencil case.\n    # Considering each case to have at least one pen, we can transform this into a problem of distributing\n    # 3 pens into 3 different cases (since each case already has one pen).\n    # This is equivalent to finding the number of non-negative integer solutions (a, b, c) to the equation\n    # a + b + c = 3\n    # This is a problem of partitions with indistinguishable items, which can be solved with combinations.\n\n    # Import the necessary function from the itertools module\n    from itertools import combinations_with_replacement\n    \n    # Generate all combinations of adding three numbers to sum up to 3\n    pencil_cases = 3  # Number of pencil cases\n    pens_left = 3  # Number of pens left after giving each case one pen\n    ways = list(combinations_with_replacement(range(pencil_cases), pens_left))\n    \n    # Return the number of ways\n    return len(ways)\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "def solution():\n    from math import comb\n\n    year = '2014'  # Fixed year digits\n    total_days = 0\n\n    # Since we're counting occurrences of digits 0, 1, and 2, we have 6 available places.\n    # We need to make sure we have an equal number of each of the digits.\n    for i in range(3):  # Numbers of zeros, ones, and twos; should be the same\n        # Calculate the possibilities for the month and day placements\n        # Choose 'i' positions for '0' out of 6, 'i' positions for '1' out of '6-i', \n        # and 'i' positions for '2' out of '6-2i'\n        digit_combinations = comb(6, i) * comb(6 - i, i) * comb(6 - 2 * i, i)\n\n        # Validate months: 01 (Jan) to 12 (Dec)\n        for month in range(1, 13):\n            # Get digit counts for the month\n            month_str = \"{:02d}\".format(month)\n            zeros_in_month = month_str.count('0')\n            ones_in_month = month_str.count('1')\n            twos_in_month = month_str.count('2')\n\n            # If the month has more of 0, 1, or 2 than 'i', skip this month\n            if zeros_in_month > i or ones_in_month > i or twos_in_month > i:\n                continue\n\n            # Check how many are left for days\n            zeros_left_for_day = i - zeros_in_month\n            ones_left_for_day = i - ones_in_month\n            twos_left_for_day = i - twos_in_month\n\n            # Calculate the number of day combinations that can be made\n            for day in range(1, 32):\n                day_str = \"{:02d}\".format(day)\n                zeros_in_day = day_str.count('0')\n                ones_in_day = day_str.count('1')\n                twos_in_day = day_str.count('2')\n\n                if (zeros_in_day == zeros_left_for_day and ones_in_day == ones_left_for_day \n                        and twos_in_day == twos_left_for_day):\n                    if (month == 2 and day > 28) or \\\n                       (month in [4, 6, 9, 11] and day > 30):\n                        # Invalid: Feb only has 28 days, and some months only have 30 days\n                        continue\n                    total_days += digit_combinations\n\n    return total_days\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    numbers = [4, 5, 6, 9, 3, 9]\n    average = 6\n    total_sum = average * 8\n    current_sum = sum(numbers)\n    remaining_sum = total_sum - current_sum\n    \n    # getting the highest and lowest value of current numbers\n    highest = max(numbers)\n    lowest = min(numbers)\n    \n    # the highest difference is 6\n    for p in range(lowest, highest + 1):\n        # since p < q, q starts from p+1\n        for q in range(p + 1, highest + 7):  # the highest possible q is highest + 6\n            if p + q == remaining_sum and (q - lowest == 6 or highest - p == 6) and q - p < 6:\n                return q\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    difference = 3\n    term_number = 298\n\n    nth_term = ((term_number - first_term) // difference) + 1\n\n    return nth_term\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    both_sports = symbols('both_sports')\n\n    football_lovers = 3 * both_sports\n    basketball_lovers = 4 * both_sports\n    total_students = 36\n\n    # Using Inclusion-Exclusion Principle\n    # Total = Football lovers + Basketball lovers - Both sports - Neither (0 in this case)\n    equation = Eq(football_lovers + basketball_lovers - both_sports, total_students)\n\n    both_sports_num = solve(equation, both_sports)\n\n    return both_sports_num[0]\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Creating the congruence equations based on the remainders and divisors\n    # (remainder, modulus)\n    cong_eqs = [(3, 7), (7, 11), (9, 13)]\n\n    # Using solve_congruence to find the smallest number that satisfies the conditions\n    # The function returns a tuple, and we are interested in the first element here which is the smallest number\n    ans = solve_congruence(*cong_eqs)[0]\n\n    return ans\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    adam_speed = 60\n    jacob_speed = 80\n    jacob_time = 3\n    adam_time_remaining = 0.5\n\n    # Calculate the distance Adam will cover in the 0.5 hours remaining\n    adam_distance_remaining = adam_speed * adam_time_remaining\n\n    # Calculate the total distance Adam covers in 3.5 hours (3 hours + 0.5 hours)\n    adam_total_distance = adam_speed * (jacob_time + adam_time_remaining)\n\n    # Calculate the total distance Jacob covers in 3 hours\n    jacob_total_distance = jacob_speed * jacob_time\n\n    # The total distance between their homes is the sum of the distances both have covered\n    total_distance_apart = adam_total_distance + jacob_total_distance\n\n    return total_distance_apart\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    n = 21\n    \n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def custom_operation(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    result = custom_operation(custom_operation(custom_operation(1, 2), 3), 4)\n    result = custom_operation(result, 5)\n    return int(result)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    number = 252\n    num_factors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            num_factors += 1\n    return num_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    # Pigeonhole principle states that if n items are put into m containers,\n    # with n > m, then at least one container must contain more than one item.\n    # In this case, it would be at least one layer must contain more than\n    # total_cakes // layers cakes.\n    most_cakes = (total_cakes // layers) + (total_cakes % layers > 0)\n\n    return most_cakes\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07\n    paid_gst = 0.91\n\n    cost_before_gst = paid_gst / gst_rate\n\n    return cost_before_gst\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # According to the Pigeonhole Principle, in the worst-case scenario,\n    # Lucy has to take three marbles to guarantee she has 2 of the same color.\n    # This is because if she takes two marbles, they could be one of each color.\n    # Taking a third marble guarantees that at least two will be the same color\n    # since there are only two colors available.\n    return 3\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    kg_to_g = lambda kg: kg * 1000\n    weight1 = kg_to_g(2.49)\n    weight2 = 670\n    weight3 = kg_to_g(3) + 80\n    \n    total_weight = weight1 + weight2 + weight3\n    return total_weight\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    # Finding the least common multiple of their lap times \n    meeting_interval = lcm(ashley_time, ben_time, charlie_time)\n\n    # Calculate the meeting time in minutes and seconds\n    meeting_minutes = meeting_interval // 60\n    meeting_seconds = meeting_interval % 60\n\n    # Calculate the new hour and minute after adding the meeting time to 10.00 am\n    hour = 10 + (meeting_minutes // 60)\n    minute = meeting_minutes % 60\n\n    # Adjusting for 24-hour format if needed\n    hour %= 24\n\n    return f\"{hour:02d}:{minute:02d}:{meeting_seconds:02d}\"\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time_minutes = 60  # Total exercise time in minutes\n    cycling_fraction = 1 / 3\n    jogging_time_minutes = total_time_minutes * (1 - cycling_fraction)\n    return jogging_time_minutes\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n    \n    equation = Eq(justin + 18, 4 * (justin - 6))\n    \n    justin_age = solve(equation, justin)[0]\n    \n    return justin_age\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    common_difference = 18 - 22\n    last_term = 2\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Total apples\n    total_apples = 30\n    # Number of children\n    children = 6\n    \n    # Start by giving 1 apple to each child to satisfy \"at least one apple\" condition\n    total_apples -= children\n    \n    # Now, the problem reduces to find the maximum number a child can get\n    # Let's distribute the remaining apples in descending order to maximize for the largest child\n    max_apples_for_largest_child = 0\n    for i in range(children, 0, -1):\n        max_apples_for_largest_child += total_apples // i\n        total_apples -= total_apples // i\n\n    return max_apples_for_largest_child\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    sam_miles_per_gallon = 72.8\n    distance = 273\n    tom_additional_gallons = 6 + 3/4\n\n    sam_gallons_used = distance / sam_miles_per_gallon\n    tom_gallons_used = sam_gallons_used + tom_additional_gallons\n    tom_miles_per_gallon = distance / tom_gallons_used\n\n    return tom_miles_per_gallon\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # We are considering the worst-case scenario: picking the same color until forced to change.\n    # Start by picking the maximum amount of the most frequent color (brown), which we have 5 chips.\n    num_brown = 5\n\n    # Then, we pick all the chips of the next most frequent color (yellow), since we could still have only yellow and brown.\n    num_yellow = 4\n\n    # At this point, if we pick one more chip, it has to be red because we have already picked all brown and yellow.\n    # Therefore, one more chip is the smallest number needed to ensure two different colors.\n    num_extra = 1\n    \n    # Total is the sum of all the chips picked.\n    total_chips = num_brown + num_yellow + num_extra\n\n    return total_chips\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"24572{digit}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    ans = 9039 + 93\n    return ans\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum((2 * i + 1) ** 2 for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    # Number of shirts\n    shirts = 2\n    # Number of skirts\n    skirts = 2\n    \n    # Principle of multiplication for matching outfits\n    outfit_combinations = shirts * skirts\n    \n    return outfit_combinations\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # The pattern looks like it might be a geometric progression where every term is\n    # being multiplied by a certain constant to get the next term.\n    # Looking at 27 and 81, we see that 81 is 3 times 27.\n    # If we assume that the sequence is a geometric progression, then the second term\n    # (which is 3) should be 3 times the first term (which is 1).\n    # Therefore, the unknown term (the third term) should be 3 times the second term, \n    # which means it should be 3 * 3 = 9.\n\n    return 9\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    a7 = 105  # Seventh term\n    a8 = 120  # Eighth term\n    a9 = 135  # Ninth term\n\n    common_diff = a8 - a7  # Common difference in the arithmetic sequence\n    a1 = a7 - 6 * common_diff  # First term (a + (7-1)d = a7, thus a = a7 - 6d)\n\n    a100 = a1 + 99 * common_diff  # 100th term (a + (100-1)d)\n\n    return a100\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    num1_base10 = int('45', 7)\n    num2_base10 = int('66', 7)\n    \n    sum_base10 = num1_base10 + num2_base10\n    \n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n\n    return ans\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    # Number of Chinese, Mexican, and fast food restaurants\n    chinese = 9\n    mexican = 3\n    fast_food = 2\n\n    # Since they are choosing one place to eat from different categories, it's a simple sum\n    total_choices = chinese + mexican + fast_food\n    \n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3*x - 4), x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    # Let the initial number of oranges be 3x and lemons be 5x\n    # After selling 48 oranges, the number of oranges becomes 3x - 48\n    # According to the new ratio, we have (3x - 48) / 5x = 1 / 2\n    # Solving for x will give us the number of lemons as 5x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3 * x - 48) / (5 * x), 1/2)\n\n    x_value = solve(equation, x)[0]\n    lemons_at_first = 5 * x_value\n\n    return lemons_at_first\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    rabbits = 8\n    carrots_per_day_per_rabbit = 4\n    days = 5\n    \n    total_carrots = rabbits * carrots_per_day_per_rabbit * days\n    \n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Calculate the rates at which each animal eats a bale of hay per day\n    horse_rate = 1 / 2\n    cow_rate = 1 / 3\n    sheep_rate = 1 / 12\n\n    # Calculate the combined rate at which all animals eat hay per day\n    combined_rate = horse_rate + cow_rate + sheep_rate\n\n    # Calculate the number of days the bales of hay will last\n    days = 22 / combined_rate\n\n    return days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    return (5/8) * 160\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mother, daughter = symbols('mother daughter')\n\n    eq1 = Eq(mother - daughter, 75 - daughter) # When the daughter reaches the mother's current age\n    eq2 = Eq(mother - daughter, daughter - 3)  # When the mother was the daughter's current age\n\n    ages = solve((eq1, eq2), (mother, daughter))\n    \n    return ages[mother]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if month in [4, 6, 9, 11] and day > 30:\n                continue\n            if month == 2:\n                if day > 28:\n                    continue\n            date = f\"2014{month:02d}{day:02d}\"\n            if date.count('0') == date.count('1') == date.count('2'):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # Calculate the worst case where Isabella takes out all non-red apples first\n    non_red_apples = 11 + 7  # green + yellow\n    # Now to ensure 3 red apples, she needs to pick 3 more\n    total_apples = non_red_apples + 3  # The non-red apples plus 3 red ones\n    \n    return total_apples\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    original_amount = 200\n    new_amount = 204\n    change = new_amount - original_amount\n    percentage_change = (change / original_amount) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Maximum number of boys who are right-handed\n    max_right_handed_boys = total_pupils - girls\n\n    # Minimum number of girls who are right-handed = \n    # total right-handed - maximum number of right-handed boys\n    min_right_handed_girls = right_handed - max_right_handed_boys\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    result = 20 - 19 + 18 - 17 + 16 - 15 + 14 - 13\n    return result\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    original_price = 6400 / 0.2\n    savings = original_price - 6400\n    return savings\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # In a round-robin tournament, each team plays every other team once.\n    # Therefore, there are C(6, 2) = 6! / (2! * (6-2)!) = 15 games in total.\n\n    # Each game results in a total of 2 points being distributed (either 2 to the winner\n    # and 0 to the loser, or 1 to each team in the case of a tie).\n\n    # Therefore, with 15 games, the total number of points distributed will be 15 * 2.\n\n    total_points = 15 * 2\n    \n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    total_children = 45\n    capacity_minibus = 8\n\n    minibuses_needed = -(-total_children // capacity_minibus)\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # We know Jane has to draw at least one marble of each color \n    # But she is blindfolded, so she might have to draw more because of that.\n    \n    # Worst case scenario:\n    # She draws all marbles of one color, then all of another, and so on.\n    # So she draws all the green, then all the blue, and then she will need\n    # just one more marble which is guaranteed to be a different color.\n\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # The worst case scenario is she draws all but one color, then one more.\n    ans = green + blue + orange + 1  # The '+1' ensures the fourth color\n\n    return ans\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    g, b = symbols('g b')  # g for girls, b for boys\n    gs, gn = symbols('gs gn')  # gs for girls who swim, gn for girls who not swim\n    bs, bn = symbols('bs bn')  # bs for boys who swim, bn for boys who not swim\n\n    # Equations based on the problem statement\n    total_students_eq = Eq(g + b, 1690)          # Total number of students\n    boys_more_than_girls_eq = Eq(b, g + 90)      # Boys are 90 more than girls\n    girls_ratio_eq = Eq(gs/gn, 31/49)            # Ratio of girls who can swim to who can't\n    boys_diff_swim_eq = Eq(bs, bn - 120)         # Boys who can swim are 120 less than who can't\n    \n    # Solve the system of equations for girls and boys\n    solutions = solve((total_students_eq, boys_more_than_girls_eq), (g, b))\n    \n    # Find number of girls and boys\n    num_girls, num_boys = solutions[g], solutions[b]\n    \n    # Now calculate the girls who can swim (gs) and girls who can't swim (gn) based on the ratio\n    total_girls_eq = Eq(gs + gn, num_girls)      # Total number of girls\n    solutions_girls = solve((girls_ratio_eq, total_girls_eq), (gs, gn))\n    num_girls_swim = solutions_girls[gs]\n    num_girls_not_swim = solutions_girls[gn]\n    \n    # Calculate number of boys who can swim (bs) and boys who can't swim (bn)\n    total_boys_eq = Eq(bs + bn, num_boys)        # Total number of boys\n    solutions_boys = solve((boys_diff_swim_eq, total_boys_eq), (bs, bn))\n    num_boys_swim = solutions_boys[bs]\n    num_boys_not_swim = solutions_boys[bn]\n    \n    # Calculate total number of pupils who cannot swim\n    num_pupils_not_swim = num_girls_not_swim + num_boys_not_swim\n\n    return num_pupils_not_swim\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    from math import factorial\n    \n    def count_zeros(n):\n        count = 0\n        while n % 10 == 0:\n            n //= 10\n            count += 1\n        return count\n    \n    n = 1\n    while True:\n        fact = factorial(n)\n        if count_zeros(fact) == 28:\n            return n\n        elif count_zeros(fact) > 28:\n            return n - 1\n        n += 1\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    ans = 789 * 6\n    return ans\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "from sympy import primerange\n\ndef solution():\n    max_b = 41 // 7  # b cannot be larger than this value, as 7b must be less than or equal to 41\n    primes = list(primerange(1, max_b + 1))  # Generate all prime numbers up to max_b\n    possible_bs = [b for b in primes if (41 - 7 * b) % 3 == 0 and (41 - 7 * b) // 3 in primes]\n    if possible_bs:\n        b = possible_bs[0]\n        a = (41 - 7 * b) // 3\n        return a + b\n    else:\n        return None\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    price_per_pc_4pc = 7 / 4\n    price_per_pc_6pc = 8.5 / 6\n    \n    if price_per_pc_4pc < price_per_pc_6pc:\n        ans = '4pc'\n    else:\n        ans = '6pc'\n    \n    return ans\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        ""
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    # Let x be Kiera's monthly salary\n    x = symbols('x')\n    \n    # Kiera spent $740 on her phone, so left is x - 740\n    # Then she spent 75% of the remaining salary on rent\n    # 75% of (x - 740) is (3/4) * (x - 740)\n    # After spending on rent, she has (x - 740) - (3/4)*(x - 740) left\n    # Kiera has 1/5 of her salary left, which is equivalent to the amount left after spending on rent and phone\n    # So we can write the equation as: (x - 740) - (3/4)*(x - 740) = (1/5)*x\n    equation = Eq((x - 740) - (3/4)*(x - 740), (1/5)*x)\n    \n    # Solve for x\n    salary = solve(equation, x)\n    \n    return salary[0]\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    remaining_weight_after_removing_apples = 280\n    weight_of_3_apples = total_weight_with_apples - remaining_weight_after_removing_apples\n\n    weight_of_basket = total_weight_with_apples - weight_of_3_apples * (5 / 3)\n    return int(weight_of_basket)\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 4]\n    perm = permutations(digits)\n    unique_numbers = set()\n    \n    for p in perm:\n        for i in range(1, len(p)+1):\n            num = int(''.join(map(str, p[:i])))\n            unique_numbers.add(num)\n            \n    return len(unique_numbers)\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    # Start from 02:31 and check every minute until all the digits 0, 1, 2, 3 are found together\n    hours = 2\n    minutes = 31\n    total_minutes = 0\n    \n    while True:\n        # Increment time by 1 minute\n        minutes += 1\n        total_minutes += 1\n        if minutes == 60:\n            # Move to the next hour and reset minutes to 0\n            minutes = 0\n            hours += 1\n            if hours == 24:\n                # Reset hours to 0 after 23\n                hours = 0\n        \n        # Check if all needed digits are present\n        current_time = f\"{hours:02d}{minutes:02d}\"\n        if all(digit in current_time for digit in \"0123\"):\n            break\n\n    return total_minutes\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    after_class = 150 + 100  # After class he had 250ml\n    original = after_class * 2  # Before class he had 2 times what's left after class\n    return original\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n\n    equation1 = Eq(lynn - 160, mary - 58)\n    equation2 = Eq(mary - 58, 3 * (lynn - 160))\n\n    solutions = solve((equation1, equation2), (lynn, mary))\n\n    return solutions[lynn] - 160\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond_op(A, B):\n        return A * A - 3 * B\n\n    def triangle_op(A, B):\n        return 5 * A - B * B\n\n    # Calculate (4 ◆ 2)\n    step1 = diamond_op(4, 2)\n    # Calculate (Result of step1) △ 6\n    ans = triangle_op(step1, 6)\n\n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * 3/7\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * 3/8\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    bag_weight = 3/4\n    number_of_bags = remaining_after_tuesday / bag_weight\n    \n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percent_sold = 0.60\n    tickets_unsold = 28\n    percent_unsold = 1 - percent_sold\n\n    total_tickets = tickets_unsold / percent_unsold\n\n    return int(total_tickets)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # minimum possible divisor to get a remainder of 9\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    devi, jerry = symbols('devi jerry')\n\n    # Deⅵ is 8 years older than Jerry\n    equation1 = Eq(devi, jerry + 8)\n\n    # In 4 years' time, the ratio of their age will be 5:7\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    # Jerry's current age\n    jerry_age = solutions[jerry]\n\n    return jerry_age\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    sum = 0\n    for i in range(64, 43, -4):\n        sum = sum + i - (i-2)\n    return sum\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Initialize the variables for the mistaken tens and ones place\n    mistaken_tens = 5\n    mistaken_ones = 3\n    mistaken_subtrahend = mistaken_tens * 10 + mistaken_ones\n\n    # Initialize the variable for the actual tens and ones place\n    actual_tens = 3\n    actual_ones = 2\n    actual_subtrahend = actual_tens * 10 + actual_ones\n\n    # Initialize the variable for the achieved difference\n    achieved_difference = 36\n\n    # Find the correct difference by adding the mistaken difference and adjusting for the subtrahend error\n    correct_difference = achieved_difference - mistaken_subtrahend + actual_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    return (41 + 4) / 5\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_milliliters = 7 * 195\n    jug_capacity = 250\n\n    num_jugs = -(-total_milliliters // jug_capacity)\n\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1  # Initial total number of balls\n    blue_balls = 1  # The number of blue balls\n\n    # Let x be the number of red balls to be removed\n    # After removing x red balls, we have (49 - x) red balls left\n    # The new total number of balls will be (total_balls - x)\n    # We want 90% of this new total to be red, so:\n    # (49 - x) / (total_balls - x) = 0.9\n\n    # Solving for x:\n    x = symbols('x')\n    equation = Eq((49 - x) / (total_balls - x), 0.9)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    ans = sum(100 / i for i in range(97, 0, -1))\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    weight_of_empty_box = 12\n    number_of_matches = 220\n    \n    weight_of_matches = total_weight_with_matches - weight_of_empty_box\n    weight_of_one_match = weight_of_matches / number_of_matches\n    \n    return weight_of_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, birds = symbols('cows birds')\n\n    equation1 = Eq(cows + birds, 1300)  # Total number of animals\n    equation2 = Eq(4*cows + 2*birds, 3440)  # Total number of legs\n\n    solutions = solve((equation1, equation2), (cows, birds))\n\n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    number = 96\n    factors = set()\n    \n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    \n    return len(factors)\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    import math\n    m1, v1_north = 500, 20 # mass and velocity of the first car going north\n    m2, v2_west = 500, 30  # mass and velocity of the second car going west\n\n    # Since the cars stick together, use conservation of momentum\n    # p_initial = p_final, momentum is a vector quantity so it has both magnitude and direction\n    # Before the impact, the momentum is the sum of the individual momenta of the cars\n    p_total_north = m1 * v1_north  # total momentum in the northerly direction\n    p_total_west = m2 * v2_west    # total momentum in the westerly direction\n\n    # After the impact, because they stick together, the mass is m1 + m2\n    combined_mass = m1 + m2\n\n    # Final velocity components can be calculated by dividing the momentum components by the combined mass\n    v_final_north = p_total_north / combined_mass\n    v_final_west = p_total_west / combined_mass\n\n    # The magnitude of the final velocity vector can be found using the Pythagorean theorem\n    v_final_magnitude = math.sqrt(v_final_north**2 + v_final_west**2)\n    \n    # The direction is the arctan of the velocity components, in radians\n    # convert it to degrees for a more common understanding (north=0°, west=270°, south=180°, east=90°)\n    v_final_direction = math.degrees(math.atan2(v_final_west, v_final_north))\n\n    # Adjust the direction to standard compass directions\n    v_final_direction = (450 - v_final_direction) % 360\n\n    return (v_final_magnitude, v_final_direction)\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    max_number = 0\n    for i in range(100, 1000):\n        if i % 9 == 0 and i % 2 != 0:\n            tens_digit = (i // 10) % 10\n            if tens_digit % 4 == 0:\n                max_number = max(max_number, i)\n    return max_number\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    return (18 - 17) + (16 - 15) + (14 - 13)\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    pens_jenny = 83\n    pens_given = 28\n    pens_ben = pens_jenny - pens_given\n    pens_ben_at_first = pens_ben - pens_given\n    return pens_ben_at_first\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    # Number of intervals between trees is one less than the number of trees\n    intervals = 21 - 1\n\n    # Total distance covered by the trees' intervals\n    total_distance_trees = intervals * 2\n\n    # Number of intervals for the lamp posts given the total distance\n    # is divided by the interval distance for the lamp posts\n    # Adding 1 to include the first lamp post at the beginning\n    lamp_post_intervals = (total_distance_trees // 10) + 1\n\n    return lamp_post_intervals\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n\n    equation1 = Eq(5*laptop + 4*dvd_player, 14438)\n    equation2 = Eq(laptop + dvd_player, 2960)\n\n    result = solve((equation1, equation2), (laptop, dvd_player))\n\n    return result[dvd_player]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    num_sizes = 3\n    num_colours = 5\n    \n    total_combinations = num_sizes * num_colours\n    return total_combinations\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    # Let x be the average weight before Aaron joined\n    # Let n be the number of people in the group before Aaron joined\n    \n    # Equation when Aaron joined\n    # (x * n + 45) / (n + 1) = 61\n    \n    # Equation when Ben joined\n    # (x * n + 45 + 71) / (n + 2) = 62\n    \n    # From the first equation, we solve for n:\n    # x * n + 45 = 61 * (n + 1)\n    # x * n + 45 = 61n + 61\n    # n = (45 - 61) / (61 - x)\n    \n    # From the second equation, we get another expression for n:\n    # x * n + 116 = 62 * (n + 2)\n    # x * n + 116 = 62n + 124\n    # n = (116 - 124) / (62 - x)\n    \n    # Now we can set up an equation where both expressions for n are equal\n    # (45 - 61) / (61 - x) = (116 - 124) / (62 - x)\n    # Cross multiply\n    # (45 - 61) * (62 - x) = (116 - 124) * (61 - x)\n    # Simplifying both sides:\n    # (-16) * (62 - x) = (-8) * (61 - x)\n    # -16 * 62 + 16 * x = -8 * 61 + 8 * x\n    # -992 + 16 * x = -488 + 8 * x\n    # 8 * x = -488 + 992\n    # 8 * x = 504\n    # x = 504 / 8\n    # x = 63\n    return 63\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    # Loop through all permutations of numbers 0-9 for the three shapes\n    for perm in permutations(range(10), 3):\n        circle, square, triangle = perm\n        if circle == 0:  # Circle can't be zero as it's leading a two-digit number\n            continue\n        number1 = int(str(circle) + str(circle))  # Two circles\n        number2 = int(str(square) + str(triangle) + str(square))  # Square-Triangle-Square\n        if number1 + number1 == number2:\n            return triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i+j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern = \"12345\"\n    pattern_sum = sum(int(digit) for digit in pattern)\n    full_patterns = 2000 // len(pattern)\n    remaining_digits = 2000 % len(pattern)\n\n    total_sum = full_patterns * pattern_sum + sum(int(pattern[i]) for i in range(remaining_digits))\n  \n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_paid = 5.15\n    coffee_cost = 3.69\n    milk_cost = 0.89\n\n    sugar_cost = total_paid - (coffee_cost + milk_cost)\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    # Let's denote x as the number of hours that had passed since midnight\n    # Number of hours remaining until noon would be 12 - x\n    # According to the problem, x is twice the number of hours remaining, hence\n    # x = 2 * (12 - x)\n    # Solving for x, we have\n    # x = 2 * 12 - 2 * x\n    # 3x = 24\n    # x = 24 / 3\n    # x = 8\n    # Therefore, the time on the clock is 8 hours past midnight, or 8 AM\n    return 8\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # The worst case is that Sheila takes out balls without getting four of the same color.\n    # She could take 3 blue, 3 orange, and 2 yellow before getting a 4th ball of the same color.\n    # This is because after this point, no matter what ball she takes out next, it will be the 4th of some color.\n    # So we calculate the number of balls taken before she is guaranteed a 4th ball of the same color.\n\n    blue = 3\n    orange = 3\n    yellow = 2\n    # Next ball will ensure she has 4 of the same color\n    next_ball = 1\n\n    # Summing all the balls taken\n    balls_taken = blue + orange + yellow + next_ball\n    return balls_taken\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4 \n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    orange_price_per_kg = 1.5\n    mango_price_per_kg = 2.3\n    weight_oranges = 4.1\n    weight_mangoes = 2\n\n    total_cost = (orange_price_per_kg * weight_oranges) + (mango_price_per_kg * weight_mangoes)\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 'a', 7, 6]\n    mean_value = 5\n    numbers_sum = mean_value * len(numbers)\n    current_sum = sum([num for num in numbers if type(num) == int])\n    a_value = numbers_sum - current_sum\n    return a_value\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    ans = 4825 + 1754\n    return ans\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    total_work = 1\n    A_rate = 1 / 15\n    B_rate = 1 / 10\n    work_done_in_4_days = 4 * (A_rate + B_rate)\n    remaining_work = total_work - work_done_in_4_days\n    B_time_to_finish = remaining_work / B_rate\n    return B_time_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    first_half_sum = sum(range(1, 14))  # Sum of sequence from 1 to 13\n    second_half_sum = sum(range(1, 14)) # Sum of sequence from 1 to 13 again (13 included twice)\n    total_sum = first_half_sum + second_half_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction = original_price - reduced_price\n    percentage_reduction = (reduction / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    total_diff = 52\n    total_students = 0\n    layer = 0\n\n    # Calculate the difference between boys and girls in each layer until the difference is reached\n    while True:\n        boys_in_layer = (layer * 2 + 1) ** 2 - (layer * 2) ** 2\n        girls_in_layer = ((layer + 1) * 2) ** 2 - (layer * 2 + 1) ** 2\n        diff = boys_in_layer - girls_in_layer\n        if diff == total_diff:\n            total_students = (layer * 2 + 1) ** 2\n            break\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    import math\n    # We need to find the minimum n such that 2^n >= 1000\n    n_test_tubes = math.ceil(math.log2(1000))\n    return n_test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    number = 100  # Start from the smallest three-digit number\n    while True:\n        if number % 5 == 1 and number % 6 == 1 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    duckling_legs = 4 * 2  # 4 ducklings with 2 legs each\n    goose_legs = 2 * 2     # 2 baby geese with 2 legs each\n    total_legs = 36        # total legs\n\n    # calculating the remaining legs, which belong to lambs (with four legs each)\n    remaining_legs = total_legs - (duckling_legs + goose_legs)\n    number_of_lambs = remaining_legs / 4  # each lamb has 4 legs\n\n    return int(number_of_lambs)\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # Convert litres to millilitres\n    return n\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of cookies Charlene baked.\n    x = symbols('x')\n\n    # Charlene kept half of the cookies plus 8.\n    charlene_kept = x / 2 + 8\n\n    # Emerald got the remaining cookies.\n    emerald_got = x - charlene_kept\n\n    # Emerald ate a third of the cookies plus 4.\n    emerald_ate = emerald_got / 3 + 4\n\n    # Emerald gave the remaining cookies to Hebe.\n    hebe_got = emerald_got - emerald_ate\n\n    # Hebe ate a fourth of the cookies and had 42 left.\n    equation = Eq(hebe_got - hebe_got / 4, 42)\n\n    # Solve the equation for x.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "from math import sqrt\n\ndef solution():\n    matches = 30\n    # Assuming each team plays n-1 other teams twice, we need to solve for n in 2 * n * (n-1)/2 = 30\n    # Simplifying gives us: n * (n-1) = 30\n    # This is a quadratic equation of the form: n^2 - n - 30 = 0\n    \n    # Using quadratic formula: n = [1 +/- sqrt(1 + 4 * 1 * 30)] / 2\n    discriminant = sqrt(1 + 4 * 1 * 30)\n    n1 = (1 + discriminant) / 2\n    n2 = (1 - discriminant) / 2\n    \n    # Only the positive solution makes sense in this context\n    n = max(n1, n2)\n    \n    return int(n)\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    total_uniforms = 3600\n    made_in_5_days = 720\n    days_for_720_uniforms = 5\n\n    # Calculate the daily production rate\n    daily_uniforms = made_in_5_days / days_for_720_uniforms\n\n    # Calculate the total number of days needed to produce 3600 uniforms at the daily production rate\n    total_days = total_uniforms / daily_uniforms\n    \n    return int(total_days)\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Function to calculate the number of ways to reach a given step\n    def fibonacci(n):\n        a, b = 1, 2\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    # Total ways to reach the 10th step\n    total_ways_to_10 = fibonacci(9)\n    \n    # Ways to reach the 5th step\n    ways_to_5 = fibonacci(4)\n    \n    # Ways to reach from 5th to 10th step\n    ways_from_5_to_10 = fibonacci(9 - 4)  # subtract 4 steps already covered\n    \n    # Multiply the two segments\n    ans = ways_to_5 * ways_from_5_to_10\n    \n    return ans\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    first, second, third = symbols('first second third')\n\n    # Create the equations\n    equation1 = Eq(first, second + 1099)\n    equation2 = Eq(third, second - 877)\n    equation3 = Eq(first + second + third, 7656)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    # Return the value of the second number\n    return solutions[second]\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n\n    # On the fourth day, Kenneth ate 1/4 of the remaining sweets,\n    # thus before eating, there were (remaining_sweets / (1 - 1/4)) sweets\n    remaining_sweets /= (1 - 1/4)\n\n    # On the third day, Kenneth ate 1/5 of the remaining sweets,\n    # thus before eating, there were (remaining_sweets / (1 - 1/5)) sweets\n    remaining_sweets /= (1 - 1/5)\n\n    # On the second day, Kenneth ate 1/6 of the remaining sweets,\n    # thus before eating, there were (remaining_sweets / (1 - 1/6)) sweets\n    remaining_sweets /= (1 - 1/6)\n\n    # On the first day, Kenneth ate 1/7 of the sweets,\n    # thus initially there were (remaining_sweets / (1 - 1/7)) sweets\n    remaining_sweets /= (1 - 1/7)\n\n    return int(remaining_sweets)\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    boys = symbols('boys')\n    equation = Eq(3 * boys - 21, 45)\n    num_boys = solve(equation, boys)\n    return num_boys[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    product = 2*2*2*3*8*5*5*25\n    count = 0\n    while product % 10 == 0:\n        count += 1\n        product //= 10\n    return count\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(40, 51):\n        if (i ** 0.5).is_integer():\n            return int(i)\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    ans = 5.824 / 0.4\n    return ans\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    total_water = 150\n    cup_water = 40\n    cups_poured = 3\n\n    water_left = total_water - (cup_water * cups_poured)\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    ans = 936 // 54\n    return ans\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Alice's age and her sister's age\n    alice, sister = symbols('alice sister')\n\n    # Create two equations based on the problem statement\n    equation1 = Eq(alice, 2 * sister)  # Alice is twice as old as her sister\n    equation2 = Eq(alice + sister + 20, 53)  # In 10 years, their total age will be 53\n\n    # Solve the system of equations for alice and sister\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    n = 1\n    while True:\n        if n * (n + 1) * (n + 2) * (n + 3) == 3024:\n            break\n        n += 1\n    return n + 3\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    return 527 - 9\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan_cards, bob_cards = symbols('alan_cards bob_cards')\n\n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob_cards, alan_cards + 15)\n\n    # Colin gives Bob 25 cards.\n    bob_cards_after = bob_cards + 25\n\n    # Bob now has 3 times as many cards as Alan.\n    equation2 = Eq(bob_cards_after, 3 * alan_cards)\n\n    # Solving the simultaneous equations\n    solutions = solve((equation1, equation2), (alan_cards, bob_cards))\n\n    return solutions[alan_cards]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of the pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Calculate the minimum number of packs needed to exceed 1000 markers\n    num_packs = 1000 // pack_lcm\n    if 1000 % pack_lcm != 0:\n        num_packs += 1\n\n    # Calculate the total number of packs for each type\n    total_packs = num_packs * 4\n\n    return total_packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    total_students = 10\n    handshakes = total_students * (total_students - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n    anne_apples = solve(total_apples, anne)[0]\n    \n    return anne_apples\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest = min(numbers, key=lambda num: abs(num - target))\n    return closest\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    twenty_percent_of_ninety = 0.20 * 90\n    ninety_percent_of_twenty = 0.90 * 20\n\n    difference = twenty_percent_of_ninety - ninety_percent_of_twenty\n\n    return difference\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n\n    ans = morning_fruit - afternoon_fruit\n\n    return ans\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange = 10\n    ratio_orange = 2\n    ratio_water = 25\n\n    water = (orange / ratio_orange) * ratio_water\n\n    return water\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    required_average = 8.5\n    required_sum = required_average * 5\n    current_sum = sum(scores)\n    final_judge_min_score = required_sum - current_sum\n    return final_judge_min_score\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert the recurring decimals into fractions\n    def convert_recurring_decimal(a, b, c, repeat):\n        integer_part = a\n        non_repeating_part = b\n        repeating_part = c\n\n        # Non-repeating decimals to fraction\n        non_repeat_length = len(str(non_repeating_part))\n        non_repeating_fraction = non_repeating_part / (10 ** non_repeat_length)\n\n        # Repeating decimals to fraction\n        repeat_length = len(str(repeating_part))\n        repeating_fraction = repeating_part / (10 ** repeat_length - 1)\n\n        # Combined fraction\n        fraction = integer_part + non_repeating_fraction + repeating_fraction / (10 ** non_repeat_length)\n\n        return fraction\n\n    # Fraction for 0.1̇199251̇7\n    fraction1 = convert_recurring_decimal(0, 1199251, 7, 1)\n\n    # Fraction for 0.2̇34567̇\n    fraction2 = convert_recurring_decimal(0, 23456, 7, 1)\n\n    # Find n where the nth decimal is the same 7.\n    # Since we're concerned only about the decimals and they are both 7, we can find the difference\n    # after the decimal point when both are equal.\n    n = 1\n    while True:\n        # Calculate the nth digit for both fractions\n        digit1 = int((fraction1 * 10**n) % 10)\n        digit2 = int((fraction2 * 10**n) % 10)\n\n        # Compare the nth digit\n        if digit1 == digit2 and digit1 == 7:\n            break\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    principal = 10000\n    total_interest = 816\n    rate = symbols('r')\n    \n    # The interest for two years is the interest rate times the principal, times 2\n    equation_interest = Eq(principal * rate * 2, total_interest)\n\n    # Solve for rate\n    solution = solve(equation_interest, rate)\n\n    # Convert it to a percentage\n    interest_rate_per_year = solution[0] * 100\n\n    return interest_rate_per_year\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    # Johnny is trying to find the missing dividend (let's call it x)\n    # The equation should be x / 4 = 9 remainder 2\n    # The correct way to find x is 9 * 4 (because 9 is the quotient) + 2 (the remainder)\n    correct_dividend = 9 * 4 + 2\n    \n    # Check if Johnny's solution is incorrect\n    if correct_dividend != 22:\n        return correct_dividend\n    else:\n        # Johnny's solution is correct\n        return 22\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')  # define the variable for the number of terms\n    \n    # the total sum is 550, which is equal to n/2 * (first_term + last_term)\n    total_pages = 550\n    first_day_pages = 30\n    last_day_pages = 70\n    \n    # The sum of an arithmetic series is (n/2)*(a_1 + a_n) where:\n    # n = number of terms\n    # a_1 = first term\n    # a_n = nth term or last term in this context\n    equation = Eq(n/2 * (first_day_pages + last_day_pages), total_pages)\n    \n    # solve the equation for n\n    number_of_terms = solve(equation, n)[1]  # we choose the positive solution for the number of terms\n    \n    # Calculate the difference (d) between consecutive terms using the formula for the nth term in an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # We have the first term (a_1), the last term (a_n), and the number_of_terms (n), solve for d.\n    d = symbols('d')\n    nth_term_equation = Eq(first_day_pages + (number_of_terms - 1) * d, last_day_pages)\n    difference = solve(nth_term_equation, d)[0]\n    \n    return difference\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    # Let original number be x\n    # According to the problem statement:\n    # 2x (double the number) + 7 (add 7) = 43 (answer given)\n    # To find the original number we need to perform inverse operations\n    # We will undo the addition first and then undo the multiplication\n    \n    # Perform inverse of addition: Subtract 7 from 43\n    result_after_subtraction = 43 - 7\n    \n    # Perform inverse of doubling: Divide the result by 2 to get the original number\n    original_number = result_after_subtraction / 2\n    \n    return original_number\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, solve\n    \n    peter_speed = symbols('peter_speed')\n    hannah_speed = peter_speed - 15\n    \n    # Ratio of their speeds would be inverse of the ratio of times taken\n    ratio = 4 / 3\n    speed_equation = (peter_speed / hannah_speed) - ratio\n    \n    hannah_speed_value = solve(speed_equation, peter_speed)[0] - 15\n    \n    return hannah_speed_value\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    return 3.7 + 5.7\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_duration = 90\n    time_spent_multiple_choices = 23\n    time_spent_fill_in_the_blank = 35\n    \n    time_remaining = total_duration - (time_spent_multiple_choices + time_spent_fill_in_the_blank)\n    \n    return time_remaining\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed_per_second = 30\n    time_to_cross = 45\n    train_length = 850\n\n    tunnel_length = (train_speed_per_second * time_to_cross) - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    # The maximum number of regions a plane can be divided by n circles is given by:\n    # n^2 + n + 2 / 2\n    regions_from_circles = (circles**2 + circles + 2) // 2\n\n    # An additional line can intersect each circle at most twice and other lines at most once.\n    # So every new line can add as many new regions as the number it has intersected before plus one.\n    max_regions = regions_from_circles + line * (circles * 2 + 1)\n    \n    return max_regions\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.5\n    spent_money = total_money - saved_money\n    \n    transport_amount = spent_money / 3\n    food_amount = 2 * transport_amount\n    \n    return food_amount\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for number of tickets sold by Emily, Victor, and Victoria\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(emily + victor + victoria, 320)        # Total tickets sold\n    equation2 = Eq(emily, 3 * victor)                     # Emily sold thrice as many as Victor\n    equation3 = Eq(victoria, emily + 68)                  # Victoria sold 68 more than Emily\n\n    # Solve the equations to find the number of tickets sold by each person\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    # Return the number of tickets sold by Victoria\n    return solutions[victoria]\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    # x is the initial number of fifty-cent coins\n    # y is the initial number of one-dollar coins\n    x, y = symbols('x y')\n\n    # Equation 1: At first, 2/7 of his coins were fifty-cents coins\n    # 2/7 of total coins (x + y) were fifty-cent coins (x)\n    equation1 = Eq(x, 2/7 * (x + y))\n\n    # Equation 2: After getting 10 one-dollar coins and $5 worth of fifty-cent coins\n    # In the end, he had twice as many one-dollar coins (y + 10) as fifty-cent coins\n    equation2 = Eq(x + 5*2, 2 * (y + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Compute the initial total number of coins\n    total_coins_initial = solutions[x] + solutions[y]\n\n    return total_coins_initial\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) // 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    ans = 3258 // 9\n    return ans\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amelia = 160\n    daniel = symbols('daniel')\n    bala = amelia + daniel + 320\n    carl = symbols('carl')\n    \n    equation1 = Eq(bala, (amelia + carl + daniel) / 2)\n    equation2 = Eq(carl, (3/4)*(amelia + bala + daniel))\n    equation3 = Eq(amelia + bala + carl + daniel, 6230)\n    \n    solutions = solve((equation1, equation2, equation3), (daniel, carl))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "def solution():\n    # The total number of ways of choosing different entrances for Joe, Mike, and Tina\n    # Since Joe and Mike can't enter through the same entrance, we have to treat their cases separately\n    # There are 4 choices for the first person (whomever of the three we choose to assign first),\n    # then 3 choices for the second person (either Joe or Mike, since they can't choose the same entrance),\n    # and finally 3 choices for Tina (since she can choose any of the remaining).\n    \n    ways_for_first_person = 4\n    ways_for_second_person = 3\n    ways_for_third_person = 3\n    \n    # However, the order they enter is uncertain, meaning permutations should be considered for the three people\n    # There are 3! (3 factorial) ways to arrange Joe, Mike, and Tina\n    \n    from math import factorial\n    permutations_of_people = factorial(3)\n    \n    # Total ways is product of ways to choose entrances and the permutations of the people\n    total_ways = ways_for_first_person * ways_for_second_person * ways_for_third_person * permutations_of_people\n    \n    return total_ways\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n\n    smallest_divisor = quotient + 1\n    smallest_dividend = smallest_divisor * quotient + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    # Let x be the time the lazy gardener would take to mow the lawn on his own\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Quick gardener's work rate is 1/12 per hour\n    # Lazy gardener's work rate is 1/x per hour\n    # Combined work rate is their sum, which equals to 1/8 (since they finish together in 8 hours)\n    equation = Eq((1/12) + (1/x), 1/8)\n\n    # Solve the equation for x\n    lazy_gardener_time = solve(equation, x)\n    \n    return lazy_gardener_time[0]\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Fixed costs\n    service_fee = 4\n    initial_water_rate = 4 * 3  # 4 dollars per ton for the first 3 tons\n\n    # Costs for Irene\n    total_cost = 109\n\n    # Cost after fixed costs and the rate for the first 3 tons\n    additional_cost = total_cost - service_fee - initial_water_rate\n\n    # Additional water rate per ton\n    additional_water_rate = 3\n\n    # Maximum additional tons Irene can use\n    additional_tons = additional_cost // additional_water_rate\n\n    # Total tons of water she can use\n    total_tons = 3 + additional_tons\n\n    return total_tons\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq(apples/3 + oranges/2, 100)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    # Total fruits at first = apples + oranges\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9\n    number_of_girls = 3\n    candy_per_girl = total_candy // number_of_girls\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    # Noah and Pete had $75 altogether.\n    equation1 = Eq(noah + pete, 75)\n\n    # Noah and Howard had $145 altogether.\n    equation2 = Eq(noah + howard, 145)\n\n    # Howard had 3 times as much money as Pete.\n    equation3 = Eq(howard, 3 * pete)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    # Belinda has 36 tomatoes initially\n    belinda_tomatoes = 36\n    # Belinda gave 7 tomatoes to Matthew\n    belinda_gave = 7\n    # Now, Belinda and Matthew have the same number of tomatoes\n    # Let's denote the number of tomatoes Matthew had at first as 'matthew_tomatoes'\n    # After giving away, Belinda has (belinda_tomatoes - belinda_gave) tomatoes\n    # Matthew has (matthew_tomatoes + belinda_gave) tomatoes\n    # These two amounts should be equal\n    # (belinda_tomatoes - belinda_gave) = (matthew_tomatoes + belinda_gave)\n    # Rearranging the equation:\n    # belinda_tomatoes - 2 * belinda_gave = matthew_tomatoes\n    # Finally, we solve for matthew_tomatoes\n    matthew_tomatoes = belinda_tomatoes - 2 * belinda_gave\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    total_money = 182\n    dress_price = 5\n    skirt_price = 3\n    remaining_money = 5 * x\n    \n    # Equation representing the situation\n    equation = Eq(dress_price * x + skirt_price * x + remaining_money, total_money)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    import math\n    ans = math.floor(2017) - math.floor(201.7) + math.floor(20.17) - math.floor(2.017)\n    return ans\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    total = 0\n    product = 1\n\n    for i in range(2, 15, 2):\n        product *= i\n        if i == 2:\n            total += product\n        else:\n            product *= (i - 1)\n            total += product\n\n    return total\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    total_capacity = 990  # capacity of the jug in ml\n    half_capacity = total_capacity / 2\n    cups_poured = 3\n\n    capacity_per_cup = half_capacity / cups_poured\n    return capacity_per_cup\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Each tree is 3 meters apart, so the distance from the first tree to the 101th tree is:\n    # (101 - 1) trees * 3 meters/tree\n    distance_to_101th_tree = (101 - 1) * 3\n    \n    # Olivia takes 3 minutes to walk this distance\n    # Therefore, Olivia's walking speed is:\n    # distance_to_101th_tree / time = speed\n    # (300 meters) / (3 minutes) = speed\n    speed = distance_to_101th_tree / 3\n    \n    # The distance between the school and Olivia's home is 4000 meters\n    # Time to travel to school is:\n    # distance / speed = time\n    time_to_school = 4000 / speed\n    \n    # Convert the time from minutes to hours\n    # 1 hour = 60 minutes\n    time_to_school_in_hours = time_to_school / 60\n    \n    return time_to_school_in_hours\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n\n    position_from_back = total_cars - position_from_front + 1\n\n    return position_from_back\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    # Given equations:\n    equation1 = Eq(3*a + 2*b, 1.25)\n    equation2 = Eq(a + b, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Find the cost for 5 bananas\n    cost_for_5_bananas = 5 * solutions[b]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import lcm\n\n    # Time intervals for green and red line trains in minutes\n    green_line_interval = 5\n    red_line_interval = 6\n\n    # Least common multiple of 5 and 6 is the time interval at which both trains will set out\n    # together again from the terminal, calculated in minutes\n    interval = lcm(green_line_interval, red_line_interval)\n\n    # Since trains start at 5:00 am, we add the interval in minutes to this start time\n    hours = interval // 60\n    minutes = interval % 60\n    start_hour = 5\n\n    # Time calculation for the next simultaneous departure\n    next_departure_hour = start_hour + hours\n    next_departure_minutes = minutes\n\n    # Adjust if minutes exceed 60\n    if next_departure_minutes >= 60:\n        next_departure_hour += next_departure_minutes // 60\n        next_departure_minutes = next_departure_minutes % 60\n\n    # Adjust if hours go beyond 24 (not needed in this case)\n    next_departure_hour = next_departure_hour % 24\n\n    # Return result in formatted string 'HH:MM AM/PM'\n    am_pm = \"AM\" if next_departure_hour < 12 else \"PM\"\n    next_departure_hour = next_departure_hour if next_departure_hour <= 12 else next_departure_hour - 12\n    ans = f\"{next_departure_hour:02d}:{next_departure_minutes:02d} {am_pm}\"\n    return ans\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    n = 124 // 4\n    sum_of_series = ((n * (n + 1)) // 2) ** 2\n    return sum_of_series\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    ans = sum((6 + 5 * i) ** 2 for i in range((51 - 6) // 5 + 1))\n    return ans\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen traded 5 fish for 2 rabbits. So the ratio is 5 fish / 2 rabbits = 2.5 fish per rabbit\n    fish_per_rabbit = 5 / 2\n    \n    # Oscar traded 4 rabbits for 7 packs of wheat. So the ratio is 4 rabbits / 7 packs of wheat = 4/7 rabbit per pack of wheat\n    rabbits_per_pack_wheat = 4 / 7\n\n    # To find out fish per pack of wheat, multiply the ratios\n    fish_per_pack_wheat = fish_per_rabbit * rabbits_per_pack_wheat\n\n    # For 14 packs of wheat, the number of fish needed is 14 times the fish_per_pack_wheat\n    fish_for_14_packs = 14 * fish_per_pack_wheat\n\n    return fish_for_14_packs\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    people = ['Len', 'Joe', 'Angle', 'Jack']\n    entrances = [1, 2, 3]\n    scenarios = []\n\n    # Generate all permutations of people entering through entrances\n    for perm in permutations(people):\n        for entrance_perm in permutations(entrances, len(people)):\n            scenario = zip(perm, entrance_perm)\n            scenarios.append(list(scenario))\n\n    valid_scenarios = set()\n\n    # Filter scenarios where all entrances are used at least once\n    for scenario in scenarios:\n        entrances_used = {entrance for _, entrance in scenario}\n        if len(entrances_used) == len(entrances):\n            valid_scenarios.add(frozenset(scenario))\n\n    return len(valid_scenarios)\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_score = 23\n    correct_score = 5\n    incorrect_penalty = -2\n    num_questions = 6\n\n    for correct_answers in range(num_questions + 1):\n        incorrect_answers = num_questions - correct_answers\n        score = correct_answers * correct_score + incorrect_answers * incorrect_penalty\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define symbols for the number of cows and goats\n    cows, goats = symbols('cows goats', real=True, positive=True)\n\n    # According to the problem, 65% are cows initially; hence, goats are 35%\n    equation1 = Eq(cows, 0.65 * (cows + goats))\n\n    # When 240 more cows and goats are added, number of goats doubled, cows became 85%\n    equation2 = Eq(cows + 240, 0.85 * (cows + goats + 240))\n    equation3 = Eq(goats * 2, goats + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (cows, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    age = solve(equation, justin)\n\n    return age[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    total_drawings = 111\n    total_time = time_per_drawing * total_drawings\n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 1\n    while True:\n        if (cookies % 8 == 0) and (cookies % 9 == 1):\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (3, 6)]\n    ans = solve_congruence(*congruences)\n    \n    if ans[0] < 100:\n        return ans[0]\n    else:\n        return \"No solution less than 100\"\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    \n    if total_cost >= 50:\n        discount = 15\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n    \n    final_cost = total_cost - discount\n    \n    return final_cost\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 / 2\n    total_books_six_cases = books_per_case * 6\n    return total_books_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n\n    # There are two boys, so there are 2! ways to arrange them at the ends.\n    # There are three girls, so there are 3! ways to arrange them in the middle.\n    num_ways_boys = factorial(2)\n    num_ways_girls = factorial(3)\n\n    # By the multiplication rule, we multiply the number of arrangements for boys and girls.\n    ans = num_ways_boys * num_ways_girls\n\n    return ans\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    # Based on the given information\n    jason_age = 6\n    adam_age = 9\n    tom_age = 10\n\n    # Given the fact that Tom's age is a multiple of 3\n    is_tom_age_multiple_of_3 = tom_age % 3 == 0\n\n    # Checking if Jason is younger than Tom\n    is_jason_younger_than_tom = jason_age < tom_age\n\n    # If all conditions are met, return Adam's age\n    if is_tom_age_multiple_of_3 and is_jason_younger_than_tom:\n        ans = adam_age\n    else:\n        ans = \"Conditions not met\"\n\n    return ans\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Worst case scenario for not having 3 different colored balls:\n    # Drawing all balls of 2 different colors first.\n    # So we draw all 5 red and all 5 white balls.\n    # The next ball we draw, regardless of the color, will guarantee us 3 different colored balls.\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    num_str = '2023'\n    num_repeated = num_str\n\n    while int(num_repeated) % 11 != 0:\n        num_repeated += num_str\n    \n    n = len(num_repeated) // len(num_str)\n    return n\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    ans = 483 // 21\n    return ans\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the shapes\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(2 * triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # How many triangles equal a diamond\n    triangles_in_diamond = solutions[diamond] / solutions[triangle]\n\n    return triangles_in_diamond\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for number in range(1, 401):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_spent = 5 / 8\n    cost_of_laptop = total_money * fraction_spent\n    return cost_of_laptop\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2\n    ratio_jocye_lori = 3 / 2\n    jocye_speed = lori_speed * ratio_jocye_lori\n    time = 10\n    distance_jocye = jocye_speed * time\n    return distance_jocye\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    original_average = 60\n    new_average = 70\n    original_sum = original_average * 2\n    new_sum = new_average * 3\n    new_number = new_sum - original_sum\n    \n    return new_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime\n    \n    leave_school_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    catch_bus_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    bus_trip_duration = 18  # in minutes\n    get_home_time = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    # Calculate walking time before the bus trip\n    walking_time_before_bus = (catch_bus_time - leave_school_time).seconds // 60\n    \n    # Calculate the time Hannah got off the bus\n    off_bus_time = catch_bus_time + timedelta(minutes=bus_trip_duration)\n    \n    # Calculate walking time after the bus trip\n    walking_time_after_bus = (get_home_time - off_bus_time).seconds // 60\n    \n    # Total walking time\n    total_walking_time = walking_time_before_bus + walking_time_after_bus\n    \n    return total_walking_time\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    difference = 23 - 16\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # Total amount of apples\n    total_apples = 28\n    # Since there are Avril and 5 other children, there are 6 people in total\n    # We want to find the maximum possible apples Avril can get\n    # If each one gets a different amount, with minimum 1 apple each,\n    # The smallest 5 sums are: 1, 2, 3, 4, 5 (using the smallest numbers to maximize Avril's share)\n    min_others_sum = sum(range(1, 6))  # This is the smallest sum for the other 5 children\n\n    # The maximum Avril can get is whatever is left after the other 5 got the minimum\n    max_avril = total_apples - min_others_sum\n\n    return max_avril\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ken_initial, lisa_initial, amount_given = symbols('ken_initial lisa_initial amount_given')\n    equation1 = Eq(ken_initial, lisa_initial + 15)\n    equation2 = Eq(ken_initial - amount_given, lisa_initial + amount_given - 21)\n\n    solutions = solve((equation1, equation2), (ken_initial, amount_given))\n\n    return solutions[amount_given]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = sum(range(1, 6)) + sum(range(1, 6)[::-1])\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies eaten on the first day\n    x = symbols('x')\n\n    # The number of cookies eaten on each day forms an arithmetic sequence\n    # x, x+6, x+12, x+18, x+24\n\n    # The sum of an arithmetic sequence is (n/2)(first_term + last_term)\n    # where n is the number of terms\n    # Here n = 5 (days), first_term = x and last_term = x + 6 * (5 - 1)\n    total_cookies = 100\n    days = 5\n    \n    # Equation for the sum of cookies ate over five days\n    equation = Eq((days/2) * (2*x + (days - 1) * 6), total_cookies)\n    \n    # Solve the equation for x\n    first_day_cookies = solve(equation, x)\n\n    return first_day_cookies[0]\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    total_numbers = (2 + 3 + 4 + 5 + 6 + 7 + 8)  # Total numbers DQ writes\n    half_sequence = total_numbers // 2  # Half of the total numbers\n\n    count = 0\n    current_number = 1\n    # Start with 1 and go until we reach half the sequence\n    while count < half_sequence:\n        count += current_number  # Add the number of times current number should be written\n        current_number += 1  # Go to the next number\n\n    median = current_number - 1  # Subtract 1 because we increased current_number before checking the count\n    return median\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    # The worst case scenario is that you have to pick out all the non-red marbles first.\n    # There are 18 blue + 8 orange = 26 non-red marbles.\n\n    # After you have picked all of these, you need to pick 2 additional marbles to ensure\n    # you have 2 red marbles, since the remaining marbles are all red.\n    return 26 + 2\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_number = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_number = int(''.join(map(str, sorted(digits))))\n\n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    students_facing_teacher = 30\n    for i in range(1, 31):\n        if (i % 2 == 0) and (i % 3 == 0):  # If multiple of both 2 and 3, student turns around twice\n            continue\n        elif (i % 2 == 0) or (i % 3 == 0):  # If multiple of either 2 or 3, student will turn around once\n            students_facing_teacher -= 1\n    return students_facing_teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    ans = 3267 - 745\n    return ans\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x**0.5 + 36**0.5, 81**0.5)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    return 2184 // 7\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    result = 221 * 4\n    return result\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    ans = 468 // 9\n    return ans\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    number = 0\n    while True:\n        if (number % 4 == 2) and (number % 3 == 2) and (number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    # Given first term (a) and fourth term (a+3d) of arithmetic sequence\n    a = 10  # first term\n    a_plus_3d = 25  # fourth term\n    \n    # Calculate the common difference (d)\n    d = (a_plus_3d - a) / 3\n    \n    # Number of rows (n)\n    n = 25\n    \n    # Use the formula for the sum of an arithmetic sequence: S_n = n/2 * (2a + (n-1)d)\n    sum_of_athletes = n/2 * (2*a + (n-1)*d)\n    \n    return int(sum_of_athletes)\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # If you switch, there is a 2/3 chance of winning the car.\n    # If you stick with your initial choice, there is a 1/3 chance of winning the car.\n    # This is because when you initially choose a door, there's a 1/3 chance of picking the car,\n    # and a 2/3 chance of picking a goat. If you picked a goat (2/3 chance),\n    # the host will open the other door with a goat, so switching will win you the car.\n    # If you picked the car (1/3 chance), switching will give you a goat.\n    # Therefore, you should switch to have a higher probability of winning the car.\n    \n    # Since we know for sure that behind gate 3 is a goat, the problem\n    # reduces to two cases:\n    # 1. Our initial choice (gate 1) has a car (1/3 probability).\n    # 2. Our initial choice has a goat, and the car is behind gate 2 (2/3 probability).\n    # It is always more advantageous to switch to gate 2.\n    return 'Gate 2'\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    total = sum(i * (i + 1) for i in range(1, 32))\n    return total\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_sum = symbols('original_sum')\n\n    cds_cost = 75\n    batteries_fraction = 1/4\n    remaining_fraction = 1/3\n\n    # Remaining money after buying CDs\n    remaining_after_cds = original_sum - cds_cost\n    # Money spent on batteries\n    spent_on_batteries = batteries_fraction * remaining_after_cds\n    # Remaining money after buying batteries\n    remaining_after_batteries = remaining_after_cds - spent_on_batteries\n    # Equation based on the condition that he was left with 1/3 of the original sum of money\n    final_equation = Eq(remaining_after_batteries, original_sum * remaining_fraction)\n\n    # Solve for the original sum of money\n    solution = solve(final_equation, original_sum)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Initially, the rate of one trainer is 1 pokemon in 7 minutes.\n    # The question asks what is needed to catch 49 pokemon in 49 minutes,\n    # which is actually the same rate (1 pokemon per trainer in 7 minutes).\n    # Thus, the number of trainers needed does not change.\n    # The same number of trainers will catch 49 pokemon in 49 minutes as they would catch 7 pokemon in 7 minutes.\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to choose 1 book for each student from the 7 books\n    # This is equivalent to calculating the number of combinations for choosing 3 books from 7\n    # and then permuting these 3 books among the 3 students\n    comb = factorial(7) // (factorial(3) * factorial(7 - 3))\n    perm = factorial(3)\n    return comb * perm\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    total_people = 1 + 12  # Tommy and his 12 friends\n    minutes_per_person = 142\n    total_minutes = total_people * minutes_per_person\n    return total_minutes\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # Calculate the number of complete sets of '928' in the 99-digit number\n    num_sets = 99 // 3\n    \n    # Find the sum of the digits of one set of '928'\n    sum_of_digits = 9 + 2 + 8\n    \n    # Multiply the sum of digits of one set by the number of sets in the entire number\n    total_sum = sum_of_digits * num_sets\n    \n    # Compute the remainder when the total sum of digits is divided by 9\n    remainder = total_sum % 9\n    \n    return remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown value\n    oplus = symbols('oplus')\n\n    # Set up the equation\n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n\n    # Solve the equation\n    solutions = solve(equation, oplus)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n\n    percentage_incorrect = (incorrect_identifications / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the three numbers be a, b, and c and assume a <= b <= c\n    a, b, c = symbols('a b c')\n\n    # The sum of three numbers is 56\n    equation1 = Eq(a + b + c, 56)\n\n    # The average of the smallest two numbers is 14, so (a + b) / 2 = 14\n    equation2 = Eq((a + b) / 2, 14)\n\n    # The average of the largest two numbers is 22, so (b + c) / 2 = 22\n    equation3 = Eq((b + c) / 2, 22)\n\n    # We solve the system of equations for a, b, c\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # The median value among a, b, and c is b since a <= b <= c\n    median = solutions[b]\n\n    return median\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    \n    closest_number = min(numbers, key=lambda num: abs(target - num))\n    \n    return closest_number\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Convert pounds to pence\n    eliot_paid = 3 * 100  # three £1 coins in pence\n    maya_paid = 4 * 100   # four £1 coins in pence\n\n    # The cost of each bar in pence\n    sour_sweets_cost = 12\n    chocolate_drops_cost = 17\n\n    # Find the number of bars where change for both Eliot and Maya is the same\n    for bars in range(1, min(eliot_paid // sour_sweets_cost, maya_paid // chocolate_drops_cost) + 1):\n        eliot_change = eliot_paid - (sour_sweets_cost * bars)\n        maya_change = maya_paid - (chocolate_drops_cost * bars)\n        if eliot_change == maya_change:\n            return bars\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [3, 1, 4, 7]\n\n    # Even number: last digit has to be 4\n    last_digit = 4\n    digits.remove(last_digit)\n\n    # Sort the remaining digits to get the smallest number\n    digits.sort()\n\n    # Combine digits to form the smallest 4-digit number\n    smallest_number = int(str(digits[0]) + str(digits[1]) + str(digits[2]) + str(last_digit))\n    \n    return smallest_number\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n    num_containers = total_juice / per_container\n    return int(num_containers)\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Jackson's current age as j and Chloe's current age as c\n    j, c = symbols('j c')\n\n    # The sum of their ages this year\n    equation1 = Eq(j + c, 54)\n\n    # In three years, Jackson will be five times as old as Chloe\n    equation2 = Eq(j + 3, 5 * (c + 3))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (j, c))\n\n    # Jackson's age three years later\n    return solutions[j] + 3\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    return 66 * 2 + 66 * 3 == 66 * 5\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dumpling, bun = symbols('dumpling bun')\n\n    equation1 = Eq(6 * dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * dumpling + bun, 41)\n\n    solutions = solve((equation1, equation2), (dumpling, bun))\n\n    return solutions[dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare_per_km = 1.2\n    total_cost = 8.5\n    base_distance = 1.8\n\n    additional_cost = total_cost - base_fare\n    additional_distance = additional_cost / additional_fare_per_km\n    total_distance = base_distance + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "from sympy import symbols, solve\n\ndef solution():\n    students = symbols('students')\n    \n    # Let's say each student gets at least one apple, then there would be students*1 apples distributed.\n    # One student gets at least 3 apples, so we add 2 more to this count (as they already have one counted).\n    # This total should be at least equal to 80 apples.\n    # students + 2 <= 80 (since one student gets at least 3 apples)\n    equation = students + 2 - 80\n    \n    # solving for students\n    class_size = solve(equation, students)\n    \n    # Since we need an integer solution greater than 0, we take the ceiling of the result if needed.\n    # There could be students with 0 apples if we considered class_size as is,\n    # hence we account for at least one apple each and subtract the extra apples given to one student.\n    ans = max(class_size[0], 1)\n    \n    return ans\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for num_apples in range(1, 50):\n        if num_apples % 5 == 0 and num_apples % 6 == 3 and num_apples % 8 == 5:\n            return num_apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, blue = symbols('red yellow blue')\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received = 8\n    original = received * 2\n    return original\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    julia_age = 7\n    mother_age = 36\n    father_age = 42\n    total_years = 100\n\n    combined_current_age = julia_age + mother_age + father_age\n    years_until_100 = (total_years - combined_current_age) // 3\n\n    return years_until_100\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_to_pounds = 56 / 16\n    pounds_to_kg = ounces_to_pounds / 2.2\n\n    return pounds_to_kg\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25*x, 200)\n\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Calculate the sum of the straight sequence: 5 to 80\n    start_straight, end_straight = 5, 80\n    sum_straight = (end_straight - start_straight + 1) * (start_straight + end_straight) // 2\n    \n    # Calculate the sum of the reversed sequence: 79 to 5 (excluding 80)\n    start_reverse, end_reverse = 5, 79\n    sum_reverse = (end_reverse - start_reverse + 1) * (start_reverse + end_reverse) // 2\n    \n    # Adding both sums to get the final result\n    ans = sum_straight + sum_reverse\n    return ans\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = perm\n        A = (100*a + 10*b + c) + \\\n            (100*b + 10*c + d) + \\\n            (100*c + 10*d + e) + \\\n            (100*d + 10*e + f) + \\\n            (100*e + 10*f + g) + \\\n            (100*f + 10*g + h) + \\\n            (100*g + 10*h + i)\n        max_A = max(max_A, A)\n\n    return max_A\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    price_after_further_discount = 32 - 4\n    total_discount = original_price - price_after_further_discount\n    total_percentage_discount = (total_discount / original_price) * 100\n    return total_percentage_discount\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys = 36\n    girls = 12\n    big_car_capacity = 4\n    small_car_capacity = 2\n\n    big_cars_needed = boys // big_car_capacity\n    small_cars_needed = girls // small_car_capacity\n\n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    # There are a total of 5 people, and we want A to be to the left of B and B to be to the left of C.\n    # We consider A, B, C as a combined entity first.\n    # This entity ABC can be positioned in 3! ways among themselves.\n    abc_permutations = factorial(3)\n\n    # We have 2 more people besides A, B, and C. They can be positioned in any of the remaining 3 slots.\n    # There are 3 places left for 2 people and for every position of A, B and C, \n    # these 2 people can be arranged in P(3,2) ways.\n    others_permutations = factorial(3) // factorial(3 - 2)\n\n    # Total number of ways is the product of the permutations of ABC as one entity \n    # and the permutations of the remaining 2 people.\n    total_ways = abc_permutations * others_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (3 + 7*i) / (10 + 7*i) for i in range((2012-3)//7 + 1))\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    def pattern(n):\n        return (int(str(n)[-1]) - int(str(n)[0])) ** 2\n    \n    ans = pattern(55)\n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_numbers = sorted([''.join(p) for p in permutations(digits)])\n    return int(all_numbers[504]) # 505th number is at index 504 because indexing starts at 0\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # The first digit can be 2 or 3 (cannot be 0), so we have 2 options\n    # The second digit can be 0, 2, or 3, but it must be different from the first digit, so we have 2 options\n    # The third digit can be 0, 2, or 3, but it must be different from the first two digits, so we have 1 option\n    # Multiplying these together gives us the number of different numbers we can form\n    ans = 2 * 2 * 1\n    return ans\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = 88 * girls\n    boys_score = 91 * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    girls_count = solve(equation, girls)\n\n    return girls_count[0]\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    alice_work_rate = 1 / 40\n    bob_work_rate = 1 / 60\n    total_work = 1\n    \n    # Let x be the days Alice takes off\n    for x in range(28):\n        if (27 - x) * alice_work_rate + 27 * bob_work_rate >= total_work:\n            return x\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = [i for i in range(21, 50) if i % 6 == 0 and i % 9 == 0]\n    return multiples\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n    equation1 = Eq(red * 2, white)\n    equation2 = Eq(white * 4, black * 3)\n    equation3 = Eq(red + white + black, 136)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # Given terms and their positions\n    a7 = 105\n    a8 = 120\n    a9 = 135\n    \n    # In an arithmetic sequence, the difference (d) is constant\n    # a(n) = a(n-1) + d\n    # a8 = a7 + d and a9 = a8 + d => a9 = a7 + 2d\n    d = a8 - a7  # Common difference\n    \n    # We can find the first term (a1) by extrapolating back from the 7th term\n    # a7 = a1 + 6d => a1 = a7 - 6d\n    a1 = a7 - 6 * d\n    \n    # Now we can find the 100th term\n    # a(n) = a1 + (n-1)d\n    a100 = a1 + 99 * d\n    \n    return a100\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # Number of socks of one color to be sure to have at least one pair of that color\n    socks_of_one_color_needed = 2\n    # Maximum number of socks to take to still have no pair (worst case)\n    max_different_socks = (socks_of_one_color_needed - 1) * 2\n    # Smallest number of socks to take to be sure to have at least one matching pair\n    answer = max_different_socks + 1\n\n    return answer\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_4_years_ago = 24\n    \n    # Each dog ages 4 years from the time four years ago to the present.\n    # Then, each dog will age another 2 years from the present to 2 years in the future.\n    # Thus, each dog ages a total of 4 (past years) + 2 (future years) = 6 years.\n    \n    # Since there are 3 dogs, we multiply the total age increase per dog by 3.\n    total_age_increase = 3 * 6\n    \n    # Add the total age increase to the combined age from four years ago to get the combined age in 2 years.\n    combined_age_in_2_years = combined_age_4_years_ago + total_age_increase\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = 4 ** 2 / 2\n    return int(n)\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Ryan and Audrey's initial number of marbles\n    ryan, audrey = symbols('ryan audrey')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(ryan / audrey, 2 / 7)\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (ryan, audrey))\n    \n    return solutions[audrey]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n\n    # Angle covered by the hour hand from 12:00 to 8:30\n    hour_angle = (hour % 12) * 30 + (minute / 60) * 30\n    # Angle covered by the minute hand from 12:00 to :30\n    minute_angle = minute * 6\n\n    # Calculate the difference\n    angle = abs(hour_angle - minute_angle)\n\n    # Since we need the smaller angle between hands\n    # and the angle can't be more than 180 degrees\n    angle = min(angle, 360 - angle)\n\n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5\n    sisters_count = 4\n    apples_left = 20\n\n    total_apples = justin_apples + (sisters_apples * sisters_count) + apples_left\n\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n\n    total_students = piano_only + violin_only + both\n\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # sum of beads in one pattern sequence\n    full_patterns = total_beads // pattern_length\n    remaining_beads = total_beads % pattern_length\n    \n    black_beads_per_pattern = 3 + 3  # black beads in one pattern sequence\n    total_black_beads = full_patterns * black_beads_per_pattern\n    \n    # Count the remaining black beads\n    if remaining_beads > 3:\n        total_black_beads += 3  # we add 3 for the first set of black beads\n        remaining_beads -= 3\n        if remaining_beads > 2:\n            total_black_beads += (remaining_beads - 2)  # we subtract the white beads, the rest are black\n    \n    return total_black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes = 13 + 23 + 8 + 27\n    school_time = datetime.strptime('7:45', '%H:%M')\n    wake_up_time = school_time - timedelta(minutes=total_minutes)\n    return wake_up_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum((-1)**((i//2) % 2) * i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent the number of chickens, d represent the number of ducks, and w represent the number of cows.\n    c, d, w = symbols('c d w')\n\n    # Since the number of chickens equals the number of ducks: c = d,\n    # we have c heads from chickens, c heads from ducks, and w heads from cows which gives us a total of 51 heads.\n    equation1 = Eq(c + c + w, 51)\n    \n    # Each chicken and each duck has 2 legs and each cow has 4 legs which gives us a total of 160 legs.\n    equation2 = Eq(2*c + 2*c + 4*w, 160)\n    \n    # Solving the equations:\n    solutions = solve((equation1, equation2), (c, w))\n    \n    # Since we're only asked for the number of chickens:\n    return solutions[c]\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    unique_sums = set()\n\n    for a in coins:\n        for b in coins:\n            for c in coins:\n                unique_sums.add(a + b + c)\n\n    ans = len(unique_sums)\n    return ans\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    entrances = 4\n    people = 3\n    count = 0\n    \n    for perm in permutations(range(entrances), people):\n        if perm[0] != perm[1]:  # Joe and Mike should not enter through the same entrance\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drink = total_juice * (1/5)\n    abigail_drink = 200\n    anna_drink = 120\n    juice_left = total_juice - (rebekah_drink + abigail_drink + anna_drink)\n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n\n    ans = (percentage / 100) * quantity\n\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance = 3000  # nautical miles\n    time_in_days = 13 + 22 / 24  # converting 22 hours to days and adding to 13 days\n    time_in_hours = time_in_days * 24  # converting the total time to hours\n    \n    average_speed = total_distance / time_in_hours  # calculating average speed\n    \n    return round(average_speed)\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # volume in liters of the first fruit punch\n    concentration1 = 40  # percentage concentration of fruit juice in the first punch\n    volume2 = 3  # volume in liters of the second fruit punch\n    concentration2 = 70  # percentage concentration of fruit juice in the second punch\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1 / 100) + (volume2 * concentration2 / 100)\n\n    new_concentration = (total_juice / total_volume) * 100\n\n    return new_concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    minimum_multiple = (50 // 11) + 1\n    maximum_multiple = 150 // 11\n    ans = maximum_multiple - minimum_multiple + 1\n    return ans\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w be the initial number of women, and m be the initial number of men.\n    w, m = symbols('w m')\n\n    # After the first bus, w - 36 women are left and they are (3/5)m\n    equation1 = Eq(w - 36, (3/5) * m)\n    \n    # After the second bus, m - 48 men are left, which equals the number of women left\n    equation2 = Eq(w - 36, m - 48)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (w, m))\n    \n    # Calculate the total number of people at first\n    total_people = solutions[w] + solutions[m]\n\n    return total_people\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_away_first = 339\n    bought_stamps = 455\n    gave_away_second = 777\n\n    final_count = (initial_stamps - gave_away_first) + bought_stamps - gave_away_second\n    return final_count\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_Bella = 15\n    people_behind_Albert = 12\n    Albert_and_Bella = 2\n\n    total_people = people_in_front_of_Bella + people_behind_Albert + Albert_and_Bella \n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    for num in range(20, 31):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            return num\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    ans = 36 * 24\n    return ans\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define Symbol\n    age = symbols('age')\n\n    # Equation representing the age relationship\n    # age + 2 = 2 * (age - 5)\n    equation = Eq(age + 2, 2 * (age - 5))\n\n    # Solve the equation\n    solution_age = solve(equation, age)\n\n    return solution_age[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "from itertools import combinations\n\ndef solution():\n    ways = []\n    for combo in combinations(range(1, 14), 3):  # Choose 3 different numbers from 1 to 13\n        if sum(combo) == 14:\n            ways.append(combo)\n    ans = len(ways), ways\n    return ans\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n    \n    gcd = lambda a, b: gcd(b, a % b) if b else a\n    greatest_common_divisor = gcd(numerator, denominator)\n    \n    ans = numerator // greatest_common_divisor\n    \n    return ans\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    # Total cost of the pens\n    total_cost = 3 * 0.50\n    # Amount Jennifer gave\n    amount_given = 5\n    # Calculate the change\n    change = amount_given - total_cost\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n\n    difference = english_books - chinese_books\n\n    return difference\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # In a winning strategy, Fred should leave George with a number of oranges\n    # that is a multiple of 4 (since George must then take 1 to 3, and Fred can\n    # always adjust to leave George with a multiple of 4 again).\n    # Fred goes first, we need to find a number to take away to have multiples of 4 remaining:\n    total_oranges = 15\n    fred_first_move = 0\n    \n    # Try moves for Fred, from 1 to 3:\n    for i in range(1, 4):\n        # If after Fred's move, the remaining is a multiple of 4, it's a winning move.\n        if (total_oranges - i) % 4 == 0:\n            fred_first_move = i\n            break\n    \n    return fred_first_move\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('19:15', '%H:%M')\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = end_time - cook_duration\n    return start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    # Individual groups\n    go = 42\n    checkers = 55\n    chess = 33\n\n    # Intersections\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n\n    # All three\n    all_three = 5\n\n    # Total students using Inclusion-Exclusion principle\n    total_students = (go + checkers + chess) - (go_checkers + go_chess + checkers_chess) + all_three\n\n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    oliver_age_now = 20\n    lin_age_now = 26\n    total_future_age = 48\n    \n    # Let x be the number of years later when their sum of age will be 48\n    # (oliver_age_now + x) + (lin_age_now + x) = total_future_age\n    # 20 + x + 26 + x = 48\n    # Simplify the equation: 2x + 46 = 48\n    # Then we find x: 2x = 2\n    x = (total_future_age - (oliver_age_now + lin_age_now)) // 2\n\n    return x\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    height_range = 132 - 124 + 1  # from 124 to 132 inclusive\n    min_same_height_students = 4  # at least 4 students are of the same height\n\n    # According to the Pigeonhole Principle, we divide the total number\n    # of students by the number of different possible heights to find how\n    # many must be the same in the worst case.\n    min_class_size = (min_same_height_students - 1) * height_range + 1\n\n    return min_class_size\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n\n    total_cost = num_tickets * cost_per_ticket\n\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    num_poles = 40\n    distance_between_poles = 3\n    \n    total_distance = (num_poles - 1) * distance_between_poles\n    \n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    p = 1\n    while True:\n        cube = 245 * p\n        cube_root = round(cube ** (1/3))\n        if cube_root ** 3 == cube:\n            break\n        p += 1\n    return p\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_value = 736\n    m_value = cm_value / 100\n    return m_value\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum([value if index % 2 == 0 else -value for index, value in enumerate(range(64, 45, -2))])\n    return ans\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_production = this_year_production * (1 + 1/4)\n\n    return int(last_year_production)\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 1 + 1  # one sick leave and one personal leave\n    present_students = total_students - absent_students\n    attendance_rate = (present_students / total_students) * 100\n    \n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    ans = (8 * 15) / 5\n    return ans\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    sum_series = sum([sum([j / (i + 1) for j in range(1, i)]) for i in range(2, 2018)])\n    return sum_series\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for each digit\n    E, S, A, M, O = symbols('E S A M O', integer=True)\n\n    # Define the constraints for the digits (0-9 and unique)\n    constraints = (E > 0, S >= 0, A >= 0, M >= 0, O >= 0,\n                   E < 10, S < 10, A < 10, M < 10, O < 10,\n                   Eq(len(set([E, S, A, M, O])), 5))  # All the digits are different\n\n    # Set up the original equation\n    equation = Eq(E*1000 + S*110 + E*1 + 2018, S*1000 + A*100 + S*10 + M*1 + O)\n\n    # Solve the equation with the given constraints\n    solutions = solve((equation,) + constraints)\n\n    # Calculate the value of S + A + S + M + O for all possible solutions\n    result = [sol[S] + sol[A] + sol[S] + sol[M] + sol[O] for sol in solutions]\n\n    # We consider only valid solutions where all letters are different digits\n    valid_result = [sol for sol in result if len(set(str(sol))) == len(str(sol))]\n\n    # There should only be one valid solution as all letters stand for different digits\n    return valid_result[0]\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 270 * 0.30\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Tim is 4th from the front and 3rd from the back, so there are 4 + 3 - 1 people in the line\n    row_count = 4 + 3 - 1  # -1 because we counted Tim twice\n    \n    # Tim is 1st from the left and 4th from the right, so there are 1 + 4 - 1 people in the column\n    column_count = 1 + 4 - 1  # -1 because we counted Tim twice\n    \n    # Total number of band members is the number of rows times the number of columns\n    total_members = row_count * column_count\n\n    return total_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    original_ratio = Eq(apples / oranges, 3/8)\n    new_ratio = Eq((apples - 1) / oranges, 1/3)\n\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n    return solutions[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda num: abs(100 - num))\n    return closest_number\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "import math\n\ndef solution():\n    daily_savings = 2.40\n    total_savings_goal = 150\n    days_needed = math.ceil(total_savings_goal / daily_savings)\n    weeks_needed = math.ceil(days_needed / 7)\n    return weeks_needed\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    # Sum of first 14 consecutive numbers using the formula for the sum of an arithmetic series:\n    # S = n/2 * (first_term + last_term), where n is the number of terms\n    sum_first_14 = 14 / 2 * (1 + 14)\n    \n    # Add 2019 to the sum of the first 14 numbers\n    total_sum = sum_first_14 + 2019\n    \n    # Now to find the sum of 8 consecutive numbers that equals total_sum, we need to find the first number in that series.\n    # We can represent the sum of 8 consecutive numbers starting with x as follows:\n    # S = n/2 * (first_term + last_term) which is equal to total_sum.\n    # In this case n=8, so S = 8/2 * (x + (x+7)) = 4 * (2x + 7) = 8x + 28\n    # We need to solve for x in the equation 8x + 28 = total_sum.\n    # Since x is an integer, we can use integer division to find the first term of the 8 consecutive numbers.\n\n    # Finding the first term\n    for x in range(1, int(total_sum/8) + 1):\n        if 8 * x + 28 == total_sum:\n            first_term_of_eight = x\n            break\n\n    return first_term_of_eight\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    return 9 + 88\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    result = 6.5 / (1/4)\n    return result\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_seq = (first_term + last_term) * num_terms // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = 'STATISTICS'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_letters = len(word)\n    \n    ways = factorial(total_letters)\n    for count in letter_counts.values():\n        ways //= factorial(count)\n        \n    return ways\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    terms = [836, 162, 2]\n\n    ans = common_factor * sum(terms)\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount // note_value\n\n    return num_notes\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    brother_age_3_years_ago = ashley_age - 3 - 2\n    current_brother_age = brother_age_3_years_ago + 3\n    return current_brother_age\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    # Let c be the weight of one chicken, r be the weight of one rabbit, and k be the weight of one kangaroo\n    from sympy import symbols, Eq, solve\n\n    c, r, k = symbols('c r k')\n    \n    # According to the problem, we have the equations:\n    # 2 rabbits = 6 chickens -> 2r = 6c -> r = 3c\n    # 3 kangaroos = 4 rabbits -> 3k = 4r\n    # We need to find the weight of one kangaroo in terms of chickens\n    \n    equation1 = Eq(2*r, 6*c)  # 2 rabbits = 6 chickens\n    equation2 = Eq(3*k, 4*r)  # 3 kangaroos = 4 rabbits\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, r, k))\n    \n    # Substitute the value of r (rabbit's weight) back into equation to find the kangaroo's weight in terms of chickens\n    kangaroo_in_chickens = solutions[k] / solutions[c]\n\n    return kangaroo_in_chickens\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 + 15)\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is the 7th from the front, and since she is in the middle,\n    # there must be 6 people in front of her and 6 people behind her.\n    dwarves_in_front = 6\n    dwarves_behind = 6\n    \n    # Total number of dwarves is the sum of dwarves in front and behind\n    total_dwarves = dwarves_in_front + dwarves_behind\n    \n    return total_dwarves\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    wood_cutting = 3\n    grass_weaving = 1\n    wood_drying = 5\n    grass_mowing = 1\n    food_preparation = 1\n    grass_soaking = 1\n    wood_choosing = 1\n\n    activities = [\n        wood_cutting,\n        grass_weaving,\n        wood_drying,\n        grass_mowing,\n        food_preparation,\n        grass_soaking,\n        wood_choosing\n    ]\n\n    # The activities that can be done concurrently are:\n    # mowing grass (1 day)\n    # soaking cut grass (1 day) \n    # wood drying (5 days) can overlap with grass weaving (1 day) \n    # choosing wood (1 day)\n    \n    # Total concurrent days will be max of (wood drying, grass mowing + grass soaking + grass weaving + wood choosing)\n    concurrent_days = max(wood_drying, grass_mowing + grass_soaking + grass_weaving + wood_choosing)\n\n    # Activities that cannot be done concurrently\n    # cutting wood (3 days)\n    # food preparation (1 day) which are done on different days.\n    \n    non_concurrent_days = wood_cutting + food_preparation\n\n    # Total days needed will be the sum of the concurrent days and non-concurrent days\n    total_days = concurrent_days + non_concurrent_days\n\n    return total_days\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    sum_frac_part = 0\n    for i in range(1, 2019):\n        frac_part = (2018 + i) / 5 - ((2018 + i) // 5)\n        sum_frac_part += frac_part\n    return sum_frac_part\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for i in range(1000, 10000):\n        if (i * 6) ** (1/3) % 1 == 0 and (i / 6) ** 0.5 % 1 == 0:\n            return i\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Let the time be t hours when the trains pass each other.\n    # Distance covered by the faster train = speed * time = 48t km\n    # Distance covered by the slower train = speed * time = 36t km\n    # We know that faster train travels 70 km more than the slower train.\n    # So, 48t = 36t + 70\n    # Solving for t gives us the time taken until they pass each other.\n    \n    # We can solve for t first\n    t = 70 / (48 - 36)\n    \n    # Total distance = distance covered by faster train + distance covered by slower train\n    #                = 48t + 36t\n    #                = 84t (since 48 + 36 = 84)\n    total_distance = 84 * t\n\n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "def solution():\n    from fractions import Fraction\n\n    ans = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return ans\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim's position from front to back suggests there are at least 4 rows\n    # His position from back to front (3rd) tells us there are exactly 6 rows\n    # (4th from the front, 3rd from the back → 4 + 3 - 1 = 6 rows)\n    rows = 4 + 3 - 1\n\n    # Similarly, Tim's position from left to right indicates there are at least 4 columns\n    # His position from right to left (7th) tells us there are exactly 10 columns\n    # (4th from the left, 7th from the right → 4 + 7 - 1 = 10 columns)\n    columns = 4 + 7 - 1\n\n    # The total number of band members is the product of rows and columns\n    total_members = rows * columns  \n\n    return total_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(2, 3, 8)\n    return ans\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    # The worst-case scenario to guarantee at least 4 participants from the school with the most\n    # participants would be if every other school had 3 participants.\n    # Let 'n' be the number of schools.\n    # The Pigeonhole Principle dictates that if 3*(n-1) participants are divided among (n-1) schools,\n    # then the remaining school must have at least 4 participants.\n    # Therefore, 3*(n-1) + 4 <= total number of participants.\n    # Solving this for 'n' with the total number of participants as 100 gives us:\n    total_participants = 100\n    for n in range(1, total_participants + 1):\n        if 3 * (n - 1) + 4 > total_participants:\n            break\n    # 'n - 1' will give us the maximum number of schools,\n    # since 'n' is the point where adding another school would require the maximum school to have more than 4.\n    return n - 1\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    coins = [50, 20, 10, 5]\n\n    for coin in coins:\n        if (total_amount - coin) == 2 * (total_amount - (total_amount - coin)):\n            lost_coin = coin\n            break\n\n    return lost_coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    result = 48 / (1 + 1/3) / (6/7)\n    return result\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    boat = 1\n    while True:\n        if (boat + 1) * 6 == (boat - 1) * 9:\n            break\n        boat += 1\n    students = (boat + 1) * 6\n    return students\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    # Initialize the count of pairs to zero\n    count = 0\n    \n    # Iterate through all possible pairs of distinct numbers from 1 to 100\n    for i in range(1, 101):\n        for j in range(i+1, 101):  # Ensure the second number is greater than the first to avoid duplicates\n            if (i + j) % 5 == 0:  # Check if the sum is a multiple of 5\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolates, friends = symbols('chocolates friends')\n\n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - chocolates, 34)\n\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    chocolates_left = solutions[chocolates] - 20 * solutions[friends]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n    \n    # Rasidah spent 3/5 of her money\n    rasidah_left = rasidah - (3/5) * rasidah\n    \n    # Chai Seng spent 6/7 of his money\n    chai_seng_left = chai_seng - (6/7) * chai_seng\n    \n    # Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng_left, (1/2) * rasidah_left)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for th in range(1, 10):  # Thousands digit\n        for hu in range(th + 1, 10):  # Hundreds, greater than thousands\n            te = th + hu  # Tens, as given\n            if te >= 10:  # Tens is a single digit, has to be less than 10\n                continue\n            for on in range(te + 1, 10):  # Ones, greater than tens\n                if th + hu + te + on == 16:  # Sum of digits is 16\n                    return on  # Return the ones digit\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    count = 0\n    for i in digits:\n        for j in digits:\n            if i != '0' and i != j:\n                count += 1  # ensures a two-digit number (no leading 0) with different digits\n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    return (0.007) ** 2\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    digits = [2, 4, 6, 8]\n    perms = permutations(digits)\n    for perm in perms:\n        number = int(''.join(map(str, perm)))\n        if number % 4 == 0 and number > max_number:\n            max_number = number\n    return max_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance traveled uphill and downhill\n    uphill_distance = 3 * 5  # Speed * Time\n    downhill_distance = 2 * 10  # Speed * Time\n\n    # Calculate the total distance traveled\n    total_distance = uphill_distance + downhill_distance\n\n    # Calculate the total time taken\n    total_time = 3 + 2\n\n    # Calculate the average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Calculate the cost of the first 5 kolowatt-hours\n    initial_cost = 5 * 2  # $2 per kolowatt-hour\n    # Calculate the remaining budget after the fixed service fee and initial cost\n    remaining_budget = 63 - initial_cost - 3  # $3 service fee\n    # Calculate the number of additional kolowatt-hours that can be used with the remaining budget\n    additional_kwh = remaining_budget // 1  # $1 per additional kolowatt-hour\n    # Total number of kolowatt-hours used is the sum of the first 5 and additional\n    total_kwh = 5 + additional_kwh\n    return total_kwh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    # By rearranging the equation, we need to find the value that\n    # when divided by 7 and then multiplied by 63 gives us 54\n    fraction_value = 54\n    whole_number = 63\n\n    # Calculate the missing numerator\n    numerator = fraction_value * 7\n\n    # Verify the result by checking the multiplication\n    if (numerator / 7) * whole_number / 7 == fraction_value:\n        ans = numerator\n    else:\n        ans = 0  # If the condition doesn't meet, it means there's a mistake\n\n    return ans\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.10\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are (remainder, modulo)\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    A = 10*x + y\n    B = 1000*4 + 10*x + y\n    \n    equation = Eq(B, 10 + 7*A)\n    \n    solutions = solve(equation, (x, y))\n    \n    # Since x and y are digits, we look for a solution where 0 <= x <= 9 and 0 <= y <= 9\n    for sol in solutions:\n        if all(0 <= val <= 9 for val in sol):\n            A_value = 10 * sol[0] + sol[1]\n            return A_value\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    number = 4320\n    base_fraction = 3 / 2\n    count = 0\n    \n    # Prime factorization of 4320\n    num_2 = 0\n    num_3 = 0\n    while number % 2 == 0:\n        num_2 += 1\n        number //= 2\n    while number % 3 == 0:\n        num_3 += 1\n        number //= 3\n    \n    # The power of (3/2)^n will be integer when the power of 2 is not negative\n    # since the base has 2 in the denominator.\n    # 4320 can provide a certain number of 2s, and each (3/2)^n multiply an extra 2^-1.\n    # Hence, n must be less than or equal to the power of 2 in the prime factorization of 4320\n    count = num_2\n\n    return count\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    big_boxes = 9\n    cookies_per_big_box = 660\n    cookies_per_small_box = 600\n\n    total_cookies = big_boxes * cookies_per_big_box\n    small_boxes_needed = (total_cookies + cookies_per_small_box - 1) // cookies_per_small_box\n\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-8 - (-19))\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # Total pupils passing at least one test\n    total_passing_at_least_one = 43\n    \n    # Pupils passing each individual test\n    total_math = 30\n    total_science = 28\n    total_english = 25\n    \n    # Using inclusion-exclusion principle to find the upper bound for pupils passing all three tests\n    # min_all_passing = maximum(set(all_passing)) ≥ total passing individual - total_passing_at_least_one\n    min_all_passing = total_math + total_science + total_english - total_passing_at_least_one\n\n    # Since it cannot be negative, we take max with 0\n    max_all_passing = max(0, min_all_passing)\n\n    return max_all_passing\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    # Calculate the amount of pure fruit juice in each type of punch\n    punch1_fruit_juice = 20 * 0.35\n    punch2_fruit_juice = 30 * 0.60\n\n    # Calculate the total amount of fruit juice\n    total_fruit_juice = punch1_fruit_juice + punch2_fruit_juice\n\n    # Calculate the total weight of the new mixture\n    total_weight = 20 + 30\n\n    # Calculate the percent concentration of fruit juice in the new mixture\n    concentration = (total_fruit_juice / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the variable we need to find\n    grain_b = symbols('grain_b')\n\n    # Create the equation based on the problem statement\n    # Warehouse A originally had 50 tons and received 12 more, making it a total of 50 + 12\n    # Warehouse B originally had grain_b tons and shipped out 16, making it grain_b - 16\n    # Grain in warehouse A is 2 times that of warehouse B\n    equation = Eq((50 + 12), 2 * (grain_b - 16))\n    \n    # Solve the equation\n    solution = solve(equation, grain_b)\n    return solution[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    # As the sequence given is of prime numbers, and we see that it's increasing,\n    # we just need to find the prime number between 31 and 41.\n    # This is a simple problem not requiring libraries.\n\n    # The only prime number between 31 and 41 is 37\n    ans = 37\n    return ans\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    total_cookies = 76\n    cookies_per_box = 6\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = \"COLLEGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    return total_permutations\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.50 * 0.20 * 6000\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    fishes_for_rabbit = 3\n    rabbits_for_wheat = 2 / 3\n\n    fishes_for_wheat = fishes_for_rabbit * rabbits_for_wheat\n\n    return fishes_for_wheat\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    for people in range(1, 1000):  # Assuming a reasonable upper limit for a conference room\n        if (people + 7) % 3 == 0 and (people - 3) % 7 == 0:\n            return people\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    hourly_rate = 10\n\n    hours_hired = (total_cost - booking_fee) / hourly_rate\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the problem statement\n    # Alison has a congruence relation for each division:\n    # x ≡ 1 (mod 4), x ≡ 2 (mod 5), x ≡ 4 (mod 7)\n    # Using the Chinese Remainder Theorem to solve these congruences\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    \n    # Use the CRT to find a solution to the given system of congruences\n    x, _ = solve_congruence(*congruences)\n    \n    # Alison has between 400 and 500 pencils, so we add multiples of\n    # the product of the moduli until x is in the desired range\n    lcm_moduli = 4 * 5 * 7  # LCM of the moduli in the congruences\n    ans = x\n    while ans < 400:\n        ans += lcm_moduli\n    return ans\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(0, 10):\n        for x2 in range(0, 10 - x1):\n            x3 = 9 - x1 - x2\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell_stickers = 32\n    ginnie_stickers = dell_stickers // 2\n    lyn_stickers = ginnie_stickers // 4\n    total_stickers = ginnie_stickers + lyn_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    larger_share = (total_amount * 3) / ratio_sum\n    return larger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    mass_empty_bottle = symbols('mass_empty_bottle')\n    mass_full_juice = symbols('mass_full_juice')\n    \n    # Create equations based on the problem description\n    equation1 = Eq((5/6) * mass_full_juice + mass_empty_bottle, 4.6)\n    equation2 = Eq((2/3) * mass_full_juice + mass_empty_bottle, 4.45)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (mass_empty_bottle, mass_full_juice))\n    \n    # We need the mass of the empty bottle in grams\n    mass_empty_bottle_grams = solutions[mass_empty_bottle] * 1000\n    \n    return mass_empty_bottle_grams\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    return (19 + 3) / 2\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    # Iterate through all 3-digit numbers\n    for i in range(100, 1000):\n        # Check if the number is odd\n        if i % 2 != 0:\n            # Sum the digits of the number\n            digits_sum = sum(int(digit) for digit in str(i))\n            # Check if the sum of the digits is 5\n            if digits_sum == 5:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 1101\n    digits_per_page = 1\n    current_page = 1\n    pages_counted = 0\n    while total_digits > 0:\n        if current_page < 10:\n            digits_per_page = 1\n        elif current_page < 100:\n            digits_per_page = 2\n        elif current_page < 1000:\n            digits_per_page = 3\n        else:\n            digits_per_page = 4\n\n        total_digits -= digits_per_page\n        if total_digits >= 0:\n            pages_counted += 1\n        current_page += 1\n\n    return pages_counted\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    ans = 123 * 321\n    return ans\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    # Total pupils initially\n    total_pupils = 235 + 567\n    \n    # After transfer, the number of pupils in each room will be half of the total\n    pupils_per_room = total_pupils // 2\n    \n    return pupils_per_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    total = 0\n    sign = 1\n    for num in range(20, 0, -1):\n        total += num * sign\n        sign *= -1\n    return total\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    n = 1\n    term = 1\n    while True:\n        term = 1 + n*(n-1)//2\n        if term >= 100:\n            break\n        n += 1\n    return term - n\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n\n    total_pairwise = adam_ben + ben_carl + adam_carl\n    total_weight = total_pairwise / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_spent = 23\n    price_book = 3.40\n    price_magazine = 1.60\n\n    # Hypothesize she buys only magazines (maximum number)\n    max_magazines = total_spent // price_magazine\n    \n    for magazines in range(int(max_magazines), -1, -1):\n        books_spent = total_spent - (magazines * price_magazine)\n        if books_spent % price_book == 0:\n            return magazines\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    sister_notebooks = andy_notebooks - 38*2\n    return sister_notebooks\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n\n    equation1 = Eq(justin, crystal + 64)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    total_pages = solutions[justin] + solutions[crystal] + solutions[ashley]\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Assuming Mr. Lv's age is under 100\n        base10_age = int(str(age) + '0')\n        base3_age = int(str(age), 3)\n        if base10_age == base3_age:\n            return age\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # initial ratios\n    equation1 = Eq(orchids / tulips, 3 / 5)\n    \n    # total flowers\n    equation2 = Eq(orchids + tulips + roses, 3616)\n    \n    # flowers left after selling\n    equation3 = Eq(0.6 * orchids + 0.8 * tulips + 0.75 * roses, 2644)\n\n    # solve the equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = (5/8 + 1/17) * 8 + 9/17\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    product = 7007\n    prime_factors = []\n    # Prime factorization of 7007\n    factor = 2\n    while product > 1:\n        while product % factor == 0:\n            prime_factors.append(factor)\n            product //= factor\n        factor += 1\n        if factor * factor > product:\n            if product > 1: prime_factors.append(product)\n            break\n    \n    # Since the multiples need to be 2-digit numbers, we check combinations of the prime factors to see which form 2-digit numbers that are both multiples of 7\n    # The prime factorization of 7007 is known to be 7 * 7 * 11 * 13\n    # We can form the two-digit numbers by multiplying 7 with 11 and 7 with 13\n    num1 = 7 * 11\n    num2 = 7 * 13\n\n    # In this specific instance, we could hardcode the prime factors, but the method above is a demonstration on how to obtain them.\n    return num1 + num2\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n\n    # Since rotating the table doesn't change the order, anchor one person at a seat\n    # and permute the remaining 6. This is a circular permutation problem.\n    num_people = 7\n    empty_seats = 8 - num_people  # There's always one seat that remains empty\n\n    # We fix one person and arrange the rest. Therefore, we have (num_people - 1)!\n    num_orders = factorial(num_people - 1)\n\n    return num_orders\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            x3 = 10 - x1 - x2\n            if x3 > 0 and x1 <= x2 <= x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 56))\n    for i in primes:\n        if (55 - i) in primes:\n            return i * (55 - i)\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    cookie_cost = 9  # Cost of 1 cookie\n    cheesecake_to_cookie_ratio = 3 / 5\n    chocolate_cake_to_cheesecake_ratio = 3 / 2\n\n    # Calculate the cost of one cheesecake piece\n    cheesecake_cost = cookie_cost * cheesecake_to_cookie_ratio\n\n    # Calculate the cost of one chocolate cake piece\n    chocolate_cake_cost = cheesecake_cost * chocolate_cake_to_cheesecake_ratio\n\n    return chocolate_cake_cost\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # 2 basketballs + 3 volleyballs = £195\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    # 4 basketballs + 5 volleyballs = £355\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                # Ensure all digits are different\n                if len({2, 0, A, M, C, 1, 9}) == 7:\n                    # Construct the number and check if it is divisible by 9\n                    number = 20000000 + A*1000000 + M*10000 + C*100 + 19\n                    if number % 9 == 0:\n                        return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Set up the equations based on the problem data\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    total_candy = 36\n    difference_in_candy = 22 - 6\n    valeria_candy_now = (total_candy + difference_in_candy) / 2\n    return valeria_candy_now\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    days_to_read_one_fourth = 3\n    total_days = days_to_read_one_fourth * 4\n    return total_days\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_now, mother_now = symbols('melissa_now mother_now')\n    melissa_then = 8\n    mother_then = 32\n    \n    # When Melissa was 8, her mother was 32.\n    equation1 = Eq(mother_then, melissa_then * 4)\n\n    # Mother is now three times as old as Melissa.\n    equation2 = Eq(mother_now, 3 * melissa_now)\n\n    # The difference in ages is still the same.\n    equation3 = Eq(mother_now - melissa_now, mother_then - melissa_then)\n\n    solutions = solve((equation1, equation2, equation3), (melissa_now, mother_now))\n\n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    ans = 237 * 3\n    return ans\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    return 42 // (2 * 7)\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    recurring_sequence = [8, 5, 7, 1, 4, 2]\n    length_of_sequence = len(recurring_sequence)\n    total_digits_required = 58\n\n    sum_of_sequence = sum(recurring_sequence)\n    full_sequences = total_digits_required // length_of_sequence\n    remaining_digits = total_digits_required % length_of_sequence\n\n    total_sum = full_sequences * sum_of_sequence + sum(recurring_sequence[:remaining_digits])\n\n    return total_sum\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from decimal import Decimal\n\n    recurring_decimal = Decimal('4.73').quantize(Decimal('1.0000'))  # 4.7300\n    decimal1 = Decimal('4.73')\n    decimal2 = Decimal('4.77')\n    decimal3 = Decimal('4.737')\n\n    smallest_decimal = min(recurring_decimal, decimal1, decimal2, decimal3)\n    return smallest_decimal\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants_after_joel = 4\n    plants_joel_has_removed = (remaining_plants_after_joel * 2) + 2\n    \n    total_plants_after_valerie = remaining_plants_after_joel + plants_joel_has_removed\n    plants_valerie_has_removed = (total_plants_after_valerie * 2) + 3\n    \n    initial_plants = total_plants_after_valerie + plants_valerie_has_removed\n    return initial_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128  # train length in meters\n    tunnel_length = 544  # tunnel length in meters\n    speed = 52  # train's speed in m/s\n\n    # The entire train is in the tunnel when both its front has entered and its end has not left yet\n    total_distance = train_length + tunnel_length\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18\n    half_remaining = remaining_eggs * 2\n    sold_second_batch = half_remaining + 7\n    total_after_first_sale = half_remaining + sold_second_batch\n    half_initial = total_after_first_sale * 2\n    initial_eggs = half_initial - 16\n    return initial_eggs\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    percentage_increase = 0.40\n    original_price = increased_price / (1 + percentage_increase)\n    return original_price\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of students\n    P1, P6 = symbols('P1 P6')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(P1 + P6, 120)  # Total number of students\n    equation2 = Eq(2*P6 + P1/2, 180)  # Total number of buckets of water\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (P1, P6))\n    \n    # Return the number of P1 students\n    return solutions[P1]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    # There are 2 outcomes for each coin toss, heads (H) or tails (T).\n    # Since the coin is tossed twice, for each outcome of the first toss,\n    # there are 2 possible outcomes for the second toss.\n    # Thus, the total number of possible outcomes is 2 (for the first toss)\n    # multiplied by 2 (for the second toss).\n    number_of_outcomes = 2 * 2\n    return number_of_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    eq1 = Eq(2 * basketball + 3 * volleyball, 195)\n    eq2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((eq1, eq2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n    pencils = 55\n    pens = 143\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    fish_to_rabbit = 3 / 1\n    rabbit_to_wheat = 2 / 3\n\n    # Find the ratio of fish to wheat by multiplying the individual ratios\n    fish_to_wheat = fish_to_rabbit * (1 / rabbit_to_wheat)\n\n    # Simplify the fish to one pack of wheat ratio\n    fish_for_one_pack_of_wheat = fish_to_wheat * 3\n\n    return fish_for_one_pack_of_wheat\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    # Variables for edges\n    AB, AC, AD, AG = symbols('AB AC AD AG')\n    \n    # Given values\n    PB_value = 60 * sqrt(10)\n    PC_value = 60 * sqrt(5)\n    PD_value = 120 * sqrt(2)\n    PG_value = 36 * sqrt(7)\n    \n    # Expressions for edges using PA and given values\n    PB = AB - PA\n    PC = AC - PA\n    PD = AD - PA\n    PG = AG - PA\n    \n    # Using Pythagoras theorem for the diagonal of the cube\n    AG_eq = Eq(AG**2, 3*AB**2)  # 3 edges squared AB^2\n\n    # Equations using given values and Pythagoras theorem\n    PB_eq = Eq(PB**2, AB**2 + AB**2)  # Face diagonals\n    PC_eq = Eq(PC**2, AB**2)\n    PD_eq = Eq(PD**2, 2*AB**2)       # Space diagonal / √2\n    PG_eq = Eq(PG**2, 3*AB**2 / 2)    # Body diagonal / √2\n\n    # Substitute given values into equations\n    equations = [\n        PB_eq.subs(PB, PB_value - PA),\n        PC_eq.subs(PC, PC_value - PA),\n        PD_eq.subs(PD, PD_value - PA),\n        PG_eq.subs(PG, PG_value - PA),\n        AG_eq\n    ]\n    \n    # Solve the system of equations\n    solutions = solve(equations, (AB, AC, AD, AG, PA))\n    \n    # There may be multiple solutions, we find the positive one, which is the length of the edge we want\n    PA_value = [sol[PA] for sol in solutions if sol[PA] > 0]\n\n    return PA_value[0]\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    # Analyzing Johnny's work\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    \n    # Johnny multiplies the quotient by the remainder, which is incorrect.\n    # The correct operation is to multiply the quotient by the divisor\n    # and then add the remainder.\n    correct_product = quotient * divisor\n    correct_answer = correct_product + remainder\n    \n    # Checking if Johnny's answer is correct\n    if correct_answer == 22:\n        return True  # Johnny's answer is correct.\n    else:\n        return False, correct_answer  # Johnny's answer is incorrect.\n\n# Call the solution and store the result in 'ans'\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    ans = count\n    return ans, ways\n\nans, ways = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes = 66.5 / apples_per_box\n    return int(total_boxes)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of students initially in the canteen.\n    x = symbols('x')\n    \n    # Original number of boys is 40% of x.\n    boys_original = 0.40 * x\n    \n    # After 16 boys left and 16 girls entered, the number of boys becomes (boys_original - 16).\n    # Now, boys are 2/15 of the total students, which is now (x + 16 - 16) = x.\n    equation = Eq(boys_original - 16, (2/15) * x)\n    \n    # Solve for x.\n    total_students = solve(equation, x)[0]\n    \n    # Calculate the original number of girls.\n    girls_original = total_students - boys_original\n    \n    # The current number of girls is the original number of girls plus the 16 that entered.\n    girls_now = girls_original + 16\n    \n    return girls_now\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = '279'\n    primes = set()\n\n    # Create all permutations of the digits from lengths 1 to 3\n    for i in range(1, 4):\n        for p in permutations(digits, i):\n            num_str = ''.join(p)\n            num = int(num_str)\n            if isprime(num) and num < 100:\n                primes.add(num)\n\n    return len(primes)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    numerator = ((3 + 1/3) * 1.9 + 19.5 / (4 + 1/2))\n    denominator = (62/75 - 0.16)\n    first_fraction = numerator / denominator\n\n    inner_numerator = 3.5 + (4 + 2/3) + (2 + 2/15)\n    inner_denominator = 0.5 * (1 + 1/20 + 4.1)\n    second_fraction = inner_numerator / inner_denominator\n\n    ans = first_fraction / second_fraction\n    return ans\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bracelet, necklace, ring = symbols('bracelet necklace ring')\n    \n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(bracelet + necklace + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (bracelet, necklace, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for n in range(1000, 10000):\n        for digit in str(n):\n            m = int(str(n).replace(digit, '', 1))\n            if n - m == 2021:\n                return n\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')  # Define the symbols for the price of banana and pear \n    \n    # Define the two equations based on the information provided\n    equation1 = Eq(banana + 2 * pear, 94)  # Max's purchase\n    equation2 = Eq(banana + pear, 62)      # Emily's purchase\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    percent_swimming = 82\n    percent_jogging = 54\n    percent_neither = 16\n\n    students_swimming = (percent_swimming * total_students) / 100\n    students_jogging = (percent_jogging * total_students) / 100\n    students_neither = (percent_neither * total_students) / 100\n\n    # By principle of inclusion-exclusion\n    students_both = students_swimming + students_jogging - (total_students - students_neither)\n    \n    return int(students_both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    work_per_day_A = 1 / 15\n    work_per_day_B = 1 / 10\n    work_done_in_4_days = 4 * (work_per_day_A + work_per_day_B)\n    remaining_work = 1 - work_done_in_4_days\n    days_needed_for_B = remaining_work / work_per_day_B\n    return days_needed_for_B\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    ans = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65) - (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n\n    total_cost = tickets * cost_per_ticket\n\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    # Including both ends; Decrease by 10 since we have to include the first tree\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    linda_rate = 1 / 5  # Linda's rate is 1 problem per 5 minutes\n    cici_rate = 1 / 6   # Cici's rate is 1 problem per 6 minutes\n\n    combined_rate = linda_rate + cici_rate  # Their combined rate per minute\n    total_time = 2 * 60  # Total time working together in minutes\n\n    total_problems = combined_rate * total_time  # Total problems they can do together\n\n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n    x = symbols('x')\n\n    # Equation: After Amy gives x apples to John, she has 4 more apples than John\n    equation = Eq(amy - x, john + x + 4)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    \n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    for n in range(13, 17):\n        if n % 2 != 0:\n            ans = n\n            break\n    return ans\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_period = 45\n    wait_time = bus_period - (late_time % bus_period)\n    return wait_time\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Goats and rabbits relation\n    goat_rabbit_ratio = 1 / 4\n\n    # Total grass units for goats: 14 goats for 15 days\n    total_grass_for_goat = 14 * 15\n\n    # Total grass units for rabbits: 70 rabbits for 8 days\n    total_grass_for_rabbit = 70 * 8\n\n    # Grass units per goat per day is equal to grass units per 4 rabbits per day\n    # grass_per_goat_day = 4 * grass_per_rabbit_day\n    # So, grass_per_rabbit_day = total_grass_for_rabbit / (70 * 8)\n    # and grass_per_goat_day = 4 * grass_per_rabbit_day\n    grass_per_rabbit_day = total_grass_for_rabbit / (70 * 8)\n    grass_per_goat_day = 4 * grass_per_rabbit_day\n\n    # Total grass available (either from 14 goats for 15 days or 70 rabbits for 8 days, which is the same)\n    total_grass = total_grass_for_goat\n\n    # Daily consumption of grass by 17 goats and 20 rabbits\n    daily_consumption = 17 * grass_per_goat_day + 20 * grass_per_rabbit_day\n\n    # Number of days the pasture can feed 17 goats and 20 rabbits\n    num_days = total_grass / daily_consumption\n\n    return num_days\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]  # Given numbers without the missing one\n    mean_of_numbers = 37  # The mean of ten numbers\n    total_sum = mean_of_numbers * 10  # Total sum of ten numbers\n    sum_of_given_numbers = sum(numbers)  # Sum of the given nine numbers\n    missing_number = total_sum - sum_of_given_numbers  # Missing number is the difference\n\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_for_nine_books = 38.79\n    cost_per_book = total_cost_for_nine_books / 9\n    total_cost_for_seven_books = cost_per_book * 7\n    return total_cost_for_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chan, toh = symbols('chan toh')   \n    \n    equation1 = Eq((1/4) * chan, (1/3) * toh + 33)\n    equation2 = Eq(chan + toh, 1000)\n    \n    solutions = solve((equation1, equation2), (chan, toh))\n    \n    return solutions[toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sandra, tasha, riley = symbols('sandra tasha riley')\n\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, 3 / 5 * sandra)\n    equation3 = Eq(tasha - riley, 60)\n\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    climb = 10\n    slide = 0\n    day = 0\n\n    while height > 0:\n        day += 1\n        height -= climb\n        \n        if height <= 0:\n            break\n        \n        slide = day\n        height += slide\n        \n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    num = 4\n    repeat = 3\n    ans = sum(int(str(num) * i) for i in range(1, repeat + 1))\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    savings = [13, 18, 5]\n    mean_savings = sum(savings) / len(savings)\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9**2) - 7\n    return x\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    angel_to_number = {'A': '0', 'n': '1', 'g': '4', 'e': '7', 'l': '5'}\n    devil_to_number = {'D': '0', 'e': '4', 'v': '2', 'i': '5', 'l': '1'}\n    \n    angel_password = \"0141705021\"\n    devil_tried_password = \"4005220912\"\n    \n    devil_actual_password = \"\".join(devil_to_number[letter] for letter in \"Devil\")\n    \n    if devil_tried_password == devil_actual_password:\n        return True, \"Andy can unlock the treasure chest.\"\n    else:\n        return False, devil_actual_password\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    # Let's start with the simple case of 2 numbers\n    for i in range(1, 6):  # i is the first number, and 6-i will be the second\n        count += 1\n\n    # Now let's consider groups of more than 2 numbers that add up to 6\n    # We'll handle 3, 4, 5, and 6, because 6 can also be 1+1+1+1+1+1\n    for i in range(1, 6):\n        for j in range(1, 6 - i):\n            if i != j:\n                count += 1\n            for k in range(1, 6 - (i + j)):\n                if i != k and j != k:\n                    count += 1\n                for l in range(1, 6 - (i + j + k)):\n                    if i != l and j != l and k != l:\n                        count += 1\n                    for m in range(1, 6 - (i + j + k + l)):\n                        if len(set([i, j, k, l, m])) == 5:\n                            count += 1\n\n    # Finally, there is one way to have six 1s: 1+1+1+1+1+1\n    count += 1\n\n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    # Convert recurring decimals to fractions\n    n1 = 1 / 90  # 0.0(1) as a fraction\n    n2 = 12 / 90  # 0.1(2) as a fraction\n    n3 = 23 / 90  # 0.2(3) as a fraction\n    n4 = 34 / 90  # 0.3(4) as a fraction\n    n5 = 45 / 90  # 0.4(5) as a fraction\n    n6 = 54 / 90  # 0.5(4) as a fraction\n    n7 = 78 / 90  # 0.7(8) as a fraction\n    \n    # Summing fractions\n    total = n1 + n2 + n3 + n4 + n5 + n6 + n7\n    return total\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, solve, sqrt\n\n    # Define the symbol for a, which is positive\n    a = symbols('a', positive=True)\n\n    # Define the equation based on the question\n    equation = sqrt(a) - 2/sqrt(a)\n\n    # Solve for x in the original equation\n    x = solve(sqrt(x) - equation, x)[0]\n\n    # Calculate sqrt(x^2 + 8x) in terms of a\n    expression = sqrt(x**2 + 8*x)\n\n    # Simplify and solve the expression to get the result in terms of a\n    result = expression.subs(x, equation**2).simplify()\n\n    return result\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for x1 in range(2017, 2036):\n        for x2 in range(x1 + 1, 2036):\n            for x3 in range(x2 + 1, 2036):\n                if (x1 + x2 + x3) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n    max_sheep_in_pen = (total_sheep + total_pens - 1) // total_pens\n    return max_sheep_in_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for number in range(300, 401):\n        if all([number % 3 == 2, \n                number % 4 == 2, \n                number % 5 == 2, \n                number % 7 == 5]):\n            return number\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    boys = 18\n    girls = 27\n    total = boys + girls\n    mean_boys = 16.2\n    mean_girls = 16.7\n\n    total_age_boys = boys * mean_boys\n    total_age_girls = girls * mean_girls\n    total_age = total_age_boys + total_age_girls\n\n    mean_total = total_age / total\n\n    return mean_total\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    original_password = \"0141705021\"\n    input_password = \"4005220912\"\n    \n    # Check if input matches in pattern with angel by sorting the strings and comparing\n    if sorted(original_password) == sorted(input_password):\n        ans = \"Yes\"  # Andy can unlock the chest as the pattern is the same\n    else:\n        correct_password = ''.join(sorted(original_password))  # Provide the correct password\n        ans = \"No, the correct password is \" + correct_password\n\n    return ans\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    for i in range(200, 301):\n        if i % 6 == 1 and i % 13 == 8:\n            return i\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    raye = 6\n    simon = 12\n    taylor = 16\n\n    ans = lcm(raye, simon, taylor)\n    \n    return ans\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # To ensure getting 5 balls of the same colour, Sara must account for the worst-case scenario.\n    # She could take all yellow balls (5) and still not have 5 of the same colour.\n    # Then she could take 4 green balls, adding up to 9, but still not ensuring 5 of the same colour.\n    # If she now takes one more ball, it could either be green or red.\n    # In the worst case, it will be red, making the numbers of balls: 5 yellow, 4 green, and 1 red.\n    # With the next ball, she will definitely have 5 of one colour (at most 9 yellow+green and 2 reds taken so far).\n    # Therefore, she needs to take out a total of 11 balls to ensure 5 of the same colour.\n    return 11\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    difference = 28 - 25\n\n    first_term = last_shown_term - (nth_term - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30  # in meters\n    sam_speed = 1  # in meters per second\n    ben_speed = 0.6  # in meters per second\n    total_time = 10 * 60  # 10 minutes in seconds\n\n    combined_speed = sam_speed + ben_speed  # speed at which they approach each other\n    distance_per_meeting = pool_length / combined_speed  # distance traveled until they meet each time\n    \n    meets = total_time / distance_per_meeting  # number of meetings in 10 minutes\n\n    return int(meets)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    a, b = 8, 9\n    c, d = 7, 5\n    ans = (a * b) + (c * d)\n    return ans\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_bob_cindy = 120\n    height_doris = 126\n    \n    total_height_bob_cindy = 2 * average_bob_cindy\n    total_height_three = total_height_bob_cindy + height_doris\n    average_height_three = total_height_three / 3\n    \n    return average_height_three\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine_money = 24\n    tom_money = 2 * katherine_money\n    gareth_money = 4 * tom_money\n    return gareth_money\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n\n    equation_future = Eq(destin + 6, 2 * (nephew + 6))\n    equation_past = Eq((destin - 6) / (nephew - 6), 5 / 1)\n\n    solutions = solve((equation_future, equation_past), (destin, nephew))\n\n    sum_of_ages_in_10_years = solutions[destin] + 10 + solutions[nephew] + 10\n\n    return sum_of_ages_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = symbols('girls', real=True)\n\n    total_students = 40\n    total_avg_pencils = 35\n    boys_avg_pencils = 20\n    girls_avg_pencils = 60\n\n    girls = total_students - boys\n\n    equation1 = Eq(boys * boys_avg_pencils + girls * girls_avg_pencils, total_students * total_avg_pencils)\n\n    solutions = solve((equation1), (boys))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return 9.97 + 9.98 + 9.99\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = '135'\n    perm = permutations(digits)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    departure_time = (6, 35)  # 6:35am in hours, minutes\n    arrival_time = (10, 22)   # 10:22am in hours, minutes\n    \n    # Convert hours to minutes and add minutes\n    departure_minutes = departure_time[0] * 60 + departure_time[1]\n    arrival_minutes = arrival_time[0] * 60 + arrival_time[1]\n    \n    # Calculate the time difference in minutes\n    duration = arrival_minutes - departure_minutes\n    \n    return duration\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = '3456'\n    num_repeats = 50 // len(pattern)\n    partial_repeat_length = 50 % len(pattern)\n\n    sum_full_repeats = sum(int(digit) for digit in pattern) * num_repeats\n    sum_partial_repeat = sum(int(pattern[i]) for i in range(partial_repeat_length))\n\n    return sum_full_repeats + sum_partial_repeat\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    result = 3 / (3/5) / (5/7) / (7/9) / (9/13) / (13/15)\n    return result\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    sweets_first_group = 6\n    sweets_second_group = 4\n    sweets_third_group = 5\n\n    # Calculate the students in the first group\n    students_first_group = (3/5) * total_sweets / sweets_first_group\n\n    # Calculate the remaining sweets after the first group\n    remaining_sweets = total_sweets - students_first_group * sweets_first_group\n\n    # Calculate the students in the second group\n    students_second_group = (1/4) * remaining_sweets / sweets_second_group\n\n    # Calculate the remaining sweets after the second group\n    remaining_sweets -= students_second_group * sweets_second_group\n\n    # Calculate the students in the third group\n    students_third_group = remaining_sweets / sweets_third_group\n\n    # Calculate total students\n    total_students = students_first_group + students_second_group + students_third_group\n\n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n\n    cards = [6, 12, 35, 175, 245, 300]\n    card_combinations_candy = list(combinations(cards, 2))\n    card_combinations_candice = list(combinations(cards, 3))\n\n    products_candy = {prod(combo) for combo in card_combinations_candy}\n    products_candice = {prod(combo) for combo in card_combinations_candice}\n\n    common_products = products_candy & products_candice\n\n    picked_numbers = set()\n    for product in common_products:\n        for combo in card_combinations_candy:\n            if prod(combo) == product:\n                picked_numbers.update(combo)\n        for combo in card_combinations_candice:\n            if prod(combo) == product:\n                picked_numbers.update(combo)\n\n    not_picked = set(cards) - picked_numbers\n    return not_picked.pop()\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    father_current_age = father_future_age - (father_future_age - tom_age)\n    \n    return father_current_age\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + (30/100)\n    return ans\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def is_composite(n):\n    if n < 4:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef solution():\n    for i in range(1000, 0, -2):  # start from 1000 to 1 and check only odd numbers\n        if not is_composite(i):  # skip prime numbers\n            continue\n        for j in range(2, i):\n            if not is_composite(j):\n                continue\n            for k in range(j + 1, i):  # start from j+1 to ensure different numbers\n                if not is_composite(k):\n                    continue\n                l = i - j - k  # last number\n                if l > k and is_composite(l):  # ensure different numbers and composite\n                    break\n            else:  # this else belongs to the 'for k' loop (not the 'if' statement)\n                continue\n            break  # break out of the 'for j' loop\n        else:  # this else belongs to the 'for j' loop (not the 'if' statement)\n            return i\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    days_packet_25 = 25\n    days_packet_20 = 20\n\n    least_common_multiple = lcm(days_packet_25, days_packet_20)\n\n    # Assuming a non-leap year and starting from March 1st\n    month_days = [(3, 31), (4, 30), (5, 31), (6, 30),\n                  (7, 31), (8, 31), (9, 30), (10, 31),\n                  (11, 30), (12, 31)]\n\n    total_days = 0\n    for month, days in month_days:\n        total_days += days\n        if total_days >= least_common_multiple:\n            next_start_day = total_days - least_common_multiple + 1\n            break\n\n    ans = (month, next_start_day)\n    return ans\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    first_number = 17\n    second_number = 35\n    ans = (first_number + second_number) / 2\n    return ans\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    first_number = 3 + 1/4\n    second_number = 1 + 3/4\n\n    difference = first_number - second_number\n\n    return difference\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pies each had initially\n    x = symbols('x')\n\n    # Mrs Tan had x pies and bought another 12\n    mrs_tan_pies = x + 12\n\n    # Mrs Lim had x pies and gave away 4\n    mrs_lim_pies = x - 4\n\n    # Mrs Tan now has twice as many pies as Mrs Lim\n    equation = Eq(mrs_tan_pies, 2 * mrs_lim_pies)\n\n    # Solve the equation to find the number of pies each had initially\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    total_money = 580\n    boy_money = 8\n    girl_money = 5\n    # Let the number of girls be x\n    # Then the number of boys is 3x\n    # 8*(3x) + 5*x = 580\n    # Solve for x\n    # 24x + 5x = 580\n    # 29x = 580\n    x = total_money / (3 * boy_money + girl_money)\n    \n    # Find the number of boys\n    num_boys = 3 * x\n    return int(num_boys)\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    # First number in the sequence divisible by 4 with a remainder of 3 is 3\n    first_term = 3\n    # Last number less than 100 divisible by 4 with a remainder of 3 is 99\n    last_term = 99\n    # Common difference between terms is 4\n    difference = 4\n\n    # Calculate number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Sum of an arithmetic sequence formula: n/2 * (first_term + last_term)\n    sum_sequence = num_terms / 2 * (first_term + last_term)\n    \n    return int(sum_sequence)\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    perimeter = 12\n    count = 0\n    for a in range(1, perimeter//2):\n        for b in range(a, (perimeter - a)//2 + 1):\n            c = perimeter - a - b\n            if a == b or a == c or b == c:\n                if a + b > c and a + c > b and b + c > a:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip = bill * 0.15\n    tax = bill * 0.08\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the current ages of the elder and younger brothers\n    elder, younger = symbols('elder younger')\n\n    # Equation 1: The sum of the brothers' current ages\n    equation1 = Eq(elder + younger, 42)\n\n    # Equation 2: \n    # \"A few years ago, when the elder brother was at the current age of the younger brother\"\n    # means that elder - diff = younger\n    # \"the younger brother was exactly half the elder brother's current age\"\n    # means that younger - diff = elder / 2\n    # We substitute elder - diff with younger in the second part, so:\n    # younger - diff = elder / 2\n    # young - (elder - younger) = elder / 2\n    # younger - elder + younger = elder / 2\n    # 2 * younger - elder = elder / 2\n    # 4 * younger - 2* elder = elder\n    # 4 * younger = 3 * elder\n    equation2 = Eq(4 * younger, 3 * elder)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    # Return the age of the elder brother\n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    both_teams = (sports_team + art_team) - total_students\n    \n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n    \n    return strawberries_received\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_a = 8\n    class_b = 12\n    class_c = 20\n\n    # Calculate the Greatest Common Divisor (GCD) of the three numbers\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    # Total number of students\n    total_students = 30\n    \n    # Students who passed the first exam\n    passed_first_exam = 25\n    \n    # Students who failed the second exam\n    failed_second_exam = 12\n    \n    # Students who passed the second exam but failed the first\n    passed_second_failed_first = 3\n    \n    # Students who passed only the first exam\n    # Using the Inclusion-Exclusion Principle\n    passed_only_first_exam = passed_first_exam - (total_students - failed_second_exam - passed_second_failed_first)\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Routes from A to B to C to D\n    route_A_B_C_D = 7 * 5 * 2\n    \n    # Routes from A to C to D\n    route_A_C_D = 4 * 2\n\n    # Adding the direct routes from A to D\n    total_routes = route_A_B_C_D + route_A_C_D + 6\n\n    return total_routes\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, cheese = symbols('chocolate cheese')\n\n    total_cupcakes = 255\n    chocolate_sold = 0.40 * chocolate\n    cheese_sold = 0.75 * cheese\n    chocolate_left = chocolate - chocolate_sold\n    cheese_left = cheese - cheese_sold\n\n    equation1 = Eq(chocolate + cheese, total_cupcakes)\n    equation2 = Eq(chocolate_left, cheese_left)\n\n    solutions = solve((equation1, equation2), (chocolate, cheese))\n\n    cupcakes_left = solutions[cheese] - solutions[cheese] * 0.75\n\n    return cupcakes_left\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    # Total cost for pencils\n    pencil_cost = 3 * 2\n    \n    # Total cost for pens\n    total_cost = 20\n    pens_cost = total_cost - pencil_cost\n\n    # Cost per pen\n    pen_cost = pens_cost / 2\n\n    return pen_cost\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    total_cattle = 5\n    total_days = 10\n\n    hay_per_cattle_per_day = total_hay / (total_cattle * total_days)\n\n    return hay_per_cattle_per_day\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    for youngest in range(1, 10):\n        for middle in range(youngest + 1, 10):\n            for oldest in range(middle + 1, 10):\n                if youngest * middle * oldest == 210:\n                    return youngest\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_students = 39\n\n    equation1 = Eq(boys / 4, girls * 2 / 5)\n    equation2 = Eq(boys + girls, total_students)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    difference = solutions[boys] - solutions[girls]\n\n    return difference\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed = 3 / 8\n    seedlings_killed = total_seedlings * fraction_killed\n    seedlings_survive = total_seedlings - seedlings_killed\n    \n    return int(seedlings_survive)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n    days = total_locusts // daily_consumption\n    remaining_locusts = total_locusts - (days * daily_consumption)\n    \n    if remaining_locusts == 0:\n        remaining_locusts = daily_consumption\n        \n    return remaining_locusts\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $5 notes and y be the number of $10 notes\n    x, y = symbols('x y')\n\n    # Total number of notes\n    eq1 = Eq(x + y, 116)\n\n    # Remaining notes after spending\n    remaining_10_notes = y - (60 / 100) * y\n    remaining_5_notes = x - (25 / 100) * x\n\n    # Ratio of remaining $10 notes to $5 notes\n    eq2 = Eq(remaining_10_notes, (4 / 7) * remaining_5_notes)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n    \n    # Calculate money spent on the bag\n    money_spent_10_notes = (60 / 100) * solutions[y] * 10\n    money_spent_5_notes = (25 / 100) * solutions[x] * 5\n    total_money_spent = money_spent_10_notes + money_spent_5_notes\n\n    return total_money_spent\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    return (12 * 92) + (22 * 82) + (32 * 72)\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Don's and Ben's original numbers of stickers\n    don, ben = symbols('don ben')\n\n    # Original ratio equation: 2/3 = don/ben\n    equation1 = Eq(don * 3, ben * 2)\n    \n    # New ratio after changes: 6/7 = (don + 10)/(ben - 5)\n    equation2 = Eq((don + 10) * 7, (ben - 5) * 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (don, ben))\n\n    return solutions[don]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    ans = 60 * 20\n    return ans\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = round(726 * 8, 1)\n    return ans\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    sum_of_positive_terms = sum(range(2, 2017, 4))\n    sum_of_negative_terms = sum(range(-3, -2016, -4))\n    ans = sum_of_positive_terms + sum_of_negative_terms\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        return 0\n    else:\n        ans = remainder\n    return ans\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    toys_to_give = (amy_toys - sally_toys) // 2\n    return toys_to_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8 / 9) * baby_chickens\n    roosters = (1 / 16) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        ""
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia = 80\n    kenny = cecilia / 4\n    total = cecilia + kenny\n    return total\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n    \n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    # Given sum of squares formula: n(n + 1)(2n + 1) / 6\n    # We use the formula to find the sum of squares for 1 to 20\n    n = 20\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Now we know the sum of squares for 1 to 20 is 2870 (given in the problem)\n    # Which implies the following formula is true:\n    # sum_of_squares = 2870\n    \n    # Now we calculate the sum for the new expression\n    # It is a sum of the product of consecutive odd numbers starting from 1\n    # The formula for the sum of the product of consecutive odd numbers is\n    # (2n + 1)^2 / 4 - 1/4\n    # We want to calculate for (1*3) + (3*5) + (5*7) + ... + (39*41)\n    # This series has 20 terms as well\n\n    # Initialize sum for new series\n    new_sum = 0\n    for i in range(1, 40, 2):\n        new_sum += i * (i + 2)\n        \n    # Simplify the above series as it follows arithmetic progression in sum of squares\n    # Every term in new series are in the form of (2k-1)(2k+1) where k = 1,2,...20\n    # Using difference of squares, the new series can be simplified to 4k^2 - 1\n    # And since the sum of k^2 from 1 to 20 is already known (2870), we can use it\n    # The new series sum is then 4 * 2870 (sum of k^2) - 20 (since there are 20 terms)\n    # Hence final sum:\n    final_sum = 4 * sum_of_squares - 20\n    \n    return final_sum\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial as fact\n    \n    # Total arrangements without restrictions\n    total_arrangements = fact(7)\n    \n    # Arrangements where the triplet sisters are considered a single entity\n    arrangements_with_triplets_as_one = fact(5)\n    \n    # Since the triplet sisters can arrange among themselves in 3! ways\n    arrangements_of_triplets = fact(3)\n    \n    # Arrangements where the twin brothers are next to each other\n    # Consider twin brothers as a single entity, so there are 6 entities\n    arrangements_with_twins_together = fact(6) \n    \n    # Since the twin brothers can arrange among themselves in 2! ways\n    arrangements_of_twins = fact(2)\n    \n    # The number of arrangements where twins are together without restriction on sisters\n    # For each of these, the sisters have 3! ways to arrange themselves\n    # So we multiply by the number of ways sisters can arrange among themselves\n    twins_together_with_sisters_free = arrangements_with_twins_together * arrangements_of_triplets\n    \n    # The desired number of ways is the total arrangements considering triplet sisters as a single entity\n    # times the ways triplet sisters can arrange among themselves,\n    # minus the arrangements where twins are together (free sisters corrected with their arrangements)\n    ans = (arrangements_with_triplets_as_one * arrangements_of_triplets) - twins_together_with_sisters_free\n    \n    return ans\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    total_cups = 30\n    total_milk_needed = milk_per_cup * total_cups\n    return total_milk_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number_str = f\"21{digit1}{digit2}35\"\n            number = int(number_str)\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n    # Applying the Pigeonhole Principle\n    # At least one pigeonhole (day) will have ceil(total_students / days_in_week) students\n    min_students = (total_students + days_in_week - 1) // days_in_week\n    return min_students\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # There are 7 days in a week; thus there can be a maximum of 55 // 7 = 7 weeks with 1 Friday each.\n    full_weeks = 55 // 7\n    \n    # In addition to these full weeks, there can be at most 6 remaining days.\n    remaining_days = 55 % 7\n    \n    # Now, let's count Fridays. If the first day of the vacation is a Friday,\n    # the 7 full weeks will have a Friday each, plus if the remaining days include a Friday.\n    # Thus, the total number of Fridays is full weeks plus 1 if remaining_days > 0.\n    max_fridays = full_weeks + (1 if remaining_days > 0 else 0)\n\n    return max_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    return 3 / (1 - 1/2)\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percentage = 20\n    total_girls = 25\n\n    girls_wearing_glasses = (percentage / 100) * total_girls\n\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    lcm = 2 * 3 * 4 * 5  # Least common multiple of 2, 3, 4, 5, 6, 8, 9 (ignoring factors already counted)\n    N = lcm\n    while True:\n        if N % 7 == 5:\n            return N\n        N += lcm\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    # Cost of pencil and pen\n    pencil_cost = 2\n    pen_cost = 4\n\n    # Calculating how many pencils are equal to the cost of one pen\n    pencils_per_pen = pen_cost / pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    ans = 53 * 47\n    return ans\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n    \n    total_cost = (7 * cost_per_mug) + (5 * cost_per_pen)\n    \n    change = 10 - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    away_pupils = total_pupils * (1/5)\n    pupils_go_to_cathedral = total_pupils - away_pupils\n\n    return int(pupils_go_to_cathedral)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song = 3  # minutes for one child to sing a song\n    class_size = 50    # number of children in the class\n    num_songs = 2      # number of songs to be sung\n\n    # Each child sings independently at the same time, so the time\n    # for the class to sing 1 song is still 3 minutes\n    # For 2 songs, just double that time\n    total_time = time_per_song * num_songs\n    \n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    # Total weight of 5 apples and the basket\n    total_weight_5_apples = 580\n    \n    # Remaining weight after taking out 3 apples (2 apples + basket)\n    remaining_weight_2_apples = 280\n    \n    # Weight of 3 apples (since removing them changes the total weight by that amount)\n    weight_3_apples = total_weight_5_apples - remaining_weight_2_apples\n    \n    # Total weight of 5 apples (by direct proportion, double the weight of 3 apples)\n    weight_5_apples = (5 / 3) * weight_3_apples\n\n    # Weight of the basket\n    weight_basket = total_weight_5_apples - weight_5_apples\n\n    return weight_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    # Convert 25% into a decimal\n    decimal_25_percent = 25 / 100\n    \n    # Compare the decimal values\n    if decimal_25_percent > 0.3:\n        ans = \"25%\"\n    else:\n        ans = \"0.3\"\n    \n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015  # 1.5% per year\n\n    # A = P(1 + r)^t\n    # t = ln(A/P) / ln(1 + r)\n\n    from math import log\n\n    # Solve for t\n    t = log(final_amount / principal) / log(1 + interest_rate)\n\n    # Check if her claim of 5 years is correct\n    if round(t) == 5:\n        return \"right\"\n    else:\n        return int(round(t))  # Return the actual number of years rounded\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n\n    cups_needed = desired_loafs / loafs_per_cup\n\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    from math import lcm\n\n    multiple_of_3_and_7 = lcm(3, 7)\n    ans = multiple_of_3_and_7\n    while True:\n        if str(ans)[-1] == '2':\n            break\n        ans += multiple_of_3_and_7\n    return ans\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    equation1 = Eq(cookies, 3 * cakes)\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    num_weeks = 2\n\n    days_in_two_weeks = days_in_a_week * num_weeks\n\n    return days_in_two_weeks\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    place_value_1 = 3 * 100\n    place_value_2 = 3 * 1000\n    ans = abs(place_value_1 - place_value_2)\n    return ans\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j denote the time John would take to build the wall on his own\n    # Let a denote the time Angus would take to build the wall on his own\n    # Jonah and Angus together take 36 hours, so their combined rate is 1/36\n    # John, Jonah, and Angus together take 27 hours, so their combined rate is 1/27\n\n    j, a = symbols('j a')\n    \n    # The equation based on the rates (1/j + 1/(a+36) = 1/27) because we assume Jonah and Angus have the same rate\n    # After solving the equation for j, we'll get the time it would take for John to build the wall alone\n    equation = Eq(1/j + 1/a, 1/27)\n\n    # We know that Jonah and Angus's rate together (without John) is 1/36\n    # (1/a + 1/a = 1/36) solving for a gives us (2/a = 1/36)\n    a_solution = solve(Eq(2/a, 1/36), a)[0]\n\n    # Plug the solution for a into the first equation to find j\n    j_solution = solve(equation.subs(a, a_solution), j)[0]\n\n    return j_solution\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return 2 ** 17 % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # The theory to use here is the Chicken McNugget Theorem\n    # which states that for two relatively prime positive integers a and b,\n    # the greatest integer that cannot be expressed in the form ax + by\n    # for nonnegative integers x and y is ab - a - b.\n    # The two coin values are relatively prime since they are 4z and 5z (no common factors other than 1z).\n    # Hence, we apply the theorem with a = 4z and b = 5z.\n    \n    coin1 = 4\n    coin2 = 5\n\n    largest_non_payable = (coin1 * coin2) - coin1 - coin2\n    return largest_non_payable\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # Since the sum of the 10 numbers is 1001, the greatest possible gcd d would divide 1001.\n    # We should find the maximum divisor of 1001 that could be the gcd of the ten numbers.\n    # The maximum possible value of d would be achieved when the rest of the numbers are as small as possible,\n    # hence when the other 9 numbers are all 1s.\n    # The tenth number would then be 1001 - 9 = 992.\n    # The maximum possible d is the gcd of 992 and 1001.\n    from math import gcd\n\n    # Finding the GCD of 1001 and the largest number(992) to get the maximum possible divisor\n    max_d = gcd(1001, 992)\n\n    return max_d\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Let x be Claire's current age and y be Daniel's current age.\n    # Then (x - 5) + (y - 5) = 14, simplifying to x + y = 24\n    # Their combined age in 3 years will be (x + 3) + (y + 3) \n    # which simplifies to x + y + 6\n    \n    combined_age_now = 24\n    combined_age_in_3_years = combined_age_now + 6\n\n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    # a 6-digit number is divisible by 12 if it's divisible by 3 and by 4.\n    # divisibility rule for 3: the sum of the digits must be divisible by 3.\n    # divisibility rule for 4: the last two digits of the number should be divisible by 4.\n\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            if (1 + 0 + 8 + 2 + a + b) % 3 == 0 and (10 * a + b) % 4 == 0:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    # We have the two equations:\n    # 3a + 4b = 1.81\n    # 5a + 2b = 1.71\n    # We want to calculate the weight for 4 apples and 4 pears (4a + 4b).\n    # Let's first solve the two equations to get the weights of one apple (a) and one pear (b).\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    equation1 = Eq(3*a + 4*b, 1.81)\n    equation2 = Eq(5*a + 2*b, 1.71)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Now we have the weight of one apple (a) and one pear (b),\n    # let's calculate the weight for 4 apples and 4 pears:\n    weight_4_apples_4_pears = 4 * solutions[a] + 4 * solutions[b]\n\n    return weight_4_apples_4_pears\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    ribbon1 = 45\n    ribbon2 = 30\n\n    max_length = gcd(ribbon1, ribbon2)\n\n    return max_length\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    ans = 475 + 138\n    return ans\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    num = 1\n    while not (num % 5 == 1 and num % 12 == 3):\n        num += 1\n    return num\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n    boxes_bought = total_pencils / pencils_per_box\n    \n    return int(boxes_bought)\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    amanda_stickers = solutions[amanda]\n    cathy_stickers = solutions[cathy]\n\n    return amanda_stickers + cathy_stickers\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    ans = 386 + 99\n    return ans\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    eggs_per_day = 50\n    days_to_adulthood = 30\n    total_days = 40\n\n    # Since it takes 30 days for eggs to become adults, only the eggs laid in the\n    # first 10 days will become adults by the 40th day.\n    days_when_eggs_become_adults = total_days - days_to_adulthood\n\n    # Number of new adult fleas will be the number of eggs laid in the first 10 days\n    # as those are the only ones that can reach adulthood by the 40th day.\n    new_adult_fleas = days_when_eggs_become_adults * eggs_per_day\n\n    return new_adult_fleas\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    total_students = 152\n\n    # Let's denote b as the number of boys\n    # Then (total_students - b) is the number of girls\n    # When 1/11 of the boys are removed and 5 girls are removed, both are equal.\n    # So, b - (1/11)*b = (total_students - b) - 5\n    # Simplify the equation: 10/11*b = (total_students + 5) - b\n    # 21/11*b = total_students + 5\n    # b = (total_students + 5) * (11/21)\n\n    boys_original = (total_students + 5) * (11/21)\n    return int(boys_original)\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (3 * 7) + 1\n    return ans\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n    \n    total = (french + japanese + italian) - (french_japanese + french_italian + japanese_italian) + all_three\n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3/4\n    liters_water = total_orange_drink * fraction_water\n    return liters_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    num_rows = 22\n\n    last_term = first_term + (num_rows - 1) * difference\n    total_students = (first_term + last_term) * num_rows // 2\n\n    return total_students\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n    \n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int('5' + str(abcd))\n        N = int(str(abcd) + '5')\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    num1 = 21 * 286 + 21\n    denom1 = 286\n    fraction1 = Fraction(num1, denom1)\n    \n    num2 = 6 * 2530 + 647\n    denom2 = 2530\n    fraction2 = Fraction(num2, denom2)\n    \n    num3 = 1 * 2829 + 1370\n    denom3 = 2829\n    fraction3 = Fraction(num3, denom3)\n    \n    # Perform the computation\n    result = fraction1 / fraction2 * fraction3\n    \n    # Convert the result to a mixed number\n    whole_part = result.numerator // result.denominator\n    fractional_part = Fraction(result.numerator % result.denominator, result.denominator)\n    \n    # Return the result in the form \"whole_number fractional_part\"\n    ans = (whole_part, fractional_part)\n    return ans\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    percentage = 30\n    total = 1600\n\n    result = (percentage / 100) * total\n    return result\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85\n    pencil_cost = 0.38\n    ruler_cost = 0.59\n\n    money_left = total_money - (pencil_cost + ruler_cost)\n    \n    return round(money_left, 2)\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n    \n    # If Star types for 5 hours and then Nini types for 20 hours, the job will be finished.\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n    # If Star types for 20 hours and then Nini types for 8 hours, the job will also be finished.\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n\n    # Time for Nini to finish the job by herself is the inverse of her rate\n    nini_time_to_finish = 1 / solutions[nini_rate]\n    \n    return nini_time_to_finish\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    # Since divisor has to be an odd number we enumerate only odd divisors\n    divisors_count = 0\n    candies = 140\n\n    # Find all odd divisors\n    for i in range(1, candies + 1, 2):\n        if candies % i == 0:\n            divisors_count += 1\n\n    return divisors_count\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for number in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if number % 9 == 5 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # Worst case scenario, the warden tries each key on each classroom until the last key remains.\n    # There are 20 keys and 20 classrooms.\n    num_keys = 20\n    num_classrooms = 20\n    # For the first classroom, he may have to try all 20 keys.\n    # For the second classroom, 19 keys, and so forth.\n    # This forms a decreasing arithmetic sequence from 20 to 1\n    # The sum of the first n natural numbers is given by the formula n*(n+1)/2.\n    max_tries = num_keys * (num_keys + 1) // 2\n    # Subtract the last try because when one key remains, he doesn't have to try it.\n    max_tries -= 1\n    return max_tries\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Total surface area of the cuboid is painted pink\n    # Surface area consists of 6 faces\n    \n    # Total number of cuts along each dimension to create 720 small cubes\n    # Let's assume each small cube has length of side 's'\n    \n    # Volume of the cuboid = 6 * 10 * 12\n    # Volume of one small cube = s^3\n    # Total number of small cubes = 720\n    # 6 * 10 * 12 = s^3 * 720\n    # s^3 = (6 * 10 * 12) / 720\n    # s = ((6 * 10 * 12) / 720)^(1/3)\n    \n    # We can find s without making the calculation by inspection\n    # since 720 = 6 * 120 = 6 * 10 * 12, it is clear that each edge is cut in half\n    # thus, s = 1/2 of the smaller corresponding dimension of the cuboid\n    \n    # Each face has a grid of small cubes with exactly one face painted\n    # On one 6*12 face, there will be (6/s - 2) * (12/s - 2) such cubes (excluding the edge cubes)\n    # We multiply by 2 for both opposite faces and then sum it for all three dimensions\n    \n    # Dimensions 6x10 face\n    cubes_6_10 = ((6/2 - 2) * (10/2 - 2)) * 2 \n\n    # Dimensions 10x12 face\n    cubes_10_12 = ((10/2 - 2) * (12/2 - 2)) * 2 \n\n    # Dimensions 6x12 face\n    cubes_6_12 = ((6/2 - 2) * (12/2 - 2)) * 2 \n    \n    total_painted_cubes = cubes_6_10 + cubes_10_12 + cubes_6_12\n\n    return int(total_painted_cubes)\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, we have:\n    # Stack A: 20 stones, Stack B: 16 stones\n    # Jerry can take 4 stones from Stack A to make both stacks equal.\n    # This would give them both 16 stones.\n    # Now, no matter how many stones Tom takes from any stack,\n    # Jerry can take the same amount from the other stack.\n    # Eventually Jerry will be the one to take the last stone.\n\n    # Jerry's strategy is to always take as many stones from one stack\n    # as Tom took from the other stack, to keep the stacks equal after each of Tom's turns.\n\n    # Jerry's move to win:\n    stones_to_take_jerry = 20 - 16\n    from_stack = \"A\"\n\n    return f\"Jerry must take {stones_to_take_jerry} stone(s) from Stack {from_stack}.\"\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Each sheet in a newspaper has two pages in front and two at the back.\n    # When Johnson takes out the third sheet, the pages are 5 and 6, because \n    # Sheet 1 has pages 1 and 2 (front and back), \n    # Sheet 2 has pages 3 and 4 (front and back), and \n    # Sheet 3 has pages 5 and 6 (front and back).\n    \n    # Add the page numbers.\n    page_sum = 5 + 6\n\n    return page_sum\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3 / 7\n    number_of_girls = total_students * fraction_girls\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n    return watermelon_to_apples\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    total_digits = 933\n    digits_per_page = 0\n    page = 1\n    \n    while total_digits > digits_per_page:\n        if page < 10:\n            digits_per_page += 1\n        elif page < 100:\n            digits_per_page += 2\n        else:\n            digits_per_page += 3\n        if total_digits >= digits_per_page:\n            page += 1\n    \n    return page - 1\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    halfway = (120 + 300) / 2\n    return halfway\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    apple_juice_price = 5\n    orange_juice_price = 3\n    peach_juice_price = 10\n    apple_juice_cups = 30\n    orange_juice_cups = 50\n    peach_juice_cups = 20\n    total_cups = apple_juice_cups + orange_juice_cups + peach_juice_cups\n\n    total_cost = (apple_juice_price * apple_juice_cups +\n                  orange_juice_price * orange_juice_cups +\n                  peach_juice_price * peach_juice_cups)\n\n    average_cost = total_cost / total_cups\n\n    return average_cost\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for page_number in range(1, 301):\n        if '3' in str(page_number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Each colour of pens that should remain in Box A \n    min_pens_in_A = 15\n    # Total pens of each colour in both boxes\n    total_pens_each_colour = 10 + 15\n    \n    # Number of pens that can be taken from Box A without going below 15 pens for each colour\n    pens_taken_without_going_below_min = total_pens_each_colour - min_pens_in_A\n    \n    # Pens taken from Box A and placed into Box B\n    pens_taken_from_A = 20\n    \n    # Number of pens to return to Box A for each colour\n    pens_to_return_per_colour = pens_taken_from_A - pens_taken_without_going_below_min\n    \n    # Since we have 4 colours, total pens to return to Box A\n    total_pens_to_return = pens_to_return_per_colour * 4\n    \n    return total_pens_to_return\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 92):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15  # Start time at 9:15 PM in minutes (since 12 AM)\n    end_time = (23 * 60) + 6    # End time at 11:06 PM in minutes (since 12 AM)\n\n    duration = end_time - start_time\n    return duration\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    total_difference = 32\n    total_students = 0\n\n    # Boys on the outer layer create the difference, which is 4 sides minus 4 corners\n    # where n is the number of boys on one side (without the duplicated corners)\n    n = 1\n    while True:\n        boys = 4 * n - 4\n        girls = (4 * (n - 2)) if (n - 2) > 0 else 0\n        difference = boys - girls\n        if difference == total_difference:\n            # Total students is the sum of squares up to n\n            total_students = sum((2 * i + 1) ** 2 for i in range(n))\n            break\n        n += 2 # Increment by 2 for the next square layer\n\n    return total_students\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    ans = 1 / 8\n    return ans\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    # Total number of chocolates\n    total_chocolates = 20\n    # Number of plain chocolates\n    plain_chocolates = 8\n    # Number of milk chocolates\n    milk_chocolates = 12\n    # Number of chocolates with soft-centres\n    soft_centres = 16\n    \n    # Assuming all the milk chocolates have soft-centres\n    plain_with_soft_centres_min = max(soft_centres - milk_chocolates, 0)\n    \n    # Assuming all the plain chocolates have soft-centres\n    plain_with_soft_centres_max = min(plain_chocolates, soft_centres)\n\n    # Since we can't determine the exact number, we state the range\n    return (plain_with_soft_centres_min, plain_with_soft_centres_max)\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    quotient = 29\n    remainder = 11\n\n    # Let the divisor be x\n    # Dividend can then be represented as x * quotient + remainder\n    # According to the problem, the sum of the dividend and divisor is 431\n    # x * quotient + remainder + x = 431\n    # x * (quotient + 1) + remainder = 431\n    # x = (431 - remainder) / (quotient + 1)\n    x = (431 - remainder) // (quotient + 1)\n\n    # Now, find the dividend using the divisor x\n    dividend = x * quotient + remainder\n\n    # Calculate the difference between the dividend and divisor\n    difference = dividend - x\n    \n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage = 12.5\n    num_violin_players = 11\n\n    total_pupils = num_violin_players * 100 / percentage\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    total_sum = 90\n    # Let's call the common number of each coin type as 'n'\n    # Each 1p coin contributes 1*n pennies to the total sum\n    # Each 2p coin contributes 2*n pennies to the total sum\n    # Each 5p coin contributes 5*n pennies to the total sum\n    # Each 10p coin contributes 10*n pennies to the total sum\n    # The total sum of coins is 1*n + 2*n + 5*n + 10*n = 18*n\n    # So we solve 18*n = 90, which gives n = 90 / 18\n    n = total_sum / 18\n\n    # Since we have an equal number of each type of coin, the total number of coins is 4 times n\n    total_coins = 4 * n\n\n    return int(total_coins)\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    apples, pears = symbols('apples pears')\n    total_fruits = 105\n\n    # Equations based on the problem statement\n    equation1 = Eq(apples + pears, total_fruits)\n    equation2 = Eq((1 - 1/3) * apples, (5/6) * (1 - 2/5) * pears)\n\n    # Solving the equations\n    solved_values = solve((equation1, equation2), (apples, pears))\n    num_apples = solved_values[apples]\n    num_pears = solved_values[pears]\n\n    # Calculating the number of apples and pears sold\n    apples_sold = (1/3) * num_apples\n    pears_sold = (2/5) * num_pears\n    \n    # Total number of fruits sold\n    total_sold = apples_sold + pears_sold\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars_fraction = 5 / 12\n    blue_cars_percentage = 20 / 100\n\n    red_cars = total_cars * red_cars_fraction\n    blue_cars = total_cars * blue_cars_percentage\n\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(4 * C, 6 * A)\n    equation2 = Eq(5 * B, 5 * A)\n    equation3 = Eq(C, A + 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A] + solutions[B] + solutions[C]\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n\n    # Consider the group of A, B, C, D as a single entity.\n    # Permutations of the remaining students including the group (9 entities total).\n    permutations_of_group = factorial(9)\n\n    # Permutations within the group A, B, C, D (4! ways).\n    permutations_within_group = factorial(4)\n\n    # Total permutations is the product of the two.\n    total_permutations = permutations_of_group * permutations_within_group\n\n    return total_permutations\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Each of the 6 players plays 5 games,\n    # thus there are a total of 5 * 6 / 2 games = 15 games.\n    # Each game gives out 2 points in total, either as (2, 0) for a win/lose\n    # or as (1, 1) for a tie, thus there are a total of 15 * 2 points = 30 points.\n    \n    # Sum of the points of the five students given\n    points_of_given_students = 7 + 6 + 5 + 4 + 3\n    \n    # Calculate the points of the remaining student\n    points_of_remaining_student = 30 - points_of_given_students\n    \n    return points_of_remaining_student\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Original ratio equation: A/B = 5/3\n    equation1 = Eq(A/B, 5/3)\n\n    # After transferring 10g: (A-10)/(B+10) = 7/5\n    equation2 = Eq((A-10)/(B+10), 7/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Total weight of both bags\n    total_weight = solutions[A] + solutions[B]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n\n    girls_per_boy = 1 / boys_to_girls_ratio\n    number_of_girls = number_of_boys * girls_per_boy\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62    \n    \n    # Total number of lines is total players divided by the average of the first and last line players\n    num_lines = total_players / ((first_line_players + last_line_players) / 2)\n\n    # The difference of the number of players between any two adjacent lines can be found by:\n    # (Last term - First term) / (Number of lines - 1)\n    diff = (last_line_players - first_line_players) / (num_lines - 1)\n\n    return int(diff)\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (2, 5), (2, 7)]\n    number, _ = solve_congruence(*congruences)\n    while number < 100:\n        number += 3 * 5 * 7\n    return number\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    result = 48 * 925 * 38 * 435\n    count_zeros = 0\n    while result % 10 == 0:\n        result /= 10\n        count_zeros += 1\n    return count_zeros\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    # Convert all masses to grams for comparison\n    masses_in_grams = [30, 1000, 300, 2500, 3000, 150, 3]\n    # Find the largest mass\n    largest_mass = max(masses_in_grams)\n    # Return the largest mass\n    return largest_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for probabilities\n    P_bark_given_theft, P_bark, P_theft = symbols('P_bark_given_theft P_bark P_theft')\n    \n    # Given probabilities and ratios\n    P_bark_given_theft_value = 0.9  # Probability that dog barks given there is a thief\n    days = 1000\n    thefts = 2\n    barks_per_week = 3\n    weeks = days / 7\n    \n    # Calculate the total number of barks in 1000 days\n    total_barks = barks_per_week * weeks\n    \n    # Calculate the probability of theft over 1000 days\n    P_theft_value = thefts / days\n    \n    # Calculate the probability of barking (over 1000 days it barked a total of total_barks times)\n    P_bark_value = total_barks / days\n    \n    # We want to find out P(theft | bark) which is given by Bayes' theorem as:\n    # P(theft | bark) = P(bark | theft) * P(theft) / P(bark)\n    equation = Eq(P_bark_given_theft, P_bark_given_theft_value * P_theft / P_bark)\n    \n    # We solve for P(theft | bark)\n    solution = solve((equation, Eq(P_theft, P_theft_value), Eq(P_bark, P_bark_value)), P_theft)\n    \n    return float(solution[0])\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orange, apple, grape, pineapple = symbols('orange apple grape pineapple')\n    \n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(orange + apple + grape + pineapple, 25)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (orange, apple, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    girls_ratio = 6 / 11\n    boys_ratio = 1 - girls_ratio\n\n    boys = total_children * boys_ratio\n\n    return int(boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # The smallest difference will occur when the largest and smallest numbers are as close as possible.\n    # To get the largest number, we arrange the digits from 9 to 1: 987654321\n    # To get the smallest number, we arrange the digits from 1 to 9: 123456789\n    largest_number = int('987654321')\n    smallest_number = int('123456789')\n    \n    # Find the difference\n    difference = largest_number - smallest_number\n    \n    return difference\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original number of boys and girls\n    equation1 = Eq(boys, girls - 65)\n\n    # Number of boys and girls left after some left for recess\n    equation2 = Eq((2/5)*boys, (3/7)*girls)\n\n    # Solve the system of equation\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate number of students left in the hall after recess\n    boys_left = solutions[boys] - (2/5) * solutions[boys]\n    girls_left = solutions[girls] - (3/7) * solutions[girls]\n    total_students_left = boys_left + girls_left\n\n    return total_students_left\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    # Let's denote the total number of bricks as x.\n    # According to the problem, we have the following equations:\n    # First trip: (1/2)x - 26\n    # Remaining after first trip: x - ((1/2)x - 26) = (1/2)x + 26\n    # Second trip: (1/2)((1/2)x + 26) + 11\n    # Remaining after second trip: (1/2)x + 26 - ((1/2)((1/2)x + 26) + 11)\n    # Third trip: 68\n    # Finally, the number of unmoved bricks: 25\n\n    # We need to find the value of x such that after all moves, 25 bricks remain.\n    # Let's represent the problem as a single equation and solve it:\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Equation for remaining bricks after all moves\n    equation = Eq(x - (((1/2)*x - 26) + ((1/2)*((1/2)*x + 26) + 11) + 68), 25)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_pupils = 1690\n    more_boys = 90\n    \n    # Let the number of girls be x\n    # Then the number of boys will be x + 90\n    girls, boys = symbols('girls boys')\n    \n    # The total number of pupils is the sum of boys and girls\n    equation1 = Eq(girls + boys, total_pupils)\n    \n    # The number of girls who can swim and who cannot swim\n    girls_swim = 31/80 * girls  # ratio 31:49 => 31/(31+49) of the girls can swim\n    girls_not_swim = 49/80 * girls\n    \n    # The number of boys who can swim and who cannot swim\n    boys_not_swim = boys / 2 + 60  # if boys_not_swim is half the boys plus 60\n    boys_swim = boys_not_swim - 120  # boys_swim is 120 less than boys_not_swim\n    \n    # Total number of pupils who cannot swim is the sum of girls and boys who cannot swim\n    pupils_not_swim = girls_not_swim + boys_not_swim\n    \n    # Now, we need to solve these equations to find the values of girls and boys\n    solutions = solve((equation1), (girls, boys))\n    \n    # Calculate how many pupils can not swim\n    num_pupils_not_swim = pupils_not_swim.subs(girls, solutions[girls])\n    \n    return int(num_pupils_not_swim)\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    import math\n    num_kids = 3\n    # The number of different arrangements is the same as the number of permutations of 3 kids.\n    ans = math.factorial(num_kids)\n    return ans\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # Starting from 3, as the square array needs to have at least 2 rows/columns\n    # and we need to exclude 1x1 as it's not a \"large square\"\n    for n in range(3, 1000):\n        # Check if n*n-2 is a perfect square because Mike's position being second means the total\n        # needs to be a perfect square minus the 2 positions (front and side)\n        if ((n * n - 2)**0.5).is_integer():\n            return n*n\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    sum_ages_now = 22\n    sum_ages_future = 40\n\n    # The sum of their ages increases by 2 every year as each person gets 1 year older.\n    years_passed = (sum_ages_future - sum_ages_now) // 2\n\n    return years_passed\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 21):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    return 125 * 34 * 25 * 4 * 8\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # Create a function to memorize the previous results.\n    def count_ways(steps):\n        if steps in memo:\n            return memo[steps]\n        if steps == 0:\n            return 1\n        if steps < 0:\n            return 0\n\n        # Calculate number of ways to reach the current step.\n        memo[steps] = count_ways(steps - 2) + count_ways(steps - 3)\n        return memo[steps]\n\n    memo = {}\n    ans = count_ways(10)\n    return ans\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    num_str = '1998'\n    accumulated_str = ''\n    n = 0\n\n    while True:\n        accumulated_str += num_str\n        n += len(num_str)\n        if int(accumulated_str) % 33 == 0:\n            break\n\n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    a = group_number\n    b = group_number ** 2\n    c = group_number ** 3\n    group_sum = a + b + c\n    return group_sum\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    distance_each_run = 1/4\n    total_distance = 3.75\n\n    num_runs = total_distance / distance_each_run\n\n    return int(num_runs)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    return int(\"3,030,030\".replace(\",\", \"\"))\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # Let the original number be ABCD (where A, B, C, D are digits)\n    # The new number after changing the digit in the ones place to the\n    # first digit will be DBCA\n    # New number is greater than original number by 5877, so DBCA = ABCD + 5877\n    # This equation can be expanded to:\n    # 1000D + 100B + 10C + A = 1000A + 100B + 10C + D + 5877\n    # Simplifying, we get:\n    # 999D - 999A = 5877\n    # D - A = 5877 / 999\n    # D - A = 6.88 or approximately 7 because A, D are integers\n    # The only single-digit values of A and D that satisfy D - A = 6 are:\n    # A = 1 and D = 8 or A = 0 and D = 7 (but A cannot be 0 for a 4-digit number)\n    # Thus, A = 1 and D = 8\n    # ABCD + 5877 = DBCA\n    # 1BC8 + 5877 = 8BC1\n    # Now we just need to find the value for B and C that make this true.\n    # B and C can be any digit from 0 to 9 that satisfy the equation, considering the carryover\n    for B in range(10):\n        for C in range(10):\n            original = 1000 * 1 + 100 * B + 10 * C + 8\n            new = 1000 * 8 + 100 * B + 10 * C + 1\n            if new - original == 5877:\n                return original\n    \n    return None\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3/2\n    girls = (boys / 3) * 2\n    return girls\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    # We're looking for a number `n` that fits the following conditions:\n    # n % 5 == 3\n    # n % 6 == 4\n    # n % 9 == 1\n\n    # Start at the smallest 3-digit number 100, go until we find the number that fits all conditions\n    for n in range(100, 1000):\n        if n % 5 == 3 and n % 6 == 4 and n % 9 == 1:\n            return n\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Andrew, Kim, and Shaun's stamps\n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    # Sum of stamps is 256\n    eq1 = Eq(andrew + kim + shaun, 256)\n    # Shaun has twice as many stamps as Kim\n    eq2 = Eq(shaun, 2 * kim)\n    # Andrew has 24 less stamps than Shaun\n    eq3 = Eq(andrew, shaun - 24)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (andrew, kim, shaun))\n    \n    # Return the number of stamps Andrew has\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Given proportion 10:x = 14:21, solve for x\n    x = symbols('x')\n    equation = Eq((10 / x), (14 / 21))\n\n    # Using sympy to solve the proportion problem\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for i in range(10, 100, 10):  # Iterate over two-digit numbers ending with 0\n        if i % 6 == 0 and i % 9 == 0:  # Check if the number is a multiple of both 6 and 9\n            return i\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_more = 7 * 10\n\n    correct_answer = original_number + tens_more\n\n    return correct_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    n = 27  # The sum we are trying to find the maximum number of addends for\n    ans = 0  # We'll keep track of the number of positive integers in the equation\n    # Since we need distinct positive integers, we can start with 1 and\n    # keep adding the next integer until we exceed or equal n\n    i = 1\n    while n > 0:\n        n -= i\n        i += 1\n        ans += 1\n        # If the sum becomes negative, we have added too much, so decrease count\n        if n < 0:\n            ans -= 1\n    return ans\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # total length in cm (3m)\n    piece1_cm = 147  # length of first piece in cm\n    piece2_cm = 32.5  # length of second piece in cm\n    piece3_cm = 67  # length of third piece in cm\n\n    # Length of the fourth piece is the total length minus the sum of the other three pieces\n    piece4_cm = total_length_cm - (piece1_cm + piece2_cm + piece3_cm)\n\n    return piece4_cm\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    from itertools import product\n\n    probabilities = [0.5, 0.4, 0.2]\n    \n    # Generate all possible outcomes of passing (1) and failing (0)\n    outcomes = list(product([0, 1], repeat=len(probabilities)))\n    \n    # Calculate the probability for each outcome and count the number of passings\n    outcome_probabilities = [(sum(outcome), \n                              probabilities[0] ** outcome[0] * (1 - probabilities[0]) ** (1 - outcome[0]) *\n                              probabilities[1] ** outcome[1] * (1 - probabilities[1]) ** (1 - outcome[1]) *\n                              probabilities[2] ** outcome[2] * (1 - probabilities[2]) ** (1 - outcome[2])\n                              ) for outcome in outcomes]\n    \n    # Find the most likely number of people passing\n    most_likely_pass = max(outcome_probabilities, key=lambda x: x[1])[0]\n    \n    return most_likely_pass\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    num_papers = 18\n    interval = 3\n    num_leaves = num_papers // interval\n\n    return num_leaves\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    term1 = 101 + 234 + 567\n    term2 = 234 + 567 + 89\n    term3 = 101 + 234 + 567 + 89\n    term4 = 234 + 567\n\n    ans = (term1 * term2) - (term3 * term4)\n\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    total = 1  # Starts with 1\n    for i in range(2, 11):\n        total += (1/i) * i  # The term 1/i appears i times, so this simplifies to 1 each time\n    return total\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, caps = symbols('watches caps')\n    # Initial ratio of watches to caps\n    equation1 = Eq(watches/caps, 8/11)\n    # Ratio of watches to caps after selling 88 caps\n    equation2 = Eq(watches/(caps - 88), 12/11)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    time_for_five_houses = 30  # time from 1st to 6th house is 30 minutes\n    # The distance is between 5 intervals (because from the 1st to 6th house involves 5 gaps)\n    time_per_interval = time_for_five_houses / 5  # time for each interval between houses\n\n    # For 10 houses there are 9 intervals, since we assume negligible width for each house\n    time_for_nine_intervals = time_per_interval * 9  # time to cover 9 intervals\n    return time_for_nine_intervals\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    ans = 31 * 56\n    return ans\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05\n    total_length_cm = total_length_m * 100  # Convert meters to centimeters\n\n    # Let's denote the length of the shorter piece as x.\n    # Then the length of the longer piece is 2x.\n    # Together they make up the total length of the ribbon:\n    # x + 2x = total_length_cm\n    # 3x = total_length_cm\n    x = total_length_cm / 3\n\n    # The length of the longer piece is 2x\n    longer_piece_length = 2 * x\n\n    return longer_piece_length\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # The strategy for Jack to win is to leave a multiple of 12 coins\n    # after his first move, forcing Ken into a losing position.\n    total_coins = 2015\n    for first_pick in range(1, 12):\n        if (total_coins - first_pick) % 12 == 0:\n            return first_pick\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # '●○●○○' represents one full pattern consisting of 3 black and 2 white balls\n    pattern_white = 2\n    total_white = 92\n\n    # Find the number of times the pattern repeats\n    pattern_repeats = total_white // pattern_white\n\n    # Each pattern has 5 balls in total (3 black + 2 white)\n    total_balls_per_pattern = 5\n\n    # If total white balls are evenly divided by pattern white balls, then we have complete patterns\n    if total_white % pattern_white == 0:\n        total_balls = pattern_repeats * total_balls_per_pattern\n    else:\n        # If not, we have an incomplete pattern at the end which would have 1 black and 1 white ball\n        total_balls = pattern_repeats * total_balls_per_pattern + 1\n\n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    def has_two_fours(hours, minutes):\n        time_str = f\"{hours:02d}{minutes:02d}\"\n        return time_str.count('4') >= 2\n    \n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if has_two_fours(hour, minute):\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    # Iterate through all 4-digit numbers\n    for d in range(1, 10):  # Last digit cannot be zero and must be less than 10\n        a = d // 4  # First digit is a quarter of the last digit\n        if not a:  # Skip if the first digit is 0\n            continue\n        if (d % 4) != 0:  # Skip if the last digit is not a multiple of 4\n            continue\n        b = a - 1  # Second digit is one less than the first digit\n        c = 10 - d  # Third digit is 10 minus the last digit (since multiplying by 4)\n        abc = int(f'{a}{b}{0}{d}')  # The three-digit number with zeroes for missing digits\n        dcba = int(f'{d}{c}{b}{a}')  # The reversed three-digit number\n        if abc * 4 == dcba:\n            return abc\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def count_odd_digits(n):\n        return sum(1 for digit in str(n) if int(digit) % 2 != 0)\n    \n    ans = count_odd_digits(2015)\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Since the ages are consecutive, we can describe them using an arithmetic sequence\n    # Let the age of the youngest be x, then the ages are: x, x+1, x+2, ..., x+6\n    # The sum of the ages of the youngest three is then x + (x+1) + (x+2) = 42\n    # Solve this equation for x\n    x = (42 - 3) // 3  # Subtract 3 because we added 1+2 to x when summing the ages and divide by 3 for the 3 youngest\n    \n    # The oldest dwarf's age will be x+6 (since there are 7 dwarfs with consecutive ages)\n    oldest_age = x + 6\n\n    return oldest_age\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin (0,0), we know that b=0 (y-intercept is 0).\n    # We also know the line passes through (4,8).\n    # Using the two points, we can find the slope (m) of the line.\n    x1, y1 = 0, 0\n    x2, y2 = 4, 8\n    m = (y2 - y1) / (x2 - x1)  # slope formula\n\n    # The linear equation is y = mx + b, and since b = 0, it simplifies to y = mx\n    # Substitute the slope (m) we found into the equation.\n    b = 0\n    equation = f\"y = {m}x + {b}\"\n\n    return equation\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    import math\n    ans = math.gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if pears % 6 == 2 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_second_stop = 22\n    remaining_after_first_stop = remaining_after_second_stop * (3/2)\n    initial_passengers = remaining_after_first_stop * (5/3)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10  # pencil length in cm\n    sharpened_length_mm = 4  # shortened length in mm\n\n    # Convert mm to cm and subtract it from the original length\n    new_length_cm = original_length_cm - (sharpened_length_mm / 10.0)\n\n    return new_length_cm\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Calculate the time spent on each section of the race\n    time_1 = 420 / 7  # Time for the first section at 7 m/s\n    time_2 = 620 / 5  # Time for the middle section at 5 m/s\n    time_3 = (1200 - 420 - 620) / 8  # Time for the last section at 8 m/s\n\n    # The total time spent is the sum of the time spent on each section\n    total_time = time_1 + time_2 + time_3\n\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total = 89 * 4\n    current_tests = 4\n    desired_average = 95\n\n    additional_tests = 0\n    while True:\n        additional_tests += 1\n        new_average = (current_total + 100 * additional_tests) / (current_tests + additional_tests)\n        if new_average >= desired_average:\n            break\n\n    return additional_tests\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes and y be the number of $2 notes\n    x, y = symbols('x y')\n    \n    # Total number of notes is x + y = 72\n    # Total worth of the $10 and $2 notes: 10x + 2y\n    # Amount spent for the gift: 90% of the $10 notes + 75% of the $2 notes\n    # Remaining $10 notes: x - 0.9x, remaining $2 notes: y - 0.75y\n    # After spending, twice as many $10 notes as $2 notes: x - 0.9x = 2 * (y - 0.75y)\n\n    equation1 = Eq(x + y, 72)  # Total notes equation\n    equation2 = Eq((1 - 0.9) * x, 2 * (1 - 0.75) * y)  # Remaining notes relationship\n\n    solutions = solve((equation1, equation2), (x, y))\n    x_value = solutions[x]\n    y_value = solutions[y]\n    \n    # Gift cost calculation: (0.9 * $10 notes + 0.75 * $2 notes)\n    gift_cost = 0.9 * 10 * x_value + 0.75 * 2 * y_value\n    \n    return gift_cost\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # There are three colors, so to guarantee we have at least 2 of one color,\n    # we need to consider the worst-case scenario where we pick each color once first.\n    # If we add one more marker to the three we have, we will have picked at least\n    # two of the same color due to the pigeonhole principle.\n    \n    # Picking one of each color\n    colors_picked = 3\n    \n    # Adding one more to guarantee a pair of the same color\n    markers_needed = colors_picked + 1\n    \n    return markers_needed\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    for num_5dollar_notes in range(58 + 1):\n        num_2dollar_notes = 58 - num_5dollar_notes\n        total_value = num_2dollar_notes * 2 + num_5dollar_notes * 5\n        if total_value == 164:\n            return num_5dollar_notes\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of stickers John had\n    # Let s be the initial amount of stickers Sam had\n    # Let p be the initial amount of stickers Peter had\n    # According to the problem, s/p = 7/5\n    # We also know that after giving away 20%, Sam had 20 more than John\n    # After giving 20%, they both gave x * 0.2 to John,\n    # And John's stickers increased by 80%, which means John initially had x and got 0.8*x more\n\n    s, p, x = symbols('s p x')\n    equation1 = Eq(s/p, 7/5)\n    equation2 = Eq(s - 0.2 * s, x + 0.8 * x + 20)\n    equation3 = Eq(p - 0.2 * p, x + 0.8 * x)\n\n    # p = (5/7) * s from equation1\n    # Replace p in equation3 with (5/7) * s\n    # This gives us two equations (equation2 and modified equation3) with two unknowns (s and x)\n\n    modified_equation3 = equation3.subs(p, (5/7) * s)\n\n    solutions = solve((equation2, modified_equation3), (s, x))\n\n    # Peter's initial amount of stickers\n    peter_initial_stickers = (5/7) * solutions[s]\n\n    return peter_initial_stickers\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    a7 = 105  # 7th term\n    common_difference = 120 - 105  # The difference between consecutive terms\n    \n    # nth term of an arithmetic sequence: an = a1 + (n-1)*d\n    # Here we need to find a1 (the first term)\n    a1 = a7 - (7-1)*common_difference  # Calculate the first term\n    \n    # Now we can calculate the 100th term\n    a100 = a1 + (100-1)*common_difference\n    \n    return a100\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Since there are 10 boxes and each box has at least 2 marbles,\n    # let's start with the smallest even numbers that satisfy this.\n    # We have to find 8 different even numbers and one duplicate.\n    \n    marbles = [2 * i for i in range(1, 9)]  # The smallest 8 different even numbers\n    marbles.append(2)  # The smallest number to have a duplicate\n    \n    # The smallest number is the sum of all the elements in the list\n    ans = sum(marbles)  # Sum of the smallest 8 even numbers and one extra 2\n    return ans\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x, y, and z represent the rate of hoses A, B, and C respectively\n    x, y, z = symbols('x y z')\n\n    # Since A and B together take 9 hours, their combined rate is 1/9 of the pool per hour\n    equation1 = Eq(x + y, 1/9)\n\n    # Since A and C together take 12 hours, their combined rate is 1/12 of the pool per hour\n    equation2 = Eq(x + z, 1/12)\n\n    # Since B and C together take 18 hours, their combined rate is 1/18 of the pool per hour\n    equation3 = Eq(y + z, 1/18)\n\n    # Solve the system of equations to find x, y, and z\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # The rate at which all three hoses fill the pool is the sum of their individual rates\n    total_rate = solutions[x] + solutions[y] + solutions[z]\n\n    # The time it takes to fill the pool with all three is the inverse of the total rate\n    time_to_fill = 1 / total_rate\n\n    return time_to_fill.evalf()\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    return sum(range(1, 10)) + sum(range(4, 9))\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n\n    min_pigeons_in_max_cage = (total_pigeons + total_cages - 1) // total_cages\n\n    return min_pigeons_in_max_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    num_parterres = 1007\n    num_sprinklers = num_parterres - 1\n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    # Convert mixed number to improper fraction\n    papaya_mass = 2 + 1/4\n    # Calculate the mass of jackfruit\n    jackfruit_mass = 3 * papaya_mass\n    # Sum of papaya and jackfruit masses\n    total_mass = papaya_mass + jackfruit_mass\n    # James' calculation error:\n    # 2 1/4 * 4 is wrong because he should have multiplied 2 1/4 * 3\n\n    # The correct calculation\n    correct_total_mass = total_mass\n\n    # Result: James' calculation is incorrect.\n    return correct_total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    return (387 + 729) / 2\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total length of the road as 'total_length'.\n    total_length = symbols('total_length')\n    \n    # From the problem, we are given:\n    # Day 1: 8 thousand feet\n    # Day 2: 4 thousand feet more than (1/6) of the total road\n    # In the first two days, they paved (5/12) of the total length.\n    \n    # Now, let's convert everything to equations.\n    # Equation for Day 2:\n    equation_day2 = Eq(4 + (1/6) * total_length, (5/12) * total_length - 8)\n    \n    # Solve for total_length\n    solution = solve(equation_day2, total_length)\n\n    return int(solution[0])\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # Let's denote the original number of caps as x.\n    # According to the problem, after giving away 440 caps, 5/9 of the collection is left.\n    # So, the equation is (x - 440) = 5/9 * x\n    # We rearrange the equation to solve for x:\n    # x - 5/9 * x = 440\n    # (4/9) * x = 440\n    # x = 440 * (9/4)\n    original_caps = 440 * (9 / 4)\n    \n    return original_caps\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    total_money = symbols('total_money')\n    price_cupcake = symbols('price_cupcake')\n    price_muffin = symbols('price_muffin')\n\n    # Given\n    cupcakes_bought_first = 36\n    muffins_bought = 32\n    total_cupcake_cost = 187.50\n\n    # Set up equations as per the problem statement\n    equation1 = Eq(price_cupcake, 3 * price_muffin) # 1 cupcake = 3 muffins\n    equation2 = Eq(total_money * 5/9, total_cupcake_cost + price_muffin * muffins_bought) # 5/9 of money spent on initial purchase\n    equation3 = Eq(total_cupcake_cost, (cupcakes_bought_first + total_money * 1/6 / price_cupcake) * price_cupcake) # Total spent on cupcakes\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (total_money, price_muffin, price_cupcake))\n\n    money_spent_muffins = solutions[price_muffin] * muffins_bought\n\n    return money_spent_muffins\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    num = 35\n    while True:\n        if sum(int(digit) for digit in str(num)) == 35:\n            return num\n        num += 35  # Increment by 35 to find the next multiple of 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for unknowns\n    marry, alexis, charlotte_initial, charlotte_final = symbols('marry alexis charlotte_initial charlotte_final')\n\n    # Marry had 7/5 as many stickers as Alexis\n    eq1 = Eq(marry, (7/5) * alexis)\n    \n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    eq2 = Eq(charlotte_final, charlotte_initial + 0.2 * marry + 0.2 * alexis)\n    \n    # Charlotte's stickers increased by 80%\n    eq3 = Eq(charlotte_final, charlotte_initial * 1.8)\n    \n    # Mary had 20 stickers more than Charlotte in the end\n    eq4 = Eq(marry, charlotte_final + 20)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (marry, alexis, charlotte_initial, charlotte_final))\n    \n    return solutions[alexis]\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_nuts = 112\n    sunny_nuts = 20\n    rainy_nuts = 12\n\n    for rainy_days in range(total_days + 1):\n        sunny_days = total_days - rainy_days\n        if rainy_days * rainy_nuts + sunny_days * sunny_nuts == total_nuts:\n            return rainy_days\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each round eliminates half of the players,\n    # until one player (the winner) remains.\n    # With 4 people, 2 rounds are required to determine the winner:\n    # - First round: 4 players, 2 matches -> 2 winners\n    # - Second round: 2 players, 1 match -> 1 winner\n    return 2\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    both_correct = 7\n    first_correct = 10\n    second_correct = 15\n\n    only_one_correct = (first_correct - both_correct) + (second_correct - both_correct)\n    return only_one_correct\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    length = 144\n    width = 204\n    total_wheat = 116\n\n    # Subtract the 4 corner wheat from the total\n    wheat_on_sides = total_wheat - 4\n\n    # Divide by 2 because each side will have an equal number of wheat\n    wheat_per_side = wheat_on_sides / 2\n\n    # The number of intervals along each side is one less than the number of wheat\n    intervals_length = length / (wheat_per_side/2 - 1)\n    intervals_width = width / (wheat_per_side/2 - 1)\n\n    # The distances should be the same; we can return either\n    return intervals_length\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"04-04-2023\", \"%d-%m-%Y\")\n    end_date = datetime.strptime(\"18-05-2023\", \"%d-%m-%Y\")\n    difference = end_date - start_date\n\n    return difference.days + 1  # including both start and end date\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / (alice - 8), 3)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # Speed of the train in meters per second\n    time = 5    # Time in seconds\n\n    length = speed * time  # Distance formula: Distance = Speed x Time\n\n    return length\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    fib_seq = [1, 1, 2, 3, 5, 8, 13, 21]\n    next_number = fib_seq[-1] + fib_seq[-2]\n    return next_number\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Calculating the minimum cost for exactly 17 bottles\n    # Prices in pounds\n    price1 = 0.15  # Price for 1 bottle\n    price2 = 0.28  # Price for 2 bottles\n    price5 = 0.60  # Price for 5 bottles\n\n    # Given that there are only options to buy 1, 2 or 5 bottles at once,\n    # the strategy to minimize the cost is to buy as many packs of 5, then 2, then 1.\n    \n    # Maximum number of 5-bottle packs that can be bought\n    num_packs_5 = 17 // 5\n    remaining_bottles_after_5 = 17 % 5\n\n    # Total cost for 5-bottle packs\n    total_cost = num_packs_5 * price5\n\n    # If remaining_bottles_after_5 is 3 or 4, it's cheaper to buy two 2-bottle packs\n    # rather than buying one 2-bottle pack and the rest as single bottles.\n    if remaining_bottles_after_5 > 2:\n        num_packs_2 = 2\n    else:\n        num_packs_2 = remaining_bottles_after_5 // 2\n    \n    remaining_bottles_after_2 = remaining_bottles_after_5 % 2\n\n    # Update total cost for 2-bottle packs\n    total_cost += num_packs_2 * price2\n\n    # Remaining bottles can only be bought individually\n    total_cost += remaining_bottles_after_2 * price1\n\n    return total_cost\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "from itertools import permutations\n\ndef solution():\n    expressions = {\n        '285+(15/5)-2': 285 + (15 / 5) - 2,\n        '(285+15)/5-2': (285 + 15) / 5 - 2,\n        '(285+15/(5-2))': 285 + (15 / (5 - 2)),\n        '285+15/(5-2)': 285 + 15 / (5 - 2),\n        '285/((15/5)-2)': 285 / ((15 / 5) - 2),\n        '(285+15)/(5-2)': (285 + 15) / (5 - 2)\n    }\n    \n    # Compute unique results\n    results = set(expressions.values())\n    \n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # Create equations based on the problem description\n    equation1 = Eq(first_hour + second_hour, 40)   # Total mushrooms gathered\n    equation2 = Eq(first_hour + 26, second_hour)   # Condition for equal amounts if 26 more were gathered in the first hour\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    # second_hour is the number of mushrooms gathered in the second hour\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towel_price = 10\n    brush_price = 3\n    total_spent = 59\n    max_brush_spent = 10\n    \n    # Find the maximum number of brushes Bud could have bought without exceeding £10\n    max_brushes = max_brush_spent // brush_price\n\n    for num_brushes in range(max_brushes + 1):\n        if (total_spent - num_brushes * brush_price) % towel_price == 0:\n            return num_brushes\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    # Total number of teddy bears made\n    total_bears = 35\n    # Total number of days\n    days = 5\n    # Difference in the number of teddy bears made each day\n    difference = 2\n\n    # Sum of an arithmetic sequence: n/2 * (2a + (n-1)d)\n    # Where n is the number of terms, a is the first term, and d is the common difference\n    # Based on the formula for the sum of an arithmetic sequence, we can set up the equation\n    # 35 = 5/2 * (2a + (5-1)*2)\n    # Solving for a (the number of teddy bears on the first day):\n    a = (total_bears - (days - 1) * difference) / days\n\n    # Calculate the number of teddy bears made on the fifth day using the formula for the nth term in an arithmetic sequence:\n    # nth term = a + (n-1)d\n    fifth_day_bears = a + (days - 1) * difference\n\n    return int(fifth_day_bears)\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    result = 71\n    multiplied_by = 7\n    added = 8\n\n    original_number = (result - added) / multiplied_by\n\n    return original_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rick, morty = symbols('rick morty')\n    \n    # If Rick gives Morty $70, Rick's score would be morty + 70, and that would still be 20 more than Morty's new score.\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    \n    # Rick's current score is 9 times higher than Morty's current score\n    equation2 = Eq(rick, 9 * morty)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rick, morty))\n    \n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    digits = [0, 1, 8]\n    count = 0\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != 0 and i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    max_non_blue = 9 + 7  # sum of pink and grey marbles\n    to_ensure_blue = max_non_blue + 1  # draw one more to ensure getting at least one blue\n\n    return to_ensure_blue\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    \n    total_miles = miles_per_day * days_in_two_weeks\n    \n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    tax_rate = 7.5 / 100\n    tax_paid = 30\n\n    computer_price = tax_paid / tax_rate\n\n    return computer_price\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    count = 0\n    for perm in permutations(range(1, 9)):\n        if all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm)-1)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    fraction1 = 6 / 7\n    fraction2 = 3 / 10\n    percentage = (fraction2 / fraction1) * 100\n    return percentage\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_initial, dragonflies_initial = symbols('frogs_initial dragonflies_initial')\n\n    equation1 = Eq(frogs_initial - dragonflies_initial, 9)\n    equation2 = Eq(frogs_initial - (11 - frogs_initial), dragonflies_initial - (10 - dragonflies_initial))\n\n    solutions = solve((equation1, equation2), (frogs_initial, dragonflies_initial))\n\n    return solutions[frogs_initial]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    ans = 300 - 9 - 19 - 29 - 39 - 49 - 59\n    return ans\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    results = set()\n\n    # No brackets\n    results.add(285 + 15 / 5 - 2)\n    \n    # One pair of brackets\n    results.add((285 + 15) / 5 - 2)\n    results.add(285 + (15 / 5) - 2)\n    results.add(285 + 15 / (5 - 2))\n    results.add(285 + 15 / 5 - (2))\n\n    # Two pairs of brackets\n    results.add((285 + 15) / (5 - 2))\n    results.add((285 + (15 / 5)) - 2)\n    results.add(285 + ((15 / 5) - 2))\n    results.add(((285 + 15) / 5) - 2)\n    \n    return len(results)\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n    s = (amy_apples - john_apples) // 2\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(24):\n        if (24 - i) / 4 == 4:\n            return i\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum((-1) ** (i % 2) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation based on the information given in the problem\n    equation1 = Eq(girls - boys, 30)\n    equation2 = Eq((3/5) * boys, (5/8) * (girls - (5/8) * girls))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Returning the number of boys\n    return solutions[boys]\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack = 42\n    tom = 38\n    james = 3 * (jack + tom)\n    return james\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the amount of 15% sugar water needed\n    x = symbols('x')\n    \n    # Equation based on the concentration\n    # 0.45 * 2 + 0.15 * x = 0.25 * (2 + x)\n    equation = Eq(0.45 * 2 + 0.15 * x, 0.25 * (2 + x))\n    \n    # Solve for x\n    amount = solve(equation, x)\n    \n    # We only need the first solution\n    return amount[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n    \n    total_coins = Eq(johnson + vicky, 48)\n    vicky_after = Eq(vicky + 8, johnson - 2)\n    \n    solutions = solve((total_coins, vicky_after), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the individual rates of workers A, B, and C\n    A, B, C = symbols('A B C')\n    \n    # Equations based on the given information\n    equation1 = Eq(1/A + 1/B, 1/3)  # Worker A and B complete the job in 3 hours\n    equation2 = Eq(1/B + 1/C, 1/4)  # Worker B and C complete the job in 4 hours\n    equation3 = Eq(1/A + 1/C, 1/8)  # Worker A and C complete the job in 8 hours\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Find the individual rates\n    A_rate = solutions[A]\n    B_rate = solutions[B]\n    C_rate = solutions[C]\n    \n    # Calculate the combined rate for A, B, and C\n    combined_rate = A_rate + B_rate + C_rate\n    \n    # Calculate the time it takes for all three workers together to complete the job\n    time_for_all_three = 1 / combined_rate\n    \n    return time_for_all_three.evalf()\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    # If each kid eats 18 candies, we are short by 12 candies.\n    equation1 = Eq(kids * 18, candies - 12)\n    # If each kid eats 15 candies, there would be enough for 2 more kids.\n    equation2 = Eq(kids * 15, candies + 15 * 2)\n\n    # Solve for the number of candies.\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    girls = (boys / 3) * 2\n    return girls\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    # Since we are only interested in the last 5 digits,\n    # we can work with mod 100000 to stay within the 5 digit range.\n    modulus = 10**5\n    s, current_number = 0, 0\n    for i in range(2017):\n        # Add a two on the right of the current_number\n        current_number = (current_number * 10 + 2) % modulus\n        # Add current_number to summation\n        s = (s + current_number) % modulus\n    \n    return s\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result = (77 - 6) / 7\n    return result\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    return solutions[david] + solutions[eugene]\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, tim = symbols('sam tim')\n    \n    initial_condition = Eq(sam + tim, 1170)\n    after_eating_and_buying = Eq(sam - sam/4 + tim + tim/5, sam + tim)\n    difference_condition = Eq(tim - (sam - sam/4), 663)\n\n    solutions = solve((initial_condition, after_eating_and_buying, difference_condition), (sam, tim))\n\n    cookies_eaten_by_sam = solutions[sam]/4\n    \n    return cookies_eaten_by_sam\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    fruit_per_day = 24 / 6\n    total_fruit_8_days = fruit_per_day * 8\n    return total_fruit_8_days\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for num in range(200, 301):\n        if all(num % i == 1 for i in [2, 3, 4, 6]) and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Let x be the number of stamps Sally gave to Ting.\n    # After giving away x stamps, Sally has (40 - x) stamps.\n    # And Ting has (32 + x) stamps.\n    # The ratio of Sally's stamps to Ting's stamps is now 1:2.\n\n    # Setting up the equation based on the ratio 1:2,\n    # Sally's stamps : Ting's stamps -> (40 - x) : (32 + x) = 1 : 2\n    # Solving for x with this proportion:\n    # (40 - x) * 2 = (32 + x) * 1\n\n    # This simplifies to:\n    # 80 - 2x = 32 + x\n    # 3x = 80 - 32\n    # x = (80 - 32) / 3\n    x = (80 - 32) // 3  # Using integer division since number of stamps must be whole\n\n    # Ting's stamps after receiving x stamps:\n    ting_stamps = 32 + x\n    \n    return ting_stamps\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    jerry_time = 18  # Jerry can complete the job in 18 hours\n    together_time = 6  # Tom and Jerry together can complete the job in 6 hours\n\n    # 1/job_time = work_rate\n    # Jerry's work rate\n    jerry_rate = 1 / jerry_time\n    # Tom and Jerry's combined work rate\n    together_rate = 1 / together_time\n    # Tom's work rate\n    tom_rate = together_rate - jerry_rate\n\n    # Tom's time to complete the job\n    tom_time = 1 / tom_rate\n\n    return tom_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n\n    total_candy = sissy_candy + lily_candy\n\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    budget = 20\n    price_per_packet = 4\n    sweets_per_packet = 8\n    free_sweets_condition = 2\n\n    # Buying as many packets as possible with the budget\n    packets_purchased = budget // price_per_packet\n\n    # Calculating the number of free sweets\n    free_sweets = (packets_purchased // free_sweets_condition) * sweets_per_packet\n\n    # Total sweets (packets * sweets per packet + free sweets)\n    total_sweets = packets_purchased * sweets_per_packet + free_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    pieces_left = 88\n    min_pieces_for_most = 1\n\n    # Since each of 8 children must get different and at least 1 piece,\n    # we can start by giving each of them one piece to ensure this.\n    # Then we can continue giving out the pieces one by one to the\n    # next child with the least amount of pieces until only the\n    # child with the most pieces is left.\n    \n    for i in range(8):\n        pieces_left -= (i + 1)\n    \n    # The child with the most pieces will have 8 + remaining pieces.\n    min_pieces_for_most = 8 + pieces_left\n\n    return min_pieces_for_most\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1/4)\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for boys and girls\n    boys = symbols('boys')\n    girls = symbols('girls')\n    \n    # Equation representing the initial state: boys = girls + 40% of girls\n    equation1 = Eq(boys, girls + 0.4 * girls)\n    \n    # Equation representing the state after 24 boys and 24 girls left the gathering:\n    # boys - 24 = girls - 24 + 50% of (girls - 24)\n    equation2 = Eq(boys - 24, (girls - 24) + 0.5 * (girls - 24))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    def trailing_zeroes(n):\n        count = 0\n        i = 5\n        while (n / i >= 1):\n            count += int(n / i)\n            i *= 5\n        return count\n\n    ans = trailing_zeroes(16)\n    return ans\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time (in minutes) David walked at the increased speed\n    t = symbols('t')\n\n    # At a speed of 150 m/min for the first 10 minutes, David walked 1500 m\n    initial_distance = 150 * 10\n\n    # After increasing his speed, David walks at 200 m/min\n    increased_speed_distance = (150 + 50) * t\n\n    # Total distance is the sum of both parts\n    total_distance = initial_distance + increased_speed_distance\n\n    # Set up the equation based on total distance David walked\n    equation = Eq(total_distance, 3700)\n\n    # Solve for t\n    time_at_increased_speed = solve(equation, t)\n\n    # Total time spent walking is the initial 10 minutes plus time at increased speed\n    total_time = 10 + time_at_increased_speed[0]\n\n    return total_time\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cupcakes, muffins = symbols('cupcakes muffins')\n\n    # Demi had an equal number of cupcakes and muffins at first\n    equation1 = Eq(cupcakes, muffins)\n\n    # After 60 cupcakes and 12 muffins were sold\n    equation2 = Eq(muffins - 12, 2 * (cupcakes - 60))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (cupcakes, muffins))\n\n    return solutions[cupcakes] + solutions[muffins]\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 7, 47)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume x is the number of extra pink counters Gill should add\n    x = symbols('x')\n    \n    # Initial probability of picking a pink counter\n    initial_prob = 5 / (5 + 7 + 8)\n    \n    # The total number of counters after adding x pink counters\n    total_counters = 5 + x + 7 + 8\n    \n    # The new probability of picking a pink counter after adding x pink counters\n    new_prob = (5 + x) / total_counters\n    \n    # Equation representing the situation where the new probability is double the initial probability\n    equation = Eq(new_prob, 2 * initial_prob)\n    \n    # Solving the equation for x\n    solution = solve(equation, x)\n    \n    # Since the number of counters can only be an integer, the solution should be cast to an int\n    return int(solution[0])\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the daily pocket money of George and Helen\n    george, helen = symbols('george helen')\n\n    # George receives $3 more pocket money than Helen every day\n    equation1 = Eq(george, helen + 3)\n\n    # Both spend $5 a day. Let's calculate savings\n    # Helen's savings equation: daily savings * days = total savings\n    # Since George saves $90 more, we can set up the following equation\n    equation2 = Eq((helen - 5) * (60 / (helen - 5)), 60)\n    \n    # George's total savings after the same period\n    equation3 = Eq((george - 5) * (60 / (helen - 5)), 150) # since 60 + 90 = 150\n\n    # Solve the system of equations for Helen's pocket money\n    solutions = solve((equation1, equation2, equation3), (george, helen))\n\n    return solutions[helen]\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    hours_shanghai_to_la = 12.25\n    minutes_la_to_shanghai_more = 90\n    hours_la_to_shanghai_more = minutes_la_to_shanghai_more / 60\n    hours_la_to_shanghai = hours_shanghai_to_la + hours_la_to_shanghai_more\n    total_round_trip_time = hours_shanghai_to_la + hours_la_to_shanghai\n\n    return total_round_trip_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n\n    initial_ratio = Eq(eddi / wiya, 3/2)\n    final_ratio = Eq((eddi + 4) / wiya, 8/5)\n\n    solutions = solve((initial_ratio, final_ratio), (eddi, wiya))\n\n    return solutions[wiya]\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Cindy has to pick enough socks to ensure at least two pairs of the same color.\n    # In the worst-case scenario, she might pick socks in such an order that she\n    # picks all socks of one color before moving onto the next color.\n    \n    # First, she picks 3 black socks (no complete pair yet).\n    # Then, she picks 3 grey socks (no complete pair yet).\n    # Then, she picks 3 red socks (no complete pair yet).\n    \n    # Now she has three single socks of each color.\n    # The next sock she picks must complete a pair.\n    # But the problem asks for at least two pairs of the same color.\n\n    # So after having one pair, she would have to pick:\n    # - max 2 more black socks for a pair of black socks\n    # - max 2 more grey socks for a pair of grey socks\n    # - max 2 more red socks for a pair of red socks\n    # In total, adding 2 more socks guarantees the 2nd pair of the same color.\n\n    total_socks = 3 + 3 + 3 + 1 + 2  # Total socks to guarantee at least two pairs.\n    return total_socks\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')  # a is the first term, d is the common difference\n    # 9th term is a + 8d, 15th term is a + 14d\n    equation1 = Eq(a + 8*d, a + 14*d + 18)\n    # 20th term is a + 19d, 12th term is a + 11d\n    equation2 = Eq(a + 19*d + a + 11*d, 88)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n    \n    # Find the 32nd term using the found common difference and first term\n    ans = solutions[a] + 31 * solutions[d]\n    \n    return ans\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    return sum(range(1, 31)) * 2 - 30\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    # Using Inclusion-Exclusion Principle\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "from sympy import symbols, solve\n\ndef solution():\n    penpals_with_3_pages, penpals_with_4_pages = symbols('penpals_with_3_pages penpals_with_4_pages')\n    \n    # Total amount of penpals\n    total_penpals_eq = penpals_with_3_pages + penpals_with_4_pages - 11\n    \n    # Total amount of pages\n    total_pages_eq = 3 * penpals_with_3_pages + 4 * penpals_with_4_pages - 38\n    \n    solutions = solve((total_penpals_eq, total_pages_eq), (penpals_with_3_pages, penpals_with_4_pages))\n    \n    return solutions[penpals_with_3_pages]\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    digit_str = str(number)\n    position = digit_str.index('8')\n    value_of_8 = 10 ** (len(digit_str) - position - 1)\n    return value_of_8\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    from fractions import Fraction\n\n    A = Fraction(1)\n    a1 = A - Fraction(1, 2)\n    a2 = A - Fraction(2, 3)\n    a3 = A - Fraction(7, 8)\n    a4 = A - Fraction(29, 30)\n    a5 = A - Fraction(139, 144)\n    a6 = A - Fraction(839, 840)\n\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n    \n    # simplify the fraction\n    a0 = a0.limit_denominator()\n    \n    m = a0.numerator\n    n = a0.denominator\n    return m + n\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Speed for the first 2 hours\n    speed1 = 40  # km/h\n    \n    # Distance covered in the first 2 hours\n    distance1 = speed1 * 2  # km\n    \n    # Distance covered in the remaining part of the trip\n    distance2 = 280  # km\n    \n    # Speed for the remaining part of the trip\n    speed2 = 70  # km/h\n    \n    # Time taken for the remaining distance\n    time2 = distance2 / speed2  # h\n    \n    # Total distance covered\n    total_distance = distance1 + distance2\n    \n    # Total time taken\n    total_time = 2 + time2  # because the first part took 2 hours\n    \n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    possible_numbers = set(range(10))\n    # From the last clue, we deduce that the number doesn't contain 5, 4, 3, or 0\n    possible_numbers -= {5, 4, 3, 0}\n\n    # From the first clue, we deduce that the number contains 8 and 6, but not in the positions guessed\n    # Since the last clue eliminated the possibility of 5 at the last position, 6 should be at the last position\n    correct_digits = {'6'}\n    \n    # From clue three, we have two digits in the correct position: 86_2\n    # We already placed 6 at the last position, so the first digit must be 8\n    third_clue_positions = {'8': 0, '6': 3}\n\n    # Now, we compare the second guess with the other two guesses\n    # Since 0 and 3 are already ruled out, the correct digits in the second guess should be 1 and 2.\n    # But the second clue tells us that they are not in the correct position, so we can place 2 in the second position.\n    second_clue_positions = {'2': 1}\n\n    # The only remaining position for 1, is the third position (as positions 0,1,3 are taken by 8,2,6 respectively)\n    confirmed_number = '82' + '1' + '6'\n\n    return int(confirmed_number)\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Error calculation\n    error_eq = Eq(x / 4 - 25, 2021)\n    x_val = solve(error_eq, x)[0]\n\n    # Correct calculation\n    correct_ans = x_val * 4 + 25\n    return correct_ans\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    factors = [75, 56, 12, 105]\n    prime_2_count = 0\n    prime_5_count = 0\n    \n    for factor in factors:\n        while factor % 2 == 0:\n            prime_2_count += 1\n            factor //= 2\n        while factor % 5 == 0:\n            prime_5_count += 1\n            factor //= 5\n\n    ans = min(prime_2_count, prime_5_count)\n    return ans\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    # Let's denote the number of books Donna has as d.\n    # Then Chloe has 4*d books.\n    # The difference between the number of books Chloe and Donna have is 816.\n    # Therefore, we can set up the following equation: 4*d - d = 816\n\n    # Define the number of books Donna has.\n    d = symbols('d')\n\n    # Equation based on the problem statement.\n    equation = Eq(4 * d - d, 816)\n\n    # Solve the equation.\n    solution = solve(equation)\n\n    # Solution will be in the form of {d: number_of_books}.\n    # We retrieve the number of books from the solution.\n    donna_books = solution[d]\n\n    return donna_books\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    # Packets of the two types of tablets\n    packet_type1 = 25\n    packet_type2 = 20\n\n    # Least Common Multiple of the packet sizes\n    days = lcm(packet_type1, packet_type2)\n\n    # Start date is March 1st, so we add the LCM days to get the next start date.\n    start_date = (1, 3)  # 1st March as a tuple (day, month)\n\n    # Calculate the next start date by adding days to the start date\n    # March has 31 days; after that, we just keep adding till we reach the required number of days\n    day, month = start_date\n    days_in_month = {3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    while days > 0:\n        days_till_end_of_month = days_in_month[month] - day + 1\n        if days_till_end_of_month > days:\n            day += days\n        else:\n            days -= days_till_end_of_month\n            day = 1\n            month += 1\n            if month > 12:\n                month = 1\n\n    # The final result as (day, month)\n    return (day, month)\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # There are a total of 10 performances, with restrictions on placing\n    # singing performances between dancing performances.\n    \n    # We will first think of the minimal case where we place 1 singing (S) between each pair of dancing (D)\n    # Like this: DSxSxSxD -> Here we have placed 3 S and 3 D with x being a placeholder for the remaining S\n    # We have 1 S left to start and 3 S to place in the placeholders, totaling 4 places to insert the remaining S\n    # For the remaining 3 S, we have a total of 5 selectable positions considering the positions at the ends and between D's.\n    \n    # Now count the number of ways to distribute 3 S over 5 positions\n    number_of_ways_to_distribute_S = factorial(5) // (factorial(3) * factorial(5 - 3))\n    \n    # Every time we select positions for S, the arrangement of D's is determined,\n    # so we don't need to calculate permutations for D's - it's essentially fixed with respect to selected S positions.\n    \n    # Finally, count the number of permutations of the remaining S's among themselves, which is just 6!.\n    permutations_of_remaining_S = factorial(6)\n    \n    # The total number of different ways is the combination of distribution times permutations\n    total_different_ways = number_of_ways_to_distribute_S * permutations_of_remaining_S\n    \n    return total_different_ways\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 4) / 8, 3)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 193):\n        if isprime(a):\n            for b in range(2, 193):\n                if isprime(b) and 3*a + 11*b == 193:\n                    return a + b\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    # Iterate through the possible values of a and b to find the correct number\n    for a in range(1, 10):\n        for b in range(10):\n            ab = int(f\"{a}{b}\")\n            if ab * 7 == int(f\"{a}0{b}\"):\n                return ab\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The system of congruences is:\n    # x ≡ 1 (mod 4)\n    # x ≡ 2 (mod 5)\n    # x ≡ 4 (mod 7)\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    x, _ = solve_congruence(*congruences)\n    return x\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    return solutions[banana] + solutions[apple]\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    workers_initial = 3\n    houses_initial = 14\n    days_initial = 4\n\n    workers_final = 9\n    days_final = 2\n\n    # Calculate houses built per worker per day\n    houses_per_worker_per_day = houses_initial / (workers_initial * days_initial)\n\n    # Calculate number of houses built by 9 workers in 2 days\n    houses_final = houses_per_worker_per_day * workers_final * days_final\n    \n    return int(houses_final)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(12, 15), 60)\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    children, adults, boys, girls = symbols('children adults boys girls')\n    \n    # there were three times as many adults as children\n    equation1 = Eq(adults, 3 * children)\n    \n    # twice as many boys as girls\n    equation2 = Eq(boys, 2 * girls)\n    \n    # there were 176 more adults than girls\n    equation3 = Eq(adults - girls, 176)\n    \n    # Total number of children is the sum of boys and girls\n    equation4 = Eq(children, boys + girls)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (children, adults, boys, girls))\n    \n    total_people = solutions[adults] + solutions[children]\n    \n    return total_people\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # We only care about the last digit in 999^{99}\n    # The last digit of 999 is 9, and we look for a pattern in the powers of 9\n    last_digit = 9\n    pattern = []\n    \n    # Find the repeating pattern\n    for _ in range(1, 11): # checking more than needed, as the pattern repeats every 4\n        pattern.append(last_digit)\n        last_digit = (last_digit * 9) % 10\n    \n    # The pattern of the last digit of powers of 9 repeats every 4. (9, 1, 9, 1, ...)\n    # Find the position of the last digit of 999^99 in the pattern, since 99 % 4 == 3, we pick the third element of the pattern\n    ans = pattern[(99 % len(pattern)) - 1] # Subtract 1 due to zero-based indexing\n    return ans\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    from itertools import permutations\n\n    ages = permutations(range(1, 29), 3)\n    min_product = float('inf')\n    for x, y, z in ages:\n        if (x != y != z != x) and (x + y + z == 28) and (z == x - 10):\n            product = x * y * z\n            min_product = min(min_product, product)\n\n    return min_product\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    # Let x be the cost of 1 ball\n    # Let m be the total money Adam has\n    from sympy import symbols, Eq, solve\n\n    x, m = symbols('x m')\n    # Set up the two equations based on the problem statements\n    equation1 = Eq(m - 5*x, 15)\n    equation2 = Eq(m - 8*x, -12)\n\n    # Solve the equations for x and m\n    solutions = solve((equation1, equation2), (x, m))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n    for i in range(100, 1000):  # Loop through all 3-digit numbers for A\n        if i % 75 == 0:  # Check if A is a multiple of 75\n            A = str(i)\n            if len(set(A)) != len(A):  # A should have at least one repeating digit\n                for j in range(i+1, 1000):  # Loop through 3-digit numbers greater than A for B\n                    if j % 75 == 0:  # Check if B is a multiple of 75\n                        B = str(j)\n                        # B should have at least one repeating digit and have two digits in common with A\n                        if len(set(B)) != len(B) and len(set(A) & set(B)) == 2:\n                            max_sum = max(max_sum, i + j)  # Check if the sum of A and B is the largest found\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    # After the first bounce, the ball rebounds to 1/3 of the initial height\n    # Let's denote the initial height as h.\n\n    # After the second bounce, the height is 9cm which is (1/3) of the height of the first bounce\n    # So the height of the first bounce is 3 times 9cm, which is 27cm\n    \n    # Now, since the first bounce was 27cm and it's (1/3) of the initial height (h)\n    # We can find the initial height (h) by multiplying the first bounce height by 3\n    first_bounce_height = 9 * 3\n    initial_height = first_bounce_height * 3\n\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    # Compute numerator and denominator for the first complex fraction\n    numerator1 = (1/30) + (1/6)\n    denominator1 = 2/25\n\n    # Compute the first complex fraction\n    fraction1 = numerator1 / denominator1\n    \n    # Compute numerator and denominator for the second complex fraction\n    numerator2 = 2 - (2/3)\n    denominator2 = 8/3\n\n    # Compute the second complex fraction\n    fraction2 = numerator2 / denominator2\n\n    # Compute the final result\n    ans = fraction1 + fraction2\n    \n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    \n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n    \n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n    \n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let n be the time it takes for Nancy to finish the job by herself\n    n = symbols('n')\n    \n    # Combined work equation, where 1/n is Nancy's work rate and 1/(n - 10) is Lee's rate\n    # Together, they complete 1/10 of the work per hour\n    equation1 = Eq(1/n + 1/(n - 10), 1/10)\n    \n    # Lee and Nancy working separately equation\n    # Lee works for 6 hours and Nancy completes the rest in 20 hours\n    equation2 = Eq(6/(n - 10) + 20/n, 1)\n    \n    # Solve the system of equations for n\n    solution_n = solve((equation1, equation2), (n))\n    \n    # Filter the real positive solution for n\n    nancy_time = [sol.evalf() for sol in solution_n if sol.is_real and sol > 0]\n    \n    return nancy_time[0]\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_students = 40 + 30\n    overall_average = 90\n    \n    # Let class A's average be x, then class B's average will be x + 7\n    # We have (40x + 30(x + 7)) / (40 + 30) = 90\n    # Simplify to 40x + 30x + 210 = 90 * 70\n    # 70x = 90 * 70 - 210\n    # x = (90 * 70 - 210) / 70\n    \n    x = (overall_average * total_students - 210) / 70\n    class_b_average = x + 7\n\n    return class_b_average\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # 1 / (1/(a*b) + 1/(b*c) + 1/c)\n    a = 2007\n    b = 2008\n    c = 2009\n\n    # Find common denominator\n    # common_denominator = a * b * c\n\n    # Convert each fraction to have the common denominator\n    first_term = (b * c) / (a * b)\n    second_term = (a * c) / (b * c)\n    third_term = (a * b)\n\n    # Add fractions together\n    sum_of_fractions = first_term + second_term + third_term\n\n    # Final result is the reciprocal of the sum\n    ans = a * b * c / sum_of_fractions\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    for ten_pence in range(6):  # Jeremy can use 0 to 5 ten-pence coins\n        for twenty_pence in range(4):  # Jeremy can use 0 to 3 twenty-pence coins\n            for fifty_pence in range(2):  # Jeremy can use 0 to 1 fifty-pence coins\n                if ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50 == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    num_boats = -(-students // boat_capacity)  # Use ceiling division\n\n    return num_boats\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    a = 250250\n    ans = (a ** 2) - (a - 1) * (a + 1)\n    return ans\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Aaron (A), Becky (B), and Caris (C)\n    A, B, C = symbols('A B C')\n\n    # Equation 1: A = B + (A - B)\n    equation1 = Eq(A, B + (A - B))\n\n    # Equation 2: B = C + (B - C)\n    equation2 = Eq(B, C + (B - C))\n\n    # Equation 3: A + B + C = 60\n    equation3 = Eq(A + B + C, 60)\n\n    # Equations: A - B = B - C and their ages add up to 60\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n    people_in_front_of_mark = total_people - people_behind_mark - 1  # Subtract 1 for Mark himself\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f\"9{a}8{a}\")\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # In order for a number to be divisible by 4, the last two digits must form a number divisible by 4.\n    # We need to check which digit J makes the last two digits (i.e., 5J6) a number divisible by 4.\n    for j in range(10):\n        if (int(str(5) + str(j) + str(6))) % 4 == 0:\n            return j\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the total number of people at the funfair\n    x = symbols('x')\n\n    # According to the problem, we have the following equations\n    children_frac = 2/5\n    women_frac = 1/4\n    men_frac = 1 - (children_frac + women_frac)\n\n    # We know that children make up 2/5 of the total, and women make up 1/4\n    # Therefore, men make up the remaining fraction\n    equation = Eq((children_frac * x) - (men_frac * x), 20)\n\n    # Solving for x to find the total number of people\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    final_result = 66\n    initial_operation = (final_result // 6) - 7\n    return initial_operation\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water_more = 32\n    jane_water = audrey_water + jane_water_more\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    a = 9\n    result = 33\n\n    # Define the equation based on the operation a ⊙ b = 5a - 2b\n    # Since we have 9 ⊙ x = 33, we can write it as 5 * 9 - 2 * x = 33\n\n    # Solving for x\n    x = (5 * a - result) / (-2)\n\n    return x\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    ans = sum(i * (i + 1)**2 for i in range(24))\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    return 36 + 17 + 18 + 24 + 33\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    initial_watermelons = 94\n    initial_pineapples = 138\n    watermelons_per_day = 9\n    pineapples_per_day = 9\n    \n    days = symbols('days')\n    \n    remaining_watermelons = initial_watermelons - watermelons_per_day * days\n    remaining_pineapples = initial_pineapples - pineapples_per_day * days\n    \n    equation = Eq(remaining_pineapples, 3 * remaining_watermelons)\n    days_solution = solve(equation, days)\n    \n    return int(days_solution[0])\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    # Number of friends\n    n = 6\n    # Each friend sends a card to every other friend\n    cards_sent_per_person = n - 1\n    # Total cards sent\n    total_cards = n * cards_sent_per_person\n    # Since each card exchange is counted twice (A sends to B and B sends to A)\n    # We divide by 2 to get the correct count\n    ans = total_cards // 2\n    return ans\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    result = 3.6 * 100\n    return result\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols\n    tom_current, jerry_current, years = symbols('tom_current jerry_current years')\n\n    # Tom will be twice his age in 4 years\n    equation1 = Eq(tom_current + 4, 2 * tom_current)\n\n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom_current - 3) + (jerry_current - 3), 10)\n\n    # Finding current ages of Tom and Jerry\n    ages_current = solve((equation1, equation2), (tom_current, jerry_current))\n\n    # Jerry's age will be doubled in 'years' years\n    equation3 = Eq(jerry_current + years, 2 * jerry_current)\n\n    # Solving for 'years'\n    years_to_double_jerry = solve(equation3.subs(jerry_current, ages_current[jerry_current]), years)\n\n    return years_to_double_jerry[0]\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    # Total time spent in minutes\n    total_time = 360  \n    # Ratio of time going up to going down\n    ratio_up_to_down = 5 / 4  \n    # Total parts of the ratio\n    total_parts = 5 + 4  \n\n    # Time spent going up\n    time_up = (total_time / total_parts) * 5  \n    # Time spent going down\n    time_down = total_time - time_up  \n\n    # Let the speed going down be 'x' and going up be 'x - 10'\n    # Since distance = speed * time, we have the same distance up and down:\n    # (x - 10) * time_up = x * time_down\n    \n    # We use the proportion to find the speed going down\n    speed_down = (time_up + 10) / time_down * 10\n    \n    # Calculate the distance travelled up and down\n    distance_up = (speed_down - 10) * time_up\n    distance_down = speed_down * time_down\n\n    # Total distance travelled\n    total_distance = distance_up + distance_down\n\n    return total_distance\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n    difference = fruits_per_truck - fruits_per_car\n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    time_arrival = (9 * 60) + 22  # Aiden arrives at 9:22 which is 562 minutes after 0:00.\n    time_bus = (9 * 60) + 15      # 9:15 bus time in minutes after 0:00.\n\n    # If Aiden arrives after the 9:15 bus, we find the next bus time.\n    if time_arrival > time_bus:\n        time_bus += ((time_arrival - time_bus) // 35) * 35 + 35\n    \n    # The wait time is the difference between the next bus time and Aiden's arrival time.\n    wait_time = time_bus - time_arrival  \n    return wait_time\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "from math import lcm\n\ndef solution():\n    packet_one = 25\n    packet_two = 20\n\n    days_to_sync = lcm(packet_one, packet_two)  # Finding the least common multiple\n    # Since March has 31 days, find out the month and day she will start the new packets\n    # March 1st is day 1, so we subtract one to get the correct number of days passed\n    days_passed_in_march = (days_to_sync - 1) % 31  \n    months_passed = (days_to_sync - 1) // 31\n\n    # Finding the exact month can be more complex because of different month lengths, so for simplicity,\n    # we note that each month has at least 28 days. The 4 is April, as we start counting from March (the 3rd month).\n    sync_month = 3 + months_passed \n\n    sync_date = days_passed_in_march + 1\n    # Simplify to just the month and date in this example\n    return (sync_month, sync_date)\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_a_week = 7\n    weeks_until_birthday = days_until_birthday // days_in_a_week\n    return weeks_until_birthday\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62  # meters per minute\n    brother_speed = 70  # meters per minute\n    \n    # They meet after 5 minutes, so combine their distances to get the total distance\n    distance = (eddie_speed + brother_speed) * 5\n\n    return distance\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    result = (5/9) * 243\n    return result\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(39 - (3*x - 4), 34)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import isprime\n\n    # Starting ages of the family members: 7, 5, 29, 31 in 2017\n    ages = [7, 5, 29, 31]\n    year = 2017\n\n    while True:\n        # Increase the year by 1\n        year += 1\n        # Increase each family member's age by 1\n        ages = [age + 1 for age in ages]\n        # Check if all ages are prime\n        if all(isprime(age) for age in ages):\n            return ages[3]  # Father's age is the last element\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price = discounted_price * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((i ** 2 if i % 2 != 0 else -i ** 2) for i in range(3, 52))\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    ans = 9321 - 899\n    return ans\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    # Total flowers planted\n    total_flowers = 30\n    \n    # Flowers planted between every 2 lamp posts\n    flowers_between_posts = 3\n\n    # The number of intervals between lamp posts is one more than the number\n    # of flower sections because Jamie starts planting after the first lamp post and\n    # stops planting after the last lamp post. \n    # Use the relation (total_flowers / flowers_between_posts) + 1 to find the number of intervals.\n    intervals = (total_flowers // flowers_between_posts) + 1\n    \n    # Length of the road\n    road_length = 50\n\n    # Distance between every 2 lamp posts is the road length divided by the number of intervals\n    distance_between_posts = road_length / intervals\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    n = 7\n    ans = 1 + n + n * (n - 1) // 2 + n * (n - 1) * (n - 2) // 6 + n * (n - 1) * (n - 2) * (n - 3) // 24\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given = 15 * 8\n    books_packed = total_books - books_given\n    return books_packed\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n    equation1 = Eq(lora + mother, 44)\n    equation2 = Eq(mother, 3 * lora)\n\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    number = 'ninety thousand and nine'.replace('ninety thousand', '90000').replace('and nine', '9')\n    ans = int(number)\n    return ans\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n\n    number_of_males = total_adults * fraction_male\n\n    return int(number_of_males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Number of paths from home to each landmark\n    home_to_audio = 6\n    home_to_book = 4\n    home_to_chapel = 5\n\n    # Number of paths from each landmark to school\n    audio_to_school = 2\n    book_to_school = 2\n    chapel_to_school = 3\n\n    # Total paths from home to school through each landmark\n    total_paths = (home_to_audio * audio_to_school) + \\\n                  (home_to_book * book_to_school) + \\\n                  (home_to_chapel * chapel_to_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Let's denote Adam, Ben, and Carl's weights as a, b, and c respectively.\n    adam_and_ben = 102  # Adam and Ben together weigh 102 kg\n    ben_and_carl = 97   # Ben and Carl together weigh 97 kg\n    adam_and_carl = 93  # Adam and Carl together weigh 93 kg\n    \n    # The total weight of all three (counting each person once) can be found by adding the combined weights of each pair and subtracting one of the individual weights (since everyone is counted twice).\n    total_weight = (adam_and_ben + ben_and_carl + adam_and_carl) // 2 # We divide by 2 because we count each person twice\n    \n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    arrival_time = datetime.strptime(\"12:40 PM\", \"%I:%M %p\")\n    stay_duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + stay_duration\n    leave_time_formatted = leave_time.strftime(\"%I:%M %p\")\n\n    return leave_time_formatted\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3 \n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.5 + twenty_pence_coins * 0.2\n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    ans = 76 * 9\n    return ans\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    total_money = 705\n    calculator_cost = 34\n    racket_cost = 63\n\n    equation1 = Eq(benson + clive, total_money)\n    equation2 = Eq(benson - calculator_cost, clive - racket_cost)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    belle_sticks = 49\n    received_sticks = 11\n    total_belle_sticks = belle_sticks + received_sticks\n\n    eddie_sticks = total_belle_sticks  # Eddie and Belle have the same amount now\n\n    return eddie_sticks\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between = 2   # in meters\n\n    # Since there is a lamp post at each end, we have one fewer gaps than the number of lamp posts\n    num_gaps = num_lamp_posts - 1\n\n    road_length = num_gaps * distance_between\n\n    return road_length\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temperature = -7\n    difference = 12\n\n    exeter_temperature = glasgow_temperature + difference\n\n    return exeter_temperature\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5/11) + (2/27)) * 11 + (5/27)\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    num_boxes = 6\n    weight_per_box = 1.3\n    total_weight = num_boxes * weight_per_box\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    return 11 + 8 - 4 + 2\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for John and Kofi's coins\n    john, kofi = symbols('john kofi')\n\n    # Total number of coins\n    total_coins = 25\n    \n    # If John gives 4 coins to Kofi\n    equation1 = Eq(john - 4, kofi + 4)\n    \n    # Kofi will have three fewer coins than John after the transaction\n    equation2 = Eq(kofi + 4, john - 4 - 3)\n    \n    # Sum of John and Kofi's coins is 25\n    equation3 = Eq(john + kofi, total_coins)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (john, kofi))\n    \n    # Return John's number of coins\n    return solutions[john]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    jason_tea = 983\n    belinda_tea = 179\n    \n    total_tea = jason_tea + belinda_tea\n    equal_tea = total_tea / 2\n    tea_to_give = equal_tea - belinda_tea\n    \n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 4, 6]\n    perm = permutations(digits)\n\n    count = len(list(perm))\n\n    return count\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change_from_10_pounds = (10 * 100) - total_cost\n    \n    return change_from_10_pounds\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = 18 + 2 + 16\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    sum = 0\n    # Since the pattern alternates between subtraction and addition,\n    # we can simplify the process by just subtracting 1 from each even\n    # number starting from 100 and going down to 2.\n    for i in range(100, 1, -2):\n        sum += (i - (i - 1))\n    # Finally, we add the last term, which is -1.\n    sum += -1\n    return sum\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    # Neelesh has 4 sweets left after eating one\n    neelesh_sweets_after_eating = 4\n    \n    # Therefore, before eating one, Neelesh had 5 sweets\n    neelesh_sweets_before_eating = neelesh_sweets_after_eating + 1\n    \n    # Given that these 5 sweets are 1/6 of the total number that Ayesha initially had\n    total_sweets_initially = neelesh_sweets_before_eating * 6\n    \n    # Ayesha gave 1/6 of her sweets to Neelesh, so she has 5/6 left\n    ayesha_sweets_left = (5/6) * total_sweets_initially\n    \n    return ayesha_sweets_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper_ball, iron_ball = symbols('copper_ball iron_ball')\n\n    # 8 copper balls and 9 iron balls weigh 135 kg\n    equation1 = Eq(8 * copper_ball + 9 * iron_ball, 135)\n    # 6 copper balls and 3 iron balls weigh 75 kg\n    equation2 = Eq(6 * copper_ball + 3 * iron_ball, 75)\n\n    # solve for the weight of one copper ball\n    solutions = solve((equation1, equation2), (copper_ball, iron_ball))\n\n    return solutions[copper_ball]\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of normal rabbits and s be the number of special rabbits\n    n, s = symbols('n s')\n\n    # Each normal rabbit has 1 head, each special rabbit has 3 heads\n    # n + 3s = 53\n    equation1 = Eq(n + 3 * s, 53)\n    \n    # Each normal rabbit has 4 feet, each special rabbit has 2 feet\n    # 4n + 2s = 102\n    equation2 = Eq(4 * n + 2 * s, 102)\n    \n    # Solving the system of equations for n and s\n    solutions = solve((equation1, equation2), (n, s))\n\n    return solutions[n] + solutions[s]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator = sum(1 / (i * (20 + 11 - i)) for i in range(11, 16))\n    return numerator / denominator\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    # The decimal form of 1/70 has a repeating cycle.\n    # To find out the repeating cycle, we calculate 1/70 to a sufficient number of digits.\n    from decimal import Decimal, getcontext\n\n    # Set a high precision far beyond the required 500 digits\n    getcontext().prec = 600\n\n    # Convert 1/70 into a decimal with high precision\n    decimal_result = str(Decimal(1) / Decimal(70))[2:]  # Removing '0.'\n    \n    # Find the length of the repeating cycle by inspecting the digits of 1/70\n    # In this case, it is known that the repeating sequence for 1/70 is \"0142857\"\n    cycle = \"0142857\"\n    cycle_length = len(cycle)\n    \n    # Find the 500th digit in the repeating cycle\n    # The index for the 500th digit is 499 due to zero-based indexing\n    index_in_cycle = (499) % cycle_length\n    digit_500th = cycle[index_in_cycle]\n    \n    return int(digit_500th)\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the original number of gummy bears and l represent lollipops\n    g, l = symbols('g l')\n\n    # Original ratio equation\n    equation1 = Eq(g/l, 5/7)\n\n    # New ratio equation after adding 120 pieces to each pile\n    equation2 = Eq((g + 120)/(l + 120), 4/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, l))\n\n    # Calculate the total number of candies now\n    total_candies = solutions[g] + solutions[l] + 120*2\n\n    return total_candies\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    # The unit digit of a power of a number only depends on the unit digit\n    # of the base and the exponent cycle of the last digit.\n\n    # For the number 44, the unit digit is 4.\n    # Powers of 4 have a cycle of 2 for their unit digit: \n    # 4 ^ 1 -> 4, 4 ^ 2 -> 6, 4 ^ 3 -> 4, 4 ^ 4 -> 6, and so on.\n    \n    # Since the unit digit cycle of 4 is 2, we need to find the remainder when 2008\n    # is divided by 2 to decide on the unit digit of the power.\n    remainder = 2008 % 2\n    \n    # If remainder is 0, the unit digit would be 6 (as an even power), \n    # otherwise it will be 4 (as an odd power).\n    \n    # In this case, since 2008 is even, its unit digit will be same as 4^2\n    unit_digit = 6\n    \n    return unit_digit\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    total_marbles = 560\n    marbles_in_A = 80\n    marbles_in_B_and_C = total_marbles - marbles_in_A\n\n    # Let's denote the number of marbles in Box C as x\n    # So in Box B there will be 2x marbles\n\n    # Sum of marbles in Box B and Box C\n    # 2x (Box B) + x (Box C) = marbles_in_B_and_C\n    # 3x = marbles_in_B_and_C\n\n    x = marbles_in_B_and_C // 3  # number of marbles in Box C\n\n    return x\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    stone_to_pounds = 14\n\n    # Convert David's weight to pounds\n    david_weight_pounds = david_weight_stone * stone_to_pounds\n\n    # Calculate the difference\n    weight_difference = abs(andrew_weight_pounds - david_weight_pounds)\n\n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    tenth_term = 31\n    common_difference = 28 - 25\n    n = 10\n\n    first_term = tenth_term - common_difference * (n - 1)\n    \n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    sum_numbers = sum(numbers) * 3\n    return sum_numbers\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    numbers = [31, 42, 53, 64, 75, 86, 97]\n    sum_of_numbers = sum(numbers)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the base 3 numbers to base 10\n    num1_base10 = int(str(12101), 3)\n    num2_base10 = int(str(2210), 3)\n\n    # Subtract the base 10 numbers\n    diff_base10 = num1_base10 - num2_base10\n\n    # Convert the result back to base 3\n    ans = ''\n    while diff_base10 > 0:\n        ans = str(diff_base10 % 3) + ans\n        diff_base10 //= 3\n    \n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Since the numbers cannot differ by 5, we can partition the first 20 numbers\n    # into groups based on their modulo 5 value.\n    # That is, one group for numbers with modulo 5 equals 0, another for modulo 5 equals 1, etc.\n    #\n    # Group 0: 5, 10, 15, 20\n    # Group 1: 1, 6, 11, 16\n    # Group 2: 2, 7, 12, 17\n    # Group 3: 3, 8, 13, 18\n    # Group 4: 4, 9, 14, 19\n    #\n    # We can pick at most one number from each group to satisfy the condition.\n    #\n    # To maximize n, we need to choose numbers from the groups with the most numbers.\n    # In this case, each group has 4 numbers, so we can pick one number from each of the 5 groups\n    # resulting in n = 5.\n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cake, biscuit = symbols('cake biscuit')\n\n    equation1 = Eq(1*cake + 2*biscuit, 450)\n    equation2 = Eq(2*cake + 3*biscuit, 800)\n\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    correct_mark = 12\n    wrong_mark = 0\n\n    total_marks = (correct_answers * correct_mark) + (wrong_answers * wrong_mark)\n    total_questions = correct_answers + wrong_answers\n    average_mark = total_marks / total_questions\n\n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    numerator = (2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)\n    denominator = ((2017 + 1/3) - 2016.875) * 17\n    fraction = numerator / denominator * (3 + 23/32)\n    \n    return fraction\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for pencils_per_pupil in range(1, 100):\n        total_pencils = 44 * pencils_per_pupil\n        if total_pencils >= 100 and total_pencils < 1000:  # Ensure it's a three-digit number\n            str_pencils = str(total_pencils)\n            if str_pencils[0] == str_pencils[2]:  # Check if the first and last digit are the same\n                return pencils_per_pupil\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kevin, sara, james = symbols('kevin sara james')\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n\n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import lcm\n\ndef solution():\n    return lcm(4, 6, 7)\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = [(M % d) for d in range(2, 11)]\n        if len(set(remainders)) == 9 and 0 not in remainders:\n            return M\n        M += 1\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'j' be John's current age and 'm' be the mother's current age.\n    j, m = symbols('j m')\n    \n    # John's age in 8 years is 'j + 8'\n    # His mother's age 20 years ago is 'm - 20'\n    # According to the question, both ages should be equal.\n    \n    equation1 = Eq(j + 8, m - 20)\n    \n    # Now we need to find when John's age is five times less than his mother's age.\n    # They will reach this point at the same time, the difference in their ages will always be constant.\n    # The age difference is 'm - j', which is known from 'equation1' to be '28'.\n    \n    equation2 = Eq(5 * j, m)\n    \n    # We have two equations and two unknowns.\n    # Use sympy's `solve` function to calculate the values.\n    \n    solutions = solve((equation1, equation2), (j, m))\n    \n    # John's age when his mother was 5 times his age is 'j' from our solutions.\n    \n    johns_age_when_mother_five_times = solutions[j]\n    \n    # But we need to find out how old John was at that time.\n    # We can use the age difference which is 'm - j' to find that.\n    # Age difference calculated from the solutions is '28' years (from 'equation1').\n    # We already know that John was 'solutions[j]' when his mother was 5 times older.\n    # Therefore, we subtract '28' years from that age to find how old John was back then.\n    \n    ans = johns_age_when_mother_five_times - 28\n    \n    return ans\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    tom_time = 24  # Tom completes a lap in 24 minutes\n    william_time = 8  # William completes a lap in 8 minutes\n\n    # To find the first time they meet, we take the Least Common Multiple (LCM) of their times\n    from math import lcm\n    ans = lcm(tom_time, william_time)\n\n    return ans\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n\n    if total_apples % apples_per_container == 0:\n        return total_apples // apples_per_container\n    else:\n        return total_apples // apples_per_container + 1\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n\n    equation = Eq(romily, reema + 10)\n\n    solutions = solve(equation, reema)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    allison, ben, eunice = symbols('allison ben eunice')\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n    \n    # By the inclusion-exclusion principle\n    both_competitions = math_competition + art_competition - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from math import gcd\n\n    num = 28\n    # Find the largest square number that divides 28\n    largest_square_divisor = gcd(num, int(num**0.5)**2)\n    # Determine the smallest number to multiply by to get a perfect square\n    ans = num // largest_square_divisor\n\n    return ans\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    distance_between_posts = 4\n\n    num_posts = (field_length // distance_between_posts) + 1\n\n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 since it's a two-digit number\n        for b in range(0, 10):\n            ab = 10*a + b\n            ba = 10*b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    return (612 // 34) * 25\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    pos_sum = 10 + 20 + 30 + 50 + 60 + 70\n    neg_sum = 6 + 16 + 26 + 46 + 56 + 66\n    ans = pos_sum - neg_sum\n    return ans\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # total minutes spent after reaching home (10 min play + 20 min TV + 20 min lunch)\n    total_minutes = 10 + 20 + 20\n    # lunch finished at 2:50 PM\n    lunch_finished_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    # calculate the time when he reached home\n    reach_home_time = lunch_finished_time - timedelta(minutes=total_minutes)\n    return reach_home_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "from math import factorial\n\ndef solution():\n    # students A and B are treated as one unit plus the other four students\n    num_units = 4 + 1  \n    \n    # calculate the permutations for the five units (AB,C,D,E,F)\n    total_permutations = factorial(num_units)\n    \n    # calculate the permutations for A and B within their unit\n    ab_permutations = factorial(2)\n    \n    # multiply the two permutations to get the total number of ways\n    total_ways = total_permutations * ab_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n    \n    for _ in range(years):\n        initial_rabbits = 5 * initial_rabbits // 2  # 5 times growth then halve due to death\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y, x):\n    cost_per_mile = 6\n    total_fare = cost_per_mile * x\n    equation = y - total_fare\n    return equation\n\n# Example usage:\n# Given y = total fare and x = distance traveled\ny = 42  # Example fare\nx = 7   # Example distance\nans = solution(y, x)"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for number in range(99, 9, -1):  # Start from 99 and go down to 10.\n        if (number % 4 == 3) and (number % 5 == 3):\n            return number\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    red, green, purple = symbols('red green purple')\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, (3 / 5) * purple)\n    equation3 = Eq(4 * red + 5 * green + 7 * purple, 642)\n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    # Since at least one student should get 5 sweets,\n    # we find the largest class size that does not leave any student with less than 5 sweets.\n    max_class_size = total_sweets // 5\n\n    return max_class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    ans = 246 * 135 + 2 * 135\n    return ans\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    tree_interval = 5\n\n    num_trees = (road_length // tree_interval) + 1  # Including both ends\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n    total_sum = tens + hundredths + thousandths\n    return total_sum\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    return 25 / 100 * 1200\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # James is 120 cm tall\n    difference = 30     # James is 30 cm shorter than Mark\n\n    mark_height = james_height + difference  # Add the difference to James's height to get Mark's height\n\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n    \n    num_children = (total_stickers - remaining_stickers) // stickers_per_child\n    \n    return num_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Jon's and Miguel's amounts of money\n    jon, miguel = symbols('jon miguel')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(jon, miguel + 0.30 * miguel)  # Jon has 30% more money than Miguel\n    equation2 = Eq(jon + miguel, 46)             # Together they have £46\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    # Return the amount of money Jon has\n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_blocks = total_blocks // 4  # Number of blocks given to Sally\n    remaining_blocks = total_blocks - given_blocks\n    return remaining_blocks\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds_digit in range(1, 5):  # even digits: 2, 4, 6, 8\n        for tens_digit in range(0, 10, 2):  # all even digits\n            if tens_digit > hundreds_digit * 2:  # condition (d)\n                ones_digit = hundreds_digit * 2\n                number = 100 * (hundreds_digit * 2) + 10 * tens_digit + ones_digit  # assemble the number\n                if number % 2 == 0 and number % 9 == 0:  # condition (a)\n                    return number\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of chocolates Sally initially had, and y be the number Ken initially had.\n    x, y = symbols('x y')\n\n    # Sally and Ken had chocolates in the ratio of 5:7\n    equation1 = Eq(x/y, 5/7)\n\n    # Ken gives 24 chocolates to Sally, Ken has y - 24 left, Sally has x + 24\n    equation2 = Eq(x + 24, 2 * (y - 24))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Ken's chocolates in the end, after giving 24 to Sally\n    ken_chocolates_end = solutions[y] - 24\n\n    return ken_chocolates_end\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let 'e' be the number of steps on the escalator.\n    # Let 'r' be the rate at which the escalator moves up in steps per second.\n\n    # When Peter walks at 1 step per second, it takes him 10 seconds to reach the top,\n    # so the escalator takes him up '10 * r' steps during this time.\n    # The total number of steps, e, is hence 10 + 10 * r.\n\n    # When Peter walks at 2 steps per second, it only takes him 16 / 2 = 8 seconds to reach the top,\n    # so the escalator takes him up '8 * r' steps during this time.\n    # The total number of steps, e, is hence 16 + 8 * r.\n\n    # Setting up the equations based on the above description:\n    # e = 10 + 10r (equation 1)\n    # e = 16 + 8r  (equation 2)\n\n    # By equating them we can solve for r:\n    # 10 + 10r = 16 + 8r\n    # 2r = 16 - 10\n    # 2r = 6\n    # r = 3 (the rate at which the escalator moves up in steps per second)\n\n    # Substitute the value of r into either equation 1 or 2 to find e:\n    # e = 10 + 10 * 3\n    # e = 10 + 30\n    # e = 40 (the number of steps on the escalator)\n\n    r = (16 - 10) / 2\n    e = 10 + 10 * r\n    return e\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, notebook = symbols('pencil notebook')\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n\n    solutions = solve((equation1, equation2), (pencil, notebook))\n\n    return solutions[pencil] + solutions[notebook]\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    total_bill = 82\n    free_hours = 40\n    additional_hours_charge_5 = 5 * (50 - 40)\n    additional_hours_charge_8 = 8 * (60 - 50)\n    \n    if total_bill <= additional_hours_charge_5:\n        hours_over_40 = total_bill // 5\n    elif total_bill <= (additional_hours_charge_5 + additional_hours_charge_8):\n        hours_over_40 = 10 + (total_bill - additional_hours_charge_5) // 8\n    else:\n        hours_over_40 = 20 + (total_bill - additional_hours_charge_5 - additional_hours_charge_8) // 15\n    \n    total_hours = free_hours + hours_over_40\n    return total_hours\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    return 478 - 189\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percent = 0.20\n    tax_percent = 0.10\n\n    tip_amount = bill * tip_percent\n    tax_amount = bill * tax_percent\n\n    total_cost = bill + tip_amount + tax_amount\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raju, vijay, patrick = symbols('raju vijay patrick')\n    \n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n    \n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_in_triangle = 3\n    sides_in_square = 4\n    number_thought = (sides_in_square * 2) - sides_in_triangle\n    return number_thought\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay_per_hour = 7.50\n    pay_increase_percentage = 0.12\n\n    new_pay_per_hour = original_pay_per_hour * (1 + pay_increase_percentage)\n\n    return new_pay_per_hour\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey = 177\n    jane = audrey + 32\n    total_water = audrey + jane\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits_per_page = 1\n    total_digits = 0\n    page_count = 0\n    \n    while total_digits < 1014:\n        page_count += 1\n        total_digits += digits_per_page\n\n        if page_count >= 10 and page_count < 100:\n            digits_per_page = 2\n        elif page_count >= 100 and page_count < 1000:\n            digits_per_page = 3\n        elif page_count >= 1000:\n            digits_per_page = 4\n            \n    return page_count\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n\n    weeks = 5\n    \n    joanna_saved = joanna_weekly * weeks\n    amy_saved = (amy_weekly - amy_spent_weekly) * weeks\n\n    ans = joanna_saved - amy_saved\n    return ans\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the magic number\n    x = symbols('x')\n\n    # Create equations based on the problem statement\n    equation = Eq(57 + x, 4 * (9 + x))\n\n    # Solve the equation for x\n    magic_number = solve(equation, x)\n\n    return magic_number[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_teachers = 2\n    total_males = 7\n    total_females = 6\n    \n    # Total number of ways to form a committee with at least one female\n    total_ways_with_females = 0\n    \n    # Choose 1 teacher in comb(total_teachers, 1) ways\n    # For each way of choosing a teacher, count the number of ways to form student groups with at least 1 female\n    for females_in_committee in range(1, 5):\n        males_in_committee = 4 - females_in_committee\n        # Choose females_in_committee females and males_in_committee males\n        ways = comb(total_teachers, 1) * \\\n               comb(total_females, females_in_committee) * \\\n               comb(total_males, males_in_committee)\n        total_ways_with_females += ways\n    \n    return total_ways_with_females\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = sum([10 * i - (6 * i - 6) for i in range(1, 8)]) + 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    # Calculate the common difference using the 10th and 15th term\n    term_10 = 23\n    term_15 = 38\n    common_difference = (term_15 - term_10) / (15 - 10)\n\n    # Calculate the 12th term using the common difference and the 10th term\n    term_12 = term_10 + common_difference * (12 - 10)\n\n    return term_12\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # Degree of monomial -x^3 y^(2n) = degree of x^3 + degree of y^(2n)\n    # Given that degree is 5\n    # 3 + 2n = 5\n    # 2n = 5 - 3\n    # 2n = 2\n    # n = 2 / 2\n    # n = 1\n    \n    n = (5 - 3) / 2\n    return int(n)\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n    cups = 45\n\n    total_milk = milk_per_cup * cups\n    total_tea = tea_per_cup * cups\n\n    total_amount = total_milk + total_tea\n\n    return total_amount\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    penny_score = 17\n    total_marks = 20\n\n    percentage = (penny_score / total_marks) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a book\n    price_of_book = symbols('price_of_book')\n\n    # Define the equation based on the problem statement\n    equation = Eq(8 * price_of_book + 3 * 0.40, 3 * price_of_book + 8 * 0.40 + 1.00)\n\n    # Solve the equation for the price of a book\n    solution = solve(equation, price_of_book)\n\n    # Return the price of a book\n    return solution[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    angela, bernice, candice = symbols('angela bernice candice')\n    \n    cost_per_gummy = 6  # pence\n    total_spent = 342  # pence (£3.42)\n    \n    equation1 = Eq(angela - bernice, 2)\n    equation2 = Eq(bernice - candice, 8)\n    equation3 = Eq(cost_per_gummy * (angela + bernice + candice), total_spent)\n    \n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n    \n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Since the median of an ordered list is the middle number,\n    # for a list with an even number of elements, \n    # it is the average of the two middle numbers.\n    # The median given is 20, which is the average of the 5th and 6th terms (n+7) and (n+8).\n    # (n+7 + n+8) / 2 = 20\n    # 2n + 15 = 40\n    # 2n = 25\n    # n = 12.5\n    n = 12.5\n\n    # Now we use the value of n to calculate the mean of the list.\n    # mean = sum of all terms / number of terms\n    all_terms = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    mean = sum(all_terms) / len(all_terms)\n    return mean\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let x be the weight of the lightest apple, y be the middle one, and z be the heaviest.\n    # Then we can write two equations based on the given information:\n    # Equation 1: (x + y) / 2 = 70 -> x + y = 140\n    # Equation 2: (y + z) / 2 = 105 -> y + z = 210\n\n    # We solve the two equations for y and z\n    from sympy import symbols, Eq, solve\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 140)\n    equation2 = Eq(y + z, 210)\n\n    # Solution for y and z in terms of x\n    solutions = solve((equation1, equation2), (y, z))\n    y_value = solutions[y]\n    z_value = solutions[z]\n\n    # Remember that the weight of the apples has to be a positive number\n    # Since z is the heaviest and x the lightest, then z - x should give us the weight difference\n    # z = 210 - y and y = 140 - x, so z - x = (210 - (140 - x)) - x = 210 - 140 + x - x = 70\n    weight_difference = z_value - x\n\n    return weight_difference\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    sum_of_numbers = 60\n    # Let the first number be n, so the other two are n+1 and n+2\n    # Their sum is n + (n+1) + (n+2) = 60\n    # Solve for n: 3n + 3 = 60\n    n = (sum_of_numbers - 3) // 3\n    # The largest number is n+2\n    largest_number = n + 2\n\n    return largest_number\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10\n    each_container_volume = 2\n    \n    num_containers = total_volume / each_container_volume\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    members_not_shaking = 4\n    remaining_members = total_members - members_not_shaking\n\n    # Total handshakes without the restrictions\n    total_handshakes = total_members * (total_members - 1) // 2\n\n    # Handshakes that did not happen between the 4 members who did not shake hands\n    handshakes_not_happened = members_not_shaking * (members_not_shaking - 1) // 2\n\n    # Handshakes between the remaining members and the 4 members who did not shake hands\n    handshakes_with_others = members_not_shaking * remaining_members\n\n    # Handshakes that did happen\n    handshakes_happened = total_handshakes - handshakes_not_happened - handshakes_with_others\n\n    return handshakes_happened\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # 'A' must be a two digit number since 1 * A = ABC is three digits\n    # and A * B = A, which implies B must be 1\n    # Therefore, C must also be a two digit number because A * C also gives a three digit number.\n    # Since A * 1 = A, it confirms that A is a two-digit number with distinct digits.\n    # By trial-and-error, you can find only two possible values for 'A' which are 12 and 21.\n    # Checking if they satisfy A * C = AC, where 'AC' is concatenated, we find only 21 satisfies.\n    # Hence, the value of A is 21\n    \n    A = 21\n    return A\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for i in range(1, 10):\n        if int(str(i) + '0') - i == 27:\n            return i\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    nth_term = 11\n\n    points_nth_student = first_term + (nth_term - 1) * common_difference\n\n    return points_nth_student\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Bob is always the 3rd in line no matter the direction\n    # This means the array has 2 rows/columns before and after Bob\n    # It also means the array must be a perfect square size\n    # Let n be the number of rows/columns (including the one Bob is in)\n    n = 3\n    # Calculate the total number of animals, which is n by n\n    total_animals = n * n\n\n    return total_animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2  # Nate's sister is 2 years older than Nate\n    return sister_age\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the height of each stack, y be the number of one-cent coins,\n    # z be the number of two-cent coins, and w be the number of five-cent coins\n    x, y, z, w = symbols('x y z w')\n\n    # Create equations based on the problem statement\n    # Height of one-cent coins equals height of two-cent coins\n    equation1 = Eq(6 * x, 5 * y)\n    # Height of one-cent coins equals height of five-cent coins\n    equation2 = Eq(4 * x, 3 * w)\n    # Total number of coins used\n    equation3 = Eq(y + z + w, 124)\n    # All stacks are of equal height\n    equation4 = Eq(y / 6, z / 5)\n    equation5 = Eq(y / 6, w / 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (x, y, z, w))\n\n    y_val = solutions[y]\n    z_val = solutions[z]\n    w_val = solutions[w]\n\n    # Calculate the total value of all coins in cents\n    total_value = y_val * 1 + z_val * 2 + w_val * 5\n\n    return total_value\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Calculate the total distance covered by the plum trees\n    total_distance_for_plum = (41 - 1) * 4\n    \n    # Calculate the number of pine trees along this distance\n    # since pine trees are at both ends, subtracting 5 is not necessary\n    num_pine_trees = (total_distance_for_plum // 5) + 1\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    return 245 // 5\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    # Smallest multiple of 11 greater than 100\n    smallest = (100 // 11 + 1) * 11\n    # Largest multiple of 11 less than 300\n    largest = (300 // 11) * 11\n    # Calculate the sum of the smallest and the largest\n    ans = smallest + largest\n    return ans\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total_salary = 4000 * 12\n    correct_total_salary = incorrect_total_salary - 2800 + 3040\n    correct_average_salary = correct_total_salary / 12\n    return correct_average_salary\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2*durian + 3*honeydew, 77)\n    equation2 = Eq(durian, 2*honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(17*x - 3*(6+x), 9*x + 32)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation = Eq(B, 2 * (A - 500))\n\n    # A had 350 mL more water than B\n    solutions = solve((equation, Eq(A, B + 350)), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    # Calculate the greatest possible number of red pens in the box\n    # under the constraint of having less than 100 pens in total.\n    max_red_pens = 0\n    for green_pens in range(1, 100):\n        blue_pens = (2/5) * green_pens\n        red_pens = green_pens / 4\n        total_pens = blue_pens + green_pens + red_pens\n        if total_pens < 100 and red_pens.is_integer() and blue_pens.is_integer():\n            max_red_pens = max(max_red_pens, red_pens)\n\n    return int(max_red_pens)\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    total_money = 200\n    spent_on_books = total_money * 0.25\n    remaining_after_books = total_money - spent_on_books\n    spent_on_DVD = remaining_after_books * 0.20\n    remaining_after_DVD = remaining_after_books - spent_on_DVD\n    return remaining_after_DVD\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m // 12\n\nans = solution(m)"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for num in range(999999, 99999, -1):\n        if str(num) == str(num)[::-1] and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n    \n    total_children_after_an_hour = initial_boys + initial_girls + children_joined\n    \n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    return 56 + 78 + 44 + 22\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83\n    shortage_cm = 10\n    shortage_m = shortage_cm / 100\n    garage_piece_length_m = desired_length_m - shortage_m\n    return garage_piece_length_m\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Quantity at the beginning is x\n    x = symbols('x')\n\n    # After giving away 3/8 to friends, m_1 marbles left\n    m_1 = x - (3/8) * x\n    \n    # After giving away 5/7 of the remaining to his brother, m_2 marbles left\n    m_2 = m_1 - (5/7) * m_1\n    \n    # His cousin gave him 408 marbles, so he has final number m_final marbles\n    m_final = m_2 + 408\n    \n    # In the end he had twice as many as he had at first\n    equation = Eq(m_final, 2 * x)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5, 3, 3, 2, 5]\n    sum_pattern = sum(pattern)\n    repeats, remainder = divmod(41, len(pattern))\n    sum_first_41 = repeats * sum_pattern + sum(pattern[:remainder])\n    return sum_first_41\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    result = (2 / 7) * 315\n    return result\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    total = 47\n    ways = 0\n\n    for two_p in range(0, total // 2 + 1):\n        for five_p in range(0, total // 5 + 1):\n            if 2 * two_p + 5 * five_p == total:\n                ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator_sequence = [9 + 10 + 11, 10 + 11 + 12, 11 + 12 + 13, 12 + 13 + 14]\n    denominator_sequence = [8, 9, 10, 11]\n\n    numerator = sum(numerator_sequence[i] / denominator_sequence[i] * (-1) ** i for i in range(4))\n    denominator = sum(1 / denominator_sequence[i] * (-1) ** i for i in range(4))\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    total_pins_needles = 2540\n    sold_pins = 1820\n    fraction_needles_sold = 4 / 5\n\n    # Calculate the remaining pins\n    remaining_pins = total_pins_needles - sold_pins\n\n    # Set up the equation for the needles based on the remaining pins\n    # If x is the number of needles, then the number of needles remaining is x - 4/5 * x = 1/5 * x\n    # And since the remaining pins equals the remaining needles:\n    # 1/5 * x = remaining_pins\n    # Solving for x gives us the total original number of needles\n    needles = remaining_pins * 5  # Dividing both sides by 1/5\n\n    # The needles left is the total needles minus the needles sold (4/5 of the needles)\n    needles_left = needles - fraction_needles_sold * needles\n\n    # Checking Paul's solution\n    pauls_workings = 455\n    if needles_left == pauls_workings:\n        is_paul_correct = True\n    else:\n        is_paul_correct = False\n\n    # If Paul is not correct, return the correct number of needles left\n    if not is_paul_correct:\n        return int(needles_left)\n\n    # If Paul's workings are correct, return his answer\n    return int(pauls_workings)\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Given Brian's age at 14, father's age is 41\n    # The next time Brian's age will be the reverse of father's age\n    # Let's try every year until the ages are reversed\n    \n    brian_age = 14\n    father_age = 41\n    \n    # Keep checking every subsequent year\n    while True:\n        # Increment their ages by 1 year\n        brian_age += 1\n        father_age += 1\n\n        # Reversing Brian's age to compare with father's age\n        if str(brian_age).zfill(2) == str(father_age)[::-1]:\n            break\n\n    return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "from math import comb\n\ndef solution():\n    # Since we cannot have zero apples in a pile and the piles must be different,\n    # we have to find the combinations of splitting 11 - 3 (for the minimum 1 apple per pile)\n    # among 3 piles such that no pile is the same, which is equivalent to partitioning\n    # 8 into 3 distinct parts, \n    # The equation is: x + y + z = 8, where x, y, z are distinct positive integers.\n    # We need to find all distinct solutions for x, y, z which is equivalent to\n    # finding the number of ways to place two separating walls between the 8 apples\n    # in a line (each division by a wall represents a pile), which is C(8-1, 3-1)\n    num_ways = comb(7, 2)\n    return num_ways\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    # Round off each number to the nearest hundred\n    rounded_654876 = round(654876, -2)\n    rounded_279745 = round(279745, -2)\n    \n    # Calculate the estimated difference\n    estimated_difference = rounded_654876 - rounded_279745\n    \n    return estimated_difference\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    n = 8\n    # Find all possible combinations of numbers that sum up to `n`\n    # Since we are required to have at least two terms in the sum, the maximum number we can have is n-1\n    combs = combinations_with_replacement(range(1, n), n-1)\n    count = 0\n    for comb in combs:\n        if sum(comb) == n:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_to_pass = 16  # in seconds\n    length_of_train = 480  # in meters\n    \n    speed = length_of_train / time_to_pass  # in meters per second\n    speed_in_kmh = speed * 3.6  # to convert meters per second to kilometers per hour\n    \n    return speed_in_kmh\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(range(1, 6)) + sum(range(1, 5))\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5kg = cost_per_kg * 3.5\n    return cost_for_3_5kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    return (2/5) * 30\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    ans = (5/8) * 4000\n    return ans\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    total_lampposts = 113\n    distance_between_lampposts = 8\n    total_distance = (total_lampposts - 1) * distance_between_lampposts\n    return total_distance\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n\n    percentage_failed = (failed_pupils / total_pupils) * 100\n\n    return percentage_failed\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = 0\n    for i in range(1, 51):\n        if '3' in str(i):\n            erased_sum += i\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pasta_choices = 4\n    sauce_choices = 3\n    topping_choices = 3\n\n    total_combinations = pasta_choices * sauce_choices * topping_choices\n\n    return total_combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # To find the number of attempts needed to match each key to the correct classroom\n    # in the worst-case scenario, we will use a process of elimination where each key is\n    # tried in each lock until it fits.\n    \n    # Starting with the first key, it could take at most 10 attempts to find the correct lock\n    # (since there are 10 locks).\n    \n    # The second key now has a maximum of 9 locks it could fit into.\n    \n    # This pattern continues, with the third key having at most 8 possible locks, and so on.\n    \n    # When we reach the last key, there will be only one lock left, so it will take just 1 attempt.\n    \n    # The total number of attempts is the sum of these maximum numbers.\n    \n    total_attempts = sum(range(1, 11)) # 1+2+3+...+10\n    \n    return total_attempts\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    guests = 153\n    poppers_per_bag = 12\n\n    bags_bought = (guests // poppers_per_bag) + (1 if guests % poppers_per_bag != 0 else 0)\n    poppers_left_in_the_last_bag = (bags_bought * poppers_per_bag) - guests\n\n    return poppers_left_in_the_last_bag\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # Any power of 7 will have a cycle for the ones digit: 7, 9, 3, 1\n    cycle = [7, 9, 3, 1]\n\n    # We have 2023 (a multiple of 7's), so we will locate the position in the cycle\n    position_in_cycle = (2023 - 1) % 4\n\n    # Get the ones digit from the cycle using the position we found\n    ans = cycle[position_in_cycle]\n    \n    return ans\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from sympy import Rational\n    from decimal import Decimal, ROUND_HALF_UP\n    \n    # Calculate the exact values\n    numerator = (Rational(-40, 3)**Rational(1, 3)) * (Rational(409, 99))**2\n    denominator = Rational(5924, 100) - (Rational(1000, 9)**Rational(1, 2))\n    \n    # Evaluate the expression as Rational for precision\n    expression = numerator / denominator\n    \n    # Convert to Decimal and round to the nearest 3 decimal places\n    ans = Decimal(expression.evalf()).quantize(Decimal('0.001'), rounding=ROUND_HALF_UP)\n    \n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    # The smallest number can be formed by removing numbers starting from the highest ones\n    # Let's first form the original number to know which digits to remove\n    original = ''.join(str(i) for i in range(1,31))\n    \n    # Remove the last 46 digits to get the smallest number\n    smallest = original[:-46]\n    \n    return int(smallest)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 5 == 3 and number % 6 == 2 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome can be constructed as\n    # 10001 (where the first and last digits are 1, and the middle one is 0)\n    least_5_digit_palindrome = int(\"10001\")\n\n    # The greatest 6-digit palindrome can be constructed as\n    # 999999 (where all digits are 9)\n    greatest_6_digit_palindrome = int(\"999999\")\n\n    # Calculate the difference\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    children_to_pick = 2\n    number_of_combinations = comb(total_children, children_to_pick)\n    return number_of_combinations\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    total_members = boys * 4  # Since boys are 1/4 of the club, multiply by 4 to get total\n    girls = total_members * 3 / 4  # Girls are 3/4 of the total members\n    return girls\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the price of one banana and one apple\n    banana_price, apple_price = symbols('banana_price apple_price')\n\n    # Ellie's purchase\n    ellie_eq = Eq(2 * banana_price + 3 * apple_price, 1.50)\n    # Beth's purchase\n    beth_eq = Eq(3 * banana_price + 2 * apple_price, 1.45)\n\n    # Solving the equations\n    prices = solve((ellie_eq, beth_eq), (banana_price, apple_price))\n\n    annabella_price = prices[banana_price] + prices[apple_price]\n\n    return float(annabella_price)\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    total_age_goal = 60\n    \n    # Since both Sara and Lucy age by 1 each year\n    # the difference in their ages stays the same.\n    # Thus we can solve for the number of years by setting up the equation:\n    # sara_age + years + lucy_age + years = total_age_goal\n    # 2 * years = total_age_goal - (sara_age + lucy_age)\n\n    years_until_total_age = (total_age_goal - (sara_age + lucy_age)) // 2\n\n    return years_until_total_age\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n    total_seats = (two_seater_benches * 2) + (three_seater_benches * 3)\n    return total_seats\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    payment = int(book_cost) + 1\n    change = payment - book_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    series = [99, -101, 103, -105, 107, -109, 111, -113, 115, -117, 119]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    mixed_number = 201 + 1/7\n    result = mixed_number / 8\n    A = result - 1/7\n\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    footballs, basketballs = symbols('footballs basketballs')\n\n    # origianlly, there were 2/5 as many footballs as basketballs\n    equation1 = Eq(footballs, (2/5) * basketballs)\n    # after selling 16 basketballs, there were 2/3 as many footballs as the remaining basketballs\n    equation2 = Eq(footballs, (2/3) * (basketballs - 16))\n\n    solutions = solve((equation1, equation2), (footballs, basketballs))\n\n    # total number of footballs and basketballs originally\n    total = solutions[footballs] + solutions[basketballs]\n\n    return total\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n\n    total_marshmallows = marshmallows_per_minute * minutes\n\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_current, younger_current = symbols('older_current younger_current')\n    \n    # Equation 1: older_current - younger_current = younger_current - 12\n    equation1 = Eq(older_current - younger_current, younger_current - 12)\n    \n    # Equation 2: older_current + (older_current - younger_current) = 27\n    equation2 = Eq(older_current + (older_current - younger_current), 27)\n\n    solutions = solve((equation1, equation2), (older_current, younger_current))\n\n    return solutions[older_current]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # To guarantee Rona has a pair of the same color, she needs to pick at least one glove of each color plus another glove\n    num_colors = 5\n    gloves_per_color = 1\n    gloves_to_ensure_pair = num_colors * gloves_per_color + 1\n    \n    return gloves_to_ensure_pair\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = (30 + 7) // 8 * 8  # Smallest multiple of 8 greater than or equal to 30\n    last_multiple = 82 // 8 * 8  # Largest multiple of 8 less than or equal to 82\n\n    if last_multiple < first_multiple:\n        return 0  # No multiples of 8 in the range.\n\n    number_of_multiples = (last_multiple - first_multiple) // 8 + 1\n\n    return number_of_multiples\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for the number of stickers Peter and Sam initially have\n    peter, sam = symbols('peter sam')\n\n    # Defining the equations based on the given problem\n    equation1 = Eq(sam, peter + 40)\n    equation2 = Eq(sam - 0.20 * sam, peter + 0.25 * (peter + 0.20 * sam) - 96)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (peter, sam))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    lines = 13\n    junctions = lines * (lines - 1) // 2\n    return junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    spring_festival_increase = original_price * 0.10\n    new_price_after_spring_festival = original_price + spring_festival_increase\n    lantern_festival_reduction = new_price_after_spring_festival * 0.10\n    price_during_lantern_festival = new_price_after_spring_festival - lantern_festival_reduction\n    return price_during_lantern_festival\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert the time spent into hours\n    time_spent = 7.2 / 60\n\n    # Relative speed when teacher is running towards the front (12 km/h - 8 km/h)\n    speed_towards = 12 - 8\n\n    # Relative speed when the teacher is running back to the end (12 km/h + 8 km/h)\n    speed_back = 12 + 8\n\n    # Let the distance the teacher covers while running towards the front be x km.\n    # Then the time taken to run towards the front is x / speed_towards.\n    # The distance the teacher covers running back to the end is also x km.\n    # And the time taken to run back is x / speed_back.\n    # Total time spent is the sum of the two times, which equals the total time spent:\n    # x / speed_towards + x / speed_back = time_spent\n\n    # We solve for x to find the length of the line.\n    # (x/speed_towards) + (x/speed_back) = time_spent\n    # x = time_spent / (1/speed_towards + 1/speed_back)\n\n    x = time_spent / (1/speed_towards + 1/speed_back)\n\n    return x\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Each group of 4 people play round-robin, which means each person plays with every other person in the group.\n    # Therefore, for a single group, there will be C(4, 2) matches (combinations of 4 taken 2 at a time).\n    group_games = 4 * (4 * 3) // 2  # 4 groups, each with 6 games\n    \n    # Knockout stage games\n    # Top 8 (Quarter-finals): 4 games\n    # Top 4 (Semi-finals): 2 games\n    # Top 2 (Finals): 1 game\n    # Third-place match: 1 game\n    knockout_games = 4 + 2 + 1 + 1\n    \n    total_games = group_games + knockout_games\n    return total_games\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    ans = 1.3 + 2.87 + 3.7\n    return ans\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    flora_age_now = 5\n    two_years_ago_factor = 9\n\n    # Let's denote Flora's father's age two years ago as x.\n    flora_age_two_years_ago = flora_age_now - 2\n    fathers_age_two_years_ago = symbols('x')\n\n    # Create an equation based on the information provided.\n    # Flora's father's age two years ago was 9 times Flora's age at that time.\n    equation = Eq(fathers_age_two_years_ago, two_years_ago_factor * flora_age_two_years_ago)\n\n    # Solve the equation to find Flora's father's age two years ago.\n    fathers_age_two_years_ago_solution = solve(equation, fathers_age_two_years_ago)\n\n    # Flora's father's current age is his age two years ago plus two.\n    fathers_current_age = fathers_age_two_years_ago_solution[0] + 2\n    \n    return fathers_current_age\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    for sweets in range(31, 40):\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            return sweets\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Let the distance from home to office be x km\n    # Late time in hours: 20 min = 20/60 = 1/3 hour\n    # Early time in hours: 10 min = 10/60 = 1/6 hour\n\n    # Speed 1 = 4 km/h, Speed 2 = 6 km/h\n    speed1 = 4\n    speed2 = 6\n\n    # time1 = time when traveling at speed1\n    # time2 = time when traveling at speed2\n\n    # Using the relation: distance = speed * time\n    # time1 = x / speed1\n    # time2 = x / speed2\n\n    # According to the problem statement:\n    # (x / speed1) - (x / speed2) = time when late - time when early\n    # (x / 4) - (x / 6) = (1/3) - (-1/6)\n\n    # Solving for x:\n    x = (1/3 - (-1/6)) / (1/speed1 - 1/speed2)\n\n    return x\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for num in range(8, 86):\n        count += str(num).count('3')\n    return count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        even_number = i * 2\n        count += str(even_number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    gbp_to_pence_conversion_rate = 100  # There are 100 pence in 1 pound\n    gbp_value_in_pounds = 1.25  # £1 was worth £1.25 on that day\n    \n    gbp_value_in_pence = gbp_value_in_pounds * gbp_to_pence_conversion_rate\n    \n    return gbp_value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    # Reverse Ken's action\n    ken_took = (remaining + 1) * 2\n    remaining += ken_took\n    \n    # Reverse Nini's action\n    nini_took = (remaining - 3) * 2\n    remaining += nini_took\n    \n    # Reverse Ivy's action\n    ivy_took = (remaining + 2) * 2\n    remaining += ivy_took\n    \n    # Reverse Eddie's action\n    eddie_took = (remaining - 1) * 2\n    starting_candy = remaining + eddie_took\n    \n    return starting_candy\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_climb = 7 * 5 + 3  # The snail climbs for 5 days and a different distance on the 6th day\n    total_days_to_climb = 18 - total_climb  # Remaining distance after 6th day\n    # Since the snail gets out on the 7th day, it slides down at night for 6 times\n    # We assume the snail slides s meters each night, so total slide during nights is 6 * s meters\n    # The total climb (including the 6th day) + 7th-day climb (without sliding down) = Total slid down + Total height\n    # (total_climb + 7) = 6 * s + 18\n    slide_down_at_night = (total_climb + 7 - 18) / 6\n\n    return slide_down_at_night\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    arrangements = set([''.join(p) for p in permutations('CYZZ')])\n    return len(arrangements)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    ans = 24 * 25 * 31\n    return ans\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all the measurements to centimeters\n    height_in_m = 5 * 100  # 5m in cm\n    height_in_cm = 120     # 120cm\n    height_in_mm = 50 / 10 # 50mm in cm\n    height_in_feet = 8 * 30.48 # 8 feet in cm (approximately)\n    \n    height_range = (100, 200) # reasonable height range for pupils in cm\n    \n    # Check which heights are within the range\n    correct_estimates = []\n    for height in [height_in_m, height_in_cm, height_in_mm, height_in_feet]:\n        if height_range[0] <= height <= height_range[1]:\n            correct_estimates.append(height)\n    \n    # Assuming only one correct answer is expected, we sort the list and\n    # return the first element to find the smallest possible height\n    if correct_estimates:\n        return sorted(correct_estimates)[0]\n    else:\n        return None\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # Let the number of boys be x\n    # Then the number of girls is 3x\n    # Each girl took 2 paintbrushes, so girls took 2 * 3x paintbrushes\n    # Each boy took 3 paintbrushes, so boys took 3 * x paintbrushes\n    # In total, they took 99 paintbrushes. So we get the equation:\n    # 2 * 3x + 3 * x = 99\n    \n    # Solving the equation for x\n    x = symbols('x')\n    equation = Eq(2 * 3 * x + 3 * x, 99)\n    num_boys = solve(equation, x)[0]\n    \n    # Now we can find the number of girls\n    num_girls = 3 * num_boys\n    \n    return num_girls\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "from math import gcd\n\ndef solution():\n    class_A = 12\n    class_B = 16\n    class_C = 20\n\n    # Finding the greatest common divisor (GCD) for the three classes\n    ans = gcd(gcd(class_A, class_B), class_C)\n\n    return ans\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    average_boys = 74\n    total_participants = total_boys + 12\n    average_total = 82\n    \n    # Calculate total score for boys\n    total_score_boys = total_boys * average_boys\n    \n    # Calculate total score for all participants\n    total_score_all = total_participants * average_total\n    \n    # Calculate total score for girls\n    total_score_girls = total_score_all - total_score_boys\n    \n    # Calculate the average score for girls\n    average_girls = total_score_girls / 12\n    \n    return average_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = -3\n    n_th_term = 15\n\n    n_th_value = first_term + (n_th_term - 1) * common_difference\n\n    return n_th_value\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    marked_caught_ratio = 25 / 200\n    total_caught = 100\n    estimated_total_fish = int(total_caught / marked_caught_ratio)\n\n    return estimated_total_fish\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    rabbits_initial = 12\n    days_initial = 15\n    rabbits_final = 20\n\n    # Calculate the total amount of rabbit-days that the food can feed\n    total_rabbit_days = rabbits_initial * days_initial\n\n    # Now find out how many days 20 rabbits could be fed\n    days_final = total_rabbit_days / rabbits_final\n\n    return days_final\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = sum(solutions.values())\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(girls + boys, 100)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_gift = 22\n    dress_cost = 56\n\n    total_money = susan_money + mother_gift\n    additional_money_needed = dress_cost - total_money\n\n    return additional_money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wake_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    start_breakfast = wake_up_time + timedelta(minutes=25)\n    finish_breakfast = start_breakfast + timedelta(minutes=10)\n    leave_for_school = finish_breakfast  # she leaves right after breakfast\n    arrive_school = leave_for_school + timedelta(minutes=35)\n    registration_time = arrive_school - timedelta(minutes=5)\n\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n    total_salt = salt_per_packet * packets\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    ans = 952 + 139\n    return ans\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_grams in range(0, 77 // 2 + 1):\n        for three_grams in range(0, 77 // 3 + 1):\n            if (2 * two_grams + 3 * three_grams) == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Define a helper function to calculate the square of the sum of an arithmetic series\n    def square_of_sum(n):\n        sum_of_series = (n * (n + 1)) // 2\n        return sum_of_series ** 2\n\n    # Use the provided identity for the sum of cubes\n    sum_cubes_1_to_20 = square_of_sum(20)\n    sum_cubes_1_to_9 = square_of_sum(9)\n    \n    # Calculate the sum of cubes from 10 to 20 by subtracting the sum of cubes from 1 to 9\n    # from the sum of cubes from 1 to 20\n    answer = sum_cubes_1_to_20 - sum_cubes_1_to_9\n    \n    return answer\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarters_in_one_dollar = 4\n    num_quarters = total_amount * quarters_in_one_dollar\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score_for_5_assignments = 90 * 5\n    total_known_scores = 96 + 85 + 89 + 92\n    score_on_fifth_assignment = total_score_for_5_assignments - total_known_scores\n\n    return score_on_fifth_assignment\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    num_cards = 0\n    while True:\n        num_cards += 1\n        if num_cards % 4 == 3 and num_cards % 5 == 4 and num_cards % 7 == 6:\n            return num_cards\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Equation for the total number of students\n    total_students_eq = Eq(boys + girls, 1690)\n\n    # Equation for the difference between boys and girls\n    boys_girls_difference_eq = Eq(boys - girls, 90)\n\n    # Calculate the number of boys and girls\n    students = solve((total_students_eq, boys_girls_difference_eq), (boys, girls))\n\n    # Extract the number of boys and girls from the solution\n    num_boys = students[boys]\n    num_girls = students[girls]\n\n    # Given ratio of girls who can swim and who cannot\n    girls_swim_ratio = 31\n    girls_cannot_swim_ratio = 49\n\n    # Calculate the number of girls who cannot swim\n    num_girls_cannot_swim = (girls_cannot_swim_ratio / (girls_swim_ratio + girls_cannot_swim_ratio)) * num_girls\n\n    # Number of boys who can swim is 120 less than the number of boys who cannot swim\n    # Let's say x is the number of boys who cannot swim, then (x - 120) is the number of boys who can swim\n    # Therefore:\n    # x + (x - 120) = num_boys\n    # This simplifies to:\n    # 2x - 120 = num_boys\n    # Solving for x we get:\n    x = symbols('x')\n    boys_cannot_swim_eq = Eq(2*x - 120, num_boys)\n    num_boys_cannot_swim = solve(boys_cannot_swim_eq, x)[0]\n\n    # Total number of pupils who cannot swim is the sum of boys and girls who cannot swim\n    num_pupils_cannot_swim = num_girls_cannot_swim + num_boys_cannot_swim\n\n    return int(num_pupils_cannot_swim)\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure at least 5 different colors with at least 10 pencils for each color,\n    # we must consider the worst-case scenario: drawing maximum number of pencils\n    # of the same color until we reach the desired condition.\n\n    # Step 1: We can draw 10 pencils of 4 different colors, none of them\n    # ensuring we get 5 different colors. This would be (10 * 4) pencils.\n    step1 = 10 * 4\n\n    # Step 2: In the worst-case scenario, we would need to draw 9 more pencils\n    # to guarantee that there's a fifth color among them.\n    step2 = 9\n    \n    # Total number of pencils drawn will be the sum of step 1 and step 2\n    ans = step1 + step2\n\n    return ans\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    capacity = 34\n    coaches = -(-pupils // capacity)  # Ceiling division\n\n    return coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    initial_ratio = Eq(4 * bud, 7 * pip)\n    new_ratio = Eq(8 * (bud + 5), 15 * pip)\n\n    solutions = solve((initial_ratio, new_ratio), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    total_wheats = 116\n    # Subtracting 4 because wheats at the corners are counted once each for both sides\n    interior_wheats = total_wheats - 4\n    \n    # Wheat are planted along the perimeter of the field\n    perimeter = 2 * (144 + 204)\n    \n    # Since wheats are evenly planted, we divide the total perimeter \n    # by the number of spaces between the wheats\n    # Number of gaps is one less than the number of interior wheats\n    distance = perimeter / (interior_wheats - 1)\n    \n    return distance\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5 = 5 ** 20 % 10\n    last_digit_7 = 7 ** 30 % 10\n    ans = (last_digit_5 * last_digit_7) % 10\n    return ans\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    # List of prime numbers less than 45\n    primes = [\n        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43\n    ]\n\n    # Initialize the sum\n    prime_sum = 0\n\n    # Go through every combination of three different primes\n    for A in primes:\n        for B in primes:\n            for C in primes:\n                if A != B and B != C and A != C:\n                    # Implementing the clues given in the conversation\n                    # Clue 1: They cannot form a correct addition equation A + B != C and permutations of this\n                    if A + B != C and A + C != B and B + C != A:\n                        # Clue 2: If B subtracts 1 from his number, the difference of A and C is 7.\n                        if abs(A - C) == 7 and B - 1 != A and B - 1 != C:\n                            # Clue 3 & 4: If you multiply C by 2, the three numbers create a valid addition equation.\n                            if (C * 2 == A + B) or (C * 2 == B + A):\n                                prime_sum = A + B + C  # The sum of the three prime numbers\n\n    return prime_sum\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    cloth1_length = 39\n    cloth2_length = 52\n    \n    ans = gcd(cloth1_length, cloth2_length)\n    return ans\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let us assume A is the point for grade A and B is the point for grade B\n    A, B = symbols('A B')\n    \n    # Simon's equation: 4*A (points for A grades) + 4*B (points for B grades) = 36\n    eq1 = Eq(4*A + 4*B, 36)\n    # Peter's equation: 2*A (points for A grades) + 3*B (points for B grades) = 22\n    eq2 = Eq(2*A + 3*B, 22)\n    \n    # Solving the two equations to find the values of A and B\n    solutions = solve((eq1, eq2), (A, B))\n\n    # Calculate the points score for someone with three A grades and five B grades using the found values\n    score = 3*solutions[A] + 5*solutions[B]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    joe_chocolate = 16\n    shared_with_friend = 2\n    joe_squares = joe_chocolate // shared_with_friend\n    return joe_squares \n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    return 999 / 2\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_position_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # Assigning values based on the conditions given\n    A = 2        # Smallest prime number\n    B = 4        # Smallest composite number\n    C = 1        # Neither prime nor composite (considering 1)\n    D = A - 2    # 2 less than smallest prime number (0 is not a digit in phone number)\n    E = 9        # Largest composite number up to 10\n    F = 5        # Number with only factors 1 and 5\n    G = 4        # Greatest factor of 8, except itself\n    H = 6        # Lowest multiple of 6\n\n    # Concatenating the digits to form the phone number\n    phone_number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n\n    return phone_number\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the original amounts\n    marry_initial, alexis_initial, charlotte_initial = symbols('marry_initial alexis_initial charlotte_initial')\n    \n    # Marry and Alexis give 20% of their stickers to Charlotte\n    marry_gives = 0.20 * marry_initial\n    alexis_gives = 0.20 * alexis_initial\n    charlotte_final = charlotte_initial + marry_gives + alexis_gives\n    \n    # Charlotte's stickers increase by 80%\n    charlotte_increase = 0.80 * charlotte_initial\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(charlotte_final, charlotte_initial + charlotte_increase)\n    equation2 = Eq(marry_initial - marry_gives, charlotte_final + 20)\n    equation3 = Eq(marry_initial, 7/5 * alexis_initial)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (marry_initial, alexis_initial, charlotte_initial))\n\n    return solutions[alexis_initial]\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    before = 322 - 60 + 42\n    return before\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    day_seconds = 24 * 60 * 60\n    fraction_of_day = (1/4) * (1/6) * (1/8)\n    seconds = day_seconds * fraction_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "from math import factorial\n\ndef solution():\n    family_members = 3  # Eddie, his mom, and his dad\n    other_people = 3  # Total people excluding Eddie's family\n    total_people = family_members + other_people\n\n    # Treat Eddie's family as one unit first, then there are\n    # other_people + 1 units to arrange\n    total_arrangements_as_unit = factorial(other_people + 1)\n\n    # Within Eddie's family, there are family_members! ways to arrange\n    family_arrangement = factorial(family_members)\n\n    # Total ways to line up is the product of both arrangements\n    total_ways = total_arrangements_as_unit * family_arrangement\n\n    return total_ways\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    return 34 * 100\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "def solution():\n    from math import factorial\n\n    # There are 3 twos and 2 threes, for a total of 5 digits\n    total_digits = 5\n    # Calculate the factorial of the total number of digits\n    total_permutations = factorial(total_digits)\n    # Since we have repeating digits, we need to divide by the factorial of the count of each digit\n    # There are 3 repeating '2's and 2 repeating '3's\n    count_2 = 3\n    count_3 = 2\n    \n    # Adjust permutations for repeating digits\n    permutations_with_repeats = total_permutations // (factorial(count_2) * factorial(count_3))\n    \n    # Subtract the number of permutations starting with '0' which are not valid four-digit numbers\n    # Here, treat one '2' as if it were '0' and calculate permutations for it being at the start\n    permutations_starting_with_zero = factorial(total_digits - 1) // (factorial(count_2 - 1) * factorial(count_3))\n    \n    # The valid four-digit numbers are those not starting with the supposed '0'\n    valid_permutations = permutations_with_repeats - permutations_starting_with_zero\n    \n    return valid_permutations\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for a in range(1, 10): # Thousands (and units) digit from 1 to 9 (can't be 0)\n        for b in range(0, 10): # Tens digit from 0 to 9\n            for c in range(0, 10): # Hundreds digit from 0 to 9\n                pip_number = a*1000 + c*100 + b*10 + a\n                bud_number = a*1000 + b*100 + c*10 + a\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Total amount of grass needed for 25 cows for 10 days\n    grass_for_25_cows_10_days = 25 * 10\n\n    # Total amount of grass needed for 15 cows for 20 days\n    grass_for_15_cows_20_days = 15 * 20\n\n    # Since both scenarios use up all the grass, they are equal\n    # Thus, total amount of grass can be represented as grass_for_25_cows_10_days\n    # Now we calculate how many cows can be fed for 50 days using the same total amount of grass\n    cows_for_50_days = grass_for_25_cows_10_days / 50\n\n    return cows_for_50_days\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    pages_total = 95\n    days = 0\n    while pages_total > 0:\n        days += 1\n        pages_total -= days\n    return days\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, solve\n\n    oranges, lemons = symbols('oranges lemons', integer=True)\n    \n    # initial ratio\n    equation1 = (oranges / lemons) - (3 / 5)\n    \n    # final ratio after selling oranges\n    equation2 = ((oranges - 48) / lemons) - (1 / 2)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    mistaken_minuend = 116\n    mistaken_difference = 81\n    correct_minuend = 166\n    subtrahend = mistaken_minuend - mistaken_difference\n    correct_difference = correct_minuend - subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3  # since the first day is 1/3 of the second day\n    third_day = (5 / 3) * second_day  # since the third day is 5/3 of the second day\n\n    total_sold = first_day + second_day + third_day\n    return total_sold\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # There are 3 categories of books: Maths (M), English (E), Others (O)\n    # Since Maths books (M) have to be together, consider M as a single unit.\n    # Similarly, consider E as a single unit.\n    # Now, we have M, E, and 3 O units (total 5 units) to arrange.\n    # These can be arranged in 5! ways.\n\n    units_arrangement = factorial(5)\n\n    # However, within the Maths unit, three maths books can be arranged among themselves in 3! ways.\n    # Similarly, within the English unit, two English books can be arranged in 2! ways.\n\n    maths_arrangement = factorial(3)\n    english_arrangement = factorial(2)\n\n    # The total arrangements are the product of arrangements for the units and within-the-unit arrangements.\n    \n    total_arrangements = units_arrangement * maths_arrangement * english_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.30\n    member_discount = 100\n    sales_tax = 0.10\n\n    discounted_price = original_price * (1 - discount)\n    member_price = discounted_price - member_discount\n    final_price = member_price * (1 + sales_tax)\n\n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1  # Including Judy herself\n\n    total_people = people_in_front + judy + people_behind\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    cakes_with_flour = 250 / flour_per_cake\n    return int(cakes_with_flour)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    combined_rate = ivy_rate + kevin_rate\n\n    # The amount of work completed by the end of the 12th day\n    total_work_done = combined_rate * 12\n\n    # Since Ivy is working alone when Kevin takes days off, we can find out for how many days she would work alone by dividing the remaining work (job is 1 in terms of work done) by her rate of work per day\n    days_ive_works_alone = (1 - total_work_done) / ivy_rate\n\n    # The number of days Kevin takes off is the difference between the overall timeline (12 days) and the days Ivy works alone.\n    kevin_days_off = 12 - days_ive_works_alone\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of diamonds Ophelia originally had\n    x = symbols('x')\n\n    # Penelope originally had x/4 diamonds\n    # After buying 21 more, Penelope had x/4 + 21 diamonds\n    # This number is 5/8 of the number of diamonds Ophelia has, which is x\n    # So we have the equation: x/4 + 21 = (5/8) * x\n    equation = Eq(x / 4 + 21, (5 / 8) * x)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # The number of diamonds Ophelia has is the solution for x\n    return solution[0]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    missing_number = (20 * 8) / 32\n    return missing_number\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Cindy needs to guarantee she gets at least one pair of the same colour socks.\n    # According to the Pigeonhole Principle, the worst-case scenario happens when she picks different colours.\n    # With 2 different colours, she can pick 5 socks to ensure she has at least one pair of the same colour.\n    \n    # She could draw:\n    # 1st sock - black or red\n    # 2nd sock - the opposite colour of the 1st, black if the 1st red, red if the 1st black\n    # 3rd sock - can again be of the opposite colour of the 1st and 2nd\n    # 4th sock - can still be of the opposite colour\n    # 5th sock - must now be the same colour as one of the previous since there are only two colours.\n    \n    # Therefore, Cindy needs to draw 5 socks to be sure she has a pair.\n    return 5\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    total_statues = 9\n    statues_to_arrange = 4\n\n    # The number of ways to arrange \"statues_to_arrange\" out of \"total_statues\" is given by P(n, k) = n! / (n-k)!\n    ways_to_arrange = factorial(total_statues) // factorial(total_statues - statues_to_arrange)\n\n    return ways_to_arrange\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # in pence\n    new_price = 100      # converted from £1.00 to pence\n    price_increase = new_price - original_price\n    percentage_increase = (price_increase / original_price) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    cost_of_bracelet = 80\n    gst_rate = 8 / 100\n    total_cost = cost_of_bracelet * (1 + gst_rate)\n    return total_cost\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of bicycles and y be the number of tricycles\n    x, y = symbols('x y')\n\n    # Every bicycle has 2 wheels and every tricycle has 3 wheels\n    # The total number of cycles is 300\n    equation1 = Eq(x + y, 300)\n    # The total number of tricycle wheels is 180 more than the total number of bicycle wheels\n    equation2 = Eq(3*y, 2*x + 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # Define the repeat pattern length and the count of grey rabbits\n    repeat_length = 1 + 2 + 2  # black + white + grey\n    grey_rabbits = 14\n\n    # Calculate the number of repeat patterns required to get 14 grey rabbits\n    patterns = grey_rabbits // 2\n\n    # Calculate the total number of rabbits\n    total_rabbits = patterns * repeat_length\n\n    # If there is an additional incomplete pattern, add the remaining rabbits\n    if grey_rabbits % 2 != 0:\n        total_rabbits += 1 + 2  # adding one black and two white rabbits\n\n    return total_rabbits\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    approximate_depreciation = 0.8154\n\n    value_after_years = initial_value * (1 - depreciation_rate) ** years\n\n    return round(value_after_years, 2)\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    divisor = 27 + 1  # Dividend is at least one more than quotient to have a remainder\n    remainder = 9\n    dividend = divisor * 27 + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = 2015 * 2015 - 2016 * 2014\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    neither_chocolate_nor_foil = 9\n    \n    only_foil = foil_wrappers - chocolate_with_foil\n    all_chocolate = total_biscuits - neither_chocolate_nor_foil - only_foil\n    \n    return all_chocolate\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    return 3.5 * 0.8 + 5.5 * 0.8 + 4 / 5 * 1\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, v be the original speed, t be the original time\n    d, v, t = symbols('d v t', positive=True, real=True)\n\n    # First scenario: Increasing speed by 25%, decreasing time by 20 min\n    # New speed is 1.25v, new time is t - 20 minutes\n    # d = 1.25v * (t - 20)\n    equation1 = Eq(d, 1.25 * v * (t - 20/60))\n\n    # Second scenario: Decreasing speed by 45 meters per minute, increasing time by 75%\n    # New speed is v - 45, new time is 1.75t\n    # d = (v - 45) * 1.75t\n    equation2 = Eq(d, (v - 45) * 1.75 * t)\n\n    # From the original relationship: d = v*t\n    equation3 = Eq(d, v * t)\n\n    # Solve the system of equations for d\n    solutions = solve((equation1, equation2, equation3), (d, v, t))\n\n    # Distance is d, which should be the same in all equations\n    return solutions[d]\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number_with_decimals = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number_with_decimals, 1)\n    \n    tongtong_correct = rounded_number == 9764.0\n    return rounded_number if not tongtong_correct else tongtong_correct\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    total_amount = 398\n    quarter = total_amount / 4\n    return quarter\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # the number of crystals Jason had originally\n\n    # Equation representing the problem\n    equation = Eq((x / 2) + 10 + 20 - 14, x - 35)\n\n    # Solve the equation\n    initial_crystals = solve(equation, x)\n\n    return initial_crystals[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # The number of zeros at the end of a product is determined by how many 10s are in its prime factorization,\n    # since 10 = 2 * 5. To count the zeros, we need to count the pairs of 2 and 5 in the prime factors of A.\n\n    # A consists of 15 fives and 10 twos (since 5 and 2 are already prime, they are their own prime factors).\n    # Every zero at the end of A requires a pair of a single 2 and a single 5.\n\n    # Since we have more fives (15) than twos (10), the number of pairs (and thus the number of trailing zeros)\n    # will be limited by the number of twos.\n\n    # There are 10 twos, so there will be 10 pairs of 2 and 5, which means A will end with 10 zeros.\n    num_zeros = min(15, 10)\n\n    return num_zeros\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    olaf, anna = symbols('olaf anna')\n    \n    # Initial condition, Olaf had thrice as many carrots as Anna\n    equation1 = Eq(olaf, 3 * anna)\n    \n    # After giving away 335 carrots, Anna had twice as many carrots as Olaf\n    equation2 = Eq(anna, 2 * (olaf - 335))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (olaf, anna))\n    \n    return solutions[anna]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    digit_permutations = permutations(digits, len(digits))\n    count = 0\n    for perm in digit_permutations:\n        for i in range(1, len(perm)):  # positions where the decimal can be placed\n            count += 1\n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_and_bala = 2  # Ali and Bala themselves\n    \n    total_people = people_in_front_of_ali + ali_and_bala + people_behind_bala\n\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n    \n    blue_dodges = blue_cars - (total_cars - black_dodges - fords)\n    blue_fords = blue_cars - blue_dodges\n    \n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    plant_cost_pence = 85  # cost in pence\n    budget_pounds = 30  # budget in pounds\n    budget_pence = budget_pounds * 100  # converting budget to pence\n\n    number_of_plants = budget_pence // plant_cost_pence  # using floor division to get the maximum number of plants that can be bought\n\n    return number_of_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    # Let the numbers be x and y, and let x be the smaller number.\n    # The sum of the two numbers is 80: x + y = 80\n    # The difference of the two numbers is 40: x - y = -40\n    # We need to solve these two equations to find the value of x.\n\n    x_plus_y = 80\n    x_minus_y = -40\n\n    # Adding the two equations, we get: \n    # (x + y) + (x - y) = 80 + (-40)\n    # 2x = 40\n    x = (x_plus_y + x_minus_y) / 2\n\n    return x\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "from sympy import isprime\n\ndef solution():\n    num = 4\n    while True:\n        if all(not isprime(num + i) for i in range(4)):\n            ans = sum(num + i for i in range(4))\n            break\n        num += 1\n    return ans\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    ans = 7.73 - 7.53\n    return round(ans, 2)\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    num = 5\n    while True:\n        if num % 7 == 1:\n            return num\n        num += 11\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    daily_earnings = 120\n    days_worked = 5  # Monday to Friday\n\n    total_earnings = daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    # Since each child gets at least one apple, we distribute one apple to each child first\n    apples_after_distribution = total_apples - children\n    # Now distribute remaining apples one by one to each child to minimize the maximum\n    # apples any child has. In this case, there will be at least one child who will get\n    # apples_after_distribution // children + 1 apples.\n    least_possible_max_apples = apples_after_distribution // children + 1\n\n    return least_possible_max_apples\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    total_balls = 8 + 10 + 13  # Total balls of all colors\n    # The magician must pick at least one more than the total number of balls \n    # minus the number of each color because in the worst case, he might pick \n    # all but one color. So the +1 ensures he gets at least one of each color.\n    min_picks = total_balls - min(8, 10, 13) + 1\n    \n    return min_picks\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    marks_per_correct = 3\n    marks_deducted_per_wrong = -2\n    total_marks = 125\n    \n    # Let x be the number of questions answered correctly\n    # Then total_questions - x is the number of questions answered incorrectly\n    # We can form an equation based on the total marks scored\n    # 3*x + (-2)*(total_questions - x) = total_marks\n    # Simplifying this, we can solve for x\n    x = (total_marks + 2 * total_questions) / (marks_per_correct + abs(marks_deducted_per_wrong))\n\n    return int(x)\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    result = (3/8) * 960\n    return result\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    total_counts = 30\n    stopping_number = 10\n    clock_numbers = 12\n\n    # When Eddie counts to 30, he basically counts (30 % 12 = 6) past the starting point\n    # because every 12 counts he completes a full circle and starts over\n    steps_past_starting = total_counts % clock_numbers\n\n    # If Eddie stops at 10, he must have started at (10 - 6) o'clock.\n    # We need to adjust in case this calculation falls below 1, since clock numbers are from 1 to 12.\n    starting_number = (stopping_number - steps_past_starting)\n    if starting_number <= 0:\n        starting_number += clock_numbers\n\n    return starting_number\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]  # Starting with the given sequence\n\n    # Generate the sequence up to the 2011th element\n    for _ in range(2, 2011):\n        next_num = (sequence[-1] + sequence[-2]) % 10  # Get the last digit of sum\n        sequence.append(next_num)\n\n    return sequence[2010]  # Return the 2011th element, index is 2010 due to zero-indexing\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds_of_number = 24\n    number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    k, m = symbols('k m', integer=True)\n    # Sum of an arithmetic series: n/2 * (first_term + last_term)\n    equation = Eq(m**2, k/2 * (23 + (2*k - 1)))\n    # Since k > 30, we add this constraint \n    solutions = solve((equation, k > 30), (k, m))\n    \n    # filter m values which are integer\n    solutions = [sol for sol in solutions if sol[m].is_integer]\n    \n    ans = solutions[0][m]  # select the valid m from the solutions\n\n    return ans\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Distance covered in the first 2 hours.\n    distance_first_part = 2 * 40\n\n    # Remaining distance.\n    distance_remaining = 280\n\n    # Time taken to cover the remaining distance.\n    time_remaining = distance_remaining / 70\n\n    # Total distance covered.\n    total_distance = distance_first_part + distance_remaining\n\n    # Total time taken.\n    total_time = 2 + time_remaining\n\n    # Average speed for the whole trip.\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n\n    num1 = 60\n    num2 = 72\n    num3 = 84\n\n    # GCD of num1 and num2\n    gcd_1_2 = gcd(num1, num2)\n    \n    # GCD of (GCD of num1 and num2) and num3\n    ans = gcd(gcd_1_2, num3)\n    \n    return ans\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Bob has $15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    \n    # Colin gives Bob $25 cards.\n    # After receiving the cards, Bob has $3 times as many as Alan.\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    remainder_product = (423 % 4) * (326 % 4)\n    ans = remainder_product % 4\n    return ans\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    savings_duration = 7  # one week has 7 days\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_savings = original_amount + (daily_savings * savings_duration) - lent_to_brother - spent_on_snacks\n    \n    return total_savings\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_visitors = symbols('total_visitors')\n    men = 0.37 * total_visitors\n    children = (total_visitors - men) * 4 / 9\n    women = (total_visitors - men) * 5 / 9\n    equation = Eq(men - children, 12)\n\n    total_visitors_solution = solve(equation, total_visitors)\n\n    # Using the first (and only) solution for total visitors\n    total_visitors_num = total_visitors_solution[0]\n    women_num = (total_visitors_num - men.subs(total_visitors, total_visitors_num)) * 5 / 9\n\n    return int(women_num)\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    parts_per_cow_per_day = 1\n    cows = 5\n    days = 3\n\n    total_parts_eaten = parts_per_cow_per_day * cows * days\n\n    return total_parts_eaten\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for price per banana and apple\n    b, a = symbols('b a')\n\n    # Set up equations based on the given information\n    equation1 = Eq(2 * b + 3 * a, 3)\n    equation2 = Eq(3 * b + 2 * a, 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, a))\n\n    # Calculate the total cost for Annabella\n    total_cost = 10 * solutions[b] + 10 * solutions[a]\n\n    return total_cost.evalf()\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # equation representing the amount of oil left in the big bucket\n    equation1 = Eq((89 - x), 12 * (45 - x))\n\n    # solve the equation for x\n    solution = solve((equation1), (x))\n\n    return solution[x]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n\n    # Probability that neither train is late\n    prob_neither_late = (1 - prob_to_work_late) * (1 - prob_home_late)\n    \n    # Probability that at least one train is late\n    prob_at_least_one_late = 1 - prob_neither_late\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    ans = 6.6 + 13.5\n    return ans\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    initial_strawberries = 86\n    given_away = 29\n    final_count = 100\n\n    strawberries_received = final_count - (initial_strawberries - given_away)\n    \n    return strawberries_received\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # Numbers from 10 to 99 inclusive\n    without_sixes = 8 * 8  # Options for tens place (1-9 except 6) and ones place (0-9 except 6)\n    at_least_one_six = total_two_digit_numbers - without_sixes\n    return at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime('1/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    days_off = (end_date - start_date).days + 1\n\n    return days_off\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_squared = (2023 ** 2) % 10\n    last_digit_2_power_2023 = (2 ** 2023) % 10\n    sum_last_digit = (last_digit_2023_squared + last_digit_2_power_2023) % 10\n    ans = (sum_last_digit ** 3) % 10\n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    relative_speed = speed_a + speed_b\n    \n    meeting_time = distance / relative_speed\n    \n    return meeting_time\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    num_lines = 13\n    max_intersections = num_lines * (num_lines - 1) // 2\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5 = 5 ** 20 % 10\n    last_digit_7 = 7 ** 20 % 10\n\n    ans = (last_digit_5 * last_digit_7) % 10\n    return ans\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    AB = CD = 14  # Length of the straight lines\n    radius_quadrant = AB / 2  # Radius of the quadrant\n    radius_semicircle = CD  # Radius of the semicircle\n\n    pi = 22 / 7  # Value of pi\n\n    # Perimeter of the 2 quadrants (half the circumference of a circle)\n    P_quadrants = 2 * (pi * radius_quadrant)\n\n    # Perimeter of the 2 semicircles (total circumference of 1 circle)\n    P_semicircles = pi * radius_semicircle\n\n    # Total perimeter considering 2 identical quadrants and 2 semicircles\n    perimeter = AB + CD + P_quadrants + P_semicircles\n\n    return perimeter\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n\n    pencils = 28\n    pens = 63\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    # We let x be the total number of watermelons Helen had at the beginning.\n    # From the problem, we know that after selling 1/3 on the first day,\n    # she was left with 2/3 of the watermelons.\n\n    # After selling 3/5 of the remaining watermelons on the second day, she had\n    # (2/3 - 3/5 * 2/3) = (2/3 * 2/5) of the watermelons left, which is 48 watermelons.\n    # So, we can set up the following equation: (2/3 * 2/5) * x = 48\n\n    # This simplifies to (4/15) * x = 48\n    # Solving for x gives us x = 48 * (15/4)\n    x = 48 * (15/4)\n    return int(x)  # Return the number of watermelons as an integer\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    return 2.99 + 12.99 + 22.99\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3*5*7  # the least common multiple of 3, 5, and 7\n    for i in range(10, 100):\n        if (600 + i) % lcm == 0:\n            return 600 + i\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    ways = comb(10, 6)\n    return ways\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pasta_cost = 95  # cost of one packet of pasta in pence\n    total_cost_pence = 1170  # total cost in pence\n    rice_packets = 5  # number of rice packets\n\n    # Let's denote the cost of one packet of rice as 'rice_cost'\n    rice_cost = symbols('rice_cost')\n\n    # Total cost is the sum of the cost of pasta packets and rice packets\n    total_pasta_cost = 6 * pasta_cost\n    total_rice_cost = rice_packets * rice_cost\n\n    # Equation: total cost of pasta and rice is equal to the total amount spent\n    equation = Eq(total_pasta_cost + total_rice_cost, total_cost_pence)\n\n    # Solve for the price of one rice packet\n    solution_rice_cost = solve(equation, rice_cost)\n\n    return solution_rice_cost[0]\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = 0.30 * (2/3) * 45\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    right_side = 3 * 9 + 5 * 9\n    B = right_side / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    total_sum = 1650\n    number_of_terms = 15\n    \n    # Since the numbers are consecutive, the average is the total sum divided by the number of terms\n    average = total_sum / number_of_terms\n    \n    # To find the middle number, we use the formula of the average for consecutive numbers: average = (smallest + largest) / 2\n    # Thus, middle_number = average. The smallest number is (middle_number - 7), and the largest is (middle_number + 7), since we have 15 consecutive numbers\n    middle_number = average\n    smallest_number = middle_number - 7\n    largest_number = middle_number + 7\n    \n    return smallest_number + largest_number\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    from sympy import symbols, Rational, Eq, solve\n\n    a, b, c = symbols('a b c', integer=True)\n\n    # Set up the complex fraction equation\n    equation = Eq(1 + 1 / (a + 1 / (b + 1 / c)), Rational(13, 10))\n\n    # Solve for valid values of a, b, c\n    solutions = solve(equation, (a, b, c))\n\n    # Filter non-negative integer solutions\n    valid_solutions = [sol for sol in solutions if all(map(lambda x: x.is_integer and x > 0, sol))]\n\n    # Assuming there is only one valid solution, calculate a + 2b + 3c\n    a_val, b_val, c_val = valid_solutions[0]\n    result = a_val + 2 * b_val + 3 * c_val\n    \n    return result\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    # Start from the smallest common multiple of 4 and 6, which is 12\n    # Since the task is to find the smallest number, we start from 12 and check if it's divisible by 4 and 6\n    smallest_pies = 12\n    while not (smallest_pies % 4 == 0 and smallest_pies % 6 == 0):\n        smallest_pies += 1\n    return smallest_pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    # If it takes the energetic painter 20 days to paint the house alone\n    # then his work rate is 1/20 of the house per day.\n    energetic_rate = 1 / 20\n    \n    # If together they paint the house in 12 days,\n    # then their combined work rate is 1/12 of the house per day.\n    combined_rate = 1 / 12\n    \n    # To find the lazy painter's work rate, we subtract the energetic painter's rate from the combined rate.\n    lazy_rate = combined_rate - energetic_rate\n    \n    # The number of days it takes the lazy painter to paint the house alone is the inverse of his work rate.\n    lazy_days = 1 / lazy_rate\n    \n    return lazy_days\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n    total_girls = (total_boys / boys_to_girls_ratio)\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    # Since we want to count oddtastic numbers up to 999, we have 1, 2, or 3 digit numbers to consider\n    count = 0\n    \n    # Counting the single digit oddtastic numbers (1, 3, 5, 7, 9)\n    single_digits = 5  # There are five odd digits\n    count += single_digits\n    \n    # Counting the two digit oddtastic numbers \n    two_digits = single_digits * single_digits  # Each place can be any of the 5 odd digits\n    count += two_digits\n    \n    # Counting the three digit oddtastic numbers\n    three_digits = single_digits * single_digits * single_digits  # Each place can be any of the 5 odd digits\n    count += three_digits\n    \n    return count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # Since a divided by 8 has a remainder of 6, we can represent a as 8k + 6 for some integer k.\n    # Similarly, b can be represented as 8m + 7 for some integer m.\n    # Adding a and b, we get (8k + 6) + (8m + 7) which simplifies to 8(k + m) + 13.\n\n    # Dividing the sum by 8, we get 8(k + m + 1) + 5, so the remainder will be 5 when (a + b) is divided by 8.\n    remainder = 5\n    return remainder\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    skirts = 8\n    blouses = 2\n\n    cloth_used_for_skirts = cloth_per_skirt * skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = round(remaining_cloth / blouses, 1)\n\n    return cloth_per_blouse\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    digit_str = \"\"\n    number = 1\n    while len(digit_str) < 2019:\n        digit_str += str(number)\n        number += 1\n    ans = int(digit_str[2018])\n    return ans\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # In the worst case scenario, the security guard will find the correct key for the first room \n    # in the last key he tries for that room, the second room in the last key for that room (excluding the key found for \n    # the first room) and so on until the second last room. The last room's key will be identified by elimination,\n    # so we do not need to try it.\n    \n    # Number of keys\n    n = 11\n    \n    # Total number of attempts in the worst case scenario\n    ans = 0\n    for i in range(n-1):\n        ans += (n - i)\n    return ans\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, bernice, cindy = symbols('alice bernice cindy')\n    \n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n    \n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the problem (remainder, modulus)\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    n, _ = solve_congruence(*congruences)\n\n    return n\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef solution():\n    digits = '22233'\n    num_digits = len(digits)\n    unique_digits = set(digits)\n    counts = {digit: digits.count(digit) for digit in unique_digits}\n    \n    num_permutations = factorial(num_digits)\n    for count in counts.values():\n        num_permutations //= factorial(count)\n        \n    # Exclude numbers that start with zero\n    num_permutations -= factorial(num_digits - 1) // (factorial(counts['2'] - 1) * factorial(counts['3']))\n    \n    return num_permutations\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n    new_price = original_price * (1 + increase_percentage / 100)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    people = 1 + 3 + 4  # Mary + 3 brothers + 4 sisters\n    eggs = people * (people - 1)  # each person buys an egg for every other person\n    return eggs\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import datetime\n\n    start_time = datetime.strptime(\"7:50\", \"%H:%M\")\n    end_time = datetime.strptime(\"8:40\", \"%H:%M\")\n\n    journey_duration = end_time - start_time\n\n    ans = int(journey_duration.total_seconds() / 60)\n\n    return ans\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one apple and one banana\n    cost_apple, cost_banana = symbols('cost_apple cost_banana')\n\n    # Set up the equations based on the given problem\n    equation1 = Eq(3 * cost_apple + cost_banana, 32)\n    equation2 = Eq(6 * cost_apple + cost_banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_apple, cost_banana))\n\n    return solutions[cost_banana]\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # total mass in kilograms\n    basket_mass_kg = 500 / 1000  # converting basket mass from grams to kilograms\n    kitten_mass_kg = 0.6  # mass of each kitten in kilograms\n    number_of_kittens = 4  # number of kittens\n    \n    # Calculate the total mass of the kittens\n    total_kittens_mass_kg = number_of_kittens * kitten_mass_kg\n    \n    # Calculate the mass of the cat\n    cat_mass_kg = total_mass_kg - basket_mass_kg - total_kittens_mass_kg\n    \n    return cat_mass_kg\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # Calculate the differences between neighboring terms.\n    diff1 = 6 - 3     # Difference between second and first term\n    diff2 = 10 - 6    # Difference between third and second term\n    diff3 = 15 - 10   # Difference between fourth and third term\n\n    # Since it's a two grade arithmetic sequence, the second difference should be constant.\n    second_diff = diff2 - diff1   # Second difference between the differences\n\n    # Calculate the difference between the fifth and fourth term.\n    diff4 = diff3 + second_diff\n\n    # Calculate the missing number which is the fifth term.\n    missing_number = 15 + diff4\n\n    return missing_number\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_after_bag = 80 / (1 - 3/5)\n    initial_money = remaining_after_bag / (1 - 1/5)\n    return initial_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_volume = 47\n    oil_poured_into_bottle = 5\n    remaining_oil = total_volume - oil_poured_into_bottle\n    oil_per_tank = remaining_oil / 6\n\n    return oil_per_tank\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position = 8\n    bud_position_from_end = 10\n    children_between = 4\n\n    total_children = pip_position + children_between + 1 + bud_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alan, bob = symbols('alan bob')\n    \n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n\n    # Colin gives Bob 25 cards, and Bob now has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    amount_after_3_years = 2519.42\n    years = 3\n    \n    # Calculate the interest rate by reversing the compound interest formula\n    # amount = principal * (1 + rate)^years\n    # rate = ((amount / principal) ** (1/years)) - 1\n    # rounding to the nearest tenth of a percent\n    rate = round(((amount_after_3_years / principal) ** (1 / years) - 1) * 100, 1)\n    \n    return rate\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Sum of all odd numbers from 1 to 50\n    odd_sum = sum(range(1, 51, 2))\n    \n    # Sum of all even numbers from 2 to 50\n    even_sum = sum(range(2, 51, 2))\n    \n    # Difference between even and odd sums\n    return even_sum - odd_sum\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Initialize the symbol for Samuel's original amount of money\n    original_amount = symbols('original_amount')\n\n    # Write the equations based on the problem description\n    after_dvd = original_amount - (original_amount / 6) - 5\n    after_magazines = after_dvd - (after_dvd * 2 / 5) - 12\n\n    # Set up the equation representing the money left after purchases\n    equation = Eq(after_magazines, 24)\n\n    # Solve the equation\n    solved = solve(equation, original_amount)\n\n    # Since there might be more than one solution, filter out the negative solutions which are not meaningful in this context\n    ans = [sol for sol in solved if sol > 0]\n\n    return ans[0]\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    years = symbols('years')\n    \n    # Grandpa's current age\n    grandpa_age = 72\n    # Johnny's current age\n    johnny_age = 8\n    \n    # Future age relationship\n    equation = Eq(grandpa_age + years, 5 * (johnny_age + years))\n    \n    # Solve for the number of years\n    ans = solve(equation, years)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    m, n, x = symbols('m n x')\n    equation = Eq(5*x + 3*9, 37)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # In the worst case scenario, Sheila could pull out all the balls of one colour without getting 4 of the same colour.\n    # After that, she could pull out another colour without getting 4 of the same colour.\n    # We know that there are enough balls of at least one colour to guarantee 4 of the same colour after that point.\n    \n    # Number of balls Sheila needs to take out to be sure:\n    # Maximum of (number of blue balls - 3) + (number of orange balls - 3) + 3 + 1\n    # = (5 - 3) + (4 - 3) + 3 + 1\n    # = 2 + 1 + 3 + 1 = 7\n\n    ans = 2 + 1 + 3 + 1\n    return ans\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    weight_after_removal = 27\n    fraction_removed = 1/5\n\n    soil_removed_weight = full_weight * fraction_removed\n    empty_weight = full_weight - soil_removed_weight - (full_weight - weight_after_removal)\n    \n    return empty_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    tim, tyler = symbols('tim tyler')\n\n    equation1 = Eq(tim / 6, tyler * 3 / 8)\n    equation2 = Eq(tim, 9 * (tyler - 96))\n\n    solutions = solve((equation1, equation2), (tim, tyler))\n\n    return solutions[tim] + solutions[tyler]\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate * (5/6) + vanilla * (1/3) + blueberry * (2/9), 427)\n\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    chocolate_cupcakes_sold = solutions[chocolate] * (1/6)\n\n    return int(chocolate_cupcakes_sold)\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # Number of oranges that Janice has is enough for packing 25 boxes with each box having 2 dozens of oranges\n    total_oranges = 25 * 2 * 12\n    \n    # If giving 20 oranges per elder, 10 elders will not get any oranges, so we add 10 * 20 to account for oranges if they were to receive\n    total_oranges += 10 * 20\n    \n    # Calculate the number of elders\n    number_of_elders = total_oranges // 20\n    \n    # Find the number of oranges to give to each elderly so that it divides the total number of oranges exactly\n    while total_oranges % number_of_elders != 0:\n        number_of_elders -= 1\n\n    # Calculate the number of oranges each should get\n    oranges_per_elder = total_oranges // number_of_elders\n    \n    return oranges_per_elder\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    interval_platform1 = 24\n    interval_platform2 = 30\n\n    lcm_interval = lcm(interval_platform1, interval_platform2)\n\n    # Time in minutes from 9 am when trains next leave both platforms at the same time\n    next_departure_time = lcm_interval  \n\n    # Calculate hours and minutes\n    hours = next_departure_time // 60\n    minutes = next_departure_time % 60\n\n    # Calculate the time from 9 am\n    next_departure_hour = 9 + hours\n    next_departure_minute = minutes\n\n    # Format the time correctly (e.g., \"10:00\")\n    return f\"{next_departure_hour:02d}:{next_departure_minute:02d}\"\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 3/4\n    water_poured = 24\n    \n    full_tank = water_poured / part_filled\n\n    return full_tank\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the initial number of red marbles and w be the initial number of white marbles.\n    r, w, p, b = symbols('r w p b')\n    # Given conditions\n    equation1 = Eq(r / w, 3 / 2)  # Initial ratio of red to white marbles\n    equation2 = Eq((r + p) / w, 5 / 3)  # Ratio after Pip adds red marbles\n    equation3 = Eq((r + p) / (w + b), 5 / 4)  # Ratio after Bud adds white marbles\n    equation4 = Eq(b, p + 100)  # Bud puts 100 more than Pip\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (r, w, p, b))\n\n    # We want to find the initial number of white balls, which is w.\n    return solutions[w]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # Since a div 8 has a remainder of 6, we can express a as 8k + 6\n    # Since b div 8 has a remainder of 7, we can express b as 8m + 7\n \n    # When we add a and b we get: (8k + 6) + (8m + 7) \n    # Simplify to get: 8(k + m) + 13\n    # The division by 8 of (8(k + m) + 13) will have the same remainder as 13 div 8\n    # since 8(k + m) is a multiple of 8 and won't contribute to the remainder\n    \n    remainder_of_sum = 13 % 8  # The remainder of 13 divided by 8\n    \n    return remainder_of_sum\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of people originally in the group and their total weight\n    original_count, original_total_weight = symbols('original_count original_total_weight', positive=True)\n\n    # The original average weight\n    original_average = original_total_weight / original_count\n\n    # Equation after Aaron joins\n    equation_after_aaron = Eq((original_total_weight + 45) / (original_count + 1), 61)\n\n    # Equation after Ben joins\n    equation_after_ben = Eq((original_total_weight + 45 + 71) / (original_count + 2), 62)\n\n    # Solve the equations\n    solutions = solve((equation_after_aaron, equation_after_ben), (original_count, original_total_weight))\n\n    # Extract the original average weight from the solutions\n    original_avg_weight = original_total_weight / original_count\n\n    # Calculate the answer by substituting solved values into the original average weight expression\n    ans = original_avg_weight.subs(solutions)\n\n    return float(ans)\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of Anu, Benu, Chris and Dave\n    Anu, Benu, Chris, Dave = symbols('Anu Benu Chris Dave')\n\n    # Equations based on the given information\n    sum_ages_eq = Eq(Anu + Benu + Chris + Dave, 20)  # sum of ages is 20\n    Dave_Chris_diff_eq = Eq(Dave, Chris + 5)         # Dave is 5 years older than Chris\n    Dave_Benu_diff_eq = Eq(Dave, Benu + 3)           # Dave is 3 years older than Benu\n    Anu_Chris_diff_eq = Eq(Anu, Chris - 3)           # Anu is 3 years younger than Chris\n\n    # Solve the system of equations\n    solutions = solve((sum_ages_eq, Dave_Chris_diff_eq, Dave_Benu_diff_eq, Anu_Chris_diff_eq), (Anu, Benu, Chris, Dave))\n    # Extract the age of Anu from the solutions\n    Anu_age = solutions[Anu]\n\n    return Anu_age\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    george, agnes, jack = symbols('george agnes jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (george, agnes, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    \n    return yellow_balloons\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_draws = 2989\n\n    while total_draws > 1:\n        # Ming takes out two balls\n        if white_balls % 2 == 0 or black_balls % 2 == 0:\n            # If Ming picks two balls of the same color, \n            # it is certain that 2 white balls are picked because \n            # initially there are an odd number of white balls and \n            # an even number of black balls.\n            # So, Ming will draw two white balls and put back one black ball.\n            white_balls -= 2  # Two white balls out\n            black_balls += 1  # One black ball in\n        else:\n            # Ming picks two balls of different colors, puts back white ball.\n            white_balls -= 1  # One white ball out\n            black_balls -= 1  # One black ball out\n            white_balls += 1  # One white ball in\n\n        total_draws -= 2\n\n    # After 2988 balls are taken out, there will be 1 ball left in the bag.\n    if white_balls > 0:\n        ans = (1, 'white')\n    else:\n        ans = (1, 'black')\n\n    return ans\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # Number of desks in front of Jessica\n    desks_in_front_of_jessica = 5\n    \n    # Number of desks behind Judy\n    desks_behind_judy = 7\n    \n    # Jessica's desk plus Judy's desk\n    jessica_and_judy_desks = 2\n    \n    # Total desks = Desks in front of Jessica + Jessica's desk + Judy's desk + Desks behind Judy\n    total_desks = desks_in_front_of_jessica + jessica_and_judy_desks + desks_behind_judy\n    \n    return total_desks\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the numbers 0-9, as the question involves finding missing digits.\n    perm = permutations('0123456789', 3)\n\n    for p in perm:\n        # Construct numbers by replacing the missing digits with the current permutation.\n        a = int(f'{p[0]}{p[1]}2')\n        b = int(f'5{p[2]}')\n        \n        # Check if the multiplication results in a number with no zero as its first digit and ends with 8.\n        product = a * b\n        product_str = str(product)\n        if len(product_str) == 4 and product_str.endswith('8') and product_str[0] != '0':\n            return product\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n\n    work_rate_per_person = 1 / (initial_people * initial_hours)\n    total_work = work_rate_per_person * initial_hours\n    required_people = total_work / (1 / target_hours)\n\n    return int(required_people)\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # Convert from meters to centimeters\n    return int(n)\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    total_money = 30  # Harry's initial amount\n    sweet_price = 3.99\n    magazine_price = 2.50\n    stickers_price = 0.70\n    pizza_price = 10.99\n    orange_juice_price = 1.50 * 4  # Price for four glasses\n\n    # Total spent\n    total_spent = sweet_price + magazine_price + stickers_price + pizza_price + orange_juice_price\n\n    # Calculate change left\n    change_left = total_money - total_spent\n\n    return change_left\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    # We iterate over the possible numbers from 1 to 4 because 5 cannot be split into 5 and 0\n    for x1 in range(1, 5):\n        # The second number needs to make the sum equal to 5\n        x2 = 5 - x1\n        # We need to ensure we're not counting duplicates (e.g., 1+4 and 4+1 should be considered the same)\n        if x2 > 0 and x2 > x1:\n            count += 1\n    # Now, handle the case when the number is split into three or more parts\n    # The only possibility for 5 is 1+1+3, so we add one more to the count\n    count += 1\n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    good_numbers_count = 0\n    \n    for units_digit in range(2, 10):  # units digit can be from 2 to 9\n        hundreds_digit = units_digit - 2  # hundreds digit is 2 less than units digit\n        # there are 10 possibilities for the tens digit (0-9)\n        # since we already have the hundreds and units digit, only tens digit is free to choose\n        good_numbers_count += 10\n        \n    return good_numbers_count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    han, daughter = symbols('han daughter')\n    equation1 = Eq(han, 3 * daughter)\n    equation2 = Eq(han + daughter, 91.2)\n    \n    solutions = solve((equation1, equation2), (han, daughter))\n    \n    return float(solutions[han])\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2/5)\n    initial_chocolates = remaining_after_students / (20/100)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    # Using the difference of two squares formula: a^2 - b^2 = (a + b)(a - b)\n    ans = sum((i + 1) * (i - 1) for i in range(1, 101, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    total_votes = 25\n    # According to the Pigeonhole Principle, to ensure Samantha has more votes than anyone else,\n    # we split the remaining votes among the other two students evenly and give one more vote to Samantha.\n    # So, we first divide the total votes by 3 to distribute them nearly evenly,\n    # then add one to Samantha's share to ensure she has more.\n    votes_for_samantha = (total_votes // 3) + 1\n    \n    return votes_for_samantha\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coins = [1, 2, 5]\n    unique_totals = set()\n\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                total = i + j + k\n                unique_totals.add(total)\n\n    return len(unique_totals)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 6000\n    amount = 8029.35\n    years = 5\n    x = symbols('x')\n\n    # The formula for compound interest is A = P*(1 + r/n)^(nt)\n    # Since interest is compounded annually, n = 1\n    equation = Eq(principal * (1 + x/100) ** years, amount)\n\n    rate = solve(equation, x)\n    \n    return rate[0]\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits = 0\n\n    while digits < 291:\n        pages += 1\n        digits += len(str(pages))\n\n    if digits == 291:\n        return pages\n    else:\n        return pages - 1\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 1000\n    ans = 2.4 * kg_to_g\n    return ans\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money_spent = 1500\n    money_spent_on_chairs = 360\n    percent_spent_on_chairs = (money_spent_on_chairs / total_money_spent) * 100\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'r' be the number of pages read and 't' be the total number of pages.\n    r, t = symbols('r t')\n\n    # Initial ratio: r / (t - r) == 1 / 5\n    # After reading another 80 pages: (r + 80) == 0.7 * t\n    equation1 = Eq(r / (t - r), 1 / 5)\n    equation2 = Eq(r + 80, 0.7 * t)\n    \n    # Solve the system of equations for 'r' and 't'.\n    solutions = solve((equation1, equation2), (r, t))\n\n    # Assuming a positive number of pages, 't' will be the one of interest.\n    ans = solutions[t]\n    return ans\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    for cc_correct in range(11):\n        vivi_correct = cc_correct + 15/10\n        if vivi_correct % 1 == 0:  # Check if Vivi's correct answers count is an integer\n            vivi_correct = int(vivi_correct)\n            total_points = cc_correct * 10 - (10 - cc_correct) * 5 + vivi_correct * 10 - (10 - vivi_correct) * 5\n            if total_points == 95:\n                return cc_correct\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2 * book + 3 * magazine, 24.9)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls_rooms = 45 / 5\n    teachers_rooms = 6 / 2\n    total_rooms = girls_rooms + teachers_rooms\n    return int(total_rooms)\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    people_initial = 15\n    flour_initial = 650\n    people_final = 18\n\n    flour_final = (flour_initial / people_initial) * people_final\n    return flour_final\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    num_adults = 2\n    num_children = 3\n\n    total_cost = (adult_ticket_price * num_adults) + (child_ticket_price * num_children)\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "from itertools import combinations\n\ndef solution():\n    s = '2581953752'\n    minimum_sum = float('inf')\n    for i, j in combinations(range(1, len(s)), 2):\n        n1 = int(s[:i])\n        n2 = int(s[i:j])\n        n3 = int(s[j:])\n        current_sum = n1 + n2 + n3\n        minimum_sum = min(minimum_sum, current_sum)\n    return minimum_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for the two original numbers\n    x, y = symbols('x y')\n\n    # equation for the sum of the two numbers\n    eq1 = Eq(x + y, 11.63)\n\n    # equation for the incorrectly added numbers\n    # assuming x was the number with the decimal shifted\n    eq2 = Eq(x / 10 + y, 5.87)\n\n    # solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    # calculate one hundred times the difference between the two original numbers\n    difference = 100 * (solutions[x] - solutions[y])\n\n    return difference\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_in_meter = 1000\n    total_mm = 7000000\n    total_meters = total_mm / mm_in_meter\n    return total_meters\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    total_members = 99\n    ratio_science_literature = 9 / 10\n    ratio_literature_math = 5 / 7\n\n    # Let the common ratio multiplier be x\n    # Hence, (science_club_members, literature_club_members, math_club_members) = (9x, 10x, 14x)\n    # because literature_club_members is common in both ratios and 10x * (5/7) = 10x * 5 * 1/7 = 50x/7 = 14x (for math club)\n    \n    # Total members = 9x + 10x + 14x = 33x\n    # We solve for x\n    x = total_members / 33\n    \n    # Calculate the number of members in literature and math clubs\n    literature_club_members = 10 * x\n    math_club_members = 14 * x\n    \n    # Calculate the difference\n    difference = math_club_members - literature_club_members\n\n    return int(difference)\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    \n    dividend = (1 * quotient) + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # To ensure 3 marbles of the same color, we consider the worst case scenario. \n    # We take out all the marbles of other colors first.\n    # Take out all blue marbles, then all yellow marbles. The next marble must be the third of a color.\n    \n    max_blue = 4\n    max_yellow = 3\n    max_red = 1\n    \n    # Worst case: Take out all yellow and red marbles, which is not enough to make 3 of the same color.\n    worst_case = max_yellow + max_red\n    \n    # The next marble taken must result in 3 marbles of the same color (either yellow or blue).\n    # So we add 1 to the worst case.\n    marbles_to_take = worst_case + 1\n    \n    return marbles_to_take\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa, mother = symbols('melissa mother')\n    \n    # When Melissa was 8, her mother was 32\n    equation1 = Eq(mother - melissa, 32 - 8)\n\n    # Mother is now three times as old as Melissa\n    equation2 = Eq(mother, 3 * melissa)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (melissa, mother))\n\n    return solutions[melissa]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    flowers_per_side = 6\n    corners = 4\n    total_flowers = (flowers_per_side * 4) - corners\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    n = 48\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    even_factors = [factor for factor in factors if factor % 2 == 0]\n    return len(even_factors)\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    pieces = [4.8, 2.73]\n    remaining_length = original_length - sum(pieces)\n    differences = [abs(remaining_length - p) for p in pieces]\n    ans = max(differences)\n    return ans\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # Total cost of the book and the bag together\n    total_cost = 132\n\n    # According to Thomas' solution, 5 units is equal to the total cost\n    one_unit_cost = total_cost / 5\n\n    # However, his interpretation of the fractions is incorrect.\n    # If Li Yan spent 1/3 of the money on a book, she has 2/3 left.\n    # Then, she spends 1/2 of the remainder (2/3) on a bag,\n    # which is 1/2 * 2/3 = 1/3 of the original money.\n    # Hence, the book and the bag together cost 1/3 + 1/3 = 2/3 of the original money.\n\n    # Since 2/3 of the original money is spent on the book and bag,\n    # we find the value of 1/3 of her money by dividing the total cost by 2\n    one_third_money = total_cost / 2\n\n    # To find the original money, we multiply one_third_money by 3\n    original_money = one_third_money * 3\n\n    # Return the original amount of money\n    return original_money\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the cost of a volleyball\n    x = symbols('x')\n\n    # A basketball costs $10 more than a volleyball\n    basketball_price = x + 10\n\n    # We have 5 basketballs and 6 volleyballs totalling $325\n    total_cost_equation = Eq(5 * basketball_price + 6 * x, 325)\n\n    # Now let's solve the equation for the price of a volleyball\n    volleyball_price = solve(total_cost_equation, x)[0]\n\n    # The price of a basketball is $10 more than the price of a volleyball\n    basketball_price = volleyball_price + 10\n\n    return basketball_price\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = \"1234\"\n    number_length = 47\n    complete_repetitions, partial_repetition_length = divmod(number_length, len(pattern))\n    partial_repetition = pattern[:partial_repetition_length]\n    \n    total_sum = sum(map(int, pattern)) * complete_repetitions + sum(map(int, partial_repetition))\n    \n    return total_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_bottle = 2.52 / 6\n    cost_for_nine_bottles = cost_per_bottle * 9\n    return cost_for_nine_bottles\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_pupils = 40\n    total_avg = 35\n    boys_avg = 20\n    girls_avg = 60\n\n    # Let b represent the number of boys\n    # Total pencils = (number of boys * avg pencils for boys) + (number of girls * avg pencils for girls)\n    #                 b * boys_avg + (total_pupils - b) * girls_avg = total_avg * total_pupils\n    # Simplify the above equation to find b\n    b = (total_avg * total_pupils - girls_avg * total_pupils) / (boys_avg - girls_avg)\n    return int(b)\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    total_points = 61\n    total_problems = 25\n\n    for correct in range(total_problems + 1):\n        incorrect = (total_points - 4 * correct) // -1  # Calculate incorrect based on correct answers and points\n        unanswered = total_problems - correct - incorrect\n        if incorrect >= 0 and unanswered >= 0 and 4 * correct - incorrect == total_points:\n            return unanswered\n\n    return -1  # In case there is no solution, but there should be one.\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10*a + b\n            ba = 10*b + a\n            if 8*ab == 3*ba:\n                return ab\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    base_price_per_cupcake = 4.50\n    shipping_and_handling = 12\n    discount_rate = 0.20  # 20%\n    \n    # Case for 20 or fewer cupcakes\n    for cupcakes in range(1, 21):\n        total_cost = cupcakes * base_price_per_cupcake + shipping_and_handling\n        if total_cost == 120:\n            return cupcakes\n\n    # Case for more than 20 cupcakes\n    for cupcakes in range(21, 120 // base_price_per_cupcake + 1):\n        discounted_cupcakes = cupcakes - 20\n        total_cost = (20 * base_price_per_cupcake +\n                      discounted_cupcakes * base_price_per_cupcake * (1 - discount_rate) +\n                      shipping_and_handling)\n        if total_cost == 120:\n            return cupcakes\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for the price of one pig and one goat\n    pig, goat = symbols('pig goat')\n\n    # Now, let's define the two equations based on the given information\n    equation1 = Eq(3 * pig + 1 * goat, 440)\n    equation2 = Eq(1 * pig + 2 * goats, 280)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pig, goat))\n\n    # Calculate how much the farmer will pay for 5 pigs and 5 goats\n    total_cost = 5 * solutions[pig] + 5 * solutions[goat]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28\n    total_pence = 57\n    pounds_to_pence = total_pounds * 100\n\n    ans = (pounds_to_pence + total_pence) / 100\n    return ans\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 / (1/3)\n    return int(ans)\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) * 3 == int(str(num) + '1'):\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 12\n    total_people = people_in_front + position_from_back - 1\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    energetic_rate = 1 / 10\n    combined_rate = 1 / 6\n    \n    lazy = symbols('lazy')\n    \n    equation = Eq(energetic_rate + 1 / lazy, combined_rate)\n    \n    lazy_days = solve(equation, lazy)[0]\n    \n    return lazy_days\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_current_age = 8\n    grandmother_age_difference = 42\n    years_ahead = 2\n\n    grandmother_current_age = john_current_age + grandmother_age_difference\n    total_age_in_2_years = (john_current_age + years_ahead) + (grandmother_current_age + years_ahead)\n\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_number = symbols('john_number')\n\n    equation = Eq((john_number + 45) / 3, 2 * john_number)\n\n    solution = solve(equation, john_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    sum_of_sequence = (n * (n + 1)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    doubled_number = result - 10\n    original_number = doubled_number / 2\n    return original_number\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # The worst case scenario is when we draw all marbles of the most abundant color, then the second most,\n    # and then one from the third most before we get the fourth different color.\n    # Therefore, first draw 12 reds, then draw 9 blues, then draw 8 yellows\n    # The next marble you draw must be of the fourth color (green).\n    \n    # Total from worst case\n    total_marbles = 12 + 9 + 8\n    \n    # Draw one more to ensure the fourth color\n    total_marbles += 1\n    \n    return total_marbles\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    number = '55' + '5' * 17 + '0' + '9' * 19\n    for i in range(10):\n        candidate = int(number[:19] + str(i) + number[20:])\n        if candidate % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_read_day_one = 40\n    fraction_of_book = 1/5\n    total_pages = pages_read_day_one / fraction_of_book\n    return int(total_pages)\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    # Iterate over all 3-digit numbers\n    for i in range(100, 1000):\n        # Convert the integer to string to access its digits\n        s = str(i)\n        \n        # Since the digits are characters, convert them to integers to perform math operations\n        hundreds = int(s[0])\n        tens = int(s[1])\n        ones = int(s[2])\n        \n        # Check all the conditions\n        if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n            return i  # Return the number if all conditions are met\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    count = 0\n    for num in range(10, 100):\n        if num % 10 == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    # Let's denote the number of books each brother has as x1, x2, and x3.\n    # We then have the following constraints:\n    # x1 + x2 + x3 = 10\n    # x1, x2, x3 >= 2\n\n    # Since each brother has at least two books, we can adjust the equation by subtracting two books\n    # from each brother initially\n    # Therefore, x1', x2', x3' represent the remaining books after giving each brother 2 books:\n    # x1' + 2 + x2' + 2 + x3' + 2 = 10\n    # x1' + x2' + x3' = 10 - 2*3 = 4\n    # Now we need to find the non-negative integer solutions for x1' + x2' + x3' = 4\n    count = 0\n    for x1 in range(5):  # x1 can be from 0 to 4, inclusive\n        for x2 in range(5 - x1):  # x2 is limited by what's remaining after x1's choice\n            x3 = 4 - x1 - x2  # x3 is determined by the remaining number of books\n            count += 1  # Each valid (x1, x2, x3) is a different way to divide the books\n\n    return count\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    current_purchase = 105.6\n    increase = 14.4\n    previous_purchase = current_purchase - increase\n    total_spent = current_purchase + previous_purchase\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    jason_books = 30\n    anthea_books = 30 - 4\n\n    # After giving 4 books away, Jason and Anthea have the same number of books\n    # Therefore, the number of books Jason has left is equal to the number Anthea has now.\n    jason_books_after_giving = anthea_books\n\n    # The initial difference is the number of books Jason had originally minus what Anthea ended up with after receiving the books.\n    difference_initial = jason_books - jason_books_after_giving\n\n    return difference_initial\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(3, 2024):\n        a, b = b, a + b\n        a, b = a % 3, b % 3  # Only the remainders are required\n\n    ans = b % 3\n    return ans\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Since the children are standing in a row from shortest to tallest,\n    # and no two children have the same height,\n    # Tom, standing at the 10th place, will have nine children shorter than him.\n    \n    # The last (31st) child has a height of 131 cm.\n    # To maximize Tom's height, we put the smallest possible height for the 30 children\n    # shorter than the last one, which means they are from 101 cm to 130 cm inclusive\n    # because we have 30 children and 30 heights (131 cm - 101 cm = 30 cm).\n    \n    # Now we need to find the maximum height of Tom, who is the 10th child.\n    # We assign the smallest possible heights to the children in front of Tom,\n    # which means the first nine children would be from 101 cm to 109 cm inclusive.\n    \n    # Therefore, the maximum height for Tom, who is at the 10th place,\n    # would be 110 cm, assuming all heights are whole numbers.\n    \n    max_height_tom = 101 + 9  # 101 cm + 9 shorter children\n    return max_height_tom\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    \n    first_num_after_subtract = 208 - magic_number\n    second_num_after_subtract = 136 - magic_number\n\n    equation = Eq(first_num_after_subtract, 9 * second_num_after_subtract)\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    return 0.7 / 100\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    num = 840\n    factors = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    equation1 = Eq(alan / bella, 4 / 3)\n    equation2 = Eq(alan - chloe, 20)\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_of_chocolates = 7.85\n    chocolate_bar_hazelnut_price = 1.83\n    total_cost = box_of_chocolates + 2 * chocolate_bar_hazelnut_price\n    note_given = 20\n    change = note_given - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    # There are 3 positions that can be filled between Lily on the left end and her mother on the right end.\n    # The remaining family members can be arranged in these positions in 3! (3 factorial) ways.\n\n    from math import factorial\n\n    num_ways = factorial(3)\n\n    return num_ways\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    # First term (first row seats) 'a'\n    a = 7\n    # Common difference 'd', each row has 4 more seats than the previous one\n    d = 4\n    # Last term (last row seats) 'l'\n    l = 99\n    # Number of terms 'n' calculated using the formula for the nth term of an arithmetic sequence: l = a + (n - 1)d\n    n = ((l - a) // d) + 1\n    # Sum of an arithmetic sequence formula: S = n/2 * (a + l)\n    S = n/2 * (a + l)\n    \n    return int(S)\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # Let x be the number of students and y be the total number of small gifts\n    # From the problem we have two equations:\n    # x * 5 + 3 = y      (1)\n    # x * 4 + 9 = y      (2)\n    # By equating the right side of (1) and (2), we get:\n    # x * 5 + 3 = x * 4 + 9\n    # Simplifying, we get:\n    # x = (9 - 3) / (5 - 4)\n    x = (9 - 3) // (5 - 4)\n\n    return x\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    ans = 1.28 - 0.57\n    return ans\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    all_permutations = list(permutations(range(1, 9), 2))\n    # Filter out numbers where the ones digit is twice the tens digit\n    smallest = [10*a+b for a, b in all_permutations if b == 2*a]\n    \n    # Filter out numbers where the sum of ones and tens digits is 9\n    largest = [10*a+b for a, b in all_permutations if a+b == 9]\n    \n    # Filter out numbers where the tens digit is 5 more than the ones digit\n    second_largest = [10*a+b for a, b in all_permutations if a == b+5]\n    \n    # The odd number must be the remaining one after excluding smallest, largest, second largest\n    remaining_numbers = [10*a+b for a, b in all_permutations if 10*a+b not in smallest+largest+second_largest]\n    odd_number = [num for num in remaining_numbers if num % 2 == 1]\n\n    # Combine the lists and remove the identified numbers to find the second smallest\n    all_filtered = set(smallest + largest + second_largest + odd_number)\n    remaining_numbers = sorted(set(range(12, 89)).difference(all_filtered))\n    \n    # The second smallest number is what we want to return\n    return remaining_numbers[1]\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n    children = 3/5 * total_visitors\n    remaining_visitors = total_visitors - children\n    men = 1/2 * remaining_visitors\n\n    equation = Eq(children - men, 140)\n\n    solutions = solve(equation, total_visitors)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam, peter = symbols('sam peter')\n    \n    # Sam had 40 stickers more than Peter initially.\n    # Sam gives 20% of his stickers to Peter -> Sam gives 0.2 * sam stickers to Peter.\n    # Peter gives 25% of his stickers to Sam after receiving Sam's stickers -> Peter gives 0.25 * (peter + 0.2 * sam).\n    # After the exchanges, Sam has 96 stickers more than Peter.\n    original_peter_eq = Eq(sam, peter + 40)\n    after_exchange_eq = Eq(sam - 0.2 * sam + 0.25 * (peter + 0.2 * sam), peter + 0.2 * sam - 0.25 * (peter + 0.2 * sam) + 96)\n    \n    solutions = solve((original_peter_eq, after_exchange_eq), (sam, peter))\n    \n    return solutions[peter]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    sum_of_three = 120 * 3\n    sum_of_four = 150 * 4\n    fourth_number = sum_of_four - sum_of_three\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    def square_sum(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n\n    correct_answer = square_sum(15) - square_sum(4)\n    kimmy_answer = (15 * 16 * 31) // 6\n\n    return correct_answer if correct_answer != kimmy_answer else kimmy_answer\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        score = correct * 5 - wrong * 2\n        if score == 51:\n            return correct\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the amount of money Amy had at first\n    total_money = symbols('total_money')\n    \n    # After spending 6/11 of her money and additional $5\n    money_after_highlighters = total_money - (6/11)*total_money - 5\n    \n    # After spending 3/10 of the remaining money and additional $12\n    money_after_pens = money_after_highlighters - (3/10)*money_after_highlighters - 12\n    \n    # Create the equation based on the fact she has $30 left\n    equation = Eq(money_after_pens, 30)\n    \n    # Solve the equation to find out the total amount of money Amy had at first\n    solution = solve(equation, total_money)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    ans = 543 * 6\n    return ans\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Sally's current age be s, and Gillian's current age be g\n    s, g = symbols('s g')\n\n    # The given ratios can be written as equations\n    equation1 = Eq(s*7, g*2)  # Sally's age to Gillian's age is 2:7\n    equation2 = Eq((s + 15)*2, (g + 15)*1)  # After 15 years, the ratio is 1:2\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (s, g))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_result = 30\n    mistaken_subtrahend = 70\n    actual_subtrahend = 75\n\n    minuend = mistaken_result + mistaken_subtrahend\n    correct_result = minuend - actual_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    count = 0\n    for customer in range(1, 41):\n        if customer % 3 == 0 and customer % 4 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    apples_per_kg = 9\n    apples_per_cake = 4\n    total_kg_apples_used = 8\n    total_apples_used = apples_per_kg * total_kg_apples_used\n    cakes_baked = total_apples_used // apples_per_cake\n    return cakes_baked\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    fraction_numerator = (35 * 9) / 45\n    return fraction_numerator\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    number_of_seeds = 12\n\n    total_distance = distance_between_seeds * number_of_seeds\n    circumference = total_distance\n\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    ans = (3/8) * 32\n    return ans\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    return 198 + 67 - 25\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    avg_boys = 10\n    total_girls = 8\n    total_participants = total_boys + total_girls\n    avg_total = 14\n\n    sum_boys = total_boys * avg_boys\n    sum_total = total_participants * avg_total\n    sum_girls = sum_total - sum_boys\n\n    avg_girls = sum_girls / total_girls\n    return avg_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    # Let the side of the initial square be n, then the total students would be n^2 + 9\n    # After adding one row and one column, the new square array is (n+1)^2,\n    # So (n+1)^2 = n^2 + 9 + 16\n    # Rearranging: n^2 + 2n + 1 = n^2 + 25\n    # Simplifying: 2n = 24\n    # So: n = 12\n    # Hence, the total number of students initially is n^2 + 9\n    n = 12\n    total_students = n**2 + 9\n    return total_students\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Number of postcards Lily originally divides into 5 envelopes\n    original_postcards = 50\n    # Each envelope has the same number of postcards after the first division\n    postcards_per_envelope = original_postcards / 5\n    \n    # Number of new envelopes added after her friends give her more postcards\n    new_envelopes = 2\n    # Total number of envelopes after adding the new ones\n    total_envelopes = 5 + new_envelopes\n    \n    # Since each envelope has the same number of postcards, the total number of postcards\n    # is the number of envelopes multiplied by the number of postcards per envelope\n    total_postcards = total_envelopes * postcards_per_envelope\n\n    return int(total_postcards)\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # total change\n    total_change = 250  # in pence\n\n    # list of possible coins in pence\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n\n    # iterate over coins to find the smallest coin that fits the condition \n    for coin in coins:\n        # check if the coin can be paired and subtracted from the total change\n        if (total_change - 2 * coin) >= 0 and (total_change - 2 * coin) % coin == 0:\n            # returns the smallest coin that meets the conditions\n            return coin // 2  # divide by 2 to get the value of the single smallest coin\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies_baked = symbols('cookies_baked')\n\n    # Let's denote the number of cookies baked as 'cookies_baked'\n    # 3/5 of them are burnt, so 2/5 are left\n    # Then she sells 75% (3/4) of these 2/5\n    # The number she burnt (3/5 of the cookies baked) is 42 more than she sold (3/4 of 2/5 of the cookies baked)\n    # (3/5)*cookies_baked = (3/4)*(2/5)*cookies_baked + 42\n    # Let's solve this equation for cookies_baked\n\n    equation = Eq((3/5)*cookies_baked, (3/4)*(2/5)*cookies_baked + 42)\n    solutions = solve(equation, cookies_baked)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    weight_needed = 250\n    cost = (cost_per_100g / 100) * weight_needed\n    return cost\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    # Starting with 10 pieces of paper\n    original_pieces = 10\n\n    # After cutting, we have 16 pieces of paper\n    total_pieces_after_cut = 16\n\n    # Let x be the number of pieces cut into three parts\n    # Each piece that is cut gives us 2 extra pieces\n    # Hence, after cutting x pieces, we have x*2 extra pieces\n    # The total number of pieces after cutting is the original\n    # plus the extra pieces from the cuts, which equals 16\n    # So we have the equation: original_pieces + x*2 = total_pieces_after_cut\n\n    # We solve this equation to find x\n    x = (total_pieces_after_cut - original_pieces) // 2\n\n    return x\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    container_capacity = 4\n\n    num_containers = (total_apples + container_capacity - 1) // container_capacity\n\n    return num_containers\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(0, 10):\n            new_num = int(str(9) + str(i) + str(j))\n            original_num = int(str(i) + str(j) + \"9\")\n            if new_num == 4 * original_num:\n                return original_num\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for y in range(10):\n        number = int(f\"107{y}\")\n        if number % 6 == 0:\n            return y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # Total students excluding Laura (since she must be at the front)\n    total_students_excl_Laura = 5\n\n    # Total positions for Rita excluding the last one\n    positions_for_Rita = total_students_excl_Laura - 1\n\n    # Permutations for the remaining students excluding Laura and Rita\n    permutations_for_others = factorial(total_students_excl_Laura - 1)\n\n    # Total ways to form the line\n    total_ways = positions_for_Rita * permutations_for_others\n\n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    ans = (a + b) * a\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    ans = 53 * 9\n    return ans\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    discount_1 = 0.50\n    discount_2 = 0.20\n\n    discounted_price = regular_total_price * (1 - discount_1)\n    final_price = discounted_price * (1 - discount_2)\n\n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    buzz, jessie = symbols('buzz jessie')\n\n    # Buzz is three times as heavy as Jessie\n    equation1 = Eq(buzz, 3 * jessie)\n\n    # Buzz is 450g heavier than Jessie\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n    \n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    part_sold = 88\n    fraction_sold = 4 / 7\n    total_apples = part_sold / fraction_sold\n    return int(total_apples)\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Kevin's speed is given as 80 mph\n    kevin_speed = 80\n    # Jerry's speed relative to the road length is 2/5th of the road per hour\n    jerry_road_ratio = 2/5\n    \n    # Jerry travels 3/7th of the total distance\n    jerry_fraction = 3/7\n    # So, Kevin travels 4/7th of the total distance\n    kevin_fraction = 4/7\n    \n    # Jerry's speed in terms of the total distance is 3/7th of the road per hour\n    jerry_speed = jerry_road_ratio * jerry_fraction\n    # Kevin's speed in terms of the total distance is 4/7th of the road per hour\n    kevin_speed /= (kevin_fraction / jerry_fraction) * jerry_speed\n    \n    # Total road length is then Jerry's speed (in road length per hour) times the fraction 7/3 (the reciprocal of 3/7)\n    road_length = jerry_speed * (7/3)\n\n    return road_length\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    return 42 / 10\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    total_pupils = 40\n    total_pencils = 35 * total_pupils\n    boys_average = 20\n    girls_average = 60\n\n    # Let the number of boys be b and the number of girls be g\n    # We know that b + g = total_pupils and g = total_pupils - b\n    # Then total_pencils = b * boys_average + g * girls_average\n    # Substituting total_pupils - b for g we get:\n    # total_pencils = b * boys_average + (total_pupils - b) * girls_average\n    # Solve for b\n\n    b = (total_pencils - girls_average * total_pupils) / (boys_average - girls_average)\n\n    return int(b)\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    prob_win = 0.3\n    prob_draw = 0.1\n    prob_lose = 1 - (prob_win + prob_draw)\n    \n    # Probability of winning one game and losing the other\n    win_lose = prob_win * prob_lose\n    lose_win = prob_lose * prob_win\n    \n    # The sum of the two probabilities\n    prob_win_exactly_one = win_lose + lose_win\n\n    return prob_win_exactly_one\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    for lollipops in range(32, 1000):  # Assume Jonathan has a reasonable number of lollipops, starting at 32 as a minimum\n        if (lollipops - 32) % 4 == 0:\n            if (lollipops - 3) % 7 == 0:\n                return lollipops\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Find the differences of the pairs, which are multiples of D\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n\n    # Find the greatest common divisor of the differences\n    gcd_diff = gcd(gcd(diff1, diff2), diff3)\n\n    # The largest possible D is the greatest common divisor of the differences\n    D = gcd_diff\n\n    # Calculate the remainder R when any one of the numbers is divided by D\n    R = 2010 % D\n\n    # The largest possible value of D + R\n    return D + R\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    # The decimal expansion of 1/13 repeats every 12 digits.\n    repeating_sequence = '076923076923'\n    # Calculate the position of the 2012th digit in the repeating sequence\n    position = (2012 % len(repeating_sequence)) - 1\n    # Retrieve the digit at the calculated position\n    ans = int(repeating_sequence[position])\n    return ans\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Singapore time of departure\n    sg_departure = datetime(2023, 8, 24, 5, 0)\n\n    # London time of arrival\n    london_arrival = datetime(2023, 8, 24, 11, 0)\n\n    # Convert Singapore departure time to London time\n    london_departure = sg_departure - timedelta(hours=7)\n\n    # Calculate the duration of the flight\n    flight_duration = london_arrival - london_departure\n\n    return flight_duration.seconds // 3600\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    # Define the new operation using a lambda function\n    psi_operation = lambda a, b: a*3 + b*4\n    \n    # Compute the value of 4 Psi 7\n    ans = psi_operation(4, 7)\n    \n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    # Let the original number of cards Eddi had be 8x\n    # and the original number of cards Wiya had be 7x\n    # After giving away 4 cards, Eddi has 8x - 4 cards\n    # and Wiya has 7x + 4 cards.\n    # The new ratio is 18:17, so:\n    # (8x - 4) / (7x + 4) = 18 / 17\n    \n    # Solve the equation for x:\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((8*x - 4)/(7*x + 4), 18/17)\n    solution_x = solve(equation, x)\n    \n    # Eddi's original number of cards is 8x\n    eddi_original_cards = 8 * solution_x[0]\n    \n    return eddi_original_cards\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    red_marbles = (5 / 6) * blue_marbles\n    green_marbles = red_marbles / 2\n\n    total_marbles = blue_marbles + red_marbles + green_marbles\n\n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    num1 = Fraction(2017) + Fraction(7, 8)\n    num2 = Fraction(3) + Fraction(2, 3)\n    num3 = Fraction(2016, 875)\n    num4 = Fraction(11, 3)\n    denom1 = (Fraction(2017) + Fraction(1, 3)) - num3\n    denom2 = Fraction(17)\n    num5 = Fraction(3) + Fraction(23, 32)\n\n    # Perform the calculations\n    numerator = (num1 * num2) - (num3 * num4)\n    denominator = denom1 * denom2\n    result = (numerator / denominator) * num5\n\n    # Return the final result as a float\n    return float(result)\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let x be the number of students that need to be moved from Class A to Class B\n\n    # Equation after moving x students\n    # (A - x) will have 9 more students than (B + x)\n    # so, (A - x) = (B + x) + 9\n    # where A = B + 47 (given)\n    # substituting A in the equation we get B + 47 - x = B + x + 9\n    # simplifying the equation for x: x = (47 - 9) / 2\n      \n    x = (47 - 9) // 2\n    return x\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n\n    piece3 = total_length - (piece1 + piece2)\n\n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 32):\n        for B in range(1, 32 - A):\n            C = 31 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    ans = 5.221 + 5.8\n    return ans\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost = 25000\n    selling_price = cost * 120 / 100  # 120% of the cost\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # let's name the two numbers x and y such that x > y\n    # we have two equations:\n    # x - y = 57 (difference between the two numbers)\n    # x + y = 77 (sum of the two numbers)\n    # We can solve the system of equations by substitution or elimination.\n    # I will use elimination.\n\n    # Adding the two equations, we eliminate y\n    # 2x = 57 + 77\n    # 2x = 134\n    # x = 134 / 2\n    # x = 67\n    # Now we can find y by substituting x in the sum equation\n    # 67 + y = 77\n    # y = 77 - 67\n    y = 77 - 57\n    \n    return y\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    total_distance = 6990  # meters\n    rabbit_sleep_time = 215  # minutes\n    \n    # Distance run by rabbit and turtle after 10 minutes\n    time_before_sleep = 10\n    rabbit_distance_before_sleep = rabbit_speed * time_before_sleep\n    turtle_distance_before_sleep = turtle_speed * time_before_sleep\n\n    # Time taken for the turtle to finish the race from the start\n    turtle_total_time = total_distance / turtle_speed\n\n    # Time rabbit needs to finish the race after waking up (not including sleep time)\n    remaining_distance_for_rabbit = total_distance - rabbit_distance_before_sleep\n    rabbit_time_after_sleep = remaining_distance_for_rabbit / rabbit_speed\n\n    # Total time rabbit needs to finish the race including sleep\n    rabbit_total_time = time_before_sleep + rabbit_sleep_time + rabbit_time_after_sleep\n\n    # Determine who finished first and the time difference\n    if rabbit_total_time < turtle_total_time:\n        winner = 'rabbit'\n        lead_time = turtle_total_time - rabbit_total_time\n        lead_distance = lead_time * turtle_speed\n    else:\n        winner = 'turtle'\n        lead_time = rabbit_total_time - turtle_total_time\n        lead_distance = lead_time * rabbit_speed\n\n    return (winner, lead_distance)\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults = symbols('boys girls adults')\n    \n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + girls + adults, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    ans = 0\n    for i in range(1, 1000):\n        oddtastic = True\n        for digit in str(i):\n            if int(digit) % 2 == 0:\n                oddtastic = False\n                break\n        if oddtastic:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):   # Range for 3-digit numbers\n        if i % 2 != 0:           # Check if the number is odd\n            digits = [int(d) for d in str(i)]\n            if sum(digits) == 5:  # Check if the digits sum up to 5\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_cost_pence = 24 * 100  # Convert £ to pence\n    total_avocados = 16 * 2      # Number of individual avocados\n    cost_per_avocado = total_cost_pence / total_avocados\n    return cost_per_avocado\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    max_count = 0\n    likely_total = None\n    \n    # There are a total of 6 sides on each die, so we calculate the possibilities\n    for total in range(2, 13):\n        count = 0\n        for die1 in range(1, 7):\n            for die2 in range(1, 7):\n                if die1 + die2 == total:\n                    count += 1\n        if count > max_count:\n            max_count = count\n            likely_total = total\n            \n    return likely_total\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g represent the number of girls\n    g = symbols('g')\n    \n    # Let b represent the number of boys, b = 36 - g since the total number of students is 36\n    # The average score for the class is the weighted average of the boys' and girls' scores\n    # We can set up the following equation: (g * 88 + (36 - g) * 91) / 36 = 89\n    \n    equation = Eq((g * 88 + (36 - g) * 91) / 36, 89)\n    \n    # Solve for g\n    solutions = solve(equation, g)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    for rhinos in range(29):  # rhinos can't be more than 28 as there are only 28 heads\n        deer = rhinos  # number of rhinos is equal to the number of deer\n        ostriches = 28 - (rhinos + deer)  # total heads minus the heads of rhinos and deer\n        total_legs = rhinos * 4 + deer * 4 + ostriches * 2  # total legs\n        if total_legs == 88:\n            return rhinos\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_table = 12\n    total_tables = 8\n\n    # Each table can fit 3 people on the long sides, and 2 on the short sides (corners are counted once)\n    people_per_long_side = 3 * total_tables\n    people_per_short_side = 2 * 2  # Two short sides, but the corners are counted only once\n\n    # Since two short sides are at the ends of the row, they will not be joined with other tables\n    max_people = people_per_long_side * 2 + people_per_short_side\n\n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of marbles that Andrew, Boris, Jeffery, and Xavier have as A, B, J, and X respectively.\n    A, B, J, X = symbols('A B J X')\n    \n    # Andrew has 30 marbles less than the average of Boris, Jeffery and Xavier\n    equation1 = Eq(A, (B + J + X)/3 - 30)\n    \n    # Xavier has thrice as many marbles as Andrew\n    equation2 = Eq(X, 3 * A)\n    \n    # Now we have two equations but 4 variables. However, we are asked only for the total number of marbles Jeffery and Boris have (J + B)\n    # So we will express J + B in terms of A using both equations\n\n    # From equation1, we can express B + J as:\n    # B + J = 3A + 90 - X\n    # From equation2, we know X = 3A, hence:\n    # B + J = 3A + 90 - 3A = 90\n\n    # Therefore, Jeffery and Boris have a total of 90 marbles\n    return 90\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    result = 9786 // 7\n    return result\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    current_page = 1\n    digits_counted = 0\n    \n    while digits_counted < total_digits:\n        digits_in_current_page = len(str(current_page))\n        digits_counted += digits_in_current_page\n        current_page += 1\n    \n    # Since the current_page has been incremented after the last addition,\n    # subtract 1 to get the actual last page number\n    return current_page - 1\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def count_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\ndef solution():\n    ans = 0\n    for i in range(15, 100000):  # You can increase this range if you want to check larger numbers\n        if i % 15 == 0 and count_factors(i) == 15:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15', '%H:%M')\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    ones_digit_32_pow_33 = (32 ** 33) % 10\n    ones_digit_22_pow_29 = (22 ** 29) % 10\n    \n    ans = (ones_digit_32_pow_33 - ones_digit_22_pow_29) % 10\n    return ans\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # Initialization of total number of people.\n    total_people = None\n    \n    # Try different sizes for the square array.\n    for size in range(1, 100):\n        # Calculating number of students and teachers for the current size.\n        students = (size**2 + (size-2)**2) // 2\n        teachers = students - 52\n        \n        # Check if the teachers form a valid inner square.\n        if (size-2)**2 - teachers == 0:\n            total_people = students + teachers\n            break\n    \n    return total_people\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    # We are looking for the largest possible value for B-A, where A is a 2-digit number (10 to 99)\n    # and B is a 4-digit number (1000 to 9999), and both A+B and A^2+B^2 are multiples of 7.\n    # To find the solution, we can iterate through the possible values of A and B and check the conditions.\n    max_diff = 0\n    for A in range(10, 100):\n        for B in range(1000, 10000):\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_diff = max(max_diff, B - A)\n    return max_diff\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ways_to_choose = comb(total_players, players_needed)\n    return ways_to_choose\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(apples, 5 / 7 * oranges)\n    equation2 = Eq(apples, 2 / 3 * (oranges + 12))\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    return 10**3\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    x, y, z = symbols('x y z', integer=True)\n\n    # Create the equation based on the given complex fraction\n    eq = Eq(2014/37, 54 + 1/(x + 1/(y + 1/z)))\n\n    # Find solutions\n    solutions = solve(eq)\n\n    # Extract x, y, z values from the solutions and sum them up\n    ans = sum([sol[x] + sol[y] + sol[z] for sol in solutions if \n               sol[x].is_Integer and sol[y].is_Integer and sol[z].is_Integer and \n               sol[x] != sol[y] and sol[y] != sol[z] and sol[x] != sol[z]])\n    return ans\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    end_position = 10  # Eddie stops counting at 10 o'clock\n    total_count = 30   # Eddie counts to 30\n\n    # Since the clock is circular with 12 numbers, we can use the modulus operator\n    start_position = (end_position - (total_count % 12)) % 12\n\n    # If the start_position is 0, Eddie starts from 12 o'clock\n    if start_position == 0:\n        start_position = 12\n\n    return start_position\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    return sum(numbers)\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the amount of oil sold from each bucket\n    sold = symbols('sold')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(89 - sold, 12 * (45 - sold))\n    \n    # Solve the equations\n    solutions = solve((equation1), (sold))\n    \n    return solutions[sold]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    winners = 9\n    amount_per_person = jackpot // winners\n\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2 / 3) * snake_hibernation\n    frog_hibernation = (5 / 4) * bear_hibernation\n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # Number of aliens (himself + 5 brothers)\n    aliens = 1 + 5\n    \n    # Total legs for all aliens\n    total_legs = aliens * 5\n    \n    # Socks needed (1 pair per 2 legs)\n    total_pairs_of_socks = total_legs // 2\n    \n    # Shoes needed (1 shoe per leg)\n    total_shoes = total_legs\n    \n    # Cost per pair of socks\n    cost_per_pair_socks = 12\n    \n    # Cost for 5 shoes\n    cost_for_five_shoes = 78\n    \n    # Total cost calculation\n    total_cost_socks = total_pairs_of_socks * cost_per_pair_socks\n    \n    # To buy shoes in groups of 5, we need to round up to nearest multiple of 5\n    total_shoe_sets = (total_shoes + 4) // 5  # use 4 to round up to nearest 5\n    \n    total_cost_shoes = total_shoe_sets * cost_for_five_shoes\n    \n    # Total cost\n    total_cost = total_cost_socks + total_cost_shoes\n    \n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    smallest_number, _ = solve_congruence(*congruences)\n    \n    # Ensure we get smallest three-digit number\n    while smallest_number < 100:\n        smallest_number += 5 * 6 * 7\n\n    return smallest_number\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import isprime\n\n    a_eq = 31\n    b_eq = 26\n    c_eq = 20\n\n    for a in range(2, a_eq):\n        if isprime(a):\n            b = a_eq - a\n            c = b_eq - a\n            if isprime(b) and isprime(c) and b + a == a_eq and a + c == b_eq and b + c == c_eq:\n                return a * b * c\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    # distance = speed * time\n    # Based on the question, let's assume the distance from home to park is d km.\n    # Time taken to go to the park = d / 5 hours\n    # Time taken to return from park = d / 4 hours\n    # Total time taken = 54 minutes = 54/60 hours\n\n    # Now let's setup our equation\n    # d/5 (time to park) + d/4 (time to return) = 54/60\n    # Solve for d: \n    # (4*d + 5*d) / 20 = 54/60\n    # 9*d = 54/60 * 20\n    # d = (54/60 * 20) / 9\n    d = (54/60 * 20) / 9\n\n    return d\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for Joleen (j) and Rennie (r)\n    j, r = symbols('j r')\n    \n    # Set up the equation based on the given information\n    equation = Eq((3/4) * r, (2/3) * (j))\n    \n    # Rennie baked 5 less pies than Joleen\n    joleen_more_pies = Eq(j, r + 5)\n    \n    # Solve the system of equations\n    solutions = solve((equation, joleen_more_pies), (j, r))\n\n    # Calculate the total number of pies they baked altogether\n    total_pies = solutions[j] + solutions[r]\n\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    # Let the number of boys be x\n    # The number of girls will be x + 8\n    # The total number of pupils is 26\n    # Hence, x + (x + 8) = 26\n    # We can find the number of girls by solving for x and adding 8.\n    \n    x = (26 - 8) / 2\n    girls = x + 8\n\n    return int(girls)\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    both = symbols('both')\n    apples = 3 * both\n    bananas = 5 * both\n    total_students = 35\n\n    equation = Eq(apples + bananas - both, total_students)\n\n    solution = solve(equation, both)\n\n    return solution[both]\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the time Nancy takes to finish the job alone\n    x = symbols('x')\n\n    # Both working together finish in 10 hours, so together they do 1/10 of the job per hour\n    # With Lee working for 6 hours and Nancy working for 20 hours, they complete the job\n    # Hence, Lee's work rate is (1 - 20/x) / 6 per hour\n\n    # Equation representing work done together\n    equation = Eq(1/10 + (1 - 20/x) / 6, 1/x)\n\n    # Solve the equation for x\n    time_nancy = solve(equation, x)[0] # Taking the first solution\n\n    return time_nancy\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    pie_oranges_g = 550\n    juice_oranges_g = 1050\n\n    remaining_oranges_kg = total_oranges_kg - (pie_oranges_g + juice_oranges_g) / 1000\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    num_students = 600\n\n    total_cost = price_per_computer * num_students\n\n    return total_cost\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):  # x can't be 0 as it is the first digit in A\n        for y in range(10):\n            A = 10 * x + y\n            B = 20 * x + 2 * y  # B is twice the digits of A\n            if B == 6 * A + 25:\n                return A\n    return \"No solution found\"\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    common_difference = 3\n    num_days = 5\n\n    total_chairs = ((2 * first_day_chairs + (num_days - 1) * common_difference) * num_days) // 2\n\n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def count_2s(n):\n    count = 0\n    for i in range(n+1):\n        count += str(i).count('2')\n    return count\n\ndef solution():\n    return count_2s(415)\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    ans = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return ans\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Maximum marbles to be taken out before getting 3 marbles of the same colour\n    # We need to consider the worst-case scenario using the Pigeonhole Principle\n    \n    # Taking max of one less than needed of blue and yellow marbles\n    blue = 4 - 3 + 1\n    yellow = 3 - 3 + 1\n    \n    # Now we are guaranteed to have 3 of a color if we pick one more marble\n    # No matter what marble is picked, it will either be the third red, blue or yellow.\n    \n    # Total marbles to be taken out is the sum of blue, yellow, and 1 more pick\n    ans = blue + yellow + 1\n    \n    return ans\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    for children in range(100, 191):\n        if children % 4 == 3 and children % 13 == 12:\n            return children\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book = 8.15\n    t_shirt = 24.55\n    pen = 0.85\n\n    total_spend = book + t_shirt + pen\n\n    return total_spend\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    ans = 312 // 6\n    return ans\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    current_sum_ages = 45\n    additional_years = 5\n    \n    # Each will be 5 years older in 5 years, so the sum of their ages increases by 5 * 2\n    future_sum_ages = current_sum_ages + additional_years * 2\n\n    return future_sum_ages\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    cost_per_sharpener = 14  # cost per pencil sharpener in pence\n    total_sharpeners = 7     # total number of pencil sharpeners\n    total_cost_pence = cost_per_sharpener * total_sharpeners  # total cost in pence\n\n    pounds_to_pence = 100  # converting £1 to pence\n    paid_pence = 1 * pounds_to_pence  # payment in pence\n\n    change_pence = paid_pence - total_cost_pence  # calculating change in pence\n\n    return change_pence\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sebastian, garrett = symbols('sebastian garrett')\n\n    equation1 = Eq(garrett, sebastian + 24)\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n\n    return solutions[garrett]\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    tax_rate = 0.06\n    paid_tax = 90\n\n    sofa_price = paid_tax / tax_rate\n\n    return sofa_price\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n    \n    number_of_people = 4\n    number_of_days = 7\n\n    total_travel_cost = travel_cost_per_person * number_of_people\n    total_hotel_cost = hotel_cost_per_day_per_person * number_of_days * number_of_people\n    total_spending_money = spending_money_per_person * number_of_people\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    term_number = 20\n\n    twentieth_term = first_term + (term_number - 1) * common_difference\n\n    return twentieth_term\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "def solution():\n    from math import factorial\n\n    # Treat all the books of the same subject as a single unit.\n    # So we have 4 units (Math, Chemistry, Physics, Biology).\n    # First, calculate the ways to arrange these 4 units.\n    unit_arrangements = factorial(4)\n\n    # Now calculate the arrangements within each unit:\n    math_books_arrangements = factorial(4)\n    chemistry_books_arrangements = factorial(3)\n    physics_books_arrangements = factorial(2)\n    biology_books_arrangements = factorial(1)  # Only 1 way to arrange 1 book.\n\n    # Multiply the arrangements of each unit by the arrangements of the units themselves.\n    total_arrangements = (unit_arrangements * math_books_arrangements * \n                          chemistry_books_arrangements * physics_books_arrangements * \n                          biology_books_arrangements)\n\n    return total_arrangements\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('ORANGES')\n    total_arrangements = factorial(total_letters)\n    \n    # Calculate the arrangements where the vowels ARE all together\n    vowels_together = factorial(total_letters - 2) * factorial(3)\n    \n    # Subtract the invalid arrangements from the total arrangements\n    valid_arrangements = total_arrangements - vowels_together\n    \n    return valid_arrangements\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges, bananas = symbols('apples oranges bananas')\n    \n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n    \n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_students = boys + girls\n\n    # Equation representing the initial difference in the number of boys and girls\n    equation1 = Eq(boys, girls - 65)\n\n    # Equation representing the remaining number of boys and girls after a fraction left\n    equation2 = Eq(boys - 2/5 * boys, girls - 3/7 * girls)\n\n    # Solve the system of equations for the number of boys and girls\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Total number of students that remained in the hall: remaining boys + remaining girls\n    remaining_boys = solutions[boys] - 2/5 * solutions[boys]\n    remaining_girls = solutions[girls] - 3/7 * solutions[girls]\n    ans = remaining_boys + remaining_girls\n\n    return ans\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    return 70017007\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_metres = 8850\n    metres_to_kilometres = 1000\n    height_kilometres = height_metres / metres_to_kilometres\n    return height_kilometres\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define variables for the stickers Eugene, Melvin, and David have initially.\n    eugene_init, melvin_init, david_init = symbols('eugene_init melvin_init david_init')\n    \n    # Define variables for the stickers they have after the trades.\n    eugene_final, melvin_final, david_final = symbols('eugene_final melvin_final david_final')\n    \n    # Equation for total stickers initially.\n    equation_total_stickers = Eq(eugene_init + melvin_init + david_init, 260)\n    \n    # Eugene gives Melvin twice as many stickers as Melvin has.\n    equation_eugene_to_melvin = Eq(eugene_init - 2 * melvin_init, eugene_final)\n    \n    # Melvin gives David as many stickers as David has.\n    equation_melvin_to_david = Eq(melvin_init + 2*melvin_init - david_init, melvin_final)\n    \n    # David gives Eugene as many stickers as Eugene has left.\n    equation_david_to_eugene = Eq(david_init + eugene_final, david_final)\n    \n    # The ratios of Eugene's to Melvin's to David's stickers in the end.\n    equation_final_ratio = Eq((eugene_final / 46) - (melvin_final / 12), 0)\n    equation_final_ratio2 = Eq((eugene_final / 46) - (david_final / 7), 0)\n    \n    # Solve the system of equations.\n    solutions = solve((equation_total_stickers,\n                       equation_eugene_to_melvin,\n                       equation_melvin_to_david,\n                       equation_david_to_eugene,\n                       equation_final_ratio, equation_final_ratio2),\n                      (eugene_init, melvin_init, david_init, eugene_final, melvin_final, david_final))\n    \n    # Extract the solution for Eugene's original number of stickers.\n    return solutions[eugene_init]\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category_1 = 30\n    category_2 = 40\n    category_3 = 45\n\n    total_ways = category_1 * category_2 * category_3\n\n    return total_ways\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import Eq, solve, isprime\n\n    # Define the equations based on the given conditions.\n    a, b, c = symbols('a b c')\n    equation1 = Eq(31 + a, 26 + b)\n    equation2 = Eq(26 + b, 20 + c)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (a, b, c))\n\n    # Extract the solutions for a, b, and c.\n    a_val = solutions[a]\n    b_val = solutions[b]\n    c_val = solutions[c]\n    \n    # Ensure a, b, and c are prime numbers.\n    if isprime(a_val) and isprime(b_val) and isprime(c_val):\n\n        # Calculate the product of a, b, and c.\n        return a_val * b_val * c_val\n    else:\n        return \"One or more variables is not a prime number.\"\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for a in range(1, 13):\n        for b in range(a, 13 - a):\n            c = 12 - a - b\n            if a <= b and b <= c:  # this condition assures that a and b are sides of isosceles triangle\n                if a + b > c:  # triangle inequality theorem\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # The problem is equivalent to the Game of Nim.\n    # The winning strategy is to always end your turn with a nim-sum (bitwise xor) of zero.\n    # Since 35 xor 24 is not zero, the first player (Eddie) has a winning strategy.\n    \n    A = 35\n    B = 24\n    nim_sum = A ^ B  # Bitwise XOR operation\n    \n    if nim_sum == 0:\n        winner = \"Wei'er\"\n    else:\n        winner = \"Eddie\"\n\n    # To find the winning move for Eddie, find a move that makes the nim-sum of the piles equal to 0.\n    for match_take in range(1, A+1):\n        if (A - match_take) ^ B == 0:\n            winning_move = (\"A\", match_take)\n            break\n    else:\n        # If not found in pile A, find it in pile B.\n        for match_take in range(1, B+1):\n            if A ^ (B - match_take) == 0:\n                winning_move = (\"B\", match_take)\n                break\n    \n    return {\"winner\": winner, \"winning_move\": winning_move}\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n\n    # Number of ways to arrange n people around a circular table\n    # is given by (n-1)! because one seat acts as a reference point\n    # and reduces the permutation by 1.\n    ans = factorial(6-1)\n\n    return ans\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys + 12, 2 * (girls - 8))\n    equation2 = Eq(boys, girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys] + solutions[girls]\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    return sum(range(31, 42))\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = sum([i if i % 4 == 0 else -i for i in range(56, 81, 2)])\n    return ans\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    first_distance = 280\n    middle_distance = 400\n    last_distance = 800 - first_distance - middle_distance\n\n    speed_first_stage = 7\n    speed_middle_stage = 5\n    speed_last_stage = 8\n\n    time_first_stage = first_distance / speed_first_stage\n    time_middle_stage = middle_distance / speed_middle_stage\n    time_last_stage = last_distance / speed_last_stage\n\n    total_time = time_first_stage + time_middle_stage + time_last_stage\n\n    return total_time\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    result = 21 * (2/7)\n    return result\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    # Since the digits 3, 5, 7 are distinct and we need to form three-digit numbers,\n    # each digit can only be used once in each number.\n    # The number of different three-digit numbers is simply\n    # the number of permutations of these three digits taken 3 at a time.\n    \n    from math import factorial\n\n    # The number of ways to arrange n distinct objects into a sequence\n    # where r objects are taken at a time is given by nPr = n! / (n-r)!\n    # For this question, n = r = 3 (since we have 3 distinct numbers and\n    # we want to form three-digit numbers).\n    \n    n = 3  # total number of digits to choose from\n    r = 3  # number of digits to arrange\n\n    ans = factorial(n) // factorial(n - r)\n    return ans\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 25))\n    for i in primes:\n        if 25 - i in primes:\n            return i * (25 - i)\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    length1 = 15\n    length2 = 45\n    largest_piece_length = gcd(length1, length2)\n    return largest_piece_length\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time_hours = 6\n    start_time_minutes = 52\n    end_time_hours = 8\n    end_time_minutes = 24\n    \n    start_total_minutes = start_time_hours * 60 + start_time_minutes\n    end_total_minutes = end_time_hours * 60 + end_time_minutes\n\n    time_spent_minutes = end_total_minutes - start_total_minutes\n\n    return time_spent_minutes\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    ans = 168 * 91\n    return ans\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq((chocolate - chocolate/6) + (vanilla - 2*vanilla/3) + (blueberry - 7*blueberry/9), 427)\n\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    chocolate_cupcakes_sold = solutions[chocolate] / 6\n\n    return chocolate_cupcakes_sold\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    # There are n - 1 intervals between n lamp posts.\n    number_of_intervals = 50 - 1\n    distance_between_lamp_posts = 2  # in meters\n\n    # Length of the road = number of intervals * distance between each lamp post\n    length_of_road = number_of_intervals * distance_between_lamp_posts\n\n    return length_of_road\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n\n    # Using the Pigeonhole Principle to calculate the minimum number of peaches\n    # for the student with the most peaches.\n    # The principle states that if n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item.\n    # In this case, we need to find the maximum number of peaches (pigeons) a student (pigeonhole) can have\n    # We use ceil to get the smallest integer greater than or equal to the division result\n    peaches_for_student_with_most = (total_peaches + total_students - 1) // total_students\n\n    return peaches_for_student_with_most\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    return 48 + 84\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    halfway_number = (18 + 52) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # The sum of an arithmetic sequence can be found with the formula:\n    # sum = n/2 * (first_term + last_term)\n    # where n is the number of terms, first_term is the first term of the sequence,\n    # and last_term is the last term of the sequence.\n    \n    # In this case, we have the sum (140) and n (7, since the numbers are consecutive),\n    # but we want to find the value of the first term.\n    # We can express the last term as first_term + 6 (since the numbers are consecutive whole numbers).\n    # Thus, the sum can also be written as 140 = 7/2 * (first_term + (first_term + 6)).\n    \n    # First let's solve for the first_term using algebra.\n    # 140 = 7/2 * (2 * first_term + 6)\n    # 280 = 7 * (2 * first_term + 6)\n    # 40 = 2 * first_term + 6\n    # 34 = 2 * first_term\n    first_term = 34 // 2\n    \n    return first_term\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    return (2 / 9) * 36\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (3, 9)]\n    lcm, remainder = solve_congruence(*congruences)\n    return remainder\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    total_cost = (10 * 45) + (10 * 27)  # in pence\n    total_cost_in_pounds = total_cost / 100  # convert pence to pounds\n    change = 10 - total_cost_in_pounds  # subtract the total cost from the £10 note\n    return change\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    total_seats = 4\n    fixed_seats = 1  # Claire's seat is fixed.\n    remaining_seats = total_seats - fixed_seats\n\n    # Without the restriction, there are (remaining_seats - 1)! ways to arrange the other players.\n    unrestricted_ways = math.factorial(remaining_seats - 1)\n\n    # With the restriction that Claire and Tony cannot sit face to face, Tony has 2 seats to choose from.\n    # Once Tony's seat is chosen, the other two players can be arranged in (remaining_seats - 2)! ways.\n    restricted_ways = 2 * math.factorial(remaining_seats - 2)\n\n    # The total number of arrangements is the difference between the unrestricted and restricted ways.\n    total_arrangements = unrestricted_ways - restricted_ways\n\n    return total_arrangements\n\nimport math\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    franks_rate = 180 / 10  # tables per day\n    ryans_rate = 180 / 15   # tables per day\n\n    difference_in_rate = franks_rate - ryans_rate\n    return difference_in_rate\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let q be the total number of questions and t be the number of minutes she planned to mark them\n    q, t = symbols('q t')\n    \n    # If she marks 4 questions per minute, she takes t + 5 minutes\n    equation1 = Eq(q, 4 * (t + 5))\n    \n    # If she marks 6 questions per minute, she takes t - 5 minutes\n    equation2 = Eq(q, 6 * (t - 5))\n    \n    # Solve the system of equations for q and t\n    solutions = solve((equation1, equation2), (q, t))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    # If the mass of a parcel is 7.4 kg when rounded off to 1 decimal place,\n    # the smallest possible mass that would round up to 7.4 is 7.35 kg.\n    # This is because any value from 7.35 to 7.44 (exclusive) would round to 7.4.\n    ans = 7.35\n    return ans\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    # Since the numbers are consecutive, we denote them as:\n    # n, n+1, n+2, n+3, n+4\n    # For three consecutive numbers' sum to be divisible by 37 or 60,\n    # those numbers should be (n+1), (n+2), (n+3)\n    # Their sum is 3n + 6\n    # We loop through all the 2-digit numbers to find the set of such numbers\n    for n in range(10, 97):\n        sum_3_numbers = (3 * n) + 6\n        if sum_3_numbers % 37 == 0 and sum_3_numbers % 60 == 0:\n            # The largest number among these would be n+4\n            return n + 4\n    return None\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    wrong_mark = -2\n    total_marks = 79\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + wrong_answers * wrong_mark == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    price_per_cake = 0.75  # in pounds, since 75 pence is 0.75 pounds\n\n    num_cakes_sold = total_money_raised / price_per_cake\n\n    return int(num_cakes_sold)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = (3/7) * total_money\n    remaining_after_restaurant = total_money - spent_at_restaurant\n    spent_on_fees = (2/9) * remaining_after_restaurant\n    remaining_money = remaining_after_restaurant - spent_on_fees\n\n    return remaining_money\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    total_candies = 24 + 10\n    candies_each = total_candies // 2\n    amy_to_give = 24 - candies_each\n    \n    return amy_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\n# Replace x and y with the actual prices per pound to use the function\nans = solution(x, y)  # x and y need to be defined with their respective values"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # Since it takes 6 seconds to chime 3 times, we can infer that there is a chime every 2 seconds.\n    # There is a pause after the first chime, so it's not just 3 chimes but 2 intervals between them.\n    # The question asks for 6 chimes at 6 PM. \n    # This would involve 5 intervals since the first chime doesn't include the interval before it.\n    # Each interval takes 2 seconds.\n\n    # Number of intervals for 6 chimes\n    intervals = 6 - 1\n\n    # Time per interval which is 2 seconds\n    time_per_interval = 2\n\n    # Total time for 6 chimes\n    total_time = intervals * time_per_interval\n\n    return total_time\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # P's daily work rate\n    p_rate_per_hour = 1 / (12 * 8)\n    # Q's daily work rate\n    q_rate_per_hour = 1 / (8 * 10)\n    \n    # Combined hourly work rate of P and Q\n    combined_rate_per_hour = p_rate_per_hour + q_rate_per_hour\n    \n    # Total work rate per day when both work 8 hours\n    combined_rate_per_day = combined_rate_per_hour * 8\n    \n    # Number of days to complete the work together\n    days_to_complete = 1 / combined_rate_per_day\n    \n    return int(days_to_complete) + (days_to_complete != int(days_to_complete))\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    meters_to_centimeters = 3.2 * 100\n    centimeters = 30\n    difference = meters_to_centimeters - centimeters\n\n    return difference\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "import math\n\ndef solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 41):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56 / 100  # convert pence to pounds\n    total_cost = 5 * cost_per_kg\n    total_paid = 10  # pounds\n    change = total_paid - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(120)\n    # Each prime factor raised to a power has (exponent + 1) possible values (0 to the exponent).\n    # For a number to be a factor, we can choose any combination of the possible values of its prime factors.\n    ans = 1\n    for exponent in factors.values():\n        ans *= (exponent + 1)\n\n    return ans\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    import math\n\n    product = 180\n    smallest_difference = product\n    \n    for i in range(1, int(math.sqrt(product)) + 1):\n        if product % i == 0:\n            factor1 = i\n            factor2 = product // i\n            difference = abs(factor2 - factor1)\n            if difference < smallest_difference:\n                smallest_difference = difference\n                \n    return smallest_difference\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let x be the time it takes for Max to cover the distance\n    # Since Luca's speed ratio to Max is 2:3, Luca takes 3/2 times longer to cover the same distance\n    # Thus, the time it takes for Luca to cover the distance is 3/2 * x\n    # According to the problem, Luca takes 10 more minutes than Max, so:\n    # 3/2 * x = x + 10\n    # Solving for x gives us the time it takes Max to cover the distance\n    # Then we need to find the time it would take Luca at double his usual speed, which is half of his original time\n\n    # Solving the equation 3/2 * x = x + 10\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 3/2 * x - (x + 10)\n    max_time = solve(equation, x)[0]\n\n    # Luca's original time would be 3/2 times of Max's time\n    luca_original_time = 3/2 * max_time\n\n    # If Luca walks at double his speed, it would take half the original time\n    luca_new_time = luca_original_time / 2\n\n    return luca_new_time\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temp = -8\n    midday_temp = 13\n    overall_change = midday_temp - midnight_temp\n    return overall_change\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    n = 10  # The sequence counts from 1 squared to 10 squared, after factoring out the common factor of 3 squared.\n    ans = 3 * n * (n + 1) * (2 * n + 1) // 6\n    return ans\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    multiples_of_3 = [i for i in range(6, 15, 3)] # Numbers between 5 and 15 that are multiples of 3\n    factors_of_27 = [j for j in range(1, 28) if 27 % j == 0] # Factors of 27\n    common_numbers = list(set(multiples_of_3).intersection(factors_of_27))\n    if common_numbers:\n        return common_numbers[0]\n    else:\n        return None\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "from math import gcd\n\ndef solution():\n    gcf = gcd(16, 36)\n    return gcf\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_weight = total_durian_weight + total_watermelon_weight\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    \n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    total_questions = 40\n    tom_score = 71\n    \n    # Define variables for correct and wrong answers\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        # Calculate the score based on correct and wrong answers\n        score = (correct * 2) - wrong\n        # Check if this score matches Tom's score\n        if score == tom_score:\n            return wrong\n\n    return None\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    difference = 1000000 - number\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let x be the number of pens and pencils Mrs. Rajoo originally bought.\n    # pens = pencils = x\n    # After giving Ali 5 pencils, she is left with x - 5 pencils.\n    # She had twice as many pens as pencils left, so pens = 2 * (pencils - 5).\n    # Therefore, x (original pens) = 2 * (x - 5)\n    # x = 2 * (x - 5) => x = 2x - 10 => x - 2x = -10 => -x = -10 => x = 10\n    \n    # Now we know the original number of pens and pencils is 10.\n    # She bought another 18 pens, so the total number of pens in the end is 10 + 18.\n    total_pens = 10 + 18\n    \n    return total_pens\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # determine jogging time and walking time\n    jogging_time_hours = 1  # from 6:30 AM to 7:30 AM\n    walking_time_hours = 2  # from 7:30 AM to 9:30 AM\n    \n    # determine jogging speed and walking speed\n    jogging_speed_mph = 6.5\n    walking_speed_mph = 4.5\n    \n    # calculate distances\n    jogging_distance = jogging_time_hours * jogging_speed_mph\n    walking_distance = walking_time_hours * walking_speed_mph\n    \n    # calculate total distance\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # Since there are 4 patterns (each with 13 cards) and we want to ensure we get at least one \"A\",\n    # we must consider the worst-case scenario where we draw all card labels excluding \"A\" in each of the patterns.\n    # Thus, we need to draw all 12 non-A cards from each of 4 patterns (12*4) plus one additional card to ensure an \"A\".\n    \n    cards_drawn_without_A = 12 * 4\n    at_least_one_A = cards_drawn_without_A + 1\n\n    return at_least_one_A\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for page in range(1, 319):\n        count += str(page).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship = 33\n    speed_current = 7\n    distance = 320\n    \n    speed_downstream = speed_ship + speed_current\n    time = distance / speed_downstream\n    \n    return time\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cut_off_length = 45 * 2\n    remaining_length = total_length - cut_off_length\n    pieces_of_40cm = remaining_length // 40\n\n    return pieces_of_40cm\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    proportion_of_left_handed_tennis_players = 1 / 10\n    proportion_of_left_handed = 0.25\n\n    # Let x be the total number of pupils\n    # Then 0.25 * x is the number of left-handed students\n    # And (1/10) * 0.25 * x = 16 is the number of left-handed tennis players\n    # => 0.025 * x = 16\n    # => x = 16 / 0.025\n    total_pupils = left_handed_tennis_players / (proportion_of_left_handed_tennis_players * proportion_of_left_handed)\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram = 80 / 20\n    butter_needed = 100 / cookies_per_gram\n    return butter_needed\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"10:35\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    # Since each of the three positions for the three-digit number can be occupied\n    # by any of the three digits (6, 7, 8) and each digit can be used more than once,\n    # we have three choices for each of the three positions.\n    choices_per_position = 3\n\n    # The total number of different three-digit numbers\n    # that can be formed is therefore:\n    total_numbers = choices_per_position ** 3\n\n    return total_numbers\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    zeros_count = 0\n    number = 1\n    while zeros_count < 100:\n        str_number = str(number)\n        zeros_count += str_number.count('0')\n        if zeros_count >= 100:\n            break\n        number += 1\n    return number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_juice = 8 * 3\n    drunk_juice = 9\n    juice_left = total_juice - drunk_juice\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_initial = 180  # meters per minute\n    time_initial = 6     # minutes\n    speed_tired = 120    # meters per minute\n    time_tired = 8       # minutes\n\n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Let the first term of the sequence be n.\n    # Since we are dealing with consecutive whole numbers (an arithmetic sequence with a common difference of 1),\n    # we can express the sum of these 8 consecutive numbers as n + (n+1) + (n+2) + (n+3) + (n+4) + (n+5) + (n+6) + (n+7).\n    # We know that this sum is equal to 2012. So, the equation becomes:\n    # 8n + (1+2+3+4+5+6+7) = 2012\n    # Simplifying, we get:\n    # 8n + 28 = 2012\n    # Solving for n gives us:\n    n = (2012 - 28) // 8\n    # The largest number in this sequence will be (n+7), since the sequence consists of 8 consecutive numbers:\n    largest_number = n + 7\n    return largest_number\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n\n    total_people = people_in_front_of_elias + danya_position_from_back + 1  # +1 for Elias\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    # Sachin's rate of work = 1 flat / 3 hours\n    sachin_rate = 1 / 3\n\n    # Peter's rate of work = 1 flat / 6 hours\n    peter_rate = 1 / 6\n\n    # Combined rate of work = Sachin's rate + Peter's rate\n    combined_rate = sachin_rate + peter_rate\n\n    # Time taken to clean the flat together = 1 flat / combined rate\n    time_taken = 1 / combined_rate\n\n    return time_taken\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    frac = 42 / 35\n    percentage = frac * 100\n    return percentage\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of students in class A\n    # Let b be the number of students in class B\n    a, b = symbols('a b')\n\n    # Original ratio of students in A to students in B is 5/7\n    equation1 = Eq(a, (5/7) * b)\n\n    # After transferring 3 students from B to A, the ratio becomes 4/5\n    equation2 = Eq(a + 3, (4/5) * (b - 3))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Define the number of bottles Faye has initially.\n    for initial_bottles in range(1, 100):  # We iterate over a plausible range of initial bottle counts.\n        bottles = initial_bottles\n        exchange_count = 0\n\n        # Perform the exchanges.\n        while bottles >= 3 and exchange_count < 5:\n            new_bottles = bottles // 3\n            bottles = bottles - new_bottles * 3 + new_bottles\n            exchange_count += 1\n\n        # Check if after 5 exchanges, Faye ends up with 4 new bottles.\n        if exchange_count == 5 and bottles == 4:\n            # She got one more bottle than expected, which means she would have 3 bottles instead of 4.\n            # Therefore, we must calculate what the initial number would be if she only got 3 bottles instead of 4.\n            bottles -= 1\n            extra_bottles = 1  # She initially had 1 more bottle than she would have.\n            while exchange_count > 0:\n                bottles = bottles * 3 // (3 - 1)\n                exchange_count -= 1\n            return bottles - extra_bottles\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    return 52248 // 12\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Assume the number of boys on one side of the square array is n\n    # The total number of boys would be n^2\n    # Adding 17 girls would add a row and a column, so the new number would be (n+1)^2\n    # Setting up the equation (n+1)^2 - n^2 = 17\n    # Solving for n gives us n^2 + 2n + 1 - n^2 = 17 -> 2n + 1 = 17\n    # Subtract 1 from both sides: 2n = 16 -> n = 8\n    n = 8\n    # The total number of boys is n^2\n    total_boys = n ** 2\n    return total_boys\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original speed as s and the distance as d.\n    s, d = symbols('s d')\n\n    # According to the problem, we have two equations:\n    # Time is distance divided by speed.\n    # 1. At the original speed, the time to cover distance d is 6 hours (from 1 pm to 7 pm).\n    #    So, the equation is d / s = 6\n    equation1 = Eq(d / s, 6)\n\n    # 2. If she travels 2 km/h faster (s + 2), she will take one hour less to travel the same distance.\n    #    So, the equation is d / (s + 2) = 5\n    equation2 = Eq(d / (s + 2), 5)\n\n    # Solve the system of equations for d\n    solution = solve((equation1, equation2), (d, s))\n\n    # The answer is the distance d\n    return solution[d]\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_millilitres_per_second = 125\n    total_millilitres = total_litres * 1000  # Convert litres to millilitres\n    total_seconds = total_millilitres / flow_rate_millilitres_per_second\n    return total_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    pages_with_1_digit = 9\n    pages_with_2_digits = 90 * 2\n    pages_with_3_digits = 900 * 3\n\n    total_digits = pages_with_1_digit + pages_with_2_digits\n    \n    if 237 <= total_digits:\n        remaining_digits = 237 - pages_with_1_digit\n        pages = 1 + remaining_digits // 2\n    else:\n        remaining_digits = 237 - total_digits\n        pages = 100 + (remaining_digits // 3)\n    \n    return pages\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    # Let a be the first term and d be the common difference of the arithmetic progression.\n    # We have two equations based on the information provided:\n    # a + 8d = a + 14d + 18  (because the 9th term is 18 larger than the 15th term)\n    # a + 19d + a + 11d = 88 (because the sum of the 20th and 12th terms is 88)\n\n    # Simplifying the equations gives us:\n    # -6d = 18 -> d = -3,\n    # 2a + 30d = 88, substituting d, we have 2a - 90 = 88\n\n    # Now, solving for a:\n    a = (88 + 90) / 2\n\n    # Having a and d, we find the 32nd term:\n    # a_32 = a + 31d\n    term_32 = a + 31 * (-3)\n\n    return term_32\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_average = 1468\n    correct_average = 1462\n    incorrect_day_savings = 1268\n    correct_day_savings = 1082\n\n    # Difference in savings due to the incorrect record\n    difference_in_savings = incorrect_day_savings - correct_day_savings\n\n    # Difference in average due to incorrect recording\n    difference_in_average = incorrect_average - correct_average\n\n    # Use the difference in total and in average to find the number of days recorded\n    days_recorded = difference_in_savings // difference_in_average\n\n    return days_recorded\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # Mr Tung takes 12 minutes to cut the rope into 4 pieces\n    # This means he makes 3 cuts (since 4 pieces require 3 cuts)\n    time_per_cut = 12 / 3\n    \n    # To cut the rope into 12 pieces, he needs to make 11 cuts\n    # (since 12 pieces require 11 cuts)\n    total_time_for_12_pieces = time_per_cut * 11\n    \n    return total_time_for_12_pieces\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    current_year = 2011\n    oak_tree_age = current_year - birth_year\n    return oak_tree_age\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 25\n    position_of_nth = 10\n    common_difference = 28 - 25\n\n    first_term = nth_term - (position_of_nth - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x represent Lily's age\n    # Marry is 1 year older than Lily\n    # Carol is 2 years older than Marry (3 years older than Lily)\n    lily, marry, carol = symbols('lily marry carol')\n    eq1 = Eq(carol, lily + 3)\n    eq2 = Eq(marry, lily + 1)\n    eq3 = Eq(4 * lily * marry * carol, 2240)\n\n    solutions = solve((eq1, eq2, eq3), (lily, marry, carol))\n    \n    # We only need the positive integer solution as ages are positive integers\n    for sol in solutions:\n        if all(map(lambda x: x.is_real and x > 0, sol)):\n            return sol[carol]\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    expression = (8 * x + 8) / 2 - 3 * (x + 6)\n    correct_answer = Eq(expression, x + 22)\n\n    corrected = solve(correct_answer, x)\n\n    return corrected[0]\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = 2 / 5 * total_flowers\n    purple_flowers = 1 / 8 * total_flowers\n\n    # Sum of red and purple flowers\n    red_and_purple_flowers = red_flowers + purple_flowers\n\n    return red_and_purple_flowers\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n\n    return ans\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # There are 11 possible distributions for 10 identical marbles into 2 piles.\n    # For example: (0, 10), (1, 9), (2, 8), ..., (10, 0)\n    # Since the marbles are identical, each distribution is a unique way.\n    ans = 11\n    return ans\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    liters_to_quarts_factor = 1.05669  # 1 liter is approximately 1.05669 quarts\n    bottle_volume_liters = 2.5\n    cup_volume_quarts = 0.5\n    bottle_volume_quarts = bottle_volume_liters * liters_to_quarts_factor\n    num_cups = bottle_volume_quarts / cup_volume_quarts\n    return round(num_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # Theres a possibility to pick 2 toys of each color without picking 3 of the same\n    # So to ensure picking 3 of the same color we need to add 1 more toy to the worst case\n    worst_case_picks = (2 * 3) + 1 # 2 each from red, blue & white and +1 to ensure\n    return worst_case_picks\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    length_cm = 85 + 147  # lengths in cm\n    length_m = 2          # length in m\n    total_length_m = length_cm / 100 + length_m  # convert cm to m and add\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number = 2\n    hundredths = 34\n    decimal_number = whole_number + hundredths / 100\n    return decimal_number\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    total_legs = 64\n    spider_legs = 8\n\n    # Assume all legs are spider legs to find maximum possible spiders\n    max_spiders = total_legs // spider_legs\n    \n    for spiders in range(max_spiders, -1, -1):\n        ant_legs = total_legs - (spiders * spider_legs)\n        if ant_legs % 6 == 0:\n            return ant_legs // 6  # Number of ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vivian, justin = symbols('vivian justin')\n\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (vivian, justin))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_left = 34\n    stamps_bought = 11\n    stamps_given = 14\n    stamps_used = 2\n\n    initial_stamps = stamps_left + stamps_given + stamps_used - stamps_bought\n\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    millilitres = 7.5 * litres_to_millilitres\n    return millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    num = symbols('num')\n    \n    operation = ((num - 6) * 6 + 6) / 6\n    equation = Eq(operation, 6)\n\n    solution = solve(equation, num)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Assuming x is the height from which the ball was dropped initially\n    # The first bounce reaches a height of 3x, second 3x, then it halves subsequently\n    # After the fourth bounce, it reaches a height of 36 m\n    # So, the sequence of heights reached is x, 3x, 3x, (3x)/2, 36\n    # Since (3x)/2 is the height reached after the third bounce, we can write:\n    # (3x)/2 = 36\n    # Solving for x, we get the initial height\n\n    # Establish the equation:\n    # (3/2)x = 36\n    # Multiply both sides by 2/3 to get x\n    x = 36 * (2 / 3)\n\n    # Now we want to get back to the initial height\n    # The initial height is x/3 because the first bounce is 3x\n    initial_height = x / 3\n\n    return initial_height\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 11.63)\n    equation2 = Eq(x + y / 10, 5.87)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    difference = solutions[x] - solutions[y]\n\n    return 100 * abs(difference)\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    return (2 * 9) + 200 + 9\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    amount_spent = initial_amount / 2\n    remaining_amount = initial_amount - amount_spent\n\n    return remaining_amount\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if b == a or b == 8: continue\n            for c in range(10):\n                if c in [a, b, 8]: continue\n                for d in range(10):\n                    if d % 2 != 0 or d in [a, b, c, 8]: continue  # Divisible by 4\n                    for e in range(10):\n                        if e % 5 != 0 or e in [a, b, c, d, 8]: continue  # Divisible by 5\n                        number = int(f\"8{a}{b}{c}{d}{e}\")\n                        if number % 3 == 0:  # Divisible by 3\n                            return number\n    return None\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    individual_price = 99  # price per song in pence\n    album_price_pence = 899  # price of the whole album in pence\n\n    total_individual_price = individual_price * 12  # price for all songs bought individually\n\n    savings = total_individual_price - album_price_pence  # money saved\n\n    return savings / 100  # convert from pence to pounds\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    trays = 40\n    \n    ans = eggs_per_tray * trays\n\n    return ans\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    answers = set()\n    for i in range(10, 100):\n        original = str(i)\n        reversed_num = int(original[::-1])\n        difference = abs(i - reversed_num)\n        answers.add(difference)\n    return len(answers), sorted(answers)\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3]\n    two_digit_numbers = set()\n    \n    for perm in permutations(digits, 2):\n        num = int(''.join(map(str, perm)))\n        if num >= 10:\n            two_digit_numbers.add(num)\n    \n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    # To get the smallest possible difference, we will have the smallest digit in the ten thousands place of the larger number\n    # and the largest digit in the ten thousands place of the smaller number. \n    # Additionally, we should make sure that the overall larger number is as small as possible and the overall smaller is as large as possible.\n    # One way to do so, is to place the digits in ascending order for the smaller number \n    # and in descending order for the larger number, managing the zero to not be at the start of the smaller number.\n\n    # The second smallest digit must start the smaller number to avoid leading zero\n    smaller_number = 10**4 * digits[1]\n\n    # Construct the smaller number from right to left (putting larger digits at the end)\n    for i in range(2, 6):\n        smaller_number += digits[i] * (10**(i-2))\n\n    # The largest digit must start the larger number\n    larger_number = 10**4 * digits[9]\n\n    # Construct the larger number from right to left (putting smaller digits at the end)\n    for i in range(4):\n        larger_number += digits[8-i] * 10**i\n\n    # The smallest possible difference\n    smallest_difference = larger_number - smaller_number\n\n    return smallest_difference\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peter = symbols('peter')\n    sam = peter + 40\n\n    # Sam gives 20% of his stickers to Peter\n    peter += sam * 0.20\n    sam -= sam * 0.20\n\n    # Peter gives 25% of his stickers to Sam\n    sam += peter * 0.25\n    peter -= peter * 0.25\n\n    # The difference in stickers after the exchange is 96\n    equation = Eq(sam - peter, 96)\n\n    peter_initial = solve(equation)[0]\n\n    return peter_initial\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time = 15  # time in seconds\n    distance = 450  # length of the train in meters\n\n    # The speed of the train is distance divided by time\n    speed = distance / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    ans = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n    return ans\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    left_side = 3 * 13 + 5 * 13\n    A = left_side / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_solution = salt + water\n\n    concentration = (salt / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    result = 70 / 100 * 40\n    return result\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    # cost of a pencil\n    pencil_cost = 2\n    # cost of a pen\n    pen_cost = 4\n\n    # pencils per pen based on their costs\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_baba = 10\n    baba_behind_ali = 1\n\n    total_people = people_in_front_of_ali + baba_behind_ali + people_behind_baba\n\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    cards_sent_by_each = friends - 1\n    total_cards = friends * cards_sent_by_each\n    return total_cards\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    num = 1\n    while True:\n        if all(num % i == 0 for i in range(1, 7)):\n            return num\n        num += 1\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 102))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    number_of_jugs = 4\n\n    water_added = jug_capacity * number_of_jugs\n    total_water = initial_water + water_added\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the variables\n    chloe, david, emily = symbols('chloe david emily')\n    \n    # Creating the equations based on the problem statement:\n    # Chloe collects twice as much as David\n    equation1 = Eq(chloe, 2 * david)\n    # David raises three times as much as Emily\n    equation2 = Eq(david, 3 * emily)\n    # The sum of money raised by all friends\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    # The number of cookies eaten in the first 3 days\n    first_period = 9 * 3\n    # The number of cookies eaten in the following 2 days\n    second_period = 15 * 2\n    # The number of cookies eaten in the last 2 days\n    third_period = 10 * 2\n\n    # Total number of cookies eaten\n    total_cookies = first_period + second_period + third_period\n    # Total number of days\n    total_days = 3 + 2 + 2\n\n    # Average number of cookies eaten per day\n    average_cookies_per_day = total_cookies / total_days\n\n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Candy's work rate per day\n    candy_rate = 1 / 20.0  \n    # David's work rate per day\n    david_rate = 1 / 25.0  \n    # Total time to finish the job\n    total_time = 12  \n\n    # The total amount of work done by Candy alone in 12 days\n    candy_work = candy_rate * total_time  \n\n    # The equation for the total amount of work done when both work together is:\n    # candy_work + david_work = 1 (complete job)\n    # We need to find david_work as the remaining work after Candy's contribution\n\n    david_work = 1 - candy_work  \n    # Find the number of days David worked using the amount of work he did\n    david_work_days = david_work / david_rate  \n\n    # Now find the number of days David took off\n    david_days_off = total_time - david_work_days  \n\n    return david_days_off\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The force exerted by the table on the book (normal force) is equal in magnitude and opposite in direction\n    # to the force of gravity on the book. Assuming the book is at rest and there's no other vertical force acting on it.\n    force_of_gravity = 20  # in Newtons (N)\n    normal_force = force_of_gravity  # The magnitude will be the same, 20 N, assuming no other vertical forces.\n\n    return normal_force\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')\n    tax_first_50k = 0.05 * 50000\n    remaining_income = 140000 - 50000\n    tax_above_50k = (0.08 + T) * remaining_income\n    \n    total_tax = tax_first_50k + tax_above_50k\n    \n    tax_equation = Eq(total_tax, 15100)\n    \n    T_value = solve(tax_equation, T)\n    \n    return T_value[0]\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')\n    guy_age = y - 3\n    return guy_age\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the variables\n    total_fruits = symbols('total_fruits', real=True, positive=True)\n    apples = 4/5 * total_fruits\n    pears = total_fruits - apples\n    fruits_removed = 3/4 * total_fruits\n    \n    # Form equations based on the conditions given\n    equations = [\n        Eq(apples - 1/8 * apples, total_fruits - fruits_removed - 30),\n        Eq(pears - 30, total_fruits - fruits_removed - apples + 1/8 * apples)\n    ]\n    \n    # Solve the system of equations\n    solution = solve(equations, total_fruits)\n    \n    # Return the total_fruits in the box at first\n    return solution[0]\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # The worst case scenario to not get 6 balls of the same type is to get all the balls of the other two types.\n    # Therefore, we take the maximum number of balls of the other two types, which is 9 basketballs and 3 volleyballs.\n    max_basketballs = 9\n    max_volleyballs = 3\n\n    # We take the maximum out of basketballs and volleyballs, plus one to ensure we get 6 footballs.\n    balls_needed = max_basketballs + max_volleyballs + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from sympy import symbols, solve\n\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h = 5.0   # height in meters\n\n    v = symbols('v')  # final velocity\n\n    # Using the equations of motion: v^2 = u^2 + 2gh (where u is the initial velocity, here u = 0)\n    equation = Eq(v**2, 2 * g * h)\n\n    solutions = solve(equation, v)\n\n    # Since we're looking for speed and not velocity, we take the positive root.\n    return abs(solutions[1])\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_per_cake = 36 / 6\n    total_time = time_per_cake * 10\n    return total_time\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stickers Mr Ya has, and y the number of pupils\n    x, y = symbols('x y')\n\n    # When giving 13 stickers to each pupil, the excess is 190\n    equation1 = Eq(x, 13 * y + 190)\n    # When giving 17 stickers to each pupil, the excess is 50\n    equation2 = Eq(x, 17 * y + 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The number of stickers Mr Ya has\n    return solutions[x]\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    # Initial velocity\n    v0 = 5  # m/s\n\n    # Launch angle\n    theta = 45  # degrees\n\n    # Building height\n    h = 30  # meters\n\n    # Acceleration due to gravity\n    g = 9.81  # m/s^2\n\n    # Convert angle to radians\n    theta_radians = math.radians(theta)\n\n    # Horizontal (vx) and vertical (vy) components of the velocity\n    vx = v0 * math.cos(theta_radians)\n    vy = v0 * math.sin(theta_radians)\n\n    # Time taken to reach the ground\n    t = math.sqrt(2 * h / g)\n\n    # Final vertical speed (vy - g * t)\n    vy_final = vy - g * t\n\n    # Magnitude of the final velocity (speed)\n    v_final = math.sqrt(vx**2 + vy_final**2)\n\n    return v_final\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # Since each of the 3 kids must get at least one orange, we can start by giving\n    # each kid one orange. Then we have 13 - 3 = 10 oranges left to divide.\n    oranges_left = 13 - 3\n\n    # Now we need to divide 10 oranges among 3 kids, which is a problem of partitioning\n    # an integer into a fixed number of summands. This is equivalent to finding the\n    # number of solutions in non-negative integers to the equation x1 + x2 + x3 = 10.\n\n    # Using stars and bars method:\n    # We need 2 \"bars\" to create 3 sections for the kids and 10 \"stars\" for the oranges.\n    # The total number of ways to arrange these is given by comb(10 + 3 - 1, 10).\n\n    ways = comb(oranges_left + 3 - 1, oranges_left)\n\n    return ways\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    # Initialize the smallest possible number with digit sum of 20\n    # Start checking from 902 (the smallest 3-digit number with digit sum of 20)\n    num = 902\n    \n    # Function to calculate the digit sum of a number\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    # Check if the number is divisible by 11\n    def is_divisible_by_11(n):\n        # Alternate sum of digits starting from the rightmost digit\n        alternated_sum = sum(int(str(n)[i]) * (-1)**i for i in range(len(str(n))))\n        return alternated_sum % 11 == 0\n    \n    # Increment and check each number until conditions are met\n    while not (digit_sum(num) == 20 and is_divisible_by_11(num)):\n        num += 11  # Since the number must be divisible by 11, increment by 11\n    \n    return num\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 5):\n        s, a, m, o, g = p\n        if s == 0 or o == 0:  # skip cases where S or O would not be a valid digit for a 5-digit number\n            continue\n        \n        sasmo = s * 10000 + a * 1000 + s * 100 + m * 10 + o\n        ogams = o * 10000 + g * 1000 + a * 100 + m * 10 + s\n        \n        if sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    # Number of options for each category\n    food_options = 2  # sandwiches, burgers\n    drink_options = 3  # coffee, milk, tea\n    dessert_options = 4  # cake, pudding, ice-cream, pie\n    \n    # Calculating the total different ways using the Principle of Multiplication\n    total_ways = food_options * drink_options * dessert_options\n    \n    return total_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    equal_volume = total_water / 2\n    water_to_transfer = equal_volume - 28\n    return water_to_transfer\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n    \n    equation1 = Eq(2 * elephant, 5 * cow)\n    equation2 = Eq(4 * cow, 3 * horse)\n    equation3 = Eq(3 * horse, 5 * pig)\n    \n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n\n    pigs_for_1_elephant = solutions[pig] / solutions[elephant]\n    pigs_for_8_elephants = pigs_for_1_elephant * 8\n    \n    return pigs_for_8_elephants\n    \nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    principal = 2000\n    amount = 2519.42\n    years = 3\n    \n    r = symbols('r')\n    equation = Eq(principal * (1 + r)**years, amount)\n    \n    interest_rate = solve(equation, r)[0]\n    \n    return float(interest_rate)\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = (2 * 10) + (4 * 2) + (8 * 0.5)\n    total_cost = total_paid - 0.40\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the prices of mangoes and lychees\n    mangoes_price, lychees_price = symbols('mangoes_price lychees_price')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(24 * mangoes_price + 20 * lychees_price, 1160)\n    equation2 = Eq(lychees_price, 2 * mangoes_price - 6)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (mangoes_price, lychees_price))\n\n    return solutions[lychees_price]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    result = 0.60 * (2/5) * 75\n    return result\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percentage = 0.18\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # Total singing performances\n    total_singing = 6\n    # Total dancing performances\n    total_dancing = 4\n    \n    # We can think of the 4 dancing performances as 3 slots between them (D D D D)\n    # We need to fill these slots with at least 1 singing performance each.\n    # So, we \"reserve\" 3 singing performances for these slots.\n    reserved_singing = total_dancing - 1\n    \n    # Number of singing performances left after reservation\n    singing_left = total_singing - reserved_singing\n    \n    # Calculate the number of ways we can arrange the remaining singing performances\n    # in the reserved slots plus the beginning and end of the performances.\n    slots_for_singing = reserved_singing + 1\n    ways_to_place_singing = factorial(slots_for_singing + singing_left - 1) // (factorial(singing_left) * factorial(slots_for_singing - 1))\n    \n    # Now, arrange the fixed dancing performances\n    ways_to_place_dancing = factorial(total_dancing)\n    \n    # Multiply the ways to arrange singing and dancing performances to get the total arrangements\n    return ways_to_place_singing * ways_to_place_dancing\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_for_5_boxes = 350\n    weight_per_box = total_weight_for_5_boxes / 5\n    total_weight_for_3_boxes = weight_per_box * 3\n    return total_weight_for_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange the 4 comics among themselves\n    comics_arrange = factorial(4)\n    # Number of ways to arrange the 6 fictions among themselves\n    fictions_arrange = factorial(6)\n    # Number of ways to arrange the two groups (comics and fictions) on the shelf\n    groups_arrange = factorial(2)\n\n    # Total arrangements is the product of the arrangements of the individual groups\n    # and the arrangements of the groups among themselves\n    total_arrangements = comics_arrange * fictions_arrange * groups_arrange\n    return total_arrangements\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    total_score = 155\n    question_points = 10\n    wrong_answer_penalty = -5\n    question_count = 10\n    justin_advantage = 15\n\n    for correct_dora in range(question_count + 1):\n        incorrect_dora = question_count - correct_dora\n        score_dora = question_points * correct_dora + wrong_answer_penalty * incorrect_dora\n        score_justin = score_dora + justin_advantage\n        \n        if score_dora + score_justin == total_score:\n            return correct_dora\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let's denote the total number of candies sold by Class A as A,\n    # and the total number of candies sold by Class B as B.\n    # We also know the number of groups in Class A (3 groups) and Class B (4 groups).\n    \n    # According to the problem:\n    # Average candies sold per group in Class A = 12\n    # Total candies sold by Class A (A) = 12 * 3\n    \n    A = 12 * 3\n    \n    # Since Class A and Class B combined have 3 + 4 = 7 groups,\n    # and the average candies sold per group for both classes is 8,\n    # We can write the total number of candies sold by both classes (A + B) as:\n    # Total candies sold by A and B combined = 8 * 7\n    \n    AB_total = 8 * 7\n    \n    # Now we subtract the total candies sold by Class A from the combined total\n    # to get the total candies sold by Class B:\n    B = AB_total - A\n    \n    # Finally, we find the average number of candies sold per group in Class B\n    # by dividing the total by the number of groups (4):\n    avg_B = B / 4\n    \n    return avg_B\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let l be the time it takes Lee to finish the job alone, and n be the time it takes Nancy\n    l, n = symbols('l n')\n    \n    # Lee and Nancy's combined work rate is (1/l + 1/n) jobs per hour\n    # Together, they finish the job in 10 hours\n    equation1 = Eq(1/l + 1/n, 1/10)\n    \n    # Lee works for 6 hours and Nancy works for 20 hours to complete the job\n    equation2 = Eq(6/l + 20/n, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (l, n))\n    \n    return solutions[n]\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n    total_ratio = coffee_ratio + milk_ratio\n    ratio_per_litre = coffee_litres / coffee_ratio\n    total_litres = ratio_per_litre * total_ratio\n    return total_litres\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_length = 250\n    used_string_length = 180\n    remaining_string_length = total_string_length - used_string_length\n    number_of_pieces = 10\n\n    length_of_each_piece = remaining_string_length / number_of_pieces\n\n    return length_of_each_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for i in range(20):\n        if i % 4 == 3 and i % 5 == 4:\n            return i\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    return 45 / 100 * 80\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from itertools import combinations\n\ndef solution():\n    flavours = 7\n    doughnuts = 2\n    combinations_count = len(list(combinations(range(flavours), doughnuts)))\n    return combinations_count\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    num_handshakes = comb(num_people, 2)\n    \n    return num_handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    white, milk, dark = symbols('white milk dark')\n    \n    ratio_eq = Eq(white / milk, 3 / 7)\n    ratio_eq2 = Eq(white / dark, 3 / 5)\n    diff_eq = Eq(dark - white, 8)\n    \n    solutions = solve((ratio_eq, ratio_eq2, diff_eq), (white, milk, dark))\n    \n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    # Let's denote the total number of students as x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # According to the problem, we can set up an equation\n    equation = Eq(x / 4 + 3 + (x - (x / 4 + 3)) / 3 - 3 + 25, x)\n    \n    # Now solve for x\n    total_students = solve(equation, x)[0]\n    \n    return total_students\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    red_balls = 5\n    green_balls = 10\n    target_probability = 1/3\n    while True:\n        total_balls = red_balls + green_balls\n        probability = green_balls / total_balls\n        if probability == target_probability:\n            return red_balls - 5  # subtracting the initial number of red balls\n        red_balls += 1  # adding one more red ball if not at target probability\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    side_length_big_square = 6\n    side_length_small_square = 3\n\n    squares_per_side = side_length_big_square // side_length_small_square\n    total_squares = squares_per_side ** 2\n\n    return total_squares\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    metres = 70.24\n    cm_per_metre = 100\n    cm = metres * cm_per_metre\n    return cm\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5\n    fraction_spent = 1/4\n    initial_money = spent / fraction_spent\n\n    return initial_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of Peter's stickers be x\n    peter = symbols('peter')\n    \n    # Sam had 40 more stickers than Peter initially\n    sam = peter + 40\n    \n    # Sam gave 20% of his stickers to Peter\n    sam_after_giving = sam - 0.20 * sam\n    peter_after_receiving = peter + 0.20 * sam\n    \n    # Peter gave 25% of his stickers to Sam\n    peter_after_giving = peter_after_receiving - 0.25 * peter_after_receiving\n    sam_after_receiving = sam_after_giving + 0.25 * peter_after_receiving\n    \n    # In the end, Sam had 96 stickers more than Peter\n    final_equation = Eq(sam_after_receiving - peter_after_giving, 96)\n    \n    # Solve for the number of Peter's stickers\n    solutions = solve(final_equation, peter)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # The ones digit of a number only depends on the ones digit of its base and its exponent.\n    # We find the pattern for the ones digit of powers of 32 and 22.\n    \n    # Ones digit of powers of 32 follows a pattern: 2, 4, 8, 6 and then it repeats.\n    ones_of_32_pattern = [2, 4, 8, 6]\n    # Since 33 % 4 == 1, the ones digit of 32^33 is the same as the ones digit of 32^1.\n    ones_of_32 = ones_of_32_pattern[33 % 4 - 1]\n    \n    # Ones digit of powers of 22 follows a pattern: 2, 4, 8, 6 and then it repeats.\n    ones_of_22_pattern = [2, 4, 8, 6]\n    # Since 29 % 4 == 1, the ones digit of 22^29 is the same as the ones digit of 22^1.\n    ones_of_22 = ones_of_22_pattern[29 % 4 - 1]\n    \n    # The ones digit of the result will be the ones digit of (32^33 minus 22^29)\n    ans = (ones_of_32 - ones_of_22) % 10 # We subtract and find the modulo 10 to get the ones digit.\n    \n    return ans\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def count_6_in_page_numbers(max_page):\n    count = 0\n    for i in range(1, max_page + 1):\n        count += str(i).count('6')\n    return count\n\ndef solution():\n    max_page = 1\n    while count_6_in_page_numbers(max_page) < 18:\n        max_page += 1\n    # We overshoot by one in the loop because we're checking for '< 18'\n    # So we need to subtract 1 to get the correct maximum\n    return max_page - 1\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 != dice2 and dice1 != dice3 and dice2 != dice3:\n                    if dice1 + dice2 + dice3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    num_fruits = 2\n    num_vegetables = 3\n    combinations = num_fruits * num_vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    return 4619 + 457 + 88\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # The ratio between the missing number and 81 is the same as the ratio between 4 and 9.\n    # Let the missing number be x. Then we have x/81 = 4/9\n\n    # Cross-multiply to find x:\n    x = 4 * 81 / 9\n\n    return int(x)\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    double_jump_net_gain = (2 * jump_up) - slide_down  # Net gain after every 2 jumps\n    \n    # Calculate the number of double jumps required to reach or exceed the height just before the final jump\n    double_jumps_needed = (total_height - jump_up) // double_jump_net_gain\n    \n    # Calculate the final height after these double jumps\n    height_after_double_jumps = double_jumps_needed * double_jump_net_gain\n    \n    # Calculate the remaining height to reach the top\n    remaining_height = total_height - height_after_double_jumps\n    \n    # Determine if an additional jump is needed\n    if remaining_height > 0:\n        double_jumps_needed += 1\n    \n    # Since each double jump consists of 2 jumps, multiply by 2\n    total_jumps = double_jumps_needed * 2\n    \n    return total_jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    total_sum = 0\n    for n in range(1, 2013):\n        total_sum += (2 * n)**3 / (n * (n + 1) * (n + 2))\n    total_sum += 1 / 4026\n    return total_sum\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for num in range(1, 100):\n        if num % 16 == 0 and (num + 1) % 5 == 0 and (num ** 0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    common_difference = 21 - 15\n    last_term = 39\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    correct_mark = 4\n    wrong_or_unanswered_mark = -2\n\n    # Let x be the number of correct answers\n    # Total marks for correct answers: 4 * x\n    # Total marks lost for wrong/unanswered answers: 2 * (total_questions - x)\n    # Total score: 4 * x + (-2) * (total_questions - x) = 152\n    \n    # Now let's find the value of x\n    # 4 * x - 2 * (total_questions - x) = 152\n    # 4x - 2 * 80 + 2x = 152\n    # 6x = 152 + 2 * 80\n    # x = (152 + 2 * 80) / 6\n    \n    x = (152 + 2 * total_questions) / (correct_mark + abs(wrong_or_unanswered_mark))\n    return int(x)\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # If we want to share 16 sausages among 24 people equally,\n    # each person should receive 16/24 parts of a sausage.\n    # This fraction simplifies to 2/3 of a sausage per person.\n    \n    # To figure out the least number of cuts, we want each cut to create\n    # pieces that can be distributed without further cutting.\n    # With each cut, we can create a maximum of three pieces\n    # (two cuts in a sausage gives three pieces).\n\n    # Since we need to distribute 2 pieces per person for 24 people,\n    # we need 48 pieces in total. To avoid cutting any piece further,\n    # we should aim to make all 48 required pieces with minimum cuts.\n\n    # If we make two cuts in a sausage, we get 3 pieces, thus for 16 sausages:\n    # 16 sausages * 3 pieces per sausage = 48 pieces\n\n    # Hence, the number of cuts required for each sausage should be 2,\n    # and since there are 16 sausages, the total number of cuts would be:\n    cuts_per_sausage = 2\n    total_sausages = 16\n    total_cuts = cuts_per_sausage * total_sausages\n\n    return total_cuts\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial as fact\nfrom itertools import permutations\n\ndef solution():\n    total = fact(len(\"RAINBOW\"))\n    vowel_perms = fact(len(\"AI\")) * fact(len(\"RAINBOW\") - len(\"AI\"))\n    ans = total - vowel_perms\n    return ans\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Wendy and Vivien's age \n    wendy, vivien = symbols('wendy vivien')\n    \n    # Equation 1: Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Equation 2: Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years' time\n    wendy_age_in_5_years = solutions[wendy] + 5\n    \n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 350)\n    equation2 = Eq(B, 2 * (A - 500))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    for i in range(11, 39):\n        if 39 % i == 51 % i == 147 % i:\n            return i\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Lovelle speaks to each of the 5 other team members, 3 times each\n    lovelle_speaks = 5 * 3\n\n    # 12 members did not speak to Lovelle, adding Lovelle\n    not_speaking_with_lovelle = 12 + 1\n\n    # Total team members = members who spoke with Lovelle + those who didn't\n    total_members = lovelle_speaks + not_speaking_with_lovelle\n\n    return total_members\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    # Initialize count of digits\n    digits_count = 0\n    \n    # Count digits for pages 1 through 9 (1 digit each)\n    digits_count += 1 * 9\n    \n    # Count digits for pages 10 through 99 (2 digits each)\n    digits_count += 2 * (99 - 10 + 1)\n    \n    # Count digits for pages 100 through 325 (3 digits each)\n    digits_count += 3 * (325 - 100 + 1)\n\n    return digits_count\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    # Calculate total permutations without restriction\n    word = \"STATISTIC\"\n    total_permutations = factorial(len(word))\n\n    # Count the occurrences of each letter\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    # Divide by the factorial of each letter's occurrences to get distinct permutations\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    # Calculate permutations where T's are together\n    # Treat 'TT' as a single letter for this calculation, so we decrease the length by 1\n    total_permutations_with_tt = factorial(len(word) - (letter_counts['T'] - 1))\n\n    # Adjust for the fact that 'TT' can be ordered in two ways (although they are indistinct in this case)\n    # and divide by factorial of each letter's occurrences (excluding 'TT', hence '- 1')\n    for letter, count in letter_counts.items():\n        if letter == 'T':\n            continue\n        total_permutations_with_tt //= factorial(count)\n\n    # Subtract permutations where T's are together from total permutations to get the final answer\n    ans = total_permutations - total_permutations_with_tt\n\n    return ans\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n\n    total_tickets = first_week_tickets + second_week_tickets + third_week_tickets\n\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 // 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for gums in range(1, 1000):  # arbitrary upper limit to find the smallest number\n        remaining_after_music = gums - 2\n        shared = remaining_after_music // 3\n        if remaining_after_music % 3 == 0:\n            remaining_after_sharing = remaining_after_music - shared\n            if remaining_after_sharing % 4 == 0:\n                return gums\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n    \n    hours_needed = total_pieces / pieces_per_hour\n    \n    return hours_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Sarah's and Mark's initial number of Pokemon cards\n    sarah, mark = symbols('sarah mark')\n    \n    # Sarah had $20 more Pokemon cards than Mark originally\n    equation1 = Eq(sarah - mark, 20)\n    \n    # Sarah bought 16 extra Pokemon cards\n    # After buying, Sarah had 3 times more Pokemon cards than Mark\n    equation2 = Eq(sarah + 16, 3 * mark)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sarah, mark))\n    \n    return solutions[sarah]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    return round(418, -1)\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    return 17 + 18 + 29 + 6\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    result = (2018 - 20 + 18) / 8\n    return result\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    attempts = 0\n    # 1st chest\n    attempts += 9\n    # 2nd chest\n    attempts += 8\n    # 3rd chest\n    attempts += 7\n    # 4th chest\n    attempts += 6\n    return attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Analyze the pattern\n    pattern = [2945, 3445, 3245, 3745, 4045, 3845]\n    \n    # Find the differences between consecutive terms\n    differences = [pattern[i+1] - pattern[i] for i in range(len(pattern) - 1)]\n    \n    # Identify the pattern in differences\n    # Pattern in differences: +500, -200, +500, +300, -200\n    # Thus, the missing term follows the pattern after +500 and -200, which should be +500\n    \n    missing_term = pattern[2] + 500  # +500 after the third term (3245)\n    \n    return missing_term\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    return sum(i**2 for i in range(1, 26, 2))\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    return 15 / (1/7)\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour + second_hour, 40)\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 6\n\n    value_after_years = initial_value * (1 - depreciation_rate) ** years\n\n    return value_after_years\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men = symbols('men')\n    women = men * 4\n    total_cupcakes = 2 * women + 5 * men\n    cupcakes_eq = Eq(total_cupcakes, 182)\n    \n    num_men = solve(cupcakes_eq, men)[0]\n    num_women = 4 * num_men\n\n    return num_women\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    coin_diameter = 1.85  # diameter of each coin in cm\n    num_coins = 11  # number of coins\n\n    # Total length is the length of 10 gaps plus the diameter of one coin\n    total_length = (num_coins - 1) * coin_diameter + coin_diameter\n\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    n = 14\n    a1 = 5\n    d = 8 - 5  # difference between terms\n\n    an = a1 + (n - 1) * d  # nth term\n    sum_seq = (n * (a1 + an)) // 2  # sum of arithmetic sequence\n\n    return sum_seq\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    # Given the fractional relationship 3/12 = □/20\n    # We calculate the value of □ by cross-multiplying\n    # 3 * 20 = 12 * □\n    # □ = (3 * 20) / 12\n    ans = (3 * 20) / 12\n    return ans\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    # Each participant shakes hands with each other once, but we avoid double counting because\n    # participant A shaking hands with participant B is the same as B shaking hands with A.\n    # So we use the combination formula n! / (k!*(n-k)!) with k = 2 (each handshake involves two people)\n    handshakes = math.comb(participants, 2)\n    \n    return handshakes\n\nimport math\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    number_of_people = 8\n    # When people sit around a circular table, one position is fixed\n    # and the remaining (n-1)! gives the arrangements\n    arrangements = factorial(number_of_people - 1)\n    return arrangements\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n\n    temp_difference = night_temp - morning_temp\n\n    return temp_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    return (2 ** 2017 * 3 ** 2017) % 10\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x') # x will represent the initial number of ants\n\n    # 3/4 of the ants were swept into the neighbour's house\n    ants_after_sweep = x - (3/4) * x \n\n    # 2/5 of the remaining ants ran out of the kitchen\n    ants_after_run = ants_after_sweep - (2/5) * ants_after_sweep \n\n    # 185 ants crawled into the kitchen afterwards\n    final_ants = ants_after_run + 185   \n\n    # The final number of ants is twice the initial number of ants\n    equation = Eq(final_ants, 2 * x)\n\n    # Solve the equation\n    solutions = solve(equation)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_current_age = 8\n    mother_current_age = sandra_current_age + 33\n    difference_in_age_2_years_ago = (mother_current_age - 2) - (sandra_current_age - 2)\n    return difference_in_age_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_day1 = 89\n    books_day2 = 11\n\n    total_cost = book_cost * (books_day1 + books_day2)\n\n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let's denote first term as 'a' and common difference as 'd'\n    a, d = symbols('a d')\n    \n    # In an arithmetic progression the nth term is given by: an = a + (n-1)*d\n    \n    # The sum of first four terms (a1 + a2 + a3 + a4) is:\n    sum_first_four = a + (a + d) + (a + 2*d) + (a + 3*d)  # This simplifies to 4*a + 6*d\n    \n    # The sum of last four terms (a5 + a6 + a7 + a8) is:\n    sum_last_four = (a + 4*d) + (a + 5*d) + (a + 6*d) + (a + 7*d)  # This simplifies to 4*a + 22*d\n    \n    # Given that sum of the first four terms is 32 less than the sum of the last four terms\n    equation = Eq(sum_first_four, sum_last_four - 32)\n    \n    # We only need to find the common difference 'd', the solution can be in terms of 'a'\n    solution = solve(equation, d)\n    \n    # Return the value of the common difference 'd'\n    return solution[d]\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    n = 8\n    next_number = n**2\n    return next_number\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens = pens_per_friend * number_of_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def nguyens_rule(n):\n        while n > 100:\n            n -= 100\n        return n * 2 + 4\n\n    number = 1\n    for i in range(1, 2022):\n        number = nguyens_rule(number)\n\n    return number\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    from math import gcd\n\n    def lcm(x, y):\n        return (x * y) // gcd(x, y)\n\n    red_flash_rate = 4\n    green_flash_rate = 6\n\n    # Find least common multiple of the two flash rates\n    flash_sync_rate = lcm(red_flash_rate, green_flash_rate)\n    \n    # Since the lights flash at least once per minute together,\n    # the number of times they flash together in an hour is the \n    # same as the least common multiple of their rates.\n    # Plus 1 to include the first time they flash together.\n    flashes_in_hour = 60 // flash_sync_rate + 1\n\n    return flashes_in_hour\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 14):  # Since 3a + 7b = 41 and both a and b are prime, a must be less than 14\n        if isprime(a):\n            b = (41 - 3*a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    num1 = 4.5\n    num2 = 10.3\n    midpoint = (num1 + num2) / 2\n    return midpoint\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    sale_price = 6500\n    profit_percentage = 30\n\n    # Calculate the cost price based on the sale price and profit percentage\n    cost_price = sale_price / (1 + (profit_percentage / 100))\n\n    # Given profit amount\n    given_profit = 5000\n\n    # Calculate the new sale price with the given profit\n    new_sale_price = cost_price + given_profit\n\n    # Calculate the new profit percentage\n    new_profit_percentage = (given_profit / cost_price) * 100\n\n    return new_profit_percentage\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    n = symbols('n')\n    equation = Eq((32/n), (n/2))\n    solutions = solve(equation, n)\n    return solutions\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    # Total volume of the drink where water makes up 3/5 of it\n    total_volume_per_bottle = 120 / (1 - 3/5)\n    # Volume of water per bottle\n    water_volume_per_bottle = total_volume_per_bottle * (3/5)\n    # Total water needed for 6 bottles\n    total_water_for_six_bottles = water_volume_per_bottle * 6    \n    return total_water_for_six_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kg_to_g = 1000  # 1 kg = 1000 grams\n    n = 8.2 * kg_to_g\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    letters = 'EARTH'\n    num_unique_letters = len(set(letters))\n    ans = factorial(num_unique_letters)\n    return ans\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150  # in feet per minute\n    friend_speed = 200  # in feet per minute\n    time_walked = 10  # in minutes\n    simon_run_speed = 2 * simon_speed  # twice the original speed\n    \n    distance_simon_walked = simon_speed * time_walked\n    distance_friend_walked = friend_speed * time_walked\n    \n    total_distance_apart = distance_simon_walked + distance_friend_walked\n    \n    time_taken_for_simon_to_return = distance_simon_walked / simon_run_speed\n    \n    distance_friend_walks_while_simon_returns = friend_speed * time_taken_for_simon_to_return\n    \n    distance_apart_when_simon_reaches_school = total_distance_apart + distance_friend_walks_while_simon_returns\n    \n    return distance_apart_when_simon_reaches_school\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 5):\n        s, e, n, d, m, o, r, y = *perm[0:3], 0, *perm[3:5], perm[1]\n        send = 1000 * s + 100 * e + 10 * n + d\n        more = 1000 * m + 100 * o + 10 * r + e\n        money = 10000 * m + 1000 * o + 100 * n + 10 * e + y\n        if send + more == money:\n            return send * more\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_balls = 2 + 2 + 2 + 1  # Bells + Stars + Red balls + Green ball\n    identical_bells = 2\n    identical_stars = 2\n    identical_red_balls = 2\n\n    ways = factorial(total_balls) // (factorial(identical_bells) * factorial(identical_stars) * factorial(identical_red_balls))\n    \n    return ways\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # All possible scenarios given the rules with timings\n    scenarios = [\n        (1 + 2, 2),\n        (1 + 5, 5),\n        (1 + 10, 10),\n        (2 + 5, 5),\n        (2 + 10, 10),\n        (5 + 10, 10),\n    ]\n\n    min_time = float('inf')\n\n    for first_cross in scenarios:\n        for back in [1, 2]:  # Either Eddie or Jack goes back with the flashlight\n            for second_cross in scenarios:\n                # Ensuring that the person who goes back isn't in the second crossing party\n                if back in second_cross:\n                    continue\n                # Choose the fastest remaining person to go back\n                for final_back in [1, 2]:\n                    if final_back == back or final_back in first_cross or final_back in second_cross:\n                        continue\n                    final_cross = [e for e in [1, 2, 5, 10] if e not in first_cross and e not in second_cross][0]\n                    # Calculate total time as sum of all crossings and two returns with the flashlight\n                    total_time = first_cross[0] + back + second_cross[0] + final_back + final_cross\n                    min_time = min(min_time, total_time)\n\n    return min_time\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    total_water = 5  # litres\n    container_size = total_water * 0.25\n    cup_size = 0.150  # 150 ml in litres\n    \n    water_used_for_container = container_size\n    water_used_for_cups = 14 * cup_size\n    \n    water_left = total_water - (water_used_for_container + water_used_for_cups)\n    \n    return water_left\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "import itertools\n\ndef solution():\n    total_seats = 7\n    all_seats = range(total_seats)\n    total_ways = 0\n    \n    for seating in itertools.permutations(all_seats):\n        if all(seating[i] != i for i in all_seats):\n            total_ways += 1\n            \n    return total_ways\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"2{digit1}{digit2}335\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 100 // 7 * 7\n    if n == 100:\n        n -= 7\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24  # minutes\n\n    # Ginny takes less time because her speed ratio is greater.\n    # Time is inversely proportional to speed for a given distance: \n    # Harry's time / Ginny's time = Ginny's speed ratio / Harry's speed ratio\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    # Let x be the original number of pages Anny writes every day\n    # Then the total number of pages is 8x\n    # If she writes x+2 pages a day, she will finish in 6 days, so the total pages is 6(x+2)\n    # Therefore, 8x = 6(x+2)\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Creating the equation\n    equation = Eq(8*x, 6*(x+2))\n\n    # Solving for x\n    solution_x = solve(equation, x)\n\n    # Total number of pages is 8x\n    total_pages = 8 * solution_x[0]\n\n    return total_pages\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate of baking is 5 loaves per 20 minutes.\n    # So, Pip can bake 5 / 20 = 0.25 loaves per minute.\n    pip_rate_per_minute = 5 / 20\n\n    # Bud's rate of baking is 3 loaves per 15 minutes.\n    # So, Bud can bake 3 / 15 = 0.2 loaves per minute.\n    bud_rate_per_minute = 3 / 15\n    \n    # They bake for 40 minutes.\n    time_baking = 40\n\n    # Total loaves baked by Pip in 40 minutes is Pip's rate times the time.\n    pip_loaves = pip_rate_per_minute * time_baking\n\n    # Total loaves baked by Bud in 40 minutes is Bud's rate times the time.\n    bud_loaves = bud_rate_per_minute * time_baking\n\n    # The total loaves baked by Pip and Bud combined is the sum of their individual totals.\n    total_loaves = pip_loaves + bud_loaves\n\n    return int(total_loaves)\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    return 828 // 9\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    increase_rate = 0.1\n    decrease_rate = 0.1\n\n    # The house value increased by 10% to £11,000 in the last year\n    # Calculate the original price before the increase\n    original_price_before_increase = 11000 / (1 + increase_rate)\n\n    # The house loses 10% of its value after the slumps in this year.\n    # Calculate the value after the decrease\n    price_after_decrease = original_price_before_increase * (1 - decrease_rate)\n\n    # Calculate profit or loss comparing with the original price\n    profit_or_loss = price_after_decrease - original_price_before_increase\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # Worst case scenario:\n    # Yohan might take out all red socks followed by all black socks,\n    # which would mean having 10 red socks + 10 black socks,\n    # and then he would take out 2 white socks to make a pair.\n    max_socks = 10 + 10 + 2\n    return max_socks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expression = (12*a)/4 + 2*a*5\n    simplified_expression = expression.simplify()\n    \n    return simplified_expression\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expr = (6 * d) + (5 * d) - d\n    simplified_expr = simplify(expr)\n    return simplified_expr\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the initial number of cookies\n    initial_cookies = symbols('initial_cookies')\n\n    # Richard ate 3/8 in the morning + 1/6 in the afternoon, and 33 left\n    equation = Eq((3/8 + 1/6) * initial_cookies + 33, initial_cookies)\n\n    # Solve for the initial number of cookies\n    solved = solve(equation, initial_cookies)\n\n    return solved[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    from statistics import median\n\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * (i + 2))\n    \n    return median(sequence)\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jemma_number = symbols('jemma_number')\n\n    equation = Eq((jemma_number + 3) * 5, 35)\n\n    solution = solve(equation, jemma_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2020, 5, 5)  # Year is a placeholder since it doesn't affect day of the week\n    end_date = datetime(2020, 6, 7)\n    count_sundays = 0\n\n    current_date = start_date\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # weekdays() return 6 for Sunday\n            count_sundays += 1\n        current_date += timedelta(days=1)\n\n    return count_sundays\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of red and white marbles\n    r, w = symbols('r w', integer=True)\n    # Define symbol for the number of red balls Pip adds\n    red_pip = symbols('red_pip', integer=True)\n\n    # Initial ratio of red to white marbles\n    equation1 = Eq(r/w, 3/2)\n    # After Pip adds red balls, ratio of red to white balls\n    equation2 = Eq((r+red_pip)/w, 5/3)\n    # After Bud adds white balls, ratio of red to white balls\n    equation3 = Eq((r+red_pip)/(w + red_pip + 100), 5/4)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (r, w, red_pip))\n\n    # Return the number of white balls at the beginning\n    return solutions[w]\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    total_litres = 120\n    bucket_capacity = 8\n    num_buckets = total_litres // bucket_capacity\n    \n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed_pupils = total_pupils / 4\n    not_left_handed_pupils = total_pupils - left_handed_pupils\n    return int(not_left_handed_pupils)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # kg\n    num_packets = 25\n    flour_per_packet = total_flour / num_packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for K in range(10):\n        number = int(f\"5{K}27{K}\")\n        if number % 3 == 0 and number % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, brownies = symbols('cookies brownies')\n    \n    # Original ratio\n    equation1 = Eq(cookies / brownies, 4/3)\n    \n    # Ratio after giving away 6 brownies\n    equation2 = Eq(cookies / (brownies - 6), 12/7)\n    \n    solutions = solve((equation1, equation2), (cookies, brownies))\n    \n    # Total baked goods\n    total_baked = solutions[cookies] + solutions[brownies]\n    \n    return total_baked\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    initial_companies = 4\n    initial_distance = 900\n    initial_days = 5\n\n    new_companies = 6\n    new_distance = 5400\n\n    initial_work_rate = initial_companies * initial_days / initial_distance\n    new_work_rate = new_companies / initial_work_rate\n\n    new_days = new_distance * new_work_rate / new_companies\n\n    return new_days\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # Cost price when he buys the horse for the first time\n    cost_price1 = 10\n    \n    # Selling price when he sells the horse for the first\n    sell_price1 = 20\n    \n    # Cost price when he buys back the horse\n    cost_price2 = 30\n    \n    # Selling price when he sells the horse again\n    sell_price2 = 40\n    \n    # Total profit = (First sell price - first cost price) + (Second sell price - second cost price)\n    total_profit = (sell_price1 - cost_price1) + (sell_price2 - cost_price2)\n    \n    return total_profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spent = 93\n    adam_tickets = 6\n    claire_spent = 124\n\n    price_per_ticket = adam_spent / adam_tickets\n    claire_tickets = claire_spent / price_per_ticket\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25\n\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    # Total sum of cards from 1 to 8\n    total_sum = sum(range(1, 9))\n    \n    # Since Player One's sum is 23, subtract this from the total sum\n    # to get the sum of Player Two's cards\n    player_two_sum = total_sum - 23\n    \n    # Start from the highest card (8) and go down to see what is the highest\n    # card Player Two can possibly have\n    for card in range(8, 0, -1):\n        # If the remaining sum exceeds the current card, it means\n        # this card can be in Player Two's hand\n        if player_two_sum - card >= 0:\n            return card\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of shoes, two shoes per pair\n    time_per_shoe = 2    # 2 minutes per shoe\n    cobblers = 2         # number of cobblers\n\n    # Each cobbler cleans the same number of shoes in parallel\n    # Thus, the total time divided by the number of cobblers\n    total_time = (total_shoes * time_per_shoe) / cobblers\n\n    return total_time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(1, 21))\n    return sum_squares\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    cookies = 118\n    packet_size = 7\n    packets_needed = (cookies + packet_size - 1) // packet_size\n    \n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    unanswered_questions = 3\n    total_score = 168\n    correct_points = 4\n    wrong_points = -1\n\n    # Let x be the number of correct answers,\n    # then (total_questions - unanswered_questions - x) will be the number of wrong answers\n    # We set up the equation: 4x - (total_questions - unanswered_questions - x) = total_score\n\n    correct_answers = (total_score + total_questions - unanswered_questions) / (correct_points - wrong_points)\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    players = 6\n    handshakes = comb(players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    total_dumplings = luna_dumplings + lucy_dumplings\n    dumplings_each = total_dumplings // 2\n    dumplings_to_give = luna_dumplings - dumplings_each\n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds = 24\n    base_number = two_thirds * (3/2)\n    three_quarters = base_number * (3/4)\n    return three_quarters\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    ans = sum(range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations('1234567890', 4):\n        b, d, e, c = p\n        if b == '0' or c == '0':  # Number can't start with zero\n            continue\n        \n        cbcd = int(c+b+c+d)\n        cdbc = int(c+d+b+c)\n        bdec = int(b+d+e+c)\n\n        if cbcd + cdbc == bdec:\n            return bdec\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n    \n    # Calculate the least common multiple of the packs\n    pack_lcm = lcm(6, 8, 9, 15)\n    \n    # Find the smallest multiple of the LCM that is greater than or equal to 1000\n    min_markers = pack_lcm\n    while min_markers < 1000:\n        min_markers += pack_lcm\n    \n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    return 543 - 284\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "def solution():\n    from math import factorial\n\n    # The vowels that must be together: A, E, E\n    vowels = 3\n    # Calculate permutations of vowels taking the repeated 'E' into account\n    # Since we have two 'E's, we divide by factorial(2) to account for the repetition\n    vowel_perms = factorial(vowels) // factorial(2)\n\n    # Treat the vowels AE and E as a single unit for the purpose of rearranging\n    # The word 'CHLLNG' + 'AE' unit has 7 distinct characters including the AE unit\n    characters = 7\n    # Calculate permutations of the other characters NOT including the vowel permutations\n    char_perms = factorial(characters)\n\n    # Multiply the character permutations with the vowel permutations\n    total_perms = char_perms * vowel_perms\n\n    return total_perms\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n    \n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    carrot_cakes = 4\n    carrot_cake_price = 5\n    cheesecakes = 1\n    cheesecake_price = 10\n    chocolate_cakes = 5\n    chocolate_cake_price = 12\n\n    total_cakes = carrot_cakes + cheesecakes + chocolate_cakes\n    total_revenue = (carrot_cakes * carrot_cake_price) + (cheesecakes * cheesecake_price) + (chocolate_cakes * chocolate_cake_price)\n\n    average_price = total_revenue / total_cakes\n\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    # Assume the divisor is x, then the quotient will also be x.\n    # The smallest dividend that satisfies the condition will be when x is the smallest it can be while still being greater than the remainder. \n    # Since the remainder is 7, the smallest possible divisor (and so quotient) that is still greater than the remainder is 8.\n    divisor = remainder + 1\n    \n    # The dividend can be calculated as (divisor * quotient) + remainder\n    dividend = (divisor * divisor) + remainder\n    \n    return dividend\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n    equation1 = Eq(cars, 4/3 * bikes)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    solutions = []\n    for total in range(2, 100, 2):\n        equation3 = Eq(cars + bikes + lorries, total)\n        sol = solve((equation1, equation2, equation3), (cars, bikes, lorries), dict=True)\n        if sol and all(value.is_integer and value > 0 for value in sol[0].values()):\n            solutions.extend(sol)\n\n    return solutions[0] if solutions else {}\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Calculate the total amount spent from January to March\n    jan_to_mar = 450 * 3\n    \n    # Calculate the total amount spent from April to July\n    apr_to_jul = 350 * 4\n    \n    # The total amount from August to October is already given\n    aug_to_oct = 1250\n    \n    # Calculate the total amount spent from November to December\n    nov_to_dec = 400 * 2\n    \n    # Calculate the total amount spent in the year\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # Calculate the average spent per month from January to December\n    monthly_average = total_spent / 12\n    \n    return monthly_average\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    num_years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** num_years)\n\n    return final_value\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_row_seats = 10\n    difference = 2\n    row_number = 12\n\n    seats_in_12th_row = first_row_seats + (row_number - 1) * difference\n\n    return seats_in_12th_row\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    cube_root = round(245**(1/3))\n    while True:\n        if (245 * (cube_root ** 3)).is_integer():\n            p = (cube_root ** 3) / 245\n            if (p.is_integer()):\n                break\n        cube_root += 1\n    return int(p)\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    days_spent = total_pages / pages_per_day\n\n    return int(days_spent)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = (6**2) - (4**2)\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    \n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    book_cost = initial_amount * 0.10\n    remaining_after_book = initial_amount - book_cost\n    dvd_cost = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - dvd_cost\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    # The number of visitors that join the line each minute\n    visitors_per_minute = 10\n    \n    # The capacity of one entrance to help visitors check in per minute\n    one_entrance_capacity = 25\n    \n    # With one entrance, it takes 16 minutes to clear the line\n    total_visitors = 16 * visitors_per_minute\n    \n    # Now, with two entrances, the capacity will be doubled\n    two_entrance_capacity = 2 * one_entrance_capacity\n    \n    # Calculate the time it takes to clear the line with two entrances\n    time_with_two_entrances = total_visitors / two_entrance_capacity\n    \n    return time_with_two_entrances\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # The decimal part of 1/3 is recurring '3'\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    climb_per_day = 5\n    slide_per_night = 3\n    net_climb_per_day = climb_per_day - slide_per_night\n    day_count = 0\n\n    while total_distance > 0:\n        day_count += 1\n        total_distance -= climb_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_per_night\n\n    return day_count\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    end_number = 34\n    added_number = 12\n\n    original_number = (end_number - added_number) / 2\n\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_goals = sum(scores)\n    number_of_games = len(scores)\n    mean_goals = total_goals / number_of_games\n    return mean_goals\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # Each student can choose from 1 to 3 types of fruits.\n    # For 1 type of fruit, there are 3 possibilities: apple, pear or cherry.\n    # For 2 types of fruit, there are 3 choose 2 possibilities: apple-pear, apple-cherry, pear-cherry.\n    # For 3 types of fruit, there is 1 possibility: apple-pear-cherry.\n    # Total possibilities for any student = 3 (1 type) + 3 (2 types) + 1 (3 types).\n    total_possibilities = 3 + 3 + 1\n\n    # According to the pigeonhole principle, to ensure that at least two students choose the same combination,\n    # we need one more student than the total possibilities.\n    return total_possibilities + 1\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10 / 100\n    discount_amount = original_price * discount_percentage\n\n    final_price = original_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n\n    combos = burgers * sides * drinks\n\n    return combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent_money = 10\n    initial_money = spent_money * 4\n    return initial_money\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Number of legs for ducks, parrots, rabbit and cats\n    duck_legs = 3 * 2\n    parrot_legs = 2 * 2\n    rabbit_legs = 1 * 4\n\n    # Total legs without cats\n    total_legs_without_cats = duck_legs + parrot_legs + rabbit_legs\n\n    # Each cat has 4 legs\n    cat_legs = 4\n\n    # Total legs with cats is 32\n    # Number of cats is (total_legs - total_legs_without_cats) / cat_legs\n    number_of_cats = (32 - total_legs_without_cats) / cat_legs\n\n    return int(number_of_cats)\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    # Let the initial number of oranges be 3x and the number of lemons be 5x\n    # After selling 48 oranges, the number of oranges becomes 3x - 48\n    # We know that the new ratio of oranges to lemons is 1:2\n    # So the equation representing the new ratio is (3x - 48) / 5x = 1 / 2\n    \n    # Now we can set up the equation and solve for x\n    # (3x - 48) / 5x = 1 / 2\n    # 2*(3x - 48) = 5x\n    # 6x - 96 = 5x\n    # x = 96\n    \n    x = 96\n    \n    # The initial number of lemons is 5 * x\n    lemons_initial = 5 * x\n\n    return lemons_initial\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    class_a = 45\n    class_b = 75\n    class_c = 210\n\n    # Calculate the Greatest Common Divisor (GCD) for class A and B\n    gcd_ab = gcd(class_a, class_b)\n\n    # Calculate the GCD for all three classes using the previously calculated GCD\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy, father = symbols('judy father')\n\n    equation1 = Eq(father, judy + 33)\n    equation2 = Eq(judy + father, 63)\n\n    solutions = solve((equation1, equation2), (judy, father))\n\n    judy_age = solutions[judy]\n    father_age = solutions[father]\n\n    years_ago = symbols('years_ago')\n    equation3 = Eq((father - years_ago), 4 * (judy - years_ago))\n\n    solutions_years_ago = solve((equation3.subs({judy: judy_age, father: father_age})), (years_ago))\n\n    return solutions_years_ago[0]\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n    num_teams = 11\n    num_matches = comb(num_teams, 2)  # Calculate combinations of 11 teams taken 2 at a time\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n    \n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    lcm = 1\n    for i in [6, 8, 9, 15]:\n        lcm = (lcm * i) // math.gcd(lcm, i)\n    \n    minimum_markers = (1000 // lcm) * lcm\n    if minimum_markers < 1000:\n        minimum_markers += lcm\n    \n    return minimum_markers\n\nimport math\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of rooms\n    # Let y be the number of students\n    x, y = symbols('x y')\n\n    # Equation 1: If 4 people in each room, 40 students don't have dormitories\n    # => 4 * x + 40 = y\n    equation1 = Eq(4 * x + 40, y)\n\n    # Equation 2: If 6 people in each room, 24 beds will be vacated\n    # => 6 * x - 24 = y\n    equation2 = Eq(6 * x - 24, y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # A is 25 greater than B\n    equation1 = Eq(A, B + 25)\n    \n    # A + 35 will be 6 times greater than B\n    equation2 = Eq(A + 35, 6 * B)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    sequence_position = 102\n\n    common_difference = (fifteenth_term - tenth_term) // (15 - 10)\n\n    first_term = tenth_term - (10 - 1) * common_difference\n\n    nth_term = first_term + (sequence_position - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_fraction = 3/5\n    eaten_sweets = 18\n    total_sweets = eaten_sweets / eaten_fraction\n    remaining_sweets = total_sweets - eaten_sweets\n\n    return int(remaining_sweets)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age_now = 9\n    john_age_now = 5\n    jane_age_future = 15\n    age_difference = jane_age_now - john_age_now\n    \n    john_age_future = jane_age_future - age_difference\n    \n    return john_age_future\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for i in range(10, 21):\n        if i % 4 == 0 and 36 % i == 0:\n            return i\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the younger brother\n    # Let y be the current age of the older brother\n    x, y = symbols('x y')\n\n    # When the older brother was the same age as the current age of the younger brother, the younger brother was 12\n    # So the difference in age will always be (y - x)\n    # When the younger brother was 12, older brother was x which implies y-x = x - 12\n    equation1 = Eq(y - x, x - 12)\n\n    # When the younger brother becomes the same age as the older brother's current age, the older brother will be 27\n    # So in (y - x) years, older brother will be 27, which implies x + (y - x) = y --> younger brother's current age\n    # And the older brother will be y + (y - x) = 27\n    equation2 = Eq(y + (y - x), 27)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((13 - x) ** 2, 25)\n\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n    \n    marked_price = cost_price * 1.20\n    selling_price = marked_price * 0.80\n    loss = marked_price - selling_price - cost_price\n    \n    equation = Eq(loss, 40)\n    \n    cost_price_solution = solve(equation, cost_price)\n    \n    return cost_price_solution[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    return ((7 + 3) * 11) - (7 + (3 * 11))\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Rate at which both taps fill the tank together\n    rate_both = 1 / 6\n    # Rate at which Tap X fills the tank alone\n    rate_x = 1 / 10\n    # Rate at which Tap Y fills the tank alone (Inclusion-Exclusion Principle)\n    rate_y = rate_both - rate_x\n    # Time taken by Tap Y to fill the tank alone is the reciprocal of its rate\n    time_y = 1 / rate_y\n\n    return time_y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    only_apples = 20 - 10\n    only_strawberries = 30 - 10\n    both = 10\n    neither = 5\n    total_students = only_apples + only_strawberries + both + neither\n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x for Xuanrui, y for Yaokuan\n\n    # Original amount of markers\n    equation1 = Eq(x + y, 708)\n\n    # After transactions\n    equation2 = Eq(x - 532, y - (3/7)*y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    original_price = 1050\n    discount_percentage = 12 / 100\n    discount_amount = original_price * discount_percentage\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_points = -2\n    total_points = 44\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_points + incorrect_answers * incorrect_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = 0\n    last_fact = 1\n    for i in range(1, 9):\n        last_fact *= i\n        factorial_sum += last_fact\n    return factorial_sum % 100\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    volume_A = 300  # Volume of sugar water in cup A\n    concentration_A = 20 / 100  # Sugar concentration in cup A (as a decimal)\n\n    volume_B = 300  # Volume of sugar water in cup B\n    concentration_B = 30 / 100  # Sugar concentration in cup B (as a decimal)\n\n    # Calculate the total volume of the mixture\n    total_volume = volume_A + volume_B\n    \n    # Calculate the total amount of sugar in the mixture\n    total_sugar = (volume_A * concentration_A) + (volume_B * concentration_B)\n    \n    # Calculate the sugar concentration of the mixture\n    concentration_mixture = (total_sugar / total_volume) * 100\n\n    return concentration_mixture\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, ryan = symbols('ahmad ryan')\n    total_marbles = 1442\n\n    # equation for the total number of marbles\n    equation1 = Eq(ahmad + ryan, total_marbles)\n    # Ahmad has 6 times as many marbles as Ryan\n    equation2 = Eq(ahmad, 6 * ryan)\n\n    # solve the system of equations for ahmad and ryan\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n\n    ahmad_marbles = solutions[ahmad]\n    ryan_marbles = solutions[ryan]\n\n    # calculate how many marbles Ahmad must give to Ryan for them to have equal amount\n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    decimal_sum = 3/10 + 1/100 + 7/1000\n    return decimal_sum\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    pounds_to_dollars = 2.50\n    dollars = 1000\n    pounds = dollars / pounds_to_dollars\n    return pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    total_notes = 95\n    total_after_exchange = 175\n\n    exchanged_notes = total_after_exchange - total_notes\n    number_of_10_notes = exchanged_notes // 4\n    number_of_2_notes = total_notes - number_of_10_notes\n\n    return number_of_2_notes\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    gap_length = 1\n\n    # Calculate the length of the train excluding the head\n    remaining_length = total_length - head_length\n    # Calculate the length of one carriage with its gap\n    total_carriage_length = carriage_length + gap_length\n\n    # Compute number of other carriages\n    num_carriages = remaining_length // total_carriage_length\n    \n    # Add the head of the train to get total number of carriages\n    total_carriages_including_head = num_carriages + 1\n    \n    return total_carriages_including_head\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    \n    # Equation 1: pen + pencil = 2.90\n    equation1 = Eq(pen + pencil, 2.90)\n\n    # Equation 2: pen = pencil + 0.60\n    equation2 = Eq(pen, pencil + 0.60)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    triangle_value = solutions[triangle]\n    diamond_value = solutions[diamond]\n\n    # How many triangles are equal to a diamond\n    ans = diamond_value / triangle_value\n\n    return ans\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    for correct in range(51):\n        wrong = 50 - correct\n        score = correct * 2 - wrong\n        if score == 82:\n            return correct\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y', integer=True)\n    equation = Eq(24 * x - 25 * y, 8)\n    solutions = solve(equation, (x, y))\n\n    # Considering x and y are whole numbers, which implies that x and y are non-negative integers,\n    # and we need to find the smallest value of x, we will filter the solutions.\n    x_values = [sol[x] for sol in solutions if sol[x] >= 0 and sol[y] >= 0]\n    min_x = min(x_values)\n\n    return min_x\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):        # x can be any digit from 1 to 9\n        for y in range(10):       # y can be any digit from 0 to 9\n            A = 10 * x + y        # Constructing the number A = xy\n            B = 20 * x + y        # Constructing the number B = 2xy\n            \n            if B == 6 * A + 25:   # Checking the condition given in the problem\n                return A          # Returning the value of A as per the condition\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    discounted_price = original_price - discount\n    increase = 0.15 * discounted_price\n    final_price = discounted_price + increase\n\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    price_per_kg_1 = 5 / 2.5\n    price_per_kg_2 = 7.7 / 4\n\n    if price_per_kg_1 < price_per_kg_2:\n        return \"2.5kg bag is better value\"\n    else:\n        return \"4kg bag is better value\"\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # Count for ones place\n    ones_count = (288 // 10) + 1  # +1 including the 0 in the counting\n    \n    # Count for tens place\n    tens_count = (28 // 10) * 10  # Not including the 0 in the tens place\n    if 28 % 10 >= 8:  # 28 has a tens digit greater than or equal to 8\n        tens_count += 10\n    \n    # Count for hundreds place\n    hundreds_count = 0\n    if 288 >= 100:  # Checking if there's any 8 in the hundreds place\n        hundreds_count = 100  # There is exactly 100 pages from 100-199\n    \n    # Total count of the digit '8'\n    total_count = ones_count + tens_count + hundreds_count\n    return total_count\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = sum([1/i for i in range(2001, 2011)])\n    S = 1 / S_inverse\n    return int(S)\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n    total_cost = price_per_book * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    quarter_full_mass = 250\n    three_quarters_full_mass = 350\n    \n    half_full_mass = 2 * (three_quarters_full_mass - quarter_full_mass)\n    empty_jar_mass = quarter_full_mass - half_full_mass\n    \n    return empty_jar_mass\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    # Calculate the number of intervals by dividing the road length by the interval distance\n    num_intervals = road_length // interval\n\n    # Since trees are planted at the beginning and end of each interval, add 1 to include the last tree\n    trees_per_side = num_intervals + 1\n\n    # The total number of trees is twice the number because trees are planted on both sides\n    total_trees = trees_per_side * 2\n    \n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    distance = lcm(5, 10, 12)\n    return distance\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n    \n    total_length = (bus_length * number_of_buses) + (distance_between_buses * (number_of_buses - 1))\n    \n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # Aiden's mistaken calculation: (x / 4) - 25 = 2021\n    mistake_eq = Eq((x / 4) - 25, 2021)\n    \n    # Solve for the original number x\n    original_number = solve(mistake_eq, x)[0]\n    \n    # Aiden's intended calculation: 4 * x + 25\n    correct_answer = 4 * original_number + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_28_blocks = 182\n    number_of_blocks = 42\n\n    # Find the height of one block\n    height_per_block = height_28_blocks / 28\n\n    # Find the height of 42 blocks\n    height_42_blocks = height_per_block * number_of_blocks\n  \n    return height_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    ans = 45 * 7\n    return ans\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    difference = 1\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        num = int(f\"2{E}3{E}2\")\n        if num % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(x / 5, y / 3)\n    x_value = 5\n\n    y_value_when_x_5 = solve(equation.subs(x, x_value), y)[0]\n\n    return \"directly\", y_value_when_x_5\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.50  # 50% above cost\n    discounted_price = selling_price * 0.90  # 10% Christmas discount\n    profit = discounted_price - cost_price\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 1\n    while True:\n        original_number = m**2 + 5\n        n = int((original_number + 18)**0.5)\n        if n**2 == original_number + 18:\n            break\n        m += 1\n    return original_number\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "from math import gcd\n\ndef solution():\n    classA = 12\n    classB = 15\n    classC = 18\n\n    gcd_AB = gcd(classA, classB)\n    gcd_ABC = gcd(gcd_AB, classC)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time_in_minutes = 5 * 60  # 5 p.m. in minutes\n    badminton_duration = 45  # badminton in minutes\n    jogging_duration = 30  # jogging in minutes\n\n    end_time_in_minutes = start_time_in_minutes + badminton_duration + jogging_duration\n    end_hour = end_time_in_minutes // 60\n    end_minutes = end_time_in_minutes % 60\n\n    # Since the time is in 24-hour format and the problem does not specify AM or PM, we just return the time.\n    return f\"{end_hour}:{str(end_minutes).zfill(2)}\"\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    total_numbers = 3\n    changed_number = 16\n\n    original_total = original_average * total_numbers\n    new_total = new_average * total_numbers\n\n    difference = original_total - new_total\n    original_number = changed_number + difference\n\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n\n    # Total students\n    total_students = 36\n\n    # Total average score\n    total_average = 89\n\n    # Average score of girls\n    average_girls = 88\n\n    # Average score of boys\n    average_boys = 91\n\n    # Boys can be calculated by subtracting girls from total_students\n    boys = total_students - girls\n\n    # Equation based on total average score\n    equation = Eq(average_girls * girls + average_boys * boys, total_average * total_students)\n\n    # Solve the equation\n    num_girls = solve(equation, girls)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    rex_attempted = total_questions - 1\n    rex_score = 66\n    points_correct = 4\n    points_incorrect = -2\n\n    # Let x be the correct answers\n    # rex_attempted - x gives the incorrect answers\n    # 4x - 2(rex_attempted - x) = rex_score\n    # Solving for x gives us the number of correct answers\n\n    x = (rex_score + 2 * rex_attempted) // (points_correct + abs(points_incorrect))\n    \n    return x\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    vertices = 8  # A cube has 8 vertices\n    edges = 12  # A cube has 12 edges\n    faces = 6  # A cube has 6 faces\n\n    # Euler's formula for polyhedra: V - E + F = 2\n    ans = vertices - edges + faces\n\n    return ans\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # The fourth number is 6 and the sixth number is 15\n    # Let's denote the sequence as a, b, a+b, a+2b, 2a+3b, 3a+5b\n    # According to the problem a+2b = 6 and 3a+5b = 15\n    \n    # Now we have two equations with two unknowns\n    # a + 2b = 6    -> Equation 1\n    # 3a + 5b = 15  -> Equation 2\n    \n    # We can solve for a and b\n    # First, let's solve Equation 1 for 'a': a = 6 - 2b\n    \n    # Substitute 'a' in Equation 2 with the expression from Equation 1\n    # 3(6 - 2b) + 5b = 15\n    # 18 - 6b + 5b = 15\n    # -b = 15 - 18\n    # b = 3\n    \n    # Now, substitute 'b' back into Equation 1 to solve for 'a'\n    # a + 2*3 = 6\n    # a = 6 - 6\n    # a = 0\n    \n    # Now we have the values for a and b.\n    a = 0\n    b = 3\n    \n    # The sequence is now: 0, 3, 3, 6, 9, 15\n    # The seventh number is the sum of the fifth and sixth number\n    seventh_number = (2*a + 3*b) + (3*a + 5*b)  # a+2b + 2a+3b\n    \n    return seventh_number\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    david_solution = 800\n    eugene_solution = 200\n    felix_solution = 300\n\n    david_sugar = david_solution * 0.05\n    eugene_sugar = eugene_solution * 0.30\n    felix_sugar = felix_solution * 0.10\n\n    total_solution = david_solution + eugene_solution + felix_solution\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n\n    sugar_concentration = (total_sugar / total_solution) * 100\n\n    return sugar_concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n\n    equation1 = Eq(gill - andrew, 18)\n    equation2 = Eq(andrew + gill, 62)\n\n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    cookies = 148\n    box_capacity = 9\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    \n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    smallest_number = float('inf')\n    \n    # Check all possible 3 digit numbers with 7 as one of the digits\n    for i in range(1, 10):\n        for j in range(10):\n            for k in range(10):\n                digits = {i, j, k}\n                if 7 in digits and all(abs(7-d) <= 4 for d in digits):\n                    number = 100*i + 10*j + k\n                    smallest_number = min(smallest_number, number)\n\n    return smallest_number\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    angel = \"0141705021\"\n    devil = \"4005220912\"\n    \n    # Sort the numbers in both passwords to compare if they are a permutation of each other\n    sorted_angel = sorted(angel)\n    sorted_devil = sorted(devil)\n    \n    # Check if they are the same\n    if sorted_angel == sorted_devil:\n        return True  # Andy can unlock the treasure chest\n    else:\n        return ''.join(sorted_angel)  # Provide the correct password\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    volume1 = 20  # litres of first punch\n    concentration1 = 35  # percent fruit juice in the first punch\n\n    volume2 = 30  # litres of second punch\n    concentration2 = 60  # percent fruit juice in the second punch\n\n    # Calculate the amount of fruit juice in each type of punch\n    juice1 = (concentration1 / 100) * volume1\n    juice2 = (concentration2 / 100) * volume2\n\n    # Calculate the total volume of the mixture\n    total_volume = volume1 + volume2\n    # Calculate the total amount of fruit juice in the mixture\n    total_juice = juice1 + juice2\n\n    # Find the percent concentration of the mixture\n    concentration_mixture = (total_juice / total_volume) * 100\n\n    return concentration_mixture\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    \n    # Count the number of times '2' appears in every page number from 1 to 100\n    for page in range(1, 101):\n        count += str(page).count('2')\n\n    return count\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of badges Wendy made at the beginning.\n    x = symbols('x')\n\n    # Calculate the number of badges sold on the first day.\n    badges_sold_first_day = (5/7) * x\n\n    # Calculate the remaining badges after the first day.\n    remaining_after_first_day = x - badges_sold_first_day\n\n    # Calculate the number of badges sold on the second day.\n    badges_sold_second_day = (1/3) * remaining_after_first_day\n\n    # Calculate the remaining badges after the second day.\n    remaining_after_second_day = remaining_after_first_day - badges_sold_second_day\n\n    # After making an additional 354 badges, Wendy has 3 times the number she made at first.\n    # Equation: remaining_after_second_day + 354 = 3 * x\n    equation = Eq(remaining_after_second_day + 354, 3 * x)\n\n    # Solve the equation to find the number of badges Wendy made at the beginning.\n    original_badges = solve(equation, x)[0]\n\n    return original_badges\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_A = 266\n    not_B = 178\n    only_A_or_B = total_exhibits - (not_A + not_B)\n    \n    both_A_and_B = total_exhibits - (not_A + not_B + only_A_or_B)\n    return both_A_and_B\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # The worst case scenario is when he has to pick all the balls of one color first,\n    # then all the balls of a second color. By adding one more ball, he will for sure\n    # have at least one ball of each color.\n\n    # Total balls for the worst case of the first two colors (blue and red)\n    worst_case_two_colors = 8 + 10\n\n    # By picking one more ball, he will guarantee to pick one of the remaining color (green)\n    result = worst_case_two_colors + 1\n\n    return result\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 3 and num % 7 == 3 and num % 11 == 5:\n            return num\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    skirt, blouse = symbols('skirt blouse')\n\n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    equation2 = Eq(skirt, blouse + 14)\n\n    solutions = solve((equation1, equation2), (skirt, blouse))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # In a knockout tournament, each round eliminates half the players,\n    # and hence one match is played for each two players i.e. n/2 matches each round.\n    # For 4 people, it is a direct calculation:\n    # In the first round, 2 matches are played to reduce 4 players to 2 players.\n    # In the final round, 1 match is played to determine the winner among the 2 remaining players.\n    # So the total minimum rounds = the number of rounds in which matches were played = 2.\n    \n    # Hence, the minimum number of rounds played will be the number of times you can divide by 2 until you reach 1.\n    # This is equivalent to taking the logarithm base 2 of the number of players, and rounding up to the next whole number.\n    from math import ceil, log\n\n    # Number of players in the tournament\n    players = 4\n\n    # Calculate the minimum number of rounds\n    min_rounds = ceil(log(players, 2))\n\n    return min_rounds\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # Last year's value after an increase of 10%\n    last_year_value = 110000\n\n    # Calculate the original value before the increase\n    original_value = last_year_value / 1.1\n\n    # Calculate this year's value after a decrease of 10%\n    this_year_value = last_year_value * (1 - 0.1)\n\n    # Calculate the difference compared to the original price\n    difference = this_year_value - original_value\n\n    return difference\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange the groups of flowers\n    num_flower_types = 3  # Since we have three different types of flowers\n    arrangements_of_flower_types = factorial(num_flower_types)\n    \n    # Calculate permutations for roses and jasmines as they have more than one color each.\n    # For roses (3 colors): 3!\n    perm_roses = factorial(3)\n    # For jasmines (4 colors): 4!\n    perm_jasmines = factorial(4)\n    \n    # Multiply the permutations of individual flower colors with the arrangements of flower types\n    total_ways = arrangements_of_flower_types * perm_roses * perm_jasmines\n    \n    return total_ways\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    # Total number of pupils before transfer\n    total_pupils = 235 + 567\n    # Each room will have half the total number after the transfer\n    pupils_per_room = total_pupils // 2\n\n    return pupils_per_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "from math import factorial\n\ndef solution():\n    # 1*2*3*4*5*6 can be written as factorial(6)\n    lower_bound = factorial(6)\n    # 1*2*3*4*5*6*7*8 can be written as factorial(8)\n    upper_bound = factorial(8)\n\n    count = 0\n    for number in range(lower_bound, upper_bound + 1, lower_bound):\n        if upper_bound % number == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    sum_required = 60\n    n = 1  # Start with the smallest positive integer\n\n    # Keep adding consecutive numbers until the sum exceeds the required sum\n    # since we're looking for the maximum number of different integers,\n    # we start from 1 and keep adding the next integer until we reach or exceed 60\n    while n * (n + 1) // 2 <= sum_required:\n        n += 1\n\n    # The loop will exceed the sum by one more number, so we subtract 1\n    return n - 1\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    for pies in range(1, 100):\n        if pies % 5 == 3 and (pies + 2) % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_percent = 20\n    discount_amount = (discount_percent / 100) * original_price\n    new_price = original_price - discount_amount\n    \n    return new_price\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Start checking prime numbers for A from 2 upwards, since 2 is the smallest prime\n    A = 2\n    while True:\n        # Since 8A is a multiple of 3 when A is 3, and we want 8A - 3B to be a multiple of 3,\n        # B must be 8A divided by 3. Since 3 is prime, the first valid B will be 3.\n        # 8 * 3 - 3 * 2 = 24 - 6 = 18, which is a multiple of 3.\n        # Therefore, A = 3 is valid.\n        B = (8 * A) // 3\n\n        # Since B must also be prime, we check whether B is prime and only consider odd primes\n        # because 2 is the only even prime, and it's already excluded by the problem statement.\n        if B == 2 or (B > 2 and all(B % i != 0 for i in range(3, int(B**0.5) + 1, 2))):\n            return A\n        \n        # Move to the next prime number by adding 1 or 2 depending on whether A is 2\n        # After 2, all primes are odd so we can add 2\n        A += 1 if A == 2 else 2\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    ans = 12321 // 9\n    return ans\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_min = 20  # Milliliters per minute\n    minutes_per_hour = 60\n    milliliters_per_liter = 1000\n    \n    # Total leaked water in milliliters\n    total_leak_ml = leak_rate_per_min * minutes_per_hour\n    \n    # Convert milliliters to liters\n    total_leak_liters = total_leak_ml / milliliters_per_liter\n    \n    return total_leak_liters\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 3):\n        s, e, _ = p\n        if s != '0':  # 'S' cannot be zero because it's a three-digit number\n            see = int(s) * 100 + int(e) * 10 + int(e)\n            eee = int(e) * 100 + int(e) * 10 + int(e)\n            if see + eee == see * 2:\n                return see\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # We set up the congruences based on the given condition.\n    # For a remainder of 1 when divided by 2, 3, 4, or 6,\n    # the age must be 1 more than a multiple of each of these numbers.\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6)]\n\n    # Now, we use the Chinese Remainder Theorem to solve the system\n    # of congruences. We add the condition that the age is a multiple\n    # of 7, with no remainder (0, 7).\n    congruences.append((0, 7))\n\n    age = solve_congruence(*congruences)\n    return age[0]\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # Total number of colors\n    colors = 3\n    # Maximum socks to pick with no guarantee of a pair: (colors - 1) times number of socks per color + 1\n    socks_without_pair = (colors - 1) * 1 + 1\n    return socks_without_pair + 1  # Add 1 to ensure at least one pair\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweets each person has\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    # Extract the number of sweets Abdul has\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    original_pieces = 10\n    total_pieces_after_cut = 16\n    pieces_cut_into_three = (total_pieces_after_cut - original_pieces) / 2\n    return int(pieces_cut_into_three)\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Considering the worst case scenario according to the Pigeonhole Principle.\n    # We pick one apple at a time to ensure we have the worst case.\n    # If we pick 3 apples and all are of different colors, on picking the 4th,\n    # we are guaranteed to have a pair of the same color.\n    # Since we can have at most 1 apple of each color before we get a pair,\n    # after picking 1 red and 1 green, the 3rd pick must give us a pair.\n\n    return 3\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000 - 20\n    return number\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    total = sum(scores)\n    count = len(scores)\n    mean_score = total / count\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    ans = 6.3 + 8.7 + 9.6 - 2.6\n    return ans\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pail_volume = 4  # liters each\n    number_of_pails = 4\n    remaining_water = 7  # liters\n    \n    original_volume = (pail_volume * number_of_pails) + remaining_water\n\n    return original_volume\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    # Given x^20 * y^15 * z^5 = 243\n    # We know 243 is 3^5. Hence, x^20 * y^15 * z^5 = (3^5)\n    # To find x^8 * y^6 * z^2, we can take the fifth root on both sides\n    # x^4 * y^3 * z = 3\n    # Now, to find x^8 * y^6 * z^2, we can square both sides of x^4 * y^3 * z = 3\n    value = (3**2)\n\n    return value\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum([-n if n % 2 == 0 else n for n in range(1, 47)])\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for price of a book and a pencil box\n    book, pencil_box = symbols('book pencil_box')\n\n    # Define the equations based on the given problem\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    # Solve the equations for the prices of the book and the pencil box\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    sequence = []\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1))\n\n    sequence.sort()\n    median_idx = len(sequence) // 2\n    \n    if len(sequence) % 2 == 0:\n        ans = (sequence[median_idx - 1] + sequence[median_idx]) / 2\n    else:\n        ans = sequence[median_idx]\n\n    return ans\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_for_four = 4 * average_height_of_four\n    total_height_for_two = total_height_for_six - total_height_for_four\n    average_height_for_two = total_height_for_two / 2\n    \n    return average_height_for_two\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    num_participants = 10\n    ans = comb(num_participants, 2)\n    return ans\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    daily_paving_rate = 50\n    \n    days_needed = total_length / daily_paving_rate\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    x = 42\n    y = 1\n    factors_of_42 = [2, 3, 7]\n\n    # To make the product of 42 and y have all exponents equal to 1,\n    # y must cancel out the exponents of the prime factors of 42 when multiplied\n    # Since 42 = 2 * 3 * 7 (each factor is already to the power of 1), y must be 1\n    ans = x + y\n    return ans\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    cattles = 8\n    days = 4\n    daily_fodder_per_cattle = 10\n\n    total_fodder = cattles * days * daily_fodder_per_cattle\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit_weight_ratio = 8\n    rabbit_to_chicken_weight_ratio = 2\n    dog_to_chicken_weight_ratio = dog_to_rabbit_weight_ratio * rabbit_to_chicken_weight_ratio\n    return dog_to_chicken_weight_ratio\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    from math import prod\n\n    # Trailing zeros in a factorial are contributed by pairs of 2 and 5\n    # Since there are more 2s than 5s in prime factors of A, we need to count 5s\n    five_count = sum((2008 // (5**i)) for i in range(1, 6))\n\n    # Compute the product modulo 10**five_count to get rid of the trailing zeros\n    A_mod = prod(i for i in range(1, 2011)) % (10**five_count)\n    \n    # Find the first non-zero digit from the right by modding with 10 until a non-zero digit is found\n    while A_mod % 10 == 0:\n        A_mod //= 10\n\n    # The remaining value modulo 10 is the first non-zero digit from the right\n    first_non_zero_digit = A_mod % 10\n    return first_non_zero_digit\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_marbles = symbols('initial_marbles')\n\n    given_to_mark = initial_marbles * (5/12)\n    left_marbles = initial_marbles - (given_to_mark + 30 + 26)\n\n    equation = Eq(left_marbles, 35)\n    solution = solve(equation, initial_marbles)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jess, jill = symbols('jess jill')\n\n    # Jill has six sweets for every five sweets Jess has.\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # Jill gives eight sweets to Jess.\n    # Now, Jill has four sweets for every seven sweets Jess has.\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    # Now solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Total sweets\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # Total weight of the sugar solution in grams\n    concentration = 0.22  # 22% concentration of sugar in the solution\n\n    amount_sugar = total_weight * concentration\n\n    return amount_sugar\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for i in range(1, 100):\n        total += sum(int(digit) for digit in str(i))\n    return total\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    fraction_given = 1/4\n    money_given = total_money * fraction_given\n    return money_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for number in range(10000, 100000):\n        if int('1' + str(number)) == int(str(number) + '1') / 3:\n            return number\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime\n\ndef solution():\n    current_date = datetime.now()\n    years_ago = current_date.year - 38\n    month_of_birth = current_date.month - 6\n    if month_of_birth <= 0:\n        month_of_birth += 12\n        years_ago -= 1\n    birth_year = years_ago\n    return birth_year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    piece_cut = 3.75\n    remaining_length = original_length - piece_cut\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    return sum(i**4 for i in range(1, 20))\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Money Hanson had originally\n    original_money = symbols('original_money')\n    \n    # Hanson spent 1/4 of his money and an additional $3 on CDs\n    after_cds = original_money - (original_money / 4 + 3)\n    \n    # Then he spent 3/5 of the remaining money and an additional $6 on batteries\n    after_batteries = after_cds - (3 / 5 * after_cds + 6)\n\n    # He was left with $24\n    equation = Eq(after_batteries, 24)\n\n    # Solve the equation\n    solution = solve(equation, original_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n    for perm in permutations(digits, 3):\n        for even_digit in even_digits:\n            if perm[0] != '0':  # the first digit should not be zero\n                num = ''.join(perm) + even_digit\n                count += 1\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    pies_money, cakes_money = symbols('pies_money cakes_money')\n    pie_price, cake_price, cakes_sold = symbols('pie_price cake_price cakes_sold')\n\n    # Given ratios\n    money_ratio_eq = Eq(pies_money, 15/7 * cakes_money)\n    pies_cakes_ratio = 4  # Given the ratio of the number of pies to cakes sold (4:1)\n\n    # The price of a cake is $13 more than the price of a pie\n    cake_pie_price_diff_eq = Eq(cake_price, pie_price + 13)\n\n    # The total money collected from selling pies and cakes\n    total_money_eq = Eq(pies_money + cakes_money, 1848)\n\n    # Express money collected from pies as a function of the price of a pie and number of pies sold\n    # pies_sold = 4 * cakes_sold (from the pies to cakes ratio)\n    # pies_money = pie_price * pies_sold\n    pies_money_eq = Eq(pies_money, pie_price * 4 * cakes_sold)\n\n    # Similarly for cakes\n    # cakes_money = cake_price * cakes_sold\n    cakes_money_eq = Eq(cakes_money, cake_price * cakes_sold)\n\n    # Solve the system of equations\n    solutions = solve((money_ratio_eq, cake_pie_price_diff_eq, total_money_eq, pies_money_eq, cakes_money_eq),\n                      (pies_money, cakes_money, pie_price, cake_price, cakes_sold))\n\n    return solutions[cakes_sold]\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads_count = []\n    for i in range(40, 81):\n        if i % 4 == 0 and i % 7 == 0:\n            beads_count.append(i)\n    return beads_count\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    qiqi_speed = 60\n    weiling_speed = 72\n    time_difference = 2\n    weiling_early_arrival = 4\n\n    # Let the total distance be d\n    # Qiqi's time to travel distance d is d / qiqi_speed\n    # Weiling's time to travel distance d is d / weiling_speed\n    \n    # Qiqi's travel time minus Weiling's travel time is equal to time difference + Weiling arriving 4 minutes earlier.\n    # (d / qiqi_speed) - (d / weiling_speed) = time_difference + weiling_early_arrival\n\n    # Solving for d:\n    d = (qiqi_speed * weiling_speed * (time_difference + weiling_early_arrival)) / (weiling_speed - qiqi_speed)\n\n    return d\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # The units digit of a power of 9 cycles every 4 power increases\n    # The cycle is as follows: 9, 1, 9, 1, ...\n    # 9^1 has a units digit of 9\n    # 9^2 has a units digit of 1\n    # Therefore, 9^2015 will have the same units digit as 9^(2015 % 4) which is 9^3, and the units digit is 9\n    # 9^2016 will have the same units digit as 9^(2016 % 4) which is 9^0, and the units digit is 1\n    # Therefore, the sum of the units digits will be 9 (from 9^2015) + 1 (from 9^2016)\n    \n    units_digit = (9 + 1) % 10\n\n    return units_digit\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial as fact\n\n    # Calculate arrangements for 5 men\n    men_arrangements = fact(5)  # 5!\n\n    # Calculate possible positions between and outside men to place women\n    # There are 6 possible positions (left of first man, between two men, and right of last man)\n    positions_for_women = 6\n\n    # Choose 3 positions from 6 to place the women\n    position_arrangements = fact(positions_for_women) // (fact(3) * fact(positions_for_women - 3))  # 6 choose 3\n\n    # Women can be arranged in 3! ways\n    women_arrangements = fact(3)  # 3!\n\n    # Total arrangements are product of all individual arrangements\n    total_arrangements = men_arrangements * position_arrangements * women_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "from math import gcd\n\ndef solution():\n    length1 = 45\n    length2 = 30\n\n    # Calculate the greatest common divisor (GCD) of the two lengths\n    max_length = gcd(length1, length2)\n\n    # Check Candy's statement\n    candy_correct = (max_length == 180)\n\n    return (candy_correct, max_length)\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    marc_time_minutes = (11 * 60 + 50) - 15  # Convert to total minutes and subtract the slow time\n    half_hour_later = marc_time_minutes + 30  # Add half an hour in minutes\n    george_time_minutes = half_hour_later + 7  # Correct for George's watch being fast\n\n    # Convert back to hours and minutes\n    hours = george_time_minutes // 60\n    minutes = george_time_minutes % 60\n    \n    # Adjust if it goes past noon (12:00 PM)\n    hours = hours if hours < 24 else hours - 24\n    am_pm = \"a.m.\" if hours < 12 else \"p.m.\"\n    hours = hours if hours <= 12 else hours - 12\n\n    return f\"{hours}:{minutes:02d} {am_pm}\"\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 / 25\n    return int(n)\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n    tax_eq_1 = 0.01 * T * 30000\n    tax_eq_2 = 0.01 * (T + 3) * (income - 30000)\n    total_tax = tax_eq_1 + tax_eq_2\n\n    equation = Eq(total_tax, 0.01 * (T + 1) * income)\n    solutions = solve((equation,), (income))\n\n    return solutions[income]\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45 / 100\n    amount = 540\n    ans = percentage * amount\n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    distance_per_period = (3 * 3) - 2  # Effective distance covered in a 3-jump period\n    full_periods_to_reach_near_top = (31 - 3) // distance_per_period  # -3 to account for the last jump which doesn't result in a fall\n    jumps_in_full_periods = full_periods_to_reach_near_top * 3\n    remaining_distance = (31 - 3) - full_periods_to_reach_near_top * distance_per_period\n    extra_jumps = (remaining_distance + 2) // 3  # +2 to account for non-fall on last jump reaching or exceeding the top\n\n    return jumps_in_full_periods + extra_jumps\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    marks_for_correct = 5\n    deduction_for_wrong = 1\n    \n    # Let x be the number of correct answers\n    # Then total_questions - x is the number of wrong answers\n    \n    for x in range(total_questions + 1):\n        if (marks_for_correct * x) - (deduction_for_wrong * (total_questions - x)) == 90:\n            return x\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    # Rates at which A and B work\n    rate_a = 1 / 10\n    rate_b = 1 / 15\n    \n    # Combined rate when A and B work together\n    combined_rate = rate_a + rate_b\n    \n    # Total time required when working together\n    total_time = 1 / combined_rate\n    \n    return total_time\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Draw all marbles of one color first (the color with the maximum quantity)\n    max_color_marbles = 12\n    # Then draw 3 marbles from the other colors\n    marbles_of_different_colors = 1 + 1 + 1\n    # Total marbles drawn to ensure 4 different colors\n    ans = max_color_marbles + marbles_of_different_colors\n    return ans\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for num in range(1, 101):\n        if num % 3 == 0 and num % 7 == 0 and (num - 2) % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Calculate the year when Gigi was 22 years old\n    year_when_gigi_was_22 = 2002 - (45 - 22)\n    \n    # Calculate the age of Jenny in the year when Gigi was 22 years old\n    age_of_jenny_when_gigi_was_22 = (year_when_gigi_was_22 - 1995) + 22\n    \n    return age_of_jenny_when_gigi_was_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    # The smallest positive term would be 2, such that the previous term is 6\n    last_term = 2\n    \n    num_terms = ((last_term - first_term) / difference) + 1\n    return int(num_terms)\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = sum(int(digit) for digit in \"20190406\")\n    remainder = digits_sum % 9\n    A = (9 - remainder) % 9\n    return A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    num = None\n    for i in range(10, 1000):\n        if i % 3 == 0 and i % 8 == 0 and str(i)[-1] == '2':\n            num = i\n            break\n    return num\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(f\"451{last_digit}\")\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime(\"15/5/2022\", \"%d/%m/%Y\")\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime(\"%d/%m/%Y\")\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n    \n    ans = round(numerator / denominator, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_water = 25\n    speed_current = 3\n    distance = 140\n\n    speed_downstream = speed_water + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percentage = 15\n    discount_amount = original_price * (discount_percentage / 100)\n    sale_price = original_price - discount_amount\n    \n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelets_cost = 5 * 0.99\n    cards_cost = 2 * 1.98\n    total_cost = bracelets_cost + cards_cost\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cost_per_cupcake = 3.25\n    total_cupcake_cost = 3 * cost_per_cupcake\n    total_drink_cost = total_cost - total_cupcake_cost\n    cost_per_can = total_drink_cost / 2\n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        score = correct * 5 - wrong * 2\n        if score == 51:\n            return correct\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "from math import gcd\nfrom fractions import Fraction\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef solution():\n    first_light_interval = Fraction(1, 2)\n    second_light_interval = Fraction(3, 4)\n\n    # First convert 9 minutes into minutes, then into fractions of a minute\n    all_green_interval = Fraction(9 * 60)\n\n    # Find the LCM of the first two traffic lights\n    lcm_two_lights = lcm(first_light_interval, second_light_interval)\n\n    # The third light must have a period that is a factor of the LCM of 9 minutes and the LCM of the first two traffic lights.\n    # Also, the period must be greater than or equal to 30 seconds (or half a minute).\n    potential_third_light_interval = all_green_interval / lcm_two_lights\n\n    # Convert the potential interval into seconds (by multiplying by 60) and start looking for the smallest allowed period\n    potential_third_light_interval_seconds = potential_third_light_interval * 60\n    third_light_interval = potential_third_light_interval_seconds\n\n    # Ensure the third traffic light takes at least 30 seconds\n    while third_light_interval < 30:\n        third_light_interval += potential_third_light_interval_seconds\n\n    return float(third_light_interval)\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    sequence = [8, 20, 31, 41, 50]\n    differences = [sequence[i+1] - sequence[i] for i in range(len(sequence)-1)]\n    next_difference = differences[-1] + (differences[-1] - differences[-2])\n    next_number = sequence[-1] + next_difference\n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 'x', 8]\n    mean_value = 5\n    total_numbers = len(numbers)\n    total_sum = mean_value * total_numbers\n    current_sum = sum([num for num in numbers if isinstance(num, int)])\n    missing_number = total_sum - current_sum\n    \n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # Total different methods to pass the ball from one individual to another (excluding self-pass)\n    diff_methods = 3  # As A cannot pass to himself and the ball should be passed immediately\n    # After each pass, the number of options for the next pass\n    # Pass 1: A to B/C/D (3 options)\n    # Pass 2: B/C/D to the two remaining individuals (2 options)\n    # Pass 3: Last person passes back to A (1 option as it's predetermined)\n    \n    # Therefore, for 3 passes, we have 3 options for the first pass, 2 for the second, and 1 for the third.\n    num_methods = diff_methods * (diff_methods - 1) * (diff_methods - 2)\n    \n    return num_methods\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, ming = symbols('daniel ming')\n\n    equation1 = Eq(daniel, 4 * ming)\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for i in range(60, 71):\n        if i % 7 == 0 and i % 9 == 0:\n            return i\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper_g = 25\n    number_of_students = 250\n    \n    total_weight_g = weight_per_paper_g * number_of_students\n    total_weight_kg = total_weight_g / 1000\n    \n    return total_weight_kg\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Each bus has 36 seats\n    seats_per_bus = 36\n\n    # Initialize variables for group A and B\n    A, B = 0, 0\n\n    # Assume group A and B's members can be represented by A and B\n    # Since 11 members from A combined with the remaining members from B to fill a bus,\n    # the number of members in A can be represented as 36n + 11 where n is number of full buses used by A\n    # This leaves 36m members in B where m is the total number of full buses used by B\n\n    # The extra bus has 36 - 11 = 25 members from group B\n    B = 25\n\n    # The total number of photographs taken is A * B\n    # Since every group B member takes part in the photographs, and they fill a bus,\n    # A is unknown, but we know it must be a number that when multiplied by 25 leaves\n    # a remainder of 36 (since pictures fit exactly into rolls of film)\n\n    # Let's find the correct value for A by checking multiples of 25 till we get a remainder of 36 when divided by 36\n    while (A * B) % seats_per_bus != 0:\n        A += 1\n\n    # Now calculate the number of photos taken\n    photos_taken = A * B\n    full_rolls, remaining_photos = divmod(photos_taken, seats_per_bus)\n\n    # Since we want to know how many more pictures the last roll of film can take\n    # it means we need to subtract the remaining (used) photos from the total capacity of a roll\n    additional_photos = seats_per_bus - remaining_photos\n\n    return additional_photos\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    # Since every apple is the same and we're dividing into groups with different numbers,\n    # the two groups will just be split based on the number of apples in the first group.\n    # If the first group has 1 apple, then the second group has 11 apples, and so on.\n    # The max number in the first group can be (total apples - 1) / 2 because the second group must have more.\n\n    total_apples = 12\n    max_apples_in_first_group = (total_apples - 1) // 2\n    # The number of different ways corresponds with the number of possible apples in the first group.\n    num_ways = max_apples_in_first_group\n\n    return num_ways\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    max_product = 0\n    \n    for perm in permutations(cards, 4):\n        number1 = perm[0] * 10 + perm[1]\n        number2 = perm[2] * 10 + perm[3]\n        product = number1 * number2\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # The line takes 8 seconds to cross the first bridge, which is 9 m long.\n    # This means that the entire 3-meter-long line is on the bridge after 8 seconds.\n    # So, the line's speed can be calculated as the length of the first bridge\n    # divided by the time taken minus the length of the line (to account for the time\n    # when the entire line is just on the bridge).\n    speed = (9 + 3) / 8  # meters per second\n\n    # It takes the line 10 seconds to cross the second bridge.\n    # We can use the same logic to calculate the length of the second bridge.\n    second_bridge_length = speed * 10 - 3  # Total distance covered minus the length of the line\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum((1000 - 2*i)**2 - (998 - 2*i)**2 for i in range(0, 500))\n    return ans\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    for i in range(2, int(2688**(1/3)) + 1):  # searching for the smallest number\n        if 2688 % i == 0:\n            if (i % 2 == 0) and (2688 % (i * (i + 2)) == 0):  # must be even and divisible by i, i+2\n                return i + 4  # largest of the consecutive even numbers\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = 11 * 60 + 55  # Convert 11:55am to total minutes from midnight\n    end_time = 13 * 60 + 40    # Convert 1:40pm to total minutes from midnight\n    duration = end_time - start_time\n    return duration\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    # Crystal is in the middle, so people on her left and right are in different rows\n    # Each row has the same number of people on Crystal's left and right sides\n    # Since there are 11 people on her left, the row has 11 + 1 (Crystal) + 11 (symmetry) people\n    row_count = 11 + 1 + 11\n    \n    # There are 2 rows with equal number of people, we multiply by 2\n    total_people = row_count * 2\n    \n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    # We can iterate through all three-digit numbers that are divisible by both 3 and 11\n    # which implies the number is also divisible by their least common multiple, which is 33\n    for number in range(100, 1000, 33):\n        if (number - 1) % 2 == 0 and (number - 1) % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    ways = 0\n    for group1 in range(1, 10):\n        group2 = 10 - group1\n        if group1 != group2:\n            ways += 1\n    # Divide by 2 because order doesn't matter (group1, group2 is same as group2, group1)\n    ans = ways // 2\n    return ans\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import divisors\n\n    factors = divisors(224)\n    ans = len(factors)\n    \n    return ans\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('8:30', '%H:%M')\n    total_minutes = 3 * 45 + 2 * 5  # Three 45-minute lessons and two 5-minute periods\n    break_time = start_time + timedelta(minutes=total_minutes)\n    return break_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    # Search for the three digits a, b, and c\n    for a in range(1, 10):  # Hundreds digit cannot be 0\n        for b in range(0, 10):  # Tens digit\n            for c in range(0, 10):  # Ones digit\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return 100 * a + 10 * b + c\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    import math\n    return math.gcd(math.gcd(28, 84), 126)\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of $5 notes be x and the number of $10 notes be y\n    x, y = symbols('x y')\n\n    # Total number of notes is 57: x + y = 57\n    equation1 = Eq(x + y, 57)\n\n    # After spending, Jeremy has 0.75x (75% of $5 notes) and 0.4y (40% of $10 notes)\n    # He has twice as many $10 notes as $5 notes: 0.4y = 2 * 0.75x\n    equation2 = Eq(0.4 * y, 2 * 0.75 * x)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the cost of the bag: 60% of y $10 notes + 25% of x $5 notes\n    num_5_notes_spent = 0.25 * solutions[x]\n    num_10_notes_spent = 0.6 * solutions[y]\n    cost = num_5_notes_spent * 5 + num_10_notes_spent * 10\n\n    return cost\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n\n    # Original situation\n    equation1 = Eq(troy, 5 * adam)\n    # After Adam took 24 more coins\n    equation2 = Eq(adam + 24, troy / 3)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    # Calculate the total number of coins they originally had\n    total_coins = solutions[troy] + solutions[adam]\n\n    return total_coins\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    # Total number of wands and cards\n    equation1 = Eq(wands + cards, 69)\n    # Number of wands is 17 more than number of cards\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    money_after_cds = initial_money / 4 + 3\n    remaining_money = initial_money - money_after_cds\n    \n    money_after_batteries = 3/5 * remaining_money + 6\n    final_remaining_money = remaining_money - money_after_batteries\n\n    equation = Eq(final_remaining_money, 24)\n\n    solution = solve(equation, initial_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for number in range(1000, 10000):\n        product = 1\n        for digit in str(number):\n            product *= int(digit)\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    # Loop through possible hundreds place (1 through 9 since the number is three-digit)\n    for i in range(1, 10):\n        # Loop through possible tens place (0 through 9)\n        for j in range(0, 10):\n            # Since the number has to be even, the ones place can only be 0, 2, 4, 6, or 8\n            for k in range(0, 10, 2):\n                if i + j + k == 8 and len({i, j, k}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # To ensure we get 5 green beads, we need to consider the worst-case scenario.\n    # That would be if we draw all blue and white beads first.\n    # The worst case requires drawing all beads of the other colors before getting 5 green beads.\n    \n    blue_beads = 5\n    white_beads = 6\n    green_beads_needed = 5\n\n    # Calculate the minimum number of beads needed to draw to guarantee 5 green beads\n    beads_needed = blue_beads + white_beads + green_beads_needed\n\n    return beads_needed\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    return 16 * (1/4) * 2\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Number of people in each group\n    people_in_group = 16 // 4\n\n    # Total games in round-robin for one group\n    games_in_one_group = people_in_group * (people_in_group - 1) // 2\n\n    # Total games in all groups\n    group_stage_games = games_in_one_group * 4\n\n    # Number of games in knockout rounds\n    # Top 8 = 4 games, Top 4 = 2 games, Top 2 = 1 game, adding 3rd place match\n    knockout_games = 4 + 2 + 1 + 1 \n\n    # Total games throughout the contest\n    total_games = group_stage_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_work_units = symbols('total_work_units')\n    rate_A = total_work_units / (symbols('time_B') - 12)\n    rate_B = total_work_units / symbols('time_B')\n\n    # A is twice as good a workman as B\n    equation1 = Eq(rate_A, 2 * rate_B)\n\n    # Solve for time B\n    time_B = solve(equation1, symbols('time_B'))[0]\n\n    # Calculate the combined rate of A and B\n    combined_rate = 2 * rate_B + rate_B\n\n    # Calculate the number of days to complete the job when working together\n    days_together = total_work_units / combined_rate\n\n    return days_together.subs(total_work_units, time_B)\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    n = 9\n    r = 4\n    arrangements = factorial(n) // factorial(n - r)\n    return arrangements\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # Inclusion-Exclusion Principle formula:\n    # |A ∪ B| = |A| + |B| - |A ∩ B|\n    # |A ∩ B| = |A| + |B| - |A ∪ B|\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_end = 489\n    stickers_given = 76\n    stickers_bought = 65\n\n    stickers_start = (stickers_end - stickers_bought) + stickers_given\n    return stickers_start\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n\n    equation1 = Eq(pineapple - apple, 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    for num in range(1, 3*4*5*7):\n        if (num % 3 == 2 and num % 4 == 2 and\n            num % 5 == 2 and num % 7 == 0):\n            return num\n    return None\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of candies Rachel has and a be the number Alice has\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces, they will have the same amount: r - 10 = a + 10\n    equation1 = Eq(r - 10, a + 10)\n\n    # If Alice gives Rachel 10 pieces, Rachel will have 4 more than 3 times what Alice has: r + 10 = 3*(a - 10) + 4\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Sum of the original amounts\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    # As the number is divisible by 5 and 10, and starts with 8, the last digit must be 0\n    last_digit = 0\n    other_digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \n    # As the first digit is 8, we can start by setting it\n    first_digit = 8\n\n    # Now we will search for the permutations of the other eight digits\n    for perm in permutations(other_digits):\n        # Construct a list containing the digits in order, with 8 at first and 0 at last\n        digits = [first_digit] + list(perm) + [last_digit]\n        # Check if the divisibility conditions are met\n        divisible = True\n        for i in range(2, 10):  # From 2 to 9\n            number_formed = int(''.join(map(str, digits[:i])))\n            # If the number is not divisible by i, break the loop\n            if number_formed % i != 0:  \n                divisible = False\n                break\n        # If all divisibility conditions are met, we have our answer\n        if divisible:\n            return int(''.join(map(str, digits)))\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    # Let's denote the number of tomatoes Matthew had at first as 'm'.\n    # After Belinda gave 7 tomatoes to Matthew, they both have the same number of tomatoes.\n    # So, we can write the equation:\n    # Belinda's remaining tomatoes = Matthew's initial tomatoes + 7 tomatoes\n    # 36 - 7 = m + 7\n    # We solve for m.\n    m = (36 - 7) - 7\n    \n    return m\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10\n    efficiency_increase = original_rate * 0.5\n    new_rate = original_rate + efficiency_increase\n    \n    return new_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    # Two numbers a and b are congruent modulo D,\n    # if they both leave the same remainder R when divided by D. This is written as:\n    # a ≡ b (mod D)\n    # Given that 2012 and 1274 give the same remainder when divided by D,\n    # It means 2012 - 1274 ≡ 0 (mod D) or D divides (2012 - 1274)\n    \n    difference = 2012 - 1274\n\n    # We need to find the largest odd divisor D of the difference,\n    # since R is the same for both numbers, we want to maximize (D - R),\n    # As R is fixed by the division, maximizing D will also maximize (D - R)\n    # Thus, the largest D will be the largest odd factor of the difference.\n\n    # To find the largest odd divisor, we will keep dividing the difference by 2\n    # if it is even, since the problem specifies that D must be odd.\n\n    while difference % 2 == 0:\n        difference //= 2\n\n    # Now, difference is the largest odd divisor of (2012 - 1274).\n    # The largest possible value for D is the difference itself,\n    # and since both numbers leave the same remainder when divided by D,\n    # the largest possible value for R is D - 1 (the remainder is one less than the divisor)\n    # Therefore, the largest possible value for (D - R) is 1.\n\n    return difference - 1\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):  # there can be at most 7 rabbits\n        ducks = 7 - rabbits\n        total_legs = rabbits * 4 + ducks * 2\n        if total_legs == 20:\n            return rabbits\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    lcm, remainder = solve_congruence(*congruences)\n    return remainder\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    from math import prod\n\n    # 15 and 21 have the common factor 3\n    # The other factors of 15 are 5 and 1\n    # The other factors of 21 are 7 and 1\n    # The least common multiple (LCM) of 15 and 21 gives us the number\n    # LCM(15, 21) = 3 * 5 * 7 = 105\n    number = 15 * 21 // 3\n\n    # The factors of 105 can be computed by finding all combinations of its prime factors\n    # The prime factorization of 105 is 3 * 5 * 7\n    prime_factors = [3, 5, 7]\n    \n    # We can use the prime factors to form the eight factors.\n    # Since there are exactly 8 factors, we know that the number is of the form p^a * q^b * r^c,\n    # where 'p', 'q', 'r' are prime factors and 'a', 'b', 'c' are their powers respectively.\n\n    # The number 105 is of the form 3^1 * 5^1 * 7^1.\n    # To have exactly 8 factors, we need another factor '1' (power of 0).\n    # Therefore, the factors are all combinations of these primes multiplied\n    factors = {1}\n\n    # Generate factors of 105 by combining the prime factors\n    for prime in prime_factors:\n        factors |= {f * prime for f in factors}\n\n    # Sum all unique factors\n    sum_of_factors = sum(factors)\n\n    return sum_of_factors\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    given_to_grace = (5/7) * total_juice\n    remaining_after_grace = total_juice - given_to_grace\n    given_to_evelyn = (1/9) * remaining_after_grace\n    remaining_after_evelyn = remaining_after_grace - given_to_evelyn\n\n    return remaining_after_evelyn\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # Calculate the last digit of 4^2009\n    last_digit_4_power = (4 ** (2009 % 4)) % 10\n    \n    # Calculate the last digit of 6^2010\n    last_digit_6_power = (6 ** (2010 % 4)) % 10\n    \n    # Add the last digits together and take the last digit of the result\n    last_digit_sum = (last_digit_4_power + last_digit_6_power) % 10 \n    \n    return last_digit_sum\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    count = 0\n    # Iterate through all possible combinations of 2-gram weights\n    for i in range(0, 32):\n        # Calculate the remaining weight to be made up with 5-gram weights\n        remaining_weight = 63 - 2 * i\n        # If the remaining weight is non-negative and divisible by 5, it is a valid combination\n        if remaining_weight >= 0 and remaining_weight % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # number of terms - n1 and n2\n    n1, n2 = 8, 22\n    # sums of first n1 and n2 terms - S1 and S2\n    S1, S2 = 32, 44\n    \n    # use the formula for the sum of an arithmetic sequence: S = n/2 * (2a + (n-1)d)\n    # where S is the sum, n is the number of terms, a is the first term, and d is the common difference\n    # we have two equations:\n    # S1 = n1/2 * (2a + (n1-1)d)\n    # S2 = n2/2 * (2a + (n2-1)d)\n    \n    # divide the second equation by the first to find d\n    d = (2 * (S2 - S1)) / (n2 * (n2 - 1) - n1 * (n1 - 1))\n    \n    # substitute d back into the first equation to solve for a\n    a = (2 * S1 - n1 * (n1 - 1) * d) / (2 * n1)\n    \n    # now we want to find the sum of the first 15 terms, let's call this S3 (n3 = 15)\n    n3 = 15\n    S3 = n3 / 2 * (2 * a + (n3 - 1) * d)\n    return S3\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    team_avg_height = 150\n    subgroup_avg_height = team_avg_height - 2\n    subgroup_total_height = subgroup_avg_height * 4\n    team_total_height = team_avg_height * 6\n    remaining_total_height = team_total_height - subgroup_total_height\n    remaining_avg_height = remaining_total_height / 2\n\n    return remaining_avg_height\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Initialize the variables\n    # The strategy revolves around the modulo of the total number by 7\n    # We aim to always leave a multiple of 7 for the opponent\n    # In this case, as the total number is 52, we initially have 52 mod 7 = 3 left\n    # If Betty wants to win, she should try to ensure that after her move, the remaining count is a multiple of 7\n    total_numbers = 52\n    mod_value = total_numbers % 7\n\n    # Check if Betty should go first or second\n    # If the mod value is 0, then she should go second\n    # Otherwise, she should go first and reduce the remaining numbers to a multiple of 7\n    if mod_value == 0:\n        turn = 'second'\n        # There is no strategy since whatever number Abby writes, Betty can eventually force the game to a multiple of 7\n        strategy = None\n    else:\n        turn = 'first'\n        # The strategy consists of subtracting the mod value from the total so that the remaining count is a multiple of 7\n        # Then, whatever Abby does, Betty can keep subtracting to leave a new multiple of 7 till Abby runs out of moves\n        strategy = mod_value\n\n    return (turn, strategy)\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for flow rates of A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Given that B is twice as fast as A\n    equation1 = Eq(B, 2 * A)\n\n    # When A and C are turned on, pool is filled and 18 tons are from A\n    # Let's say the pool can hold X tons of water, so A+C=X and A=18\n    X = symbols('X')\n    equation2 = Eq(A + C, X)\n    sub_equation2 = Eq(A, 18)\n\n    # When B and C are turned on, pool is filled and 27 tons are from B\n    # Since B+C=X and B=27\n    sub_equation3 = Eq(B, 27)\n\n    # Solve the equations for X\n    solution_A_C = solve((sub_equation2, equation2), (A, C, X))\n    solution_B_C = solve((sub_equation3, equation1), (B, C))\n\n    # From solve() we get A's and C's terms of X, but we know A's value in terms of tons\n    # So, we replace A in the equation X = A + C with 18 to find X\n    X_val = solution_A_C[X].subs(A, 18)\n\n    # Now solve for B knowing that B is twice A, and A is 18 tons\n    B_val = solution_B_C[B].subs(A, 18)\n\n    # Returning X_val as the pool's capacity\n    return X_val\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    points_unattempted = 0\n    rex_score = 66\n    rex_attempted = total_questions - 1\n\n    for correct in range(rex_attempted + 1):\n        incorrect = rex_attempted - correct\n        score = correct * points_correct + incorrect * points_incorrect\n        if score == rex_score:\n            return correct\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    # Calculate the sum of the sequence from 1 to 20 using the arithmetic series sum formula.\n    sum_1_to_20 = (20 * (20 + 1)) // 2\n    \n    # Calculate the sum of the sequence from 1 to 19 using the arithmetic series sum formula.\n    sum_1_to_19 = (19 * (19 + 1)) // 2\n    \n    # The full sequence is the sum from 1 to 20, plus the sum from 1 to 19.\n    ans = sum_1_to_20 + sum_1_to_19\n    \n    return ans\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from math import factorial\n\n    # There are 4 letters to paint and 5 colors available.\n    # We are to select 4 colors from 5 and then arrange them in 4! ways\n    # Hence, the number of ways is 5P4 = 5! / (5 - 4)!\n\n    ways = factorial(5) // factorial(5 - 4)\n\n    return ways\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1])  # Reverse the digits\n        if reversed_age + 1 == age // 2:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    student = 1\n    while True:\n        total_students = student + 1\n        if (20 % student == 0) and ((20 + student) % total_students == 10):\n            meatballs_per_student = (20 + student) // total_students\n            break\n        student += 1\n    return meatballs_per_student\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    increase_by_fraction = 9.32 * (1 + (1/10))\n    return increase_by_fraction\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, solve\n\n    total_questions = symbols('total_questions')\n    half_questions = total_questions / 2\n    first_day = half_questions + 7\n    remaining_after_first = total_questions - first_day\n    half_remaining = remaining_after_first / 2\n    second_day = half_remaining - 5\n    remaining_after_second = remaining_after_first - second_day\n    third_day = 23\n\n    equation = Eq(remaining_after_second, third_day)\n\n    total = solve(equation, total_questions)\n\n    return total[0]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n\n    if fraction_value > decimal_value:\n        ans = \"4/25 is larger\"\n    else:\n        ans = \"0.17 is larger\"\n    \n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    total_water_ml = 1000  # 1 litre is 1000 ml\n    each_cup_ml = 200  # 200 ml per cup\n    cups = 3\n\n    water_used = each_cup_ml * cups\n    water_left = total_water_ml - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    nth_term_10 = 23\n    nth_term_15 = 38\n    difference = (nth_term_15 - nth_term_10) / (15 - 10)\n\n    nth_term_12 = nth_term_10 + difference * (12 - 10)\n\n    return int(nth_term_12)\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    # A light will remain on if it's toggled an odd number of times.\n    # A light is toggled once for every divisor it has (including 1 and itself).\n    # Therefore, a light will be on if and only if it has an odd number of divisors.\n    # The only numbers with an odd number of divisors are perfect squares.\n    # We need to find the number of perfect squares between 1 and 250.\n    \n    count = 0\n    for i in range(1, 251):\n        if (i ** 0.5).is_integer():\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 60\n    correct_10_problem_test = 0.2 * 10\n    correct_20_problem_test = 0.8 * 20\n    correct_30_problem_test = 0.9 * 30\n    \n    total_correct = correct_10_problem_test + correct_20_problem_test + correct_30_problem_test\n    overall_percentage = (total_correct / total_problems) * 100\n    \n    return overall_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Size of large brick in square centimeters\n    large_brick_size_cm2 = (60 * 60)\n    \n    # Total area to be covered in square centimeters\n    total_area_cm2 = large_brick_size_cm2 * 80\n    \n    # Size of small brick in square centimeters\n    small_brick_size_cm2 = 64\n    \n    # Number of small bricks needed\n    num_small_bricks = total_area_cm2 / small_brick_size_cm2\n    \n    return int(num_small_bricks)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one bottle of water and one bag of fruit\n    water, fruit = symbols('water fruit')\n\n    # Equation 1: Two bottles of water and three small bags of fruit cost a total of £2.55\n    equation1 = Eq(2 * water + 3 * fruit, 2.55)\n\n    # Equation 2: A bottle of water costs £0.15 more than a bag of fruit\n    equation2 = Eq(water, fruit + 0.15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (water, fruit))\n\n    # Get the cost of a bag of fruit\n    cost_of_fruit = solutions[fruit]\n\n    return cost_of_fruit\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 5, 7, 8]\n    max_num = 0\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num % 11 == 0 and num > max_num:\n            max_num = num\n    return max_num\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of roses originally in the park\n    # Let d be the number of daisies originally in the park\n    r, d, m = symbols('r d m')  # m is the number of months\n\n    # Equation for the total number of flowers initially\n    equation1 = Eq(r + d, 300)\n    # Equation for the number of roses after a few months\n    equation2 = Eq(r + m, 280)\n    # Equation for the number of daisies after a few months\n    equation3 = Eq(d + m, 180)\n\n    # We know r + d + 2m = 280 + 180, from the new data count and equations 2 and 3\n    equation4 = Eq(r + d + 2*m, 280 + 180)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (r, d, m))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    difference = 30\n    \n    # Let the number of boys be 'b' and girls be 'b + difference'.\n    # Therefore, the total number of pupils is b + (b + difference).\n    # This gives us the equation: 2b + difference = total_pupils.\n    # We solve for 'b' to find the number of boys.\n    b = (total_pupils - difference) / 2\n    \n    # The number of girls can be found by adding the difference to the number of boys.\n    girls = b + difference\n    \n    return int(girls)\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    n = 91\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    boys_more = 31\n    total_students = 0\n    layer = 0\n    \n    # Calculate the number of students from the outermost layer to the innermost layer.\n    while True:\n        boys = (layer * 4 + 1)**2 - (layer * 2)**2\n        girls = (layer * 2)**2 - ((layer - 1) * 4 + 1)**2 if layer > 0 else 0\n        if boys - girls == boys_more:\n            total_students = (layer * 4 + 1)**2\n            break\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    from math import log10\n    \n    # Calculate the number of digits for 4^2018\n    digits_4 = 2018 * log10(4)\n    \n    # Calculate the number of digits for 25^2018\n    digits_25 = 2018 * log10(25)\n    \n    # The total number of digits is the sum of the digits from 4^2018 and 25^2018\n    total_digits = digits_4 + digits_25\n    \n    # Take the floor of total_digits and add 1 to get the number of digits of the integer A\n    ans = int(total_digits) + 1\n    \n    return ans\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    ribbon_A = 10  # The length of Ribbon A is 10 cm.\n    ribbon_B = 5 * ribbon_A  # Ribbon B is five times as long as Ribbon A.\n    total_length = ribbon_A + ribbon_B  # The total length of Ribbon A and Ribbon B.\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n    ans = comb(total_players, team_size)\n    return ans\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n    cost_price = selling_price / (1 + profit_percentage / 100)\n    \n    alternative_profit = 5000\n    alternative_selling_price = cost_price + alternative_profit\n    alternative_profit_percentage = ((alternative_selling_price - cost_price) / cost_price) * 100\n    \n    return alternative_profit_percentage\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of apples Mr. Aziz had initially\n    x = symbols('x')\n\n    # Sold 1/5 of the apples on Monday\n    monday_sales = x / 5\n\n    # Sold 80 apples on Tuesday\n    tuesday_sales = 80\n\n    # Left with 30% of the initial number of apples\n    remaining_percentage = 30 / 100\n\n    # Equation representing that after selling on Monday and Tuesday he is left with 30% of x\n    equation = Eq(x - (monday_sales + tuesday_sales), remaining_percentage * x)\n\n    # Solve the equation for x\n    initial_apples = solve(equation, x)\n\n    # Calculate the number of apples left in the end\n    apples_left = initial_apples[0] * remaining_percentage\n\n    return apples_left\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):  # Since each pile has at least 1 ball, start from 1 and go up to 9 - 2 = 7 (since we must leave at least 1 ball for each of the other two piles)\n        for x2 in range(1, 10 - x1):  # Ensure the second pile has at least 1 ball and less balls than what's remaining\n            x3 = 10 - x1 - x2  # Calculate the amount in the third pile based on the other two piles\n            if x1 != x2 and x2 != x3 and x1 != x3:  # Check if all piles have different amounts\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14): # ensure x2 is greater than x1\n            x3 = 14 - x1 - x2\n            if x3 > x2: # ensure x3 is greater than x2\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2\n\n    total_people = people_in_front_of_emily + danny_and_emily + people_behind_danny\n\n    return total_people\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let the first even number be n.\n    # Therefore, the seven consecutive even numbers are:\n    # n, n+2, n+4, n+6, n+8, n+10, n+12\n    # The fourth number is n + 6.\n    # According to the problem, n + 6 is larger than one-third of the sum of\n    # first and seventh number by 6, that is: n + 6 = (1/3)*(n + n + 12) + 6\n    \n    # Let's define a simple equation for n based on the information above\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(n + 6, (1/3)*(n + n + 12) + 6)\n    # Solve for n\n    solution_n = solve(equation, n)\n    first_number = solution_n[0]\n    \n    # After finding n, the sum of these seven numbers is:\n    sum_of_numbers = sum(first_number + 2*i for i in range(7))\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    num_pieces = 2 \n    length_per_piece = total_length / num_pieces\n    \n    return length_per_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * 1/5\n    remaining_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remaining_cookies * 3/4\n\n    return afternoon_cookies\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km = 1.5\n    m_per_km = 1000\n    ans = km * m_per_km\n    return ans\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140\n    sum_remaining = total_sum - 180\n    average_remaining = sum_remaining / 8\n    return average_remaining\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    purple, yellow, white, red = symbols('purple yellow white red')\n\n    equation1 = Eq(purple, 2 * yellow)\n    equation2 = Eq(yellow, 3 * white)\n    equation3 = Eq(red + white, 38)\n    equation4 = Eq(red, 28)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n    total_markers = red_markers + blue_markers + green_markers\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n    \n    # Since trees are planted at both ends, subtract that distance\n    # then calculate the number of trees in between on one side,\n    # finally multiply by 2 because there are two sides, and add\n    # the two trees at the ends for each side.\n    num_trees_one_side = (length_of_highway // distance_between_trees) - 1\n    total_trees = 2 * (num_trees_one_side + 1)\n    \n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd_number = 1\n    difference = 2\n    \n    nth_odd_number = first_odd_number + (20 - 1) * difference\n    \n    return nth_odd_number\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # If the Ferrari driver finished in second place and overtook 5 cars,\n    # it means there were originally 6 cars ahead of the driver.\n    # Adding the Ferrari driver's own car, the total number of cars is:\n    ans = 6 + 1\n    return ans\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    total_rings = johnny_rings + amber_rings + remaining_rings\n\n    return total_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    age_difference = 48 - 8\n    mike_age_when_eddie_18 = 18 + age_difference\n    return mike_age_when_eddie_18\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_price = lily_book_price + amy_book_price\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    num_sides = 9\n    sum_of_angles = (num_sides - 2) * 180\n    interior_angle = sum_of_angles / num_sides\n\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    last_digits = sum(int('5' * i) for i in range(1, 21)) % 10000\n    return last_digits\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution(x, y):\n    # It takes 2 men 3 days to build 1 wall: we can calculate the man-days for 1 wall\n    man_days_for_one_wall = 2 * 3\n    \n    # Total man-days for x walls\n    total_man_days_for_x_walls = man_days_for_one_wall * x\n    \n    # Time taken for y men to build x walls\n    time_taken = total_man_days_for_x_walls / y\n    \n    return time_taken\n\n# Given x and y values\nans = solution(1, 2)  # Replace with (x, y) for different values"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    percentage_men = 25 / 100\n    fraction_women = 1 / 5\n\n    number_men = total_people * percentage_men\n    number_women = total_people * fraction_women\n    number_children = total_people - number_men - number_women\n\n    return int(number_children)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    # Let the number of checked shirts be x\n    # Then the number of white shirts is 7x\n    # The total number of shirts sold is 72\n    # x + 7x = 72\n    # 8x = 72\n    # x = 72 / 8\n    x = 72 // 8\n    white_shirts = 7 * x\n    return white_shirts\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    for number in range(999, 100, -1):\n        if number % 9 == 0 and number % 2 != 0 and (number // 10) % 10 % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    numbers = [72, 60, 48, 36, 24, 12]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Without an explicit pattern or picture ('insert pic'), I cannot provide a solution.\n    # Please provide the specific pattern or the details required for me to solve the question.\n    ans = None\n    return ans\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # Total number of ball colors\n    colors = 3\n    # We need to guarantee to draw 2 balls of the same color, so we use the pigeonhole principle.\n    # In the worst case, we draw one ball of each color. Then the next draw must be the same color as one of them.\n    draws = colors + 1\n    return draws\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    ans = 42 // 6\n    return ans\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return final_value\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls + boys, 390)\n    equation2 = Eq(1/3 * girls, 1/2 * boys)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for multiple_of_5 in range(10, 55, 5):  # Start from 10 because it's the first multiple of 5 after 6\n        if (multiple_of_5 + 1) % 7 == 0:\n            return multiple_of_5\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    for num in range(1, 60):\n        if num % 4 == 3 and num % 5 == 4 and num % 6 == 5:\n            return num\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1\n    while True:\n        if sum(map(int, str(m))) == 5 * sum(map(int, str(m + 1))):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # January to April (4 months)\n    jan_to_apr = 300 * 4\n    # May to July (3 months)\n    may_to_jul = 250 * 3\n    # August to September (2 months)\n    aug_to_sep = 750\n    # October to December (3 months)\n    oct_to_dec = 300 * 3\n\n    # Total amount spent\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n\n    # Total number of months\n    total_months = 12\n\n    # Average amount spent per month\n    average_spent = total_spent / total_months\n\n    return average_spent\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters = 24\n    original_number = (three_quarters * 4) / 3\n    return original_number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    bottom_temp = 17\n    top_temp = -2\n    overall_drop = bottom_temp - top_temp\n    return overall_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    # Let father_current_age be the father's current age.\n    # Let the number of years it takes for Tom to reach his father's current age be n.\n    # Then after n years, Tom's age will be tom_age + n, which is also father's current age.\n    # Also, after n years, father's age will be father_future_age.\n    \n    # We set up the equation: tom_age + n + n = father_future_age\n    # And solve for n: 2n + tom_age = father_future_age\n\n    # Solving for n gives us the number of years father has until he is 70\n    # Then we can find the father's current age\n    n = (father_future_age - tom_age) / 2\n    father_current_age = tom_age + n\n    \n    return father_current_age\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_passengers = (9 / 20) * total_passengers\n    women_passengers = (30 / 100) * total_passengers\n    children_passengers = total_passengers - men_passengers - women_passengers\n\n    return int(children_passengers)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jordan, evie, emily = symbols('jordan evie emily')\n\n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime('07:35', '%H:%M')\n    travel_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = departure_time + travel_duration + walk_duration\n\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    ans = []\n    for N in range(1, 200):\n        if sum(int(digit) for digit in format(N, 'b4')) == 5 \\\n                and sum(int(digit) for digit in format(N, 'b6')) == 8 \\\n                and sum(int(digit) for digit in format(N, 'b8')) == 9:\n            ans.append(N)\n    return ans\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # Three-digit numbers mean we need to fill 3 places: XYZ\n    # Since we can use each digit more than once, we have:\n    # For X (hundreds place), we can't use 0 (to make it a three-digit number), so we have 2 choices: 2 or 3\n    # For Y (tens place), we can use 0, 2, or 3, so we have 3 choices.\n    # For Z (ones place), we can also use 0, 2, or 3, so we again have 3 choices.\n    # The total number of different three-digit numbers is therefore the product of these choices.\n    \n    hundreds_place_choices = 2\n    tens_place_choices = 3\n    ones_place_choices = 3\n    total_combinations = hundreds_place_choices * tens_place_choices * ones_place_choices\n    \n    return total_combinations\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_hotdog = 1.10 / 6\n    cost_for_12_hotdogs = cost_per_hotdog * 12\n    return cost_for_12_hotdogs\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    cost_per_bag_in_pence = 16\n    total_money_in_pence = 200  # £2 is 200p\n    number_of_bags = total_money_in_pence // cost_per_bag_in_pence\n    return number_of_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        num = int(\"63\" + str(digit) + \"25\")\n        if num % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    ans = 8.3 * 40\n    return ans\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    difference = 14\n    chip_initial = (total_acorns + difference) // 2\n    return chip_initial\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n\n    ways = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    return ways\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    ans = None\n    for i in range(2, 100, 2):\n        if i % 4 == 0 and i % 3 == 0 and (i**0.5).is_integer():\n            ans = i\n    return ans\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))  # Generate list of prime numbers less than 52\n    min_count = 51  # Initialize with a high count, 51 because 1 is not a prime number\n    for prime in primes:\n        count = 0\n        remaining_sum = 51\n        while remaining_sum > 0:\n            remaining_sum -= prime\n            count += 1\n        if remaining_sum == 0 and count < min_count:\n            min_count = count\n    return min_count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for number in range(10, 100):\n        if number % 4 == 2 and number % 5 == 2:\n            return number\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    return 85 // 5\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    novels, science_books = symbols('novels science_books')\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n    \n    solutions = solve((equation1, equation2), (novels, science_books))\n    \n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    num_trays = 4\n\n    total_eggs = eggs_per_tray * num_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 41))\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 24 == 0 and i // 24 == 36:\n            return i\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    used_apples_kg = (750 + 1025) / 1000  # Convert grams to kilograms\n\n    remaining_apples_kg = total_apples_kg - used_apples_kg\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front_of_amy = 9\n    place_from_back = 15\n\n    total_people = people_in_front_of_amy + place_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    return 7 - (-4)\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    num_weeks = 4\n\n    growth_per_week = (final_height - initial_height) / num_weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # The worst case scenario is drawing all 5 balls of the same color first, then all 5 of another color.\n    # We need to draw one more to be certain to have 3 different colored balls.\n    return 5 + 5 + 1  # 5 of one color, 5 of another, and 1 more for the third color\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + x, 12.75)\n    \n    answer = solve(equation, x)\n    \n    longer_piece = 2 * answer[0]\n    \n    return longer_piece\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n\n    # Let's say x is the number of penpals who received a 4-page letter\n    # and y is the number of penpals who received a 3-page letter.\n    # We have two equations:\n    # x + y = total_penpals (Equation 1)\n    # 4x + 3y = total_pages (Equation 2)\n\n    # We are interested in finding y.\n\n    # From Equation 1, we can express x in terms of y: x = total_penpals - y\n    # Plugging x into Equation 2 gives us:\n    # 4(total_penpals - y) + 3y = total_pages\n    # Solving for y, we get:\n    # y = (4 * total_penpals - total_pages) / (4 - 3)\n\n    y = (4 * total_penpals - total_pages) / (4 - 3)\n\n    return int(y)\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    position_of_favorite_book = 14\n    books_on_the_right = 6\n    total_books = position_of_favorite_book + books_on_the_right\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200  # 1200 grams, assuming density is constant\n    # If each dimension is halved, the new volume is (1/2)^3 = 1/8 of the original\n    new_volume = original_volume * (1/2)**3\n    return new_volume\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    gigi_before = 120\n    lily_before = 24\n    gigi_after, lily_after = symbols('gigi_after lily_after')\n    \n    # Gigi's coins after the class is 3 times Lily's coins after the class\n    equation1 = Eq(gigi_after, 3 * lily_after)\n    \n    # They both get the same amount of coins in the class\n    equation2 = Eq(gigi_after - gigi_before, lily_after - lily_before)\n    \n    solutions = solve((equation1, equation2), (gigi_after, lily_after))\n\n    # The amount of coins they get in the class is the difference after class minus before class\n    coins_got_in_class = solutions[gigi_after] - gigi_before\n\n    return coins_got_in_class\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n\n    non_prime_count = 0\n    for i in range(1, 21):\n        if not isprime(i):\n            non_prime_count += 1\n\n    return non_prime_count\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    ans = 694 * 27\n    return ans\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    # The difference in age between Brian and his father\n    age_difference = 41 - 14\n\n    # Find the next occasion when Brian's age is the reverse of his father's age\n    for i in range(1, age_difference):\n        # Brian's age in the future\n        brian_future_age = 14 + i\n        # Father's age in the future\n        father_future_age = 41 + i\n        # Check if reversal property holds\n        if str(brian_future_age) == str(father_future_age)[::-1]:\n            return brian_future_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # Last digit must be odd\n        for j in range(10):  # Middle digit\n            for k in range(10):  # First digit\n                if i + j + k == 11:  # Sum must equal 11\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # As each egg takes 5 minutes to boil, and you can boil all 3 eggs simultaneously,\n    # the time it takes to boil 3 eggs is the same as boiling one egg.\n\n    time_for_one_egg = 5  # minutes\n    # Time for 3 eggs is the same as it is for one egg, given all can be boiled together\n    total_time = time_for_one_egg\n\n    return total_time\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n\n    cabins_needed = (students + cabin_capacity - 1) // cabin_capacity\n\n    return cabins_needed\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    # let's denote the first term of the sequence as a, and the common difference as d.\n    # Then the first four terms are a, a+d, a+2d, a+3d and their sum is 4a + 6d = 124.\n    # Let n be the total number of terms in the sequence.\n    # The last four terms are: a+(n-4)d, a+(n-3)d, a+(n-2)d, a+(n-1)d and their sum is 4a + (4n-10)d = 156.\n    # The sum of the entire sequence is n/2 * (2a + (n-1)d) = 210.\n\n    # Now, we have three equations with three unknowns (a, d, and n):\n    # (1) 4a + 6d = 124\n    # (2) 4a + (4n-10)d = 156\n    # (3) n/2 * (2a + (n-1)d) = 210\n    \n    # We can solve equations (1) and (2) for a and d first.\n\n    from sympy import symbols, Eq, solve\n\n    a, d, n = symbols('a d n')\n    equation1 = Eq(4*a + 6*d, 124)\n    equation2 = Eq(4*a + (4*n - 10)*d, 156)\n\n    # Use sympy's solve function to get a and d in terms of n\n    solutions_ad = solve((equation1, equation2), (a, d))\n\n    a_n = solutions_ad[a]\n    d_n = solutions_ad[d]\n\n    # Now substitute a and d in terms of n into equation (3)\n    equation3 = Eq(n/2 * (2*a_n + (n-1)*d_n), 210)\n    solution_n = solve(equation3, n)\n\n    # Since we are looking for a natural number count of terms, we want the positive solution\n    for sol in solution_n:\n        if sol.is_real and sol > 0:\n            return sol\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    initial_dough_kg = 11.16\n    cookie_dough_g = 45\n    brownie_dough_g = 150\n    num_cookies = 240\n    num_brownies = 2\n\n    total_dough_g = initial_dough_kg * 1000\n    used_dough_g = num_cookies * cookie_dough_g + num_brownies * brownie_dough_g\n    remaining_dough_g = total_dough_g - used_dough_g\n    remaining_dough_kg = remaining_dough_g / 1000\n\n    return remaining_dough_kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    calories_today = symbols('calories_today')\n    \n    inequality = calories_today < calories_yesterday\n    \n    return inequality\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining = 10\n    second_day = 2 * (remaining + 2)\n    first_day = 2 * (second_day + 4)\n    total_biscuits = first_day\n    return total_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    total_days = 15\n    initial_money = 100\n    deposit_amount = 5\n    spend_amount = 8\n    cycle_days = 2  # deposit and spend cycle occurs every two days\n    \n    # Calculate complete cycles and remaining days\n    complete_cycles = total_days // cycle_days\n    remaining_days = total_days % cycle_days\n    \n    # Calculate money alteration per cycle\n    cycle_money_change = deposit_amount - spend_amount\n    \n    # Calculate total change after all cycles\n    total_cycle_change = complete_cycles * cycle_money_change\n    \n    # Calculate remaining change for the leftover day, if any\n    if remaining_days > 0:\n        total_cycle_change += deposit_amount  # Only deposit occurs on the first day of a new cycle\n    \n    money_after_days = initial_money + total_cycle_change\n    \n    return money_after_days\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    pattern_length = len(pattern)\n    index = (1004 - 1) % pattern_length\n    \n    return pattern[index]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    number_of_children = 5\n    wine_gums_per_child = total_wine_gums // number_of_children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    a1 = 10\n    d = 3\n    an = 298\n    \n    n = (an - a1) // d + 1\n    sum_ans = (a1 + an) * n // 2\n    \n    return sum_ans\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    return 2000 - (1000 + (500 - (300 + (200 - (100 + 50)))))\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    chocolates, friends = symbols('chocolates friends')\n\n    # If she gives each friend 18 pieces, she will have 41 chocolates left.\n    eq1 = Eq(chocolates - 18 * friends, 41)\n\n    # If she gives each friend 23 pieces, she will be 34 chocolates short.\n    eq2 = Eq(chocolates - 23 * friends, -34)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (chocolates, friends))\n\n    # Find out how many chocolates she has\n    total_chocolates = solutions[chocolates]\n\n    # Calculate how many will be left if she gives each friend 20 pieces\n    remaining_chocolates = total_chocolates - 20 * solutions[friends]\n\n    return remaining_chocolates\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_money = 200\n    spent_on_book = 0.15 * initial_money\n    remaining_money = initial_money - spent_on_book\n    spent_on_dvd = 0.30 * remaining_money\n    money_left = remaining_money - spent_on_dvd\n    return money_left\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Inequality: Mulan's push-ups (M) > Best boy soldier's push-ups (B)\n    # B = 50 (best boy soldier's push-ups)\n    # M > B\n    # We are representing the inequality, not solving it, so we do not need to compute a numerical answer.\n    # Just represent the inequality in terms of Mulan's push-ups (M)\n\n    # Since we are only representing and not solving the inequality, we will just return a string representation\n    # of the inequality that states Mulan does more push-ups than the best boy soldier\n    return \"M > 50\"\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown_up = 22\n    balloons_burst = 3\n    \n    balloons_still_needed = total_balloons_needed - (balloons_blown_up - balloons_burst)\n    \n    return balloons_still_needed\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    # The knowledge route suggests this is a tournament-style problem often involving\n    # combinations of matches between teams or players.\n    # A common tournament structure is a round-robin where each team plays every other team once.\n    # If 'n' is the number of teams, then each team plays (n - 1) games, and since every game\n    # involves two teams, the total number of games is n*(n-1)/2.\n    # However, we need more information to solve the problem, such as the number of teams or\n    # number of games already played. Without this, we cannot determine the answer.\n    \n    # Assuming a round-robin tournament format and given 'n' teams,\n    # let's consider a placeholder for the number of teams, which we don't currently have.\n    # Without enough information, we must return None or a statement to indicate this.\n    \n    return \"Not enough information to determine the number of games remaining.\"\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    # Function to check if a number is a perfect square\n    def is_perfect_square(n):\n        root = int(n ** 0.5)\n        return n == root * root\n    \n    # Function to check if the sum of the digits of a number is 17\n    def digits_sum_is_17(n):\n        return sum(map(int, str(n))) == 17\n    \n    # Loop through all 3-digit numbers\n    for number in range(100, 1000):\n        # Initial count of true statements\n        count = 0\n\n        # Statement A: The number is a multiple of 27\n        if number % 27 == 0:\n            count += 1\n\n        # Statement B: The number is a multiple of 7\n        if number % 7 == 0:\n            count += 1\n\n        # Statement C: The sum of the digits of the number is 17\n        if digits_sum_is_17(number):\n            count += 1\n\n        # Statement D: The number is a perfect square\n        if is_perfect_square(number):\n            count += 1\n\n        # Statement E: The number is a factor of 89100\n        if 89100 % number == 0:\n            count += 1\n\n        # We are looking for the number where exactly three statements are true\n        if count == 3:\n            return number\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    total_candies = 88\n    total_children = 8\n\n    # Starting with the least amount for the child who gets the most pieces\n    # we need to ensure that all children get a different amount and at least one piece each\n    for max_pieces in range(total_children, total_candies+1):\n        remaining_candies = total_candies - max_pieces\n        # Already used max_pieces, so we start distributing from 1 to total_children-1\n        candies_distributed = sum(range(1, total_children))\n        # Check if it's possible to distribute the remaining candies among the remaining children\n        # without exceeding the max_pieces and every child getting at least one.\n        if remaining_candies >= candies_distributed and remaining_candies <= max_pieces - 1:\n            return max_pieces\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Tom takes 4 stones from Stack B\n    # After Tom's turn, Stack A has 20 stones, and Stack B has 16 stones.\n\n    # To win the game, Jerry needs to make sure that the number of stones remaining\n    # in both stacks is the same after his turn. This way, no matter how Tom plays,\n    # Jerry can always mimic Tom's move to ensure he (Jerry) takes the last stone.\n\n    # Since Stack B has fewer stones, Jerry should take stones from Stack A to match Stack B's count.\n    stones_to_take_from_A = 20 - 16  # = 4 stones\n\n    # Jerry must take 4 stones from Stack A to have an equal number of stones in both stacks.\n    stack = \"A\"\n    stones_to_take = stones_to_take_from_A\n\n    return f\"Jerry must take {stones_to_take} stone(s) from Stack {stack}.\"\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    number1 = 15\n    number2 = 37\n    halfway_number = (number1 + number2) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4\n    water_left = 7\n\n    total_water = (pails_filled * water_per_pail) + water_left\n\n    return total_water\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let the number of girls be 7x and the number of boys be 9x\n    # According to the problem, there are 16 more boys than girls, so 9x - 7x = 16\n    # Solve for x\n    x = 16 / 2\n\n    # Total number of pupils is the sum of boys and girls\n    total_pupils = 7 * x + 9 * x\n    return total_pupils\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = sum(1 + 3 * i for i in range(37))\n    mistake_diff = correct_sum - 2011\n    mistake_position = mistake_diff // 6  # Each mistake offsets the sum by 6\n    \n    return mistake_position + 1  # We add 1 because the first person starts with 1 not 0\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n    number_of_trees = circumference // interval\n    return number_of_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Let the middle number of the five consecutive natural numbers be x.\n    # Therefore, the five numbers are (x-2), (x-1), x, (x+1), and (x+2).\n    # We know that the sum of these five numbers is 160.\n    # (x-2) + (x-1) + x + (x+1) + (x+2) = 160.\n    # Simplifying the left side gives us 5x.\n    # 5x = 160.\n    # Solving for x gives us the middle number.\n    x = 160 // 5\n    \n    # The largest number is two more than the middle number, so we add 2.\n    largest_number = x + 2\n    \n    return largest_number\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):\n        for units in range(10):\n            M = hundreds * 100 + units\n            S = hundreds + units\n            if M == 67 * S:\n                reversed_M = units * 100 + hundreds\n                ans = reversed_M // S\n                return ans\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    total_length_cm = 2 * 100  # Convert meters to centimeters\n    piece_length_cm = 6\n    number_of_pieces = total_length_cm // piece_length_cm  # Use floor division for complete pieces\n\n    return number_of_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "def solution():\n    from math import comb\n    return comb(10, 7)\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c', integer=True)\n\n    equation = Eq(13/10, 1 + 1/(a + 1/(b + 1/c)))\n\n    solutions = solve(equation, (a, b, c))\n\n    for sol in solutions:\n        if all(isinstance(val, int) for val in sol):\n            return sol[0] + 2 * sol[1] + 3 * sol[2]\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    ones_digit = (8 ** 30) % 10\n    return ones_digit\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    average_pages_per_day = 40\n\n    days_spent = total_pages / average_pages_per_day\n\n    return int(days_spent)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    correct_score = 5\n    incorrect_score = -3\n\n    # Let correct_answers be the number of questions answered correctly\n    for correct_answers in range(0, total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * correct_score + incorrect_answers * incorrect_score\n        if score == 52:\n            return correct_answers\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 1\n    while days * (days + 1) / 2 <= 100:\n        days += 1\n    return days - 1\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_seq\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    box_value = 150 / left_side\n    return box_value\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = 0\n    for num in range(1, 21):\n        if num % 6 == 1:\n            total_sum += num\n    return total_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600\n    sugar_concentration = 0.48\n\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    return 53.4 - 2.5\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    return 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Let x be the age of the fourth dwarf (middle term)\n    # Then the ages of the youngest three would be (x-3), (x-2), (x-1)\n    # The sum of the ages of the youngest three is 42\n    # (x-3) + (x-2) + (x-1) = 42\n    # 3x - 6 = 42\n    # 3x = 48\n    # x = 16\n    # Now calculate the sum of ages of the oldest three dwarfs\n    # Their ages would be (x+1), (x+2), (x+3)\n    # Therefore, the sum is (x+1) + (x+2) + (x+3)\n    x = 16\n    sum_oldest = (x+1) + (x+2) + (x+3)\n    return sum_oldest\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        number = int(f\"12{N}4\")\n        if number % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b, c, d = symbols('a b c d', integer=True)\n    equation = Eq(1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a, 1370)\n\n    solutions = solve(equation, (a, b, c, d))\n    abcd = 1000 * solutions[a] + 100 * solutions[b] + 10 * solutions[c] + solutions[d]\n\n    return abcd\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_goals = sum(goals) / len(goals)\n    return mean_goals\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    from fractions import Fraction\n\n    # Adding the fractional parts separately (since they are common across all terms)\n    fractional_part = 4 * Fraction(4, 5)\n\n    # Adding the integer parts separately\n    integer_part = 19 + 199 + 1999 + 19999 + 199999\n\n    # Combine the integer part with the fractional part\n    ans = integer_part + fractional_part\n\n    return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    amount_in_pence = 408\n    fraction = 5 / 8\n\n    result = amount_in_pence * fraction\n\n    return result\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    current_total_age = janice_age + sister_age\n    future_total_age = 35\n    years_until_total_age_35 = (future_total_age - current_total_age)\n    \n    return years_until_total_age_35\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_remaining_test = total_marks_for_3_tests - 172\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    # dad's age six years ago was 5 times son's age six years ago\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    # the sum of the current ages is 78\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 0 \n    for i in range(1, 9):\n        ans += sum(1 / i for _ in range(i * 2))\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sweets = symbols('total_sweets')\n\n    # Given that 6 fruit drops is 2/7 of the number of milk chocolates\n    milk_chocolates = 6 * (7/2)\n\n    # Given that the number of milk chocolates is 3/4 of the total number of sweets\n    equation = Eq(milk_chocolates, 3/4 * total_sweets)\n\n    solution = solve(equation, total_sweets)\n\n    return solution[0]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the price of one football and one volleyball as symbols\n    football, volleyball = symbols('football volleyball')\n    \n    # Set up the equations according to the problem statement\n    equation1 = Eq(1 * football + 2 * volleyball, 60) # Buying 1 football and 2 volleyballs\n    equation2 = Eq(2 * football - 16, 60)            # Buying 2 footballs and getting $16 back\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (football, volleyball))\n    \n    # Access the solution for the volleyball\n    volleyball_price = solutions[volleyball]\n    \n    return volleyball_price\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    # Since the mode age is 7 and the range of ages is 6, \n    # we can deduce the youngest age is 7 - (6 - 1) = 2 \n    # The 6 is reduced by 1 because if the range is 6, the oldest must be 7 + 5 = 12.\n    \n    # We know there are at least two members who are 7 years old due to the mode.\n    # The mean age is 9, so the total of all ages is 5 * 9 = 45.\n    # Subtract the two ages that are 7, it leaves us with 45 - 14 = 31 to be spread among 3 people.\n    \n    # As we know the median is 8, one of these 3 remaining people must be 8 years old.\n    # Subtracting the 8 from the 31 leaves us with 23 for two people, one younger than 8 and one older.\n    \n    # Since the range is 6 years and the oldest is 12, the youngest must be 2 years old.\n    # This leaves us with one person who must be 23 - 2 = 21, which is not possible.\n\n    # We must revisit our ages and remember that the second 7 would be the middle value (the median), not the youngest.\n    # So we have two 7s and one 8, which leaves us with 45 - 22 = 23 to be divided between the two remaining people.\n    \n    # One of them must be the youngest (2 years), leaving the oldest to be 21 - 2 = 19 years old,\n    # which is not possible as the oldest is 12 years old.\n    \n    # Hence, the second youngest must also be 7 years old and the median of 8 must be the second oldest.\n    # Therefore, we now have two people sharing 24 (45 - (7+7+7)) which means the remaining ages must be 2 and 12.\n    \n    # The ages are therefore 2, 7, 7, 8, 12. The second oldest is hence 8 years old.\n    second_oldest = 8\n    return second_oldest\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # Digits possibilities based on the clues.\n    possibilities = {'0': [], '1': [], '2': [], '3': [], '4': [], '5': [], '6': [], '7': [], '8': [], '9': []}\n\n    # Based on the clues provided, we reason out the position of each number.\n    # From the clues 1703 and 3541, we know 3 is correct and in the 3rd position.\n    possibilities['3'] = [2]\n    # 3541 informs us that 5 is in the number, but not in the third or fourth positions, so it must be 1st or 2nd.\n    possibilities['5'] = [0, 1]\n    # 3541 also tells us 4 is in the number, but not in the third position, so it could be in the 2nd, 3rd, or 4th.\n    possibilities['4'] = [1, 3]\n    # 2745, with two correct digits in the wrong position, means 7 is in the number, but not in the second or fourth position.\n    possibilities['7'] = [0, 2]\n    # This leaves 1 as the digit in the 0th position.\n    possibilities['1'] = [0]\n\n    # Now we assemble the final number.\n    number = [None] * 4\n    # Fill in the numbers we're sure about\n    number[0] = '1'\n    number[2] = '3'\n    # Deduce position for 5 and 4 based on elimination\n    number[1] = '5' if '4' not in possibilities['5'] else '4'\n    number[3] = '7' if number[1] == '5' else '5'\n\n    # Convert list to string to get final number\n    ans = \"\".join(number)\n    \n    return ans\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    num = 1000\n    subtract_val = 630\n    ans = num - subtract_val\n    return ans\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n    # There are 3 books to arrange\n    num_books = 3\n    # The number of arrangements of n distinct objects is n!\n    return factorial(num_books)\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    # There are 5 positions for 5 people; A cannot stand on the first or last, \n    # this means A has 3 choices for his position (2nd, 3rd or 4th).\n    # After A has chosen a position, there are 4 people left to arrange \n    # in the remaining 4 positions. This can be done in 4! (factorial) ways.\n    # So the total number of ways is the number of choices for A multiplied \n    # by the number of ways to arrange the remaining people.\n\n    A_positions = 3  # A can stand in positions: 2nd, 3rd or 4th\n    other_people_arrangements = math.factorial(4)  # 4 people can be arranged in 4! ways\n\n    return A_positions * other_people_arrangements\n\nimport math\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    rounds = math.ceil(math.log2(num_people))\n\n    return rounds\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Let y be the number of yellow flowers\n    # Red flowers = 3 * yellow flowers\n    # Pink flowers = yellow flowers - 7\n    # Given that Pink flowers = 3\n    # Therefore, yellow flowers - 7 = 3\n    y = 3 + 7\n\n    # Now calculate the number of red flowers\n    red = 3 * y\n\n    # Total number of red and yellow flowers\n    total = red + y\n    return total\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols representing the number of boys (b) and girls (g) in the morning\n    b, g = symbols('b g')\n\n    # According to the problem, boys were 50% more than the number of girls in the morning\n    morning_ratio = Eq(b, 1.5 * g)\n\n    # Later in the afternoon, 12 boys and 12 girls joined the group\n    # The ratio of the number of boys to the number of girls became 19:14\n    afternoon_ratio = Eq((b + 12) / (g + 12), 19 / 14)\n\n    # Use sympy's solve function to solve the system of equations\n    solutions = solve((morning_ratio, afternoon_ratio), (b, g))\n\n    # The total number of children in the afternoon is the sum of boys and girls after 12 of each joined\n    total_children_afternoon = solutions[b] + 12 + solutions[g] + 12\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay = timedelta(minutes=30)\n    arrival_time = scheduled_time + delay\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    # Original ratio: apples/oranges = 3/8\n    equation_1 = Eq(apples/oranges, 3/8)\n    \n    # After removing one apple, new ratio: (apples - 1)/oranges = 1/3\n    equation_2 = Eq((apples - 1)/oranges, 1/3)\n    \n    # solve the system of equations\n    solutions = solve((equation_1, equation_2), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds digit must be non-zero\n        for tens in range(0, 10):  # tens digit could be zero\n            for ones in range(1, 10):  # ones digit must be non-zero\n                if tens < hundreds and tens < ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    # This is a case of calculating derangements (also known as subfactorial or !n)\n    # for n = 6, where n is the number of students and books.\n    n = 6\n    \n    # Subfactorial formula: !n = n! * (1/0! - 1/1! + 1/2! - 1/3! ... + ((-1)^n)/n!)\n    # Using a loop to calculate the terms in the expression.\n    factorial = 1\n    subfactorial = 0\n    sign = 1\n    for i in range(n+1):\n        if i > 0:\n            factorial *= i\n        subfactorial += sign / factorial\n        sign *= -1\n\n    # The answer is n! times the calculated subfactorial part\n    ans = int(factorial * subfactorial)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_money = 48\n    price_notebook = 3\n    price_colour_pencils = 9\n    total_classmates = 10\n\n    # We can find the number of boxes of colour pencils Jessie can buy by\n    # trying every possible number she could buy under the constraints given.\n    for i in range(total_classmates + 1):\n        if price_notebook * i + price_colour_pencils * (total_classmates - i) == total_money:\n            return total_classmates - i\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    first_floor_rows = 9\n    seats_per_row = 36\n    first_floor_capacity = first_floor_rows * seats_per_row\n    second_floor_students = total_students - first_floor_capacity\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    previous_term = 56\n    ratio = previous_term // 28\n\n    next_term = previous_term * ratio\n\n    return next_term\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the first even number be x. Then the six consecutive even numbers are:\n    # x, x+2, x+4, x+6, x+8, x+10\n    # The sum of these numbers is 6x + 30\n    # According to the problem, 6x + 30 = 510\n    \n    # Calculate the first even number\n    sum_of_numbers = 510\n    x = (sum_of_numbers - 30) // 6\n    \n    # Now calculate the mean which is the sum divided by the number of terms\n    mean = sum_of_numbers / 6\n    \n    # The median of even count of numbers is the average of the middle two numbers\n    median = (x + 4 + x + 6) / 2\n    \n    # Calculate the difference between the mean and the median\n    difference = mean - median\n    \n    return difference\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    result = sum((-1)**(i+1) * i for i in range(1, 32))\n    return result\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    n = 50\n    num_fives = 0\n    for i in range(1, n + 1):\n        while i % 5 == 0:\n            num_fives += 1\n            i = i // 5\n    return num_fives\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    # Let's denote Helen's cards after several rounds as H and Oliver's cards as O.\n    # Initially, Helen had 18 cards and Oliver had 22 cards.\n    # After several rounds, Helen has 10 more cards than Oliver.\n    # So, the equation is H = O + 10\n\n    # Total number of cards remains the same after the games as they are just transferred between Helen and Oliver.\n    # Total after several rounds should be H + O = 18 + 22 = 40 (Initial total cards)\n\n    # Now we can solve the two equations:\n    # H = O + 10\n    # H + O = 40\n\n    # Substitute the first equation into the second one:\n    # O + 10 + O = 40\n    # 2O + 10 = 40\n    # 2O = 30\n    # O = 15\n\n    # If Oliver has 15 cards, Helen has 15 + 10 cards\n    H = 15 + 10\n\n    return H\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    value_of_A = 40\n    value_of_B = value_of_A / 2\n    value_of_C = value_of_B / 2\n    total_value = value_of_A + value_of_B + value_of_C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_percentage = 0.65\n    sugar_weight = total_weight * sugar_percentage\n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    start_height = 12\n    climb_up1 = 23\n    climb_down = 31\n    climb_up2 = 17\n\n    final_height = start_height + climb_up1 - climb_down + climb_up2\n\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    from math import log10\n\n    N = 5**100\n    num_of_digits = int(log10(N)) + 1\n\n    return num_of_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the mass of strawberries as s and the mass of mangoes as m.\n    s, m = symbols('s m')\n\n    # We know that initially there was 448g more mangoes than strawberries.\n    equation1 = Eq(m, s + 448)\n\n    # After giving away 900g of mangoes, the mass of strawberries is twice the mass of mangoes.\n    equation2 = Eq(s, 2 * (m - 900))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (s, m))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Assuming the first term of the sequence is x, then the five consecutive numbers are\n    # x, x+1, x+2, x+3, x+4\n    \n    # The sum of these five consecutive numbers is\n    # x + (x+1) + (x+2) + (x+3) + (x+4) = 40\n    \n    # Simplifying the equation, we get:\n    # 5x + 10 = 40\n\n    # Solving for x, we find the value of the smallest number:\n    x = (40 - 10) / 5\n\n    return int(x)\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    composite_numbers = total_numbers - prime_numbers - 1  # Subtracting 1 for the number 1, which is neither prime nor composite\n\n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2000):\n        if sum(int(digit) for digit in str(year)) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    return 2 * 13 * 3.5\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 4, 6, 8, 9]\n    all_possible_numbers = set()\n    \n    # find all possible 5-digit numbers that are multiples of 9\n    for perm in permutations(digits, 5):\n        if perm[0] != 0:  # the number cannot start with 0\n            number = int(''.join(map(str, perm)))\n            if number % 9 == 0:\n                all_possible_numbers.add(number)\n    \n    # find the largest and smallest numbers\n    max_number = max(all_possible_numbers)\n    min_number = min(all_possible_numbers)\n    \n    # calculate the difference divided by 9\n    ans = (max_number - min_number) // 9\n    return ans\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    initial_sweets = 33\n    given_away = 8\n\n    remaining_sweets = initial_sweets - given_away\n\n    return remaining_sweets\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    n4 = 39\n    n12 = 57\n    difference = (n12 - n4) / (12 - 4)\n    first_term = n4 - (4 - 1) * difference\n\n    return int(first_term)\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '3', '5', '2']\n    largest_number = int(''.join(sorted(digits, reverse=True)))\n    return largest_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    number = 4 * 10**6 + 4 * 10**2 + 4\n    return number\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    # Calculate the total amount of salt from both solutions\n    total_salt = (30 * 0.30) + (20 * 0.20)\n    # Calculate the total weight of the solution before adding water\n    total_weight_before = 30 + 20\n    # As we want a 10% salt solution, let's set up the equation:\n    # total_salt / (total_weight_before + weight_of_water) = 10%\n    # We need to find the weight_of_water.\n    # Let's isolate weight_of_water on one side of the equation:\n    # weight_of_water = total_salt / 10% - total_weight_before\n    weight_of_water = total_salt / 0.10 - total_weight_before\n    return weight_of_water\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n    \n    correct_sum = incorrect_sum - incorrect_addend + correct_addend\n    \n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    for num in range(1, 380):\n        if num * num + num == 380:\n            return num\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    # Johnson's speed (m/min)\n    johnson_speed = 600\n    # Vicky's speed (m/min)\n    vicky_speed = 250\n    \n    # Distance of the race (m)\n    race_distance = 3000\n    \n    # Time taken for Johnson to finish the race (min)\n    johnson_time = race_distance / johnson_speed\n    # Time taken for Vicky to finish the race (min)\n    vicky_time = race_distance / vicky_speed\n    \n    # Difference in time\n    time_difference = vicky_time - johnson_time\n    \n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # Since we want to make sure we get 29 balls of one color, 28 of another, and 10 of the last, we use the pigeonhole principle.\n    # To avoid getting 29 balls of the color with the least amount, we pick all of that color plus one.\n    white_balls = 30  # the color with the least amount\n    worst_case_white = white_balls + 1\n\n    # Then to avoid getting 28 balls of the second color, we add all of that color plus one.\n    red_balls = 40\n    worst_case_white_red = worst_case_white + red_balls + 1\n\n    # At this point, we have picked all white and red balls. We need just one more ball to get at least 10 blue ones.\n    # Since we might have taken 29 red balls before obtaining the final white one, we need at least:\n    balls_needed = worst_case_white_red + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # Pigeonhole principle implies that if you want to draw at least 3 cards with the same number,\n    # you need to take into account the worst-case scenario where you draw 2 cards of every number\n    # without getting a third card with the same number.\n    # Since there are 13 different numbers, drawing 2 of each would result in 26 cards.\n    # To ensure a third card with the same number, one more card must be drawn.\n    \n    num_numbers = 13\n    cards_per_number = 2\n    # Drawing two of each number\n    cards_drawn = num_numbers * cards_per_number\n    # Draw one more to ensure at least 3 cards with the same number\n    cards_drawn += 1\n\n    return cards_drawn\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n\n    total_cards = 20\n    prime_numbers = list(primerange(1, 21))\n    num_prime_cards = len(prime_numbers)\n\n    proportion = num_prime_cards / total_cards\n\n    return round(proportion, 2)\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    number1 = 3.2\n    number2 = 5.6\n    \n    halfway_number = (number1 + number2) / 2\n    \n    return halfway_number\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    mean_value = 8\n    total_numbers = 8\n\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(known_numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume transferred from each container\n    x = symbols('x')\n\n    # Initial amount of lime in each bottle\n    lime_A = 5 * 0.1\n    lime_B = 3 * 0.2\n\n    # Final amount of solution in each bottle\n    final_volume_A = 5 - x\n    final_volume_B = 3 + x\n\n    # Amount of lime after transfer in each bottle\n    final_lime_A = lime_A - 0.1 * x + 0.2 * x\n    final_lime_B = lime_B + 0.1 * x - 0.2 * x\n\n    # Concentration of lime in each bottle after transfer should be the same\n    concentration_A = final_lime_A / final_volume_A\n    concentration_B = final_lime_B / final_volume_B\n\n    # Set up the equation concentration_A = concentration_B and solve for x\n    equation = Eq(concentration_A, concentration_B)\n    solution = solve(equation, x)\n\n    # Choose the positive solution\n    ans = [s.evalf() for s in solution if s > 0]\n    \n    return ans[0]\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_1_to_50 = 1275\n    sum_2_to_51 = sum_1_to_50 - 1 + 51\n    return sum_2_to_51\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Iterate through all possible permutations of the students without C\n    for perm in permutations('ABDEFGH'):\n        perm = ''.join(perm)\n        # Identify the positions where D and E are next to each other\n        if 'DE' in perm or 'ED' in perm:\n            # Identify the positions where F and G are next to each other\n            if 'FG' in perm or 'GF' in perm:\n                for i in range(1, 7):  # C can't be at the ends so the range is from 1 to 6\n                    # Build the lineup inserting C in the middle of A and B\n                    lineup = perm[:i] + 'C' + perm[i:]\n                    if lineup.index('A') < lineup.index('C') < lineup.index('B') or \\\n                       lineup.index('B') < lineup.index('C') < lineup.index('A'):\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    \n    total_prices = set()\n\n    for notebook in notebooks:\n        for calendar in calendars:\n            total_prices.add(notebook + calendar)\n\n    ans = len(total_prices)\n    return ans\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    num_rows = (students + tables_per_row - 1) // tables_per_row\n\n    return num_rows\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    total_sum = 0\n    number = '123'\n    for i in range(1, 124):\n        total_sum += int(number * i)\n    hundreds_digit = (total_sum // 100) % 10\n    return hundreds_digit\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Given values\n    length_painting = 90\n    length_lego_smaller = 70.5\n    ratio_length_to_breadth = 5 / 2\n\n    # Calculate the length of the lego\n    length_lego = length_painting - length_lego_smaller\n\n    # Calculate the breadth of the lego using the given ratio\n    breadth_lego = length_lego / ratio_length_to_breadth\n\n    return int(breadth_lego)\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    zoey_coins = [50, 20, 10, 5]\n    brother_total = sum(zoey_coins) // 3\n\n    for coin in zoey_coins:\n        if sum(zoey_coins) - coin == 2 * brother_total:\n            return coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    likes_bananas = 18\n    likes_apples = 12\n\n    likes_both = likes_bananas + likes_apples - total_people\n\n    return likes_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan's distance in meters\n    jaan_speed = 8  # Jaan's speed in meters per second\n    kane_distance = 200 - 12.5  # Kane's distance when Jaan finished\n\n    # Time taken for Jaan to complete the race\n    jaan_time = jaan_distance / jaan_speed\n\n    # Kane's speed = Kane's distance / time taken by Jaan\n    kane_speed = kane_distance / jaan_time\n\n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 1.10\n\n    total_price = cake_price + milk_price\n    actual_payment = total_price - voucher\n\n    return actual_payment\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the rates at which John (J), Raj (R), and Pete (P) can work per minute\n    J, R, P = symbols('J R P')\n\n    # Given that together they can finish the job in 1 hour (60 minutes)\n    equation1 = Eq(J + R + P, 1/60)\n\n    # John and Raj can finish the job in 1 hr 12 min (72 minutes)\n    equation2 = Eq(J + R, 1/72)\n\n    # Raj and Peter can finish the job in 1 hr 30 min (90 minutes)\n    equation3 = Eq(R + P, 1/90)\n\n    # Solving the equations to find the rate at which Raj can work\n    solutions = solve((equation1, equation2, equation3), (J, R, P))\n\n    # Calculating the time Raj will take to finish the job by himself\n    time_for_raj = 1 / solutions[R]\n\n    # Converting hours to minutes\n    time_for_raj_minutes = time_for_raj * 60\n\n    return time_for_raj_minutes\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_multiplier = 1.25\n    normal_hours = 8\n    total_hours_worked = 10\n    overtime_hours = total_hours_worked - normal_hours\n    overtime_rate = normal_rate * overtime_multiplier\n    \n    total_pay = (normal_hours * normal_rate) + (overtime_hours * overtime_rate)\n\n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    return 111 - 87\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35 / 100 * 60\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the younger brother and y be the current age of the elder brother.\n    x, y = symbols('x y')\n\n    # The sum of their current ages is 42.\n    equation1 = Eq(x + y, 42)\n\n    # A few years ago, the younger brother was half the elder brother's current age.\n    # Let's suppose 'a few years ago' is represented by the variable n, and at that time: \n    # y - n = 2*(x - n)\n    # Simplifying this, we get y = 2*x - n. We know that 'n' is y - x because when the elder brother was\n    # the age of the younger brother, it was 'n' years ago.\n    # So, replacing n with y - x, we get y = 2*x - (y - x) = 3*x - y\n    equation2 = Eq(y, 3*x - y)\n\n    # Solve the two equations simultaneously to find the values of x and y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):  # two-digit numbers range from 10 to 99\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    repeat_sequence = '928'\n    num_repeats = 99 // len(repeat_sequence)\n    last_partial_sequence = '928'[:99 % len(repeat_sequence)]\n    full_number = repeat_sequence * num_repeats + last_partial_sequence\n    remainder = int(full_number) % 9\n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30/43)\n    solved_value = solve(equation, x)\n\n    return solved_value[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # Taking the maximum possible balls without getting three of the same color\n    # 2 white, 2 blue, 2 green, and 2 orange (as we take 2 of each to ensure not getting three of a same color)\n    max_without_three_same = (2 * 4)\n    \n    # The next ball we take, no matter the color, will ensure that we have three of the same color\n    # So, we just add one to the previous total\n    ans = max_without_three_same + 1\n    \n    return ans\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # (remainder, modulo)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    \n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(0, 10):\n            original_number = 10 * tens + ones\n            swapped_number = 10 * ones + tens\n            if swapped_number == original_number // 3 + 3:\n                return original_number\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let n be the number of teams\n    n = symbols('n')\n    # Each team plays n-1 other teams twice, and total matches are 30\n    # Equation: n*(n-1) = 30*2, since each match is counted twice (home and away)\n    equation = Eq(n*(n-1), 60)\n    # Solve the equation for n\n    solutions = solve(equation, n)\n    # Return the number of teams, filtering out any negative solution\n    ans = [sol for sol in solutions if sol > 0]\n    return ans[0]\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes = 66.5 / apples_per_box\n    return int(total_boxes)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    current_sum_ages = 34\n    future_sum_ages = 40\n    difference_in_sum = future_sum_ages - current_sum_ages\n    years_later = difference_in_sum // 2\n    return years_later\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the length of the rope and y be the circumference of the tree\n    x, y = symbols('x y')\n    \n    equation1 = Eq(x - 10*y, 3)  # 10 turns around the tree, left 3 meters\n    equation2 = Eq(12*y - x, 3)  # 12 turns around the tree, missing 3 meters\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the length left after 8 turns\n    length_left_8_turns = solutions[x] - 8 * solutions[y]\n    \n    return length_left_8_turns\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    countries = 11\n    needed_minimum = 5\n\n    # We use the Pigeonhole Principle formula: (n - 1) * q + 1\n    # where n is the number of pigeonholes (countries) and q is the number of pigeons needed for a guaranteed minimum\n    ans = (countries - 1) * needed_minimum + 1\n    return ans\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    x_val = solutions[x]\n    y_val = solutions[y]\n    z_val = solutions[z]\n\n    return x_val + y_val + z_val\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    num_rows = -(-students // tables_per_row)  # Ceiling division\n\n    return num_rows\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "def solution():\n    for A in range(0, 10):\n        for B in range(0, 10):\n            if B == A:\n                continue\n            for C in range(0, 10):\n                if C in [A, B]:\n                    continue\n                for D in range(0, 10):\n                    if D in [A, B, C]:\n                        continue\n                    \n                    # Assuming the puzzle in the question should resemble a typical cryptarithmetic puzzle like:\n                    #  AB\n                    # +CD\n                    # ----\n                    # ABCD or another form, otherwise there's insufficient data.\n                    \n                    if A*1000 + B*100 + C*10 + D == (A*10 + B) + (C*10 + D):\n                        return A + B + C + D\n    return None\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n    \n    probability = numbers_greater_than_1499 / total_numbers\n    \n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    money_spent = symbols('money_spent')\n    \n    equation = Eq(money_spent - (4/7) * money_spent, 12)\n    \n    result = solve(equation, money_spent)\n    \n    return result[0]\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    # Let x be the number thought of\n    # According to the problem the equation is 2x + 6 = 28\n    # Now we perform the inverse operations to solve for x\n    ans = (28 - 6) / 2\n    return ans\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Let the age of the youngest dwarf be x years. Then the other two younger dwarfs will have ages (x+1) and (x+2).\n    # According to the information given, the sum of the ages of the youngest three dwarfs is 42.\n    # This means x + (x + 1) + (x + 2) = 42, which simplifies to 3x + 3 = 42\n    # Solve for x to find the age of the youngest dwarf.\n    x = (42 - 3) // 3\n    \n    # The age difference between each dwarf is 1 year.\n    # Therefore, the ages of the oldest three dwarfs will be x + 4, x + 5, x + 6.\n    # To find their total age, we add these together.\n    sum_of_oldest_three = (x + 4) + (x + 5) + (x + 6)\n    \n    return sum_of_oldest_three\n\n# Run the function and store the result in `ans`.\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    # For the given operation a ⨀ b, it means subtracting all the numbers from 1 to b-1 from a.\n    # So, we can calculate the sum of numbers from 1 to b-1 and subtract it from a.\n    \n    a = 111\n    b = 7\n    \n    # Calculate the sum of numbers from 1 to b-1\n    sum_of_series = sum(range(1, b))\n    \n    # Apply the operation as per its definition\n    result = a - sum_of_series\n    \n    return result\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    sum_of_squares = (1/6) * n * ((5*n) + 1) * ((5*n) + 2)\n    ans = int(sum_of_squares)\n    return ans\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n\n    equation1 = Eq(a + b, 447)\n    equation2 = Eq(b + c, 335)\n    equation3 = Eq(a + b + c, 659)\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    excess_13 = 190\n    excess_17 = 50\n    difference_in_stickers = excess_13 - excess_17\n    \n    stickers_per_pupil_diff = 17 - 13\n\n    num_pupils = difference_in_stickers // stickers_per_pupil_diff\n\n    total_stickers = (num_pupils * 13) + excess_13\n\n    return total_stickers\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return sum(factors)\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    equation1 = Eq(girls - boys, 30)\n    equation2 = Eq(girls + boys, 500)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file, storybook = symbols('file storybook')\n\n    equation1 = Eq(7 * file + 4 * storybook, 108)\n    equation2 = Eq(5 * file + 3 * storybook, 80)\n\n    solutions = solve((equation1, equation2), (file, storybook))\n\n    total_cost = solutions[file] + solutions[storybook]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_sausages = 21\n    total_initial_sausages = initial_trays * initial_mean\n    total_trays = initial_trays + 1\n    total_sausages = total_initial_sausages + additional_sausages\n    new_mean = total_sausages / total_trays\n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    return 1.99 + 2.99 + 3.99 + 4.99\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    v_numbers = 0\n    \n    for hundreds_digit in range(1, 10):  # hundreds digit can be from 1 to 9\n        for tens_digit in range(0, 10):  # tens digit can be from 0 to 9\n            for units_digit in range(0, 10):  # units digit can be from 0 to 9\n                if hundreds_digit > tens_digit and units_digit > tens_digit:\n                    v_numbers += 1\n                    \n    return v_numbers\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    ans = (3 + 1/2) / (1/4)\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # Speed of the train\n    speed = (137 + 263) / 20  # Speed = total distance / time taken for the first bridge\n    \n    # Time taken to entirely cross the second bridge\n    time_second_bridge = 27  # seconds\n    \n    # Length of the second bridge\n    length_second_bridge = (speed * time_second_bridge) - 137  # total distance covered - length of the train\n    \n    return length_second_bridge\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    total = rani + brenda\n    share = total // 2\n    amount_to_give = brenda - share\n    return amount_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    equation1 = Eq(blue + red, 125)\n    equation2 = Eq((2 / 5) * blue, (3 / 5) * red)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    blue_balls = solutions[blue]\n    red_balls = solutions[red]\n\n    return blue_balls - red_balls\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    ans = 2014 * 40\n    return ans\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial\n\ndef solution():\n    ways = factorial(7) // (factorial(3) * factorial(7 - 3)) * factorial(3)\n    return ways\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the units of the watches and handbags\n    watches, handbags = symbols('watches handbags')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(3 * watches + 5 * handbags, 915)\n    equation2 = Eq(4 * watches + 2 * handbags, 632)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (watches, handbags))\n\n    # Calculate the cost of 2 such watches and 2 such handbags\n    total_cost = 2 * solutions[watches] + 2 * solutions[handbags]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    min_pieces = 1  # Start with each child getting at least one piece\n    max_pieces = 0  # Initialize variable to track max pieces\n\n    # Start by giving out the minimum amount of candy possible to each child, \n    # Then give the rest to one child and increase this number until all candies are distributed.\n    # We keep track of the number of candies given out so far.\n    candies_distributed = 8  # Since each child gets at least one piece\n    for i in range(1, 8):\n        min_pieces += i\n        remaining_candies = 88 - (min_pieces + candies_distributed)\n        if remaining_candies < min_pieces + i + 1:\n            max_pieces = remaining_candies\n            break\n        candies_distributed += i\n\n    return max_pieces\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 100\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_age_2008 = 80\n    daughter_age_1996 = 40\n    year_difference = 2008 - 1996\n\n    # The age of the grandmother in 1996\n    grandmother_age_1996 = grandmother_age_2008 - year_difference\n    \n    # The age of the grandmother when her daughter was born\n    age_when_daughter_born = grandmother_age_1996 - daughter_age_1996\n\n    return age_when_daughter_born\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # After 3 passes, there are 3 different individuals who can receive a pass.\n    # The first pass goes from A to one of the three other individuals (we have 3 options here).\n    # The second pass cannot go back to A, so it has to go to one of the remaining two (2 options).\n    # The third pass must then go to the one remaining individual and finally back to A.\n    # Since the order of passing matters, we are looking at permutations here.\n    # The total number of ways to pass is then 3 * 2 * 1 = 6.\n    \n    return 3 * 2 * 1\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4 / 5 * 1\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_salt = 200 * 0.35\n    lenny_salt = 300 * 0.50\n    total_salt = leroy_salt + lenny_salt\n    total_solution = 200 + 300\n    concentration = total_salt / total_solution\n\n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike_candy, valeria_candy = symbols('mike_candy valeria_candy')\n\n    equation1 = Eq(mike_candy - valeria_candy, 6 - 22)    # Both eat the same amount\n    equation2 = Eq(mike_candy + valeria_candy, 36)        # Total candy\n\n    solutions = solve((equation1, equation2), (mike_candy, valeria_candy))\n\n    return solutions[valeria_candy]\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300\n    sugar_concentration = 0.35\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    base = 12\n    exponents_diff = 75 - 50\n    k = base ** (1 / exponents_diff)\n    return int(k)\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    final_oranges = 133\n    thrown_away_oranges = 34\n    bought_oranges = 25\n\n    initial_oranges = final_oranges - bought_oranges + thrown_away_oranges\n  \n    return initial_oranges\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi_op(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n    \n    result = psi_op(psi_op(14, 13), 12)\n    return result\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial\n\n    # Scenario 1: A and B are together\n    # Treat A and B as one unit. There are 7 units now (AB + 5 individuals + 1 open spot).\n    # They can be arranged in 7! ways. And A and B can be arranged among themselves in 2! ways.\n    scenario1 = factorial(7) * factorial(2)\n\n    # Scenario 2: A and B are together, and C is not next to D.\n    # C can take 6 different spots (not next to AB unit and not next to D), and D has 5 spots,\n    # then the remaining 4 people and the AB unit can be arranged in 5! ways.\n    scenario2 = 6 * 5 * factorial(5) * factorial(2)\n\n    # However, this scenario2 has been counted twice: both when C is to the left of D\n    # and when C is to the right of D, so we count it once.\n    scenario2 = scenario2 / 2\n\n    # Total ways - Scenario 2: A&B together but C&D not next to each other\n    ans = scenario1 - scenario2\n\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    num_digits = sum(len(str(i)) for i in range(1, 20))\n    return num_digits\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls  # since the total number of students is 36\n\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    # Total score of the class is the sum of all the individual scores\n    total_score = total_average * 36\n    # Total score of the girls\n    girls_score = girls_average * girls\n    # Total score of the boys\n    boys_score = boys_average * boys\n\n    # Equation representing the total score from boys and girls\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Legs count for each type of pet\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Legs count for known pets\n    known_legs = 2 * cat_legs + 2 * dog_legs + 1 * rabbit_legs\n\n    # Total legs count\n    total_legs = 28\n\n    # Number of birds\n    birds = (total_legs - known_legs) / bird_legs\n\n    return int(birds)\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    original_time = 6  # hours it takes for the team to paint the fence\n    original_length = 1  # relative length of the fence\n    original_people = 5  # number of people in the team\n    \n    new_length = 2 * original_length  # the neighbour's fence is twice as long\n    max_time = 5  # maximum time allowed for painting the new fence\n    \n    # Work is directly proportional to the length of the fence and inversely proportional to the number of people.\n    # original_work = original_people * original_time = new_people * max_time\n    # new_length / original_length = original_people * original_time / (new_people * max_time)\n    new_people = (new_length * original_people * original_time) / max_time\n\n    # Since the number of people needed must be an integer, round up to the nearest whole number.\n    min_people_required = math.ceil(new_people)\n    \n    return min_people_required\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_one_flight = 12 / 4  # time to walk up 4 flights from 1st to 5th floor\n    flights_in_30_minutes = 30 / time_for_one_flight\n    return int(flights_in_30_minutes)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_made_with_8_grams = 50\n    butter_for_50_cookies = 8\n    butter_for_x_cookies = 21.6\n\n    num_cookies = (butter_for_x_cookies * cookies_made_with_8_grams) / butter_for_50_cookies\n\n    return num_cookies\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert the base 8 number to base 10\n    N_base10 = int(\"12345654321\", 8)\n    \n    # Calculate the remainders\n    remainder_7 = N_base10 % 7\n    remainder_9 = N_base10 % 9\n    \n    # Add the remainders\n    ans = remainder_7 + remainder_9\n    \n    return ans\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    # Belt cost is 'belt'\n    # Wallet cost is 'belt + $54'\n    # Handbag cost is 'belt + $54 + $300'\n\n    equation1 = Eq(wallet, belt + 54)\n    equation2 = Eq(handbag, wallet + 300)\n    equation3 = Eq(belt + wallet + handbag, 840)\n\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_past = 7\n    years_passed = 3\n    years_ahead = 4\n\n    combined_age_now = combined_age_past + 2 * years_passed\n    combined_age_future = combined_age_now + 2 * years_ahead\n\n    return combined_age_future\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the book and magazine prices\n    book, magazine = symbols('book magazine')\n\n    # Equation based on buying 2 books and 3 magazines\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n\n    # Equation based on buying 1 book and 1 magazine\n    equation2 = Eq(book + magazine, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    # Get the cost of one magazine\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    ans = (n * (n + 1) * (n + 2) * (3 * n + 1)) // 12\n    return ans\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(2016)\n    divisors = 1\n    for exponent in factors.values():\n        divisors *= 2 * exponent + 1\n    \n    # Perfect squares have even exponents in the prime factorization\n    perfect_square_divisors = (divisors + 1) // 2\n    return perfect_square_divisors\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    total_sum = 60\n    # As the numbers are consecutive, we can let the middle number be n.\n    # The other two will be n-1 and n+1.\n    # Their sum is (n-1) + n + (n+1) = 3n\n    # Solving for n we get n = total_sum / 3\n    n = total_sum // 3\n    # The largest number is thus n+1.\n    largest_number = n + 1\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the volume of big and small pails\n    big_pail, small_pail = symbols('big_pail small_pail')\n\n    # Equation 1: 3 big pails + 4 small pails = 68 litres of water\n    equation1 = Eq(3 * big_pail + 4 * small_pail, 68)\n\n    # Equation 2: 4 big pails + 2 small pails = 64 litres of water\n    equation2 = Eq(4 * big_pail + 2 * small_pail, 64)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n\n    # Return only the volume of the big pail\n    return solutions[big_pail]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if len({a, b, c, d}) == 4:  # ensure all digits are different\n                        if (a * 101 + b * 10) + (c * 101 + d * 10) == 726:\n                            return a + b + c + d\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Number of orange, pink, and brown shirts\n    non_yellow_shirts = 6 + 4 + 12\n    \n    # To guarantee one yellow shirt, Annabella must take out all non-yellow shirts\n    # plus one more shirt which will definitely be yellow\n    shirts_to_take_out = non_yellow_shirts + 1\n    \n    return shirts_to_take_out\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Ceiling division\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    terms = [9 + 4/5, 99 + 4/5, 199 + 4/5, 2999 + 4/5, 39999 + 4/5, 1]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n    \n    sol = solve(equation, x)\n    \n    return sol[x]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    a = 94\n    c = 80\n    e = 73\n    f = 66\n\n    # Calculate the differences\n    diff_ec = e - c\n    diff_fe = f - e\n\n    # Assuming the sequence is arithmetic, take the average of the differences \n    b = a - (diff_ec + diff_fe) // 2\n\n    return b\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar = 30\n    water = 170\n    total_solution = sugar + water\n\n    concentration = (sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 1 (mod 2), x ≡ 1 (mod 3), x ≡ 1 (mod 4), x ≡ 1 (mod 6), and x ≡ 0 (mod 7).\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    _lcm = 1\n    for _, mod in congruences:\n        _lcm *= mod\n\n    age, _ = solve_congruence(*congruences)\n\n    # Since we are looking for the smallest age that fits the condition, we ensure it's not greater than the least common multiple of mods.\n    while age > _lcm:\n        age -= _lcm\n\n    return age\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    wine_glasses_sold = 25\n    tumblers_sold = 12\n    carton_volume_ml = 1000\n\n    total_ml_sold = (wine_glass_ml * wine_glasses_sold) + (tumbler_ml * tumblers_sold)\n    cartons_needed = total_ml_sold / carton_volume_ml\n\n    return int(cartons_needed)\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let the initial amount of avocados, peaches, and lemons be represented by variables\n    a, p, l = symbols('a p l')\n\n    # The initial ratios imply the following relationships:\n    # (1) Avocados to peaches: a/p = 2/9\n    # (2) Peaches to lemons: p/l = 9/8\n    # (3) Avocados to lemons: a/l = 2/8 = 1/4\n    # After selling, the new ratio of peaches to lemons is 6:5 which implies p-12 / l-60 = 6/5\n\n    # We can translate these relationships into equations\n    equation1 = Eq(a/p, 2/9)\n    equation2 = Eq(p/l, 9/8)\n    equation3 = Eq(p - 12, 6/5 * (l - 60))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, p, l))\n\n    # Calculate the result for the total number of fruits remaining\n    avocados_left = solutions[a] - 52\n    peaches_left = solutions[p] - 12\n    lemons_left = solutions[l] - 60\n\n    # The total number of avocados, peaches, and lemons left\n    total_left = avocados_left + peaches_left + lemons_left\n\n    return total_left\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n\n    # position_from_end is total_people minus position_from_front, plus 1 for counting inclusively\n    position_from_end = total_people - position_from_front + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # The last digit of a number in the form 2^n repeats every 4 powers.\n    # The sequence of the last digits is 2, 4, 8, 6, and then it repeats.\n    # We can find the equivalent power of 2 modulo 4 to determine the last digit.\n\n    # Given power of 2\n    power = 859433\n\n    # Since the last digit repeats every 4 numbers, we find the remainder when power is divided by 4\n    remainder = power % 4\n\n    # Create a mapping of remainder to last digit\n    last_digits = {0: 6, 1: 2, 2: 4, 3: 8}\n\n    # Find the last digit of 2^power using the remainder\n    last_digit = last_digits[remainder]\n\n    return last_digit\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    facing_teacher = 0\n    for i in range(1, 61):\n        if (i % 3 == 0) ^ (i % 5 == 0):\n            facing_teacher += 1\n    return facing_teacher\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from sympy import lcm, solve, symbols\n\n    # Define a variable for Peter's age\n    peter_age = symbols('peter_age')\n\n    # Calculate least common multiple of 2, 4, and 6\n    lcm_2_4_6 = lcm(2, 4, 6)\n\n    # Since Peter's age divided by 2, 4 or 6 always has a remainder of 1, his age \n    # must be 1 more than a multiple of the LCM of 2, 4, and 6. For 7, the remainder\n    # is 5, hence we set up the following equation:\n    equation = lcm_2_4_6 * peter_age + 1 - 5\n\n    # We adjust the equation to satisfy the condition for division by 7 with remainder 5\n    # by subtracting 4 from peter_age multiplied by the LCM.\n    equation %= 7\n\n    # We start with the smallest multiple of lcm_2_4_6 plus 1 and check for remainder 5 when divided by 7\n    for age in range(lcm_2_4_6 + 1, lcm_2_4_6 * 7, lcm_2_4_6):\n        if age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let jess_sweets be the number of sweets Jess has, and jill_sweets be the number of sweets Jill has.\n    jess_sweets, jill_sweets = symbols('jess_sweets jill_sweets')\n\n    # Initial ratio of sweets\n    equation1 = Eq(jill_sweets, 6/5 * jess_sweets)\n    \n    # After Jill gives 8 sweets to Jess, new ratio of sweets\n    equation2 = Eq(jill_sweets - 8, 4/7 * (jess_sweets + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess_sweets, jill_sweets))\n\n    # Total number of sweets\n    total_sweets = solutions[jess_sweets] + solutions[jill_sweets]\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef solution():\n    max_divisible = 0\n    digits = [1, 2, 3, 4, 5, 6, 7]\n    for i in range(1, len(digits) + 1):\n        for perm in permutations(digits, i):\n            number = int(''.join(map(str, perm)))\n            if all(number % int(d) == 0 for d in perm):\n                max_divisible = max(max_divisible, number)\n    return max_divisible\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    def check_consecutive_odd_sum(n):\n        count = 0\n        for i in range(1, n + 1, 2):\n            sum_consecutive = 0\n            for j in range(i, n + 1, 2):\n                sum_consecutive += j\n                if sum_consecutive == n:\n                    count += 1\n                    break\n                elif sum_consecutive > n:\n                    break\n        return count\n    \n    ans = check_consecutive_odd_sum(900)\n    return ans\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let A = Adam's weight, B = Ben's weight, and C = Carl's weight\n    # According to the problem, we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # We want to find the total weight A + B + C\n    # Adding all three equations we get:\n    # 2A + 2B + 2C = 102 + 97 + 93\n    # A + B + C = (102 + 97 + 93) / 2\n\n    total_weight = (102 + 97 + 93) / 2\n    return total_weight\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for number in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if number % 3 == 2 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    remainder = 2\n    divisor = 53\n    smallest_number = (divisor * ((120 // divisor) + 1)) + remainder\n    return smallest_number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n\n    perimeter = 2 * (length + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    min_value = min(numbers)\n    return min_value\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    centimeters_in_meter = 100\n    billy_height_meters = 2\n    billy_height_centimeters = 2\n\n    billy_total_height = billy_height_meters + (billy_height_centimeters / centimeters_in_meter)\n\n    return billy_total_height\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test = 60\n    second_test = first_test * 1.25\n    third_test = second_test * 0.80\n    \n    total_marks = first_test + second_test + third_test\n    \n    return total_marks\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    interest_rate = 0.03\n    time_period = 2\n\n    amount = principal * ((1 + interest_rate) ** time_period)\n\n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - pupils * 4, 8)\n    equation2 = Eq(pupils * 6 - bookmarks, 10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    savings = [13, 18, 5]\n    mean_savings = sum(savings) / len(savings)\n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time = f'{hour:02d}{minute:02d}'\n            if time.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    chocolate_bars = 233\n    # Check if the number of chocolate bars is a prime number\n    # If it is a prime number, it cannot be split evenly between students\n    # (greater than 1 and less than 233)\n    for i in range(2, chocolate_bars):\n        if chocolate_bars % i == 0:\n            return False  # Michael is incorrect if it can be divided evenly.\n    return True  # Michael is correct if it's prime and cannot be divided evenly.\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    total = sum((7*i)**2 for i in range(1, 16))\n    return total\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum_total = 4.22 + 31.49 + 0.76\n    return sum_total\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n\n    lower_bound = 130\n    upper_bound = 150\n    \n    primes = list(primerange(lower_bound, upper_bound + 1))\n    \n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    low = 56 // 4\n    high = 92 // 4\n    \n    if 56 % 4 == 0:\n        return high - low + 1  # Including both ends if 56 is a multiple\n    else:\n        return high - low      # Not including 56 if it's not a multiple\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for number in range(1, 100):\n        if number % 3 == 2 and number % 4 == 3 and number % 5 == 4:\n            return number\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    distance = 144  # distance between Magic Town and Super Town\n    time_downstream = 8  # time taken to travel downstream\n    speed_ship = 15  # speed of the ship in still water\n\n    # Speed downstream = speed_ship + speed_stream\n    # distance = (speed_ship + speed_stream) * time_downstream\n    # Therefore, speed_stream = (distance / time_downstream) - speed_ship\n    speed_stream = (distance / time_downstream) - speed_ship\n\n    # Speed upstream = speed_ship - speed_stream\n    speed_upstream = speed_ship - speed_stream\n\n    # Time taken to come back upstream = distance / speed upstream\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n    return qiqi_pizza\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    num_students = 15\n    students_to_choose = 2\n    \n    num_ways = comb(num_students, students_to_choose)\n    \n    return num_ways\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h, k = symbols('h k')  # h for hippo's daily consumption, k for kangaroo's daily consumption\n\n    equation1 = Eq(h, k + 45) \n    equation2 = Eq(20 * h, 10 * 20 * k)\n\n    solutions = solve((equation1, equation2), (h, k))\n\n    total_hippo = solutions[h] * 20\n\n    return total_hippo\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "def solution():\n    initial_time_in_minutes = 3 * 60 + 15  # Convert 3:15 PM to minutes.\n    waiting_time_in_minutes = 1 * 60 + 25  # Convert 1h 25min to minutes.\n    meet_time_in_minutes = initial_time_in_minutes + waiting_time_in_minutes  # Find the meeting time in minutes.\n\n    meet_hour = meet_time_in_minutes // 60  # Convert meeting time back to hours.\n    meet_minutes = meet_time_in_minutes % 60  # Get the remaining minutes.\n\n    # Adjust for 12-hour clock format if the time exceeds 12 hours.\n    if meet_hour > 12:\n        meet_hour -= 12\n\n    return f\"{meet_hour}:{meet_minutes:02d}\"\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    result = solve_congruence(*congruences)\n\n    return result[0]\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for j in range(2, 21) for i in range(j, 21))\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Worker A's daily work rate\n    A_rate = 1 / 15\n    # Worker B's daily work rate\n    B_rate = 1 / 20\n    \n    # Work done in 2 days by both workers together\n    work_done = 2 * (A_rate + B_rate)\n    # Remaining work\n    remaining_work = 1 - work_done\n    \n    # Days for A to finish the remaining job\n    days_for_A = remaining_work / A_rate\n    \n    return days_for_A\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    zodiac_signs = 12\n    students_for_ten = 10 * zodiac_signs\n    ans = students_for_ten + 1\n    return ans\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef solution():\n    total_count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for p in permutations(students, 7):\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C') or \\\n           p.index('A') > p.index('C') and p.index('A') < p.index('B'):\n            if abs(p.index('F') - p.index('G')) != 1:\n                if p.index('D') == p.index('E') + 1 or p.index('D') == p.index('E') - 1:\n                    total_count += 1\n    return total_count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Taking into account the worst case based on the Pigeonhole principle,\n    # we want to ensure 10 balls of the same color.\n    # We take 9 balls of each color to ensure not having 10 of the same.\n    yellow = 9  # If we take 9 yellow, we're not sure to have 10 of the same color.\n    white = 9   # Likewise, taking 9 white does not ensure 10 of the same color.\n    black = 9   # And taking 9 black balls gives us the same uncertainty. \n\n    # Adding 1 to any of the counts would guarantee 10 balls of at least one color.\n    # So we take 1 more ball after taking 9 of each.\n    additional_ball = 1  \n\n    # Total number of balls to ensure 10 of the same color\n    total_balls = yellow + white + black + additional_ball\n\n    return total_balls\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    num_children = 9\n    first_child = 3\n\n    # The last candy will be given to the child with the seat number\n    # (first_child - 1 + total_candies) % num_children\n    # Adding (first_child - 1) because the first child is not seat number 1.\n    # Subtracting 1 because we want to align it with 0 indexing.\n    last_child = (first_child - 1 + total_candies - 1) % num_children + 1\n\n    return last_child\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    n = 60\n    difference = 3\n    \n    last_term = first_term + (n - 1) * difference\n    sum_of_sequence = (n * (first_term + last_term)) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    # Spaghetti is eaten every 7 days\n    spaghetti_cycle = 7\n    # Apple pie is eaten every 3 days\n    apple_pie_cycle = 3\n    \n    # To find when she eats both on the same day\n    # we need to find the least common multiple (LCM) of the two cycles\n    # which represents the cycle at which both events coincide\n    \n    from math import lcm\n    both_cycle_lcm = lcm(spaghetti_cycle, apple_pie_cycle)\n    return both_cycle_lcm\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure having at least two balls of the same colour, we have to consider the worst-case scenario.\n    # This means the balls are drawn one by one, alternating colours, until a pair is guaranteed.\n    \n    # Initially, we take out one green ball.\n    # Next, we take out one blue ball to make sure we are not picking two green balls.\n    # If we still continue with this pattern, we would have:\n    \n    # - After first 2 draws: 1 green and 1 blue (no guarantee of a pair yet).\n    # - After next 2 draws: 2 green and 2 blue (still no guarantee of a pair).\n    # - After next 2 draws: 3 green and 3 blue (still no guarantee of a pair).\n    # - After next 2 draws: 4 green and 4 blue (still no guarantee of a pair).\n    # - After next 2 draws: 5 green and 5 blue (still no guarantee of a pair).\n    # - After next 2 draws: 6 green and 6 blue (still no guarantee of a pair).\n    # - After next 2 draws: 7 green and 7 blue (still no guarantee of a pair).\n    # - After next 1 draw: at this point, it doesn't matter what color we draw, we will have a pair.\n\n    num_draws = 7 + 7 + 1  # We took 7 pairs of alternating colors, then one more to ensure a pair.\n    \n    return num_draws\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Using Inclusion-Exclusion Principle\n    # |A ∪ B| = |A| + |B| - |A ∩ B|\n    # But |A ∪ B| cannot be more than the total number of children which is 30\n    # so |A ∩ B| >= |A| + |B| - |A ∪ B|\n\n    children_with_both = children_with_dogs + children_with_cats - total_children\n\n    return children_with_both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    sum_of_numbers = 0\n    # Each row in the table increases by 10 starting from 0\n    for row_start in range(0, 60, 10):\n        # Each row has an arithmetic sequence starting from the row_start, increment by 2, 6 times\n        # The sequence is: row_start, row_start + 2, row_start + 4, ..., row_start + 10\n        row_sum = sum(range(row_start, row_start + 12, 2))\n        sum_of_numbers += row_sum\n    return sum_of_numbers\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    \n    range_of_data = max(data) - min(data)\n    \n    return range_of_data\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    skirts, shirts = symbols('skirts shirts')\n    equation1 = Eq(shirts, skirts - 36)\n    equation2 = Eq((2/3) * shirts + (5/6) * skirts, 72)\n    \n    solutions = solve((equation1, equation2), (skirts, shirts))\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    total_months = 3\n    total_saving = monthly_saving * total_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    material_length = 100\n    material_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_from_length = material_length // cloak_length\n    cloaks_from_width = material_width // cloak_width\n\n    ans = cloaks_from_length * cloaks_from_width\n    return ans\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Define the given speeds and distances\n    speed_to = 20  # speed to the destination\n    distance = 120  # total distance to destination\n    average_speed = 30  # expected average speed for the whole trip\n    \n    # Calculate time to the destination\n    time_to = distance / speed_to\n    \n    # Calculate the total time for the trip using the average speed\n    total_time = (2 * distance) / average_speed\n    \n    # Calculate the time for the return trip\n    time_back = total_time - time_to\n    \n    # Calculate the speed on the way back\n    speed_back = distance / time_back\n    \n    return speed_back\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 6), (7, 11)]  # (remainder, modulus)\n    num_biscuits, _ = solve_congruence(*congruences)\n\n    # Find the smallest number of biscuits in the given range\n    while num_biscuits < 400:\n        num_biscuits += 5 * 6 * 11\n\n    return num_biscuits\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    count = 0\n    for i in range(1, 35):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # Every time the man cuts the metal, he increases the number of pieces by one.\n    # Cutting it into two pieces requires one cut (1x2min = 2min for the first cut).\n    # To cut it into three pieces, he needs to make two cuts (2x2min = 4min total).\n    # To cut it into four pieces, he needs to make three cuts (3x2min = 6min total).\n    # To cut it into five pieces, he needs to make four cuts (4x2min = 8min total).\n    \n    # Calculate the number of cuts needed\n    number_of_cuts_needed = 5 - 1\n    \n    # Calculate the total time taken (time per cut * number of cuts)\n    total_time_taken = number_of_cuts_needed * 2\n    \n    return total_time_taken\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(sequence) / len(sequence)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    current_average = 120\n    new_average = 110\n    total_numbers = 3\n\n    current_total = current_average * total_numbers\n    new_total = new_average * (total_numbers + 1)\n\n    number_to_add = new_total - current_total\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote the number of marbles Sean has as 'sean'\n    sean = symbols('sean')\n\n    # According to the problem:\n    # Jovan has twice as many marbles as Sean: jovan = 2 * sean\n    # Herman has three times as many marbles as Jovan: herman = 3 * jovan = 3 * (2 * sean) = 6 * sean\n    # Jovan has 240 fewer marbles than Herman: jovan = herman - 240 = 6 * sean - 240\n\n    # So we have the equations:\n    jovan = 2 * sean\n    herman = 6 * sean\n    equation = Eq(jovan, herman - 240)\n\n    # Solving the equation for sean\n    solution_sean = solve(equation, sean)\n    sean_marbles = solution_sean[0]\n\n    # Calculate the number of marbles Jovan and Herman have\n    jovan_marbles = 2 * sean_marbles\n    herman_marbles = 6 * sean_marbles\n\n    # Calculate the total number of marbles\n    total_marbles = sean_marbles + jovan_marbles + herman_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):  # Iterate through possible single-digit values of m\n        if int(f'14{m}') == 8 * int(f'1{m}') - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    total_hay = 12 * 15  # total hay can feed 12 horses for 15 days\n    days_for_20_horses = total_hay / 20  # days that the total hay can feed 20 horses\n    \n    return days_for_20_horses\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    # Arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # Sum of n terms: S_n = n/2 * (a_1 + a_n)\n    \n    # First term (a_1)\n    a_1 = 5\n    # Difference (d)\n    d = 4\n    # Last term (a_n), which should be 65\n    a_n = 65\n    # Number of terms (n)\n    n = ((a_n - a_1) // d) + 1\n    \n    # Sum of n terms\n    S_n = n / 2 * (a_1 + a_n)\n    \n    return int(S_n)\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    factors = [6, 9, 12]\n    gcf = gcd(factors[0], gcd(factors[1], factors[2]))\n    return gcf\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_meters = 900\n    total_companies = 4\n    total_days = 5\n\n    one_day_work_per_company = total_meters / (total_companies * total_days)\n\n    return one_day_work_per_company\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    price_per_set_shoes = 78\n    price_per_pair_socks = 12\n\n    number_of_legs = (5 + 1) * 5  # The alien himself and his 5 brothers, each with 5 legs\n    number_of_sets_shoes = number_of_legs / 5  # Each set contains 5 individual shoes\n    number_of_pairs_socks = number_of_legs / 2  # Each pair contains 2 socks\n\n    total_cost_shoes = number_of_sets_shoes * price_per_set_shoes\n    total_cost_socks = number_of_pairs_socks * price_per_pair_socks\n\n    total_cost = total_cost_shoes + total_cost_socks\n\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    mean = sum(data) / len(data)\n    deviations = [abs(x - mean) for x in data]\n    mad = sum(deviations) / len(data)\n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "from math import comb\n\ndef solution():\n    ways = comb(13 + 3 - 1, 3 - 1)\n    return ways\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bud, pip, tom = symbols('bud pip tom')\n    \n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n    \n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n    \n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Assume the original number is ABCD (where A, B, C, D are digits)\n    # When D is moved to the front, the number becomes DABC\n    # According to the problem, DABC = ABCD + 5877\n\n    # We can represent the numbers as:\n    # ABCD = 1000A + 100B + 10C + D\n    # DABC = 1000D + 100A + 10B + C\n\n    # We can set up the equation:\n    # 1000D + 100A + 10B + C = 1000A + 100B + 10C + D + 5877\n    # Rearrange the terms:\n    # 999D - 900A - 90B + 9C = 5877\n\n    # The equation simplifies to:\n    # 111D - 100A - 10B + C = 5877 / 9\n    # D - A = (5877/9) // 111\n    # (100A + 10B + C) - (100A + 10B + C + D) = (5877/9) % 111\n    # D = remainder part of the above operation\n\n    # Let's solve for A, B, C, and D\n    for D in range(10):\n        for A in range(1, 10):  # A cannot be 0 since it's a 4-digit number\n            for B in range(10):\n                for C in range(10):\n                    if (1000 * D + 100 * A + 10 * B + C) == (1000 * A + 100 * B + 10 * C + D) + 5877:\n                        return 1000 * A + 100 * B + 10 * C + D\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\nfrom math import prod\n\ndef solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    not_picked = None\n\n    for candy_comb in combinations(numbers, 2):\n        for candice_comb in combinations(numbers, 3):\n            if prod(candy_comb) == prod(candice_comb):\n                combined = set(candy_comb) | set(candice_comb)\n                not_picked = set(numbers) - combined\n                return not_picked.pop()\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    options = [49, 80, 32, 66, 8, 58]\n    books_per_shelf = 7\n    leftover_books = 4\n\n    for option in options:\n        if (option - leftover_books) % books_per_shelf == 0:\n            return option\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    # The distance between the first and fifth tree is the distance for 4 intervals.\n    interval_distance = 20 / 4\n    # The number of intervals for the whole road is (road length / interval distance).\n    num_intervals = 200 / interval_distance\n    # The number of trees is the number of intervals plus 1 (since we start with the first tree).\n    num_trees = num_intervals + 1\n    return int(num_trees)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12\n    rate_b = 1 / 8\n    combined_rate = rate_a + rate_b\n    time_to_fill_half = (1 / 2) / combined_rate\n    return time_to_fill_half\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Given expression: (36 * 21) / (6 * 7)\n    # Step 1: Calculate inside the parenthesis\n    numerator = 36 * 21\n    denominator = 6 * 7\n\n    # Step 2: Divide the results\n    correct_answer = numerator / denominator\n\n    return correct_answer\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    num_apples = total_fruit * fraction_apples\n    num_pears = total_fruit - num_apples\n    return int(num_pears)\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of David's $0.50 cookies\n    # Let j be the number of Jeremy's $0.50 cookies\n    # Let t be the number of $0.10 cookies\n    d, j, t = symbols('d j t')\n\n    # David's cookies cost thrice as much as Jeremy's\n    # David had only 1 $0.50 cookie\n    equation1 = Eq(d, 1)\n\n    # Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies\n    equation2 = Eq(j, 3/5 * t)\n\n    # There were 60 fewer $0.10 cookies than $0.50 cookies\n    equation3 = Eq(t + 60, d + j)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (d, j, t))\n\n    # Calculate the worth of Jeremy's cookies\n    jeremy_cookies_worth = solutions[j] * 0.50\n\n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age_now = 12\n    cousin_age_now = jane_age_now * 2\n    cousin_age_in_8_years = cousin_age_now + 8\n    \n    return cousin_age_in_8_years\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    # Ann is the 8th person.\n    # There are 3 people between Ann and David.\n    # David is the second last person.\n    # Let's say the number of people in the queue is n.\n\n    # So, the position of David is the n-1 (because he is the second last).\n    # Since there are 3 people between Ann (8th) and David, we can say:\n    # David's position is Ann's position + 3 (people in between) + 1 (Ann's position itself)\n    # n - 1 = 8 + 3 + 1\n    # Solve for n:\n    n = 8 + 3 + 1 + 1\n\n    return n\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count = 0\n    page = 1\n    while count < 22:\n        if '8' in str(page):\n            count += str(page).count('8')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    sum_of_numbers = 555\n\n    third_number = sum_of_numbers - first_number - second_number\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    # Given n:8 = 9:12, we set up the proportion as n/8 = 9/12\n    # We can solve for n by cross-multiplying:\n    # n * 12 = 8 * 9\n    \n    n = (8 * 9) / 12\n    \n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    # Let the side of the smaller square (boys) be x\n    # The number of boys would then be x^2\n    # The larger square formed after girls join, will have a side of (x + 1)\n    # The number of students in the larger square will be (x + 1)^2\n    # That larger square consists of x^2 boys + x boys in the new row + x girls in the new column + 1 girl at the corner\n    # This leads to the total being x^2 + x + x + 1 = x^2 + 2x + 1 = (x + 1)^2\n    # We know that the number of girls added is 17, which equals 2x + 1\n    # Therefore, x = (17 - 1) / 2 = 16 / 2 = 8\n    # And the total number of boys (x^2) is 8^2 = 64\n    \n    x = (17 - 1) // 2\n    ans = x**2\n    return ans\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    distance_per_day = 3\n    slide_per_night = 1\n    distance_climbed = 0\n    days = 0\n\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += distance_per_day\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_per_night\n    \n    return days\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    both_competitions = math_students + art_students - total_students\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time = 3\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4*x, 19)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_england = 978\n    height_world = 8848\n    difference = height_world - height_england\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import primerange\n    \n    # two less than a multiple of 3 and a prime number\n    primes = [num for num in primerange(1, 50) if num % 3 == 1]\n    \n    # two more than a multiple of 5 and less than 50\n    eve_number = [num for num in primes if num % 5 == 2 and num < 50]\n    \n    return eve_number[0] if eve_number else None\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # Worst case scenario considering pigeonhole principle:\n    # To make sure we get 29 balls of one color, we have to consider the worst case\n    # where we pick all 28 balls of the other two colors first.\n    \n    # Since we have to ensure 29 of one color, we could end up picking all 40 red\n    # and all 30 white balls before getting 29 blue balls. Then we would need one\n    # more ball to make it 29, which will definitely be a blue ball as it's the only\n    # color remaining.\n    # So we add 40 (red) + 30 (white) + 29 (blue) => 99 balls to ensure we get 29 blue balls.\n    \n    # To ensure 28 balls of the second color, we would now be picking from red and\n    # blue balls, and we would need to pick 28 blue balls because the white ones are\n    # already picked. Since there are 80 blue balls in total and we have already \n    # picked 29, we have 80 - 29 = 51 blue balls left, so we need to pick all of them\n    # plus 28 of the 40 red ones to make sure we have 28 of the second color.\n    # So we add 51 (remaining blue) + 28 (red) => 79 balls to the 99 we already have.\n    \n    # Finally, we want 10 balls of the last color, which must be red since it's the\n    # only color left. As we have already picked 28 red balls in the second step,\n    # we have 40 - 28 = 12 red balls left, so we don't need to pick anymore if we\n    # reached our second color quota of 28.\n    # But in the worst case, if we want to ensure this without depending on the second\n    # step, we could have already picked a maximum of 29 (blue) + 30 (white), meaning\n    # we would need to pick all 40 red balls plus extra 10 to ensure we have at least\n    # 10 red balls, regardless of previous steps.\n\n    # Adding them all up: 99 (to ensure 29 blue) + 79 (to ensure 28 red or blue) + 10 (to ensure 10 red)\n    # Note that the +10 for red is not necessary as it is covered by the previous calculations.\n    balls_to_pick = 99 + 79\n\n    return balls_to_pick\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of money each person initially had\n    alicia, beth, casey = symbols('alicia beth casey')\n\n    # Define the equations based on the problem statement\n    # Alicia spent half of her money\n    eq1 = Eq(alicia / 2, alicia - alicia / 2)\n    \n    # Beth spent 60\n    eq2 = Eq(beth - 60, beth - 60)\n    \n    # Casey spent 3 times as much money as Alicia did\n    eq3 = Eq(casey - 3 * (alicia / 2), casey - 3 * (alicia / 2))\n    \n    # They all had the same amount of money left\n    eq4 = Eq(alicia - alicia / 2, beth - 60)\n    eq5 = Eq(beth - 60, casey - 3 * (alicia / 2))\n    \n    # They had $900 altogether at first\n    eq6 = Eq(alicia + beth + casey, 900)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # From mathematics, we know that the last digit of a factorial will be zero\n    # whenever the factorial is of a number greater than or equal to 5 since it\n    # will contain the factor 2 and 5, resulting in at least one 10.\n    # Therefore, the last digit of 2014! will be 0.\n    return 0\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    product = 2*2*3*8*5*5*5\n    zeros_count = 0\n    while product % 10 == 0:\n        zeros_count += 1\n        product //= 10\n    return zeros_count\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    ans = (6 / 20) * 100\n    return ans\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    # Let the unknown number be x\n    # Working Backwards from the final answer which is 1\n    # Step 1: Add 8 to 1\n    result = 1 + 8\n    \n    # Step 2: Multiply by 8\n    result *= 8\n    \n    # Step 3: Divide by 3\n    result /= 3\n    \n    # Step 4: Subtract 6 to find the original number\n    x = result - 6\n    \n    return x\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original = symbols('original')\n    \n    equation = Eq(original + 10 * original, 253)\n    \n    original_number = solve(equation, original)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    total_cookies = 100\n    days = 5\n    difference = 6  # Each day he ate 6 more than the day before\n\n    # Let the first day's cookies be x. Then, the total is:\n    # x + (x+6) + (x+12) + (x+18) + (x+24) = 100\n    # 5x + (6+12+18+24) = 100\n    # 5x + 60 = 100\n    # 5x = 40\n    # x = 8\n    \n    first_day_cookies = (total_cookies - (difference * (days * (days - 1) // 2))) // days\n\n    return first_day_cookies\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n\n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for num in range(1, 90):\n        if (num % 9 == 0) and ((num + 1) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]) and (num % 5 == 1):\n            return num\n\nans = solution() "
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, cayden * 2)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = sum(solutions.values())\n\n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percentage = 18\n    total_amount = 250\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n    # There are 4 men and 4 women\n    num_men = 4\n    num_women = 4\n    \n    # Choose positions for men (even or odd, doesn't matter as long as alternating)\n    positions_for_men = factorial(num_men)\n    \n    # Similarly, choose positions for women, independent of where the men stand\n    positions_for_women = factorial(num_women)\n    \n    # Since these are independent events, we multiply the number of ways\n    ans = positions_for_men * positions_for_women\n    return ans\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    letters = 'HAPPY'\n    freq = {letter: letters.count(letter) for letter in set(letters)}\n    \n    ans = factorial(len(letters))\n    for key in freq:\n        ans //= factorial(freq[key])\n    \n    return ans\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_three_rolls_mya = cost_per_roll_mya * 3\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 72 + crystal)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    boys_fraction = 2 / 5\n    girls_count = 12\n    total_children = girls_count / (1 - boys_fraction)\n    boys_count = total_children * boys_fraction\n    return int(boys_count)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    n = 96\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    peter_and_john = 2  # Since both Peter and John are in the line.\n\n    total_people = people_in_front_of_peter + people_behind_john + peter_and_john\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 900 * 0.1 * 0.6\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time = 12  # departure in England at 12 noon\n    flight_duration = 4  # flight takes 4 hours\n    time_difference = 3  # St Petersburg is 3 hours ahead of England\n    arrival_time = (departure_time + flight_duration + time_difference) % 24\n\n    return arrival_time\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    # We are looking for a two-digit number NO such that N and O are distinct digits\n    # We iterate over all 2-digit numbers and check if they satisfy the distinct digit condition\n\n    for N in range(1, 10):  # N cannot be 0 as it is a two-digit number\n        for O in range(10):  # O can be 0-9\n            if N != O:  # N and O must be different\n                return int(f\"{N}{O}\")\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum(50 - i if i % 2 == 0 else -(50 - i) for i in range(0, 19, 2))\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # There are 3 possible colors, and she needs to ensure that she has at least one matching pair.\n    # According to the pigeonhole principle, if she picks one from each of the three colors, she still might not have a matching pair.\n    # If she picks one more sock, she will have at least two socks of one color, thus ensuring a matching pair.\n    # Number of socks to pick to guarantee a pair = number of colors + 1\n    num_colors = 3\n    socks_needed = num_colors + 1\n    return socks_needed\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_grams = 1000\n    weight_in_kg = 2.5\n    ans = weight_in_kg * kg_to_grams\n    return ans\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n    boy_fraction = 3 / 8\n    girl_fraction = 1 - boy_fraction\n\n    # Let x be the total number of children in the classroom\n    # Total sweets given out equals sweets per boy times number of boys plus sweets per girl times number of girls\n    # total_sweets = sweets_per_boy * (boy_fraction * x) + sweets_per_girl * (girl_fraction * x)\n    # Solving for x gives us the total number of children\n    x = total_sweets / (sweets_per_boy * boy_fraction + sweets_per_girl * girl_fraction)\n    \n    # Calculate the number of girls\n    num_girls = girl_fraction * x\n    \n    return int(num_girls)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_factor = 1 / 5  # 1 km is represented by 5 cm on the map\n    distance_on_map_cm = 12\n    distance_on_ground_km = distance_on_map_cm * scale_factor\n    return distance_on_ground_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i))\n    return product\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the symbol for the number we are looking for\n    number = symbols('number')\n\n    # Create equations based on the remainder conditions\n    eq1 = Eq(number % 7, 5)\n    eq2 = Eq(number % 8, 6)\n    eq3 = Eq(number % 10, 6)\n\n    # Find a common solution for the remainders\n    common_solution = solve((eq1, eq2, eq3), (number))\n\n    # Common solution will give us candidate numbers that satisfy the remainder conditions.\n    # We need to check which one satisfies the sum of quotients condition.\n    for num in common_solution:\n        num = num[0]  # Extract the number from the tuple\n\n        # Calculate the sum of the quotients for each candidate number\n        quotient_sum = num // 6 + num // 7 + num // 8\n\n        # Check which number satisfies the sum of quotients condition\n        if quotient_sum == 265:\n            return num  # If it satisfies the condition, this is our number\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kph = 7.2\n    time_seconds = 24\n\n    speed_mps = (speed_kph * 1000) / (60 * 60)\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n    \n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n    \n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # Besides prime and composite, there are more classifications;\n    # like '1', which is neither prime nor composite.\n    # Thus, statements about positive integers should also consider '1', \n    # which is not prime and also not considered composite.\n    pip_is_correct = False  # Pip is not entirely correct.\n    return pip_is_correct\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    language_students = 54\n    \n    # Using the inclusion-exclusion principle\n    both_classes = math_students + language_students - total_students\n    \n    # Students taking only a maths class\n    only_math = math_students - both_classes\n\n    return only_math\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (i + 1) / i\n    return product\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    x = symbols('x')\n    eq = Eq((1/3 - 0.25) * x, 36)\n    sol = solve(eq, x)\n    return sol[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "from math import factorial\n\ndef solution():\n    count = 0\n    for x1 in range(1, 12):  # Group 1\n        for x2 in range(1, 12 - x1):  # Group 2\n            for x3 in range(1, 12 - x1 - x2):  # Group 3\n                x4 = 12 - x1 - x2 - x3  # Remaining balloons for Group 4\n                if x4 > x3 > x2 > x1:  # Each group must have a different number\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    i = 0\n    while True:\n        num = 40309 + i\n        if str(num) == str(num)[::-1]:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    kasia_keeps = 13\n    total_sweets = 42\n    sweets_to_share = total_sweets - kasia_keeps\n    sweets_per_friend = sweets_to_share // 2\n\n    lucie_keeps = sweets_per_friend - (2 / 7) * sweets_per_friend\n\n    return int(lucie_keeps)\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # One quarter spent on Friday leaves 3/4 of the pension\n    remaining_after_friday = 3 / 4\n    \n    # One third of what remains is spent on Saturday\n    # So 2/3 of the remaining_after_friday is left\n    remaining_after_saturday = 2 / 3 * remaining_after_friday\n    \n    # This is the fraction left for the rest of the week\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults_to_children = 1 / 4\n    adults = total_people / (1 + ratio_adults_to_children)\n    return int(adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n\n    ans = num_school_bags * num_pencil_boxes\n    return ans\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    # Initialize the difference and total students variables\n    difference = 52\n    total_students = 0\n    \n    # Since the students are arranged in a square array, we start by finding the size of the square\n    # We know that there are more boys than girls, and the difference is 52\n    # Let's assume the side of the square is 2n for boys and (2n - 1) for girls with n starting from 1\n    # The boys will be on the outer layer and the girls will be on the inner layer\n    # The total boys will be (2n)^2 = 4n^2\n    # The total girls will be (2n - 1)^2 = 4n^2 - 4n + 1\n    # The difference between boys and girls is thus 4n - 1\n    # We need to find the smallest n such that 4n - 1 >= 52\n    \n    n = 0\n    while 4 * n - 1 < difference:\n        n += 1  # Increase n until the condition is met\n    \n    # Now, n is the smallest number where the difference in boys and girls meets the requirement\n    # The total number of students will hence be the number of boys plus the number of girls\n    total_boys = (2 * n) ** 2\n    total_girls = (2 * n - 1) ** 2\n    total_students = total_boys + total_girls\n\n    return total_students\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    # The repeating decimal pattern is '6129043'\n    repeating_pattern = '6129043'\n    pattern_sum = sum(int(digit) for digit in repeating_pattern)\n    pattern_length = len(repeating_pattern)\n    \n    # Calculate how many full patterns fit in the first 212 digits\n    full_patterns = 212 // pattern_length\n    \n    # Calculate the sum of these full patterns' digits\n    sum_full_patterns = full_patterns * pattern_sum\n    \n    # Calculate the number of digits remaining after full patterns\n    remaining_digits_count = 212 % pattern_length\n    \n    # Calculate the sum of the remaining digits\n    sum_remaining_digits = sum(int(repeating_pattern[i]) for i in range(remaining_digits_count))\n    \n    # The total sum is the sum of full patterns and remaining digits\n    total_sum = sum_full_patterns + sum_remaining_digits\n    \n    return total_sum\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n', integer=True)  # original number of soldiers in each row/column\n    equation = Eq(n**2 + n + n + 1, n**2 + 31)\n\n    solutions = solve(equation, n)\n\n    # Find the positive integer solution\n    for sol in solutions:\n        if sol > 0:\n            total_soldiers = (sol + 1) ** 2\n            return total_soldiers\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # If he uses a 5-litre pail, 4 litres overflow, which means the tank capacity is 1 litre less.\n    # If he uses a 3-litre pail, he needs 4 more pails to fill the tank, meaning he has filled 3 litres.\n    # So the tank capacity is 3 + 4 * 3 litres.\n\n    pail_5 = 5\n    overflow_5 = 4\n    tank_capacity_with_5 = pail_5 - overflow_5\n\n    pail_3 = 3\n    needed_pails_3 = 4\n    tank_capacity_with_3 = pail_3 + needed_pails_3 * pail_3\n\n    # Since the tank capacity must be the same, we equate both to find the missing number of litres\n    # and thus find the actual capacity of the tank.\n    # tank_capacity_with_5 + missing_litres = tank_capacity_with_3\n    # missing_litres = tank_capacity_with_3 - tank_capacity_with_5\n    missing_litres = tank_capacity_with_3 - tank_capacity_with_5\n\n    # The total amount of water needed is then the sum of the water he was able to fill\n    # with the 5-litre pail before it overflowed and the missing litres.\n    total_water_needed = tank_capacity_with_5 + missing_litres\n\n    return total_water_needed\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = ginkgo_trees - 1\n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    # Initialize the counter for the number of 5s, as 5s are the limiting factor for the number of zeros at the end of a factorial\n    count_fives = 0\n    n = 1\n\n    # Since trailing zeros are formed by pairs of 2 and 5, and there are always more 2s than 5s,\n    # we only need to count the number of 5s in the prime factorization of n!\n    while True:\n        n += 1\n        # Check the number of 5s in the prime factors of current n\n        current = n\n        while current % 5 == 0:\n            count_fives += 1\n            current //= 5\n\n        # Check if we have reached the desired count of trailing zeros\n        if count_fives == 28:\n            break\n    \n    return n\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    apples, pears = symbols('apples pears')\n\n    # Original ratio equation\n    equation1 = Eq(apples / pears, 3 / 4)\n\n    # After replacing 36 pears with 36 apples equation\n    equation2 = Eq((apples + 36) / (pears - 36), 3 / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, pears))\n\n    # Return the number of apples at first\n    return solutions[apples]\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    result = (2/3) * 729\n    return result\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    num_people = 12\n    handshakes = num_people * (num_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # Since the green socks and white socks are identical, picking any two guarantees a pair.\n    # Therefore, we don't need to consider them for the worst-case scenario.\n    # Our worst-case scenario comes when he picks one of each sock until he has to get a matching pair.\n    # To ensure two matching pairs with the same color, he can pick in the following pattern:\n    \n    # 1 yellow\n    # + 1 green (identical, already a pair of one color, no more green should be picked for the worst case)\n    # + 1 white (identical, already a pair of one color, no more white should be picked for the worst case)\n    # + 1 red\n    # + 1 black\n    # + 1 yellow (up to this point he has single pairs only)\n    # + 1 red (to make a pair with the red, and now he has at least one matching pair of red socks)\n    # + 1 yellow (this is the smallest number of socks he has to pick to guarantee he has two pairs of matching socks — red and yellow)\n\n    # Answer = 1 yellow + 1 green + 1 white + 1 red + 1 black + 1 red + 1 yellow\n    # Answer = 8 socks\n    return 8\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    total_cost = (5 * 1.09) + (6 * 0.55)\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_current_age = symbols('sam_current_age')\n\n    equation = Eq(sam_current_age + 4, 2 * (sam_current_age - 4))\n    solution = solve(equation, sam_current_age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7  # Total letters in RAINBOW\n    vowel_count = 3    # Number of vowels in RAINBOW (A, I, O)\n    consonant_count = total_letters - vowel_count  # Number of consonants (R, N, B, W)\n\n    # Calculate total arrangements for consonants\n    total_consonant_arrangements = factorial(consonant_count)\n\n    # Calculate all possible arrangement of 7 letters\n    total_arrangements = factorial(total_letters)\n\n    # Calculate the total arrangements where vowels are together\n    vowels_together = factorial(vowel_count) * (consonant_count + 1)\n\n    # Subtract arrangements where vowels are together from total to find the arrangements where they are never together\n    arrangements_never_together = total_arrangements - vowels_together\n\n    return arrangements_never_together\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    possible_numbers = sorted(int(''.join(p)) for p in permutations(digits))\n    for number in possible_numbers:\n        if number % 2 == 1:\n            return number\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    n1 = 10\n    sum_n1 = 20\n    n2 = 30\n    sum_n2 = 90\n\n    a1 = (2 * sum_n1 / n1 - (n1 - 1) * 1) / 2  # Using the sum formula: sum_n = (n/2) * (2a + (n-1)d)\n    a2 = (2 * sum_n2 / n2 - (n2 - 1) * 1) / 2  # We set d to 1 temporarily to find the first term\n\n    common_difference = (a2 - a1) / (n2 - n1)   # d = (a2 - a1) / (n2 - n1)\n    \n    return common_difference\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    \n    answer = solve(equation, x)\n    \n    return answer[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    # Let's denote the number of stickers Amy has as 5x and Penny has as 4x\n    # According to the problem, 5x + 4x = 117\n    # Solving for x gives us the number of stickers each one has.\n\n    total_stickers = 117\n    ratio_amy = 5\n    ratio_penny = 4\n    total_ratio = ratio_amy + ratio_penny\n\n    x = total_stickers / total_ratio\n    pennys_stickers = x * ratio_penny\n\n    return int(pennys_stickers)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    total_words = words_in_9_minutes * days\n\n    return total_words\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6\n    time_sec = 300\n    \n    speed_mps = (speed_kmh * 1000) / 3600  # Convert km/h to m/s\n    distance_m = speed_mps * time_sec\n\n    return distance_m\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Number of apples Jack sold\n    sold_apples = 40\n    # Proportion of apples sold to apples brought\n    sold_to_brought_ratio = 4 / 7\n    # Proportion of apples brought to total apples\n    brought_to_total_ratio = 1 / 2\n\n    # Calculate the number of apples brought by Jack\n    # using the ratio of apples sold to apples brought\n    brought_apples = sold_apples / sold_to_brought_ratio\n\n    # Calculate the total number of apples Jack has\n    # using the ratio of apples brought to total apples\n    total_apples = brought_apples / brought_to_total_ratio\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n    \n    # chickens and goats combined is 40\n    # 3 times the number of chickens is 5 times the number of cows\n    # 2 times the number of goats is 10 times the number of cows\n    equations = (\n        Eq(chickens + goats, 40),\n        Eq(3*chickens, 5*cows),\n        Eq(2*goats, 10*cows)\n    )\n    \n    # Solve the equations\n    solutions = solve(equations, (chickens, goats, cows))\n    \n    # Get the number of each animal\n    num_chickens = solutions[chickens]\n    num_goats = solutions[goats]\n    num_cows = solutions[cows]\n    \n    # Calculate total feet: chickens have 2 feet, goats and cows have 4\n    total_feet = num_chickens*2 + num_goats*4 + num_cows*4\n    \n    return total_feet\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    numbers = [200, 202, 204, 206, 208]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    all_numbers = [''.join(p) for p in permutations(digits)]\n    closest_num = min(all_numbers, key=lambda x: abs(int(x) - 2978))\n    \n    return int(closest_num)\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    lines = 10\n    regions = 1 + (lines * (lines + 1)) // 2\n    return regions\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    num_rows = ((last_term - first_term) // difference) + 1\n    \n    total_seats = num_rows * (first_term + last_term) // 2\n    \n    return total_seats\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for i in range(200, 501):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    factors = []\n    \n    for i in range(10, 100): # Loop through all 2-digit numbers\n        if 7007 % i == 0: # Check if it's a factor of 7007\n            paired_factor = 7007 // i\n            if i % 7 == 0 and paired_factor % 7 == 0 and paired_factor >= 10 and paired_factor < 100:\n                factors.append((i, paired_factor))\n                \n    # Assuming there are two such numbers, their sum should be constants\n    return sum(factors[0])\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    original_number = (result + 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let the four numbers be a, b, c, d\n    # Given, average of first 2 numbers (a and b) is 10\n    # (a + b) / 2 = 10 => a + b = 20\n    a_plus_b = 20\n\n    # Given, average of last 2 numbers (c and d) is 22\n    # (c + d) / 2 = 22 => c + d = 44\n    c_plus_d = 44\n\n    # Given, average of the first and last numbers (a and d) is 14\n    # (a + d) / 2 = 14 => a + d = 28\n    a_plus_d = 28\n\n    # The sum of all four numbers a + b + c + d can be found by adding (a + b) and (c + d)\n    total_sum = a_plus_b + c_plus_d\n\n    # Now subtract (a + d) from the total to find the sum of the middle numbers (b + c)\n    b_plus_c = total_sum - a_plus_d\n\n    # The average of the two middle numbers is then (b + c) / 2\n    average_middle = b_plus_c / 2\n\n    return average_middle\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    # Given values\n    average_AB = 22\n    C = 19\n    \n    # Since average of A and B is 22, sum of A and B is 22 * 2\n    sum_AB = average_AB * 2\n    \n    # Sum of A, B, and C\n    sum_ABC = sum_AB + C\n    \n    # Average of A, B, and C\n    average_ABC = sum_ABC / 3\n    \n    # Return the average\n    return average_ABC\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    birth_year = 1533\n    death_year = 1603\n    birth_month = 9\n    death_month = 3\n    birth_day = 7\n    death_day = 24\n    \n    age_years = death_year - birth_year\n    # If the death month is before the birth month, subtract one year\n    if death_month < birth_month or (death_month == birth_month and death_day < birth_day):\n        age_years -= 1\n    \n    return age_years\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    \n    # Applying Pigeonhole Principle\n    max_cakes_in_layer = (total_cakes + layers - 1) // layers\n    \n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    max_side = 0\n    for s in range(1, 24):\n        if s*s <= 23:\n            max_side = s\n        else:\n            break\n    rope_cut = 23 - max_side*max_side\n    return rope_cut\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    part1 = 20 + (1 * 7)\n    part2 = (21 + 1) * 7\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        frac = (2018 + i) / 5\n        frac_part = frac - int(frac)\n        total += frac_part\n    return total\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the common difference between two adjacent boxes.\n    d = symbols('d')\n\n    # The sum of the arithmetic sequence can be calculated using the formula:\n    # Sum_n = n/2 * (2 * a_1 + (n - 1) * d), where n is the number of terms,\n    # a_1 is the first term and d is the common difference.\n    # For this problem, n = 10, a_1 = 11, and Sum_n = 425.\n    # The equation can be used to solve the common difference d.\n    n = 10\n    a_1 = 11\n    Sum_n = 425\n\n    # Formulating the equation based on the sum of arithmetic progression formula\n    equation = Eq(n/2 * (2*a_1 + (n - 1)*d), Sum_n)\n\n    # Solving the equation for d\n    solution = solve(equation, d)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Given average ages\n    avg_age_chinese_english = 34 * 2\n    avg_age_english_math = 36 * 2\n    avg_age_chinese_math = 44 * 2\n    \n    # Using Inclusion-Exclusion Principle\n    # Sum of average ages of all possible pairs = (Sum of ages of each individual teacher + Sum of ages of each individual teacher - Sum of ages of each individual teacher)\n    total_sum_age = avg_age_chinese_english + avg_age_english_math + avg_age_chinese_math\n    # Since each teacher is counted twice in total_sum_age\n    # Therefore the total_sum_age should be divided by 2 to find sum of ages of each individual teacher\n    sum_of_individual_teachers_age = total_sum_age / 2\n    # Finally, to find the average age of 3 subject teachers, we divide the sum by the number of subjects (3)\n    average_age_of_teachers = sum_of_individual_teachers_age / 3\n    \n    return average_age_of_teachers\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chelsia, benson = symbols('chelsia benson')\n    \n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(benson - chelsia, 18)\n    \n    solutions = solve((equation1, equation2), (chelsia, benson))\n    \n    total_sum = solutions[chelsia] + solutions[benson]\n    \n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # 7 consecutive odd numbers have a common difference of 2.\n    # Let the smallest number be x.\n    # The sum of the sequence can be given as n/2 * (first_term + last_term)\n    # For 7 consecutive odd numbers, the last term would be x + 6 * 2 (since the common difference is 2)\n    # We know the sum is 357, so we can set up the equation:\n    # 7/2 * (x + (x + 12)) = 357\n    # Solve for x.\n\n    # First let's rearrange the equation: 7x + 84 = 714\n    # Then let's solve for x: x = (714 - 84) / 7\n    x = (357 * 2 - 6 * 2) // 7  # Multiply by 2 to eliminate the fraction then solve\n    \n    return x\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "def solution():\n    from math import factorial\n\n    total_digits = 5\n    repetitions = {'1': 2}\n\n    ways_to_arrange = factorial(total_digits)\n    for k, v in repetitions.items():\n        ways_to_arrange //= factorial(v)\n\n    return ways_to_arrange\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    ans = 12 * 1.99\n    return ans\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inv = sum(1 / i for i in range(1995, 2009))\n    A = 1 / A_inv\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let's denote the cost of a chair as 'c' and a table as 't'\n    c, t = symbols('c t')\n    \n    # Given that 5 tables and 12 chairs cost $720\n    equation1 = Eq(5 * t + 12 * c, 720)\n    \n    # Each table costs $25 more than each chair\n    equation2 = Eq(t, c + 25)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (c, t))\n    \n    return solutions[t]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be Carter's speed and m be Martin's speed\n    c, m = symbols('c m')\n\n    # Given that Martin's speed is 20 metres per minute faster than Carter's\n    equation1 = Eq(m, c + 20)\n\n    # Ratio of time taken by Martin and Carter is 9:13\n    # Since time is inversely proportional to speed: m/c = 13/9\n    equation2 = Eq(m/c, 13/9)\n\n    # Solving the equations to find the value of c\n    solution = solve((equation1, equation2), (c, m))\n\n    return solution[c]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count // 6  # Dividing by 6 because the order of numbers does not matter\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The remainders are all 1, hence the congruences are:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Using the Chinese Remainder Theorem to find the solution\n    smallest_number, _ = solve_congruence(*congruences)\n\n    return smallest_number\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # 2 is the only even prime number\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    ans = 12636 // 54\n    return ans\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    return 18 - x\n\nans = solution(x)  # Replace 'x' with the actual amount of cloth used for the dress when calling the function."
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    ans = 543 + 284\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # To ensure we have at least two apples of the same color,\n    # we imagine the worst case scenario where we take out apples\n    # one by one and each time it's a different color than the previous one.\n    # The worst case scenario would be 1 red, 1 yellow, 1 red, 1 yellow, etc.\n    # Therefore, after 14 red and 14 yellow apples, the 15th apple we draw\n    # must be the same color as one we've already drawn because there are no more\n    # red apples to take (all 14 are already out).\n\n    # We add 1 to the total count of unique red apples to ensure that we have at least\n    # two apples of the same color, which in this case will be yellow since we'd be forced\n    # to take another yellow after all the reds are out.\n    ans = 14 + 1\n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Given ratios\n    initial_ratio_red_to_black = 3 / 7\n    final_ratio_red_to_black = 5 / 13\n    \n    # Number of red pens left\n    red_pens_left = 20\n    \n    # Assume the initial number of black pens is 7x and red pens is 3x\n    # Let the number of pens sold be 'sold'\n    # So the initial number of red pens would be 3x = red_pens_left + sold\n    # And the initial number of black pens would be 7x = (red_pens_left * 13/5) + sold\n    # We can solve for x using the second equation\n    x = red_pens_left * 13 / (5 * 7)\n\n    # Now we find the initial number of red pens\n    initial_red_pens = 3 * x\n    \n    # The number of pens sold would be initial - left\n    red_pens_sold = initial_red_pens - red_pens_left\n    \n    return red_pens_sold\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n    \n    total_legs_cats = legs_per_cat * 2\n    total_legs_dogs = legs_per_dog * 2\n    total_legs_rabbit = legs_per_rabbit * 1\n\n    legs_other_than_birds = total_legs_cats + total_legs_dogs + total_legs_rabbit\n    legs_birds = 28 - legs_other_than_birds\n\n    num_birds = legs_birds // legs_per_bird  # Since each bird has 2 legs, divide total bird legs by 2\n\n    return num_birds\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for George's time to paint the room alone\n    george_time = symbols('george_time')\n\n    # The rate of work done by Fred and George together\n    rate_together = 1 / 6\n\n    # The rate of work done by Fred alone\n    rate_fred = 1 / 9\n\n    # The rate of work done by George alone, which is what we want to find\n    rate_george = 1 / george_time\n\n    # The equation that represents the combined rate of work\n    # 1/6 (together rate) = 1/9 (Fred's rate) + 1/george_time (George's rate)\n    equation = Eq(rate_together, rate_fred + rate_george)\n\n    # Solving the equation for George's time\n    george_time_solution = solve(equation, george_time)\n\n    return george_time_solution[0]\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    entrances = 5\n    people = 4\n    \n    ans = entrances ** people\n\n    return ans\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    return 2.42 * 1.6\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # The value of the house after the first year (with a 5% increase)\n    value_after_increase = 10500\n    # Since the value after increase is 105%, we calculate the original price (100%)\n    original_price = value_after_increase / 1.05\n    \n    # Now, the value of the house decreases by 5% in the second year\n    value_after_decrease = original_price * 0.95\n    \n    # Calculate the difference, which is the profit or loss\n    profit_or_loss = value_after_decrease - original_price\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_5_and_7 = 200 // 35\n\n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    one_third = 27\n    number = one_third * 3\n    return number\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for number in factors_of_42:\n        if number > 10 and number < 20:\n            return number\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    # Given numbers\n    numbers = [8, 3, 9]\n\n    # Given average\n    average = 6\n\n    # Calculating the unknown number\n    unknown_number = average * (len(numbers) + 1) - sum(numbers)\n\n    return unknown_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ruler, pen = symbols('ruler pen')\n\n    equation1 = Eq(2 * ruler + 9 * pen, 21.60)  # Total cost equation\n    equation2 = Eq(ruler, pen + 0.90)           # Ruler costs $0.90 more than a pen\n\n    solutions = solve((equation1, equation2), (ruler, pen))\n\n    return solutions[ruler]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_kg = 300\n    bag_kg = 12\n\n    bags_needed = total_kg / bag_kg\n\n    return -(-bags_needed // 1)  # Ceiling division\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    result += 50\n    day = result % 10\n    result //= 10\n    month = (result + 20) // (5 * 5 * 4)\n    return month * 100 + day\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "from sympy import primerange\n\ndef solution():\n    # Constraints\n    max_number = 50\n    primes = list(primerange(0, max_number))\n\n    for num in primes:\n        if num < max_number and num % 3 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(\"1356789\"):\n        first_number = int(\"\".join(perm[:3]))\n        second_number = int(\"\".join(perm[3:5])) * 10 + first_number % 10\n        third_number = int(\"\".join(perm[5:])) * 100 + second_number % 100\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # Calculating the sum of the first sequence (4 + 8 + 12 + ... + 396 + 400)\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_first_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    # Calculating the sum of the second sequence (396 + 392 + ... + 8 + 4)\n    # It's the same as the first, excluding the 400.\n    sum_second_sequence = sum_first_sequence - last_term\n\n    # The total sum is the sum of the first and second sequences.\n    total_sum = sum_first_sequence + sum_second_sequence\n    return total_sum\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    ans = 24 * 7\n    return ans\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_price = 5\n    refill_price = 1\n    total_money = 10\n\n    # Richard buys the first cup\n    total_cups = 1\n    remaining_money = total_money - initial_cup_price\n\n    # Now he can only buy refills with the remaining money\n    total_cups += remaining_money // refill_price\n\n    return total_cups\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    story_books = 2\n    comic_books = 3\n    science_books = 4\n    book_types = 3  # story, comic, science\n\n    # calculate permutations for each book type\n    story_permutations = factorial(story_books)\n    comic_permutations = factorial(comic_books)\n    science_permutations = factorial(science_books)\n\n    # calculate permutations of book types\n    type_permutations = factorial(book_types)\n\n    # total number of different ways\n    ans = story_permutations * comic_permutations * science_permutations * type_permutations\n\n    return ans\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for T\n    T = symbols('T')\n\n    # Income amounts\n    first_50k = 50000\n    remaining_income = 120000 - first_50k\n\n    # Tax equations based on the problem statement\n    tax_for_first_50k = 0.06 * first_50k\n    tax_for_remaining_income = remaining_income * (0.06 + T / 100)\n\n    # Total tax paid is the sum of both taxes\n    total_tax = tax_for_first_50k + tax_for_remaining_income\n\n    # Equation based on the given tax amount\n    tax_equation = Eq(total_tax, 10000)\n\n    # Solve for T\n    T_value = solve(tax_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    count = 0\n    for zyan in range(1, 5):\n        for xuan_ying in range(1, 5):\n            sicheng = 5 - zyan - xuan_ying\n            if sicheng >= 1:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Calculate the total amount spent in each period\n    jan_to_mar = 450 * 3\n    apr_to_jul = 350 * 4\n    aug_to_oct = 1250\n    nov_to_dec = 400 * 2\n\n    # Total amount spent in the year\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # Number of months in the year\n    months = 12\n\n    # Average spending per month\n    average_spent = total_spent / months\n    \n    return average_spent\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # Speed while walking to the library in m/min\n    cycling_speed = 60  # Speed while cycling back in m/min\n\n    # Let the distance to the library be d meters.\n    # Time taken to walk to library = d / walking_speed\n    # Time taken to cycle back = d / cycling_speed\n    # Total time = (d / walking_speed) + (d / cycling_speed)\n    # Average speed = Total distance / Total time\n    # Total distance = 2 * d (to and from the library)\n    \n    # Since we are looking for an average speed, the actual distance `d` doesn't matter as it will cancel out. \n    # We will use the formula for the harmonic mean of the two speeds because Sam travels the same distance at \n    # different speeds.\n    average_speed = (2 * walking_speed * cycling_speed) / (walking_speed + cycling_speed)\n\n    return average_speed\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # Number of monkeys in the first case\n    monkeys_first_case = 3\n    \n    # Number of days in the first case\n    days_first_case = 2\n    \n    # Total peaches eaten in the first case\n    total_peaches_first_case = 96\n    \n    # Calculate the number of peaches eaten by one monkey in one day (unit rate)\n    peaches_per_monkey_per_day = total_peaches_first_case / (monkeys_first_case * days_first_case)\n    \n    # Number of monkeys in the second case\n    monkeys_second_case = 5\n    \n    # Number of days in the second case\n    days_second_case = 4\n    \n    # Calculate total peaches eaten by the monkeys in the second case\n    total_peaches_second_case = peaches_per_monkey_per_day * monkeys_second_case * days_second_case\n    \n    return int(total_peaches_second_case)\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n    \n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    # Loop through possible values of M (0 to 9) to find one that makes the total\n    # number of sweets divisible by the number of bags (25)\n    for M in range(10):\n        total_sweets = int(f'127{M}')\n        if total_sweets % 25 == 0:\n            return total_sweets // 25\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(9 / x, y / 2)\n\n    y_value_when_x_is_3 = solve(equation.subs(x, 3), y)[0]\n\n    return \"inverse\", y_value_when_x_is_3\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['2', '3', '5', '6']\n    smallest_odd_possibilities = []\n    \n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 2 != 0:  # Check if it's an odd number\n            smallest_odd_possibilities.append(num)\n    \n    return min(smallest_odd_possibilities)  # Smallest odd number\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To guarantee we get at least two of the same color, we have to consider the worst-case scenario:\n    # We take out one ball of each color before we start taking out balls of the same color.\n    # We have 7 green balls and 8 blue balls.\n    # So we take one green and one blue to start with, this guarantees nothing.\n    # Next, no matter what color of the ball we take out, we will have two of the same color.\n    # Therefore, the answer is 1 (green) + 1 (blue) + 1 (any color) = 3\n\n    return 3\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let the number be 'n'\n    n = symbols('n')\n    \n    # Apply the operations step by step\n    result = ((n + 3) * 2 - 2 + 10) / 2 - n\n    \n    # Since the number that is left is independent of the number we started with, \n    # we can simplify the expression\n    simplified_result = result.simplify()\n    \n    # Return the final result\n    return simplified_result\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let x be the cost of one serving of ice cream\n    # If Sophie bought 5 servings, she would be short of $2.30, so the total cost is (x*5 - 2.30)\n    # When she buys 3 servings, she has $0.30 left, so the total amount she received is (x*3 + 0.30)\n    # These two expressions represent the same total amount of money Sophie's mother gave her:\n    # (x*5 - 2.30) = (x*3 + 0.30)\n    # Solving for x yields the cost of one serving of ice cream, from which we can find the total amount of money Sophie's mother gave her\n\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x*5 - 2.30, x*3 + 0.30)\n    cost_per_serving = solve(equation, x)\n\n    # Now calculate the total amount given by her mother for 3 servings plus 30 cents\n    total_amount = cost_per_serving[0] * 3 + 0.30\n    \n    return float(total_amount)\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import pow, sqrt\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * (5 / 3))\n\n    result = numerator / denominator\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    total_cost = 20 * 4 + 10 * 5 + 20 * 6\n    average_cost = total_cost / total_books\n\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n\n    # Jack had 5 times as much money as Kyle\n    equation1 = Eq(jack, 5 * kyle)\n\n    # After Jack lost $72, Kyle had 2/7 as much money as Jack\n    equation2 = Eq(kyle, (2/7) * (jack - 72))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # She could take out all orange, pink and brown shirts and still not have a yellow shirt\n    # To make sure she gets a yellow shirt, she has to take one more after that\n    num_shirts_without_yellow = 6 + 4 + 12\n    return num_shirts_without_yellow + 1\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define symbols for Felicia's original and remaining bracelets, and the amount she sold\n    F_original = symbols('F_original')\n    F_sold = 3 / 5 * F_original\n    F_remaining = F_original - F_sold\n\n    # Janice's original and new amount of bracelets after buying\n    J_original = 96\n    J_bought = 2 / 5 * F_sold\n    J_new = J_original + J_bought\n\n    # The new ratio of Felicia's to Janice's bracelets is 5:7\n    equation = F_remaining / J_new - 5 / 7\n\n    # Solve the equation for F_original\n    F_original_value = solve(equation, F_original)[0]\n\n    # Calculate the number of bracelets Janice bought from Felicia\n    Janice_bought = J_bought.subs(F_original, F_original_value)\n\n    return Janice_bought.evalf()\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_cost = 0.35\n    total_individual_cost = individual_cost * 15\n    savings = total_individual_cost - multipack_cost\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    rate = 5 / 100\n    time = 11\n\n    simple_interest = principal * rate * time\n    total_amount = principal + simple_interest\n\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    # Total sum of the given fractions\n    total_sum = (3/4) + (3/4) + (3/4)\n    # Subtract 1 from total sum to find the missing part (which is multiplied by 1/4)\n    missing_part = total_sum - 1\n    # Since the missing part is multiplied by 1/4, divide by 1/4 to find the missing number\n    missing_number = missing_part / (1/4)\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    n = 20\n    S = 560\n    d = 2\n\n    # Using the formula for the sum of an arithmetic progression: S = n/2 * (2a + (n-1)d)\n    # where S is the sum, n is the number of terms, a is the first term and d is the common difference\n    # We need to solve for the first term a\n\n    # Rearrange the formula to solve for a: a = (S/n - (n-1)d / 2)\n    a = (S / n - (n - 1) * d / 2)\n\n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    depth = 8\n    climb = 3\n    slip = 2\n    days = 0\n    current_height = 0\n\n    while current_height < depth:\n        days += 1\n        current_height += climb\n        if current_height >= depth:\n            break\n        current_height -= slip\n        \n    return days\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    # Calculate the total pages read each period\n    pages_first_period = 25 * 4\n    pages_second_period = 40 * 6\n    pages_last_period = 80\n    \n    # Calculate the total number of days\n    total_days = 4 + 6 + 5  # 4 days in first period, 6 in second, 5 in last\n    \n    # Calculate the total number of pages read\n    total_pages_read = pages_first_period + pages_second_period + pages_last_period\n    \n    # Calculate the average pages read per day\n    average_pages_per_day = total_pages_read / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    penny_after = 14\n    brother_after = 12\n    difference = penny_after - brother_after  # After giving toys away\n\n    # Before giving toys away, Penny had 10 more toys than her brother originally had\n    # brother_original + 10 - difference = penny_after\n    brother_original = penny_after - 10 + difference\n\n    return brother_original\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statement\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n\n    # Find the smallest number with the Chinese Remainder Theorem\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    return 123 * 321\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        tens, ones = divmod(age, 10)\n        new_age = ones * 10 + tens + 1\n        if new_age * 2 == age:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    sum_of_series = n * (n + 1) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    ans = 3588 // 13\n    return ans\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # To make sure we have 4 cards of the same suit, we must consider the worst-case scenario.\n    # In the worst case, we draw 3 cards from each suit without getting a fourth card of the same suit.\n    # This would be 3 cards per 4 suits giving us 3*4 = 12 cards.\n    # The next card we draw would be the 13th card,\n    # and since there are only 4 suits, it must be of the same suit as one of the previous cards.\n\n    # Therefore, Tom must draw 13 cards to be sure that he has 4 cards of the same suit.\n    return 13\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percent_sold = 60 / 100\n    remaining_tickets = 28\n    total_tickets = remaining_tickets / (1 - percent_sold)\n    \n    return int(total_tickets)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the amount spent\n    spent = symbols('spent')\n    \n    # Create equation based on the problem description\n    equation = Eq((1420 - spent), 4 * (505 - spent))\n    \n    # Solve the equation for the amount spent\n    spent_solution = solve(equation, spent) \n    \n    # Since the solve function may return a list of solutions, we ensure to return the proper solution.\n    return spent_solution[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    full_number = one_quarter * 4\n    two_thirds = (full_number * 2) / 3\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_people = symbols('total_people')\n\n    # Equation representing the total number of people at the party\n    equation = Eq((3/7) * total_people + ((4/8) * (4/7) * total_people), 45)\n\n    # Solving the equation for the total number of people\n    solutions = solve(equation, total_people)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    two_dollar_notes = 5\n    fifty_cent_coins = 7\n    file_cost = 11.95\n\n    total_two_dollar_notes = two_dollar_notes * 2\n    total_fifty_cent_coins = fifty_cent_coins * 0.50\n    total_money = total_two_dollar_notes + total_fifty_cent_coins\n    remaining_money = total_money - file_cost\n\n    return remaining_money\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = saturday_sales - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    days = 0\n    \n    while total_distance > 0:\n        days += 1\n        total_distance -= climb_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_per_night\n        \n    return days\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    n = 18 # total number of pupils\n    r = 3  # pupils to be seated in a row\n\n    permutations = factorial(n) / factorial(n - r)\n\n    return int(permutations)\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    spaces_between_ginkgo = ginkgo_trees - 1\n    willow_trees_per_space = 2\n\n    total_willow_trees = spaces_between_ginkgo * willow_trees_per_space\n\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_in_still_water = 28\n    speed_of_current = 3\n    speed_upstream = speed_in_still_water - speed_of_current \n    distance = 150\n\n    time_taken = distance / speed_upstream\n\n    return time_taken\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    # Andrew's amount (A), Brian's amount (B), and Christopher's amount (C)\n    \n    # From the problem, we have the following system of equations:\n    # A + B = 40\n    # A + C = 37\n    # B + C = 25\n\n    # We want to find A + B + C\n    # Let's solve the system of equations:\n    # Adding all the equations together: 2A + 2B + 2C = 102\n    # To find A + B + C, we just need to divide this sum by 2.\n    total_money = 102 / 2\n    \n    return total_money\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n    total_spent = ramen_price + pineapple_juice_price + roasted_duck_price\n    return total_spent\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_price_per_kg = 7.48\n    cheese_weight = 500 / 1000  # Convert grams to kilograms\n    cheese_cost = cheese_price_per_kg * cheese_weight\n    \n    apple_price_each = 0.12\n    num_apples = 8\n    apples_cost = apple_price_each * num_apples\n    \n    yoghurt_price_each = 0.46\n    num_yoghurts = 2\n    yoghurts_cost = yoghurt_price_each * num_yoghurts\n    \n    total_cost = cheese_cost + apples_cost + yoghurts_cost\n    \n    money_given = 10  # £10 note\n    change = money_given - total_cost\n    \n    return round(change, 2)  # Rounding off to 2 decimal places\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    total_aircrafts = 1200\n    zack_rate = 150\n    combined_time = 6\n\n    combined_rate = total_aircrafts / combined_time\n    andy_rate = combined_rate - zack_rate\n\n    andy_time = total_aircrafts / andy_rate\n\n    return andy_time\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    n = 1\n    while True:\n        students = (2*n + 1)**2 - n**2\n        teachers = n**2\n        if students - teachers == 80:\n            return students + teachers\n        n += 1\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    chloe, david, emily = symbols('chloe david emily')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n    alan = 74\n    bilal = 86\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    # Get the amount collected by Chloe\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_lime = 2\n    ratio_orange = 7\n    ratio_apple = 6\n    total_ratio = ratio_lime + ratio_orange + ratio_apple\n    \n    volume_orange = (ratio_orange * total_volume) / total_ratio\n\n    return volume_orange\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # Let x be the smaller number and y be the larger number\n    equation1 = Eq(x + y, 528)  # The sum of the two numbers is 528\n    equation2 = Eq(y, 3 * x)  # The bigger number is three times the smaller number\n\n    solution = solve((equation1, equation2), (x, y))\n\n    return solution[y]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1 * 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    remaining_amount = original_amount + daily_savings - lent_to_brother - spent_on_snacks\n    return remaining_amount\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amount of money each person originally has be s, m, r respectively.\n    s, m, r, cost = symbols('s m r cost')\n\n    # According to the problem, we have the following equations:\n    # s = m + 40\n    equation1 = Eq(s, m + 40)\n    # Steve paid: s - cost : m : r = 3 : 8 : 9\n    equation2 = Eq((s - cost) / 3, m / 8)\n    equation3 = Eq((s - cost) / 3, r / 9)\n    # Ryan paid: s : m : r - cost = 5 : 4 : 1\n    equation4 = Eq(s / 5, m / 4)\n    equation5 = Eq(s / 5, (r - cost) / 1)\n    # Mark paid: s : m - cost : r = 10 : 1 : 9\n    equation6 = Eq(s / 10, (m - cost) / 1)\n    equation7 = Eq(s / 10, r / 9)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), (s, m, r, cost))\n\n    # Return the cost of the meal\n    return solutions[cost]\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    money_repaid_to_mum = 10.50\n    remaining_money = total_money - money_repaid_to_mum\n    money_spent_on_magazines = remaining_money / 2\n    money_left = remaining_money - money_spent_on_magazines\n    return money_left\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the width and length of the rectangle\n    width, length = symbols('width length')\n    \n    # Given length is twice the width\n    equation1 = Eq(length, 2 * width)\n    \n    # Perimeter of the rectangle is 2 times (length + width)\n    equation2 = Eq(2 * (length + width), 72)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (width, length))\n    \n    # solutions[length] gives the length of the rectangle\n    return solutions[length]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    num = 81\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    coefficient_of_static_friction = 0.4  # coefficient of static friction\n    applied_force = 250  # force applied parallel to the floor in N\n\n    # Calculating the maximum static frictional force before the crate starts moving\n    gravitational_force = 9.8 * mass  # Force due to gravity (weight of the crate)\n    max_static_frictional_force = coefficient_of_static_friction * gravitational_force\n\n    # The magnitude of the force of static friction will be the minimum of the applied force and maximum static frictional force\n    force_of_static_friction = min(applied_force, max_static_frictional_force)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    # Calculate the mass of salt in each solution.\n    salt_nick = 300 * 0.12\n    salt_nicole = 500 * 0.28\n\n    # Calculate the total mass of the mixed solution.\n    total_mass = 300 + 500\n\n    # Calculate the total mass of salt in the mixed solution.\n    total_salt = salt_nick + salt_nicole\n\n    # Calculate the concentration of the salt in the mixed solution.\n    concentration = (total_salt / total_mass) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    term_3 = 23\n    term_15 = 155\n    n_diff = 15 - 3\n\n    common_difference = (term_15 - term_3) / n_diff\n\n    return common_difference\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    equation1 = Eq(B, A - 50)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n    \n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    i = 1\n    while True:\n        cube = i ** 3\n        square = cube + 1\n        if (int(square ** 0.5) ** 2 == square):\n            return square\n        i += 1\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    q = symbols('q')\n    # The cube root of 44000 should be a whole number for 44000/q to be a cube number\n    # Therefore q must be a factor of 44000 that makes 44000/q a cube number\n    # We need to find such q\n\n    # Factoring 44000 to its prime factors: 44000 = 2^5 * 5^3 * 11\n    # A number is a cube if its prime factors have exponents that are multiples of 3.\n    # To make 44000/q a cube, q must be of the form 2^a * 5^b * 11^c where a<=5, b<=3, c<=1 and (5-a, 3-b, 1-c) are all multiples of 3.\n\n    conditions = []\n    # Ensuring that after division, we are left with exponents of multiples of 3 for each prime factor\n    for a in range(6):  # a can be 0 to 5 as exponent of 2 should be 0<=a<=5\n        for b in range(4):  # b can be 0 to 3 as exponent of 5 should be 0<=b<=3\n            for c in range(2):  # c can be 0 to 1 as exponent of 11 should be 0<=c<=1\n                if (5 - a) % 3 == 0 and (3 - b) % 3 == 0 and (1 - c) % 3 == 0:\n                    conditions.append((a, b, c))\n\n    # Now we will calculate q for each valid combination of a, b, and c\n    possible_q_values = [2**a * 5**b * 11**c for a, b, c in conditions]\n\n    # Return the list of all possible values of q\n    return min(possible_q_values)  # We return the minimum possible value of q that satisfies the condition\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    # Let x be the number of buttons James has originally\n    # Let y be the number of buttons Nina has originally\n    # According to the question, we have two equations:\n    # x + y = 24 (total number of buttons)\n    # y - 6 = x + 6 (Nina gave 6 buttons to James and then they have the same number)\n\n    # Solve the above equations:\n    # y - 6 = x + 6 => y - x = 12 (Equation 2 subtract Equation 1)\n\n    # Substitute y from Equation 1 to Equation 2:\n    # (24 - x) - x = 12 => 24 - 2x = 12\n    # Solve for x: 2x = 24 - 12\n    x = (24 - 12) / 2\n\n    # Now solve for y:\n    y = 24 - x\n\n    return int(y)\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30 - 9/20 + 7/12 - 1/3) * 6 * (7/13) * 9.1)\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour_per_worker = (total_parts / total_workers) / total_hours\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    total_distance = 16\n    climb_distance = 5\n    slide_distance = 3\n    net_distance = climb_distance - slide_distance\n    day = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        day += 1\n        distance_climbed += climb_distance\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_distance\n\n    return day\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Assume a linear relationship: y = mx + c\n    # where m is the slope (the rate of tax per bag) and c is the y-intercept (base tax)\n    \n    # Given the two points relating bags used and tax charged:\n    # Point 1 (10 bags, $0.50 tax)\n    # Point 2 (50 bags, $2.50 tax)\n\n    # Calculate slope (m)\n    m = (2.50 - 0.50) / (50 - 10)  # (y2 - y1) / (x2 - x1)\n    \n    # Calculate y-intercept (c), using the equation of a line: y = mx + c\n    # Taking Point 1 for example: 0.50 = m * 10 + c\n    c = 0.50 - m * 10  # y1 - m * x1\n\n    # The equation of a line in the slope-intercept form is y = mx + c\n    # Substitute m and c into the equation\n    equation = f\"y = {m}x + {c}\"\n    \n    return equation\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    first_number = 8 / 100\n    second_number = 0.7\n\n    if first_number > second_number:\n        ans = first_number\n    else:\n        ans = second_number\n\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return result\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_payment = 275\n    flat_fee = 30\n    daily_fee_short = 25\n    daily_fee_long = 20\n\n    max_short_term_days = 5\n    cost_for_max_short_term = flat_fee + (daily_fee_short * max_short_term_days)\n\n    if total_payment <= cost_for_max_short_term:\n        days_rented = (total_payment - flat_fee) // daily_fee_short\n    else:\n        additional_days = (total_payment - cost_for_max_short_term) // daily_fee_long\n        days_rented = max_short_term_days + additional_days\n\n    return days_rented\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit_weight_ratio = 8\n    rabbit_to_chicken_weight_ratio = 2\n    dog_to_chicken_weight_ratio = dog_to_rabbit_weight_ratio * rabbit_to_chicken_weight_ratio\n    return dog_to_chicken_weight_ratio\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for n in range(2, 51):\n        product *= (1/n - 1/(51-n))\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.1\n    total_distance = initial_height\n    \n    while initial_height > 0:\n        initial_height *= rebound_ratio\n        total_distance += 2 * initial_height\n\n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # Each sheet will have 4 consecutive page numbers, when folded in half to form a booklet.\n    # Let the smallest page number on the sheet be x.\n    # Therefore, the numbers on this sheet will be x, x+1, x+2, x+3.\n    # The sum of these numbers is given by: x + (x+1) + (x+2) + (x+3) = 4x + 6 = 58.\n    \n    # From the equation above, we can find out x:\n    # 4x = 58 - 6 => x = (58 - 6) / 4 => x = 13 (the smallest page number on the specific sheet).\n    \n    x = (58 - 6) // 4\n    \n    # Since we are looking for the sheet count, we know that the page numbers start at 1, so the sheets before\n    # our x page will be (x-1)//2 (since each sheet contains two page numbers when not folded).\n    \n    # The total number of sheets will be the number of sheets before the sheet with the smallest number x,\n    # plus the one sheet we have considered.\n    \n    sheet_count = (x - 1) // 2 + 1\n    \n    return sheet_count\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    # Initially, the number of green and yellow cars are the same\n    equation1 = Eq(green, yellow)\n\n    # After giving away cars, there are thrice as many yellow cars as green cars\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    # The number of green toy cars Sam had in the end\n    green_cars_end = solutions[green] - 60\n\n    return green_cars_end\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    buck_speed = 600          # Buck's speed in meters per minute\n    elephant_speed = 250      # Elephant's speed in meters per minute\n    race_distance = 3000      # Distance of the race in meters\n\n    # Time taken by Buck to finish the race\n    buck_time = race_distance / buck_speed\n\n    # Time taken by Elephant to finish the race\n    elephant_time = race_distance / elephant_speed\n\n    # The difference in time\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_sequence = num_terms * (first_term + last_term) // 2\n    \n    return sum_sequence * 2 - last_term\n\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apples_percentage = 15\n\n    bad_apples = (bad_apples_percentage / 100) * total_apples\n\n    return int(bad_apples)\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    # Convert the time when they left to minutes past 6:00 pm.\n    # 6:10 pm is 10 minutes past 6:00 pm.\n    start_time_minutes = 10\n    \n    # Relative speed at which Simon is catching up with his wife\n    relative_speed_kmh = 80 - 60  # km/h\n    \n    # Time needed for Simon to cover the 15 km difference\n    # Time (in hours) = Distance / Speed\n    time_to_overtake_hours = 15 / relative_speed_kmh\n    \n    # Convert time to overtake from hours to minutes\n    time_to_overtake_minutes = time_to_overtake_hours * 60\n    \n    # Total time past 6:00 pm when Simon overtakes his wife\n    total_time_minutes = start_time_minutes + time_to_overtake_minutes\n    \n    # Convert total time past 6:00 pm to hours and minutes\n    hours_past_6 = int(total_time_minutes // 60)\n    minutes_past_hour = int(total_time_minutes % 60)\n    \n    # Calculate the actual clock time when Simon overtakes his wife\n    overtaking_hour = 6 + hours_past_6\n    overtaking_minute = minutes_past_hour\n\n    return f\"{overtaking_hour:02d}:{overtaking_minute:02d}\"\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # The cost of 12 pencils\n    cost_of_12_pencils = 1.80\n    # The cost of 1 pencil\n    cost_of_1_pencil = cost_of_12_pencils / 12\n    # The ratio of the cost of a pen to the cost of a pencil is 7 : 3\n    # Therefore, the cost of 1 pen is 7/3 times the cost of 1 pencil\n    cost_of_1_pen = (7 / 3) * cost_of_1_pencil\n    # Work out the cost of 5 pens\n    cost_of_5_pens = 5 * cost_of_1_pen\n    return cost_of_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2 # coffee, milk\n    food_items = 3 # hamburgers, burritos, bagels\n    combinations = drinks * food_items\n    return combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    unlocked_lockers = 0\n    for locker_number in range(1, 101):\n        is_locked = False\n        if locker_number % 3 == 0:\n            is_locked = True\n        if locker_number % 5 == 0:\n            is_locked = not is_locked\n        if not is_locked:\n            unlocked_lockers += 1\n    return unlocked_lockers\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    def count_ways_to_step(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return count_ways_to_step(n - 1) + count_ways_to_step(n - 2)\n\n    # Ways to reach the 5th step\n    ways_to_5 = count_ways_to_step(5)\n\n    # Ways to reach the 10th step from the 5th step\n    ways_to_10_from_5 = count_ways_to_step(10 - 5)\n\n    # Total ways to reach the 10th step passing through the 5th step\n    total_ways = ways_to_5 * ways_to_10_from_5\n\n    return total_ways\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    time_taken_for_2_pancakes = 3  # minutes\n    pancake_rate = 2 / time_taken_for_2_pancakes  # pancakes per minute\n    total_time = 12  # minutes\n\n    pancakes_cooked = pancake_rate * total_time\n\n    return int(pancakes_cooked)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "from itertools import combinations\n\ndef solution():\n    # The time taken by each person to cross the river\n    times = [5, 5, 9, 7]\n    \n    # sort the list to always have the fastest people on the left side\n    times.sort()\n    total_time = 0\n\n    # While we have more than 2 people on the starting side\n    while len(times) > 3:\n        # Two fastest cross, fastest comes back, two slowest cross, second fastest comes back\n        first, second, third, fourth = times\n        total_time += min(first + (2 * second) + fourth, (2 * first) + third + fourth)\n        times = times[:-2]\n    \n    # Add the time for the last two people to cross\n    total_time += sum(times[:2]) - times[0]\n    \n    return total_time\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_metres = 500\n    total_days = 5\n\n    metres_per_day = total_metres / total_days\n\n    return metres_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    # To ensure at least 9 people come from the same country, we use the Pigeonhole Principle\n    # The formula for the Pigeonhole Principle is (n-1)*k + 1 where n is the number of pigeonholes\n    # and k is the number we need to ensure in one of the pigeon holes\n    # Here, the pigeonholes are the countries, so n = 18, and k = 9 to ensure at least 9 people\n    # Thus (18-1)*9 + 1\n    ans = (countries - 1) * 9 + 1\n    return ans\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # The sum of an arithmetic sequence is: sum = n/2 * (first + last)\n    # Given sum = 2014 and n = 53, we can rearrange the formula to find the last term:\n    # 2014 = 53/2 * (first + last)\n    # Multiply both sides by 2/53 to isolate (first + last):\n    first_plus_last = (2014 * 2) / 53\n    # Since the numbers are consecutive, their average is the middle number\n    # So, (first + last)/2 = median\n    median = first_plus_last / 2\n    # For an odd sequence count, the largest number is median + (n - 1)/2\n    largest_number = median + (53 - 1) / 2\n    return int(largest_number)\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(88/A, 22)\n    A_value = solve(equation, A)\n    \n    correct_answer = 98 / A_value[0]\n    return A_value[0], correct_answer\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    cost_for_twelve_calculators = cost_per_calculator * 12\n    return cost_for_twelve_calculators\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Lucas' speed: 5 laps / 6 minutes\n    # Miller's speed: 5 laps / 10 minutes\n    # Relative speed: speed of Lucas - speed of Miller\n    # Relative speed = (5/6 - 5/10) laps per minute\n    # Calculate the relative speed.\n    relative_speed = (5 / 6) - (5 / 10)\n    \n    # Time taken for Lucas to overtake Miller the first time is 0 minutes since they start together.\n    # Find the time for Lucas to complete another lap more than Miller.\n    # Time = Distance / Relative Speed\n    time_to_overtake = 1 / relative_speed\n\n    return time_to_overtake\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_amount = 1670\n    greatest_possible_amount = rounded_amount + 4\n    return greatest_possible_amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    ans = 345 * 6\n    return ans\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    return 5217 % 13\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    total_hours = 2 + 1/2\n    total_minutes = total_hours * 60\n    return total_minutes\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v be the total number of visitors\n    v = symbols('v')\n    # Equation based on the given information\n    equation = Eq((3/5) * v - (1/4) * (1 - 3/5) * v, 120)\n\n    # Solve for the total number of visitors\n    visitors = solve(equation, v)\n\n    # Return the number of visitors\n    return visitors[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_rate = 80\n    additional_rate = 5\n    total_cost = 140  # 1.4 dollars in cents\n    additional_cost = total_cost - base_rate\n    additional_minutes = additional_cost / additional_rate\n    total_minutes = 15 + additional_minutes\n    return total_minutes\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age_now = 8\n\n    # Assume mother's age now is x\n    # When Tim is as old as his mother is now (x years), his mother will be 54 years old\n    # So, x - tim_age_now (years passed) + tim_age_now = 54\n    # Simplifying, x + tim_age_now = 54\n    # x = 54 - tim_age_now\n\n    mother_age_now = 54 - tim_age_now\n\n    return mother_age_now\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # length of the orange string in meters\n    conversion_factor = 100  # 1 meter = 100 centimeters\n\n    # calculate the length of the purple string in meters\n    purple_length_m = orange_length_m / 9.2\n    \n    # convert the additional length of the green string to meters\n    additional_length_m = 24.9 / conversion_factor\n    \n    # calculate the length of the green string in meters\n    green_length_m = purple_length_m + additional_length_m\n    \n    return green_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    for A in range(10):\n        if (A+1 + A*11 + A*2 + A*11) % 10 == A:\n            return A\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    total_work = 1  # total work is considered as a whole job\n\n    # Ivy's work rate per day\n    ivy_rate = 1 / 24\n    # Kevin's work rate per day\n    kevin_rate = 1 / 20\n\n    # The amount of work done together without taking any days off\n    work_done_in_18_days = (ivy_rate + kevin_rate) * 18\n\n    # But they just finish the job, which means the total work is 1\n    # We need to find the amount of work Kevin missed\n    kevin_worked_days = (total_work - ivy_rate * 18) / kevin_rate\n\n    # Kevin takes off the remaining days\n    kevin_days_off = 18 - kevin_worked_days\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    x, y = symbols('x y')\n\n    # Equation for the total length of the rope\n    eq1 = Eq(x + y, 49.5)\n    # Equation representing the relationship between the lengths of two pieces\n    eq2 = Eq(x, 5 * y)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n    \n    # Get the length of the longer piece and round it to 1 decimal place\n    longer_piece = round(solutions[x], 1)\n\n    return longer_piece\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum = 60  # amount given by mum in pence\n    money_from_dad = 40  # amount given by dad in pence\n\n    # George gets the same amount on Tuesday and Wednesday\n    # therefore, multiply the daily amount by 3 to get the total for 3 days\n    total_money = (money_from_mum + money_from_dad) * 3\n\n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance = 25\n    climb_per_day = 4\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    current_distance = 0\n    day_count = 0\n    \n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += climb_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n        \n    return day_count\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Nancy's rate of working per day\n    nancy_rate = 1 / 6\n    \n    # Combined rate of Nancy and Tim per day\n    combined_rate = 1 / 4\n    \n    # Tim's rate of working per day\n    tim_rate = combined_rate - nancy_rate\n    \n    # Time taken for Tim to complete the book alone\n    tim_time = 1 / tim_rate\n    \n    return tim_time\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_days = 15\n    money = 100\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:  # Deposits £5 on odd days\n            money += 5\n        else:  # Spends £8 on even days\n            money -= 8\n    return money\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    num_str = \"3\" * 12\n    num = int(num_str)\n    remainder = num % 7\n    \n    return remainder\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    height_to_climb = 31\n    jump_up = 3\n    slide_down = 2\n    jumps_in_cycle = 3\n\n    total_climbed_per_cycle = (jump_up * jumps_in_cycle) - slide_down\n    total_jumps = (height_to_climb // total_climbed_per_cycle) * jumps_in_cycle\n\n    remaining_height = height_to_climb % total_climbed_per_cycle\n    while remaining_height > 0:\n        total_jumps += 1\n        remaining_height -= jump_up\n        if remaining_height <= 0:\n            break\n        remaining_height += slide_down\n\n    return total_jumps\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    # Initializing the terms\n    terms = [1 / (1 * 2), 2 / (2 * 4), 3 / (4 * 7), 4 / (7 * 11), 5 / (11 * 16), 6 / (16 * 22), 1 / 22]\n    \n    # Calculating the sum of terms\n    ans = sum(terms)\n\n    return ans\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let x be the total number of pupils normally at school\n    # 20% of x are in Year 7, which is 0.20 * x\n    # Some Year 7 girls miss school, let's call this number y\n    # Now the total number of pupils at school is x - y = 400\n    # The proportion of Year 7 pupils is now 10%, so 0.10 * (x - y) = 0.20 * x\n    # From the equation above we can solve for x:\n    # 0.10 * x - 0.10 * y = 0.20 * x => 0.10 * y = 0.10 * x => y = x\n    # We substitute back into x - y = 400\n    # x - x = 400 which doesn't make sense since y cannot be equal to x\n    # We need to rethink our equation: 0.10 * (x - y) = 0.20 * x - y\n    # We know that 0.10 * (400) = 0.20 * x - y, and we solve for x\n    \n    total_pupils_left = 400\n    new_proportion_year7 = 0.10\n    old_proportion_year7 = 0.20\n    \n    year7_pupils_left = new_proportion_year7 * total_pupils_left\n    # We need to solve for x in the equation below\n    # year7_pupils_left = old_proportion_year7 * x - y\n    # But we also know that year7_pupils_left = total_pupils_left * new_proportion_year7\n    # Then we can write the equation:\n    # total_pupils_left * new_proportion_year7 = old_proportion_year7 * x - (old_proportion_year7 * x - total_pupils_left)\n    # Simplifying the equation:\n    # total_pupils_left * new_proportion_year7 = old_proportion_year7 * x - old_proportion_year7 * x + total_pupils_left\n    \n    x = total_pupils_left / (old_proportion_year7 - new_proportion_year7)\n    \n    return int(x)\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    remaining_after_dress = 40 / (2/5)\n    initial_money = remaining_after_dress / (2/3)\n    return initial_money\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "from math import factorial\n\ndef count_trailing_zeros(n):\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n    return count\n\ndef solution():\n    num_zeros = count_trailing_zeros(factorial(999)) - count_trailing_zeros(factorial(300))\n    return num_zeros\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    def new_operation(a, b):\n        return 4 * a + 0.6 * b\n\n    ans = new_operation(10, 9)\n\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # The total number of students forming a square\n    students_in_outer_layer = 60\n    \n    # Each side of the square will have (outer_layer_students / 4) students\n    # because the square has 4 sides and the corners are counted only once\n    side_length = students_in_outer_layer / 4\n    \n    # The total number of students is the square of the side length (since it's a square)\n    total_students = (side_length + 1) ** 2\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    for lorries in range(1, 100):\n        bikes = lorries + lorries // 4\n        cars = bikes + bikes // 3\n        total = cars + bikes + lorries\n        if total % 2 == 0 and total < 100:\n            return cars, bikes, lorries\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    # Initially there were 64 more buttons in box A than in box B\n    initial_condition_eq = Eq(A, B + 64)\n    \n    # Ken added x buttons to box A and removed 2x buttons from B\n    x = symbols('x')\n    new_A = A + x\n    new_B = B - 2*x\n    \n    # The number of buttons in box B became 28 fewer than before\n    box_B_condition_eq = Eq(new_B, B - 28)\n    \n    # The total ratio of buttons in both boxes to the number still in box B is 4:1\n    ratio_condition_eq = Eq(new_A + new_B, 4 * new_B)\n    \n    # Solve the system of equations\n    solutions = solve((initial_condition_eq, box_B_condition_eq, ratio_condition_eq), (A, B, x))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 1\n    red_tiles = 0\n    green_tiles = 0\n    \n    while total_tiles > 0:\n        tiles_in_layer = (layer * 2 - 1)**2\n        total_tiles -= tiles_in_layer\n        if layer % 2 == 1:\n            red_tiles += tiles_in_layer\n        else:\n            green_tiles += tiles_in_layer\n        layer += 1\n    \n    # Since we are counting outward to inward, and the difference will be negative\n    # if there were more green tiles, we multiply by -1 to ensure the result is correct.\n    diff = (red_tiles - green_tiles) * (-1 if red_tiles < green_tiles else 1)\n    more_color = 'red' if red_tiles > green_tiles else 'green'\n    \n    return more_color, diff\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    return (18 * 20132013) - (2013 * 180018)\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards_won = 24\n    total_rounds = 12\n    cards_per_win = 4\n    cards_per_loss = -2\n\n    # Let x be the number of wins, then (total_rounds-x) is the number of losses\n    # Total cards is calculated by: cards_per_win*x + cards_per_loss*(total_rounds - x)\n    # cards_per_win*x - cards_per_loss*x = total_cards_won + cards_per_loss*total_rounds\n    # x(cards_per_win - cards_per_loss) = total_cards_won + cards_per_loss*total_rounds\n    # Solving for x gives us the number of wins\n    x = (total_cards_won + cards_per_loss * total_rounds) / (cards_per_win - cards_per_loss)\n\n    # Number of rounds lost is then total rounds minus number of wins\n    rounds_lost = total_rounds - x\n\n    return int(rounds_lost)\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    boulevard_length = 300\n    interval = 10\n\n    # One at each end plus the ones at every interval\n    number_of_bins = 2 + (boulevard_length - 2 * interval) // interval\n\n    return number_of_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    n = 1\n    while True:\n        number_str = \"26\" + \"2011\" * n + \"7\"\n        number = int(number_str)\n        if number % 33 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    num_cakes = 112\n    total_flour = flour_per_cake * num_cakes\n    return total_flour\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z, rounds = 20, 19, 18, 0\n    while min(x, y, z) > 0:\n        if x >= y and x >= z:\n            x -= 3\n            y += 1\n            z += 1\n        elif y >= x and y >= z:\n            y -= 3\n            x += 1\n            z += 1\n        else:\n            z -= 3\n            x += 1\n            y += 1\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    ways = 0\n    # Loop over the number of lollipops in the first plate\n    for i in range(8):\n        # Loop over the number of lollipops in the second plate\n        for j in range(8 - i):\n            # The third plate's lollipops will be what's left over\n            k = 7 - i - j\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # If it takes 3 minutes to cut a log into 4 pieces\n    # then it takes 3 minutes to make 3 cuts.\n    time_for_one_cut = 3 / 3  # minutes for one cut\n    \n    # To cut a log into 8 pieces, 7 cuts are needed.\n    total_cuts_needed = 8 - 1\n    \n    # Total time will be time for one cut multiplied by number of cuts needed\n    total_time = time_for_one_cut * total_cuts_needed\n    \n    return total_time\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Rasidah had $48 less than Chai Seng.\n    eq1 = Eq(rasidah, chai_seng - 48)\n    # Rasidah spent 3/5 of her money => she has 2/5 left.\n    # Chai Seng spent 6/7 of his money => he has 1/7 left.\n    # Chai Seng had 1/2 as much money left as Rasidah.\n    eq2 = Eq((chai_seng * 1/7), (rasidah * 2/5) / 2)\n    \n    solutions = solve((eq1, eq2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    total_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    current_collection = total_cards - duplicates + new_cards\n\n    return current_collection\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as one entity since they must sit together, \n    # there are 7 \"entities\" to arrange around the table now.\n    entities = 7\n    arrangement_of_entities = factorial(entities - 1) # (entities - 1)! for circular arrangement\n\n    # Amy and Judy can switch places between themselves in 2 different ways.\n    ways_for_amy_judy = 2\n\n    # The total number of ways they can sit is the product of the above considerations.\n    total_ways = arrangement_of_entities * ways_for_amy_judy\n\n    return total_ways\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original number of cookies Andy had as 'a' and Ben had as 'b'\n    a, b = symbols('a b')\n\n    # Andy had 84 fewer cookies than Ben at first\n    eq1 = Eq(a, b - 84)\n\n    # Andy bought 1/3 more cookies, Ben bought 1/5 more cookies\n    # New amounts of cookies after buying more\n    # For Andy: a + a/3 = 4a/3\n    # For Ben: b + b/5 = 6b/5\n\n    # Andy had 1/3 as many cookies as Ben in the end\n    eq2 = Eq(4*a/3, 1/3 * (6*b/5))\n\n    # Let's solve the equations eq1 and eq2 to find the values of 'a' and 'b'\n    solutions = solve((eq1, eq2), (a, b))\n\n    # Calculate the number of cookies Andy had in the end after buying 1/3 more\n    andy_end = solutions[a] + solutions[a]/3\n\n    return andy_end\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    ans = sum(1/i for i in range(1, 8))\n    return int(ans)\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Since there are no numbers given to find the sum,\n    # and we do not know the number Mr. Tan wrote on the slip,\n    # the problem is not solvable with the provided information.\n    # As per the instructions, there's no solution that can be provided.\n    return -1\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    years_guess = 5\n\n    # Calculate the amount of money after 5 years with simple interest formula A = P(1 + rt)\n    amount_after_guess = principal * (1 + interest_rate * years_guess)\n\n    # Check if the guessed amount is equal to the final amount\n    if amount_after_guess == final_amount:\n        return years_guess\n    else:\n        # Calculate the actual number of years with compound interest formula A = P(1 + r)^t\n        # Here we assume the interest is compounded annually\n        actual_years = (final_amount / principal) ** (1 / interest_rate) - 1\n        return round(actual_years)\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n\n    pencils = 56\n    pens = 60\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    numbers = [0.7, 0.04, 1.006]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    current = 18\n    sign = -1\n    difference = 1\n\n    while True:\n        next_num = current + sign * (1 + difference)\n        difference += 1  # Increase the difference to be added/subtracted\n        sign *= -1  # Flip the sign for the next operation\n        current = next_num\n\n        if current > 20:\n            break\n\n    return current\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_fraction_numerator = 6\n    original_fraction_denominator = 20\n    new_numerator = 12\n\n    scaling_factor = new_numerator / original_fraction_numerator\n\n    new_denominator = original_fraction_denominator * scaling_factor\n\n    return int(new_denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Known values\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n    at_least_one_pass = 43\n\n    # Total number of pupils who could have passed all three tests\n    # is the sum of pupils passing each test\n    # minus the number of pupils passing at least one test,\n    # as this gives us the minimum number of pupils who passed more than one test.\n    max_all_pass = (math_pass + science_pass + english_pass) - at_least_one_pass\n\n    # However, this number cannot exceed the number of students passing any individual test.\n    max_possible_all_pass = min(max_all_pass, math_pass, science_pass, english_pass)\n\n    return max_possible_all_pass\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance between school and home\n    d = symbols('d')\n    \n    # Time taken by Ahmad to reach school\n    ahmad_time_school = d / 80\n    \n    # Time taken by Ahmad to meet his brother\n    ahmad_time_meet = ahmad_time_school + (210 / 80)\n\n    # Time take by the brother to meet Ahmad\n    brother_time_meet = d / 50\n\n    # Equation representing the time taken by both to meet\n    equation = Eq(ahmad_time_meet, brother_time_meet)\n\n    # Solving the equation to find the distance\n    distance = solve(equation, d)[0]\n\n    return distance\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 6):  # Case 1 can have at most 5 pens since we need at least 1 pen in the other cases\n        for x2 in range(1, 6):  # Same reasoning for Case 2\n            x3 = 6 - x1 - x2  # The rest of the pens go into Case 3\n            if x3 > 0:  # Ensure Case 3 is not empty\n                count += 1\n    return count\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    return (1/30 + 1/6) / (2/25) + (2 - 2/3) / (8/3)\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    num = 8844\n    place_value_1 = 8 * 1000  # The place value of the first '8'\n    place_value_2 = 8 * 10    # The place value of the second '8'\n    difference = place_value_1 - place_value_2\n    return difference\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # Smallest five-digit palindromic number divisible by 45\n    # We start from the smallest 5-digit number (10000) and find the next multiple of 45\n    # which is also a palindromic number\n    smallest = 10000\n    while True:\n        smallest += 45 - (smallest % 45)\n        if str(smallest) == str(smallest)[::-1]: # Check if the number is palindromic\n            break\n    \n    # Largest five-digit palindromic number divisible by 45\n    # We start from the largest 5-digit number (99999) and find the previous multiple of 45\n    # which is also a palindromic number\n    largest = 99999\n    largest -= largest % 45\n    while True:\n        if str(largest) == str(largest)[::-1]: # Check if the number is palindromic\n            break\n        largest -= 45\n    \n    return largest - smallest\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Let the four numbers be a, b, c and d arranged in descending order (a > b > c > d).\n    # The average of the other three numbers when d is included is (a + b + c) / 3.\n    # Hence, the equation with the smallest number is: d + (a + b + c)/3 = 39.\n    # The average of the other three numbers when a is included is (b + c + d) / 3.\n    # Hence, the equation with the largest number is: a + (b + c + d)/3 = 51.\n    # We can equate the sums of the smallest and largest numbers:\n    # (a + b + c + d) / 3 + d = (a + b + c + d) / 3 + a.\n    # Simplifying, we replace the averages with respective sums: 3d + a + b + c = 3a + b + c + d.\n    # Rearranging: 2d = 2a => d = a. Meaning the largest and smallest numbers are equal, which contradicts the distinct condition.\n    # To solve for a and d, we'll first express b + c in terms of a and d and then find the maximum value for a.\n\n    # From d + (a + b + c)/3 = 39, we have: 3d + a + b + c = 117.\n    # From a + (b + c + d)/3 = 51, we have: 3a + b + c + d = 153.\n    # Subtracting the first equation from the second equation gives: 3a - 3d = 153 - 117 => a - d = 12\n    # Replacing b + c using a, d: 4a - d = 165 => d = 4a - 165\n    # The relationship between a and d is d = a - 12 .\n    # Use the distinct condition to find the maximum a.\n\n    a = 40  # Let's assume the maximum possible value for a initially to be in line with the given condition.\n    while True:\n        d = a - 12\n        # Verify that we can choose distinct b and c that satisfy the remaining conditions.\n        # If b and c are equal (and integer), then (b + c) / 2 should be an integer.\n        b_plus_c = 117 - 3*d - a # Since (b + c) should be the sum given by rearranging the first equation\n        # The sum of b and c has to be positive and allow for two distinct integers\n        if b_plus_c > a and b_plus_c > 2 * d and (b_plus_c - a) % 2 == 0 and (b_plus_c - 2*d) % 2 == 0:\n            break\n        a -= 1  # Decrease a until the condition is met.\n\n    return a\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    for A in range(10):\n        number = int(f\"572{A}\")\n        if number % 4 == 0 and number % 5 == 0:\n            return A\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: Find the remainders for each divisor\n    cong1 = (1, 5)  # Remainder 1 when divided by 5\n    cong2 = (2, 6)  # Remainder 2 when divided by 6\n    cong3 = (7, 11) # Remainder 7 when divided by 11\n\n    # Step 2: Use Chinese Remainder Theorem to find solution to congruences\n    common_supplement, lcm_of_divisors = solve_congruence(cong1, cong2, cong3)\n\n    # Step 3: Since we are looking for a number less than 500, reduce modulo lcm.\n    ans = common_supplement % lcm_of_divisors\n\n    return ans\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    num = 40309\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            break\n    return num - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "from math import gcd\n\ndef solution():\n    length1 = 16\n    length2 = 24\n    longest_piece = gcd(length1, length2)\n    return longest_piece\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position_from_front = 7\n    sheep_behind = 4\n\n    total_sheep = luna_position_from_front + sheep_behind\n\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n    hours_needed = desired_earnings / hourly_rate\n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mean score of all 10 students\n    x = symbols('x')\n\n    # The total score of the top 3 students is 3 * 92\n    top_3_total = 3 * 92\n    # The mean score of the last 7 students is x - 6\n    # The total score of the last 7 students is 7 * (x - 6)\n    last_7_total = 7 * (x - 6)\n    # The total score of all 10 students is 10 * the mean score (x)\n    total_score = 10 * x\n\n    # Setting up the equation\n    # The sum of the top 3 and last 7 students' total scores should be equal to the total score of all 10 students\n    equation = Eq(top_3_total + last_7_total, total_score)\n\n    # Solving for x\n    mean_score = solve(equation, x)\n\n    return mean_score[0]\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8*4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "def solution():\n    from itertools import permutations\n    \n    lucky_years = set()\n    \n    for year in range(1000, 2023):\n        year_str = str(year)\n        if len(set(year_str)) == 4:  # Ensure all digits are unique\n            for perm in permutations(year_str):\n                consecutive = sorted(perm)\n                if all(abs(int(consecutive[i]) - int(consecutive[i+1])) == 1 for i in range(len(consecutive)-1)):\n                    lucky_years.add(year)\n                    break\n    \n    return len(lucky_years)\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        x_bags = bags.copy()\n        x_bags.remove(red_marbles)\n        for jaslin_bags in combinations(x_bags, 3):\n            george_bags = set(x_bags) - set(jaslin_bags)\n            if sum(jaslin_bags) == 2 * sum(george_bags):\n                return red_marbles\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let beth's sweets be x, andre's sweets be x + 6\n    beth = Symbol('beth')\n\n    # The total sweets they had initially is 24\n    # after receiving 4 sweets each, the equation is (beth + 4) + ((beth + 6) + 4) = 24 + 4 + 4\n    equation = Eq((beth + 4) + (beth + 6 + 4), 24 + 8)\n\n    # Solve for beth's sweets\n    beth_sweets = solve(equation, beth)[0]\n\n    # Return the number of sweets Beth has now (after adding the 4 sweets given by the teacher)\n    return beth_sweets + 4\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    for num in range(1, 21):\n        if 2 * num + 2 * (num + 1) + 2 * (num + 2) + 2 * (num + 3) + 2 * (num + 4) == 100:\n            return 2 * num\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    speed = 550 / 5  # speed = distance / time\n    distance_in_3_hours = speed * 3  # distance = speed * time\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_apples = 150\n    fraction_sold = 2/5\n    total_apples = remaining_apples / (1 - fraction_sold)\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "def solution():\n    from math import lcm\n    \n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    jump_length = 3\n    total_jumps = 14\n\n    total_distance = jump_length * total_jumps\n\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # excluding chocolates\n    num_friends = 6\n    fruits_per_friend = total_fruits / num_friends\n    return int(fruits_per_friend)\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    # Fill rate of inlets A and B\n    rate_A = 1 / 36\n    rate_B = 1 / 48\n\n    # Sequence of minutes for inlets A and B\n    sequence = [1, 2, 2, 1]\n    \n    # Initialize total fill and time\n    total_fill = 0\n    time = 0\n    index = 0\n\n    # Simulate the filling process\n    while total_fill < 1:\n        if index % 2 == 0:  # Inlet A's turn\n            total_fill += rate_A * sequence[index % 4]\n        else:  # Inlet B's turn\n            total_fill += rate_B * sequence[index % 4]\n        time += sequence[index % 4]\n        index += 1\n    \n    # Return nearest whole number for time\n    ans = round(time)\n    return ans\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan_time = symbols('alan_time')\n    alan_rate = 1 / alan_time\n    bob_rate = 1 / 6\n\n    combined_rate = alan_rate + bob_rate\n\n    equation = Eq(combined_rate, 1 / 4)\n\n    alan_time_value = solve(equation, alan_time)\n\n    return alan_time_value[0]\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n    prob_no_rain_saturday = 1 - prob_rain_saturday\n    prob_no_rain_sunday = 1 - prob_rain_sunday\n\n    prob_no_rain_both_days = prob_no_rain_saturday * prob_no_rain_sunday\n    prob_rain_at_least_one_day = 1 - prob_no_rain_both_days\n\n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    blocks = ['R', 'R', 'B', 'B', 'Y', 'Y', 'G', 'G', 'O', 'O', 'P', 'P']\n    total_count = 0\n    even_count = 0\n\n    # Generate all possible unique arrangements\n    for arrangement in set(permutations(blocks)):\n        is_even = True\n        # Check each color for the even condition\n        for color in ['R', 'B', 'Y', 'G', 'O', 'P']:\n            idx = [i for i, x in enumerate(arrangement) if x == color]\n            if (idx[1] - idx[0]) % 2 == 1:\n                is_even = False\n                break\n        if is_even:\n            even_count += 1\n        total_count += 1\n\n    # Calculate probability\n    prob_m = even_count\n    prob_n = total_count\n    # Simplify to lowest terms and compute m + n\n    divisor = gcd(prob_m, prob_n)\n    m = prob_m // divisor\n    n = prob_n // divisor\n\n    return m + n\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7*3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    for incorrect in range(11):\n        correct = 10 - incorrect\n        score = correct * 10 - incorrect * 3\n        if score == 48:\n            return incorrect\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    # Lucas initially bought 10 bottles of mineral water.\n    total_bottles = 10\n    # The shop owner lends Lucas an empty can.\n    empty_bottles = 1\n\n    while empty_bottles >= 2:\n        # Exchange empty bottles for new bottles of mineral water.\n        new_bottles = empty_bottles // 2\n        # Drink the new bottles, and they will also become empty.\n        total_bottles += new_bottles\n        # Update the number of empty bottles.\n        # The remainder is the number of empty bottles that can't be exchanged.\n        empty_bottles = empty_bottles % 2 + new_bottles\n\n    # Lucas can keep doing this until he has less than 2 empty bottles.\n    # Return the total number of bottles he can drink.\n    return total_bottles\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t = symbols('t')\n\n    # Rate of drainage for pool A and pool B\n    rate_a = 1 / 10\n    rate_b = 1 / 6\n\n    # Since the base and height are the same for both pools,\n    # we can set up the equation for the height of the waterline.\n    # Let x represent the initial height, then the remaining height\n    # of the waterline at time t for A is x - x * (rate_a * t),\n    # and for B is x - x * (rate_b * t).\n\n    # We need to find the time t when height of A's waterline is\n    # three times that of B's waterline.\n    equation = Eq((1 - rate_a * t), 3 * (1 - rate_b * t))\n\n    # Solving the equation for t\n    solution = solve(equation, t)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n    \n    # Counting from the front, Andrea's position would be (total_children - Andrea's position from end + 1)\n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n\n    # Children between Vanessa and Andrea are the ones who are after Vanessa and before Andrea \n    children_between = andrea_position_from_front - vanessa_position_from_front - 1\n    \n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    initial_sweets = 320\n    weekly_bought = 30\n    weeks = 7\n    final_sweets = 348\n\n    sweets_eaten_per_week = ((initial_sweets + weekly_bought * weeks) - final_sweets) / weeks\n\n    return int(sweets_eaten_per_week)\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"281{digit}\")\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    # The product of n whole numbers, also known as the factorial of n (n!),\n    # has a certain number of consecutive zeros at the end.\n    # The number of zeros at the end of n! is determined by the number of times\n    # the prime factors 2 and 5 can be paired up to make 10, since 10 is the product\n    # of 2 and 5. Since there are always more 2s than 5s, we only need to count\n    # the number of 5s in the prime factorization of n!.\n    #\n    # We continue increasing n until we have counted a total of 28 fives.\n    # To count the fives, we divide n by 5, n by 5^2, n by 5^3, etc., until\n    # the result is less than 1, and we sum all those results up to get the\n    # total count of fives.\n\n    count_zeros = 0\n    n = 0\n    \n    while count_zeros < 28:\n        n += 1\n        # Check the factors of 5 in n\n        temp = n\n        while temp % 5 == 0:\n            count_zeros += 1\n            temp //= 5\n    \n    return n\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path = 5/6\n    fenced_path = 2/3\n    unfenced_path = total_path - fenced_path\n    return unfenced_path\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    max_time = louise_time - 1\n    sally_time = 3 * louise_time\n\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "from sympy import factorial\n\ndef solution():\n    return factorial(10)\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Speed unit conversion: minutes to hours, so multiply by 60\n    late_time_hours = 12 / 60\n    early_time_hours = -8 / 60\n\n    # Let the distance be 'd' km. \n    # Time taken at 3 km/h = d / 3 hours\n    # Time taken at 7 km/h = d / 7 hours\n    # According to the question:\n    # (d / 3) - (d / 7) = late_time_hours - early_time_hours\n\n    # Calculate proportionate time difference\n    time_difference_hours = late_time_hours - early_time_hours\n\n    # Now solve the equation for d\n    d = (3 * 7 * time_difference_hours) / (7 - 3)  # (speed1 * speed2 * time_difference) / (speed2 - speed1)\n\n    return d\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    total_amount = 200\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import isprime\n\ndef solution():\n    for prime in range(2, 69):\n        if isprime(prime) and isprime(69 - prime):\n            return 69 - 2 * prime\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    # Let A be the number of students in school A originally\n    # Let B be the number of students in school B originally\n    # The total number of students before transfer is 1050\n    # After 20 students transfer from A to B, A has 10 more students than B\n    # Therefore, we have the following system of equations:\n    # A + B = 1050\n    # (A - 20) - (B + 20) = 10\n    # Simplifying the second equation we get A - B = 50\n    # Now we can solve these equations\n\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    eq1 = Eq(A + B, 1050)\n    eq2 = Eq(A - B, 50)\n\n    solutions = solve((eq1, eq2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Before giving 10 sweets, Chenxi has 5 more sweets than Yue Ying.\n    # Let's denote the number of sweets Chenxi has as c and Yue Ying as y.\n    # So, c = y + 5\n\n    # When Chenxi gives Yue Ying 10 sweets, Yue Ying's sweets become y + 10,\n    # and Chenxi's sweets become c - 10. We replace c with y + 5 and get:\n    # Chenxi's new amount of sweets is y + 5 - 10, which simplifies to y - 5.\n\n    # Now, the difference between the number of sweets they have\n    # is (y - 5) - (y + 10). Simplifying, we get:\n    ans = (y - 5) - (y + 10)\n\n    # Solve for the difference\n    ans = ans.subs(y, y)  # We substitute y with y itself, this is redundant but illustrates substitution if needed\n\n    return ans\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # Define the original unbracketed equation part\n    equation_parts = [15, '+', 5, '×', 5, '+', 15, '-', 6, '+', 7]\n\n    # Function to compute the equation with brackets inserted at specified positions\n    def compute_with_brackets(eq_parts, pos1, pos2):\n        # Create equation from parts with brackets\n        new_eq = \"\".join(str(eq_parts[i]) if i not in pos1 + pos2 else ('(' + str(eq_parts[i])) if i in pos1 else (str(eq_parts[i]) + ')') for i in range(len(eq_parts)))\n        # Compute the result of the new equation\n        return eval(new_eq)\n    \n    # Initialize the maximum result\n    max_result = float('-inf')\n\n    # Try every possible combination of bracket positions\n    for i in range(len(equation_parts)):\n        for j in range(i + 4, len(equation_parts), 2):  # increment by 2 to only include operators\n            for k in range(j + 4, len(equation_parts), 2):\n                # Calculate equation value with the current bracket positions\n                result = compute_with_brackets(equation_parts, [i], [j, k])\n                # Update max result if this configuration produces a bigger result\n                if result > max_result:\n                    max_result = result\n\n    return max_result\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    ans = 254 * 6\n    return ans\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_points = 70\n    points_correct = 10\n    points_incorrect = -5\n    total_questions = 10\n    \n    # Use algebra to find the number of correct answers\n    # Let x be the number of correct answers, then 10-x will be the number of incorrect answers.\n    # The equation will be: 10x - 5(10 - x) = 70\n    # Solving for x gives us the number of correct answers.\n    \n    for x in range(total_questions + 1):\n        if points_correct * x + points_incorrect * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    students_taking_math = 20\n    students_taking_both = 11\n    students_taking_neither = 10\n    \n    # Using Inclusion-Exclusion Principle\n    # Total = Only_Math + Only_Writing + Both + Neither\n    students_taking_writing_only = total_students - (students_taking_math - students_taking_both) - students_taking_neither\n    \n    return students_taking_writing_only\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    digits = '08072003'  # Digits from the birthday\n    primes = []\n\n    for n in range(1, 50):\n        if isprime(n) and all(str(d) in digits for d in str(n)):\n            primes.append(n)\n\n    ans = max(primes)\n    return ans\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_for_five = 54 * 5\n    total_for_first_two = 48 * 2\n    total_for_last_three = total_for_five - total_for_first_two\n    average_for_last_three = total_for_last_three / 3\n\n    return average_for_last_three\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    teddy_age, father_age = symbols('teddy_age father_age')\n\n    # When Teddy was 5, his father's age was 7 times his age\n    equation1 = Eq(father_age, 7 * 5)\n\n    # Define the age difference between Teddy and his father\n    age_difference = father_age - teddy_age\n\n    # When his father is 40 years old, we set up equation to solve Teddy's future age\n    equation2 = Eq(father_age + age_difference, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (teddy_age, father_age))\n\n    # Calculate Teddy's age when his father is 40 by subtracting their age difference from 40\n    teddy_future_age = 40 - age_difference\n\n    return teddy_future_age.subs(solutions)\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    return sum(range(1, 18, 2))\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    total_people = symbols('total_people')\n\n    # Create equations based on the problem statement\n    adults = (2 / 7) * total_people\n    remaining = total_people - adults\n    boys = (4 / 5) * remaining\n    girls = remaining - boys\n\n    # Given that there were 80 more adults than girls\n    eq = Eq(adults - girls, 80)\n\n    # Solve the equation\n    solutions = solve(eq, total_people)\n\n    # As we expect a positive number of people, we take the positive solution\n    total = solutions[0]\n\n    return total\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    slices = 1  # Start with one whole pizza\n    for cuts in range(1, 5):\n        slices += cuts\n    return slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position_left_to_right = 10\n    toys_between_rabbit_and_elephant = 5\n\n    # Since the elephant is to the left of the rabbit, we count the positions to the right of the elephant.\n    rabbit_position_left_to_right = elephant_position_left_to_right + toys_between_rabbit_and_elephant + 1\n\n    # To find the rabbit's position from right to left, we subtract its position from the total number of toys.\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right + 1\n\n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    sum_digits = 0\n    for i in range(1, 110):\n        sum_digits += sum(int(digit) for digit in str(i))\n    return sum_digits\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    for pink in range(1, 48):\n        gray = 11 * pink\n        if pink + gray == 48:\n            return pink\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54  # in square cm\n    base = 9   # in cm\n\n    # The area of a triangle is given by (1/2) * base * height\n    # So, height = (2 * area) / base\n    height = (2 * area) / base\n\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    sum_squares = sum([i**2 for i in range(2, 33, 3)])\n    return sum_squares\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Simplify the denominator expression {{4}^{982}}-{{2}^{1963}}\n    # We know that 4 = 2^2, so {{4}^{982}} = {{(2^2)}^{982}} = {{2}^{1964}}\n    # Therefore, the expression for the denominator simplifies to {{2}^{1964}} - {{2}^{1963}}\n\n    # We can factor out the common term, getting:\n    # 2^{1963} * (2 - 1) = 2^{1963}\n\n    # The overall fraction simplifies to\n    # {{2}^{2019}} / {{2}^{1963}}, which simplifies to 2^(2019-1963) = 2^{56}\n\n    # We are interested in finding the remainder of 2^{56} divided by 5\n    # Since we know that 2^4 = 16, which leaves a remainder of 1 when divided by 5,\n    # and that powers of 2^4 (e.g., 2^8, 2^12, ...) will also leave a remainder of 1 when divided by 5,\n    # we can rewrite 2^{56} as (2^4)^{14}\n\n    # The remainder of (2^4)^{14} divided by 5 will be the same as the remainder of 1^{14} divided by 5,\n    # which is simply 1\n    remainder = 1\n\n    return remainder\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tables, chairs = symbols('tables chairs')\n    original_condition = Eq(tables, chairs)\n    after_selling_bringing_condition = Eq(chairs + 24, 4 * (tables - 42))\n    \n    solutions = solve((original_condition, after_selling_bringing_condition), (tables, chairs))\n    \n    return solutions[chairs]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    result = 0.35 * 700\n    return result\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_to_left_of_candy = 4\n    cabinets_to_right_of_candy = 7\n    candy_cabinet = 1  # Including Candy's own cabinet\n    \n    total_cabinets = cabinets_to_left_of_candy + candy_cabinet + cabinets_to_right_of_candy\n    \n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6, 1914 % 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    first_day_books = 455\n    second_day_books = 198\n\n    total_books = first_day_books + second_day_books\n\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for units in range(0, 10, 2):\n                if hundreds + tens + units == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10): \n        number = int('106' + str(Y))  \n        if number % 18 == 0:  \n            return Y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = initial_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n    total_boxes = boxes_per_class * number_of_classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    # Initialize the largest possible value to 0\n    largest_value = 0\n\n    # The number should end with 0 to be divisible by both 2 and 5\n    # The number must be divisible by 3, so sum of digits (4+9+unit+ten) must be divisible by 3\n    for ten_digit in range(10):\n        for unit_digit in range(10):\n            if (4 + 9 + unit_digit + ten_digit) % 3 == 0 and unit_digit == 0:\n                # Construct the number\n                number = 4900 + ten_digit * 10 + unit_digit\n                # Check if it's the largest so far\n                if number > largest_value:\n                    largest_value = number\n\n    return largest_value\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of motorcycles, cars, and lorries\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n\n    # Equation 1: The total number of vehicles is 27\n    eq1 = Eq(motorcycles + cars + lorries, 27)\n\n    # Equation 2: The total number of wheels is 96\n    eq2 = Eq(2 * motorcycles + 4 * cars + 6 * lorries, 96)\n\n    # Equation 3: The number of cars is equal to the number of lorries\n    eq3 = Eq(cars, lorries)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (motorcycles, cars, lorries))\n\n    # Return the number of cars\n    return solutions[cars]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = n * (n + 1) // 2\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let x be the mass of the jar and y be the mass of one chocolate.\n    # According to the problem, we have the following equations:\n    # x + 5y = 185 (1)\n    # x + 17y = 317 (2)\n    \n    # We can solve the two equations to find the values of x and y.\n    # Subtract equation (1) from equation (2) to get:\n    # 12y = 317 - 185\n    y = (317 - 185) / 12\n    \n    # Now substitute the value of y in equation (1) to find x.\n    x = 185 - 5 * y\n    \n    # The mass of the jar with 10 chocolates is:\n    # x + 10y = ? (3)\n    ans = x + 10 * y\n    \n    return ans\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n\n    equation1 = Eq(ana, olaf + 116)  # Ana is 116cm taller than Olaf\n    equation2 = Eq(kristoff, 5.5 * olaf)  # Kristoff is 5.5 times the height of Olaf\n    equation3 = Eq(ana, 150)  # Ana is 150cm\n\n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n\n    kristoff_height = solutions[kristoff]\n    ana_height = solutions[ana]\n\n    return kristoff_height - ana_height\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' represent the number of apples John bought.\n    a = symbols('a')\n    \n    # The number of pears and mangoes in terms of 'a'.\n    pears_count = (4/5) * a   # pears\n    mangoes_count = (2/5) * a # mangoes\n    \n    # The amount of money spent on apples.\n    apples_cost = a * 0.60\n    \n    # Setting up the equations for the cost based on the provided ratios.\n    # Let 'p' be the amount of money spent on pears, and 'm' be the amount spent on mangoes.\n    p, m = symbols('p m')\n    \n    equation1 = Eq(p, (2/3) * apples_cost) # The ratio of the cost on apples to pears is 3:2\n    equation2 = Eq(m, 5 * p)              # The ratio of the cost on pears to mangoes is 1:5\n    equation3 = Eq(apples_cost + p + m, 150) # The total cost is $150\n    \n    # Solving for 'p' and 'm'.\n    solutions = solve((equation1, equation2, equation3), (p, m, a))\n    \n    # Calculating the total number of fruits.\n    total_fruits = solutions[a] + pears_count.subs(a, solutions[a]) + mangoes_count.subs(a, solutions[a])\n\n    return total_fruits\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_solution_weight = 700\n    sugar_concentration = 0.32\n    sugar_weight = total_solution_weight * sugar_concentration\n    water_weight = total_solution_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    for i in range(1000):  # Iterate through the possible three last digits\n        num_str = '1992' + str(i).zfill(3)\n        num = int(num_str)\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    return 3.05 - 1/10\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800\n    total_trees = 21\n    # Since there are trees at both ends, the number of intervals is one less than the number of trees\n    number_of_intervals = total_trees - 1\n    distance_between_trees = total_length / number_of_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    return 132 // 11\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_age_in_3_years = 9\n    hazel_current_age = hazel_age_in_3_years - 3\n    jessica_current_age = hazel_current_age - 3\n    \n    hazel_age_next_year = hazel_current_age + 1\n    jessica_age_next_year = jessica_current_age + 1\n\n    total_age_next_year = hazel_age_next_year + jessica_age_next_year \n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_second_half = 6\n\n    total_second_half = average_second_half * months_second_half\n    total_year = total_first_half + total_second_half\n    months_in_year = 12\n\n    average_per_month = total_year / months_in_year\n\n    return average_per_month\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    freq = {letter: word.count(letter) for letter in set(word)}\n\n    divisor = 1\n    for key in freq:\n        divisor *= factorial(freq[key])\n\n    ans = factorial(len(word)) // divisor\n\n    return ans\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = (last_term - first_term) + 1\n    sum_sequence = (first_term + last_term) * num_terms / 2\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    total_score_for_five_assignments = 94 * 5\n    total_score_for_six_assignments = 92 * 6\n    sixth_assignment_score = total_score_for_six_assignments - total_score_for_five_assignments\n    return sixth_assignment_score\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    profit_per_pair = 74 - 65\n    profit_total = 440\n    pairs_left = 5\n    \n    pairs_sold = profit_total // profit_per_pair\n    initial_pairs = pairs_sold + pairs_left\n    \n    return initial_pairs\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the end time of the musical\n    end_time = datetime.strptime(\"19:15\", \"%H:%M\")\n  \n    # Difference in time that represents half the duration of the musical\n    half_duration = timedelta(hours=1, minutes=45) // 2\n\n    # Calculate the start time by subtracting half the duration from the end time\n    start_time = end_time - half_duration\n\n    # Formatting the start time to hours and minutes\n    return start_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    # Let x be the number of cars at the beginning\n    x = symbols('x')\n    \n    # Equation representing the problem\n    equation = Eq(x + 8 - 10, 30)\n    \n    # Solve the equation\n    initial_cars = solve(equation, x)\n    \n    return initial_cars[0]\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((((x * 2) / 4) ** 2 - 4) / 10, 6)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    fill_rate = 10\n    leak_rate = 3\n    filled_first_day = 3\n    current_water = filled_first_day\n    days_passed = 1  # starting from the first day\n\n    while current_water < total_water_needed:\n        current_water += fill_rate\n        days_passed += 1\n        if current_water < total_water_needed:\n            current_water -= leak_rate\n\n    return days_passed\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    ans = 1234 - 566\n    return ans\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return int(toys_in_20_minutes)\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n    \n    amy_period = 24\n    ginny_period = 36\n    lcm = (amy_period * ginny_period) // gcd(amy_period, ginny_period)\n    \n    return lcm\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # half an hour\n    digits_written = 0\n    current_number = 0\n    while digits_written + len(str(current_number + 1)) <= total_seconds:\n        current_number += 1\n        digits_written += len(str(current_number))\n    return current_number\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [\n        (1/2) * 30,\n        (1/3) * 36,\n        (1/4) * 40,\n        (1/5) * 60,\n        (1/6) * 96\n    ]\n    min_amount = min(amounts)\n    max_amount = max(amounts)\n    return max_amount - min_amount\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%20 %p')\n    start_time = end_time - timedelta(minutes=225)\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Darrell must draw all the non-green marbles (blue, white, and black) \n    # before he is guaranteed to draw a green one in the worst case scenario.\n    blue = 5\n    white = 9\n    black = 2\n\n    # The first draw after all these would be a green one\n    draws = blue + white + black + 1\n\n    return draws\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    num_teams = 20\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_per_minute = toys_in_3_minutes / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_climbed = 6 * 6 + 2  # Climbed for six days plus the seventh day\n    total_days = 7\n    well_height = 20\n\n    # On the seventh night, it doesn't slide down since it climbs out of the well\n    # Hence, all the sliding down happened in the first 6 nights\n    total_sliding_down = total_climbed - well_height\n\n    # The snail slides down the same distance each night\n    sliding_down_per_night = total_sliding_down / 6\n\n    return sliding_down_per_night\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    for year in range(years):\n        # Each year, the number of rabbits triples\n        initial_rabbits *= 3\n        # Then half of the rabbit population dies\n        initial_rabbits = initial_rabbits // 2\n    return initial_rabbits\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Let Candy's speed be x meters per minute\n    # Then Ivy's speed will be x + 20 meters per minute\n\n    # Candy walks for 12 minutes\n    # Ivy walks for 12 + 6 = 18 minutes\n\n    # Candy's distance = speed * time = x * 12\n    # Ivy's distance = speed * time = (x + 20) * 18\n\n    # Total distance is 1200 meters\n    # So, (x * 12) + (x + 20) * 18 = 1200\n\n    # Solving the equation for x\n    x = symbols('x')\n    equation = Eq(x * 12 + (x + 20) * 18, 1200)\n    speed_candy = solve(equation, x)[0]\n\n    return speed_candy\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # Single round-robin means each player plays every other player once.\n    # So each player will play 7 games since there are 8 players.\n    # Since each player has a different number of wins, we can arrange wins in descending order.\n    # The maximum wins a player can have is when they win all their games which would be 7.\n    # Thus, the champion, having the highest number of wins, will have 7 wins.\n    return 7\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120_puffs = 120 / puffs_per_hour\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    first_metal_mass = 6\n    first_metal_nickel_percent = 0.45\n    \n    second_metal_mass = 14\n    second_metal_nickel_percent = 0.60\n    \n    total_mass = first_metal_mass + second_metal_mass\n    total_nickel = (first_metal_mass * first_metal_nickel_percent) + (second_metal_mass * second_metal_nickel_percent)\n    \n    nickel_concentration_percent = (total_nickel / total_mass) * 100\n    \n    return nickel_concentration_percent\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n    for x1 in range(1, 14):\n        for x2 in range(1, 14 - x1):\n            for x3 in range(1, 14 - x1 - x2):\n                x4 = 13 - x1 - x2 - x3\n                product = x1 * x2 * x3 * x4\n                if product > max_product:\n                    max_product = product\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x') # number of years in the future when the condition is met\n    edward_age = 8 + x\n    mother_age = 32 + x\n    equation = Eq(mother_age, 3 * edward_age)\n    \n    years = solve(equation, x)\n    \n    return years[0]\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # 1cm in the plan is 6m in reality\n    playground_length_plan = 5  # playground is 5cm on the plan\n\n    playground_length_real = playground_length_plan * scale_ratio\n\n    return playground_length_real\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for number in range(10, 100):  # Smallest 2-digit number is 10, largest is 99\n        if number % 3 == 1 and number % 5 == 1:\n            return number\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    students = 0\n    while True:\n        square_students = students ** 2\n        if ((students + 1) ** 2 - square_students) == 12 and (square_students % (students + 1) == 11):\n            break\n        students += 1\n    return students ** 2\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n\n    ans = total_money // cost_per_box\n\n    return ans\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    total = 4060800\n    known_part = 4000000 + 800\n    missing_number = total - known_part\n    return missing_number\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    average_boys = 30\n    average_total = 26\n    \n    girls = symbols('girls')\n    \n    total_apples = boys * average_boys + girls * 20\n    total_people = boys + girls\n    \n    equation = Eq(total_apples / total_people, average_total)\n    num_girls = solve(equation, girls)\n    \n    return num_girls[0]\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for pen and pencil\n    pen, pencil = symbols('pen pencil')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(pen + pencil, 4.5)\n    equation2 = Eq(pencil, pen - 0.5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_a = 673\n    tank_b = tank_a + 56\n    return tank_b\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_balls = 12\n    total_cost = 340\n    cost_basketball = 30\n    cost_volleyball = 25\n\n    # Assume all balls were basketballs and calculate the cost\n    max_cost = total_balls * cost_basketball\n\n    # The difference between the max cost (if all were basketballs) and actual cost gives us the cost saved\n    # by replacing some basketballs with volleyballs\n    cost_saved = max_cost - total_cost\n\n    # The difference in cost between one basketball and one volleyball gives us the cost saved per replacement\n    cost_saved_per_replacement = cost_basketball - cost_volleyball\n\n    # The number of replacements (volleyballs) can be determined by dividing the total cost saved by the cost saved per replacement\n    number_of_volleyballs = cost_saved // cost_saved_per_replacement\n\n    # The number of basketballs is the total number of balls minus the number of volleyballs\n    number_of_basketballs = total_balls - number_of_volleyballs\n\n    return number_of_basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000\n    richie_share = total_wealth * (1/3)\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1/2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2/5)\n    archie_share = remaining_after_thrifty - bounty_share\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of the mint candies, which remains constant across containers.\n    # Let y be the multiplier for the number of chocolate candies relative to mint candies.\n    # Let t1, t2, t3 be the total mass of the 3 containers, respectively.\n    x, y = symbols('x y')\n\n    # We have three equations for the total mass of each container\n    t1 = 5 * x / 3 + 3 * x / 3 * y\n    t2 = 7 * x / 3 + 3 * x / 3 * y\n    t3 = 9 * x / 3 + 3 * x / 3 * y\n\n    # Total mass of all 3 containers is 1371g\n    total_mass = Eq(t1 + t2 + t3, 1371)\n\n    # Solve the system of equations\n    solutions = solve(total_mass, x)\n\n    # x is the mass of mint candies which is then used to find the mass of strawberry candies in each container\n    mass_of_mint_candies = solutions[0]\n\n    # Mass of strawberry candies in each container\n    mass_of_strawberries_1 = 2/5 * t1.subs(x, mass_of_mint_candies)\n    mass_of_strawberries_2 = 2/7 * t2.subs(x, mass_of_mint_candies)\n    mass_of_strawberries_3 = 2/9 * t3.subs(x, mass_of_mint_candies)\n    \n    # Total mass of strawberry candies\n    mass_of_strawberries = mass_of_strawberries_1 + mass_of_strawberries_2 + mass_of_strawberries_3\n\n    return mass_of_strawberries\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    # Judy gave 3/4 of her candy to Lily\n    to_lily = (3 / 4) * total_candy\n    # Remaining candy after giving to Lily\n    remaining_after_lily = total_candy - to_lily\n    # Judy gave 1/3 of the remaining candy to her brother\n    to_brother = (1 / 3) * remaining_after_lily\n    # Remaining candy after giving to brother\n    final_remaining = remaining_after_lily - to_brother\n\n    return final_remaining\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(1/i for i in range(2, 61) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for Roy and Dennis' initial amounts\n    roy, dennis = symbols('roy dennis')\n    \n    # Roy and Dennis shared $340\n    equation1 = Eq(roy + dennis, 340)\n    \n    # After spending, Dennis has twice as much as Roy\n    equation2 = Eq(dennis - dennis / 4, 2 * (roy - 2 * roy / 3))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (roy, dennis))\n    \n    # Calculate the amount of money Dennis had in the end\n    dennis_end = solutions[dennis] - solutions[dennis] / 4\n    \n    return dennis_end\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    friday = symbols('friday')\n    saturday = friday + 27\n    sunday = friday - 14\n    \n    equation = Eq(friday + saturday + sunday, 475)\n    \n    sold_on_friday = solve(equation, friday)[0]\n    \n    return sold_on_friday\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    digits_used = 0\n    last_page = 0\n\n    while digits_used < 300:\n        last_page += 1\n        digits_used += len(str(last_page))\n\n    if digits_used > 300:\n        last_page -= 1\n\n    return last_page\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    ball_cost = 20.45\n    num_balls = 8\n    num_hoops = 6\n    \n    total_ball_cost = ball_cost * num_balls\n    total_hoop_cost = total_cost - total_ball_cost\n    \n    cost_per_hoop = total_hoop_cost / num_hoops\n    \n    return cost_per_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(693)\n    product = 1\n\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            product *= prime\n\n    ans = product\n    return ans\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Unit digit of powers of 13 repeats every 4 cycles: 3, 9, 7, 1.\n    unit_digit_13 = pow(13, 242, 10) \n\n    # Unit digit of powers of 17 repeats every 4 cycles: 7, 9, 3, 1.\n    unit_digit_17 = pow(17, 379, 10)\n\n    # Unit digit of powers of 4 repeats every 2 cycles: 4, 6.\n    unit_digit_4 = pow(4, 2012, 10)\n\n    # Calculate the unit digit of the entire expression\n    unit_digit = (unit_digit_13 + (unit_digit_17 * unit_digit_4)) % 10\n\n    return unit_digit\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # liters\n    juice_consumed = 9  # liters\n    container_volume = 5  # liters\n\n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_consumed\n    containers_needed = -(-remaining_juice // container_volume)\n\n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64 / 27)\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stickers Alexis had initially\n    alexis = symbols('alexis')\n\n    # Marry had 7/5 as many stickers as Alexis\n    marry_initial = 7/5 * alexis\n\n    # They each gave 20% of their stickers to Charlotte\n    marry_after_giving = marry_initial - 0.20 * marry_initial\n    alexis_after_giving = alexis - 0.20 * alexis\n\n    # Charlotte's stickers increased by 80%\n    # Let y be the number of stickers Charlotte originally had\n    # y + 0.20 * marry_initial + 0.20 * alexis = y + 0.80 * y\n    # Simplify to find the initial number of stickers Charlotte had (y)\n    charlotte_initial = symbols('charlotte_initial')\n    equation = Eq(charlotte_initial + 0.20 * marry_initial + 0.20 * alexis, charlotte_initial + 0.80 * charlotte_initial)\n\n    charlotte = solve(equation, charlotte_initial)[0]\n\n    # Marry had 20 stickers more than Charlotte after giving\n    final_equation = Eq(marry_after_giving, charlotte + 20)\n\n    # Solve for the number of stickers Alexis had initially\n    solutions = solve(final_equation, alexis)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    weight_of_steak = 3 + 1/2  # 3 1/2 kg converted to decimal\n    cost_per_kg = 7.50\n    available_money = 20\n\n    total_cost = weight_of_steak * cost_per_kg\n    money_needed = total_cost - available_money if total_cost > available_money else 0\n\n    return round(money_needed, 2)\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddie_position_from_start = 12\n    eddie_position_from_end = total_people - eddie_position_from_start + 1\n    return eddie_position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the masses of the light and heavy bowling balls\n    mass_light, mass_heavy = symbols('mass_light mass_heavy')\n\n    # Set up equations based on the given information\n    equation1 = Eq(mass_heavy, 2 * mass_light)  # Heavy ball is twice as heavy as light ball\n    equation2 = Eq(6 * mass_light + 6 * mass_heavy, 65.7)  # Total mass of all balls is 65.7kg\n\n    # Solve the system of equations for mass_light and mass_heavy\n    solutions = solve((equation1, equation2), (mass_light, mass_heavy))\n\n    # Extract the mass of the light bowling ball and round it to nearest kg\n    mass_light_value = round(solutions[mass_light])\n\n    return mass_light_value\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n    total_money = 705\n    calculator_price = 34\n    racket_price = 63\n\n    # Benson's money after buying the calculator\n    equation1 = Eq(benson - calculator_price, clive - racket_price)\n    # The sum of Benson's and Clive's money\n    equation2 = Eq(benson + clive, total_money)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    avg_score = sum(scores) / len(scores)\n    return avg_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    # Using algebra, the expressions for the averages are:\n    # (A + B) / 2 = 50\n    # (B + C) / 2 = 43\n    # (A + C) / 2 = 45\n\n    # Multiplying both sides by 2 to get rid of the division\n    A_plus_B = 50 * 2\n    B_plus_C = 43 * 2\n    A_plus_C = 45 * 2\n\n    # Adding all three equations, we get:\n    # 2A + 2B + 2C = A_plus_B + B_plus_C + A_plus_C\n    sum_of_all = A_plus_B + B_plus_C + A_plus_C\n\n    # Since each of A, B and C is counted twice, divide the sum by 2 to get the total sum of A, B and C\n    total_sum = sum_of_all // 2\n\n    # The average of A, B and C is the total sum divided by 3\n    average_of_ABC = total_sum / 3\n\n    return average_of_ABC\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_A = 42\n    sweets_B = 4 * sweets_A\n    sweets_C = 2 * sweets_B\n    return sweets_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    # Let x be the number of pens Denise has.\n    for x in range(1, 126):\n        if x + 6 * x == 126:\n            return x\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # Calculate the cost of one chocolate bar\n    chocolate_bar_cost = 1.26\n    \n    # Calculate the total cost for 5 chocolate bars\n    total_chocolate_cost = 5 * chocolate_bar_cost\n    \n    # Since the cost of 6 cookies is the same as the total cost of 5 chocolate bars\n    # We can find the cost of one cookie by dividing the total cost of chocolate bars by 6\n    cookie_cost = total_chocolate_cost / 6\n    \n    # Calculate the cost of 4 cookies\n    cost_of_four_cookies = 4 * cookie_cost\n    \n    # Subtract the cost of 4 cookies from the initial amount of money\n    money_left = 9.05 - cost_of_four_cookies\n    \n    return round(money_left, 2)  # round the result to 2 decimal places\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the number of boys and g be the number of girls\n    b, g = symbols('b g')\n\n    # Every 3 boys share one ball: total_balls_for_boys = b / 3\n    # Every 2 girls share one ball: total_balls_for_girls = g / 2\n    # Total balls shared = total_balls_for_boys + total_balls_for_girls = 250\n    equation1 = Eq(b / 3 + g / 2, 250)\n    \n    # Total number of children = number of boys + number of girls = 650\n    equation2 = Eq(b + g, 650)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls - 25, (2/3) * (boys))\n    equation2 = Eq(boys - 15, girls - 25)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    initial_students = solutions[boys] + solutions[girls]\n\n    return initial_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    total_value = 7590  # in cents\n    ratio_sum = 8 + 3\n    value_of_one_set = (10 * 8) + (50 * 3)\n    \n    number_of_sets = total_value / value_of_one_set\n    value_of_50_cent_coins = number_of_sets * (50 * 3)\n\n    return value_of_50_cent_coins\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    # We want to find the missing number \"x\" such that 8 * 11 = x * 9 + 34\n    # We can rearrange the equation to solve for \"x\":\n    # x = (8 * 11 - 34) / 9\n\n    x = (8 * 11 - 34) / 9\n    return int(x)\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    drop_temp = 12\n    midnight_temp = midday_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    total_spent = 6400\n    discount_percentage = 0.80\n    savings = total_spent / (1 - discount_percentage)\n    amount_saved = savings - total_spent\n    return amount_saved\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_area = 7 * 7  # Area of the base of the prism\n    hole_area = 3 * 3  # Area of the hole\n    net_base_area = base_area - hole_area  # Area of the base minus the hole\n    volume = 320  # Volume of the prism\n    \n    height = volume / net_base_area  # Height of the prism\n    \n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as a single entity\n    num_people_minus_pair = 7  # The 6 other people plus the Amy-Judy pair\n    # Calculate permutations of these entities around a table\n    permutations_with_pair = factorial(num_people_minus_pair - 1)\n    \n    # Then, Amy and Judy can switch places, adding a factor of 2\n    permutations_amy_judy = 2\n    \n    # Total permutations\n    total_permutations = permutations_with_pair * permutations_amy_judy\n    \n    return total_permutations\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    # n cuts can divide a circular region into at most (n^2 + n + 2)/2 parts\n    # We are going to find the minimum n such that (n^2 + n + 2)/2 >= 46\n    n = 1\n    while (n ** 2 + n + 2) / 2 < 46:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    def find_triangle_number_index(n):\n        i = 0\n        while n > i:\n            n -= i\n            i += 1\n        return i, n\n\n    triangle_index, position = find_triangle_number_index(2008)\n    \n    if position == 0:\n        ans = triangle_index - 1\n    else:\n        ans = position\n        \n    return ans\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5\n    # 3x = 10y implies x = (10/3)y\n    y_weight = x_weight / (10 / 3)\n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = [6, 10, 14, 18, 22, 26]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n    \n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n    \n    # Tommy sold 27 tomatoes\n    sold_tomatoes = 27\n    \n    # Solve for the number of cucumbers\n    solutions = solve(equation.subs(tomatoes, sold_tomatoes), cucumbers)\n    \n    return solutions[cucumbers]\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 5, 9]\n    perm = permutations(digits)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # Start with the hundreds place, which must be at least 1 (since we need a three-digit number)\n        for j in range(0, 10):  # Tens place (0-9)\n            for k in range(0, 10):  # Ones place (0-9)\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum_ = sum(range(2, 101, 5))\n    return sum_\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # Define the 16th term (100 mosquitoes) and the common difference (6 more each night)\n    a16 = 100\n    d = 6\n    n = 31  # Total number of nights\n\n    # Calculate the first term (a1) using the formula: an = a1 + (n - 1) * d\n    a1 = a16 - (16 - 1) * d\n\n    # Sum of an arithmetic series formula: S_n = n/2 * (2*a1 + (n - 1) * d)\n    sum_mosquitoes = n / 2 * (2 * a1 + (n - 1) * d)\n\n    return int(sum_mosquitoes)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_to_avril = total_bags / 3\n    remaining_for_pip = total_bags - given_to_avril\n    return remaining_for_pip\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # In order for Chris to win, he needs to ensure that after his first turn,\n    # the remaining number of matches leaves Dylan with no option but to leave\n    # Chris with a winning move.\n    # This means, leaving Dylan with numbers from which, whatever he picks (1 or 2),\n    # Chris can always win in the next move.\n\n    # For example, if Chris leaves 5 matches after his first move,\n    # Dylan can take either 1 or 2 matches, which leaves 3 or 4 matches for Chris.\n    # Chris can then always take 1 or 2 matches to leave Dylan with 2 matches,\n    # ensuring Chris's victory on his next turn.\n\n    # To formalize, Chris needs to leave a number of matches such that\n    # it is not directly 2 (lose immediately) and not 3 (Dylan takes 1, leaves 2 for Chris).\n    # And this number should be one from which any move by Dylan can be countered by Chris to reach this strategy.\n    # Therefore, Chris should leave a number that is a multiple of 3 (6 or 3), so that whatever\n    # Dylan takes (1 or 2), Chris will take (2 or 1) to leave 3 matches, from which he can win.\n    # So Chris should aim to leave 6 for Dylan on the first move.\n    \n    # Chris starts with 7 matches.\n    # To leave 6 for Dylan, Chris must take 1 match.\n\n    return 1\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A != 0:\n            ABC = A * 100 + B * 10 + C\n            if B - A == C - B and A != B and B != C and C != A:\n                return ABC\n            \nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Declare symbols for each digit\n    A, B, C, D, E = symbols('A B C D E', integer=True)\n\n    # Each digit is in the range 0 to 9 and they are all different\n    digits_constraints = [Eq(A, A), Eq(B, B), Eq(C, C), Eq(D, D), Eq(E, E),\n                          A >= 0, A <= 9,\n                          B >= 0, B <= 9,\n                          C >= 0, C <= 9,\n                          D >= 0, D <= 9,\n                          E >= 0, E <= 9]\n    \n    # All digits are distinct\n    distinct_constraints = [A != B, A != C, A != D, A != E,\n                            B != C, B != D, B != E,\n                            C != D, C != E,\n                            D != E]\n    \n    # The equation for the given numbers when placed in terms of A, B, C, D, E\n    equation = Eq(1000*A + 100*B + 10*A + C + 1000*D + 100*B + 10*E + C, 10000*A + 1000*C + 100*E + 10*D + C)\n\n    # Solve the equation with the given constraints\n    solutions = solve([equation] + digits_constraints + distinct_constraints, (A, B, C, D, E), dict=True)\n\n    # Find the solution where all digits are distinct\n    for sol in solutions:\n        if len(set(sol.values())) == 5:  # Make sure all digits are distinct\n            # Get the value of the 4-digit number DBEC\n            value_DBEC = 1000*sol[D] + 100*sol[B] + 10*sol[E] + sol[C]\n            return value_DBEC\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    start_time = (9 * 60) + 23  # Convert 9:23am to total minutes past midnight\n    end_time = (13 * 60) + 6   # Convert 1:06pm to total minutes past midnight\n\n    minutes_between = end_time - start_time\n\n    return minutes_between\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    ans = (64 + 36) * (64 - 36)\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Assuming 7 days a week and 3 meals a day\n    days_of_week = 7\n    meals_per_day = 3\n\n    # Assuming 2 restaurants are available for each meal\n    restaurants_per_meal = 2\n\n    # The number of different choices = restaurants options ^ (days * meals)\n    choices = restaurants_per_meal ** (days_of_week * meals_per_day)\n    \n    return choices\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    series_sum = sum(range(1, 10)) + sum(range(1, 9))\n    return series_sum\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for prices of a notebook, pencil case and eraser\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # Equations based on the provided relations\n    eq1 = Eq(notebook + pencil_case, 6)\n    eq2 = Eq(pencil_case + eraser, 8)\n    eq3 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    \n    # Solving the equations\n    solved_values = solve((eq1, eq2, eq3), (notebook, pencil_case, eraser))\n    \n    # Getting the price of the pencil case\n    pencil_case_price = solved_values[pencil_case]\n    \n    return pencil_case_price\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    sum = 0\n    for i in range(53, 22, -6):\n        sum += (i - (i - 3))\n    return sum\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    ans = 6.6 * 30\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8\n    correct_time = distance // speed\n    auntie_lina_time = 5\n\n    # return whether Auntie Lina is correct and the correct time if she's not\n    return (auntie_lina_time == correct_time, correct_time)\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the digits as symbols\n    A, E = symbols('A E')\n\n    # Define the equations according to the puzzle\n    # AEEA = 1000 * A + 100 * E + 10 * E + A\n    # We know all digits must be different, so let's first ensure A and E are not equal\n    # Then we find the possible values for A and E\n\n    # Set the range for the digits\n    possible_values = range(10)\n\n    for a_value in possible_values:\n        for e_value in possible_values:\n            if a_value == e_value:\n                continue  # Skip if the digits are not different\n            aeea = 1000 * a_value + 100 * e_value + 10 * e_value + a_value\n            # Now, we check if the number AEEA complies with the condition that all four digits are distinct\n            if len(set(str(aeea))) == 4:\n                return aeea  # Return the first valid value found\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_family_age = 4 * 25\n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n    dad_age = total_family_age - (harry_age + mom_age + sister_age)\n\n    return dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Convert each measurement to centimeters\n    m_to_cm = 83 * 100    # 83 meters to centimeters\n    cm = 200              # 200 centimeters\n    cm_to_cm = 8          # 8 centimeters\n    half_meter_to_cm = 1/2 * 100  # 1/2 meter to centimeters\n    \n    # Store the converted measurements in a list\n    measurements = [m_to_cm, cm, cm_to_cm, half_meter_to_cm]\n    \n    # The standard height of a classroom door is about 200 cm or 2 meters\n    standard_height = 200  # in centimeters\n    \n    # Find the measurement closest to the standard height of a classroom door\n    closest = min(measurements, key=lambda x: abs(x - standard_height))\n    \n    return closest\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    total_digits = 450\n    digits_used = 0\n    current_page = 0\n\n    while digits_used < total_digits:\n        current_page += 1\n        digits_used += len(str(current_page))\n\n    # Since the last page number added exceeds the total digits, subtract that page\n    return current_page - 1\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    # Let x be the original amount of money Leonard had.\n    # According to the problem, the amount of money left after buying lunch is (1 - 5/12) * x.\n    # Then he spends 2/7 of the remainder on dinner, so the money left is (1 - 2/7) * (1 - 5/12) * x.\n    # Finally, he has $45 left, so we equate (1 - 2/7) * (1 - 5/12) * x to 45 and solve for x.\n    \n    # Calculate the proportion of money left after buying lunch\n    lunch_left = 1 - (5/12)\n    # Calculate the proportion of money left after buying dinner\n    dinner_left = 1 - (2/7)\n    # Calculate the total proportion of money left\n    total_left = lunch_left * dinner_left\n    # Calculate the original amount of money\n    original_amount = 45 / total_left\n\n    return original_amount\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    digits = 0\n    pages = 0\n\n    # Length of numbers in the current range.\n    length = 1  \n\n    while digits < 1524:\n        # Number of pages that have the same number of digits (nine 1-digit numbers, ninety 2-digit numbers, etc.).\n        step = 9 * (10 ** (length - 1))\n        \n        # Calculate the digits that would be added by the next pages.\n        next_digits = digits + length * step\n        \n        # If the next set of pages won't exceed the total, increment the digits and pages accordingly.\n        if next_digits < 1524:\n            digits = next_digits\n            pages += step\n        else:\n            # Number of pages are remaining to reach exactly 1524 digits.\n            remaining_pages = (1524 - digits) // length\n            pages += remaining_pages\n            break\n        \n        # Increment the length of numbers for the next range of page numbers.\n        length += 1\n\n    return pages\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    # Total games played: (5 choose 2) since each player plays every other player once\n    total_games = (5 * 4) // 2\n\n    # Sum of games won by Lily, Eva, Tina, and Emma\n    games_won_by_others = 2 + 1 + 4 + 3\n\n    # Games won by Gina will be the remaining games\n    games_won_by_Gina = total_games - games_won_by_others\n\n    return games_won_by_Gina\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    \n    difference = largest_number - smallest_number\n    ans = 2 * difference\n\n    return ans\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Given values\n    angle_degrees = 20\n    distance = 400  # meters\n    coefficient_of_friction = 0.2\n    g = 9.81  # acceleration due to gravity (m/s^2)\n\n    # Convert angle from degrees to radians for math functions \n    angle_radians = math.radians(angle_degrees)\n    \n    # Calculate the acceleration\n    # Components of gravity along the slope: g * sin(theta)\n    # Friction force opposite to motion: coefficient_of_friction * g * cos(theta)\n    acceleration = g * math.sin(angle_radians) - coefficient_of_friction * g * math.cos(angle_radians)\n    \n    # Initial velocity (u) is 0 since the skier starts from rest\n    initial_velocity = 0\n    \n    # Final velocity (v) using the equation of motion: v^2 = u^2 + 2*a*d\n    final_velocity_squared = initial_velocity**2 + 2 * acceleration * distance\n    final_velocity = math.sqrt(final_velocity_squared)\n    \n    return final_velocity\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    for avril_correct in range(11):\n        eddie_correct = avril_correct + 15 // 10\n        avril_points = avril_correct * 10 - (10 - avril_correct) * 5\n        eddie_points = (avril_correct + 3) * 10 - (7 - avril_correct) * 5\n        if avril_points + eddie_points == 155:\n            return avril_correct\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    # Calculate the cost of one group (4 shirts and 1 bag)\n    cost_per_group = (4 * 5) + 10\n\n    # Calculate the number of groups she can buy with $300\n    number_of_groups = 300 // cost_per_group\n\n    # Calculate the number of shirts by multiplying the number of groups by 4 (since 4 shirts per group)\n    shirts_bought = number_of_groups * 4\n\n    return shirts_bought\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    men_rate = 1 / (6 * 5)  # work done by one man in one day\n    women_rate = 1 / (5 * 6)  # work done by one woman in one day\n\n    combined_rate = (10 * men_rate) + (5 * women_rate)  # work done by 10 men and 5 women in one day\n    days_to_complete = 1 / combined_rate  # total days to complete the job by 10 men and 5 women\n\n    return days_to_complete\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    initial_condition = Eq(boys, 3 * girls)\n    after_changes = Eq(boys - 12, girls + 20)\n\n    solutions = solve((initial_condition, after_changes), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    weight_a = 56\n    weight_b = 96\n    weight_c = 120\n\n    common_gcd = gcd(weight_a, gcd(weight_b, weight_c))\n    \n    return common_gcd\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    sum_of_factors = sum([i for i in range(1, n + 1) if n % i == 0])\n    return sum_of_factors\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    total_apples = 30\n    children = 6\n    min_apples = (total_apples - children + 1) // children\n    return min_apples\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    \n    anna_age_now = 8\n    mother_age_now = 44\n    future_anna_age = anna_age_now + years\n    future_mother_age = mother_age_now + years\n    \n    equation = Eq(future_mother_age, 3 * future_anna_age)\n    \n    ans = solve(equation, years)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    may_short_ribbon_length_cm = 7 * 40\n    nancy_long_ribbon_length_cm = 18 * 70\n    length_difference_cm = 240 - (nancy_long_ribbon_length_cm - may_short_ribbon_length_cm)\n\n    may_long_ribbon_pieces = length_difference_cm // 70\n    may_total_ribbons = 7 + may_long_ribbon_pieces\n\n    return may_total_ribbons\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    total_legs = 34\n    total_animals = 12\n\n    # Assuming all animals are chickens, so they all have 2 legs\n    legs_with_assumption = total_animals * 2\n    remaining_legs = total_legs - legs_with_assumption\n\n    # Each rabbit has 2 more legs than a chicken, so we divide the remaining legs by 2 to find the number of rabbits\n    rabbits = remaining_legs // 2\n\n    return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar = 55\n    water = 220\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    result = 2.4 * 52 / 100 + 7.6 * 52 / 100\n    return result\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 4 == 3 and num % 5 == 3:\n            return num\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio = 3 + 1\n    total_volume = 1  # litre\n    red_paint_ratio = 3\n\n    red_paint_volume = (red_paint_ratio / total_ratio) * total_volume\n\n    return red_paint_volume\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    # Let the number of apples be x\n    # So, the number of bananas will be 2x (since for every apple, there are 2 bananas)\n    # and the number of oranges will be 3x (since for every apple, there are 3 oranges)\n\n    # The total fruits will be the sum of apples, bananas, and oranges\n    # which is x + 2x + 3x = 24\n    # Simplifying it we get 6x = 24\n    # Hence, x = 24 / 6 = 4\n    # Therefore, the number of bananas will be 2 times the number of apples\n    # which means, number of bananas = 2 * x = 2 * 4 = 8\n    num_bananas = 2 * (24 // 6)\n    return num_bananas\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    total_sum = 6 * 8  # Mean times the number of values\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    given_away = total_money / 4\n    remaining = total_money - given_away\n    return remaining\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red = symbols('blue red')\n    \n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n    \n    solutions = solve((equation1, equation2), (blue, red))\n    \n    return solutions[blue]\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # Since each child must get at least one apple and all counts should be different,\n    # We start distribution by giving each child one apple, ensuring the minimum requirement is met.\n    apples_left = 50 - 8  # Apples remaining after giving each child one apple.\n\n    # Now distribute the remaining apples one by one to children, except the one with most apples,\n    # until there is only one child (who will have the most apples) left to give to\n    # This forms a decreasing series like 7, 6, 5, ... , 1 (since each gets a different amount)\n    distribution_sequence = range(7, 0, -1)  # from 7 to 1\n    for apples in distribution_sequence:\n        apples_left -= apples\n\n    # The remaining apples are for the child with the most apples.\n    most_apples = apples_left + 1  # Plus one because we initially gave one apple to each child.\n    return most_apples\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Total amount of grass in the pasture is same in both cases.\n    # Let's denote the amount of grass as G\n    # 8 cows for 10 days means G = 8 cows * 10 days\n    # 4 cows for 15 days means G = 4 cows * 15 days\n    # From these two equations, we infer that:\n    # 8 * 10 = 4 * 15 -> total grass is the same\n    # Now we want to know how many cows can it feed for 5 days.\n    # Let x be the number of cows that can be fed for 5 days\n    # So we have:\n    # G = x cows * 5 days \n\n    # G is the same in all cases so we equate them\n    # 8 * 10 = x * 5 -> find x\n    x = (8 * 10) / 5\n\n    return x\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_of_12_packets = 1.02  # kg\n    mass_of_one_packet = total_mass_of_12_packets / 12\n    total_mass_of_4_packets = mass_of_one_packet * 4\n    return total_mass_of_4_packets\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    total_cost = 83\n    tape_cost = 9\n    num_tapes = 3\n\n    total_tape_cost = tape_cost * num_tapes\n    num_cds = 4\n\n    cost_per_cd = (total_cost - total_tape_cost) / num_cds\n\n    return cost_per_cd\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    incorrect_divisor = 122\n    difference = 99.396\n    correct_divisor = 1.22\n\n    # Finding out the dividend\n    # Correct result = Dividend / 1.22\n    # Incorrect result = Dividend/122\n    \n    # Given, Incorrect_result = Correct_result - difference\n    # Dividend / 122 = Dividend / 1.22 - difference\n    # Therefore, Dividend = difference * 122\n    \n    dividend = difference * incorrect_divisor\n    \n    # Now finding the correct result\n    correct_result = dividend / correct_divisor\n    \n    return correct_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hisham, melissa = symbols('hisham melissa')\n    \n    # Melissa had twice as many cards as Hisham\n    equation1 = Eq(melissa, 2 * hisham)\n    # The sum of their cards is 876\n    equation2 = Eq(hisham + melissa, 876)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hisham, melissa))\n\n    hisham_cards = solutions[hisham]\n    melissa_cards = solutions[melissa]\n\n    # Calculate the number of cards Melissa should give to Hisham for both to have the same amount\n    cards_to_give = (melissa_cards - hisham_cards) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    a, b, c, d, e, f = symbols('a b c d e f')\n    equation1 = Eq(a + b, c)\n    equation2 = Eq(b + c, d)\n    equation3 = Eq(c + d, e)\n    equation4 = Eq(d + e, f)\n    equation5 = Eq(d, 6)\n    equation6 = Eq(f, 15)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (a, b, c, d, e, f))\n    \n    seventh_number = solutions[e] + solutions[f]\n    \n    return seventh_number\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    result = (35 - 8) / 3\n    return result\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n    greatest_common_divisor = gcd(boys, girls)\n    ans = greatest_common_divisor\n\n    return ans\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    litres_to_millilitres = 1.7 * 1000\n    return int(litres_to_millilitres)\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    result = 0\n    for i in range(0, 7):\n        numerator = 1\n        denominator = (1 + 5*i) * (6 + 5*i)\n        fraction = numerator / denominator\n        result += fraction\n    ans = 36 * result\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    all_permutations = permutations(digits)\n    smallest_odd_number = float('inf')\n\n    for perm in all_permutations:\n        if perm[-1] % 2 == 1:  # Check if last digit is odd, making the whole number odd\n            number = int(''.join(map(str, perm)))\n            if number < smallest_odd_number:\n                smallest_odd_number = number\n\n    return smallest_odd_number\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    men_rate = 1 / (24 * 16)  # Work rate of one man per day\n    women_rate = 1 / (16 * 24)  # Work rate of one woman per day\n    \n    combined_rate = 10 * men_rate + 6 * women_rate  # Combined work rate of 10 men and 6 women per day\n    \n    days_to_complete = 1 / combined_rate  # Total days to complete the job\n    \n    return days_to_complete\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(0, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    rectangles = 4\n    edges = rectangles * 4\n    points = rectangles * 4\n    intersections = 0\n    for i in range(1, rectangles):\n        intersections += i * (i + 1) / 2\n    regions = 1 + edges + points - rectangles + intersections\n    return int(regions)\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    difference_eq = Eq(marion - ethan, -168)\n\n    julie_salary = solve(difference_eq, julie)\n    marion_salary = 2 * julie_salary[0]\n    ethan_salary = 5 * julie_salary[0]\n\n    total_salary = marion_salary + ethan_salary + julie_salary[0]\n\n    return total_salary\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    # Total number of family members\n    total_members = 5\n\n    # Eddie can be in position 1, 2, 4, or 5 (but not in the middle, which is position 3)\n    eddie_positions = 4\n\n    # For each position that Eddie can take, the remaining members can be arranged in any order\n    # Calculate the number of permutations for the remaining 4 members\n    permutations_others = factorial(total_members - 1)\n\n    # Multiply the number of positions Eddie can take by the permutations of the remaining members\n    total_ways = eddie_positions * permutations_others\n\n    return total_ways\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Since the sequence is geometric, the ratio is constant.\n    # We can find the ratio by dividing the term following n by the term coming after it.\n    # r = 24 / 12\n    r = 24 / 12\n\n    # Now we can find the missing number (n) by dividing the term following it by the ratio.\n    # n = 96 / r\n    n = 96 / r\n    return int(n)\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n\n    # After spending 1/3 of his money on a watch\n    watch_cost = total_money / 3\n\n    # Spent $56 on a tie\n    tie_cost = 56\n\n    # Left with 3/8 of the sum of money he had at first\n    money_left = total_money * 3 / 8\n\n    # Equation based on the description\n    equation = Eq(total_money - watch_cost - tie_cost, money_left)\n\n    # Solve the equation\n    total_money_solution = solve(equation, total_money)[0]\n\n    # Calculate the total amount spent\n    total_spent = total_money_solution - money_left\n\n    return total_spent\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(1, 10)):\n        number = int(''.join(map(str, perm)))\n        # Check if the number is divisible by 11\n        if number % 11 == 0:\n            return number\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    time_to_pass = 10  # seconds\n\n    relative_speed = eddie_speed + train_speed  # since they are moving towards each other\n    train_length = relative_speed * time_to_pass  # total distance covered by the train in 10 seconds\n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "def solution():\n    import itertools\n    \n    operators = ['+', '*']\n    max_value = float('-inf')  # Start with the lowest possible value\n\n    # Generate all possible combinations of '+' and '*' in three positions\n    for ops in itertools.product(operators, repeat=3):\n        expression = f\"1{ops[0]}2{ops[1]}3{ops[2]}4\"\n        max_value = max(max_value, eval(expression))\n    \n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_questions = 12\n    correct_points = 8\n    incorrect_points = -3\n    total_points = 63\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        points = correct_answers * correct_points + incorrect_answers * incorrect_points\n        if points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700  # length of the train in meters\n    bridge_length = 900  # length of the bridge in meters\n    train_speed = 400  # train speed in meters per minute\n\n    total_distance = train_length + bridge_length\n    time = total_distance / train_speed  # time in minutes\n\n    return time\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1997 - 2):\n        a, b = b, (a + b) % 3  # We only care about the remainder when divided by 3\n    return a\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel, mom = symbols('hazel mom')\n    # Hazel will be three times her current age in 12 years\n    equation1 = Eq(hazel + 12, 3 * hazel)\n    # On Hazel's 18th birthday, her mom will be three times her age then\n    equation2 = Eq(mom + 18, 3 * (hazel + 18))\n\n    # Solve the system of equations for hazel and mom\n    solutions = solve((equation1, equation2), (hazel, mom))\n\n    # Hazel's mom's age now\n    age_mom_now = solutions[mom]\n\n    return age_mom_now\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    # At present, Peter's age is 45, Pip's age is 7 and Pit's age is 14\n    current_age_peter = 45\n    current_age_pip = 7\n    current_age_pit = 14\n\n    # Let x be the number of years until Peter's age equals the sum of his son's ages\n    x = symbols('x')\n\n    # In x years, Peter will be 45+x, Pip will be 7+x, and Pit will be 14+x\n    future_age_peter = current_age_peter + x\n    future_age_pip = current_age_pip + x\n    future_age_pit = current_age_pit + x\n\n    # Equation for the sum of the sons' future ages will be equal to Peter's future age\n    equation = Eq(future_age_peter, future_age_pip + future_age_pit)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Calculate Peter's age when his age is the sum of his son's ages\n    age_when_sum = current_age_peter + solution[0]\n\n    return age_when_sum\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    sum_of_numbers = sum(range(1, 11))  # Sum of numbers from 1 to 10\n    ans = sum_of_numbers ** 2  # Square of the sum\n    return ans\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    ans = 2616 // 6\n    return ans\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 different numbers and we want 2 consecutive numbers,\n    # Worst case is drawing the highest number from each pattern without getting 2 consecutive\n    # If we draw one from each pattern, we will have 4 cards for each number, so 13 * 4 = 52 cards\n    # But since we want to ensure 2 consecutive, if we have 13 unique numbers with 4 patterns, we can draw one more card to guarantee a consecutive pair\n    ans = 13 + 1  # 13 for each unique number and 1 for guaranteeing the consecutive pair\n    return ans\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Peter's initial stickers count as 'p'.\n    p = symbols('p')\n    \n    # Sam has 40 stickers more than Peter initially.\n    # Hence, Sam's initial stickers count is 'p + 40'.\n    \n    # Sam gives 20% of his stickers to Peter, so he remains with 80%.\n    # Peter gives 25% of his (updated) stickers to Sam, so Peter remains with 75%\n    # of his updated stickers count, which is 'p + 0.20 * (p + 40)'.\n    \n    # Set up the equations based on the problem statement.\n    # After the exchange, Sam has '0.80 * (p + 40) + 0.25 * (p + 0.20 * (p + 40))'\n    # And Peter has 'p + 0.20 * (p + 40) - 0.25 * (p + 0.20 * (p + 40))'\n    # In the end, Sam has 96 stickers more than Peter.\n    \n    equation = Eq(0.80 * (p + 40) + 0.25 * (p + 0.20 * (p + 40)) -\n                  (p + 0.20 * (p + 40) - 0.25 * (p + 0.20 * (p + 40))), 96)\n    \n    # Solve the equation to find the value of 'p'.\n    solution = solve(equation, p)\n    \n    # Return the value of Peter's initial sticker count.\n    return solution[0]\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    return 296 // 8\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    sheet_number = 5\n    total_sheets = 36 // 2\n    pages_per_sheet = 4\n\n    back_page_number = total_sheets * 2\n    front_page_number = back_page_number - 1\n\n    n_sheet_back = back_page_number - (sheet_number - 1) * 2\n    n_sheet_front = n_sheet_back - 1\n\n    adjacent_page = n_sheet_front - 1\n    opposite_page = adjacent_page - 1\n\n    sum_of_pages = n_sheet_back + n_sheet_front + adjacent_page + opposite_page\n\n    return sum_of_pages\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    half_number = 10\n    original_number = half_number * 2\n    return original_number\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Let the first term be a1 and the common difference be d.\n    # The first 5 terms are: a1, a1 + d, a1 + 2d, a1 + 3d, a1 + 4d\n    # The last 5 terms are: a1 + 55d, a1 + 56d, a1 + 57d, a1 + 58d, a1 + 59d\n    \n    # Sum of first 5 numbers\n    sum_first_5 = 10\n    # Sum of last 5 numbers\n    sum_last_5 = 120\n    # Number of terms in the arithmetic sequence\n    num_terms = 60\n    \n    # Formula for the sum of an arithmetic sequence\n    # S_n = n/2 * (a1 + a_last)\n    \n    # S_first_5 = 5/2 * (2 * a1 + (5 - 1) * d) = 10\n    # S_last_5 = 5/2 * (2 * (a1 + 55d) + (5 - 1) * d) = 120\n    \n    # Solve the system of equations:\n    # 5/2 * (2 * a1 + 4 * d) = 10\n    # 5/2 * (2 * a1 + 110 * d + 4 * d) = 120\n    \n    # Solve for a1 and d\n    from sympy import symbols, solve\n    \n    a1, d = symbols('a1 d')\n    equation1 = (5/2) * (2*a1 + 4*d) - 10\n    equation2 = (5/2) * (2*a1 + 114*d) - 120\n    solutions = solve((equation1, equation2), (a1, d))\n    \n    a1_value = solutions[a1]\n    d_value = solutions[d]\n    \n    # Use the sum formula for the entire sequence\n    a_last = a1_value + (num_terms - 1) * d_value\n    sum_all_numbers = num_terms / 2 * (a1_value + a_last)\n    \n    return sum_all_numbers\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    common_difference = 4\n\n    # Calculate the number of rows\n    # last_term = first_term + (num_rows - 1) * common_difference\n    num_rows = ((last_term - first_term) / common_difference) + 1\n\n    # Calculate the sum of an arithmetic sequence\n    # sum = num_rows/2 * (first_term + last_term)\n    total_seats = num_rows / 2 * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    # Calculate quantities of digits needed for each range of numbers\n    # Numbers 1-9 need 1 digit each, total = 9\n    # Numbers 10-99 need 2 digits each, total = (99-10+1)*2\n    # Numbers 100-129 need 3 digits each, total = (129-100+1)*3\n    count = (9 * 1) + ((99 - 10 + 1) * 2) + ((129 - 100 + 1) * 3)\n    return count\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    # Let x be the number of laptops and c be the cost of each laptop initially\n    from sympy import symbols, Eq, solve\n\n    x, c = symbols('x c')\n\n    # Original profit equation:\n    # Profit = Selling Price (SP) - Cost Price (CP), given that SP is $2000 per laptop\n    # Profit = x * 2000 - x * c = 60000\n    original_profit = x * 2000 - x * c\n\n    # New cost price due to decrease by 1/5 of the original cost\n    # New CP = CP - 1/5 * CP = 4/5 * CP\n    new_c = 4/5 * c\n\n    # New profit is increased by 30%\n    # New Profit = Old Profit + 30% of Old Profit = 1.3 * Old Profit\n    # New Profit = x * 2000 - x * New CP\n    new_profit = 1.3 * original_profit\n\n    # Set up the system of equations\n    equations = (\n        Eq(original_profit, 60000),\n        Eq(new_profit, x * 2000 - x * new_c)\n    )\n\n    # Solve the system of equations for x and c\n    solutions = solve(equations, (x, c))\n\n    # The solution for x is the number of laptops James bought at first\n    return solutions[x]\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    # Initialize total number of students\n    total_students = 0\n    # Initialize difference between boys and girls\n    diff_boys_girls = 36\n    \n    for layer in range(1, 100):  # Arbitrarily choose 100 as it's reasonably large\n        # Calculate the number of students in the current layer based on layer index\n        # Each layer is a square ring with side length (layer * 2 - 1)\n        # First layer has 1 student, second layer has 3*3 - 1*1 = 8 students, and so on.\n        students_in_layer = (layer * 2 - 1) ** 2 - (layer * 2 - 3) ** 2 if layer > 1 else 1\n        \n        # Alternate between adding to boys and girls depending on whether the layer is even or odd\n        if layer % 2 == 1:\n            boys = students_in_layer\n            girls = 0\n        else:\n            girls = students_in_layer\n            boys = 0\n        \n        # Update total number of students each iteration\n        total_students += boys + girls\n\n        # If the difference between boys and girls reaches the required number, break the loop\n        if boys - girls == diff_boys_girls:\n            break\n    \n    # The result is the total number of students after calculating the required layers\n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    men_initial = 3\n    days_initial = 2\n    length_initial = 120\n\n    men_final = 4\n    length_final = 880\n\n    work_rate_initial = (length_initial) / (days_initial * men_initial)\n    days_final = (length_final) / (work_rate_initial * men_final)\n\n    return days_final\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_weeks = 4\n\n    # People interviewed by Ellie in 4 weeks\n    ellie_work = ellie_rate * combined_weeks\n\n    # Remaining people to be interviewed by Gloria\n    remaining_people = total_people - ellie_work\n\n    # Combined rate per week (Ellie + Gloria)\n    combined_rate = total_people / combined_weeks\n\n    # Gloria's rate per week\n    gloria_rate = combined_rate - ellie_rate\n\n    # Time for Gloria to finish interviewing by herself\n    gloria_time = remaining_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    a = 1  # start checking from the smallest possible non-zero value of `a`\n\n    while True:\n        # Since the remainders form an arithmetic sequence and we know that\n        # arithmetic sequence contains at least three distinct numbers, the\n        # first term can be at least 2 (as remainders with 7, 9 and 28 will\n        # be distinct and increasing).\n\n        for first_remainder in range(2, 7):  # remainder with 7 can't be more than 6\n            # We need to ensure that `a` is greater than first remainder,\n            # otherwise we won't get increasing sequence.\n            if a <= first_remainder:\n                continue\n\n            # Calculate next three remainders based on first_remainder\n            second_remainder = first_remainder + a - 7  # The remainder when M is divided by 9\n            third_remainder = second_remainder + a  # The remainder when M is divided by `a`\n            fourth_remainder = third_remainder + a  # The remainder when M is divided by 28\n\n            # Check if second_remainder is actually a remainder of 9\n            if second_remainder >= 9:\n                continue\n\n            # Check if third_remainder is actually less than a and fourth_remainder is less than 28\n            if third_remainder >= a or fourth_remainder >= 28:\n                continue\n\n            # If M leaves a remainder of `r` when divided by `d`, it can be represented as M = d*k + r.\n            # We can find a common M that satisfies all four conditions, by solving the following equations:\n            # M = 7*k1 + first_remainder\n            # M = 9*k2 + second_remainder\n            # M = a*k3 + third_remainder\n            # M = 28*k4 + fourth_remainder\n\n            # Since we are looking for the smallest M, we try to find it for k4=0 (the smallest non-negative integer),\n            # and then increase k4 until it satisfies all four conditions.\n            M = 28 * 0 + fourth_remainder  # Start with the smallest M for k4 = 0\n            while True:\n                if (M - first_remainder) % 7 == 0 and \\\n                   (M - second_remainder) % 9 == 0 and \\\n                   (M - third_remainder) % a == 0:\n                    return M\n                M += 28  # increase M to check for next value that gives the required remainder with 28\n        \n        a += 1  # increment `a` to check for next possible `a`\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = 2 * 15 / 5\n    return int(numerator)\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Number of books on the first shelf initially\n    first_shelf = 18\n    # Number of books on the second shelf initially\n    second_shelf = 24\n    # Number of books moved from the first shelf to the second shelf\n    books_moved = 0\n\n    # Books need to be moved until the second shelf has twice as many books as the first shelf\n    while second_shelf != 2 * (first_shelf - books_moved):\n        books_moved += 1\n        second_shelf += 1\n\n    return books_moved\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    num1 = 285 * 7 + 6\n    den1 = 7\n    num2 = 181 * 11 + 10\n    den2 = 11\n    num3 = 153 * 13 + 12\n    den3 = 13\n\n    # Calculate the sum of the numerators over the common denominator\n    numerator_sum = (num1 * den2 * den3) + (num2 * den1 * den3) + (num3 * den1 * den2)\n    common_denominator = den1 * den2 * den3\n\n    # Calculate the sum of the reciprocals\n    reciprocal_sum = (den2 * den3) + (den1 * den3) + (den1 * den2)\n\n    # Final calculation: divide the numerator sum by the reciprocal sum\n    ans = numerator_sum / reciprocal_sum\n\n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pupils = symbols('total_pupils')\n\n    band_pupils = 5\n    neither_band_nor_choir = total_pupils * 2 / 9\n    remaining_pupils = total_pupils - band_pupils - neither_band_nor_choir\n    choir_pupils = remaining_pupils * 3 / 4\n\n    equation = Eq(band_pupils + choir_pupils + neither_band_nor_choir, total_pupils)\n\n    solutions = solve(equation, total_pupils)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time_in_seconds = 20\n    distance_in_meters = 300\n    \n    speed_meters_per_second = distance_in_meters / time_in_seconds\n    \n    return speed_meters_per_second\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    for i in range(32, 1000, 4):\n        if (i - 3) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    # Total number of tennis balls\n    total_balls = 47\n    # Capacity of a long tube\n    long_tube_capacity = 8\n    # Capacity of a short tube\n    short_tube_capacity = 5\n\n    # We need to find out how many long tubes we use\n    # Assuming we are using the maximum number of short tubes first\n    # Initialize the number of short tubes to the maximum possible\n    num_short_tubes = total_balls // short_tube_capacity\n\n    # Now iterate over the possible number of short tubes to check for valid long tube count\n    while num_short_tubes >= 0:\n        # Calculate the remaining number of balls after using short tubes\n        remaining_balls = total_balls - num_short_tubes * short_tube_capacity\n        # Check if remaining balls can be filled exactly by long tubes\n        if remaining_balls % long_tube_capacity == 0:\n            return remaining_balls // long_tube_capacity\n        # Decrement the number of short tubes to check the next possibility\n        num_short_tubes -= 1\n\n    return None  # In case there's no solution\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    n3 = 8  # Third term\n    n9 = 26  # Ninth term\n\n    # Calculate the common difference using the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * difference\n    difference = (n9 - n3) // (9 - 3)\n\n    # Calculate the first term\n    first_term = n3 - (3 - 1) * difference\n\n    # Calculate the 11th term using the formula\n    n11 = first_term + (11 - 1) * difference\n\n    return n11\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    numbers_to_sum = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    total_sum = sum(n ** 3 for n in numbers_to_sum)\n    return total_sum\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_rate = 0.15\n    discount_amount = original_price * discount_rate\n    discounted_price = original_price - discount_amount\n\n    return discounted_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let x be the value Will forgot to multiply with the decimal point.\n    # Without the decimal point, the number is 432 instead of 4.32.\n    # The incorrect result was 2138.4 more than the true result.\n    # So, the equation is 432 * x = 4.32 * x + 2138.4\n    # We can solve for x using algebra: x = 2138.4 / (432 - 4.32)\n    \n    incorrect_multiplier = 432\n    corrected_multiplier = 4.32\n    excess_result = 2138.4\n\n    x = excess_result / (incorrect_multiplier - corrected_multiplier)\n    \n    # The true result is then:\n    true_result = corrected_multiplier * x\n    return true_result\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    a = 2758 - 2017\n    b = 3670 - 2758\n    c = 3670 - 2017\n    gcd_ab = math.gcd(a, b)\n    gcd_abc = math.gcd(gcd_ab, c)\n    \n    factors = set()\n    for i in range(1, int(gcd_abc ** 0.5) + 1):\n        if gcd_abc % i == 0:\n            factors.add(i)\n            factors.add(gcd_abc // i)\n    \n    # We exclude 1 and the gcd itself because A should be a proper divisor, not 1 or the number itself.\n    factors.remove(1)\n    factors.remove(gcd_abc)\n    \n    ans = sum(factors)\n    return ans\n\nimport math\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    return 9 + 99 + 999 + 9999\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let's denominate the initial number of bracelets Felicia had as F.\n    # Let's denominate the eventual number of bracelets Felicia has as f.\n    # Let's denominate the eventual number of bracelets Janice has as j.\n    # From the problem, we know that Janice originally had 96 bracelets.\n\n    j_original = 96\n    # Felicia sold 3/5 of her bracelets, and Janice bought 2/5 of those.\n    # Therefore, Felicia loses 3/5 * 2/5 = 6/25 of her original bracelets to Janice.\n    \n    # After selling, Felicia has 5 parts of bracelets and Janice has 7 parts.\n    # With the final total for Janice being J_original + (F * 6/25), we have:\n    # f / (j_original + (F * 6/25)) = 5/7\n\n    # Solving for F:\n    # f = F * (1 - 3/5) = F * 2/5\n    # 2/5 * F / (96 + (6/25)*F) = 5/7\n    # 7 * 2/5 * F = 5 * (96 + (6/25) * F)\n    # 14/5 * F = 480 + (30/25) * F\n    # (70/25) * F = 480\n    # F = 480 * 25 / 70 = 480 / (7 * 2) * 25 = 240 / 7 * 25 = 34 * 25\n    F = 34 * 25\n\n    # Janice bought 2/5 of the bracelets Felicia sold, which is 3/5 of F,\n    # So 2/5 * 3/5 * F bracelets were bought by Janice.\n    bracelets_bought_by_janice = (2/5) * (3/5) * F\n    return bracelets_bought_by_janice\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    for milk in range(1, 1000):\n        fruit = milk * 9 / 7\n        if (milk - 8) * 3 == fruit * 2:\n            return milk\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1  # We start the search from the smallest B that gives a remainder of 1 when divided by 3.\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1  # Increment B and check the next integer.\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # 1st December 2008, grandmother is 80 years old\n    # 1st December 1996, mum is 40 years old\n    # This means that grandmother was 80 - (2008 - 1996) years old when mum was 40\n    grandmother_age_when_mum_was_40 = 80 - (2008 - 1996)\n    \n    # Mum was 40 years old when the grandmother was this age, so\n    # grandmother's age when mum was born = grandmother's age when mum was 40 - mum's age at that time (40 years)\n    grandmother_age_when_mum_was_born = grandmother_age_when_mum_was_40 - 40\n    \n    return grandmother_age_when_mum_was_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for number in range(4, 52):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    # Let b represent the number of boys and g represent the number of girls\n    # We establish the relationship: g = b + 8 (there are 8 more girls than boys)\n    # Each boy gets 5 candies, so boys receive a total of 5b candies\n    # Each girl gets 3 candies, so girls receive a total of 3g candies\n    # The total number of candies is 448, so we have the equation: 5b + 3g = 448\n    # Now we substitute the value of g from the first relationship into this equation\n    # 5b + 3(b + 8) = 448 -> 5b + 3b + 24 = 448 -> 8b + 24 = 448 -> 8b = 424\n    b = (448 - 24) // 8\n    g = b + 8\n    \n    # The total number of children is the sum of boys and girls\n    total_children = b + g\n    return total_children\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    total_income = 2012\n    price_lemonade = 4\n    price_plus = 7\n    total_bottles = 350\n    min_plus_sold = 0\n\n    for plus_sold in range(total_bottles + 1):\n        lemonade_sold = total_bottles - plus_sold\n        income = (lemonade_sold * price_lemonade) + (plus_sold * price_plus)\n        if income == total_income:\n            min_plus_sold = plus_sold\n            break\n\n    return min_plus_sold\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    initial_apples_per_friend = 4\n    apples_total = 60\n    friends = apples_total // initial_apples_per_friend\n    new_apples_per_friend = initial_apples_per_friend + 1\n    additional_apples_needed = friends * new_apples_per_friend\n    \n    return additional_apples_needed\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    max_red_and_black_socks = 10 + 10  # Maximum number of red and black socks he can pick without getting a pair of white\n    white_socks_to_get_pair = 2        # At least 2 white socks are needed to guarantee a pair\n\n    ans = max_red_and_black_socks + white_socks_to_get_pair\n    return ans\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    ans = 546 + 287\n    return ans\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    for x in range(25):\n        y = 24 - x\n        if 4 * x + 6 * y == 112:\n            return y\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    average_initial = 60\n    sum_initial = average_initial * 3\n    average_final = 90\n    sum_final = average_final * 4\n    fourth_number = sum_final - sum_initial\n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    centimeters = meters * 100\n    return centimeters\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        if A != 0:  # The number can't start with 0\n            return A*100 + B*10 + C\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Owen the fisher trades 3 fish for 2 rabbits -> 1 rabbit is equivalent to 1.5 fish\n    fish_per_rabbit = 3 / 2\n\n    # Oscar the hunter trades 3 rabbits for 4 packs of wheat -> 1 pack of wheat is equivalent to 0.75 rabbits\n    rabbit_per_wheat = 3 / 4\n\n    # Calculate the number of fish per pack of wheat\n    fish_per_wheat = fish_per_rabbit * rabbit_per_wheat\n\n    # Calculate the number of fish Owen should give Dennis for 8 packs of wheat\n    fish_for_eight_wheat = fish_per_wheat * 8\n\n    return fish_for_eight_wheat\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'p' be the price of the purse before discount\n    p = symbols('p')\n    \n    # Equation representing the discount of the handbag and purse\n    # Full price of handbag = discounted price / (1 - discount rate)\n    # 428 / (1 - 0.20) -> Full price of handbag before discount\n    # Total discount (handbag + purse) = (Full price of handbag - discounted price of handbag) + (Full price of purse - discounted price of purse)\n    # 121 = (full price of handbag - 428) + (p - p * (1 - 0.28))\n    equation = Eq((428 / (1 - 0.20) - 428) + (p - p * (1 - 0.28)), 121)\n\n    # Solve the equation for the price of the purse before the discount\n    solutions = solve(equation, p)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    return 65 + 88\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    n = 25\n    count = 0\n    i = 5\n    while n // i >= 1:\n        count += n // i\n        i *= 5\n    return count\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # Since only first 20 digits are considered after the decimal, we know that the pattern 'A2' repeats 10 times.\n    # Let's calculate the total sum of digits when the pattern 'A2' repeats 10 times.\n    # Each occurrence of 'A2' adds A+2 to the sum.\n\n    # Given:\n    total_sum = 80  # The sum of the first 20 digits after the decimal point\n    repeats = 10    # The number of repetitions of 'A2' to make up 20 digits\n    \n    # Let's represent 'A' as an integer variable ranging from 0 to 9, since it is a single digit\n    for A in range(10):\n        if (A + 2) * repeats == total_sum:\n            return A\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    well_height = 25\n    climb_up = 4\n    slide_down = 1\n    net_climb = climb_up - slide_down\n\n    day = 0\n    distance_climbed = 0\n\n    while distance_climbed < well_height:\n        day += 1\n        distance_climbed += climb_up\n        if distance_climbed >= well_height:\n            break\n        distance_climbed -= slide_down\n      \n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    weeks = 2\n    total_times = times_per_week * weeks\n    return total_times\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Time spent jogging (from 6:30 AM to 7:00 AM)\n    jogging_time = 0.5  # 30 minutes is 0.5 hours\n    jogging_speed = 6  # miles per hour\n    \n    # Time spent walking (from 7:00 AM to 8:00 AM)\n    walking_time = 1  # 1 hour\n    walking_speed = 5  # miles per hour\n    \n    # Total distance travelled\n    total_distance = (jogging_speed * jogging_time) + (walking_speed * walking_time)\n    \n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variable for original amount of money\n    original_amount = symbols('original_amount')\n\n    # Chair cost\n    chair_cost = 120\n\n    # Equation for the final cost after buying the jacket, which is 30% of the original amount\n    equation = Eq(original_amount - chair_cost - 0.4 * (original_amount - chair_cost), 0.3 * original_amount)\n\n    # Solve the equation\n    solution = solve(equation, original_amount)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    total = 398\n    quarter = total / 4\n    return quarter\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "def solution():\n    from math import lcm\n    \n    return lcm(6, 10)\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    \n    # Using the Pigeonhole Principle, we divide the total books by number of layers\n    # and take the ceiling to find the minimum number of books in the layer with the most books\n    books_at_least = (total_books + layers - 1) // layers\n\n    return books_at_least\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for hundred in range(1, 4):  # 100's place cannot have 0, so it ranges from 1 to 3\n        for ten in range(0, 4):  # 10's place can have 0 to 3, but cannot be same as 100's place\n            if ten != hundred:\n                for one in range(0, 4):  # 1's place can have 0 to 3, but cannot be same as 10's and 100's place\n                    if one != ten and one != hundred:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    difference = -4  # The sequence is decreasing\n\n    # To find the number of terms before the first negative term\n    # Let the nth term be negative\n    # a + (n-1)d < 0, where a is the first term and d is the common difference\n    # 50 + (n-1)(-4) < 0\n    # (n-1) > 50 / 4\n    # n > 12.5, since n must be an integer, and the sequence consists\n    # of a decreasing list of positive integers, we take n = 13\n\n    num_terms = 13  # the 13th term will be the first negative term\n\n    return num_terms\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    a = 1\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            max_product = max(max_product, a * b * c)\n\n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbolic representation of the number of candies Rachel and Alice have\n    rachel, alice = symbols('rachel alice')\n\n    # Rachel gives Alice 10 pieces, and they have an equal number of pieces\n    eq1 = Eq(rachel - 10, alice + 10)\n\n    # After eating 8 pieces each, Rachel has 3 times more pieces than Alice\n    eq2 = Eq((rachel - 8) - 3 * (alice - 8), 0)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (rachel, alice))\n\n    # Calculate the total number of candies they originally had\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight_g = 1200  # Convert 1.2kg to grams\n    piece_weight_g = 30\n    number_of_pieces = total_weight_g / piece_weight_g\n    return int(number_of_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # 1 liter is equivalent to 1.05668821 quarts\n    liters_to_quarts = 1.05668821\n\n    # Hannah's Coke in quarts\n    coke_in_quarts = 2.5 * liters_to_quarts\n\n    # Capacity of her cup in quarts\n    cup_capacity_quarts = 0.5\n\n    # Calculate the number of cups she can drink\n    cups_of_coke = coke_in_quarts / cup_capacity_quarts\n\n    # Round to nearest integer\n    return round(cups_of_coke)\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    # Let the number of books Ahmad originally bought be x.\n    # Then the total cost of those books is 3.50 * x.\n    # After buying 2 more books at 6 each, the total cost becomes 3.50 * x + 2 * 6.\n    # The overall average price becomes 4, and he has x + 2 books in total.\n    # We can set up the equation 4 * (x + 2) = 3.50 * x + 2 * 6 to find x.\n    \n    x = symbols('x')\n    \n    # Total cost for originally bought books\n    total_original_cost = 3.50 * x\n    \n    # Cost for the 2 additional books\n    additional_cost = 2 * 6 \n\n    # Equation based on the new average cost\n    equation = Eq(4 * (x + 2), total_original_cost + additional_cost)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Number of books bought originally + 2 more books\n    total_books = solution[0] + 2\n\n    return total_books\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    return 748 - 189\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    if len({A, 2, 0, C, E, F}) == 6:  # all digits must be different\n                        ABCDEF = A * 100000 + 2 * 10000 + 0 * 1000 + C * 100 + E * 10 + F\n                        EFABCD = E * 100000 + F * 10000 + A * 1000 + 2 * 100 + 0 * 10 + C\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            return A * 1000 + C * 100 + E * 10 + F\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    return 12.3 + 4.9\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    ans = 18 // 3\n    return ans\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Time spent jogging: from 6:30 am to 7:30 am = 1 hour\n    jogging_time = 1\n    \n    # Time spent walking: from 7:30 am to 9:30 am = 2 hours\n    walking_time = 2\n    \n    # Jogging speed in miles per hour\n    jogging_speed = 6\n    \n    # Walking speed in miles per hour\n    walking_speed = 5\n\n    # Total distance = distance jogged + distance walked\n    total_distance = (jogging_time * jogging_speed) + (walking_time * walking_speed)\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n    \n    original_ratio = Eq(angel, 5/6 * belle)\n    after_throwing = Eq(angel - 58, 0.75 * belle)\n    \n    solutions = solve((original_ratio, after_throwing), (angel, belle))\n    \n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n\n    total_shapes = squares + circles + triangles\n\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    ans = (4/9) * 36\n    return ans\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of children and y be the initial amount of money\n    x, y = symbols('x y')\n\n    # 20 pence more than the initial amount gives exactly 70 pence to each child\n    equation1 = Eq(y + 20, 70 * x)\n\n    # When each child receives 60 pence, £2.10 is left over\n    equation2 = Eq(y - 60 * x, 210)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remittance_percentage = 0.20\n    bank_charge_percentage = 0.005\n\n    remittance_amount = salary * remittance_percentage\n    bank_charge = remittance_amount * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count // 6  # Dividing by 6 because the order of the vases doesn't matter\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    account_balance = -76.20\n    payment = 120.75\n\n    new_account_balance = account_balance + payment\n\n    return new_account_balance\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime(2023, 3, 2)\n    end_date = datetime(2023, 4, 15)\n\n    delta = end_date - start_date\n    return delta.days + 1  # Including both the start and end date\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for num in range(1, 10000):\n        if int(str(9) + str(num)[:-1]) == 4 * num:\n            return num\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    import math\n    # Eddie is fixed on the left end, so we are arranging the remaining 6 students.\n    # Avril has to stand next to Eddie, which means Avril has 1 choice (next to Eddie).\n    # Now we need to arrange the remaining 5 students, which can be done in 5! ways.\n    ans = math.factorial(5)\n    \n    # Return the number of different ways the students can line up.\n    return ans\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    initial_cost = 200\n    percentage_increase = 45\n\n    cost_2021 = initial_cost * (1 + percentage_increase / 100)\n\n    return cost_2021\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    numbers = [9, 7, 5, 4, 1, 8, 8]  # Known numbers\n    mean_value = 6\n    total_numbers = 8\n    total_sum = mean_value * total_numbers\n\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    import math\n    # Total circumference of the garden\n    circumference = 300\n\n    # Initial interval of planting trees\n    initial_interval = 3\n\n    # Number of holes dug at initial interval\n    initial_holes = 30\n\n    # New interval of planting trees\n    new_interval = 5\n\n    # Calculate the distance covered by the initial holes\n    initial_distance = initial_holes * initial_interval\n\n    # Remaining distance to be covered with new interval\n    remaining_distance = circumference - initial_distance\n\n    # Calculate the number of holes needed based on the new interval\n    # We subtract 1 because the first hole has been already counted in the initial holes\n    additional_holes = math.ceil(remaining_distance / new_interval) - 1\n\n    return additional_holes\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let rachel_sweets be the number of sweets Rachel originally has\n    # Let alice_sweets be the number of sweets Alice originally has\n    rachel_sweets, alice_sweets = symbols('rachel_sweets alice_sweets')\n\n    # Equation 1: If Rachel gives Alice 10 sweets, they would have the same number of sweets\n    equation1 = Eq(rachel_sweets - 10, alice_sweets + 10)\n\n    # Equation 2: If they both eat 8 sweets, Rachel has 3 times as many sweets left over as Alice\n    equation2 = Eq((rachel_sweets - 8) / 3, alice_sweets - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel_sweets, alice_sweets))\n\n    # The total number of sweets they had originally\n    total_sweets = solutions[rachel_sweets] + solutions[alice_sweets]\n\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    total_combinations = pasta_choices * sauce_choices * topping_choices\n\n    return total_combinations\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    equation = Eq((x + 3) / 4, 12)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Define the number of gloves for each type\n    left_blue = 1\n    left_green = 2\n    right_blue = 3\n    right_green = 4\n    \n    # Start picking gloves one by one\n    # Worst case scenario: picking one glove of each kind until we get a matching pair\n    # The maximum number of attempts without getting a matching pair is when we pick the following gloves:\n    # 1 left-hand blue, 2 left-hand green, 3 right-hand blue\n    # After this, the next glove will guarantee a match, either left-hand green or right-hand blue\n    # Total gloves = 1 (left blue) + 2 (left green) + 3 (right blue) + 1 (to guarantee match) = 7\n    # So the smallest number that guarantees a match is 7, which means none of the provided answers are correct\n    return 7\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    n = 1\n    while not (n % 3 == 1 and n % 4 == 3 and n % 5 == 4):\n        n += 1\n    return n\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # Number of ways to reach the 5th step: 1 step each time or 1-1-1-2 or 1-1-2-1 or 1-2-1-1 or 2-1-1-1 or 2-2-1\n    ways_to_5th = [1, 1, 2, 3, 5, 8][4]  # Same as Fibonacci, index is 4 because we start with 1\n\n    # Number of ways to reach the 10th step from the 5th step\n    # This is a Fibonacci sequence starting from the 5th step\n    # Since he is already on the 5th step, we need to calculate the ways to the 6th (1), 7th (1), 8th (2), 9th (3), and 10th (5)\n    ways_to_10th_from_5th = [1, 1, 2, 3, 5, 8][5]  # Index is 5 because we start with 1 and skip the 5th step\n    \n    # Total ways to climb the stairs is the product of the two scenarios\n    total_ways = ways_to_5th * ways_to_10th_from_5th\n    return total_ways\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for page_num in range(1, 51):\n        if '3' in str(page_num):\n            erased_sum += page_num\n    return erased_sum\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 792\n    digits_per_page = 1\n    number_of_pages = 0\n    while total_digits > 0:\n        number_of_pages += 1\n        total_digits -= digits_per_page\n        if number_of_pages == 9:\n            digits_per_page = 2\n        elif number_of_pages == 99:\n            digits_per_page = 3\n    return number_of_pages\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    # Given data\n    ivan_average = 80\n    billy_average_first_four = 89\n    difference_in_average = 10\n\n    # Calculate the total score of Ivan in five assignments\n    total_ivan_score = ivan_average * 5\n\n    # To have an average score 10 more than Ivan, Billy's total for five assignments should be\n    total_billy_target = (ivan_average + difference_in_average) * 5\n\n    # Calculate the total score of Billy in first four assignments\n    total_billy_first_four_score = billy_average_first_four * 4\n\n    # Find the score needed in the fifth assignment\n    score_needed_fifth_assignment = total_billy_target - total_billy_first_four_score\n\n    return score_needed_fifth_assignment\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length // pipe_length\n    if total_length % pipe_length != 0:\n        num_pipes += 1\n\n    return num_pipes\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # Every pair (x, 1000-x) will sum up to 1000 for x in range(1, 1000)\n    # But since (x, 1000-x) and (1000-x, x) are the same pair, we'll count that only once\n    # Also, we have to include the pair (500, 500)\n    ans = (1000 - 1) // 2 + 1\n    return ans\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    nth_value_to_find = 100  # We want to find the 100th term\n    nth_known_value = 9  # We know the 9th term\n    known_term = 49  # The 9th term value\n    difference = 44 - 39  # Common difference calculated from sequence\n\n    # Calculate the nth term using Arithmetic Sequence nth term formula:\n    # nth_term = a + (n-1)*d where 'a' is the first term and 'd' is the difference\n    # The nth term is calculated relative to the known 9th term\n    nth_term = known_term + (nth_value_to_find - nth_known_value) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "import math\n\ndef solution():\n    m = 1\n    while True:\n        if math.sqrt(1260 * m) % 1 == 0:\n            return m\n        m += 1\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # Initialize variables for storing the maximum result\n    max_result = float('-inf')\n    \n    # Possible positions to insert the first pair of brackets\n    for i in range(5):  # The first bracket can be placed before any of the operators\n        for j in range(i+2, 6):  # The second bracket must be to the right of the first bracket position\n            # Possible positions to insert the second pair of brackets\n            for k in range(j, 6):  # The first bracket of the second pair can be placed after the first pair\n                for l in range(k+2, 7):  # The second bracket must be to the right of the first bracket position of the second pair\n                    \n                    # Create a string of the equation with inserted brackets\n                    equation = f\"{ '15' if i > 0 else '' }{ '+(' if i == 0 else '+' }{ '15' if i == 1 else ''}{'+' if i != 1 and i > 0 else ''}\" \\\n                               f\"{'5' if j > 2 else ''}{'*' if 2 < i < 2 else ''}{'5' if i == 2 else ''}{'*(' if i < 2 and j == 2 else ''}\" \\\n                               f\"{'5' if j == 3 else ''}{'+' if i != 3 and j > 2 else ''}{ '15' if i != 3 and j == 3 else ''}{'+' if i < 3 and j > 3 else ''}{')' if j == 3 else ''}\" \\\n                               f\"{'-' if i < 4 and j < 4 and k > 3 else ''}{'6' if k == 4 else ''}{'+' if i < 4 and j < 4 and k == 4 else ''}\" \\\n                               f\"{'+' if i < 4 and j < 4 and k > 4 else ''}{'(' if k == 4 else ''}{'6' if k > 4 else ''}{'+' if l == 5 else ''}\" \\\n                               f\"{'7' if l == 5 else ''}{')' if k == 4 and l == 5 else ''}{ '+7' if l > 5 else ''}\"\n                    \n                    # Calculate the value of the equation with inserted brackets\n                    result = eval(equation)\n                    \n                    # Keep track of the maximum result\n                    if result > max_result:\n                        max_result = result\n                        max_equation = equation\n\n    return max_result, max_equation\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    # We are looking for a number x that when divided by 4 leaves a remainder of 3,\n    # and when divided by 7 also leaves a remainder of 3.\n    # We will use the Chinese Remainder Theorem to find the smallest such number x,\n    # and then find the remainder when x is divided by 28. \n\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are:\n    # x ≡ 3 (mod 4)\n    # x ≡ 3 (mod 7)\n    congruences = [(3, 4), (3, 7)]\n\n    # Solve the system of congruencies to find x\n    x, modulus = solve_congruence(*congruences)\n\n    # Find the remainder when x is divided by 28\n    remainder = x % 28\n\n    return remainder\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    from math import lcm\n\n    # Find the least common multiple of 8 and 11\n    lcm_8_11 = lcm(8, 11)\n\n    # Since the number leaves a remainder of 6 when divided by 8 or 11,\n    # we start checking from the first number that is greater than 10 with a remainder of 6\n    number = lcm_8_11 + 6\n\n    # Ensure that the number is a two-digit number\n    while number < 10 or number > 99:\n        if number < 10:\n            number += lcm_8_11\n        else:\n            number -= lcm_8_11\n\n    return number\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    cost_of_table = 151.25\n    cost_of_chair = 24.15\n    total_cost = cost_of_table + cost_of_chair\n    return total_cost\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    total_stickers = 38 + 14\n    stickers_left = total_stickers - 9\n    return stickers_left\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    return 2**2015 % 3\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "def solution():\n    from math import factorial\n\n    # Four pupils who insist on standing together can be considered as one unit.\n    # Therefore, we now have 5 units to arrange.\n    units_arrangement = factorial(5)\n    \n    # We then have to arrange the 4 pupils who insist on being together.\n    pupils_arrangement = factorial(4)\n    \n    # The total arrangements is the product of the two possibilities.\n    total_arrangements = units_arrangement * pupils_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # We are interested only in the last digit of the base, which is 9\n    # We notice that powers of 9 have a pattern in their last digits: 9, 1, 9, 1, and so on.\n    # Specifically, 9^1 has last digit 9, 9^2 has last digit 1, 9^3 has last digit 9, 9^4 has last digit 1, etc.\n    \n    # Since we want to find the last digit of 999^99, we only need the last digit of 9^99\n    # We can observe the pattern of the last digit of 9^x to find the last digit of 9^99\n    pattern_of_last_digit = [9, 1]\n    \n    # We note that for any odd power of 9, the last digit is 9\n    # And for any even power of 9, the last digit is 1.\n    # Since 99 is odd, the last digit of 9^99 is the same as 9^1, which is 9.\n    \n    # Alternatively, we could calculate 99 % 2 to find the position in our pattern,\n    # but since 99 is clearly odd, we can skip this step and use the established pattern.\n    \n    ans = pattern_of_last_digit[99 % 2]  # This is equal to pattern_of_last_digit[1]\n    \n    return ans\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n    percent_concentration = (sugar / total_mixture) * 100\n    return percent_concentration\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of the other five ponies\n    x = symbols('x')\n\n    # Initial average value of ponies in the small stable (3 ponies)\n    initial_small_avg = (x + 250000) / 3\n\n    # Initial average value of ponies in the large stable (3 ponies)\n    initial_large_avg = x / 3\n\n    # After Rein Beau moves, average value of ponies in the small stable increases (2 ponies)\n    after_small_avg = (x) / 2\n\n    # After Rein Beau moves, average value of ponies in the large stable increases (4 ponies)\n    after_large_avg = (x + 250000) / 4\n\n    # Set up the equations based on the average value increase in both stables\n    equation1 = Eq(after_small_avg - initial_small_avg, 10000)\n    equation2 = Eq(after_large_avg - initial_large_avg, 10000)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (x))\n\n    # The total value of all six ponies is x plus the value of Rein Beau\n    total_value = solution[x] + 250000\n\n    return total_value\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    # Backtracking the magician's steps based on the final result, which is 1234\n\n    # Step 5: Add 50 to the result (reverse of subtracting 50)\n    result_step_5 = 1234 + 50\n\n    # Step 4: Since the day is added twice, we can divide the result by 2 to reverse this step\n    result_step_4 = result_step_5 // 2\n\n    # Step 3: Divide the result by 50 (reverse of multiplying by 50)\n    result_step_3 = result_step_4 // 50\n\n    # Step 2: Subtract 1 from the result (reverse of adding 1)\n    result_step_2 = result_step_3 - 1\n\n    # Step 1: Divide the result by 4 (reverse of multiplying by 4)\n    month = result_step_2 // 4\n    \n    # Calculate the day by using the result from Step 4 and subtracting the birth month operations\n    day = result_step_4 - (month * 4 * 50) - 50\n\n    return (month, day)\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    n = 60 // 3\n    largest_number = n + 1\n    return largest_number\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    for gold_medals in range(81):  # The maximum number of gold medals possible is 80\n        silver_medals = 80 - gold_medals\n        total_points = 5 * gold_medals + 4 * silver_medals\n        if total_points == 331:\n            return gold_medals\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_of_lamb_per_kg = 8.70\n    cost_of_beef_per_kg = 9.40\n    total_cost = (7 * cost_of_lamb_per_kg) + (30 * cost_of_beef_per_kg)\n    return total_cost\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    from fractions import Fraction\n    \n    women = 80\n    fraction_men = Fraction(5, 8)\n    fraction_children = Fraction(1, 3)\n    \n    # Let total number of spectators be x.\n    # Then number of adults will be 2/3 of total because 1/3 are children.\n    # Then number of men will be 5/8 of the adults (2/3 of total).\n    # The rest will be women: 1 - 1/3 - 5/8 * 2/3 = 80 (number of women)\n    \n    fraction_adults = 1 - fraction_children\n    fraction_men_of_total = fraction_men * fraction_adults\n    \n    # Therefore, we can calculate the number of spectators as follows:\n    # fraction_men_of_total * x + fraction_children * x + women = x\n    # [(fraction_men_of_total + fraction_children) * x] + women = x\n    # women = x - (fraction_men_of_total + fraction_children) * x\n    # women = x * (1 - (fraction_men_of_total + fraction_children))\n    # x = women / (1 - (fraction_men_of_total + fraction_children))\n    \n    total_spectators = women / (1 - (fraction_men_of_total + fraction_children))\n    \n    return total_spectators\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    def new_operation(a, b):\n        if a > b:\n            return a + b\n        else:\n            return a * b\n        \n    ans = new_operation(11, 10)\n    return ans\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    return 10 + 9 - 1\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * ((11/52) / (2 + 3/4) * (4.3 - 1.8)) * 26\n    return result\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    total_diff = 32\n    students = 0\n    \n    for girls in range(1, total_diff, 2):  # Check for every possible odd number of girls\n        boys = girls + total_diff\n        total_students = girls**2 + boys**2\n        \n        if girls % 2 == 1 and boys % 2 == 0 and (girls // 2) * 2 + 1 == boys // 2:\n            students = total_students\n            break\n            \n    return students\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'm' be the rate of work done by a master per day\n    # Let 'a' be the rate of work done by an apprentice per day\n    m, a = symbols('m a')\n\n    # (m + 3a) * 4 = 1 task\n    equation1 = Eq((m + 3*a) * 4, 1)\n\n    # (2m + a) * 3 = 1 task\n    equation2 = Eq((2*m + a) * 3, 1)\n\n    # Solve the equations for m and a\n    solutions = solve((equation1, equation2), (m, a))\n\n    # Find the time taken by 1 apprentice alone\n    time_for_apprentice_alone = 1 / solutions[a]\n\n    return time_for_apprentice_alone\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of roses\n    # Let y be the number of roses planted each month\n    x, y = symbols('x y')\n    \n    # Create two equations based on the given information\n    # Total number of flowers is constant, 300\n    equation1 = Eq(300 - x, (280 - x) + (180 - (300 - x)))\n    # The difference in the number of roses over the months is equal to the number of roses planted each month times the number of months\n    equation2 = Eq(280 - x, y)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    prime_sum = sum(primerange(50, 61))\n    return prime_sum\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    \n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n    \n    nth_term = tenth_term + (102 - 10) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    chinese_books_plus_comics = total_books - english_books\n\n    comics = chinese_books_plus_comics / 3\n    return int(comics)\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n    \n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n    \n    return total_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    total_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + missed_shots\n    average_score = total_score / total_shots\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    apples = 50\n    children = 8\n    least_apples_most_child = 1\n    while True:\n        min_apples_each_child = sum(range(least_apples_most_child - children + 1, least_apples_most_child))\n        if min_apples_each_child + least_apples_most_child <= apples:\n            least_apples_most_child += 1\n        else:\n            break\n    return least_apples_most_child - 1\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    # Numerator of the first complex fraction\n    num1_numerator = 1/30 + 1/6\n    # Denominator of the first complex fraction\n    num1_denominator = 2/25\n    # Numerator of the second complex fraction\n    num2_numerator = 2 - 2/3\n    # Denominator of the second complex fraction\n    num2_denominator = 8/3\n\n    # Calculate the first complex fraction\n    first_complex_fraction = num1_numerator / num1_denominator\n    # Calculate the second complex fraction\n    second_complex_fraction = num2_numerator / num2_denominator\n\n    # The final answer is the sum of the two complex fractions\n    ans = first_complex_fraction + second_complex_fraction\n\n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for i in range(1, 8):\n        count += 1\n    return count - 1  # subtract one to not count the trivial partitioning (8 itself)\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_kg = 0.6\n    cost_per_kg = total_cost / total_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, orange = symbols('apple orange')\n    \n    equation1 = Eq(3*apple + 5*orange, 270) \n    equation2 = Eq(3*apple + 7*orange, 342)\n    \n    solutions = solve((equation1, equation2), (apple, orange))\n    \n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    wear_bow_ties = 18\n    wear_spectacles = 23\n\n    # Using inclusion-exclusion principle,\n    # At least (wear_bow_ties + wear_spectacles - total_men)\n    # men wear both bow ties and spectacles\n    wear_both = wear_bow_ties + wear_spectacles - total_men\n\n    # Maximum number of men not wearing bow ties or spectacles\n    # is total men minus those who wear at least one of the items\n    max_not_wearing_either = total_men - (wear_bow_ties + wear_spectacles - wear_both)\n\n    return max_not_wearing_either\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return (50 / 100) * (20 / 100) * 350\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red, green = symbols('blue red green')\n    \n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n    \n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    result = (1/3) * 414\n    return result\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Since every child must at least get 1 apple and no two of them can have the same number of apples,\n    # we need to ensure that the distribution starts with 1 apple to the child who gets the least.\n    # To maximize the number of apples for the child who gets the most, we distribute the apples in an\n    # increasing order to the four other children, such that the first child gets 1, the second gets 2,\n    # and so on until the fourth child. The fifth child will get the remaining apples.\n\n    # Number of apples to distribute\n    total_apples = 19\n    # Number of children\n    total_children = 5\n\n    # Initialize the number of apples for the first four children\n    # Child 1 gets 1 apple, Child 2 gets 2 apples, ..., Child 4 gets 4 apples\n    apples_distributed = sum(range(1, total_children))  # This is the sum of 1+2+3+4\n\n    # The rest of the apples go to the fifth child (who gets the most)\n    apples_to_fifth_child = total_apples - apples_distributed\n\n    return apples_to_fifth_child\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n\n    # Considering Ali and Bala as a single entity, we have 4 entities now\n    # including Charles, Ella, and Dan who must stand at the furthest left.\n    # So we arrange Dan, and then the remaining 3 entities(Dan is fixed at the left).\n    \n    arrangements_without_Ali_Bala = factorial(3)\n    \n    # Now considering Ali and Bala can rearrange amongst themselves in 2! ways\n    Ali_Bala_arrangements = factorial(2)\n    \n    # Multiplying the two scenarios for total number of arrangements\n    total_arrangements = arrangements_without_Ali_Bala * Ali_Bala_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Define the ratios of trades\n    fish_to_rabbit = 3 / 2  # Owen gives 3 fish for 2 rabbits\n    rabbit_to_wheat = 3 / 4  # Oscar gives 3 rabbits for 4 packs of wheat\n\n    # Calculate how many fishes are equal to one pack of wheat by multiplying the two ratios\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat  # (fishes/rabbits) * (rabbits/wheat) = fishes/wheat\n    \n    # Calculate how many fishes Owen needs to give for 8 packs of wheat\n    fishes_for_8_wheat = 8 / fish_to_wheat  # packs of wheat * (fishes/pack of wheat) = fishes\n\n    return fishes_for_8_wheat\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    \n    # 1-9 use 1 digit each, 9 pages\n    total_digits += 1 * 9\n    \n    # 10-99 use 2 digits each, 90 pages\n    total_digits += 2 * 90\n    \n    # 100-140 use 3 digits each, 41 pages (including page 140)\n    total_digits += 3 * (140 - 99)\n    \n    return total_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    for tens_place_minuend in range(1, 10):\n        for ones_place_minuend in range(10):\n            for tens_place_subtrahend in range(1, 10):\n                for ones_place_subtrahend in range(10):\n                    minuend = tens_place_minuend * 10 + ones_place_minuend\n                    incorrect_subtrahend = 50 + ones_place_subtrahend\n                    correct_subtrahend = 30 + ones_place_subtrahend - 1\n                    incorrect_difference = minuend - incorrect_subtrahend\n                    if incorrect_difference == 36:\n                        correct_difference = minuend - correct_subtrahend\n                        return correct_difference\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Worst case scenario: picking all balls of the most abundant color, plus all of the second most abundant color \n    # and then one of the third color to ensure 3 different colored balls are picked.\n    red_balls = 15\n    white_balls = 9\n    yellow_balls = 6\n    # Pick all yellow balls (which are the fewest), which won't ensure 3 colors.\n    # Then pick all white balls, which still won't ensure 3 colors.\n    # Finally, pick one red ball, which will ensure 3 colors.\n    ans = yellow_balls + white_balls + 1\n    return ans\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    terms = list(range(2, 36, 3))\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_fences = 3.2\n    used_woods = 6.5\n\n    remaining_length = total_length - used_fences - used_woods\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 7, 8]\n    perm = permutations(digits, 3)\n\n    return len(list(perm))\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ellen, lenny = symbols('ellen lenny')\n    \n    # Ellen gives away 12 sweets\n    equation1 = Eq((ellen - 12) * 24, 13 * (ellen + lenny - 12))\n    \n    # Lenny gives away 12 sweets\n    equation2 = Eq((lenny - 12) * 8, 3 * (ellen + lenny - 12))\n    \n    solutions = solve((equation1, equation2), (ellen, lenny))\n    \n    total_sweets = solutions[ellen] + solutions[lenny]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    first_tax_bracket = 0.06 * 50000\n    remaining_income = income - 50000\n    second_tax_bracket = remaining_income * (0.06 + T/100)\n    total_tax = Eq(first_tax_bracket + second_tax_bracket, 10000)\n\n    T_value = solve(total_tax, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # We should put the smallest numbers in the most significant positions (leftmost) of the larger number\n    # and the largest numbers in the most significant positions of the smaller number.\n    # To minimize the difference, we have to minimize the larger number and maximize the smaller number.\n    # This can be done by arranging the digits in descending order for the smaller number\n    # and in ascending order for the larger number. Since we have to use all digits from 0 to 9,\n    # we cannot start the smaller number with 0, so we start with the next smallest digit, which is 1.\n    \n    # Smaller number: 1 followed by 0 and the next three largest digits (9, 8, 7)\n    smaller = int('1' + '0' + '9876')\n    \n    # Larger number: The smallest digit (0) cannot be the most significant digit, so we start with the next one (2)\n    # followed by the remaining smallest digits (01345)\n    larger = int('2' + '01345')\n    \n    # The difference between the two numbers\n    diff = larger - smaller\n    \n    return diff\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "def solution():\n    from math import factorial as fact\n\n    def nPr(n, r):\n        return fact(n) // fact(n - r)\n\n    # Total ways without restrictions (5 presents to 5 children)\n    total_ways = nPr(5, 5) * nPr(2, 0)\n\n    # Ways where Richard gets neither the toy car nor the puzzle\n    ways_richard_neither = nPr(3, 3) * nPr(2, 0)\n    \n    # Ways where Kevin gets neither the toy car nor the calculator\n    ways_kevin_neither = ways_richard_neither\n\n    # Ways where both Richard and Kevin get neither\n    ways_both_neither = nPr(3, 3) * nPr(1, 0)\n\n    # Apply the Inclusion-Exclusion Principle\n    valid_ways = total_ways - (ways_richard_neither + ways_kevin_neither) + ways_both_neither\n\n    return valid_ways\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200\n    tunnel_length = 500\n    speed = 10 # m/s\n    \n    # The total distance is the length of the train plus the length of the tunnel\n    total_distance = train_length + tunnel_length\n    \n    # The duration is the total distance divided by the speed of the train\n    duration = total_distance / speed\n    \n    return duration\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49\n    pounds_bought = 2\n    total_cost_in_pence = cost_per_pound * pounds_bought\n    amount_paid_in_pence = 100  # £1 is equal to 100 pence\n    change_in_pence = amount_paid_in_pence - total_cost_in_pence\n    return change_in_pence\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n\n    n = 0\n    # Set a starting point for n and then iterate until a solution is found.\n    # We can start from n=3 to ensure we have odd n and n+4 (since even number greater than 2 cannot be prime)\n    while True:\n        # Check if all the numbers n, n+4, n+6, n+132, n+250 are prime        \n        if all(isprime(n + i) for i in [0, 4, 6, 132, 250]):\n            return n\n        n += 2  # Increment by 2 to keep n, n+4 odd and potentially prime\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_rabbit, second_rabbit, third_rabbit = symbols('first_rabbit second_rabbit third_rabbit')\n\n    equation1 = Eq(second_rabbit, first_rabbit + 2)\n    equation2 = Eq(third_rabbit, second_rabbit - 0.8)\n    equation3 = Eq(first_rabbit + second_rabbit + third_rabbit, 19.70)\n\n    solutions = solve((equation1, equation2, equation3), (first_rabbit, second_rabbit, third_rabbit))\n\n    return solutions[first_rabbit]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    sugar_concentration = 0.15\n    sugar_weight = total_weight * sugar_concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # km per hour\n    rose_speed = 10  # km per hour\n    time = 10  # hours\n\n    # Distance covered by Jack\n    distance_jack = jack_speed * time\n    # Distance covered by Rose\n    distance_rose = rose_speed * time\n\n    # Distance between Town A and Town B is the difference\n    # in the distances covered by Jack and Rose\n    distance = distance_jack - distance_rose\n\n    return distance\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((2*i)**2 - (2*i - 2)**2 for i in range(2, 1011))\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    return 42.3 + 10.5 + 2.7 - 4.5\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(4.6 * x - 35/100, 0.57)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    max_number = 5000\n    count_7 = max_number // 7\n    count_13 = max_number // 13\n    count_7_and_13 = max_number // (7 * 13)\n\n    # Using Inclusion-Exclusion Principle\n    ans = count_7 + count_13 - count_7_and_13\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        smallest_number = 0\n    else:\n        smallest_number = 3 - remainder\n    return smallest_number\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"SUCCESS\"\n    count = 0\n    unique_perms = set([''.join(p) for p in permutations(word)])\n    for perm in unique_perms:\n        if 'SS' not in perm:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    # Total cost for 138 T-shirts\n    total_cost_for_138_tshirts = (145 - 138) * 56\n\n    # Total money Josephine had at first\n    total_money_josephine_had = total_cost_for_138_tshirts + 56\n\n    return total_money_josephine_had\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n**2 * (n+1)**2) // 4\n    sum_of_numbers = n * (n+1) // 2\n    ans = sum_of_cubes // sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    avg = 119\n    total_numbers = 14\n    total_sum = avg * total_numbers\n    middle_sum = total_sum / 2\n    middle_number = middle_sum / (total_numbers / 2)\n    smallest_number = middle_number - (total_numbers - 1) * 1\n    return int(smallest_number)\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    # The range of heights is from 124cm to 132cm\n    # So there are 132 - 124 + 1 = 9 different heights possible\n    \n    # If at least 4 students are of the same height, we need to make sure\n    # that the previous 3 students at each height do not satisfy the condition.\n    # \"Worst case\" scenario would mean we fill each height with 3 students first.\n    \n    # For 9 different heights, to have 3 students of each height without satisfying the condition:\n    students_per_height_before_condition = 3\n    class_size = students_per_height_before_condition * 9 # This is the worst case without meeting the condition\n\n    # The next student added will inevitably satisfy the condition of 4 students of the same height\n    class_size += 1\n\n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    old_pay_per_hour = 6.50\n    increase_percentage = 12 / 100\n    new_pay_per_hour = old_pay_per_hour * (1 + increase_percentage)\n    \n    return new_pay_per_hour\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Rachel needs 12 minutes to cut a piece of wood into 5 sections.\n    # This means Rachel makes 4 cuts (because 5 sections mean 4 cuts).\n    time_per_cut = 12 / 4\n    \n    # She needs to make the same cut 5 times.\n    # Since 1 cut is already represented in the piece being divided into 5 sections,\n    # we need the time for additional 4 cuts.\n    total_time_for_5_cuts = time_per_cut * (5-1)\n    \n    return total_time_for_5_cuts\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of days David worked\n    x = symbols('x')\n    \n    # David's work rate per day\n    david_rate = 1 / 10\n    \n    # Emma's work rate per day\n    emma_rate = 1 / 18\n    \n    # Total days taken to finish the work\n    total_days = 14\n    \n    # Emma's time working\n    emma_days = total_days - x\n    \n    # Equation based on work done (David's work + Emma's work = 1 complete work)\n    equation = Eq(david_rate * x + emma_rate * emma_days, 1)\n    \n    # Solve the equation for x\n    days_worked_by_david = solve(equation, x)[0]\n    \n    # Days worked by Emma is total days minus the days worked by David\n    days_worked_by_emma = total_days - days_worked_by_david\n    \n    return days_worked_by_emma\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_amount = 126  # In pence\n\n    # Since the number of 2p and 5p coins are equal, let that number be x\n    # 2p coin contribution: 2x\n    # 5p coin contribution: 5x\n\n    # Their total contribution should be 126 pence. So, we have:\n    # 2x + 5x = 126\n    # 7x = 126\n    x = total_amount / 7\n\n    # The total number of coins is twice the number of x, since there are 2 types of coins.\n    total_coins = 2 * x\n\n    return int(total_coins)\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    return (3 ** 2009) % 10\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girls = 36\n    boys_fraction = 5/9\n    adults_fraction = 2/5\n\n    # If x is the total number of people at the party,\n    # fraction of girls = (1 - adults_fraction) * (1 - boys_fraction)\n\n    # 36 girls are (1 - 2/5) * (1 - 5/9) part of the whole party\n    # 36 = x * (1 - 2/5) * (1 - 5/9)\n    # 36 = x * (3/5) * (4/9)\n    # 36 = x * 12/45\n    # x = 36 * 45 / 12\n    x = 36 * 45 // 12\n\n    return x\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    even = 2\n    multiple_of_5 = 5\n    smallest_square = even * multiple_of_5 * multiple_of_5 # because to be a square it should be 5^2\n    return smallest_square\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    child_ticket_cost = 30\n\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n\n    senior_discount = 0.20\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n\n    return senior_ticket_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "def solution():\n    from math import comb\n    \n    # use the stars and bars combinatorial method\n    # N stars (books), K - 1 bars (dividers for kids)\n    N = 20  # books\n    K = 4   # kids\n    \n    # The formula is comb(N + K - 1, K - 1)\n    ans = comb(N + K - 1, K - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men = 3\n    days = 30\n    work = men * days  # Total amount of work done\n\n    men_needed = 2\n    days_needed = work / men_needed  # New number of days required\n\n    return days_needed\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_now = symbols('will_now')\n\n    # In 8 years, Will will be 4 times as old as he was 4 years ago\n    equation = Eq(will_now + 8, 4 * (will_now - 4))\n\n    # Solve the equation to find Will's current age\n    will_age_now = solve(equation, will_now)\n\n    return will_age_now[0]  # we need the first (and should be the only) solution\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2 \n    \n    return sum_seq\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    # Number of ways to choose a train, car, or boat\n    ways_trains = 3\n    ways_cars = 4\n    ways_boats = 2\n    \n    # Total number of ways to go from A to B\n    total_ways = ways_trains + ways_cars + ways_boats\n\n    return total_ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    days = total_pages / pages_per_day\n    return int(days)\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import factorial\n\ndef solution():\n    books = 30 - 2*5  # Each child gets at least two books\n    kids = 5 - 1      # Use stars and bars method, reduce problem by one child\n\n    # Calculate combinations using stars and bars formula: C(books+kids, kids)\n    ans = factorial(books + kids) // (factorial(kids) * factorial(books))\n    \n    return ans\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    # Mason's portion is 2/3 of Chewy's\n    equation1 = Eq(mason, 2/3 * chewy)\n    # Chewy's portion is 40% (or 2/5) of Mike's\n    equation2 = Eq(chewy, 2/5 * mike)\n    # Mason's portion is 550ml less than Mike's\n    equation3 = Eq(mason, mike - 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    # The total amount of soup (in ml)\n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n\n    # Convert ml to litres\n    total_soup_litres = total_soup_ml / 1000\n\n    return total_soup_litres\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    initial_amount = 1000\n    interest_rate = 0.06\n    years = 2\n    \n    balance_after_years = initial_amount * (1 + interest_rate) ** years\n    \n    return balance_after_years\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n    return like_neither\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\n\ndef solution():\n    # All possible operations\n    operations = ['+', '-', '*', '/']\n    max_sum = float('-inf')\n    second_largest_term = None\n\n    # Generate all permutations of operations\n    for perm in permutations(operations, 4):\n        # Calculate the expression for the current permutation of operations\n        term1 = eval(f\"(1/2){perm[0]}(1/9)\")\n        term2 = eval(f\"(1/3){perm[1]}(1/8)\")\n        term3 = eval(f\"(1/4){perm[2]}(1/7)\")\n        term4 = eval(f\"(1/5){perm[3]}(1/6)\")\n        \n        # Calculate the total sum\n        total_sum = term1 + term2 + term3 + term4\n        \n        # Update the max sum and second largest term if this permutation gives a larger sum\n        if total_sum > max_sum:\n            max_sum = total_sum\n            second_largest_term = sorted([term1, term2, term3, term4])[-2]\n\n    # Convert the second largest term to a fraction\n    from fractions import Fraction\n    fraction_term = Fraction(second_largest_term).limit_denominator()\n    \n    # Return the sum of the numerator and the denominator\n    return fraction_term.numerator + fraction_term.denominator\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n    \n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one jug and one cup\n    jug, cup = symbols('jug cup')\n\n    # 4 jugs and 5 cups cost $85\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n\n    # 2 jugs and 2 cups cost $40\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]  # coin values in pence\n    amount = 44  # bus fare in pence\n    min_coins = 0\n    for coin in coins:\n        while amount >= coin:\n            amount -= coin\n            min_coins += 1\n            if amount == 0:\n                return min_coins\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n    total_chairs = classrooms * chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    x = symbols('x')\n    inequality = Eq((x + 3)/(2*x + 5), 0.505)\n\n    # Since x must be an integer, we'll solve the inequality and then find the largest integer less than the solution.\n    solution = solve(inequality, x)\n\n    # Find the largest integer smaller than 47.5 which is 47\n    ans = int(solution[0]) - 1\n\n    return ans\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 89))\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    money_spent = 89.65\n    money_left = 20.35\n\n    total_money = money_spent + money_left\n    return total_money\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # A right angled triangle can only be formed if one side is the diameter of the circle.\n    # There are 12 points, so we can choose a diameter by picking 2 opposite points on the circle.\n    # There are 12/2 = 6 such diameters (diametrically opposite pairs).\n    \n    # Once we have a diameter, the third point for a right triangle can be any of the remaining 10 points.\n    # So for each diameter, there can be 10 possible right triangles.\n\n    # Total right angled triangles:\n    total_right_triangles = 6 * 10  # Number of diameters times points remaining\n\n    return total_right_triangles\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    # Given terms:\n    tenth_term = 23\n    fifteenth_term = 38\n    # Difference between the positions\n    term_diff = 15 - 10\n    # Calculate common difference\n    common_difference = (fifteenth_term - tenth_term) / term_diff\n    # Calculate the 12th term \n    # (12th term = 10th term + 2 * common difference)\n    twelfth_term = tenth_term + 2 * common_difference\n    \n    return int(twelfth_term)\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    # Define a function to calculate the nth term in the sequence\n    def nth_term(n):\n        if n == 1:\n            return 1 / 29\n        # Calculate the denominator terms\n        first_denom = (n - 1) ** 2\n        second_denom = first_denom + 3 * (n - 1)\n        # Return the nth term value\n        return n / (first_denom * second_denom)\n\n    # Calculate the sum of the series\n    ans = sum(nth_term(n) for n in range(1, 8)) + nth_term(1)\n    \n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    class_A = 24\n    class_B = 36\n    class_C = 42\n\n    # Find GCD of the three classes\n    gcd_ab = gcd(class_A, class_B)\n    gcd_abc = gcd(gcd_ab, class_C)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    total = 0\n    sign = 1  # start with a positive sign\n\n    for i in range(200, 0, -1):\n        total += sign * i\n        # Toggle sign after every two numbers\n        if i % 2 == 0:\n            sign *= -1\n\n    return total\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    number_of_children = 200\n    daily_lunch_cost = 4.36\n    number_of_days = 5\n\n    total_payment = number_of_children * daily_lunch_cost * number_of_days\n\n    return total_payment\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_points = 76\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n\n    # Let x be the number of correct answers\n    # Then (total_questions - x) will be the number of incorrect answers\n    # The total score is then x * correct_points + (total_questions - x) * incorrect_points\n    \n    # Set up the equation x * correct_points + (total_questions - x) * incorrect_points = total_points\n    # Solve for x\n    for x in range(total_questions + 1):\n        if x * correct_points + (total_questions - x) * incorrect_points == total_points:\n            return x\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    result = (3/8) * 16\n    return result\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let the cost price be 'cp'\n    cp = symbols('cp')\n\n    # marked price is 20% above the cost price\n    marked_price = cp * 1.20\n\n    # the selling price is 90% of the marked price\n    selling_price = marked_price * 0.90\n\n    # profit is the selling price minus the cost price\n    profit = selling_price - cp\n\n    # given that the profit is $120\n    equation = Eq(profit, 120)\n\n    # solve for cost price\n    cost_price = solve(equation, cp)\n\n    return cost_price[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = total_sheep * 5/8\n    white_sheep = total_sheep * 1/4\n    brown_sheep = total_sheep - (black_sheep + white_sheep)\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n\n    # Define the equation with the absolute value\n    eq = Eq(Abs(x + 1), 2*x + 5)\n\n    # Solve the equation\n    solutions = solve(eq, x)\n\n    return solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    # For four different colored socks\n    ways_different = permutations(4, 4)\n    \n    # For two pairs of different colored socks\n    ways_pairs = permutations(4, 4) // (factorial(2) * factorial(2))\n    \n    return ways_different, ways_pairs\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    number1 = 13.8\n    number2 = 18.6\n\n    halfway = (number1 + number2) / 2\n\n    return halfway\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if 10 * a + b + 10 * b + a + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    ans = 9 * 59\n    return ans\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    # Each person shakes hands with num_people - 1 others, and we divide by 2 to avoid double counting\n    num_handshakes = (num_people * (num_people - 1)) // 2\n    return num_handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    points_for_triangle = 3\n\n    num_triangles = comb(num_points, points_for_triangle)\n\n    return num_triangles\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'beth' represent the number of sweets Beth has before getting extra sweets\n    beth = symbols('beth')\n    \n    # Beth gets 4 additional sweets\n    beth_now = beth + 4\n    \n    # Andre gets 4 additional sweets and has 6 more than Beth now\n    andre_now = beth_now + 6\n    \n    # Total sweets they both had before getting the extra sweets is 24\n    total_sweets = Eq(beth + (beth_now + 6 - 4), 24)\n    \n    # Find the value of 'beth' before the extra sweets\n    beth_before = solve(total_sweets, beth)[0]\n    \n    # The number of sweets Beth has now is 'beth_before' + 4\n    return beth_before + 4\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To ensure a win, Anthea must leave Ben with a number of apples that is\n    # a multiple of 4 at each of their turns, because whatever amount Ben takes (1-3)\n    # Anthea can take the remainder to make the total taken 4.\n    # So Anthea should take a number of apples that makes sure 18 minus that number\n    # is a multiple of 4. The options are 1, 2, 3.\n    # We need to find the number which results in (18 - number) % 4 == 0.\n\n    for anthea_apples in range(1, 4):\n        if (18 - anthea_apples) % 4 == 0:\n            return anthea_apples\n\n    # If the loop fails to return, it means no such number was found,\n    # which would be unexpected in this game scenario.\n    # However, the function must return an integer, so we return a default value.\n    # This line should never be reached if logic is correct.\n    return 0\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    table_mass, chair_mass = symbols('table_mass chair_mass')\n\n    # Set up the system of equations following the question's statement\n    # 3 tables have same total mass as 4 chairs\n    equation1 = Eq(3 * table_mass, 4 * chair_mass)\n    # A table is 2 kg heavier than a chair\n    equation2 = Eq(table_mass, chair_mass + 2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (table_mass, chair_mass))\n\n    return solutions[table_mass]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    taller_than_180 = 4500\n    taller_than_190 = 750\n\n    between_180_and_190 = taller_than_180 - taller_than_190\n\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial\n\n    friends = 5  # Judy's friends\n    positions_for_Judy = 2  # Either end of the line means two possible positions for Judy\n    ways_to_arrange_friends = factorial(friends)  # The number of ways to arrange 5 friends in a line\n\n    total_ways = positions_for_Judy * ways_to_arrange_friends\n\n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    # Andre and Beth initially have a total of 24 sweets\n    equation1 = Eq(andre + beth, 24)\n    \n    # After receiving 4 sweets each, Andre has 6 more sweets than Beth\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    return solutions[beth]\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_of_six_bars = 3.18\n    cost_per_bar = cost_of_six_bars / 6\n    cost_of_five_bars = cost_per_bar * 5\n    return cost_of_five_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    return sum([9, 12, 17, 18, 21, 23])\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    overtakes = 5\n    final_position = 2\n    cars_in_race = overtakes + final_position\n    return cars_in_race\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    return (2 * 12) + 6\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for both sisters' time spent on maths and English\n    elder_maths, younger_maths, elder_english, younger_english = symbols('elder_maths younger_maths elder_english younger_english')\n\n    # Equations based on the problem statement\n    equation1 = Eq(elder_maths, younger_maths + 10)                            # Elder spent 10 more minutes on maths\n    equation2 = Eq(younger_english, elder_english + 4)                         # Younger spent 4 more minutes on English\n    equation3 = Eq(elder_maths + elder_english, 88)                            # Elder spent total 88 minutes\n    equation4 = Eq(younger_maths, younger_english - 12)                        # Younger spent 12 minutes less on maths than English\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (elder_maths, younger_maths, elder_english, younger_english))\n\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # The total sum of the four numbers is 4 * the average\n    total_sum = 4 * 130\n    \n    # The sum of the remaining three numbers after removing one is 3 * the new average\n    remaining_sum = 3 * 110\n    \n    # The difference between the total sum and the remaining sum is the removed number\n    removed_number = total_sum - remaining_sum\n    \n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from sympy import lcm\n\ndef solution():\n    # Convert minutes to seconds\n    light1_cycle = 1 * 60  # first traffic light changes lights every 60 seconds\n    light2_cycle = 1.5 * 60  # second traffic light changes lights every 90 seconds\n\n    # The traffic lights are supposed to turn green at the same time every 9 minutes\n    # Convert this time into seconds as well\n    green_cycle = 9 * 60  # 3 traffic lights turn green every 540 seconds\n\n    # The third traffic light has to have a cycle time that is a\n    # factor of the green_cycle and at least 30 seconds long\n    light3_cycle = green_cycle // lcm(light1_cycle, light2_cycle)\n    \n    # Ensure it is at least 30 seconds long\n    if light3_cycle < 30:\n        light3_cycle = lcm(light1_cycle, light2_cycle)\n\n    return light3_cycle\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # If Leo picks 1 apple, Mia can pick 2 apples to leave 11 apples.\n    # Then no matter if Leo picks 1 or 2 apples, Mia can always adjust her choice to leave a multiple of 3 (9 or 6 apples).\n    # If Leo starts by picking 2 apples, Mia can pick 1 apple to leave 11 apples, then they are back to the first scenario.\n    # The goal for Leo is to leave a multiple of 3 for Mia so that no matter what Mia picks, Leo can always adjust to keep the count a multiple of 3.\n    # Since there's an even number of apples (14), if Leo picks an odd number (either 1 or 3), the total count will become an odd number (either 13 or 11), \n    #  which would enable him to maintain the strategy of leaving a multiple of 3 apples.\n    # Therefore, Leo should pick 1 apple.\n    \n    leo_pick = 1  # Leo's optimal first pick\n    return leo_pick\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let x be the value of one silver spoon and y be the value of one gold ring.\n    # According to the problem, 12 silver spoons have three quarters the value of 6 gold rings:\n    # Hence, 12x = (3/4) * 6y\n    # Simplify to find the value of x in terms of y:\n    # 12x = (18/4)y => 3x = (18/12)y => x = (18/12)y / 3 => x = (3/2)y    \n    # We need to find how many silver spoons have the same value as 3 gold rings:\n    # Let n be the number of silver spoons that have the same value as 3 gold rings, then:\n    # nx = 3y\n    # Substitute x from the previous equation: n * (3/2)y = 3y\n    # Solve for n: n = 3y / (3/2)y => n = 3 / (3/2) => n = 3 * (2/3) => n = 2\n    return 2\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    n = 1  # Start with the smallest possible square\n    while True:\n        # Calculate the total number of boys and girls\n        total_boys = (n * n) // 2 + n // 2\n        total_girls = (n * n) // 2 - (n // 2)\n\n        # Check the difference between boys and girls\n        if total_boys - total_girls == 55:\n            # If the difference is 55, calculate the total number of students\n            return total_boys + total_girls\n        \n        n += 2  # Increase the size of the square, skip even numbers as layers alternate\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of one pencil and one marker\n    pencil, marker = symbols('pencil marker')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n    \n    # Solve the system of equations for the price of one pencil and one marker\n    solutions = solve((equation1, equation2), (pencil, marker))\n    \n    # Calculate the total cost of 7 pencils and 7 markers\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n    \n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    marker_price = 3\n    paintbrush_price = 1\n    total_price = 28\n    total_items = 12\n\n    for markers in range(total_items + 1):\n        paintbrushes = total_items - markers\n        if (marker_price * markers + paintbrush_price * paintbrushes) == total_price:\n            return markers\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of female teachers\n    x = symbols('x')\n    \n    # Equations based on the problem description\n    equation = Eq((3*75 + x*60) / (3 + x), 65)\n    \n    # Solving the equation for x\n    num_female_teachers = solve(equation, x)\n    \n    # Return the number of female teachers\n    return num_female_teachers[0]\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Cora's position gives away the dimensions of the rectangle\n    from_front = 5\n    from_back = 7\n    from_left = 2\n    from_right = 4\n\n    # Calculate total rows and columns\n    total_rows = from_front + from_back - 1\n    total_columns = from_left + from_right - 1\n\n    # Calculate the total number of students\n    total_students = total_rows * total_columns\n\n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    prime_factors = [3, 11, 5]  # 33 = 3 * 11 and 55 = 5 * 11\n    square_factors = {3: 1, 11: 2, 5: 1}  # counts of prime factors\n\n    # For a number to be square, each prime factor's count must be even\n    for factor, count in square_factors.items():\n        if count % 2 != 0:  # if count is odd, make it even\n            square_factors[factor] += 1\n\n    m = 1\n    for factor, count in square_factors.items():\n        m *= factor ** (count // 2)\n\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Start with 2 pieces in each plate, leaving 2 pieces to distribute\n    # The problem becomes finding the number of ways to distribute 2 identical pieces \n    # into 3 plates, which is equivalent to adding 0, 1, or 2 to any of the plates.\n    count = 0\n    for x1 in range(3):  # x1 can be 0, 1, or 2, representing the extra pieces on plate 1\n        for x2 in range(3 - x1):  # x2 is limited by the remaining pieces after x1 is chosen\n            # x3 will be the remaining pieces, which don't have to be iterated over since there are no more choices\n            x3 = 2 - x1 - x2\n            count += 1\n    return count\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "from math import factorial\n\ndef solution():\n    # Since Star must be the first runner, there are 4 remaining teammates to arrange\n    remaining_teammates = 4\n    \n    # The number of ways to arrange the remaining 4 teammates is 4 factorial (4!)\n    ways_to_arrange = factorial(remaining_teammates)\n    \n    return ways_to_arrange\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # The sum of the digits in the thousands, hundreds, tens, and ones places \n    # must be the same for the three numbers, since they share the same digits.\n    # Therefore, the solution involves finding the digits a, b, c, and d such \n    # that a < b < c < d and 1111*(a + b + c + d) = 26352.\n    \n    # We solve for the digits.\n    sum_of_digits = 26352 // 1111\n    \n    # Generate all possible combinations of four different digits\n    for a in range(0, 10):\n        for b in range(a + 1, 10):\n            for c in range(b + 1, 10):\n                for d in range(c + 1, 10):\n                    if a + b + c + d == sum_of_digits:\n                        # Since we want the smallest integer, we return the number with digits a, b, c, d\n                        return int(f'{a}{b}{c}{d}')\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    # We need to find the pattern based on the provided operations and their outcomes.\n    def custom_operation(a, b):\n        # By analyzing the given examples, we can deduce the operator as follows:\n        # (a * b) + (a + b)\n        # This seems to match all given examples, let's apply it:\n        return (a * b) + (a + b)\n    \n    # Now, let's apply our custom operation to 6 ⊗ 12\n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # Given that it takes 60 minutes to cut a piece of wood into 31 segments\n    # This implies we have made 30 cuts since 1 initial piece requires 0 cuts to exist\n    time_for_31_segments = 60  # 60 minutes for 31 segments\n    cuts_for_31_segments = 31 - 1  # 30 cuts for 31 segments\n    \n    # Calculate time taken to make one cut\n    time_per_cut = time_for_31_segments / cuts_for_31_segments\n    \n    # If the cutting speed remains the same, to cut it into 50 segments, we need 49 cuts\n    cuts_for_50_segments = 50 - 1  # 49 cuts for 50 segments\n    \n    # Calculate the total time for 50 segments\n    time_for_50_segments = time_per_cut * cuts_for_50_segments\n    \n    return time_for_50_segments\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "def solution():\n    for num in range(100, 200):\n        if num % 3 == 1 and num % 5 == 3 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    return 210 / 0.7\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002\n    while True:\n        year += 1\n        if str(year) == str(year)[::-1]:\n            break\n    return year - 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    candy_now, nancy_now = symbols('candy_now nancy_now')\n\n    # Initial number of flowers\n    candy_initial = 11\n    nancy_initial = 9\n\n    # After giving some flowers to Nancy\n    equation1 = Eq(candy_now + nancy_now, candy_initial + nancy_initial)  # Total flowers are still the same\n    equation2 = Eq(nancy_now, candy_now + 8)  # Nancy has 8 more flowers than Candy now\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (candy_now, nancy_now))\n\n    # Return the number of flowers Candy has now\n    return solutions[candy_now]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = 'ARRANGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    ways = factorial(len(word))\n    for count in letter_counts.values():\n        ways //= factorial(count)\n        \n    return ways\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    initial_cost = 200\n    increase_percentage = 45 / 100\n    increased_cost = initial_cost * (1 + increase_percentage)\n    \n    return increased_cost\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum_per_day = 60\n    money_from_dad_per_day = 40\n\n    total_days = 3  # Monday, Tuesday, and Wednesday\n\n    total_money = (money_from_mum_per_day + money_from_dad_per_day) * total_days\n\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for i in range(100, 1000):\n        if i // 24 == 36 and i % 24 == 0:\n            return i\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_temp = -5\n    midday_temp = 17\n    overall_change = midday_temp - midnight_temp\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    current_value, step_increment, term = 1, 1, 0\n    while current_value <= 50:\n        term += 1\n        current_value += step_increment\n        step_increment += 1\n    return current_value\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_price_p = 43\n    booklet_price_p = 185\n    total_p = (3 * pen_price_p) + (4 * booklet_price_p)\n    \n    pounds_to_p = 1000 * 10  # £10 in pence\n    change_p = pounds_to_p - total_p\n\n    return change_p / 100  # converting pence back to pounds\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n\n    # Total people is the people in front of her + Sibel herself + people behind her\n    total_people = people_in_front + position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    population = 5384342  # Replace with the actual population figure\n    return population\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through all 3-digit numbers\n        str_num = str(i)\n        # Convert number to string to check adjacent digits\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1  # If adjacent digits differ by at least 7, count it\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for thousand in range(5, 10):\n        for hundred in range(0, 10):\n            if hundred != 0 and thousand % hundred != 0:\n                continue\n            for ten in range(0, 10):\n                if ten != 0 and thousand % ten != 0:\n                    continue\n                for one in range(0, 10):\n                    if one != 0 and thousand % one != 0:\n                        continue\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n    ans = prime(3)\n    return ans\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "from itertools import product\n\ndef solution():\n    possible_digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    \n    # Candidates based on the condition that 1258 has all digits wrong\n    candidates = [digit for digit in possible_digits if digit not in '1258']\n    \n    correct_combination = None\n    \n    # Try all possible combinations of the remaining candidates\n    for combination in product(candidates, repeat=4):\n        combination_str = ''.join(combination)\n        \n        # Check the conditions for each trial\n        if (sum(a == b for a, b in zip(combination_str, '5648')) == 2 and\n            sum(a == b for a, b in zip(combination_str, '3628')) == 2 and\n            sum(a == b for a, b in zip(combination_str, '3147')) == 2 and\n            sum(a == b for a, b in zip(combination_str, '5629')) == 2):\n            \n            # If all conditions are met, we found the correct combination\n            correct_combination = combination_str\n            break\n            \n    return correct_combination\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the unknown quantity\n    unknown = symbols('unknown')\n\n    # Set up the equation based on the problem\n    equation = Eq((unknown + 7) / 9, 9)\n\n    # Solve the equation\n    solution = solve(equation, unknown)\n\n    # The solution will be a list, return the first element\n    return solution[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # If the 4th child is opposite the 22nd child in a circle, the number of children between them\n    # should be half of the total children in the circle.\n    # Positions are 4 and 22, so positions between them is 22 - 4 = 18\n    # Since they are opposite, 18 is half of the circle, therefore the total number\n    # of children in the circle is 18 * 2, which includes the children in the 4th and 22nd positions themselves.\n    \n    children_between = 22 - 4\n    total_children = children_between * 2\n\n    return total_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    difference = 4\n    num_weeks = 10\n\n    last_term = first_term + (num_weeks - 1) * difference\n\n    total_coins = (num_weeks * (first_term + last_term)) // 2\n\n    return total_coins\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2\n    fiona_dresses = gina_dresses // 4\n    total_dresses = gina_dresses + fiona_dresses\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    return 0.8 * 3 * 10\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for marks of A, B, C, D, and E\n    A, B, C, D, E = symbols('A B C D E')\n\n    # We know that average marks for A, B and C is 95 \n    equation1 = Eq((A + B + C) / 3, 95)\n  \n    # Average marks for B, C and D is 94\n    equation2 = Eq((B + C + D) / 3, 94)\n  \n    # E's mark is given as 96\n    equation3 = Eq(E, 96)\n  \n    # B and D have same marks\n    equation4 = Eq(B, D)\n  \n    # A has the highest mark and it's higher than E's 96\n    # Since all scores are above 91, minimum score A can have is 97.\n    equation5 = Eq(A, 97)\n\n    # Use the given information to define A, B, C, D, and E\n    # Then use the sympy's 'solve' function to solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (A, B, C, D, E))\n\n    # Return D's score\n    return solutions[D]\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    initial_amount = 35000\n    final_amount = 37100\n    annual_interest_rate = 1.5 / 100\n    guessed_years = 5\n\n    # Calculate the amount of money using compound interest formula for 5 years\n    amount_after_guessed_years = initial_amount * ((1 + annual_interest_rate)**guessed_years)\n\n    # Compare the calculated amount for 5 years with the actual final amount\n    if abs(amount_after_guessed_years - final_amount) < 0.01:\n        return True  # She is right\n    else:\n        # She is wrong, now find the actual number of years\n        years = 0\n        current_amount = initial_amount\n        while current_amount < final_amount:\n            current_amount *= (1 + annual_interest_rate)\n            years += 1\n        return years  # The actual number of years\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Average weight of all teachers is 65\n    avg_all = 65\n\n    # There are 3 male teachers with an average weight of 75 each\n    num_males = 3\n    avg_males = 75\n    total_weight_males = avg_males * num_males\n\n    # The average weight of female teachers is 60\n    avg_females = 60\n\n    # Let's denote the number of female teachers as 'num_females'\n    # The total weight of all teachers is the average weight times the total number of teachers\n    # which is the sum of male teachers and female teachers (num_males + num_females)\n    # Similarly, the total weight of female teachers is their average weight times their number (avg_females * num_females)\n    # So, we have the equation:\n    # avg_all * (num_males + num_females) = total_weight_males + (avg_females * num_females)\n    # 65 * (3 + num_females) = 225 + (60 * num_females)\n    # Solving for num_females\n\n    num_females = (avg_all * num_males - total_weight_males) / (avg_females - avg_all)\n\n    return int(num_females)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    three_quarters_full_mass = 350\n    one_quarter_full_mass = 250\n    two_quarters_full_mass = three_quarters_full_mass - one_quarter_full_mass\n\n    # Since two_quarters_full_mass is actually the mass of half a jar of Marmite,\n    # the mass of an empty jar is equal to one_quarter_full_mass - half the mass of Marmite (which is two_quarters_full_mass / 2)\n    empty_jar_mass = one_quarter_full_mass - (two_quarters_full_mass / 2)\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_l = 13.15\n    bottle_fraction = 1 / 7\n    bottle_capacity_l = 9.1\n    cup_capacity_ml = 350\n    cups_count = 4\n\n    used_for_bottle_l = bottle_capacity_l * bottle_fraction\n    used_for_cups_l = (cup_capacity_ml * cups_count) / 1000  # converting ml to l\n\n    remaining_soda_l = total_soda_l - (used_for_bottle_l + used_for_cups_l)\n    return remaining_soda_l\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for current ages\n    father, son = symbols('father son')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(father - 6, 5 * (son - 6))\n    equation2 = Eq(father + son, 78)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (father, son))\n\n    # We want the father's current age\n    return solutions[father]\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import sqrt\n\n    # given values\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    A = 0.08  # amplitude in meters (converted from cm)\n    x = 0.04  # position from equilibrium in meters (converted from cm)\n\n    # total energy (E) of the oscillator is given by E = (1/2) * k * A^2\n    total_energy = 0.5 * k * A**2\n\n    # velocity (v) of the block when it's x meters from equilibrium can be found using energy conservation\n    # E = (1/2) * m * v^2 + (1/2) * k * x^2\n    # Therefore, v = sqrt((E - (1/2) * k * x^2) * (2/m))\n    velocity = sqrt((total_energy - 0.5 * k * x**2) * (2 / m))\n\n    # return the total energy and the velocity as a tuple\n    return (total_energy, velocity)\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # If Rose takes 1 marble, 13 remains.\n    # Kylie can then take 1 or 2 marbles, leaving 11 or 12.\n    # No matter what, Rose can always choose 1 or 2 marbles to ensure that\n    # the number of marbles left after her turn is a multiple of 3.\n    # For example:\n    # If Kylie takes 2 (11 left), Rose takes 1 (10 left), then whatever Kylie takes, Rose makes the remaining 9.\n    # If Kylie takes 1 (12 left), Rose takes 2 (10 left), then whatever Kylie takes, Rose makes the remaining 9.\n    # If there are 9 marbles, Rose will win by always making the remaining marbles a multiple of 3 after her turn.\n    # This pattern continues for 6, 3 and finally Rose takes the last marble.\n    # Therefore, Rose must take 1 marble initially to ensure her victory.\n    return 1\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023**0.5\n    b = 2023**0.5\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    pounds = 45\n    pence_per_pound = 100\n    coin_value = 5\n\n    coins = (pounds * pence_per_pound) // coin_value\n\n    return coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let pip_run and bud_run represent the distance Pip and Bud run in one minute, respectively\n    pip_run, bud_run = symbols('pip_run bud_run')\n    \n    # Sum of distances run by Pip and Bud in 3 minutes equals 540 meters\n    total_distance_eq = Eq(pip_run * 3 + bud_run * 3, 540)\n    \n    # Each minute Pip runs 20 meters more than Bud\n    pip_bud_difference_eq = Eq(pip_run, bud_run + 20)\n    \n    # Solve the system of equations\n    solutions = solve((total_distance_eq, pip_bud_difference_eq), (pip_run, bud_run))\n    \n    # Pip's distance in 3 minutes\n    pip_distance_3_minutes = solutions[pip_run] * 3\n    \n    return pip_distance_3_minutes\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of coins in boxes A, B, and C initially\n    A, B, C = symbols('A B C')\n    \n    # Set up equations based on the problem statement\n    equation1 = Eq(A, 4 * B)  # Box A has 4 times as many coins as Box B\n    equation2 = Eq(C + 0.06 * A, 1.22 * C)  # 6% of A are transferred to C and now C has 22% more than originally\n    equation3 = Eq(C + 0.20 * B, 1220)  # 20% of B are transferred to C and now C has 1220 coins\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Return the number of coins in box A at the beginning\n    return solutions[A]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let's assume that Sally initially had 100 bottles of drinks to keep the calculation simple\n    # since we only need to find the percentage increase.\n    \n    # 60% of the 100 bottles are coffee, thus 40% are tea\n    initial_tea_bottles = 40\n    \n    # After buying more bottles of tea, coffee is now 40% of the total\n    # Let's denote the new total number of bottles as x\n    # Then the amount of coffee remains the same, which is 60 bottles\n    # Thus, 60 is 40% of x\n\n    # 0.4x = 60 -> x = 60 / 0.4\n    total_bottles_after_adding_tea = 60 / 0.4\n\n    # Now we find the new number of tea bottles\n    # Which is total_bottles_after_adding_tea - initial_coffee_bottles\n    new_tea_bottles = total_bottles_after_adding_tea - 60\n\n    # The percentage increase in the number of bottles of tea is calculated as follows\n    # ((new_tea_bottles - initial_tea_bottles) / initial_tea_bottles) * 100%\n    percentage_increase = ((new_tea_bottles - initial_tea_bottles) / initial_tea_bottles) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    return hex(int('2A3', 16) + int('17B', 16)).upper()\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    ans = 0.25 * 0.30 * 0.40 * 300\n    return ans\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_red_price = 5 * 2\n    total_green_price = 2 * 5\n    total_white_price = 3 * 10\n\n    total_price = total_red_price + total_green_price + total_white_price\n    total_flowers = 5 + 2 + 3\n\n    average_price = total_price / total_flowers\n    return average_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    total_vehicles = 24\n    total_wheels = 86\n    wheels_per_car = 4\n    wheels_per_tricycle = 3\n\n    # Let tricycles be x and cars be y\n    # x + y = total_vehicles\n    # 3x + 4y = total_wheels\n    \n    for x in range(total_vehicles + 1):\n        y = total_vehicles - x\n        if wheels_per_tricycle * x + wheels_per_car * y == total_wheels:\n            return x\n    \nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    # The tasks are sequential and independent, so the total time is the sum of individual times.\n    wash_watermelons = 1\n    wash_glasses = 3\n    juicer_working = 4\n    pour_juice = 1\n\n    total_time = wash_watermelons + wash_glasses + juicer_working + pour_juice\n\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    # Lewis has 60 pence which is £0.60\n    lewis_money = 0.60\n    # James has £1.10\n    james_money = 1.10\n    # Summing up Lewis's and James's money\n    total_money = lewis_money + james_money\n    return total_money\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    word = 'WINNING'\n    frequency = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    for freq in frequency.values():\n        total_permutations /= factorial(freq)\n    return int(total_permutations)\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 14):  # First stack must have at least 3 books\n        for x2 in range(3, 14):  # Second stack must have at least 3 books\n            x3 = 13 - x1 - x2  # The third stack will have the remaining books\n            if x3 >= 3:  # Third stack must also have at least 3 books\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    return 7 * 0.4\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    from itertools import permutations\n\n    def count_derangements(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n\n    return count_derangements(6)\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "from itertools import permutations\nfrom sympy import factorint\n\ndef solution():\n    # Write all possible numbers\n    numbers = list(range(1, 14))\n    # Calculate the number of factors for each number using factorint\n    factors = {number: sum(factorint(number).values()) for number in numbers}\n    # Store product of factors not picked in possible answers\n    possible_answers = set()\n    \n    for candidate in permutations(numbers, 9):\n        seen_factors = [factors[number] for number in candidate]\n        \n        # Exactly two should know their number of factors,\n        # hence there should be exactly two unique factors in seen factors\n        if len(seen_factors) > len(set(seen_factors)) - 2:\n            continue\n        \n        for alice in candidate:\n            # Alice's number must be an odd number, check even numbers\n            if alice % 2 == 0:\n                continue\n            for may in candidate:\n                # May's number must be Alice's - 2 and cannot be Mark's + 1\n                if alice - may != 2:\n                    continue\n                \n                remaining = [number for number in numbers if number not in candidate]\n                product = 1\n                for number in remaining:\n                    product *= number\n                possible_answers.add(product)\n    \n    # Since we need the unique product\n    if len(possible_answers) == 1:\n        return possible_answers.pop()\n    else:\n        return None\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    total_bottles = 350\n    income = 2012\n    lemonade_price = 4\n    plus_price = 7\n    min_plus_bottles = float('inf')\n\n    for lemonade_bottles in range(total_bottles + 1):\n        plus_bottles = total_bottles - lemonade_bottles\n        total_income = lemonade_bottles * lemonade_price + plus_bottles * plus_price\n        if total_income == income and plus_bottles < min_plus_bottles:\n            min_plus_bottles = plus_bottles\n\n    return min_plus_bottles\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Initial ratio of blue pens to red pens is 3:5\n    # Let's denote the number of blue pens as 3x and the number of red pens as 5x\n    # 3x + 5x = 96 -> 8x = 96 -> x = 12\n    # Thus, there are 3*12 = 36 blue pens and 5*12 = 60 red pens initially\n    \n    # After adding 60 more red pens, we have 60 + 60 = 120 red pens\n    # Let y be the number of blue pens added\n    # The new ratio is given as 40% blue pens, which means 60% red pens\n    # (36 + y) / (96 + 60 + y) = 0.4 -> 36 + y = 0.4 * (156 + y)\n    # 36 + y = 62.4 + 0.4y -> y = 62.4 - 36 -> y = 26.4\n    # Since the number of pens can't be fractional, round down to nearest integer\n    # Thus, y = 26 blue pens were added (as we can't add a part of a pen)\n\n    y = 26\n    return y\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # kilogram\n    final_velocity = 8  # meters per second\n    time = 4  # seconds\n\n    # We use the formula: force = mass * acceleration\n    # And the formula for acceleration: acceleration = (final_velocity - initial_velocity) / time\n    # Since the object is stationary initially, initial_velocity = 0\n\n    initial_velocity = 0\n    acceleration = (final_velocity - initial_velocity) / time\n\n    force = mass * acceleration\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # Since we have boxes of 3 and 7, let's find the largest number\n    # that cannot be formed by these numbers. This is known as the\n    # Frobenius coin problem. The formula for the largest number that\n    # cannot be formed is given by (3*7) - 3 - 7.\n\n    ans = (3 * 7) - 3 - 7\n    return ans\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n\n    # Given conditions\n    equation1 = Eq(correct, 3 * incorrect + 12)\n    equation2 = Eq(5 * correct - 2 * incorrect, 151)\n\n    # Solving the equations\n    answers = solve((equation1, equation2), (correct, incorrect))\n\n    return answers[correct]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    total_cost = 2.42 * 32\n    cost_per_person = total_cost / 11\n    return cost_per_person\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # First convert the numbers from base 7 to decimal\n    num1 = int('45', 7)\n    num2 = int('66', 7)\n\n    # Perform decimal addition\n    decimal_sum = num1 + num2\n\n    # Convert the sum back to base 7\n    base7_sum = ''\n    while decimal_sum > 0:\n        base7_sum = str(decimal_sum % 7) + base7_sum\n        decimal_sum //= 7\n\n    return base7_sum\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n    \n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n    \n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # The total number of matches played is twice the number of matches each\n    # student played, since in each match two students play against each other.\n    total_matches = (4 + 6 + 2 + 1 + 3 + 5) * 2\n\n    # Subtract the matches already played by A, B, C, D, E, and G.\n    # The remaining matches were played by F.\n    matches_F_played = total_matches - (4 + 6 + 2 + 1 + 3 + 5)\n\n    return matches_F_played\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "from sympy import gcd\n\ndef solution():\n    for i in range(1, 20):\n        if gcd(i, i+1) == 1:\n            numbers = set(range(1, 21)) - {i, i+1}\n            lcm_val = 1\n            for number in numbers:\n                lcm_val = lcm_val * number // gcd(lcm_val, number)\n            if all(lcm_val % number == 0 for number in numbers):\n                return i + (i + 1)\n    return 0\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Cici's current age and Linda's current age\n    cici_age, linda_age = symbols('cici_age linda_age')\n\n    # Equation representing the fact that Linda was 11 when Cici was born\n    equation1 = Eq(linda_age - cici_age, 11)\n\n    # Equation representing the sum of their ages 4 years later being 37\n    equation2 = Eq((cici_age + 4) + (linda_age + 4), 37)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cici_age, linda_age))\n\n    # Calculate Linda's age 3 years later\n    linda_future_age = solutions[linda_age] + 3\n\n    return linda_future_age\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    ans = 67 * 23\n    return ans\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    ratio_jamie = 5\n    ratio_natasha = 3\n    difference = 18\n\n    total_ratio = ratio_jamie + ratio_natasha\n    natasha_stamps = difference / (ratio_jamie - ratio_natasha) * ratio_natasha\n    total_stamps = natasha_stamps + (natasha_stamps / ratio_natasha * total_ratio)\n\n    return int(total_stamps)\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    ans = sum(n for n in range(161, 15*15) if n % 15 == n // 15)\n    return ans\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum = num_terms * (first_term + last_term) / 2\n    return int(sum)\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    min_sum = first_number_min + second_number_min\n\n    return min_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_uphill = 300\n    speed_uphill = 10\n    speed_downhill = 30\n\n    time_uphill = distance_uphill / speed_uphill\n    time_downhill = distance_uphill / speed_downhill\n\n    total_distance = distance_uphill * 2\n    total_time = time_uphill + time_downhill\n\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    ways_for_one_person = 5\n    total_people = 4\n    \n    # Since each person can choose from 5 entrances independently,\n    # the number of different ways is the number of ways each person can\n    # choose an entrance raised to the power of the total number of people.\n    \n    ans = ways_for_one_person ** total_people \n    return ans\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    peaches = 18\n    peaches_per_bag = 2\n    bags_needed = peaches // peaches_per_bag\n\n    return bags_needed\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Calculate the number of apples, pears, and oranges that can be distributed\n    distributable_apples = 226 - 10\n    distributable_pears = 352 - 28\n    distributable_oranges = 157 - 13\n    \n    # Find the greatest common divisor (GCD) of the distributable quantities\n    gcd_ap = gcd(distributable_apples, distributable_pears)\n    gcd_all = gcd(gcd_ap, distributable_oranges)\n\n    # The GCD is the biggest possible number of students\n    return gcd_all\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    import math\n    # Judy can stand at either end of the line - 2 choices\n    # The remaining 5 friends can be arranged in 5! ways\n    ways = 2 * math.factorial(5)\n    return ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    other_number = 12 // 6\n    return other_number * 2\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    digit_count, number_length, number = 0, 1, 1\n\n    while digit_count < 200:\n        str_number = str(number)\n        str_length = len(str_number)\n\n        if digit_count + str_length < 200:\n            digit_count += str_length\n            number += 1\n        else:\n            return int(str_number[200 - digit_count - 1])\n\n    return -1  # Indicate an error if this line is reached\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    # Let x be the number of qualified products,\n    # and y be the number of unqualified products.\n    # We have two equations based on the problem:\n    # x + y = total number of products = 500 * 4 (for four days)\n    # 5x - 18y = total points = 9931\n    # Solve for x and y.\n    \n    total_products = 500 * 4\n    total_points = 9931\n\n    for y in range(total_products + 1):\n        x = total_products - y\n        if 5 * x - 18 * y == total_points:\n            return x\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the cost of the shirt be 'c'\n    cost = symbols('c')\n\n    # Original price of the shirt\n    original_price = cost + 40\n\n    # Discounted price\n    discounted_price = original_price * 0.8\n\n    # Profit from selling the shirt\n    profit = Eq(discounted_price - cost, 12)\n\n    # Solving for the cost 'c'\n    cost_value = solve(profit, cost)[0]\n    \n    return cost_value\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = (6.25 * 8.27 * 16) + (1.25 * 0.827 * 8)\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Daniel's current age and his daughter's current age\n    daniel, daughter = symbols('daniel daughter')\n    \n    # Create the equations based on the problem statement\n    # Daniel's age two years ago is 6 times his daughter's age two years ago\n    equation1 = Eq((daniel - 2), 6 * (daughter - 2))\n    # Daniel's age two years from now is 4 times his daughter's age two years from now\n    equation2 = Eq((daniel + 2), 4 * (daughter + 2))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, daughter))\n    \n    # Return Daniel's current age\n    return solutions[daniel]\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let a be April's speed, b be Baye's speed\n    # Let t be the time taken for April to reach point Q the first time\n    \n    # Distance covered by April when she reached Q is 1800 meters\n    # a * t = 1800\n    \n    # When April meets Baye, April would have covered 1800 + 800 meters\n    # Baye would have covered 1800 - 800 meters\n    # April takes the same time to cover 1800 + 800 meters as Baye does to cover 1000 meters, at their original speeds\n    # a * T = 1800 + 800\n    # b * T = 1800 - 800\n    \n    # Since April runs back at 4 times her original speed\n    # 4 * a * (T - t) = 1800\n    # We substitute for a from the first equation: 4 * (1800 / t) * (T - t) = 1800\n    # after simplifying: T = 5 * t / 4\n    \n    # So with the ratio of speeds (a/b) we have the following\n    # a / b = (1800 + 800) / (1800 - 800)\n    \n    # We find the ratio of speeds a / b\n    ratio = (1800 + 800) / (1800 - 800)\n\n    # Since the ratio of the distances they cover is the same as the ratio of their speeds\n    # We find the distance Baye covered when April arrived back at P (since April would cover 4 times that distance)\n    baye_distance_when_april_back = 1800 / (1 + ratio)\n\n    # Baye's total distance away from Q when April arrives back at P:\n    baye_total_distance_from_q = 1800 - baye_distance_when_april_back\n\n    return baye_total_distance_from_q\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n    \n    # Original conditions:\n    equation1 = Eq(hens, 6 * roosters)\n    \n    # After increasing the number of roosters and hens by 60:\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hens, roosters))\n\n    # Number of chickens before the increase = Number of hens + Number of roosters\n    total_chickens_before = solutions[hens] + solutions[roosters]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    total_initial = 7 * 12\n    total_final = 8 * 11\n    eighth_number = total_final - total_initial\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    # The sequence can be broken into two parts, (1+2+3+4+5+6+7+8) + (7+6+5+4+3+2+1) + (1+2)\n    # Since (7+6+5+4+3+2+1) is the same sequence in reverse, we can calculate it once and double it.\n    # Then we simply add (1+2) to complete the sequence.\n    part1 = sum(range(1, 9))\n    part2 = sum(range(1, 8))  # we exclude 8 because it's only counted once in the sequence\n    part3 = 1 + 2\n\n    # Calculate the final answer\n    ans = part1 + part2*2 + part3\n    return ans\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    # define repeating unit and its length\n    repeating_sequence = \"538462\"\n    length_of_sequence = len(repeating_sequence)\n    \n    # calculating the desired position in the repeating sequence\n    position_in_sequence = 2021 % length_of_sequence\n\n    # Correcting the position since Python uses 0-based indexing\n    if position_in_sequence == 0:\n        position_in_sequence = length_of_sequence\n\n    # find the digit at the desired position\n    ans = int(repeating_sequence[position_in_sequence - 1])\n    \n    return ans\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    ans = 8000 * 0.7\n    return ans\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # For two-digit palindromes:\n    for i in range(1, 10):\n        count += 1\n\n    # For three-digit palindromes:\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the original amount of money Bud had\n    x = symbols('x')\n\n    # create the equation based on the problem statement\n    equation = Eq((1/3)*x + (2/5)*x, 132)\n\n    # solve the equation\n    original_amount = solve(equation, x)\n\n    return original_amount[0]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34)\n    part2 = (0.23 + 0.34 + 0.45)\n    part3 = (1 + 0.23 + 0.34 + 0.45)\n    part4 = (0.23 + 0.34)\n\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the masses of the parcels\n    A, B, C = symbols('A B C')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(A, 5 * B)        # A is 5 times B\n    equation2 = Eq(C, B - 75)       # C is 75g less than B\n    equation3 = Eq(A + B + C, 835)  # Sum of A, B, and C is 835g\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the mass of Parcel A\n    return solutions[A]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Worst case scenario: draw all blue and white beads first\n    blue_beads = 5\n    white_beads = 6\n    # Need to draw 5 green beads for sure\n    green_beads_needed = 5\n\n    # Draw all blue and white beads first\n    beads_to_draw = blue_beads + white_beads\n\n    # Then draw 5 green beads\n    beads_to_draw += green_beads_needed\n\n    return beads_to_draw\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    divisible_by_5 = 105 // 5\n    divisible_by_7 = 105 // 7\n    divisible_by_both = 105 // (5 * 7)\n\n    # Apply the inclusion-exclusion principle\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_both\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    pages = 215\n    digits = 0\n\n    # Count digits for all pages\n    for i in range(1, pages + 1):\n        digits += len(str(i))\n\n    return digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') // 3:\n            return num\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 82):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # Ratio of floors John walked (going from 1st to 4th floor is 3 floors)\n    first_walk_floors = 3\n    # Time it took for the first walk (in minutes)\n    first_walk_time = 12\n    \n    # Ratio of floors for the second walk (from 1st to 8th floor is 7 floors)\n    second_walk_floors = 7\n    \n    # Calculate the time for the second walk\n    second_walk_time = (second_walk_floors / first_walk_floors) * first_walk_time\n\n    return second_walk_time\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    count = 0\n    for basket1 in range(7):\n        for basket2 in range(7 - basket1):\n            basket3 = 6 - basket1 - basket2\n            count += 1\n    return count\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Initial ratio of birds to squirrels\n    ratio_birds = 8\n    ratio_squirrels = 5\n\n    # Let the initial total number of birds and squirrels be a common multiple of the ratios\n    total = ratio_birds + ratio_squirrels  # This is the smallest possible total, can be scaled up\n\n    # Original number of birds and squirrels\n    original_birds = (total / (ratio_birds + ratio_squirrels)) * ratio_birds\n    original_squirrels = (total / (ratio_birds + ratio_squirrels)) * ratio_squirrels\n\n    # Number of squirrels increased by 20%\n    new_squirrels = original_squirrels * 1.20\n\n    # Since the total number remains the same, the new number of birds is:\n    new_birds = total - new_squirrels\n\n    # Calculate the percentage of birds that flew away\n    birds_flew_away_percentage = ((original_birds - new_birds) / original_birds) * 100\n\n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5 * a - 2 * b\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_ratios = set()\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder) // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_ratios.add(dividend / quotient)\n    return len(possible_ratios)\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # March to July inclusive\n    \n    total_pizzas = average_pizzas_per_month * number_of_months\n    \n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    page_increase_per_day = 4\n\n    # Calculate the number of days using arithmetic sequence sum formula\n    # last_day_pages = first_day_pages + (num_days - 1) * page_increase_per_day\n    num_days = (last_day_pages - first_day_pages) / page_increase_per_day + 1\n    \n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    ans = 32 * 2.99\n    return ans\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    def custom_operation(x, y):\n        return x + y - (x % 10 + y % 10)\n    \n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # liters\n    juice_drunk = 9  # liters\n    container_volume = 5  # liters\n    \n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_drunk\n    \n    num_containers = -(-remaining_juice // container_volume)  # Ceiling division\n\n    return num_containers\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7\n    next_term = 31 + common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "from itertools import permutations\n\ndef solution():\n    largest_sum = 0\n    for perm in permutations(range(1, 10), 4):\n        D, A, R, T = perm\n        if D + A + R + T == 11 and T + A + R + T == 12 and C + A + R + T == 13:\n            largest_sum = max(largest_sum, A + R + T)\n    return largest_sum\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 20):  # A should be less than 20, as 9/20 < 1/2 and cannot satisfy the first inequality.\n        if 5/9 < 9/A < 1:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    loafs_needed = 35\n    cups_needed = loafs_needed / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    num_friends = 4\n    num_handshakes = num_friends * (num_friends - 1)\n    return num_handshakes\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    # Total number of students\n    total_students = 39\n    \n    # Let the number of boys be b and the number of girls be g.\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for boys (b) and girls (g)\n    b, g = symbols('b g')\n    \n    # Equation based on the given condition: 1/4 of the boys is equal to 2/5 of the girls\n    equation1 = Eq(b / 4, 2 * g / 5)\n    \n    # Equation based on the total number of students\n    equation2 = Eq(b + g, total_students)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n    \n    # Calculate the difference between the number of boys and girls\n    difference = solutions[b] - solutions[g]\n\n    return difference\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left_of_tanya = 3\n    members_right_of_tanya = 5\n    tanya = 1\n\n    total_members = members_left_of_tanya + tanya + members_right_of_tanya\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    numerator = 52\n    denominator = 2/3\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n    \n    # starting from the largest 4-digit number, 9999\n    for possible_factor in reversed(list(primerange(1, 10000))):\n        if 87878 % possible_factor == 0:\n            return possible_factor\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Distance for each stage of the race\n    distance1 = 280\n    distance2 = 400\n    # Remaining distance for the final stage\n    distance3 = 800 - (distance1 + distance2)\n\n    # Speed for each stage of the race\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Time taken for each stage of the race\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time taken\n    total_time = time1 + time2 + time3\n\n    return int(total_time)\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5\n    max_load_per_van = 12\n    number_of_vans = -(-total_weight // max_load_per_van)  # Ceiling division\n    return number_of_vans\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n    initial_stickers = symbols('initial_stickers')\n\n    # Equation 1: Initial number of stickers for Daniel and Patrick are same\n    equation1 = Eq(daniel, initial_stickers)\n    equation2 = Eq(patrick, initial_stickers)\n\n    # Equation 2: Daniel gave away 24 stickers\n    equation3 = Eq(daniel - 24, daniel)\n\n    # Equation 3: Patrick bought another 10 stickers\n    equation4 = Eq(patrick + 10, patrick)\n\n    # Equation 4: In the end, Patrick had twice as many stickers as Daniel\n    equation5 = Eq(patrick, 2 * (daniel - 24))\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (daniel, patrick, initial_stickers))\n\n    return solutions[initial_stickers]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        if n < 0 or m == 0:\n            return 0\n        return count_partitions(n-m, m) + count_partitions(n, m-1)\n\n    ans = count_partitions(5, 5) - 1  # Subtracting 1 to not count the number itself as a partition\n    return ans\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth_below_sea_level = 82\n    plane_height_above_sea_level = 569\n\n    vertical_distance = whale_depth_below_sea_level + plane_height_above_sea_level\n\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    total_girls = 16\n    \n    # Maximum possible number of left-handed pupils\n    max_left_handed = total_pupils - right_handed\n    \n    # The smallest number of right-handed girls would be when all the left-handed pupils are girls\n    # Hence, right-handed girls would be total girls minus max_left_handed girls\n    if max_left_handed >= total_girls:\n        right_handed_girls = 0\n    else:\n        right_handed_girls = total_girls - max_left_handed\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    smallest_diff = float('inf')\n    digits = '123456789'\n    from itertools import permutations\n    perms = list(permutations(digits))\n    for i in range(len(perms)):\n        for j in range(i+1, len(perms)):\n            num1 = int(''.join(perms[i]))\n            num2 = int(''.join(perms[j]))\n            diff = abs(num1 - num2)\n            if diff < smallest_diff:\n                smallest_diff = diff\n    return smallest_diff\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n\n    # Defining the fractions\n    apples = (2/3) * total_fruits\n    bananas = (1/9) * total_fruits\n    lemons = total_fruits - apples - bananas\n\n    # Equation based on the problem statement\n    equation = Eq(apples, lemons + 12)\n\n    # Solving the equation to find the total number of fruits\n    total_fruits_solution = solve(equation, total_fruits)[0]\n\n    # Finding the number of lemons\n    lemons_number = total_fruits_solution - (2/3) * total_fruits_solution - (1/9) * total_fruits_solution\n\n    return lemons_number\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day = 6\n    days = 9\n    total_skirts = sum([skirts_per_day * i for i in range(1, days + 1)])\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_eats = 6\n    qiqi_eats = jenny_eats + 5\n    return qiqi_eats\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    # Probability of living over 20 years\n    prob_over_20 = 0.6\n    # Probability of living over 25 years, conditional on having lived over 20 years\n    prob_over_25_given_over_20 = 0.3 / prob_over_20\n    \n    return prob_over_25_given_over_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # 5 taps take 2 minutes to fill a 1-litre jug\n    # This means one tap would take 5 times longer to fill the same jug\n    time_for_one_tap = 5 * 2\n    \n    # The question asks for the time it takes to fill a 500 ml jug, which is half the size\n    # Therefore, it would take half the time for one tap to fill half the jug\n    time_for_half_litres = time_for_one_tap / 2\n    \n    return time_for_half_litres\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    a = 1\n    while True:\n        if a * a + a + a == 399:\n            break\n        a += 1\n    return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110\n    difference = 20\n    sally_height = ben_height + difference\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_visitors = symbols('total_visitors')\n    children = (3/5) * total_visitors\n    remaining = total_visitors - children\n    men = (1/2) * remaining\n    equation = Eq(children, men + 140)\n    \n    sol = solve(equation, total_visitors)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '4', '6', '7', '8']\n    perms = permutations(digits, 3)\n    max_sum = 0\n    \n    for perm1 in list(perms):\n        remaining_digits = [d for d in digits if d not in perm1]\n        for perm2 in list(permutations(remaining_digits, 3)):\n            number1 = int(''.join(perm1))\n            number2 = int(''.join(perm2))\n            max_sum = max(max_sum, number1 + number2)\n\n    return max_sum\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_volume = 2000  # Total volume in millilitres\n    drank_volume = 350   # Drank volume in millilitres\n\n    remaining_volume = total_volume - drank_volume\n    return remaining_volume\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    return 0.40 * 3280\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    grass_growth_rate = 20 * 12  # Total amount of grass for 20 horses for 12 days\n    sheep_daily_consumption = grass_growth_rate / (60 * 24)  # Daily consumption for one sheep\n    horse_daily_consumption = 4 * sheep_daily_consumption  # Daily consumption for one horse\n\n    total_daily_consumption = 12 * horse_daily_consumption + 88 * sheep_daily_consumption\n    days_to_eat_all_grass = grass_growth_rate / total_daily_consumption  # Total days to eat grassland\n\n    return int(days_to_eat_all_grass)\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Observing the pattern given: 1, 8, 16, 23, 46, 53, ...\n    # Looks like the alternating pattern: +7, *2, +7, *2, +7, ...\n    \n    # Start with the first number\n    current_number = 1\n    \n    # Alternate between adding 7 and multiplying by 2\n    # Since the sequence starts at 1, we look for the 6th operation to find the next term\n    for i in range(1, 6 + 1): \n        if i % 2 == 0:\n            # Even index, multiply by 2\n            current_number *= 2\n        else:\n            # Odd index, add 7\n            current_number += 7\n            \n    # The next number in the sequence after 53 is stored in current_number\n    return current_number\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the amounts of water from each pipe be a (A), b (B), and c (C)\n    a, b, c = symbols('a b c')\n    \n    # Equation for when A and C are turned on\n    equation1 = Eq(a + c, 18)\n    \n    # Equation for when B and C are turned on\n    equation2 = Eq(b + c, 27)\n    \n    # Given: flow rate of B is twice that of A, thus the amounts of water from each are in 2:1 ratio\n    equation3 = Eq(b, 2*a)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    \n    # The capacity of the pool will be the sum of a and b, since C's contribution is included in both\n    pool_capacity = solutions[a] + solutions[b]\n    \n    return pool_capacity\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    matches = 20\n    pay_per_match = 500\n    goals_per_game = 2\n    pay_per_goal = 100\n\n    total_earnings = (matches * pay_per_match) + (matches * goals_per_game * pay_per_goal)\n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_kilograms = 8\n    cost_per_kilogram = total_cost / total_kilograms\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        M, A, T, H = perm\n        # Ensure M and H are not 0, because they are the most significant digits\n        if M == 0 or H == 0:\n            continue\n        MATH = M*1000 + A*100 + T*10 + H\n        HTAM = H*1000 + T*100 + A*10 + M\n        if MATH + HTAM == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    start = 1\n    end = 10\n    ans = sum(range(start, start + end * 2, 2))\n    return ans\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    price_per_box = 19.20\n    number_of_balls = 16\n\n    price_per_ball = price_per_box / number_of_balls\n\n    return price_per_ball\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $2 and $5 notes Cindy originally had\n    two_notes, five_notes = symbols('two_notes five_notes')\n\n    # Define the equations based on the problem statement\n    total_notes_eq = Eq(two_notes + five_notes, 55)  # Equation for the total number of notes\n    spent_two_notes_eq = Eq(two_notes - two_notes / 3 + 8, 5 * (three_sevenths_notes := 3/7 * (two_notes - two_notes / 3 + eight_notes)))  # Equation after spending 1/3 of $2 notes and receiving 8 $5 notes\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, spent_two_notes_eq), (two_notes, five_notes))\n\n    # Calculate the total amount of money Cindy originally had\n    total_money = 2 * solutions[two_notes] + 5 * solutions[five_notes]\n\n    return total_money\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "def solution():\n    from math import factorial as f\n\n    # As Mr. Spencer wants to sit between his two children, we can treat them as a single entity temporarily.\n    # Additionally, there are 3 other people, which makes it effectively 4 entities to arrange.\n\n    # Calculate arrangements of these 4 entities.\n    arrangements_of_4 = f(4)\n\n    # Now, within this single entity of Mr. Spencer and his two children, they can be arranged in 2! ways.\n    # As Mr. Spencer has to be in the middle, there are only two positions where his children can sit.\n    arrangements_within_entity = f(2)\n\n    # Total arrangements is the product of the two possibilities.\n    total_arrangements = arrangements_of_4 * arrangements_within_entity\n\n    return total_arrangements\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2  # Bill eats half of the sweets\n    sweets_left = total_sweets - sweets_eaten\n    sweets_given_away = sweets_left / 3  # Bill gives away a third of the remaining sweets\n    sweets_remaining = sweets_left - sweets_given_away\n    \n    return sweets_remaining\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    first_number = 1.9\n    second_number = 1.99\n    \n    halfway_number = (first_number + second_number) / 2\n\n    return halfway_number\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_marks = 23\n    correct_marks = 5\n    wrong_marks = -2\n    total_questions = 6\n    \n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * correct_marks + wrong * wrong_marks == total_marks:\n            return correct\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    from math import gcd\n\n    factors_A_B = [i for i in range(1, 25) if 24 % i == 0]\n    factors_B_C = [i for i in range(1, 53) if 52 % i == 0]\n\n    min_A_plus_C = float('inf')\n    for b in factors_B_C:\n        if b in factors_A_B:\n            a = 24 // b\n            c = 52 // b\n            if a + c < min_A_plus_C:\n                min_A_plus_C = a + c\n\n    return min_A_plus_C\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # the distance to the friend's house in meters\n    speed = 7      # running speed in meters per minute\n    time = distance / speed  # time in minutes\n\n    return time\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n    \n    # The group A, B, and C can be arranged in 3! ways among themselves.\n    group_abc = factorial(3)\n    \n    # The group E and F can be arranged in 2! ways among themselves.\n    group_ef = factorial(2)\n    \n    # Treat each group (ABC and EF) as a single unit.\n    # Now, we have 6 units to arrange: D, G, H, (ABC), (EF), and I.\n    units_arrangement = factorial(6)\n    \n    # The total arrangements are the product of the arrangements \n    # of each group and the overall units.\n    total_arrangements = units_arrangement * group_abc * group_ef\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    # Let's denote the number we are looking for as x\n    # The equation for this problem is x/3 + 7 = 18\n    # We perform inverse operations to solve for x\n    \n    # Subtract 7 from both sides of the equation to undo the addition\n    result_minus_7 = 18 - 7\n    \n    # Multiply both sides by 3 to undo the division\n    # This will give us x\n    x = result_minus_7 * 3\n\n    return x\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    return 2 * 20 - 1\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    scarfs_per_day, total_scarfs = symbols('scarfs_per_day total_scarfs')\n    \n    days_originally = 6\n    days_faster = 4\n    \n    equation1 = Eq(total_scarfs, days_originally * scarfs_per_day)\n    equation2 = Eq(total_scarfs, days_faster * (scarfs_per_day + 24))\n    \n    solutions = solve((equation1, equation2), (scarfs_per_day, total_scarfs))\n    \n    return solutions[total_scarfs]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # Let x be the number of students and y be the total number of sweets.\n    # From the problem, we have the following equations:\n    # 6x - y = 26 and 5x - y = 5\n    # We can solve the system of equations for x and then y.\n\n    y = symbols('y')\n    equation1 = Eq(6*y - 26, 5*y - 5)\n\n    # By solving this equation, we find the value of y (total number of sweets).\n    sweets = solve(equation1, y)\n\n    return sweets[0]\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    # original ratio 5:3\n    equation1 = Eq(boys/girls, 5/3)\n    # after 15 boys left, the ratio became 5:6\n    equation2 = Eq((boys - 15)/girls, 5/6)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    # calculate the total number of pupils at first\n    total = solutions[boys] + solutions[girls]\n    \n    return total\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1+1, 15):\n            for x3 in range(x2+1, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series = [2, 4, 6, 8, 10, 12, 14]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 675 into its prime factors\n    factors = factorint(675)\n    \n    # To make a perfect square, each prime factor's exponent must be even\n    # For each odd exponent, multiply B by the prime to make it even\n    B = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            B *= prime\n\n    return B\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_fraction = 1/3\n    original_price = sale_price / (1 - discount_fraction)\n    \n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_current_age = 65\n    josh_current_age = (3/5) * (shelby_current_age - 5) + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    product = 10 * 20 * 30 * 40\n    return product\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost_pence = 695  # cost of multipack in pence\n    single_can_cost_pence = 65  # cost of single can in pence\n    individual_cost = 12 * single_can_cost_pence  # cost of 12 cans bought individually\n    savings = individual_cost - multipack_cost_pence  # savings in pence\n    \n    return savings\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    amount = 21.40\n    quarter = amount / 4\n    return quarter\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the unknowns\n    apple, banana = symbols('apple banana')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (apple, banana))\n    \n    # Extract the cost of one banana\n    banana_cost = solution[banana]\n    \n    return banana_cost\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the time Alan would take to paint on his own as 'alan_hours'.\n    alan_hours = symbols('alan_hours') \n\n    # Work done by Alan and Bob per hour when working together\n    work_together_rate = 1 / 4\n    \n    # Bob's work rate per hour\n    bob_rate = 1 / 6\n\n    # Alan's work rate is a portion of the work such that combined with Bob's rate they complete the work in 4 hours\n    alan_rate = work_together_rate - bob_rate\n\n    # Equation representing the relationship between Alan's work rate and time taken\n    equation = Eq(alan_rate, 1 / alan_hours)\n\n    # Solve for Alan's time to paint the room\n    solution = solve(equation, alan_hours)\n\n    return solution[0]\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    ans = 55 * 80 / 100\n    return ans\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n    \n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    interest_rate = 0.08\n    time = 10\n    growth_factor = 1.08 ** time\n\n    account_balance = principal * growth_factor\n\n    return account_balance\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    count = 0\n    # Since we're using digits 1-6, any 4-digit number starting with a digit 3-5 will be within the range.\n    # For the leading digit 3 or 4 or 5, we have 5 options for the second digit, 4 for the third, and 3 for the fourth.\n    count += (3 * 5 * 4 * 3)\n\n    # For numbers starting with '326_', we have '4', '5', or '6' as options for the last digit.\n    count += 3\n\n    # For numbers starting with '327_' to '329_', we can choose any of the remaining 3 digits.\n    count += (3 * 3)\n\n    # For numbers starting with '33' to '51', we again have 5, 4 and 3 options for the remaining digits.\n    count += (19 * 5 * 4 * 3)\n\n    # For numbers starting with '512_', the only option for the last digit is '3' or '4' or '6'.\n    count += 3\n\n    return count\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    number1 = 10024\n    number2 = 3968\n    \n    ans = number1 + number2\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "from math import gcd\n\ndef solution():\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food_consumption = 15\n    total_weeks = 26\n\n    total_food_needed = weekly_food_consumption * total_weeks\n\n    return total_food_needed\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Pinkie's original score as 'p'.\n    p = symbols('p')\n    \n    # Write the equation according to the problem statement.\n    equation = Eq(p - 30, (p / 2) + 10)\n    \n    # Solve the equation for 'p'.\n    original_score = solve(equation, p)\n    \n    return original_score[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n    votes_remaining = total_votes - (mark_votes + nicole_votes + peter_votes)\n    \n    # Peter needs one more vote than half the remaining votes to ensure victory\n    peter_needed_votes = (votes_remaining // 2) + 1\n    \n    return peter_needed_votes\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Alex and Nicholas start with the same amount of money, let this amount be x\n    x = symbols('x')\n\n    # After transactions, Nicholas has 6 times the money left compared to Alex\n    # Nicholas' money after spending: x - 13\n    # Alex's money after spending: x - 58\n    # (x - 13) = 6 * (x - 58)\n    equation = Eq(x - 13, 6 * (x - 58))\n\n    # Solve for x\n    solved_x = solve(equation, x)\n\n    # Calculate the total amount of money they had at first: 2 * x\n    total_amount = 2 * solved_x[0]\n\n    return total_amount\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for candies in range(1, 30):\n        if (candies % 3 == 0) and (candies % 2 == 1) and (candies % 4 == 1) and (candies % 5 == 1):\n            return candies\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - 6*6 - 8*6\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_in_week = 7\n    days_later = 28\n    remainder_days = days_later % days_in_week\n    \n    current_day_number = 1  # Monday is the first day of the week\n    \n    future_day_number = (current_day_number + remainder_days - 1) % days_in_week\n    if future_day_number == 0:\n        future_day_number = days_in_week\n    \n    # Convert the number to the 4-digit format\n    ans = \"{:04d}\".format(future_day_number)\n    return ans\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    initial_flour = 600\n    remaining_flour = 21\n    used_flour = initial_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    return 12.35 + 8.65 + 9.8 - 2.8\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a_two_thirds = 9\n    a = a_two_thirds ** (3/2)  # (a^(2/3))^(3/2) = a^1 = a\n    return a\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    value_of_6_in_54_016 = 6 * 0.001\n    return value_of_6_in_54_016\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2 / 3)\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    total_distance = 240\n    pole_interval = 12\n    \n    num_poles = (total_distance - pole_interval) // pole_interval\n\n    return num_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    # Let the number of rulers be r\n    # Then the number of pencils will be r + 10\n    # The total number of pencils and rulers is 52\n    # So the equation will be r + (r + 10) = 52\n    r = symbols('r')\n    equation = Eq(r + (r + 10), 52)\n\n    # Solve the equation for r\n    ruler_count = solve(equation, r)\n\n    # Return the number of rulers\n    return ruler_count[0]\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean = 11\n    total_sum = mean * (len(numbers) + 1)  # Since mean is the sum divided by count\n    x = total_sum - sum(numbers)\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    first_7_value = 7 * 10**3   # The value of the first 7 in the ten-thousands place\n    second_7_value = 7 * 10     # The value of the second 7 in the tens place\n    ans = first_7_value - second_7_value  # The difference between the two values\n    return ans\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the prices of the dresses\n    blue_dress, red_dress, yellow_dress = symbols('blue_dress red_dress yellow_dress')\n\n    # Equations based on the problem statement\n    equation1 = Eq(blue_dress, 2 * red_dress)\n    equation2 = Eq(yellow_dress, blue_dress + 2.40)\n    equation3 = Eq(blue_dress + red_dress + yellow_dress, 65.40)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (blue_dress, red_dress, yellow_dress))\n\n    return solutions[blue_dress]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # To ensure we have 4 marbles of the same color,\n    # we can take out marbles considering the worst case scenario.\n    \n    # Taking the maximum number of different colored marbles without getting 4 of the same color\n    # would be taking 3 marbles from each color, which equals 3 * 3 = 9 marbles.\n    \n    # One more marble taken out after that will ensure that we have 4 marbles of one color.\n    # Because even if the first 9 marbles you take include 3 of each color,\n    # the next marble you pick has to be the fourth of a color already picked.\n    \n    return 9 + 1\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    girls_ratio = 6\n    total_boys = 200\n\n    total_ratio = boys_ratio + girls_ratio\n    number_of_girls = (total_boys / boys_ratio) * girls_ratio\n    \n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # Since 1/3 in decimal form is 0.333... (repeating)\n    # The sum of any number of digits to the right of the decimal is simply 3 times the number of digits.\n    sum_of_digits = 3 * 1000\n    return sum_of_digits\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15\n    amount = 29\n    result = (percentage / 100) * amount\n    return result\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define the symbol for the original concentration in container A (as a percentage)\n    original_conc = symbols('original_conc')\n\n    # since we're transferring 10 grams each step, the final volume for each container remains the same\n    final_volume_A = 40  # 30 grams water + 10 grams solution\n    final_volume_B = 50  # 40 grams water + 10 grams solution from A\n    final_volume_C = 60  # 50 grams water + 10 grams solution from B\n    \n    # concentration in container A after adding the solution\n    conc_A = (10 * original_conc) / final_volume_A\n    \n    # concentration in container B after transferring from A\n    conc_B = (final_volume_B - 10) * (0) + (10 * conc_A) / final_volume_B\n    \n    # concentration in container C after transferring from B,\n    # which we know it should be 0.5%\n    conc_C = (final_volume_C - 10) * (0) + (10 * conc_B) / final_volume_C\n    \n    # set up the equation based on the final concentration in container C\n    equation = Eq(conc_C, 0.5)\n    \n    # solve for the original concentration\n    original_conc_value = solve(equation, original_conc)\n    \n    return original_conc_value[0]\n\n# calling the function and assigning the answer\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    max_count = 100\n    step = 2\n    \n    ans = max_count // step\n    return ans\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    return (55 + 13) // 4\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    ans = fraction + percentage + decimal\n    return ans\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "from sympy import symbols, solve\n\ndef solution():\n    a, b, c = symbols('a b c', integer=True)\n\n    # Equation for this year's product of ages\n    eq1 = a * b * c - 2016\n\n    # Equation for last year's product of ages\n    eq2 = (a - 1) * (b - 1) * (c - 1) - 1377\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (a, b, c))\n\n    # Filter positive integer solutions as ages cannot be negative or non-integer\n    positive_solutions = [s for s in solutions if all(x.is_real and x > 0 for x in s)]\n\n    # Since the problem states that this problem could be solved without knowing \n    # their actual ages, we assume there is a unique solution for last year's \n    # ages or two years ago (which should be consecutive). If the unique solution\n    # is assumed, we only need a single solution to continue with the calculation.\n    if positive_solutions:\n        a, b, c = positive_solutions[0]\n\n        # Calculate the ages from two years ago and the product\n        two_years_ago_product = (a - 2) * (b - 2) * (c - 2)\n\n        return two_years_ago_product\n    else:\n        return None\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    # Factorial function to help calculate permutations\n    from math import factorial\n\n    # We consider the two people who want to stand next to each other as one unit.\n    # Therefore, instead of calculating permutations for 5, we do for 4 units.\n    permutations_of_4_units = factorial(4)\n\n    # The two people who want to stand next to each other can be arranged in 2! ways,\n    # since they can switch places with each other.\n    arrangements_of_2_people = factorial(2)\n\n    # The total number of ways is the product of the two calculated values\n    total_ways = permutations_of_4_units * arrangements_of_2_people\n\n    return total_ways\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_for_first_three_days = 33\n    average_last_four_days = 18\n    last_four_days = 4 * average_last_four_days\n    total_for_week = total_for_first_three_days + last_four_days\n    average_per_day = total_for_week / 7\n    return average_per_day\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_1 = 12  # weight of first metal in mg\n    nickel_percent_1 = 40  # nickel percentage in the first metal\n\n    weight_2 = 13  # weight of second metal in mg\n    nickel_percent_2 = 60  # nickel percentage in the second metal\n\n    total_nickel = weight_1 * (nickel_percent_1 / 100) + weight_2 * (nickel_percent_2 / 100)\n    total_weight = weight_1 + weight_2\n\n    nickel_concentration = total_nickel / total_weight * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # Total number of games played in a single round-robin tournament with 8 players\n    # Every player plays against every other player exactly once, so we have 7 games per player\n    total_games = 8 * 7 // 2  # Each game involves two players, hence divide by 2\n    \n    # Since every player has a unique number of wins and there are no ties,\n    # the number of wins for each player are 0, 1, 2, ..., 7 (one possibility for each player)\n    \n    # The champion is the one with the most wins, which is 7 in this scenario\n    champion_wins = 7\n    \n    return champion_wins\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    total = 3405\n    n = 1\n\n    while n * (n + 1) // 2 < total:\n        n += 1\n    \n    n -= 1\n    actual_total = n * (n + 1) // 2\n    double_added_number = total - actual_total\n\n    return double_added_number\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    math_club_members = 146 + 94\n    history_to_math_ratio = 7 / 8\n    history_club_members = history_to_math_ratio * math_club_members\n    return int(history_club_members)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Reverse numbers on Zog\n    original_subtrahend = int(str(729)[::-1])\n    original_minuend = int(str(26)[::-1])\n    \n    # Perform subtraction\n    zog_subtraction_result = original_subtrahend - original_minuend\n    \n    # Write the answer in Zog's way (reversed)\n    ans = int(str(zog_subtraction_result)[::-1])\n    \n    return ans\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "import math\n\ndef solution():\n    return math.gcd(45, 60)\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    brother_age_three_years_ago = ashley_age - 3 - 2\n    brother_age_now = brother_age_three_years_ago + 3\n    return brother_age_now\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the initial number of chickens in each pen,\n    # and y as the total number of chickens.\n    x, y = symbols('x y')\n    \n    # Originally, we have 24 pens, so the total number of chickens is 24 * x.\n    # After expanding to 30 pens, we have y = 30 * (x - 6).\n    # These two expressions must be equal, because the total number of chickens doesn't change.\n    equation1 = Eq(24 * x, y)\n    equation2 = Eq(30 * (x - 6), y)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    from sympy import symbols, divisors, solve, Eq\n\n    divisor, dividend, quotient = symbols('divisor dividend quotient', integer=True)\n    remainder = 3\n\n    # Create the equation based on the sum of all parts being 40\n    equation = Eq(divisor + dividend + quotient + remainder, 40)\n\n    # Solve for dividend in terms of divisor and quotient\n    solutions = solve(equation, dividend)\n\n    # Extract the expression for dividend\n    dividend_expr = solutions[0]\n\n    # Initialize the count of valid fractions\n    valid_fractions_count = 0\n\n    # Loop through all possible divisors > remainder and < 40\n    for div in range(remainder + 1, 40):\n        # Calculate the corresponding quotient for each divisor\n        quot_candidates = divisors(dividend_expr.subs(divisor, div) - remainder)\n\n        # Check the fractions for each potential quotient\n        for quot in quot_candidates:\n            if div * quot + remainder == dividend_expr.subs(divisor, div) and quot > remainder:\n                valid_fractions_count += 1\n\n    return valid_fractions_count\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    time_to_pass = 30\n    train_speed = 20  # meters per second\n\n    # Distance covered by the train to completely pass the bridge is the length of the train\n    # plus the length of the bridge\n    # Distance = Speed * Time\n    # train_length + bridge_length = train_speed * time_to_pass\n    bridge_length = (train_speed * time_to_pass) - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_score_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_score_percentage / 100) * total_marks\n    difference = hebe_score - emily_score\n\n    return difference\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Time spent jogging (from 6:30 a.m. to 7:00 a.m.)\n    jogging_time_hours = 0.5  # 30 minutes is 0.5 hours\n    jogging_speed_kmph = 9\n\n    # Distance covered while jogging\n    jogging_distance_km = jogging_speed_kmph * jogging_time_hours\n\n    # Time spent walking (from 7:00 a.m. to 8:00 a.m.)\n    walking_time_hours = 1  # 1 hour\n    walking_speed_kmph = 7.5\n\n    # Distance covered while walking\n    walking_distance_km = walking_speed_kmph * walking_time_hours\n\n    # Total distance traveled\n    total_distance_km = jogging_distance_km + walking_distance_km\n\n    return total_distance_km\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # The first digit cannot be '0' so there are 2 choices ('3' or '4') for the first digit.\n    # The second and third digits can be '0', '3', or '4', which gives 3 choices for each.\n    # Multiply the number of choices for each digit together to get the total combination count.\n    return 2 * 3 * 3\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # S_n = n/2 * (2a + (n - 1)d), where S_n is the sum of the first n terms,\n    # a is the first term, and d is the common difference.\n\n    # S_6 = 64 => 6/2 * (2a + 5d) = 64\n    # S_12 = 156 => 12/2 * (2a + 11d) = 156\n\n    # From S_6, we have 3*(2a + 5d) = 64 => 6a + 15d = 64     (1)\n    # From S_12, we have 6*(2a + 11d) = 156 => 12a + 66d = 156 (2)\n\n    # Now, we will solve for a and d using these two equations\n\n    # Subtracting equation (1) from equation (2), we get:\n    # (12a - 6a) + (66d - 15d) = (156 - 64)\n    # 6a + 51d = 92\n\n    # Simplifying this we get:\n    # a + (51/6)d = (92/6)\n    # Let's call (51/6)d as 'x' for simplification\n    # a + x = 15.333\n\n    # Now, from equation (1) again, we can express 'a' in terms of 'x':\n    # 6a + (5*51/6)d = 64\n    # 6a + 5x = 64\n    # a = (64 - 5x) / 6\n\n    # Substitute a in the 'a + x = 15.333' equation\n    # ((64 - 5x) / 6) + x = 15.333\n    x = (92 / 6) - (64 / 6)\n    d = x * 6 / 51\n\n    # Now having 'd', we can find 'a' from the equation a + x = 15.333\n    a = (64 / 6) - (5 * d)\n\n    # Now we can find S_18 using the formula for sum of first n terms in an arithmetic sequence:\n    S_18 = 18 / 2 * (2 * a + (18 - 1) * d)\n    \n    return S_18\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wins, losses = symbols('wins losses')\n\n    equation1 = Eq(wins, 2 * losses)        # won twice as many games as it lost\n    equation2 = Eq(wins + losses, 63)       # played 63 games in total\n\n    solutions = solve((equation1, equation2), (wins, losses))\n\n    return solutions[losses]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    ans = (55 - 44) * common_factor\n    return ans\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    ans = 3647 // 7\n    return ans\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    return 9 - (-8) + 7 - (-6) + 5 - (-4) + 3 - (-2) + 1\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    # Calculate arrangement for 3 girls as a block\n    girls_block = 1\n    \n    # Calculate permutations for 3 girls within the block\n    girls_permutations = factorial(3)\n    \n    # Calculate permutations for \"3 teachers\" + \"1 girls block\" = 4 units\n    teachers_and_girls_block = factorial(4)\n    \n    # Calculate arrangements for 3 boys between the teachers and girls block unit\n    # We have 5 places (T_G_T_G_T_G) to put 3 boys, where T represent the teachers\n    # or girls block, and G represents a place a boy can go\n    # Because boys cannot stand adjacent to each other\n    # This can be thought of 5 places choose 3 for boys\n    placement_of_boys = factorial(5) / (factorial(3) * factorial(5 - 3))\n    \n    return girls_block * girls_permutations * teachers_and_girls_block * placement_of_boys\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 7 == 4 and number % 8 == 4 and number % 9 == 4:\n            return number\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    total_spent = 5 * x * 12 + 3 * x * 5\n    equation = Eq(total_spent, 120)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    total_students = 5\n    students_to_choose = 2\n\n    ans = comb(total_students, students_to_choose)\n\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the original number of cows and g be the original number of goats\n    c, g = symbols('c g')\n\n    # Given that 65% of the animals were cows and the rest were goats\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # When 240 more animals were added, and the number of goats doubled\n    equation2 = Eq(g * 2, g + 240)\n\n    # The percentage of cows increased by 20% to 85%, so cows = 85% of the total number of animals after adding 240 more animals\n    equation3 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    # Return the original number of goats\n    return solutions[g]\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    large_product = 8 * 9 * 10\n    small_product = 1 * 2 * 3\n    difference = large_product - small_product\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soups = 1 + 1  # 1 option of taking soup + 1 option of not taking it\n    desserts = 2 + 1  # 2 options of desserts + 1 option of not taking dessert\n\n    total_combinations = appetisers * main_courses * soups * desserts\n\n    return total_combinations\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # Compute the area of triangle X with side length 3 cm using Heron's formula\n    # a = b = c, so s = (3+3+3) / 2 = 4.5\n    s_x = 4.5\n    area_x = (s_x*(s_x-3)*(s_x-3)*(s_x-3))**0.5\n    \n    # Compute the area of triangle Y with side length 9 cm using Heron's formula\n    # a = b = c, so s = (9+9+9) / 2 = 13.5\n    s_y = 13.5\n    area_y = (s_y*(s_y-9)*(s_y-9)*(s_y-9))**0.5\n    \n    # Calculate how many times can triangle X fit into triangle Y\n    ans = area_y / area_x\n    \n    return int(ans)\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The children when divided by 8 leave a remainder of 3\n    # The children when divided by 9 leave a remainder of 1\n    # The solve_congruence function expects tuples in the form of (remainder, modulus)\n    congruences = [(3, 8), (1, 9)]\n\n    # Solve the system of congruence equations\n    children_count, _ = solve_congruence(*congruences)\n    \n    # As the children count must be between 100 and 200, we need to add multiples of LCM(8,9) until within range\n    lcm = 8 * 9  # since 8 and 9 are coprime, their LCM is their product\n    while children_count < 100:\n        children_count += lcm\n    \n    # Returning the final answer\n    return children_count\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the number of blue balls in the bag\n    b = symbols('b', integer=True)\n\n    # Total number of balls is 4 red balls plus b blue balls\n    total_balls = 4 + b\n\n    # The probability of drawing one red ball is 4/total_balls\n    # The probability of drawing another red ball is 3/(total_balls-1)\n    # The product of these probabilities should be 2/7\n    equation = Eq((4 / total_balls) * (3 / (total_balls - 1)), 2 / 7)\n\n    # Solve the equation for b\n    solution = solve(equation, b)\n\n    # We want the positive integer solution for the number of blue balls\n    blue_balls = [sol.evalf() for sol in solution if sol.is_real and sol > 0]\n\n    return blue_balls[0]\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    a1 = 6  # First term\n    an = 41  # Last term\n    d = 5  # Common difference\n    n = (an - a1) // d + 1  # Number of terms\n\n    sum_of_series = (n * (a1 + an)) // 2  # Sum of arithmetic series formula\n\n    return sum_of_series\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    # Defining the ratio of weights between the animals\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n\n    # Calculating how many chickens weigh as much as 1 dog\n    # It's the product of the ratios\n    chickens_per_dog = dog_to_rabbit * rabbit_to_chicken\n\n    return chickens_per_dog\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let x be the original number of slices\n    # Terry's family ate 3/5 of the cake, leaving 2/5 of the cake.\n    # She then gave away 2 slices and had 4 slices left.\n    # So, 2/5 of the cake - 2 slices + 4 slices = 4 slices\n    # (2/5)x - 2 + 4 = 4\n    # (2/5)x = 2\n    # x = 2 * (5/2)\n    # x = 5\n    \n    x = 2 * (5 / 2)\n    return int(x)\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time Danny takes to finish the job by himself\n    # Let y be the time Mike takes to finish the job by himself\n    x, y = symbols('x y')\n\n    # Mike and Danny's combined work rate is 1/10 per hour\n    equation1 = Eq(1/x + 1/y, 1/10)\n\n    # Mike works for 8 hours and Danny works for 13 hours to complete the job\n    equation2 = Eq(8/y + 13/x, 1)\n\n    # Solve the equations to find x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the time taken by Danny to finish the job by himself\n    return solutions[x]\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    numbers = [51, 50, -45, 40, -35, 30, -25, 20, -15]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_1 = 3 * 10**2  # The place value of the 3 in the hundreds place\n    place_value_2 = 3 * 10**5  # The place value of the 3 in the hundred thousands place\n    difference = place_value_2 - place_value_1\n    return difference\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    total_cases = 2\n\n    # Applying the Pigeonhole Principle\n    min_pencils_in_a_case = (total_pencils + total_cases - 1) // total_cases\n\n    return min_pencils_in_a_case\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    for m in range(1, 66):\n        if m + sum(range(m + 1, m + 10 + 1)) == 66:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    interval = 3\n    \n    # Number of chess pieces along one side equals the side length divided by the interval\n    # We subtract 1 because the corner piece will be counted twice for two adjacent sides\n    pieces_per_side = (side_length // interval) - 1\n\n    # Total chess pieces for all four sides\n    total_pieces = 4 * pieces_per_side + 4  # Adding 4 for each corner\n\n    return total_pieces\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    term = first_term\n    num_terms = 0\n    \n    while term > 0:\n        term += difference\n        num_terms += 1\n    \n    return num_terms\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent_amount = 2.89\n    received_amount = 4 / 5\n\n    remaining_amount = initial_amount - spent_amount + received_amount\n\n    return round(remaining_amount, 2)\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100): # Start from 32 because 3162 is the smallest 4-digit square\n        num = i**2\n        str_num = str(num)\n        if str_num[0] == str_num[1] and str_num[2] == str_num[3]:\n            return num\n            \nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    count_of_twos = 0\n    count_of_fives = 0\n    n = 1\n\n    while True:\n        temp_n = n\n        while temp_n % 2 == 0:\n            count_of_twos += 1\n            temp_n //= 2\n        while temp_n % 5 == 0:\n            count_of_fives += 1\n            temp_n //= 5\n        if min(count_of_twos, count_of_fives) >= 28:\n            break\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3 * m - 1) + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    # Tim's speed (km/h)\n    speed_tim = 56\n    # Bob's speed (km/h)\n    speed_bob = 74\n    # Initial distance between Tim and Bob (km)\n    initial_distance = 780\n    # Remaining distance between Tim and Bob (km) when they meet for the first time\n    remaining_distance = 130\n    # Combined speed of Tim and Bob (km/h)\n    combined_speed = speed_tim + speed_bob\n    # Distance covered when they meet for the first time (km)\n    distance_covered = initial_distance - remaining_distance\n    # Time taken to cover the distance (hours)\n    time_taken = distance_covered / combined_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "def solution():\n    from sympy import factorial as fact\n\n    power_of_2 = 27\n    # The product has to be arranged among 10 digits, only using the primes that make up 2^27.\n    # Therefore, we have only 2s to distribute. We can use 1's where we don't want to use any 2's.\n    # Digits can be: 1, 2, 4, 8 - Taking 1 as 2^0, 2 as 2^1, 4 as 2^2, 8 as 2^3\n    # We need to partition 27 into 10 parts where each part is either 0, 1, 2, or 3 (including multiple uses of each)\n    # Use stars and bars for partitioning, where there are 3 types of 'stars' (for the powers of 2) and 9 'bars' (partitions).\n    \n    # Calculate numbers of setting bars (9 bars on 30 places - 27 stars and 3 extra places for bars)\n    total_ways_to_place_bars = fact(30) // (fact(9) * fact(30 - 9))\n\n    # There are 30 places to arrange 9 identical items (bars) and 21 identical items (stars for powers of 2).\n    # Any placement of bars defines a unique number, as the stars to the left of the first bar are the count of 2's for the first digit, and so on.\n    \n    # However, leading zeros are not permitted. Thus, we cannot have a bar at the first position. We subtract these cases.\n    # This is the same as placing 9 bars in 29 positions.\n    leading_zero_cases = fact(29) // (fact(9) * fact(29 - 9))\n\n    # Subtract cases with leading zero from total ways\n    valid_cases = total_ways_to_place_bars - leading_zero_cases\n\n    return valid_cases\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # The smallest possible number of red squares occurs when the distribution\n    # of digits maximizes the number of digits that appear exactly 4 times\n    # (as they won't count towards the red squares).\n\n    # If each digit from 0-9 appears exactly 4 times, that would fill 40 squares.\n    # There are 100 squares in total, which means 60 squares will have to be\n    # distributed among the digits, making them red.\n\n    # Since we need to maximize the number of non-red squares, we start by filling\n    # each digit from 0-9 with 4 squares. Then, we distribute the remaining\n    # 60 squares to as few digits as possible to minimize the number of red digits.\n    # Each digit can have up to 4 non-red squares, so we fill the rest to make them red.\n    # Distributing 60 squares among as few digits as possible means that each of these\n    # digits will have 9 squares (4 non-red and 5 red).\n\n    # We can calculate the number of digits needed to fill up the remaining squares\n    # by dividing the 60 squares with 5 (the minimum number of red squares per digit).\n    digits_with_red_squares = 60 // 5\n\n    # The total number of red squares is then\n    red_squares = digits_with_red_squares * 5\n\n    return red_squares\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    net_distance_per_day = day_climb - night_slide\n    days_passed = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days_passed += 1\n        distance_climbed += day_climb\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_slide\n        \n    return days_passed\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    return 6 - 4.226\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    numbers_sum = 5 * 5\n    known_sum = 3 + 4 + 6 + 10\n    fifth_number = numbers_sum - known_sum\n    \n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "from math import lcm\n\ndef solution():\n    akon_cycle = 4\n    ben_cycle = 7\n    cris_cycle = 8\n\n    ans = lcm(akon_cycle, ben_cycle, cris_cycle)\n    \n    return ans\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = str(year)\n        if len(set(digits)) == 4:  # Ensure all digits are different\n            # Check if the digits are consecutive\n            dig_list = sorted([int(dig) for dig in digits])\n            if all(dig_list[i] + 1 == dig_list[i+1] for i in range(len(dig_list) - 1)):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    ans = 10 * 10 + 35 * 0.1 + 8 * 0.01\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    decimal_part = \"8354\" # The decimal part that repeats\n    sum_digits = 0\n\n    for i in range(84):\n        sum_digits += int(decimal_part[i % 4])\n\n    return sum_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    \n    average_distance = total_distance / number_of_people\n    \n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # Each time it strikes except for the last one, there's a gap until the next strike starts. \n    # For 6 strikes, there are 5 gaps. \n    gaps_for_6_strikes = 6 - 1\n    \n    # Total time for 6 strikes minus the time of the strikes themselves gives the total gap time\n    total_gap_time_for_6_strikes = 43 - (6 * 3)\n    \n    # Duration of each gap\n    duration_each_gap = total_gap_time_for_6_strikes / gaps_for_6_strikes\n    \n    # For 12 strikes, there are 11 gaps.\n    gaps_for_12_strikes = 12 - 1\n    \n    # Total gap time for 12 strikes\n    total_gap_time_for_12_strikes = duration_each_gap * gaps_for_12_strikes\n    \n    # Total time for 12 strikes\n    total_time_for_12_strikes = (12 * 3) + total_gap_time_for_12_strikes\n    \n    return total_time_for_12_strikes\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return cost_per_person\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import comb\n\ndef solution():\n    # Since each kid should get at least one pen, we first give one pen to each kid.\n    remaining_pens = 20 - 6  # 14 pens remain after giving 1 pen to each kid.\n\n    # Now we need to distribute the remaining 14 pens to 6 kids, which is equivalent to\n    # partitioning 14 indistinguishable items into 6 distinguishable boxes.\n    # This is solved using stars and bars method and the formula is C(remaining_pens + kids - 1, kids - 1).\n    \n    ans = comb(remaining_pens + 6 - 1, 6 - 1)\n    return ans\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    ans = 53 * 58\n    return ans\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    people = 6\n    time = 15\n    target_time = 2\n    work_rate = people / time  # rate of work of the 6 people\n\n    people_needed = work_rate * target_time\n\n    return round(people_needed)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz = 30  # time in minutes\n    num_quizzes = 4\n    total_time_minutes = time_per_quiz * num_quizzes\n    total_time_hours = total_time_minutes / 60  # convert minutes to hours\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Possible numbers for 1st, 2nd, and 3rd digit\n    non_zero_three_digit_numbers = 9 * 9 * 8  # No zero allowed in any of the three positions\n    numbers_with_at_least_one_zero = total_three_digit_numbers - non_zero_three_digit_numbers\n    return numbers_with_at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # mass of the ball in kilograms\n    speed = 30  # speed of the ball in meters per second\n\n    kinetic_energy = 0.5 * mass * speed ** 2\n\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for number in range(100, 201):\n        if (number % 3 == 1 and \n            number % 4 == 1 and \n            number % 5 == 1 and \n            number % 7 == 2):\n            return number\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n\n    seventh_term = first_term + (n - 1) * common_difference\n\n    return seventh_term\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    m = symbols('m', integer=True)\n    students_originally = m**2 + 5\n    \n    # After 18 students join, it should be a perfect square\n    students_after_joining = students_originally + 18\n    \n    # Define an equation based on the problem statement\n    equation = Eq(sqrt(students_after_joining) % 1, 0)\n\n    # Solve for m in the modified version of the equation\n    possible_m_values = solve(equation, m)\n    \n    # Filter positive integer solutions for m\n    possible_m_values = [val for val in possible_m_values if val.is_real and val > 0]\n    \n    # There should be only one possible value for m, calculate the original number of students\n    m_value = possible_m_values[0]\n    ans = m_value**2 + 5\n    return ans\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    # Since the number gives a remainder of 2 when divided by 5, 6, and 7,\n    # it can be expressed as 5a + 2, 6b + 2, 7c + 2 for integers a, b, c.\n    # We are looking for a number that satisfies these conditions and is less than 300.\n    \n    # Using the Chinese Remainder Theorem to solve the simultaneous congruences,\n    # we find that x % 5 = 2, x % 6 = 2, and x % 7 = 2.\n    \n    # lcm(5, 6, 7) = 210 (since 5, 6, and 7 are coprime)\n    # This means every 210 numbers the pattern repeats.\n    # Therefore, we only need to consider numbers in the form of 210k + 2 < 300.\n    \n    k = 0\n    while True:\n        num = 210 * k + 2\n        if num < 300:\n            if (num % 5 == 2) and (num % 6 == 2) and (num % 7 == 2):\n                # Since we are looking for numbers less than 300, we return the first\n                # number that matches all the conditions.\n                return num\n        else:\n            break\n        k += 1\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # Ones place is the greatest odd number, which is 9\n    ones = 9\n\n    # Digits in the hundreds and tens places add up to 13\n    # These digits also need to be different, and we need to minimize the number\n    # Therefore, we start from the smallest possible digit for the hundreds place\n    for hundreds in range(1, 10):  # The hundreds digit cannot be 0 in a 4-digit number\n        tens = 13 - hundreds\n        if tens < 10 and tens != hundreds and tens != ones:\n            break\n    \n    # For the smallest 4-digit number, the thousands place should also be the smallest possible digit\n    # It cannot be same as any of the digits we have assigned so far\n    for thousands in range(1, 10):\n        if thousands != hundreds and thousands != tens and thousands != ones:\n            break\n\n    # Combining all the digits to form the number\n    number = thousands * 1000 + hundreds * 100 + tens * 10 + ones\n\n    return number\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let the speed of Jerry be 's' and that Kevin is '1.5s'.\n    # The distance covered by them when they meet will be directly proportional\n    # to their speeds since they start at the same time.\n    # So the ratio of distances covered by Jerry and Kevin will be 1:1.5\n\n    # Total distance to be covered is 225 miles.\n    total_distance = 225\n    ratio_jerry = 1\n    ratio_kevin = 1.5\n    # The sum of the ratios will give us the number of parts the distance\n    # can be broken into.\n    total_ratio = ratio_jerry + ratio_kevin\n    # Each part in the distance division will hence be:\n    part_distance = total_distance / total_ratio\n    # Distance covered by Jerry will be:\n    distance_covered_by_jerry = part_distance * ratio_jerry\n\n    return distance_covered_by_jerry\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1\n    length_per_piece = total_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width = 4800\n    picture_width = 210\n    total_pictures = 10\n\n    # Since the first picture is on the extreme left and one is on the extreme right,\n    # the available space for the remaining eight pictures is total_width minus two picture widths.\n    available_space = total_width - (2 * picture_width)\n\n    # The 8 pictures will create 9 equal spaces between them and the 2 pictures at the extremes\n    space_between_pictures = available_space / (total_pictures - 1)\n\n    # The centre of the wall\n    centre_of_wall = total_width / 2\n\n    # The centre of the third picture from the left will be\n    # the space of two pictures to the right of the first picture\n    centre_of_third_picture = 2 * space_between_pictures + (picture_width / 2)\n\n    # The distance from the centre of the third picture to the vertical line down the centre of the wall\n    distance_from_centre = abs(centre_of_wall - centre_of_third_picture)\n\n    return distance_from_centre\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    original_height = 100  # Assuming 100% as the original height\n    bounce_height = original_height\n    bounce_count = 0\n    while bounce_height >= 25:  # 25% of the original height\n        bounce_height *= 0.75  # Decreases to 75% of the previous height\n        bounce_count += 1\n    return bounce_count\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    terms = [5, 8, 11, 14, 17, 20]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    age_difference = uncle_future_age - doris_age\n    uncle_current_age = doris_age + age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the price of a banana and apple\n    banana, apple = symbols('banana apple')\n    \n    # Create equations based on the information provided\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    # Find cost for 1 banana and 1 apple\n    cost = solutions[banana] + solutions[apple]\n    \n    return cost\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100\n\n    principal = interest / rate\n\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # The statement to examine is 8 + _ = 15\n    # To find the missing number that fulfills the statement, we simply subtract 8 from 15.\n    missing_number = 15 - 8\n    \n    # If Timothy's reasoning was based on this calculation and his answer is 7, then:\n    is_correct = (missing_number == 7)\n    \n    # Return the actual missing number and whether Timothy was correct\n    return missing_number, is_correct\n\n# Storing the returned tuple in `ans` which contains the correct answer and the boolean\n# indicating whether Timothy's answer was correct\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_amount = symbols('original_amount')\n    \n    watch_cost = 200\n    shirt_fraction = 2 / 7\n    remaining_fraction = 1 / 3\n\n    # Equation after buying the watch\n    remaining_after_watch = original_amount - watch_cost\n    \n    # Equation after buying the shirt\n    remaining_after_shirt = remaining_after_watch - shirt_fraction * remaining_after_watch\n    \n    # Final amount is 1/3 of the original amount\n    equation = Eq(remaining_after_shirt, remaining_fraction * original_amount)\n    \n    # Solve the equation for the original amount\n    solution = solve(equation, original_amount)\n    \n    # Return the original amount of money Jerry had\n    return solution[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # We treat Tom and Harry as a single entity since they must stand together.\n    # Since Ronda must stand at the furthest right, we have 5 positions to arrange.\n    # 5 positions because we have 7 total students, but Ronda takes 1 and Tom & Harry count as 1.\n    \n    # Calculate the factorial of the 5 positions, which represents the different arrangements\n    arrangements_for_5_positions = factorial(5)\n    \n    # Tom and Harry can switch places between themselves in 2 ways.\n    tom_harry_arrangements = 2\n    \n    # Multiply the arrangements of the 5 positions with the arrangements of Tom and Harry\n    total_arrangements = arrangements_for_5_positions * tom_harry_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    principal = 5000\n    rate_first_period = 1.15763  # Effective interest rate for the first 3 years\n    rate_second_period = 1.1664  # Effective interest rate for the last 2 years\n    \n    # Calculate the amount after the first period\n    amount_after_first_period = principal * rate_first_period\n    \n    # Calculate the total amount after the second period\n    final_amount = amount_after_first_period * rate_second_period\n    \n    # Round the result to the nearest tenth\n    ans = round(final_amount, 1)\n    \n    return ans\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n\n    # If the price is rounded to the nearest $100, the lower boundary for rounding up\n    # to $125,000 would be $124,950, given rounding rules (halfway or above rounds up).\n    lower_bound_price = rounded_price - 50\n\n    # Since the price rounds to the nearest $100, the exact price could be anything\n    # from $124,950 to $125,049, so Ryna's thought of $125,001 as the lowest possible\n    # price is not correct. The actual lowest possible price is $124,950.\n    return lower_bound_price\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_total_score = 89 * 4\n    target_average = 95\n    additional_tests = 0\n    while True:\n        additional_tests += 1\n        new_total_tests = 4 + additional_tests\n        minimum_new_score_needed = (target_average * new_total_tests) - current_total_score\n        if (minimum_new_score_needed / additional_tests) <= 100:\n            break\n    return additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # calculate time for each segment\n    time_first_segment = 540 / 9 # time = distance / speed\n    time_middle_segment = 300 / 6\n    time_final_segment = (1000 - 540 - 300) / 10 # total distance minus the first and middle segments\n\n    # sum the times for all segments to get the total time\n    total_time = time_first_segment + time_middle_segment + time_final_segment\n\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    age_difference = uncle_future_age - doris_age\n    uncle_current_age = doris_age + age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    base_performances = 18  # each class prepares a performance\n    extra_performances = 2  # Lia and Liz, each prepares an extra performance\n    total_performances = base_performances + extra_performances\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # in meters per second\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep_begin, cows_begin = symbols('sheep_begin cows_begin')\n\n    # Before new sheep and cows removal\n    equation1 = Eq(sheep_begin, 5/7 * cows_begin)\n\n    # After 21 new sheep and 7 cows removal\n    equation2 = Eq(cows_begin - 7, 3/4 * (sheep_begin + 21))\n\n    solutions = solve((equation1, equation2), (sheep_begin, cows_begin))\n\n    return solutions[sheep_begin]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the usual speed of the car as v km/h and the usual time taken as t hours.\n    # v = distance / time\n    # distance = v * t\n    distance, v, t = symbols('distance v t')\n\n    # From the first condition we know that:\n    # (v * 1.2) * (t - 1) = distance\n    equation1 = Eq((v * 1.2) * (t - 1), distance)\n\n    # From the second condition we know that:\n    # 200 + (v * 1.25) * (t - (200/v) - (12/60)) = distance\n    # Here, (200/v) is the time taken to travel the first 200 km at the usual speed.\n    # (12/60) hours is equivalent to 12 minutes.\n    equation2 = Eq(200 + (v * 1.25) * (t - (200/v) - (12/60)), distance)\n\n    # Now we have two equations with three unknowns, but one of the variables, the distance between city P and Q,\n    # is present in both equations, which allows us to solve the system of equations.\n\n    # First we solve for v and t using the two equations.\n    solutions = solve((equation1, equation2), (v, t))\n\n    # Now substitute these solutions back to get the distance.\n    ans = solutions[distance]\n\n    return ans\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n    \n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    from datetime import datetime\n    # Define the time format\n    time_format = \"%H:%M\"\n    # Parse the two time points\n    t1 = datetime.strptime(\"08:30\", time_format)\n    t2 = datetime.strptime(\"09:25\", time_format)\n    # Calculate the difference in minutes\n    difference = int((t2 - t1).total_seconds() / 60)\n    return difference\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    a_efficiency = 1 / 6\n    b_efficiency = a_efficiency / 2\n    combined_efficiency = a_efficiency + b_efficiency\n    days_to_complete = 1 / combined_efficiency\n    return days_to_complete\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Assuming Geoff's current age is g and his sister's current age is s\n    # We are given that g + s = 22\n    # Each year, both Geoff and his sister grow 1 year older, so the sum\n    # of their ages increases by 2 each year.\n    # We are asked to find when g + s will be 30\n\n    # Let t be the number of years it takes for their ages to sum to 30\n    # Then we have the equation g + s + 2*t = 30\n\n    # Using the given g + s = 22, we can substitute into the equation above\n    # 22 + 2*t = 30 -> 2*t = 30 - 22 -> 2*t = 8\n\n    # By solving for t, we find the number of years until their ages sum to 30\n    t = (30 - 22) / 2\n    return int(t)\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 50\n    mamee_cost = haribo_cost - 30\n    big_jelly_cost = 6 * mamee_cost\n    return big_jelly_cost / 100\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_candies = symbols('total_candies')\n    \n    anna = 3 / 8 * total_candies\n    belle = 1 / 4 * total_candies\n    cathy_and_dawn = total_candies - anna - belle\n    \n    equation = Eq(anna + belle - cathy_and_dawn, 90)\n\n    solution = solve(equation, total_candies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    return (18 * 32) // 36\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_plants_after_joel = 4\n    plants_before_joel = (remaining_plants_after_joel + 2) * 2\n    remaining_plants_after_valerie = plants_before_joel\n    plants_before_valerie = (remaining_plants_after_valerie + 3) * 2\n    remaining_plants_after_ethan = plants_before_valerie\n    initial_plants = (remaining_plants_after_ethan + 1) * 2\n    return initial_plants\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of fish balls Mr. Tan made at first\n    x = symbols('x')\n\n    # Equation based on the given problem\n    morning_sold = x * 3/4\n    remaining = x - morning_sold\n    afternoon_sold = remaining / 3\n    remaining_afternoon = remaining - afternoon_sold\n\n    # After making 506 more, he had twice the amount as he started with\n    equation = Eq(remaining_afternoon + 506, 2 * x)\n\n    # Solving the equation for x\n    fish_balls_first = solve(equation, x)\n\n    return fish_balls_first[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq((chocolate - chocolate/6) +\n                   (vanilla - 2*vanilla/3) +\n                   (blueberry - 7*blueberry/9), 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    \n    # Calculate the number of chocolate cupcakes sold (which is 1/6 of the total chocolate cupcakes)\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold.evalf()\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books_more = 8\n    beck_books = chris_books + beck_books_more\n    books_to_give = beck_books_more // 2\n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 * 0.01\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    ratio_boys = 2\n    ratio_girls = 7\n    total_students = (boys / ratio_boys) * (ratio_boys + ratio_girls)\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_for_2_cheese_cakes = 2 * cheese_cake_price\n    return price_for_2_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6 * 6 + 2)\n    solution = solve(equation, circle)\n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    for number in range(400, 501):\n        if number % 3 == 1 and number % 5 == 3 and number % 7 == 5:\n            return number\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    from sympy import factorint\n    \n    factors = factorint(36)\n    total_factors = 1\n    for prime, power in factors.items():\n        total_factors *= power + 1\n    \n    return total_factors\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    total_pigs = 8\n    green_apples = total_pigs\n    red_apples = total_pigs / 2\n    total_apples = green_apples + red_apples\n    return int(total_apples)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds = total_seeds / 4\n    sunflowers_grown = total_seeds - died_seeds\n    return int(sunflowers_grown)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the price of a shirt as 's' and the price of a pair of pants as 'p'\n    s, p = symbols('s p')\n\n    # Set up the first equation based on the first statement: 3 shirts + 2 pants = $81\n    equation1 = Eq(3 * s + 2 * p, 81)\n\n    # Set up the second equation based on the second statement: 5 shirts + 4 pants = $147\n    equation2 = Eq(5 * s + 4 * p, 147)\n\n    # Solve the system of equations for the prices of shirts (s) and pants (p)\n    solutions = solve((equation1, equation2), (s, p))\n\n    # Calculate the total price of 1 shirt and 1 pair of pants\n    total_price = solutions[s] + solutions[p]\n\n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    days = 15\n    money = 100\n    # In every two days, he deposits £10 and spends £8, which results in a net gain of £2.\n    period_gain = (days // 2) * (10 - 8)\n    \n    # If there's an odd day left, he deposits £10 on that day.\n    if days % 2 == 1:\n        period_gain += 10\n\n    # Total money after 15 days\n    total_money = money + period_gain\n\n    return total_money\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    result = 54\n    original_number = (result * 4 - 178) / 2\n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    apples = [42, 41, 30, 29, 38]\n    average_apples = sum(apples) / len(apples)\n    return average_apples\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    original_time = 8  # 8 hours at the original speed\n    reduced_time = 7   # 7 hours at the increased speed\n    speed_increase = 5  # 5 kilometers per hour speed increase\n\n    # Original speed * original time = Increased speed * reduced time\n    # Let original speed be x, then (x + speed_increase) * reduced_time = x * original_time\n    # Solving the equation for x gives us the original speed\n    x = (speed_increase * reduced_time) / (original_time - reduced_time)\n\n    # The distance is original speed multiplied by the original time\n    distance = x * original_time\n\n    return distance\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4 * 3 * 2 * 1  # Total ways to arrange 4 people without restrictions\n\n    ways_with_restrictions = 2   # Number of ways Claire and Tony can sit across from each other\n                                 # Claire has 2 choices (since the other place across is fixed),\n                                 # and the remaining two can be arranged in 1 way.\n                                 # So, it's 2 * 1 possibilities when they sit across.\n\n    # Subtract the restricted arrangements from the total possible arrangements\n    ans = total_ways - 2 * ways_with_restrictions\n    return ans\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    perm = permutations(digits)\n    sorted_numbers = sorted(int(''.join(p)) for p in perm)\n    return sorted_numbers[4]\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "import math\n\ndef solution():\n    num_bottles = 1000\n    hours = 6\n    test_tubes = math.ceil(math.log2(num_bottles))\n    return test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs = 10\n    removed_chairs = 3\n    remaining_chairs = total_chairs - removed_chairs\n    total_distance = 36\n    # Each interval equals the number of gaps between chairs, which is one less than the number of chairs.\n    original_intervals = total_chairs - 1\n    new_intervals = remaining_chairs - 1\n    # Since the total distance is covered by the intervals, we find the length of one interval.\n    original_interval_length = total_distance / original_intervals\n    # After removing chairs, the interval length increases proportionally to the decrease in the number of intervals.\n    new_interval_length = original_interval_length * original_intervals / new_intervals\n    \n    return new_interval_length\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    # Let x be the total stickers Charlotte has initially.\n    # Then Mary gave 0.2 * 7x to Charlotte, Alexis gave 0.2 * 5x to Charlotte\n    # And Charlotte's stickers increased by 0.8 * x:\n    # 0.2 * 7x + 0.2 * 5x = 0.8 * x\n    # Simplify the equation: 1.4x + x = 4x\n    # 2.4x = 4x, x = 0\n\n    # The equation above is incorrect (cannot divide by zero). Let's redo the steps correctly:\n    # We know that 0.2 * 7x + 0.2 * 5x = 0.8 * x\n    # 1.4x + 1x = 0.8x => 2.4x = 0.8x => x = 0/1.6 \n    # Which is obviously wrong because we can't have 0 stickers to begin with.\n    \n    # Let's try another approach using algebra:\n    from sympy import symbols, Eq, solve\n\n    # Let 'm' be the stickers Mary had initially, 'a' be the stickers Alexis had initially,\n    # 'c' be the stickers Charlotte had initially,\n    # According to the ratio Mary : Alexis = 7 : 5, we can say that m = (7/5)*a\n    # Also, we know that after giving 20%, Charlotte increase her stickers by 80%\n    # So, the stickers Charlotte gets from Mary and Alexis should sum up to 80% of her stickers,\n    # or 0.2 * m + 0.2 * a = 0.8 * c\n    # At the end, we know that Mary had 20 more stickers than Charlotte: m - 20% of m = c + 20\n    # Using these equations, we can solve for the original number of stickers they had\n\n    m, a, c = symbols('m a c')\n    equation1 = Eq(m, (7/5) * a)\n    equation2 = Eq(0.2 * m + 0.2 * a, 0.8 * c)\n    equation3 = Eq(m - 0.2 * m, c + 20)\n\n    solutions = solve((equation1, equation2, equation3), (m, a, c))\n\n    # Return the number of stickers Alexis had initially\n    return solutions[a]\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    # Each brother has at least 2 books, so start from 2 books for each and adjust the remaining\n    for books_brother1 in range(2, 10 - 2*2 + 1):\n        for books_brother2 in range(2, 10 - books_brother1 - 2 + 1):\n            books_brother3 = 10 - (books_brother1 + books_brother2)\n            # No need to loop for third brother as it will be the remaining books\n            if books_brother3 >= 2:  # Check if third brother has at least 2 books\n                count += 1\n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the fourth angle as x\n    # Then the angle that is five times larger is 5x\n    # Sum of angles in a quadrilateral is 360 degrees\n    # Two right angles contribute 90 + 90 = 180 degrees to the sum\n\n    x = symbols('x')  # This will represent the fourth angle\n    equation = Eq(180 + 5*x + x, 360)\n\n    # We solve for x to find the fourth angle\n    solution = solve(equation, x)\n\n    # The largest angle is 5 times the fourth angle\n    largest_angle = 5 * solution[0]\n\n    return largest_angle\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) / 4\n    return n\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 / 3\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')\n    for small_boxes in range(54 // 5 + 1):\n        for medium_boxes in range(54 // 7 + 1):\n            for large_boxes in range(54 // 10 + 1):\n                if 5 * small_boxes + 7 * medium_boxes + 10 * large_boxes == 54:\n                    min_boxes = min(min_boxes, small_boxes + medium_boxes + large_boxes)\n    return min_boxes\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = [i for i in range(10, 100) if 7007 % i == 0 and i % 7 == 0]\n    for i in range(len(factors) - 1):\n        for j in range(i+1, len(factors)):\n            if factors[i] * factors[j] == 7007:\n                return factors[i] + factors[j]\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    \n    median_index = len(sequence) // 2\n    ans = sequence[median_index]\n\n    return ans\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6)/3, 5)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n\n    cans_per_day = cans_in_6_days / 6\n    total_cans = cans_per_day * days\n\n    return total_cans\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6 / 7) * 42\n    return ans\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # We will use dynamic programming to count the ways to reach each step\n\n    # Create an array to store the number of ways to reach each step\n    # Note that there are 11 positions because Jimmy starts at step 0\n    ways_to_step = [0] * 11\n    ways_to_step[0] = 1  # There is 1 way to be at start\n\n    # There are no ways to step on the 5th step\n    ways_to_step[5] = 0\n\n    # Calculate the number of ways to reach each step\n    # Avoiding the muddy step\n    for step in range(1, 11):\n        if step == 5:  # Skip the muddy step\n            continue\n        ways_to_step[step] = ways_to_step[step - 1]\n        if step >= 2:\n            ways_to_step[step] += ways_to_step[step - 2]\n        if step >= 3:\n            ways_to_step[step] += ways_to_step[step - 3]\n        if step == 6:  # Jimmy can't step on the 5th step, so we don't add ways_to_step[5]\n            ways_to_step[step] -= ways_to_step[5]\n            \n    # The final answer is the number of ways to reach the 10th step\n    return ways_to_step[10]\n\n# Call the function and assign the result to the 'ans' variable\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n\n    # If there is one entrance\n    one_entrance_time = 16\n    # Calculate the total visitors in 16 minutes\n    total_visitors = visitors_per_minute * one_entrance_time\n    # If there are two entrances\n    two_entrances = 2\n    check_in_rate_with_two = check_in_per_entrance * two_entrances\n\n    # Calculate the time it takes for two entrances to check-in all visitors\n    time_with_two = total_visitors / check_in_rate_with_two\n\n    return time_with_two\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    number_of_weeks = 30\n    total_carrots = carrots_per_week * number_of_weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    # Convert minutes to hours\n    hours = minutes / 60\n    # Calculate miles traveled in 15 minutes\n    miles = miles_per_hour * hours\n    # Convert miles to kilometers (1 mile = 1.60934 kilometers)\n    kilometers = miles * 1.60934\n    return kilometers\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    initial_dragonflies = symbols('initial_dragonflies')\n\n    # initial amount of frogs is initial_dragonflies + 9\n    initial_frogs = initial_dragonflies + 9\n\n    # After the magic show, there are 11 frogs and 10 dragonflies in total.\n    # Since no frogs are turned into dragonflies or vice versa during the count,\n    # the initial amount of dragonflies had to be increased by 1 to become 10 dragonflies\n    # and the initial amount of frogs had to decrease by the same amount to become 11 frogs.\n\n    # Considering the transformation:\n    transformation_equation = initial_dragonflies + 1 - (initial_frogs - 1) == 0\n\n    # Solve the equation\n    initial_dragonflies_value = solve(transformation_equation, initial_dragonflies)\n\n    # Use the value of initial_dragonflies to find initial_frogs\n    initial_frogs_value = initial_dragonflies_value[0] + 9\n\n    return initial_frogs_value\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    total_distance = 16\n    distance_per_day = 5\n    slide_per_night = 3\n    net_distance_per_day = distance_per_day - slide_per_night\n    days = 0\n    distance_climbed = 0\n  \n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += distance_per_day\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - given_away\n    number_of_bottles = remaining_cookies / cookies_per_bottle\n\n    return int(number_of_bottles)\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 25 == 0:\n            return number\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Define known variables\n    metro_ticket_cost = 0.5\n    coffee_cost = 1\n    game_entry_fee = 10\n\n    # Calculate the total cost for Richard alone\n    richard_cost = (metro_ticket_cost * 2) + coffee_cost + game_entry_fee\n    \n    # Subtract Richard's cost from total budget to find the remaining amount for friends\n    remaining_budget = 40 - richard_cost\n\n    # Calculate the total cost per friend\n    per_friend_cost = (metro_ticket_cost * 2) + coffee_cost + game_entry_fee\n    \n    # Calculate how many friends Richard can treat\n    num_friends = remaining_budget // per_friend_cost\n\n    return int(num_friends)\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        number = int(f\"123{A}456{A}789{A}0\")\n        if number % 9 == 0 and number % 5 != 0:\n            return A\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Ratio of speeds between driver and cyclist\n    ratio_driver_to_cyclist = 13 / 2\n\n    # The time difference in hours between driver and cyclist\n    time_difference = 143 / 60\n\n    # Let the time taken by the driver be x hours\n    # Hence, time taken by cyclist will be x + time_difference hours\n\n    # As speed is inversely proportional to time for a given distance,\n    # We have (driver_speed / cyclist_speed) = (cyclist_time / driver_time)\n    # Therefore, (13/2) = (x + time_difference) / x\n\n    # Solving for x\n    x = time_difference / ((ratio_driver_to_cyclist) - 1)\n\n    return x\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12  # Upper limit of the series\n    sum_of_n = sum(range(1, n+1))  # Summation of numbers from 1 to n\n    ans = sum_of_n ** 2  # Squaring the summation\n    return ans\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    return 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = (4 * 24) + (5 * 81) + (7 * 20)\n    return total_cost\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n    \n    # The number of cookies she baked was 24 more than the number of muffins\n    equation1 = Eq(cookies, muffins + 24)\n    \n    # After selling 3/4 of her muffins, (1 - 3/4) = 1/4 of the muffins are left\n    # After selling 5/8 of her cookies, (1 - 5/8) = 3/8 of the cookies are left\n    # She had 74 cookies and muffins left in total\n    equation2 = Eq(1/4 * muffins + 3/8 * cookies, 74)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (cookies, muffins))\n\n    return solutions[cookies]\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # If statement 1 is correct, then all other statements are also correct, which is a contradiction.\n    # If statement 2 is correct, then statement 5 is also correct, which is a contradiction.\n    # If statement 3 is correct, it implies one of the statements 1 or 2 is correct, leading to a contradiction.\n    # If statement 4 is correct, it implies that all other statements including statement 2 are correct, which is a contradiction.\n    # If statement 5 is correct, then statement 2 cannot be correct and one and only one statement must be correct, which is the current statement (5). So, statement 5 is the only one that can be correct without causing a contradiction.\n\n    return 5\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_coins = symbols('total_coins')\n    \n    # Initially, 1/4 of the coins show heads\n    initial_heads = total_coins / 4\n    \n    # After flipping two more coins, 1/3 of the coins show heads\n    flipped_heads = initial_heads + 2\n    \n    # Now, flipped_heads equals 1/3 of the total coins\n    equation = Eq(flipped_heads, total_coins / 3)\n    \n    # Solve for the total_coins\n    total_coins_solution = solve(equation, total_coins)\n    \n    return total_coins_solution[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    # There are 5 singing shows and hence 6 places to insert a comedy show\n    # around them (before the first, between any two, and after the last).\n    # We have to choose 3 places for the comedy shows out of these 6 possible places.\n    places_to_choose = 6\n    comedy_shows = 3\n    \n    # Calculate combinations for selecting 3 places out of 6 for comedy shows\n    # without them being consecutive.\n    # This is equivalent to \"6 choose 3\".\n    places_combinations = factorial(places_to_choose) // (factorial(comedy_shows) * factorial(places_to_choose - comedy_shows))\n    \n    # For each of these combinations, the shows (both singing and comedy) can be\n    # arranged in only one set way because their relative order is fixed.\n    ans = places_combinations\n    return ans\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    return trains + cars + flights\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    road_length = 500  # Total meters of road\n    total_days = 5  # Total days to pave the road\n\n    meters_per_day = road_length / total_days  # Meters paved per day\n\n    return meters_per_day\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    # Convert all numbers to decimals for easy comparison\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    # Sort the list of decimals\n    sorted_values = sorted(values)\n    # Find the middle value\n    middle_index = len(sorted_values) // 2\n    # Return the middle value (median)\n    ans = sorted_values[middle_index]\n    return ans\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(x / 2 - 9, 12)\n    original_number = solve(equation, x)\n    return original_number[0]\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "from math import factorial\n\ndef solution():\n    # Subtract 1 from the count since rotating doesn't change the order\n    people = 6\n    seats = 8\n    # We treat one seat as always filled to avoid rotation duplications\n    ways_to_sit = factorial(people) // people\n    \n    return ways_to_sit\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '5', '7', '9']\n    smallest_even = float('inf')\n    \n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number % 2 == 0 and number < smallest_even:\n            smallest_even = number\n    \n    return smallest_even\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # recurring decimals 2, 3, 4, 5, 6 are periodic with a period of 1\n    # their sum is 2 + 3 + 4 + 5 + 6 = 20 for each period\n    # the sum of the first 2100 digits is 20 times the number of full periods of 2100 digits\n    sum_per_period = 2 + 3 + 4 + 5 + 6\n    num_periods = 2100 // 5  # each period is 5 digits long\n    total_sum = sum_per_period * num_periods\n    \n    # However, we need to account for the partial period at the end if there is one.\n    remaining_digits = 2100 % 5\n\n    # Add the remaining digits manually\n    additional_sum = 0\n    for i in range(1, remaining_digits + 1):\n        additional_sum += i + 1  # because the sequence starts at 2\n\n    total_sum += additional_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let the number of steps in the escalator be x\n    # Let the speed of the escalator be y steps per second\n\n    # When Peter walks 1 step per second for 10 seconds, escalator moves y steps per second for 10 seconds\n    # So we have the equation: 1*10 + y*10 = x\n\n    # When Peter walks 2 steps per second for 8 seconds, escalator moves y steps per second for 8 seconds (since he reaches the top in 16 seconds, but at 2 steps per second)\n    # So we have the equation: 2*8 + y*8 = x\n\n    # Now we solve the equations:\n    # 10 + 10y = x\n    # 16 + 8y = x\n\n    # Equating both expressions for x, we get:\n    # 10 + 10y = 16 + 8y\n    # Subtract 8y from both sides: 10 + 2y = 16\n    # Subtract 10 from both sides: 2y = 6\n    # Divide both sides by 2: y = 3\n\n    # Substitute y=3 in the first equation: 10 + 10*3 = x\n    # Calculate x: 10 + 30 = 40\n\n    return 40\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n    ans = total_dollars * quarters_in_one_dollar\n    return ans\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_price = 72  # in pence\n    balloon_price = 20  # in pence\n    total_paid = 1000  # in pence (£10 note)\n    change_received = 388  # in pence\n\n    money_spent = total_paid - change_received\n    money_spent_on_balloons = money_spent - chocolate_price\n    num_balloons = money_spent_on_balloons // balloon_price\n\n    return num_balloons\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    return lcm(3, 4, 10)\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total = 2000\n    \n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    seats_per_kayak = 4\n\n    if students % seats_per_kayak == 0:\n        kayaks_needed = students // seats_per_kayak\n    else:\n        kayaks_needed = (students // seats_per_kayak) + 1\n\n    return kayaks_needed\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n    money_spent = total_money * spent_fraction\n    money_left = total_money - money_spent\n\n    # 3 slices of pizza is equal to 2 cupcakes\n    # Let the price of one cupcake be x\n    # Then the price of one slice of pizza is 2x/3\n    # Total cost for 5 cupcakes and 6 slices of pizza is 5x + 6 * (2x/3)\n    # We know 5x + 6 * (2x/3) = money_spent\n    # Solve for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 6*(2*x/3), money_spent)\n    price_per_cupcake = solve(equation, x)[0]\n\n    # Calculate the maximum number of cupcakes that can be bought with the remaining money\n    max_cupcakes = money_left // price_per_cupcake\n\n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    x = symbols('x')\n    a = 4 * sqrt(3)\n    equation = Eq(3 * a, sqrt(3 * x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    return (4 + 2) * 13 - (4 + (2 * 13))\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let the age of the youngest dwarf be x\n    # Then the ages of the youngest three are x, (x + 1), and (x + 2)\n    # Their sum is 3x + 3 = 42\n    # Solving for x gives us the age of the youngest dwarf\n    x = (42 - 3) // 3\n     \n    # The ages of the oldest three are (x + 4), (x + 5), and (x + 6)\n    # Their sum is 3x + 15\n    sum_oldest_three = 3 * x + 15\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for i in range(74, 200):\n        if len(set(str(i))) == len(str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    difference = 24 - 15\n    last_term = 213\n\n    num_months = ((last_term - first_term) / difference) + 1\n\n    return int(num_months)\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 5]\n    different_numbers = list(permutations(digits, 3))\n    return len(different_numbers)\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "from math import isqrt\n\ndef solution():\n    count = 0\n    for i in range(1, 6):\n        number = int('2' + '5' * i)\n        root = isqrt(number)\n        if root * root == number:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    original_papers = 10\n    total_pieces = 16\n    cut_into_three = (total_pieces - original_papers) / (3 - 1)\n    return int(cut_into_three)\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # 6 workers can produce 120 parts in 4 minutes\n    # Therefore, the rate of one worker is 120 parts / (6 workers * 4 minutes)\n    # This gives us the production rate per worker per minute\n    rate_per_worker_per_minute = 120 / (6 * 4)\n\n    # Now, if 3 workers produce parts for a machine in 10 minutes,\n    # The number of parts produced is 3 workers * rate_per_worker_per_minute * 10 minutes\n    parts_per_machine = 3 * rate_per_worker_per_minute * 10\n\n    return parts_per_machine\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    initial_value = 98\n    final_value = 44.1\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Find the divisors of 2240\n    divs = divisors(2240)\n\n    # Find the divisors which make the result a square number when 2240 is divided by them\n    square_divs = [d for d in divs if is_square(2240 // d)]\n\n    # Return the largest divisor which makes the result a square number\n    return max(square_divs)\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = total_pupils * 70 / 100\n    swimming_girls = 200\n\n    # Assume all non-swimming pupils are boys since 200 out of swimming pupils are girls\n    non_swimming_pupils = total_pupils - swimming_pupils\n    non_swimming_boys = non_swimming_pupils\n\n    # Since 40% of the boys cannot swim, they represent 60% of the total boys\n    total_boys = non_swimming_boys / 40 * 100\n    total_girls = total_pupils - total_boys\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_apples = 8 * 10\n    rotten_apples = total_apples * 1/4\n    non_rotten_apples = total_apples - rotten_apples\n    \n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original_value = 160\n    new_value = 168\n    increase = new_value - original_value\n    percentage_increase = (increase / original_value) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sack_of_rice, packet_of_oatmeal = symbols('sack_of_rice packet_of_oatmeal')\n\n    equation1 = Eq(3 * sack_of_rice + 3 * packet_of_oatmeal, 36)\n    equation2 = Eq(sack_of_rice, 2 * packet_of_oatmeal)\n\n    solutions = solve((equation1, equation2), (sack_of_rice, packet_of_oatmeal))\n\n    return solutions[sack_of_rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*(6*x + 1) - 2*x, 89)\n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    return sum_of_cubes\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of 10% sugar water needed\n    x = symbols('x')\n\n    # Equation based on the concentration of sugar in the final mixture\n    equation = Eq(0.30 * 4 + 0.10 * x, 0.26 * (4 + x))\n    \n    # Solve the equation for x\n    amount_of_water = solve(equation, x)[0]\n    \n    return amount_of_water\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n\n    return total_percentage_discount\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    def count_divisors(n):\n        count = 0\n        for i in range(1, n//2 + 1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    ans = count_divisors(200) - 1  # Exclude the number itself (200=200)\n    return ans\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - a - b + 1\n\n    ans = custom_operation(custom_operation(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    field_length = 144\n    field_width = 204\n    total_wheat = 116\n\n    # Since each corner is planted with wheat, subtract the 4 corner wheat from the total\n    total_wheat -= 4\n    # Calculate the number of wheat along the sides, excluding the corners\n    # There are 2 lengths and 2 widths, so divide the remaining wheat by 4\n    wheat_per_side = total_wheat // 4\n\n    # Calculate the distance between each wheat, adding 1 to the count as the distance is between wheat\n    distance_between_wheat_length = field_length / (wheat_per_side + 1)\n    distance_between_wheat_width = field_width / (wheat_per_side + 1)\n\n    # The distance should be the same along the length and the width, as wheat is planted evenly\n    return distance_between_wheat_length\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lana, mark = symbols('lana mark')\n\n    equation1 = Eq(lana + mark, 674)\n    equation2 = Eq(lana - lana / 3, mark - 34)\n\n    solutions = solve((equation1, equation2), (lana, mark))\n\n    return solutions[lana] - solutions[mark]\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    dorothy_stickers = 96\n    timmy_stickers = dorothy_stickers // 8\n    kevin_stickers = timmy_stickers + 45\n    return kevin_stickers\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    summer_camp = 2 * 7  # 2 weeks = 14 days\n    after_friend_visit = summer_camp + 4\n    total_holiday = after_friend_visit * 4  # since he spent half of the remaining time, which is *2, and initially divided by 2\n    \n    return total_holiday\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    minutes_per_fish_single_cat = 10\n    cats = 5\n    fish_needed = 5\n    \n    minutes_per_fish_five_cats = minutes_per_fish_single_cat / cats\n    total_minutes = minutes_per_fish_five_cats * fish_needed\n\n    return total_minutes\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    perimeter = 2 * (144 + 204) - 4  # Subtract 4 m for the corners\n    distance = perimeter / (116 - 1)  # 116 plants, but 115 intervals\n    return distance\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    original_number = (result / 9) * 4 - 3\n    return original_number\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    target = 84\n    morning_frac = 2 / 7\n    afternoon_frac = 3 / 5\n\n    morning_bracelets = target * morning_frac\n    remaining_bracelets = target - morning_bracelets\n    afternoon_bracelets = remaining_bracelets * afternoon_frac\n\n    bracelets_remaining = target - (morning_bracelets + afternoon_bracelets)\n\n    return bracelets_remaining\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    total_weeks = 4\n\n    combined_weekly_people = total_people / total_weeks\n    gloria_rate = combined_weekly_people - ellie_rate\n\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations('1356789', 4):  # since B=2 and D=0 are given, we have 4 other digits to permute\n        A, F, E, C = perm\n        ABCDEF = int(\"2{}0{}{}{}\".format(A, C, E, F))\n        EFABCD = int(\"{}{}2{}0{}\".format(E, F, A, C))\n        if 5 * ABCDEF == 6 * EFABCD:\n            return int(\"\".join([F, A, C, E]))\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    fraction = 3 / 8\n    total = 48\n    result = fraction * total\n    return result\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let the mass of the jar be j and the mass of one chocolate be c.\n    # From the given information we have two linear equations:\n    # j + 5c = 185\n    # j + 17c = 317\n    # We need to find the value of j + 10c\n\n    # Solving the linear equations to find the values of j and c.\n    j_plus_5c = 185\n    j_plus_17c = 317\n\n    # Find the mass of 12 chocolates (the difference between 17 chocolates and 5 chocolates)\n    mass_12_chocolates = j_plus_17c - j_plus_5c  # 317 - 185\n\n    # Calculate the mass of one chocolate.\n    c = mass_12_chocolates / 12\n\n    # Now, we can calculate the mass of the jar itself by subtracting the mass of 5 chocolates from 185g.\n    j = j_plus_5c - 5 * c\n\n    # Finally, calculate the mass of the jar with 10 chocolates.\n    jar_with_10_chocolates = j + 10 * c\n\n    return jar_with_10_chocolates\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    amount_rice_A = 15 * 0.40\n    amount_rice_total = total_weight * 0.28\n    amount_rice_B = amount_rice_total - amount_rice_A\n    percent_rice_B = (amount_rice_B / 60) * 100\n    return percent_rice_B\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    leak_rate_per_minute = 15  # The rate in milliliters\n    minutes_in_2_hours = 2 * 60  # Convert 2 hours into minutes\n    total_leakage_in_milliliters = leak_rate_per_minute * minutes_in_2_hours\n    total_leakage_in_litres = total_leakage_in_milliliters / 1000  # Convert milliliters to litres\n\n    return total_leakage_in_litres\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    # Since trees are planted at both ends, start with 2 trees\n    num_trees = 2\n\n    # Calculate the number of trees in between the ends\n    num_trees += (road_length - 2 * distance_between_trees) // distance_between_trees\n\n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Barbara's walking speed\n    barbara_speed = 60\n    # Catherine's walking speed\n    catherine_speed = 45\n    # Distance that Catherine still has to go when Barbara reaches the mall\n    catherine_remaining = 60\n\n    # Since both start at the same time and Barbara reaches the shopping mall first,\n    # Let the time taken for Barbara to reach the mall be t\n    # Distance = Speed * Time\n    # The distance Barbara walked is barbara_speed * t\n    # The distance Catherine walked is catherine_speed * t\n    # Barbara's distance is catherine_remaining more than Catherine's distance:\n    # barbara_speed * t = catherine_speed * t + catherine_remaining\n    # Solving for t gives us the time in minutes it took for Barbara to reach the shopping mall:\n    t = catherine_remaining / (barbara_speed - catherine_speed)\n\n    # Distance to the shopping mall is Barbara's speed multiplied by the time she walked\n    distance_to_mall = barbara_speed * t\n\n    return distance_to_mall\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for a book and a pen\n    book, pen = symbols('book pen')\n\n    # Create equations based on the given information\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    # Solve the system of equations for the two unknowns\n    solutions = solve((equation1, equation2), (book, pen))\n\n    # Extract the solution for the pen\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_change = 2 * 10 + 5 * 5 + 4 * 0.20\n    money_spent = 100 - total_change\n    return money_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for amounts that A, B, and C have\n    A, B, C = symbols('A B C')\n\n    # Equation 1: Ratio of A to B is 4 to 3\n    equation1 = Eq(A/B, 4/3)\n\n    # Equation 2: Total amount of money A, B, and C have is 200\n    equation2 = Eq(A + B + C, 200)\n\n    # Equation 3: A has 20 more pounds than C\n    equation3 = Eq(A, C + 20)\n\n    # Solve the equations for A, B, and C\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the amount that C has\n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2*(0.5*y + x))\n    \n    sol = solve(equation, x)\n    return sol[x]\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    # Let's denote the four numbers as a, b, c, and d where a > b > c > d\n    # According to the problem, we have the following equations:\n    # d + (a + b + c)/3 = 39  -> Equation 1\n    # a + (b + c + d)/3 = 51  -> Equation 2\n\n    # Rearrange Equation 1: 3d + (a + b + c) = 117  -> Equation 3\n    # Rearrange Equation 2: 3a + (b + c + d) = 153  -> Equation 4\n\n    # Subtract Equation 3 from Equation 4: 3a - 3d = 36  -> Equation 5\n    # Simplify Equation 5: a - d = 12\n\n    # Now, to maximize 'a' (the largest number), we should minimize 'd' while keeping the condition that the numbers are distinct positive whole numbers.\n    # The smallest 'd' possible is 1, then 'a' would be 1 + 12 = 13.\n    # However, we must also ensure that 'b' and 'c' are distinct and positive, and fit the other conditions.\n\n    # Let's try 'd' = 1 and increase 'd' until we can no longer find distinct 'b' and 'c' that satisfy the conditions.\n\n    # Starting with d = 1\n    d = 1\n    a = d + 12\n    b_plus_c = 117 - (3 * d) - a  # From Equation 3\n\n    while True:\n        for b in range(d + 1, a):\n            c = b_plus_c - b\n            if c > d and c < b:\n                # Possible solution found, try the next 'd' value to maximize 'a'\n                break\n        else:\n            # No 'b' and 'c' fulfilling the conditions means we found the maximum 'a'\n            return a\n\n        # Increase 'd' and re-calculate 'a' and 'b_plus_c'\n        d += 1\n        a = d + 12\n        b_plus_c = 117 - (3 * d) - a\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3  # minutes\n    total_time = 18  # minutes\n\n    num_plates = total_time // time_per_plate\n\n    return num_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nini, dad = symbols('nini dad')\n    \n    equation1 = Eq(dad, nini + 25)\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n    \n    solutions = solve((equation1, equation2), (nini, dad))\n    \n    return solutions[nini]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    facing_teacher = 50\n    for i in range(1, 51):\n        if i % 4 == 0 or i % 6 == 0:\n            facing_teacher -= 1\n    return facing_teacher\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    result = 471471471471 // 157157157157\n    return result\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    sold_first_day = total_pears * 2 // 5\n    remaining_pears = total_pears - sold_first_day\n    sold_second_day = remaining_pears * 7 // 9\n    return sold_second_day\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    fraction = 3/4\n    percentage = 30 / 100\n    number = 120\n\n    ans = fraction * percentage * number\n    return ans\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    # Since at least one student gets at least 3 apples,\n    # We can give away 3 apples to one student and then divide the remaining apples\n    remaining_apples = 29 - 3  # The at least 3 apples given away to one student\n\n    # If every other student gets at least 1 apple,\n    # The number of students is the remaining apples plus the one student who got 3\n    class_size = remaining_apples + 1  # As all other students receive at least 1 apple\n\n    return class_size\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    # We can choose 1 boy from 3 in 3 ways and 1 girl from 4 in 4 ways\n    # By the principle of multiplication, the total ways is the product of these choices\n    num_ways = boys * girls\n \n    return num_ways\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for num in range(10, 100):\n        reversed_num = int(str(num)[::-1])\n        if num != reversed_num and isprime(num) and isprime(reversed_num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    return 462 + 268\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_price = 140\n    new_price = 87.5\n    percent_change = ((new_price - original_price) / original_price) * 100\n    \n    return percent_change\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    probability_not_at_first_two_bars = 0.9 * 0.9\n    probability_at_third_bar = 1 - probability_not_at_first_two_bars\n    return probability_at_third_bar\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eliot, cousin = symbols('eliot cousin')\n    \n    equation1 = Eq(eliot, 2 * cousin)\n    equation2 = Eq(eliot + 4, 16)\n    \n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    cousin_future_age = solutions[cousin] + 4\n\n    return cousin_future_age\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    number1 = 387\n    number2 = 729\n    average = (number1 + number2) / 2\n    return average\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    caught_marked_first = 100\n    caught_second_time = 100\n    marked_second_time = 16\n\n    estimated_total_fish = caught_marked_first * caught_second_time / marked_second_time\n\n    return estimated_total_fish\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Let x be the distance Nancy walks\n    # Then Randy walks 10 meters more than Nancy, so Randy walks x + 10 meters\n    \n    # We set up the ratio of their walking distances\n    # For every 2 meters Nancy walks, Randy walks 3 meters\n    # Hence, their distances should relate as 2/3 = x/(x + 10)\n    \n    # Solving for x using cross multiplication\n    # 2 * (x + 10) = 3 * x\n    # 2x + 20 = 3x\n    # 20 = x\n    \n    # Nancy walks x meters and Randy walks x + 10 meters, sum them up for the total distance\n    nancy_walks = 20\n    randy_walks = nancy_walks + 10\n    total_distance = nancy_walks + randy_walks\n    \n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_age_now = 6\n    difference_in_age = 35 - elaine_age_now\n    elaine_age_future = 12\n    mandy_age_future = elaine_age_future + difference_in_age\n    return mandy_age_future\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    # Let b = number of blue balls originally in the bag\n    # Let g = number of green balls originally in the bag\n    # We know that originally there were 140 balls in total, so g + b = 140\n    # After removing 2/5 of the blue balls and 28 green balls, there's an equal number of green and blue balls left\n    # So (g - 28) = (b - (2/5)*b) = (3/5)*b\n    # Hence g - 28 = (3/5)*b and g + b = 140\n\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for green and blue balls\n    g, b = symbols('g b')\n    \n    # Setup the two equations based on the problem statement\n    equation1 = Eq(g + b, 140)            # Total balls equation\n    equation2 = Eq(g - 28, (3/5) * b)     # Balls left after removal equation\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n    \n    return solutions[b]\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    numerator1 = (1*99 + 3) / 99\n    numerator2 = (3*33 + 3) / 33\n    numerator3 = (9*11 + 3) / 11\n    denominator1 = (1*99 + 1) / 99\n    denominator2 = (3*33 + 1) / 33\n    denominator3 = (9*11 + 1) / 11\n\n    # Sum the fractions in the numerator and denominator\n    numerator_sum = numerator1 + numerator2 + numerator3\n    denominator_sum = denominator1 + denominator2 + denominator3\n\n    # Divide the numerator sum by the denominator sum\n    ans = numerator_sum / denominator_sum\n    \n    return ans\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Let the repeating decimal be 'y'\n    y = 0.20141414141414...\n    \n    # Multiply 'y' by 100 to shift the repeating part after the decimal two places to the right\n    # 100y = 20.141414141414...\n    # Notice that subtracting 'y' from '100y' will result in an integer on the right side\n    # 100y - y = 20.141414141414... - 0.201414141414...\n    # 99y = 20.14 - 0.20 = 19.94\n    \n    # Now solve for 'y'\n    y = 19.94 / 99\n    \n    # Recall that x/9900 = y\n    # Therefore, x = y * 9900\n    x = y * 9900\n    \n    # Return the whole number x\n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n\n    # Bronson has twice as many marbles as Ali\n    equation1 = Eq(bronson, 2 * ali)\n    # Ali has 5 marbles less than the average of Bronson's and Charlie's\n    equation2 = Eq(ali, (bronson + charlie) / 2 - 5)\n\n    # Since there are two equations, we need to introduce a third relationship\n    # Let's assume Ali has x marbles, which makes Bronson have 2x marbles\n    # and from equation 2, we can solve for Charlie in terms of x\n    ali_marbles = symbols('x')\n    bronson_marbles = 2 * ali_marbles\n    charlie_marbles = 2 * (ali_marbles + 5) - bronson_marbles\n\n    # Substitute the equations\n    solutions = solve((equation1.subs(ali, ali_marbles), equation2.subs([(ali, ali_marbles), (bronson, bronson_marbles), (charlie, charlie_marbles)])), (ali_marbles, charlie_marbles))\n\n    return solutions[charlie_marbles]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    # The hundreds digit must range between 1 and 6 because the sum of all three digits is 8\n    # and we need to have enough left for the other two digits.\n    for hundreds in range(1, 7):\n        # The tens digit must be lower than 8 minus the hundreds digit,\n        # and non-zero as we cannot have a leading zero in a three-digit number.\n        for tens in range(1, 8 - hundreds):\n            # The units digit must be even, and it's determined by subtracting the others from 8\n            units = 8 - (hundreds + tens)\n            # Check if all digits are different and the units digit is even\n            if units != hundreds and units != tens and units % 2 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for i in range(10000, 99999):  # Generates five-digit numbers\n        original_number = int(str(i) + '2')  # Creates the six-digit number ending in 2\n        new_number = int('2' + str(i))  # Moves the digit 2 to beginning\n        if new_number == original_number // 3:  # Checks if new number is one-third original\n            return original_number\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    passed_only_first_exam = passed_first_exam - (total_students - failed_second_exam - passed_second_failed_first)\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences can be written as:\n    # x ≡ 3 (mod 5)\n    # x ≡ 6 (mod 8)\n    # x ≡ 7 (mod 9)\n    # Using the Chinese Remainder Theorem to find solutions to these congruences\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    number = solve_congruence(*congruences)\n\n    # The solution of solve_congruence will be in the form (x, lcm), we need the x\n    ans = number[0]\n\n    # We will check if the number is between 500 and 1000 as per the question\n    while ans < 500 or ans > 1000:\n        if ans < 500:\n            ans += number[1]  # adding the least common multiple to find the next solution\n        elif ans > 1000:\n            ans -= number[1]  # subtracting the least common multiple to find the previous solution\n\n    return ans\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n    bars_left = total_bars % people\n    return bars_left\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # For each position (hundreds, tens, ones), each of the numbers will appear twice\n    sum_of_each_position = 2 * (a + b + c)\n    \n    # Hundreds place contributes 100 to the number, tens place contributes 10, ones place contributes 1\n    hundreds_place = sum_of_each_position * 100\n    tens_place = sum_of_each_position * 10\n    ones_place = sum_of_each_position * 1\n    \n    # Sum all positions to get the total sum\n    total_sum = hundreds_place + tens_place + ones_place\n    \n    return total_sum\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 as it's a two-digit number\n        for b in range(0, 10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            product = ab * ba\n            if product % 100 == 0:  # checking if ones and tens digits are both 0\n                return ab\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_rate_per_hour = 78 / 6.5\n    hours_needed = 300 / pay_rate_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    large_sack, small_sack = symbols('large_sack small_sack')\n    equation1 = Eq(large_sack, 1.2 * small_sack)\n    equation2 = Eq(large_sack + small_sack, 77)\n    \n    solutions = solve((equation1, equation2), (large_sack, small_sack))\n    \n    return solutions[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # Half the apples are sold\n    equation1 = Eq(apples / 2, oranges - 35)\n    \n    # Total fruits is 125\n    equation2 = Eq(oranges + apples, 125)\n\n    solutions = solve((equation1, equation2), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    fraction = 5 / 9\n    ans = round(fraction, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome can be obtained by setting the first digit to 1\n    # (the smallest non-zero digit) and making the last digit the same.\n    # The middle 3 digits can be 0s. Therefore, the least 5-digit palindrome is 10001.\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome should have its first and last digits both set to 9\n    # (the largest single digit number). The middle 4 digits should also be 9s.\n    # Therefore, the greatest 6-digit palindrome is 999999.\n    greatest_6_digit_palindrome = 999999\n    \n    # Calculate the difference between the two palindromes\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n\n    cabins_needed = (students + cabin_capacity - 1) // cabin_capacity\n\n    return cabins_needed\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    num_digits = 0\n    for i in range(1, 59):\n        num_digits += len(str(i))\n    return num_digits\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    # Define the counter for the number of digits\n    digit_counter = 0\n    for i in range(1200, 0, -1):\n        # Convert current number to string to count digits\n        num_str = str(i)\n        # Increment digit counter by the number of digits in the current number\n        digit_counter += len(num_str)\n        # Check if we have reached or passed the 2011th digit\n        if digit_counter >= 2011:\n            # Calculate the position of the digit in the current number\n            position = len(num_str) - (digit_counter - 2011) - 1\n            # Return the digit at the calculated position\n            return int(num_str[position])\n    \n    # If we did not find the digit, then there is an error in the assumption\n    return -1\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of coins be x\n    x = symbols('x')\n\n    # Before flipping any coins, 1/4 of the x coins are heads\n    # After flipping 2 coins, (x/4 + 2) are heads\n    # After flipping, 1/3 of the x coins are heads\n    # So the equation is: x/4 + 2 = x/3\n    equation = Eq(x/4 + 2, x/3)\n\n    # Solving for x\n    total_coins = solve(equation, x)\n\n    return total_coins[0]\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_of_favorite = 14\n    books_on_right = 6\n    total_books = position_of_favorite + books_on_right\n    \n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    # The last multiple of 5 before 51\n    last_multiple = 50\n\n    # Number of terms in the sequence\n    num_terms = last_multiple // 5\n\n    # Sum of the arithmetic sequence formula: n/2 * (first_term + last_term)\n    sum_multiples = num_terms / 2 * (5 + last_multiple)\n\n    return int(sum_multiples)\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # Speed of the first planet in km per minute\n    speed_planet2 = 40  # Speed of the second planet in km per minute\n    time = 5            # Time in minutes\n\n    distance = (speed_planet1 + speed_planet2) * time\n\n    return distance\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    sale_price = 64\n    original_price = sale_price / (1 - 0.20)\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total = 36\n    apple_ratio = 4\n    orange_ratio = 5\n    ratio_sum = apple_ratio + orange_ratio\n    apple_juice = (apple_ratio / ratio_sum) * total\n    return apple_juice\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n', integer=True)\n\n    # Equations based on the remainders given for each number\n    eq1 = Eq(190 % n, a)\n    eq2 = Eq(137 % n, a + 4)\n    eq3 = Eq(101 % n, a + 6)\n\n    # Solve the system of equations for 'a' and 'n'\n    solutions = solve((eq1, eq2, eq3), (a, n))\n    \n    # Since the solutions can have multiple values for 'n', filter out non-integer and negative solutions\n    valid_solutions = [sol for sol in solutions if sol[n].is_integer and sol[n] > 0]\n\n    if valid_solutions:\n        # Taking the first solution since all of them should give the same remainder for 299\n        n_value = valid_solutions[0][n]\n\n        # Calculating the remainder for 299 using the common divisor obtained\n        remainder_when_299_divided = 299 % n_value\n\n        return remainder_when_299_divided\n    else:\n        return None\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    net_distance_per_day = day_distance - night_distance\n    current_distance = 0\n    day_count = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let c be the number of cars and m be the number of motorbikes.\n    # Each car has 4 tyres and each motorbike has 2 tyres.\n    # We have two equations:\n    # c + m = 140 (total number of vehicles)\n    # 4c + 2m = 490 (total number of tyres)\n    # We can solve this system of equations using simple algebra:\n    # Multiply the first equation by 2 and subtract it from the second equation to solve for c:\n    # 2c + 2m = 280 (multiplying the first equation by 2)\n    # 4c + 2m = 490 (second equation)\n    # Subtracting the two equations:\n    # 4c + 2m - (2c + 2m) = 490 - 280\n    # 2c = 210\n    # Divide by 2 to solve for c:\n    # c = 105\n    # So, there are 105 cars parked at the multi-storey car park.\n\n    return 105\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # There are 5 choices for the first digit (excluding 0)\n    # and 6 choices for the second digit (including 0)\n    # The total number of two-digit numbers that can be formed is 5 * 6.\n    ans = 5 * 6\n    return ans\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    num = 8.765\n    ans = round(num, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    added_number = 12\n    initial_number = (result - added_number) / 2\n    return initial_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    number = 1\n    while True:\n        if number % 2 == 1 and number % 13 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * 25 / 100 + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    num_classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n\n    total_donation = num_classes * students_per_class * donation_per_student\n    \n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "from sympy import primerange\n\ndef solution():\n    max_sum = 0\n    for x in primerange(1, 200):\n        for y in primerange(1, 200):\n            if x != y and x * (2 + y) == 200 + y:\n                max_sum = max(max_sum, x + y)\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    rep_2 = 2\n    rep_3 = 2\n\n    permutations = factorial(total_digits) // (factorial(rep_2) * factorial(rep_3))\n\n    return permutations\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    spent = 2\n    fraction_spent = 1 / 4\n    initial_amount = spent / fraction_spent\n    return initial_amount\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    num_teams = 8\n    # Each team plays against all other teams once, so for each of the 8 teams,\n    # there will be 7 games. However, this counts each game twice (once for each team),\n    # so we must divide by 2 to get the actual number of rounds played.\n    rounds = (num_teams * (num_teams - 1)) // 2\n    return rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "from fractions import Fraction\n\ndef solution():\n    result = (Fraction(31, 6) + Fraction(31, 5)) / (Fraction(1, 6) + Fraction(1, 5))\n    ans = result.numerator / result.denominator\n    return ans\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    return (7 / 9) * 27\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_permutations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_permutations[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    meters_per_day = 1000 / 5\n    days_for_2600_meters = 2600 / meters_per_day\n    \n    return days_for_2600_meters\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    speed_per_hour = 250 / 5\n    distance_in_3_hours = speed_per_hour * 3\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols: all dwarfs' heights\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sneezy, dopey)\n    equation4 = Eq(bashful, dopey)\n    equation5 = Eq(grumpy, dopey)\n    equation6 = Eq(sleepy, 80)\n    equation7 = Eq(doc + sleepy, dopey + sneezy)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), \n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    # Calculate the total height by summing the individual heights\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for number in range(10, 60):\n        if number % 8 == 3 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # The sum of an arithmetic sequence can be found by the formula:\n    # sum = n/2 * (first_term + last_term), where n is the number of terms\n    \n    # number of terms (n) in the sequence\n    n = (90 - 12) // 1 + 1  # step is 1, so it simplifies to 90 - 12 + 1\n    \n    # Since the first term (12) is even and the number of terms (n) is odd,\n    # the last term of the sequence will also be even (90 is even).\n    # The sum of an even number of even numbers is always even.\n    \n    # However, since n is odd, we need to check if n/2 is an integer or not.\n    # If n/2 is an integer, the sum will be even because an integer multiplied by an even number is even.\n    # If n/2 is not an integer, we cannot directly determine the parity of the sum from this information alone.\n    \n    # We can simplify further:\n    # If the first and last terms are even and n is odd, then the formula simplifies to:\n    # sum = (odd) * (even) + (even) which is even.\n    # Hence no calculation is needed to conclude that the sum is even.\n\n    # Since we need not calculate the actual sum, we can just return 'even'.\n    return 'even'\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    qiang, rory, sophia = symbols('qiang rory sophia')\n\n    equation1 = Eq(qiang + rory, 22)\n    equation2 = Eq(qiang + sophia, 17)\n    equation3 = Eq(rory + sophia, 11)\n\n    solutions = solve((equation1, equation2, equation3), (qiang, rory, sophia))\n\n    ans = max(solutions[qiang], solutions[rory], solutions[sophia])\n\n    return ans\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    trees = 30\n    distance_between_trees = 5\n    length_of_road = (trees - 1) * distance_between_trees  # 29 gaps between 30 trees\n    return length_of_road\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n    \n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    \n    solution = solve(equation, triangle)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= 1 + (1 / i)\n    return product\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for num in range(20):\n        if isprime(num):\n            if isprime(num + 6) or isprime(num - 6):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    ans = 54 * 7\n    return ans\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # the first 30 minutes distance\n    distance_first = (x / 2) * 1  # (30 / 60) hours = 0.5 hours, hence \"/ 2\"\n\n    # the second 30 minutes distance\n    distance_second = ((x - 20) / 2) * 1  # (30 / 60) hours = 0.5 hours, hence \"/ 2\"\n\n    # the last 30 minutes distance\n    distance_last = ((x + 10) / 2) * 1  # (30 / 60) hours = 0.5 hours, hence \"/ 2\"\n\n    # total distance is the sum of the three distances\n    total_distance = distance_first + distance_second + distance_last\n\n    # total distance is given as 70 miles\n    equation = Eq(total_distance, 70)\n\n    # solve the equation to find the value of x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    total_digits = 0\n    for page_number in range(1, 346):\n        total_digits += len(str(page_number))\n    return total_digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    bus_capacity = 25\n    buses_needed = -(-total_people // bus_capacity)\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_prize = symbols('total_prize')\n    denise_share = Eq((1/5 + 1/15) * total_prize, 360)\n    total_prize_money = solve(denise_share, total_prize)\n    \n    return total_prize_money[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial as fact\n    \n    # There are 5 players (excluding the coach and the captain), who can stand in any order.\n    players_permutations = fact(5)\n    \n    # The coach will always occupy the middle position, so we don't need to consider different positions for the coach.\n    \n    # The captain has 2 choices: stand either on the left or right of the coach.\n    captain_choices = 2\n    \n    # By the principle of multiplication, the total number of ways is the product of individual choices.\n    total_ways = players_permutations * captain_choices\n    \n    return total_ways\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    # Starting from the smallest possible square array, increase the size step by step\n    # The pattern is: boys layer is formed by n^2 - (n-2)^2 = 4n - 4\n    # Girls layer is (n-2)^2 - (n-4)^2 = 4n - 12, for n >= 3\n    number_of_boys = 0\n    number_of_girls = 0\n    total_students = 0\n    n = 2  # Minimum size for a square with a boys border\n\n    while True:\n        boys_layer = n * n - (max(n - 2, 0)) ** 2\n        number_of_boys += boys_layer\n\n        if n > 2:\n            girls_layer = (n - 2) ** 2 - (max(n - 4, 0)) ** 2\n            number_of_girls += girls_layer\n\n        if number_of_boys - number_of_girls == 20:\n            total_students = number_of_boys + number_of_girls\n            break\n\n        n += 2  # Increase the square size by 2 for the next layer\n        \n    return total_students\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p = symbols('p')  # penguins\n    f = symbols('f')  # fish\n\n    # Equations based on the given problem\n    equation1 = Eq(3 * p + 25, f)\n    equation2 = Eq(6 * (p - 1) + 1, f)\n\n    # Solving the simultaneous equations for p and f\n    solutions = solve((equation1, equation2), (p, f))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_terms = 0\n    term = 1\n    for count in range(1, 31):\n        sum_terms += term\n        if count == (term * (term + 1)) // 2:\n            term += 1\n    return sum_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = (25 / 100) * 20 + (1 / 5) * 30 + (2 / 3) * 18\n    return ans\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        if (1 + 7 + 3 + 1 - (a + 7 + 3)) % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n    \n    # Cindy can ensure victory if she has more votes than anyone else after all votes are cast.\n    # Worst case scenario: all other votes (apart from Alice's, Betty's, Cindy's) go to a single person.\n    remaining_votes = total_votes - (alice_votes + betty_votes + cindy_votes)\n    \n    # Cindy needs at least one more vote than the total votes of the next highest competitor after all votes are in.\n    max_other = max(alice_votes, betty_votes) + remaining_votes\n\n    # Cindy needs to have at least one more vote than the possible max of other competitors.\n    votes_needed_for_cindy_to_win = max_other + 1 - cindy_votes\n\n    return votes_needed_for_cindy_to_win\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Calculate the first expression\n    first_expr = (7 / -3.3333333333333333) / (-0.027 ** (1/3))\n    \n    # Calculate the second expression\n    second_expr = (2**3 / 4**2) / (0.125 * (1.8 - (0.2 * 7)))\n    \n    # Calculate the third expression\n    third_expr_first_part = 0.1 / 0.142857\n    third_expr_second_part = 2 * 0.3\n    third_expr = third_expr_first_part + third_expr_second_part\n    \n    # Combine all parts and get the final answer\n    ans = first_expr + second_expr - third_expr\n    \n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Chelsia and Brian's money\n    chelsia_money, brian_money = symbols('chelsia_money brian_money')\n\n    # Given equations based on the problem statement\n    equation1 = Eq((3/4) * chelsia_money, (5/6) * brian_money)\n    equation2 = Eq(chelsia_money, brian_money + 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chelsia_money, brian_money))\n\n    # Calculate the total money they have together\n    total_money = solutions[chelsia_money] + solutions[brian_money]\n\n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina was 50 years old on 10th May 2005.\n    gina_age_in_2005 = 50\n    # Gina's birth year would be 2005 minus her age.\n    gina_birth_year = 2005 - gina_age_in_2005\n    \n    # James was 20 years old on 10th May 1997.\n    james_age_in_1997 = 20\n    # James' birth year would be 1997 minus his age.\n    james_birth_year = 1997 - james_age_in_1997\n    \n    # To find out how old Gina was when James was born,\n    # subtract James' birth year from Gina's birth year.\n    gina_age_when_james_born = james_birth_year - gina_birth_year\n\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the symbol for the amount of sales\n    sales = symbols('sales')\n\n    # Constants for base salary, commission thresholds, and total salary\n    base_salary = 2500\n    total_salary = 3300\n    commission_threshold = 25000\n    low_commission_rate = 0.02\n    high_commission_rate = 0.05\n\n    # Equation for the salary based on sales\n    salary_equation = Eq(\n        base_salary + \n        low_commission_rate * sales + \n        high_commission_rate * (sales - commission_threshold) * (sales > commission_threshold), \n        total_salary\n    )\n\n    # Solve the equation\n    # Note: We consider the case when sales are greater than 25000, as for lower sales the salary would be less than 3300.\n    solved_sales = solve(salary_equation, sales)\n\n    # Filter positive solution since sales cannot be negative\n    positive_sales = [s.evalf() for s in solved_sales if s > 0]\n\n    return positive_sales[0]\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n\n    initial_ratio = Eq(ryan / audrey, 2 / 7)\n    new_ratio = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    solutions = solve((initial_ratio, new_ratio), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    # Total height of six players\n    total_height_six = 6 * 150\n    \n    # Average height of four of them is 2 cm lower than the average of the team\n    avg_height_four = 150 - 2\n    \n    # Total height of four players\n    total_height_four = 4 * avg_height_four\n    \n    # Total height of the other two players\n    total_height_two = total_height_six - total_height_four\n    \n    # Average height of the other two players\n    avg_height_two = total_height_two / 2\n    \n    return avg_height_two\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    prob_pass_first = 0.4\n    prob_fail_first = 1 - prob_pass_first\n    prob_pass_second = 0.5\n    prob_fail_second = 1 - prob_pass_second\n    prob_pass_third = 0.3\n\n    # Probability of passing before fourth attempt = \n    # Probability of passing on first attempt + \n    # Probability of passing on second attempt given first attempt failed + \n    # Probability of passing on the third attempt given first two attempts failed\n\n    prob_before_fourth = (prob_pass_first + \n                          (prob_fail_first * prob_pass_second) +\n                          (prob_fail_first * prob_fail_second * prob_pass_third))\n\n    return prob_before_fourth\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    digits_per_page = 1  # Initial number of digits per page\n    total_digits = 1014\n    used_digits = 0  # Running total of used digits\n    page_number = 1  # Starting page number\n\n    # Continue adding pages while the total number of used digits is less than 1014.\n    while used_digits < total_digits:\n        # If page_number reaches a power of 10 (10, 100, 1000, ...), number of digits per page increases\n        if page_number == 10**digits_per_page:\n            digits_per_page += 1\n        # Calculate the remaining digits after allocating for current page\n        remaining_digits = total_digits - used_digits\n        # Number of pages that can be accounted for with the remaining digits and current digits_per_page\n        pages_with_current_digits = remaining_digits // digits_per_page\n        \n        if pages_with_current_digits == 0:  # No more pages can be added\n            break\n\n        page_number += pages_with_current_digits\n        used_digits += pages_with_current_digits * digits_per_page\n    \n    return page_number\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n    combinations = num_fruits * num_vegetables\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_routes = ways_A_to_B * ways_B_to_C\n    return total_routes\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    num_terms = 30\n    common_difference = -1\n    \n    # Using arithmetic series sum formula: n/2 * (2a + (n - 1)d)\n    sum_series = num_terms / 2 * (2 * first_term + (num_terms - 1) * common_difference)\n    \n    return int(sum_series)\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    rate_per_hour = 50\n\n    time_required = total_pieces / rate_per_hour\n\n    return time_required\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    factorial = 1\n    for i in range(1, 16):\n        factorial *= i\n\n    count_zeros = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count_zeros += 1\n    \n    return count_zeros\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n    equation = Eq(age / 4 + 32, age - 22)\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    def find_total_students(diff):\n        # Starting from a 2x2 square (smallest possible square with more boys than girls)\n        n = 2\n        while True:\n            boys = n * n  # Boys occupy the outermost layer, which forms a complete square\n            girls = (n - 2) * (n - 2)  # Girls occupy the next inner layer, forming a smaller square\n            # Calculation for difference for the current size of the square\n            current_diff = boys - girls\n\n            if current_diff == diff:\n                # Return the total number of students (boys and girls)\n                return boys + girls\n            elif current_diff > diff:\n                # Since the difference exceeded the required one, such a square doesn't exist\n                return None\n\n            # Increase the size of the square\n            n += 2\n\n    return find_total_students(44)\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_climbed = 7 * 5 + 3  # Snail climbs for 5 days and on the 6th day climbs only 3 metres\n    days_to_climb = 18 - total_climbed  # Remaining distance to climb after 6 days\n    slide_down = 7 - days_to_climb  # The snail must slide down this much to make the total climb 18 metres on the 7th day\n    \n    return slide_down\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    # Let's denote the apples for each student as a, b, c and d,\n    # and let a < b < c < d.\n    # Since each student gets at least one apple,\n    # we can start counting from one for the student who gets the least apples.\n    # Then, the other students must get 2, 3, ... apples respectively,\n    # because each student gets a different number of apples.\n    # Therefore, the maximum number for the second student (b)\n    # must leave enough apples for the third and fourth students to get more.\n    # We calculate the maximum for b by finding the maximum distribution first.\n\n    max_d = 48 - (1+2+3)  # Remaining apples for the fourth student if the first three get 1, 2 and 3 apples respectively.\n    max_c = max_d - 1  # The third student gets one less than the fourth student.\n    max_b = max_c - 1  # The second student gets one less than the third student.\n    \n    return max_b\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Fastest two go first\n    time = min(1, 2)\n    \n    # Slowest two go over, fastest rower comes back\n    time += max(5, 10)\n    time += min(1, 2)\n    \n    # Fastest two go over again, second fastest rower comes back\n    time += max(1, 2)\n    time += min(1, 2)\n    \n    return time\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_length, original_width = symbols('original_length original_width')\n    \n    # When the length is increased by 12 cm\n    length_increased_by_12 = original_length + 12\n    \n    # Perimeter after increasing length is 38\n    # Perimeter of rectangle: P = 2 * (length + width)\n    equation = Eq(2 * (length_increased_by_12 + original_width), 38)\n    \n    # Solve the equation for the original length\n    original_length_solution = solve(equation, original_length)\n    \n    # We just need the final equation in terms of width to get the original perimeter\n    # Substitute the original_length_solution into the perimeter equation\n    original_perimeter = 2 * (original_length_solution[0] + original_width)\n    \n    # We know that the increased length has a perimeter of 38\n    # so the original width is the same as the increased width\n    increased_perimeter = 38\n    increased_width = increased_perimeter / 2 - (original_length_solution[0] + 12)\n    \n    # plug in the increased_width into the original_perimeter equation\n    ans = original_perimeter.subs(original_width, increased_width)\n    \n    return ans\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    return 641 + 283\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum((-1)**(n+1) * n**2 for n in range(1, 90))\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n\n    number_of_students = 4\n    ans = factorial(number_of_students)\n    \n    return ans\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # There are three types of food: chocolate (C), peaches (P), strawberries (S)\n    # Since Jenny eats chocolate on the first day, we only have to consider the combinations for the next two days.\n    # For the second day, she can either eat peaches or strawberries (2 options).\n    # For the third day, she can eat the remaining two types, but since she can't eat the same type as on the second day, she only has 1 option.\n    # Therefore, the total number of ways Jenny can eat over the three days is 2 options for the second day * 1 option for the third day.\n    return 2 * 1\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    count = 0\n    for x1 in range(1, 8):\n        x2 = 8 - x1\n        if x1 < x2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    remaining_after_tv = 1 - 5/9\n    remaining_after_table = 1 - 3/4\n    money_left = 160\n\n    remaining_money = money_left / (remaining_after_tv * remaining_after_table)\n    cost_tv = (5/9) * remaining_money\n\n    return cost_tv\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "from math import factorial\n\ndef solution():\n    # There are 7 people to arrange and 7 seats (since 1 seat is always empty, which can be the \"starting\" point)\n    # Since rotating the table yields the same arrangement, we are dealing with circular permutations\n    # The number of circular permutations of n objects is (n - 1)!\n    num_people = 7\n    num_arrangements = factorial(num_people - 1)\n\n    return num_arrangements\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    result = 50 / (5 / 3)\n    return result\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John's and Emma's current ages\n    john_age, emma_age = symbols('john_age emma_age')\n    \n    # John and Emma will be 3 years older in 3 years' time\n    future_john_age = john_age + 3\n    future_emma_age = emma_age + 3\n\n    # Equation 1: In 3 years, the sum of their ages will be 27\n    equation1 = Eq(future_john_age + future_emma_age, 27)\n    # Equation 2: Emma's age is the difference between her own and John's ages\n    equation2 = Eq(emma_age, john_age - emma_age)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_age, emma_age))\n\n    # Emma's current age\n    return solutions[emma_age]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_earnings_per_day = 70\n    days_worked_in_a_week = 6  # From Monday to Saturday\n\n    total_earnings = average_earnings_per_day * days_worked_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    return comb(15, 3)\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed is 48 km/h and Jack's speed is 50 km/h.\n    tom_speed = 48\n    jack_speed = 50\n\n    # Jack leaves 3 hours later than Tom.\n    delay_hours = 3\n\n    # Distance covered by Tom during the delay.\n    tom_distance_delay = tom_speed * delay_hours\n\n    # 5 hours later, the two cars are 15 km away from each other.\n    meeting_after_hours = 5\n\n    # Distance covered by both Tom and Jack in the 5 hours period.\n    tom_distance_meeting = tom_speed * meeting_after_hours\n    jack_distance_meeting = jack_speed * meeting_after_hours\n\n    # Total distance covered by both before being 15 km apart.\n    total_distance_covered = tom_distance_delay + tom_distance_meeting + jack_distance_meeting\n\n    # So the distance between A and B is total distance plus the remaining 15 km.\n    distance_A_B = total_distance_covered + 15\n\n    return distance_A_B\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # Angle for water section\n    water_angle = 36\n\n    # Since the total angle of a pie chart is 360 degrees\n    # The fraction of people who chose water\n    water_fraction = water_angle / 360\n    \n    # The number of people who chose tea is 1/4 of the total\n    # The number of people who chose cola is 30/100 (30%) of the total\n    # And seven people chose coffee.\n    # Therefore, the fraction of people who chose tea, coffee, and cola is 1 - water_fraction\n    tea_coffee_cola_fraction = 1 - water_fraction\n\n    # Calculating the number of people based on coffee as it is a whole number\n    # coffee_fraction + tea_fraction + cola_fraction = tea_coffee_cola_fraction\n    # Knowing that coffee = 7 people, tea = 1/4 of total, and cola = 30% of total\n    # We have: 7/total + 1/4 + 30/100 = tea_coffee_cola_fraction\n    # Simplifying, we get: 7/total + 1/4 + 3/10 = 1 - water_fraction\n    # Now, we need to find 'total' which satisfies this equation\n\n    # Trying total from 7 to a large number until the left-hand side of the equation equals to the right-hand side\n    for total in range(7, 1000):\n        if round(7/total + 1/4 + 3/10, 5) == round(tea_coffee_cola_fraction, 5):\n            return total\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    # Assuming d is the number of dogs and c is the number of children\n    # There are 3 times as many dogs as children, so d = 3 * c\n    # Each child has 2 legs and each dog has 4 legs, so the total number of legs is 2 * c + 4 * d\n    # The total number of legs is 56, so 2 * c + 4 * d = 56\n    # We can substitute d with 3 * c in the equation: 2 * c + 4 * (3 * c) = 56\n    # Simplifying, we get 2 * c + 12 * c = 56, which is 14 * c = 56\n    # Now we can solve for c: c = 56 / 14\n    \n    c = 56 / 14\n    return int(c)\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x - 4, 26)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_pupils = 18\n    present_fraction = 3 / 5  # Since 2/5 are absent, 3/5 are present\n    total_pupils = present_pupils / present_fraction\n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    return (10 ** 5) / (5 ** 5)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = 4 + 5\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number of cookies baked on Sunday\n    sunday_cookies = symbols('sunday_cookies')\n\n    # Set up the equation: Saturday's cookies = 4 * Sunday's cookies - 5\n    # Judy baked 43 more cookies on Saturday than Sunday\n    equation = Eq(4 * sunday_cookies - 5, sunday_cookies + 43)\n\n    # Solve the equation for the number of cookies baked on Sunday\n    solutions = solve(equation, sunday_cookies)\n\n    # Calculate the number of cookies baked on Saturday from the solution\n    saturday_cookies = 4 * solutions[0] - 5\n\n    return saturday_cookies\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    spacing = 2\n\n    # Calculate the number of trees on each edge\n    trees_on_length = (length // spacing) + 1\n    trees_on_width = (width // spacing) + 1\n\n    # Calculate the total number of trees\n    total_trees = 2 * (trees_on_length + trees_on_width - 2)  # Subtract the corner tree which is counted twice\n\n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_in_meters = 1.36\n    height_in_cm = height_in_meters * 100\n    return height_in_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_income = 500\n    tax_percentage = 3\n    tax_amount = initial_income * (tax_percentage / 100)\n    final_income = initial_income - tax_amount\n    return final_income\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_amount = 110\n    adult_price = 20\n    child_price = 15\n    \n    for adults in range(2, total_amount // adult_price + 1):\n        children = (total_amount - (adults * adult_price)) / child_price\n        if children.is_integer():\n            return int(children)\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    num_people = 3\n\n    sweets_per_person = total_sweets // num_people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10**5):\n        if int(str(9) + str(i)[:-1]) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_parts = 1 + 9\n    squash_volume = 750  # volume of orange squash in millilitres\n    total_volume = (squash_volume / 1) * total_parts  # find the total volume of the drink\n    bottles_filled = total_volume // 1000  # since each bottle is 1 litre, which is 1000 millilitres\n\n    return int(bottles_filled)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    left_hand_side = 0.6 * 100\n    right_hand_side = 180\n    ans = right_hand_side / left_hand_side\n    return ans\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # Thomas' solution is not correct because he added fractions incorrectly.\n    # Let's find the correct solution using the same approach for understanding.\n    # Let's assume Li Yan had \"x\" dollars at the beginning.\n    # She spent 1/3 of her money on a book, leaving her with 2/3 of her money.\n    # She then spent 1/2 of the remainder (which is 2/3 of the original) on the bag.\n    # Therefore, she spent (1/2)*(2/3) = 1/3 of the original money on the bag.\n\n    # Let total amount be x\n    # Money spent on book = (1/3) * x\n    # Remaining money = x - (1/3) * x = (2/3) * x\n    # Money spent on bag = (1/2) * (2/3) x = (1/3) * x\n    # Total money spent = Money spent on book + Money spent on bag\n    # (1/3) * x + (1/3) * x = (2/3) * x\n    # Now we know that (2/3) * x = 132 because the total money spent is given as $132.\n    # Therefore, x = 132 * (3/2)\n    total_money = 132 * (3/2)\n\n    return total_money\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    modulus = 7\n\n    remainder = pow(base, exponent, modulus)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # Since we only need the last 2 digits, we are effectively working mod 100\n    part1 = 6 ** 2015 % 100\n    part2 = (2015 * 6) % 100\n    part3 = 2015 ** 6 % 100\n    \n    ans = (part1 + part2 + part3) % 100\n    return ans\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('13456789', 4):\n        ABCDEF = f\"2{perm[0]}0{perm[1]}{perm[2]}{perm[3]}\"\n        EFABCD = f\"{perm[2]}{perm[3]}2{perm[0]}0{perm[1]}\"\n        if 5 * int(ABCDEF) == 6 * int(EFABCD):\n            FACE = f\"{perm[0]}{perm[1]}2{perm[3]}\"\n            return int(FACE)\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    from sympy import divisors\n\n    # We need to find a number that has exactly 8 factors and matches the given factors\n    for n in range(1, 10000):  # We'll search in a reasonable range\n        all_factors = divisors(n)\n        if len(all_factors) == 8 and all(all_factors[i] == [1, 2, 4, 7, 8][i] for i in range(5)):\n            return n\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    return 8234 - 909\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_percentage = 10\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n    \n    return sale_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Let's denote the total number of animals as 'a' and the original number of goats as 'g'\n    a, g = symbols('a g')\n\n    # 65% of the animals were cows, so the number of cows is 0.65 * a\n    # The rest were goats, so the number of goats is a - 0.65 * a = 0.35 * a\n    # When 240 more animals were added, the total number of animals became a + 240\n    # The percentage of cows became 65% + 20% = 85% of the total (new) number of animals\n    # The number of goats doubled, so it became 2 * g\n\n    # Set up the equations\n    equation1 = Eq(g, 0.35 * a)  # initial number of goats\n    equation2 = Eq(0.85 * (a + 240), 0.65 * a + 240)  # the percentage of cows after adding 240 more animals\n    equation3 = Eq(2 * g, a + 240 - (0.85 * (a + 240)))  # doubled number of goats\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (a, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    first_month_sold = 1680\n    kept_decrease_ratio = 3/20\n    second_month_sold_ratio = 7/20\n    second_month_sold = first_month_sold * (1 + second_month_sold_ratio)\n\n    # Calculate the kept decrease amount\n    kept_decrease = first_month_sold * kept_decrease_ratio\n\n    # Calculate the total number of cookies in the box by adding the decrease to the second month sold cookies\n    total_cookies = second_month_sold + kept_decrease\n    \n    return int(total_cookies)\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_position_from_front = 6\n    amy_position_from_back = 8\n    total_children = jolene_position_from_front + amy_position_from_back - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slip_down = 3\n    jumps_per_period = 2\n\n    # Distance covered in two jumps before slipping back\n    net_progress = (jump_up * jumps_per_period) - slip_down\n\n    # Find the full periods needed to reach just below the top\n    full_periods = (total_height - jump_up) // net_progress\n\n    # Find the remaining distance after the full periods\n    remaining_distance = (total_height - jump_up) % net_progress\n\n    # Calculate the total jumps\n    # Add 1 because we always need that jump-up to reach or surpass the top\n    total_jumps = (full_periods * jumps_per_period) + 1\n\n    # Check if an additional period is needed to reach the top\n    if remaining_distance > 0:\n        total_jumps += jumps_per_period\n\n    return total_jumps\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    return 78.2 - 31.45 + 5.24 - 2.3\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 6), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n\n    # Total perimeter of the pentagon is 5 times the side length\n    perimeter = 5 * side_length\n\n    # One sunflower at each corner, so subtract 5 from perimeter, before dividing\n    sunflowers_along_sides = (perimeter - 5) / distance_apart\n\n    # Add 5 for the sunflowers on each corner\n    total_sunflowers = sunflowers_along_sides + 5\n\n    return int(total_sunflowers)\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    pounds_to_pence = 300  # £3 converted to pence\n    num_stamps = pounds_to_pence // stamp_cost_pence\n    \n    return num_stamps\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    total_people = 39\n    boat_capacity = 7\n    trip_duration = 2  # in minutes\n\n    total_trips = (total_people - 1) // (boat_capacity - 1) * 2 - 1\n    total_time = total_trips * trip_duration\n\n    return total_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    # Let x be the normal duration of the trip at the usual speed.\n    # Distance = Speed * Time\n    # The distance to London does not change, thus at the usual speed of 45 mph for x hours \n    # is equal to driving at 30 mph for x + 2 hours.\n\n    # 45 * x = 30 * (x + 2)\n    # 45x = 30x + 60\n    # 45x - 30x = 60\n    # 15x = 60\n    # x = 60 / 15\n    x = 60 / 15\n\n    return x\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    ans = 100 * 99\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        if (9 + 7 + 6 + digit + 3) % 3 == 0:\n            return digit\n            \nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Sum from 3 to 10\n    sum_to_10 = sum(range(3, 11))\n    # Sum from 3 to 6 (as it's mirrored)\n    sum_to_6 = sum(range(3, 7))\n    \n    # Total sum is sum to 10 plus sum to 6 minus the peak value (10) to avoid double-counting it\n    total_sum = sum_to_10 + sum_to_6 - 10\n    \n    return total_sum\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def splitting_number(n, max_part):\n        # Base case: when the number to split is 0, there is only one way to split it (using no numbers)\n        if n == 0:\n            return 1\n        ways = 0\n        # Start splitting from 1 to the smallest of max_part and n\n        for i in range(1, min(max_part, n) + 1):\n            # Recursively find other splitting ways\n            ways += splitting_number(n - i, i)\n        return ways\n\n    # Subtract 1 because the function also counts the number itself as a split (5 = 5)\n    ans = splitting_number(5, 5) - 1\n    return ans\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a = 3\n    b = 10\n    for i in range(3, 1997):\n        a, b = b, (a + b) % 3  # only the remainder when divided by 3 is relevant\n    return b\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    import math\n    numerator = (4.219 ** 2) / (4 + (2/3) + (38/59))\n    denominator = 2.501 ** 3\n    answer = numerator / denominator\n    return round(answer, 3)\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the total number of sweets Mr. Lim has,\n    # and n be the number of students.\n    s, n = symbols('s n')\n\n    # If Mr. Lim gives each student 6 sweets, he will be short of 26 sweets.\n    equation1 = Eq(s, 6 * n - 26)\n\n    # If he gives each student 5 sweets, he will be short of 5 sweets.\n    equation2 = Eq(s, 5 * n - 5)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (s, n))\n\n    # We want to find the total number of sweets s.\n    return solutions[s]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Let the number of fruits on the middle tree be x.\n    # Then the trees will have x-3, x-2, x-1, x, x+1, x+2, x+3, x+4 fruits respectively.\n    # The sum of fruits for 8 trees will be:\n    # (x-3) + (x-2) + (x-1) + x + (x+1) + (x+2) + (x+3) + (x+4)\n\n    # This simplifies to:\n    # 8x + (1 - 2 - 3 + 4 + 3 + 2 + 1)\n    # = 8x\n\n    # We are looking for a value of x such that 8x = 225.\n    # Since 225 is not divisible by 8, there's no integer value of x to satisfy the equation.\n    # Thus, it's not possible for the sum to be exactly 225.\n    \n    return \"Not possible, as 225 is not divisible evenly by 8.\"\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    \n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, blue = symbols('white blue')\n    equation = Eq(6 * blue + blue, 63)\n\n    solutions = solve(equation, (white, blue))\n\n    return solutions[blue] * 6\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo_age, son_age = symbols('leo_age son_age')\n\n    # Equation representing the age difference when Leo was the same age as his son now\n    equation1 = Eq(leo_age - son_age, son_age - 4)\n\n    # Equation representing the age difference when the son reaches Leo's current age\n    equation2 = Eq(leo_age + (leo_age - son_age), 70)\n\n    solutions = solve((equation1, equation2), (leo_age, son_age))\n\n    return solutions[leo_age]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    \n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange singing performances: 4!\n    sing_perms = factorial(4)\n    \n    # There are 4 spots between singing performances (start, between each pair, and end)\n    # to place the 3 dancing performances to ensure at least 1 singing performance in\n    # between them. This is equivalent to \"choose 3 from 5\", which is 5C3.\n    dance_spots = 5\n    dances_to_place = 3\n    dance_perms = factorial(dance_spots) // (factorial(dances_to_place) * factorial(dance_spots - dances_to_place))\n    \n    # Multiply the permutations of singing arrangements with\n    # the number of ways to place dancing performances.\n    total_perms = sing_perms * dance_perms\n    \n    return total_perms\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    heidi_age = 8\n    dad_age = 50\n    years_passed = 0\n\n    while True:\n        if (dad_age + years_passed) == 4 * (heidi_age + years_passed):\n            return years_passed\n        years_passed += 1\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    ans = 554 + 479\n    return ans\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    n = 60\n    count = 0\n    i = 5\n    while n // i >= 1:\n        count += n // i\n        i *= 5\n    return count\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Calculate the total of first three numbers using the average\n    total_three_numbers = 3 * 120\n    \n    # Calculate the total of four numbers using the new average\n    total_four_numbers = 4 * 150\n    \n    # The fourth number is the difference between the total for four and three numbers\n    fourth_number = total_four_numbers - total_three_numbers\n\n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    right_side = 11 * 14 + 26\n    ans = right_side / 15\n    return ans\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    r = symbols('r')\n    equation = Eq(216*r, r**2)\n\n    solutions = solve(equation, r)\n\n    # filter the solutions to find the positive value that makes 216r a square number\n    ans = [sol.evalf() for sol in solutions if sol.is_real and sol > 0]\n    \n    # since the question implies a singular value we take the first result\n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    return (3 / 13) * 52\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    daily_climb = 8\n    nightly_slip = 3\n    net_daily_climb = daily_climb - nightly_slip\n    total_days = 9\n    # On the 9th day, the snail climbs out without slipping back, hence we calculate upto 8 days\n    depth_after_8_days = net_daily_climb * (total_days - 1)\n    total_depth = depth_after_8_days + daily_climb  # Add the last day's climb to reach out of the well\n    \n    if total_depth != 45:  # Zach's calculation\n        is_correct = False\n    else:\n        is_correct = True\n        \n    return (is_correct, total_depth)\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount = 15 / 100\n    discounted_price = original_price * (1 - discount)\n    \n    return discounted_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = remainder + 1  # The smallest possible divisor is one greater than the remainder\n    dividend = quotient * smallest_divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bag_of_sweets, can_of_drink = symbols('bag_of_sweets can_of_drink')\n\n    # Rachel's purchase: 3 bags + 5 drinks = £4.90\n    equation1 = Eq(3 * bag_of_sweets + 5 * can_of_drink, 4.90)\n\n    # Rosie's purchase: 1 bag + 3 drinks = £2.70\n    equation2 = Eq(1 * bag_of_sweets + 3 * can_of_drink, 2.70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bag_of_sweets, can_of_drink))\n\n    return solutions[bag_of_sweets]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial as fact\n    # Total number of ways without restriction for 6 people\n    total_ways = fact(6)\n    # Restriction ways with Teddy on the furthest left\n    restricted_ways = fact(5)\n    # Subtracting restriction from total number of ways\n    result = total_ways - restricted_ways\n    return result\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    difference = -4\n\n    # Since the terms go negative after the x-th term,\n    # we need to find x such that 50 + (x-1)*(-4) < 0.\n    # Solving for x gives x = (50 / 4) + 1.\n\n    num_terms = (first_term // abs(difference)) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4/9\n    result = total_pence * fraction\n    return int(result)\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i % 10 + i // 10) % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    total_sum = 280\n    n = 7\n    # For seven consecutive numbers, the middle number is the average\n    middle_number = total_sum // n\n    # The largest number is three more than the middle number\n    largest_number = middle_number + (n // 2)\n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    ans = (1000**2 - 990**2) + (980**2 - 970**2) + (20**2 - 10**2)\n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b')\n    \n    equation1 = Eq(a + b, 49)\n    equation2 = Eq(a - b, 9)\n    \n    solutions = solve((equation1, equation2), (a, b))\n    \n    return max(solutions[a], solutions[b])\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    \n    # Since the HCF is 75, both A and B should be multiples of 75.\n    for A in range(75, 1000, 75):\n        if len(set(str(A))) < 3:  # A should have at least two equal digits.\n            for B in range(75, 1000, 75):\n                if A != B and len(set(str(B))) < 3:  # B should also have two equal digits and must be different from A.\n                    if A % 75 == 0 and B % 75 == 0 and max_sum < A + B:\n                        max_sum = A + B\n                        \n    return max_sum\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    total_sum = 0\n    add = True\n    for num in range(20, 1, -2):\n        if add:\n            total_sum += num\n        else:\n            total_sum -= num\n        add = not add\n    return total_sum\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    numbers = [8, 32, 72, 128, 200, 288, 392, 512, 648]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "def solution():\n    from math import factorial\n\n    # Places for magazines: sMsMsMsMsM (s: storybook, M: magazines)\n    # There are 6 (5 + 1) possible slots for the magazines among storybooks\n    # We choose 5 out of these 6 slots for magazines.\n    slots_for_magazines = factorial(6) // (factorial(5) * factorial(6 - 5))\n\n    # Now, arrange 5 magazines and 5 storybooks in their respective chosen spots.\n    arrange_magazines = factorial(5)\n    arrange_storybooks = factorial(5)\n\n    # Total arrangements:\n    total_arrangements = slots_for_magazines * arrange_magazines * arrange_storybooks\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n\n    current_space = 0\n    next_move_backward = False\n\n    for throw in throws:\n        if next_move_backward:\n            current_space -= throw\n            next_move_backward = False\n        else:\n            if throw == 6:\n                next_move_backward = True\n            else:\n                current_space += throw\n\n    # The player cannot move to a space before 1\n    if current_space < 1:\n        current_space = 1\n\n    return current_space\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n    total_money = 756\n    money_transferred = 65\n\n    # Initial situation: Alex + Brayden = total_money\n    equation1 = Eq(alex + brayden, total_money)\n\n    # After transfer: Alex - money_transferred = 3 * (Brayden + money_transferred)\n    equation2 = Eq(alex - money_transferred, 3 * (brayden + money_transferred))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    # Initially, I have the entire packet of fruit gums.\n    # Let's assume x is the total number of fruit gums.\n\n    # I ate 2 fruit gums during the music lesson, so there are (x - 2) left.\n    # Shared one third of the remaining with friends, so there are 2/3 * (x - 2) left.\n    # I then finish the fruit gums over the next four lessons in equal amounts.\n    # This means 2/3 * (x - 2) must be divisible by 4.\n\n    x = 3  # Start checking from the smallest possible number of gums that could be divided into thirds and then quarters.\n    answer_found = False\n\n    while not answer_found:\n        remaining_after_music_lesson = x - 2\n        remaining_after_sharing = (2 / 3) * remaining_after_music_lesson\n        \n        # Check if the remaining amount after sharing is divisible by 4 equally.\n        if remaining_after_sharing.is_integer() and remaining_after_sharing % 4 == 0:\n            answer_found = True\n        else:\n            x += 3  # Increasing x by 3 to make sure that after eating 2 and sharing 1/3, the result is still an integer.\n\n    return x\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n    james_gives = (james - kate) / 2\n    return james_gives\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    number = 17.1\n    one_tenth = number / 10\n    return one_tenth\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            if (4 + 2 + A + 2 + 8 + B) % 9 == 0 and (4 - 2 + A - 2 + 8 - B) % 11 == 0:\n                return A * 10 + B\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum = 10 * 10  # Average * number of values\n    remaining_sum = 9 * 9  # New average * new number of values\n    removed_number = total_sum - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmph = 3.6\n    time_seconds = 300\n    \n    # Convert speed to meters per second (1 km/h = 1000 m / 3600 s)\n    speed_mps = speed_kmph * (1000 / 3600)\n    \n    # Distance = speed x time\n    distance = speed_mps * time_seconds\n    \n    return distance\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount each sibling received when all four shared the money\n    x = symbols('x')\n  \n    # The original sum is 4 times what each sibling received\n    original_sum = 4 * x\n    \n    # If the brothers alone shared the money (without the sister),\n    # they would receive x + 20 each, and there are 3 brothers\n    new_sum = 3 * (x + 20)\n    \n    # Set up the equation: original sum equals the new sum\n    equation = Eq(original_sum, new_sum)\n    \n    # Solve for x\n    solution_x = solve(equation, x)[0]\n    \n    # Calculate the original sum\n    ans = 4 * solution_x\n    \n    return ans\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # The sum of the first n odd cubes can be found as the square of the sum of the first n odd numbers.\n    # Since we need to calculate the sum up to 21, we have (21 + 1) / 2 = 11 terms (as 21 is odd itself)\n    \n    n_terms = (21 + 1) // 2\n    sum_of_odds = sum(range(1, 2*n_terms, 2))\n    \n    # The formula for the sum of the first n odd cubes is the square of the sum of n odd numbers\n    ans = sum_of_odds ** 2\n    \n    return ans\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, blue = symbols('red green blue')\n\n    # After giving away beads condition\n    equation1 = Eq(green * 2, red)\n    equation2 = Eq(blue + 112, red - 50)\n    equation3 = Eq(red + green + (blue + 112), 350)\n\n    solutions = solve((equation1, equation2, equation3), (red, green, blue))\n\n    # Original number of blue beads\n    original_blue = solutions[blue] + 112\n\n    return original_blue\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # The sum of 4 out of 5 numbers to get the average:\n    sum1 = 4 * 36\n    sum2 = 4 * 38\n    sum3 = 4 * 39\n    sum4 = 4 * 45\n    sum5 = 4 * 49\n\n    # The sum of all 5 numbers (subtracting each sum from the total sum gives the excluded number)\n    total_sum = sum1 + sum2 + sum3 + sum4 + sum5\n\n    # The sum of the 4 largest numbers will give the smallest total sum when one number is excluded.\n    # Thus, excluding the smallest number (average of 36) gives us the sum of the largest 4 numbers.\n    sum_of_largest_4 = total_sum - sum1\n\n    # The largest number is therefore the sum of the largest 4 numbers minus the sum of the smallest 3 numbers\n    # which can be calculated by subtracting the second smallest average (38) from the sum_of_largest_4.\n    largest_number = sum_of_largest_4 - sum2\n\n    return largest_number\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4 / 5\n    art_books_fraction = 1 / 3\n\n    # Art books are 1/3 of the total, and that is equal to 4/5 of the science books\n    # If a is the number of art books and s is the number of science books, we have:\n    # a / 3 = (4/5) * s\n    # We know a = 360, so we can solve for s:\n    # 360 / 3 = (4/5) * s\n    science_books = (art_books / art_books_fraction) * science_books_fraction\n\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Katelyn and Jared's stickers\n    k_stickers, j_stickers = symbols('k_stickers j_stickers')\n    \n    # Equation based on the ratio given: Katelyn : Jared = 2 : 5\n    eq1 = Eq(k_stickers / j_stickers, 2 / 5)\n    \n    # Jared has 60 more stickers than Katelyn\n    eq2 = Eq(j_stickers - k_stickers, 60)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (k_stickers, j_stickers))\n    \n    # Sum of both Katelyn's and Jared's stickers\n    total_stickers = solutions[k_stickers] + solutions[j_stickers]\n    \n    return total_stickers\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    ans = 32 * 20 * 300\n    return ans\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    first_rate = 1.15763  # 5% for three years\n    second_rate = 1.10**2 # 10% for two years\n    final_amount = initial_investment * first_rate * second_rate\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # Every person should get 16/24 = 2/3 of a sausage.\n    # To achieve this, we can cut each sausage into thirds. \n    # That way, we will have 16 * 3 = 48 pieces, enough to give each person 2 pieces.\n    # So, the number of cuts required per sausage is 2 (to cut it into 3 pieces).\n    # Therefore, the total number of cuts for 16 sausages is 16 * 2.\n    \n    cuts_per_sausage = 2\n    total_sausages = 16\n    total_cuts = cuts_per_sausage * total_sausages\n    \n    return total_cuts\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n    \n    # Number of textbooks for each subject\n    chinese_books = 42\n    math_books = 63\n    nature_books = 28\n\n    # Greatest possible number of textbooks each stack can contain\n    ans = gcd(gcd(chinese_books, math_books), nature_books)\n\n    return ans\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    d = symbols('d')\n    # Qiqi's speed (m/min)\n    speed_qiqi = 60\n    # Weiling's speed (m/min)\n    speed_weiling = 72\n    # Weiling starts 2 minutes after Qiqi\n    start_difference = 2\n    # Weiling arrives 4 minutes before Qiqi\n    arrival_difference = 4\n\n    # Qiqi's time to travel distance d\n    time_qiqi = d / speed_qiqi\n    # Weiling's time to travel distance d\n    time_weiling = d / speed_weiling\n\n    # Equation representing that Weiling's travel time is Qiqi's travel time minus the start difference and the arrival difference\n    equation = Eq(time_weiling, time_qiqi - start_difference - arrival_difference)\n\n    # Solve for the distance d\n    solution = solve(equation, d)\n\n    return solution[0]\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the work rates of Star and Nini as S and N, respectively.\n    S, N = symbols('S N')\n\n    # If Star types for 5 hours and then Nini types for 20 hours, they finish the job.\n    eq1 = Eq(5*S + 20*N, 1)\n\n    # If Star types for 20 hours and then Nini types for 8 hours, they finish the job.\n    eq2 = Eq(20*S + 8*N, 1)\n\n    # Solving the equations to find N\n    solutions = solve((eq1, eq2), (S, N))\n\n    # Time for Nini to finish the job by herself is 1/N\n    time_for_nini = 1 / solutions[N]\n\n    return time_for_nini\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Number of construction companies in the original scenario\n    companies_original = 4\n    # Time in days to build the expressway in the original scenario\n    time_original = 5\n    # Length of the expressway in meters in the original scenario\n    length_original = 900\n    \n    # Length of the expressway to be built in the new scenario\n    length_new = 2700\n    \n    # Since work = rate * time and work done remains constant,\n    # rate is inversely proportional to time when work is constant\n    # Original work rate (work done per day by all companies together)\n    work_rate_original = length_original / time_original\n    \n    # Work rate per company (assuming each has the same rate)\n    work_rate_per_company = work_rate_original / companies_original\n    \n    # Total work to be done for new expressway\n    work_new = length_new\n    \n    # Time for 1 company to complete the new work\n    time_new = work_new / work_rate_per_company\n    \n    return time_new\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # St Petersburg is UTC+3\n    st_petersburg_time_diff = 3\n    # Manchester is UTC+1\n    manchester_time_diff = 1\n\n    # Richard meets the plane at 12 noon St Petersburg time\n    st_petersburg_meeting_time = datetime.strptime('12:00', '%H:%M')\n\n    # Flight duration is unknown, we need to make assumptions based on given information\n    # Assumption: Flight duration (in hours) is an average for a direct flight from Manchester to St Petersburg\n    # Assumption flight duration picked for demonstration: 3.5 hours (average flight time)\n    # Note: Flight duration may vary, this is an approximation for demonstration\n    flight_duration_hours = 3.5\n\n    # Calculate when the plane left Manchester\n    departure_time = st_petersburg_meeting_time - timedelta(hours=flight_duration_hours) \\\n                     - timedelta(hours=st_petersburg_time_diff - manchester_time_diff)\n\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    lbs = kg * kg_to_lbs\n    return lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    height_difference = 45\n    ben_height = jane_height - height_difference\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Ben's position from the front\n    ben_position_front = 6\n    \n    # Number of people between Ben and Frank\n    people_between = 10\n    \n    # Frank's position from the back\n    frank_position_back = 9\n    \n    # Total number of people before Frank\n    total_people_before_frank = ben_position_front + people_between\n    \n    # Total number of people in the queue\n    total_people = total_people_before_frank + frank_position_back\n    \n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres * total_ratio) / coffee_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 8 == 2 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum = 0\n    for i in range(2, 33, 2):\n        if i % 4 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = 72 / 100 * 140\n    return result\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    # Let the total number of marbles be x\n    # According to the problem, we have the following equation:\n    # (2/5)*x + (1/3)*x + 96 = x\n\n    # We can solve for x as follows:\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/5)*x + (1/3)*x + 96, x)\n    total_marbles = solve(equation, x)[0]\n\n    return total_marbles\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    annual_interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    num = 42663\n    rem = num % 9\n    rem_squared = (rem ** 2) % 9\n    \n    return rem_squared\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    last_digits = sum(int('1' * i) for i in range(1, 2016)) % 10000\n    return last_digits\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds digit, cannot be zero\n        for tens in range(0, 10):  # tens digit\n            for ones in range(0, 10, 2):  # ones digit, must be even\n                if hundreds + tens + ones == 8:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    unit_digit_13 = (13 ** 242) % 10\n    unit_digit_17 = (17 ** 379) % 10\n    unit_digit_4 = (4 ** 2012) % 10\n\n    ans = (unit_digit_13 + unit_digit_17 * unit_digit_4) % 10\n\n    return ans\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # In the worst case scenario, we might pick a blue and a yellow marble first.\n    # To ensure we have two marbles of the same color, we must pick one more marble.\n    # So the minimum marbles we need to pick is 3.\n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    result = solve_congruence(*congruences)\n\n    return result[0]\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3 # Since the sequence is decreasing\n    n = 7 # 7th term\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    seventh_term = first_term + (n - 1) * common_difference\n\n    return seventh_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Calculate the portion of money spent on plates\n    portion_plates = 1 - 3/4 - 1/6\n\n    # Calculate the original sum based on the portion and the amount spent on plates\n    original_sum = 36 / portion_plates\n\n    return original_sum\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for p in permutations(range(1, 10)):\n        A = (100 * p[0] + 10 * p[1] + p[2]) + \\\n            (100 * p[1] + 10 * p[2] + p[3]) + \\\n            (100 * p[2] + 10 * p[3] + p[4]) + \\\n            (100 * p[3] + 10 * p[4] + p[5]) + \\\n            (100 * p[4] + 10 * p[5] + p[6]) + \\\n            (100 * p[5] + 10 * p[6] + p[7]) + \\\n            (100 * p[6] + 10 * p[7] + p[8])\n        max_sum = max(max_sum, A)\n    return max_sum\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    time_per_mile = 2 * 60 + 30  # convert 2 minutes and 30 seconds to total seconds\n    total_time_seconds = 1 * 60 * 60  # convert 1 hour to seconds\n    miles = total_time_seconds / time_per_mile\n    \n    return miles\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    # Initialize the count of numbers and the current number to check.\n    count = 0\n    current = 8\n    \n    # Loop until we find the 2012th number with leftmost digit 8.\n    while True:\n        # Check if the current number has 8 as its leftmost digit.\n        if str(current)[0] == '8':\n            count += 1\n            # If we are at the 2012th number, return the current number.\n            if count == 2012:\n                return current\n        # Increment the current number to check the next one.\n        current += 1\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Since the balls are divided among 5 students with consecutive numbers, let's denote\n    # the number of balls the middle student gets as 'x'. Therefore, students get x-2, x-1, x, x+1, x+2 balls respectively.\n    # The sum of these numbers equals to the total number of balls: 160.\n    \n    # The equation for the sum of 5 consecutive numbers (arithmetic progression) is:\n    # (x-2) + (x-1) + x + (x+1) + (x+2) = 160\n    \n    # This simplifies to: 5x = 160\n    # Hence, x = 160 / 5\n    x = 160 // 5\n    \n    # The student with the most balls has x+2 balls.\n    return x + 2\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # Initialize variable to store the result\n    sum_of_ages = 0\n\n    # Iterate through possible ages of John (and Mary who is 1 year younger)\n    for john_age in range(1, 50):\n        mary_age = john_age - 1\n\n        # Check if the product of their current ages is less than 2019\n        if john_age * mary_age < 2019:\n            # Iterate through possible ages of the eldest child\n            for eldest_child_age in range(1, 30):\n                middle_child_age = eldest_child_age - 2\n                youngest_child_age = eldest_child_age - 4\n\n                # Product of the children's current ages\n                children_product = eldest_child_age * middle_child_age * youngest_child_age\n\n                # Product of John and Mary's ages next year\n                next_year_john_mary_product = (john_age + 1) * (mary_age + 1)\n\n                # Product of the children's ages next year\n                next_year_children_product = (eldest_child_age + 1) * (middle_child_age + 1) * (youngest_child_age + 1)\n\n                # Check if the product of the children's ages is also less than 2019\n                # Also, both products should be greater than 2020 next year\n                if (children_product < 2019 and next_year_john_mary_product > 2020\n                        and next_year_children_product > 2020):\n                    sum_of_ages = john_age + mary_age + eldest_child_age + middle_child_age + youngest_child_age\n                    return sum_of_ages  # End the function as soon as we find the solution\n\n    return sum_of_ages  # If no solution is found within the constraints\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    return 25 / 100 * 80\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum([i**2 for i in range(2, 21, 2)])\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    tax_amount = 7000\n    initial_tax_rate = 0.15\n    additional_tax_rate = 0.20\n    initial_income_limit = 20000\n\n    initial_tax = initial_income_limit * initial_tax_rate\n\n    if tax_amount <= initial_tax:\n        income = tax_amount / initial_tax_rate\n    else:\n        additional_tax = tax_amount - initial_tax\n        additional_income = additional_tax / additional_tax_rate\n        income = initial_income_limit + additional_income\n    \n    return income\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    return 1.4 / 10\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    count = 0\n    # Since there are requirements for the minimum number of envelopes in each mailbox, \n    # subtract these from the total to simplify the problem.\n    total_envelopes = 15 - (2 + 4 + 3) # Subtract the minimum requirement for A, B and C\n    \n    # Now we distribute the remaining envelopes into 4 mailboxes.\n    # We use combinations_with_replacement because envelopes are indistinguishable.\n    for combo in combinations_with_replacement(range(4), total_envelopes):\n        # Each combination represents how to add the remaining envelopes to each mailbox\n        # but we need to ensure that D also has at least 1 envelope.\n        # box_counts array corresponds to A, B, C, D\n        box_counts = [2, 4, 3, 1]  # Start with the minimum required in each box\n        for box in combo:\n            box_counts[box] += 1  # Add envelopes to boxes based on the combination\n        \n        # We count that as one of the options if only if D has at least 1 envelope.\n        if box_counts[3] >= 1:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    fraction = 1 / 13\n    decimal = format(fraction, '.3000f')  # generate a string of the decimal\n    \n    # The decimal expansion of 1/13 repeats every 6 digits after the decimal point\n    repeating_cycle_length = 6\n    # Position is 2022 - 1, as the first position after the decimal point in the string is index 0\n    position = 2021 % repeating_cycle_length\n\n    ans = int(decimal[position + 2])  # +2 to account for '0.' at the beginning of the string\n    return ans\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    # lengths of the ropes\n    a = 28\n    b = 14\n    c = 56\n\n    # calculate greatest common divisor (GCD) of the lengths\n    gcd_ab = gcd(a, b)\n    gcd_abc = gcd(gcd_ab, c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    legs_of_chicken = 2\n    legs_of_rabbit = 4\n    total_legs = 100\n    total_animals = 40\n\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if (chickens * legs_of_chicken) + (rabbits * legs_of_rabbit) == total_legs:\n            return chickens\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    # Initial state, both stores had an equal number of packs: A = B\n    # After A sold 290 packs, B had 3 times as many as A: B = 3 * (A - 290)\n    equation1 = Eq(A, B)\n    equation2 = Eq(B, 3 * (A - 290))\n\n    solutions = solve((equation1, equation2), (A, B))\n    \n    # The solution gives us the number of packs in each store initially\n    # We want the total, so we sum the counts from store A and B\n    total_packs = solutions[A] + solutions[B]\n\n    return total_packs\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    boys_packed = 4\n    girls_school = 7\n    boys_home = 3\n    total_home = 5\n    girls = total_students - boys\n\n    girls_packed = total_students - (boys_packed + girls_school + boys_home + (total_home - boys_home))\n    total_packed = boys_packed + girls_packed\n\n    return total_packed\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark_chocolate_cost = 20 * 6\n    total_milk_chocolate_cost = 20 * 5\n    total_strawberry_chocolate_cost = 20 * 4\n    total_cost = total_dark_chocolate_cost + total_milk_chocolate_cost + total_strawberry_chocolate_cost\n    total_chocolates = 20 + 20 + 20\n    average_cost = total_cost / total_chocolates\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    total_uniforms = 3600\n    made_in_5_days = 720\n    days_for_720_sets = 5\n    daily_rate = made_in_5_days / days_for_720_sets\n    \n    total_days_needed = total_uniforms / daily_rate\n\n    return total_days_needed\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    n = 36\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    return (100 - 1) // 12\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in m/s\n    time = 19  # time in seconds\n\n    length = speed * time  # distance formula: distance = speed * time\n\n    return length\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # 1/man_rate is the time the man takes to finish the orange juice on his own,\n    # which is 15 days, so man_rate is 1/15 barrel per day.\n    man_rate = 1/15\n    \n    # 1/combined_rate is the time they take to finish the orange juice together,\n    # which is 12 days, so combined_rate is 1/12 barrel per day.\n    combined_rate = 1/12\n    \n    # The wife's rate is the combined rate minus the man's rate.\n    wife_rate = combined_rate - man_rate\n    \n    # The number of days the wife would take to finish the barrel on her own\n    # is the reciprocal of her rate.\n    wife_days = 1 / wife_rate\n    \n    return wife_days\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    return result\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_fruits = 18 + 30  # Total number of pears and strawberries\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    num_tricycles = 6\n    total_wheels = wheels_per_tricycle * num_tricycles\n\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    discount_books = 3 + 1\n    books_wanted = 5\n\n    discount_price_for_set = book_price * discount_books - book_price\n    num_discount_sets = books_wanted // discount_books\n    remaining_books = books_wanted % discount_books\n\n    total_price = (discount_price_for_set * num_discount_sets) + (remaining_books * book_price)\n    \n    return total_price\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 6, 3 * x - 3)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    average_pencils_total = 35\n    average_pencils_boys = 20\n    average_pencils_girls = 60\n\n    equation = Eq(boys * average_pencils_boys + girls * average_pencils_girls, average_pencils_total * 40)\n\n    num_boys = solve(equation, boys)[0]\n\n    return num_boys\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154  # Below sea level\n    mount_fuji_tip = 3776  # Above sea level\n\n    distance = abs(turpan_depression_base) + mount_fuji_tip\n\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total = 0\n    for i in range(1, 51):\n        total += int('1' * i)\n    ans = total % 100\n    return ans\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the price of one apple, and b be the price of one banana\n    a, b = symbols('a b')\n\n    # Einstein can afford to buy either 6 apples and 7 bananas for a certain amount (x)\n    equation1 = Eq(6*a + 7*b, 'x')\n\n    # Or he can buy 8 apples and 4 bananas for the same amount (x)\n    equation2 = Eq(8*a + 4*b, 'x')\n\n    # Solve the equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Now, the equation for buying only bananas will be b*number_of_bananas = x\n    # Use the value of b obtained from the solutions to find the number of bananas he could afford\n    number_of_bananas = 'x' / solutions[b]\n\n    return number_of_bananas\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for women, men, children, and total number of people\n    women, men, children, total = symbols('women men children total')\n\n    # Create the equations based on the problem\n    equation1 = Eq(women, 2/5 * total)\n    equation2 = Eq(men, 3 * children)\n    equation3 = Eq(women, children + 190)\n    equation4 = Eq(women + men + children, total)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (women, men, children, total))\n\n    # Extract the solution for the total number of people\n    return solutions[total]\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    from itertools import product\n\n    count = 0\n    # Distribute according to the constraints\n    for a, b, c in product(range(2, 16), range(4, 16), range(3, 16)):\n        d = 15 - (a + b + c)  # Calculate remaining envelopes for box D\n        if d >= 0:\n            count += 1  # Increment count if valid distribution\n    \n    return count\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    both_students = math_students + art_students - total_students\n\n    return both_students\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts of money John and Choon Mui have left\n    john_left, choon_mui_left = symbols('john_left choon_mui_left')\n\n    # Since John and Choon Mui had the same amount of money initially and spent some,\n    # we can set up the equation where John still has 4 times the money Choon Mui has after their spending.\n    equation = Eq(john_left, 4 * choon_mui_left)\n\n    # We now express the amounts John and Choon Mui have left after their respective spending.\n    # Note that we are just rearranging terms in the equation since the starting amounts are the same.\n    equation = Eq(john_left + 30, 4 * (choon_mui_left + 150))\n\n    # Solve for the amount of money John has left\n    solution = solve(equation, (john_left, choon_mui_left))\n\n    return solution[john_left]\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    ans = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    return ans\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    # Let's denote the number of eggs before the second sale as x.\n    # According to the problem, x - 4 = half of x => x = 2 * (remaining_eggs + 4)\n    before_second_sale = 2 * (remaining_eggs + 4)\n    \n    # Now we know that before the second sale, he had before_second_sale eggs.\n    # Let's denote the total number of eggs at first as y.\n    # According to the problem, y - 5 = half of y => y = 2 * (before_second_sale + 5)\n    initial_eggs = 2 * (before_second_sale + 5)\n    \n    return initial_eggs\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    # Conversion factors\n    miles_to_kilometers = 1.60934   # 1 mile is approximately 1.60934 kilometers\n    minutes_to_hours = 1/60         # 15 minutes is 1/4 or 0.25 of an hour\n    \n    # Given values\n    speed_mph = 65               # speed in miles per hour\n    time_minutes = 15            # driving time in minutes\n    \n    # Calculate the distance in miles\n    distance_miles = speed_mph * (time_minutes * minutes_to_hours)\n    \n    # Convert the distance to kilometers\n    distance_kilometers = distance_miles * miles_to_kilometers\n    \n    return distance_kilometers\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    initial_amount = 200\n    increase_percentage = 10 / 100\n\n    increased_amount = initial_amount + (initial_amount * increase_percentage)\n\n    return increased_amount\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    incorrect_divisor = 211  # Leo forgets to put down the decimal point of the divisor 2.11\n    difference_in_result = 98.01  # The difference between the incorrect and true result\n\n    # The incorrect result is the true result minus the difference\n    # Since the incorrect divisor is 100 times the correct divisor (2.11),\n    # the incorrect result will be 100 times less than what it should have been.\n    # Therefore, incorrect_result = true_result / 100\n    # And true_result - incorrect_result = difference_in_result\n    \n    # From above we get true_result - (true_result / 100) = difference_in_result\n    # This simplifies to true_result * (1 - 1/100) = difference_in_result\n    # true_result * 99/100 = 98.01\n    # true_result = 98.01 / (99/100)\n\n    true_result = difference_in_result / (99 / 100)\n    return true_result\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8\n    scale_ratio = 1 / 20\n    model_length_m = actual_length_m * scale_ratio\n    model_length_cm = model_length_m * 100\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    # Using inclusion-exclusion principle\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n\n    return likes_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of male and female visitors on the first day\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n    \n    # Given conditions translated into equations\n    first_day_condition = Eq(male_first_day, female_first_day + 450)\n    second_day_male = male_first_day - 0.18 * male_first_day\n    second_day_female = female_first_day + 0.15 * female_first_day\n    second_day_condition = Eq(second_day_male + second_day_female, 1354)\n    \n    # Solve the system of equations\n    solutions = solve((first_day_condition, second_day_condition), (male_first_day, female_first_day))\n    \n    # Extract the solution for the number of male visitors on the first day\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # The problem is a case of derangement !n, where no element appears in its original\n    # position. The number of derangements of n objects is given by:\n    # !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    \n    n = 4  # Number of people in the line\n\n    derangement = factorial(n)\n    \n    for i in range(1, n + 1):\n        derangement += (-1)**i * factorial(n) // factorial(i)\n\n    return derangement\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    ways = [(i, 8-i) for i in range(1, 7) if (8-i) <= 6 and (8-i) > 0]\n    count = len(ways)\n    return count\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = distance_per_day - slide_per_night\n    days = 0\n\n    while True:\n        days += 1\n        total_distance -= distance_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(95/100 * x - 2/5 * x, 55)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (2, 13)]\n    number, _ = solve_congruence(*congruences)\n    while number < 100:\n        return number\n        number += 7 * 13\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    # Calculate the hourly wage\n    hourly_wage = 78 / 6.5\n    \n    # Calculate the total amount John expects to earn after working 8 hours per day for 7 days\n    weekly_earnings = hourly_wage * 8 * 7\n    \n    # Calculate the remaining debt after paying off as much as possible with the weekly earnings\n    remaining_debt = 700 - weekly_earnings\n    \n    # If remaining_debt is positive, John cannot pay off his debt\n    if remaining_debt > 0:\n        return False, remaining_debt  # John's expectation is wrong, returning False and the remaining debt\n    else:\n        return True, 0                # John can pay off his debt, returning True and no remaining debt\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('20:30', '%H:%M')\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    ans = round(number, -2)\n    return ans\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        s = str(i)\n        if s.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "def solution():\n    from math import lcm\n    # Convert weeks to days for Arjun - 1 week = 7 days\n    arjun_period = 2 * 7\n    yahya_period = 10\n\n    # Find least common multiple\n    return lcm(arjun_period, yahya_period)\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    distance1 = 280\n    speed1 = 7\n    distance2 = 400\n    speed2 = 5\n    distance3 = 800 - (distance1 + distance2)\n    speed3 = 8\n\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for digit1 in range(0, 10):\n        for digit2 in range(0, 10):\n            number = int(f\"2{digit1}9{digit2}\")\n            # The number must end in 0 or 5 to be divisible by 5\n            # The sum of the digits must be divisible by 3 for the number to be divisible by 3\n            if number % 5 == 0 and sum(map(int, str(number))) % 3 == 0:\n                total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    tree_spacing = 7\n\n    num_trees = (highway_length // tree_spacing) - 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    # Initial number of stamps is unknown. Let's denote it as x.\n    \n    # According to the problem, we have the following equation:\n    # x - 14 (gave to her sister) + 11 (bought from Singpost) - 2 (used to send a letter) = 34 (stamps left)\n    # Simplifying the equation, we find the initial number of stamps x:\n    x = 34 + 14 - 11 + 2\n\n    return x\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    fake_note = 50\n    cost_shoes = 30\n    paid_back = 50\n    \n    loss = cost_shoes + paid_back\n    return loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    number_of_terms = (last_term - first_term) // 1 + 1  # Since the common difference is 1\n    sum_of_series = (number_of_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    result = (5 / 7) * 112\n    return result\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "def solution():\n    from math import factorial as fact\n\n    # Consider A, B and C as a single entity since they have to be next to each other\n    remaining_students = 10 - 3 + 1 # (total - ABC + ABC_group)\n\n    # Calculate factorial for the remaining 8 entities\n    remaining_students_permutations = fact(remaining_students)\n\n    # Now, A, B, and C themselves can be arranged in 3! ways\n    abc_permutations = fact(3)\n\n    # Total permutations would be the product of both\n    total_permutations = remaining_students_permutations * abc_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    number_str = ''.join(str(i) for i in range(1, 31))\n    smallest_number = ''.join(sorted(number_str)[:len(number_str)-46])\n    ans = int(smallest_number)\n    return ans\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    blue_balls = 6\n    # To guarantee a white ball, one must pick all blue balls first, then one white ball\n    balls_to_take_out = blue_balls + 1\n    return balls_to_take_out\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total = james + linda + ben\n    return int(total)\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    sum1 = sum(range(1, 5))\n    sum2 = sum(range(2018, 2021))\n    ans = (sum1 * 1) - (sum2 * 0)\n    return ans\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    short_ruler_length = 20\n    overlap_length = 3\n    number_of_rulers = 3\n    \n    total_length = (short_ruler_length * number_of_rulers) - (overlap_length * (number_of_rulers - 1))\n    \n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Jogging time from 6:30 am to 7:30 am is 1 hour\n    jogging_time = 1  # hours\n    jogging_speed = 6  # miles per hour\n\n    # Walking time from 7:30 am to 9:30 am is 2 hours\n    walking_time = 2  # hours\n    walking_speed = 5  # miles per hour\n\n    # Calculate the distances\n    jogging_distance = jogging_time * jogging_speed\n    walking_distance = walking_time * walking_speed\n\n    # Total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    used_cups = 721\n    total_new_cups = 0\n\n    while used_cups >= 7:\n        new_cups, used_cups = divmod(used_cups, 7)\n        total_new_cups += new_cups\n        used_cups += new_cups  # recycle the new cups\n\n    return total_new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    number = 2000\n    less_value = 222\n\n    ans = number - less_value\n\n    return ans\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol A\n    A = symbols('A')\n\n    # Given the puzzle states that each letter represents a unique digit, we can set up the following equations:\n    # Since obtaining A directly from the given knowledge point route is not clear, I assume we are dealing with an alphanumeric puzzle of the form:\n    #   SEND\n    # + MORE\n    # ------\n    #  MONEY\n    # Where A corresponds to the digit representing 'M' (as an example),\n    # since it's the first letter in the vertical sum in a typical SEND + MORE = MONEY puzzle.\n\n    # Setup the symbols for the other letters as well\n    S, E, N, D, M, O, R, Y = symbols('S E N D M O R Y')\n\n    # Setup the equations based on the alphanumeric puzzle\n    # M != 0 because it's the first digit in \"MONEY\"\n    equation1 = Eq(S*1000 + E*100 + N*10 + D + M*1000 + O*100 + R*10 + E, M*10000 + O*1000 + N*100 + E*10 + Y)\n    equation2 = Eq(M, A)  # Based on the assumption\n\n    # Each digit must be different and between 0-9, we set up inequalities\n    # Note: This step assumes a traditional alphanumeric puzzle structure.\n    # Different puzzles may result in modifications to these constraints.\n    inequations = (\n        S != E, S != N, S != D, S != M, S != O, S != R, S != Y,\n        E != N, E != D, E != M, E != O, E != R, E != Y,\n        N != D, N != M, N != O, N != R, N != Y,\n        D != M, D != O, D != R, D != Y,\n        M != O, M != R, M != Y,\n        O != R, O != Y,\n        R != Y,\n        S > 0, M > 0,  # Leading digits cannot be zero\n        S < 10, E < 10, N < 10, D < 10, M < 10, O < 10, R < 10, Y < 10  # Digits must be below 10\n    )\n\n    # Solve for all variables, respecting that each variable must be an integer between 0 and 9\n    solutions = solve((equation1, equation2, *inequations), (S, E, N, D, M, O, R, Y), dict=True)\n\n    # Filter solutions for unique digits and integers\n    unique_solutions = [sol for sol in solutions if len(set(sol.values())) == len(sol.values()) and all(map(lambda v: v.is_integer, sol.values()))]\n\n    # Since the puzzle may have multiple solutions or might be unsolvable with the given constraints we consider only the first valid solution\n    return unique_solutions[0][A] if unique_solutions else None\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # Convert the plot length from meters to centimeters\n    first_cauliflower_offset = 20\n    cauliflower_spacing = 15  # Spacing between each cauliflower\n    cauliflower_width = 45  # Width of a cauliflower\n\n    # Total space occupied by each cauliflower including the space after it\n    total_space_per_cauliflower = cauliflower_spacing + cauliflower_width\n\n    # Remaining length after placing the first cauliflower\n    remaining_length = plot_length_cm - first_cauliflower_offset - cauliflower_width\n\n    # Number of cauliflowers that can be planted on the remaining length\n    number_of_cauliflowers = remaining_length // total_space_per_cauliflower\n\n    # Include the first cauliflower\n    number_of_cauliflowers += 1\n    \n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    total_days = 6\n    total_pages = (14 * 3) + (9 * 2) + 12\n    average_pages = total_pages / total_days\n    return average_pages\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "from math import gcd\n\ndef solution():\n    students_A = 8\n    students_B = 12\n    students_C = 20\n\n    # Find the GCD of the number of students in each class\n    gcd_AB = gcd(students_A, students_B)\n    gcd_ABC = gcd(gcd_AB, students_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    badminton, bowling = symbols('badminton bowling')\n\n    # The badminton club had thrice as many members as the bowling club\n    equation1 = Eq(badminton, 3 * bowling)\n    # After 36 members left the badminton club and 4 left the bowling club,\n    # both clubs had the same number of members\n    equation2 = Eq(badminton - 36, bowling - 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (badminton, bowling))\n\n    # Calculate final count for each club\n    badminton_final = solutions[badminton] - 36\n    bowling_final = solutions[bowling] - 4\n\n    return badminton_final, bowling_final\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * (10**2) # meters per second\n    distance = 1.5 * 10**3 # meters (1.5 kilometers)\n    time = distance / speed_of_sound # time = distance / speed\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    difference = number1 - number2\n    return difference\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_value = 504\n    average_value = 126\n    difference = 6\n    \n    # The number of cards\n    number_of_cards = total_value // average_value\n\n    # The greatest number\n    greatest_number = average_value + (number_of_cards - 1) * difference / 2\n\n    # Smallest number calculation\n    smallest_number = greatest_number - difference\n\n    return int(smallest_number)\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n    \n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the equations to find their current ages\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Calculate Wendy's age in 5 years' time\n    wendy_age_in_5_years = solutions[wendy] + 5\n    \n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n    for i in range(301, 1000):\n        while i % 2 == 0:\n            count_2 += 1\n            i //= 2\n        while i % 5 == 0:\n            count_5 += 1\n            i //= 5\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    total_sum = sum(1 / i for i in range(10, 20))\n    ans = int(total_sum)\n    return ans\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for number in range(10, 100):\n        if number % 6 == 0 and (number - 1) % 13 == 0:\n            return number\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    return 617 - 385\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n    \n    total_students = (english_classes + math_classes) - both_classes\n    \n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    annual_increase = 0.10\n\n    amount_2019 = final_amount / (1 + annual_increase)\n    amount_2018 = amount_2019 / (1 + annual_increase)\n    return amount_2018\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    boys_swim, boys_not_swim, girls_swim, girls_not_swim = symbols('boys_swim boys_not_swim girls_swim girls_not_swim')\n\n    # Total number of pupils\n    equation1 = Eq(boys + girls, 1690)\n    # Number of boys 90 more than girls\n    equation2 = Eq(boys, girls + 90)\n    # Ratio of number of girls who can swim to those who cannot\n    equation3 = Eq(girls_swim / girls_not_swim, 31/49)\n    # Number of boys who can swim is 120 less than number of boys who cannot swim\n    equation4 = Eq(boys_swim, boys_not_swim - 120)\n    # Total number of boys and girls who can swim and cannot swim\n    equation5 = Eq(boys_swim + boys_not_swim, boys)\n    equation6 = Eq(girls_swim + girls_not_swim, girls)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), \n                      (boys, girls, boys_swim, boys_not_swim, girls_swim, girls_not_swim))\n\n    # Number of pupils who cannot swim (boys_not_swim + girls_not_swim)\n    cannot_swim = solutions[boys_not_swim] + solutions[girls_not_swim]\n\n    return cannot_swim\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial as fact\n\n    total_people = 7\n    number_of_people_who_dont_want_to_stand_next_to_each_other = 3\n    \n    # Calculate total permutations without any restrictions\n    total_permutations = fact(total_people)\n\n    # Calculate permutations of people who do not want to stand next to each other\n    unwanted_permutations = fact(number_of_people_who_dont_want_to_stand_next_to_each_other)\n\n    # Calculate number of blocks when the three are together as a single unit\n    blocks = total_people - number_of_people_who_dont_want_to_stand_next_to_each_other + 1\n \n # Calculate permutations of the blocks (considering the three as a single unit)\n    block_permutations = fact(blocks)\n    \n    # Calculate unwanted configurations (three people together in any order times the block permutations)\n    unwanted_configurations = unwanted_permutations * block_permutations\n\n # Subtract the unwanted configurations from total permutations\n    ways = total_permutations - unwanted_configurations\n\n    return ways\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    # Speeds\n    rabbit_speed = 330 # m/min\n    turtle_speed = 30 # m/min\n\n    # Time after which rabbit sleeps (in minutes)\n    rabbit_sleep_time = 10\n\n    # Rabbit's initial distance covered before sleep (in meters)\n    rabbit_initial_distance = rabbit_speed * rabbit_sleep_time\n\n    # Time for which rabbit sleeps (in minutes)\n    rabbit_sleep_duration = 215\n\n    # Turtle's distance covered during rabbit's sleep (in meters)\n    turtle_distance_during_rabbit_sleep = turtle_speed * (rabbit_sleep_time + rabbit_sleep_duration)\n\n    # Remaining distance for rabbit to cover after waking up\n    rabbit_remaining_distance = 6990 - rabbit_initial_distance\n\n    # Time for rabbit to finish the remaining distance (in minutes)\n    rabbit_time_to_finish = rabbit_remaining_distance / rabbit_speed\n\n    # Total time rabbit takes to reach the finish line (in minutes)\n    rabbit_total_time = rabbit_sleep_time + rabbit_sleep_duration + rabbit_time_to_finish\n\n    # Turtle's total distance covered when rabbit reaches the finish line (in meters)\n    turtle_total_distance_when_rabbit_finishes = turtle_speed * rabbit_total_time\n\n    # Calculate who reaches the finish line first\n    if rabbit_total_time <= (6990 / turtle_speed):\n        winner = \"rabbit\"\n        distance_between = 6990 - turtle_total_distance_when_rabbit_finishes\n    else:\n        winner = \"turtle\"\n        distance_between = turtle_total_distance_when_rabbit_finishes - 6990\n\n    return (winner, distance_between)\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    # Calculate the common difference\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    # Calculate the last term using the arithmetic sequence formula\n    last_term = first_term + (total_rows - 1) * common_difference\n    \n    # Using the formula to calculate the sum of an arithmetic sequence\n    total_athletes = (total_rows * (first_term + last_term)) // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n > 0:\n            n //= p\n            count += n\n        return count\n    \n    num_zeros = min(count_factors(789, 2), count_factors(789, 5))\n    return num_zeros\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) / 2\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Given values\n    avg_a = 76\n    avg_b = 67\n    avg_combined = 70\n    number_a = 20\n\n    # Let the number of students in Team B be x\n    # The total score for Team A is avg_a * number_a\n    # The total score for Team B is avg_b * x\n    # The combined total score is avg_combined * (number_a + x)\n    # So we have the equation: avg_a * number_a + avg_b * x = avg_combined * (number_a + x)\n\n    # Rearrange the formula to solve for x\n    x = (avg_combined * number_a - avg_a * number_a) / (avg_b - avg_combined)\n\n    return int(x)\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    # If each school had at most 3 participants, then to maximize the number of schools, we divide the total participants by 3\n    max_schools_with_3_participants = participants // 3\n    # However, to guarantee that at least one school has 4 or more, we add one more school\n    return max_schools_with_3_participants + 1\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    ans = 23 * 76\n    return ans\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f'{hour:02d}{minute:02d}'\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    all_perms = list(permutations(digits, 3))\n    all_numbers = [int(''.join(map(str, perm))) for perm in all_perms]\n    min_product = float('inf')\n\n    for i in range(len(all_numbers)):\n        for j in range(i+1, len(all_numbers)):\n            if not set(str(all_numbers[i])) & set(str(all_numbers[j])):\n                product = all_numbers[i] * all_numbers[j]\n                min_product = min(min_product, product)\n    \n    return min_product\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    # Maximum number a regular die can roll is 6.\n    max_roll = 6\n    \n    # The 25th position is the target, starting from the 1st position.\n    target_position = 25 - 1\n    \n    # The minimum number of times to roll the die to move from 1st to 25th position.\n    min_rolls = target_position // max_roll\n    \n    # If there is a remainder, one more roll is needed.\n    if target_position % max_roll > 0:\n        min_rolls += 1\n    \n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 19\n    common_difference = 50\n    # Last term is 2019, we are going to calculate how many terms are there\n    n = (2019 - first_term) / common_difference + 1\n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    sum_sequence = n / 2 * (first_term + 2019)\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens in range(1, 10):  # The tens digit must be at least 1 for a 2-digit number.\n        for ones in range(10):  # The ones digit ranges from 0 to 9.\n            if tens + ones == 15:\n                return tens * 10 + ones  # Combine tens and ones to form the 2-digit number.\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    return 0.45 + 1.02 + 3.003\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    largest_product = 0\n    smallest_product = float('inf')\n    for perm in permutations(range(1, 10), 7):\n        ABCD = 1000 * perm[0] + 100 * perm[1] + 10 * perm[2] + perm[3]\n        EFG = 100 * perm[4] + 10 * perm[5] + perm[6]\n        if ABCD + EFG == 1993:\n            product = ABCD * EFG\n            largest_product = max(largest_product, product)\n            smallest_product = min(smallest_product, product)\n    return largest_product - smallest_product\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    total_distance = 220\n    climb_per_hour = 40\n    slip_per_hour = 10\n    effective_climb = climb_per_hour - slip_per_hour\n    hours = 0\n\n    while total_distance > 0:\n        hours += 1\n        total_distance -= climb_per_hour\n        if total_distance <= 0:\n            break\n        total_distance += slip_per_hour\n    \n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "def solution():\n    from sympy import isprime\n\n    for number in range(29, 0, -1):\n        if isprime(number):\n            return number\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    missing_number = 3989 - (3000 + 80 + 9)\n    return missing_number\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    total_typists = 5\n    words_typed = 6000\n    time_taken = 20  # in minutes\n\n    words_to_type = 9000\n    typists_remaining = total_typists - 2\n\n    # Find the rate at which one typist can type\n    words_per_minute_per_typist = words_typed / time_taken / total_typists\n\n    # Calculate total time needed for the remaining typists to type 9000 words\n    time_needed = words_to_type / (words_per_minute_per_typist * typists_remaining)\n\n    return time_needed\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cabbage_price = 0.96\n    cabbages_bought = 8\n    total_cabbage_cost = cabbage_price * cabbages_bought\n    \n    lettuces_bought = 6\n    lettuce_price = total_cabbage_cost / lettuces_bought\n    \n    return lettuce_price\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n\n    saved_money = total_money - spent_money\n\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    original_number_of_plants = 11\n    new_number_of_plants = 3  # 11 - 8 plants removed\n\n    original_intervals = original_number_of_plants - 1\n    new_intervals = new_number_of_plants - 1\n\n    new_spacing = total_distance / new_intervals\n\n    return new_spacing\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = 13*60 + 52  # Convert start time to minutes\n    end_time = 14*60 + 5     # Convert end time to minutes\n    \n    duration = end_time - start_time  # Duration of call in minutes\n    cost_per_minute = 14  # Cost in pence per minute\n    \n    total_cost = duration * cost_per_minute  # Total cost in pence\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    n = 20\n    factors = set()\n    \n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    \n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 0.40 * 320\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through all three-digit numbers\n        digits = set(str(i))  # Convert number to a set of unique digits\n        if digits.issubset({'2', '3'}) and '2' in digits and '3' in digits:\n            # Check if the number contains only 2 and 3 and both at least once\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('2017-10-17', '%Y-%m-%d')\n    end_date = datetime.strptime('2017-12-20', '%Y-%m-%d')\n\n    sundays_count = 0\n    current_date = start_date\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sundays_count += 1\n        current_date += timedelta(days=1)\n    \n    return sundays_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_payment = pen_price + ruler_price\n    return total_payment\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    ans = 251 * 27\n    return ans\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, peach = symbols('apple peach')\n    \n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n    \n    solutions = solve((equation1, equation2), (apple, peach))\n    \n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote:\n    # s - the price of a strawberry tart\n    # a - the price of an apple tart\n    s, a = symbols('s a')\n\n    # Number of apple tarts bought is twice the number of strawberry tarts\n    # Let x be the number of strawberry tarts\n    # Then the number of apple tarts is 2x\n\n    # She spent a total of $40, so:\n    # cost_strawberry_tarts + cost_apple_tarts = 40\n    # x*s + 2x*a = 40\n\n    # She spent an equal amount of money on each type of item, so:\n    # x*s = 2x*a\n    # s = 2*a\n\n    # A strawberry tart cost $0.40 more than an apple tart, so:\n    # s = a + 0.40\n\n    equations = (Eq(s, 2*a), Eq(s, a + 0.40), Eq(a*2*x + s*x, 40))\n\n    # We solve the system for a, s and x\n    solution = solve(equations, (a, s, x))\n\n    # We return the total number of tarts (x + 2x)\n    return 3 * solution[x]\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import lcm\n    \n    # The time each traffic light takes to change (in seconds)\n    first_light_time = 30\n    second_light_time = 0.75 * 60\n    \n    # The time the 3 lights turn green together (in seconds)\n    all_lights_time = 9 * 60\n\n    # Compute the least common multiple of the first two lights\n    lcm_first_second = lcm(first_light_time, int(second_light_time))\n\n    # The third light's change interval must be a divisor of the LCM of all lights\n    # starting from at least 30 seconds or longer\n    third_light_time = lcm_first_second\n    while third_light_time < all_lights_time:\n        if all_lights_time % third_light_time == 0:\n            return third_light_time\n        third_light_time += first_light_time\n\n    return third_light_time\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    ans = 43 * 16\n    return ans\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    ways = factorial(5)  # The number of ways to distribute 5 distinct skiboards among 5 people.\n    \n    return ways\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the total number of pieces as 'x'\n    x = symbols('x')\n\n    # 20% of the total pieces\n    first_day_pieces = 0.2 * x\n    \n    # 60 more pieces on the second day\n    second_day_pieces = 60\n    \n    # Total pieces fitted after two days\n    fitted_pieces = first_day_pieces + second_day_pieces\n    \n    # Remaining pieces\n    unfitted_pieces = x - fitted_pieces\n    \n    # Ratio of the number of fitted pieces to the number of unfitted pieces becomes 2:5\n    equation = Eq(fitted_pieces/unfitted_pieces, 2/5)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    # Since the number of pieces has to be an integer, we make sure to return an integer\n    return int(solution[0])\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_from_left = 18\n    tony_position_from_right = 17\n\n    henry_position_from_right = total_children - henry_position_from_left + 1\n    children_between_henry_tony = abs(henry_position_from_right - tony_position_from_right) - 1\n\n    return children_between_henry_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    mm_per_m = 1000\n    ans = 2 * mm_per_m\n    return ans\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiple_of_ten = 10\n    \n    numbers_not_multiple_of_ten = total_numbers - (total_numbers // multiple_of_ten)\n    percentage = (numbers_not_multiple_of_ten / total_numbers) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_loan = 4\n    repayment = initial_loan * (30 / 100)\n    remaining_debt = initial_loan - repayment\n    \n    return remaining_debt\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Given: \n    # 2 cats, 2 dogs, 1 rabbit, some birds\n    # Total legs = 28\n    # cats, dogs, and rabbit have 4 legs each; birds have 2 legs each\n\n    # Calculate the total legs from cats, dogs, and rabbit\n    legs_from_cats_dogs_rabbit = (2 + 2 + 1) * 4  # 2 cats, 2 dogs, 1 rabbit\n\n    # Deduct the legs from cats, dogs, and rabbit from the total number of legs\n    legs_remaining_for_birds = 28 - legs_from_cats_dogs_rabbit\n\n    # Since birds have 2 legs each, divide by 2 to find the number of birds\n    number_of_birds = legs_remaining_for_birds // 2\n\n    return number_of_birds\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15\n    rose_speed = 10\n    time_met = 10\n\n    distance = (jack_speed + rose_speed) * time_met\n\n    return distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n\n    cards = [6, 12, 35, 175, 245, 300]\n    # Find all possible products for 2-card combinations\n    two_card_products = {prod(combo): combo for combo in combinations(cards, 2)}\n    # Find all possible products for 3-card combinations\n    three_card_products = {prod(combo): combo for combo in combinations(cards, 3)}\n\n    # Find the common product in both 2-card and 3-card combinations\n    common_product = set(two_card_products.keys()) & set(three_card_products.keys())\n\n    # The numbers selected by Candy and Candice are the cards in the combinations\n    if common_product:\n        selected_numbers = set(two_card_products[common_product.pop()] + three_card_products[common_product.pop()])\n        # The number not picked is the one not in the selected_numbers set\n        for card in cards:\n            if card not in selected_numbers:\n                return card\n    return None\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = 0\n    for i in range(1, 25, 2):  # Only iterate over odd numbers\n        if 24 % i == 0:\n            n += i\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let P be the age of Polly, and C1, C2, C3 be the ages of her children\n    # Based on the information:\n    # When C1 was born, Polly was 20, so C1's age is P - 20\n    # When C2 was born, Polly was 22, so C2's age is P - 22\n    # When C3 was born, Polly was 24, so C3's age is P - 24\n    # The sum of the children's ages is equal to Polly's age:\n    # (P - 20) + (P - 22) + (P - 24) = P\n    # Simplify the equation:\n    # 3P - 66 = P\n    # 2P = 66\n    # P = 33\n    # Polly is 33 years old.\n    return 33\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n    ans = part1 == part2\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    original_sweets = 12\n    additional_sweets = 7\n    total_sweets = original_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    presents_weight = 20\n    total_weight = 5 * presents_weight\n    suitcase_weight = total_weight - presents_weight\n    return suitcase_weight\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melvin, nelson, oliver = symbols('melvin nelson oliver')\n    original_melvin = 40\n    \n    # Melvin gains 5/8 of his original number of cards from Nelson\n    melvin += original_melvin * 5/8\n    nelson -= original_melvin * 5/8\n\n    # Melvin and Nelson each lost 1/4 of Melvin's original number of cards to Oliver\n    melvin -= original_melvin * 1/4\n    nelson -= original_melvin * 1/4\n    oliver += original_melvin * 1/4 * 2\n\n    # Melvin gains 1/8 of his original number of cards from Nelson\n    melvin += original_melvin * 1/8\n    nelson -= original_melvin * 1/8\n\n    # All have the same number of cards\n    equation = Eq(melvin, nelson)\n    solutions = solve((equation, Eq(nelson, oliver)), (melvin, nelson, oliver))\n\n    # Total number of cards initially owned by them\n    total_cards_initial = original_melvin + solutions[nelson] + solutions[oliver]\n\n    return total_cards_initial\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        for small_boxes in range(10):\n            if big_boxes * 6 + small_boxes * 4 == 50 and big_boxes + small_boxes < 10:\n                return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Four years ago the combined age was 10 years old\n    combined_past_age = 10\n    \n    # Since it was 4 years ago, now the combined age is 10 + 2 * 4 = 18 years old\n    combined_present_age = combined_past_age + 2*4\n    \n    # In 2 years, the combined age will be 18 + 2 * 2 = 22 years old\n    combined_future_age = combined_present_age + 2*2\n    \n    return combined_future_age\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let's denote the smaller number as x and the larger number as y.\n    # According to the question we have two equations:\n    # y - x = 39 (1) The difference between the larger and smaller number is 39\n    # x + y = 59 (2) The sum of the two numbers is 59\n\n    # We can solve the two equations to find the values of x and y.\n    # Firstly, add both equations (1) and (2):\n    # y - x + x + y = 39 + 59\n    # 2y = 98\n    # y = 98 / 2\n    y = 98 / 2\n\n    # Now, we can use the value of y to find x using equation (2):\n    # x = 59 - y\n    x = 59 - y\n\n    # Since x is the smaller number, we need to return x as the answer.\n    return x\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = (5 * 4) + (6 * 8)\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    \n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    m = symbols('m')\n    equation = Eq(14*m, 8*m - 3)\n    solution = solve(equation, m)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import symbols\n\n    # Define the symbols\n    A, B, C = symbols('A B C', integer=True)\n\n    # Define the equations based on the problem statement\n    eq1 = A * B - 30\n    eq2 = B * C - 35\n    eq3 = C * A - 42\n\n    # Solve the system of equations for A, B, and C\n    solutions = solve((eq1, eq2, eq3), (A, B, C))\n\n    # Filter out the negative solution and sum A, B, and C\n    positive_solution = [s for s in solutions if all(val > 0 for val in s)][0]\n    ans = sum(positive_solution)\n\n    return ans\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    ans = x - 12 + y\n    return ans\n\n# You should call the function with values for x and y to get the result\n# Example usage: ans = solution(30, 5)"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15\n    amount = 340\n\n    ans = (percentage / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'x' be the number of years until the mother is 3 times as old as Justin\n    x = symbols('x')\n    \n    # Age of Justin after x years = 8 + x\n    # Age of Justin's mother after x years = 32 + x\n    # Justin's mother will be 3 times older than Justin -> 32 + x = 3 * (8 + x)\n    \n    equation = Eq(32 + x, 3 * (8 + x))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    return 10*9*8*7*6*5*4*3*2*1\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n\n    equation1 = Eq(cora - 8, qingle + 8)\n    equation2 = Eq(qingle + 8, cora - 8 + 4)\n\n    solutions = solve((equation1, equation2), (cora, qingle))\n\n    difference_at_first = abs(solutions[cora] - solutions[qingle])\n\n    return difference_at_first\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):  # a is a whole number so its range is from 0 to 9\n        for b in range(10):  # b is a whole number so its range is from 0 to 9 \n            for c in range(10):  # c is a whole number so its range is from 0 to 9 \n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    x1, y1 = 0, 0  # Origin has coordinates (0,0)\n    x2, y2 = 4, 8  # Given point\n\n    # Calculate the slope m (change in y / change in x)\n    m = (y2 - y1) / (x2 - x1)\n\n    # b is the y-intercept, which is 0 since the line passes through the origin\n    b = 0\n\n    # The linear equation in the form y = mx + b\n    return f\"y={m}x+{b}\"\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, eric = symbols('jane eric')\n\n    equation1 = Eq(jane, 5/7 * eric)\n    equation2 = Eq((jane + 6) / (eric - 6), 11/13)\n\n    solutions = solve((equation1, equation2), (jane, eric))\n\n    total_seashells = solutions[jane] + solutions[eric]\n\n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    warren_addition = 20\n    naida_subtraction = 1\n\n    while warren_addition > 0:\n        current_number += warren_addition\n        largest_number = max(largest_number, current_number)\n        current_number -= naida_subtraction\n        warren_addition -= 1\n        naida_subtraction += 1\n    \n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20  # Pool filling rate of first faucet (pool per hour)\n    other_faucet_rate = 3 * first_faucet_rate  # Pool filling rate of each other faucet\n\n    # Since there are three other faucets with the same rate\n    total_other_faucets_rate = 3 * other_faucet_rate\n\n    # Total rate when all faucets are opened\n    total_rate = first_faucet_rate + total_other_faucets_rate\n\n    # The time it takes to fill the pool is the reciprocal of the total rate\n    time_to_fill = 1 / total_rate\n\n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    prime_factors = [48, 925, 38, 435]\n    fives = 0\n    twos = 0\n    \n    for factor in prime_factors:\n        while factor % 5 == 0:\n            fives += 1\n            factor //= 5\n        while factor % 2 == 0:\n            twos += 1\n            factor //= 2\n    \n    ans = min(twos, fives)\n    return ans\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    minimal_even_number = float('inf')\n\n    for perm in permutations(digits):\n        if perm[-1] % 2 == 0:  # Make sure the number is even by checking the last digit\n            number = int(''.join(map(str, perm)))\n            minimal_even_number = min(minimal_even_number, number)\n\n    return minimal_even_number\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    piano_violin_pupils = piano_pupils / 4\n\n    # Subtracting the set of pupils who either play piano or violin, or both, from the total number of pupils\n    neither_pupils = total_pupils - (piano_pupils + violin_pupils - piano_violin_pupils)\n\n    return int(neither_pupils)\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    rate = 0.05\n    time = 11\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7  # There are 7 days in a week\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    import sympy as sp\n    \n    # The area of isosceles right triangle\n    area_triangle = (2 * 2) / 2\n\n    # The area of quarter circle with a radius of 1 (only considering 1/4 of it since only within the triangle)\n    area_quarter_circle = sp.pi * (1 ** 2) / 4 \n\n    # Probability is the ratio of the area of quarter circle to the area of the triangle\n    probability = area_quarter_circle / area_triangle\n\n    return probability.evalf()\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):  # First digit can't be zero\n        for D in range(1, A * 4 + 1):  # Last digit\n            if A == D / 4:  # First digit is 1/4 of the last\n                B = A - 1  # Second digit is 1 less than the first\n                C = D - 1  # Third digit, based on pattern\n                ABCD = A * 1000 + B * 100 + C * 10 + D\n                DCBA = D * 1000 + C * 100 + B * 10 + A\n                if ABCD * 4 == DCBA and len(set([A, B, C, D])) == 4:\n                    return ABCD\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = math_A + english_A - both_A\n\n    return either_A\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Time when Hannah left school\n    time_left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n\n    # Time when Hannah caught the bus\n    time_caught_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n\n    # Time taken for the bus trip\n    bus_trip_duration = timedelta(minutes=18)\n\n    # Time after the bus trip\n    time_after_bus = time_caught_bus + bus_trip_duration\n\n    # Time when Hannah got home\n    time_got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    # Time Hannah spent walking to the bus stop\n    walking_to_bus = time_caught_bus - time_left_school\n\n    # Time Hannah spent walking home from the bus drop off point\n    walking_home = time_got_home - time_after_bus\n    \n    # Total time Hannah spent walking\n    total_walking_time = walking_to_bus + walking_home\n\n    # Convert total walking time to minutes\n    ans = total_walking_time.seconds // 60\n    \n    return ans\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for num in range(100, 201):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number Freddie chooses\n    num = symbols('num')\n\n    # Equation representing the operations performed by Freddie\n    equation = Eq(num / 3 + 10, 25)\n\n    # Solve the equation to find the original number\n    original_number = solve(equation, num)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    ans = sum(range(1, 9))\n    return ans\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]  # List of given numbers without 'a'\n    mean_value = 5\n    \n    # Calculate the sum of the existing numbers\n    existing_sum = sum(numbers)\n    \n    # Total sum for the mean calculation including 'a'\n    total_sum_with_a = mean_value * (len(numbers) + 1)\n    \n    # Calculate the value of 'a'\n    a = total_sum_with_a - existing_sum\n    \n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    missing_number = (2030452 - 30000 - 452) // 2\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    original_length_cm = 150\n    length_per_piece_m = (original_length_cm / 2) / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # There are 3 colors white, grey, and black.\n    # According to the Pigeonhole principle, to ensure one pair of socks of the same color,\n    # Lina must take the maximum number of socks among all colors and then take one more sock.\n    max_socks_without_pair = 5  # Since there are 5 socks of each color\n    colors = 3  # Number of colors\n    # One more sock to ensure at least one pair.\n    min_socks_for_pair = (max_socks_without_pair * (colors - 1)) + 1\n    \n    return min_socks_for_pair\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = symbols('n')\n    equation = Eq(3 * n * 6, 72)\n    solution = solve(equation, n)\n    return solution[0]\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_victoria_row = 6 + 1 + 7  # Pupils to the left of Victoria, Victoria herself, and pupils to the right\n    total_rows = 1 + 1 + 8  # Row of pupils in front of Victoria, Victoria's row, and rows behind\n    total_pupils = pupils_in_victoria_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_remaining_test = total_marks_for_3_tests - 172\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n    time = 1\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4 * 9, 81)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    # Calculate the numerator\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    # Calculate the denominator\n    denominator = sum(1 / ((11 + (i - 11)) * (20 - (i - 11))) for i in range(11, 16))\n    # Calculate the final result\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    # Distance Peter jogged from 8:00 am to 8:30 am\n    distance_jogged = 6300 - 1800 \n    \n    # Time taken to jog that distance (in minutes)\n    time_jogged = 30\n    \n    # Peter's jogging speed (meters per minute)\n    speed = distance_jogged / time_jogged\n    \n    # Remaining distance to the friend's house at 8:30 am\n    remaining_distance = 1800\n    \n    # Time required to jog the remaining distance (in minutes)\n    time_to_reach = remaining_distance / speed\n    \n    # Calculate the total time taken from 8:00 am including the remaining time\n    total_time_taken = time_jogged + time_to_reach\n    \n    # Start time in minutes from a reference, here 8:00 am is the reference (0 minutes)\n    start_time = 0\n    \n    # Time when Peter reaches his friend's house in minutes from 8:00 am\n    reach_time = start_time + total_time_taken\n\n    # Convert reach_time in minutes to hours\n    reach_hour = 8 # since the journey started at 8:00 am\n    reach_minute = reach_time\n    while reach_minute >= 60:\n        reach_hour += 1\n        reach_minute -= 60\n        \n    # Format the time to get the time Peter reaches his friend's house\n    # The final time is in the format of hours:minutes\n    final_time = f\"{reach_hour}:{str(int(reach_minute)).zfill(2)} am\"\n    \n    return final_time\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the unknown percentage x\n    x = symbols('x')\n\n    # Calculate the total amount of sugar for Mr. Smith's mix\n    sugar_smith = 300 * 0.50 + 600 * 0.20\n\n    # Calculate the total volume of the mix for Mr. Smith\n    total_volume_smith = 300 + 600\n\n    # Calculate the percentage of sugar in Mr. Smith's mix\n    percentage_smith = sugar_smith / total_volume_smith\n\n    # Calculate the total amount of sugar for Mrs. Smith's mix\n    sugar_smith_mrs = 700 * 0.10 + 300 * (x / 100)\n\n    # Calculate the total volume of the mix for Mrs. Smith\n    total_volume_smith_mrs = 700 + 300\n\n    # Set up the equation for the sugar percentage between Mr. Smith's and Mrs. Smith's drinks\n    equation = Eq(sugar_smith_mrs / total_volume_smith_mrs, percentage_smith)\n\n    # Solve the equation and find x\n    solution = solve(equation, x)\n\n    # Get the value of x and round to two decimal places\n    x_value = round(solution[0], 2)\n\n    return x_value\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x + 2, 17)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    initial_candy = 36\n    gave_to_lily = 3 / 4 * initial_candy\n    remaining_candy = initial_candy - gave_to_lily\n    gave_to_brother = 1 / 3 * remaining_candy\n    final_candy = remaining_candy - gave_to_brother\n\n    return int(final_candy)\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    may_age_when_10 = 10\n    kenny_age_advantage_over_brother = 2\n  \n    # Let x be the younger brother's age when May is 10 years old.\n    # Then Kenny's age will be x + kenny_age_advantage_over_brother.\n    # We know that 3 * may_age_when_10 = x + (x + kenny_age_advantage_over_brother)\n    \n    # From the equation 3 * 10 = 2x + 2, we can solve for x\n    x = (3 * may_age_when_10 - kenny_age_advantage_over_brother) / 2\n    \n    # Now, we calculate Kenny's age when May is 10\n    kenny_age_when_may_is_10 = x + kenny_age_advantage_over_brother\n    \n    # Calculate how much older Kenny is than May this year\n    # Since May is currently 7, we need to find Kenny's current age\n    kenny_current_age = kenny_age_when_may_is_10 - (may_age_when_10 - 7)\n    \n    # Finally, the difference in age between Kenny and May this year is:\n    age_difference = kenny_current_age - 7\n    \n    return age_difference\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Calculate the cost of sweets\n    cost_price = 10  # in pounds\n\n    # Calculate the number of bags (1 kg = 1000 g, so 5 kg = 5000 g)\n    number_of_bags = 5000 / 250\n\n    # Calculate the total sales (65p = £0.65, hence multiply by 0.65)\n    total_sales = number_of_bags * 0.65\n    \n    # Calculate the profit\n    profit = total_sales - cost_price\n\n    # Calculate the percentage profit (profit/cost_price * 100)\n    percentage_profit = (profit / cost_price) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    # Total number of apples\n    total_apples = 14\n    # Number of children\n    num_children = 5\n    # Since each child can get at least one apple\n    # We first distribute one apple to each child to meet the requirement\n    apples_left = total_apples - num_children\n    # Now distribute the rest to the child getting the most\n    max_apples = apples_left + 1\n    return max_apples\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # Calculate the distance between each tooth\n    distance_per_gap = 30 / (9 - 4)\n    \n    # Calculate the total length of the comb\n    total_length_mm = distance_per_gap * (100 - 1)  # 99 gaps between 100 teeth\n    \n    # Convert the length from mm to cm\n    total_length_cm = total_length_mm / 10\n    \n    return total_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Calculate grandmother's age at 1st December 1996\n    grandmother_age_1996 = 80 - (2008 - 1996)\n    \n    # Calculate mum's age at 1st December 1996\n    mum_age_1996 = 40\n    \n    # Find the difference in years between grandmother and mum\n    age_difference = grandmother_age_1996 - mum_age_1996\n    \n    # Calculate grandmother's age when mum was 25\n    grandmother_age_when_mum_25 = 25 + age_difference\n    \n    return grandmother_age_when_mum_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    total_ways = 5! # total ways without any restrictions\n    both_standing_together = 2! * 4! # ways where the two people are standing next to each other\n    return total_ways - both_standing_together\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # m for muffins and d for donuts, let's denote the total money Amy had as 'money'\n    # Cost per item\n    cost_m = 6 / 3  # Cost of one muffin\n    cost_d = 10 / 7  # Cost of one donut\n    \n    # Equations\n    # 1. Amy spent half of her money on donuts, so she bought 'money/(2*cost_d)' donuts\n    # 2. She spent the other half on muffins, so she bought 'money/(2*cost_m)' muffins\n    # 3. She bought 54 more donuts than muffins, so 'money/(2*cost_d) - money/(2*cost_m) = 54'\n\n    # We want to find a common denominator for both fractions.\n    # The common denominator of cost_d and cost_m would be the lcm of their denominators\n    from math import gcd\n    den_m = 3  # Denominator for muffin's cost\n    den_d = 7  # Denominator for donut's cost\n    lcm_den = den_m * den_d // gcd(den_m, den_d)\n\n    # Representing the equation with a common denominator, the money is eliminated:\n    term_d, term_m = lcm_den // den_d, lcm_den // den_m  # corresponding terms for donuts and muffins after cancelling ‘money’\n    equation = term_d / cost_d - term_m / cost_m  # coefficient of 'money' in each term equals the number of items bought\n\n    # Calculate the total money based on the number of extra donuts\n    money = 54 * 2 * (cost_d * cost_m) / (cost_d - cost_m)\n    return money\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    from math import comb\n    # Given 5 cones and 3 friends, if we give 1 cone to each friend,\n    # we are left with 5 - 3 = 2 cones to distribute.\n    # We can think of this as placing 2 indistinguishable objects into 3 distinguishable bins.\n    # The number of ways to do this is given by the combinations of (n + k - 1) choose (k),\n    # where n is the number of objects and k is the number of bins.\n    # Here, n=2 (remaining cones) and k=3 (friends).\n    ans = comb(2 + 3 - 1, 2)\n    return ans\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sold = total_vegetables * (2/3)\n    tuesday_sold = (total_vegetables - monday_sold) * (2/5)\n    total_sold = monday_sold + tuesday_sold\n    return total_sold\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # We have five different colors with the specified numbers of balls for each color\n    # In the worst case, to ensure we have 16 balls of one color and 13 balls of another color together,\n    # we have to consider that we could pick all the balls of the other three colors without getting 16 of the same color.\n\n    # These are the maximum number of balls we can pick without getting 16 of one color\n    max_balls_without_16_of_one_color = (15 + 15 + 15 + 15 + 15)\n\n    # Now, to ensure we get 16 of one color, we need to pick one more ball\n    one_more_for_16_of_one_color = 1\n\n    # To get 13 of another color, in the worst case, we could have picked 12 balls of each of the remaining four colors\n    max_balls_of_other_colors_for_13 = (12 + 12 + 12 + 12)\n\n    # Now, to ensure we get 13 of another color, we need to pick one more from one of these four colors\n    one_more_for_13_of_another_color = 1\n\n    # Summing all up gives us the minimum number of balls that need to be picked\n    total_picked_balls = (max_balls_without_16_of_one_color +\n                          one_more_for_16_of_one_color +\n                          max_balls_of_other_colors_for_13 +\n                          one_more_for_13_of_another_color)\n\n    return total_picked_balls\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    return 26.1 / 10000\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    total = sum(5 * i if i % 2 != 0 else -5 * i for i in range(1, (855 // 5) + 1))\n    return total\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    # Let the amount of water in container Q be x ml\n    # According to the problem, container P has 4 times as much water as container Q, which can be written as:\n    # P = 4 * Q\n    # P also contains 2700 ml more water than container Q, we can write this as:\n    # P = Q + 2700\n    # Solving these equations:\n    # Q + 2700 = 4 * Q\n    # 3Q = 2700\n    # Q = 2700 / 3\n    Q = 2700 / 3\n    return Q\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_to_claire = total_biscuits / 4\n    remaining_for_freddie = total_biscuits - given_to_claire\n    return remaining_for_freddie\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the algebraic expressions\n    A, B, C = symbols('A B C')\n    \n    # Set up the equations according to the problem statement\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A+A+A)\n    equation3 = Eq(C + A, 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Extract the solution for B\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, solve\n    \n    # Define the symbols for the cost of a table and a chair\n    table_cost, chair_cost = symbols('table_cost chair_cost')\n    \n    # Equation 1: Cost of 2 tables and 5 chairs\n    equation1 = 2 * table_cost + 5 * chair_cost - 220\n    \n    # Equation 2: Cost of one table is same as 3 chairs\n    equation2 = table_cost - 3 * chair_cost\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table_cost, chair_cost))\n    \n    return solutions[table_cost]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [\n        1, 3, 5, 7, 9,\n        12, 14, 16, 18,\n        21, 23, 25, 27, 29\n    ]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    total_spent = 1.55 + 2.25\n    money_left_ratio = 4 / 5\n    initial_money = total_spent / (1 - money_left_ratio)\n    return initial_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    ans = 40 / 100 * 75\n    return ans\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann = 3\n    sana = 6\n    nancy = 8\n    total_coins = joann + sana + nancy\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    total_distance = 20\n    remaining_distance = 4\n    lucas_to_mother_ratio = 3/5\n    \n    # Combined speed ratio for Lucas and his mother\n    combined_speed_ratio = 3 + 5\n    \n    # Distance covered by Lucas is a fraction of the total distance covered\n    distance_covered_by_lucas = (total_distance - remaining_distance) * (lucas_to_mother_ratio / combined_speed_ratio)\n\n    return distance_covered_by_lucas\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    difference = -1\n    num_terms = 30\n\n    # Sum of arithmetic series formula: n/2 * (2a + (n - 1) * d)\n    sum_series = (num_terms / 2) * (2 * first_term + (num_terms - 1) * difference)\n    \n    return int(sum_series)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    pizzas_for_30_people = 12\n    people_initial = 30\n    people_final = 35\n\n    unit_rate = pizzas_for_30_people / people_initial\n    pizzas_needed = unit_rate * people_final\n\n    return int(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    # Initialize the number of teams and rounds\n    teams = 16\n    rounds = 0\n\n    # A single-round knockout competition reduces the teams by half each round\n    # Continue until there is only 1 winner\n    while teams > 1:\n        teams = teams // 2\n        rounds += 1\n    \n    return rounds\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_earnings = solve(equation, julie)[0]\n    marion_earnings = 2 * julie_earnings\n    ethan_earnings = 5 * julie_earnings\n\n    total_earnings = julie_earnings + marion_earnings + ethan_earnings\n\n    return total_earnings\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_class_students, small_class_students = symbols('big_class_students small_class_students')\n\n    apples_eq = Eq(2 * big_class_students + 2 * small_class_students, 48)\n    oranges_eq = Eq(3 * big_class_students + 2 * small_class_students, 55)\n\n    solutions = solve((apples_eq, oranges_eq), (big_class_students, small_class_students))\n\n    return solutions[small_class_students]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "import math\n\ndef solution():\n    count = 0\n    for i in range(1, 2017):\n        num = i * 72\n        root = math.sqrt(num)\n        if root.is_integer():\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    total = 69\n    difference = 17\n\n    cards = (total - difference) / 2\n    wands = cards + difference\n\n    return int(wands)\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    number_of_lollipops = 10\n    total_cost = cost_per_lollipop * number_of_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let e be Efron's current age and d be Danny's current age.\n    e, d, n = symbols('e d n')\n\n    # Given that Danny is 30 years older than Efron.\n    equation1 = Eq(d, e + 30)\n\n    # The current ratio of Danny's age to Efron's age is 8:3.\n    equation2 = Eq(d/e, 8/3)\n\n    # In n years, the ratio of their ages will be 5:3.\n    equation3 = Eq((d + n)/(e + n), 5/3)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (e, d, n))\n\n    # Return the number of years 'n' when the ratio will be 5:3.\n    return solutions[n]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statement\n    # x ≡ 0 (mod 5)\n    # x ≡ 6 (mod 7) because one child has to sit out, so x+1 ≡ 0 (mod 7)\n    # x ≡ 7 (mod 8) because one child has to sit out, so x+1 ≡ 0 (mod 8)\n    congruences = [(0, 5), (6, 7), (7, 8)]\n    \n    # Solving for x using Chinese Remainder Theorem\n    x, _ = solve_congruence(*congruences)\n    \n    return x\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    initial_value = 160\n    final_value = 40\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made = 100\n    butter_used = 40\n    target_cookies = 150\n    \n    butter_needed = (butter_used / cookies_made) * target_cookies\n    \n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for number in range(1, 405):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    combinations_pencil_ruler = pencil_colours * ruler_colours\n    combinations_pencil_pen = pencil_colours * pen_colours\n    combinations_ruler_pen = ruler_colours * pen_colours\n    \n    ans = combinations_pencil_ruler + combinations_pencil_pen + combinations_ruler_pen\n    \n    return ans\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    # We know that the total number of matches played is given by the combination: n choose 2 = 15\n    # To find n, we need to solve for n(n-1)/2 = 15\n    # This implies n^2 - n - 30 = 0, which is a quadratic equation\n\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(n*(n-1)/2, 15)\n    solutions = solve(equation, n)\n\n    # Filter out the negative result since the number of teams can't be negative\n    ans = [sol for sol in solutions if sol > 0]\n\n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    number = 224\n    factors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    number = 210 / (1 - 0.30)\n    return number\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Number of teams\n    teams = 32\n    # Number of groups\n    groups = 8\n    # Teams per group\n    teams_per_group = teams // groups\n\n    # Each team plays with each other once in a group of 4 teams:\n    # Therefore, each group has a total of (4 * 3) / 2 games (since each game is between 2 teams)\n    group_games = (teams_per_group * (teams_per_group - 1)) // 2 * groups\n\n    # Knockout stage games:\n    # Round of 16, quarter-finals, semi-finals, third place play-off, and final\n    knockout_games = teams - 1\n\n    # Total games is the sum of group games and knockout games\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):\n        first_digit = 1 + 2 * second_digit\n        if first_digit < 10: # to make sure it's a digit\n            for third_digit in range(0, 10):\n                if 9 < (first_digit + second_digit + third_digit) < 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    ways_to_choose = pencil_colours * ruler_colours * pen_colours\n    \n    return ways_to_choose\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    points_per_correct = 6\n    points_per_wrong = -2\n  \n    total_points = 44\n  \n    # Let x be the number of correct answers, then (total_questions - x) will be the wrong answers.\n    # Set up the equation: points_per_correct * x + points_per_wrong * (total_questions - x) = total_points\n    # Solve the equation for x.\n  \n    for x in range(total_questions + 1):\n        if points_per_correct * x + points_per_wrong * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # equations based on the given information\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # solve the equations for apple and banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, tshirt = symbols('shorts tshirt')\n    \n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, tshirt))\n\n    return solutions[tshirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of triangles as 't', quadrilaterals as 'q', and pentagons as 'p'.\n    t, q, p = symbols('t q p')\n\n    # Given that there are 2 pentagons.\n    p = 2\n\n    # There are 82 more quadrilaterals than triangles.\n    equation1 = Eq(q, t + 82)\n\n    # All the shapes combined have 394 sides. \n    # Triangle has 3 sides, quadrilateral has 4 sides, and pentagon has 5 sides.\n    equation2 = Eq(3*t + 4*q + 5*p, 394)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (t, q))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n\n    third_term = second_term + common_difference\n\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Rachel's and Alice's sweets\n    rachel, alice = symbols('rachel alice')\n\n    # Equation 1: If Rachel gives Alice 10 sweets, they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # Equation 2: If they both eat 8 sweets, Rachel has 3 times the amount of Alice\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of sweets they had originally\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    number_of_gaps = 3  # Since there are 4 posts, there are 3 gaps between them\n\n    total_distance = distance_between_posts * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Let x be the number of all-girl teams\n    # Then 2x is the number of all-boy teams, by (iⅲ)\n    \n    # There are 15 teams with only 1 boy, which means 2 girls per team.\n    # Therefore, there are 15 * 2 = 30 girls in these teams.\n\n    # There are 27 teams with two or more boys, which means at most 1 girl per team.\n    # Since some teams may have no girls, we have at most 27 girls in these teams.\n\n    # The total number of teams = 150 students / 3 students per team\n    total_teams = 150 // 3\n    \n    # Now we calculate the total number of girls using the all-girl and mixed teams.\n    # The total number of teams with girls is the total minus the all-boy teams.\n    teams_with_girls = total_teams - 2 * x\n    # Which includes the all-girl teams and the teams with only 1 boy.\n    teams_with_girls = x + 15\n    \n    # Since teams with girls also include those with two or more boys, but at most one girl:\n    teams_with_girls += 27\n    \n    # Now we solve the equation:\n    # total_teams = x + 2x + 15 + 27\n    # 50 = 3x + 42\n    # 50 - 42 = 3x\n    # 8 = 3x\n    # x = 8 / 3\n    # Since x must be a whole number (can't have a fraction of a team), this implies\n    # there are no all-girl teams (x = 0).\n\n    # Therefore, the all-girl teams contribute no girls to the total.\n    # The number of girls is the sum of girls in teams with one boy and at most one girl in the other teams.\n    number_of_girls = 30 + 27\n\n    return number_of_girls\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm_of_3_5_7 = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for i in range(100, 1000):\n        if i % lcm_of_3_5_7 == 0 and str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Let d be the distance between towns A and B\n    # Let s be the speed at which Ben must cycle to arrive at 9am\n    # Let t be the time Ben cycles if he starts at the same time as in the initial condition (i.e., when he cycles at 10 km/h and arrives at 10 am)\n\n    # When Ben cycles at 10 km/h he arrives at 10 am\n    # This means that t hours at 10 km/h is d = 10 * t\n\n    # Ben's second scenario has him traveling the same distance d, but arriving two hours earlier at 8 am\n    # This means that t - 2 hours at 15 km/h is also d = 15 * (t - 2)\n\n    # We set the two expressions for d equal to each other\n    # 10 * t = 15 * (t - 2)\n    # We solve for t\n    t = (15 * 2) / (15 - 10)\n\n    # Ben needs to arrive at 9 am, which is one hour earlier than the initial condition\n    # This means he will be cycling for t - 1 hours, and we need to find the speed s for this scenario\n    # Thus, s * (t - 1) should equal to the same distance d\n    # We set s * (t - 1) equal to 10 * t (as from the initial condition), and solve for s\n    s = 10 * t / (t - 1)\n\n    return s\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    sum_of_digits = sum([int(digit) for digit in str(product)])\n    return sum_of_digits\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert the numbers from base 7 to base 10, perform the subtraction, then convert back to base 7.\n    num1_base7 = '61'\n    num2_base7 = '34'\n    \n    # Convert the numbers to base 10\n    num1_base10 = int(num1_base7, 7)\n    num2_base10 = int(num2_base7, 7)\n    \n    # Subtract the numbers in base 10\n    result_base10 = num1_base10 - num2_base10\n    \n    # Convert the result back to base 7\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 7) + ans\n        result_base10 //= 7\n    \n    # If the result is 0, just return '0' in base 7\n    if ans == '':\n        ans = '0'\n    return ans\n  \nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    # Since 1 dog = 8 rabbits and 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 * 2 chickens\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # Total gloves of each color\n    blue_gloves = 1 + 3  # 1 left-hand and 3 right-hand\n    green_gloves = 2 + 4  # 2 left-hand and 4 right-hand\n\n    # To make sure she has a pair of gloves of the same color,\n    # she must take all gloves of one color plus one more glove.\n    smallest_number = min(blue_gloves, green_gloves) + 1\n\n    return smallest_number\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_students_initially = 5\n    candies_per_student_initially = 12\n\n    # Calculate the total number of candies initially\n    total_candies = total_students_initially * candies_per_student_initially\n    # One more student joins\n    total_students_after = total_students_initially + 1\n    # Calculate the number of candies each student will get after redivision\n    candies_per_student_after = total_candies // total_students_after\n\n    return candies_per_student_after\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    for cards in range(1, 4*5*7 + 1):  # least common multiple of divisors (4, 5, 7) + 1\n        if (cards % 4 == 3) and (cards % 5 == 4) and (cards % 7 == 6):\n            return cards\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    depreciation_multiplier = (1 - depreciation_rate) ** years\n\n    final_value = initial_value * depreciation_multiplier\n\n    return round(final_value, 4)\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    total_students = 0\n    # i represents the number of layers of boys or girls\n    i = 0\n    # As long as the number of boys is not enough, continue adding layers\n    while True:\n        # Number of boys in the outermost layer\n        boys = (2 * i + 1) ** 2\n        # Number of girls in the next inner layer\n        girls = (2 * i) ** 2 if i > 0 else 0\n        # Update total count of boys and girls\n        total_boys = boys\n        total_girls = girls\n        # If boys exceed girls by 52, break the loop\n        if total_boys - total_girls == 52:\n            total_students = total_boys + total_girls\n            break\n        # Increment the layer\n        i += 1\n    return total_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, yuna = symbols('eugene yuna')\n\n    # Eugene had 3 times as many pins as Yuna initially\n    equation1 = Eq(eugene, 3 * yuna)\n\n    # Yuna bought 76 pins, after which she had 7/9 as many pins as Eugene\n    yuna_new = yuna + 76\n    equation2 = Eq(yuna_new, 7/9 * eugene)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eugene, yuna))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "def solution():\n    from math import factorial\n    \n    total_letters = len('REVISE')\n    letter_counts = {letter: 'REVISE'.count(letter) for letter in set('REVISE')}\n    ans = factorial(total_letters)\n    \n    for count in letter_counts.values():\n        ans //= factorial(count)\n    \n    return ans\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # To be divisible by 9, the sum of the digits of the number must be a multiple of 9.\n    # Sum of the digits 1 + 2 + 3 + 4 + 5 = 15, so the missing digit A must be such that (15 + A) is a multiple of 9.\n    # The smallest multiple of 9 that is larger than 15 is 18, so A = 18 - 15 = 3.\n    \n    # The remainder when the six-digit number is divided by 4 only depends on the last two digits of the number.\n    # So we need to find the remainder of 5A when divided by 4, where A is 3.\n    remainder = (53 % 4)\n    \n    return remainder\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    number = (2 * 100) + (8 * 10) + 5\n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    normal_price = 480\n    discount_percentage = 35\n    sale_price = normal_price * (1 - discount_percentage / 100)\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # If Kelly takes 1 match, (11 - 1) = 10 matches remain.\n    # No matter if Dan takes 1 or 2 matches next, Kelly can always take 2 or 1 respectively,\n    # leaving 7 matches, which is a multiple of 3.\n    # If Kelly always ensures the number of remaining matches is a multiple of 3 after her turn,\n    # Dan will be forced to pick the last match.\n    \n    # Here's the reasoning:\n    # If there are 3n matches, and it's Kelly's turn, she will lose because no matter whether she\n    # takes 1 or 2 matches, there will be 3n-1 or 3n-2 matches left, which is not a multiple of 3,\n    # allowing Dan to take 2 or 1 matches respectively to maintain the multiple of 3.\n    # Therefore, Kelly must ensure after her first turn, that the remaining matches are a multiple of 3.\n    \n    # Since 11 is not a multiple of 3, Kelly must take away 2 matches to leave 9 (which is 3 * 3) for Dan.\n    \n    return 2\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers', real=True, positive=True)\n    \n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = (4 / 7) * remaining_flowers\n\n    equation = Eq(red_flowers, pink_flowers + 6)\n    \n    solutions = solve(equation, total_flowers)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = Fraction(36, 7) + Fraction(36, 11) + Fraction(36, 23)\n    denominator = Fraction(24, 7) + Fraction(24, 11) + Fraction(24, 23)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6) * n * (n + 1) * (2 * n + 1)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    import math\n    number_of_kids = 3\n    ans = math.factorial(number_of_kids)\n    return ans\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    # Inverse operation to solve for the square box\n    ans = (65 + 3) / 4\n    return ans\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    vehicles = 27\n    total_wheels = 78\n\n    # Assuming all vehicles are motorcycles with 2 wheels\n    motorcycles = total_wheels // 2\n    \n    # Count the excess vehicles when all are assumed to be motorcycles\n    excess_vehicles = motorcycles - vehicles\n\n    # Since each car is counted as two motorcycles (4 wheels - 2 wheels = 2 wheels),\n    # so we divide the excess_vehicles by 2 to find the number of cars\n    cars = excess_vehicles // 2\n\n    return cars\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, nicole = symbols('jason nicole')\n\n    equation1 = Eq(jason + 18, nicole - 18)\n    equation2 = Eq(jason + 18 + 5, nicole)\n\n    solutions = solve((equation1, equation2), (jason, nicole))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # New length is 110% of the original, expressed as 1.10\n    new_length_ratio = 1.10\n    # New breadth is 4/5 of the original, expressed as 0.8\n    new_breadth_ratio = 0.8\n    # New height is 11/10 of the original, expressed as 1.1\n    new_height_ratio = 1.1\n    \n    # The new volume as a percentage of its original volume\n    new_volume_percentage = (new_length_ratio * new_breadth_ratio * new_height_ratio) * 100\n    \n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(39):  # At most 38 two-gram weights since 2*39 = 78 > 77\n        for three_gram_weights in range(26):  # At most 25 three-gram weights since 3*26 = 78 > 77\n            total_weight = 2 * two_gram_weights + 3 * three_gram_weights\n            if total_weight == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    number_of_intervals = 9\n    # Convert total_distance to meters\n    total_distance_m = total_distance_km * 1000\n    # Since there's a marshal at the starting and finishing line, we have number_of_intervals + 1 segments\n    # Distance between two consecutive marshals is the total distance divided by the number of segments\n    distance_between_marshals = total_distance_m / (number_of_intervals + 1)\n\n    return distance_between_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_initial = 180  # meters per minute\n    time_initial = 6     # minutes\n\n    speed_tired = 120    # meters per minute\n    time_tired = 8       # minutes\n\n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles**0.5)  # since it's a square, we take the square root of total tiles\n    red_tiles = 0\n    green_tiles = 0\n    \n    # Loop through each layer, counting from the outermost (1) to the innermost\n    for layer in range(1, (side_length // 2) + 1):\n        # Calculate the number of tiles in the current layer (4 sides times the number of tiles on each side minus 4 corners)\n        tiles_in_layer = (side_length - (layer - 1) * 2) * 4 - 4\n        if layer % 2 == 1:  # odd layers are red\n            red_tiles += tiles_in_layer\n        else:  # even layers are green\n            green_tiles += tiles_in_layer\n    \n    # Add the center tile(s) for odd side lengths\n    if side_length % 2 == 1:\n        red_tiles += 1\n\n    # Calculate how many more tiles one color has compared to the other\n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    more_tiles = abs(red_tiles - green_tiles)\n    \n    return (dominant_color, more_tiles)\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    initial_amount = 6000\n    interest_rate = 0.03\n    years = 2\n\n    first_year_interest = initial_amount * interest_rate\n    second_year_interest = (initial_amount + first_year_interest) * interest_rate\n\n    total_interest = first_year_interest + second_year_interest\n    return total_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_for_one_picture = 10  # time in minutes to paint one picture\n    total_time = 80  # total time in minutes (1 hour and 20 minutes)\n\n    number_of_pictures = total_time // time_for_one_picture\n\n    return number_of_pictures\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    mixed_number = 1 + (4/7)\n    ans = round(mixed_number, 1)\n    return ans\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = \"428571\"\n    index = (69 - 1) % len(recurring_sequence)  # Subtract 1 because we start from the first digit after the decimal\n    return int(recurring_sequence[index])\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    planned_profit = 0.5\n    profit_first_day = 0.7 * 0.5\n    total_profit = 0.82 * planned_profit\n    profit_second_day = total_profit - profit_first_day\n\n    # Let x be the discount rate on the second day\n    # Since he sold the remaining 30% at (1 - x), we need to solve for:\n    # 0.7 * 0.5 (first day profit) + 0.3 * (1 - x) (second day profit) = 0.82 * 0.5 (total profit)\n    second_day_sales = 0.3 * (1 - profit_second_day / 0.3)\n\n    discount_rate = (1 - second_day_sales) * 100  # Converting to percentage\n    return discount_rate\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    total_weight = 300 + 200\n    dylan_salt = 300 * 0.35\n    daisy_salt = 200 * 0.50\n    total_salt = dylan_salt + daisy_salt\n\n    concentration = (total_salt / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')   # Let y represent the total number of sweets Samantha has initially.\n    sweets_left = y / 2  # Samantha gives half of them to her friend.\n\n    return sweets_left\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of the sons and daughters\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n\n    # Given equations based on the problem\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation2 = Eq(younger_son - older_son, 3)\n    equation3 = Eq(older_daughter - younger_daughter, 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Find the age of the youngest child\n    youngest_age = min(solutions.values())\n\n    return youngest_age\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    bought_bottles = 48\n    total_bottles = bought_bottles\n\n    empty_bottles = bought_bottles\n\n    while empty_bottles >= 4:\n        new_bottles, remaining_empty = divmod(empty_bottles, 4)\n        total_bottles += new_bottles\n        empty_bottles = new_bottles + remaining_empty\n\n        if empty_bottles == 3:\n            total_bottles += 1  # borrowing 1 bottle\n            break\n\n    return total_bottles\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let x be the number of widgets Megacorp sold in 2014\n    # Vastco sold 68% more than Megacorp in 2014, so Vastco sold 1.68x widgets\n    # In 2015, Vastco sold 44% more than Megacorp, we don't know Megacorp's 2015 sales yet\n    # Vastco's sales rose by 32% from 2014 to 2015, so they sold 1.32 * 1.68x = 2.2176x widgets in 2015\n    \n    # Let y be the percentage increase in Megacorp's sales from 2014 to 2015\n    # Then Megacorp's sales in 2015 would be x * (1 + y/100)\n    # Vastco's 2015 sales are 44% more than Megacorp's 2015 sales\n    # Therefore, we can set up the equation: 1.44 * x * (1 + y/100) = 2.2176x\n    \n    # Solving for y:\n    y = (2.2176 / 1.44 - 1) * 100   # Convert the fraction to percentage by multiplying by 100\n    \n    return y\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # sequence: 1-9 has 9 digits, each with 1 digit\n    digits_1_9 = 9 * 1\n    \n    # sequence: 10-99 has 90 numbers, each with 2 digits\n    digits_10_99 = (99 - 10 + 1) * 2\n    \n    # sequence: 100-113 has 14 numbers, each with 3 digits\n    digits_100_113 = (113 - 100 + 1) * 3\n    \n    # total number of digits\n    total_digits = digits_1_9 + digits_10_99 + digits_100_113\n    \n    return total_digits\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    total_work = workers * days_for_3_workers\n    days_for_1_worker = total_work / 1\n    return days_for_1_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    return 548 - 45 + 23 - 107\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import permutations\n\ndef solution():\n    entrances = ['A', 'B', 'C']\n    people = ['Len', 'Joe', 'Angle', 'Jack']\n    all_possible_ways = list(permutations(entrances * len(people), len(people)))\n    filtered_ways = {p for p in all_possible_ways if len(set(p)) == 3}\n    return len(filtered_ways)\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, brother = symbols('john brother')\n    \n    equation1 = Eq(john, brother + 32)  # John has 32 more erasers than his brother.\n    equation2 = Eq(john + brother, 246)  # Together they have 246 erasers.\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    # Let the original number of pearls be x\n    # According to the problem, we have the following parts:\n    # Half on the floor: x / 2\n    # A fourth under a chair: x / 4\n    # A sixth in her lap: x / 6\n    # Three remained on the strand.\n\n    # The sum of these parts should equal the original number of pearls x:\n    # x / 2 + x / 4 + x / 6 + 3 = x\n\n    # Find the least common multiple (LCM) of the denominators 2, 4, and 6, which is 12.\n    # Multiply both sides by 12 to clear the denominators:\n    # 6x + 3x + 2x + 36 = 12x\n    # Combine like terms:\n    # 11x + 36 = 12x\n    # Subtract 11x from both sides:\n    # 36 = x\n\n    # So the original number of pearls on the strand is 36.\n    return 36\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    # Total glasses Peter delivered\n    total_glasses = 100\n\n    # Total money Peter made\n    total_money = 92\n\n    # Assume Peter broke 'broken' glasses, so he delivered 'delivered' glasses safely\n    delivered = (total_money + total_glasses) / 2\n    broken = total_glasses - delivered\n    \n    return int(broken)\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # In a round robin, each team plays every other team once, so the total number of games is n*(n-1)/2\n    # where n is the number of teams.\n    n = symbols('n', integer=True)\n\n    # Set up the equation for the problem: n*(n-1)/2 = 45\n    equation = Eq(n*(n-1)/2, 45)\n\n    # Solve the equation\n    number_of_teams = solve(equation, n)\n\n    # Since n is the number of teams and should be positive, we filter negative solutions\n    number_of_teams = [team for team in number_of_teams if team > 0]\n\n    # Assuming there is only one positive integer solution to the equation\n    return number_of_teams[0]\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mayank_number = symbols('mayank_number')\n\n    equation = Eq(2 * mayank_number + 4, 40)\n\n    solution = solve(equation, mayank_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    # Let x be the original number of boats, and y be the number of people in one boat originally.\n    # If the number of boats is reduced by 1, each boat will take 9 people, so the equation is (x - 1) * 9 = x * y\n    # If the number of boats is increased by 1, each boat will take 6 people, so the equation is (x + 1) * 6 = x * y\n    # We can set up a system of equations and solve for x and y.\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq((x - 1) * 9, x * y)\n    equation2 = Eq((x + 1) * 6, x * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Since we only need the total number of people in the class, which is x * y, we calculate this value using the solutions obtained.\n    total_people = solutions[x] * solutions[y]\n    \n    return total_people\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 15\n    change = 1200 - total_cost\n    return change\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for num in range(1, 57, 2):\n        if num + (num + 2) + (num + 4) == 57:\n            return num\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for num in [2, 6, 1, 10, 5, 3]:\n        if num * 3 == 6:\n            ans = num\n            return ans\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    # Initialize the counter to 0\n    count = 0\n    # Loop over all possible values for the first number\n    for x1 in range(3, 13):\n        # Loop over possible values for the second number, given the first number\n        for x2 in range(3, 15-x1):\n            # Calculate the third number to make the sum equal to 15\n            x3 = 15 - x1 - x2\n            # Check if the third number is not smaller than 3\n            if x3 >= 3:\n                count += 1\n    # Return the number of ways\n    return count\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    return 495 // 9\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, peter = symbols('john peter')\n\n    equation1 = Eq(john, peter + 180)\n    equation2 = Eq(john * 4/5, peter * (1 - 3/10) / 2)\n\n    solutions = solve((equation1, equation2), (john, peter))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    multiples_of_4 = [i for i in range(5, 16) if i % 4 == 0]\n    factors_of_36 = [i for i in range(1, 37) if 36 % i == 0]\n\n    common_numbers = set(multiples_of_4).intersection(factors_of_36)\n    \n    return common_numbers.pop()\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n\n    pencils = 32\n    pens = 40\n\n    ans = gcd(pencils, pens)\n\n    return ans\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')\n\n    for perm in permutations(digits, 4):\n        num1 = perm[0] * 10 + perm[1] \n        num2 = perm[2] * 10 + perm[3]\n        current_sum = num1 + num2\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks = 4 * 60  # Theo's total marks after 4 tests\n    total_marks += 70  # Add Theo's score from the fifth test\n    new_average = total_marks / 5  # Calculate the new average\n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    horse_apples = total_horses * 20\n    pig_apples = total_pigs * 15\n    rabbit_apples = total_rabbits * 5\n\n    total_apples_eaten = horse_apples + pig_apples + rabbit_apples\n    total_animals = total_horses + total_pigs + total_rabbits\n\n    average_apples_per_animal = total_apples_eaten / total_animals\n\n    return average_apples_per_animal\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(1, 10):   # first digit ranges from 1 to 9\n        for j in range(0, 10):  # second digit ranges from 0 to 9\n            if (i + j) < 10:    # third digit must be less than 10\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_cups = 6\n    discount_a = 0.1  # 10% discount\n    discount_b = 1  # 1 dollar discount per cup\n    \n    # Calculate the total cost with discount A\n    total_cost_a = total_cups * full_price_per_cup * (1 - discount_a)\n    \n    # Calculate the total cost with discount B\n    total_cost_b = (full_price_per_cup - discount_b) * total_cups\n    \n    # Pip will choose the cheaper option\n    total_cost = min(total_cost_a, total_cost_b)\n\n    return total_cost\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let b be the number of students in class B\n    b = symbols('b')\n    # since class A has 3 more students than class B\n    a = b + 3\n    \n    # If all peaches are given to Class A, each student can get 5 peaches and there will be 10 peaches left\n    eq1 = Eq(5 * a + 10, 5 * b + 5 * 3 + 10)\n    \n    # If all peaches are given to Class B and each student can get 8 peaches, we will need 2 more peaches\n    eq2 = Eq(8 * b - 2, 5 * b + 5 * 3 + 10)\n    \n    # solve the equations\n    students_in_class_B = solve((eq1, eq2), b)\n    \n    # calculate the total number of peaches based on the number of students in class B\n    total_peaches = 8 * students_in_class_B[b] + 2\n    \n    return total_peaches\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b be the amount of money Benson had left\n    # Let j be the amount of money Jayden had left\n    b, j = symbols('b j')\n    \n    # Benson spent $74, so he had b left: initial_benson - 74 = b\n    # Jayden spent $120, so he had j left: initial_jayden - 120 = j\n    # Benson's remaining amount is three times Jayden's remaining amount: b = 3j\n    # The combined total initially was $590: initial_benson + initial_jayden = 590\n    # Replace initial_benson with (b + 74) and initial_jayden with (j + 120): (b + 74) + (j + 120) = 590\n\n    # We will create two equations based on the conditions\n    equation1 = Eq(b, 3 * j)\n    equation2 = Eq((b + 74) + (j + 120), 590)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (b, j))\n    \n    # Get the value of Jayden's remaining money\n    return solutions[j]\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    last_five_sum = 0\n    for i in range(1, 2018):\n        last_five_sum += int('2' * i)\n        last_five_sum %= 100000  # Keep track of last five digits\n        \n    return last_five_sum\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_drink = 12\n    water_ratio = 3 / 4\n    water_litres = total_drink * water_ratio\n    return water_litres\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    units_digit = (7 * 9) % 10\n    return units_digit\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    ans = 32068 - 1774\n    return ans\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Betty and Kevin's speeds in meters per minute\n    betty_speed, kevin_speed = symbols('betty_speed kevin_speed')\n    \n    # Kevin reaches the grocery store 3 minutes after Betty\n    # In these 3 minutes Betty gets 900 meters away from the cinema\n    equation1 = Eq(betty_speed * 3, 900)\n    \n    # Betty reaches the grocery store in 6 minutes\n    # Kevin has walked 150 meters when Betty reaches the store\n    # In 3 more minutes he covers the rest of the distance to the grocery store\n    # So in 6 minutes Kevin covers 150 meters + the remaining distance to the grocery store\n    equation2 = Eq(kevin_speed * 6, betty_speed * 6 - 150)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (betty_speed, kevin_speed))\n    \n    # Calculate the time difference\n    # When Betty is at the store, Kevin has traveled 150 meters.\n    # Using the ratio of speeds, calculate how long it took Kevin to walk 150 meters, which will give us the time difference\n    kevin_time_for_150 = 150 / solutions[kevin_speed]\n    time_difference = 6 - kevin_time_for_150\n    \n    return time_difference\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    x = Symbol('x')\n    equation = x**2 + x - 380\n\n    solutions = solve(equation, x)\n    ans = [s.evalf() for s in solutions if s.is_real and s > 0]\n    \n    return int(ans[0])\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_pet_owners = 143\n    own_dog = 100\n    own_goldfish = 14\n    own_both = 9\n\n    own_neither = total_pet_owners - (own_dog + own_goldfish - own_both)\n\n    return own_neither\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    raspberry_ratio = 1 / total_parts\n    raspberry_juice_ml = raspberry_ratio * 300\n\n    return raspberry_juice_ml\n\nans = solution()"
    ]
}