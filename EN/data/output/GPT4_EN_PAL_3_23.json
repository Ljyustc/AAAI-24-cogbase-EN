{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    return sum(i**2 for i in range(5, n+1))\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / (1 - 0.40)\n    initial_amount = remaining_after_bag / (1 - 0.20)\n    return initial_amount\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction = 14 / 27\n\n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9 * 60  # Convert 9:00 AM to minutes\n    end_time = 10 * 60   # Convert 10:00 AM to minutes\n\n    ans = end_time - start_time  # Calculate the duration in minutes\n    return ans\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - physics_students - biology_students\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    students = 0\n    while True:\n        small_square = students ** 0.5\n        if small_square.is_integer():\n            large_square = (students + 26) ** 0.5\n            if large_square.is_integer() and large_square == small_square + 1:\n                break\n        students += 1\n    return students - 5\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    return 167 - 43\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let the number of apples Amy gives to John be x\n    # After giving x apples, Amy will have (amy - x) apples and John will have (john + x) apples\n    # The condition is that Amy has 4 more apples than John\n    # So, we have amy - x = john + x + 4\n    # Simplifying this equation to solve for x\n    x = (amy - john - 4) // 2\n    return x\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    total_plants = 9\n    plants_to_arrange = 4\n    \n    # Total permutations are given by 9P4 = 9! / (9-4)!\n    ans = factorial(total_plants) / factorial(total_plants - plants_to_arrange)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To ensure winning, Fred should put George in a position\n    # where George is forced to take the last orange. If Fred can\n    # always make the total oranges taken by both after his turn is\n    # a multiple of 4, George will be forced to take the last one.\n\n    # The \"winning positions\" for Fred are therefore every multiple\n    # of 4 oranges left on the table. To achieve this, Fred should\n    # take (total_oranges % 4) oranges on his first turn. If this\n    # number is 0, Fred should instead take 3 oranges to avoid giving\n    # George the winning position.\n\n    total_oranges = 15\n    fred_first_move = total_oranges % 4\n    if fred_first_move == 0:\n        fred_first_move = 3\n\n    return fred_first_move\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    toms_age = symbols('toms_age')\n    dads_age = Eq(4 * toms_age - 5, 43)\n\n    age_solution = solve(dads_age, toms_age)\n\n    return age_solution[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    multiplier_sum = 2 + 3 + 5\n\n    ans = common_factor * multiplier_sum\n    return ans\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    # Let the cost price of the first house be x\n    # Therefore, 10% profit on the first house is 0.1x\n    # So, the selling price of the first house is x + 0.1x = 1.1x\n    \n    # Let the cost price of the second house be y\n    # Therefore, 10% loss on the second house is 0.1y\n    # So, the selling price of the second house is y - 0.1y = 0.9y\n    \n    # We know that the selling price of both houses is 99000 each\n    # 1.1x = 99000 => x = 99000 / 1.1\n    # 0.9y = 99000 => y = 99000 / 0.9\n    \n    x = 99000 / 1.1\n    y = 99000 / 0.9\n    \n    # The total cost price of the houses is x + y\n    total_cost_price = x + y\n    \n    # The total selling price of the houses is 99000 * 2\n    total_selling_price = 99000 * 2\n    \n    # Profit or loss is calculated by subtracting the total cost price from the total selling price\n    profit_or_loss = total_selling_price - total_cost_price\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    # Number of combinations wearing shirts and pants\n    combinations_shirt_pants = 3 * 2\n\n    # Number of combinations wearing dresses\n    combinations_dresses = 3\n\n    # Number of combinations for shoes\n    combinations_shoes = 4\n\n    # Number of combinations for heels, only with dresses\n    combinations_heels = 2\n\n    # Total combinations when not wearing a dress (shirt, pants, and shoes)\n    total_combinations_not_dress = combinations_shirt_pants * combinations_shoes\n\n    # Total combinations when wearing a dress (dress, and shoes or heels)\n    total_combinations_dress = combinations_dresses * (combinations_shoes + combinations_heels)\n\n    # Sum of all combinations\n    total_combinations = total_combinations_not_dress + total_combinations_dress\n\n    return total_combinations\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n    if fraction_value > decimal_value:\n        ans = \"3/20 is larger\"\n    else:\n        ans = \"0.16 is larger\"\n    return ans\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n\n    total_eggs = (cupcakes / 15) * eggs_per_15_cupcakes\n\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both = 21\n    \n    only_one_event = (skipping_rope - both) + (long_jump - both)\n\n    return only_one_event\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    count = 0\n    # A can stand on 3 possible positions (2nd, 3rd, or 4th in the row).\n    # This is because A can't be on the ends if it has to be in the middle of B and C.\n    for A_pos in range(1, 4):  # Assuming positions start from 0 to 4. A_pos represents the index.\n        for B_pos in range(5):\n            for C_pos in range(5):\n                if B_pos < A_pos < C_pos or C_pos < A_pos < B_pos:\n                    # The remaining two positions can be filled in 2! ways by D and E.\n                    count += 2  # Since there are 2!=2 ways to arrange D and E in the remaining places.\n    return count\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Sara's jogging speed\n    jogging_speed = 8 # km per hour\n\n    # Time spent jogging from 6.30am to 8.30am which is 2 hours\n    jogging_time = 2  # hours\n\n    # Distance travelled while jogging\n    distance_jogging = jogging_speed * jogging_time\n\n    # Sara's walking speed, which is half of her jogging speed\n    walking_speed = jogging_speed / 2\n\n    # Time spent walking from 8.30am to 9.30am which is 1 hour\n    walking_time = 1  # hour\n\n    # Distance travelled while walking\n    distance_walking = walking_speed * walking_time\n\n    # Total distance travelled\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n5, n10, n20 = symbols('n5 n10 n20')\n\n    equation1 = Eq(n5, n10)\n    equation2 = Eq(n10, n20)\n    equation3 = Eq(5 * n5 + 10 * n10 + 20 * n20, 280)\n\n    solutions = solve((equation1, equation2, equation3), (n5, n10, n20))\n\n    total_notes = solutions[n5] + solutions[n10] + solutions[n20]\n    \n    return total_notes\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond(M, N):\n        return M * N + N + 1\n\n    def square(M, N):\n        return 8 * M - N * N\n\n    ans = square(diamond(7, 6), 9)\n    return ans\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "from fractions import Fraction\n\ndef solution():\n    total = sum(Fraction(1, d) for d in range(1, 6))\n    return (total * 60).numerator\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    p = 2  # Start checking for primes from the smallest prime number\n    while True:\n        if is_prime(p) and is_prime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # Sort the marbles in non-decreasing order\n    # If we divide the marbles into 4 different piles\n    # with the biggest pile having the smallest possible number of marbles,\n    # then we can start distributing the marbles one at a time to each pile\n    # starting from the smallest pile in order   \n    marbles = 16\n    minimum_biggest_pile = None\n\n    # Iterate from the smallest scenario for the biggest pile\n    for biggest_pile in range(1, marbles - 3):\n        remaining_marbles = marbles - biggest_pile\n        # Now we find the next three pile sizes so that each one is smaller than the previous\n        for second_biggest_pile in range(1, biggest_pile):\n            for third_biggest_pile in range(1, second_biggest_pile):\n                for smallest_pile in range(1, third_biggest_pile):\n                    if smallest_pile + third_biggest_pile + second_biggest_pile + biggest_pile == marbles:\n                        if minimum_biggest_pile is None or biggest_pile < minimum_biggest_pile:\n                            minimum_biggest_pile = biggest_pile\n                        break\n    \n    return minimum_biggest_pile\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = 19 // 2  # Since we are considering only odd squares, we have to calculate the number of terms\n    ans = (n * (n + 1) * (2*n + 1)) // 3\n    return ans\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    total_floors = 4 - 1\n    time_for_one_floor = 12 / total_floors\n    time_for_first_to_second = time_for_one_floor * (2 - 1)\n    return time_for_first_to_second\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # In base 10, the last digit of a product only depends on the last digits of the factors.\n    # That is, the last digit of the expression is the same as the last digit of\n    # (the last digit of 2 raised to the 100th power) times\n    # (the last digit of 7 raised to the 100th power) times\n    # (the last digit of 9 raised to the 100th power)\n\n    # The last digit of powers of 2 cycles every 4 steps: 2, 4, 8, 6...\n    last_digit_2 = (2 ** (100 % 4)) % 10  # 100 % 4 is 0, so this is 2 ** 0 = 1\n\n    # The last digit of powers of 7 cycles every 4 steps: 7, 9, 3, 1...\n    last_digit_7 = (7 ** (100 % 4)) % 10  # 100 % 4 is 0, so this is 7 ** 0 = 1\n\n    # The last digit of powers of 9 cycles every 2 steps: 9, 1...\n    last_digit_9 = (9 ** (100 % 2)) % 10   # 100 % 2 is 0, so this is 9 ** 0 = 1\n\n    # Now multiply the last digits together and get the last digit of the result\n    last_digit_product = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n\n    return last_digit_product\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    total_students = 92\n    students_per_minibus = 6\n\n    if total_students % students_per_minibus == 0:\n        num_minibusses = total_students // students_per_minibus\n    else:\n        num_minibusses = (total_students // students_per_minibus) + 1\n\n    return num_minibusses\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    total = 0\n    for i in range(1, 2008):\n        total += (i ** 2 + (i + 1) ** 2) / (i * (i + 1))\n    return round(total)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    ans = (24 / 100) * 25\n    return ans\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = ((4 + 6 * 2) * 16) // 8**2\n    return ans\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    incorrect_avg = 159\n    correct_avg = 163\n    incorrect_height = 126\n    correct_height = 162\n    \n    # Difference in height due to the error\n    height_diff = correct_height - incorrect_height\n    \n    # Difference in average due to the error\n    avg_diff = correct_avg - incorrect_avg\n    \n    # Number of girls' heights recorded\n    num_girls = height_diff / avg_diff\n\n    return num_girls\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 2 * a + 4\n\n    ans = custom_operation(200, 199)\n    for i in range(188, 1, -1):\n        ans = custom_operation(ans, i)\n\n    return ans\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # Create a list of odd numbers from 1 to 13\n    odd_numbers = [i for i in range(1, 14, 2)]\n    \n    # Calculate the sum of the odd numbers\n    sum_of_odds = sum(odd_numbers)\n    \n    # Square the sum of the odd numbers to get the answer\n    ans = sum_of_odds ** 2\n    \n    return ans\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    result = (3/2) * (4/3) * (5/4) * (6/5) * (7/6) * (8/7) * (9/8) * (10/9)\n    return result\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "from math import gcd\n\ndef solution():\n    ribbon_lengths = [56, 42, 84]\n    greatest_length = gcd(gcd(ribbon_lengths[0], ribbon_lengths[1]), ribbon_lengths[2])\n    return greatest_length\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ken, beth = symbols('ken beth')\n    \n    equation1 = Eq(ken, beth + 75)\n    equation2 = Eq(4 * beth / 5, 2 * ken / 5)\n    \n    solutions = solve((equation1, equation2), (ken, beth))\n    \n    total_seashells = solutions[ken] + solutions[beth]\n    \n    return total_seashells\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    ans = number + 10000\n    return ans\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube_root in range(1, 50):\n        cube = cube_root ** 3\n        square = cube - 2\n        if int(square**0.5 + 0.5)**2 == square:\n            return square\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = sum(range(1, 10)) + 7\n    return ans\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    n = 2009\n    return n - 1\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $2 and $10 notes.\n    num_2, num_10 = symbols('num_2 num_10')\n\n    # Equation 1: Total number of notes is 40.\n    equation1 = Eq(num_2 + num_10, 40)\n\n    # Equation 2: After spending, 4/5 times the number of $10 notes is the number of $2 notes.\n    equation2 = Eq(num_10 * (1 - 0.40), (num_2 * (1 - 0.25)) * (4/5))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (num_2, num_10))\n\n    # Calculate the money spent.\n    money_spent = 2 * solutions[num_2] * 0.25 + 10 * solutions[num_10] * 0.40\n\n    return money_spent\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    result = (7/8) * 32\n    return result\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x and y be the two original numbers\n    x, y = symbols('x y')\n    \n    # Equation 1: The sum of two numbers is 11.63\n    eq1 = Eq(x + y, 11.63)\n    \n    # Equation 2: Shifting the decimal point of y to the left by one position\n    eq2 = Eq(x + y/10, 5.87)\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n    \n    # The difference between the two numbers\n    difference = abs(solutions[x] - solutions[y])\n\n    # One hundred times the difference\n    return 100 * difference\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "def solution():\n    # Start with allocating 2 oranges to each child.\n    # This guarantees that each of them gets at least two oranges.\n    # Then we will have 13 - 2*3 = 7 oranges left to distribute.\n\n    remaining_oranges = 13 - 2*3\n    # Assign to each child any number of oranges from the remaining ones. \n    # We are now solving the problem of partitioning 7 oranges into 3 parts, \n    # which is equivalent to inserting two dividers into a sequence of 7 oranges.\n    # This is the classic \"stars and bars\" problem from combinatorics.\n    \n    # The total number of 'slots' between oranges is remaining_oranges + 1 \n    total_slots = remaining_oranges + 1\n    # We need to choose positions for our 2 dividers, hence we have total_slots - 1\n    # positions to choose from.\n    number_of_positions = total_slots - 1\n    # We need to pick 2 positions to put our dividers. \n    ways_to_divide = math.comb(number_of_positions, 2)\n\n    return ways_to_divide\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    ans = 342 // 6\n    return ans\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Sally and John's current ages\n    sally, john = symbols('sally john')\n\n    # Creating equations based on the problem statement\n    equation1 = Eq(sally + 3, 6 * (john + 3))  # In 3 years, Sally will be 6 times older than John\n    equation2 = Eq(sally + john, 50)  # Total age right now is 50\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (sally, john))\n\n    # Returning Sally's current age\n    return solutions[sally]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        # PASO is a 4-digit number, so P cannot be 0\n        if p == 0:\n            continue\n        PASO = 1000*p + 100*a + 10*s + o\n        OPAS = 1000*o + 100*p + 10*a + s\n        SOPA = 1000*s + 100*o + 10*p + a\n        if PASO == OPAS + SOPA:\n            return PASO\n            \nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts of water Harry and Liam have\n    harry, liam = symbols('harry liam')\n\n    # Create two equations based on the problem statement\n    equation1 = Eq(harry + liam, 640)  # Harry and Liam have 640mL of water in total\n    equation2 = Eq((harry + 90), 3 * (liam - 90))  # If 90mL is transferred from Liam to Harry, Harry has thrice of Liam\n\n    # Solve the equations for Harry and Liam\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    # On Monday, Pip did 3 questions\n    first_day_questions = 3\n\n    # Each day he did 3 more questions than the day before, so the difference is 3\n    difference = 3\n\n    # There are 7 days from Monday to Sunday\n    num_days = 7\n\n    # Calculate the total number of questions solved using arithmetic series sum formula:\n    # sum = n/2 * (2 * a + (n - 1) * d)\n    total_questions = num_days/2 * (2 * first_day_questions + (num_days - 1) * difference)\n\n    return int(total_questions)\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # Man's rate of drinking per day\n    man_rate = 1 / 15\n    # Combined rate of drinking per day\n    combined_rate = 1 / 12\n    # Wife's rate of drinking per day\n    wife_rate = combined_rate - man_rate\n    \n    # Calculate how many days will the wife take to finish \n    # the barrel on her own\n    wife_days = 1 / wife_rate\n    \n    return wife_days\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = (77.5 * (52 / 100)) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2 ** 10) % 3\n    return remainder\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "def solution():\n    from math import comb\n    \n    count = 0\n    # Iterate over the possible remaining white balls, between 3 and 8 inclusive\n    for white_left in range(3, 9):\n        # Calculate the number of white balls picked\n        white_picked = 9 - white_left\n        \n        # Iterate over the possible remaining red balls, between 2 and 5 inclusive\n        for red_left in range(2, 6):\n            # Calculate the number of red balls picked\n            red_picked = 5 - red_left\n            \n            # Calculate the number of black balls picked\n            black_picked = 10 - white_picked - red_picked\n            \n            # Check if the number of black balls picked is within the allowed range (0 to 6 - min 3 left)\n            if 0 <= black_picked <= 6 - 3:\n                # Calculate the possible combinations\n                count += comb(9, white_picked) * comb(5, red_picked) * comb(6, black_picked)\n                \n    return count\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # The peeling rate increases by a constant amount each hour.\n    # The differences between successive amounts of peeled beans form an arithmetic sequence.\n    # 28 - 20 = 8 and 36 - 28 = 8 shows the common difference in the number of beans peeled per hour is 8.\n    \n    common_difference = 8  # The increment per hour is the same\n    \n    # Calculate the number of beans peeled in the first hour\n    # The number of beans peeled at 9 o'clock is 20\n    # The difference between the amount peeled at 9 and the amount peeled in the first hour is two hours' worth of increment\n    first_hour_beans = 20 - 2 * common_difference\n    \n    return first_hour_beans\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_cm = 100  # 1 meter is 100 centimeters\n\n    times_smaller = snake_length_cm / insect_length_cm\n\n    return times_smaller\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pearls = symbols('pearls')\n\n    equation = Eq(pearls / 2 + pearls / 4 + pearls / 6 + 3, pearls)\n\n    total_pearls = solve(equation, pearls)\n\n    return total_pearls[0]\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = initial_mass - given_away\n    ans = round(remaining_mass, 1)\n    return ans\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1  # first term\n    i = 1\n    while True:\n        next_term = term + (i * 2)  # compute the next term\n        if next_term >= 100:  # check if the next term is a three-digit number\n            break\n        term = next_term\n        i += 1\n    return term\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    pip_position = 6\n    bud_from_end = 6\n    between_pip_and_bud = 5\n\n    total_children = pip_position + between_pip_and_bud + bud_from_end - 1\n\n    return total_children\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    # Assuming a, b, c are the first three numbers and d is the fourth number\n    # (a + b + c) / 3 = 120 => a + b + c = 360\n    # (a + b + c + d) / 4 = 150 => a + b + c + d= 600\n    \n    # The sum of the first three numbers is\n    sum_first_three = 3 * 120\n    \n    # The total sum after the fourth number is added\n    total_sum_with_fourth = 4 * 150\n    \n    # The fourth number is the difference between the total sum with fourth and sum of the first three\n    fourth_number = total_sum_with_fourth - sum_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    half_mangoes_weight = half_full_weight - (full_weight - half_full_weight)\n    \n    empty_basket_weight = half_full_weight - half_mangoes_weight\n    return empty_basket_weight\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n    \n    # Calculate the common difference of the arithmetic sequence\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    # Calculate the last term of the arithmetic sequence\n    last_term = first_term + (total_rows - 1) * common_difference\n    \n    # Sum of an arithmetic sequence formula: n/2 * (first_term + last_term)\n    total_athletes = total_rows * (first_term + last_term) // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_age_now = 29 * 6\n    total_parents_age_now = total_age_now - 64\n    average_parents_age_now = total_parents_age_now / 2\n    average_parents_age_three_years_ago = average_parents_age_now - 3\n    \n    return average_parents_age_three_years_ago\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    return sum([3 for _ in range(8)]) // 3\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    papers_per_leaf = 3\n    total_papers = 18\n    # Subtract 1 to exclude the paper where the next leaf would start\n    leaves = (total_papers - 1) // papers_per_leaf\n    \n    return leaves\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    total_days = 5\n    total_target_paintings = 56\n\n    paintings_per_day = total_paintings_done / total_days\n    remaining_paintings = total_target_paintings - total_paintings_done\n    \n    more_days_needed = remaining_paintings / paintings_per_day\n    \n    return int(more_days_needed)  # Convert to int, as we can't have partial days\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    a5 = 8\n    a12 = 50\n\n    common_difference = (a12 - a5) / (12 - 5)\n    \n    return common_difference\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    return 95 * (37 + 42 + 21)\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import permutations\n\ndef time_taken(perm):\n    # This function calculates time taken for a given permutation of crossings\n    total_time = 0\n    while len(perm) > 3:\n        a, b = perm[0], perm[1]\n        total_time += b  # Two fastest go to the other side\n        total_time += a  # Fastest comes back\n        perm = perm[2:]  # Remove the two that have crossed\n        perm.insert(0, a)  # Add the fastest to the front again, because he came back\n    total_time += perm[2]  # Last three cross together\n    return total_time\n\ndef solution():\n    times = [7, 9, 4, 10]\n    min_time = float('inf')\n    # We will iterate over all permutations of three people who will come back\n    # after rowing across the river. The fourth will wait on the other side.\n    for perm in permutations(times):\n        min_time = min(min_time, time_taken(list(perm)))\n    \n    return min_time\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest_num = min(numbers, key=lambda x: abs(x - 0.1))\n    return closest_num\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    step = 3\n    last_term = 242\n    total_numbers = ((last_term - first_term) // step) + 1  # total number of terms in original sequence\n\n    # Identify how many times we need to perform the operation\n    erase_operations = (total_numbers - 3) // 3  # since we erase three terms at a time\n\n    # Calculate the new first term after all operations\n    new_first_term = first_term + erase_operations * step * 3\n\n    # The second number will be the new first term plus the step size\n    second_number = new_first_term + step\n\n    return second_number\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    # Let's denote the weights of Pip, Bud, and Bob as P, B, and Bo respectively.\n    # According to the problem:\n    # (P + B) / 2 = 30\n    # (P + Bo) / 2 = 33\n    # (B + Bo) / 2 = 36\n\n    # From the above equations, we can derive the following:\n    # P + B = 60\n    # P + Bo = 66\n    # B + Bo = 72\n\n    # Subtract the first equation from the second and third to solve for Pip\n    # P + Bo - (P + B) = 66 - 60 -> Bo - B = 6\n    # P + B - (B + Bo) = 60 - 72 -> P - Bo = -12\n\n    # Now we have two new equations:\n    # Bo - B = 6\n    # P - Bo = -12\n\n    # Add these two equations to eliminate Bo:\n    # (Bo - B) + (P - Bo) = 6 - 12 -> P - B = -6\n\n    # Use the equation P + B = 60, and P - B = -6 to solve for P\n    # Adding these two equations gives us:\n    # 2P = 60 - 6\n    # 2P = 54\n    # P = 54 / 2\n    # P = 27\n\n    # Pip weighs 27 kg\n    return 27\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n    total_children = jacob + sisters + brothers\n    return total_children\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 7\n\n    work_per_person = initial_days / initial_people\n    total_work = work_per_person * initial_people\n\n    people_needed = total_work / target_days\n    additional_people = people_needed - initial_people\n\n    return int(additional_people) if additional_people == int(additional_people) else int(additional_people) + 1\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    # Let the total distance be d meters and her usual speed be s m/min\n    # She runs at her usual speed for a certain time t, so she covers st meters\n    # After it rains, she runs 2400 meters at a speed of 0.8s (20% reduction)\n    # Total time it took her now is t + (2400 / (0.8 * s)) = 30 + 5 minutes\n\n    # Set up the equation: st + 2400 / (0.8 * s) = 35 * s\n    # Simplify to get: st + 3000 = 35s\n    # We know st + 2400 = d\n    # So we can write: d - 2400 + 3000 = 35s\n    # d = 35s - 3000 + 2400\n    # Also we know that d = s * 30 (her normal time to cover the distance)\n    # Equating both expressions for d gives us: s * 30 = 35s - 600\n    # 5s = 600\n    s = 600 / 5\n\n    # Now find the length of the journey d\n    d = s * 30\n    return d\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    approximate_depreciation = 0.6957\n\n    final_value = initial_value * (1 - depreciation_rate)**years\n\n    return int(final_value * approximate_depreciation)\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    ans = 672 // 8\n    return ans\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the original number of students in school A as 'a'\n    # and the number of students in school B as 'b'.\n    a, b = symbols('a b')\n    \n    # Setup the equations based on the problem statement:\n    # Equation 1: Originally there are 1050 students in total in schools A and B.\n    equation1 = Eq(a + b, 1050)\n    \n    # Equation 2: After transferring 20 students from school A to school B,\n    # school A has 10 more students than school B.\n    equation2 = Eq((a - 20) - (b + 20), 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # The solution for 'a' is the original number of students in school A.\n    return solutions[a]\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_time = 5.00  # 5:00 am\n    final_time = 10.5    # 10:30 am\n    initial_temp = -3    # -3°C at 5:00 am\n    rate_of_rise = 2     # 2°C per hour\n\n    hours_passed = final_time - initial_time\n    temp_increase = hours_passed * rate_of_rise\n    final_temp = initial_temp + temp_increase\n\n    return final_temp\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The Chinese Remainder Theorem states that if one is to find an integer x that satisfies a system of\n    # linear congruences, x = a (mod m), x = b (mod n), ... where m, n, ... are pairwise coprime, then\n    # there is a solution, and the solution is unique modulo the product of m, n, ...\n    # Since the numbers are even and consecutive, we can set them as 2k, 2k+2, and 2k+4.\n    # 2k is a multiple of 7, so k is a multiple of 7/2, which is not an integer, therefore we take 14k.\n    # Hence, we need to solve the following system of congruences:\n    # 14k ≡ 0 (mod 7) => k ≡ 0 (mod 1) -> true for all k.\n    # 14k + 2 ≡ 0 (mod 8) -> 14k ≡ 6 (mod 8) => k ≡ 3 (mod 4) because 14 ≡ -2(mod 8) and -2 ≡ 6 (mod 8)\n    # 14k + 4 ≡ 0 (mod 9) -> 14k ≡ 5 (mod 9) => k ≡ 8 (mod 9) because 14 ≡ 5 (mod 9)\n    # Since 4 and 9 are coprime numbers, we can apply the Chinese Remainder Theorem to find the smallest k\n    congruences = [(0, 1), (3, 4), (8, 9)]\n    k, _ = solve_congruence(*congruences)\n\n    # Calculate the numbers using the value of k found\n    first_number = 14 * k\n    second_number = 14 * k + 2\n    third_number = 14 * k + 4\n\n    # Sum the numbers to get the answer\n    ans = first_number + second_number + third_number\n    return ans\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the initial amount of money Mrs Chan had.\n    x = symbols('x')\n\n    # Money spent in shop A: half of x plus $1\n    money_after_A = x / 2 - 1\n\n    # Money spent in shop B: half of the remaining plus $2\n    money_after_B = money_after_A / 2 - 2\n\n    # Money spent in shop C: one third of the remaining plus $3\n    money_after_C = money_after_B * (2/3) - 3\n\n    # Equation for the money left after shopping in shop C\n    equation = Eq(money_after_C, 49)\n\n    # Solve the equation for x\n    initial_money = solve(equation, x)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    n = 7  # number of shelves\n    total_books = 280\n    d = -3  # common difference (each shelf has 3 fewer books than the one below)\n\n    # Total number of books is the sum of the arithmetic sequence:\n    # total_books = n/2 * (2*a + (n-1)*d)\n    # where a is the number of books on the top shelf (which we need to find)\n    # Rearranging the equation to solve for a gives:\n    # a = (total_books/n - (n-1)*d/2) * 2\n\n    a = (total_books / n - (n - 1) * d / 2) * 2\n    return int(a)\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    total_pencils = 3 + 3 + 3   # 3 blue, 3 green, 3 white\n    draws_without_green = 3 + 3  # Max amount of pencils that can be drawn without getting a green one\n\n    # To make sure to get at least 1 green, Darrell has to draw one more than the possible non-green draws\n    return draws_without_green + 1\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "from math import lcm\n\ndef solution():\n    sweep_cycle = 3\n    mope_cycle = 5\n    cook_cycle = 9\n    clean_cycle = 3 * 7\n\n    ans = lcm(sweep_cycle, mope_cycle, cook_cycle, clean_cycle)\n    \n    return ans\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Using the Inclusion-Exclusion Principle:\n    # |A ∪ B| = |A| + |B| - |A ∩ B|\n    # We know |A ∪ B| (total students), |A| (math students), and |B| (art students).\n    # We need to find |A ∩ B| (students who participate in both).\n\n    students_in_both = math_students + art_students - total_students\n\n    return students_in_both\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    # To ensure that 2240/n is a perfect square,\n    # n must be a factor of 2240 that is also part of its perfect square factorization.\n    from sympy import primerange\n    from math import sqrt\n\n    # Prime factors of 2240\n    prime_factors = list(primerange(1, sqrt(2240)))\n\n    # Initialize n as 1 (multiplicative identity)\n    n = 1\n    for prime in prime_factors:\n        count = 0\n        while 2240 % prime == 0:\n            2240 //= prime\n            count += 1\n        if count % 2 == 1:    # if the power of the prime factor is odd,\n            n *= prime        # multiply n by that prime factor to make the power even\n    return n\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    total_sum = 0\n    for i in range(1, 311):\n        total_sum += sum_of_digits(i)\n\n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of kids, y be the number of candies\n    x, y = symbols('x y')\n    \n    # if every kid eats 18 candies, then 12 more candies are needed\n    # y = 18 * x - 12\n    equation1 = Eq(y, 18 * x - 12)\n    \n    # if every kid eats 15 candies, the candies are just enough to be distributed to 2 more kids\n    # y = 15 * (x + 2)\n    equation2 = Eq(y, 15 * (x + 2))\n\n    # solving the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # returning the amount of candies\n    return solutions[y]\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    total_cost = cost_per_item * 11\n    return total_cost\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    avril_age_2_years_ago = avril_age_now - 2\n    dad_age_2_years_ago = dad_age_now - 2\n\n    age_difference_2_years_ago = dad_age_2_years_ago - avril_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    return (48 - (20 + 26)) // 2\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    import math\n\n    expression = 16.7 - ((-4.56)**2 - (8.1)**3 / (7.2)**3) / (-math.sqrt(6 + 3/4) + 30.15)**(1/3)\n    ans = round(expression, 3)\n\n    return ans\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    Mr_Lim, Mrs_Lim = symbols('Mr_Lim Mrs_Lim')\n\n    # 7 years ago Mr. Lim to Mrs. Lim age ratio was 6:5\n    equation1 = Eq((Mr_Lim - 7)/ (Mrs_Lim - 7), 6/5)\n\n    # Sum of their current ages is 69 years old\n    equation2 = Eq(Mr_Lim + Mrs_Lim, 69)\n\n    solutions = solve((equation1, equation2), (Mr_Lim, Mrs_Lim))\n\n    return solutions[Mr_Lim]\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Ratio of speeds of Jayden to Carter\n    speed_ratio_jayden_to_carter = 7 / 4\n\n    # Jayden travels the entire 440m first, so we need to find out how much Carter\n    # travels during that time. The time for both to travel until Jayden reaches A\n    # is the same, so we can use the speed ratio directly to divide the distance.\n    distance_carter_travels = 440 * (4 / (7 + 4))\n\n    # Jayden turns back and they meet somewhere in between. The remaining distance\n    # is what Carter has to cover while Jayden also starts from A again.\n    remaining_distance = 440 - distance_carter_travels\n\n    # Since they head towards each other, we can add their speeds. We use the\n    # ratio again to find out the remaining distance Jayden covers, and since\n    # they meet, this will be the distance from A to their meeting point.\n    distance_jayden_covers = remaining_distance * (speed_ratio_jayden_to_carter / (speed_ratio_jayden_to_carter + 1))\n\n    return distance_jayden_covers\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    total_score_5_students = 87 * 5\n    total_score_6_students = 88 * 6\n    jims_score = total_score_6_students - total_score_5_students\n    return jims_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    ans = 58 + 63 + 59 + 62 + 63 + 56 + 61\n    return ans\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    # let's say John originally had j stickers\n    # let's denote the initial number of stickers Sam had as s and Peter as p\n    # We have that Sam had 20 stickers more than John in the end, so\n    # s - 0.2*s + 20 = j + 0.8*j => s - 0.2*s - j - 0.8*j = -20\n    # Also, Sam gives away 20% of his stickers and Peter gives away 20% of his stickers to John\n    # So John ends up with j + 0.2*s + 0.2*p\n    # and we know that John's stickers increased by 80% so we also have that j + 0.2*s + 0.2*p = j + 0.8*j => 0.2*s + 0.2*p = 0.8*j\n    # We have the ratio of Sam's and Peter's stickers as 7:5 => s/p = 7/5 => 5*s = 7*p\n    # We can set up a system of equations as follows:\n    \n    from sympy import symbols, Eq, solve\n    \n    j, s, p = symbols('j s p')\n    \n    equation1 = Eq((s - 0.2*s - j - 0.8*j), -20)\n    equation2 = Eq(0.2*s + 0.2*p, 0.8*j)\n    equation3 = Eq(5*s, 7*p)\n\n    solutions = solve((equation1, equation2, equation3), (j, s, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = initial_price * 0.10\n    second_discount = (initial_price - first_discount) * 0.20\n    final_price = initial_price - first_discount - second_discount\n    return final_price\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    minibus_capacity = 6\n    minibusses_needed = (boys + minibus_capacity - 1) // minibus_capacity\n    return minibusses_needed\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    equation1 = Eq(raja - 286, kumar - 109)\n    equation2 = Eq(kumar - 109, 4 * (raja - 286))\n\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbol for number of baseball bats\n    n = symbols('n', integer=True, positive=True)\n\n    # cost price and selling price per bat\n    cost_price_per_bat = 135\n    selling_price_per_bat = 185\n\n    # profit\n    profit = 2945\n\n    # total cost price\n    total_cost = cost_price_per_bat * n\n\n    # total selling price when left with 3 bats\n    total_selling_price = selling_price_per_bat * (n - 3)\n\n    # equation representing total cost plus profit equal to total selling price\n    equation = Eq(total_cost + profit, total_selling_price)\n\n    # solving the equation to find the number of baseball bats\n    solutions = solve(equation, n)\n\n    # returning the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chair = symbols('chair')\n    table = chair + 160\n    total_cost = table + 5 * chair\n    equation = Eq(total_cost, 328)\n    \n    cost_of_chair = solve(equation, chair)\n    \n    return cost_of_chair[0]\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    delta, square, circle, diamond = symbols('delta square circle diamond')\n\n    equation1 = Eq(delta + delta, square)\n    equation2 = Eq(square + delta, circle)\n    equation3 = Eq(diamond, circle + square + delta)\n\n    solutions = solve((equation1, equation2, equation3), (delta, square, circle, diamond))\n\n    return solutions[delta].subs(solutions)\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money = 60      # pence\n    bud_money = 110     # pence (since £1.10 equals 110 pence)\n    \n    total_money = pip_money + bud_money  # total in pence\n    total_money_pounds = total_money / 100  # convert pence to pounds\n    \n    return total_money_pounds\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    # The total sum of all the numbers\n    total_sum = 10 * 1111\n    \n    # The mean of the first 4 numbers is 240 less than the mean of the last 6 numbers\n    # Let the mean of the last 6 numbers be x\n    # Then the mean of the first 4 numbers is x - 240\n    # Now we can write an equation based on the sum of the numbers\n    # 4 * (x - 240) + 6 * x = total_sum\n    # 10x - 960 = total_sum\n    # 10x = total_sum + 960\n    x = (total_sum + 960) / 10\n    \n    return x\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hot_time = symbols('hot_time')\n\n    # 1 / hot_time is the rate at which the hot tap fills the bath\n    # 1 / (hot_time / 2) is the rate at which the cold tap fills the bath\n    # Together they take 10 minutes to fill the bath, so their combined rate is 1 / 10\n    equation = Eq((1 / hot_time) + (1 / (hot_time / 2)), 1 / 10)\n\n    # Solve the equation for the time it takes for the hot tap to fill the bath\n    hot_time_solution = solve(equation, hot_time)\n\n    # Now find the time it takes for the cold tap by itself to fill the bath\n    cold_time = hot_time_solution[0] / 2\n\n    return cold_time\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    # If Rachel gives Alice 10 pieces of candy, they will have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If Alice gives Rachel 10 pieces of candy, Rachel will have 4 more than 3 times Alice's candy\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Total number of candies they originally have\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "from sympy import symbols, solve\n\ndef solution():\n    I, S, P = symbols('I S P', integer=True)\n    # Each letter represents a distinct digit, so they are between 0 and 9\n    eq = 4 * (10 * I + S) - (10 * P + I)\n    # Use the fact that I, S, P are different digits\n    solutions = solve(eq, (I, S, P))\n    # Filter solutions for acceptable digit values\n    valid_solutions = [sol for sol in solutions if all(x.is_integer and 0 <= x < 10 for x in sol)]\n    for sol in valid_solutions:\n        if len(set(sol)) == 3:  # Check for distinct digits\n            ans = sol[0] * 10 + sol[1]  # PI = 10 * P + I\n            return ans\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return round(final_value, 1)\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Define the distances for each part of the race\n    distance_part_one = 280\n    distance_part_two = 400\n    distance_part_three = 800 - (distance_part_one + distance_part_two)\n\n    # Define the speeds for each part of the race\n    speed_part_one = 7   # meters per second\n    speed_part_two = 5   # meters per second\n    speed_part_three = 8 # meters per second\n\n    # Calculate the time for each part of the race\n    time_part_one = distance_part_one / speed_part_one\n    time_part_two = distance_part_two / speed_part_two\n    time_part_three = distance_part_three / speed_part_three\n\n    # Calculate the total time\n    total_time = time_part_one + time_part_two + time_part_three\n\n    return total_time\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    ans = 727 + 482\n    return ans\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    num_teams = 5\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2  # Lori's speed is 2 meters per second\n    joyce_speed_ratio = 3  # Joyce's speed ratio is 3\n    lori_speed_ratio = 2   # Lori's speed ratio is 2\n\n    # Calculate Joyce's speed based on the ratio\n    joyce_speed = (joyce_speed_ratio / lori_speed_ratio) * lori_speed\n\n    # Calculate the distance Joyce can run in 10 seconds\n    joyce_distance = joyce_speed * 10\n\n    return joyce_distance\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don's speed in metres per minute\n    distance_met = 360  # distance at which they meet, from home, in metres\n    library_distance = 780  # distance from home to library, in metres\n\n    # The time it takes for them to meet is the same for both Don and Danny\n    time_to_meet = distance_met / don_speed\n\n    # Danny covers the distance from the library to the meeting point in the same time\n    danny_distance = library_distance - distance_met\n    danny_speed = danny_distance / time_to_meet\n\n    return danny_speed\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    total_digits = 792\n    digits = 0\n    page = 1\n    while digits < total_digits:\n        digits += len(str(page))\n        if digits <= total_digits:\n            page += 1\n        else:\n            break\n    return page - 1\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    total_weight_grams = (1*1000 + 500) + (1*1000 + 200) + 900\n    weight_per_tin = total_weight_grams / 8\n    return weight_per_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(sum(i/j for j in range(i, 11)) for i in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_A_over_20 = 0.6\n    probability_A_over_25_given_over_20 = 0.3\n    # The probability of A living over 25 given it is already over 20\n    # is the same as the probability of A living over 25 since it's given\n    # that A has already lived over 20 years. \n    ans = probability_A_over_25_given_over_20 / probability_A_over_20\n    return ans\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    numerator = 20\n    denominator1 = 30\n    denominator2 = 27\n\n    ans = (numerator / denominator1) * denominator2\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B have two choices: either A is on the far right/left and B on the other end,\n    # or B is on the far right/left and A on the other end.\n    AB_positions = 2\n\n    # Now there are 2 positions left for C and D which can be arranged in 2! ways\n    CD_permutations = 2\n\n    # Overall permutations\n    total_permutations = AB_positions * CD_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    numbers = ['1', '2', '3']\n    two_digit_numbers = set()\n\n    for digit1 in numbers:\n        for digit2 in numbers:\n            if digit1 != digit2:\n                two_digit_numbers.add(digit1 + digit2)\n\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    even_numbers = []\n\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num % 2 == 0 and num > 999:\n            even_numbers.append(num)\n\n    return min(even_numbers)\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # Using the pigeonhole principle, we consider the worst-case scenario\n    # to ensure we get 4 marbles of the same color.\n    \n    # If we take 3 red, 3 blue, and 3 green marbles, we still don't have\n    # 4 of the same color. That's a total of 3+3+3 = 9 marbles.\n    # By taking one more marble, we are guaranteed to have 4 marbles\n    # of the same color because we already have the worst-case distribution\n    # of 3 per color.\n    \n    # So we need to take 1 more marble on top of the 9 we have considered\n    # to ensure we have 4 of the same color.\n    num_marbles = 3*3 + 1\n    return num_marbles\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    total_workers = 3\n    total_days = 3\n    days_for_one_worker = total_workers * total_days\n    return days_for_one_worker\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    # Initialize the value to start checking from,\n    # since the remainder when divided by 13 is 11,\n    # the number must be greater than 11.\n    number = 11\n\n    # Since we're looking for the largest two-digit number,\n    # we loop downwards from the largest two-digit number (99)\n    for number in range(99, 10, -1):\n        if number % 7 == 5 and number % 13 == 11:\n            return number\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n    pupils_per_row = total_pupils // rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    # John's statement:\n    # 6 * (10x + y) + 25 = 200 + 10x + y\n    # 60x + 6y + 25 = 200 + 10x + y\n    # 50x + 5y = 175\n    # 10x + y = 35, not 45 as John stated\n\n    # Let's solve the correct equations:\n    for x in range(1, 10):  # x is a digit, so it ranges from 1 to 9\n        for y in range(0, 10):  # y is a digit, so it ranges from 0 to 9\n            A = 10 * x + y\n            B = 200 + 10 * x + y\n            if B == 6 * A + 25:\n                return A  # Return the value of A if the condition is true\n    \n    return None  # Return None if no solution is found\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Define the possible sets of operations with brackets\n    operations = [\n        (285 + 15) / 5 - 2,  # (285 + 15) / 5 - 2\n        285 + (15 / 5) - 2,  # 285 + (15 / 5) - 2\n        285 + 15 / (5 - 2),  # 285 + 15 / (5 - 2)\n        (285 + 15 / 5) - 2,  # (285 + 15 / 5) - 2\n        285 + (15 / 5 - 2),  # 285 + (15 / 5 - 2)\n        285 + 15 / 5 - 2     # 285 + 15 / 5 - 2 , Base case without brackets\n    ]\n    \n    # Use a set to store unique results\n    unique_results = set(operations)\n    \n    # Return the number of unique results\n    return len(unique_results)\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    ratio = 3 / 4\n    yiding_level = 16 * ratio\n    return int(yiding_level)\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        if i % 3 == 0 and i % 5 == 0:\n            # Numbers divisible by both 3 and 5 (i.e., 15) will change state twice\n            # Hence they will ultimately remain as they started - Unlocked\n            continue\n        elif i % 3 == 0 or i % 5 == 0:\n            # Numbers divisible by 3 or 5 but not both will change state once\n            # Hence they will be Locked\n            continue\n        else:\n            # Numbers not divisible by 3 or 5 will remain Unlocked\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    quotient = 11\n    remainder = 5\n    divisor = 12\n\n    number = (quotient * divisor) + remainder\n\n    return number\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFG'):\n        idx_A = perm.index('A')\n        idx_B = perm.index('B')\n        idx_C = perm.index('C')\n        idx_D = perm.index('D')\n        idx_E = perm.index('E')\n        idx_F = perm.index('F')\n        idx_G = perm.index('G')\n        \n        # Check A is in the middle of B and C\n        if not (idx_A > idx_B and idx_A > idx_C) and not (idx_A < idx_B and idx_A < idx_C):\n            continue\n        \n        # Check D and E are not next to each other\n        if abs(idx_D - idx_E) == 1:\n            continue\n        \n        # Check F and G are next to each other\n        if abs(idx_F - idx_G) != 1:\n            continue\n        \n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    # Let x be the cost of one cake\n    # Let y be the amount of money Lucy has\n    # We have two equations:\n    # 10x - y = 11 (If she buys 10 cakes, she borrows 11 dollars)\n    # 13x - y = 26 (If she buys 13 cakes, she borrows 26 dollars)\n    \n    # To find x, we simply need to subtract these two equations\n    \n    # Subtracting the first equation from the second, we get:\n    # (13x - y) - (10x - y) = 26 - 11\n    # 13x - 10x = 26 - 11\n    # 3x = 15\n    # x = 15 / 3\n    # x = 5\n    \n    cake_cost = 15 / 3\n    return cake_cost\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_mass_children = total_mass_boys + total_mass_girls\n    total_number_children = 4 + 6\n    average_mass_children = total_mass_children / total_number_children\n    return average_mass_children\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    mean_score = 40\n    scores_sum = mean_score * total_matches\n    given_scores_sum = 37 + 53 + 29 + 41\n    x = scores_sum - given_scores_sum\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    # Palindromic numbers between 1000 and 9999 have the form ABBA\n    for A in range(1, 10):  # The first digit can't be 0\n        for B in range(0, 10):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    numbers_without_seven = 8 * 9 * 9\n    \n    at_least_two_sevens = total_three_digit_numbers - numbers_without_seven\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"CHEESE\")\n    freq_c = \"CHEESE\".count('C')\n    freq_h = \"CHEESE\".count('H')\n    freq_e = \"CHEESE\".count('E')\n    freq_s = \"CHEESE\".count('S')\n\n    arrangements = factorial(total_letters) // (factorial(freq_c) * factorial(freq_h) * factorial(freq_e) * factorial(freq_s))\n\n    return arrangements\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n\n    min_dividend = smallest_divisor * quotient + remainder\n    return min_dividend\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for n in range(10000, 100000):\n        original = n * 10 + 9\n        new_number = int(str(9) + str(n))\n        if new_number == 4 * original:\n            return original\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a - b\n\n    ans = new_operation(4, 3) - new_operation(3, 4)\n    return ans\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    # Alice's daily work rate\n    alice_rate = 1/40\n    # Bob's daily work rate\n    bob_rate = 1/60\n    \n    # Total work that needs to be done\n    total_work = 1\n\n    # The total work done by Bob in 27 days\n    work_done_by_bob = 27 * bob_rate\n    \n    # The remaining work that Alice needs to complete\n    remaining_work = total_work - work_done_by_bob\n    \n    # The number of days Alice needs to complete her remaining work\n    days_alice_works = remaining_work / alice_rate\n    \n    # The number of days Alice takes off\n    days_off = 27 - days_alice_works\n    \n    return days_off\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of animals originally be x\n    x = symbols('x')\n    # 65% were cows, so 35% were goats\n    goats_initial = 0.35 * x\n    cows_initial = 0.65 * x\n\n    # After 240 animals were added, cows increased by 20% in their fraction\n    # Now cows take 85% because 65% + 20% = 85%\n    # Number of goats doubled\n    goats_final = 2 * goats_initial  # Goats doubled\n\n    # After the addition, the total is x + 240, and 85% of that is cows\n    cows_final = 0.85 * (x + 240)\n\n    # The increase in cows is due to the 240 animals added\n    # So the cows_initial + 240 = cows_final\n    equation = Eq(cows_initial + 240, cows_final)\n\n    # Solve for x, the total number of animals originally\n    x_value = solve(equation, x)[0]\n\n    # Calculate the number of goats originally using the value of x\n    goats_initial_value = 0.35 * x_value\n\n    return int(goats_initial_value)\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Jonathan's current age and Abigail's current age\n    jonathan_age, abigail_age = symbols('jonathan_age abigail_age')\n\n    # Create the equations based on the problem description\n    eq1 = Eq(abigail_age, jonathan_age + 6) # Abigail is 6 years older than Jonathan\n    eq2 = Eq(abigail_age - 6, 2 * (jonathan_age - 6)) # 6 years ago, Abigail was twice as old as Jonathan\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (jonathan_age, abigail_age))\n\n    # Extract the solution for Jonathan's age\n    return solutions[jonathan_age]\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A == 0 or C == 0:\n            continue\n        num1 = 100 * A + 10 * B + A\n        num2 = 100 * C + 10 * D + C\n        if num1 + num2 == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a represent the cost of an apple and b represent the cost of a banana.\n    a, b = symbols('a b')\n\n    # Create equations based on the given information.\n    equation1 = Eq(3*a + 2*b, 1.25)\n    equation2 = Eq(a + b, 0.48)\n    \n    # Solve the equations to find the cost of an apple and a banana.\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Calculate the cost of 5 bananas.\n    cost_5_bananas = 5 * solutions[b]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product_mod_7 = (36 * 37 * 38 * 39 * 40 * 41) % 7\n    return product_mod_7\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    total_days = symbols('total_days')\n    total_pages = symbols('total_pages')\n\n    # Vanessa reads 30 pages a day and finishes in total_days+2 days\n    equation1 = Eq(30 * (total_days + 2), total_pages)\n\n    # Vanessa reads 39 pages a day and finishes in total_days-4 days\n    equation2 = Eq(39 * (total_days - 4), total_pages)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_days, total_pages))\n\n    # days and pages are supposed to be positive integers\n    valid_solution = next(solution for solution in solutions if solution[0] > 0 and solution[1] > 0)\n\n    return valid_solution\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    seq = [2, 0, 2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2, 0, 2]\n    num_digits = 535\n    seq_length = len(seq)\n    full_repeats = num_digits // seq_length\n    remaining_digits = num_digits % seq_length\n    count_2s_in_full_seq = seq.count(2) * full_repeats\n    count_2s_in_partial_seq = seq[:remaining_digits].count(2)\n    total_2s = count_2s_in_full_seq + count_2s_in_partial_seq\n    return total_2s\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    expression_result = (1000 + 2000 + 2100) / 17\n    return expression_result\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_away_cookies = 55\n\n    remaining_cookies = (morning_cookies + afternoon_cookies) - given_away_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    ans = 3102 // 6\n    return ans\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    def delta_operation(a, b):\n        return a**2 + a*b + b\n\n    ans = delta_operation(10, 9)\n    return ans\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adult_tickets, child_tickets = symbols('adult_tickets child_tickets')\n\n    equation1 = Eq(5 * adult_tickets + 3 * child_tickets, 75)\n    equation2 = Eq(adult_tickets + child_tickets, 19)\n\n    solutions = solve((equation1, equation2), (adult_tickets, child_tickets))\n\n    return solutions[adult_tickets]\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of fifty-cent coins as f and the number of one-dollar coins as d\n    f, d = symbols('f d')\n\n    # Initially, two_sevenths of the total number of coins were fifty-cent coins\n    equation1 = Eq(f, 2 / 7 * (f + d))\n\n    # After receiving additional coins, the number of one-dollar coins(d + 10) is twice the number of fifty-cent coins(f + 10)\n    # 10 additional dollar coins and 5 dollars' worth of fifty-cent coins means 10 additional fifty-cent coins\n    equation2 = Eq(d + 10, 2 * (f + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, d))\n\n    # Calculate the total initial number of coins\n    total_initial_coins = solutions[f] + solutions[d]\n\n    return total_initial_coins\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belt, dress, shirt = symbols('belt dress shirt')\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    dress_cost = solutions[dress]\n    shirt_cost = solutions[shirt]\n\n    ans = dress_cost - shirt_cost\n\n    return ans\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_savings_per_day = 7\n    brenda_savings_per_day = 6\n    andy_total_savings = 378\n\n    # Find the number of days Andy saved to get $378\n    days_andy_saved = andy_total_savings / andy_savings_per_day\n\n    # Calculate how much Brenda would have saved in the same number of days\n    brenda_total_savings = days_andy_saved * brenda_savings_per_day\n\n    return brenda_total_savings\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of marbles each person has after the exchanges\n    anna, betsy, charlene = symbols('anna betsy charlene')\n    \n    # After Charlene gave 15 marbles to Betsy\n    # After Betsy gave 8 marbles to Anna\n    # The ratios of their marbles are 2:5:7\n    equation1 = Eq(anna + 8, 2*(betsy - 8))\n    equation2 = Eq(betsy - 8, 5*(charlene + 15 - betsy + 8))\n    equation3 = Eq(charlene + 15 - betsy + 8, 7*(betsy - 8))\n    equation4 = Eq(anna + betsy + charlene, 168)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (anna, betsy, charlene))\n\n    # The number of marbles Betsy had at first can be found by subtracting the 8 she gave to Anna\n    original_betsy_marbles = solutions[betsy] - 8\n    \n    return original_betsy_marbles\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    ans = 52836 // 7\n    return ans\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    # total questions\n    total_questions = 10\n\n    # total points earned\n    total_points = 44\n\n    # points for correct answer\n    correct_points = 6\n\n    # points lost for wrong answer\n    incorrect_points = -2\n\n    # use the system of equations to find the number of correct answers\n    # let c be the number of correct answers and w be the number of wrong answers\n    # we have two equations:\n    # 1) c + w = total_questions\n    # 2) correct_points*c + incorrect_points*w = total_points\n\n    # from equation 1 we have c = total_questions - w\n    # substitute it into equation 2 we get:\n    # correct_points*(total_questions - w) + incorrect_points*w = total_points\n    # after simplifying we get w conclusion:\n\n    # correct_points*total_questions - w*(correct_points - incorrect_points) = total_points\n    # w*(correct_points - incorrect_points) = correct_points*total_questions - total_points\n    # finally, w = (correct_points*total_questions - total_points) / (correct_points - incorrect_points)\n    w = (correct_points*total_questions - total_points) / (correct_points - incorrect_points)\n\n    # number of correct answers c is:\n    c = total_questions - w\n\n    return int(c)\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original dimensions can be assumed as 1 (or 100%) for simplicity,\n    # since we're interested in the ratio not the actual measurements.\n    original_length = 1\n    original_breadth = 1\n    original_height = 1\n\n    # Calculate the new dimensions based on the given changes.\n    new_length = original_length * 1.10           # Increased by 10%\n    new_breadth = original_breadth * (4/5)        # Reduced to 4/5 of original\n    new_height = original_height * (11/10)        # New height to old height ratio is 11:10\n\n    # Calculate the original volume.\n    original_volume = original_length * original_breadth * original_height\n\n    # Calculate the new volume.\n    new_volume = new_length * new_breadth * new_height\n\n    # Calculate the new volume as a percentage of the original volume.\n    volume_percentage = (new_volume / original_volume) * 100\n\n    return volume_percentage\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    return comb(10, 3)\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    total_contestants = 8\n    podium_spots = 3\n\n    ways = factorial(total_contestants) // factorial(total_contestants - podium_spots)\n\n    return ways\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    return (30 + 40 + 50) * 3\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = 360 * 100 / remaining_work_percentage\n    return int(total_masks)\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    ans = round(number, -1)\n    return ans\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    ans = 52.8 * 7\n    return ans\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # To maximize the number of questions Noa can solve, we need to minimize\n    # the number of questions the other classmates solve. Since the problem\n    # states that everyone should solve at least one question and that the number\n    # of questions solved by each cannot be the same, we'll start by giving\n    # the minimum number of questions to the other classmates in an increasing order.\n\n    # Assign 1 question to the first student, 2 to the second, and so on\n    questions_given = sum(range(1, 5))\n\n    # Subtract the minimum questions given to the classmates from the total\n    # to find the maximum Noa can solve.\n    noa_questions = 40 - questions_given\n\n    return noa_questions\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    ans = hottest - coldest\n    return ans\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour + second_hour, 40)\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    nearest_1000 = round(number, -3)\n    return nearest_1000\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Time spent jogging is from 6:30 AM to 7:30 AM, which is 1 hour\n    jogging_time = 1\n    \n    # Time spent walking is from 7:30 AM to 9:30 AM, which is 2 hours\n    walking_time = 2\n    \n    # Speed while jogging in miles per hour\n    jogging_speed = 6.5\n    \n    # Speed while walking in miles per hour\n    walking_speed = 4.5\n    \n    # Total distance traveled while jogging\n    distance_jogging = jogging_speed * jogging_time\n    \n    # Total distance traveled while walking\n    distance_walking = walking_speed * walking_time\n    \n    # Total distance traveled\n    total_distance = distance_jogging + distance_walking\n    \n    return total_distance\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be Scan's current age and y be Ted's current age\n    x, y = symbols('x y')\n    \n    # The ratio of Scan's age to Ted's age is 1:4\n    equation1 = Eq(x/y, 1/4)\n    \n    # The ratio of their ages 4 years from now will be 1:3\n    equation2 = Eq((x+4)/(y+4), 1/3)\n    \n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    scan_age = solutions[x]\n    ted_age = solutions[y]\n    \n    # Let z be the number of years ago when the ratio of their ages was 1:9\n    z = symbols('z')\n    \n    # The ratio of their ages z years ago was 1:9\n    equation3 = Eq((x-z)/(y-z), 1/9)\n    \n    # Solve the equation for z using the found values for x and y\n    solution_z = solve(equation3.subs({x: scan_age, y: ted_age}), z)\n    \n    return solution_z[0]\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    mollies = 276\n    goldfish = mollies // 2\n    guppies = goldfish // 2\n\n    return mollies - guppies\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    climbed = 0\n    day = 0\n    night_fall = 0\n\n    while climbed < height:\n        day += 1\n        climbed += 10  # climbs up during the day\n        if climbed >= height:\n            break\n        night_fall += 1\n        climbed -= night_fall  # slides down during the night\n\n    return day\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_factor = 2 / 3  # cm per meter\n    real_tree_height_m = 12  # meters\n    # Convert real tree height to cm by multiplying by 100\n    real_tree_height_cm = real_tree_height_m * 100 \n    # Calculate model tree height in cm\n    model_tree_height = scale_factor * real_tree_height_cm\n    return model_tree_height\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the variable quantities\n    foldable, non_foldable = symbols('foldable non_foldable')\n\n    # The total number of bicycles before any were sold\n    total_bicycles = 476  \n    \n    # After 208 bicycles were sold\n    bicycles_sold = 208  \n\n    # Equations based on the problem statement\n    equation1 = Eq(foldable + non_foldable, total_bicycles)  \n    equation2 = Eq(non_foldable - (5/9) * non_foldable + foldable - (4/7) * foldable, bicycles_sold)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (foldable, non_foldable))\n\n    # Foldable bicycles sold\n    foldable_sold = solutions[foldable] - (4/7) * solutions[foldable]\n\n    return int(foldable_sold)\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # According to the Pigeonhole Principle, to guarantee that one student gets at least 3 candies,\n    # Valeria needs to prepare enough candies such that even if 19 students get 2 candies each,\n    # there'll be enough left for at least one student to get 3 candies.\n    # Hence, for 19 students to get 2 candies each, she needs to prepare 19 * 2 candies.\n    # Then she needs 3 more candies for the one student.\n    # So the minimum number of candies Valeria should prepare is 19 * 2 + 3.\n\n    candies_for_19 = 19 * 2\n    candies_for_1 = 3  # At least 3 candies for 1 student\n    min_candies = candies_for_19 + candies_for_1\n\n    return min_candies\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining = 6000\n    used_fraction = 5/8\n    remaining_fraction = 1 - used_fraction\n\n    original_amount = remaining / remaining_fraction\n\n    return original_amount\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_marks = 100\n    correct_marks = 8\n    wrong_marks = -4\n    total_questions = 20\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_marks + wrong_answers * wrong_marks == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    from math import prod\n\n    # Prime factorization of the number 20: 2^2 * 5\n    prime_factors = [2, 5]\n\n    # Exponents in the prime factorization + 1 (to include 0th power)\n    exponents = [3, 2]\n\n    # All combinations of factors are sums of the form (2^0 + 2^1 + 2^2) * (5^0 + 5^1)\n    factor_sums = [(2**i for i in range(exponents[0])), (5**i for i in range(exponents[1]))]\n\n    # Sum of all factors is the product of sums of powers of all prime factors\n    ans = prod(sum(powers) for powers in factor_sums)\n\n    return ans\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    return 0.60 * 765\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    sum = 0\n    for i in range(1, 20, 2):\n        sum += i\n    return sum\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    ans = 1741 - 968\n    return ans\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    # If Jamie planted 30 flowers, and there are 3 flowers between every 2 lamp posts,\n    # to find the number of intervals between lamp posts, we divide the total flowers by 3.\n    num_intervals = 30 // 3\n\n    # Since there are that many intervals over a 50m road, the distance between every 2 lamp posts\n    # is the road length divided by the number of intervals.\n    distance_between_lamp_posts = 50 / (num_intervals + 1)\n\n    return distance_between_lamp_posts\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    ans = 3 * 126\n    return ans\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # The worst-case scenario for pulling out a pair of white socks is:\n    # Yohan pulls out all red and black socks first before getting a single white pair.\n    # This means he needs to pull out all 10 red and 10 black socks.\n    red_socks = 10\n    black_socks = 10\n    # After taking all red and black socks, the next two socks he takes have to be white.\n    # to form a pair of white socks.\n    white_pair = 2\n\n    # The number of socks he must take to guarantee a pair of white socks is the sum of the above numbers\n    max_socks = red_socks + black_socks + white_pair\n\n    return max_socks\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    return 8 - 17\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    ans = 48 * (5/4)\n    return ans\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    # Books on the left of the favorite book\n    left_books = 6\n    # Favorite book is the 14th from the right\n    right_books = 14 - 1  # Subtracting the favorite book itself\n\n    # Total books are the sum of books to the left, to the right, and the favorite book\n    total_books = left_books + right_books + 1  # Adding the favorite book itself\n\n    return total_books\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1 / 4\n    position = 5\n\n    # Use the formula for geometric sequence: a_n = a_1 * r^(n-1)\n    fifth_number = first_number * (ratio ** (position - 1))\n\n    return fifth_number\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    # Calculate the number of trees by dividing the road length by the tree spacing\n    # Since trees are planted at both ends, add 1 to include the last tree\n    number_of_trees = (road_length // tree_spacing) + 1\n\n    return number_of_trees\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    ans = (13.8 * 10**7) * (5.4 * 10**-12)\n    return ans\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets_given = 30 - 6\n    sweets_per_friend = total_sweets_given // 6\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # Calculate the work done by P in one hour\n    work_done_by_p_per_hour = 1 / (12 * 8)\n    # Calculate the work done by Q in one hour\n    work_done_by_q_per_hour = 1 / (8 * 10)\n\n    # Combined work done by P and Q in one hour, working 8 hours a day\n    total_work_per_day = 8 * (work_done_by_p_per_hour + work_done_by_q_per_hour)\n\n    # Number of days needed to complete the job if P and Q work together\n    num_days = 1 / total_work_per_day\n\n    return num_days\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    # Each edge of the lawn can host rosebushes that are spaced 3 meters from each other\n    # We need to consider the rosebushes away 1.5 meters from each corner and calculate the available space\n    side_length = 12 - 2 * 1.5\n    bush_spacing = 3\n    \n    # Calculate number of rosebushes that can fit on one side (the number has to be an integer)\n    bushes_per_side = side_length // bush_spacing\n    \n    # Since we have 4 sides, we multiply the number of bushes per side by 4 to get the total\n    total_bushes = bushes_per_side * 4\n    return int(total_bushes)\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_van_1 = 132  # Speed of the first van in km/h\n    speed_van_2 = 78   # Speed of the second van in km/h\n    time_hours = 8     # Time in hours\n\n    # Calculate distance traveled by each van\n    distance_van_1 = speed_van_1 * time_hours\n    distance_van_2 = speed_van_2 * time_hours\n\n    # Total distance between the vans after 8 hours\n    total_distance = distance_van_1 + distance_van_2\n\n    return total_distance\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Distributing one apple to each child as they must get at least one\n    total_apples = 19 - 5\n    \n    # Sorting rest of the apples among four children in a strictly increasing number of apples\n    # Let's assume the child with the maximum apples gets x apples \n    # Then we have the sequence as 1, 2, 3, (4), x for apple distribution to children where (4) might or might not be included based on x\n\n    # We start with the child with the maximum possible apples, which is total_apples when others get 1 apple each\n    # Then we reduce the number if we don't meet our condition of having unique amounts for each child\n    x = total_apples\n    while True:\n        # Remaining apples after giving x apples to the fifth child\n        remaining_apples = total_apples - x\n        # The possible apples that could be given to four children sorted, ensuring unique distribution\n        # We start from 1 as each child must get at least one apple\n        possible_distribution = sorted(list(range(1, remaining_apples + 1)))\n\n        if len(possible_distribution) < 4:  # If we don't have enough apples to distribute uniquely among 4 children\n            return x  # Return the current maximum as this is the highest number of apples we can allocate to one child\n\n        # We check if the consecutive differences are all 1\n        # This is to ensure no two children get the same number of apples\n        if all(possible_distribution[i] + 1 == possible_distribution[i + 1] for i in range(len(possible_distribution) - 1)):\n            return x  # If we have a unique distribution for four children, we return the fifth child's apple count\n\n        x -= 1  # Decrease the apples for the child with maximum apples to try and find a unique distribution\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_masks = 360\n    completed_percentage = 0.60\n    total_masks = remaining_masks / (1 - completed_percentage)\n    return int(total_masks)\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1 / 2) * (5 / 2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n\n    equation = Eq(score - 30, (score / 2) + 10)\n\n    original_score = solve(equation, score)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    ans = sum(numbers) / len(numbers)\n    return ans\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    def count_factors(n):\n        count = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    # Since the farmer wants an even number of bags, we only count even factors of 78\n    def count_even_factors(n):\n        even_count = 0\n        for i in range(2, n+1, 2):\n            if n % i == 0:\n                even_count += 1\n        return even_count\n\n    ans = count_even_factors(78)\n    return ans\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # 9 rabbits = 3 goats\n    rabbits_per_goat = 9 / 3\n    # 2 goats = 4 cows\n    goats_per_cow = 2 / 4\n    # rabbits_per_cow = rabbits_per_goat / goats_per_cow\n    rabbits_per_cow = rabbits_per_goat / goats_per_cow\n    # How many rabbits can 2 cows be exchanged for?\n    # rabbits for 2 cows = rabbits_per_cow * 2\n    ans = rabbits_per_cow * 2\n    return ans\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    total_score = 168\n    \n    # Assume all attempted questions were correct\n    # total_marks_if_all_correct = 4 * attempted_questions\n    # Since she gets 4 marks for correct and loses 1 mark for wrong answers\n    # every wrong answer reduces the score by 5 marks from the total_marks_if_all_correct\n    # Let x be the number of wrong answers then,\n    # total_score = (total_marks_if_all_correct - 5 * wrong_answers)\n    \n    total_marks_if_all_correct = 4 * attempted_questions\n    wrong_answers = (total_marks_if_all_correct - total_score) // 5\n    \n    correct_answers = attempted_questions - wrong_answers\n    \n    return correct_answers\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    num_rows = 10\n\n    # Using the formula for the sum of an arithmetic series: n/2 * (2a + (n - 1)d)\n    total_seats = num_rows / 2 * (2 * first_term + (num_rows - 1) * common_difference)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 5 * a + 8\n\n    result = custom_operation(10, 9)\n    result = custom_operation(result, 8)\n    result = custom_operation(result, 7)\n    result = custom_operation(result, 6)\n    result = custom_operation(result, 5)\n    ans = custom_operation(result, 4)\n\n    return ans\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls = 72\n    boys_percentage = 40\n    total_percentage = 100  # Since 100% is the total which includes both boys and girls.\n    \n    # Calculate the percentage of girls\n    girls_percentage = total_percentage - boys_percentage\n    \n    # Calculate the total number of children based on the number of girls and their percentage\n    total_children = (girls * total_percentage) / girls_percentage\n    \n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    strawberries_eaten = 73\n    strawberries_bought = 52\n\n    final_strawberries = (initial_strawberries - strawberries_eaten) + strawberries_bought\n\n    return final_strawberries\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Let the original number of pencils be 4x and pens be 5x\n    # After taking out a pen and replacing it with a pencil:\n    # Pencils become (4x + 1) and pens become (5x - 1)\n    # The new ratio is 7:8, so we have the equation (4x+1)/(5x-1) = 7/8\n    # Solving for x will give us the original number of pencils and pens\n    # Then we can add them to get the total number\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((4*x + 1) / (5*x - 1), 7/8)\n\n    solution_x = solve(equation, x)\n\n    # Since x must be a positive integer, we need to check which solution is valid\n    x_value = next(x_val for x_val in solution_x if x_val.is_real and x_val > 0)\n\n    total_pencils_and_pens = 4 * x_value + 5 * x_value\n\n    return int(total_pencils_and_pens)\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    # Let's assume Mike bought the books for $100\n    cost_price = 100\n    # Planned profit is 60%\n    planned_profit = 0.60 * cost_price\n    # Actual total profit is 80% of the planned profit\n    actual_profit = 0.80 * planned_profit\n    # On the first day, he sold 70% of the books at a profit of 60%\n    first_day_sales = 0.70 * cost_price * (1 + 0.60)\n    # Let's calculate the sales on the second day\n    second_day_sales = cost_price + actual_profit - first_day_sales\n    # The remaining books constitute 30% of the total books\n    remaining_books_cost = 0.30 * cost_price\n    # We need to find the discount rate (let's denote it as \"discount_rate\")\n    # So, the second day sales would be the remaining books sold at (1 - discount_rate)\n    # Hence, the equation will be: second_day_sales = remaining_books_cost * (1 - discount_rate)\n    discount_rate = 1 - (second_day_sales / remaining_books_cost)\n\n    return discount_rate * 100  # Convert to percentage\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    pages_missing = range(15, 35)\n\n    # calculate the number of sheets missing\n    # assuming that the newspaper is printed on both sides,\n    # so one sheet contains two consecutive page numbers.\n    sheets_missing = len(pages_missing) / 2\n\n    return int(sheets_missing)\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of each puff\n    tuna_puff, curry_puff = symbols('tuna_puff curry_puff')\n\n    # Construct equations based on the problem statement\n    equation1 = Eq(12 * tuna_puff + 19 * curry_puff, 39.60)\n    equation2 = Eq(curry_puff, tuna_puff - 0.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tuna_puff, curry_puff))\n\n    # Return the price of a tuna puff\n    return solutions[tuna_puff]\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = (4 * 8) + (4 * 17)\n    return ans\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]  # Given digits\n    odd_digits = [1, 3]  # Only 1 and 3 are odd and can be used as the second digit\n    count = 0\n\n    # Loop through all possible pairs of digits\n    for tens_digit in digits:\n        for ones_digit in odd_digits:\n            if tens_digit != ones_digit and tens_digit != 0:  # To form a valid two-digit number\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n    boys = symbols('boys')\n    \n    # girls can be expressed in terms of boys: girls = total_children - boys\n    balloons_equation = Eq(2 * boys + 4 * (total_children - boys), total_balloons)\n\n    # Solve the equation\n    solutions = solve(balloons_equation, boys)\n\n    # Return the number of boys\n    return solutions[0]\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    return 25 - 10 + 1\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) / 4\n    return n\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    # Using a loop to calculate the product of the fractions\n    result = 1  # Start with 1 since we are calculating a product\n    for i in range(3, 21, 2):  # Start at 3, up to but not including 21, step by 2\n        result *= (1 + 2/i)\n    return result\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_needed_cm = 400 * 85            # Total length in cm.\n    roll_length_cm = 20 * 100              # Roll length in cm (1m = 100cm).\n    rolls_needed = string_needed_cm / roll_length_cm\n    return -(-rolls_needed // 1)           # Round up to the nearest whole number.\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of animals be x\n    # Let the number of goats be y\n    x, y = symbols('x y')\n\n    # 65% of the total animals were cows, so the rest (35%) were goats.\n    # Initial number of cows is 65% of x\n    # Initial number of goats is 35% of x, which is also y\n    eq1 = Eq(0.35 * x, y)\n\n    # When 240 animals are added, cows becomes 85% of the new total\n    # The new number of goats is twice the initial, so it becomes 2y\n    # new_total is the original number of animals plus the 240 new animals\n    eq2 = Eq(x + 240, (x + 2*y))\n\n    # Now we have two equations with two variables\n    solutions = solve((eq1, eq2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (-cookies) % 5 == -3:\n            return cookies\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for current ages\n    john_current_age, emma_current_age = symbols('john_current_age emma_current_age')\n    \n    # Relationship between the ages in 3 years\n    age_sum_future = Eq(john_current_age + 3 + emma_current_age + 3, 27)\n    \n    # John is 7 years older than Emma\n    john_older = Eq(john_current_age, emma_current_age + 7)\n    \n    # Solve the system of equations\n    solutions = solve((age_sum_future, john_older), (john_current_age, emma_current_age))\n    \n    # Extract the solution for Emma's current age\n    emma_age = solutions[emma_current_age]\n    \n    return emma_age\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    last_digit_2s = (2 ** 2017) % 10\n    last_digit_3s = (3 ** 2017) % 10\n    ans = (last_digit_2s * last_digit_3s) % 10\n    return ans\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    n1 = 7\n    a1 = 57\n    n2 = 15\n    a2 = 89\n\n    common_difference = (a2 - a1) / (n2 - n1)\n\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time (in minutes) David walks at the increased speed\n    t = symbols('t')\n\n    # Distance covered in the first 10 minutes at 150 m/minute\n    distance_first_part = 150 * 10\n\n    # Distance covered in the second part at (150 + 50) m/minute\n    distance_second_part = (150 + 50) * t\n\n    # Total distance equation\n    total_distance_eq = Eq(distance_first_part + distance_second_part, 3700)\n\n    # Solve for time walked at the increased speed\n    t_solution = solve(total_distance_eq, t)\n\n    # Total time spent is 10 minutes plus the time spent walking at the increased speed\n    total_time = 10 + t_solution[0]\n\n    return total_time\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    initial_sweets = 240\n    sweets_bought_per_week = 45\n    sweets_eaten_per_week = 60\n    remaining_sweets_target = 150\n\n    sweets_change_per_week = sweets_bought_per_week - sweets_eaten_per_week\n    weeks_needed = (initial_sweets - remaining_sweets_target) / sweets_change_per_week\n\n    return weeks_needed\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n    equation1 = Eq(2 * apple + orange, 40)\n    equation2 = Eq(apple + 2 * orange, 35)\n    \n    solutions = solve((equation1, equation2), (apple, orange))\n    \n    carrie_cost = solutions[apple] + solutions[orange]\n    \n    return carrie_cost\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "from itertools import permutations\n\ndef solution():\n    # Since the number is divisible by 9, the sum of its digits must be divisible by 9\n    # We know the sum of given fixed digits: 4 + 7 + 1 + 9 = 21\n    fixed_digits_sum = 21\n    # We need to find A + B + C such that the total sum is divisible by 9\n    # The sum of all digits (1-9) is 45, so the rest of digits (2, 3, 5, 6, 8) sum is 24\n    remaining_digits = [2, 3, 5, 6, 8]\n    \n    for perm in permutations(remaining_digits):\n        # A, B, C are elements of the permutation\n        A, B, C = perm\n        # If the sum of digits is divisible by 9, this is a valid number\n        if (fixed_digits_sum + A + B + C) % 9 == 0:\n            ans = A + B + C\n            # We construct the number from the digits and the fixed parts\n            number = int(f\"47{A}1{B}9{C}\")\n            return ans, number\n\nans, number = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    for sweets in range(1, 1000):\n        if all(sweets % children == 2 for children in [3, 4, 5, 6]):\n            return sweets\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    # Number of choices for each digit place (hundreds, tens, ones) is 3\n    choices_per_place = 3\n\n    # Since each digit can be used more than once, the total number of \n    # different three-digit numbers is 3 * 3 * 3\n    total_numbers = choices_per_place ** 3\n\n    return total_numbers\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    # Applying the Inclusion-Exclusion Principle\n    both_classes = sport_class_students + reading_class_students - total_students\n    \n    return both_classes\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    # Define the equation based on the problem statement\n    # Let x be Mike's salary\n    # Donation: x/4\n    # Food: 5/6 * remainder = 5/6 * (x - x/4) = 5/6 * (3x/4)\n    # Savings: x - (x/4 + 5/6 * (3x/4))\n    # Food is £78 more than donation: 5/6 * (3x/4) - x/4 = 78\n    \n    # Now we solve for x\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 5/6 * (3*x/4) - x/4 - 78\n    salary = solve(equation, x)[0]\n    \n    return salary\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    return 581 - 229\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n\n    total_rackets_price = 2 * racket_price\n    remaining_money = 140 - total_rackets_price\n\n    num_balls = remaining_money // ball_price\n\n    return int(num_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Worst case scenario to get all the same colored balls first\n    max_same_color_balls = 4\n    # Draw 1 more to ensure at least two different colors\n    at_least_two_diff = max_same_color_balls + 1\n    # Draw 1 more to ensure the third different color\n    at_least_three_diff = at_least_two_diff + 1\n    \n    return at_least_three_diff\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    heinz_gain_per_week = 4\n    jed_chocolates = 137\n    jed_loss_per_week = 6\n\n    week = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_gain_per_week\n        jed_chocolates -= jed_loss_per_week\n        week += 1\n\n    return week\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    durians_left = total_durians - sold_durians\n    \n    return int(durians_left)\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # There are 12 choices for the right-angle vertex.\n    # After choosing the right-angle vertex, there are 5 choices for the points on one side\n    # and 5 choices for the points on the other side (5 on each side, not counting the adjacent points\n    # because they form a line, not a right-angled triangle).\n    # So for each right-angle vertex, there are 5 * 5 ways to choose the remaining two points.\n    right_angle_triangles = 12 * 5 * 5\n\n    return right_angle_triangles\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n    \n    return donuts_left\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = (35 / 5 + 1) / 6\n    return c\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weight of one box of apples and one box of oranges\n    box_of_apples, box_of_oranges = symbols('box_of_apples box_of_oranges')\n  \n    # Set up the equations based on the problem statement\n    equation1 = Eq(3 * box_of_apples + 5 * box_of_oranges, 270)\n    equation2 = Eq(3 * box_of_apples + 7 * box_of_oranges, 342)\n\n    # Solve the equations for the weights of one box of apples and one box of oranges\n    solutions = solve((equation1, equation2), (box_of_apples, box_of_oranges))\n\n    return solutions\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    total_debt = 2.6\n    months_needed = total_debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # Since the tiger is in the exact middle as 11th, it means there are 10 animals before and 10 animals after him.\n    total_animals = (11 - 1) + 1 + (11 - 1)\n    return total_animals\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for x in range(100, 1000):\n        if sum(int(digit) for digit in str(x)) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    result = 36.42 * 1000\n    return result\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Calculate the common number of roses in the first 3 vases\n    initial_total_roses = 24\n    num_vases_first = 3\n    roses_per_vase_first = initial_total_roses // num_vases_first\n\n    # Calculate the total number of vases after adding another four vases\n    num_vases_second = 4\n    total_vases = num_vases_first + num_vases_second\n\n    # Calculate the total number of roses by multiplying roses per vase and the total number of vases\n    total_roses = roses_per_vase_first * total_vases\n\n    return total_roses\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    num = 2405 + 1827\n    from num2words import num2words\n    return num2words(num)\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 0.50  # in dollars\n    mamee_cost = haribo_cost - 0.30  # Mamee costs 30¢ less than Haribo\n    big_jelly_cost = 6 * mamee_cost  # Big packet of jelly costs 6 times as much as Mamee\n    return big_jelly_cost\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    halfway = (-18 + (-2)) / 2\n    return halfway\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_candies = 2\n    cherry_candies = 7\n    mint_candies = 1\n\n    # Will hates mint candy so we exclude it from the count\n    max_candies_will_can_eat = lemon_candies + cherry_candies\n\n    return max_candies_will_can_eat\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    return 10.256 + 9.2 - 7.51\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n\n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    for num in range(1, 80):\n        if num % 2 == 1 and num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(10):\n            if (10 * A + B) % 2 == 0:\n                for C in range(10):\n                    if (10 * B + C) % 3 == 0 and (100 * A + 10 * B + C) % 9 == 0:\n                        for D in range(10):\n                            if (10 * C + D) % 5 == 0 and (100 * B + 10 * C + D) % 11 == 0:\n                                if len({A, B, C, D}) == 4:\n                                    return 1000 * A + 100 * B + 10 * C + D\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    games_played = num_teachers - 1  # Since every game eliminates one teacher, and we need to eliminate 15 to get a winner\n\n    return games_played\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 6, x + 16)\n\n    solution_dict = solve(equation, x)\n\n    return solution_dict[x]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    height = 21\n    height_ratio = 3\n    width_ratio = 4\n\n    width = (width_ratio / height_ratio) * height\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    ans = (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n    return ans\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurring_digits = [4, 2, 8, 5, 7, 1]\n    total_digits = 58\n    digit_sum = 0\n    \n    for i in range(total_digits):\n        digit_sum += recurring_digits[i % len(recurring_digits)]\n    \n    return digit_sum\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of the children\n    youngest_daughter, older_daughter, younger_son, older_son = symbols('youngest_daughter older_daughter younger_son older_son', integer=True)\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(younger_son, older_daughter * 2)  # younger son is twice the age of the older daughter\n    equation2 = Eq(older_son, younger_son + 3)       # two sons were born three years apart\n    equation3 = Eq(older_daughter, youngest_daughter + 2)  # two daughters were born two years apart\n    equation4 = Eq(youngest_daughter + older_daughter + younger_son + older_son, 55)  # sum of children's ages is 55\n    \n    # Range constraints (since we're not dealing with negative ages)\n    constraints = (\n        youngest_daughter > 0,\n        older_daughter > 0,\n        younger_son > 0,\n        older_son > 0\n    )\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4) + constraints, (youngest_daughter, older_daughter, younger_son, older_son), dict=True)\n\n    # Get the age of the youngest child from the solutions\n    for solution in solutions:\n        if all(value >= 0 for value in solution.values()):\n            youngest_child_age = solution[youngest_daughter]\n            return youngest_child_age\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "def solution():\n    from math import factorial as f\n    \n    total_books = 3 + 4 + 2 + 2\n    ways_to_arrange = f(total_books) // (f(3) * f(4) * f(2) * f(2))\n    \n    return ways_to_arrange\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wallet, watch = symbols('wallet watch')\n\n    # 2 wallets + 3 watches = $433\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n\n    # 5 wallets + 4 watches = $701\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_string_length = 13\n    nick_string_extra = 25\n    nicks_string_length = toms_string_length + nick_string_extra\n    difference = nicks_string_length - toms_string_length\n    return difference\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken = 18\n    total_students = 50\n    percentage = (students_choosing_chicken / total_students) * 100\n    return percentage\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    digits = [1, 3, 6]\n    numbers_set = set()\n\n    for a in digits:\n        for b in digits:\n            for c in digits:\n                number = a*100 + b*10 + c\n                numbers_set.add(number)\n\n    return len(numbers_set)\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution to exchange between A and B\n    x = symbols('x')\n\n    # In the end, both A and B will have the same concentration, so\n    # (amount of sugar in A + amount of sugar added from B - amount of sugar removed to B) /\n    # (total solution in A after exchange) = \n    # (amount of sugar in B + amount of sugar added from A - amount of sugar removed to A) /\n    # (total solution in B after exchange)\n    \n    # Amount of sugar in A originally is 11% of 50g\n    # Amount of sugar in B originally is 47% of 50g\n    # After exchanging x grams, the solution in A would be 50g and in B would still be 50g \n    # (since we're just exchanging the solutions), but the concentration would change.\n    \n    # Setting up the equation for the equality of the concentration in A and B after exchange:\n    equation = Eq((0.11 * 50 - 0.11 * x + 0.47 * x) / 50,\n                  (0.47 * 50 - 0.47 * x + 0.11 * x) / 50)\n\n    # Solving the equation for x\n    solutions = solve(equation, x)\n\n    # Returning the solution which should be the amount of solution that can be exchanged\n    # The valid solution should be less than 50g and non-negative\n    return next(sol for sol in solutions if sol >= 0 and sol <= 50)\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # Convert plot length from metres to centimetres\n    distance_apart_cm = 40     # Distance between cauliflowers in centimetres\n    first_cauliflower_cm = 20  # Distance of the first cauliflower from the end in centimetres\n\n    remaining_length_cm = plot_length_cm - first_cauliflower_cm  # Remaining length after planting the first cauliflower\n    number_of_cauliflowers = remaining_length_cm // distance_apart_cm  # Number of cauliflowers that can be planted\n\n    # Since the first cauliflower is included, we add 1 to the number of cauliflowers calculated\n    return number_of_cauliflowers + 1\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    ans = (75 - 3) / 8\n    return ans\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    return 250 * 0.3\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1+1, 15):  # Ensure different numbers by starting from x1 + 1\n            for x3 in range(x2+1, 15):  # Start from x2 + 1\n                x4 = 15 - x1 - x2 - x3\n                if x4 > x3:  # Ensure x4 is different and greater than x3\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    prime_count = 0\n    prime_numbers = []\n\n    for num in range(2, 51):\n        if isprime(num) and isprime(num + 6) and num + 6 < 51:\n            prime_count += 1\n            prime_numbers.append(num)\n        if isprime(num) and isprime(num - 6) and num - 6 > 1:\n            prime_count += 1\n            prime_numbers.append(num)\n    \n    prime_numbers = list(set(prime_numbers))  # Remove duplicates\n    prime_count = len(prime_numbers)\n    \n    return prime_count, prime_numbers\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7 + 64/100  # Convert 64 cm to metres and add\n    total_metres -= (2 + 7/100)  # Convert 7 cm to metres and subtract\n    return total_metres\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the cost of one banana and one pear\n    banana, pear = symbols('banana pear')\n\n    # Equations based on the problem statement\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    # Returning the cost of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    a, b = 1, 2\n    while True:\n        a, b = b, a + b\n        if a == 21:\n            return b\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for black, white, and grey rabbits.\n    black, white, grey = symbols('black white grey')\n\n    # Define the equations based on the problem statement.\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    # Use sympy's solve function to solve the equations.\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earning = 70\n    num_days_worked = 6  # from Monday to Saturday\n\n    total_earnings = average_daily_earning * num_days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # The sequence follows a pattern where each number is 2 times the previous one.\n    # This is essentially a geometric progression with the common ratio 2.\n    # The nth term of a geometric sequence can be found by the formula: a * r^(n-1)\n    # where a is the first term and r is the common ratio.\n    \n    # For the 20th and 17th terms:\n    a = 1  # first term\n    r = 2  # common ratio\n    n_20 = a * r**(20-1)  # calculating the 20th term\n    n_17 = a * r**(17-1)  # calculating the 17th term\n    \n    # Divide the 20th term by the 17th term\n    result = n_20 / n_17\n    \n    return result\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    # The sum of two positive integers is 35\n    sum_of_numbers = 35\n    max_product = 0\n    \n    # Loop through all possible integer splits where the second integer is larger\n    for first_number in range(1, sum_of_numbers // 2 + 1):\n        second_number = sum_of_numbers - first_number\n        product = first_number * second_number\n        max_product = max(max_product, product)\n    \n    return max_product\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Average number of books for Alice, Becky, and Crystal\n    average_abc = 60\n    # Total number of books for Alice, Becky, and Crystal\n    total_abc = average_abc * 3\n\n    # New average when Dennis is included\n    new_average = average_abc + 10\n    # Total number of books for Alice, Becky, Crystal, and Dennis\n    total_abcd = new_average * 4\n\n    # Dennis's books are the difference between the total for all four and the total for the first three\n    dennis_books = total_abcd - total_abc\n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    total_distance = 16\n    net_distance = day_distance - night_distance\n\n    days = (total_distance - day_distance) // net_distance + 1\n    \n    return days\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import primerange\n\n    # Smallest two-digit prime number\n    smallest_prime = list(primerange(10, 100))[0]\n    \n    # Largest two-digit square number\n    largest_square = 9 ** 2\n    \n    # Product of smallest two-digit prime and largest two-digit square\n    product = smallest_prime * largest_square\n    \n    return product\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mike_height = (john_height / ratio_john) * ratio_mike\n\n    return mike_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    from sympy import isprime\n    return isprime(233)\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    # The distance between the 1st and 4th flag is the distance of 3 intervals\n    distance_between_1st_and_4th = 9\n    \n    # To find the distance between 2 flags, divide by the number of intervals\n    distance_between_2_flags = distance_between_1st_and_4th / 3\n\n    # The distance between the 1st and 9th flag is the distance of 8 intervals\n    distance_between_1st_and_9th = distance_between_2_flags * 8\n\n    return distance_between_1st_and_9th\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_ship_still_water = 22\n    speed_current = 3\n    distance = 200\n\n    speed_downstream = speed_ship_still_water + speed_current\n    time_downstream = distance / speed_downstream\n\n    return time_downstream\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, peaches = symbols('A B peaches')\n\n    equation1 = Eq(peaches, 5 * A + 10)\n    equation2 = Eq(peaches + 2, 8 * B)\n    equation3 = Eq(A, B + 3)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    # Given:\n    # - The digit 7 is in the hundredths place.\n    # - The digit 6 is in the tenths place.\n    # - The ones place has a value of 4.\n    \n    # Construct the number with the given information\n    number = 4 + 0.6 + 0.07\n\n    return number\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    # Cost of a pencil and a pen\n    pencil_cost = 2\n    pen_cost = 4\n\n    # Find the ratio of pen cost to pencil cost\n    ratio = pen_cost / pencil_cost\n\n    return ratio\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        total_points = correct * 6 - incorrect * 2\n        if total_points == 36:\n            return correct\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    result = 888 * 999\n    last_two_digits = result % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n\n    total_ways = trains + buses + flights\n\n    return total_ways\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import symbols, solveset, S\n    \n    h = symbols('h')\n    # Since 28512/h must be a cube number, we can take the cube root\n    # of 28512 and find factors of this value that when multiplied by h\n    # are also cube numbers. h would then be the quotient of 28512 by one\n    # of these cube factors.\n    \n    cube_root_28512 = 28512 ** (1/3)\n    \n    # Find the largest cube factor of 28512\n    for i in range(int(cube_root_28512), 0, -1):\n        if 28512 % (i ** 3) == 0:\n            return 28512 // (i ** 3)\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Bart needs to guarantee he gets 2 M&Ms of different colors.\n    # Worst case scenario: he picks all M&Ms of one color before getting a different color.\n\n    # The largest amount of a single color is brown M&Ms - 5 chips.\n    # Bart would need to pick all 5 brown M&Ms and at least 1 more chip to guarantee a different color.\n\n    # Therefore, he needs to pick 5 (all browns) + 1 (guaranteed different color chip) M&Ms.\n    return 5 + 1\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Calculate the total number of combinations without the restriction\n    total = factorial(10)\n    \n    # Calculate the number of combinations when the performances are considered indistinguishable\n    # This uses the multinomial coefficient (7 dancing, 3 playing a sketch)\n    indistinguishable = factorial(10) // (factorial(7) * factorial(3))\n    \n    # Since we need at least one dance between every two plays,\n    # we consider the distribution of the 3 play performances amongst the 7+1 possible positions\n    # The +1 comes from considering the positions between dances and at the ends\n    places_for_plays = 8\n    \n    # We can place the 3 plays in the 8 positions in C(8,3) ways\n    places_for_plays_combinations = factorial(places_for_plays) // (factorial(3) * factorial(places_for_plays - 3))\n    \n    # Calculate the total number of arrangements taking into account the restriction\n    ans = places_for_plays_combinations * factorial(7)  # 7! is for permutations of dance performances\n\n    return ans\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = 31415927\n    c = 31415925\n\n    ans = (a**2) - (b*c)\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    odds = [1, 3, 5, 7, 9]\n    count = len(odds) * len(odds) * len(odds)\n    return count\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    father_handshakes = (10-1) * 10 * 3  # Each father shakes hands with all 3 members of the other 9 families\n    mother_handshakes = (10-1) * 10 * 2  # Each mother shakes hands with 2 members (father and child) of the other 9 families\n    child_handshakes = (10-1) * 10 * 2   # Each child shakes hands with 2 members (father and mother) of the other 9 families\n    total_handshakes = father_handshakes + mother_handshakes + child_handshakes  # Total handshakes by summing up all the handshakes\n    return total_handshakes\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_sequence = \"85274\"\n    position = (79 - 1) % len(recurring_sequence)  # We subtract 1 because list indices start at 0\n    ans = int(recurring_sequence[position])\n    return ans\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    for num in range(999, 99, -1):\n        if (num + 2009) % 17 == 0 and (num + 2009) % 19 == 0:\n            return num\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for first_ticket in range(999):\n        second_ticket = first_ticket + 1\n        if first_ticket + second_ticket == 777:\n            return second_ticket + 1\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    # Calculate the expected sum of the sequence\n    expected_sum = sum(range(1, 63))\n\n    # Tim's sum is given\n    tims_sum = 1939\n\n    # The missing page number is the difference\n    missing_page = expected_sum - tims_sum\n\n    return missing_page\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # Number of marbles of each color\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # To ensure 4 different colored marbles, Jane has to draw all the marbles of the color with the greatest number\n    # After she has drawn all of those, she will need to draw 3 more marbles (1 of each of the remaining colors)\n    worst_case = max(red, green, blue, orange)  # The most of one color to ensure we don't have 4 of this color\n    return worst_case + 3  # Adding 3 ensures we get the remaining 3 colors\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    dp = [0] * 11\n    dp[0] = 1  # There is 1 way to stand at the bottom without climbing\n    for i in range(1, 11):\n        if i != 5:  # Skip the 5th step because it is muddy\n            for j in range(1, 4):  # Can take 1, 2, or 3 steps at a time\n                if i - j >= 0:\n                    dp[i] += dp[i - j]\n\n    return dp[10]  # The number of ways to reach the 10th step\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    ans = 5 / 16\n    return ans\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill_amount = 82\n    free_hours = 40\n    first_segment_rate = 5\n    first_segment_hours = 10\n    second_segment_rate = 8\n    second_segment_hours = 10\n    third_segment_rate = 15\n\n    # Calculate the total cost for the first segment (40-50 hours)\n    cost_first_segment = first_segment_rate * first_segment_hours\n\n    # To find the hours if the bill is <= cost_first_segment\n    if bill_amount <= cost_first_segment:\n        hours_parked = free_hours + (bill_amount / first_segment_rate)\n        return hours_parked\n\n    # Subtract the cost of the first segment from the bill\n    bill_amount -= cost_first_segment\n\n    # Calculate the total cost for the second segment (50-60 hours)\n    cost_second_segment = second_segment_rate * second_segment_hours\n\n    # To find the hours if the bill is <= (cost_first_segment + cost_second_segment)\n    if bill_amount <= cost_second_segment:\n        hours_parked = free_hours + first_segment_hours + (bill_amount / second_segment_rate)\n        return hours_parked\n\n    # Subtract the cost of the second segment from the bill\n    bill_amount -= cost_second_segment\n\n    # Calculate the hours parked based on the third segment rate\n    hours_parked = free_hours + first_segment_hours + second_segment_hours + (bill_amount / third_segment_rate)\n\n    return hours_parked\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 5\n\n    car_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return car_value\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_a_week = 7\n    total_earnings = average_daily_earnings * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    number = 3016\n    ans = number - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # Five odd numbers means the smallest sum of the first four odd numbers would be 1+3+5+7 = 16\n    # To maximize the fifth number, we need to minimize the sum of the first four numbers.\n    # Since they must be distinct and positive, we can use the smallest odd numbers.\n    total_sum = 85\n    smallest_odd_sum = 1 + 3 + 5 + 7\n    largest_number = total_sum - smallest_odd_sum\n\n    return largest_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    return 23.2 - 14.7\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship = 88  # speed of the ship in still water in km/h\n    speed_current = 12  # speed of the current in km/h\n    distance = 500  # distance to travel downstream in km\n\n    # Total speed downstream is sum of the speed of the ship and the speed of the current\n    total_speed_downstream = speed_ship + speed_current\n\n    # Time taken to travel downstream is distance divided by speed\n    time_taken = distance / total_speed_downstream\n\n    return time_taken\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes_to_seconds = 2.5 * 60\n    return int(minutes_to_seconds)\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n\n    # Define the equation based on the problem statement\n    tax_equation = Eq(T / 100 * 30000 + (T + 3) / 100 * (income - 30000), (T + 1) / 100 * income)\n\n    # We know that income is greater than $30,000 because of the second tax bracket\n    # We solve for T and income considering income > 30,000\n    solutions = solve((tax_equation, Eq(income > 30000, True)), (T, income))\n\n    # Find the solution where T matches the condition and income is positive\n    ryan_income = next(val[1] for val in solutions if val[1] > 30000 and val[0] > 0)\n\n    return ryan_income\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    coin_20_cent_count = 0\n    coin_50_cent_count = 0\n    total_value = 630  # In cents\n\n    # Iterate over possible quantities of 50-cent coins\n    for coin_50_cent_count in range(22):\n        coin_20_cent_count = 21 - coin_50_cent_count\n        if (50 * coin_50_cent_count + 20 * coin_20_cent_count) == total_value:\n            return coin_50_cent_count\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    return comb(8, 4) * comb(12, 3)\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the speeds of Alan and Phillip by 'a' and 'p' and the distance between A and B by 'd'.\n    a, p, d = symbols('a p d')\n\n    # Phillip's speed is 'a + 15' (since Phillip walks 15 meters more than Alan per minute).\n    # Phillip takes 12 minutes to arrive at B, so distance 'd' is 'p * 12'.\n    eq1 = Eq(d, (a + 15) * 12)\n\n    # Alan arrives 3 minutes later than Phillip, so it takes Alan 15 minutes to cover the same distance 'd'.\n    eq2 = Eq(d, a * 15)\n\n    # We can now solve the two equations to find the distance 'd'.\n    solutions = solve((eq1, eq2), (a, d))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    import math\n\n    count = 0\n    for i in range(1, 10):\n        number = int('2' + '5' * i)\n        if math.isqrt(number)**2 == number:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    tom_money = 68.10\n    alice_spent = 36\n    alice_less_than_tom = 25.40\n\n    alice_money_after = tom_money - alice_less_than_tom\n    alice_money_before = alice_money_after + alice_spent\n\n    return alice_money_before\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 0.20\n    discount_amount = original_price * discount_percentage\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean_set1 = 28\n    mean_set2 = 11\n    num_set1 = 5\n    num_set2 = 12\n    \n    total_sum_set1 = mean_set1 * num_set1\n    total_sum_set2 = mean_set2 * num_set2\n    \n    total_sum_both_sets = total_sum_set1 + total_sum_set2\n    total_num_both_sets = num_set1 + num_set2\n    \n    mean_both_sets = total_sum_both_sets / total_num_both_sets\n    \n    return mean_both_sets\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance = 74\n    distance_between_benches = 7\n    number_of_benches = 9\n\n    total_bench_length = total_distance - (number_of_benches - 1) * distance_between_benches\n    bench_length = total_bench_length / number_of_benches\n\n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of students in class B and y be the total number of candies\n    x, y = symbols('x y')\n    \n    # Equation representing class A situation: 4*(2*x) + 20 = y\n    class_A = Eq(4 * (2 * x) + 20, y)\n    \n    # Equation representing class B situation: 6*x + 16 = y\n    class_B = Eq(6 * x + 16, y)\n    \n    # Now we solve the system of equations\n    solutions = solve((class_A, class_B), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    # Initialize the count for how many arms Peter cut.\n    arms_cut = 0\n    # Initialize the original number of arms of the octopus bugbear.\n    original_arms = 0\n    \n    # Since after cutting 5 arms, 1 grows back,\n    # effectively removing 4 arms each cycle until 21 arms have been cut.\n    while arms_cut < 21:\n        # If the number of remaining arms is less than 5, Peter can cut them all.\n        if original_arms < 5:\n            arms_cut += original_arms\n            break\n            \n        # Cut 5 arms, 4 effectively due to regeneration.\n        arms_cut += 4\n        # Add 1 arm back due to regeneration.\n        original_arms -= 5\n        \n        if arms_cut == 21:\n            break\n        \n        # When the cut arms are less than 20, Peter needs to let the bugbear regenerate.\n        if arms_cut < 20:\n            original_arms += 1\n\n    # Calculate the original number of arms.\n    original_arms += 21\n    \n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # The 3rd greatest number is 246, so the 2nd and 1st must be at least 247 and 248\n    # The sum of the first three greatest numbers is 246 + 247 + 248\n    sum_of_top_three = 246 + 247 + 248\n    \n    # Since we want the minimum value for the 4th greatest number,\n    # the remaining 6 numbers must be as small as possible, which is 1 to 6.\n    sum_of_smallest_six = sum(range(1, 7))\n    \n    # The sum of the first 9 numbers\n    sum_of_first_nine = sum_of_top_three + sum_of_smallest_six\n    \n    # Subtract the sum of the first nine numbers from the total sum to get the 4th number\n    fourth_greatest_number = 2021 - sum_of_first_nine \n    \n    return fourth_greatest_number\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # if we take 7 coins, we guarantee 2 coins of different colors\n    # because even if the first 6 are all the same color, the 7th must be of a different color\n    return 7\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_secs = 150\n    time_mins = time_secs / 60\n\n    distance = speed_m_per_min * time_mins\n\n    return distance\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Given the distance from the 1st to the 5th tree\n    distance_1_to_5 = 20 # cm\n    \n    # The number of intervals between 5 trees is (5 - 1) = 4\n    num_intervals_1_to_5 = 4\n    \n    # Calculate the distance of one interval\n    distance_one_interval = distance_1_to_5 / num_intervals_1_to_5\n    \n    # The number of intervals between the 8th to the 14th tree is (14 - 8) = 6\n    num_intervals_8_to_14 = 6\n    \n    # Calculate the distance from the 8th to the 14th tree\n    distance_8_to_14 = distance_one_interval * num_intervals_8_to_14\n\n    return int(distance_8_to_14)\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    # Initialize a list to hold numbers that can be selected\n    can_select = []\n\n    # Iterate through the range of numbers from 1 to 24\n    for i in range(1, 25):\n        # Check for each previously selected number\n        for j in can_select:\n            # Check if the current number and the selected number are mutually exclusive\n            if gcd(i, j) != 1:\n                break\n        else:  # The loop exited normally without a break, add the number to the list\n            can_select.append(i)\n\n    return len(can_select)\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = 38 * 32 + 37 * 33 + 36 * 34\n    return ans\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    grey_age, father_age = symbols('grey_age father_age')\n    equation1 = Eq(father_age, 30 + grey_age)\n    equation2 = Eq(father_age, 3 * grey_age)\n    \n    solutions = solve((equation1, equation2), (grey_age, father_age))\n    \n    return solutions[father_age]\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Devi and Jerry's current ages\n    devi, jerry = symbols('devi jerry')\n\n    # Devi is 8 years older than Jerry\n    equation1 = Eq(devi, jerry + 8)\n\n    # In 4 years' time, the ratio of Devi's age to Jerry's age will be 5:7\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    # Jerry's current age is what we want to find\n    return solutions[jerry]\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n    max_books_per_layer = -(-total_books // layers)  # Ceiling division\n    return max_books_per_layer\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    ans = 10 * (numerator / denominator)\n    return ans\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 6, 9]\n    all_permutations = permutations(digits, 3)\n    return len(list(all_permutations))\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    difference = 4\n    last_term = 80\n    # Calculating number of terms using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Calculating the sum of an arithmetic series:\n    # sum = n/2 * (first_term + last_term)\n    total_seats = num_terms * (first_term + last_term) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    sum_of_fractions = 0.12 + 0.345 + 0.6789\n    return sum_of_fractions\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n    import numpy as np\n\n    # Parts representing Bud's and Pip's apples\n    # '1' represents the part for Bud and '5' for Pip\n    parts = np.array([1, 5])\n    \n    fig, ax = plt.subplots()\n    ax.bar([\"Bud\", \"Pip\"], parts, color=['blue', 'green'])\n\n    # Add labels and title\n    ax.set_ylabel('Number of Parts')\n    ax.set_title('Parts graph for Bud and Pip apples')\n\n    # Show the value on top of each bar\n    for i in range(len(parts)):\n        ax.text(i, parts[i], str(parts[i]), ha='center')\n\n    # Save the figure to a file\n    plt.savefig('parts_graph.png')\n\n    # Return the name of the file where the graph is saved\n    return 'parts_graph.png'\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    divisor = 12\n    remainder = 3\n    minimum_dividend = (divisor * (divisor - 1)) + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The congruences are x ≡ 1(mod 3), x ≡ 3(mod 5), and x ≡ 5(mod 7).\n    cong = [(1, 3), (3, 5), (5, 7)]\n    res, _ = solve_congruence(*cong)\n    # Find the lowest number that is greater than 100.\n    while res <= 100:\n        res += 3 * 5 * 7  # LCM of 3, 5, and 7\n    return res if res < 200 else -1  # Ensure the result is between 100 and 200\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    # Choose the first digit - 2 options (1 or 2, cannot be 0)\n    first_digit_options = 2\n    # Choose the second digit - 3 options (0, 1, 2 - it can now be 0)\n    second_digit_options = 3\n    # Choose the third digit - 2 options remaining (0, 1, or 2 excluding the second digit)\n    third_digit_options = 2\n\n    # Total combinations is the product of options for each digit place\n    total_combinations = first_digit_options * second_digit_options * third_digit_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote y as Hazel's age 3 years from now\n    y = symbols('y')\n    \n    # Hazel's age next year will be y - 2 (because next year is 1 year earlier than 3 years from now)\n    hazel_next_year = y - 2\n    \n    # Jessica is 3 years younger than Hazel\n    jessica_next_year = hazel_next_year - 3\n    \n    # Their total age next year\n    total_age_next_year = hazel_next_year + jessica_next_year\n\n    # We represent this total age as an equation and solve for y\n    equation = Eq(total_age_next_year, total_age_next_year)\n    solution = solve(equation, y)\n\n    # Answer is the simplified expression of their total age next year\n    return total_age_next_year.subs(y, solution[y])\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to centimeters\n    section1 = 30  # already in cm\n    section2 = 1.5 * 100  # convert meters to cm\n    section3 = 150 / 10   # convert mm to cm\n\n    # Sum all sections to get the total width in cm\n    total_width = section1 + section2 + section3\n\n    return total_width\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    years_until_melanie_reaches_uncles_age = 38 - melanie_age\n    uncles_current_age = melanie_age + years_until_melanie_reaches_uncles_age\n\n    return uncles_current_age\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols: c for cows, g for goats\n    c, g = symbols('c g')\n\n    # Initial conditions\n    # 65% of the animals were cows, so the rest (100% - 65% = 35%) were goats.\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # When 240 more cows and goats were added, the percentage of cows increased by 20%.\n    # Hence, 65% + 20% = 85% of the total (c + g + 240) were cows now.\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # It is also given that the number of goats doubled.\n    # This means that the new number of goats is 2 times the original number of goats.\n    equation3 = Eq(2 * g, (c + g + 240) - (c + 240))\n\n    # Solve the equations for c and g\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    # We are asked for the number of goats originally, which is g\n    return solutions[g]\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 300\n\n    percentage = (pence / pounds_to_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if i % 4 == 0 or i % 6 == 0:\n            continue\n        else:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('15:25', '%H:%M')\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    first_num = 2 + 3 / 8\n    second_num = 6 + 9 / 12\n    third_num = 1 + 14 / 16\n    \n    # Sum the improper fractions\n    result = first_num + second_num + third_num\n    \n    return result\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_current_age = 15\n    amy_age_5_years_ago = amy_current_age - 5\n    sister_age_in_3_years = amy_age_5_years_ago\n    sister_current_age = sister_age_in_3_years - 3\n\n    return sister_current_age\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # The degree of the monomial is the sum of the exponents of all its variables\n    # In the monomial -x^3y^(2n), the degree is 3 (from x^3) + 2n (from y^(2n))\n    # According to the problem, the degree is 5, so we have the equation:\n    # 3 + 2n = 5\n    # Solving for n, we have:\n    n = (5 - 3) / 2\n    return n\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # There are 13 different card numbers/letters in each of the 4 suits\n    # To ensure we have two cards of the same number/letter, draw one more than the total number of different numbers/letters\n    ans = 13 + 1\n    return ans\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    for i in range(100, 1000, 2):  # Iterate over even 3-digit numbers\n        if sum(map(int, str(i))) == 21:\n            return i\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    for i in range(2, 20):\n        ans += sum(i/j for j in range(i+1, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part_value = 18\n    fraction = 3/5\n    whole_amount = part_value / fraction\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    # Starting from the smallest two-digit number 10\n    # Increment by 1 until finding a number divisible by both 3 and 7\n    number = 10\n    while number % 3 != 0 or number % 7 != 0:\n        number += 1\n    return number\n\n# Call the function and store the result in 'ans'\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cacti, sunflowers = symbols('cacti sunflowers')\n    \n    # cacti costs $2 each, sunflowers cost $7 each\n    equation1 = Eq(2 * cacti + 7 * sunflowers, 156)\n    # Lavi bought 6 more cacti than sunflowers\n    equation2 = Eq(cacti, sunflowers + 6)\n    \n    solutions = solve((equation1, equation2), (cacti, sunflowers))\n    \n    return solutions[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price = symbols('book_price')\n\n    # Sarah's cost\n    sarah_cost = 8 * book_price + 3 * 0.40\n    # Rebecca's cost\n    rebecca_cost = 3 * book_price + 8 * 0.40\n    # Sarah paid £1.00 more than Rebecca\n    equation = Eq(sarah_cost, rebecca_cost + 1.00)\n\n    # Solve for the price of a book\n    book_price_solution = solve(equation, book_price)\n\n    return book_price_solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares = sum([i**2 for i in range(2, 21, 2)])\n    odd_squares = sum([i**2 for i in range(1, 20, 2)])\n    \n    ans = even_squares - odd_squares\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    water_per_jug = 2\n    num_jugs = 6\n\n    water_used = water_per_jug * num_jugs\n    water_left = total_water - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_extra_points = 18\n    jack_points = andrew_points + jack_extra_points\n    return jack_points\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of Liverpool and Manchester United fans initially.\n    L_initial, MU_initial = symbols('L_initial MU_initial')\n\n    # Create equation based on the information that:\n    # L_initial = MU_initial + 1000\n    equation1 = Eq(MU_initial + 1000, L_initial)\n\n    # Create equation based on the information that:\n    # MU_initial + 4836 = 3 * (L_initial + 472)\n    equation2 = Eq(MU_initial + 4836, 3 * (L_initial + 472))\n\n    # Solve the system of equations for the initial number of fans.\n    solutions = solve((equation1, equation2), (L_initial, MU_initial))\n\n    return solutions[L_initial]\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n\n    return comb(total_players, players_needed)\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    \n    solution_dict = solve(equation, x)\n    return solution_dict[x]\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price = symbols('book_price')\n    \n    # Defining equations based on the problem statement\n    sarah_paid = 8 * book_price + 3 * 0.40\n    rebecca_paid = 3 * book_price + 8 * 0.40\n    price_difference = Eq(sarah_paid - rebecca_paid, 1.00)\n\n    # Solving the equation\n    solutions = solve(price_difference, book_price)\n\n    return float(solutions[0])\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    total_sum = 450\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    # Start from the end of the question where Andy has 3 dollars left after giving Mike 2 dollars\n    remaining_after_mike = 3 + 2\n    \n    # She gave half of the remaining to Nini, so before that, she had twice the amount\n    before_giving_nini = remaining_after_mike * 2\n    \n    # She gave half of the remaining to Bob, so before that, she had twice the amount\n    before_giving_bob = before_giving_nini * 2\n    \n    # She gave half of the money to her mother, so before that, she had twice the amount\n    original_money = before_giving_bob * 2\n    \n    return original_money\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    digit_length = 0\n    number = 1\n    while digit_length < 2023:\n        digit_length += len(str(number))\n        if digit_length < 2023:\n            number += 1\n\n    # find the exact digit\n    steps_back = digit_length - 2023\n    target_number = str(number)\n    ans = int(target_number[-(steps_back + 1)])\n\n    return ans\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 98\n    future_year = 1\n    age_at_future_year = (future_year + 100) - birth_year + 11\n    return age_at_future_year\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a_students, b_students, peaches = symbols('a_students b_students peaches')\n    equation1 = Eq(peaches, 5 * a_students + 10)\n    equation2 = Eq(peaches + 2, 8 * b_students)\n    equation3 = Eq(a_students, b_students + 3)\n\n    solutions = solve((equation1, equation2, equation3), (a_students, b_students, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 6, 2, 5]\n    smallest_odd_number = float('inf')\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 2 == 1 and number < smallest_odd_number:\n            smallest_odd_number = number\n    ans = smallest_odd_number\n    return ans\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    # Let the number of T-shirts be 8x and the number of caps be 5x\n    # Hence the total cost of the T-shirts sold is (1/4) * 8x * $3\n    # And the total cost of the caps sold is (1/5) * 5x * $5\n    # According to the problem, the sum of these costs is $132\n    # So we can set up the following equation:\n    # (1/4) * 8x * 3 + (1/5) * 5x * 5 = 132\n    # Solving for x:\n    x = (132 * 4 * 5) / (8 * 3 * 5 + 5 * 5 * 4)\n\n    # Now we calculate the number of T-shirts:\n    num_tshirts = 8 * x\n\n    return int(num_tshirts)\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    return 9.95 - 2.6 - 3.42\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    boat_capacity = 6\n    trips_needed = -(-total_students // boat_capacity)  # Ceiling division to find the minimum trips needed\n\n    return trips_needed\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    nth_term = 36\n\n    ordinal_number = (nth_term - first_term) // common_difference + 1\n\n    return ordinal_number\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for tens_digit in [2, 3, 5, 7]:\n        for ones_digit in [2, 3, 5, 7]:\n            number = 10 * tens_digit + ones_digit\n            if isprime(number):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    run_away = 5\n    additional_catch = 9\n\n    total_catch = initial_catch - run_away + additional_catch\n\n    return total_catch\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_per_picture = 10  # minutes\n    total_time = 1 * 60 + 20  # 1 hour and 20 minutes converted to minutes\n\n    num_pictures = total_time // time_per_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    # Let the number of game cards Eric has be x\n    # Then Joe has 7x game cards\n    # If Joe gives Eric a certain number y of cards, they both will have 168 cards each\n    # So the equations will be:\n    # Eric's cards after receiving y cards: x + y = 168\n    # Joe's cards after giving y cards: 7x - y = 168\n\n    # Now, we will solve for x first, then substitute in the second equation to find y\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 168)\n    equation2 = Eq(7*x - y, 168)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We are asked to find the value of y, the number of game cards Joe must give Eric\n    return solutions[y]\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    opposite_difference = abs(6 - 19)\n    number_of_people = opposite_difference * 2\n\n    return number_of_people\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    # Since the two groups must have different numbers of apples,\n    # we can iterate from 1 to half of the total number of apples.\n    # This is because if one group has more than half, the other group\n    # automatically has less than half, and vice versa.\n    total_apples = 10\n    possible_splits = total_apples // 2  # This will give us the floor division result\n    \n    return possible_splits\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "import math\n\ndef solution():\n    num_students = 5\n    ways = math.factorial(num_students)\n    return ways\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n\n    for anne_pears in range(total_pears):\n        charlie_pears = total_pears - anne_pears\n        if anne_pears - 6 == charlie_pears + 6:\n            return anne_pears\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swimming_times = 14\n    joanne_swimming_times = 5\n    difference = amy_swimming_times - joanne_swimming_times\n    return difference\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 since it is the thousand's digit in abcd\n        for b in range(0, 10):\n            for c in range(0, 10):\n                for d in range(0, 10):\n                    if (1000*a + 100*b + 10*c + d) + (100*a + 10*b + c) + (10*a + b) + a == 1370:\n                        return 1000*a + 100*b + 10*c + d\n                        \nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeroes(n):\n        count = 0\n        while n % 10 == 0:\n            n //= 10\n            count += 1\n        return count\n\n    factorial_29 = factorial(29)\n    ans = count_trailing_zeroes(factorial_29)\n\n    return ans\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    N_base8 = int('12345654321', 8)\n    remainder_7 = N_base8 % 7\n    remainder_9 = N_base8 % 9\n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3 # Sachin's work rate (part of flat per hour)\n    peter_rate = 1 / 6 # Peter's work rate (part of flat per hour)\n\n    combined_rate = sachin_rate + peter_rate # Combined work rate\n\n    time_to_clean_together = 1 / combined_rate # Time to clean together\n\n    return time_to_clean_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, joseph = symbols('isaac joseph')\n    \n    # Initial condition: Isaac had 5 times as many stamps as Joseph\n    initial_condition = Eq(isaac, 5 * joseph)\n    \n    # After receiving 154 stamps, Joseph has 9/10 as many stamps as Isaac\n    after_condition = Eq(joseph + 154, isaac * 9/10)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, after_condition), (isaac, joseph))\n    \n    return solutions[isaac]\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # The sum of the digits of a number divisible by 9 must also be divisible by 9.\n    # The sum of the digits of the number 2018A is 2+0+1+8+A = 11+A.\n    # To find the value of A such that 11+A is divisible by 9, \n    # we find the smallest non-negative integer A that satisfies this condition.\n  \n    A = -1\n    for i in range(10):\n        if (11 + i) % 9 == 0:\n            A = i\n            break\n\n    # Now we have found the digit A, we can construct the 5-digit number.\n    number = int(f\"2018{A}\")\n    \n    # To find the remainder when this number is divided by 8,\n    # we only need to look at the last three digits, since 1000 is divisible by 8.\n    remainder = number % 8\n    \n    return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    ryan_front = 5  # Squirrels in front of Ryan\n    elvis_behind = 7  # Squirrels behind Elvis\n    between = 1  # Squirrels between Ryan and Elvis\n\n    # Calculate the total number of squirrels in the line\n    # Total = squirrels in front of Ryan + Ryan himself + the squirrel between them + Elvis himself + squirrels behind Elvis\n    total_squirrels = ryan_front + 1 + between + 1 + elvis_behind\n    return total_squirrels\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let the length of the path be x meters\n    # Let Linda's speed be s meters per minute\n    # Let Ted's speed be (4/3) * s meters per minute\n    # Linda's distance covered till meet point is 1200 meters\n    # Ted's distance covered till meet point is x - 1200 meters\n    # Since they meet at the same time, the time covered by both Linda and Ted will be the same\n    # Let the time they meet be t, then we can write the following equation for distance covered by Linda:\n    # Distance = Speed * Time\n    # 1200 = s * t \n    # And for Ted:\n    # x - 1200 = (4/3) * s * t\n\n    # Since they meet at the same time, their times are equal:\n    # t = 1200 / s\n    # and substituting t for Ted:\n    # x - 1200 = (4/3) * s * (1200 / s)\n    # Simplify this equation:\n    # x - 1200 = (4/3) * 1200\n    # x - 1200 = 1600\n    # x = 1200 + 1600\n    x = 2800\n\n    return x\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    def count_derangements(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n\n    ans = count_derangements(6)\n    return ans\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days_for_three_workers = 3\n\n    # Work done by 1 worker in 1 day\n    work_per_worker_per_day = 1 / (workers * days_for_three_workers)\n    \n    # Work done by all workers in 1 day\n    work_by_one_worker = 1 / work_per_worker_per_day\n\n    return int(work_by_one_worker)\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n    \n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25\n    total_weight = 64\n    calculated_weight = (percentage / 100) * total_weight\n    return calculated_weight\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    return 45 * 0.30\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    return sum([i for i in range(1, 20, 2)])\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define jack as a symbol representing Jack's current age\n    jack = symbols('jack')\n\n    # Let's set up the equation based on the problem statement:\n    # Five years ago, so jack - 5\n    # half of the age he will be in 8 years, which is 1/2 * (jack + 8)\n\n    equation = Eq(jack - 5, 1/2 * (jack + 8))\n\n    # Solve the equation\n    solution = solve(equation)\n\n    # Return Jack's current age\n    return solution[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    bag_percentage = 70\n    purse_fraction = 3 / 8\n\n    purse_percentage = (100 - bag_percentage) * purse_fraction\n\n    return purse_percentage\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    # Let the initial number of pupils in School P be 2x and School Q be 3x\n    # After admitting 240 pupils each, the number of pupils in School P becomes 2x + 240\n    # and the number of pupils in School Q becomes 3x + 240\n    # The new ratio is 3:4, so (2x + 240) / (3x + 240) = 3/4\n\n    # Rearrange the equation to solve for x\n    # (2x + 240) / (3x + 240) = 3/4\n    # 4 * (2x + 240) = 3 * (3x + 240)\n    # 8x + 960 = 9x + 720\n    # Subtract 8x from both sides\n    # 960 = x + 720\n    # Subtract 720 from both sides\n    x = 960 - 720\n\n    # Initial number of pupils in School P is 2x\n    initial_pupils_P = 2 * x\n\n    return initial_pupils_P\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    return 86.3 + 7\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    total_candies = 5 * 12  # Total candies initially\n    new_total_students = 5 + 1  # Number of students after 1 joins\n    candies_per_student_after_redistribution = total_candies // new_total_students  # Redividing candies\n\n    return candies_per_student_after_redistribution\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"EDUCATION\"\n    vowels = \"AEIOU\"\n    vowel_count = sum(1 for letter in word if letter in vowels)\n    consonant_count = len(word) - vowel_count\n\n    # Total permutations of the word\n    total_permutations = factorial(len(word))\n\n    # Permutations where vowels are together\n    # Treating all vowels as a single entity along with the consonants\n    vowels_together = factorial(vowel_count) * factorial(consonant_count + 1)\n\n    # Subtracting the cases where vowels are together from the total permutations\n    permutations_vowels_apart = total_permutations - vowels_together\n\n    return permutations_vowels_apart\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    # Sharon can buy 11 sweets initially.\n    sweets = 11\n    wrappers = 11\n\n    # While she can exchange wrappers for sweets.\n    while wrappers >= 3:\n        # Exchange wrappers for new sweets.\n        new_sweets = wrappers // 3\n        # Decrease the number of wrappers by the amount exchanged and add the wrappers from the new sweets.\n        wrappers = wrappers % 3 + new_sweets\n        # Add the new sweets to the total count.\n        sweets += new_sweets\n\n    return sweets\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time_str = \"11:40\"\n    duration_str = \"4:50\"\n\n    arrival_time = datetime.strptime(arrival_time_str, '%H:%M')\n    duration = timedelta(hours=int(duration_str.split(':')[0]), minutes=int(duration_str.split(':')[1]))\n\n    leave_time = arrival_time + duration\n    ans = leave_time.strftime('%I:%M %p')\n    return ans\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for number in range(10, 100):\n        if number % 5 == 4 and number % 7 == 4:\n            return number\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Given data\n    angle_BAC = 50\n    # Since BP bisects angle ABC, and CP bisects angle ACB\n    # In an isosceles triangle, the exterior angle is equal to the sum of the opposite interior angles.\n    # So, we can say that m∠BPC = m∠BAC + 2 * m∠BAP = m∠BAC + 2 * m∠BCP\n    # But since BP and CP are bisectors, m∠BAP = m∠ABP and m∠BCP = m∠CBP\n    # Thus m∠BPC = m∠BAC + m∠ABP + m∠CBP\n    \n    # Because we don't have the actual values for ABP and CBP but we do know they are equal,\n    # we can assume them to be x. It would be:\n    # angle_BPC = angle_BAC + 2*x\n    \n    # And we also know that sum of angles in a triangle is always 180 degrees.\n    # Hence angle_BAC + 2*x + 2*x + angle_BAC = 180 (Since angle BAP and angle CAP form a linear pair with angle BAC)\n    # 2*angle_BAC + 4*x = 180\n    # 100 + 4*x = 180\n    # 4*x = 80\n    # x = 20 (Each of m∠ABP and m∠CBP is 20 degrees)\n    \n    # Now, put the value of x back into the angle_BPC equation:\n    # angle_BPC = angle_BAC + 2*x\n    # angle_BPC = 50 + 2*20\n    angle_BPC = 50 + 2*20\n    \n    return angle_BPC\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    result = 421 * 11\n    return result\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    # cost price\n    cost_price = 10 \n\n    # selling price per bag\n    selling_price_per_bag = 0.65\n\n    # total weight in kg\n    total_weight = 5\n\n    # weight per bag in kg \n    weight_per_bag = 0.250\n\n    # total number of bags\n    total_bags = total_weight / weight_per_bag\n\n    # total revenue from selling all bags\n    total_revenue = total_bags * selling_price_per_bag\n\n    # profit\n    profit = total_revenue - cost_price\n\n    # profit percentage\n    profit_percentage = (profit / cost_price) * 100\n\n    return profit_percentage\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of birds of each type\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n    \n    # Define equations based on the problem statement\n    # The number of two-talied birds is 5 more than twice as many as the number of eight-tailed birds\n    eq1 = Eq(two_tailed, 5 + 2 * eight_tailed)\n    \n    # The number of three-tailed birds is 2 more than half the number of six-talied birds\n    eq2 = Eq(three_tailed, 2 + 1/2 * six_tailed)\n    \n    # The total number of their tails is 2 less than four times as many as the total number of their heads\n    # Heads: two_tailed + three_tailed + six_tailed + 2*eight_tailed\n    # Tails: 2*two_tailed + 3*three_tailed + 6*six_tailed + 8*eight_tailed\n    eq3 = Eq(2*two_tailed + 3*three_tailed + 6*six_tailed + 8*eight_tailed, 4 * (two_tailed + three_tailed + six_tailed + 2*eight_tailed) - 2)\n    \n    # The difference between the total number of their heads and their tails is 241\n    # Tails - Heads = 241\n    eq4 = Eq(2*two_tailed + 3*three_tailed + 6*six_tailed + 8*eight_tailed - (two_tailed + three_tailed + six_tailed + 2*eight_tailed), 241)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n    \n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    numerator = 15\n    denominator = 20\n    simplified_numerator = 3\n\n    ratio = numerator / denominator\n\n    ans = simplified_numerator / ratio\n\n    return ans\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_diff = 15 - 10\n    common_difference = (fifteenth_term - tenth_term) / position_diff\n    twelfth_term = tenth_term + 2 * common_difference\n    return twelfth_term\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Number of different ways to go from Ayton to Beeton\n    Ayton_Beeton = 4\n    # Number of different ways to go from Beeton to Ceeton\n    Beeton_Ceeton = 5\n    # Number of different ways to go from Ceeton to Deeton\n    Ceeton_Deeton = 6\n\n    # Number of different ways to go from Ayton to Deeton without going through Beeton or Ceeton\n    direct_Ayton_Deeton = 3\n\n    # Number of different ways to go from Ayton to Deeton through Beeton and Ceeton\n    path_via_Beeton_Ceeton = Ayton_Beeton * Beeton_Ceeton * Ceeton_Deeton\n\n    # Total number of different ways to go from Ayton to Deeton\n    total_paths = direct_Ayton_Deeton + path_via_Beeton_Ceeton\n\n    return total_paths\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    # To find the numbers underlined exactly twice, we need to find numbers that are multiples of\n    # two different numbers from the set {2, 3, 4}. However, every multiple of 4 is also a multiple of 2,\n    # so we cannot count any multiples of 4 separately.\n    # Thus, we need to count the multiples of 2 and 3 (which are 6), and subtract the numbers which are\n    # multiples of 2, 3, and 4 (which are 12) because they are counted twice.\n\n    multiples_of_6 = 2016 // 6\n    multiples_of_12 = 2016 // 12\n    \n    # Numbers underlined exactly twice are multiples of 6 minus the multiples of 12\n    twice_underlined = multiples_of_6 - multiples_of_12\n\n    return twice_underlined\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Joe's original amount of money\n    joe_original = symbols('joe_original')\n\n    # Sally spent $2.50, so she has $3.75 - $2.50 left\n    sally_left = 3.75 - 2.50\n\n    # Joe also spent $2.50, so Joe has joe_original - $2.50 left\n    # Together, they have $5 left after spending $2.50 each on ice-cream\n    equation = Eq(joe_original - 2.50 + sally_left, 5)\n\n    # Solve for Joe's original amount of money\n    solution = solve(equation, joe_original)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_3_days_average = 135\n    last_5_days_average = 151\n    total_days = 8\n\n    total_trees_first_3_days = first_3_days_average * 3\n    total_trees_last_5_days = last_5_days_average * 5\n\n    total_trees = total_trees_first_3_days + total_trees_last_5_days\n    overall_average = total_trees / total_days\n\n    return overall_average\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the magic number as a symbol\n    magic_number = symbols('magic_number')\n\n    # Create equations based on the problem statement\n    equation = Eq((149 + magic_number), 5 * (21 + magic_number))\n\n    # Solve the equation for the magic number\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n    \n    # Calculate the number of different choices for picking 2 out of the 4 options\n    # We use the combination function `comb(n, k)` which calculates n choose k\n    salads_soups = comb(salads, 1) * comb(soups, 1)\n    salads_vegetables = comb(salads, 1) * comb(vegetables, 1)\n    salads_sandwiches = comb(salads, 1) * comb(sandwiches, 1)\n    soups_vegetables = comb(soups, 1) * comb(vegetables, 1)\n    soups_sandwiches = comb(soups, 1) * comb(sandwiches, 1)\n    vegetables_sandwiches = comb(vegetables, 1) * comb(sandwiches, 1)\n    \n    # Sum all possibilities\n    total_choices = (salads_soups + salads_vegetables + \n                     salads_sandwiches + soups_vegetables + \n                     soups_sandwiches + vegetables_sandwiches)\n    \n    return total_choices\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit must be between 1 and 9\n        for tens in range(10):     # Tens digit can be between 0 and 9\n            for ones in range(10): # Ones digit can be between 0 and 9\n                if (hundreds + tens + ones == 7) and (ones % 2 == 0):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(202 + magic_number, 6 * (22 + magic_number))\n\n    magic_number_value = solve(equation, magic_number)\n\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    students_difference = 32\n    total_students = 0\n    for boys_layer in range(100):  # Arbitrarily large number for the loop\n        girls_layer = boys_layer - 1\n        if girls_layer < 0:\n            continue\n        boys_count = (boys_layer*2 + 1) ** 2 - (girls_layer*2 + 1) ** 2\n        if boys_count == students_difference:\n            total_students = (boys_layer*2 + 1) ** 2\n            break\n    return total_students\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    found = False\n    while not found:\n        if isprime(n) and isprime(n + 2) and isprime(n + 4) \\\n           and isprime(n + 106) and isprime(n + 308):\n            found = True\n        else:\n            n += 1\n    return n\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    plasters_needed_per_day = 20\n    days_last = total_plasters / plasters_needed_per_day\n\n    return days_last\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    items = symbols('items')\n\n    equation = Eq((2/3 - 1/9) * items, 12 + (1 - 2/3 - 1/9) * items)\n    total_items = solve(equation, items)[0]\n\n    lemons = (1 - 2/3 - 1/9) * total_items\n\n    return int(lemons)\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original amount of money Max had, and y be the original amount of money Anthony had.\n    x, y = symbols('x y')\n\n    # Equation 1: (x - 12)/y = 2/5 after Max bought the chocolates\n    equation1 = Eq((x - 12)/y, 2/5)\n\n    # Equation 2: x/(y - 12) = 8/13 after Anthony bought the chocolates\n    equation2 = Eq(x/(y - 12), 8/13)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Returning the amount of money Max had originally.\n    return solutions[x]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the total number of red stickers, which is equal to the total number blue stickers initially\n    r = symbols('r')\n    \n    # She gave away 2/3 of her red stickers, so she's left with 1/3 of red stickers\n    red_left = r * (1 - 2/3)\n    \n    # Let b be the fraction of blue stickers she gave away\n    b = symbols('b')\n\n    # Total stickers she had initially was 2r, as the red and blue stickers were equal\n    # In the end, she was left with 1/4 of her stickers\n    equation = Eq((1 - 2/3) * r + (1 - b) * r, 1/4 * 2 * r)\n\n    # Solve the equation for b\n    solutions = solve(equation, b)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    # Let the mass of strawberries be s and the mass of mangoes be m\n    # s + 448 = m -> equation 1\n    # m - 900 = s / 2 -> equation 2\n    # Solving the two equations with substitution\n    \n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the masses of strawberries (s) and mangoes (m)\n    s, m = symbols('s m')\n\n    # Setup the equations\n    equation1 = Eq(s + 448, m)       # m = s + 448\n    equation2 = Eq(m - 900, s / 2)   # m - 900 = s / 2\n\n    # Substitute equation 1 into equation 2 and solve for s\n    substituted_eq2 = equation2.subs(m, s + 448)\n\n    # Solve the equation for s\n    solution_s = solve(substituted_eq2, s)\n\n    # Get the strawberry mass value from the solution\n    strawberry_mass = solution_s[0]\n\n    return strawberry_mass\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    ways = factorial(19) // (factorial(6) * factorial(13))\n    return ways\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    lengths = {\n        \"10mm\": 10,\n        \"100cm\": 100 * 10,\n        \"10m\": 10 * 1000,\n        \"2km\": 2 * 1000 * 1000,\n        \"2800cm\": 2800 * 10,\n        \"2500m\": 2500 * 1000,\n        \"100mm\": 100,\n        \"100m\": 100 * 1000\n    }\n    \n    smallest_length = min(lengths, key=lengths.get)\n    ans = lengths[smallest_length]\n    \n    return ans\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    daily_increase = 4\n\n    # Calculate the number of days it took to finish the book\n    days = ((last_day_pages - first_day_pages) / daily_increase) + 1\n\n    # Calculate the total number of pages read, which is the sum of an arithmetic series\n    total_pages = (days / 2) * (first_day_pages + last_day_pages)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    base_unit_digit = 4\n    exponent_pattern = [4, 6, 4, 6] # The pattern of the unit digit of powers of 4\n\n    # Since the pattern repeats every 4, find the position in the cycle for 2022\n    position = 2022 % len(exponent_pattern)\n    \n    # -1 because list index starts at 0\n    unit_digit = exponent_pattern[position - 1]\n\n    return unit_digit\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Assuming the piles are sorted from smallest to largest\n    # The minimum number in the largest pile should be calculated\n    # starting with 1 marble in the first pile, 2 in the second, etc.\n    # and allocating the remaining marbles to the largest pile.\n    for largest_pile in range(1, 16):\n        # Start with the smallest configuration possible that satisfies the condition\n        # of each pile having a different number of marbles.\n        piles = [1, 2, 3, largest_pile]\n        if sum(piles) <= 16:\n            remaining_marbles = 16 - sum(piles)\n            # Allocate remaining marbles to the largest pile\n            piles[3] += remaining_marbles\n            if sum(piles) == 16:\n                return piles[3]\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n    ans = smallest_6_digit_number - largest_5_digit_number\n    return ans\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['1', '2', '3', '4', '5', '6']\n    count = 0\n    \n    for perm in permutations(digits, 3):\n        if int(perm[2]) % 2 != 0:  # Check if the last digit is odd\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n    total_students = swim_only + basketball_only + both + neither\n    return total_students\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of 4\n    a1 = 3  # first term\n    n = 5   # number of terms, as there are five terms given in the question\n\n    # The nth term of an arithmetic sequence can be calculated as: an = a1 + (n-1) * d\n    # where d is the common difference\n    # However, since we need the sum of the first n terms, we can use the sum formula for an arithmetic sequence:\n    # Sum of n terms, S_n = n/2 * (a1 + an)\n    # Here, an is not given directly but can be calculated as it's the last term in the sequence given\n    an = a1 + (n - 1) * 4\n    \n    # Now calculate the sum of the sequence\n    S_n = n / 2 * (a1 + an)\n    return int(S_n)\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    return 34.2 + 2.96 + 0.0364\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bookmarks, pupils = symbols('bookmarks pupils')\n    \n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n    \n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n    \n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    # Let's assume the number of cows is x and the number of ducks is y.\n    # We know that:\n    # x + y = 25 (since there are 25 cows and ducks in total)\n    # 4x + 2y = 68 (since cows have 4 legs and ducks have 2 legs)\n\n    for x in range(26):  # Since the number of cows can't be greater than 25\n        y = 25 - x\n        if 4 * x + 2 * y == 68:\n            return y  # We return the number of ducks (y) as the solution\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_children = 11 + 5\n    avg_height = 122.5\n    girls = 11\n    boys = 5\n\n    girls_avg_height, boys_avg_height = symbols('girls_avg_height boys_avg_height')\n    total_height = total_children * avg_height\n\n    equation1 = Eq(girls * girls_avg_height + boys * boys_avg_height, total_height)\n    equation2 = Eq(girls_avg_height, boys_avg_height + 3.2)\n\n    solutions = solve((equation1, equation2), (girls_avg_height, boys_avg_height))\n\n    return solutions[girls_avg_height]\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Let n be the number of triangles\n    # For n triangles, the maximum number of regions is given by the formula:\n    # Rn = n^2 - n + 2\n    n = 5\n    ans = n**2 - n + 2\n    return ans\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    ans = 602 // 7\n    return ans\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Equation representing the total number of students\n    total_students_eq = Eq(boys + girls, 70)\n\n    # Equation representing the total sum of scores\n    total_score_eq = Eq(boys*63 + girls*70, 70*66)\n\n    # Solve the system of equations\n    solutions = solve((total_students_eq, total_score_eq), (boys, girls))\n\n    # Return the number of girls\n    return solutions[girls]\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    term_32 = 157\n    term_108 = 537\n\n    common_difference = (term_108 - term_32) / (108 - 32)\n    first_term = term_32 - (32 - 1) * common_difference\n\n    return int(first_term)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    for candies in range(1, 10000): # Setting a reasonable upper limit\n        donnas_half = candies / 2\n        kept_by_donna = donnas_half + 3\n        given_to_jane = candies - kept_by_donna\n\n        jane_third = given_to_jane / 3\n        eaten_by_jane = jane_third + 4\n        given_to_kate = given_to_jane - eaten_by_jane\n\n        kate_quarter = given_to_kate / 4\n        left_with_kate = given_to_kate - kate_quarter\n\n        if left_with_kate == 42:\n            return candies\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are three passes. Consider the passes individually.\n    # Each individual has 3 choices to pass the ball to since they can't pass to themselves.\n    # The first pass: A can pass to B, C, or D (3 options)\n    # The second pass: The receiver of the first pass can pass to two others excluding A (2 options)\n    # The third pass: The receiver of the second pass can only pass back to A (1 option, since it needs to end up with A)\n\n    # Multiplying the number of choices for each pass gives the total number of different methods.\n    return 3 * 2 * 1\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Arithmetic sequence sum formula: S = n/2 * (a1 + an)\n    # where S is the sum of the sequence, n is the number of terms,\n    # a1 is the first term, and an is the last term.\n    # For an arithmetic sequence with common difference d and number of terms n,\n    # the nth term an can be expressed as a1 + (n-1)*d.\n    # Since the sequence consists of consecutive odd numbers, d = 2.\n    # We need to find a1 for the sequence of n = 9 terms with a sum S = 1503.\n\n    n = 9  # number of terms\n    S = 1503  # sum of the sequence\n    # We can solve for the first term a1 using the sum formula:\n    # S = n/2 * (a1 + a1 + (n-1)*d)\n    # 1503 = 9/2 * (2*a1 + 8*2)\n    # 1503 = 9/2 * (2*a1 + 16)\n    # 1503 * 2 / 9 = 2*a1 + 16\n    # a1 = (1503 * 2 / 9 - 16) / 2\n    d = 2  # difference between terms\n    a1 = (S * 2 / n - (n - 1) * d) // 2\n\n    return int(a1)\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    ans = 342 + 469\n    return ans\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) / (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for p, q in permutations(range(10), 2):\n        qp = q*10 + p\n        pq = p*10 + q\n        if qp - pq == 63:\n            return qp\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    lcm = 4 * 10 // math.gcd(4, 10)\n    return lcm\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed = 2 # metres per second\n    time = 12 * 60 # convert 12 minutes to seconds\n    distance = speed * time\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor_2020_505 = 505\n    extracted_2020 = 2020 // common_factor_2020_505\n    extracted_505 = 505 // common_factor_2020_505\n\n    ans = common_factor_2020_505 * (extracted_2020 * 68 + extracted_505 * 128)\n\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n    concentration = total_sugar / total_solution\n    return concentration\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let j be the number of storybooks Jason has initially,\n    # and a be the number of storybooks Anthea has initially.\n    j = 30\n    # If Jason gives 4 storybooks to Anthea, they will have the same number.\n    # Thus, we get the equation: j - 4 = a + 4\n    # Since we know that Jason has 30 storybooks, we can solve for a:\n    # 30 - 4 = a + 4\n    # 26 = a + 4\n    # a = 26 - 4\n    a = 22\n\n    # The difference in the number of storybooks they had initially is:\n    # j - a = 30 - 22\n    difference = j - a\n\n    return difference\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A, 2 * B)\n    equation2 = Eq(1/A + 1/B, 1/(B - 12))\n\n    solutions = solve((equation1, equation2), (A, B), dict=True)\n    A_days = solutions[0][A]\n\n    time_together = 1/(1/A_days + 1/(2 * A_days))\n\n    return time_together\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10\n    newspaper_cost = 2.20\n    change_received = 4.83\n\n    tissues_cost = total_paid - (newspaper_cost + change_received)\n    return tissues_cost\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    perm = permutations(digits)\n    return len(list(perm))\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours\n    late_time_hours = 12 / 60\n    early_time_hours = -4 / 60\n\n    # Speeds\n    speed_slow = 3  # km/h\n    speed_fast = 5  # km/h\n\n    # Let the distance be d\n    # Using the formula time = distance / speed\n    # d / speed_slow - d / speed_fast = late_time_hours - early_time_hours\n\n    # Calculate d using the proportions of time and speed difference\n    d = (late_time_hours - early_time_hours) / (1 / speed_slow - 1 / speed_fast)\n    \n    return d\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    tomatoes = 27\n    cucumbers = 3 + (3 * tomatoes)\n    return cucumbers\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for boys and girls\n    boys, girls = symbols('boys girls')\n    \n    # Original condition: equal number of boys and girls\n    original_condition = Eq(boys, girls)\n    \n    # After some boys and girls left\n    boys_left = boys - (3/5) * boys\n    girls_left = girls - 42\n    \n    # New condition: 12 more boys than girls left\n    new_condition = Eq(boys_left, girls_left + 12)\n\n    # Solve the system of equations\n    solutions = solve((original_condition, new_condition), (boys, girls))\n\n    # Total students is the sum of boys and girls\n    total_students = solutions[boys] + solutions[girls]\n\n    return total_students\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    total_cost_single = 6.25\n    quantity = 12\n    total_cost = total_cost_single * quantity\n    return total_cost\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Rachel and Alice's original amount of candy\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces of candy, they have the same amount of candy\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If Alice gives Rachel 10 pieces of candy, Rachel has 4 more than 3 times Alice's candy\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total original amount of candy\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    temperature_last_night = -8\n    temperature_today = 13\n    increase = temperature_today - temperature_last_night\n    return increase\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of boys be 3x and the number of girls be 2x\n    boys, girls = symbols('boys girls')\n\n    # Initial ratio equation: boys/girls = 3/2\n    initial_ratio = Eq(boys/girls, 3/2)\n\n    # New number of boys and girls after 12 boys and 12 girls join\n    new_boys = boys + 12\n    new_girls = girls + 12\n\n    # New ratio equation: (boys + 12)/(girls + 12) = 19/14\n    new_ratio = Eq(new_boys/new_girls, 19/14)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (boys, girls))\n\n    # Calculate the total number of children in the Botanic Gardens that afternoon\n    total_children_afternoon = solutions[boys] + 12 + solutions[girls] + 12\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import pi, sqrt\n\n    # Assume the pendulum length to be L.\n    # On Earth, period T1 is given as:\n    T1 = 1  # seconds\n    g_earth = 9.81  # m/s^2 (acceleration due to gravity on Earth)\n\n    # The formula for the period T of a pendulum is T = 2pi * sqrt(L/g),\n    # where L is the length and g is the acceleration due to gravity.\n    # We can rearrange this to find L = (T^2 * g)/(4 * pi^2).\n    L = (T1 ** 2 * g_earth) / (4 * pi ** 2)\n\n    # On the Moon, gravity is one-sixth of Earth's gravity.\n    g_moon = g_earth / 6\n\n    # Using the length L found for Earth, we can find the period T2 for the moon:\n    T2 = 2 * pi * sqrt(L / g_moon)\n\n    return T2\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "from math import factorial\n\ndef solution():\n    # For arranging four different colored socks:\n    # Since each sock is of different color, the number of ways of arranging them\n    # is the same as finding the permutations of these 4 items.\n    # Therefore, the formula for permutation of n different items is n!\n    ways_to_arrange_4_socks = factorial(4)\n\n    # For arranging two pairs of different colored socks:\n    # Now, we have two groups of items (where each group has identical items: the pair),\n    # but the groups are different from each other.\n    # The formula to arrange these is a combination of permutation and division by repeating item factorials.\n    # There are two repeating groups of 2 items each, so we divide the permutation by (2! * 2!).\n    ways_to_arrange_2_pairs_of_socks = factorial(4) // (factorial(2) * factorial(2))\n\n    # Combining both answers into one tuple\n    ans = (ways_to_arrange_4_socks, ways_to_arrange_2_pairs_of_socks)\n    \n    return ans\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    red_more = True  # Red starts from the outermost layer\n    layer = 0\n    red_tiles = 0\n    green_tiles = 0\n    \n    # Calculate the remaining tiles after each layer is considered\n    while total_tiles > 0:\n        # Calculate the number of tiles in this layer (4 sides, but every corner is counted twice)\n        tiles_in_layer = (layer * 4) + 4\n        \n        # Check if enough tiles are left for the full layer\n        if tiles_in_layer > total_tiles:\n            tiles_in_layer = total_tiles\n        \n        # Assign the number of tiles to the correct color based on the layer\n        if red_more:\n            red_tiles += tiles_in_layer\n        else:\n            green_tiles += tiles_in_layer\n        \n        # Switch colors for the next layer and decrease the remaining total tiles\n        red_more = not red_more\n        total_tiles -= tiles_in_layer\n        \n        # Move on to the next layer\n        layer += 1\n    \n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    more_tiles = abs(red_tiles - green_tiles)\n    \n    return (dominant_color, more_tiles)\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    # Lengths of the two iron bars\n    bar1_length = 23\n    bar2_length = 37\n    # Length of the welded part\n    welded_length = 3\n\n    # Length of the full piece\n    full_length = bar1_length + bar2_length - welded_length\n\n    return full_length\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    for william_correct in range(11):  # Since William can answer 0 to 10 questions correctly\n        justin_correct = william_correct + 24 / (6 - (-2))  # Find Justin's correct answers based on the point difference\n        \n        # Calculate points\n        william_points = william_correct * 6 + (10 - william_correct) * (-2)\n        justin_points = justin_correct * 6 + (10 - justin_correct) * (-2)\n        \n        # Check if their total points are 96\n        if william_points + justin_points == 96:\n            return william_correct\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1 Mar 2023', '%d %b %Y')\n    end_date = datetime.strptime('15 Apr 2023', '%d %b %Y')\n    \n    difference = end_date - start_date\n    \n    return difference.days + 1\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared * x_squared\n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    for A in range(10):\n        if (A + (10 * A + A)) == (A * 111):\n            return A\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    # Since there are 100 people standing in a square array,\n    # we find the square root of 100 to get the number of people\n    # on each side of the square.\n    side_length = int(100 ** 0.5)\n\n    # The outermost layer consists of the people on the four sides\n    # minus the four corners counted twice.\n    outermost_people = 4 * side_length - 4\n\n    return outermost_people\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    \n    # first negative term is when term < 0, so we solve for:\n    # first_term + (n - 1) * common_difference < 0\n    # which gives:\n    # n > (0 - first_term) / common_difference\n    n = (0 - first_term) / common_difference + 1\n    \n    return int(n)\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's work rate per day\n    work_rate_a = 1 / 15\n    # B's work rate per day\n    work_rate_b = 1 / 10\n    # Combined work rate per day when A and B work together\n    combined_work_rate = work_rate_a + work_rate_b\n    \n    # Work done in 3 days by A and B together\n    work_done_in_3_days = 3 * combined_work_rate\n    \n    # Remaining job after 3 days\n    remaining_job = 1 - work_done_in_3_days\n    \n    # Days required for B to finish the remaining job\n    days_for_b_to_finish = remaining_job / work_rate_b\n    \n    return days_for_b_to_finish\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    remaining_after_sister = 280 / (1 - 1/8)\n    initial_cash = remaining_after_sister / (1 - 3/7)\n    return initial_cash\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    # Let the number of students in the class be 'n'\n    n = symbols('n', integer=True)\n\n    # If at least one student gets 3 apples, then the maximum apples per student \n    # in the best equitable distribution is 2 apples, making the equation\n    equation = Eq(2*n + 3, 80)\n\n    # Solve the equation for n\n    num_students = solve(equation, n)[0]\n\n    return num_students\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Using the concept of Nim game which is a type of combinatorial game.\n    # The winning strategy is to leave an even number of cards in each pile.\n    # The xor of the two piles will give non-zero if there's a winning move.\n    \n    # Given initial state\n    pile_A = 88\n    pile_B = 52\n\n    # Calculate the XOR value of the two piles\n    xor_value = pile_A ^ pile_B\n    \n    # If xor_value is zero, then Tom cannot force a win on the first move.\n    if xor_value == 0:\n        return \"No winning strategy\"\n\n    # Find the move to make xor_value zero\n    if xor_value < pile_A:\n        # Tom should take from pile A\n        # Calculate the number of cards Tom should leave in pile A\n        cards_to_leave_in_A = pile_A - xor_value\n        # Calculate the number of cards Tom should take from pile A\n        cards_to_take_from_A = pile_A - cards_to_leave_in_A\n        return (\"Take from pile A\", cards_to_take_from_A)\n    else:\n        # Tom should take from pile B\n        # Calculate the number of cards Tom should leave in pile B\n        cards_to_leave_in_B = pile_B - (xor_value - pile_A)\n        # Calculate the number of cards Tom should take from pile B\n        cards_to_take_from_B = pile_B - cards_to_leave_in_B\n        return (\"Take from pile B\", cards_to_take_from_B)\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of balls\n    red, white, black = symbols('red white black')\n    \n    # Equation based on given ratios\n    equation1 = Eq(red / white, 1 / 2)\n    equation2 = Eq(white / black, 3 / 4)\n    \n    # Total number of balls\n    equation3 = Eq(red + white + black, 34)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    amount_per_person = total_amount / people\n    return amount_per_person\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    percentage = (4 / 50) * 100\n    return percentage\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    # Equation representing the cost of 6 cheesecakes and 7 logcakes\n    equation1 = Eq(6 * cheesecake + 7 * logcake, 1426)\n    # Equation representing that 4 cheesecakes costs thrice as much as a logcake\n    equation2 = Eq(4 * cheesecake, 3 * logcake)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    # Determine the cost of 10 cheesecakes and 10 logcakes\n    total_cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return total_cost\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    side_length = 5\n    hole_area = 1 * 1\n    base_area_without_hole = (side_length**2) - hole_area\n    volume = 480\n    \n    height = volume / base_area_without_hole\n    return height\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Since 2014! has the factors 10 = 2 x 5, it ends with at least one zero.\n    # And since there are many 2s and 5s in 2014!, there will be many zeros.\n    # The last non-zero digit is what we need to consider for the last digit.\n    # By properties of factorials, any factorial greater than 4! will end with a 0,\n    # because it contains the factors 2 and 5 which make up 10.\n    # Therefore, the last digit of 2014! is 0.\n    \n    return 0\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    ans = sum(i * (2*i - 1) for i in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n\n    pencils_for_pen = pen_cost // pencil_cost\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    # The series is an alternating series of negative and positive numbers.\n    # We can pair the negative and positive terms (e.g., -2+3, -4+5, ...)\n    # and find the sum of the series by summing up the pairs and then adding the first and last term separately.\n    \n    # The value of each pair is 1 because (-2+3 = 1, -4+5 = 1, etc.)\n    # There are 500 pairs because there are 1000 terms in total.\n    # The sum of all pairs is 500 * 1.\n    \n    # We then need to add the first term (1) and last term (1001) separately.\n    pair_sum = 500\n    first_term = 1\n    last_term = 1001\n    \n    # Summing up all pairs and then adding the first and last term\n    ans = pair_sum + first_term + last_term\n\n    return ans\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yellow, green = symbols('yellow green')\n\n    # Original ratio of yellow to green beads\n    equation1 = Eq(yellow/green, 3/2)\n\n    # New ratio of green to yellow beads after buying more\n    equation2 = Eq((green + 20) / (yellow + 5), 3/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (yellow, green))\n\n    # Total number of beads originally\n    total_beads = solutions[yellow] + solutions[green]\n    \n    return total_beads\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    # Your code here\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3 <= 12 and len({x1, x2, x3}) == 3:\n                count += 1\n    return count // 6  # Divide by 6 to account for permutations of the numbers\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_brother = 26\n    marbles_sisters = 13 * 2\n    marbles_left = 16\n\n    initial_marbles = marbles_brother + marbles_sisters + marbles_left\n\n    return initial_marbles\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum((2*i + 1) for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    meet_time = 4\n\n    # Distance covered by both when they meet\n    total_distance_covered = (amy_speed + christen_speed) * meet_time\n\n    # Time taken for Christen to cover the whole distance\n    time_for_christen = total_distance_covered / christen_speed\n\n    return time_for_christen\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    for correct_answers in range(51):\n        wrong_answers = 50 - correct_answers\n        score = correct_answers * 4 - wrong_answers\n        if score == 110:\n            return correct_answers\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n    \n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits and perm[0] != '0':\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    # Let's assume the number of lemon cakes is 4x and chocolate cakes is 5x\n    # Then we have 4x + 5x = remaining_cakes\n    # Which simplifies to 9x = remaining_cakes\n    x = remaining_cakes / 9\n    lemon_cakes = 4 * x\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    total_score_first_four_assignments = 89 * 4\n    fifth_assignment_score = 94\n    total_score_five_assignments = total_score_first_four_assignments + fifth_assignment_score\n    average_score_five_assignments = total_score_five_assignments / 5\n    \n    return average_score_five_assignments\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    \n    # One way to count the number of three-digit integers with exactly two different digits\n    # is to consider the two different digits and their potential positions in a three-digit number.\n    \n    # There are 9 choices for the first digit (1-9, cannot be zero)\n    # For the second digit, there are 9 choices again because it can be one of the remaining digits, including zero.\n    # There are 3 different ways to arrange these two digits (AAB, ABA, BAA), where A is the first digit chosen and B is the second.\n    # So the number of valid combinations is 9 (first digit) * 9 (second digit) * 3 (arrangements)\n    \n    # However, we need to subtract the case where the two digits are identical, which would result in a number with only one unique digit.\n    # For each digit 1-9 chosen as the first digit, there are 2 such numbers (AA0, 0AA).\n    # So we have to subtract 1 * 2 for each digit 1-9.\n    count = 9 * 9 * 3 - 9 * 2\n    \n    return count\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Lily had initially and y be the number Judy had.\n    x, y = symbols('x y')\n    # If Lily gives 's' books to Judy, they'll both have the same number of books.\n    s = symbols('s')\n\n    # Equation: after giving 's' books, Lily and Judy will have the same number of books\n    # x - s = y + s\n    equation = Eq(x - s, y + s)\n\n    # Since we only know that Lily had more books and after giving 's' books they are equal,\n    # We'll solve the equation expressing s in terms of x and y.\n    # s = (x - y) / 2\n\n    solution = solve(equation, s)\n    s_value = solution[s]\n\n    # But we know that s must also equal (x - y) / 2,\n    # since Lily will have to send half the difference to make them equal.\n    # Thereofore, Lily had (x - y) more books than Judy initially.\n    return s_value * 2\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # Ways for the first pass originating from Lily:\n    # Lily can pass to Cici or April, so there are 2 options for the first pass.\n    first_pass_options = 2\n\n    # Ways for the second pass:\n    # After Lily makes the first pass, the one who received can pass to either of the two others.\n    # Thus, there are again 2 options for the second pass.\n    second_pass_options = 2\n\n    # The total number of passing ways is the product of the options for the first and second pass.\n    total_passing_ways = first_pass_options * second_pass_options\n\n    return total_passing_ways\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    alan_value = 74\n    bilal_value = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n    equation4 = Eq(alan, alan_value)\n    equation5 = Eq(bilal, bilal_value)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    wobble_arms = 5\n    total_wibbles = 11\n    total_arms = 81\n\n    # Calculate the total number of arms that wibbles have\n    total_arms_wibbles = total_wibbles * wibble_arms\n\n    # Rest of the arms must belong to wobbles\n    arms_for_wobbles = total_arms - total_arms_wibbles\n\n    # Calculate the number of wobbles\n    num_wobbles = arms_for_wobbles // wobble_arms\n\n    return num_wobbles\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for ones in range(10):\n                if (hundreds + tens + ones == 15 and \n                    tens == 2 * hundreds and \n                    hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    total_amount = 420\n    percentage = 15\n    result = (percentage / 100) * total_amount\n    return result\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    minutes = 32\n    fraction = 1/4 * 1/6 * 1/8\n\n    total_seconds = minutes * 60 * fraction\n    \n    return int(total_seconds)\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 179): # Limit the loop within possible prime numbers for a\n        if isprime(a):\n            # Calculate b based on the equation 7a + 9b = 179\n            b = (179 - 7*a) / 9\n            # Check if b is an integer and prime\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Define a function for the custom operation\n    def custom_operation(a, b):\n        return a + b - (a * b / 910)\n    \n    # Initialize the result with the first value\n    ans = 2016\n    \n    # Apply the custom operation iteratively\n    for i in range(2015, 0, -1):\n        ans = custom_operation(ans, i)\n    \n    # Since 910 is a common factor in all products, the fraction part will cancel out\n    # and the result is simply the sum from 1 to 2016\n    return ans - sum(range(1, 2017))\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    num_boys = 3\n    num_girls = 4\n\n    ways_to_pick = num_boys * num_girls\n\n    return ways_to_pick\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    # Let the two numbers be x and y, with x > y.\n    # According to the problem, we have two equations:\n    # x + y = 80 (sum of the two numbers)\n    # x - y = 40 (difference of the two numbers)\n    \n    # Adding the two equations, we get:\n    # 2x = 120\n    # Therefore, x = 120 / 2 = 60\n    \n    # Now we can find y by substituting x into the first equation:\n    # y = 80 - x\n    y = 80 - 60\n    \n    # Return the smaller number\n    return y\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    # The problem boils down to finding the number of ways to partition 6 - 3 = 3\n    # identical objects (erasers after each child has received one) into 3 parts.\n    return int(math.comb(3 + 3 - 1, 3 - 1))\n\nimport math\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    correct_mark = 5\n    wrong_mark = -2\n    total_score = 23\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_mark + wrong_answers * wrong_mark\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    maverick_speed = 15  # in km/h\n    kelvin_speed = 10    # in km/h\n    kelvin_lead = 10     # in km\n\n    # Calculate the relative speed\n    relative_speed = maverick_speed - kelvin_speed  # in km/h\n\n    # Maverick thinks he caught up in 24 minutes, convert minutes to hours\n    time_maverick_thinks = 24 / 60  # in hours\n\n    # Calculate the distance Maverick covered in 24 minutes\n    distance_maverick_covers = maverick_speed * time_maverick_thinks\n\n    # Kelvin is correct if the distance Maverick covered is less than his lead\n    if distance_maverick_covers < kelvin_lead:\n        # Calculate the actual time it took Maverick to catch up\n        time_to_catch_up = kelvin_lead / relative_speed  # in hours\n        # Convert hours to minutes\n        time_to_catch_up_minutes = time_to_catch_up * 60\n        return time_to_catch_up_minutes\n    else:\n        # Maverick is correct\n        return time_maverick_thinks * 60  # Convert hours back to minutes for consistency\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # There are 41 plum trees planted with 4 meters between each tree.\n    # The total distance covered by plum trees is (41 - 1) * 4 meters.\n    plum_tree_distance = (41 - 1) * 4\n    \n    # On the opposite side, pine trees are planted at intervals of 5 meters.\n    # The number of pine trees is equal to the total distance covered by plum trees divided by\n    # the distance between pine trees, plus one tree for the first tree at the starting point.\n    pine_tree_distance = 5\n    num_pine_trees = (plum_tree_distance // pine_tree_distance) + 1\n    \n    return num_pine_trees\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    people = 10\n    original_hours = 9\n    target_hours = 3\n\n    rate_per_person = 1 / (people * original_hours)\n    needed_people = 1 / (rate_per_person * target_hours)\n\n    return int(needed_people)\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_petrol = week1 + week2 + week3\n    return total_petrol\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_amount = symbols('original_amount')\n    spent_on_book = original_amount * 1/3\n    remaining_after_book = original_amount - spent_on_book\n    spent_on_bag = remaining_after_book * 2/5\n    equation = Eq(spent_on_bag, 120)\n\n    solutions = solve(equation, original_amount)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the age of the younger man, y is the age of the older man\n\n    # \"When I was your age (x), you were only 4 years old.\"\n    # This means the difference in their ages is y - x.\n    # At that time, the older man was x and the younger was 4.\n    # So y - x years ago, the older was x and the younger was 4.\n    equation1 = Eq(y - (y - x), x)\n    equation2 = Eq(x - (y - x), 4)\n\n    # \"When I am your age (x), you will be 61.\"\n    # This means in (y - x) years, the older man will be x and the younger will be 61.\n    equation3 = Eq(y + (x - y), 61)\n\n    solutions = solve((equation1, equation2, equation3), (x, y))\n\n    # We pick the solution where x < y since x is the younger man\n    for solution in solutions:\n        if solution[0] < solution[1]:\n            return solution[0]\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_day1 = 1 - 1/3\n    remaining_after_day2 = 1 - 0.60\n\n    watermelons_left = 48\n    initial_watermelons = watermelons_left / (remaining_after_day1 * remaining_after_day2)\n\n    return int(initial_watermelons)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    sum_squares = (1/6)*n*(n+1)*(2*n+1) - (1/6)*(4)*(4+1)*(2*4+1)\n    return int(sum_squares)\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 9):\n            for x3 in range(1, 9):\n                if x1 < x2 < x3 and x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    ans = 125 * 8 * 49\n    return ans\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    # Jessica sits in front of Judy and they are adjacent\n    # So the number of desks is the sum of desks in front of \n    # Jessica, behind Judy, Jessica's desk and Judy's desk.\n    total_desks = desks_in_front_of_jessica + desks_behind_judy + 2\n\n    return total_desks\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(75 / 100 * x - 5, 2.5)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    total_students = 152\n    # Let the number of boys be 'b' and girls be 'g'\n    # After removing 1/11 of boys and 5 girls, they are equal.\n    # Therefore, b - b/11 = g - 5 -> b = 11 * (g - 5)\n    # Also, b + g = 152 -> 11 * (g - 5) + g = 152\n    # Now we solve the equation for g:\n    g = (total_students + 55) / 12\n    # Calculate original number of boys\n    b = total_students - g\n    return int(b)\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_amount = 1000\n    subtraction_amount = 11\n    count = 0  # to keep track of the iterations\n\n    while initial_amount >= 0:\n        initial_amount -= subtraction_amount\n        count += 1\n\n    first_negative = (1000 - (count * 11))\n    return first_negative\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    people_count = 17 + 1  # Including Sarah\n    sweets_per_person = total_sweets // people_count\n    return sweets_per_person\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    ratio_choc_to_toffees = 12 / 7\n    toffees = chocolates / ratio_choc_to_toffees\n    return int(toffees)\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    middle_number = 0.126\n    known_number = 0.11\n\n    # The other number will have the same distance to the middle number as the known number\n    distance = middle_number - known_number\n\n    # Calculate the other number by adding the distance to the middle number\n    other_number = middle_number + distance\n    \n    return other_number\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for number in range(28, 41):\n        if number % 4 == 0 and 9 in set(i for i in range(1, number + 1) if number % i == 0):\n            return number\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    cost_of_mangoes = 24 * 56\n    cost_of_lychees = 2826 - cost_of_mangoes\n    cost_per_lychee_box = cost_of_lychees / 19\n    return cost_per_lychee_box\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coin_values = [1, 2, 5]\n    totals = set()\n    \n    for coin1 in coin_values:\n        for coin2 in coin_values:\n            for coin3 in coin_values:\n                totals.add(coin1 + coin2 + coin3)\n\n    return len(totals)\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage = 65 / 100\n    decimal = 0.507\n    fraction = 1 / 4\n\n    ans = percentage + decimal + fraction\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "def solution():\n    # We need to solve the following equation A * BC = DEF where DEF is a three-digit number\n    for A in range(1, 10):  # A cannot be 0 as it is the first digit of a multiplier\n        for B in range(0, 10):\n            for C in range(0, 10):\n                # Construct the number BC\n                BC = B * 10 + C\n                DEF = A * BC\n                # Check if DEF has three digits\n                if 100 <= DEF <= 999:\n                    # Get the hundreds, tens, and units digit of DEF\n                    D = DEF // 100\n                    E = (DEF // 10) % 10\n                    F = DEF % 10\n                    # Check the multiplication pattern D = A, E = B and F = C\n                    if D == A and E == B and F == C:\n                        return A + B + C\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    unique_numbers = set()\n    for perm in permutations([1, 1, 2, 2], 3):\n        if perm[0] != 0:  # To ensure it's a three-digit number\n            unique_numbers.add(perm)\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Time Susan spent jogging: 8:30 a.m. - 7:30 a.m. = 1 hour\n    # Distance Susan traveled while jogging: speed * time\n    jogging_distance = 5 * 1\n\n    # Total exercise time: 10:30 a.m. - 7:30 a.m. = 3 hours\n    # Time Susan spent walking: 3 hours - 1 hour (jogging) = 2 hours\n    # Distance Susan traveled while walking: speed * time\n    walking_distance = 3 * 2\n\n    # Total distance traveled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # If x is the smallest of the five numbers, the five numbers are x, x+1, x+2, x+3, x+4\n    # The sum of these numbers is 5x + 10 (since 1+2+3+4 = 10)\n    # This sum should equal 100, so we have the equation 5x + 10 = 100\n    # Solving for x gives us x = (100 - 10)/5\n    x = (100 - 10) / 5\n    return int(x)\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children_with_name, children_without_name = symbols('children_with_name children_without_name')\n\n    equation1 = Eq(10 * children_without_name + 15 * children_with_name, 555)\n    equation2 = Eq(children_with_name + children_without_name, 50)\n\n    solutions = solve((equation1, equation2), (children_with_name, children_without_name))\n\n    return solutions[children_with_name]\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_big_boxes = 3 * 10\n    oranges_in_small_boxes = 7 * 5\n    oranges_left = total_oranges - (oranges_in_big_boxes + oranges_in_small_boxes)\n\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n\n    bags_used = (total_balls - 2) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    q = 44000\n    cube_root_q = q**(1/3)\n    \n    # Since we need q to be an integer, we need to find the largest cube number that divides 44000.\n    # We can do this by finding the cube root of 44000 and then finding the cube of the largest integer\n    # value less than or equal to this cube root.\n    largest_int_cube_root_q = int(cube_root_q)\n    \n    while q % (largest_int_cube_root_q**3) != 0:\n        largest_int_cube_root_q -= 1\n    \n    ans = q // (largest_int_cube_root_q**3)\n    \n    return ans\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Since we're looking for the unique values of P, Q, and R in a multiplication\n    # puzzle where digits have been replaced by letters, we know that:\n    # P, Q, and R must be single-digit integers from 0 to 9.\n    # We also know from standard multiplication rules that R must be even and Q must be 0 or 5.\n\n    # Assuming the following multiplication structure based on standard multiplication practices:\n    #   P Q\n    # x   R\n    # -----\n    # P Q R\n    \n    # R must be even and produce R as the last digit when multiplied by Q.\n    # Starting with possibilities of R being even.\n    for R in range(0, 10, 2):\n        # Q must be 0 or 5 since when multiplied by R it should give a result ending in Q.\n        for Q in [0, 5]:\n            # Now we need to find a P that satisfies the top left multiplication such that:\n            # P * R = PQ (a two-digit number starting with P)\n            # Hence P should be such that when multiplied with R, gives a product with tens place as P itself.\n            # There would certainly be no carry here, since R < 10, and thus P< 10, so PR < 100.\n            \n            # The maximum value P can take is 9 but by standard multiplication rules, \n            # the product of two one-digit numbers cannot exceed 81, so we limit P to 8.\n            # Technically, for P * R = PQ, with P and R being one-digit numbers, P should be <= floor(9/R).\n            for P in range(1, min(9, 10 // R)):\n                if P * R // 10 == P:  # Check the tens digit\n                    # At this point, we've found a combination of P, Q, and R that matches the criteria.\n                    # Since the problem is finding a specific solution to the tiling puzzle, \n                    # we assume one correct solution based on the given puzzle, not finding all possible combinations.\n                    return P + Q + R\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800  # total length of the road in meters\n    trees = 21  # number of trees to be planted\n    intervals = trees - 1  # trees are planted at each interval, so we have one less interval than trees\n\n    distance_between_trees = total_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # In the worst-case scenario, to not get 3 cards of the same number,\n    # you could draw 2 cards of each number, resulting in 2 * 13 = 26 cards.\n    # The next card you draw, no matter what, would be the third card of some number,\n    # since there are only 13 unique numbers.\n    worst_case_without_three_same = 2 * 13\n\n    # Now, we add one card to guarantee that we have at least 3 cards with the same number.\n    cards_to_draw = worst_case_without_three_same + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Define possible cards for each suit\n    spades = {'A', 'J', 'K'}\n    hearts = {'3', '5', 'K'}\n    diamonds = {'2', '7', 'J'}\n    clubs = {'A', '7'}\n\n    # Eddie can't know the card, so it's not a unique number across all suits (i.e., not A or 7)\n    possible_cards = spades.union(hearts, diamonds, clubs) - {'A', '7'}\n\n    # Avril now knows the card, so it must be a unique suit with the remaining possible numbers\n    # This means the remaining numbers must be unique to a single suit\n    for suit, cards in {'spades': spades, 'hearts': hearts, 'diamonds': diamonds, 'clubs': clubs}.items():\n        cards = cards.intersection(possible_cards)\n        if len(cards) == 1:\n            # This is the card because only one card fits the description\n            answer_card_number = cards.pop()\n            answer_card_suit = suit\n            break\n\n    return answer_card_suit.capitalize(), answer_card_number\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3/4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    total_distance = 90\n    number_of_intervals = 9 + 1  # there are 9 + 1 intervals between 10 points (9 trees and 2 buildings)\n\n    distance_between_each_tree = total_distance / number_of_intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    # Andy's notebooks after giving 38 to his sister\n    andy_after_giving = 149 - 38\n    \n    # Andy has the same amount of notebooks as his sister now\n    andy_same_as_sister = andy_after_giving\n    \n    # Therefore, the sister's initial number of notebooks is\n    sister_initial_notebooks = andy_same_as_sister - 38\n\n    return sister_initial_notebooks\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    total_sum = 5 * 5\n    known_sum = 3 + 4 + 6 + 10\n    fifth_number = total_sum - known_sum\n    return fifth_number\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    prime_count = 0\n    # Change each of the four digits of the number 200\n    for i in range(4):\n        for d in range(10):\n            # Convert 200 to a list of digits\n            number_list = [int(x) for x in str(200)]\n            # Change the digit at the ith-place if it's not the original digit\n            if number_list[i] != d:\n                number_list[i] = d\n                # Join the list back into a number\n                new_number = int(''.join(map(str, number_list)))\n                # Check if the new number is prime and not the original 200\n                if new_number != 200 and isprime(new_number):\n                    prime_count += 1\n    return prime_count\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n\n    total_people = people_in_front_of_emily + danny_position_from_back + 1  # adding 1 for Emily\n\n    return total_people\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # x + y = 72, x = 2*y\n    # Solving the two equations: \n    # y + 2*y = 72\n    # 3*y = 72\n    # y = 72 / 3\n    y = 72 / 3\n    return y\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count = 0\n    page = 1\n    while count < 30:\n        if '5' in str(page):\n            count += str(page).count('5')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n\n    cost_per_cup = total_cost / number_of_cups\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Time taken to cut a piece of wood into 4 sections is 12 minutes\n    time_for_4_cuts = 12\n\n    # Number of cuts to divide the wood into 5 sections is 4\n    cuts_needed_for_5_sections = 4\n    \n    # The time taken to make each cut is the same, so we just multiply the number\n    # of cuts needed for 5 sections by the time per cut\n    time_per_cut = time_for_4_cuts / cuts_needed_for_5_sections\n    \n    # Emma needs to make 5 cuts to get 5 sections from the original piece of wood\n    number_of_cuts_for_5_sections = 5\n    \n    # Calculate the time she needs to make 5 cuts\n    time_for_5_cuts = number_of_cuts_for_5_sections * time_per_cut\n    \n    return time_for_5_cuts\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of days given to finish the story and p be the number of pages in the story.\n    d, p = symbols('d p')\n\n    # If Vanessa reads 30 pages a day, she finishes 2 days after the deadline: 30*(d+2) = p\n    equation1 = Eq(30 * (d + 2), p)\n\n    # If she reads 39 pages a day, she finishes 4 days before the deadline: 39*(d-4) = p\n    equation2 = Eq(39 * (d - 4), p)\n\n    # Solving the two equations for d and p\n    solutions = solve((equation1, equation2), (d, p))\n\n    return solutions[d], solutions[p]\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    ans = 7.298 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_worker_per_day = 2\n    total_rooms = 4\n    workers = 2\n\n    days = (total_rooms / (rooms_per_worker_per_day * workers))\n\n    return days\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    # Implementation of the correct equation step by step\n    # Given equation: 13 - 2(2x - 3) = 5 - (x - 2)\n    # By manually checking the steps, identify the mistake in the provided solution:\n    # Correct step: 13 - 4x + 6 = 5 - x + 2\n    # Simplifying both sides:\n    left_side = 13 - 4 + 6\n    right_side = 5 + x + 2\n    # Further simplification\n    left_side = 13 + 6 - 4\n    right_side = 5 + 2 + x\n    # Combine like terms\n    left_side = 15\n    right_side = 7 + x\n    # Isolate x on one side of the equation\n    x = left_side - right_side\n   \n    return x\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_hour = 3600\n    seconds_per_page = seconds_per_hour / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    # Let's denote the cost of 1 apple as 'a' and the cost of 1 orange as 'o'.\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of apple and orange\n    a, o = symbols('a o')\n\n    # Set up the equations based on the given information\n    eq1 = Eq(a + 2*o, 48)  # Kate's purchase: 1 apple and 2 oranges for 48p\n    eq2 = Eq(a + o, 31)     # Jade's purchase: 1 apple and 1 orange for 31p\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2), (a, o))\n\n    # We need to find out the cost of 1 orange\n    cost_of_orange = solution[o]\n\n    return cost_of_orange\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_away = total_badges * (3/8)\n    remaining_badges = total_badges - given_away\n    return remaining_badges\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for the amount of pocket money\n    pocket_money = symbols('pocket_money')\n\n    # Define the cost of one tennis ball as a symbol\n    cost_per_ball = symbols('cost_per_ball')\n\n    # two equations based on the given scenarios\n    # Week 1: 4 tennis balls + 27p left over = pocket money\n    equation1 = Eq((4 * cost_per_ball) + 27, pocket_money)\n    # Week 2: 2 tennis balls + £1.51 (151p) left over = pocket money\n    equation2 = Eq((2 * cost_per_ball) + 151, pocket_money)\n\n    # Solve the system of equations to find the cost per ball and pocket money\n    solutions = solve((equation1, equation2), (cost_per_ball, pocket_money))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n    total_steps = steps_per_staircase * total_staircases\n    return total_steps\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n\n    # Iterate over the hundreds place from 1 to 9 (since 0 is not a valid hundreds digit)\n    for i in range(1, 10):\n        # Iterate over the tens place from 0 to 9\n        for j in range(10):\n            # Iterate over the units place from 0 to 9\n            for k in range(10):\n                # A number has exactly one zero if either tens or units is zero, but not both, and hundreds is not zero\n                if (j == 0) ^ (k == 0):\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    behind_louis = 14\n    in_front_of_louis = total_people - behind_louis - 1  # Subtract 1 for Louis himself\n\n    return in_front_of_louis\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    return sum(range(11, 32, 2))\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n    # Elias had 5 times as many stickers as Aileen.\n    equation1 = Eq(elias, 5 * aileen)\n    # After Elias gave away 88 stickers and Aileen lost 8 stickers, they had the same number of stickers left.\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (elias, aileen))\n    elias_final = solutions[elias] - 88\n    aileen_final = solutions[aileen] - 8\n\n    return elias_final, aileen_final\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    thomas, gerald = symbols('thomas gerald')\n\n    equation1 = Eq(thomas, 5/3 * gerald)\n    equation2 = Eq(thomas + gerald, 104)\n\n    solutions = solve((equation1, equation2), (thomas, gerald))\n\n    difference = solutions[thomas] - solutions[gerald]\n\n    return difference\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    return 730 / 1000\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    butter_for_one_batch = 20\n    cookies_per_batch = 25\n\n    # Calculate cookies per gram of butter\n    cookies_per_gram = cookies_per_batch / butter_for_one_batch\n\n    # Calculate number of cookies for 48 grams of butter\n    cookies_with_48_grams = cookies_per_gram * 48\n\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    return (8/11) * 1.54\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert the numbers from base 8 to base 10\n    base_10_number1 = int(str(25), 8)\n    base_10_number2 = int(str(37), 8)\n\n    # Calculate the sum in base 10\n    sum_base_10 = base_10_number1 + base_10_number2\n\n    # Convert the sum back to base 8\n    sum_base_8 = oct(sum_base_10)[2:]  # [2:] is used to remove the \"0o\" prefix\n\n    return int(sum_base_8)\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    ans = 5987 + 67 + 983\n    return ans\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    days = (157 - 82) / (25 - 20)\n    initial_amount_gordon = 157 + (days * 25)\n    return initial_amount_gordon\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n * (n + 1) // 2 + n * (n - 1) * (n - 2) // 6\n    return ans\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    # Let x be the number of tennis rackets purchased initially\n    cost_price = 150  # cost price per racket\n    selling_price = 175  # selling price per racket\n    remaining_rackets = 8  # rackets left over\n    profit = 525  # profit made\n    \n    # The proceeds when 8 rackets are left is equal to:\n    # initial cost price + profit\n    # proceeds = selling price * (x - 8)\n    # initial cost price = cost price * x\n    # equation: selling_price * (x - 8) = cost_price * x + profit\n    # 175 * (x - 8) = 150 * x + 525\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(selling_price * (x - remaining_rackets), cost_price * x + profit)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2*x - 4 * (5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Assume the number of boys is b\n    # Then the number of girls is g\n    # And the number of children (boys + girls) is c = b + g\n    # The number of adults is a\n\n    # We have the following relationships:\n    # b = (2/7) * g  => g = (7/2) * b\n    # a = (2/3) * c = (2/3) * (b + g)\n\n    # According to the question:\n    # (2/3) * (b + g) - b = 1228\n    # Substitute g = (7/2) * b into the above equation:\n    # (2/3) * (b + (7/2) * b) - b = 1228\n    # b * (2/3 + 7/3) - b = 1228\n    # Simplify the equation to find b:\n    # b * (3 + 7)/3 - b = 1228\n    # 10/3 * b - b = 1228\n    # b * (10/3 - 3/3) = 1228\n    # b * 7/3 = 1228\n    # b = 1228 * 3 / 7\n    b = 1228 * 3 // 7\n\n    # Now find g using the relationship g = (7/2) * b\n    g = (7 * b) // 2\n\n    # And find the number of adults a using the relationship a = (2/3) * c\n    a = (2 * (b + g)) // 3\n\n    # Finally, the total number of people at the park p is the sum of adults and children\n    p = a + b + g\n\n    return p\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):  # Ensure x2 > x1\n            for x3 in range(x2+1, 14):  # Ensure x3 > x2\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n\n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    bad_melons = total_melons / 5\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.5\n    total_cost = 15\n    total_revenue = remaining_melons * selling_price_per_melon\n    profit = total_revenue - total_cost\n    \n    return profit\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10\n    cross_interval = 1\n    num_crosses = (line_length // cross_interval) + 1\n    return num_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    from math import gcd\n\n    # Total number of oranges and apples\n    total_oranges = 150\n    total_apples = 100\n\n    # Leftover oranges and apples\n    leftover_oranges = 17\n    leftover_apples = 5\n\n    # Number of oranges and apples divided among neighbors\n    divisible_oranges = total_oranges - leftover_oranges # oranges that can be divided\n    divisible_apples = total_apples - leftover_apples # apples that can be divided\n\n    # Find the greatest common divisor which will give us the number of neighbours\n    neighbours = gcd(divisible_oranges, divisible_apples)\n\n    return neighbours\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_first_and_sixth = 60\n    number_of_intervals_1_to_6 = 6 - 1\n    interval_distance = distance_between_first_and_sixth / number_of_intervals_1_to_6\n\n    number_of_intervals_1_to_9 = 9 - 1\n    distance_between_first_and_ninth = interval_distance * number_of_intervals_1_to_9\n\n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6  # Length of the repeating pattern: \"red, red, green, yellow, yellow, green\"\n    balloons_total = 75  # Total number of balloons\n\n    green_balloons_in_pattern = 2  # Number of green balloons in one full pattern\n    full_patterns = balloons_total // pattern_length  # Number of complete patterns\n    remaining_balloons = balloons_total % pattern_length  # Remaining balloons after full patterns\n\n    # Count the green balloons in the remaining pattern\n    remaining_green_balloons = 0\n    if remaining_balloons > 2:\n        remaining_green_balloons += 1\n    if remaining_balloons == 6:\n        remaining_green_balloons += 1\n\n    green_balloons_total = (full_patterns * green_balloons_in_pattern) + remaining_green_balloons\n\n    return green_balloons_total\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "from math import comb\n\ndef solution():\n    num_teams = 3\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    # Let j be the number of Jessica's marbles before the exchange,\n    # and let s be the number of Sandra's marbles before the exchange.\n    from sympy import symbols, Eq, solve\n    \n    s, j = symbols('s j')\n    \n    # After giving 13 marbles, Sandra's marbles = s - 13\n    # After receiving 13 marbles, Jessica's marbles = j + 13\n    \n    # The information gives us two equations:\n    # 1. Sandra had more marbles than Jessica initially: s > j\n    # 2. After the transfer, Sandra had 6 fewer marbles than Jessica: (s - 13) + 6 = j + 13\n    \n    # Rearrange the second equation to get s in terms of j and solve for s and j\n    equation = Eq(s - 13 + 6, j + 13)\n    \n    # Solve the equation under the condition that s > j\n    solutions = solve((equation, s > j), (s, j))\n    \n    # Since we want to know how many more marbles Sandra had than Jessica originally\n    more_marbles = solutions[s] - solutions[j]\n    \n    return more_marbles\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    # Let x be the total value of the jewels in box P before the transfer\n    # Let y be the total value of the jewels in box Q before the transfer\n    # After the transfer:\n    # New total value of jewels in P: x - 5000\n    # New total value of jewels in Q: y + 5000\n    # New average value of jewels in P: (x - 5000) / 3\n    # New average value of jewels in Q: (y + 5000) / 3\n    # According to the problem, we have the following equations:\n    # (x - 5000) / 3 = (x / 3) + 1000\n    # (y + 5000) / 3 = (y / 3) + 1000\n    # Solving the equations for x and y, respectively:\n    # x - 5000 = x + 3000 => x - x = 5000 + 3000 => 0 = 8000 (impossible)\n    # y + 5000 = y + 3000 => y - y = 5000 - 3000 => 0 = 2000 (impossible)\n    # Since these results are impossible, revise the equations considering that the average value increases for each box:\n    # New average value of jewels in P: (x - 5000) / 2 (since one jewel was transferred out, only 2 left)\n    # New average value of jewels in Q: (y + 5000) / 4 (since one jewel was transferred in, 4 in total now)\n    # (x - 5000) / 2 = (x / 3) + 1000 => x - 5000 = 2/3 * x + 2000\n    # (y + 5000) / 4 = (y / 3) + 1000 => y + 5000 = 4/3 * y + 4000\n    # Multiplying all terms by 3 to eliminate the fractions and solving for x and y:\n    # 3x - 15000 = 2x + 6000 => x = 21000\n    # y + 15000 = 4y + 12000 => 3y = 3000 => y = 1000\n    # The total value of all 6 jewels is x + y:\n    ans = 21000 + 1000\n    return ans\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    # We setup the equation 2/3 * x = 8, and solve for x\n    x = 8 * (3/2)\n    return x\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    n = 1\n    count_1 = count_2 = 0\n    \n    while True:\n        str_n = str(n)\n        count_1 += str_n.count('1')\n        count_2 += str_n.count('2')\n        \n        if count_1 == 15 and count_2 == 14:\n            return n\n        \n        n += 1\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Kate shared the candy with her seven friends, each receiving 26 pieces\n    shared_candy = 7 * 26\n\n    # She left with 22 pieces of candy\n    kate_left_with = 22\n\n    # Total candy brought to school\n    total_candy_at_school = shared_candy + kate_left_with\n\n    # The total candy at school is 2/3 of the initial amount (since she ate 1/3 at home)\n    # Let x be the initial amount of candy\n    # (2/3) * x = total_candy_at_school\n    \n    # Calculate the initial amount of candy\n    initial_candy = (total_candy_at_school * 3) // 2\n\n    return initial_candy\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    # Andy's position is 9 while Bob's position is 5\n    andy_position = 9\n    bob_position = 5\n\n    # The ratio of speeds of Andy to Bob\n    speed_ratio = bob_position / andy_position\n\n    # Andy's final position (top floor)\n    andy_final_position = 25\n\n    # Calculate Bob's final position based on the speed ratio\n    bob_final_position = speed_ratio * andy_final_position\n\n    return int(bob_final_position)\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total words be w and the original speed be s (words/minute)\n    w, s = symbols('w s')\n\n    # Original speed equation: time * speed = total words\n    equation1 = Eq(s * 3, w)\n\n    # Increased speed equation: (time - 1) * (speed + 30) = total words\n    equation2 = Eq((s + 30) * 2, w)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, s))\n\n    return solutions[w]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [False] * 10  # False means off, True means on\n\n    # Ms. Lily's action: press switches of every other light starting with 1\n    for i in range(0, 10, 2):\n        lights[i] = not lights[i]\n    \n    # Sam's action: press switches of lights with even numbers 7 times\n    for i in range(1, 10, 2):\n        if lights[i]:\n            if 7 % 2 == 1:  # when pressed odd number of times, the light's state will change\n                lights[i] = not lights[i]\n        else:\n            if 7 % 2 == 1:\n                lights[i] = not lights[i]\n    \n    # Count the number of lights that are on\n    count = lights.count(True)\n    return count\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial amount of water in Pail A be a and in Pail B be b\n    a, b = symbols('a b')\n\n    # Equation 1: A has 2/3 the amount of B initially\n    equation1 = Eq(a, 2 * b / 3)\n\n    # Equation 2: After pouring, A has 7/8 the amount of B\n    # Thus, A + 4 = 7/8 * (B - 4)\n    equation2 = Eq(a + 4, 7 * (b - 4) / 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Total amount of water in both pails is a + b\n    total_water = solutions[a] + solutions[b]\n\n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_distance = 8\n    climb_distance = 3\n    slip_distance = 2\n    days = 0\n    current_height = 0\n\n    while True:\n        days += 1\n        current_height += climb_distance\n        if current_height >= total_distance:\n            break\n        current_height -= slip_distance\n\n    return days\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(table, 2 * chair)  # A table costs two times a chair\n    equation2 = Eq(2 * table + 3 * chair, 280)  # Two tables and three chairs cost $280\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n    \n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n    \n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    # Number of spare parts already made\n    parts_made = 20\n    # Time taken to make the parts_made\n    time_taken = 2\n    # Speed of making parts per hour\n    speed_per_hour = parts_made / time_taken\n\n    # Total parts needed to be made\n    total_parts_needed = 100\n    # Remaining parts to be made\n    remaining_parts = total_parts_needed - parts_made\n    # Time needed to make remaining parts at the same speed\n    time_needed = remaining_parts / speed_per_hour\n\n    # Check if Eddy is correct\n    eddy_is_correct = time_needed == 10\n    return (eddy_is_correct, time_needed)\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    total_volume = 900\n    initial_sugar_percentage = 0.06\n    desired_sugar_percentage = 0.10\n\n    # Calculate the initial amount of sugar in ml\n    initial_sugar_content = total_volume * initial_sugar_percentage\n    \n    # Let x be the amount of sugar to be added\n    # The total volume after adding sugar is total_volume + x\n    # The total sugar content after adding sugar is initial_sugar_content + x\n    # According to the problem, we set an equation:\n    # (initial_sugar_content + x) / (total_volume + x) = desired_sugar_percentage\n\n    # Solve for x\n    x = symbols('x')\n    equation = Eq((initial_sugar_content + x) / (total_volume + x), desired_sugar_percentage)\n    sol = solve(equation, x)\n\n    # Since there might be more than one solution, take the positive one\n    added_sugar = next(sol_iter for sol_iter in sol if sol_iter.is_real and sol_iter > 0)\n\n    return added_sugar\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    num_bars = 4\n    total_cost = cost_per_bar * num_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # To ensure we get 3 balls of different colors, we need to consider the worst case scenario.\n    # If we are very unlucky, we could pick all 5 balls of one color (say, red) first.\n    # To ensure we get a different color, we might then pick all 5 balls of another color (say, white).\n    # At this point, we have 5 red and 5 white balls.\n    # The next ball we pick must then be of the third color (yellow) to have all three different colored balls.\n    # So the total number of balls we need to draw is 5(red) + 5(white) + 1(yellow) = 11 balls.\n    \n    return 5 + 5 + 1  # 11 balls\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if 120 + m == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hisham, melissa = symbols('hisham melissa')\n    \n    # Melissa had twice as many cards as Hisham\n    equation1 = Eq(melissa, 2 * hisham)\n    # Total number of cards\n    equation2 = Eq(hisham + melissa, 876)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hisham, melissa))\n    \n    # Calculate how many cards Melissa should give to Hisham\n    cards_to_give = (solutions[melissa] - solutions[hisham]) // 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # We need to find at least how many numbers to ensure two numbers\n    # have a product divisible by 4.\n    # There are only three cases for any integer with respect to divisibility by 4:\n    # A number is divisible by 4, a number has a remainder of 2 when divided by 4 (even, but not divisible by 4),\n    # and a number is odd (not divisible by 2 and by consequence not divisible by 4).\n\n    # From 10 to 41, there are 8 multiples of 4 (12, 16, 20, 24, 28, 32, 36, 40).\n    # There are 16 odd numbers (11, 13, ... 39, 41).\n    # The worst case to ensure two numbers have a product divisible by 4 is to pick all odd numbers and one number\n    # that is divisible by 2 but not 4.\n    # Since after we have all odd numbers, picking any additional number would give us a product divisible by 4.\n\n    # So we need total odd numbers plus 1.\n    count_odds = 16\n    at_least_numbers = count_odds + 1\n\n    return at_least_numbers\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    # The common difference is found by subtracting the first term from the third term,\n    # and then dividing by the number of terms between them.\n    common_difference = (third_term - first_term) / (3 - 1)\n    return common_difference\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 2 * 100 + 20  # Convert 2 m 20 cm to cm\n    half_length_cm = total_length_cm / 2  # Divide the total length by 2 to get the length of each piece\n\n    return half_length_cm\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    result = sum((50 - i) * (50 + i) for i in range(5))\n    return result\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n    from math import sqrt, floor\n\n    # Find the smallest two-digit prime number\n    two_digit_primes = list(primerange(10, 100))\n    smallest_two_digit_prime = two_digit_primes[0]\n\n    # Find the largest two-digit square number\n    largest_two_digit_square = floor(sqrt(99)) ** 2\n\n    # Calculate the product\n    ans = smallest_two_digit_prime * largest_two_digit_square\n    return ans\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian's age at his 14th birthday\n    brian_age = 14\n    # Father's age at Brian's 14th birthday\n    father_age = 41\n\n    # The age difference between Brian and his father\n    age_difference = father_age - brian_age\n\n    # Loop until the ages are reversed, starting from the year after Brian's 14th birthday\n    while True:\n        # Increment both ages by 1 year\n        brian_age += 1\n        father_age += 1\n        # Check if Brian's age is the reverse of his father's age\n        if str(father_age) == str(brian_age)[::-1]:\n            break\n\n    # Return Brian's age when his age is the reverse of his father's\n    return brian_age\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_N = None\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = perm\n        N = a + (b/c) + ((d/e)*f) - (g + (h/j))\n        if N.is_integer():\n            if max_N is None or N > max_N:\n                max_N = N\n    return int(max_N)\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd = 1 / 0.96\n    coffee_cost_euro = 4.8\n    coffee_cost_usd = coffee_cost_euro * euro_to_usd\n    return coffee_cost_usd\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "def solution():\n    from math import comb\n    \n    # Number of ways to choose 2 balls of the same color from 5 colors\n    same_color_pairs = 5 * comb(2, 2)\n    \n    # Number of ways to choose 2 balls of different colors\n    different_color_pairs = comb(5, 2)\n    \n    # Total unique pairs of balls\n    total_pairs = same_color_pairs + different_color_pairs\n\n    # To ensure that two students have at least one pair of the same color\n    # The number of students must be one more than the possible unique pairs\n    students = total_pairs + 1\n    \n    return students\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    # Initialize variables to store the highest product and the corresponding A, B, C\n    highest_product = 0\n    max_A, max_B, max_C = 0, 0, 0\n    \n    # Iterate through all possible values of A, B, and C\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            product = A * B * C\n            # Update the highest product and corresponding A, B, C, if the current product is greater\n            if product > highest_product:\n                highest_product = product\n                max_A, max_B, max_C = A, B, C\n                \n    return highest_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    # Total number of books originally\n    total_books_original = 3900\n    \n    # Number of books originally: Chinese, Malay, English\n    chinese_books_original = (4 / 13) * total_books_original\n    malay_books_original = (3 / 13) * total_books_original\n    english_books_original = (6 / 13) * total_books_original\n\n    # Number of new books bought\n    new_books = 510\n\n    # Increased number of Chinese and Malay books\n    chinese_books_increase = chinese_books_original * 0.20\n    malay_books_increase = malay_books_original * 0.10\n\n    # Calculate the new English books based on the increase and new purchases\n    new_english_books = new_books - (chinese_books_increase + malay_books_increase)\n\n    # Calculate the percentage increase in the number of English books\n    percentage_increase_english = (new_english_books / english_books_original) * 100\n\n    return percentage_increase_english\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    juniors = 12\n    seniors = 8\n    total_participants = juniors + seniors\n    \n    average_juniors = 10\n    average_total = 14\n\n    total_score = average_total * total_participants\n    juniors_score = average_juniors * juniors\n    seniors_score = total_score - juniors_score\n    average_seniors = seniors_score / seniors\n    \n    return average_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    # When rounded to the nearest hundred, 9700 could have been rounded up or down.\n    # To find the smallest possible value of the number, we need to consider the number\n    # just before 9700 would round up to the next hundred, which is 9750.\n    smallest_possible_value = 9650\n\n    return smallest_possible_value\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago, combined age of the 2 dogs was 10 years\n    combined_age_four_years_ago = 10\n    \n    # Every year each dog ages by 1 year, so together they age by 2 years every year\n    # From four years ago to now, 4 years have passed, so we add 4 * 2 years to their combined age\n    combined_age_now = combined_age_four_years_ago + (4 * 2)\n    \n    # In 2 years, they will age 2 more years each, again we add 2 * 2 years to their combined age to get the future combined age\n    combined_age_in_2_years = combined_age_now + (2 * 2)\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # Using Pigeonhole Principle\n    containers = 10\n    min_apples_to_ensure_at_least_two_in_one = (containers - 1) + 2\n    return min_apples_to_ensure_at_least_two_in_one\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * (10 ** -2022)\n    denominator = 92 * (10 ** -2023)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    correct_answers = int(0.60 * total_questions)\n    wrong_answers = total_questions - correct_answers\n    unanswered_questions = total_questions - correct_answers - wrong_answers\n\n    # Marks for correct, wrong, and unanswered questions\n    mark_for_correct = 5\n    mark_for_wrong = -2\n    mark_for_unanswered = 1\n\n    # Equation based on the problem statement:\n    # 5 * correct_answers - 2 * wrong_answers + unanswered_questions = total_marks\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        unanswered = total_questions - correct - wrong\n        if 5 * correct - 2 * wrong + unanswered == 264:\n            return correct\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_initial = 160\n    butter_initial = 50\n    cookies_final = 300\n\n    butter_final = (butter_initial * cookies_final) / cookies_initial\n\n    return butter_final\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    return 15.9 * 2\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    return (19 + 2) // 3\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 24  # Rex answered all but one of the questions\n    total_points = 66\n\n    # Let's represent correct answers with \"c\" and incorrect answers with \"i\".\n    # For each correct answer, Rex gains 4 points.\n    # For each incorrect answer, Rex loses 2 points.\n    # Rex's score is the sum of points from correct and incorrect answers.\n    # If \"c\" is the number of correct answers, then \"i\" is total_questions - \"c\".\n    # So, the equation representing Rex's score is: 4c - 2i = total_points\n    # Since Rex answered all but one, we have another equation: c + i = total_questions\n    # Solving these two equations will give us the number of correct answers.\n\n    for c in range(total_questions + 1):\n        i = total_questions - c\n        score = 4 * c - 2 * i\n        if score == total_points:\n            return c\n\n    return None  # If no solution is found (which should not be the case)\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n\n    # Dedra had 4 times as much money as Timm at first\n    equation1 = Eq(dedra, 4 * timm)\n\n    # Both received $72 each\n    new_dedra = dedra + 72\n    new_timm = timm + 72\n\n    # Now, Dedra has twice as much money as Timm\n    equation2 = Eq(new_dedra, 2 * new_timm)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (dedra, timm))\n\n    return solutions[dedra]\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jane, jack = symbols('jane jack')\n    \n    equation1 = Eq(jane, jack + 5)\n    equation2 = Eq(jane + jack, 33)\n    \n    solutions = solve((equation1, equation2), (jane, jack))\n    \n    return solutions[jane]\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    # Initialize length counter and the current number to be appended to the sequence\n    length = 0\n    current_number = 1\n    \n    # Continue appending numbers until we reach a length of 1000 digits\n    while length < 1000:\n        # Convert current number to string to find its length\n        str_number = str(current_number)\n        # Add the length of the current number to the total length\n        length += len(str_number)\n        # If the total length exceeds 1000, break the loop as we have the number containing the 1000th digit\n        if length >= 1000:\n            break\n        # Increment the current number\n        current_number += 1\n    \n    # When the length exceeds 1000, we find the excess length beyond 1000\n    excess_length = length - 1000\n    # The unit digit of N will be at the (excess_length + 1)th position from the end of the current number's string\n    unit_digit = str_number[-(excess_length + 1)]\n    \n    return int(unit_digit)\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n\n    people_in_front = total_people - people_behind - 1\n\n    return people_in_front\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    # Inclusion-Exclusion Principle:\n    # |A ∪ C ∪ E| = |A| + |C| + |E| - |A ∩ C| - |A ∩ E| - |C ∩ E| + |A ∩ C ∩ E|\n    total = A + C + E - AC - AE - CE + ACE\n    return total\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    total_debt = 5.04\n\n    num_months = total_debt / monthly_salary\n\n    return num_months\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    # Number of ways to choose 3 pupils out of 18 is given by 18! / (3! * (18-3)!)\n    # But since the order of seating matters, we need to consider permutations, not combinations.\n    # Thus, the number of ways to seat 3 pupils in a row is 18! / (18-3)!\n    \n    total_ways = factorial(18) // factorial(18 - 3)\n    return total_ways\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica_money = 9\n    jonathan_money = 3 * veronica_money\n    rachel_money = jonathan_money + 48\n    return rachel_money\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Jake's and John's current ages\n    jake, john = symbols('jake john')\n\n    # Write the equations based on the problem statement\n    # The sum of their ages is 44\n    equation1 = Eq(jake + john, 44)\n    # In 14 years, Jake will be twice as old as John\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jake, john))\n\n    # Calculate John's age in 14 years\n    john_future_age = solutions[john] + 14\n\n    return john_future_age\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jason, bruce, willie = symbols('jack jason bruce willie')\n    jack_age = 4\n    equation1 = Eq(jack, jack_age)\n    equation2 = Eq(bruce, jason)\n    equation3 = Eq(willie, jason)\n    equation4 = Eq(jack + jason + bruce + willie, 19)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (jack, jason, bruce, willie))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    # Let x be the number of friends and y be the number of erasers Andy had.\n    \n    # If each friend received 5 erasers, Andy would have 3 left.\n    # Therefore, y = 5x + 3\n    \n    # If each friend received 6 erasers, Andy would be short of 2 erasers.\n    # Therefore, y + 2 = 6x\n    \n    # Equating both equations we get:\n    # 5x + 3 = 6x - 2\n    \n    # Simplifying:\n    # x = 5\n    \n    # Now substituting the value of x in y = 5x + 3:\n    x = 5\n    y = 5 * x + 3\n    \n    return y\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    return 2018 - 786\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    total = 0\n    for i in range(1, 2008):    \n        total += ((i ** 2) + ((i+1) ** 2)) / (i * (i+1))\n    ans = round(total)\n    return ans\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    youngest = symbols('youngest')\n    equation = Eq(youngest + 8 * 15 / 12, 6 * youngest)\n    solutions = solve(equation, youngest)\n    return solutions[0]\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    for i in range(1000, 10000):\n        new_number = int(str(i)[-1] + str(i)[:-1])\n        if new_number - i == 5877:\n            return i\n    return None  # In case there is no solution, which should not happen\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) + 1 # First multiple of 11 greater than 50\n    last_multiple = 150 // 11       # Last multiple of 11 less than 150\n    count = last_multiple - first_multiple + 1\n    return count\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let's denote the number of sweets Jiaxiang has as j.\n    # According to the question, Cayden has 5 more sweets than Jiaxiang, \n    # which means Cayden has j + 5 sweets.\n    \n    # If Cayden gives Jiaxiang 10 sweets, Jiaxiang will have j + 10 sweets,\n    # and Cayden will have (j + 5) - 10 sweets.\n    \n    # The difference in number of sweets they have now will be:\n    # abs((j + 10) - ((j + 5) - 10)) which simplifies to:\n    # abs(j + 10 - j - 5 + 10) which simplifies to:\n    # abs(15)\n    # The absolute value is not necessary here as 15 is positive, but it was used\n    # to express the difference correctly regardless of order.\n    \n    return 15\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2 / 15)\n    return ans\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # The question requires us to insert brackets in the equation.\n    # We have to try all possible combinations of brackets to find the smallest result.\n    # With two pairs of brackets, there are numerous possible combinations.\n    # However, since we are looking for the smallest result, we can apply the brackets to multiplication first\n    # and ensure that subtraction occurs before addition.\n    \n    # We will try to minimize the multiplication by surrounding it with brackets and preceding it with a subtraction.\n    # The equation with brackets would then look like: 15 + (5 x (5 + 15)) - 6 + 7\n    # The operations within the innermost brackets happen first: 5 x 20 = 100\n    # Then we subtract 6 from the result: 100 - 6 = 94\n    # Then we add 15 to the result: 15 + 94 = 109\n    # Finally, add 7: 109 + 7 = 116\n    \n    # Since we can't apply brackets across the different terms as there are strict rules for it, this configuration\n    # gives us the smallest result possible based on priority of operations and the given conditions.\n    \n    return 15 + (5 * (5 + 15)) - 6 + 7\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Calculate the total score of the first five pupils\n    total_score_five_pupils = 5 * 72\n\n    # Calculate the new total score including Mary's score\n    total_score_six_pupils = 6 * 75\n\n    # Calculate Mary's score by subtracting\n    marys_score = total_score_six_pupils - total_score_five_pupils\n\n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60  # m/s\n\n    # The total distance the train needs to cover to completely cross the bridge\n    total_distance = train_length + bridge_length\n\n    # Time taken to cross the bridge is the total distance divided by the speed\n    time_taken = total_distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n\n    return afternoon_cookies\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    time = distance / speed\n    return int(time)\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    # Distributing 11 identical donuts to 4 students with each getting at least one donut\n    # is equivalent to placing 3 dividers among the 10 remaining donuts after each student gets one.\n    # This is a problem of combinations with repetition.\n    total_donuts = 11 - 4  # each student gets one, so we distribute the rest\n    dividers = 4 - 1       # we need 3 dividers for 4 students\n    # The number of ways to place the dividers is given by the combination with repetition formula\n    ways = comb(total_donuts + dividers, dividers)\n    return ways\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    # Looking for the largest 3-digit odd number divisible by 9.\n    # The logic is as follows:\n    # Step 1: Start with the highest 3-digit number which is 999.\n    # Step 2: Since the number should be odd, check if it's odd, if not, decrease by 1.\n    # Step 3: Apply divisibility by 9 (The sum of digits must be divisible by 9).\n    # Step 4: Check if the tens digit is divisible by 4.\n    # If all three conditions match, we found the number, if not, continue decreasing by 2 (to ensure oddness)\n    \n    for num in range(999, 100, -2):  # Start from 999 and go down by 2 until you reach the first 3-digit number, which is 100.\n        if num % 9 == 0:  # Divisible by 9\n            tens_digit = (num // 10) % 10  # Get the tens digit\n            \n            if tens_digit % 4 == 0:  # Tens digit is divisible by 4\n                return num  # This is the largest number that satisfies all conditions\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    return 0.2 * 7\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # Number of marbles of each color\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # Jane wants to get 4 marbles of different colors.\n    # To ensure she gets them in the worst case scenario, she could draw all but one of the colors fully.\n    # This is the pigeonhole principle where she will have to draw all of one color potentially before getting\n    # a marble of a new color. So, she takes the most abundant three colors in their entirety.\n\n    # Draw all but one of the most abundant colors, then add one more to get the guaranteed different color.\n    ans = (green + blue + red) - 1 + 1\n\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temperature = 4\n    drop_by_midnight = 11\n    midnight_temperature = midday_temperature - drop_by_midnight\n    return midnight_temperature\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    total_change = 500  # 5 pounds in pence\n    \n    # The possible coins in pence that are multiples of 5 and less than 500\n    coins = [5, 10, 20, 50, 100, 200]\n    spent = None\n\n    # Iterate over all possible combinations of 5 different coins\n    for a in coins:\n        for b in coins:\n            if b == a:\n                continue\n            for c in coins:\n                if c in (a, b):\n                    continue\n                for d in coins:\n                    if d in (a, b, c):\n                        continue\n                    for e in coins:\n                        if e in (a, b, c, d):\n                            continue\n                        # Check if the total of these 5 different coins adds up to the change received\n                        if a + b + c + d + e == total_change:\n                            # If so, calculate the amount spent\n                            spent = 500 - total_change\n                            return spent\n    return spent\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 23\n    \n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    hives_for_50kg = 5\n    honey_per_hive = 50 / hives_for_50kg\n    hives_needed_for_90kg = 90 / honey_per_hive\n    additional_hives_needed = hives_needed_for_90kg - hives_for_50kg\n    return int(additional_hives_needed)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ali, kumar = symbols('ali kumar')\n    \n    # Initial ratio of erasers between Ali and Kumar\n    initial_ratio = Eq(ali / kumar, 7/5)\n    # After giving erasers, the ratio becomes 1:5\n    new_ratio = Eq((ali - 10) / (kumar + 10), 1/5)\n    \n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (ali, kumar))\n    total_erasers = solutions[ali] + solutions[kumar]\n\n    return total_erasers\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "import math\n\ndef solution():\n    east_west_distance = 15 - 9  # Distance moved east minus distance moved west\n    north_south_distance = 3 + 5  # Sum of distances moved north\n    shortest_distance = math.sqrt(east_west_distance**2 + north_south_distance**2)  # Pythagorean theorem\n    return shortest_distance\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    # Let x be the number of $10 notes, and y be the number of $2 notes. Then we have:\n    # x + y = 38 (Equation 1)\n    # After spending, David has:\n    # 0.2 * x = 3 * (0.25 * y) (Equation 2)\n    # We also need to calculate the cost of the fan, which is:\n    # spend_10_notes = 0.8 * x * 10\n    # spend_2_notes = 0.75 * y * 2\n    # cost_fan = spend_10_notes + spend_2_notes\n    \n    # We solve the system of equations:\n    for x in range(1, 38):\n        y = 38 - x\n        if 0.2 * x == 3 * 0.25 * y:\n            cost_fan = 0.8 * 10 * x + 0.75 * 2 * y\n            return cost_fan\n    \nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one banana and one pear\n    banana, pear = symbols('banana pear')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(banana + 3 * pear, 84)\n    equation2 = Eq(banana + pear, 48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    # Extract the cost of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time_in_minutes = 8 * 60 + 20\n    activity_duration = 45\n    break_duration = 20\n\n    activity_count = 0\n    while total_time_in_minutes >= activity_duration:\n        total_time_in_minutes -= activity_duration\n        activity_count += 1\n        if total_time_in_minutes >= break_duration:\n            total_time_in_minutes -= break_duration\n\n    return activity_count\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 92\n    \n    total_weight = (adam_ben + ben_carl + adam_carl) / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days B takes to finish the work\n    x = symbols('x')\n    # A's efficiency is twice B's, so A takes x/2 days\n    # A finishes the job in 5 days less than B, so A takes x-5 days\n    # Setting up the equation: x/2 = x-5\n    equation = Eq(x/2, x-5)\n\n    # Solving the equation for x\n    days_b = solve(equation, x)[0]\n\n    return days_b\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40 / 100\n    total_grams = 650\n    part = percentage * total_grams\n    return part\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = total_bulbs * 0.25\n    tulip_bulbs = total_bulbs * (1/5)\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    start_length_m = 2.06  # length in meters at the start of the day\n    end_length_cm = 78  # length in centimeters at the end of the day\n\n    # Convert the end length from cm to meters\n    end_length_m = end_length_cm / 100 \n\n    # Calculate the melted length in meters\n    melted_length_m = start_length_m - end_length_m\n\n    return melted_length_m\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    num = 123456\n    num_str = str(num)\n    even_sum = sum(int(digit) for idx, digit in enumerate(num_str) if idx % 2 == 1)\n    odd_sum = sum(int(digit) for idx, digit in enumerate(num_str) if idx % 2 == 0)\n    if (odd_sum - even_sum) % 11 == 0:\n        return True  # The number is divisible by 11\n    else:\n        return False, (odd_sum - even_sum) % 11  # The number is not divisible and includes the remainder\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    return 3549 // 7\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return planes_in_36_minutes\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    ways = [0] * 10\n    ways[0] = 1  # 0 steps can be reached in 1 way: not moving\n    ways[1] = 1  # 1 step can be reached in 1 way: single step\n    ways[4] = 1  # 4 steps can be reached in 1 way: a single four-step\n\n    for i in range(2, 10):\n        ways[i] += ways[i - 1]\n        if i >= 4:\n            ways[i] += ways[i - 4]\n\n    return ways[9]\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    original_passengers = 35\n    # At the first stop two-fifths get off\n    passengers_off_first = original_passengers * 2 // 5\n    passengers_after_first_stop = original_passengers - passengers_off_first\n    \n    # Then 7 people get on\n    passengers_after_first_stop += 7\n    \n    # At the next stop a quarter of the people remaining on the bus get off\n    passengers_off_second = passengers_after_first_stop // 4\n    passengers_after_second_stop = passengers_after_first_stop - passengers_off_second\n    \n    # Then 13 get on\n    final_passenger_count = passengers_after_second_stop + 13\n    \n    return final_passenger_count\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Calculate the sum of natural numbers up to 20, because the series is 0.5 * natural number.\n    n = 20\n    sum_of_naturals = n * (n + 1) // 2\n    # Calculate the sum of consecutive cubes using the formula (1+2+3+...+n)^2\n    ans = (0.5 * sum_of_naturals) ** 2\n    return ans\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    # Since Mr Jones's estimate is £35 to the nearest £5,\n    # the bill could be anything from £32.50 (as this would round up to £35)\n    # up to, but not including, £37.50 (as this would round up to £40).\n    # Therefore, the least amount his shopping bill could actually be is £32.50.\n    return 32.50\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum_ages = 22\n    future_sum_ages = 40\n    years_needed = future_sum_ages - current_sum_ages\n    return years_needed\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for school1 in range(98, 103):\n        for school2 in range(98, 103):\n            for school3 in range(98, 103):\n                if school1 + school2 + school3 == 300:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between_rabbit_and_elephant = 5\n\n    rabbit_position_from_left = elephant_position_from_left - toys_between_rabbit_and_elephant - 1\n    rabbit_position_from_right = total_toys - rabbit_position_from_left\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        # Check conditions for division by 2, 3, 4, and 5\n        if pencils % 2 == 1 and pencils % 3 == 2 and pencils % 4 == 3 and pencils % 5 == 4:\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    number_of_people = 3 + 1  # Ewan and his 3 sisters\n    biscuits_per_person = total_biscuits // number_of_people\n    return biscuits_per_person\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    ans = (3/7) * 385\n    return ans\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time it takes for Tim to write the book alone.\n    t = symbols('t')\n\n    # 1 book / 6 days = Nancy's rate of writing\n    # 1 book / t days = Tim's rate of writing\n    # 1 book / 4 days = Combined rate of writing\n\n    # Setting up the equation based on the combined work done in one day\n    equation = Eq(1/6 + 1/t, 1/4)\n\n    # Solving for t\n    tim_days = solve(equation, t)[0]\n\n    return tim_days\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    total_numbers = len(numbers) + 1  # including the unknown 'a'\n    total_sum = mean_value * total_numbers  # total sum of all numbers\n    sum_known_numbers = sum(numbers)\n    a = total_sum - sum_known_numbers\n    return a\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Conversion rates\n    cm_to_m = 1 / 100\n\n    # Ribbon lengths in meters\n    pink_ribbon_m = 2.5\n    blue_ribbon_m = 220 * cm_to_m\n    orange_ribbon_m = 30.5 * cm_to_m\n\n    # Find the longest ribbon\n    longest_ribbon = max(pink_ribbon_m, blue_ribbon_m, orange_ribbon_m)\n\n    # Return the color of the longest ribbon\n    if longest_ribbon == pink_ribbon_m:\n        return \"pink\"\n    elif longest_ribbon == blue_ribbon_m:\n        return \"blue\"\n    else:\n        return \"orange\"\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    preparation_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    total_time = preparation_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "from sympy import lcm\n\ndef solution():\n    # Convert time to the smallest common unit (seconds)\n    first_light = 1 * 60  # Every minute\n    second_light = 1.5 * 60  # Every 1.5 minutes\n    all_three_lights = 9 * 60  # Every 9 minutes\n\n    # Calculate the least common multiple of the first two lights\n    lcm_first_second = lcm(first_light, second_light)\n\n    # Determine the shortest possible time for the third light\n    # It must be a factor of the all_three_lights and greater or equal to 30 seconds\n    third_light = None\n    for time in range(30, all_three_lights + 1):\n        if all_three_lights % time == 0 and lcm_first_second % time == 0:\n            third_light = time\n            break\n\n    return third_light // 60  # Convert back to minutes for the answer\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    paid_price = 75\n    discount_rate = 0.50\n    original_price = paid_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert the total mass to grams for easier calculation\n    total_mass_grams = 172000  # 172 kg = 172000 g\n    \n    # Given weights of individual packets in grams\n    weight_p = 300\n    weight_q = 400\n    weight_r = 500\n    \n    # Since the ratio is 7P : 3Q : 2R, and we want the total weight,\n    # Let's represent the total packets of P as 7x, Q as 3x and R as 2x.\n    # The total mass of the sauce will then be:\n    # mass_sauce = 7x * weight_p + 3x * weight_q + 2x * weight_r\n    # where x is the multiplier for the ratio\n    \n    # We know the total mass of the sauce and we solve for x\n    # 7x * 300 + 3x * 400 + 2x * 500 = 172000\n    # x(7 * 300 + 3 * 400 + 2 * 500) = 172000\n    # x(2100 + 1200 + 1000) = 172000\n    # x(4300) = 172000\n    # x = 172000 / 4300\n    \n    # Now, let's find the value of x\n    x = total_mass_grams / (7 * weight_p + 3 * weight_q + 2 * weight_r)\n    \n    # Finally, calculate the total number of packets used\n    total_packets = 7 * x + 3 * x + 2 * x\n    \n    # We return the total number of packets as an integer because we can't have a fraction of a packet\n    return int(total_packets)\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_people = (3 * 10) + (12 * 15) + (15 * 20)\n    total_cars = 3 + 12 + 15\n    average_people_per_car = total_people / total_cars\n\n    return average_people_per_car\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    # Define the ⊙ operation as a custom function\n    def custom_operation(a, n):\n        return sum(a * int(str(a) * i) for i in range(1, n + 1))\n    \n    # Calculate 4 ⊙ 3 using the custom operation\n    ans = custom_operation(4, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    percent_boys = (boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Given values\n    rachel_speed = 84 # Rachel's speed in km/h\n    eleanor_time_to_G = 4 # Eleanor's total travel time to City G in hours\n    time_difference = 1.5 # Time difference after passing by Rachel when Eleanor reaches City G in hours\n\n    # Distance Rachel travels in the time difference\n    distance_rachel_travels = rachel_speed * time_difference\n\n    # Distance Rachel is away from City F when Eleanor reaches City G\n    distance_rachel_to_F = 39\n\n    # Total distance Rachel traveled from the meeting point to nearing City F\n    total_distance_rachel = distance_rachel_to_F + distance_rachel_travels\n\n    # Eleanor's speed (distance/time)\n    eleanor_speed = total_distance_rachel / (eleanor_time_to_G - time_difference)\n\n    # Distance between City F and City G\n    distance_F_G = eleanor_speed * eleanor_time_to_G\n\n    return distance_F_G\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    return 8 + 10 - 1\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest = max(numbers)\n    smallest = min(numbers)\n    result = (2 * largest) - (3 * smallest)\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    return 4.6 - 3.55\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    total_score = 5 * 90  # 5 students with an average of 90 points\n    max_score = 100\n    num_students = 5\n\n    for lowest_score in range(max_score - num_students + 1):\n        scores = [lowest_score + i for i in range(num_students)]\n        if sum(scores) == total_score and len(set(scores)) == num_students:\n            return lowest_score  # Found the lowest score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rope_a, rope_b, rope_c = symbols('rope_a rope_b rope_c')\n\n    equation1 = Eq(rope_a, 3 * rope_b)\n    equation2 = Eq(rope_c, rope_b + 56)\n    equation3 = Eq(rope_a, rope_c + 130)\n\n    solutions = solve((equation1, equation2, equation3), (rope_a, rope_b, rope_c))\n\n    total_length = solutions[rope_a] + solutions[rope_b] + solutions[rope_c]\n\n    return total_length\n\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    total_members = 50 + 70\n    male_students = 0.16 * 50\n    female_students = 0.10 * 70\n\n    total_students = male_students + female_students\n\n    percentage_students = (total_students / total_members) * 100\n\n    return percentage_students\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "def solution():\n    from itertools import combinations\n\n    # Total possible combinations of 3 different letters out of 5\n    total_combinations = list(combinations('ABCDE', 3))\n    total_count = len(total_combinations)\n\n    # Combinations that include both A and B\n    ab_combinations = [comb for comb in total_combinations if 'A' in comb and 'B' in comb]\n    ab_count = len(ab_combinations)\n\n    # Probability that a combination includes both A and B\n    probability = ab_count / total_count\n\n    return probability\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    volume1 = 200\n    concentration1 = 35\n\n    volume2 = 300\n    concentration2 = 50\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1 / 100) + (volume2 * concentration2 / 100)\n\n    new_concentration = (total_juice / total_volume) * 100\n\n    return new_concentration\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    result = 1212 // 6\n    return result\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    # We can express the given ratios as an equation: x/48 = 3/4\n    # To find x, we cross multiply.\n    x = (3 * 48) / 4\n    return x\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_start = 37\n    john_start = 15\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy has (amy_start - x) apples and John has (john_start + x) apples\n    # Amy needs to have 4 more apples than John: amy_start - x = john_start + x + 4\n    # Solve for x: x = (amy_start - john_start - 4) / 2\n\n    x = (amy_start - john_start - 4) / 2\n    return x\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = num_terms * (first_term + last_term) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    fraction_more_chicken_than_vegetable = Fraction(chicken_pies - vegetable_pies, chicken_pies)\n    fraction_less_vegetable_than_fruit = Fraction(fruit_pies - vegetable_pies, fruit_pies)\n\n    ans = (fraction_more_chicken_than_vegetable, fraction_less_vegetable_than_fruit)\n    return ans\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    markers_given_away = 7\n    markers_left = total_markers - markers_given_away\n    markers_per_bag = 5\n\n    number_of_bags = markers_left // markers_per_bag\n\n    return number_of_bags\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of papers be x.\n    # Let her original speed be y papers per hour.\n    x, y = symbols('x y')\n\n    # After working for 1 hour at original speed y, she has 4 hours left.\n    # According to the information if she increases her speed by 6, she will finish in time.\n    equation1 = Eq((x - y) / (y + 6), 4)\n\n    # If she increases her speed by 10, she can finish in 3 hours instead of 4.\n    equation2 = Eq((x - y) / (y + 10), 3)\n    \n    # Equate the two expressions for x in terms of y to find y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Only the positive solution is meaningful in this context.\n    x_solution = solutions[0][0] if solutions[0][0] > 0 and solutions[0][1] > 0 else solutions[1][0]\n\n    return x_solution\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollars = 64\n    exchange_rate = 1.25\n    us_dollars = canadian_dollars / exchange_rate\n    return us_dollars\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 since it's a 2-digit number\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let j represent the price of one jug and c represent the price of one cup\n    j, c = symbols('j c')\n    \n    # Form the equations based on the given information\n    equation1 = Eq(4*j + 5*c, 85)\n    equation2 = Eq(2*j + 2*c, 40)\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (j, c))\n    \n    # Return the price of one cup\n    return solution[c]\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    sum_numbers = greatest_1_digit_even + smallest_2_digit_odd\n    return sum_numbers\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 208):\n        total_sum += sum(map(int, str(i)))\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_done = 3 / 4\n    total_designs = made_designs / fraction_done\n    return int(total_designs)\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n    \n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(1, 10): # First digit must be between 1 and 9 (for a three-digit number)\n        for j in range(10): # Second digit can be between 0 and 9\n            for k in range(10): # Third digit can be between 0 and 9\n                if i + j + k == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(int(digit) for digit in str(i)) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    ans = 5.4 + 3.7\n    return ans\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v1 be the velocity at 2000m\n    v1, g, h1, h2 = symbols('v1 g h1 h2')\n    \n    # Using the equation v^2 = u^2 + 2gh (where u is the initial velocity, v is the final velocity)\n    # Here, u = 0 because the skydiver starts from rest\n    equation = Eq(v1**2, 2 * g * (h1 - h2))\n    \n    # Substitute the known values (h1 = 3000, h2 = 2000, g = 9.81 m/s^2)\n    solutions = solve(equation.subs({g: 9.81, h1: 3000, h2: 2000}), v1)\n    \n    # Get the absolute value since we are interested in speed, not velocity.\n    return abs(solutions[0])\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # To ensure 4 cards with consecutive numbers, we need to consider the worst case scenario.\n    # There are 13 possible sets of 4 consecutive numbers in a suit (1 to 4, 2 to 5, ..., 10 to 13).\n    # Since there are 4 suits, we multiply 13 by 4.\n    max_consecutive_sets = 13 * 4\n    \n    # Now, in the worst case, we could draw all but 3 cards from each consecutive set.\n    # This means we need to draw 3 cards from each set before we are certain to get a complete set of 4.\n    # Since there are max_consecutive_sets of these, we multiply.\n    cards_needed = 3 * max_consecutive_sets\n    \n    # However, as soon as we draw the next card after this, it will complete at least one set of 4 consecutive cards.\n    cards_needed += 1  # adding the one card that guarantees us a set of 4 consecutive cards\n\n    return cards_needed\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    digits = '0245689'  # A = 3, C = 1, G = 7, only these digits are left\n    for perm in permutations(digits):\n        # Build the number with fixed digits A, C, and G\n        num_string = f'3{perm[0]}1{perm[1]}{perm[2]}7{perm[3]}{perm[4]}{perm[5]}'\n        num_list = [int(num_string[:i]) for i in range(1, 11)]\n        \n        # Check divisibility for required positions\n        divisible = all(num_list[i] % (i + 1) == 0 for i in range(10))\n        if divisible:\n            return tuple(int(num_string[i]) for i in range(10))\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_current_age = 10\n    age_difference = 3\n    brother_age_three_years_ago = ashley_current_age - age_difference - age_difference # Ashley's age 3 years ago minus 2\n\n    brother_current_age = brother_age_three_years_ago + age_difference\n    return brother_current_age\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        if 5 * adults + 3 * children == 75:\n            return adults\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money, cost_cap, cost_wristband = symbols('total_money cost_cap cost_wristband')\n    \n    # Given: Caleb spent 2/5 of his money on 4 caps and 6 wristbands\n    # Equation 1: 2/5 * total_money = 4*cost_cap + 6*cost_wristband\n    equation1 = Eq(2/5 * total_money, 4 * cost_cap + 6 * cost_wristband)\n\n    # Given: The cost of each cap is 3 times the cost of each wristband\n    # Equation 2: cost_cap = 3*cost_wristband\n    equation2 = Eq(cost_cap, 3 * cost_wristband)\n\n    # Given: He spent 1/3 of his remaining money (which is 3/5 of the total) to buy more caps\n    # Equation 3: (1/3) * (3/5) * total_money = number_of_additional_caps * cost_cap\n    remaining_money = 3/5 * total_money\n    money_for_more_caps = 1/3 * remaining_money\n    number_of_additional_caps = money_for_more_caps / cost_cap\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_money, cost_wristband))\n\n    # Calculate how much money was spent on additional caps\n    cost_cap_value = 3 * solutions[cost_wristband]\n    number_of_additional_caps_value = money_for_more_caps / cost_cap_value\n\n    # Total number of caps = Caps from the first purchase + Caps bought with the remaining money\n    total_caps = 4 + number_of_additional_caps_value\n    return int(total_caps)\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    ans = 459 + 3762\n    return ans\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    printed_pages = -1 # Start with -1 to account for the first omitted page number 3\n    actual_page = 0\n    \n    while(actual_page < 89):\n        printed_pages += 1\n        actual_page += 1\n        # Skip the number for every third page\n        if printed_pages % 3 == 0:\n            actual_page += 1\n    \n    return actual_page\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    ans = 123 + 468\n    return ans\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    # Define the ages with respect to Tom's current age\n    tom_now = 10\n    tom_future = 20\n    grandma_future = 60\n\n    # Calculate the age difference between Tom's future age and now\n    age_difference = tom_future - tom_now\n\n    # Since Grandma will be 60 when Tom is 20, we subtract the age difference from Grandma's future age\n    grandma_now = grandma_future - age_difference\n\n    return grandma_now\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3\n    count_5 = 600 // 5\n    count_15 = 600 // 15  # Since 15 is the LCM of 3 and 5, to avoid double counting\n\n    # Applying the inclusion-exclusion principle\n    ans = count_3 + count_5 - count_15\n    return ans\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    for ten_pence in range(6):  # Jeremy can use from 0 to 5 ten-pence coins.\n        for twenty_pence in range(4):  # Jeremy can use from 0 to 3 twenty-pence coins.\n            for fifty_pence in range(2):  # Jeremy can use 0 or 1 fifty-pence coins.\n                if ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50 == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # According to the Pigeonhole Principle, to guarantee to get 2 stickers of the same color,\n    # one must take at least 4 stickers out of the bag\n    # because in the worst-case scenario, the first three stickers could all be of different colours\n    # (which is not possible here, as there are only two colours, so at least two must be the same),\n    # therefore the fourth sticker taken must be of the same colour as one of the previous three.\n    return 4\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, solve\n\n    candies, a, b = symbols('candies a b')\n    # a: number of students in class A\n    # b: number of students in class B\n    equation1 = 4*a - candies + 20  # 4 candies per A student, needs 20 more\n    equation2 = candies - 6*b - 16  # 6 candies per B student, 16 candies left\n    equation3 = a - 2*b             # A is twice of B\n\n    solutions = solve((equation1, equation2, equation3), (candies, a, b))\n\n    return int(solutions[candies])\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Total count of balls for each color before we ensure to get 4 balls\n    # of the same color\n    max_blue = 3  # one less than 4\n    max_orange = 3  # one less than 4\n    max_yellow = 2  # since there are only 2 yellow balls\n     \n    # She can take out all balls of all but one color and still not have 4 of the same color.\n    # Then the next ball she has to take has to be the fourth of the remaining color.\n    ans = max_blue + max_orange + max_yellow + 1  # +1 for the guaranteed fourth ball of the same color\n    return ans\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    ducklings_legs = 4 * 2  # 4 ducklings with 2 legs each\n    baby_geese_legs = 2 * 2  # 2 baby geese with 2 legs each\n    total_legs = 36\n    \n    lamb_legs = total_legs - (ducklings_legs + baby_geese_legs)\n    num_lambs = lamb_legs // 4  # Each lamb has 4 legs\n    \n    return num_lambs\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_number = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_number = int(''.join(map(str, sorted(digits))))\n    difference = largest_number - smallest_number\n    return difference\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys, 3 * girls)\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Number of fruit boxes in each layer of the pyramid (from top to bottom)\n    top_layer = 1\n    second_layer = top_layer + 3  # Each new layer has 3 more boxes than the previous layer\n    third_layer = second_layer + 3\n    \n    # Total number of fruit boxes is the sum of the boxes in the three layers\n    total_boxes = top_layer + second_layer + third_layer\n    return total_boxes\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    a = 1.2 + 1.23 + 1\n    b = 1.2 + 1.23\n    ans = a * a - a * b\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for num in range(100, 201):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n    total_smiles_in_january = smiles_per_day * days_in_january\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    from math import sqrt\n    students = 40\n    students_per_side = int(sqrt(students))\n    return students_per_side\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed_A = 600 * (3/5)\n    good_copies_needed_B = 600 * (2/5)\n\n    total_copies_A = good_copies_needed_A * 5 / 4\n    total_copies_B = good_copies_needed_B * 6 / 5\n\n    total_copies = total_copies_A + total_copies_B\n\n    return int(total_copies)\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'f' be the hourly rate at which the farmer works\n    # Let 's' be the hourly rate at which the son works\n    # Total work is 1 (as in the entire field, a work 'quantity' of 1)\n\n    # 24*f = entire field (1); f = 1/24\n    # (16*f) + (6*s) = entire field (1)\n    \n    f, s = symbols('f s')\n    \n    # The farmer can harvest the crops by himself in 24 hours\n    equation1 = Eq(24*f, 1)\n    \n    # The farmer and his son can finish in 16 hours if the son works for 6 hours\n    equation2 = Eq(16*f + 6*s, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, s))\n    \n    # Find how many hours the son would take by calculating 1/s\n    son_hours = 1 / solutions[s]\n    \n    return son_hours\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    bounce_height = initial_height / 2\n    total_distance = initial_height + 2 * bounce_height\n    return total_distance\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_five = 1 / 6\n    expected_times = total_rolls * probability_of_five\n    return expected_times\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Annie's solution\n    annie_sugar = 300 * 0.15\n    # Becky's solution\n    becky_sugar = 400 * 0.25\n    # Carol's solution\n    carol_sugar = 300 * 0.35\n\n    # Total sugar\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    # Total solution weight\n    total_solution = 300 + 400 + 300\n\n    # Concentration of resulting sugar solution\n    concentration = total_sugar / total_solution\n\n    return concentration * 100  # to get percentage\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    max_divisible_number = 999 // 36 * 36\n    return max_divisible_number\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy = 96\n    timmy = symbols('timmy')\n    kevin = symbols('kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, equation2), (timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    product = quotient * divisor\n    total = product + remainder\n    \n    is_correct = total % divisor == remainder and total // divisor == quotient\n\n    correct_total = quotient * divisor + remainder\n\n    return correct_total if not is_correct else None\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_children = 5\n    total_permutations = factorial(total_children)\n    \n    # Hugh is between Louise and Richard in this case, which we don't want\n    # So we treat Louise, Hugh, and Richard as one unit for permutation\n    # Then we have 3 'units' to permute: LHR, Child1, Child2\n    unwanted_permutations = 2 * factorial(total_children - 2)\n    \n    # Multiply by 2 because Louise and Richard can switch places within the LHR unit\n    \n    # The final answer is the total permutations minus the unwanted permutations\n    ans = total_permutations - unwanted_permutations\n    \n    return ans\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    sum_alternating = sum((-1)**(i % 2) * (40 - 2 * i) for i in range(20))\n    return sum_alternating\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_matches = symbols('total_matches')\n    \n    wins_fraction = 2/5\n    draws_fraction = 7/20\n    losses = 10\n    \n    # Equations\n    wins = wins_fraction * total_matches\n    draws = draws_fraction * total_matches\n    total_losses_eq = Eq(total_matches - wins - draws, losses)\n    \n    # Solve for total_matches\n    total_matches_solution = solve(total_losses_eq, total_matches)\n    total_matches_number = total_matches_solution[0]\n    \n    # Calculate points\n    points_for_wins = 3 * wins_fraction * total_matches_number\n    points_for_draws = 1 * draws_fraction * total_matches_number\n\n    total_points = points_for_wins + points_for_draws\n    \n    return total_points\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_shirts = 13\n    sister_shirts = sophie_shirts - 5\n    return sister_shirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost_chocolate = 4 * 0.75\n    total_cost_pens = 3 * 0.95\n    total_cost = total_cost_chocolate + total_cost_pens\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    original_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    price_after_first_discount = original_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    # Since Sophia is counting every multiple of 2 and crossing it out,\n    # we just need to calculate how many even numbers are there up to 100.\n    # Each even number is a multiple of 2, so the count is straightforward.\n\n    max_number = 100\n    count = 0\n    for number in range(2, max_number + 1, 2): # start at 2, end at 100, step by 2\n        count += 1 # increment count for each even number\n    return count\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky = 99\n    timmy = symbols('timmy')\n    kevin = symbols('kevin')\n\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n\n    solutions = solve((equation1, equation2), (timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mean of the last 5 numbers\n    x = symbols('x')\n\n    # The sum of the 8 numbers is 8 * the mean\n    total = 8 * 555\n\n    # The sum of the first 3 numbers is 3 * (mean of last 5 numbers - 296)\n    sum_first_3 = 3 * (x - 296)\n\n    # The sum of the last 5 numbers is 5 * mean of last 5 numbers\n    sum_last_5 = 5 * x\n\n    # Setting up the equation, the sum of the first 3 and last 5 numbers equals the total sum\n    equation = Eq(sum_first_3 + sum_last_5, total)\n\n    # Solving for x\n    mean_last_5 = solve(equation, x)[0]\n\n    return mean_last_5\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n\n    bud_position_from_front = pip_position + children_between + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n\n    return bud_position_from_end\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 5\n\n    # Using direct proportion: (people * days) = constant\n    # initial_people * initial_days = (initial_people + additional_people) * target_days\n    # Solving for additional_people:\n    additional_people = (initial_people * initial_days) / target_days - initial_people\n\n    return int(additional_people)\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_age = 53\n    mother_age = 81\n\n    for years_ago in range(1, isaac_age):\n        if isaac_age - years_ago == 1/3 * (mother_age - years_ago):\n            return years_ago\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    kg_per_pound = 1 / 2.2\n    kg = pounds * kg_per_pound\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(x, y):\n        return sum(range(x, y)) - y\n\n    ans = custom_op(5, 10) - custom_op(4, 9)\n    return ans\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    age, _ = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 2, 3]\n    all_combinations = permutations(digits, 3)\n\n    return len(list(all_combinations))\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the money Rasidah had at first\n    x = symbols('x')\n    \n    # Rasidah had x at first, so she spent 3/5 of it\n    rasidah_spent = 3/5 * x\n    \n    # Chai Seng had x + 48 at first, so he spent 6/7 of it\n    chai_seng_spent = 6/7 * (x + 48)\n    \n    # In the end, money left would be the total money minus what they spent\n    rasidah_left = x - rasidah_spent\n    chai_seng_left = (x + 48) - chai_seng_spent\n    \n    # Chai Seng had 1/2 as much money left as Rasidah\n    equation = Eq(chai_seng_left, 1/2 * rasidah_left)\n    \n    # Use sympy's solve function to find the value of x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8\n    cat_speed = 3\n    distance_behind = 500\n\n    relative_speed = elena_speed - cat_speed\n\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for i in range(1, 21):\n        if isprime(i) and isprime(i + 6) and isprime(i - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6 * x + 2), 20)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(0, 10):\n            if i + j == 15:\n                return 10 * i + j\n                \nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    # Analyzing the differences between the terms\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    \n    # Looking for a pattern in the differences. It seems the differences themselves\n    # decrease by 1 each time: 12, 11, 10, 9\n    # We can then predict the next difference\n    next_difference = differences[-1] - 1\n    \n    # To find the next term, we add the next difference to the last term of the sequence\n    next_term = 50 + next_difference\n    \n    return next_term\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    initial_mean = 50\n    new_mean = 52\n    initial_total = initial_mean * 8\n    new_total = new_mean * 9\n    \n    extra_apple_weight = new_total - initial_total\n\n    return extra_apple_weight\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from itertools import permutations\n\n    even_digits = [2, 4]\n    count = 0\n    for perm in permutations([1, 2, 3, 4, 5], 5):\n        if perm[-1] in even_digits:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    return -16\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # A light is left on if it is toggled an odd number of times.\n    # A light will be toggled each time a person whose number is a factor of the light's number enters the room.\n    # Hence, a light will be left on if it has an odd number of factors.\n    # Only perfect square numbers have odd numbers of factors because factors come in pairs except for the square root which is only counted once.\n    # Since we are looking for the number of lights that have a perfect square number, the answer will be the count of perfect squares up to 250.\n    # We can find this by calculating the integer square root of 250 and counting all the numbers up to that since the square of each of those\n    # will be a perfect square that is less than or equal to 250.\n    \n    import math\n    ans = int(math.sqrt(250))\n    return ans\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    number_of_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    difference = 4\n    n = 30  # the term number we want to find\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pages in the document\n    x = symbols('x')\n\n    # Initial rate of the photocopier is 50 pages per minute\n    init_rate = 50\n\n    # Speeding up rate by 20 pages per minute\n    sped_up_rate = init_rate + 20\n\n    # Time taken by the initial rate to copy the document\n    time_initial = x / init_rate\n\n    # Time taken by the sped up rate to copy the document\n    time_sped_up = x / sped_up_rate\n\n    # The sped up rate takes 2 minutes less\n    equation = Eq(time_initial - time_sped_up, 2)\n\n    # Solve for x\n    pages = solve(equation, x)\n\n    return pages[0]\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    days_in_a_year = 365\n    four_years = 4 * days_in_a_year + 1 # including one leap year\n\n    # Check each year if 28th January is a Monday\n    year_increment = start_date.year\n    while True:\n        year_increment += 1\n        days_passed = days_in_a_year + (1 if year_increment % 4 == 0 and (year_increment % 100 != 0 or year_increment % 400 == 0) else 0)\n        test_date = start_date + timedelta(days=days_passed)\n        if test_date.weekday() == 0:  # Monday is 0\n            return test_date.year\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    # Equation for the difference\n    equation1 = Eq(oranges - apples, 194)\n    # Equation for the multiple\n    equation2 = Eq(oranges, 6 * apples + 4)\n    \n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    remainder = 7\n    quotient = 8\n    # Since the remainder is 7, the divisor has to be greater than the remainder.\n    # The least possible divisor is therefore 8 (just one more than the remainder).\n    # To find the least dividend, we use the smallest divisor possible and apply the division formula:\n    # divident = divisor * quotient + remainder\n    divisor = remainder + 1\n    dividend = divisor * quotient + remainder\n    return dividend, divisor\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    saved_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = saved_per_day * days_saved\n    amount_left = original_amount + total_saved - lent_to_brother - spent_on_snacks\n    \n    return amount_left\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_companies = 4\n    total_days = 5\n    total_length = 900\n\n    length_per_company_per_day = total_length / (total_companies * total_days)\n\n    return length_per_company_per_day\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    jog_time = 1  # From 6:30 AM to 7:30 AM\n    walk_time = 2  # From 7:30 AM to 9:30 AM\n\n    jog_speed = 6  # miles per hour\n    walk_speed = 5  # miles per hour\n\n    jog_distance = jog_speed * jog_time\n    walk_distance = walk_speed * walk_time\n\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.10\n    members = 30\n\n    discounted_cost = normal_cost * (1 - discount)\n    cost_per_member = discounted_cost / members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # Calculate the last digit of 2 raised to 2017\n    last_digit_2 = (2 ** 2017) % 10\n    \n    # Calculate the last digit of 3 raised to 2017\n    last_digit_3 = (3 ** 2017) % 10\n    \n    # Multiply the last digits and get the last digit of the result\n    last_digit = (last_digit_2 * last_digit_3) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    # Solving the linear equation step-by-step\n    # 4 * x - 13 = 55\n    # Add 13 to both sides of the equation\n    # 4 * x = 55 + 13\n    # Divide both sides by 4 to solve for x\n    x = (55 + 13) / 4\n    return x\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Define the custom operation based on the examples provided\n    def custom_operation(x, y):\n        return (x % 10 + y % 10)\n\n    # Use the custom operation to find 9 ◈ 20\n    ans = custom_operation(9, 20)\n    \n    return ans\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_cost = 0.80  # cost for first 15 minutes\n    additional_rate = 0.05  # cost for each additional minute\n    total_cost = 1.40  # total cost of the call\n\n    # Calculate the number of minutes past 15\n    additional_minutes = (total_cost - base_cost) / additional_rate\n\n    # The total minutes is the sum of the first 15 minutes and additional minutes\n    total_minutes = 15 + additional_minutes\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    start = 56 // 5 * 5\n    if start < 56:\n        start += 5\n    end = 120 // 5 * 5\n    \n    count = (end - start) // 5 + 1\n    return count\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')  # The symbol for the number Sara thought of.\n    equation = Eq((n - 4)/2 + 11, 37)\n    \n    original_number = solve(equation, n)[0]\n    \n    return original_number\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    return 10034\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_quarters = (2 + 1 / 2) * 4\n    return int(total_quarters)\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina was 50 on 10th May 2005\n    # This means Gina was 35 years old 15 years before 2005, which is in 1990\n    \n    # James was 20 on 10th May 1997\n    # To find out how old James was in 1990, we subtract the years from 1997 to 1990, which is 7 years\n    \n    james_age_when_gina_35 = 20 - (1997 - 1990)\n    \n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    # Lucy's position from the front\n    lucy_position = 5\n    # Eddie's position from the back\n    eddie_position = 9\n    # Number of people between Lucy and Eddie\n    people_between = 2\n    \n    # Total people in line is Lucy's position + people between + Eddie's position\n    total_people = lucy_position + people_between + eddie_position\n    return total_people\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    result = 35\n    reverse_subtraction = result + 21\n    reverse_multiplication = reverse_subtraction / 7\n    original_number = reverse_multiplication - 4\n    return original_number\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    total_girls = 16\n\n    # Maximum number of left-handed girls (if all boys are right-handed)\n    max_left_handed_girls = total_pupils - right_handed\n\n    # Smallest number of right-handed girls is total girls minus maximum number of left-handed girls\n    min_right_handed_girls = total_girls - max_left_handed_girls\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    from sympy import Symbol, solve, isprime, primerange\n\n    x = Symbol('x')\n    # Create a list of prime numbers for our possible remainders\n    primes = list(primerange(1, 9))\n\n    # Define equations based on the remainders when divided by 3, 5, 7 and 8\n    solutions = []\n    for p1 in primes:\n        for p2 in primes:\n            for p3 in primes:\n                for p4 in primes:\n                    # Ensure all remainders are prime and distinct\n                    if len(set([p1, p2, p3, p4])) == 4:\n                        # Solving for x\n                        eq1 = x % 3 - p1\n                        eq2 = x % 5 - p2\n                        eq3 = x % 7 - p3\n                        eq4 = x % 8 - p4\n                        sol = solve((eq1, eq2, eq3, eq4), x)\n                        if sol and isprime(sol[0]):\n                            solutions.append(sol[0])\n    \n    # return the smallest number from the solutions\n    ans = min(solutions)\n    return ans\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    # Convert everything to centimeters for easy calculation\n    total_length_cm = 11 * 100 + 74  # 11m 74cm\n    dress_length_cm = 5 * 100 + 8    # 5m 8cm\n    \n    # Calculate the remaining length after the dress is cut out\n    remaining_length_cm = total_length_cm - dress_length_cm\n    \n    # Calculate the length of each stripe by dividing the remainder by 9\n    stripe_length_cm = remaining_length_cm / 9\n    \n    # Since the answer expects the result in meters and centimeters, convert it back\n    stripe_length_m = stripe_length_cm // 100  # Get the full meters\n    stripe_length_remainder_cm = stripe_length_cm % 100  # Get the remaining centimeters\n\n    # The result is a combination of meters and centimeters\n    return (stripe_length_m, stripe_length_remainder_cm)\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n    \n    # Each book costs $12 and each file costs $9\n    equation1 = Eq(12 * books + 9 * files, 336)\n    # She bought 14 more books than files \n    equation2 = Eq(books - files, 14)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    total_flowers = orchids + tulips + roses\n\n    # Ratio of number of orchids to tulips\n    ratio_equation = Eq(orchids / tulips, 3 / 5)\n\n    # Flowers remaining after sales\n    remaining_flowers = orchids * (1 - 0.40) + tulips * (1 - 1 / 5) + roses * (1 - 0.25)\n\n    # Total number of flowers initially and finally\n    total_initial = Eq(total_flowers, 3616)\n    total_final = Eq(remaining_flowers, 2644)\n\n    # Solve the system of equations\n    solutions = solve((ratio_equation, total_initial, total_final), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if chickens * 2 + rabbits * 4 == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    return 60.2 / 7\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    ones_digits = [pow(i, 2013, 10) for i in range(1, 10)]\n    total = sum(ones_digits)\n    return total % 10\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n            \nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Peter must take at least one sock of each color to make sure he has at least a pair of same color socks.\n    # There are 3 colors, so after picking 3 socks there is still a possibility that all are of different color.\n    # Therefore, to guarantee a matching pair, he must take one more sock.\n    socks_to_take = 3 + 1  # 1 more than the number of colors\n    return socks_to_take\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[diamond] + solutions[square]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    pages = 131\n    digits = 0\n    for page in range(1, pages + 1):\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    # Calculate the duration of the flight considering time zones.\n    # Japan is 7 hours ahead of France\n    time_difference = 7\n    \n    # Amy started her flight at 8pm Japan Time\n    departure_time_japan = 20\n    \n    # and arrived at 1am France Time on the next day\n    arrival_time_france = 1\n    \n    # Calculate time flown with respect to Japan Time by considering the time difference\n    actual_arrival_time_japan = arrival_time_france + 24 + time_difference\n    \n    # Now calculate the total flight time in hours\n    flight_duration = actual_arrival_time_japan - departure_time_japan\n\n    return flight_duration\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    correct_mark = 4\n    wrong_mark = -1\n    unattempted = 3\n    total_score = 168\n\n    # Number of attempted questions\n    attempted = total_questions - unattempted\n\n    # If all attempted questions were correct, calculate the max score possible\n    max_score_if_all_correct = correct_mark * attempted\n\n    # Calculate the number of wrong answers using the difference between\n    # the max possible score (if all were correct) and the actual score\n    wrong_answers = (max_score_if_all_correct - total_score) // (correct_mark - abs(wrong_mark))\n\n    # Calculate the number of correct answers\n    correct_answers = attempted - wrong_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    choices_for_first_digit = 2 # 1 and 2\n    choices_for_second_digit = 3 # 0, 1, and 2\n    total_combinations = choices_for_first_digit * choices_for_second_digit\n    return total_combinations\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')  # Declare variables for the two numbers\n    eq1 = Eq(x + y, 71)    # The sum of the two numbers is 71\n    eq2 = Eq(x - y, 9)     # The difference of the two numbers is 9\n    \n    ans = solve((eq1, eq2), (x, y))[x]  # Solve for x and y and take the value of x\n    \n    return ans\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    numerator = 1\n    for i in range(100, 3, -1):\n        numerator *= i\n\n    denominator = 1\n    for i in range(97, 0, -1):\n        denominator *= i\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let the smallest even number be x\n    # The consecutive even numbers will be x, x+2, x+4, x+6, x+8\n    # Their sum is given as 200, so we can write the equation:\n    # x + (x + 2) + (x + 4) + (x + 6) + (x + 8) = 200\n    # 5x + 20 = 200\n    # 5x = 180\n    # x = 36\n    \n    # We find that the smallest number x is 36\n    x = (200 - 20) / 5\n    return int(x)\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Katie needs 8 minutes to cut a piece of wood into 5 sections\n    # This means she makes 4 cuts (since 5 sections result from 4 cuts)\n    cuts_for_5_sections = 4\n    time_for_5_sections = 8\n    \n    # Calculate time per cut\n    time_per_cut = time_for_5_sections / cuts_for_5_sections\n    \n    # Now calculate the time needed for 6 cuts to get 7 sections\n    cuts_needed_for_6_sections = 6\n    time_for_6_sections = time_per_cut * cuts_needed_for_6_sections\n    \n    return time_for_6_sections\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution transferred from container A to B and vice versa.\n    x = symbols('x')\n\n    # Before transfer:\n    # Sugar in A in g = 50 * 10% = 5g\n    # Water in A in g = 50 - 5 = 45g\n    \n    # Sugar in B in g = 30 * 20% = 6g\n    # Water in B in g = 30 - 6 = 24g\n    \n    # After transfer:\n    # Sugar in A after transfer = (5 - 0.1x) g\n    # Water in A after transfer = (45 + x) g\n    # Concentration of sugar in A = (5 - 0.1x) / (50 + 0 - x)\n\n    # Sugar in B after transfer = (6 + 0.1x) g\n    # Water in B after transfer = (24 - x) g\n    # Concentration of sugar in B = (6 + 0.1x) / (30 + 0 + x)\n\n    # The concentrations in A and B are equal after transfer\n    equation = Eq((5 - 0.1*x) / (50 - x), (6 + 0.1*x) / (30 + x))\n\n    # Solve for x\n    solution = solve(equation, x)\n    \n    # Return the solution in grams\n    return solution[0]\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Equation representing the total number of students: boys + girls = 995\n    equation1 = Eq(boys + girls, 995)\n    \n    # Equation representing the difference in number of girls and boys: boys - girls = 7\n    equation2 = Eq(boys - girls, 7)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    numbers = [31, 32]\n    ans = max(numbers)\n    return ans\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    normal_cost = 540\n    reduction = 189\n    percentage_reduction = (reduction / normal_cost) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    votes_for_peter = 35\n    votes_for_others = 22 + 27\n    remaining_votes = total_votes - votes_for_peter - votes_for_others\n\n    # To ensure victory, Peter needs one more vote than half of the total votes\n    votes_needed_for_majority = total_votes // 2 + 1\n    \n    # To find out how many votes Peter needs to get to reach this number\n    additional_votes_needed = votes_needed_for_majority - votes_for_peter\n    \n    # If the remaining votes are less than what is needed for a majority,\n    # it means that Peter needs all the remaining votes to win plus some of the votes\n    # that have gone to other candidates (which is not possible without additional conditions).\n    # So we consider the possible scenario for Peter to just win by getting all remaining votes\n    # and one of the other candidates not surpassing Peter’s total.\n    if additional_votes_needed > remaining_votes:\n        additional_votes_needed = remaining_votes\n\n    return additional_votes_needed\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_value = 490  # In pence, because we're dealing with 5p, 10p, and 20p\n    # Let n be the number of each type of coin\n    for n in range(1, total_value + 1):\n        if (5 * n) + (10 * n) + (20 * n) == total_value:\n            return 3 * n  # Total number of coins\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_amount = 100\n    amount_after_book = initial_amount - (initial_amount * 0.10)\n    amount_after_dvd = amount_after_book - (amount_after_book * 0.20)\n    \n    return amount_after_dvd\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    n = 9  # Number of terms\n    total_sweets = 135\n    # Sum of n terms of an arithmetic sequence is n/2 * (2a + (n - 1)d)\n    # We have the total sum (total_sweets) and we want to find the last term (nth term) which is a + (n - 1)d\n    # We know that total sweets (S) = n/2 * (2a + (n - 1)d)\n    # Rearrange the equation to solve for 'a' (first term)\n    # a = (2S/n - (n - 1)d) / 2\n    # Once we have 'a', we can find the nth term: last sweets = a + (n - 1)d\n    # Let's assume d (difference between terms) = 3\n    d = 3  # Common difference\n    a = (2*total_sweets/n - (n - 1)*d) / 2  # First term\n    last_day_sweets = a + (n - 1)*d  # Last term\n    return int(last_day_sweets)\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money = 28  # Annie's total money in dollars\n    cost_of_gift = 20  # cost of the gift in dollars\n\n    remaining_money = total_money - cost_of_gift  # remaining money in dollars\n    remaining_money_in_cents = remaining_money * 100  # converting dollars to cents\n\n    return remaining_money_in_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n\n    balance = principal * ((1 + rate) ** time)\n\n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    pages = 185\n    digits = 0\n\n    # Digits for 1-9\n    digits += 9\n\n    # Digits for 10-99\n    if pages >= 10:\n        digits += (min(pages, 99) - 10 + 1) * 2\n\n    # Digits for 100-185\n    if pages >= 100:\n        digits += (pages - 99) * 3\n\n    return digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percentage = 10\n\n    pay_rise = (pay_rise_percentage / 100) * annual_salary\n    new_annual_salary = annual_salary + pay_rise\n    new_monthly_salary = new_annual_salary / 12\n\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    return 704 - 457\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    lhs = 4.08 * 20\n    known_part = 1.08 * 20\n    missing_number_part = lhs - known_part\n    missing_number = missing_number_part / 20\n    return missing_number\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    ans = sum([119, 117, 113, 109, 105, 101]) - sum([115, 111, 107, 103, 99])\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    # Define a list to store all possible dates in \"ddmm\" format\n    possible_birthdays = []\n\n    # Go through each month\n    for month in range(1, 13):  # There are 12 months\n        # Go through each day\n        for day in range(1, 32):  # Assume a maximum of 31 days in a month for simplicity\n            # Calculate the expression given in the problem and check if it equals 376\n            if (month * 31) + (day * 12) == 376:\n                # Format the birthday as \"ddmm\"\n                birthday = \"{:02d}{:02d}\".format(day, month)\n                # Append the formatted birthday to the list\n                possible_birthdays.append(birthday)\n\n    # We may find multiple solutions but we need only one valid birthday, so return the first one\n    return possible_birthdays[0] if possible_birthdays else None\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    cost_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = cost_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_cost = 6 * (1 - 0.25)\n    protractor_cost = 0.30 * 0.5\n\n    total_cost = (calculator_cost * 8) + (protractor_cost * 20)\n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_needed = 40\n    milk_needed = 80\n    tom_flour = 25\n    \n    milk_to_use = (tom_flour * milk_needed) / flour_needed\n    \n    return milk_to_use\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    initial_sweets = sweets_left + sweets_taken\n    return initial_sweets\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    \n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    one_kilogram = 1000  # 1 tonne is equal to 1000 kilograms\n    two_thirds_in_kilograms = (tonnes * two_thirds) * one_kilogram\n    return two_thirds_in_kilograms\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the current age of the older elephant\n    younger_age_now = 18\n    older_age_future = 62\n    x = symbols('x')\n\n    # Equation: current age of the older elephant - age increase of younger elephant = 62 (older elephant's age when younger reaches older's current age)\n    equation = Eq(x - (x - younger_age_now), older_age_future)\n\n    # Solve the equation\n    age_of_older = solve(equation, x)\n\n    return age_of_older[0]\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Let's denote the total amount of grass as G, and the weekly consumption rate of one ox as r.\n    # Then we have the following two equations, \n    # based on the fact that total grass consumed should be the same in both cases:\n    # 27(r) * 6 = G and 23(r) * 9 = G\n    # We can set these two equations equal to each other and solve for r.\n    # 27*6*r = 23*9*r\n    \n    # Let's first find the total grass G consumed by 27 oxen in 6 weeks\n    # which should be the same as for 23 oxen in 9 weeks\n    # Then we find r by 23 oxen * 9 weeks\n    G = 27 * 6\n    weekly_consumption_23 = G / (23 * 9)\n    \n    # Now, we need to find the number of weeks (w) for 21 oxen to finish eating the grass.\n    # So we solve for w in the following equation:\n    # 21 * w * r = G, where r is the weekly consumption rate by one ox\n    # Finally, w = G / (21 * r)\n    weeks_for_21 = G / (21 * weekly_consumption_23)\n    \n    return weeks_for_21\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Time spent biking: from 7:30 AM to 8:30 AM is 1 hour\n    bike_speed = 10 # miles per hour\n    bike_time = 1 # hour\n    bike_distance = bike_speed * bike_time\n\n    # Time spent on train: from 8:30 AM to 10:30 AM is 2 hours\n    train_speed = 50 # miles per hour\n    train_time = 2 # hours\n    train_distance = train_speed * train_time\n\n    # Total distance traveled\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # Since order matters and repetition is allowed,\n    # this is a problem of finding the number of combinations with repetition.\n    # The formula for combinations with repetition is C(n+k-1, k),\n    # where n is the number of types, and k is the number of items to choose.\n    # In this case, we want to distribute 5 identical balls into 3 boxes, so\n    # n is the number of boxes (3) and k is the number of balls (5).\n    from math import comb\n    n = 3\n    k = 5\n    ans = comb(n+k-1, k)\n    return ans\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n    total_marbles = blue + red + green\n\n    equation = Eq(total_marbles, 112)\n    solution = solve(equation, blue)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = \"TEENAGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_letters = len(word)\n    \n    arrangement_count = factorial(total_letters)\n    for count in letter_counts.values():\n        arrangement_count //= factorial(count)\n        \n    return arrangement_count\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas's position gives us the dimensions of the array.\n    front_to_back = 3 + 2 - 1  # Because Lucas is counted in both, we subtract one.\n    left_to_right = 4 + 3 - 1  # Lucas is also counted twice here, so we subtract one.\n\n    # The number of students is the product of the dimensions.\n    num_students = front_to_back * left_to_right\n\n    return num_students\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    number = 217\n    while sum(int(digit) for digit in str(number)) != 9:\n        number += 1\n    return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ema, keng_wee = symbols('ema keng_wee')\n\n    # Ema had $360 less than Keng Wee\n    equation1 = Eq(ema, keng_wee - 360)\n    # Ema spent 1/4 of her money\n    # Keng Wee spent 4/7 of his money\n    # They end up with the same amount of money\n    equation2 = Eq(ema - (ema / 4), keng_wee - (4 * keng_wee / 7))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n\n    # We need the amount Keng Wee had at first\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    one_tenth_of_square = one_fourth_of_36\n    square = one_tenth_of_square * 10\n    return square\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    ans = 6.4 * 2.7\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    from_left_to_right = 4\n    from_right_to_left = 3\n\n    rows = 3\n    columns = from_left_to_right + from_right_to_left - 1  # Count Lucas once\n\n    ans = rows * columns\n    return ans\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the original number of girls and b be the number of boys\n    g, b = symbols('g b')\n\n    # Original ratio of girls to boys\n    equation1 = Eq(g, 9/11 * b)\n\n    # After transfer, the ratio changes\n    equation2 = Eq(g + 2, 10/11 * b)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Calculate the total number of students now\n    total_students_now = solutions[g] + 2 + solutions[b]\n\n    return total_students_now\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    numerator = 5\n    denominator = 1 / 4\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    ans = 37 + 38 + 40 + 43 + 42 + 41\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = sum(2 * (i/j) for i in range(1, 11) for j in range(1, i + 1) if i != j) + 11\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(2 * (3 * x - y), 2 * x + 4)\n\n    solutions = solve(equation, (x, y))\n\n    # Substitute the solutions into the expression (2x - y)\n    expr_value = 2 * solutions[x] - solutions[y]\n\n    return expr_value\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_pence = (3 * 31) + (2 * 17) + 78 + (105)\n    change_pence = 500 - total_cost_pence\n    return change_pence\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan_current = symbols('zehan_current')\n    \n    equation = Eq(zehan_current + 12, 3 * zehan_current)\n\n    solution = solve(equation, zehan_current)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(15, 5)\n    no_ABC = comb(12, 5)\n    two_ABC = comb(12, 3)\n    all_ABC = comb(12, 2)\n    exactly_one_ABC = total_ways - no_ABC - two_ABC - all_ABC\n    \n    return exactly_one_ABC\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    num_tickets = 7\n    cost_per_ticket = total_cost / num_tickets\n    return cost_per_ticket\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    total_tiles = 390\n\n    # Let x be the number of tiles Mr Tan has, then Mr Lim has 5x tiles.\n    # The total number of tiles is therefore x + 5x = 390.\n    # Solving for x gives us the number of tiles Mr Tan has.\n\n    x = total_tiles / 6  # Mr Tan's tiles, as 1x + 5x = 6x, and 6x = 390.\n    mr_tan_tiles = x\n    mr_lim_tiles = 5 * x  # Mr Lim's tiles.\n\n    # We want to find how many more tiles Mr Lim has than Mr Tan.\n    difference = mr_lim_tiles - mr_tan_tiles\n\n    return difference\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    ans = 0.36 * 100\n    return ans\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    shaila_sweets = 36\n    total_ratio = 5 + shaila_ratio\n\n    total_sweets = (shaila_sweets / shaila_ratio) * total_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial amount of lemon juice in the bottle\n    x = symbols('x')\n    \n    # The initial ratio is 2:3 for lemon juice to water\n    # After adding 80ml of lemon juice, the new ratio becomes (x + 80):water = 6:5\n    # Since the total parts of the mixture before adding the lemon juice was 5 (2 parts lemon juice + 3 parts water)\n    # And the total amount of liquid after adding 80ml lemon juice is x + 80 (lemon juice) + 3/2 * x (water, by the initial ratio)\n    # We can create an equation representing the new ratio, which should be equal to the original total parts times the new ratio.\n    # Hence, (x + 80) / ((3/2) * x) = 6 / 5\n    \n    equation = Eq((x + 80) / ((3/2) * x), 6 / 5)\n    \n    # Solve for x\n    initial_lemon_juice = solve(equation, x)\n    \n    return initial_lemon_juice[0]\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Kim's savings as 's'.\n    s = symbols('s')\n\n    # Kim gave 1/3 of her savings to her mother.\n    mother = s / 3\n\n    # She then spent 177 + 129 on dresses and earrings, respectively.\n    spent = 177 + 129\n\n    # The amount left is 50% of what she gave her mother.\n    # So the left amount is mother / 2.\n    # The equation representing what Kim has left: s - mother - spent = mother / 2\n    equation = Eq(s - mother - spent, mother / 2)\n\n    # Solve the equation.\n    savings = solve(equation, s)\n\n    return savings[0]\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph (usual speed)\n    increased_speed = usual_speed * (1 + 30 / 100)  # mph (usual speed increased by 30%)\n    departure_delay = 9 / 60  # hours (9 minutes converted to hours)\n\n    # The car travels the same distance with usual speed and increased speed, so:\n    # distance = usual_speed * (usual_time + departure_delay) = increased_speed * usual_time\n    # Hence, usual_time = departure_delay * usual_speed / (increased_speed - usual_speed)\n    \n    # Calculate the usual_time\n    usual_time = departure_delay * usual_speed / (increased_speed - usual_speed)\n    \n    # Calculate the distance\n    distance = usual_speed * (usual_time + departure_delay)\n    \n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    # Solve the equation step by step in reverse\n    quotient = 80\n    difference = quotient * 8  # multiply by 8\n    product = difference + 8   # add 8\n    sum_result = product // 8  # divide by 8\n    original_number = sum_result - 8  # subtract 8\n    \n    return original_number\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n\n    # Hypothesize red ropes as r and blue ropes as b\n    # r + b = 10 (total ropes equation)\n    # 2r + 3b = 26 (total length equation)\n    \n    for r in range(total_ropes + 1):\n        b = total_ropes - r\n        if 2*r + 3*b == total_length:\n            return r\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    total_skipping = 40\n    total_long_jump = 31\n    both_events = 21\n    \n    only_one_event = (total_skipping - both_events) + (total_long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let original speed be s (in m/min), and original time be t (in minutes)\n    s, t = symbols('s t')\n\n    # If a cyclist increases his speed by 25%, new speed is 1.25s\n    # New time is t - 20\n    equation1 = Eq(1.25 * s * (t - 20), s * t)\n\n    # If the cyclist decreases his speed by 45 m/min, new speed is s - 45\n    # New time is t + (75/100)*t = 1.75t\n    equation2 = Eq((s - 45) * 1.75 * t, s * t)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, t))\n\n    # The distance he has to travel is speed * time\n    distance = solutions[s] * solutions[t]\n\n    return distance\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = 21 / 0.30\n    return P\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    count = 1\n\n    while True:\n        if count % 7 == 0 and count % 9 == 2:\n            return count\n        count += 1\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for i in range(1, 22 // 2 + 1):\n        if i != 22 - i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    total_used = brownies + cookies + muffins\n    return total_used.simplify()\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_kwh_first_half = 366\n    average_kwh_second_half = 65\n    total_months = 12\n\n    total_kwh_second_half = average_kwh_second_half * (total_months / 2)\n    total_kwh_year = total_kwh_first_half + total_kwh_second_half\n    average_kwh_per_month = total_kwh_year / total_months\n\n    return average_kwh_per_month\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    # The greatest factor of A (which is not A itself) is A/1 -> A\n    # The smallest factor of A is 1\n    # So, the difference A - 1 is 41\n    # A = 41 + 1\n    A = 41 + 1\n\n    # The 7th multiple of A is 7 * A\n    seventh_multiple = 7 * A\n\n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n\n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(1)\n    for i in range(2, 12):\n        result *= Fraction(1) + Fraction(1, i)\n    ans = float(result)\n    return ans\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, 3 * sheena / 5)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    # Let x be the weight of Jessie\n    # Then Buzz's weight is 3x\n    # According to the problem, Buzz is 450g heavier than Jessie\n    # So, the equation is 3x = x + 450\n    # Solving for x: 3x - x = 450\n    # 2x = 450\n    # x = 450 / 2\n    # x = 225\n    # Buzz's weight is 3x which is 3 * 225\n    \n    x = 450 / 2\n    buzz_weight = 3 * x\n    return buzz_weight\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int('3' * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let x be the smaller number and y be the larger number.\n    # According to the problem, we have two equations:\n    # y - x = 36 (1)\n    # x + y = 98 (2)\n    \n    # Adding both equations we get:\n    # y - x + x + y = 36 + 98\n    # 2y = 134\n    # y = 134 / 2\n    # y = 67\n    \n    # Now we can substitute y into one of the equations to find x. Let's use equation (2):\n    # x + y = 98\n    # x + 67 = 98\n    # x = 98 - 67\n    # x = 31\n\n    smaller_number = 98 - 67\n    return smaller_number\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Given the cost of 6 files and 10 rulers is $40\n    # Let the cost of a single file be x and the cost of a single ruler be y\n    # 6x + 10y = 40\n\n    # We want to find the cost of 9 files and 15 rulers\n    # 9x + 15y = ?\n\n    # To solve this problem, we can find the cost of 1 file and 1 ruler\n    # First, take the 6x + 10y = 40 and solve for x as if y were 0:\n    # 6x = 40 when y = 0, so x = 40/6\n\n    # Since the relationship between the number of files and rulers remains constant,\n    # we can find the cost of the desired number of files and rulers by scaling up:\n    # 9x + 15y = (9 / 6) * 40\n\n    # Calculate the final result\n    ans = (9 / 6) * 40\n\n    return ans\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Since we only need the last digit, we can use the property that the last digit\n    # of a multiplication only depends on the last digits of the factors.\n\n    # Last digit of 4^100\n    last_digit_4 = (4 ** 100) % 10\n    \n    # Last digit of 7^100\n    # 7 has a pattern of last digits in powers: 7, 9, 3, 1 and it repeats every 4\n    power_cycle_7 = [7, 9, 3, 1]\n    last_digit_7 = power_cycle_7[100 % 4 - 1]\n    \n    # Last digit of 9^100\n    # 9 has a pattern of last digits in powers: 9, 1 and it repeats every 2\n    power_cycle_9 = [9, 1]\n    last_digit_9 = power_cycle_9[100 % 2 - 1]\n    \n    # Last digit of 11^100\n    # 11 has the last digit pattern: 1, regardless of the power\n    last_digit_11 = 1\n    \n    # Multiply the last digits together and take the last digit of the result\n    ans = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John and Jessie's initial amounts of money\n    john, jessie = symbols('john jessie')\n\n    # John had 5/13 of Jessie's money initially\n    equation1 = Eq(john, (5/13) * jessie)\n    \n    # Jessie transfers $600 to John\n    john_after = john + 600\n    jessie_after = jessie - 600\n\n    # John's money becomes 50% of Jessie's after transfer\n    equation2 = Eq(john_after, (1/2) * jessie_after)\n\n    # Solving the system of equations for John and Jessie's initial amounts of money\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    # Calculating total initial amount of money\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_rate = 0.70\n    correct_mark = 3\n    incorrect_mark = -1\n    total_score = 78\n\n    correct_answers = total_questions * correct_rate\n    incorrect_answers = total_questions - correct_answers\n\n    # Let x be the number of questions that were actually correct and y be incorrect\n    # Then x - y would be the number of questions unanswered\n    # x * correct_mark + y * incorrect_mark = total_score\n    # And from the correct rate we know that x = correct_rate * total_questions\n    # We can also express y in terms of x as y = total_questions - x\n\n    # Now we have two equations:\n    # x * correct_mark + (total_questions - x) * incorrect_mark = total_score\n    # y = total_questions - x\n\n    # Solving the first equation for x we get:\n    # x * correct_mark - x * incorrect_mark + total_questions * incorrect_mark = total_score\n    # x * (correct_mark - incorrect_mark) = total_score - total_questions * incorrect_mark\n    # x = (total_score - total_questions * incorrect_mark) / (correct_mark - incorrect_mark)\n\n    x = (total_score - total_questions * incorrect_mark) / (correct_mark - incorrect_mark)\n    \n    # Since the total number of correct answers must be an integer, return the closest integer value\n    return round(x)\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    digit_count = {'1': 0, '2': 0}\n    N = 1\n    while True:\n        for digit in str(N):\n            if digit in digit_count:\n                digit_count[digit] += 1\n        if digit_count['1'] == 15 and digit_count['2'] == 14:\n            break\n        N += 1\n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime\n\ndef solution():\n    format = \"%H:%M\"\n    time_in = datetime.strptime(\"10:30\", format)\n    time_out = datetime.strptime(\"11:00\", format)\n    time_baked = time_out - time_in\n    return time_baked.seconds // 60\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t_shirts, caps = symbols('t_shirts caps')\n\n    # Define the equations based on the given information\n    ratio_equation = Eq(t_shirts / caps, 8 / 5)\n    sales_equation = Eq((1/4) * t_shirts * 3 + (1/5) * caps * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((ratio_equation, sales_equation), (t_shirts, caps))\n\n    # Return the number of T-shirts Siti had at first\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    total_cost_bananas = 3 * 12  # cost in pence\n    total_cost_apples = 5 * 11   # cost in pence\n    total_cost = total_cost_bananas + total_cost_apples\n    \n    paid_amount = 200  # amount paid in pence (£2 coin)\n    change = paid_amount - total_cost  # change in pence\n    \n    # Converting the change to pounds and pence\n    change_pounds = change // 100\n    change_pence = change % 100\n\n    return change_pounds + change_pence / 100\n\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_siblings = 7\n    \n    # Calculate Harvir's age by adding the age difference six times (since he is the oldest)\n    harvir_age = youngest_age + age_difference * (number_of_siblings - 1)\n    \n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n    total_spent = calendar_price + ball_price\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    total_used = (1 / 5) + (1 / 2)\n    total_left = 360 / 1000  # converting grams to kilograms\n    total_initial = total_used + total_left\n    return total_initial\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    total_spent_pence = 500  # 5 pounds to pence\n    \n    # Let's define the number of oranges as x and the number of lemons as y.\n    # Then we have two equations: \n    # 1) 26x + 30y = 500\n    # 2) x + y = total number of fruits.\n\n    # We iterate to find the viable (x, y) pairs which satisfy the price equation.\n    # Since it's a small amount, brute-force is fine.\n    for x in range(total_spent_pence // 26 + 1):  # Divide and add 1 to include the edge case\n        for y in range(total_spent_pence // 30 + 1):  \n            if 26 * x + 30 * y == total_spent_pence:\n                return x + y  # Total fruits\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    num_people = 4\n    # Subtract 1 as we fix one person's position because the table is circular\n    num_ways = factorial(num_people - 1)\n    return num_ways\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original = symbols('original')\n    equation = Eq(original + 24, 3 * original)\n\n    solution = solve(equation, original)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3*a + 2*b\n    \n    def star(a, b):\n        return 3*a - 2*b\n\n    part1 = delta(3, 4)\n    part2 = star(part1, 5)\n    ans = delta(part2, 6)\n    \n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    total_cookies = 298\n    cookies_per_box = 8\n\n    ans = -(-total_cookies // cookies_per_box)\n\n    return ans\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n\n    # Leo had $220 more than Jason at first\n    equation1 = Eq(leo, jason + 220)\n\n    # After receiving the salary, Leo and Jason's new amounts\n    equation2 = Eq(jason + 1100, 2 * (leo + 180))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the symbols\n    f, m = symbols('f m')\n    \n    # Let's create the equation: number of male visitors was 450 more than the number of female visitors\n    equation1 = Eq(m, f + 450)\n    \n    # The number of female visitors increased by 15% but the number of male visitors decreased by 18%\n    equation2 = Eq(f * 1.15 + m * 0.82, 1354)\n    \n    # Let's solve the system of equations\n    solutions = solve((equation1, equation2), (f, m))\n    \n    # Solution would give us the number of male and female visitors on the first day\n    f_first_day = solutions[f]\n    m_first_day = solutions[m]\n    \n    # The total number of visitors on the first day is the sum of male and female visitors\n    total_first_day = f_first_day + m_first_day\n    \n    return total_first_day\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        if A == 0:  # no leading zero\n            continue\n        F = E - 2\n        G = F - 2\n        if F < 0 or G < 0 or A in [F, G] or B in [F, G] or C in [F, G] or D in [F, G] or E in [F, G]:\n            continue\n        if ((A * 10 + B) * (C * 100 + D * 10 + E) == (E * 10000 + F * 1000 + C * 100 + B * 10 + H)):\n            return (E * 10000 + F * 1000 + C * 100 + B * 10 + H)\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # Since we want to find the number of ways to distribute 7 identical pencils \n    # into 3 identical boxes, we can use the \"stars and bars\" method.\n    # We have 7 stars (pencils) and we need 2 bars (dividers for the 3 boxes). \n\n    # The formula for \"stars and bars\" is: (n+k-1 choose k-1) \n    # where n is the number of stars and k is the number of bars\n    # Here, n=7 (pencils) and k=2 (since there are 3 boxes thus 2 dividers needed)\n\n    from math import comb\n    ans = comb(7+3-1, 3-1)\n    return ans\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2\n\n    # Total ways to arrange all books\n    total_arrangements = factorial(total_books)\n    \n    # We must divide by the factorial of the number of each type of books\n    # to account for indistinguishable arrangements (since books of the same type are considered identical)\n    arrangements_biographies = factorial(3)\n    arrangements_sci_fi = factorial(4)\n    arrangements_magazines = factorial(2)\n    arrangements_schoolbooks = factorial(2)\n\n    # Calculate the number of distinct arrangements\n    ans = total_arrangements // (arrangements_biographies * arrangements_sci_fi * arrangements_magazines * arrangements_schoolbooks)\n    return ans\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_a_week = 7\n\n    robots_per_week = robots_per_day * days_in_a_week\n\n    return robots_per_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start_num = 345\n    decrement = 9\n    last_positive_num = start_num % decrement\n\n    return last_positive_num if last_positive_num != 0 else decrement\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000\n    number_of_friends = 5\n    \n    each_payment = total_cost / number_of_friends\n    \n    return each_payment\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    total_children = 50\n    total_amount_paid = 555\n    price_with_name = 15\n    price_without_name = 10\n\n    # Let x be the number of children who paid to have their name on the shirt\n    # Then (total_children - x) is the number of children who bought the shirt without their name\n    # Their total payment would be x*price_with_name + (total_children - x)*price_without_name\n    # We set this equal to the total amount paid and solve for x\n\n    x = symbols('x')\n    equation = Eq(x * price_with_name + (total_children - x) * price_without_name, total_amount_paid)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time (in minutes) David walks at the increased speed\n    t = symbols('t')\n    \n    # David walks at 150 m/min for the first 10 minutes\n    distance_initial = 150 * 10\n    \n    # Then he walks at (150 + 50) m/min for the rest of the time\n    distance_later = (150 + 50) * t\n    \n    # The total distance walked\n    equation = Eq(distance_initial + distance_later, 3700)\n    \n    # Solve for t\n    time_spent_later = solve(equation, t)[0]\n\n    # Total time spent walking is the initial 10 minutes plus the time spent at increased speed\n    total_time_spent = 10 + time_spent_later\n    \n    return total_time_spent\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the male and female visitors on the first day\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n\n    # Given conditions\n    condition1 = Eq(male_first_day, female_first_day + 450)\n    condition2 = Eq(female_first_day * 1.15 + male_first_day * 0.82, 1354)\n\n    # Solve the system of equations\n    solutions = solve((condition1, condition2), (male_first_day, female_first_day))\n\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while position <= 40:\n        position *= 2\n    return position // 2\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    hearts = 4\n    spades = 3\n    diamonds = 7\n    total_cards = hearts + spades + diamonds\n\n    ways_to_arrange = factorial(total_cards) // (factorial(hearts) * factorial(spades) * factorial(diamonds))\n\n    return ways_to_arrange\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Time difference between Singapore and London\n    time_difference = 7\n\n    # Singapore departure time in hours (24-hour format)\n    departure_singapore = 5\n\n    # London arrival time in hours (24-hour format)\n    arrival_london = 11\n\n    # Since Singapore is ahead, we add the time_difference to London's time\n    # This gives us the time in Singapore when the plane arrived in London\n    # To avoid going over 24 hours, we mod by 24\n    arrival_singapore = (arrival_london + time_difference) % 24\n\n    if arrival_singapore < departure_singapore:\n        # If arrival_singapore is less than departure, it means the flight\n        # crossed over to the next day in Singapore time\n        flight_duration = (24 - departure_singapore) + arrival_singapore\n    else:\n        # If arrival_singapore is more than departure, it means the flight\n        # was completed the same day\n        flight_duration = arrival_singapore - departure_singapore\n\n    return flight_duration\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    miguel = symbols('miguel')\n    jon = 1.30 * miguel\n    total = Eq(miguel + jon, 46)\n    miguel_money = solve(total, miguel)\n    \n    jon_money = 1.30 * miguel_money[0]\n    \n    return jon_money.evalf()\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds = 4/9\n    cashew_nuts = 1/3\n    difference = almonds - cashew_nuts\n    return difference\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    # Assignments according to the description provided by Bella\n    first_digit = 5  # the smallest multiple of 5\n    second_digit = 1  # the smallest odd number among the natural numbers\n    third_digit = 9  # the largest single digit and odd number\n    fourth_digit = 0  # the smallest even number in nature\n    fifth_digit = 8  # the largest single digit that is a multiple of 2\n    sixth_digit = 3  # the smallest odd number greater than 1 in nature\n    # seventh_digit must be a multiple of 2 and 5, so it's a multiple of 10\n    # and since it's a single digit, it has to be 0\n    seventh_digit = 0  \n\n    # Combine the digits to form the phone number\n    phone_number = int(f\"{first_digit}{second_digit}{third_digit}\"\n                       f\"{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n\n    return phone_number\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Johnny's incorrect method\n    # incorrect_total = (quotient * remainder) + divisor\n\n    # Correct method to find the dividend\n    correct_total = (quotient * divisor) + remainder\n\n    # Answer is correct if Johnny's incorrect method matches the correct method\n    is_correct = (quotient * remainder) + divisor == correct_total\n\n    return correct_total, is_correct\n\nans, is_correct = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    total = 0\n    positive = True\n    for i in range(2, 55, 2):\n        if positive:\n            total += i\n        else:\n            total -= i\n        positive = not positive\n    return total\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    for S in range(1, 10):\n        for A in range(10):\n            for M in range(10):\n                for O in range(10):\n                    for G in range(1, 10):\n                        if len(set([S, A, M, O, G])) == 5:\n                            SASMO = int(f\"{S}{A}{S}{M}{O}\")\n                            OGAMS = int(f\"{O}{G}{A}{M}{S}\")\n                            if SASMO * 4 == OGAMS:\n                                return SASMO\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = 40 - boys  # since the total number of boys and girls is 40\n\n    # boys distribute 4 bags each, girls distribute 3 bags each\n    equation = Eq(4 * boys - 3 * girls, 62)\n\n    num_boys = solve(equation, boys)[0]\n    \n    return num_boys\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages_last_day = 80\n    first_day_pages = 20\n    increase_per_day = 5\n\n    # The sequence represents an arithmetic progression.\n    # We need to find the total number of terms/days including the last day with 80 pages.\n    # To find the number of terms, we'll use the formula of the last term of an AP:\n    # last_term = first_term + (n - 1) * difference\n    # Where:\n    # last_term = Last day's page count\n    # first_term = First day's page count\n    # n = total number of days/terms\n    # difference = increment per day in the number of pages\n\n    # Rearranging the formula to solve for n:\n    # n = ((last_term - first_term) / difference) + 1\n    # However, since the last term does not follow the regular increment,\n    # we will first calculate the sum of the pages read up until the second-to-last day,\n    # then add the 80 pages of the last day to get the total count of pages in the book.\n\n    # Find the last term before the abnormal jump to 80 pages\n    # Start with the first day's pages and keep adding increment till we surpass total_pages_last_day\n    current_page_count = first_day_pages\n    while current_page_count < total_pages_last_day:\n        current_page_count += increase_per_day\n        total_pages_last_day -= current_page_count\n\n    # Now calculate the sum of the arithmetic series until second-to-last term\n    # The sum of an arithmetic series formula is:\n    # sum = (n/2) * (first_term + last_term)\n    # The number of terms can be calculated by the following, considering that\n    # the jump to 80 pages represents the last term and is not part of the regular increase:\n    n = ((current_page_count - increase_per_day - first_day_pages) / increase_per_day) + 1\n    \n    # Calculate sum of pages until the second-to-last day\n    sum_until_second_last = int((n / 2) * (first_day_pages + (current_page_count - increase_per_day)))\n\n    # Add the 80 pages of the last day\n    total_pages = sum_until_second_last + 80\n\n    return total_pages\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # Generate the sequence\n    sequence = [i for i in range(1, 11) for j in range(i)]\n    \n    # Calculate the median\n    middle = len(sequence) // 2\n    if len(sequence) % 2 == 1:\n        # If the length is odd, return the middle element\n        return sequence[middle]\n    else:\n        # If the length is even, return the average of the two middle elements\n        return (sequence[middle - 1] + sequence[middle]) / 2\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cut_length = symbols('cut_length')\n    \n    equation = Eq(65 - cut_length, 3 * (29 - cut_length))\n\n    cut_length_solution = solve(equation, cut_length)\n\n    return cut_length_solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    number_of_rolls = 30\n    probability_of_5 = 1/6\n    \n    expected_number_of_5s = number_of_rolls * probability_of_5\n    \n    return expected_number_of_5s\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    return (12 / 18) * 6\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * (7 * x) + 3 * 35, 441)\n\n    dress_cost = solve(equation, x)\n    \n    return dress_cost[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    odd_numbers_count = 5 # Digits 1, 3, 5, 7, 9\n    # Each position (hundreds, tens, units) can be any of the 5 odd digits\n    total_combinations = odd_numbers_count ** 3\n    return total_combinations\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    return 5 * 7 * 8\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Given ratios\n    equation1 = Eq(A/B, 2/3)\n    equation2 = Eq(B/C, 6/5)\n\n    # The average of A, B, and C is 45\n    equation3 = Eq((A + B + C) / 3, 45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    # Since we observe that each pattern results in (n-1)/n, and we have (n-1)/n = k/(k+1),\n    # we can deduce that k = 2011 for the given sequence since the last term is 1/(2011*2012)\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder = 0\n    for i in range(1, 1000, 2):\n        remainder += i ** 2\n    remainder %= 3\n    return remainder\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    energetic_rate = 1 / 12  # Energetic painter's rate (houses per day)\n    lazy_rate = symbols('lazy_rate')  # Lazy painter's rate (houses per day)\n    combined_rate = 1 / 8  # Combined rate of both painters (houses per day)\n\n    # Equation representing combined work rate\n    equation = Eq(energetic_rate + lazy_rate, combined_rate)\n\n    # Solve for the lazy painter's rate\n    solutions = solve(equation, lazy_rate)\n\n    # Calculate the number of days it would take the lazy one on his own\n    lazy_days = 1 / solutions[lazy_rate]\n\n    return lazy_days\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n    \n    return int(roosters)\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # Let's assume the original length is x and width is y\n    # After increasing the length by 12, the new length becomes x + 12\n    # The perimeter of the new rectangle is 2 * (new length + width) = 38\n    # Thus, 2 * (x + 12 + y) = 38\n    # Solving for x + y, which represents half the perimeter of the original rectangle\n    # (x + 12 + y) = 19\n    # Original half perimeter is x + y and that would be (19 - 12 = 7)\n    # The perimeter of the original rectangle is 2 times the original half perimeter\n    \n    original_half_perimeter = 19 - 12\n    original_perimeter = 2 * original_half_perimeter\n    return original_perimeter\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    total_ratio = nell_ratio + joe_ratio  # Sum of the parts of the ratio\n    nell_sweets = 24  # Given Nell's sweets\n\n    # Use the ratio to calculate the total number of sweets\n    total_sweets = (nell_sweets * total_ratio) // nell_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jamie_anne, natasha = symbols('jamie_anne natasha')\n    \n    ratio_eq = Eq(jamie_anne, 5/3 * natasha)\n    difference_eq = Eq(jamie_anne - natasha, 18)\n    \n    solutions = solve((ratio_eq, difference_eq), (jamie_anne, natasha))\n    \n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n    \n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    # a, b are single digits, only 1 to 9 possible as per the equation\n    for a in range(1, 10):\n        for b in range(10):  # b can be 0 to 9\n            if (10 * a + b) + (10 * b + a) + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sana, mina = symbols('sana mina')\n    total_coins = 234\n    given_away_coins = 12\n    \n    # Sana has 8 times as many coins as Mina\n    equation1 = Eq(sana, 8 * mina)\n    # Total number of coins they had together initially\n    equation2 = Eq(sana + mina, total_coins)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sana, mina))\n    mina_coins_left = solutions[mina] - given_away_coins\n    \n    return mina_coins_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    bag_weight = 3/4\n    num_bags = remaining_after_tuesday / bag_weight\n    return int(num_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    num_students = 123\n    total_flour = flour_per_student * num_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    term_number = 11\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    total_pence = pounds * 100\n    percentage = (pence / total_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for page_number in range(1, 121):\n        count += str(page_number).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Uncle Sam cycles past 10 lamp posts in 50 seconds (from the first to the eleventh lamp post)\n    # This implies he cycles past 1 lamp post every 5 seconds (50 seconds / 10 lamp posts)\n    \n    # In 80 seconds, the number of lamp posts he will cycle past\n    num_lamp_posts = 80 // 5\n    \n    # Since he starts at the first lamp post, we need to add 1 to include it\n    num_lamp_posts += 1\n    \n    return num_lamp_posts\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Calculate the number of flowers for each side, excluding the corners\n    flowers_per_side = 6 - 2  # because a flower at each corner is shared by two sides\n    \n    # Four sides, but subtracting the flowers for corners once as they are counted twice\n    total_flowers = flowers_per_side * 4 + 4\n    \n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the total items, apples, bananas, and lemons\n    total_items, apples, bananas, lemons = symbols('total_items apples bananas lemons')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(apples, 2/3 * total_items)  # 2/3 of items are apples\n    equation2 = Eq(bananas, 1/9 * total_items)  # 1/9 of items are bananas\n    equation3 = Eq(apples, lemons + 12)  # 12 more apples than lemons\n    equation4 = Eq(apples + bananas + lemons, total_items)  # Sum of apples, bananas, and lemons equals total_items\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total_items, apples, bananas, lemons))\n    \n    # Extract the number of lemons from the solutions dictionary\n    lemons_bought = solutions[lemons]\n    \n    return lemons_bought\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # Digit in hundreds place = 800, so digit is 8\n    hundreds = 8\n    \n    # Digit in thousands place is 1 more than the digit in hundreds place\n    thousands = hundreds + 1\n    \n    # Digit in the ones place is the sum of all factors of 4\n    factors_of_4 = [1, 2, 4]  # Factors of 4\n    ones = sum(factors_of_4)\n    \n    # Digit in the tens place is the difference between hundreds and ones\n    tens = hundreds - ones\n    \n    # The number must be between 40000 and 50000, so the first digit is 4\n    final_number = 40000 + thousands * 1000 + hundreds * 100 + tens * 10 + ones\n    \n    return final_number\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    additional_length = 56\n\n    football_field_length = basketball_court_length + additional_length\n\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount_percentage = ((original_price - 67.50) / original_price) * 100\n    return ana_discount_percentage\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    # Initialize minimum value of s to a large number\n    min_s = float('inf')\n    \n    # Use a reasonable range for search since r/s is a fraction less than 1\n    # We know s must be greater than 10 because 3/10 is a strict lower bound\n    for s in range(11, 1000):  # Limiting search space as fractions are less than 1\n        for r in range(1, s):  # r must be less than s, as r/s < 5/16 < 1\n            if 3/10 < r/s < 5/16:\n                if s < min_s:\n                    min_s = s\n                    break  # No need to continue with higher numerators for this denominator\n        if min_s < float('inf'):\n            break  # Found the smallest s, no need to continue search\n    \n    return min_s\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # total_steering_wheels is what we want to find\n    total_steering_wheels = symbols('total_steering_wheels')\n\n    # Equation based on the problem statement\n    equation = Eq((300 + 250), 5 / 6 * total_steering_wheels)\n\n    # Solve the equation for the total number of steering wheels\n    solution = solve(equation, total_steering_wheels)\n\n    return solution[0]\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    total_capacity_in_children = 40\n    children_on_bus = 15\n    adult_capacity = 24\n\n    remaining_capacity_for_children = total_capacity_in_children - children_on_bus\n    remaining_capacity_for_adults = remaining_capacity_for_children * adult_capacity / total_capacity_in_children\n    return int(remaining_capacity_for_adults)\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint, sqrt\n\n    # Factorize 28 to get its prime factors\n    factors = factorint(28)\n\n    # If a prime factor's exponent is odd, we multiply the result with the prime\n    # to get an even exponent, which would result in a perfect square when multiplied by 28.\n    result = 1\n    for prime, exp in factors.items():\n        if exp % 2 != 0:\n            result *= prime\n\n    return result\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    pancakes_per_minute = 2 / 3\n    total_minutes = 12\n    total_pancakes = pancakes_per_minute * total_minutes\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(4 - x, 5 * x - 8)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    num_sizes = 3\n    min_students_same_size = (total_students // num_sizes) + 1\n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    def triangle_op(a, b):\n        return (a + 2) / b\n\n    ans = triangle_op(8, triangle_op(6, 4))\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n    dvd_player = 740\n    tv_fraction = 3 / 4\n    remaining_salary_fraction = 1 / 5\n    \n    equation = Eq(salary - dvd_player - tv_fraction * (salary - dvd_player), remaining_salary_fraction * salary)\n    \n    solved_salary = solve(equation, salary)\n    \n    return float(solved_salary[0])\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'r' be the current age of Russell\n    r = symbols('r')\n    equation = Eq(r + 32, 4 * (r - 16))\n    \n    # Solve the equation to find Russell's current age\n    age_now = solve(equation, r)\n    return age_now[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    return 40 / 100 * 120\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    number_difference = abs(6 - 19)\n    people_in_half = number_difference - 1\n    total_people = people_in_half * 2\n\n    return total_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    # Iterate through all the possible values for A and C\n    for A in range(1, 10):  # A can't be 0 as it is the thousands digit\n        for C in range(0, 10):\n            # Form the original number ABCA\n            pip_number = A * 1000 + B * 100 + C * 10 + A\n            # Form the reversed number ACBA\n            bud_number = A * 1000 + C * 100 + B * 10 + A\n            # Check if their sum is 5510\n            if pip_number + bud_number == 5510:\n                return pip_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the initial number of students in Class 6A be x, and in Class 6B be y\n    x, y = symbols('x y')\n    \n    # Before any students move, the following equation represents the students distribution\n    equation1 = Eq(x, 4/9 * y)\n    \n    # After 3 students move from Class 6A to Class 6B, and 18 students move from Class 6B to Class 6A\n    equation2 = Eq(x - 3 + 18, y + 3 - 18)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # The total number of students in Class 6A at first\n    return solutions[x]\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make one cut.\n    # To cut a rod into 5 pieces requires 4 cuts since the first cut gives 2 pieces,\n    # the second cut gives 3 pieces, and so on until the fifth piece is achieved.\n    num_cuts_needed = 5 - 1\n    time_per_cut = 2\n    total_time = num_cuts_needed * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # The total number of spelling books is given as 72.\n    total_spelling_books = 72\n    # Each shelf can either have 4 math books or 9 spelling books.\n    spelling_books_per_shelf = 9\n    # We need to find out how many shelves are occupied by spelling books.\n    shelves_with_spelling_books = total_spelling_books / spelling_books_per_shelf\n    # The total number of shelves is given as 15.\n    total_shelves = 15\n    # Shelves with math books will be the remaining shelves\n    shelves_with_math_books = total_shelves - shelves_with_spelling_books\n    # Each shelf with math books contains 4 math books.\n    math_books_per_shelf = 4\n    # Calculate the total number of math books.\n    total_math_books = shelves_with_math_books * math_books_per_shelf\n    return total_math_books\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Time taken to walk from the first to the fourth floor\n    time_to_fourth = 6\n    \n    # Number of floors from the first to the fourth floor, which is fourth minus first\n    floors_to_fourth = 4 - 1\n    \n    # Calculate time per floor\n    time_per_floor = time_to_fourth / floors_to_fourth\n    \n    # Number of floors from the first to the tenth floor, which is tenth minus first\n    floors_to_tenth = 10 - 1\n    \n    # Calculate total time to the tenth floor\n    total_time_to_tenth = time_per_floor * floors_to_tenth\n    \n    return total_time_to_tenth\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    biscuits_original = 100\n    chocolate_original = 40\n    biscuits_available = 75\n\n    # Using the principle of cross-multiplication to maintain the ratio\n    chocolate_required = (chocolate_original * biscuits_available) / biscuits_original\n\n    return chocolate_required\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    num_days_in_a_week = 7\n    total_earnings = average_daily_earnings * num_days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    total_combinations = pasta_choices * sauce_choices * topping_choices\n    \n    return total_combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n\n    solution_n = solve(equation, n)\n\n    return solution_n\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Calculate time for each segment\n    time_first_segment = 280 / 7  # Time = Distance / Speed\n    time_middle_segment = 400 / 5\n    time_last_segment = (800 - 280 - 400) / 8  # Total distance - sum of the first two segments\n\n    # Total time is the sum of time for each segment\n    total_time = time_first_segment + time_middle_segment + time_last_segment\n\n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of marbles each person originally had\n    anna, betsy, charlene = symbols('anna betsy charlene')\n    \n    # Set up the equations based on the problem statement\n    initial_total = Eq(anna + betsy + charlene, 168)\n    after_charlene_gives = Eq(betsy + 15, charlene - 15)\n    after_betsy_gives = Eq(anna + 8, betsy - 8)\n    \n    # Set the final ratio of the marbles\n    final_ratio = Eq(2 * (betsy - 8), 5 * (anna + 8))\n    final_ratio_charlene = Eq(7 * (anna + 8), charlene - 15)\n    \n    # Solve the system of equations\n    solutions = solve((initial_total, after_charlene_gives, after_betsy_gives, final_ratio, final_ratio_charlene), (anna, betsy, charlene))\n    \n    return solutions[betsy]\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9*6) - (7*6)\n    return ans\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # Originally, student 16 is opposite to student 8, so there must be 15 students in between.\n    # Since they are standing in a circle, the total number of students would be 16 + 15 = 31.\n\n    # After the first game, there must be an odd number of students standing between student 8 and 22\n    # to keep them directly opposite. This means there are 21 - 8 = 13 students in between.\n    # Therefore, the total number of students now is 22 + 13 = 35.\n\n    # The number of new students joined is the difference between the new total and the original total.\n    new_students = 35 - 31\n\n    return new_students\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    yellow = 4\n    red = 3\n    green = 7\n    total_cards = yellow + red + green\n    # Calculate the number of permutations with repetitions\n    different_ways = factorial(total_cards) // (factorial(yellow) * factorial(red) * factorial(green))\n    return different_ways\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 268 + 1):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    # The dimensions of the paper\n    length = 1.36  # in meters\n    width = 0.8  # in meters\n\n    # Convert meters to centimeters to work with whole numbers\n    length_cm = length * 100\n    width_cm = width * 100\n\n    # Find the greatest common divisor of the two dimensions\n    side_length = gcd(int(length_cm), int(width_cm))\n\n    # Calculate the number of squares\n    num_squares = (length_cm // side_length) * (width_cm // side_length)\n\n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    count = 0\n    for digit1 in [4, 5, 7]:\n        for digit2 in [4, 5, 7]:\n            for digit3 in [5, 7]:  # Only odd digits for the last place\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of lollipops and y be the original number of gum drops\n    x, y = symbols('x y')\n\n    # According to the problem, we first declare two equations based on the ratios\n    original_ratio = Eq(x/y, 5/7)\n    new_ratio = Eq((x + 120)/(y + 120), 4/5)\n\n    # Now we solve the two equations to find the values of x and y\n    solutions = solve((original_ratio, new_ratio), (x, y))\n\n    # Once we have x and y, we sum them up and add 240 to it (120 pieces of each candy to the original number)\n    total_candies = solutions[x] + solutions[y] + 240\n\n    return total_candies\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    numbers_less_than_201 = range(1, 201)\n    \n    multiples_of_5 = [num for num in numbers_less_than_201 if num % 5 == 0]\n    multiples_of_7 = [num for num in numbers_less_than_201 if num % 7 == 0]\n    \n    multiples_of_5_and_7 = [num for num in multiples_of_5 if num in multiples_of_7]\n\n    ans = len(multiples_of_5) + len(multiples_of_7) - len(multiples_of_5_and_7)\n    \n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    chris_eq = Eq(durian + 2 * pineapple + 3 * watermelon, 440)\n    dylan_eq = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    solutions = solve((chris_eq, dylan_eq), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    # Since each team plays every other team twice, we have a complete graph where each edge represents a match\n    # and each node represents a team. The total number of matches (edges) is given by the formula:\n    # matches = n*(n-1), where n is the number of teams\n    # We need to find n such that matches is 30 and matches = n*(n-1)/2 since each match is counted twice (home and away).\n    \n    matches = 30\n    # n*(n-1)/2 = matches\n    # n^2 - n - 2*matches = 0, which is a quadratic equation that we can solve for n\n    for n in range(1, matches):\n        if n*(n-1)/2 == matches:\n            return n\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i % 2) * (100 - i) for i in range(100))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    # Let x be the original number and y be the number without the zero in the ones digit.\n    # Then we know that:\n    # x = 10 * y + 0\n    # x - y = 135\n    # Solving for y we get y = (x - 135)\n    # Plugging this back into the first equation we get\n    # x = 10 * (x - 135)\n    # x = 10 * x - 10 * 135\n    # 9 * x = 10 * 135\n    # x = (10 * 135) / 9\n    x = (10 * 135) / 9\n    return int(x)\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    expression = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    ans = expression\n    return ans\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n\n    # Each trip can carry a maximum of 'boat_capacity' students across the river.\n    # One student has to row back the boat, reducing the effective capacity to 'boat_capacity - 1' for each trip.\n    # Except for the last trip, which does not need anyone rowing back.\n    \n    # We calculate the number of full trips (excluding the last trip)\n    full_trips = (students - boat_capacity) // (boat_capacity - 1)\n    \n    # Now, we calculate the remaining students after these full trips\n    remaining_students = (students - boat_capacity) % (boat_capacity - 1)\n    \n    # If after the full trips there are no students left, then the last trip is just the one trip back.\n    # If there are remaining students after the full trips, we need one additional trip to carry them across.\n    last_trip = 0 if remaining_students == 0 else 1\n    \n    # The total trips include the trips needed for both ways until the last trip and the last one-way trip\n    total_trips = (full_trips * 2) + last_trip + 1   # Adding 1 for the one-way last trip\n\n    return total_trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    value = (49 * 57) + 7\n    return value\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    hundreds = 3\n    tens = 2\n\n    number = hundreds * 100 + tens * 10 + ones\n    \n    return number\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let x be the total number of students\n    # 80% chose A, which is 0.80x\n    # 35% chose B, which is 0.35x\n    # 10% chose neither, which is 0.10x\n    # We know that 75 students chose both A and B\n    # So, using the Inclusion-Exclusion Principle:\n    # total students = students chose A + students chose B - students chose both + students chose neither\n    # x = 0.80x + 0.35x - 75 + 0.10x\n    # Now we solve for x\n\n    both = 75\n    neither_percent = 10 / 100\n\n    # Inclusion-Exclusion Principle:\n    # x*neither_percent = number of students who chose neither\n    # 0.80x + 0.35x = total percentage of A and B, but this double counts the students who chose both\n    # Therefore, the equation becomes:\n    # x = (0.80x + 0.35x - both) / (1 - neither_percent)\n\n    x = both / (0.80 + 0.35 - 1 - neither_percent)\n\n    return int(x)\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial as f\n    \n    ans = f(100) / (f(99) + f(98))\n    \n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frank, alex, paul = symbols('frank alex paul')\n\n    equation1 = Eq(frank - alex, alex - paul)\n    equation2 = Eq(frank + alex + paul, 99)\n\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    return solutions[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    numbers = list(permutations('1469', 4))\n    sum_of_numbers = sum([int(''.join(number)) for number in numbers])\n    average = sum_of_numbers / len(numbers)\n    return average\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n\n    # All numbers\n    all_numbers = set(range(1, 14))\n    # Numbers on students' foreheads\n    seen_numbers = set()\n\n    # Find all prime numbers in the 1-13 range\n    prime_numbers = {x for x in range(2, 14) \n                     if all(x % i != 0 for i in range(2, int(x**0.5) + 1))}\n\n    # Two students know the number of factors (they must be prime numbers).\n    # Hence select all combinations of seen numbers including 2 primes\n    for combo in combinations(all_numbers, 9):\n        combo_set = set(combo)\n        primes_in_combo = prime_numbers.intersection(combo_set)\n        if len(primes_in_combo) == 2:\n            seen_numbers.add(combo)\n\n    ans = None\n    # Check conditions given by Alice and May\n    for seen_combo in seen_numbers:\n        for alice_num in seen_combo:\n            # Alice's number is odd\n            if alice_num % 2 == 0:\n                continue\n\n            # Possibilities for May and Mark's numbers\n            may_num = alice_num - 2\n            mark_num = may_num - 1\n\n            # Check if May's and Mark's numbers are in the possible combination\n            if may_num in seen_combo and mark_num in seen_combo:\n                remaining_numbers = all_numbers - set(seen_combo)\n                ans = prod(remaining_numbers)\n                # We found a valid solution, no need to check further\n                break\n\n        # If a solution has been found, no need to check other combinations\n        if ans is not None:\n            break\n\n    return ans\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of boys and girls initially\n    boys, girls = symbols('boys girls')\n    \n    # Create the equations according to the problem statement\n    # Initially, the number of boys and girls is equal.\n    equation1 = Eq(boys, girls)\n    \n    # After 60 boys and 12 girls left, the number of girls was twice the number of boys\n    equation2 = Eq(girls - 12, 2 * (boys - 60))\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (boys, girls))\n    \n    # The solution for the number of boys at the gathering at first is returned\n    return solution[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    hundreds_place = 9  # The greatest 1-digit number\n    # Since the number is even, the ones place must be an even number (0, 2, 4, 6, 8)\n    # And the sum of tens and ones place is 15, the ones digit cannot be 0 or 8\n    # So the possible even digits for ones place are 2, 4, 6\n    possible_ones = [2, 4, 6]\n    \n    for ones in possible_ones:\n        tens = 15 - ones  # The tens digit is whatever is needed to add to the ones digit to make 15\n        if tens != hundreds_place and tens < 10:  # Making sure tens place digit is different and less than 10\n            return hundreds_place * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    # Speeds of the van and car\n    speed_van = 80  # km/h\n    speed_car = 120  # km/h\n    \n    # Time after which car starts\n    delay = 3  # hours\n    \n    # Distance traveled by van in the 3 hour delay\n    distance_van = speed_van * delay\n    \n    # Relative speed at which car catches up to the van\n    relative_speed = speed_car - speed_van\n    \n    # Time taken for the car to catch up with the van \n    time_to_catch_up = distance_van / relative_speed\n    \n    return time_to_catch_up\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert recurring decimals to fraction\n    # The product of 0.01 repeating can be denoted as 1/99\n    frac_1 = Fraction(1, 99)\n    # The product of 0.01 repeating is (1/99) * (1/99)\n    product_frac = frac_1 * frac_1\n\n    # Convert it back into a decimal to count the number of digits in the repetend\n    decimal_product_str = str(product_frac.numerator).zfill(product_frac.denominator.bit_length() - 1)\n\n    # Calculate the number of digits in one repetend of the product\n    repetend_length = len(decimal_product_str)\n\n    return repetend_length\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    from itertools import combinations\n\n    # Hats are optional, so Wendy can choose 0, 1, 2, 3, or 4 hats, for each number of hat choices there are C(4,k) ways\n    hats_options = sum([len(list(combinations(range(4), k))) for k in range(5)])\n    \n    # Shirts, pants, and skirts have to be chosen exactly as stated\n    shirts_options = len(list(combinations(range(3), 3)))\n    pants_options = len(list(combinations(range(2), 2)))\n    skirts_options = len(list(combinations(range(1), 1))) # There's only one skirt, so it's just 1 way\n    \n    # Multiply options according to the multiplication rule\n    total_combinations = hats_options * shirts_options * pants_options * skirts_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Calculate the rates of both printers\n    rate_A = 300 / 12  # pages per minute\n    rate_B = 300 / 10  # pages per minute\n    \n    # Calculate the combined rate when both printers are working together\n    combined_rate = rate_A + rate_B  # pages per minute\n\n    # Convert 1/2 hour to minutes\n    time_in_minutes = 30\n    \n    # Calculate the number of pages printed by both printers in 1/2 h\n    pages_printed = combined_rate * time_in_minutes\n    \n    return pages_printed\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count_threes = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if month == 2 and day > 28:\n                continue\n            if month in [4, 6, 9, 11] and day > 30:\n                continue\n            date = \"{:02d}/{:02d}/2019\".format(day, month)\n            count_threes += date.count('3')\n    return count_threes\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    # Define a symbolic variable for the total number of items\n    from sympy import symbols, Eq, solve\n    total_items = symbols('total_items')\n\n    # Create the equations based on the problem statement\n    apples = 2/3 * total_items\n    bananas = 1/9 * total_items\n    lemons = total_items - (apples + bananas)\n\n    # Equation representing the fact that Rena bought 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    # Solve the equation to find the total number of items\n    solutions = solve(equation, total_items)\n\n    # Compute the number of lemons\n    num_lemons = total_items.subs(total_items, solutions[0]) - (2/3 * solutions[0] + 1/9 * solutions[0])\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # There is only one cube that has exactly three faces painted yellow in each corner of the cuboid.\n    # The number of corners in a cuboid is 8.\n    return 8\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for digit1 in range(1, 10):\n        for digit2 in range(10):\n            original_number = digit1 * 10 + digit2\n            swapped_number = digit2 * 10 + digit1\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of durian puffs, c be the number of chocolate puffs,\n    # and s be the number of strawberry puffs sold\n    d, c, s = symbols('d c s')\n\n    # Set up the equations based on the ratio and total sales\n    ratio_eq = Eq(d/c, 3/4)\n    ratio_eq2 = Eq(c/s, 4/2)\n    total_sales_eq = Eq(5*d + 3*c + 4*s, 560)\n\n    # Solve the equations\n    solutions = solve((ratio_eq, ratio_eq2, total_sales_eq), (d, c, s))\n\n    # Calculate the amount collected from durian puffs\n    durian_sales = 5 * solutions[d]\n\n    return durian_sales\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    school_a = 24\n    school_b = 36\n    school_c = 42\n\n    gcd_ab = gcd(school_a, school_b)\n    gcd_abc = gcd(gcd_ab, school_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    interest_first_three_years = 0.06\n    interest_last_two_years = 0.08\n    \n    # Compound interest for the first three years\n    amount_after_three_years = principal * (1 + interest_first_three_years) ** 3\n    \n    # Compound interest for the last two years\n    final_amount = amount_after_three_years * (1 + interest_last_two_years) ** 2\n    \n    # Round the result to the nearest hundredth\n    ans = round(final_amount, 2)\n    \n    return ans\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the levels at which A, B, C, D, Zachary, Yvonne, Xavier, and Waylon stay\n    A, B, C, D, Zachary, Yvonne, Xavier, Waylon = symbols('A B C D Zachary Yvonne Xavier Waylon')\n\n    # Constraints based on the information given\n    constraints = [\n        A > C,        # (1) A is higher than C\n        A < D,        # (1) A is lower than D\n        B < Xavier,   # (2) B is lower than Xavier\n        D == 5 * Yvonne,        # (3) D's level is 5 times Yvonne's level\n        Zachary + 2 - Xavier == Zachary - Waylon,   # (4) Level difference criterion for Zachary\n        Zachary == Yvonne + Xavier, # (5) Zachary's level is the sum of Yvonne's and Xavier's levels\n        # Additional constraints to ensure the levels are within the apartment block and distinct\n        A > 0, A <= 18,\n        B > 0, B <= 18,\n        C > 0, C <= 18,\n        D > 0, D <= 18,\n        Zachary > 0, Zachary <= 18,\n        Yvonne > 0, Yvonne <= 18,\n        Xavier > 0, Xavier <= 18,\n        Waylon > 0, Waylon <= 18,\n        A != B, A != C, A != D, B != C, B != D, C != D,        # Different levels\n        Zachary != Yvonne, Zachary != Xavier, Zachary != Waylon, Yvonne != Xavier, Yvonne != Waylon, Xavier != Waylon  # Different levels\n    ]\n\n    # Solve the system of equations\n    solutions = solve(constraints)\n    for sol in solutions:\n        if all(1 <= value <= 18 for value in sol.values()):\n            return sol[A]\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of each raisin roll and donut\n    raisin_roll, donut = symbols('raisin_roll donut')\n    \n    # Given that 5 raisin rolls and 6 donuts cost $14.70\n    equation1 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n    \n    # Each raisin roll costs 3 times as much as each donut\n    equation2 = Eq(raisin_roll, 3 * donut)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (raisin_roll, donut))\n    \n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(notebook + pencil_case, 6)\n    equation2 = Eq(pencil_case + eraser, 9)\n    equation3 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 8]\n    perm = permutations(digits)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for units in range(1, 10):\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    total_numbers = 12 * (12 + 1) // 2\n    half = total_numbers // 2\n    \n    count = 0\n    for i in range(1, 13):\n        count += i\n        if count >= half:\n            return i\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    num_digits = 0\n    for number in range(7, 41):\n        num_digits += len(str(number))\n    return num_digits\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    n1, s1 = 9, 99  # The sum of first 9 terms is 99\n    n2, s2 = 27, 540  # The sum of first 27 terms is 540\n    n = 16  # We want to find the sum of first 16 terms\n\n    # Using the formula for the sum of an arithmetic sequence: S = n/2 * (2a + (n - 1)d)\n    # We have two equations based on the given sums:\n    # s1 = n1/2 * (2a + (n1 - 1)d)\n    # s2 = n2/2 * (2a + (n2 - 1)d)\n    \n    # We can solve these two equations to find a (the first term) and d (the common difference)\n    \n    from sympy import symbols, Eq, solve\n    \n    a, d = symbols('a d')\n    equation1 = Eq(s1, n1/2 * (2*a + (n1 - 1)*d))\n    equation2 = Eq(s2, n2/2 * (2*a + (n2 - 1)*d))\n    \n    solution = solve((equation1, equation2), (a, d))\n    \n    a_value = solution[a]\n    d_value = solution[d]\n    \n    # Now, plug back into sum equation to find the sum of the first 16 terms\n    sum_n = n / 2 * (2*a_value + (n - 1)*d_value)\n    \n    return sum_n\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cups = 6 / 5\n    needed_loafs = 24\n    cups_needed = needed_loafs / loafs_per_cups\n    return cups_needed\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    # Find the Least Common Multiple (LCM) of the two flashing rates\n    # Red light flashes 4 times a minute, hence it has a period of 15 seconds\n    # Green light flashes 6 times a minute, hence it has a period of 10 seconds\n    # LCM of 15 and 10 is 30 (meaning both lights will flash together every 30 seconds)\n\n    # There are 60 minutes in an hour, i.e., 3600 seconds\n    # Divide the total seconds in an hour by the LCM to get the number of times they flash together\n    lcm = 30\n    total_seconds = 3600  # 60 minutes * 60 seconds per minute\n    num_flashes_together = (total_seconds // lcm) + 1  # Including the first and the last time\n\n    return num_flashes_together\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Let x be the number we're trying to find\n    # According to the problem, if we triple x and add 1, we get 22.\n    # So the equation is 3x + 1 = 22\n    # We perform inverse operations to solve for x\n    # Subtract 1 from both sides: 3x = 22 - 1\n    # Divide both sides by 3: x = (22 - 1) / 3\n    \n    x = (22 - 1) / 3\n    return x\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    french_artists_count = 40\n    landscape_french_artists = 25\n    landscapes_count = int(0.40 * total_paintings)\n    still_lifes_count = total_paintings - landscapes_count\n    \n    french_landscape_and_still_life = landscapes_count - landscape_french_artists\n    non_french_still_lifes = french_artists_count - french_landscape_and_still_life\n    non_french_still_life_paintings = still_lifes_count - non_french_still_lifes\n\n    return non_french_still_life_paintings\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume_ml = 60 + 780\n    max_volume_per_glass = total_volume_ml // 9\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_weight_rice = (100 * 0.5) + (400 * 0.8)\n    total_weight_mixture = 100 + 400\n    concentration_rice = (total_weight_rice / total_weight_mixture) * 100\n    return concentration_rice\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_per_minute = 24\n    time_in_seconds = 300\n    time_in_minutes = time_in_seconds / 60\n    distance = speed_per_minute * time_in_minutes\n    return distance\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Calculate the number of games in the group stage\n    # Each group has 4 teams, which play a single round-robin tournament (each team plays every other team once)\n    # In a round-robin with 4 teams, each team plays 3 matches, so there are 6 matches in total per group\n    group_stage_games = 6 * 8  # There are 8 groups\n    \n    # Calculate the number of games in the knockout round\n    # Round of 16 (8 games), Quarterfinals (4 games), Semifinals (2 games), Third place play-off (1 game), and the Final (1 game)\n    knockout_stage_games = 16 + 8 + 4 + 2 + 1  # As after each stage, half of the teams are eliminated\n\n    # Total games played is the sum of the group stage games and knockout stage games\n    total_games = group_stage_games + knockout_stage_games\n\n    return total_games\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    S = sum(int('2' * i) for i in range(1, 2018))\n    return S % 100000  # Return the last 5 digits\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    total_hay = 12 * 15  # Total amount of hay for 12 horses for 15 days\n    days_for_20_horses = total_hay / 20  # Number of days that amount of hay can feed 20 horses\n    return days_for_20_horses\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    # Alice's house number is a 4-digit number in the form of ABCD\n    # When the first digit is moved to the ones place, the new number is DCBA\n    # The new number is bigger than the old one by 4707, so we can write:\n    # DCBA - ABCD = 4707\n\n    # To solve this problem, we can iterate over all 4-digit numbers\n    # and check which one satisfies the condition\n    for i in range(1000, 10000):  # All possible 4-digit numbers\n        str_num = str(i)\n        new_num = int(str_num[1:] + str_num[0])  # Construct the new number DCBA\n\n        if new_num - i == 4707:\n            return i  # This is the original house number\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # The current sum of their ages\n    current_sum = 20 + 26  # Oliver's age + Lin's age\n    # The desired sum of their ages\n    desired_sum = 48\n    # The difference between the desired sum and the current sum\n    years_needed = desired_sum - current_sum\n    # Each year, the sum of their ages increases by 2 (since each of them gets 1 year older)\n    years_later = years_needed // 2\n    return years_later\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_num = min(numbers, key=lambda x: abs(x - 1))\n    return closest_num\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    i = 1\n    while True:\n        num = 35 * i\n        if str(num).endswith('35') and sum(int(digit) for digit in str(num)) == 35:\n            return num\n        i += 1\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    y = symbols('y')\n    \n    # Equation based on the given problem\n    # Total spent on watch and handbag + 2 times the amount each child received = initial amount\n    equation = Eq(4*y + 20 + 2*(y - 5), 8*y)\n    \n    # Solve the equation for y\n    y_value = solve(equation, y)\n    \n    # Return the solution\n    return y_value[0]\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    total_days = 15\n    pocket_money = 100\n    deposit = 10\n    spend = -8\n    net_change_per_cycle = deposit + spend\n\n    cycles = total_days // 2\n    remaining_days = total_days % 2\n\n    # Since we deposit on odd days, we check if there's an remaining odd day\n    last_day_amount = deposit if remaining_days == 1 else 0\n\n    total_amount = pocket_money + (net_change_per_cycle * cycles) + last_day_amount\n\n    return total_amount\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    ans = 5.6 * 2.4\n    return ans\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for num in range(1, 100):\n        if num % 3 != 0 and num % 7 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    # Initialize variables\n    start_year = 1901\n    end_year = 2000\n    \n    # Function to check if year is a leap year\n    def is_leap_year(year):\n        return year % 4 == 0\n\n    # Count leap years between start and end years\n    leap_years = sum(1 for year in range(start_year, end_year + 1) if is_leap_year(year))\n    \n    # Regular years are total years minus leap years\n    regular_years = (end_year - start_year + 1) - leap_years\n    \n    # Days in leap and regular years\n    days_in_leap_years = leap_years * 366\n    days_in_regular_years = regular_years * 365\n    \n    # Total days from start to end\n    total_days = days_in_leap_years + days_in_regular_years\n    \n    return total_days\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(16, 28)\n\n    return ans\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    first_term = 1\n    last_term = 12\n    num_terms = last_term  # There are 12 terms, one for each hour\n\n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    total_strikes = (num_terms / 2) * (first_term + last_term)\n\n    return int(total_strikes)\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_coins = 40 // 10  # total number of ten-pence coins for 40 pence\n    total_weight = weight_per_coin * total_coins  # total weight in grams\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # Let n be the number of buttons Nina has originally\n    # James has 22 - n buttons originally\n    # After Nina gives 4 buttons to James, they have the same number of buttons\n    # So, Nina has n - 4 buttons and James has 22 - n + 4 buttons\n    # n - 4 = 22 - n + 4\n    n = (22 + 4) / 2\n\n    return n\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n    # Define the equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    correct_marks = 5\n    wrong_penalty = 2\n    total_questions = 6\n    total_score = 23\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_marks * correct_answers - wrong_penalty * wrong_answers\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_sum = 1 + 4\n    adults = (total_people * 1) / ratio_sum\n    return int(adults)\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    child_start = 3\n    children = 9\n    last_child = (child_start + total_candies - 1) % children\n    if last_child == 0:\n        last_child = children\n    return last_child\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    return sum(numbers)\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    initial_speed = 10  # in m/s\n    angle = 37  # angle in degrees\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Converting angle to radians for calculation\n    angle_radians = math.radians(angle)\n    \n    # Using the formula: h = (u^2 * sin^2(angle)) / (2 * g)\n    # where u is the initial speed, angle is the inclination angle, and g is acceleration due to gravity.\n    # This calculates the height 'h' reached by the box.\n    h = (initial_speed ** 2 * math.sin(angle_radians) ** 2) / (2 * g)\n    \n    # Using trigonometry to find the distance 'd' along the ramp: d = h / sin(angle)\n    d = h / math.sin(angle_radians)\n    \n    # The height 'h' and distance 'd' along the ramp are the answers.\n    return h, d\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # The worst case happens when Sheila takes out all the balls of the two colors with the least balls first\n    # In this case, it is the orange and yellow balls.\n\n    # Since there are 4 orange and 2 yellow balls, she needs to take all of them to ensure that\n    # she has at least one group of 4 balls of the same color.\n    # That would be 4 (orange) + 2 (yellow) balls = 6 balls\n\n    # Now to get to the second group of 4 balls of the same color (which would have to be blue since\n    # only blue balls would remain), she needs to take out 4 more blue balls.\n\n    # So in total, she needs to take out 6 (orange + yellow) + 4 (blue) = 10 balls.\n    return 10\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    racket, ball = symbols('racket ball')\n\n    # Create the equations based on the given information\n    eq1 = Eq(racket + 3 * ball, 536)  # Total mass of one racket and 3 balls\n    eq2 = Eq(2 * racket + 3 * ball, 904)  # Total mass of two rackets and 3 balls\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    players = 64\n    players_per_match = 4\n\n    matches_required = (players - 1) // (players_per_match - 1)\n\n    return matches_required\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    return 2.5 * 24\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for i in range(1000, 10000):\n        str_i = str(i)\n        rotated_num = int(str_i[1:] + str_i[0])\n        if rotated_num - i == 4707:\n            return i\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    number_of_flour_bags = 4\n    \n    flour_weight = (total_weight - cheese_weight) / number_of_flour_bags\n    return flour_weight\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime\n\n    for age in [28, 39, 52, 84]:\n        if isprime(age + 1) and int((age - 3) ** 0.5) ** 2 == age - 3 and int((age + 12) ** (1/3)) ** 3 == age + 12:\n            return age\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    red = 3\n    yellow = 4\n    brown = 5\n    # Bart takes all of one color and one more to ensure he has at least two different colors\n    ans = max(red, yellow, brown) + 1\n    return ans\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a + b\n\n    for x in range(1000):\n        if new_operation(2, new_operation(x, 4)) == 59:\n            return x\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Ratio of speeds based on comparison between Andrew and Bernice at level 5\n    # Andrew : Bernice = 5 : 3\n    andrew_speed = 5\n    bernice_speed = 3\n    \n    # Ratio of speeds based on comparison between Bernice and Cassandra at level 6\n    # Bernice : Cassandra = 6 : 10\n    # Normalize the speed ratio of Bernice with respect to Andrew's speed\n    bernice_cassandra_speed_ratio = (10 / 6) * bernice_speed\n    cassandra_speed = bernice_cassandra_speed_ratio\n    \n    # Ratio of speeds: Andrew : Cassandra\n    andrew_cassandra_speed_ratio = andrew_speed / cassandra_speed\n    \n    # Find Andrew's level when Cassandra is at level 19 using their speed ratio\n    andrew_level = 19 * andrew_cassandra_speed_ratio\n    \n    return int(andrew_level)\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # Equations derived from sum of an arithmetic sequence formula:\n    # S_n = n/2 * (2a + (n - 1)d)\n    # where S_n is the sum of the first n terms, a is the first term, and d is the common difference.\n    # We can create two equations based on the given information.\n\n    # For the first 9 terms: S_9 = 72 = 9/2 * (2a + (9 - 1)d)\n    # For the first 23 terms: S_23 = 736 = 23/2 * (2a + (23 - 1)d)\n\n    # Solve for a and d using simultaneous equations\n    S_9 = 72\n    S_23 = 736\n\n    # From S_9 we get: 2a + 8d = S_9 * 2 / 9\n    # From S_23 we get: 2a + 22d = S_23 * 2 / 23\n\n    # we can set up a system of linear equations to solve for a and d\n\n    # System of equations:\n    # Equation (1): 2a + 8d = 72 * 2 / 9\n    # Equation (2): 2a + 22d = 736 * 2 / 23\n\n    # Solving the system of equations for a and d\n    a_coefficient_1 = 2\n    d_coefficient_1 = 8\n    rhs_1 = S_9 * 2 / 9\n    a_coefficient_2 = 2\n    d_coefficient_2 = 22\n    rhs_2 = S_23 * 2 / 23\n\n    # Determinant of the system's matrix\n    determinant = a_coefficient_1 * d_coefficient_2 - a_coefficient_2 * d_coefficient_1\n\n    # Using Cramer's rule to solve for a and d\n    determinant_a = rhs_1 * d_coefficient_2 - rhs_2 * d_coefficient_1\n    determinant_d = a_coefficient_1 * rhs_2 - a_coefficient_2 * rhs_1\n\n    a = determinant_a / determinant\n    d = determinant_d / determinant\n\n    # Now we can find the sum of first 16 terms using the formula for the sum of an arithmetic sequence\n    # S_16 = 16/2 * (2a + (16 - 1)d)\n    S_16 = (16 / 2) * (2 * a + (16 - 1) * d)\n\n    return S_16\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assuming that the question implies Richard will use the same amount of money but converted to the local currency of St Petersburg, which is Russian Ruble (RUB).\n    # For this problem, we need the exchange rate from GBP to RUB which is not provided in the question. \n    # However, let's assume that the exchange rate is R_exchange_rate RUB for each £1 GBP.\n    # Let's further assume that in St Petersburg the price of a CD is CD_price_rub RUB.\n    # Now, the amount in RUB that Richard has is equivalent to the cost of one CD in GBP times the exchange rate.\n    \n    british_pounds = 14\n    R_exchange_rate = 1  # This is a placeholder, the exchange rate must be provided or known to solve the problem accurately.\n    CD_price_rub = 1  # This is a placeholder as well, the price of a CD in RUB must be provided or known to solve the problem accurately.\n    \n    rubles = british_pounds * R_exchange_rate\n    num_CDs = rubles // CD_price_rub\n    \n    return int(num_CDs)\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    return 43242 / 100\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    num_repeats = 43 // len(pattern)\n    remaining_digits = 43 % len(pattern)\n    \n    sum_of_repeated = sum(int(digit) for digit in pattern) * num_repeats\n    sum_of_remaining = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    ans = sum_of_repeated + sum_of_remaining\n    return ans\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    km_to_cm = 4.7 * 100000  # 1 kilometer is 100000 centimeters\n    return km_to_cm\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz = 30  # minutes per quiz \n    number_of_quizzes = 4\n    total_time_minutes = time_per_quiz * number_of_quizzes\n    total_time_hours = total_time_minutes / 60  # convert to hours\n\n    return total_time_hours\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair_cost = symbols('chair_cost')\n\n    # Let the cost of one chair be x dollars.\n    # Then the cost of one table is 3 * x dollars.\n    # 4 tables and 9 chairs cost 504 dollars.\n    total_cost_eq = Eq(4 * (3 * chair_cost) + 9 * chair_cost, 504)\n\n    solved_values = solve(total_cost_eq, chair_cost)\n\n    return solved_values[0]\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_initial = 40 / 60\n    \n    # Calculate the initial distance both drivers covered together before Samuel turned back\n    distance_initial_shafur = 54 * time_initial\n    distance_initial_samuel = 66 * time_initial\n    \n    # Since they arrive at the same time and Samuel has to drive the initial distance back to town X\n    # and then to town Y, the extra distance Samuel drives (which is twice the initially covered distance)\n    # is covered at a speed that is the difference between their speeds.\n    speed_difference = 66 - 54\n    \n    # Time taken by Samuel to cover the extra distance at the speed difference\n    time_extra_samuel = (2 * distance_initial_samuel) / speed_difference\n    \n    # Since Shafur was driving for the combined initial time plus Samuel's extra time\n    total_time_shafur = time_initial + time_extra_samuel\n    \n    # Total distance between X and Y\n    distance_X_to_Y = 54 * total_time_shafur\n    \n    return distance_X_to_Y\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandson_ages = [4, 7, 12]\n\n    # Assume in 'x' years, the sum of the grandson's ages will be equal to grandpa's age.\n    # So we have the equation: grandpa_age + x = sum(grandson_ages) + 3*x, since there are 3 grandsons\n\n    x = symbols('x')\n    equation = Eq(grandpa_age + x, sum(grandson_ages) + 3*x)\n    solution = solve(equation, x)\n\n    ans = solution[x]\n    return ans\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for five_p in range(0, 41, 5):\n        for ten_p in range(0, 41, 10):\n            if five_p + ten_p == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    common_difference = -4\n    n = 1  # Start with the first term\n    \n    while first_term > 0:\n        first_term += common_difference\n        n += 1\n\n    # The loop goes one step too far, so we subtract one from n\n    return n - 1\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for number in range(100, 1000):\n        digits = [int(digit) for digit in str(number)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if 100 <= product <= 999:\n            return number\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    vase_capacity = 9\n\n    vases_needed = -(-flowers // vase_capacity)  # Ceiling division to find the minimal number of vases\n\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n\n    difference = morning_fruit - afternoon_fruit\n\n    return difference\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 + (3 - (38 % 3)) % 3)  # First multiple of 3 greater than or equal to 38\n    last_multiple = 81 - (81 % 3)  # Last multiple of 3 less than or equal to 81\n    \n    num_multiples = ((last_multiple - first_multiple) // 3) + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    import math\n    ans = math.lcm(12, 15)\n    return ans\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # Expression: (7 / -3.3333..) / (-0.027 ** (1/3)) + (2**3 / 4**2) / (0.125 * (1.8 - (0.2 * 7))) - (0.1 / 0.142857.. + (2 * 0.3))\n    # Replace repeating decimals with their fractional equivalents for precision\n    # -3.333... is -10/3 and 0.142857... is 1/7\n    expr1 = (7 / (-10/3)) / ((-27/1000) ** (1/3))\n    expr2 = ((2**3) / (4**2)) / (0.125 * (1.8 - (0.2 * 7)))\n    expr3 = - (0.1 / (1/7) + (2 * 0.3))\n    \n    # Calculate each expression\n    result = expr1 + expr2 + expr3\n    \n    return result\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    phones_left = 78\n    phones_sold_feb = (phones_left + 13) * 2\n    initial_phones = (phones_sold_feb + 22) * 2\n    return initial_phones\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Calculate the sum of the first increasing sequence from 3 to 10\n    sum_increasing = sum(range(3, 11))\n    \n    # Calculate the sum of the second decreasing sequence from 10 to 3\n    sum_decreasing = sum(range(3, 11))\n    \n    # Subtract the repeated 10 from the decreasing sequence\n    sum_decreasing -= 10\n    \n    # The total sum is the sum of both sequences\n    total_sum = sum_increasing + sum_decreasing\n\n    return total_sum\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_seventh_of_number = 18\n    whole_number = (three_seventh_of_number * 7) / 3\n    five_sixth_of_number = (whole_number * 5) / 6\n    return five_sixth_of_number\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip, bud + 50)\n    equation2 = Eq((pip - 0.8 * pip) / (bud - 3/4 * bud), 6/5)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n    return solutions[pip]\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    num_people = 5\n    num_games = num_people - 1\n    return num_games\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    pencils = (total_items - more_pens) / 2\n    return int(pencils)\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    apples_from_bud = 16\n\n    total_apples = (boxes * apples_per_box) + apples_from_bud\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_packets = 4\n    packet_amount = 70\n    shortfall = 15\n\n    total_money = (total_packets * packet_amount) - shortfall\n\n    return total_money\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            return count\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Calculate total expenditure in each period\n    jan_to_apr = 500 * 4  # January to April\n    may_to_jul = 300 * 3  # May to July\n    aug_to_sep = 400      # August to September\n    oct_to_dec = 300 * 3  # October to December\n\n    # Calculate total expenditure for the year\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n\n    # Calculate average expenditure per month\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    num_people = 5\n    num_games = num_people - 1  # In a knockout tournament, every game eliminates one player\n\n    return num_games\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # If the book is on the 8th shelf from the front and the 10th from the back,\n    # there must be 7 shelves before it and 9 shelves after it.\n    # Therefore, the total number of shelves is 7 (before) + 1 (the shelf with the book) + 9 (after).\n    total_shelves = 7 + 1 + 9\n    return total_shelves\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person originally had\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Equations based on the problem statement\n    equation1 = Eq(anna + betsy + charlene, 168)  # Total number of marbles\n    equation2 = Eq(anna + 8, 2 / 5 * (betsy - 8))  # Ratio of Anna's to Betsy's marbles after the exchanges\n    equation3 = Eq(charlene - 15, 7 / 5 * (betsy - 8))  # Ratio of Charlene's to Betsy's marbles after the exchanges\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (anna, betsy, charlene))\n\n    # Betsy's original number of marbles\n    return solutions[betsy]\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    combined_age_4_years_ago = 10\n    years_passed_since_then = 4 + 2\n    combined_age_in_2_years = combined_age_4_years_ago + (2 * years_passed_since_then)\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * 0.80 + 0.8\n    return ans\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(2016)\n    ages = [2, 2, 2, 2]  # 2016 = 2^5 * 3^2 * 7, start with the smallest prime factors\n\n    # We need to distribute the remaining prime factors (3's and 7)\n    # into the ages array, ensuring all ages are under 10, and are unique.\n\n    # Distribute the first 3 to make one of the ages 6\n    ages[0] *= 3\n    \n    # Distribute the second 3 to make another age 6\n    ages[1] *= 3\n    \n    # Distribute the 7 to make another age 14, but\n    # since all children are under 10, we must use\n    # the existing factor of 2 in one of the ages,\n    # turning one 6 into 7 by dividing by 2 first.\n    ages[1] //= 2\n    ages[1] *= 7\n    \n    # Finally, we have ages [6, 7, 4, 2]\n    # The other way [6, 14, 2, 1] is not used because it implies a child under age 1.\n\n    return sum(ages)\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    nth_term = 140\n    n = 12\n\n    common_difference = (nth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Total number of students in vertical line where Chris is standing\n    vertical_students = 7 + 4 - 1  # Minus 1 because Chris is counted twice\n    \n    # Total number of students in horizontal line where Chris is standing\n    horizontal_students = 3 + 7 - 1  # Minus 1 because Chris is counted twice\n    \n    # Calculate total number of students in the rectangular field\n    total_students = vertical_students * horizontal_students\n    \n    return total_students\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_chocolate = 60\n    original_mass = remaining_chocolate / (1 - 3/5)\n    return original_mass\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_pence_coins = symbols('ten_pence_coins', integer=True)\n    twenty_pence_coins = 2 * ten_pence_coins\n    five_pence_coins = ten_pence_coins / 2\n\n    total_amount_pence = 1575  # £15.75 is 1575 pence\n    equation = Eq(5 * five_pence_coins + 10 * ten_pence_coins + 20 * twenty_pence_coins, total_amount_pence)\n\n    solution = solve(equation, ten_pence_coins)\n\n    num_twenty_pence_coins = 2 * solution[0]  # twice as many 20p coins as 10p coins\n\n    return num_twenty_pence_coins\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # boys have as many sisters as brothers: sisters = boys - 1\n    eq1 = Eq(girls, boys - 1)\n    \n    # girls have half as many sisters as brothers: sisters = 2*(girls - 1)\n    eq2 = Eq(girls, 2 * (girls - 1))\n    \n    solutions = solve((eq1, eq2), (boys, girls))\n    \n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # Convert minutes to hours for each section of the trip\n    hours_first_30_min = 30 / 60\n    hours_second_30_min = 30 / 60\n    hours_last_30_min = 30 / 60\n    \n    # Distance = Speed * Time\n    distance_first_30_min = x * hours_first_30_min\n    distance_second_30_min = (x - 20) * hours_second_30_min\n    distance_last_30_min = (x + 10) * hours_last_30_min\n\n    # Equation for the total distance\n    equation = Eq(distance_first_30_min + distance_second_30_min + distance_last_30_min, 70)\n\n    # Solve for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('15/5/2021', '%d/%m/%Y')\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n    \n    while base_10_number > 0:\n        base_6_number = str(base_10_number % 6) + base_6_number\n        base_10_number = base_10_number // 6\n    \n    return base_6_number\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    cost_per_person = 5.50\n    number_of_people = 6\n    tip_percentage = 10 / 100\n    note_value = 50\n    \n    total_cost = cost_per_person * number_of_people\n    total_tip = total_cost * tip_percentage\n    total_payment = total_cost + total_tip\n    change = note_value - total_payment\n    \n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    depth = 10\n    climb_up = 4\n    slide_down = 2\n    climbed_distance = 0\n    day = 0\n\n    while climbed_distance < depth:\n        day += 1\n        climbed_distance += climb_up\n        if climbed_distance >= depth:\n            break\n        climbed_distance -= slide_down\n    \n    return day\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    return (6/7) * 42\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    total_apples = 27\n    total_children = 5\n\n    # We can distribute the apples one-per-child first \n    # because each child should get at least one apple.\n    remaining_apples = total_apples - total_children\n\n    # Now, we need to distribute the remaining apples to the children.\n    # As the distribution must be unique for each child,\n    # we start by giving the least number of apples to the child who gets the most.\n    most_apples = 1  # Initialize with the minimum amount they already have\n    while True:\n        # Distribute remaining apples amongst the other children\n        for i in range(1, total_children):\n            most_apples += i  # Distribute increasing number of apples to other children\n        if remaining_apples < most_apples:\n            # If we cannot distribute the remaining apples, \n            # then the current value of most_apples is the maximum one child can get\n            break\n        most_apples = 1  # Reset for the next iteration\n        remaining_apples -= 1  # One less apple to distribute amongst children\n\n    # As the above loop terminates when most_apples is the maximum,\n    # we add back the apple we initially distributed to each child.\n    most_apples += 1\n\n    return most_apples\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # We use backward induction to solve this problem.\n    # For Jason to win, he must leave Belinda in a state where no matter what she takes (1, 2, or 3 marbles),\n    # he can always take the last marble on his next turn.\n    # The number of marbles that must be left for Belinda to ensure a win for Jason is a multiple of 4\n    # (since 3+1=4, 2+2=4, 1+3=4).\n    \n    # Therefore, we need to find a number of marbles that Jason can take that leaves a multiple of 4 marbles.\n    # Working backwards from 26, we calculate the first move:\n    for jason_move in range(1, 4):\n        remaining_marbles = 26 - jason_move\n        # If remaining marbles is not a multiple of 4, then Jason can win.\n        if remaining_marbles % 4 != 0:\n            return jason_move\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        total = 5 * n * (n + 1) // 2  # Sum of arithmetic sequence\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    base_number = (18 * 7) / 3  # base number is the whole number\n    result = (base_number * 5) / 6  # find 5/6th of the base number\n    return result\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    target_sum = 25\n    number_of_piles = 7\n    \n    # Find the set of all combinations of 7 unique numbers that add up to 25.\n    # Since they must be natural numbers, they must be at least 1. \n    possible_numbers = range(1, target_sum)\n    valid_combinations = [combo for combo in combinations(possible_numbers, number_of_piles) if sum(combo) == target_sum]\n    \n    return len(valid_combinations), valid_combinations\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(year=2023, month=5, day=15)\n    work_duration = timedelta(weeks=3)\n    \n    end_date = start_date + work_duration\n    return end_date.strftime('%dth %B')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # Since the alcoholic has to be in one of the three bars,\n    # if they are not in the first two, the probability of\n    # being in the third one is 100%.\n    # However, the question might be asking about the probability\n    # of the observer checking the two bars and not finding the\n    # alcoholic in both. Since the checks are random, the \n    # probability of not finding the alcoholic in the first bar is 2/3,\n    # and given that, the probability of not finding them in the second bar \n    # is 1/2 (since there are two remaining and only one of them has the alcoholic).\n    # The combined probability is the product of both probabilities.\n\n    prob_not_first_bar = 2 / 3\n    prob_not_second_bar_given_not_first = 1 / 2\n    prob_not_in_two_bars = prob_not_first_bar * prob_not_second_bar_given_not_first\n\n    # The probability of being in the third bar given not\n    # in the first two is then:\n    prob_in_third_bar = 1 - prob_not_in_two_bars\n\n    return round(prob_in_third_bar, 2)   # rounding to two decimal places for simplicity\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let k be the growth rate of the pasture per week, and C be the initial grass quantity.\n    # If 120 cows eat up the grass in 12 weeks, we have: C + 12*k = 120*12\n    # If 150 cows eat up the grass in 8 weeks, we have: C + 8*k = 150*8\n\n    # Solving the linear equations:\n    # Subtract the second equation from the first one to eliminate C:\n    # (120*12 - 150*8) = 12k - 8k\n    # 1440 - 1200 = 4k\n    # k = (1440 - 1200) / 4\n\n    k = (1440 - 1200) / 4\n\n    # Plug k back into one of the equations to find C:\n    # C + 12*k = 120*12\n    C = 120*12 - 12*k\n\n    # Let x be the number of cows the pasture can sustain for 6 weeks\n    # We have: C + 6*k = x*6\n    # x = (C + 6*k) / 6\n\n    x = (C + 6*k) / 6\n    return int(x)\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    # Let's use variables \"volunteers\" for the number of volunteers\n    # and \"trees\" for the number of trees\n    volunteers = 1\n    while True:\n        # The total number of trees if each volunteer plants 4 trees\n        trees_with_4 = volunteers * 4 + 5\n        # The total number of trees if each volunteer plants 7 trees\n        # which should be one volunteer less than when planting 4 trees\n        trees_with_7 = (volunteers - 1) * 7\n        \n        # If these two numbers are the same, we found the solution\n        if trees_with_4 == trees_with_7:\n            trees = trees_with_4  # or trees_with_7, they are equal\n            break\n\n        # Increment number of volunteers and try again\n        volunteers += 1\n\n    return volunteers, trees\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    ans = 3200 - 1476\n    return ans\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # Setup variables for proportions\n    a = 10\n    b = 14\n    c = 21\n\n    # Calculate the missing number using cross multiplication\n    # a/b = x/c\n    # x = (a * c) / b\n    x = (a * c) / b\n\n    return x\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    difference = 6  # common difference in the arithmetic sequence\n    last_term = 41  # last term in the given sequence\n    next_term = last_term + difference  # next term in the sequence\n\n    return next_term\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of stickers in Bag A, and y the initial number of stickers in Bag B\n    x, y = symbols('x y')\n\n    # According to the problem, we have two equations\n    # Equation1: x + y = 270 (Total number of stickers initially)\n    equation1 = Eq(x + y, 270)\n\n    # Equation2: (y + 56) / (x - 56) = 3/2 (Ratio after moving 56 stickers)\n    equation2 = Eq((y + 56) / (x - 56), 3/2)\n\n    # Solving the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    # Initialize a difference variable with the given number of boys more than girls\n    difference = 55\n    # Since the boys and girls are arranged in alternate square layers, we need to find such two squares\n    # where the difference of their areas (number of students in each layer) is equal to the given difference\n\n    # Start with the assumption that the total number of students is relatively small\n    # and check for each possible square size\n    total_students = 0\n    for boys in range(1, 2 * difference + 1, 2):  # Outer square will be boys, start with side length 1\n        girls = boys - 2  # Inner square side length (full of girls)\n        if girls > 0:\n            boy_students = boys**2\n            girl_students = girls**2\n            # The difference between the squares gives us the excess number of boys\n            if boy_students - girl_students == difference:\n                # Once we find the correct number of boys and girls, calculate total students\n                total_students = boy_students + girl_students\n                break\n\n    return total_students\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets_needed = -(-children // bars_per_packet)  # Ceiling division\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    result = 5 / 100 * 180\n    return result\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        return sum([i for i in range(1, n) if n % i == 0])\n\n    n = 2  # Start checking from the smallest positive integer\n\n    while True:\n        if sum_of_factors(n) == n:\n            return n  # When the sum of factors equals the number itself, return it\n        n += 1  # Move to the next number\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    numbers = range(30, 13, -2)\n    ans = sum(num if i % 2 == 0 else -num for i, num in enumerate(numbers))\n    return ans\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n\n    num_boxes = total_cakes // cakes_per_box if total_cakes % cakes_per_box == 0 else (total_cakes // cakes_per_box) + 1\n    \n    return num_boxes\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    # We have the 10th term which is 31\n    term_10 = 31\n    # The common difference can be found by subtracting two consecutive terms\n    common_difference = 28 - 25\n    # To find the first term, we subtract (n - 1) * common_difference from the nth term\n    # n is the term number which is 10 in this case\n    first_term = term_10 - (10 - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_left = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_left // number_of_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n    total_muffins = 3998\n\n    # Equation for the total muffins they had initially\n    equation1 = Eq(lovelle + makayla, total_muffins)\n\n    # Equation after Lovelle sold 462 muffins and Makayla sold 2/5 of hers, they have equal amount\n    equation2 = Eq(lovelle - 462, makayla - (2/5) * makayla)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total amount of money Irene had initially\n    total_money = symbols('total_money')\n\n    # Create the equation based on the problem statement\n    equation = Eq((1/4) * total_money + (2/7) * total_money, 225)\n\n    # Solve the equation\n    solution = solve(equation, total_money)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # We want to maximize the number of different positive integers that add up to 30\n    # If we use consecutive numbers starting from 1, we get the maximum count\n    # 1 + 2 + 3 + ... + n <= 30\n    # Using the formula for the sum of the first n natural numbers: n(n+1)/2 <= 30\n    # We find the largest n such that this inequality holds true\n    n = 1\n    while (n * (n + 1)) // 2 <= 30:\n        n += 1\n    # Since we overshoot by 1 in the last iteration, we need to subtract 1\n    n -= 1\n    return n\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # The number of cards that must be drawn to ensure at least 10 of one color is,\n    # one less than 10 for each of the three colors with less than 10 cards plus one \n    # card to guarantee that the 10th card of the color with at least 10 cards is drawn\n    # 9 (for 4-card color) + 9 (for 8-card color) + 9 (for 12-card color) + 1 = 28\n\n    # Applying the Pigeonhole Principle\n    ans = (10 - 1) * 3 + 1\n    return ans\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    number_of_daffodils = 8\n    gap_between_daffodils = 1.1\n    total_gaps = number_of_daffodils - 1  # One less gap than the number of daffodils\n    length_of_row = total_gaps * gap_between_daffodils + 2 * 0  # The row begins and ends with a daffodil, so no extra length added\n    return length_of_row\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    ribbon_length = 87\n    pieces = 30\n\n    piece_length = ribbon_length / pieces\n\n    return piece_length\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 9):\n            for x3 in range(1, 9):\n                if x1 + x2 + x3 == 9 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    # Since the boxes are identical, we divide by the factorial of the number of boxes to remove duplicate counts.\n    return count // 6  # factorial of 3 is 6\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance_to_market = 48\n    walking_speed = 8  # meters per minute\n    actual_time = distance_to_market / walking_speed\n    return actual_time\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    half_of_missing_number = one_fourth_of_16\n    missing_number = half_of_missing_number * 2\n    \n    return missing_number\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # Let's say Jane drinks X ml of juice.\n    # Then Alex drinks 1.5X ml of juice since he drinks 50% more.\n    # Therefore, X + 1.5X = total_juice\n    # Solving for X gives us X = total_juice / 2.5\n    # Hence, the amount Alex drinks is 1.5X\n\n    jane_drinks = total_juice / 2.5\n    alex_drinks = 1.5 * jane_drinks\n\n    return alex_drinks\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    chocolates = 18\n    friends = 6\n\n    total_fruits = pears + strawberries\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_girls = 5\n    total_boys = 7\n    group_size = 4\n    ways = 0\n    \n    # Exclude the case where there are no boys, only girls\n    # And then sum the ways of choosing i boys and (group_size - i) girls where i range from 1 to total_boys\n    for i in range(1, min(group_size, total_boys) + 1):\n        ways += comb(total_boys, i) * comb(total_girls, group_size - i)\n        \n    return ways\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5 ** 2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    total_digits = 157\n    digits_used = 0\n    page = 0\n    while digits_used < total_digits:\n        page += 1\n        digits_used += len(str(page))\n    return page - 1 if digits_used > total_digits else page\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let x be the initial amount of money Bud had.\n    # She spent 1/4 of the money on a book, so she had 3/4 remaining.\n    # Then she spent 2/5 of the remaining money on a bag.\n\n    # Let's find the cost of the bag in terms of x:\n    # Cost of the bag = (2/5) * (3/4) * x\n\n    # We know the cost of the bag is £60, so we have the equation:\n    # (2/5) * (3/4) * x = 60\n\n    # Now, solve for x:\n    # x = 60 / ((2/5) * (3/4))\n    x = 60 / ((2/5) * (3/4))\n\n    # Return the initial amount of money Bud had.\n    return x\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 242):\n        if num % 2 != 0 and num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = ((70 / 7) - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    total_distance = (41 - 1) * 3\n    num_lamp_posts = (total_distance // 8) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for unit_price in range(1, 1000):\n        total_price = unit_price * 72\n        str_price = str(total_price)\n        if len(str_price) >= 6 and str_price[1:4] == '679' and str_price[-1] == '0':\n            return unit_price\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # length of the train in meters\n    speed = 40  # speed of the train in meters per second\n\n    time = train_length / speed\n\n    return time\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for num in range(10, 100):  # 2-digit numbers start from 10\n        if sum(map(int, str(num))) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    ans = 208 // 8\n    return ans\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_b = symbols('candies students_b')\n    # class A has twice the number of students in class B\n    students_a = 2 * students_b\n\n    # equations based on the problem\n    equation1 = Eq(students_a * 4 + 20, candies)\n    equation2 = Eq(candies, students_b * 6 + 16)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (candies, students_b))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    # Number of intervals is always one more than number of potted plants\n    intervals = 21\n    potted_plants = intervals - 1\n    \n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_money = 24\n    dvd_cost = total_money / 3\n    remaining_after_dvd = total_money - dvd_cost\n    book_cost = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - book_cost\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    rabbits_initial = 32\n    for year in range(1, 4):  # Run loop for 3 years\n        rabbits_before_wolves = rabbits_initial * (3**year)  # Rabbits multiply 3 times each year\n        rabbits_after_wolves = rabbits_before_wolves / 2  # Wolves eat half the rabbits\n        rabbits_initial = rabbits_after_wolves  # Update the initial number of rabbits for next year\n    return int(rabbits_after_wolves)\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    time_first_mile = 1 / 60  # time = distance / speed\n    time_second_mile = 1 / 30  # time = distance / speed\n    \n    total_time = time_first_mile + time_second_mile\n    total_distance = 2  # 1 mile + 1 mile\n    \n    average_speed = total_distance / total_time  # average speed = total distance / total time\n    \n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    target_amount = 12\n    num_washes = (target_amount // amount_per_wash) + 1\n    return int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for i in range(1, 41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    first_day_candies = 2\n    multiplier = 2\n    day_to_find = 4\n\n    candies_eaten = first_day_candies * (multiplier ** (day_to_find - 1))\n\n    return candies_eaten\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_earnings = 70\n    days_worked = 6  # Monday to Saturday\n\n    total_earnings = average_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angle1, angle2 = symbols('angle1 angle2')\n    # angle1 is twice angle2\n    equation1 = Eq(angle1, 2 * angle2)\n    # sum of angles in a triangle\n    equation2 = Eq(angle1 + angle2 + 90, 180)\n\n    solutions = solve((equation1, equation2), (angle1, angle2))\n\n    return solutions[angle1]\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the natural number greater than 1 we are looking for, and let a be the remainder when 290 is divided by n\n    n, a = symbols('n a')\n    \n    # Setting up the equations based on the information provided in the question\n    equation1 = Eq(290 % n, a)\n    equation2 = Eq(235 % n, a + 2)\n    equation3 = Eq(200 % n, a + 5)\n    \n    # We solve the equations to find the values of n and a\n    solutions = solve((equation1, equation2, equation3), (n, a))\n    \n    # Filter out non-natural number solutions and n <= 1\n    natural_number_solutions = [sol[n] for sol in solutions if sol[n].is_integer and sol[n] > 1]\n    \n    # According to the problem, there is only one such natural number\n    return natural_number_solutions[0]\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for P in range(1, 10):  # P must be a non-zero digit\n        for I in range(10):\n            for S in range(10):\n                if P != I and P != S and I != S:  # All digits must be different\n                    IS = int(f\"{I}{S}\")\n                    PI = int(f\"{P}{I}\")\n                    if 4 * IS == PI:\n                        return PI\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_ages = 765\n    num_elderly = 9\n\n    # Since the ages are consecutive natural numbers, it is an arithmetic sequence.\n    # The middle age is also the mean (average) age in this case.\n    # We calculate the mean age by dividing the total sum of ages by the number of elderly members.\n    mean_age = total_ages // num_elderly\n\n    # The middle-aged elderly sits in the middle, which will be mean_age in this case.\n    return mean_age\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # m/min\n\n    walk_time = 24  # min\n    total_distance = walk_time * walking_speed\n    \n    half_distance = total_distance / 2\n    walk_half_time = half_distance / walking_speed\n    run_half_time = half_distance / running_speed\n\n    total_time_half_walk_half_run = walk_half_time + run_half_time\n    \n    return total_time_half_walk_half_run\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    \n    boys_saw_movie = boys * 0.50\n    girls_saw_movie = girls * 0.60\n    \n    total_pupils_saw_movie = boys_saw_movie + girls_saw_movie\n\n    return int(total_pupils_saw_movie)\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    total_sunshine_for_six_days = 3 * 6\n    total_sunshine_for_sunday = 10\n    total_sunshine_for_whole_week = total_sunshine_for_six_days + total_sunshine_for_sunday\n    average_sunshine_for_whole_week = total_sunshine_for_whole_week / 7\n    return average_sunshine_for_whole_week\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_length = 320  # total length of the road in meters\n    total_trees = 79    # total number of trees planted\n\n    # As there are no trees in front of the school or her house\n    # The number of intervals is one more than the number of trees\n    num_intervals = total_trees + 1\n\n    # The distance between each tree is the total length divided by the number of intervals\n    distance_between_trees = total_length / num_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    ways = 0\n    for i in range(7):\n        for j in range(7-i):\n            k = 6 - i - j\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n\n    left_over = total_length % cut_length\n\n    return left_over\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    # Let's denote Kim's total savings as 's'\n    # According to the problem:\n    # s/3: money given to mom\n    # 177 + 129: total spent on dresses and earrings\n    # s/3 - (177 + 129): money left after spending\n    # This money left is equal to half of what she gave to her mom\n    # Hence we create the equation s/3 - (177 + 129) = s/6\n    # Solving this equation for 's' will give us Kim's total savings\n\n    from sympy import symbols, Eq, solve\n\n    # Define symbolic variable for s (Kim's savings)\n    s = symbols('s')\n    # Create the equation based on the problem\n    equation = Eq(s / 3 - (177 + 129), s / 6)\n    # Solve the equation\n    solution = solve(equation, s)\n\n    # Return the solution, which is Kim's total savings\n    return solution[0]\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    whole_number = 1\n    numerator = 3\n    denominator = 100\n\n    decimal = whole_number + (numerator / denominator)\n\n    return decimal\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    matches = num_teams * (num_teams - 1) // 2  # The number of matches is the number of handshakes formula\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    sum_N = 0\n    for N in range(1, 2018):\n        if (2018 - 11) % N == 0:  \n            sum_N += N\n    return sum_N\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker_per_day = 6\n    total_skirts = sum((skirts_per_worker_per_day * worker) for worker in range(1, 10))\n    return total_skirts\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    difference = 3\n    valid_numbers = []\n    \n    for number in range(30, 61):\n        if (number - first_term) % difference == 0:\n            valid_numbers.append(number)\n    \n    return valid_numbers\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if (chickens * 2 + cows * 4) == 26:\n            return chickens\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    sweets = 138\n\n    for class_size in range(1, sweets + 1):\n        if sweets % class_size == 0 and sweets // class_size >= 5:\n            return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    current_length = 0\n    num = 1\n    \n    while current_length < 2023:\n        current_length += len(str(num))\n        if current_length >= 2023:\n            return int(str(num)[len(str(num)) - (current_length - 2023) - 1])  # Get the correct digit\n        num += 1\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return int(n)\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 150000\n    base_tax = 0.08 * 50000\n    additional_income = income - 50000\n    tax_paid = 15000\n\n    # The total tax paid is the base tax plus additional tax rate on the income above $50,000\n    equation = Eq(base_tax + additional_income * (0.08 + T / 100), tax_paid)\n\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    not_attempted = 1\n    answered_questions = total_questions - not_attempted\n    correct_score = 4\n    incorrect_score = -2\n    total_score = 66\n\n    # Let's define the number of correct answers as 'c'\n    # and the number of incorrect answers as 'i'.\n    # We have two equations:\n    # c + i = answered_questions (since he answered all but one)\n    # correct_score * c + incorrect_score * i = total_score\n    \n    # From the first equation: i = answered_questions - c\n    # Substitute i from the first equation into the second equation to get a single variable equation\n    \n    for c in range(answered_questions + 1):\n        i = answered_questions - c\n        if correct_score * c + incorrect_score * i == total_score:\n            return c\n    \n    return None\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    total_days = 31  # January has 31 days\n\n    # Using the Pigeonhole Principle\n    most_births = (total_boys // total_days) + (total_boys % total_days > 0)\n\n    return most_births\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of candies Rachel has and a be the number of candies Alice has\n    r, a = symbols('r a')\n\n    # Equation 1: After giving 10 candies, Rachel and Alice have the same amount\n    equation1 = Eq(r - 10, a + 10)\n\n    # Equation 2: After eating 8 candies each, Rachel has 3 times the candies Alice has\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # The total number of candies they originally had\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # Three-digit number: _ _ _\n    # Hundreds place cannot be 0, so it has 2 choices (2 or 3)\n    hundreds_place_options = 2\n    \n    # Tens place can be any of the three numbers (0, 2, 3) but it should not be the same as the hundreds place, so it has 2 choices remaining\n    tens_place_options = 2\n    \n    # Ones place can be any of the three numbers except the one already used in the tens and hundreds place, so it has 1 choice left\n    ones_place_options = 1\n    \n    # Total number of different three-digit numbers\n    total_numbers = hundreds_place_options * tens_place_options * ones_place_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_car_length = 4\n    number_of_other_cars = 31 - 1\n    space_between_cars = 5\n    total_space_between_cars = space_between_cars * (31 - 1)\n\n    total_length = (first_car_length + other_car_length * number_of_other_cars +\n                    total_space_between_cars)\n\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    common_difference = 120 - 105  # The difference between successive terms\n    first_term = 105 - (7 - 1) * common_difference  # Calculate the first term using the 7th term\n\n    # Calculate the 100th term using the formula for the nth term of an arithmetic sequence\n    nth_term = first_term + (100 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    cards = ['0', '3', '5', '8']\n    for perm in permutations(cards):\n        num = int(''.join(perm))\n        if num > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_away = 23\n    chocolates_left = total_chocolates - chocolates_given_away\n    return chocolates_left\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = 2 + 3 + 5\n    sarah_sweets = 12\n\n    total_sweets = (sarah_sweets * total_ratio) / sarah_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    biscuits_cost = 7 * 73  # Cost in pence\n    cakes_cost = 9 * 113  # Cost in pence (since £1 = 100p)\n\n    total_cost_pence = biscuits_cost + cakes_cost  # Total cost in pence\n\n    # Convert total cost back to pounds to compare with the £20 note\n    total_cost_pounds = total_cost_pence / 100\n\n    change = 20 - total_cost_pounds  # Calculate change from a £20 note\n\n    return round(change, 2)  # Round the result to 2 decimal places\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "def solution():\n    from itertools import permutations\n\n    # Total number of permutations for 7 students is 7!\n    total_permutations = permutations('ABCDEFG', 7)\n\n    count = 0\n    for perm in total_permutations:\n        # D and E next to each other\n        if 'DE' in ''.join(perm) or 'ED' in ''.join(perm):\n            # A is in the middle of B and C not necessarily next to each other\n            if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C') or \\\n               perm.index('A') < perm.index('B') and perm.index('A') > perm.index('C'):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n    initial_length = current_length / (1 + growth_rate)\n    return initial_length\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    ans = week1 + week2 + week3\n\n    return ans\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    lunch_end_time = datetime.strptime('14:50', '%H:%M')\n    lunch_duration = timedelta(minutes=20)\n    tv_duration = timedelta(minutes=20)\n    play_duration = timedelta(minutes=10)\n\n    home_arrival_time = lunch_end_time - lunch_duration - tv_duration - play_duration\n\n    return home_arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*(x-5)-3, 6)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n    \n    # Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n    \n    # Sam gave 20% of his stickers to Peter\n    # New counts after the exchange\n    sam_after_giving = sam - 0.20 * sam\n    peter_after_receiving = peter + 0.20 * sam\n    \n    # In return, Peter gave 25% of his stickers to Sam\n    sam_after_receiving = sam_after_giving + 0.25 * peter_after_receiving\n    peter_after_giving = peter_after_receiving - 0.25 * peter_after_receiving\n    \n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam_after_receiving, peter_after_giving + 96)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (sam, peter))\n    \n    return solutions[peter]\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "def solution():\n    from itertools import permutations\n    \n    # Count the number of 3-digit numbers\n    three_digit_numbers = set(permutations('2017', 3))  # Using a set to eliminate duplicates\n    # Remove any numbers that start with '0', because those are not considered 3-digit numbers\n    three_digit_numbers = {num for num in three_digit_numbers if num[0] != '0'}\n    \n    # Count the number of 4-digit numbers\n    four_digit_numbers = set(permutations('2017', 4))  # No need to check for leading zeros here\n    \n    # The total number of numbers is the sum of the two counts\n    ans = len(three_digit_numbers) + len(four_digit_numbers)\n    \n    return ans\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 3 == 2 and number % 4 == 2 and number % 5 == 2 and number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    result = 6.5 / 0.5\n    return result\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    ans = 887 + 96\n    return ans\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    difference = 3\n    num_terms = 14\n    last_term = first_term + (num_terms - 1) * difference\n\n    sum_terms = (first_term + last_term) * num_terms / 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    def count_nines_in_number(number):\n        return str(number).count('9')\n    \n    def total_nines(pages):\n        return sum(count_nines_in_number(i) for i in range(1, pages + 1))\n    \n    pages = 0\n    count = 0\n    while count < 181:\n        pages += 1\n        count = total_nines(pages)\n    \n    return pages\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n    sold_to_yvonne = 10 + initial_crystals / 2\n    mined_more_crystals = 20\n    sold_to_cherlyn = 14\n    final_crystals = 35\n\n    equation = Eq(initial_crystals - sold_to_yvonne + mined_more_crystals - sold_to_cherlyn, final_crystals)\n    result = solve(equation, initial_crystals)\n\n    return result[0]\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 5, 8]\n    three_digit_numbers = []\n\n    # Generate permutations of the three different numbers to form a three-digit number\n    for perm in permutations(digits, 3):\n        if perm[0] != 0:  # ensure the first digit is not zero\n            number = int(\"\".join(map(str, perm)))\n            three_digit_numbers.append(number)\n\n    # Find the smallest and largest three-digit numbers\n    smallest_number = min(three_digit_numbers)\n    largest_number = max(three_digit_numbers)\n\n    # Calculate the difference\n    difference = largest_number - smallest_number\n\n    return difference\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    class_a = 12\n    class_b = 15\n    class_c = 18\n\n    # Find the greatest common divisor of the three numbers\n    ans = gcd(gcd(class_a, class_b), class_c)\n\n    return ans\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1234'\n    even_digits = '24'\n    count = 0\n\n    for perm in permutations(digits, len(digits)):\n        if perm[-1] in even_digits:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    ans = 37 * 27\n    return ans\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    # We need to find the total number of rabbits based on the number of grey rabbits.\n    # Since the pattern is 1 black, 2 white, 2 grey, for every cycle of this pattern,\n    # we have 2 grey rabbits. So, we divide the total number of grey rabbits by 2\n    # to find the number of complete pattern cycles.\n\n    grey_rabbits = 14\n    pattern_cycles = grey_rabbits // 2\n\n    # Each pattern cycle consists of 5 rabbits (1 black, 2 white, 2 grey).\n    # So the number of rabbits after completing the last full pattern cycle is:\n    total_rabbits = pattern_cycles * 5\n\n    # If we have an incomplete pattern cycle (which we would have if the number\n    # of grey rabbits is not divisible by 2), we need to add the remaining rabbits\n    # to the total as per the pattern (1 black, 2 white, 2 grey).\n    remaining_grey = grey_rabbits % 2\n    if remaining_grey > 0:\n        # We add 1 for the black rabbit and 2 for the white rabbits\n        total_rabbits += 1 + 2 + remaining_grey\n\n    return total_rabbits\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    return 25 * 6\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    num = 180\n    factor_count = 0\n\n    for i in range(1, num + 1):\n        if num % i == 0 and i % 9 == 0:\n            factor_count += 1\n\n    return factor_count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2/3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    sol = solve(equation, u)\n    return sol[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        if (2 + 6 + a + 5 + 3 + 9) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + rate) ** years)\n    return amount\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    cost_per_box = 2.89\n    num_boxes = 12\n    total_cost = cost_per_box * num_boxes\n    return total_cost\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    yi_yen, kyra = symbols('yi_yen kyra')\n    equation = Eq(yi_yen, 4 * kyra)\n    total_stickers = Eq(yi_yen + kyra, 100)\n    \n    solutions = solve((equation, total_stickers), (yi_yen, kyra))\n    \n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    pounds = 2\n    pence = pounds * 100\n    cost_single = 12\n    cost_three = 30\n\n    maxThreePacks = pence // cost_three\n    remainingPence = pence % cost_three\n\n    maxSinglesWithRemaining = remainingPence // cost_single\n\n    totalSweets = maxThreePacks * 3 + maxSinglesWithRemaining\n\n    return totalSweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    kenny_age, brother_age, may_age = symbols('kenny_age brother_age may_age')\n\n    # Given conditions\n    kenny_brother_age_diff = 2\n    may_future_age = 10\n    kenny_future_total_age_factor = 3\n\n    # Equations based on the problem\n    equation1 = Eq(kenny_age - brother_age, kenny_brother_age_diff)\n    equation2 = Eq(kenny_age + brother_age, kenny_future_total_age_factor * may_future_age)\n    equation3 = Eq(may_age, 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (kenny_age, brother_age, may_age))\n\n    # Calculate the difference in age between Kenny and May this year\n    kenny_current_age = solutions[kenny_age].subs(may_age, 7)\n    age_difference = kenny_current_age - may_age\n\n    return age_difference\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # Number of identical balls\n    balls = 10\n    # Number of different boxes\n    boxes = 7\n    # Since each box must contain at least 1 ball, we place 1 ball in each box initially\n    # This leaves us with balls - boxes balls to distribute freely\n    remaining_balls = balls - boxes\n    # The number of ways to distribute these remaining balls is equivalent to the number of combinations \n    # of remaining_balls + boxes - 1 taken remaining_balls at a time.\n    # This is because we can think of the problem as finding the number of ways to place remaining_balls indistinguishable \n    # items into boxes - 1 (one less because of the initially placed balls) distinguishable boxes (or slots),\n    # which is a classic \"stars and bars\" combinatorial problem.\n    ans = comb(remaining_balls + boxes - 1, remaining_balls)\n    \n    return ans\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "import math\n\ndef solution():\n    total_length = 305\n    pipe_length = 5\n    \n    num_pipes = math.ceil(total_length / pipe_length)\n    \n    return num_pipes\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let the total water needed to fill the tank be x liters.\n    # Based on the problem, we have:\n    # If he uses a 5-litre pail, then x = 5n + 4 (for some integer n and 4 liters will overflow)\n    # If he uses a 3-litre pail, then x = 3m (for some integer m and he needs 4 more pails of water)\n    # This means x + 3*4 = 3(m + 4)\n    # Since both x = 5n + 4 and x = 3m must be equal for some integer values of m and n, \n    # we can set them equal to each other and solve for x.\n    \n    # Let's use the sympy library to solve the diophantine equation\n    from sympy import symbols, diophantine, Eq\n\n    n, m, x = symbols('n m x', integer=True)\n    eq1 = Eq(x, 5*n + 4)\n    eq2 = Eq(x, 3*(m + 4))\n\n    sol = diophantine(eq1 - eq2)\n    \n    # Given the equations, we now look for the smallest positive integer solution that satisfies both.\n    n_val, m_val = next(iter(sol))\n    x_val = 5*n_val + 4  # Use either equation to solve for x\n\n    return x_val\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # If Felix wants to ensure victory, he should aim to leave a multiple of 3 candies\n    # for John at each turn. This way, no matter if John eats 1 or 2 candies, Felix can\n    # always eat in such a way that a multiple of 3 candies is left again for John.\n    \n    # The strategy:\n    # 1. Felix should go first.\n    # 2. In his first turn, Felix should eat 1 candy, leaving 9 candies (a multiple of 3).\n    # 3. After John's turn, no matter how many candies John eats (1 or 2), Felix will be able\n    #    to eat candies to leave a multiple of 3 again.\n    # 4. The process repeats until John is forced to leave 1 or 2 candies for Felix, ensuring Felix's victory.\n\n    # Since the initial total number of candies (10) is not a multiple of 3, \n    # Felix can always eat 1 or 2 candies to maintain the number of candies as a multiple of 3 after each round.\n    # Therefore, the winning strategy for Felix is to go first and ensure that after each round, \n    # the number of remaining candies is a multiple of 3.\n\n    return 'First', 'Ensure a multiple of 3 candies after each round'\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    pages_with_3 = 0\n    current_page = 1\n    while pages_with_3 < 28:\n        if '3' in str(current_page):\n            pages_with_3 += 1\n        current_page += 1\n    return current_page - 1\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    # value of each coin\n    coins = {'50-cent': 50, '20-cent': 20, '10-cent': 10, '5-cent': 5}\n    zoey_total = sum(coins.values())\n\n    for lost_coin, value in coins.items():\n        if (zoey_total - value) == 2 * (zoey_total // 2 - value):\n            lost_coin_value = value\n            break\n\n    return lost_coin_value\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    girls_combinations = comb(8, 4) # Ways to choose 4 girls out of 8\n    boys_combinations = comb(12, 3) # Ways to choose 3 boys out of 12\n    total_combinations = girls_combinations * boys_combinations\n    return total_combinations\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for num in range(1, 2017):\n        is_red = num % 2 == 0\n        is_blue = num % 3 == 0\n        is_green = num % 4 == 0\n        \n        if (is_red and is_blue) + (is_red and is_green) + (is_blue and is_green) == 1:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55  # Convert 15.55 to minutes\n    time_late = 4  # 4 minutes late\n    second_bus_time = 16 * 60 + 35  # Convert 16.35 to minutes\n\n    time_missed_first_bus = first_bus_time + time_late\n    wait_time_for_second_bus = second_bus_time - time_missed_first_bus\n\n    return wait_time_for_second_bus\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n\n    # Total number of intervals is the road length divided by the distance between trees\n    num_intervals = road_length // distance_between_trees\n\n    # The number of trees is one more than the number of intervals\n    num_trees = num_intervals + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # Let's denote the 5 numbers as A, B, C, D, E.\n    # If we take the average of 4 numbers out of 5, the sum of these 4 numbers will be:\n    # 36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4\n    # Now we sum up all five averages to get the total sum when each number is counted 4 times.\n    total_sum = (36 + 38 + 39 + 45 + 49) * 4\n    # Let T be the sum of the actual five numbers; each number is counted 5 times in total_sum.\n    # So we have 5T = total_sum + the number omitted in each average, which is the largest number.\n    largest_number = total_sum / 5 - (36 + 38 + 39 + 45)\n    return largest_number\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    # Let the number of boys be x\n    # Then the number of girls would be 152 - x\n    # Removing 1/11 of boys and 5 girls:\n    # Boys left: x - (1/11)*x = (10/11)*x\n    # Girls left: (152 - x) - 5 = 147 - x\n\n    # According to the question, boys left will be equal to girls left\n    # (10/11)*x = 147 - x\n    # Multiply through by 11 to eliminate fraction\n    # 10*x = 11 * (147 - x)\n    # 10x = 1617 - 11x\n    # Add 11x to both sides\n    # 21x = 1617\n    # Divide both sides by 21 to get x\n    x = 1617 // 21  # Using integer division since the number of boys must be whole\n\n    return x\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    lorry_capacity = 8\n    num_lorries = (workers + lorry_capacity - 1) // lorry_capacity\n    return num_lorries\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men = symbols('men')\n    equation = Eq(4 * men, men + 126)\n\n    number_of_men = solve(equation, men)[0]\n    number_of_women = 4 * number_of_men\n    total_people = number_of_men + number_of_women\n\n    return total_people\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    pages_first_three_days = 40\n    average_next_four_days = 20\n    pages_last_two_days = 60\n\n    pages_next_four_days = average_next_four_days * 4\n\n    total_pages = pages_first_three_days + pages_next_four_days + pages_last_two_days\n\n    return total_pages\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    for students in range(1, 1000):  # Assuming a reasonable upper bound for the number of students\n        if (students % 4 == 6) and ((students + 1) % 5 == 0):\n            return students\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    number = solve_congruence(*congruences)\n\n    # Since we need the number to be less than 200\n    while number[0] >= 200:\n        number = (number[0] - number[1], number[1])\n\n    return number[0]\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_weight_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_weight_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    # Iterate through all possible throws of the first die\n    for x1 in range(1, 7):\n        # Iterate through all possible throws of the second die\n        for x2 in range(1, 7):\n            # Iterate through all possible throws of the third die\n            for x3 in range(1, 7):\n                # Check if the numbers on the dice are different and sum up to 12\n                if x1 != x2 and x2 != x3 and x1 != x3 and x1 + x2 + x3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    current_sum_ages = sum(grandsons_ages)\n\n    while bill_age > current_sum_ages:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        current_sum_ages = sum(grandsons_ages)\n\n    return bill_age\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_initial = 7 * 9  # Total sum for 7 numbers with mean 9\n    total_final = 6 * 10   # Total sum for 6 numbers after removing one, with mean 10\n    removed_number = total_initial - total_final\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people * (1/3)\n    people_remaining = total_people - people_left\n    return int(people_remaining)\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    time_aytown = 15\n    time_beeville = 12\n    time_ceeford = 8\n\n    lcm_time = lcm(time_aytown, time_beeville, time_ceeford)\n\n    next_time_in_minutes = 10 * 60 + lcm_time\n\n    next_time_hour = next_time_in_minutes // 60\n    next_time_minute = next_time_in_minutes % 60\n\n    return f\"{next_time_hour:02d}:{next_time_minute:02d}\"\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    incorrect_deduction = 2\n    total_marks = 79\n\n    # Let's assume all questions were answered correctly first\n    # And calculate the marks obtained this way\n    assumed_correct_marks = total_questions * correct_mark\n\n    # Now, we have to find out how many incorrect answers are there\n    # For each incorrect, we lose 5 + 2 = 7 marks (5 for the correct answer not obtained,\n    # and 2 for the incorrect deduction)\n    # The difference between the assumed marks and actual marks should give us the total deductions\n    total_deductions = assumed_correct_marks - total_marks\n\n    # Finally, determine the number of incorrect answers by dividing the total deductions\n    # by the marks lost per incorrect answer.\n    incorrect_answers = total_deductions // (correct_mark + incorrect_deduction)\n\n    # The number of correct answers is the total number of questions minus the incorrect answers.\n    correct_answers = total_questions - incorrect_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n    \n    # Maximum number that can play only two sports\n    max_two_sports = (swimmers + cyclists + table_tennis_players) - total_students\n    \n    # Minimum number that play all three sports \n    # Since it's the least possible number and all students should be accounted for,\n    # we consider the case where maximum possible students play exact two sports and \n    # all remaining play all three sports.\n    all_three_sports = swimmers + cyclists + table_tennis_players - max_two_sports - total_students\n\n    return all_three_sports\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for page_number in range(1, 106):\n        count += str(page_number).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    # Extract common factor 3999 * 2014 from the sum\n    common_factor = 3999 * 2014\n    # Multiply the sum by the factor\n    sum_with_factor = common_factor * (1 + 3999 / 2014)\n    # Divide the result by 12.0012 to get the final answer\n    ans = sum_with_factor / 12.0012\n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_seconds = 30\n    length_meters = 360\n\n    speed_mps = length_meters / time_seconds\n\n    # Convert from m/s to km/h\n    speed_kmph = speed_mps * 3.6\n\n    return speed_kmph\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    climb_distance = 3\n    slide_distance = 1\n    effective_distance = climb_distance - slide_distance\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += climb_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_distance\n        \n    return days\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Worst case: Draw all marbles of the most abundant color plus one for each of the other colors\n    red = 12\n    blue = 9\n    yellow = 8\n    green = 3\n\n    # To ensure we have 4 different colors, we may draw all but one of the red (most abundant) and one of each other\n    marbles_drawn = (red - 1) + 1 + 1 + 1\n\n    return marbles_drawn\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    # Eddie can choose from any of the restaurant types, so we just add the counts together\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Assuming the first person is numbered 2, find the sequence number of 10 and 24\n    person_10_seq = (10 - 2) / 2 + 1\n    person_24_seq = (24 - 2) / 2 + 1\n\n    # As 24 is directly opposite to 10, then the number of people in the half circle\n    # from 10 to 24 should be the same as from 24 to 10, \n    # so the total population is twice the number from 10 to 24 minus 1 for the overlap\n    total_people = 2 * (person_24_seq - person_10_seq) + 1\n\n    return int(total_people)\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n\n    # Time intervals for both robots in seconds\n    robot_a_interval = 24\n    robot_b_interval = 64\n\n    # Least common multiple will give the time they move together again\n    ans = lcm(robot_a_interval, robot_b_interval)\n\n    return ans\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [x for x in range(1, 67) if 66 % x == 0]\n    \n    for age in factors_of_66:\n        if (age - 4) % 6 == 0:\n            ans = age\n            break\n\n    return ans\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    factors_of_75 = [i for i in range(1, 76) if 75 % i == 0]\n    \n    for number in factors_of_75:\n        if number >= 10 and number < 100 and number % 6 == 3:\n            return number\n            \nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    incorrect_subtrahend = 41\n    incorrect_result = 50\n    real_subtrahend = 14\n\n    minuend = incorrect_result + incorrect_subtrahend\n    correct_difference = minuend - real_subtrahend\n    \n    return correct_difference\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total_count = 0\n    # Count the numbers starting with 3\n    total_count += 5 * 4 * 3  # Since we can choose from 5, 4, and 3 remaining digits\n    \n    # Count the numbers starting with 4\n    total_count += 5 * 4 * 3  # Since we can choose from 5, 4, and 3 remaining digits\n    \n    # Count the numbers starting with 5\n    # We need to consider numbers between 5000 and 5120\n    # For 50xy\n    total_count += 4 * 3  # We can choose x from {1,2,3,6} and y from remaining 3 digits\n    # For 51x0\n    total_count += 3  # We can choose x from {2,3,6}\n\n    return total_count\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    # Assign values to variables based on the given information\n    total_money = 80  # Adam's weekly pocket money in dollars\n    books_percent = 20 / 100  # Percent of money spent on books and stationery\n    books_money = total_money * books_percent  # Actual money spent on books and stationery\n    \n    # Let's denote the money spent on transport as 'x', then food expenditure is '3x', savings is '3x - 6'.\n    # We now set up an equation for the total expenditures and savings\n    # total_money = books_money + transport_money + food_money + savings\n    # where food_money = 3 * transport_money and savings = food_money - 6\n    # 80 = books_money + x + 3x + (3x - 6)\n    # Solve for 'x' (money spent on transport)\n    transport_money = (total_money - books_money + 6) / 7\n    food_money = 3 * transport_money\n    savings = food_money - 6\n    \n    # Calculate savings as a percentage of the total money\n    savings_percent = (savings / total_money) * 100\n\n    return savings_percent\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum((-1)**(i) * (40 - 2*i) for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_ate = 4\n    sisters_each_ate = 5\n    number_of_sisters = 4\n    apples_left = 20\n    \n    total_apples_eaten = justin_ate + sisters_each_ate * number_of_sisters\n    total_apples_before = total_apples_eaten + apples_left\n\n    return total_apples_before\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    final_amount = 7320.5\n    years = 4\n\n    interest_rate = (final_amount / principal) ** (1 / years) - 1\n\n    return interest_rate\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    for n in range(1, 31):\n        if (n * n) + n + n + 1 == (n + 1) * (n + 1):\n            return (n + 1) * (n + 1)\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24  # Using // for integer division\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    ans = 56 / 21\n    return ans\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2\n    b = 6.77\n    c = 8.88\n    d = 6.3\n    ans = (a + b + c) * (b + c + d) - (a + b + c + d) * (b + c)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total = 4410\n    january = 2450\n    march = 855\n    february = total - january - march\n    \n    return february\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    initial_value = 176\n    final_value = 88\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_for_one_picture = 10  # time in minutes to paint one picture\n    total_time_available = 1 * 60 + 20  # total time in minutes (1 hour and 20 minutes)\n\n    num_pictures = total_time_available / time_for_one_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n    ans = seconds_per_minute * minutes\n    return ans\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    future_value = 924\n    interest_rate = 0.08\n    years = 4\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    ans = 7.3 - 2.64\n    return ans\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Total apples\n    total_apples = 30\n    # Total children excluding Ann\n    other_children = 5\n\n    # Each of the other children gets at least one apple\n    minimum_apples_others = 1\n\n    # Calculate the maximum number of apples Ann can get\n    max_apples_Ann = total_apples - (other_children * minimum_apples_others)\n\n    return max_apples_Ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        # Convert the tuple of characters back into a single number\n        num = int(''.join(perm))\n        \n        # Check if all conditions are met:\n        # 1. Second number is twice the first number\n        # 2. Third number is four times the first number\n        if (num * 2 in perm_num_set) and (num * 4 in perm_num_set):\n            return num * 4 # The third number required\n\n    return None\n\n# Generate all permutations of the 7 digits and set of int for the condition checks\nperm_num_set = set(int(''.join(p)) for p in permutations('1356789'))\n\n# Call the solution function and store the answer\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    blouse_pants_shoes_combinations = shirts * pants * shoes\n    dress_shoes_combinations = dresses * shoes\n    dress_heels_combinations = dresses * heels\n\n    total_combinations = blouse_pants_shoes_combinations + dress_shoes_combinations + dress_heels_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy_bear = symbols('book teddy_bear')\n\n    equation1 = Eq(4*book + 8*teddy_bear, 164)\n    equation2 = Eq(2*book + 3*teddy_bear, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the masses of the objects\n    A, B, C = symbols('A B C')\n\n    # Given equations\n    equation1 = Eq(A + B, 13)  # A and B weigh 13kg together\n    equation2 = Eq(A + C, 25)  # A and C weigh 25kg together\n    equation3 = Eq(C, 3 * B)   # C weighs 3 times as much as B\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n    \n    # Convert everything to grams\n    total_mass_in_g = (total_mass_kg * 1000) + total_mass_g\n    soil_mass_in_g = (soil_mass_kg * 1000) + soil_mass_g\n    \n    # Calculate the mass of the pack of sand\n    sand_mass_in_g = total_mass_in_g - soil_mass_in_g\n    \n    # Calculate the difference between the mass of the pack of soil and the pack of sand\n    difference_in_g = abs(soil_mass_in_g - sand_mass_in_g)\n    \n    # Convert the difference back to kg and g\n    difference_in_kg = difference_in_g // 1000\n    difference_in_g = difference_in_g % 1000\n\n    return (difference_in_kg, difference_in_g)\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum([sum([j / i for j in range(1, i)]) for i in range(2, 101)])\n    return ans\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    # Given that any number with only prime factors 3 and 5\n    # can be represented as 3^a * 5^b where a and b are non-negative integers.\n    \n    # The highest common factor of M and N has 75, which is 3^1 * 5^2.\n    # Any additional factors of M and N will be multiples of 75.\n    \n    # The number of factors of a number 3^a * 5^b is given by (a+1)(b+1).\n    \n    # we find combinations of a and b for M (that has 12 factors) and N (that has 10 factors)\n    # such that the combinations fit the form (a+1)(b+1)\n    # and a and b are greater than or equal to the powers of 3 and 5 in 75 respectively.\n    \n    # Starting with 75 (3^1 * 5^2), additional factors require incrementing the exponent of 3 and/or 5.\n    # M having 12 factors means (a+1)(b+1) = 12, where a ≥ 1 and b ≥ 2.\n    # N having 10 factors means (a+1)(b+1) = 10, where a ≥ 1 and b ≥ 2.\n\n    # Possibilities for 12 factors (a+1)(b+1) = 12 are (1,11), (2,5), (3,3).\n    # Exclude (1,11) since it requires a = 0, which is not allowed as a must be at least 1.\n    # M possibilities are (2,5) -> (a, b) = (1, 4) or (3,3) -> (a, b) = (2, 2).\n    # N possibilities for 10 factors (a+1)(b+1) = 10 are (1,9), (2,4).\n    # Exclude (1,9) since it requires a = 0.\n    # N possibility is (2,4) -> (a, b) = (1, 3).\n\n    # Calculating M and N using the values a and b:\n    Ms = [3**x * 5**y for x, y in [(1, 4), (2, 2)]]\n    Ns = [3**x * 5**y for x, y in [(1, 3)]]\n    \n    # We find the sums for all possible combinations\n    sums = [M + N for M in Ms for N in Ns]\n    \n    # return the minimum sum as the smallest M and N that satisfy the condition should be used\n    return min(sums)\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Let x be the number of buttons Nina originally has\n    # Let y be the number of buttons James originally has\n    # According to the problem, we have:\n    # x + y = 22 (total number of buttons)\n    # x - 4 = y + 4 (after Nina gives 4 buttons to James, they have the same number)\n\n    # From the second equation, we can derive that:\n    # x = y + 8\n\n    # Substitute the value of x in the first equation\n    # y + 8 + y = 22\n    # 2y + 8 = 22\n    # 2y = 22 - 8\n    # 2y = 14\n    y = 14 / 2\n\n    # Now we can find the value of x\n    x = y + 8\n\n    return x\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n    \n    number_of_kites = total_paper // paper_per_kite\n\n    return int(number_of_kites)\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern_length = 5\n    full_repetitions = 52 // pattern_length\n    remaining_digits = 52 % pattern_length\n    pattern_sum = sum(range(1, pattern_length + 1))\n    \n    total_sum = full_repetitions * pattern_sum + sum(range(1, remaining_digits + 1))\n\n    return total_sum\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_length = 320\n    num_trees = 79\n\n    # The number of intervals is one more than the number of trees\n    num_intervals = num_trees + 1\n\n    # Distance between each tree is the total length divided by the number of intervals\n    distance_between_trees = total_length / num_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    correct_points = 4\n    incorrect_points = -2\n    total_score = 29\n\n    # This is a typical \"chicken and rabbit\" problem, where we have two equations:\n    # 1. The number of correct answers (chicken) + the number of incorrect answers (rabbit) = total_questions\n    # 2. The points for correct answers * number of correct answers + \n    #    points for incorrect answers * number of incorrect answers = total_score\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if (correct_answers * correct_points + incorrect_answers * incorrect_points) == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "def solution():\n    long_rod_length = 10 + 4/5  # Convert 10 4/5 to an improper fraction\n    short_rod_length = 3/10\n\n    number_of_short_rods = long_rod_length // short_rod_length\n\n    return int(number_of_short_rods)\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen's 10 fish are equivalent to 4 rabbits\n    fish_to_rabbits_ratio = 10 / 4\n    \n    # Oscar's 5 rabbits are equivalent to 6 packs of wheat\n    rabbits_to_wheat_ratio = 5 / 6\n    \n    # Combined ratio of fish to packs of wheat\n    fish_to_wheat_ratio = fish_to_rabbits_ratio * rabbits_to_wheat_ratio\n    \n    # Calculate the number of fish equivalent to 12 packs of wheat.\n    # Let x be the number of fish for 12 packs of wheat.\n    # Then x fish / 12 wheat = fish_to_wheat_ratio\n    # Solving for x gives us:\n    x = 12 * fish_to_wheat_ratio\n    \n    return x\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = original_price * (discount_percentage / 100)\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_cost = 2800\n    deal_laptop_count = 30\n\n    cost_without_deal = single_laptop_cost * 20\n    cost_per_laptop_with_deal = deal_cost / deal_laptop_count\n    cost_with_deal_for_20 = cost_per_laptop_with_deal * 20\n\n    savings = cost_without_deal - cost_with_deal_for_20\n\n    return savings\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    earnings = hourly_rate * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    incorrect_result = -14\n    error = -26  # since she subtracted 26 instead of adding\n    correct_addition = 26\n\n    # Reverse the incorrect operation and apply the correct one\n    original_number = incorrect_result - error\n    correct_result = original_number + correct_addition\n\n    return correct_result\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n    equation1 = Eq(3 * penguins + 5, 4 * penguins - 15)\n\n    solutions = solve(equation1, penguins)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height * ratio_kelly) / ratio_matthew\n\n    return kelly_height\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial as fact\n\ndef solution():\n    # After placing the 4 dancing performances, there will be 5 slots between and around them.\n    # We can place the 6 singing performances in these 5 slots.\n    # Assume the number of singing performances in each slot are s0, s1, s2, s3, s4 respectively. \n    # where each si > 0 because at least 1 singing performance must be between 2 dancing performances.\n    \n    # We use stars and bars theorem where we need to place 4 bars (for the 5 slots)\n    # to arrange 6 stars (singing performances), where each slot, except the first and last ones,\n    # cannot be empty to satisfy the requirements:\n    \n    # Count the number for first and last slots being non-empty (s0 >= 1, s4 >= 1),\n    # We subtract off this condition by placing 1 singing performance at s0 and s4, leaving 6 - 2 = 4 singing performances\n    # Thus, arranging 4 bars and 4 stars\n    total_ways_with_edges = fact(4 + 4 - 1) // (fact(4 - 1) * fact(4))\n    \n    # Now count the ways if the first and/or last slots were to be empty (consider them separately because they are distinct positions),\n    # meaning s0 and/or s4 can be zero. This is equivalent to placing 4 bars in 3 slots for the remaining 6 singing performances.\n    total_ways_no_requirement = fact(4 + 3 - 1) // (fact(4 - 1) * fact(3))\n    \n    # Subtract the redundant count where first and last slots may be empty\n    total_ways = total_ways_no_requirement - total_ways_with_edges\n    \n    return total_ways\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percentage = 35\n    total_amount = 80\n\n    result = (percentage / 100) * total_amount\n\n    return result\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    ans = 689 // 13\n    return ans\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3 / 8\n    cards_lost = original_cards * fraction_lost\n    \n    return int(cards_lost)\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    # Considering half-time scores for the winning team (team with 3 goals) can be 0, 1, 2, or 3\n    # The losing team (team with 2 goals) can have 0, 1, or 2 goals by half time\n    # We should ensure that the losing team doesn't have more goals than the winning team at half-time\n    # and the total half-time score doesn't exceed the final score.\n\n    count = 0\n    for team1_ht_goals in range(4):  # Possible half-time goals for the winning team\n        for team2_ht_goals in range(3):  # Possible half-time goals for the losing team\n            if team1_ht_goals >= team2_ht_goals and (team1_ht_goals + team2_ht_goals) <= 3:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    return comb(6, 2)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if (10*a + b) + (10*b + a) + b == (100*a + 10*a + b):\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    clara, emma = symbols('clara emma')\n\n    # Clara baked five times as many cookies as Emma did\n    equation1 = Eq(clara, 5 * emma)\n\n    # Clara and Emma baked 1002 cookies altogether\n    equation2 = Eq(clara + emma, 1002)\n\n    # Solve the system of equations for emma\n    solutions = solve((equation1, equation2), (clara, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    weight_full = 80\n    weight_half_full = 60\n\n    weight_mangoes_half_full = weight_half_full - (weight_full / 2)\n    weight_empty_basket = weight_half_full - weight_mangoes_half_full\n\n    return weight_empty_basket\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    girls, boys = symbols('girls boys')\n\n    # 3/8 of the girls and 3/5 of the boys can swim\n    # 20 pupils cannot swim, and there's an equal number of boys and girls who cannot swim\n    # This means 10 boys and 10 girls cannot swim\n\n    # Define the equations\n    # Equation for girls who cannot swim\n    equation1 = Eq(girls - (3 / 8) * girls, 10)\n    # Equation for boys who cannot swim\n    equation2 = Eq(boys - (3 / 5) * boys, 10)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    # Total number of pupils in the class\n    total_pupils = solutions[girls] + solutions[boys]\n\n    return total_pupils\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    return 0.85 * 400\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Initialize answer variable\n    ans = 0\n\n    # We need to find a rectangle where Mike can be the second in line in all directions.\n    # This means that Mike is not on the corner and he is not in a row or column with only two desks.\n    # Therefore, we are looking for a rectangle with at least 3 rows and 3 columns.\n    # Since Mike can always be second, it means that both the number of rows and columns can't be even.\n    # We iterate through possible sizes of the rectangle and check if they meet the condition.\n    for rows in range(3, 100):  # setting an arbitrary limit for potential class sizes\n        for cols in range(3, 100):  # same arbitrary limit for columns\n            # The total number of students in the class would be rows * cols\n            total_students = rows * cols\n            # Check if Mike can be second in line based on the above conditions\n            if (rows % 2 != 0 and cols % 2 != 0) and (rows > 2 and cols > 2):\n                # If the conditions meet, we found the class size and break out of loops\n                ans = total_students\n                break\n        if ans != 0:  # If ans is found, no need to check further\n            break\n\n    return ans\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5) + 3.2*(x - 2), 2.5*x + 3*(2.5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    product = 6 * 5\n    percentage = (product / 40) * 100\n    return percentage\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    # Let the total number of sweets be x.\n    # Pip ate 3/5 of them, so there are 2/5 of the sweets left.\n    # According to the problem, 2/5 of the total sweets is equal to 16.\n\n    # 2/5 * x = 16\n    # x = 16 / (2/5)\n    # x = 16 * (5/2)\n    total_sweets = 16 * (5/2)\n    \n    return int(total_sweets)\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earning = 60\n    days_in_a_week = 7\n\n    total_earnings = average_daily_earning * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    # Cost of 3 cups\n    total_cost_3_cups = 30\n    \n    # Since each cup costs the same, price per cup is the total cost divided by the number of cups\n    price_per_cup = total_cost_3_cups / 3\n    \n    # Mandy wants to buy 5 cups, so we multiply the price per cup by 5\n    total_cost_5_cups = price_per_cup * 5\n    return total_cost_5_cups\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        if i % 2 == 0:\n            ans += i**2\n        else:\n            ans -= i**2\n    return ans\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    big_mushroom_houses = 5\n    small_mushroom_houses = 9\n    total_rabbits = 38\n    capacity_big_house = 4\n\n    rabbits_in_big_houses = big_mushroom_houses * capacity_big_house\n    remaining_rabbits = total_rabbits - rabbits_in_big_houses\n    rabbits_per_small_house = remaining_rabbits / small_mushroom_houses\n    \n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    return 5 - 1.02\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    ways = [0] * (6 + 1)\n    ways[0] = 1  # There's 1 way to stay on the ground (doing nothing)\n    for step in range(1, 7):\n        ways[step] = ways[step - 1] + (ways[step - 2] if step - 2 >= 0 else 0) + (ways[step - 3] if step - 3 >= 0 else 0)\n    return ways[6]\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    total_sum = 21 + 22 + 23\n    for i in range(1, total_sum + 1):\n        if 2 * 3 * i == total_sum:\n            return i\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    total_months = 5  # From March to July inclusive\n    total_pizzas = average_pizzas_per_month * total_months\n    return total_pizzas\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 3\n    distance = 150\n\n    speed_upstream = speed_in_still_water - speed_of_current\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n    \n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n    \n    solutions = solve((equation1, equation2), (abigail, ryan))\n    \n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = 56 if 56 % 4 == 0 else (56 // 4 + 1) * 4\n    last_multiple = 92 if 92 % 4 == 0 else (92 // 4) * 4\n\n    num_multiples = (last_multiple - first_multiple) // 4 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    # We use the Chinese Remainder Theorem (CRT) to solve this problem\n    # The system of congruences we need to solve is:\n    # x ≡ 2 (mod 3)\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n\n    # Find the number that satisfies the above congruences and is less than 100\n    # Initialize ans with 0\n    ans = 0\n    # Loop through possible values of x\n    for x in range(1, 100):\n        if x % 3 == 2 and x % 4 == 3 and x % 5 == 4:\n            ans = x\n            break\n\n    return ans\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    claire_current_age = symbols('claire_current_age')\n    equation = Eq(claire_current_age + 6, 3 * claire_current_age)\n\n    claire_age_now = solve(equation, claire_current_age)[0]\n    claire_age_in_two_years = claire_age_now + 2\n\n    return claire_age_in_two_years\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = 0\n    sign = 1\n\n    for num in range(60, 0, -1):\n        ans += sign * num\n        if num % 4 == 0:  # Every 4 numbers, the sign changes\n            sign *= -1\n\n    return ans\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    ans = 526 * 4\n    return ans\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    base = 9\n    exponent = 99\n    last_digit_of_base = base % 10\n\n    # Find the cycle of the last digit of the powers of 9\n    cycle = [last_digit_of_base]\n    while True:\n        next_digit = (cycle[-1] * last_digit_of_base) % 10\n        if next_digit == cycle[0]:\n            break\n        cycle.append(next_digit)\n    \n    # Find the position in the cycle\n    cycle_length = len(cycle)\n    cycle_position = exponent % cycle_length - 1\n    \n    # Get the ones digit\n    ones_digit = cycle[cycle_position]\n    \n    return ones_digit\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    result = (4/15) - (7/10) + (11/15) - (3/10)\n    return result\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= set('20'):\n            break\n    return year - 2022\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    # Let x be the original journey time\n    # The journey took 11/12 of x, 5 minutes late despite being 15 minutes late to start\n    # So the actual journey time is (11/12)x + 15 (because it started 15 minutes late)\n    # Therefore, (11/12)x + 15 = x + 5 (since it was 5 minutes late on arrival)\n    # We can solve this equation to find x: the original journey time\n    from sympy import symbols, solve\n    \n    x = symbols('x')\n    equation = ((11/12) * x) + 15 - x - 5\n    \n    original_time = solve(equation, x)[0]\n    return original_time\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_product = total_product - known_product\n    missing_number = missing_product / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # UK coin denominations in pence\n    denominations = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Price of the bus fare in pence\n    bus_fare = 44\n    # Maximum possible payment Susan can make with a single coin\n    max_payment = 200\n    \n    # Assuming Susan pays with the largest possible single coin denomination\n    payment = next(coin for coin in denominations if coin >= bus_fare)\n    \n    change = payment - bus_fare\n    \n    # Calculate the smallest number of coins that change hands including the payment\n    total_coins = 1  # Starting with the payment coin\n    for coin in denominations:\n        while change >= coin:\n            change -= coin\n            total_coins += 1\n            \n        if change == 0:\n            break\n    \n    return total_coins\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return total_legs\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    number = 18 - 12\n    return number\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # We want to find the worst case, which means Jane picks the maximum number of marbles\n    # without getting 4 different coloured marbles. Once she exceeds this number by one, she is\n    # guaranteed to have 4 different colours.\n\n    # The worst case scenario would be drawing all the marbles of three colors completely\n    # without getting the fourth color. Calculate the total marbles for the three colors with the \n    # most marbles. That would be red, green, and blue in this case.\n\n    worst_case = 4 + 7 + 6  # Total marbles after taking all red, green, and blue marbles\n\n    # To make sure we have the fourth color, Jane must draw one more marble.\n    answer = worst_case + 1  # Adding one to make sure we have the fourth color (orange)\n\n    return answer\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    day_distance = 3\n    night_distance = -1\n    total_distance = 9\n    day_count = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from itertools import combinations\n\ndef solution():\n    # Since each child must get at least one book, we give one book to each child first.\n    remaining_books = 19 - 4\n\n    # Now, we will divide the remaining 15 books among 4 children. We will use stars and bars method where bars (3 bars for 3 partitions among 4 kids) will form partitions of stars (remaining books). We will calculate the combination of bars+stars choose bars.\n    \n    bars_plus_stars = remaining_books + 4 - 1  # bars (3) + stars (15)\n    bars = 4 - 1  # since 4 partitions make 3 bars\n\n    # The number of combinations is C(bars+stars, bars), which is the same as C(bars+stars, stars)\n    ways = combinations(range(bars_plus_stars), bars)\n\n    return sum(1 for _ in ways)\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    prev, curr = 2, 3\n    while curr < 100:\n        prev, curr = curr, prev + curr\n    return curr\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Total pens\n    total_pens = 6\n    # Total pencil cases\n    total_cases = 3\n\n    # Since the pencil cases cannot be empty, we place one pen in each case first.\n    # This is to ensure that none of the cases remain empty.\n    total_pens -= total_cases\n\n    # Now, we need to distribute the remaining pens (total_pens) into the cases.\n    # This is equivalent to the problem of finding the number of non-negative integer\n    # solutions to the equation x1 + x2 + x3 = total_pens.\n\n    # The number of non-negative integer solutions to the equation of the form\n    # x1 + x2 + ... + xn = k is given by the binomial coefficient \"combinations(k + n - 1, n - 1)\".\n\n    # Import the comb function from math module to calculate combinations.\n    from math import comb\n\n    # Calculate the number of ways to distribute the remaining pens.\n    ways = comb(total_pens + total_cases - 1, total_cases - 1)\n\n    return ways\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((4*i+2)**2 - (4*i)**2 for i in range(0, 10))\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the amount of water in each tank\n    A, B, C, D = symbols('A B C D')\n\n    # Given conditions turned into equations\n    equation1 = Eq(A, 5 * B)        # Tank A has 5 times the water in Tank B\n    equation2 = Eq(B, C + 5)        # Tank B has 5 more liters of water than Tank C\n    equation3 = Eq(C + D, A)        # The total water in Tank C and D equals Tank A\n    equation4 = Eq(D, 41)           # Tank D contains 41 liters of water\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (A, B, C, D))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n   \n    # Let m be the number of motorbikes, t be the number of tricycles, and v be the number of vans.\n    # A motorbike has 2 wheels, a tricycle has 3 wheels, and a van has 4 wheels.\n    m, t, v = symbols('m t v')\n    \n    # Total wheels: 2*m (motorbikes) + 3*t (tricycles) + 4*v (vans) = 101\n    equation1 = Eq(2*m + 3*t + 4*v, 101)\n    \n    # Motorbike and van wheels: 2*m + 4*v = 3*t + 35 (35 more motorbike and van wheels than tricycle wheels)\n    equation2 = Eq(2*m + 4*v, 3*t + 35)\n    \n    # Tricycle and van wheels: 3*t + 4*v = 2*m + 13 (13 more tricycle and van wheels than motorbike wheels)\n    equation3 = Eq(3*t + 4*v, 2*m + 13)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (m, t, v))\n\n    # Calculating how many more motorbikes than vans\n    motorbikes_vans_difference = solutions[m] - solutions[v]\n\n    return motorbikes_vans_difference\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    milk_per_cup = 1 / 6\n    total_cups = 30\n    total_milk_needed = milk_per_cup * total_cups\n    return total_milk_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    # Since Pip is directly in front of Bud, there is no one between them.\n    # Therefore, the total is the sum of people in front of Pip,\n    # Bud himself, Pip himself, and the people behind Bud.\n    total_people = people_in_front_of_pip + 1 + 1 + people_behind_bud\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    desired_term = 298\n\n    term_number = ((desired_term - first_term) / common_difference) + 1\n    return int(term_number)\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    year = \"2014\"\n    count = 0\n\n    for month in range(1, 13):\n        if month < 10:\n            month_str = \"0\" + str(month)\n        else:\n            month_str = str(month)\n            \n        for day in range(1, 32):\n            if day < 10:\n                day_str = \"0\" + str(day)\n            else:\n                day_str = str(day)\n                \n            date_str = year + month_str + day_str\n            if date_str.count(\"0\") == date_str.count(\"1\") == date_str.count(\"2\"):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Creating the congruences based on the given remainders and divisors\n    congs = [(3, 7), (7, 11), (9, 13)]\n\n    # Finding the smallest number satisfying the above congruences\n    ans, _ = solve_congruence(*congs)\n\n    return ans\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    difference = 5\n    n = 21\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    # Let x be the number of students who like both sports.\n    # According to the problem:\n    # Number of students who like football = 3x\n    # Number of students who like basketball = 4x\n    # Total number of students = 36\n    # By applying the Inclusion-Exclusion Principle:\n    # Total = football only + basketball only + both - neither\n    # But we know everyone likes at least one sport, so 'neither' is 0.\n    # Total = football + basketball - both\n    # 36 = 3x + 4x - x\n    # Solve for x:\n    x = 36 / (3 + 4 - 1)\n    return int(x)\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    adam_speed = 60  # km/h\n    jacob_speed = 80  # km/h\n    jacob_time = 3    # hours\n    adam_time = 3.5   # hours (3 hours + 30 minutes)\n\n    # Calculate the distance each has traveled\n    adam_distance = adam_speed * adam_time\n    jacob_distance = jacob_speed * jacob_time\n\n    # Since they are driving in opposite directions, we add the distances\n    total_distance = adam_distance + jacob_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    # Calculate the sum of the given numbers considering the average is 6 for 8 numbers\n    total_sum = 8 * 6\n    sum_of_known_numbers = 4 + 5 + 6 + 9 + 3 + 9\n    sum_of_p_q = total_sum - sum_of_known_numbers\n    \n    # The difference between the highest value and the lowest value is 6\n    # Since p < q, and the numbers given range from 3 to 9, the lowest possible value for p would be 3\n    # The highest possible value any number can take is 9 (from the given numbers)\n    # Thus, the lowest possible value for q would be 9 + 6 = 15, \n    # but we need to take into account the sum of p and q we just calculated\n    # We will start with q as 9 and increment it to find the lowest possible q that matches the sum\n    p = 3\n    for q in range(9, sum_of_p_q - p + 1):\n        if p + q == sum_of_p_q and q - p == 6:  # ensuring p < q and the difference is 6\n            return q\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def custom_operation(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    result = custom_operation(custom_operation(custom_operation(1, 2), 3), 4)\n    final_result = custom_operation(result, 5)\n    return int(final_result)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    # Prime factorization of 252 = 2^2 * 3^2 * 7^1\n    # The number of factors is the product of (exponent + 1) for each prime factor\n    # (2+1) * (2+1) * (1+1) = 3 * 3 * 2 = 18\n    num_factors = (2 + 1) * (2 + 1) * (1 + 1)\n    return num_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n\n    # Using the Pigeonhole Principle, we divide total cakes by total layers to find the minimum\n    # number of cakes in the layer with the most cakes, then we add 1 because the number of cakes\n    # must be an integer and (total_cakes // total_layers) will give us the floor division result.\n    max_cakes_in_a_layer = (total_cakes // total_layers) + (total_cakes % total_layers > 0)\n\n    return max_cakes_in_a_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 7 / 100\n    paid_gst = 0.91\n\n    cost_before_gst = paid_gst / gst_rate\n\n    return cost_before_gst\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # Worst case scenario using the pigeonhole principle:\n    # Lucy takes 1 blue, then 1 yellow, she still doesn't have 2 of the same color.\n    # Now she takes either color and will have 2 of the same, guaranteed.\n    # To guarantee 2 marbles of the same color, Lucy must take at least 3 marbles.\n    return 3\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    kg_to_g = 1000\n    weight1 = 2.49 * kg_to_g\n    weight2 = 670\n    weight3 = (3 * kg_to_g) + 80\n\n    total_weight = weight1 + weight2 + weight3\n\n    return total_weight\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_exercise_time = 60  # 60 minutes\n    cycling_fraction = 1 / 3\n    cycling_time = total_exercise_time * cycling_fraction\n    jogging_time = total_exercise_time - cycling_time\n\n    return int(jogging_time)\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    difference = 22 - 18\n    last_term = 2\n    next_term = last_term - difference\n    return next_term\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    least_common_multiple = lcm(ashley_time, ben_time, charlie_time)\n    \n    # Convert the seconds to hours, minutes and seconds\n    hours = least_common_multiple // 3600\n    minutes = (least_common_multiple % 3600) // 60\n    seconds = least_common_multiple % 60\n    \n    # Starting time is 10:00 am\n    start_hour = 10\n    \n    # Calculate the time they meet\n    meet_hour = start_hour + hours\n    meet_minute = minutes\n    meet_second = seconds\n    \n    # Adjust for any rollover of time\n    if meet_minute >= 60:\n        meet_hour += meet_minute // 60\n        meet_minute %= 60\n        \n    meet_hour %= 24  # Adjust in case of rollover past midnight\n    \n    meet_time = f\"{meet_hour:02d}:{meet_minute:02d}:{meet_second:02d}\"\n    \n    return meet_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin_age = symbols('justin_age')\n\n    equation = Eq(justin_age + 18, 4 * (justin_age - 6))\n\n    solution_age = solve(equation, justin_age)\n\n    return solution_age[0]\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # If Bart takes out one of each color, he is certain to have\n    # 2 M&Ms of different colors.\n    # Therefore, he needs to take 1 red, 1 yellow, and 1 brown to guarantee this.\n    # So the smallest number needed is 1 + 1 + 1 = 3.\n    return 3\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"24572{digit}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    # Given values for Sam's car\n    distance_sam = 273  # in miles\n    consumption_rate_sam = 72.8  # miles per gallon\n\n    # Calculate how much petrol Sam's car uses\n    petrol_used_sam = distance_sam / consumption_rate_sam\n    \n    # Petrol used by Tom's car is 6 3/4 gallons more than Sam's car\n    extra_petrol_tom = 6 + 3/4\n    petrol_used_tom = petrol_used_sam + extra_petrol_tom\n    \n    # Calculate Tom's average consumption rate\n    consumption_rate_tom = distance_sam / petrol_used_tom\n\n    return consumption_rate_tom\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    ans = 9039 + 93\n    return ans\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Total number of apples and children\n    apples = 30\n    children = 6\n    \n    # Assuming that each child gets at least one apple,\n    # and that the number of apples that each child gets is different,\n    # we need to find the largest number that the child who gets the most apples can have.\n    # We can start by giving one apple to each child,\n    # then distribute the remaining apples (30 - 6) as much as possible to one child.\n    \n    # Give one apple to each child\n    apples_distributed = children\n    # Distribute remaining apples to the first child (maximized amount)\n    max_apples_to_one_child = apples - apples_distributed + 1  # Plus one because one apple is already given\n    \n    # Now we need to subtract the minimum apples that need to be given to\n    # the remaining children such that each has a unique amount.\n    # To find the minimum apples, we create a sequence of natural numbers\n    # 1, 2, 3, ..., n where n is the number of children remaining after the first child.\n    # The sum of this sequence is the minimum amount we need to subtract.\n    min_apples_to_others = sum(range(2, children))  # Start from 2 as we already gave 1 apple to each child\n    \n    # Largest possible number for the child getting the most apples\n    largest_possible_apples = max_apples_to_one_child - min_apples_to_others\n    \n    return largest_possible_apples\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    return sum(i**2 for i in range(1, 20, 2))\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    shirts = 2\n    skirts = 2\n    outfit_combinations = shirts * skirts\n    return outfit_combinations\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # Given sequence: 1, 3, _, 27, 81\n    # This looks like a geometric sequence where each term is multiplied by a common ratio.\n    # To find the blank, we can find the ratio by diving 27 by 3 (successive terms around the blank)\n    ratio = 27 / 3\n    # The blank (missing term) before 27 should be 27 divided by the ratio\n    missing_term = 27 / ratio\n    return int(missing_term)\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    ans = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return ans\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    a7 = 105  # 7th term\n    a9 = 135  # 9th term\n    n = 100   # we're looking for the 100th term\n\n    # calculate the common difference of the arithmetic sequence\n    d = (a9 - a7) / 2\n\n    # calculate the first term using the 7th term\n    a1 = a7 - (7 - 1) * d\n\n    # calculate the 100th term\n    a100 = a1 + (n - 1) * d\n\n    return a100\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    base_10_sum = 45 + 66 # Calculate the sum in base 10 first\n    # Convert the base 10 sum to base 7\n    if base_10_sum == 0:\n        return '0'\n    \n    ans = ''\n    while base_10_sum > 0:\n        ans = str(base_10_sum % 7) + ans\n        base_10_sum //= 7\n    \n    return ans\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges_original, lemons_original = symbols('oranges_original lemons_original', integer=True)\n    \n    # Initial ratio condition\n    initial_ratio = Eq(oranges_original / lemons_original, 3/5)\n    \n    # New ratio after selling 48 oranges\n    new_ratio = Eq((oranges_original - 48) / lemons_original, 1/2)\n    \n    # Solving the system of equations\n    solutions = solve((initial_ratio, new_ratio), (oranges_original, lemons_original))\n    \n    # Return the number of lemons\n    return solutions[lemons_original]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_rabbit_per_day = 4\n    rabbits = 8\n    days = 5\n\n    total_carrots = carrots_per_rabbit_per_day * rabbits * days\n\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    horse_daily_consumption = 1 / 2\n    cow_daily_consumption = 1 / 3\n    sheep_daily_consumption = 1 / 12\n\n    total_daily_consumption = horse_daily_consumption + cow_daily_consumption + sheep_daily_consumption\n    days_for_bales_to_last = 22 / total_daily_consumption\n\n    return days_for_bales_to_last\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    ans = (5/8) * 160\n    return ans\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    # Given equation is 3 * n * 6 = 72\n    # Simplifying the equation to find n\n    n = 72 / (3 * 6)  # Dividing both sides by 3*6 to isolate n\n    return n\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mother_current_age, daughter_current_age = symbols('mother_current_age daughter_current_age')\n    \n    # When the daughter reaches the mother's current age, the mother will be 75.\n    equation1 = Eq(mother_current_age + (mother_current_age - daughter_current_age), 75)\n    \n    # When the mother was the daughter's current age, the daughter was 3.\n    equation2 = Eq(daughter_current_age - (mother_current_age - daughter_current_age), 3)\n    \n    solutions = solve((equation1, equation2), (mother_current_age, daughter_current_age))\n\n    return solutions[mother_current_age]\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # To ensure getting 3 red apples, Isabella must account for the worst-case scenario:\n    # picking all the green and yellow apples first.\n    # So we calculate the total number of green and yellow apples.\n    green_and_yellow = 11 + 7\n    \n    # The smallest number needed to ensure 3 red apples includes all green and yellow apples\n    # plus the 3 red apples she wants.\n    smallest_number_to_ensure_red = green_and_yellow + 3\n    \n    return smallest_number_to_ensure_red\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "def solution():\n    from itertools import permutations\n\n    year = \"2014\"\n    valid_dates = 0\n\n    # Iterate over all permutations of \"001122\" representing day and month\n    for date_perm in permutations(\"001122\"):\n        month = int(''.join(date_perm[:2]))\n        day = int(''.join(date_perm[2:]))\n        # Check for valid month and day combination\n        if 1 <= month <= 12:\n            if month == 2:  # February has 28 days in 2014\n                if 1 <= day <= 28:\n                    valid_dates += 1\n            elif month in [4, 6, 9, 11]:  # April, June, September, November have 30 days\n                if 1 <= day <= 30:\n                    valid_dates += 1\n            else:  # The rest of the months have 31 days\n                if 1 <= day <= 31:\n                    valid_dates += 1\n\n    # Use set to remove duplicates, since permutations allow for repeated combinations\n    # Each date appears three times due to permutations of \"11\", \"00\", and \"22\"\n    return valid_dates // 6\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # The maximum number of left-handed girls would be all the girls minus the number of left-handed pupils\n    max_left_handed_girls = girls - (total_pupils - right_handed)\n    \n    # Therefore, the minimum number of right-handed girls is the total number of girls minus the maximum possible number of left-handed girls\n    min_right_handed_girls = girls - max_left_handed_girls\n    \n    return min_right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    numbers = [20, -19, 18, -17, 16, -15, 14, -13]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    original_price = 6400 / 0.2\n    discount_amount = original_price - 6400\n    return discount_amount\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    total_children = 45\n    capacity_minibus = 8\n\n    minibuses_needed = -(-total_children // capacity_minibus) # Ceiling division\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    return 101 + 97 + 102 + 99 + 98 + 103 - 100\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Number of marbles per color:\n    red, green, blue, orange = 4, 7, 6, 2\n    # She needs to have at least 1 marble of each color\n\n    # She can pick all marbles from a color except the color with the least amount,\n    # she has to pick at least 1 from it to have all 4 colors.\n    # Hence we pick all but one from the three largest groups, then we add 1\n    # to ensure we get at least one marble of the remaining color.\n    ans = (red - 1) + (green - 1) + (blue - 1) + 1\n    return ans\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "from itertools import combinations\n\ndef solution():\n    # A single round-robin tournament means every team plays every other team once\n    # For 6 teams, there will be C(6, 2) games, where C is the number of combinations of 6 items taken 2 at a time\n    num_games = len(list(combinations(range(6), 2)))\n    \n    # In each game, a total of 2 points are distributed either as (2, 0) for a win/loss or (1, 1) for a tie\n    # Therefore, the total number of points distributed over the entire tournament remains the same regardless of outcome\n    total_points = num_games * 2  # Because each game contributes 2 points to the total\n\n    return total_points\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Given equations\n    equation1 = Eq(boys, girls + 90)  # There are 90 more boys than girls\n    equation2 = Eq(girls_swim/girls_not_swim, 31/49)  # Ratio of girls who can swim to those who cannot\n    equation3 = Eq(boys_swim, boys_not_swim - 120)  # The number of boys who can swim is 120 less than those who cannot\n    equation4 = Eq(girls + boys, 1690)  # Total number of pupils\n    equation5 = Eq(girls, girls_swim + girls_not_swim)  # Total number of girls\n    equation6 = Eq(boys, boys_swim + boys_not_swim)  # Total number of boys\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Calculate the number of pupils who cannot swim\n    cannot_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return cannot_swim\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for i in range(1, 101):\n        if i % 2 == 0 and i % 3 == 0 and i % 5 == 0 and i % 7 == 6:\n            return i\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    num_zeros = 28\n    n = 0\n    factor_5_count = 0\n\n    while factor_5_count < num_zeros:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            factor_5_count += 1\n            temp //= 5\n\n    return n\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 41):\n        if isprime(a):\n            for b in range(2, 41):\n                if isprime(b) and 3*a + 7*b == 41:\n                    return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    price_per_tender_4pc = 7 / 4\n    price_per_tender_6pc = 8.5 / 6\n\n    return '4pc' if price_per_tender_4pc < price_per_tender_6pc else '6pc'\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    return 1.83 + 0.2\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    # Number of possible results for two dice that add up to more than 10: (5,6), (6,5), (6,6)\n    successful_outcomes = 3\n    \n    # Total possible outcomes when two dice are thrown\n    total_outcomes = 6 * 6\n    \n    # Probability of winning\n    probability_of_winning = successful_outcomes / total_outcomes\n    \n    # Expected winnings per game (10 pounds prize times the probability of winning minus 1 pound bet)\n    expected_winnings_per_game = 10 * probability_of_winning - 1\n    \n    # Total expected winnings/losses after 60 games\n    total_expected_winnings = 60 * expected_winnings_per_game\n    \n    # Since we want to find out how much will this player expect to lose, we multiply by -1\n    expected_loss = total_expected_winnings * -1\n    \n    return expected_loss\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    numbers = [2, 3, 4]\n    count = 0\n    # Generate all permutations of 1, 2, and 3 digits\n    for r in range(1, len(numbers) + 1):\n        count += len(set(permutations(numbers, r)))\n    return count\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    # Let's denote x as her total monthly salary.\n    # According to the problem, she spent $740 on a phone,\n    # Then she spent 75% of the remaining money on her rent.\n    # Finally, she had 1/5 of her salary left.\n\n    # Let's set up the equation:\n    # x - 740 = amount remaining after buying the phone\n    # (x - 740) * 0.75 = amount spent on rent\n    # So, she has (x - 740) * 0.25 left\n    # According to the problem, what's left, (x - 740) * 0.25, is 1/5 of her total salary (x/5).\n\n    # Now we can set up the equation (x - 740) * 0.25 = x / 5\n    # Solving for x will give us her total salary.\n\n    # Solve the equation: (x - 740) * 0.25 = x / 5\n    x = symbols('x')\n    equation = Eq((x - 740) * 0.25, x / 5)\n    salary = solve(equation, x)[0]\n\n    return salary\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    weight_with_apples = 580\n    weight_without_3_apples = 280\n    apples_taken_out = 3\n    total_apples = 5\n\n    # Weight of 3 apples\n    weight_of_3_apples = weight_with_apples - weight_without_3_apples\n    \n    # Weight of 5 apples\n    weight_of_5_apples = (weight_of_3_apples / apples_taken_out) * total_apples\n    \n    # Weight of the basket\n    weight_of_basket = weight_with_apples - weight_of_5_apples\n    \n    return int(weight_of_basket)\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    remaining_after_class = 150 + 100  # ml\n    original_amount = remaining_after_class * 2  # Pip drank half before class\n    return original_amount\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # Equation for the difference in the number of mushrooms gathered\n    equation1 = Eq(first_hour, second_hour - 26)\n    # Equation for the total number of mushrooms gathered\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n    lynn_left = lynn - 160\n    mary_left = mary - 58\n\n    equation1 = Eq(lynn, mary)\n    equation2 = Eq(mary_left, 3 * lynn_left)\n\n    solutions = solve((equation1, equation2), (lynn, mary))\n\n    return solutions[lynn_left]\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    # Initialize current time in minutes since start of the day\n    current_time = 2 * 60 + 31  # 02:31 -> 151 minutes\n\n    while True:\n        # Increment the time by one minute\n        current_time += 1\n\n        # Calculate the hours and minutes from the total minutes\n        hours = current_time // 60\n        minutes = current_time % 60\n\n        # We know that hours in a day can only go up to 23 (0 - 23)\n        # If it reaches 24 (midnight), reset the hours to 0\n        if hours == 24:\n            hours = 0\n\n        # Create a set of digits present in the current time\n        digits = set(str(hours).zfill(2) + str(minutes).zfill(2))\n\n        # Check if all the required digits are present\n        if all(digit in digits for digit in '0123'):\n            # If all digits are present, break out of the loop\n            break\n\n    # The answer is the total minutes passed since 02:31\n    return current_time - (2 * 60 + 31)\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n\n    def triangle(A, B):\n        return 5 * A - B * B\n\n    ans = triangle(diamond(4, 2), 6)\n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = (3/7) * total_grapes\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = (3/8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    small_bag_weight = 3/4\n    \n    number_of_small_bags = remaining_after_tuesday / small_bag_weight\n    \n    return int(number_of_small_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    sold_percentage = 0.60\n    unsold_tickets = 28\n    total_capacity = unsold_tickets / (1 - sold_percentage)\n    return int(total_capacity)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # The divisor is at least one more than the quotient for the remainder to be less than the divisor.\n\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    sum = 0\n    for i in range(64, 43, -2):\n        sum += i\n        sum -= i - 2\n    return sum\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(5 * number - 4, 41)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    deivi, jerry = symbols('deivi jerry')\n    equation1 = Eq(deivi, jerry + 8)\n    equation2 = Eq((deivi + 4)/(jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (deivi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jugs = -(-total_ml // 250)  # Ceiling division to find least number of jugs\n\n    return jugs\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    from math import factorial\n\n    sum_series = 0\n    for i in range(4):\n        numerator = factorial(100) // factorial(100 - i)\n        denominator = factorial(97) // factorial(97 - i)\n        sum_series += numerator / denominator\n    \n    return sum_series\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    empty_box_weight = 12\n    number_of_matches = 220\n    \n    matches_weight = total_weight_with_matches - empty_box_weight\n    weight_per_match = matches_weight / number_of_matches\n    \n    return weight_per_match\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 50\n    desired_percentage = 0.9\n\n    # Let x be the number of red balls to remove\n    x = symbols('x')\n    \n    # Equation: (49 - x) / (total_balls - x) = desired_percentage\n    equation = Eq((49 - x) / (total_balls - x), desired_percentage)\n    \n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # We will iterate over all possible 2-digit numbers for the minuend and subtrahend\n    # We will extract their tens and ones digits to simulate Serene's mistake then find the ones that fit the criteria\n    for minuend in range(10, 100):\n        for subtrahend in range(10, 100):\n\n            # Extract the tens and ones places for the true subtrahend\n            true_tens_subtrahend = subtrahend // 10  \n            true_ones_subtrahend = subtrahend % 10    \n            \n            # Simulate Serene's mistaken tens and ones places\n            mistaken_tens_subtrahend = 5\n            mistaken_ones_subtrahend = 3\n            \n            # Calculate the mistaken subtrahend\n            mistaken_subtrahend = mistaken_tens_subtrahend * 10 + mistaken_ones_subtrahend\n            \n            # Perform the subtraction with the mistaken subtrahend \n            mistaken_difference = minuend - mistaken_subtrahend\n            \n            # Check if the result matches the mistake\n            if mistaken_difference == 36:\n                # Calculate the correct subtrahend\n                correct_subtrahend = true_tens_subtrahend * 10 + true_ones_subtrahend\n                \n                # Calculate the correct difference\n                correct_difference = minuend - correct_subtrahend\n                return correct_difference\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    # Let's denote c as the number of cows and b as the number of birds.\n    # We know that c + b = 1300 (as this is the total number of cows and birds)\n    # and 4c + 2b = 3440 (as cows have 4 legs and birds have 2 legs).\n    # The problem is now a system of linear equations which can be solved.\n    \n    from sympy import symbols, Eq, solve\n    \n    c, b = symbols('c b')\n    \n    equation1 = Eq(c + b, 1300)\n    equation2 = Eq(4*c + 2*b, 3440)\n    \n    solutions = solve((equation1, equation2), (c, b))\n    \n    return solutions[c]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    greatest_num = -1\n    for num in range(100, 1000, 2):  # Iterate over 3-digit odd numbers\n        if num % 9 == 0:  # Check if number is divisible by 9\n            tens_digit = (num // 10) % 10\n            if tens_digit % 4 == 0:  # Check if tens place is divisible by 4\n                greatest_num = max(greatest_num, num)\n    return greatest_num\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "import math\n\ndef solution():\n    # Mass of car 1 (kg)\n    m1 = 500\n    # Velocity of car 1 (m/s)\n    v1 = 20\n    # Direction of car 1: north\n    \n    # Mass of car 2 (kg)\n    m2 = 500\n    # Velocity of car 2 (m/s)\n    v2 = 30\n    # Direction of car 2: west\n\n    # Using conservation of momentum, because momentum is conserved in both the north-south and east-west directions.\n    # The east-west momentum before the collision is entirely due to car 2, since car 1 is travelling north.\n    # The north-south momentum before the collision is entirely due to car 1, since car 2 is travelling west.\n    \n    # East-West momentum: (m2 * v2) + 0 = m2 * v2 (car 1 has no east-west momentum)\n    p_east_west = m2 * v2\n    \n    # North-South momentum: (m1 * v1) + 0 = m1 * v1 (car 2 has no north-south momentum)\n    p_north_south = m1 * v1\n    \n    # After the collision, cars lock bumpers and move together with combined mass m1 + m2.\n    # Let V be the velocity vector of the two-car system after collision\n    \n    # Calculate the components of V\n    V_east_west = p_east_west / (m1 + m2)\n    V_north_south = p_north_south / (m1 + m2)\n    \n    # The magnitude of velocity V can be found by Pythagorean theorem\n    V_magnitude = math.sqrt(V_east_west**2 + V_north_south**2)\n    \n    # The direction of V can be found by taking the arctangent of (V_north_south / V_east_west), which gives the angle in radians\n    V_direction = math.atan2(V_north_south, V_east_west)\n    \n    # Convert the angle from radians to degrees\n    V_direction_degrees = math.degrees(V_direction)\n    \n    return V_magnitude, V_direction_degrees\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny = 83\n    ben = jenny - 28  # Ben will have this many pens after Jenny gives him 28 pens\n    ben_original = ben - 28  # Ben's original number of pens\n\n    return ben_original\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    # Total length of the road divider\n    total_length = 20 * 2  # There are 21 trees, thus 20 intervals of 2m each\n\n    # Number of lamp posts\n    # We add 10 because there is a lamppost at each end of the road\n    num_lamp_posts = (total_length // 10) + 1  \n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one laptop and one DVD player\n    laptop, dvd = symbols('laptop dvd')\n\n    # Equation for the total cost\n    equation_total = Eq(5 * laptop + 4 * dvd, 14438)\n\n    # Equation for the combined cost of one laptop and one DVD player\n    equation_combined = Eq(laptop + dvd, 2960)\n\n    # Solve the system of equations\n    solutions = solve((equation_total, equation_combined), (laptop, dvd))\n\n    # Return the cost of one DVD player\n    return solutions[dvd]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3\n    colors_per_size = 5\n\n    total_combinations = sizes * colors_per_size\n\n    return total_combinations\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        square, circle, triangle, star = p\n        if ((square != 0 and circle != 0 and triangle != 0 and star != 0) and \n            (triangle + triangle == star) and\n            (circle + triangle + 1 == square * 10 + star)):\n            return triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):  # Ensuring j > i to get distinct numbers\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern_sum = sum(range(1, 6))  # Sum of digits in one pattern\n    full_patterns = 2000 // 5  # Number of full patterns\n    remaining_digits = 2000 % 5  # Number of digits in the last, possibly incomplete, pattern\n\n    sum_full_patterns = pattern_sum * full_patterns  # Sum of digits in all full patterns\n    sum_remaining_digits = sum(range(1, remaining_digits + 1))  # Sum of the remaining digits\n\n    total_sum = sum_full_patterns + sum_remaining_digits\n    return total_sum\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    avg_before_aaron, total_weight_before_aaron, num_people_before_aaron = symbols('avg_before_aaron total_weight_before_aaron num_people_before_aaron')\n    \n    # Equation for the situation just before Aaron joined\n    equation1 = Eq(total_weight_before_aaron, avg_before_aaron * num_people_before_aaron)\n    \n    # Equation for the situation after Aaron joined but before Ben joined\n    equation2 = Eq(total_weight_before_aaron + 45, 61 * (num_people_before_aaron + 1))\n    \n    # Equation for the situation after Ben joined as well\n    equation3 = Eq(total_weight_before_aaron + 45 + 71, 62 * (num_people_before_aaron + 2))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (avg_before_aaron, total_weight_before_aaron, num_people_before_aaron))\n    \n    # We return the average weight before Aaron joined\n    return solutions[avg_before_aaron]\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    coffee_cost = 3.69      # in pounds\n    milk_cost = 0.89        # in pounds, converted from 89p (pence)\n    total_cost = 5.15       # in pounds\n\n    sugar_cost = total_cost - (coffee_cost + milk_cost)  # Calculate the cost of sugar\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hours_passed in range(1, 12):\n        hours_remaining = 12 - hours_passed\n        if hours_passed == 2 * hours_remaining:\n            return hours_passed\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) / 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    price_oranges_per_kg = 1.5\n    weight_oranges_kg = 4.1\n    price_mangoes_per_kg = 2.3\n    weight_mangoes_kg = 2\n\n    total_cost = (price_oranges_per_kg * weight_oranges_kg) + (price_mangoes_per_kg * weight_mangoes_kg)\n\n    return total_cost\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Pigeonhole principle problem\n    # In the worst case scenario, Sheila might take out all the balls of the other two colors \n    # before she has 4 balls of the same color.\n    # To ensure 4 balls of the same color, one possible combination would be to draw:\n    # all the orange balls, all the yellow balls, and 3 blue balls (which are not enough)\n    # in this case, with the next draw, she will definitely have 4 of the same color.\n    \n    # 4 orange balls\n    orange_balls = 4\n    # 2 yellow balls\n    yellow_balls = 2\n    # 3 blue balls (one short of 4, the next ball has to give us 4 of the same color)\n    blue_balls = 3\n    \n    # Total number of balls to take out\n    total_balls = orange_balls + yellow_balls + blue_balls + 1\n    \n    return total_balls\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_numbers = len(numbers) + 1  # Including 'a'\n    sum_with_a = mean_value * total_numbers\n    sum_without_a = sum(numbers)\n    a = sum_with_a - sum_without_a\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # A's work rate per day\n    work_rate_A = 1 / 15\n    # B's work rate per day\n    work_rate_B = 1 / 10\n    # Combined work rate per day\n    combined_work_rate = work_rate_A + work_rate_B\n    # Work done in 4 days\n    work_done_4_days = 4 * combined_work_rate\n    # Remaining work\n    remaining_work = 1 - work_done_4_days\n    # Time for B to finish the remaining job\n    days_for_B_to_finish = remaining_work / work_rate_B\n\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate the sum of the first part of the sequence: 1+2+3+...+13\n    n = 13\n    sum_first_half = n * (n + 1) // 2\n\n    # Calculate the sum of the second part of the sequence: 13+12+...+1\n    # Since it's the same numbers, the sum is the same as the first half without the first element.\n    sum_second_half = sum_first_half - 1\n\n    # Add both sums together to get the total sum.\n    total_sum = sum_first_half + sum_second_half\n\n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction_amount = original_price - reduced_price\n    percentage_reduction = (reduction_amount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    # Calculate the least number of test tubes using logarithm with base 2,\n    # as we are trying to represent 1000 unique bottles with the least number of binary digits (test tubes)\n    \n    import math\n    \n    num_bottles = 1000\n    \n    # Find the minimum number of binary digits (test tubes) required to represent all bottles\n    num_test_tubes = math.ceil(math.log(num_bottles, 2))\n    \n    return num_test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 5 == 1 and number % 6 == 1 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    # We will denote the side length of the square array for boys as b and for girls as g.\n    # Since boys occupy the outer layer and girls the next one, we have b = g + 2 (consider the border).\n    # The number of boys will then be b^2, and the number of girls will be g^2.\n    # The difference in the number is 52. Hence, b^2 - g^2 = 52.\n    # We know (b + g)(b - g) = b^2 - g^2, so we need to find a pair of b and g such that their product is 52.\n    # This translates to (g + 2 + g)(g + 2 - g) = 52 -> 2 * (g + 2) = 52 -> g + 2 = 26 -> g = 24.\n    # Once we have the value of g, we can calculate b = g + 2.\n    \n    boys_more = 52\n    for g in range(1, boys_more):  # g is the side length for the square of girls\n        b = g + 2 # Boys surround girls, hence boys will have an extra layer on each side\n        if (b ** 2 - g ** 2) == boys_more:\n            total_students = b ** 2 + g ** 2\n            return total_students\n    return None\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    # Hebe's last action is eating 1/4 of her cookies and having 42 left\n    # That means Hebe had 42 * 4/3 cookies before eating\n    hebe_before_eating = 42 * (4/3)\n\n    # Hebe received hebe_before_eating + 4 cookies from Emerald\n    # That means Emerald had to have (hebe_before_eating + 4) * 3/2 cookies before giving them to Hebe\n    emerald_before_giving = (hebe_before_eating + 4) * (3/2)\n\n    # Emerald was left with emerald_before_giving after Charlene kept half and 8 cookies\n    # Charlene had (emerald_before_giving + 8) * 2 cookies at the start\n    charlene_initial_cookies = (emerald_before_giving + 8) * 2\n\n    return int(charlene_initial_cookies)\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # Convert litres to millilitres\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n\n    # After the fourth day, he ate 1/4 of the remaining sweets; hence there were (6*4/3) remaining before the fourth day\n    day_4 = remaining_sweets * (4 / 3)\n\n    # After the third day, he ate 1/5 of the remaining sweets; hence there were (day_4 * 5/4) remaining before the third day\n    day_3 = day_4 * (5 / 4)\n\n    # After the second day, he ate 1/6 of the remaining sweets; hence there were (day_3 * 6/5) remaining before the second day\n    day_2 = day_3 * (6 / 5)\n\n    # On the first day, he ate 1/7 of the sweets; hence there were (day_2 * 7/6) total sweets initially\n    total_sweets = day_2 * (7 / 6)\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    return 528 + 30\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Ducks have 2 legs, geese have 2 legs, lambs have 4 legs\n    duck_legs = 4 * 2\n    geese_legs = 2 * 2\n    \n    # Total legs\n    total_legs = 36\n    \n    # The remaining legs are those of the lambs\n    remaining_legs = total_legs - (duck_legs + geese_legs)\n    \n    # Since each lamb has 4 legs, divide by 4 to find number of lambs\n    num_lambs = remaining_legs // 4\n    \n    return num_lambs\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    total_uniforms = 3600\n    uniforms_in_5_days = 720\n    daily_production_rate = uniforms_in_5_days / 5\n    remaining_uniforms = total_uniforms - uniforms_in_5_days\n    days_needed = remaining_uniforms / daily_production_rate\n    total_days = 5 + days_needed\n    return int(total_days)\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of teams\n    n = symbols('n')\n\n    # Each team plays n-1 other teams twice, so the total number of matches is (n*(n-1))/2 * 2\n    equation = Eq((n * (n - 1)), 60)\n\n    # Solve the equation for n\n    solutions = solve(equation, n)\n\n    # We only need the positive solution because the number of teams cannot be negative\n    ans = [sol for sol in solutions if sol.is_positive][0]\n    return ans\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    # Compute the ways to reach the 5th step\n    ways_to_5th = fibonacci(5)\n\n    # Compute the ways to reach the top from the 5th step\n    ways_from_5th_to_top = fibonacci(6)\n\n    # Multiply the two possibilities to get the total ways\n    total_ways = ways_to_5th * ways_from_5th_to_top\n\n    return total_ways\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 45\n    equation = Eq(girls, 3 * boys - 21)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the three numbers\n    first, second, third = symbols('first second third')\n    \n    # Equations according to the problem statement\n    equation1 = Eq(first + second + third, 7656)  # Sum of numbers is 7656\n    equation2 = Eq(first, second + 1099)          # The first number is 1099 more than the second\n    equation3 = Eq(third, second - 877)           # The third number is 877 less than the second\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    return solutions[second]\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    ans = 5.824 / 0.4\n    return ans\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    from math import isqrt\n\n    for n in range(40, 51):\n        root = isqrt(n)\n        if root * root == n:\n            return n\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_water = 150\n    cup_water = 40\n    cups_poured = 3\n\n    water_left = initial_water - cup_water * cups_poured\n\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    from sympy import factorint\n    \n    # Prime factorization of the product\n    factors = factorint(2*2*2*3*8*5*5*25)\n    \n    # Number of trailing zeros is determined by the minimum of \n    # the power of 2 and the power of 5 in the prime factorization\n    num_zeros = min(factors.get(2, 0), factors.get(5, 0))\n    \n    return num_zeros\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define symbols for the prices of each item\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # Now we set up our equations based on the problem statement\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50) # Total cost equation\n    equation2 = Eq(notebook + pencil_case, 6)  # Cost of a notebook and a pencil case\n    equation3 = Eq(pencil_case + eraser, 8)  # Cost of a pencil case and an eraser\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n    \n    # Extract the price of a pencil case\n    pencil_case_price = solutions[pencil_case]\n    \n    return pencil_case_price\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    n = symbols('n', integer=True, positive=True)  # Define variable n\n    # Create the equation representing the product of 4 consecutive numbers \n    equation = Eq(n * (n + 1) * (n + 2) * (n + 3), 3024)  \n    # Solve the equation\n    solutions = solve(equation, n)  \n    # Filter the positive solution and add 3 to find the largest number\n    largest_number = max(solutions) + 3  \n    return largest_number\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Bob has 15 more cards than Alan.\n    equation1 = Eq(bob, alan + 15)\n\n    # After Colin gives Bob 25 cards, Bob now has 3 times as many as Alan.\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let alice's current age be 'a' and her sister's current age be 's'\n    alice, sister = symbols('alice sister')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(alice, 2 * sister)  # Alice is twice as old as her sister now\n    equation2 = Eq(alice + 10 + sister + 10, 53)  # In 10 years, their total age will be 53 years old\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    # Return Alice's current age\n    return solutions[alice]\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    num_students = 10\n    handshakes = num_students * (num_students - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Find the least number of packs needed to meet or exceed 1000 markers\n    packs_needed = -(-1000 // pack_lcm)  # Ceiling division\n\n    # Return the total number of packs for each size\n    return packs_needed * 4  # Each size needs to be bought equally\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n    anne_apples = solve(total_apples, anne)\n\n    return anne_apples[0]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    num = 6789\n    choices = [678, 6798, 6879, 9876, 6987]\n    closest = min(choices, key=lambda x: abs(x - num))\n    return closest\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    return abs(0.2 * 90 - 0.9 * 20)\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert recurring decimals to fractions\n    # 0.1(1)9925(7) converts to 1/9 + 0.019925(7)\n    # 0.019925(7) converts to 199257/9999000 (since 7 is recurring)\n    # So 0.1(1)9925(7) is 1/9 + 199257/9999000\n    fraction1 = 1/9 + 199257/9999000\n    \n    # 0.2(3)456(7) converts to 2/9 + 0.004567\n    # 0.004567 converts to 4567/999900\n    fraction1_decimal = fraction1 % 1  # get the decimal part\n    fraction2 = 2/9 + 4567/999900\n    \n    # To find the nth digit, we can subtract one number from the other,\n    # and keep multiplying by 10 and take the floor until we reach a non-zero value\n    diff = abs(fraction1_decimal - fraction2)\n    n = 0\n    while diff > 0:\n        digit = int(diff * 10)\n        if digit == 7:\n            return n\n        diff = diff * 10 - digit\n        n += 1\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    more_fruit_morning = morning_fruit - afternoon_fruit\n\n    return more_fruit_morning\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_used = 10  # in grams\n\n    water_used = (water_ratio * orange_used) / orange_ratio\n\n    return water_used\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]  # scores from the first four judges\n    desired_average = 8.5\n    total_scores_needed = desired_average * 5  # total score needed from 5 judges\n    \n    # calculate the sum of scores from the first four judges\n    current_sum = sum(scores)\n    \n    # find the score needed from the last judge\n    last_judge_score = total_scores_needed - current_sum\n    \n    return last_judge_score\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    total_pages = 550\n    first_day_pages = 30\n    last_day_pages = 70\n\n    # Let the common difference be d, and total days be n\n    # We have two equations based on the information about the arithmetic sequence:\n    # first_day_pages + (n - 1) * d = last_day_pages\n    # (n/2) * (first_day_pages + last_day_pages) = total_pages\n\n    # Using the above two equations, we solve for d:\n    # Substituting the second equation into the first, we get:\n    # (total_pages * 2 / (first_day_pages + last_day_pages)) - 1 * d = last_day_pages - first_day_pages\n    # Simplify this to find d:\n    # d = (last_day_pages - first_day_pages) / ((total_pages * 2 / (first_day_pages + last_day_pages)) - 1)\n\n    d = (last_day_pages - first_day_pages) / ((total_pages * 2 / (first_day_pages + last_day_pages)) - 1)\n    \n    return d\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 10000  # initial amount deposited\n    interest = 816  # interest at the end of the second year\n    rate = symbols('r')  # the annual interest rate in decimal\n\n    # equation for compound interest for 2 years\n    equation = Eq(principal * (1 + rate)**2 - principal, interest)\n\n    # solve for the interest rate\n    interest_rate = solve(equation, rate)[0]\n\n    # convert decimal to percentage\n    return float(interest_rate * 100)\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    johnnys_answer = quotient * remainder + divisor\n\n    # Checking Johnny's error\n    if remainder >= divisor:\n        return f\"Error: The remainder {remainder} cannot be equal or greater than the divisor {divisor}.\"\n    else:\n        correct_answer = quotient * divisor + remainder\n\n    if johnnys_answer != correct_answer:\n        return f\"Johnny's answer is incorrect. The correct answer is {correct_answer}.\"\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h_speed = symbols('h_speed')  # speed of Hannah\n    p_speed = h_speed + 15  # speed of Peter\n    \n    # Ratio of times taken: p_time/h_time = 3/4\n    # Since time = distance/speed, assuming equal distances covered by both:\n    # (1/p_speed) / (1/h_speed) = 3/4 -> p_speed/h_speed = 4/3\n\n    equation = Eq(p_speed / h_speed, 4 / 3)\n\n    hannah_speed = solve(equation, h_speed)\n\n    return hannah_speed[0]\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for prices of mango, pear, and apple\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Create equations based on the given information\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    emily, victor, victoria = symbols('emily victor victoria')\n    \n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n    \n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n    \n    return solutions[victoria]\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    # x represents the original number\n    # The equation based on the problem statement is: 2*x + 7 = 43\n    # We perform the inverse operations to find x:\n    # Subtract 7 from both sides of the equation: 2*x = 43 - 7\n    # Divide both sides of the equation by 2 to solve for x: x = (43 - 7) / 2\n    # Now calculate the value of x:\n    x = (43 - 7) / 2\n    # Return the original number\n    return x\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_mcq = 23\n    time_spent_fill_in_blank = 35\n\n    time_left_for_short_answers = total_time - (time_spent_mcq + time_spent_fill_in_blank)\n\n    return time_left_for_short_answers\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_length = 850  # length of the train in meters\n    train_speed = 30    # speed of the train in meters per second\n    time_to_cross = 45  # time to cross the tunnel in seconds\n    \n    # Total distance covered by the train while crossing the tunnel\n    total_distance_covered = train_speed * time_to_cross\n    \n    # Length of the tunnel is the total distance covered minus the length of the train\n    tunnel_length = total_distance_covered - train_length\n    \n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    \n    # The maximum number of parts created by n circles is given by the recursive formula:\n    # P(n) = P(n-1) + n\n    # where P(n) is the maximum number of parts with n circles and P(0) = 1.\n    parts_by_circles = 1\n    for i in range(1, circles + 1):\n        parts_by_circles += i\n\n    # A line can cut all the parts created by circles at most once, hence adding n parts where n is\n    # the current number of parts.\n    max_parts = parts_by_circles + parts_by_circles\n    \n    return max_parts\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of 50-cent coins Owen had at first\n    # Let y be the number of 1-dollar coins Owen had at first\n    x, y = symbols('x y')\n\n    # According to the problem:\n    # 2/7 of the coins were 50 cents, so 5/7 were 1 dollar\n    equation1 = Eq(x, (2/7) * (x + y))\n\n    # His mother gave him 10 one-dollar coins and 5 dollars worth of fifty-cent coins, which is 10 fifty-cent coins\n    # In the end, he had twice as many one-dollar coins as fifty-cent coins\n    equation2 = Eq(y + 10, 2 * (x + 10))\n\n    # Now we can solve the two equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The question asks for the total number of coins Owen had at first\n    # So we return the sum of x and y (fifty-cent and one-dollar coins originally)\n    return solutions[x] + solutions[y]\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "def solution():\n    total_ways = 3 * 4 * 4  # Total ways without restrictions for 3 people and 4 entrances\n    restricted_ways = 3 * 2 * 4  # Ways where Joe and Mike enter the same entrance for 3 people\n    return total_ways - restricted_ways\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.50\n    spent_money = total_money - saved_money\n    \n    # Let the money spent on transportation be x.\n    # Then money spent on food is 2x.\n    # spent_money = x (transportation) + 2x (food)\n    # spent_money = 3x\n    # x = spent_money / 3\n    # Money spent on food = 2x\n    money_spent_on_food = (spent_money / 3) * 2\n    \n    return money_spent_on_food\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Initial conditions and rates\n    first_3_ton_rate = 4\n    additional_ton_rate = 3\n    service_fee = 4\n    total_money = 109\n\n    # Calculate cost for the first 3 tons\n    cost_first_3_tons = 3 * first_3_ton_rate\n\n    # Remaining money after paying service fee and first 3 tons\n    remaining_money = total_money - service_fee - cost_first_3_tons\n\n    # Calculate how many additional tons she can use\n    additional_tons = remaining_money // additional_ton_rate\n\n    # The total tons of water she can use\n    total_tons = 3 + additional_tons\n\n    return total_tons\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9, 3258 % 9\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = remainder + 1\n    smallest_dividend = quotient * smallest_divisor + remainder\n    return smallest_dividend\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # The number of oranges is 32 more than the number of apples\n    equation1 = Eq(oranges, apples + 32)\n\n    # After giving away 1/3 of his apples and 1/2 of his oranges, he had 100 fruits left\n    equation2 = Eq(apples - apples / 3 + oranges - oranges / 2, 100)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    # Total number of fruits at first\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia = 160\n    carl, bala, daniel = symbols('carl bala daniel')\n    \n    equation1 = Eq(bala, 320 + daniel)\n    equation2 = Eq(bala, amelia/2 + carl/2 + daniel/2)\n    equation3 = Eq(carl, 3*amelia/4 + 3*bala/4 + 3*daniel/4)\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (carl, bala, daniel))\n    return solutions[daniel]\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9\n    girls = 3\n    candy_per_girl = total_candy // girls\n    return candy_per_girl\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let q be the rate at which the quick gardener works (lawns per hour)\n    # Let l be the rate at which the lazy gardener works (lawns per hour)\n    q, l = symbols('q l')\n    \n    # The quick gardener mows 1 lawn in 12 hours, so their rate is 1/12\n    # Together, both gardeners mow 1 lawn in 8 hours, so their combined rate is 1/8\n    # The equations representing the work done are therefore:\n    # q + l = 1/8 (the combined rate of both gardeners) and\n    # q = 1/12 (the rate of the quick gardener)\n    \n    equation1 = Eq(q + l, 1/8)\n    equation2 = Eq(q, 1/12)\n\n    # Solve the equations for l (the rate of the lazy gardener)\n    solutions = solve((equation1, equation2), (q, l))\n\n    # The time taken by the lazy gardener alone to mow the lawn is the inverse of their rate\n    time_lazy_gardener = 1 / solutions[l]\n\n    return time_lazy_gardener\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    noah, pete, howard = symbols('noah pete howard')\n    \n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n    \n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n    \n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    belinda_gave = 7\n    matthew_tomatoes = belinda_tomatoes - belinda_gave\n    belinda_after = belinda_tomatoes - belinda_gave\n    matthew_initial = matthew_tomatoes - belinda_after\n    return matthew_initial\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(182 - 5*x - 3*x, 5*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    \n    return ans\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    ans = 2  # Start with the first term already added (1 * 2)\n    product = 1\n    for i in range(3, 15, 2):  # Start from 3, end at 13, increment by 2\n        product *= i\n        ans += product\n\n    # Add the last term which is the product of odds up till 13 and then multiplied by 14\n    ans += product * 14\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    total_capacity = 990\n    half_capacity = total_capacity / 2\n    cup_capacity = half_capacity / 3\n    \n    return cup_capacity\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import lcm\n\n    green_interval = 5  # Green line trains set out every 5 minutes\n    red_interval = 6    # Red line trains set out every 6 minutes\n\n    # Find the least common multiple (LCM) of the two intervals\n    interval_lcm = lcm(green_interval, red_interval)\n\n    # Calculate the time when both trains set out together again\n    hours = 5 + interval_lcm // 60\n    minutes = interval_lcm % 60\n\n    return (hours, minutes)\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    blue_car_position_from_front = 8\n\n    blue_car_position_from_back = total_cars - blue_car_position_from_front + 1\n\n    return blue_car_position_from_back\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # The distance between the first tree and the 101th tree\n    distance = (101 - 1) * 3 # Since there's a tree every 3 meters\n\n    # Time taken to walk that distance\n    time_minutes = 3\n\n    # Calculate the walking speed (meters per minute)\n    speed = distance / time_minutes\n\n    # Total distance to school\n    total_distance_to_school = 4000\n\n    # Calculate the time it takes to reach school at the determined speed\n    time_to_school_minutes = total_distance_to_school / speed\n\n    return time_to_school_minutes\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    nearest_thousand = round(number, -3)\n    return nearest_thousand\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    price_per_gram = 80 / 100\n    cost_for_250_grams = price_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # Calculate the sum of squares in the form of 4k for k = 1 to 31 (since 124 / 4 = 31)\n    n = 31  # Upper limit of the sequence\n    sum_of_squares = sum((4*k)**2 for k in range(1, n + 1))\n    return sum_of_squares\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the price of apples and bananas\n    price_apple, price_banana = symbols('price_apple price_banana')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(3 * price_apple + 2 * price_banana, 1.25)\n    equation2 = Eq(price_apple + price_banana, 0.48)\n\n    # Solve the equations to find the price of apples and bananas\n    solutions = solve((equation1, equation2), (price_apple, price_banana))\n\n    # Calculate the cost to buy 5 bananas using the price found\n    cost_5_bananas = 5 * solutions[price_banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    ans = sum([(6 + 5 * i) ** 2 for i in range(10)])\n    return ans\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen the fisher traded 5 fish for 2 rabbits from Oscar the hunter.\n    # Then, Oscar traded 4 rabbits for 7 packs of wheat from Dennis the farmer.\n    # We need to find how many fish should Owen give Dennis for 14 packs of wheat.\n    \n    # The number of fish per rabbit\n    fish_per_rabbit = 5 / 2\n\n    # The number of rabbits per pack of wheat\n    rabbits_per_pack_wheat = 4 / 7\n\n    # Combined ratio fish per pack of wheat\n    fish_per_pack_wheat = fish_per_rabbit / rabbits_per_pack_wheat\n\n    # Number of fish for 14 pack of wheat\n    fish_for_14_packs = fish_per_pack_wheat * 14\n\n    return fish_for_14_packs\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for entrances in product(range(3), repeat=4):\n        if len(set(entrances)) == 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    for correct_answers in range(7):  # There cannot be more than 6 correct answers, iterate from 0..6\n        wrong_answers = 6 - correct_answers  # Total answers are 6, so wrong ones are 6 - correct ones\n        score = correct_answers * 5 - wrong_answers * 2  # Calculate score based on correct and wrong answers\n        if score == 23:  # Check if the score matches Valerie's score\n            return correct_answers  # Return the number of correct answers\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin_age = symbols('justin_age')\n    equation = Eq(justin_age + 18, 4 * (justin_age - 6))\n    solutions = solve(equation, justin_age)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    minutes_per_drawing = 124\n    number_of_drawings = 111\n    total_time = minutes_per_drawing * number_of_drawings\n    return total_time\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the initial number of cows and g be the initial number of goats.\n    c, g = symbols('c g')\n\n    # We have that 65% of the initial animals were cows, so we can express the cows as 65% of the total:\n    # Equation (1): c = 0.65 * (c + g)\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # When 240 animals were added, the percentage of cows became 85%\n    # Equation (2): c + 240 = 0.85 * (c + g + 240)\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # It was also mentioned that the number of goats doubled after adding more animals.\n    # Equation (3): g * 2 = g + 240\n    equation3 = Eq(2 * g, g + 240)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    # Return the initial number of goats.\n    return solutions[g]\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    return 378 - 196\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    for num in range(1, 100):\n        if num % 4 == 1 and num % 5 == 2 and num % 6 == 3:\n            return num\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    # Initializing the smallest number of cookies\n    cookies = 0\n    \n    # Use a while loop to find the smallest number of cookies\n    while True:\n        # Increment the number of cookies by 1 each iteration\n        cookies += 1\n        \n        # Check if the conditions are satisfied:\n        # 1. cookies divided by 8 leaves no remainder\n        # 2. cookies divided by 9 leaves a remainder of 1\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            break\n            \n    return cookies\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n\n    # Since the cost is above $50, the discount is $15\n    discount = 15\n\n    # Calculate the final amount to pay\n    final_cost = total_cost - discount\n\n    return final_cost\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    return 828 + 191\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    num_books_per_case = 10 // 2  # Finding the number of books in one case\n    total_books_in_six_cases = num_books_per_case * 6  # Finding the total number of books in six cases\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    # Number of ways to arrange 2 boys at the ends is 2! (permutation of 2 boys)\n    boys_permutations = 2\n\n    # Number of ways to arrange 3 girls in the middle is 3! (permutation of 3 girls)\n    girls_permutations = 6\n\n    # Total arrangements is the product of the two permutations (Law of Multiplication)\n    total_arrangements = boys_permutations * girls_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]  # ages of Jason, Adam and Tom\n    ages.sort()  # sort the ages in ascending order\n    \n    # Based on the problem statement:\n    # Tom is the oldest, so his age is a multiple of 3, therefore Tom is 9 years old\n    # Jason is younger than Tom, so Jason is 6 years old\n    # Adam is the one left, so Adam is 10 years old\n    \n    # If we want to determine Adam's age programmatically:\n    for age in ages:\n        if age % 3 == 0 and age != max(ages):  # Tom's age is a multiple of 3 and Tom is not the youngest\n            tom_age = age\n        elif age != max(ages):  # Jason is younger than Tom\n            jason_age = age\n        else:  # Adam is left\n            adam_age = age\n    \n    return adam_age\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # To ensure we get 3 different colored balls in the worst case,\n    # we must consider the scenario where we draw the maximum number of balls\n    # of the same color before getting all different colors.\n    # If we draw 5 red balls and 5 white balls, we still do not have 3 different colored balls.\n    # Therefore, one more ball (a yellow one) must be drawn to ensure 3 different colors are present.\n    \n    max_same_color_balls = 5  # Maximum balls of the same color without getting the third color\n    total_colors = 3          # Red, White, and Yellow\n    ans = (max_same_color_balls * (total_colors - 1)) + 1  # Plus one to get the third color\n    return ans\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    number = \"2023\"\n    n = 1\n    while True:\n        num = int(number * n)\n        if num % 11 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # The smallest amount of apples the five other children can get\n    # are 1, 2, 3, 4, and 5, because they all have to get different numbers.\n    min_apples_others = sum(range(1, 6))  # This is 1+2+3+4+5\n    \n    # Total number of apples\n    total_apples = 28\n    \n    # Avril's maximum number of apples is what's left after the others get the minimum.\n    max_apples_avril = total_apples - min_apples_others\n\n    return max_apples_avril\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's symbolize the shapes\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    # Now let's express the given equations\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    # Solve the system of equations for all the variables\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    # Return the number of triangles that make up a diamond\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for number in range(1, 401):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_used = 5 / 8\n    \n    laptop_cost = total_money * fraction_used\n    \n    return laptop_cost\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    jocye_lori_ratio = 3 / 2  # The ratio of Jocye's speed to Lori's speed\n    jocye_speed = lori_speed * jocye_lori_ratio  # Calculate Jocye's speed\n\n    time_in_seconds = 10  # Time in seconds\n    distance_jocye_runs = jocye_speed * time_in_seconds  # The distance Jocye can run in that time\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    # Original total sum of two numbers before the new number is added\n    original_total = 60 * 2\n    \n    # New total sum of three numbers after the new number is added\n    new_total = 70 * 3\n    \n    # The newly added number is the difference between the new total and the original total\n    newly_added_number = new_total - original_total\n    \n    return newly_added_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Hannah's leaving time from school\n    leave_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    \n    # Bus caught time\n    catch_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n    \n    # Total walking time before the bus\n    walk_before_bus = (catch_bus - leave_school).total_seconds() // 60  # in minutes\n    \n    # Duration of the bus trip\n    bus_trip_duration = timedelta(minutes=18)\n    \n    # Hannah's arrival time at the bus drop off point\n    bus_drop_off = catch_bus + bus_trip_duration\n    \n    # Hannah's getting home time\n    getting_home = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    # Total walking time after the bus\n    walk_after_bus = (getting_home - bus_drop_off).total_seconds() // 60  # in minutes\n    \n    # Total walking time\n    total_walking_time = walk_before_bus + walk_after_bus\n    \n    return total_walking_time\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    difference = second_term - first_term\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    ascending_trophies = sum(range(1, 6))  # Sum of trophies from Q1 to Q5\n    descending_trophies = sum(range(5, 2, -1))  # Sum of trophies from Q6 to Q9 (the pattern goes down from 5 by 1 each time)\n    total_trophies = ascending_trophies + descending_trophies\n    return total_trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Ken and Lisa's initial money\n    ken_initial, lisa_initial = symbols('ken_initial lisa_initial')\n\n    # Equation 1: Ken initially had $15 more than Lisa\n    equation1 = Eq(ken_initial, lisa_initial + 15)\n\n    # Equation 2: Ken had $21 less than Lisa after giving her some money\n    # Let's call the amount Ken gave to Lisa \"x\"\n    x = symbols('x')\n    equation2 = Eq(ken_initial - x, lisa_initial + x - 21)\n\n    # Solving the two equations for lisa_initial, ken_initial and x\n    solutions = solve((equation1, equation2), (ken_initial, lisa_initial, x))\n\n    # Ken gave to Lisa the value of x\n    return solutions[x]\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Define a list to hold the sequence of numbers\n    sequence = []\n    \n    # Loop to add the correct count of each number to the sequence\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1))\n        \n    # Sort the sequence\n    sequence.sort()\n    \n    # Calculate the median\n    n = len(sequence)\n    \n    # If the length of sequence is odd, return the middle element\n    if n % 2 == 1:\n        median = sequence[n // 2]\n    else:\n        # If the length of sequence is even, return the average of the two middle elements\n        median = (sequence[(n - 1) // 2] + sequence[n // 2]) / 2\n    \n    return median\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    total_blue_orange = 18 + 8  # Total number of blue and orange marbles\n    red_marbles = 6\n\n    # To ensure getting 2 red marbles, take all blue and orange marbles out first (worst case)\n    marbles_to_take = total_blue_orange + 2  # +2 to ensure we get 2 red marbles\n\n    return marbles_to_take\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_number = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_number = int(''.join(map(str, sorted(digits))))\n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    count = 0\n    for i in range(1, 31):\n        if i % 2 == 0 and i % 3 == 0:  # For multiples of both 2 and 3, students turn around twice, ending up facing the teacher\n            count += 1\n        elif i % 2 != 0 and i % 3 != 0:  # For non-multiples of 2 and 3, students are facing the teacher\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    total_cookies = 100  # Total number of cookies eaten in five days\n    days = 5  # Number of days\n    increase_per_day = 6  # Increase in the number of cookies eaten each day\n\n    # Since the sequence of cookies eaten each day forms an arithmetic sequence, we can calculate the first term.\n    # Let the first day's cookie count be \"a\". \n    # Then, the sum of the cookies eaten in 5 days is represented by the formula:\n    # S_n = n/2 * (2a + (n - 1)d), where S_n is the sum of n terms, a is the first term, d is the common difference, and n is the number of terms.\n    # In this case, S_5 = 100, n = 5, d = 6.\n    # We rearrange the formula to solve for \"a\":\n    # 100 = 5/2 * (2a + (5 - 1)6)\n    # 100 = 5/2 * (2a + 24)\n    # 100 = 5/2 * (2a + 24)\n    # 40 = 2a + 24\n    # 16 = 2a\n    # a = 8\n    # So, the boy ate 8 cookies on the first day.\n\n    # Calculate the first term (the number of cookies eaten on the first day) using arithmetic sum formula\n    a = (total_cookies * 2 / days - increase_per_day * (days - 1)) / 2\n    return int(a)\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    result = 221 * 4\n    return result\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    # First term a1 of the arithmetic sequence\n    a1 = 10\n    # Difference of the arithmetic sequence\n    d = (25 - 10) // (4 - 1)  # difference between terms\n\n    # Total number of rows\n    n = 25\n\n    # Using the formula for the sum of an arithmetic series: Sn = n/2 * (2a1 + (n-1) * d)\n    Sn = n / 2 * (2 * a1 + (n - 1) * d)\n    \n    return int(Sn)\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # There are two strategies: stick with gate 1, or switch to gate 2.\n\n    # If you stick with gate 1, your probability of winning is 1/3 since\n    # there was no additional information that would change the initial probabilities.\n\n    # If you switch to gate 2, your probability of winning is 2/3. This is because\n    # when the host opens a gate with a goat (which he always can do), and you initially\n    # picked a goat (which happens 2/3 of the time), switching will now win you the car.\n\n    # So, you should switch to gate 2 because it gives you a higher probability of winning the car.\n    # We return the better choice, which is gate 2 ('2').\n    return '2'\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    number = 2\n    while not (number % 4 == 2 and number % 3 == 2 and number % 7 == 1):\n        number += 1\n    return number\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of 2.\n    # First term (a1) is 1, last term (an) is 49, common difference (d) is 2.\n    # The n-th term of an arithmetic sequence can be found with an = a1 + (n-1)d.\n    # Sum of n terms in an arithmetic sequence can be found with S_n = n/2 * (a1 + an).\n    \n    first_term = 1\n    last_term = 49\n    common_difference = 2\n    \n    # Calculate number of terms (n).\n    # (last_term - first_term) / common_difference + 1 = n\n    n = (last_term - first_term) / common_difference + 1\n    \n    # Calculate the sum of the arithmetic sequence.\n    sum_of_sequence = n / 2 * (first_term + last_term)\n    \n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Since 7 pokemon trainers can catch 7 pokemon in 7 minutes,\n    # it implies that these trainers can catch pokemon at the same rate.\n    # If it takes the same number of trainers 49 minutes\n    # to catch 49 pokemon, the rate of catching pokemon does not change.\n    # Therefore, the number of trainers needed is the same.\n    return 7\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    # We need to choose 1 book for each of 3 students out of 7 books\n\n    ways_to_choose_books = factorial(7) // (factorial(1)**3 * factorial(7-3))\n\n    return ways_to_choose_books\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    students = 13  # Tommy and his 12 friends\n    minutes_per_student = 142\n\n    total_time = students * minutes_per_student\n\n    return total_time\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Declaration of the symbol for the original sum of money that David had\n    original_sum = symbols('original_sum')\n\n    # Equation representing the scenario:\n    # original_sum - 75 (money spent on CDs) - 1/4 * (original_sum - 75) (money spent on batteries) = 1/3 * original_sum\n    equation = Eq(original_sum - 75 - (original_sum - 75) / 4, original_sum / 3)\n\n    # Solve the equation for the original sum\n    solution = solve(equation, original_sum)\n\n    # Return the value of the original sum\n    return solution[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_answers = 1500\n    \n    percentage_incorrect = (incorrect_answers / total_people) * 100\n    \n    return percentage_incorrect\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # Since the given number is repetitive and it's a concatenation of the digit \"928\" repeatedly,\n    # we can find the remainder of 928 divided by 9 which will be the same for each group of \"928\". \n\n    # The remainder when 928 is divided by 9\n    remainder_of_928 = 928 % 9\n\n    # Since the original number consists of \"928\" repeated 33 times to form a 99-digit number,\n    # the remainder of the entire number would be the same as the remainder of one \"928\" group.\n    remainder_of_number = remainder_of_928\n\n    return remainder_of_number\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown value \"oplus\"\n    oplus = symbols('oplus')\n\n    # Create the equation based on the given mathematical expression\n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n\n    # Solve for \"oplus\"\n    solution = solve(equation, oplus)\n\n    # Return the value of \"oplus\"\n    return solution[0]\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest_num = min(numbers, key=lambda num: abs(num - target))\n    return closest_num\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three unknown numbers\n    x1, x2, x3 = symbols('x1 x2 x3')\n\n    # Sort numbers so x1 <= x2 <= x3\n    # Given: x1 + x2 + x3 = 56\n    equation1 = Eq(x1 + x2 + x3, 56)\n\n    # Given: average of smallest two numbers (x1 and x2) is 14\n    # (x1 + x2) / 2 = 14 => x1 + x2 = 28\n    equation2 = Eq((x1 + x2) / 2, 14)\n\n    # Given: average of largest two numbers (x2 and x3) is 22\n    # (x2 + x3) / 2 = 22 => x2 + x3 = 44\n    equation3 = Eq((x2 + x3) / 2, 22)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (x1, x2, x3))\n\n    # The median is the second number in the sorted order\n    median = solutions[x2]\n\n    return median\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = ['0', '2', '3', '7']\n    # Since we want the smallest 4-digit even number, \n    # we start with the second smallest even digit in the thousands place ('2' in this case),\n    # then arrange the remaining digits in ascending order, and place the smallest even digit ('0') in the end.\n    smallest_even_number = '2' + ''.join(sorted(digits[1:] + [digits[0]]))[:-1] + '0'\n    return int(smallest_even_number)\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_volume = 10  # in litres\n    container_volume = 2  # in litres\n    num_containers = total_volume // container_volume   \n    return num_containers\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(0, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for the ages of Jackson and Chloe\n    jackson_age, chloe_age = symbols('jackson_age chloe_age')\n\n    # create equations based on the problem statement\n    equation1 = Eq(jackson_age + chloe_age, 54)\n    equation2 = Eq(jackson_age + 3, 5 * (chloe_age + 3))\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (jackson_age, chloe_age))\n\n    # Jackson's age 3 years later\n    jackson_age_3yrs_later = solutions[jackson_age] + 3\n\n    return jackson_age_3yrs_later\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Eliot's transaction\n    eliot_price_per_bar = 12  # in pence\n    eliot_payment = 300       # in pence (3 pounds)\n    \n    # Maya's transaction\n    maya_price_per_bar = 17  # in pence\n    maya_payment = 400       # in pence (4 pounds)\n    \n    # Store the number of bars for each person\n    number_of_bars = 0\n    \n    # Assume they bought at least one bar each and not more than what they can pay for\n    for bars in range(1, min(eliot_payment//eliot_price_per_bar, maya_payment//maya_price_per_bar) + 1):\n        eliot_change = eliot_payment - (bars * eliot_price_per_bar)\n        maya_change = maya_payment - (bars * maya_price_per_bar)\n        if eliot_change == maya_change:  # Change received should be the same\n            number_of_bars = bars\n    \n    return number_of_bars\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    # Equation (1): 66 * 2 + 66 * 3\n    result_eq1 = 66 * 2 + 66 * 3\n\n    # Equation (2): 66 * 5\n    result_eq2 = 66 * 5\n\n    # Check if they are the same\n    ans = result_eq1 == result_eq2\n\n    return ans\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let \"d\" represent the price of one pork dumpling and \"b\" represent the price of one bun\n    d, b = symbols('d b')\n\n    # Create equations based on the given information\n    equation1 = Eq(6 * d + 4 * b, 92)\n    equation2 = Eq(3 * d + 1 * b, 41)\n\n    # Use sympy's solve function to find the value of \"d\" and \"b\"\n    solutions = solve((equation1, equation2), (d, b))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare = 1.2\n    total_charge = 8.5\n    base_distance = 1.8\n\n    additional_charge = total_charge - base_fare\n    additional_distance = additional_charge / additional_fare\n    total_distance = base_distance + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yellow, red, blue = symbols('yellow red blue')\n\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(yellow + red + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (yellow, red, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the number of students in the class\n    x = symbols('x')\n\n    # Since at least one student gets at least 3 apples, subtract 3 apples from the total\n    # The remaining apples (80 - 3 = 77) can be distributed in such a way that each student gets at least 1 apple\n\n    # Create the equation based on the Pigeonhole Principle that ensures every student gets at least one apple\n    # Every student gets at least 1 apple out of the remaining 77, so the number of students is <= 77\n    equation = Eq(x - 1, 77)\n\n    # Solve for x, which represents the number of students in the class\n    class_size = solve(equation, x)\n\n    return class_size[0]\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received_bars = 8\n    original_bars = received_bars * 2\n    return original_bars\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n\n    big_cars_capacity = 4\n    small_cars_capacity = 2\n\n    number_of_big_cars = boys_in_big_cars / big_cars_capacity\n    number_of_small_cars = girls_in_small_cars / small_cars_capacity\n\n    total_cars = number_of_big_cars + number_of_small_cars\n    \n    return int(total_cars)\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    mother_age = 36\n    father_age = 42\n    julia_age = 7\n    total_years = 0\n\n    while mother_age + father_age + julia_age + 3 * total_years < 100:\n        total_years += 1\n\n    return total_years\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces = 56\n    pounds_per_ounce = 1/16\n    kg_per_pound = 1/2.2\n\n    pounds = ounces * pounds_per_ounce\n    kilograms = pounds * kg_per_pound\n\n    return round(kilograms, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = x + 0.25 * x - 200\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Calculate the sum of the first sequence: 5 to 80\n    first_sum = sum(range(5, 81))\n    \n    # Calculate the sum of the second sequence: 79 to 5\n    second_sum = sum(range(5, 80))\n    \n    # The final answer is the sum of both sequences\n    ans = first_sum + second_sum\n    \n    return ans\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (3 + 7 * i) / (10 + 7 * i) for i in range(0, int((2019-3)/7)))\n    return ans\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    # Total number of people\n    total_people = 5\n    # There are 2 conditions: A on the left of B, and B on the left of C.\n    # Since there are no restrictions on D and E, we can consider them later.\n    # We can consider A, B, and C as a single unit for now, so there are\n    # effectively 3 units to arrange: (ABC), D, and E.\n    # These 3 units can be arranged in 3! ways.\n    unit_arrangements = factorial(3)\n\n    # Within the (ABC) unit, A can be anywhere to the left of B, and B can be anywhere to the \n    # left of C. This gives us 2! ways of positioning A, B, and C within the (ABC) unit.\n    abc_arrangements = factorial(2)\n\n    # The total number of ways to arrange them is the product of the two.\n    total_arrangements = unit_arrangements * abc_arrangements\n    return total_arrangements\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "def solution():\n    from itertools import permutations\n\n    max_A = 0\n    for perm in permutations(range(1, 10)):\n        abc = 100*perm[0] + 10*perm[1] + perm[2]\n        bcd = 100*perm[1] + 10*perm[2] + perm[3]\n        cde = 100*perm[2] + 10*perm[3] + perm[4]\n        def_ = 100*perm[3] + 10*perm[4] + perm[5]\n        efg = 100*perm[4] + 10*perm[5] + perm[6]\n        fgh = 100*perm[5] + 10*perm[6] + perm[7]\n        ghi = 100*perm[6] + 10*perm[7] + perm[8]\n        A = abc + bcd + cde + def_ + efg + fgh + ghi\n        max_A = max(max_A, A)\n\n    return max_A\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    # Let original_price be the original price of the bag before any discount\n    # After the first discount of 20%, the price of the bag becomes $32\n    # This means that 80% of the original_price is $32\n    # We can express this relation as: original_price * 0.8 = 32\n    # Solving for original_price, we get:\n    original_price = 32 / 0.8\n    \n    # Henry is given a further discount of $4 on the already discounted price of $32\n    # This means the price Henry pays is $32 - $4\n    henry_price = 32 - 4\n\n    # The total percentage discount given can be calculated as\n    # the difference between the original price and the price Henry pays\n    # divided by the original price, all multiplied by 100 \n    total_discount_percentage = ((original_price - henry_price) / original_price) * 100\n\n    return total_discount_percentage\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '2', '3', '4', '5']\n    all_numbers = sorted([''.join(p) for p in permutations(digits, 6)])\n    return int(all_numbers[504])  # 505th number, zero-indexed\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # The first digit can't be 0, so it can only be 2 or 3 (2 choices)\n    # The second digit can be 0, 2, or 3, but one is used up by the first digit, so 2 choices remain\n    # The third digit can be 0, 2, or 3, but two are used by the first and second digits, so 1 choice remains\n    digits_for_first_place = 2  # 2 or 3\n    digits_for_second_place = 2  # Remaining two choices\n    digits_for_third_place = 1  # Remaining one choice\n\n    # Multiply the number of choices for each place value\n    total_numbers = digits_for_first_place * digits_for_second_place * digits_for_third_place\n    return total_numbers\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    \n    boys = 36 - girls\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n    \n    equation = Eq(girls_score + boys_score, total_score)\n    \n    num_girls = solve(equation, girls)\n    \n    return num_girls[0]\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # The pattern can be observed as the difference between the square\n    # of n and the square of (n-1) for a pattern number n.\n    # For example 11 * 11 - 10 * 10 = 121 - 100 = 21; but since we want two digits (11 - 1 = 10)\n    # We take the digit in the tens place which is 2 * 2 (Since 11 - 1 = 10, and we have two 1's)\n    # Hence, the pattern seems to be that for any two-digit number starting with \"n\" say \"nn\"\n    # the resulting number is n * n.\n    # Applying this pattern to 55:\n    n = 5\n    result = n * n\n\n    return result\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    alice_work_rate = 1 / 40\n    bob_work_rate = 1 / 60\n    total_days = 27\n\n    total_work = total_days * bob_work_rate\n\n    combined_work_rate = alice_work_rate + bob_work_rate\n    days_alice_worked = total_work / combined_work_rate\n    days_alice_took_off = total_days - days_alice_worked\n\n    return round(days_alice_took_off)\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    ans = 546 * 4\n    return ans\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            multiples.append(i)\n    return multiples\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n\n    equation1 = Eq(red / white, 1 / 2)\n    equation2 = Eq(white / black, 3 / 4)\n    equation3 = Eq(red + white + black, 136)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    common_difference = 120 - 105  # Find the common difference between terms\n    first_term = 105 - (6 * common_difference) # Calculate the first term using the 7th term\n    nth_term = first_term + (99 * common_difference) # 100th term = first term + 99 * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # Since there are only 2 colors, to guarantee a pair, one must consider the worst case.\n    # The worst case scenario is getting one of each color before finally getting a matching pair.\n    max_different_socks = 2  # Because there are only 2 colors\n    socks_to_guarantee_pair = max_different_socks + 1  # One more to guarantee the pair\n    \n    return socks_to_guarantee_pair\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_4_years_ago = 24\n    combined_age_now = combined_age_4_years_ago + (3 * 4)  # each dog ages 4 years\n    combined_age_in_2_years = combined_age_now + (3 * 2)  # each dog ages another 2 years\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) / 2\n    return int(n)\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano = 30\n    violin = 41\n    both = 15\n    \n    # Using the Inclusion-Exclusion Principle to find the total unique students\n    total_students = (piano + violin) - both\n    return total_students\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n    \n    # Hour hand moves 0.5 degrees per minute (360 degrees / 12 hours / 60 minutes)\n    # Minute hand moves 6 degrees per minute (360 degrees / 60 minutes)\n    \n    hour_angle = 0.5 * (hour * 60 + minute)\n    minute_angle = 6 * minute\n    \n    angle_difference = abs(hour_angle - minute_angle)\n    \n    # Take the smaller angle of the two possibilities\n    angle_difference = min(angle_difference, 360 - angle_difference)\n    \n    return angle_difference\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters = 4\n    sisters_apples_each = 5\n    apples_left = 20\n\n    total_apples = justin_apples + (sisters * sisters_apples_each) + apples_left\n\n    return total_apples\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    # Let x be the number of marbles Ryan had initially\n    # Let y be the number of marbles Audrey had initially\n    # According to the problem, the initial ratio is 2:7, so we have:\n    # 2x = y\n    # After transactions, the ratio becomes 1:3, so we have:\n    # (x + 20) / (y - 80) = 1/3\n    # We will solve for y, which is the number of marbles Audrey had initially.\n    \n    # Let's create a function to solve the linear equations\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    # Initial ratio equation\n    equation1 = Eq(2*x, y)\n    \n    # After transaction ratio equation\n    equation2 = Eq((x + 20) / (y - 80), 1 / 3)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_time = 13 + 23 + 8 + 27  # total minutes required for all activities\n    school_time = datetime.strptime('07:45', '%H:%M')  # time to reach school\n    wakeup_time = school_time - timedelta(minutes=total_time)  # latest wakeup time\n    return wakeup_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # total beads in one pattern of black, white, red\n    full_patterns, remaining_beads = divmod(total_beads, pattern_length)\n    black_beads_in_full_pattern = 3  # black beads in one full pattern\n    black_beads = full_patterns * black_beads_in_full_pattern\n\n    if remaining_beads > 0:  # Check if there are any beads left that are black\n        black_beads += min(remaining_beads, 3)  # Add the remaining black beads if any\n\n    return black_beads\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    # Since the pattern is repetitive every 4 numbers, calculate the sum of each 4 numbers\n    # until we get to 4. Also consider the numbers after the last full sequence to 1.\n    total = 0\n    for i in range(60, 4, -4):\n        total += (i + (i - 1) - (i - 2) - (i - 3))\n    # Compute the sum for the last 4 numbers (4,3,2,1)\n    total += (4 + 3 - 2 - 1)\n    return total\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    return 4.2 + 7.8 + 7.5 - 2.5\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    total_heads = 51\n    total_legs = 160\n    \n    # Hypothesis: All the animals are chickens with 2 legs. Find the excessive legs.\n    excess_legs = total_legs - 2 * total_heads\n    \n    # Since there is no difference between the number of chickens and ducks,\n    # cows' legs are quadruple than a chicken's so each cow contributes 2 excess legs.\n    cows = excess_legs // 2\n    \n    # Remaining heads are chickens and ducks, which count is the same.\n    chickens = (total_heads - cows) // 2\n    \n    return chickens\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drink = total_juice / 5\n    abigail_drink = 200\n    anna_drink = 120\n\n    juice_left = total_juice - (rebekah_drink + abigail_drink + anna_drink)\n\n    return juice_left\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    # possible coins that Freda has\n    coins = [1, 2, 5]\n\n    # set to store the unique totals that Freda can make using exactly 3 coins\n    unique_totals = set()\n\n    # Iterate through all combinations of 3 coins\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                # Add the total of this combination of coins to the set\n                # Sets will only store unique values, so duplicates are automatically filtered out\n                unique_totals.add(i + j + k)\n\n    # The answer is the number of unique totals that can be made\n    ans = len(unique_totals)\n    return ans\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n\n    ans = (percentage / 100) * quantity\n\n    return ans\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "def solution():\n    total_entrances = 4\n    people = 3  # Joe, Mike, Tina\n\n    # Joe can choose any of the 4 entrances\n    joe_choices = total_entrances\n\n    # Mike can choose any of the remaining 3 entrances\n    mike_choices = total_entrances - 1\n\n    # Tina can choose any of the remaining 2 or 3 entrances,\n    # this depends on whether she picks the entrance before Joe or Mike\n    tina_choices = (total_entrances - 2) + (total_entrances - 1)\n\n    # The order in which they enter is uncertain, so we must multiply\n    # by the number of permutations of 3 people\n    permutations = math.factorial(people)\n\n    # Multiplying the choices by the number of permutations\n    num_ways = joe_choices * mike_choices * tina_choices * permutations\n\n    return num_ways\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance = 3000  # nautical miles\n    total_time_days = 13 + 22 / 24  # days\n    total_time_hours = total_time_days * 24  # hours\n\n    average_speed = total_distance / total_time_hours\n\n    return round(average_speed)\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    total_volume = 2 + 3\n    total_fruit_juice = 2 * 0.40 + 3 * 0.70\n    concentration = (total_fruit_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    ans = 2136 // 8\n    return ans\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    stamps_after_giving_to_sister = initial_stamps - 339\n    stamps_after_buying = stamps_after_giving_to_sister + 455\n    final_stamps = stamps_after_buying - 777\n    \n    return final_stamps\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    # Finding the smallest multiple of 11 greater than or equal to 50\n    smallest_multiple = 11 * ((50 + 10) // 11)\n    # Finding the largest multiple of 11 less than or equal to 150\n    largest_multiple = 11 * (150 // 11)\n    # Counting the number of multiples by dividing the range by 11\n    num_multiples = (largest_multiple - smallest_multiple) // 11 + 1\n    return num_multiples\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers_to_sum = [17, 21, 36, 23, 4, 49, 10]\n    total_sum = sum(numbers_to_sum)\n    return total_sum\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_Bella = 15\n    people_behind_Albert = 12\n    Albert_and_Bella = 2\n    \n    total_people = people_in_front_of_Bella + people_behind_Albert + Albert_and_Bella\n    \n    return total_people\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    # List of prime numbers between 20 and 30\n    prime_numbers = [23, 29]\n    \n    # Selecting one of the prime numbers from the list\n    ans = prime_numbers[0]\n    \n    return ans\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'w' be the initial number of women, 'm' be the initial number of men.\n    w, m = symbols('w m')\n    \n    # After 36 women leave, the number of women becomes w - 36.\n    # At this time, the number of women is 3/5 of the number of men: w - 36 = 3/5 * m\n    \n    # When 48 men leave, the number of men becomes m - 48.\n    # At this time, the number of women is equal to the number of remaining men: w - 36 = m - 48\n    \n    # Set up the equations based on the above conditions.\n    equation1 = Eq(w - 36, 3/5 * m)\n    equation2 = Eq(w - 36, m - 48)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (w, m))\n    \n    # Calculate the total number of people at the bus stop initially.\n    total_people = solutions[w] + solutions[m]\n\n    return total_people\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    ways = []\n    count = 0\n    for x in range(1, 14):\n        for y in range(x + 1, 14):  # y must be greater than x\n            for z in range(y + 1, 14):  # z must be greater than y\n                if x + y + z == 14:\n                    ways.append((x, y, z))\n                    count += 1\n    return count, ways\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    total_height_range = 132 - 124 + 1\n    min_class_size_for_same_height = total_height_range * 3 + 1\n    return min_class_size_for_same_height\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    # Defining variables for Fatouma's current age and creating an equation\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the current age\n    x = symbols('x')\n\n    # According to the problem, in two years, Fatouma's age will be twice what it was five years ago\n    # x + 2 = 2 * (x - 5)\n    equation = Eq(x + 2, 2 * (x - 5))\n\n    # Solving the equation\n    age = solve(equation, x)\n    \n    # Return the solution\n    return age[0]\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50\n    change = 5 - total_cost\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n\n    return difference\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # Winning positions are those where the number of oranges is 4n+1\n    # where n is a non-negative integer.\n    # So Fred needs to leave a pile of 12 oranges (3*4) for George,\n    # which means Fred should take 3 oranges in the first turn to win the game.\n    \n    oranges = 15\n    target = 12  # 4 * 3 (the winning position for Fred)\n    fred_take = oranges - target\n    \n    return fred_take\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cook_duration\n    return start_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n    all_three = 5\n\n    # Using the Inclusion-Exclusion Principle for Three Sets\n    total_students = (go + checkers + chess\n                      - go_checkers - go_chess - checkers_chess\n                      + all_three)\n    \n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # let x be the number of years later that their sum of ages will be 48\n    # Current age of Oliver is 20\n    # Current age of Lin is 26\n    # so, (20 + x) + (26 + x) = 48\n    # 46 + 2x = 48\n    # 2x = 48 - 46\n    # 2x = 2\n    # x = 2 / 2\n    # x = 1\n    # so in 1 year, their sum of ages will be 48\n\n    return 1\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    total_cost = num_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_in_m = 100\n    cm_value = 736\n    ans = cm_value / cm_in_m\n    return ans\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    # Total number of gaps between poles is one less than the total number of poles\n    num_gaps = 40 - 1\n\n    # Distance between each pole\n    distance_between_poles = 3\n    \n    # Total distance is the number of gaps multiplied by the distance between each pole\n    total_distance = num_gaps * distance_between_poles\n\n    return total_distance\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    total = 0\n    for i in range(64, 45, -2):\n        if i % 4 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    p = 1\n    # Find the cube root of 245 and examine the prime factors that are not in multiples of 3\n    # to determine the smallest value of p making 245p a perfect cube.\n    cube_root = 245**(1/3)\n    # Since 245 is 5 * 7^2, the prime factors for a cube are incomplete, \n    # we multiply by 5^2 * 7 to make it a cube (5^3 * 7^3).\n    p *= 5**2 * 7\n    return p\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    fraction_last_year = 1 / 4\n\n    min_last_year_production = this_year_production * fraction_last_year + 1\n\n    return min_last_year_production\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    # The fractions are equivalent, so we can cross-multiply to find the unknown.\n    # 5 / 15 = 8 / box\n    # Cross-multiply: 5 * box = 15 * 8\n    box = (15 * 8) / 5\n    return int(box)\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each digit\n    E, S, A, M, O = symbols('E S A M O', integer=True)\n\n    # Each letter represents a different digit, so they must be within the range [0, 9]\n    # Additionally, S and E are most certainly not zero, as they're the most significant digits in ESSE and 2018, respectively.\n    digits = set(range(10))\n    \n    # Set the equation according to the problem statement\n    equation = Eq(1000*E + 110*S + 1*E + 2018, 10000*S + 1000*A + 100*M + 10*S + O)\n\n    # Possible solutions for E, S, A, M, O given their constraints\n    solutions = solve((equation,), (E, S, A, M, O))\n\n    # Filter out solutions where the digits are not unique\n    for sol in solutions:\n        if len(set(sol)) == len(sol) and all(d in digits for d in sol):\n            # Calculate S+A+S+M+O\n            ans = sum(sol) - sol[E]  # Excluding 'E' as it is not requested in the final addition\n            return ans\n\n# Call the solution function to get the answer\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 2  # one sick leave and one personal leave\n    present_students = total_students - absent_students\n\n    attendance_rate = (present_students / total_students) * 100\n\n    return attendance_rate\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    sum_of_series = 0\n    for i in range(2, 2018):\n        for j in range(1, i):\n            sum_of_series += j / i\n    return sum_of_series\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    percentage = 30\n    total_amount = 270\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges', positive=True, integer=True)\n    \n    initial_ratio = Eq(3 / 8, apples / oranges)\n    new_ratio = Eq(1 / 3, (apples - 1) / oranges)\n    \n    solutions = solve((initial_ratio, new_ratio), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest = min(numbers, key=lambda x: abs(x - 100))\n\n    return closest\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Since Tim stands 4th from the front and 3rd from the back, there must be 3 - 1 = 2 people in front of him and\n    # 4 - 1 = 3 people behind him, so the total vertical (rows) count is 2 + 1 + 3 = 6\n    rows = 2 + 3\n\n    # Since Tim stands 1st from the left and 4th from the right, there must be 1 - 1 = 0 people to his left and\n    # 4 - 1 = 3 people to his right, so the total horizontal (columns) count is 0 + 1 + 3 = 4\n    columns = 1 + 3\n\n    # Total number of band members is rows * columns\n    total_members = rows * columns\n\n    return total_members\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    sum_of_first_14 = sum(range(1, 15))\n    new_sum = sum_of_first_14 + 2019\n    for x in range(1, new_sum // 8):\n        if sum(range(x, x + 8)) == new_sum:\n            return x\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    daily_savings = 2.40\n    total_savings_goal = 150.00\n    days_in_week = 7\n\n    total_days = total_savings_goal / daily_savings\n    total_weeks = total_days / days_in_week\n\n    return int(-(-total_weeks // 1))  # Ceiling division to get least number of weeks (because you can't have a fraction of a week)\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    result = (6 + 1 / 2) / (1 / 4)\n    return result\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    sum_sequence = (first_term + last_term) * num_terms // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the weight of 1 rabbit as r and the weight of 1 chicken as c.\n    r, c = symbols('r c')\n\n    # According to the problem statement, we have the following equations:\n    # 2 rabbits = 6 chickens => 2*r = 6*c\n    # 3 kangaroos = 4 rabbits => 3*k = 4*r (but we don't know k yet, we need to express k in terms of c)\n\n    # Solving the first equation for r in terms of c\n    equation1 = Eq(2 * r, 6 * c)\n    solution_r = solve(equation1, r)[0]\n\n    # Now we express the weight of one kangaroo (k) in terms of rabbits (using r),\n    # and then substitute the value of r we found in terms of chickens (using c)\n    k = 4 * solution_r / 3\n\n    # Solving for the weight of one kangaroo in terms of chickens\n    ans = k.subs(r, solution_r)\n\n    return ans\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    return common_factor * (836 + 162 + 2)\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    # Total letters is 10: STATISTICS\n    total_letters = 10 \n    # Frequency of each letter: S:3, T:3, A:1, I:2, C:1\n    freq_s = 3\n    freq_t = 3\n    freq_a = 1\n    freq_i = 2\n    freq_c = 1\n    \n    # Compute arrangements using the formula for permutations of a multiset:\n    # n!/(n1! * n2! * ... * nk!), where n is total number of items\n    # and n1, n2, ..., nk are the frequencies of the distinct items\n    arrangements = factorial(total_letters) // (factorial(freq_s) * factorial(freq_t) * factorial(freq_a) * factorial(freq_i) * factorial(freq_c))\n    \n    return arrangements\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "from itertools import permutations\n\ndef solution():\n    tasks = [3, 1, 5, 1, 1, 1, 1]  # Duration of each task in days\n    # Generate all possible orders to perform the tasks\n    all_orders = list(permutations(tasks))\n    min_days = float('inf')  # Initialize with a very large number\n\n    for order in all_orders:\n        days = 0\n        wet_grass_day = None\n        dry_wood_day = None\n\n        for i, task in enumerate(order):\n            days += task\n            # Check if the current task is weaving wet grass into rope\n            if task == 1 and order[i-1] == 1:\n                wet_grass_day = i\n            # Check if the current task is drying the wood\n            if task == 5:\n                dry_wood_day = i\n            # Wet grass needs to dry for at least 1 day\n            if wet_grass_day == i - 1:\n                days += 1\n            # Wood needs to be chosen before it's dried, but these two tasks can start simultaneously\n            if dry_wood_day is not None and task == 1 and dry_wood_day == i - 5:\n                days -= 1\n\n        min_days = min(min_days, days)\n\n    return min_days\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount // note_value\n\n    return num_notes\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    ans = 342 + 576\n    return ans\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age_now = 10\n    ashley_age_3_years_ago = ashley_age_now - 3\n    brothers_age_3_years_ago = ashley_age_3_years_ago - 2\n    brothers_age_now = brothers_age_3_years_ago + 3\n    return brothers_age_now\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is the 7th from the front and also in the middle,\n    # which means there are 6 people in front, and there must be 6 people behind her.\n    total_dwarves = 6 + 6  # people in front of and behind Snow White\n    \n    return total_dwarves\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        fraction_part = (2018 + i) / 5 - ((2018 + i) // 5)\n        total += fraction_part\n    return total\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for number in range(1000, 10000):\n        if (number * 6) ** (1/3) % 1 == 0 and (number // 6) ** 0.5 % 1 == 0:\n            return number\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    minimum_participants_in_top_school = 4\n\n    # Using Pigeonhole Principle: \n    # if n pigeons are put into m pigeonholes and if n > m, then at least one pigeonhole must contain more than one pigeon.\n    # In our case, if each school has at most 3 participants\n    # (one less than the minimum to be the school with the most participants),\n    # we can find out how many schools by dividing the total participants by 3 (and rounding up because we can't have partial schools)\n\n    max_schools = (participants + 2) // 3  # Adding 2 for rounding up division\n\n    return max_schools\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    mixed_number1_int = 3\n    mixed_number1_frac = Fraction(5, 9)\n    mixed_number2_int = 6\n    mixed_number2_frac = Fraction(4, 9)\n\n    sum_mixed_numbers_frac = mixed_number1_frac + mixed_number2_frac\n\n    sum_mixed_numbers = mixed_number1_int + mixed_number2_int + sum_mixed_numbers_frac\n\n    return sum_mixed_numbers\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    total_rows = 4 + 3 - 1\n    total_columns = 4 + 7 - 1\n    ans = total_rows * total_columns\n    return ans\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (1 + 1/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    coins = [50, 20, 10, 5]\n\n    for coin in coins:\n        if (total_amount - coin) == 2 * (total_amount - (total_amount - coin)):\n            lost_coin = coin\n            break\n\n    return lost_coin\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    for boats in range(1, 1000):  # Reasonable range for a class going boating\n        if (boats + 1) * 6 == (boats - 1) * 9:\n            students = (boats + 1) * 6\n            return students\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Speed of the faster train\n    speed_fast = 48  # km/h\n    # Speed of the slower train\n    speed_slow = 36  # km/h\n\n    # When the trains pass each other, the distance covered by the faster train\n    # is 70 km more than the distance covered by the slower train.\n    # Let x be the distance covered by the slower train so far.\n    # Then, the faster train covers x + 70 km.\n    \n    # They meet at the same time, so their travel times are the same:\n    # Time = Distance / Speed\n    # Time_fast = Time_slow\n    # (x + 70) / speed_fast = x / speed_slow\n    \n    # Solve for x:\n    x = 70 * speed_slow / (speed_fast - speed_slow)\n\n    # Total distance is the sum of the distances covered by both trains\n    total_distance = x + (x + 70)\n    \n    return total_distance\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the total chocolates and number of friends\n    total_chocolates, num_friends = symbols('total_chocolates num_friends')\n    \n    # Equation 1: If each friend gets 18 chocolates, there will be 41 in excess\n    eq1 = Eq(total_chocolates - num_friends * 18, 41)\n    \n    # Equation 2: If each friend gets 23 chocolates, she will be short of 34\n    eq2 = Eq(total_chocolates - num_friends * 23, -34)\n    \n    # Solve the system of equations for total chocolates and number of friends\n    solutions = solve((eq1, eq2), (total_chocolates, num_friends))\n    \n    # Calculate the remaining chocolates when each friend gets 20 pieces\n    remaining_chocolates = solutions[total_chocolates] - solutions[num_friends] * 20\n    \n    return remaining_chocolates\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    count = 0\n    \n    for i in digits:\n        for j in digits:\n            if i != '0' and i != j:  # ensure two-digit and different digits\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amount of money Rasidah and Chai Seng have\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Equation representing that Rasidah had $48 less than Chai Seng\n    eq1 = Eq(rasidah, chai_seng - 48)\n    \n    # After spending, Chai Seng had 1/2 as much money left as Rasidah\n    # Chai Seng spent 6/7 of his money which means he has 1/7 left\n    # Rasidah spent 3/5 of her money which means she has 2/5 left\n    # Twice of what Chai Seng left (1/7 * chai_seng) should be equal to what Rasidah left (2/5 * rasidah)\n    eq2 = Eq((1/7) * chai_seng, (1/2) * (2/5) * rasidah)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (rasidah, chai_seng))\n    \n    return solutions[rasidah]\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    return (0.007)**2\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for the digits\n    thousands, hundreds, tens, ones = symbols('thousands hundreds tens ones')\n\n    # Thousands digit cannot be 0 and max value for one digit is 9\n    thousands_range = range(1, 10)\n    hundreds_range = range(0, 10)\n    tens_range = range(0, 10)\n    ones_range = range(0, 10)\n\n    # System of equations based on the problem\n    # The ones digit is the sum of the other three\n    equation1 = Eq(ones, thousands+hundreds+tens)\n    # The tens digit is the sum of the hundreds and thousands digit\n    equation2 = Eq(tens, hundreds+thousands)\n    # The sum of all digits is 16\n    equation3 = Eq(thousands+hundreds+tens+ones, 16)\n    # Digits are in increasing order\n    equation4 = Eq(thousands < hundreds, True)\n    equation5 = Eq(hundreds < tens, True)\n    equation6 = Eq(tens < ones, True)\n\n    # Solve the system of equations\n    for t in thousands_range:\n        for h in hundreds_range:\n            for te in tens_range:\n                for o in ones_range:\n                    # Check if the current combination satisfies the constraints\n                    if solve([equation1.subs({thousands: t, hundreds: h, tens: te, ones: o}),\n                              equation2.subs({thousands: t, hundreds: h, tens: te}),\n                              equation3.subs({thousands: t, hundreds: h, tens: te, ones: o}),\n                              equation4.subs({thousands: t, hundreds: h}),\n                              equation5.subs({hundreds: h, tens: te}),\n                              equation6.subs({tens: te, ones: o})]):\n                        return o\n\n# Call the solution function and store the result in 'ans'\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    # generate all 4-permutations of given digits as strings\n    perms = [''.join(p) for p in permutations('2468', 4)]\n    # convert to integers and filter those that are multiples of 4\n    nums = [int(p) for p in perms if int(p) % 4 == 0]\n    # return the maximum of the filtered numbers\n    return max(nums)\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    total = 63\n    result = 54\n    fraction_of_total = result / total\n    missing_number = fraction_of_total * 7\n    return missing_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance for each part of the trip\n    uphill_distance = 3 * 5  # Speed * Time\n    downhill_distance = 2 * 10  # Speed * Time\n\n    # Calculate the total distance\n    total_distance = uphill_distance + downhill_distance\n\n    # Calculate the total time\n    total_time = 3 + 2  # Time uphill + Time downhill\n\n    # Calculate the average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.1\n    years = 5\n    \n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return round(value_after_years, 1)\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    total_amount = 63\n    fixed_fee = 3\n    initial_rate = 2\n    additional_rate = 1\n    initial_usage = 5\n\n    # Subtract the fixed fee from the total amount\n    amount_after_fixed_fee = total_amount - fixed_fee\n    \n    # Calculate the cost of the initial 5 kWh\n    initial_cost = initial_usage * initial_rate\n    \n    if amount_after_fixed_fee <= initial_cost:\n        # If the remaining amount is less or equal to the cost of the initial usage,\n        # then we can use that many kWh at the initial rate\n        kwh = amount_after_fixed_fee / initial_rate\n    else:\n        # Subtract the cost of the initial 5 kWh,  \n        # then calculate remaining kWh using the additional rate\n        remaining_amount = amount_after_fixed_fee - initial_cost\n        additional_kwh = remaining_amount / additional_rate\n        # Total kWh is the sum of initial and additional kWh\n        kwh = initial_usage + additional_kwh\n        \n    return kwh\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    _, ans = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # A = 10x + y\n    A = 10 * x + y\n    # B = 400x + 4y\n    B = 400 * x + 4 * y\n\n    # B = 10 + 7A\n    equation = Eq(B, 10 + 7 * A)\n\n    solutions = solve((equation,), (x, y))\n\n    # solve the equation for possible (x, y) pairs\n    for sol in solutions:\n        x_val, y_val = sol[x], sol[y]\n        if 0 < x_val < 10 and 0 <= y_val < 10:  # x and y must be digits\n            ans = A.subs({x: x_val, y: y_val})\n            return ans\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    cookies_per_small_box = 600\n    needed_small_boxes = total_cookies / cookies_per_small_box\n\n    return int(needed_small_boxes) if needed_small_boxes.is_integer() else int(needed_small_boxes) + 1\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    # Prime factorization of 4320\n    # 4320 = 2^5 * 3^3 * 5^1\n    # For any integer value of n, (3/2)^n must result in an integer when multiplied by 4320.\n    # To get an integer result, the power of 2 in the denominator must not exceed the power of 2 in 4320's factorization.\n    # Thus, for (3/2)^n to be an integer, n must be less than or equal to 5 (the power of 2 in 4320's prime factorization).\n    # As n could be 0 and any positive integer up to 5, there are 6 integer values for n.\n    return 6\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 + 8)\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    primes = [29, 31, 37, 41, 43]\n    missing_prime = primes[2]\n    return missing_prime\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    total_pass = 43\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n\n    # maximum possible overlap is when the students who pass only two tests are minimized,\n    # i.e., every student counted in math_pass, science_pass, and english_pass also count towards total_pass\n    max_all_three = math_pass + science_pass + english_pass - total_pass\n\n    return max(0, max_all_three)  # to account for the possibility that max_all_three is negative\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    # Amount of pure fruit juice in the first punch\n    juice_first_punch = 20 * 0.35\n    # Amount of pure fruit juice in the second punch\n    juice_second_punch = 30 * 0.60\n    # The total amount of pure fruit juice in both punches\n    total_juice = juice_first_punch + juice_second_punch\n    # The total weight of the mixed punch\n    total_weight = 20 + 30\n    # The concentration of fruit juice in the new mixture (percent)\n    concentration = (total_juice / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a_original = 50  # Warehouse A originally had 50 tons\n    a_shipped_in = 12  # Warehouse A later shipped in 12 tons\n\n    b_shipped_out = 16  # Warehouse B shipped out 16 tons\n\n    # We introduce a variable for the original amount of grain in warehouse B\n    b_original = symbols('b_original')\n\n    # After shipping, Warehouse A has 50 + 12 tons, and Warehouse B has b_original - 16 tons\n    a_after_shipping = a_original + a_shipped_in\n    b_after_shipping = b_original - b_shipped_out\n\n    # Warehouse A is 2 times that of Warehouse B\n    equation = Eq(a_after_shipping, 2 * b_after_shipping)\n\n    # Solving the equation to find the original amount of grain in warehouse B\n    solution = solve(equation, b_original)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    box_capacity = 6\n    boxes_needed = -(-cookies // box_capacity)  # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = \"COLLEGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    total_ways = factorial(len(word))\n    for count in letter_counts.values():\n        total_ways //= factorial(count)\n\n    return total_ways\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    result = 0.50 * 0.20 * 6000\n    return result\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    for people in range(1, 100):  # assuming a reasonable upper limit for the number of people\n        if (people + 7) % 3 == 0 and (people - 3) % 7 == 0:\n            return people\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Owen trades 3 fishes for 1 rabbit\n    # Oscar trades 2 rabbits for 3 packs of wheat\n    # Therefore, 1 rabbit is equivalent to 3/2 packs of wheat\n    \n    # Calculate the number of fishes for 1 pack of wheat\n    # Since 3 fishes = 1 rabbit and 1 rabbit = 3/2 packs of wheat\n    # We need to find out how many fishes corresponds to 1 pack of wheat\n    fishes_per_rabbit = 3\n    rabbits_per_wheat = 2 / 3\n    fishes_per_wheat = fishes_per_rabbit * rabbits_per_wheat\n\n    return fishes_per_wheat\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):\n        for x2 in range(10):\n            x3 = 9 - x1 - x2\n            if x3 >= 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell // 2\n    lyn = ginnie // 4\n    total_stickers = ginnie + lyn\n    return total_stickers\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    pencils, _ = solve_congruence(*congruences)\n\n    while pencils < 400:\n        pencils += 4 * 5 * 7\n\n    return pencils\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = total_amount * (3 / ratio_sum)\n    return bigger_share\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    return (19 + 3) // 2\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    empty_bottle, juice_mass = symbols('empty_bottle juice_mass')\n    \n    equation1 = Eq(empty_bottle + 5/6 * juice_mass, 4.6*1000)\n    equation2 = Eq(empty_bottle + 2/3 * juice_mass, 4.45*1000)\n    \n    solutions = solve((equation1, equation2), (empty_bottle, juice_mass))\n    \n    return solutions[empty_bottle]\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    # Given numbers to multiply which are out of the multiplication table\n    number1 = 9876\n    number2 = 5432\n    \n    # Multiplying the two numbers\n    ans = number1 * number2\n    \n    return ans\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):   # The hundreds digit: must be an odd number from 1 to 9\n        for j in range(10):     # The tens digit: can be 0 to 9\n            for k in range(10): # The units digit: can be 0 to 9\n                if i + j + k == 5:   # The sum of the digits should be 5\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 0\n    pages = 0\n    \n    # Determine the number of digits in each page range\n    for digit_length in range(1, 12):  # Up to 11 because 10^11 is much larger than needed for 1101 digits\n        number_of_pages = 9 * (10 ** (digit_length - 1))\n        digits_in_this_range = digit_length * number_of_pages\n\n        if total_digits + digits_in_this_range > 1101:\n            # Determine how many full pages can be added with the remaining digits\n            pages += (1101 - total_digits) // digit_length\n            break\n        else:\n            total_digits += digits_in_this_range\n            pages += number_of_pages\n        \n    return pages\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils / 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    total = 0\n    for i in range(1, 21):\n        if i % 2 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = (77.5 * 52 / 100) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    n = 1\n    term = 1\n    while True:\n        term = 1 + n*(n-1)/2*(3-1) # Derived formula for the given sequence\n        if term >= 100: # Check if term is a three-digit number\n            break\n        n += 1\n    return int(prev_term) # Return the previous term (largest two-digit number)\n\n# Start by calculating the sequence until we reach a three-digit number\nn = 1\nprev_term = 1\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # Let a, b, c represent the weights of Adam, Ben, and Carl respectively.\n    # The given equations are:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 93\n\n    # Adding all three equations we get:\n    # 2(a + b + c) = 102 + 97 + 93\n\n    total_twice = 102 + 97 + 93\n    total_weight = total_twice / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    sister_notebooks = andy_notebooks - 38\n\n    return sister_notebooks\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_cost = 23\n    book_cost = 3.40\n    magazine_cost = 1.60\n    \n    max_books = total_cost // book_cost\n    for books in range(int(max_books) + 1):\n        magazines = (total_cost - books * book_cost) / magazine_cost\n        if magazines.is_integer():\n            return int(magazines)\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n    \n    equation1 = Eq(justin, crystal + 64)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n    \n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    pages_total = sum(solutions.values())\n    return pages_total\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Assuming Mr. Lv's age is less than 100\n        base10_age = int(str(age) + \"0\")  # Add \"0\" at the end of Mr. Lv's age\n        base3_age = int(str(age), base=3)\n        if base10_age == base3_age:\n            return age\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = (5/8 + 1/17) * 8 + 9/17\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    # Prime factorization of 7007\n    factors_7007 = [7, 7, 11, 13]\n\n    # Since we need two 2-digit multiples of 7, and 7*7=49 is a factor\n    # We should split the remaining factors 11 and 13 to get two numbers\n    # Those two 2-digit numbers would be 7*11 = 77 and 7*13 = 91\n\n    num1 = 7 * 11\n    num2 = 7 * 13\n\n    # Return their sum\n    return num1 + num2\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses', integer=True)\n\n    # given ratio of orchids to tulips\n    equation1 = Eq(orchids, 3/5 * tulips)\n\n    # after selling\n    sold_orchids = 40/100 * orchids\n    sold_tulips = 1/5 * tulips\n    sold_roses = 25/100 * roses\n\n    # equation for the total number of flowers after selling\n    equation2 = Eq(orchids + tulips + roses - (sold_orchids + sold_tulips + sold_roses), 2644)\n\n    # equation for the total number of flowers before selling\n    equation3 = Eq(orchids + tulips + roses, 3616)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "from math import factorial\n\ndef solution():\n    people = 7\n    seats = 8\n    # Since the table is circular and rotation leads to the same arrangement,\n    # we fix one person and arrange the remaining (people - 1) people\n    # in the remaining (seats - 1) places\n    ans = factorial(people - 1)\n    return ans\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n\n    for p1 in range(2, 55):\n        p2 = 55 - p1\n        if isprime(p1) and isprime(p2):\n            return p1 * p2\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    # Since the pins are identical, we need to count the partition of the number 10 into 3 parts.\n    # This can be done using the stars and bars method (n+k-1 choose k-1), where n is the number of items\n    # to split, and k is the number of piles.\n    from math import comb\n    \n    # To prevent having a pile with 0 pins, we give 1 pin to each pile first.\n    # Therefore, we are splitting 10 - 3 = 7 pins into 3 piles.\n    n = 7\n    k = 3\n    \n    # Using stars and bars method we calculate (n+k-1) choose (k-1)\n    ways = comb(n+k-1, k-1)\n\n    return ways\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one basketball and one volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n    \n    # Create two equations based on the given information\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n    \n    # We need the cost of one volleyball\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 5, 6, 7, 8]\n    for perm in permutations(digits):\n        A, M, C = perm[0], perm[1], perm[2]\n        number = 2000000 + A * 100000 + M * 1000 + C * 10 + 19\n        if number % 9 == 0 and len(set(str(number))) == 7:\n            return A + M + C\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Given:\n    # 3 chocolate cakes = 2 cheesecakes\n    # 3 cheesecakes = 5 cookies\n    # 1 cookie = $9\n    # We need to find the cost of 1 chocolate cake.\n\n    # We can find the cost of 3 cheesecakes (which is equal to the cost of 5 cookies).\n    cost_of_5_cookies = 5 * 9  # As 1 cookie costs $9\n\n    # Now find the cost of 1 cheesecake.\n    cost_of_1_cheesecake = cost_of_5_cookies / 3\n\n    # Use the ratio to find the cost of 3 chocolate cakes.\n    cost_of_3_chocolate_cakes = cost_of_1_cheesecake * 2\n\n    # Finally, the cost of 1 chocolate cake.\n    cost_of_1_chocolate_cake = cost_of_3_chocolate_cakes / 3\n\n    return cost_of_1_chocolate_cake\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_per_day = 1/4 / 3\n    total_days = 1 / part_per_day\n    return total_days\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    return 42 // (2 * 7)\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    # Defining variables\n    # Let x be the number of years passed since Melissa was 8\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    melissa_age_now = 8 + x\n    mother_age_now = 32 + x\n\n    # Forming the equation based on the problem\n    equation = Eq(mother_age_now, 3 * melissa_age_now)\n\n    # Solving the equation for x\n    x_solution = solve(equation, x)\n\n    # Calculating Melissa's current age\n    melissa_current_age = melissa_age_now.subs(x, x_solution[0])\n    \n    return melissa_current_age\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the amount of candy Mike and Valeria have now\n    mike_candy, valeria_candy = symbols('mike_candy valeria_candy')\n    \n    # Equation 1 represents the total candy\n    equation1 = Eq(mike_candy + valeria_candy, 36)\n    \n    # Equation 2 represents the difference after eating the same amount of candy\n    equation2 = Eq(mike_candy - valeria_candy, 6 - 22)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mike_candy, valeria_candy))\n    \n    return solutions[valeria_candy]\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    recurring_block_sum = sum(int(digit) for digit in \"857142\")\n    block_size = 6\n    number_of_full_blocks = 58 // block_size\n    remaining_digits = 58 % block_size\n\n    sum_full_blocks = number_of_full_blocks * recurring_block_sum\n    sum_remaining_digits = sum(int(\"857142\"[i]) for i in range(remaining_digits))\n\n    return sum_full_blocks + sum_remaining_digits\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from decimal import Decimal, getcontext\n\n    getcontext().prec = 10  # Setting precision for Decimal operations\n\n    # Convert the recurring decimal into a fraction\n    recurring_decimal = Decimal('4.7') + (Decimal(3) / (Decimal(9) / 10))\n\n    # Define the other numbers\n    decimal_473 = Decimal('4.73')\n    decimal_477 = Decimal('4.77')\n    decimal_4737 = Decimal('4.737')\n\n    # Find the smallest decimal\n    smallest_decimal = min(recurring_decimal, decimal_473, decimal_477, decimal_4737)\n\n    return smallest_decimal\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants_after_joel = 4\n    plants_before_joel = (remaining_plants_after_joel + 2) * 2\n\n    remaining_plants_after_valerie = plants_before_joel\n    plants_before_valerie = (remaining_plants_after_valerie + 3) * 2\n\n    remaining_plants_after_ethan = plants_before_valerie\n    initial_plants = (remaining_plants_after_ethan + 1) * 2\n\n    return initial_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128  # Train length in meters\n    tunnel_length = 544  # Tunnel length in meters\n    speed = 52  # Speed in meters per second\n\n    # Time for the train to completely enter the tunnel\n    time_to_enter = train_length / speed\n    # Time to pass the entire tunnel length\n    time_to_pass_tunnel = tunnel_length / speed\n    # The total time inside the tunnel includes the time it takes for the entire train to enter and to pass the tunnel\n    total_time = time_to_enter + time_to_pass_tunnel\n\n    return total_time\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18\n    initial_sold_half_plus_16 = (remaining_eggs + 7) * 2\n    total_initial_eggs = (initial_sold_half_plus_16 + 16) * 2\n\n    return total_initial_eggs\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 40 / 100\n    original_price = increased_price / (1 + increase_percentage)\n    \n    return original_price\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    # Define the number of students\n    total_students = 120\n    total_buckets = 180\n\n    # For loop to check all possible numbers of P1 students\n    for p1_students in range(total_students + 1):\n        p6_students = total_students - p1_students\n        if p6_students * 2 + (p1_students // 2) == total_buckets:\n            return p1_students\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_per_toss = 2  # heads or tails\n    number_of_tosses = 2\n\n    total_outcomes = outcomes_per_toss ** number_of_tosses\n\n    return total_outcomes\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    numerator = 7\n    denominator = 1/3\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n\n    pencils = 55\n    pens = 143\n    greatest_common_divisor = gcd(pencils, pens)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n    \n    # 2 basketballs + 3 volleyballs = 195\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    \n    # 4 basketballs + 5 volleyballs = 355\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = [(i, 8 - i) for i in range(1, 7) if 8 - i <= 6 and 8 - i > 0]\n    return len(ways), ways\n\nans, different_ways = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen to Oscar: 3 fish for 1 rabbit -> fish:rabbit = 3:1\n    # Oscar to Dennis: 2 rabbits for 3 packs of wheat -> rabbit:wheat = 2:3\n    \n    # Combined ratio:\n    # fish:rabbit:wheat = 3:1 * 1:3 = 3:1:3\n    \n    # Simplifying the combined ratio to find fish per pack of wheat:\n    # fish:wheat = 3:3\n    # This simplifies to: 1:1\n    # Therefore, Owen should give 1 fish for 1 pack of wheat.\n    \n    fish_per_wheat = 1\n    return fish_per_wheat\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    product = quotient * divisor\n    incorrect_sum = product + remainder\n\n    # Johnny tried to add the remainder to the product to find the dividend\n    # The correct way to find the dividend is to subtract the remainder from the incorrect sum\n    correct_dividend = incorrect_sum - remainder\n\n    if incorrect_sum != correct_dividend:\n        return correct_dividend, \"Johnny's answer is incorrect.\"\n\n    return correct_dividend, \"Johnny's answer is correct.\"\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return round(boxes_needed)\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    # Using the law of cosines for triangles PAB, PAC, PAD and applying the Pythagorean theorem to the cube, we can solve for PA\n    # Let the side of the cube be x; then AB, AC, AD are x;\n    # PB^2 = PA^2 + AB^2 - 2*PA*AB*cos(PAB)\n    # PC^2 = PA^2 + AC^2 - 2*PA*AC*cos(PAC)\n    # PD^2 = PA^2 + AD^2 - 2*PA*AD*cos(PAD)\n    # PG^2 = PA^2 + AG^2 - 2*PA*AG*cos(PAG)\n\n    # Since PAB, PAC, PAD are all right angles, cos(PAB) = cos(PAC) = cos(PAD) = 0, hence:\n    # PB^2 = PA^2 + x^2\n    # PC^2 = PA^2 + x^2\n    # PD^2 = PA^2 + x^2\n    # PG^2 = PA^2 + 3x^2 (AG is the space diagonal of the cube)\n\n    # Since PB = 60*sqrt(10), PC = 60*sqrt(5), and PD = 120*sqrt(2),\n    # we solve for PA in terms of the cube side x:\n    # (60*sqrt(10))^2 = PA^2 + x^2\n    # (60*sqrt(5))^2 = PA^2 + x^2\n    # (120*sqrt(2))^2 = PA^2 + x^2\n    # And since PG = 36*sqrt(7), we use it to find x:\n    # (36*sqrt(7))^2 = PA^2 + 3x^2\n\n    # Hence:\n    # 3600 * 10 = PA^2 + x^2\n    # 3600 * 5 = PA^2 + x^2\n    # 14400 * 2 = PA^2 + x^2\n    # 1296 * 7 = PA^2 + 3x^2\n\n    # We can subtract the second equation from the first, the third from the first, and the fourth from three times the second, to eliminate PA and solve for x:\n    diff1 = 3600 * (10 - 5)\n    diff2 = 14400 * 2 - 3600 * 10\n    diff3 = 1296 * 7 - 3600 * 3 * 5\n\n    # Subtracting we get:\n    # x^2 = diff1\n    # 2x^2 = diff2\n    # 3x^2 = diff3\n    # x^2 = diff1\n    # Hence:\n    x_squared = diff1\n    x = x_squared ** 0.5\n\n    pa_squared_from_b = 3600 * 10 - x_squared\n    pa_from_b = pa_squared_from_b ** 0.5\n    ans = pa_from_b\n\n    return ans\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    students_before = symbols('students_before')\n    boys_before = 0.4 * students_before  # 40% of students before were boys\n    girls_before = students_before - boys_before\n    boys_after = boys_before - 16  # After 16 boys left\n    students_after = students_before  # Students count remains the same because 16 girls entered\n    girls_after = students_after - boys_after\n\n    # After changes, boys make up 2/15 of the students\n    equation = Eq(boys_after, 2/15 * students_after)\n\n    # Solve the equation to find the initial number of students\n    students_before_solution = solve(equation, students_before)\n    \n    # Calculate the number of girls in the canteen now\n    num_girls_after = girls_after.subs(students_before, students_before_solution[0])\n\n    return int(num_girls_after)\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = ['2', '7', '9']\n    primes = set()\n    \n    # Create all permutations of 1, 2, and 3 digits numbers\n    for r in range(1, 4):\n        for perm in permutations(digits, r):\n            # Create the number from the permutation\n            num = int(''.join(perm))\n            # Add to set if prime and less than 100\n            if isprime(num) and num < 100:\n                primes.add(num)\n                \n    return len(primes)\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for N in range(1000, 10000):\n        str_N = str(N)\n        for i in range(4):\n            M = int(str_N[:i] + str_N[i+1:])\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = (Fraction(10, 3) * 1.9 + 19.5 / Fraction(9, 2))\n    denominator = (Fraction(62, 75) - 0.16)\n    part1 = numerator / denominator\n\n    part2_numerator = 3.5 + Fraction(14, 3) + Fraction(2, 15)\n    part2_denominator = 0.5 * (Fraction(21, 20) + 4.1)\n    part2 = part2_numerator / part2_denominator\n\n    ans = part1 / part2\n    \n    return float(ans)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n    \n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming = 0.82 * total_students\n    jogging = 0.54 * total_students\n    neither = 0.16 * total_students\n    both_sports = (swimming + jogging) - (total_students - neither)\n\n    return int(both_sports)\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    total_cost = num_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work rate per day\n    a_work_rate = 1 / 15\n\n    # B's work rate per day\n    b_work_rate = 1 / 10\n\n    # Work done by A and B together in 4 days\n    work_done_4_days = 4 * (a_work_rate + b_work_rate)\n\n    # Remaining work after A leaves\n    remaining_work = 1 - work_done_4_days\n\n    # Days B needs to finish the remaining job\n    days_for_b_to_finish = remaining_work / b_work_rate\n\n    return days_for_b_to_finish\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    term1 = 1 + 0.23 + 0.34\n    term2 = 0.23 + 0.34 + 0.65\n    term3 = 1 + 0.23 + 0.34 + 0.65\n    term4 = 0.23 + 0.34\n    ans = (term1 * term2) - (term3 * term4)\n    return ans\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n    \n    num_trees = (road_length // tree_spacing) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n\n    return total_stickers\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    # Calculate individual rates per minute\n    linda_rate = 1 / 5       # Linda does 1 problem every 5 minutes\n    cici_rate = 1 / 6        # Cici does 1 problem every 6 minutes\n    \n    # Calculate combined rate per minute\n    combined_rate = linda_rate + cici_rate  # combined problems per minute\n    \n    # Total time in minutes\n    total_time_minutes = 2 * 60  # 2 hours into minutes\n    \n    # Calculate total number of problems solved together\n    total_problems = combined_rate * total_time_minutes\n    \n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    # Let x be the number of apples Amy has to give to John.\n    amy_initial = 37\n    john_initial = 15\n\n    # After giving x apples, Amy will have (amy_initial - x) apples,\n    # and John will have (john_initial + x) apples.\n    # We want Amy to have 4 more apples than John, so:\n    # amy_initial - x = john_initial + x + 4\n    # Solving for x:\n    # x = (amy_initial - john_initial - 4) / 2\n\n    x = (amy_initial - john_initial - 4) // 2\n    return x\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    for number in range(14, 17):\n        if number % 2 != 0:\n            return number\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_interval = 45\n\n    wait_time = bus_interval - (late_time % bus_interval)\n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    num_people = 67\n    total_cost = cost_per_person * num_people\n    return total_cost\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_sum = 37 * 10\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of each prize\n    x, y, z = symbols('x y z')\n\n    # Equations based on the problem statement\n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Return the number of Prizes Y\n    return solutions[y]\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n\n    equation1 = Eq(chan / 4, toh / 3 + 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    total_grass_for_goats = 14 * 15\n    total_grass_for_rabbits = 70 * 8\n    grass_per_goat_per_day = total_grass_for_goats / (14 * 15)\n    grass_per_rabbit_per_day = total_grass_for_rabbits / (70 * 8)\n\n    # Since a goat eats as much grass as 4 rabbits,\n    # We can calculate the amount of grass 17 goats and 20 rabbits would eat in a day.\n    daily_grass_for_goats = grass_per_goat_per_day * 17\n    daily_grass_for_rabbits = grass_per_rabbit_per_day * 20\n\n    # Convert the goats' grass consumption to equivalent rabbit grass consumption\n    daily_grass_for_goats_in_rabbit_terms = daily_grass_for_goats / 4\n\n    # Total daily consumption in rabbit terms\n    total_daily_grass_consumption_in_rabbit_terms = daily_grass_for_goats_in_rabbit_terms + daily_grass_for_rabbits\n\n    # Now we can calculate the number of days the pasture can feed\n    # all 17 goats and 20 rabbits, before running out of grass.\n    days_feeding_all_animals = total_grass_for_rabbits / total_daily_grass_consumption_in_rabbit_terms\n\n    return days_feeding_all_animals\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sandra, tasha, riley = symbols('sandra tasha riley')\n    \n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, (3 / 5) * sandra)\n    equation3 = Eq(tasha, riley + 60)\n\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    climb = 10\n    slide = 1\n    day = 1\n    current_height = 0\n\n    while True:\n        current_height += climb\n        if current_height >= height:\n            break\n        current_height -= slide\n        day += 1\n        slide += 1\n\n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    result = 4  # Starting value as per the formula x + ...\n    for i in range(1, 4):  # 'triangle' number is 3, so we require three terms\n        result += int(str(4) * (i + 1))  # Concatenating '4' to itself i+1 times and converting to int\n    return result\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    jan_savings = 13\n    feb_savings = 18\n    mar_savings = 5\n    \n    mean_savings = (jan_savings + feb_savings + mar_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    return (9**2) - 7\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    # Convert each recurring decimal to a fraction\n    recurring_decimals = [1/90, 12/90, 23/90, 34/90, 45/90, 54/90, 78/90]\n\n    # Sum the fractions\n    ans = sum(recurring_decimals)\n\n    return ans\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    original = \"Angel\"\n    original_password = \"0141705021\"\n    new_password = \"Devil\"\n    attempted_password = \"4005220912\"\n    \n    # We will compare the sets of the original password to the sets of the attempted password\n    # to indicate if Andy can unlock it. First create a mapping of numbers to letters\n    mapping = dict(zip(original, original_password))\n    \n    # Translate the word \"Devil\" using the original mapping\n    translated_password = \"\".join(mapping.get(ch, '?') for ch in new_password)\n    \n    # Compare the attempted_password with the translated new password\n    if attempted_password == translated_password:\n        return True\n    else:\n        return translated_password\n    \nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for a in range(2017, 2036):\n        for b in range(a + 1, 2036):\n            for c in range(b + 1, 2036):\n                if (a + b + c) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, solve, sqrt\n  \n    x, a = symbols('x a')\n    equation = sqrt(x) - (sqrt(a) - 2/sqrt(a))\n\n    # Solve for x\n    x_value = solve(equation, x)[0]\n\n    # Calculate sqrt(x^2 + 8x) in terms of a\n    expr = sqrt(x_value**2 + 8 * x_value)\n\n    # Simplify the expression to find the solution in terms of a\n    ans = expr.simplify()\n\n    return ans\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n\n    for n in range(2, 7):  # n is the number of parts we divide 6 into, can be up to 6\n        for x1 in range(1, 7):\n            for x2 in range(x1, 7):  # Assume x1 <= x2 <= ... <= xn, avoid repetitions\n                if n > 2:\n                    for x3 in range(x2, 7):\n                        if n > 3:\n                            for x4 in range(x3, 7):\n                                if n > 4:\n                                    for x5 in range(x4, 7):\n                                        if x1 + x2 + x3 + x4 + x5 == 6:\n                                            count += 1\n                                elif x1 + x2 + x3 + x4 == 6:\n                                    count += 1\n                        elif x1 + x2 + x3 == 6:\n                            count += 1\n                elif x1 + x2 == 6:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for i in range(300, 401):\n        if (i % 3 == 2) and (i % 4 == 2) and (i % 5 == 2) and (i % 7 == 5):\n            return i\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys = 18\n    mean_age_boys = 16.2\n    total_girls = 27\n    mean_age_girls = 16.7\n    total_students = total_boys + total_girls\n\n    total_age_boys = total_boys * mean_age_boys\n    total_age_girls = total_girls * mean_age_girls\n    total_age_students = total_age_boys + total_age_girls\n\n    mean_age_students = total_age_students / total_students\n\n    return mean_age_students\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n\n    # Using the Pigeonhole Principle, the minimum number of sheep in the pen with the most sheep\n    # is obtained by dividing the total number of sheep by the number of pens and then rounding up.\n    min_sheep_in_most_filled_pen = (total_sheep + total_pens - 1) // total_pens\n\n    return min_sheep_in_most_filled_pen\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "import math\n\ndef solution():\n    raye_cycle = 6\n    simon_cycle = 12\n    taylor_cycle = 16\n    \n    lcm = (raye_cycle * simon_cycle) // math.gcd(raye_cycle, simon_cycle)\n    lcm = (lcm * taylor_cycle) // math.gcd(lcm, taylor_cycle)\n    \n    return lcm\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Create a tuple of remainder conditions: (remainder, modulo)\n    congruences = ((1, 6), (8, 13))\n\n    # Solve the congruences using the Chinese Remainder Theorem\n    ans, _ = solve_congruence(*congruences)\n\n    # Find the first number that is between 200 and 300\n    while ans < 200:\n        ans += 6 * 13\n\n    return ans\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # Sara needs 5 balls of the same color.\n    # In the worst case, she may take out all balls of other colors before.\n\n    # Take 4 green balls out (not yet 5 of the same color)\n    # Take 4 yellow balls out (not yet 5 of the same color)\n    # Next ball she takes out must be either the 5th green ball, the 5th yellow ball, or a red ball.\n    # In any of these cases, she has 5 balls of a single color.\n\n    # Number of balls Sara must take out to be sure to get 5 balls of same color:\n    # 4 (green) + 4 (yellow) + 1 (the next ball guarantees 5 of the same color)\n    ans = 4 + 4 + 1\n\n    return ans\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    # Define the original password 'Angel' corresponding to numbers\n    angel = \"0141705021\"\n    \n    # Define the attempted password for 'Devil'\n    devil = \"4005220912\"\n    \n    # Check if Angel and Devil have the same pattern by checking if any character\n    # has the same relative relationship in terms of position/value\n    angel_to_devil = {a: d for a, d in zip(angel, devil)}\n    devil_to_angel = {d: a for a, d in zip(angel, devil)}\n    \n    if len(angel_to_devil) == len(set(angel_to_devil.values())) and all(devil_to_angel[d] == a for a, d in zip(angel, devil)):\n        return True  # Andy can unlock the chest\n    else:\n        # Compute correct password by mapping Angel to Devil through ordered unique character occurrences\n        unique_angel_chars = sorted(set(angel), key=angel.index)\n        unique_devil_chars = sorted(set(devil), key=devil.index)\n        \n        angel_to_correct_devil = {a: d for a, d in zip(unique_angel_chars, unique_devil_chars)}\n        \n        # Construct the correct password by mapping each digit in 'Devil' to its counterpart in 'Angel'\n        correct_password = ''.join(angel_to_correct_devil[ch] if ch in angel_to_correct_devil else ch for ch in devil)\n        \n        return correct_password  # Return the correct password\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    term_10 = 31\n    common_difference = 28 - 25\n    first_term = term_10 - (10 - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the mass of a table and chair\n    table_mass, chair_mass = symbols('table_mass chair_mass')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(3 * table_mass, 4 * chair_mass)  # The total mass of 3 tables is equal to the total mass of 4 chairs.\n    equation2 = Eq(table_mass, chair_mass + 2)      # A table is 2kg heavier than a chair.\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (table_mass, chair_mass))\n\n    return solutions[table_mass]\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    diff = max(temperatures) - min(temperatures)\n    return diff\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30  # swimming pool length in meters\n    sam_speed = 1.0  # Sam's speed in meters per second\n    ben_speed = 0.6  # Ben's speed in meters per second\n    total_time = 10 * 60  # Total time swimming in seconds (10 minutes)\n\n    # Relative speed is the sum of their speeds since they are moving towards each other\n    relative_speed = sam_speed + ben_speed\n\n    # Relative distance covered in 1 meet-up is the length of the pool\n    relative_distance_per_meetup = pool_length\n\n    # Number of meet-ups is the total relative distance covered divided by the relative distance per meet-up\n    number_of_meetups = total_time * relative_speed / relative_distance_per_meetup\n\n    return int(number_of_meetups)  # Returning the integer part\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    # Decode the individual digits of the numbers 89 and 75.\n    a, b = divmod(89, 10)  # a = 8, b = 9\n    c, d = divmod(75, 10)  # c = 7, d = 5\n\n    # Perform the new operation as defined.\n    result = (a * b) + (c * d)\n\n    return result\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    # Given average height of Bob and Cindy\n    avg_bob_cindy = 120\n    # Since average height considers two people, total height of Bob and Cindy together\n    total_bob_cindy = avg_bob_cindy * 2\n    \n    # Given height of Doris\n    height_doris = 126\n    \n    # Calculate the total height of all three children\n    total_height_all = total_bob_cindy + height_doris\n    \n    # Average height of the three children\n    avg_height_all = total_height_all / 3\n    \n    return avg_height_all\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Mrs Tan and Mrs Lim initially had an equal number of pies, denote x\n    x = symbols('x')\n\n    # After transactions\n    mrs_tan_new = x + 12\n    mrs_lim_new = x - 4\n\n    # Mrs Tan now has twice as many pies as Mrs Lim\n    equation = Eq(mrs_tan_new, 2 * mrs_lim_new)\n\n    # Solve for x\n    initial_pies = solve(equation, x)\n\n    return initial_pies[0]\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    total_avg = 35\n    boys_avg = 20\n    girls_avg = 60\n    total_students = 40\n\n    # Let the number of boys be x\n    # Then the number of girls will be total_students - x\n    # The total number of pencils is total_avg * total_students\n    # The total number of pencils owned by boys will be boys_avg * x\n    \n    # Setting up the equation:\n    # boys_avg * x + girls_avg * (total_students - x) = total_avg * total_students\n    # Simplifying the equation:\n    # boys_avg * x + girls_avg * total_students - girls_avg * x = total_avg * total_students\n    # (boys_avg - girls_avg) * x = total_avg * total_students - girls_avg * total_students\n    # x = (total_avg * total_students - girls_avg * total_students) / (boys_avg - girls_avg)\n    \n    x = (total_avg * total_students - girls_avg * total_students) / (boys_avg - girls_avg)\n    \n    return int(x)\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return sum([9.97, 9.98, 9.99])\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5']\n    all_possible_numbers = [''.join(p) for p in permutations(digits)]\n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Destin's and his nephew's current ages\n    destin, nephew = symbols('destin nephew')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))        # In 6 years, Destin will be twice his nephew's age\n    equation2 = Eq(destin - 6, 5 * (nephew - 6))        # 6 years ago, the ratio of Destin's age to his nephew's was 5:1\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    # Calculate the sum of their ages in 10 years' time\n    sum_in_10_years = (solutions[destin] + 10) + (solutions[nephew] + 10)\n    \n    return sum_in_10_years\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    from datetime import datetime\n\n    departure_time = datetime.strptime(\"6:35\", \"%H:%M\")\n    arrival_time = datetime.strptime(\"10:22\", \"%H:%M\")\n\n    travel_duration = arrival_time - departure_time\n    travel_minutes = travel_duration.seconds // 60\n\n    return travel_minutes\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = \"345634563456\"\n    pattern_sum = sum(int(digit) for digit in pattern)\n    pattern_length = len(pattern)\n\n    full_repeats = 50 // pattern_length\n    remaining_digits = 50 % pattern_length\n\n    total_sum = full_repeats * pattern_sum + sum(int(pattern[i]) for i in range(remaining_digits))\n\n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    # Calculation using the division property that a/(b/c) = a * (c/b)\n    ans = 3 * (5/3) * (7/5) * (9/7) * (13/9) * (15/13)\n    return ans\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    return 3.88 - 1.111\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_age_when_tom_reaches_fathers_age = 70\n\n    # Let father's current age be 'father_age_now'.\n    # When Tom reaches his father's current age, the age difference will stay the same.\n    # So at that time Tom's age will be father's current age, and father's age will be 70.\n\n    # Age difference is same at any point in time\n    age_difference = father_age_when_tom_reaches_fathers_age - tom_age\n\n    # Father's current age is age difference + Tom's current age\n    father_age_now = age_difference + tom_age\n    \n    return father_age_now\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3/5\n    sweets_first_group = 6\n    fraction_second_group = 1/4\n\n    # Calculate the total number of sweets given to the first group\n    sweets_first_total = fraction_first_group * total_sweets\n    students_first_group = sweets_first_total / sweets_first_group\n\n    # Calculate the remaining sweets after the first group\n    remaining_sweets = total_sweets - sweets_first_total\n\n    # Calculate the number of sweets given to the second group\n    sweets_second_group = 4\n    sweets_second_total = fraction_second_group * remaining_sweets\n    students_second_group = sweets_second_total / sweets_second_group\n\n    # Calculate the number of students in the third group\n    students_third_group = (remaining_sweets - sweets_second_total) / 5\n\n    # Calculate the total number of students\n    total_students = students_first_group + students_second_group + students_third_group\n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from sympy import primefactors\n\n    # List of possible numbers\n    numbers = [6, 12, 35, 175, 245, 300]\n\n    # Calculate the prime factorization for each number\n    prime_factors_dict = {number: primefactors(number) for number in numbers}\n\n    # Iterate over combinations of 2 numbers for Candy\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            candy_product = numbers[i] * numbers[j]\n            # Now iterate over combinations of 3 numbers for Candice\n            for a in range(len(numbers)):\n                for b in range(a + 1, len(numbers)):\n                    for c in range(b + 1, len(numbers)):\n                        candice_product = numbers[a] * numbers[b] * numbers[c]\n                        # Compare products and omit common elements to find the unused one\n                        if candy_product == candice_product:\n                            used_numbers = {numbers[i], numbers[j], numbers[a], numbers[b], numbers[c]}\n                            for num in numbers:\n                                if num not in used_numbers:\n                                    return num\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    packet_A = 25\n    packet_B = 20\n    days = lcm(packet_A, packet_B)\n\n    initial_day = 1  # 1st March\n    next_start_day = initial_day + days\n\n    return next_start_day\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) // 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    first_number = 3 + 1/4\n    second_number = 1 + 3/4\n\n    # Calculate the difference\n    difference = first_number - second_number\n\n    # Convert the difference to decimal\n    ans = float(difference)\n\n    return ans\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n\n    for i in range(999, 0, -2):\n        found = False\n        for j in range(2, i // 3):\n            if is_composite(j):\n                for k in range(j + 1, (i - j) // 2):\n                    if is_composite(k) and is_composite(i - j - k):\n                        found = True\n                        break\n                if found:\n                    break\n        if not found:\n            return i\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    # For an isosceles triangle with perimeter 12, the sum of the two equal sides must be greater than the base side\n    for equal_side in range(1, 12//2):\n        for base_side in range(1, 12//2):\n            if 2 * equal_side + base_side == 12 and 2 * equal_side > base_side:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percent = 15\n    tax_percent = 8\n\n    tip = (tip_percent / 100) * bill\n    tax = (tax_percent / 100) * bill\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    total_prize = 580\n    boy_amount = 8\n    girl_amount = 5\n    \n    # Let the number of girls be x. Then the number of boys is 3x.\n    # The total prize is therefore 3x*boy_amount + x*girl_amount\n    # Setting up the equation: 3x*boy_amount + x*girl_amount = total_prize\n    # Solve for x to find the number of girls and then calculate the number of boys (3x)\n\n    for x in range(total_prize):  # x cannot exceed the total_prize\n        if (3 * x * boy_amount + x * girl_amount) == total_prize:\n            return 3 * x  # Return the number of boys\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    start = 3  # The first number with a remainder of 3 after dividing by 4\n    end = 99   # The last number less than 100 with a remainder of 3 after dividing by 4\n    difference = 4\n\n    # Calculate the number of terms in the sequence\n    num_terms = ((end - start) // difference) + 1\n\n    # Calculate the sum using the formula for the sum of an arithmetic sequence\n    total_sum = num_terms * (start + end) // 2\n\n    return total_sum\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n    # Using the Inclusion-Exclusion Principle to find the intersection\n    both_teams = sports_team + art_team - total_students\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_initial_strawberries = 86\n    lena_gave_away = 29\n    lena_final_strawberries = 100\n\n    strawberries_mother_gave = lena_final_strawberries - (lena_initial_strawberries - lena_gave_away)\n\n    return strawberries_mother_gave\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    # Find the greatest common divisor (GCD) for the three class sizes\n    gcd_ab = gcd(8,12)\n    gcd_abc = gcd(gcd_ab, 20)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first = 25\n    failed_second = 12\n    passed_second_failed_first = 3\n\n    passed_only_first = passed_first - (total_students - failed_second - passed_second_failed_first)\n    return passed_only_first\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the elder brother's current age and y be the younger brother's current age.\n    x, y = symbols('x y')\n\n    # Equation 1: The sum of their current ages is 42.\n    equation1 = Eq(x + y, 42)\n\n    # A few years ago, the elder brother's age was y (younger brother's current age),\n    # and at that time, the younger brother was half the elder brother's current age.\n    # If 'n' represents the number of years ago, this gives us x - n = y and y - n = x/2.\n\n    # Since x - n = y, we can derive that n = x - y.\n    # Now substitute n in the second equation: y - (x - y) = x/2\n    # Simplify the equation to get: 2y - x = y and then 2y - x - y = 0 which becomes y = x / 2.\n\n    # Equation 2: The younger brother was exactly half the elder brother's current age.\n    equation2 = Eq(2*y, x)\n\n    # Solving the system of equations for x and y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Retrieving the elder brother's current age.\n    return solutions[x]\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Number of routes from A to B\n    AB = 7\n    # Number of routes from B to C\n    BC = 5\n    # Number of routes from A to C directly\n    AC_direct = 4\n    # Number of routes from C to D\n    CD = 2\n    # Number of routes from A to D directly\n    AD_direct = 6\n\n    # Number of ways from A to D through B and C\n    ABD = AB * BC * CD\n    # Number of ways from A to D directly\n    ADC = AC_direct * CD\n\n    # Total ways from A to D\n    total_ways = ABD + ADC + AD_direct\n\n    return total_ways\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    cattle = 5\n    days = 10\n\n    hay_per_day_per_cattle = total_hay / (cattle * days)\n    \n    return hay_per_day_per_cattle\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, cheese = symbols('chocolate cheese')\n\n    # Total number of cupcakes is 255\n    total_cupcakes = Eq(chocolate + cheese, 255)\n    # 60% of chocolate cupcakes and 25% of cheese cupcakes are left after selling\n    cupcakes_left = Eq(chocolate * 0.6, cheese * 0.25)\n\n    solutions = solve((total_cupcakes, cupcakes_left), (chocolate, cheese))\n\n    # Calculate the number of cupcakes left (either chocolate or cheese, same number)\n    cupcakes_left_each = solutions[chocolate] * 0.6\n\n    return cupcakes_left_each\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    pencil_cost = 2\n    total_cost = 20\n    number_of_pencils = 3\n    number_of_pens = 2\n\n    total_pencil_cost = pencil_cost * number_of_pencils\n    remaining_cost_for_pens = total_cost - total_pencil_cost\n    cost_per_pen = remaining_cost_for_pens / number_of_pens\n\n    return cost_per_pen\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    killed_by_frost = total_seedlings * (3/8)\n    survive_seedlings = total_seedlings - killed_by_frost\n    \n    return int(survive_seedlings)\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    # Initialize the youngest age variable\n    youngest_age = 10  # Start with a value greater than any possible youngest age (< 10)\n\n    # Iterate through all possible age combinations that are less than 10 and whose\n    # product is equal to 210\n    for age1 in range(1, 10):\n        for age2 in range(age1+1, 10):  # Start from age1+1 to ensure different ages\n            for age3 in range(age2+1, 10):  # Start from age2+1 to ensure different ages\n                if age1 * age2 * age3 == 210:\n                    youngest_age = min(youngest_age, age1)  # Update youngest age if necessary\n\n    return youngest_age\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # find the common multiple of 4 (from 1/4) and 5 (from 2/5)\n    from fractions import Fraction\n    \n    # Ratio from given fractions\n    boys_ratio = Fraction(1, 4)\n    girls_ratio = Fraction(2, 5)\n\n    # Find common denominator for the boys and girls ratio\n    common_denominator = boys_ratio.denominator * girls_ratio.denominator\n    \n    # Find multiply factor for boys and girls to make denominators equal\n    boys_multiply = common_denominator // boys_ratio.denominator\n    girls_multiply = common_denominator // girls_ratio.denominator\n    \n    # Multiply ratios with factors to make the boys and girls count comparable\n    boys_part = boys_ratio.numerator * boys_multiply\n    girls_part = girls_ratio.numerator * girls_multiply\n    \n    # Calculate total parts\n    total_parts = boys_part + girls_part\n    \n    # Calculate total number of boys and girls\n    boys = (boys_part / total_parts) * 39\n    girls = (girls_part / total_parts) * 39\n    \n    # Calculate difference\n    difference = boys - girls\n    \n    return int(difference)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n    days_until_none_left = total_locusts // daily_consumption\n    locusts_left = total_locusts - (days_until_none_left * daily_consumption)\n    \n    if locusts_left == 0:\n        ans = daily_consumption\n    else:\n        ans = locusts_left\n\n    return ans\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    return 77.5 * 0.52 + 5.2 * 2.25\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = 12*92 + 22*82 + 32*72\n    return ans\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = 726 * 8\n    return round(ans, 1)\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    ten_notes, five_notes = symbols('ten_notes five_notes')\n\n    # Two equations based on the problem statement\n    eq1 = Eq(ten_notes + five_notes, 116)  # Total number of notes\n    eq2 = Eq((ten_notes - 0.6 * ten_notes) * 4, (five_notes - 0.25 * five_notes) * 7)  # Ratio after spending\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (ten_notes, five_notes))\n\n    # Calculate cost of the bag using the percentage of notes spent\n    cost = 0.6 * solutions[ten_notes] * 10 + 0.25 * solutions[five_notes] * 5\n\n    return cost\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        return 0\n    else:\n        return remainder\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of stickers Don had at first as D and Ben had as B\n    D, B = symbols('D B')\n    \n    # Original ratio is 2:3\n    equation1 = Eq(2*B, 3*D)\n    \n    # After changes, the ratio is 6:7\n    equation2 = Eq(6*(B - 5), 7*(D + 10))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (D, B))\n    \n    # We want the number of stickers Don had at first\n    return solutions[D]\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    amy_give = (amy_toys - sally_toys) // 2\n    return amy_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8 / 9) * baby_chickens\n    roosters = (1 / 16) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n\n    return william\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    max_product = 0\n    \n    for a in range(1, 29):\n        for b in range(1, 30 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    # since the pattern is two numbers being added and subtracted,\n    # we can divide the problem into the sum of positive terms and negative terms:\n    # (2 + 4 + 6 + ... + 2016) - (3 + 5 + 7 + ... + 2015)\n    # which are two arithmetic sequences.\n\n    # calculate the sum of the positive terms (even numbers from 2 to 2016)\n    first_positive_term = 2\n    last_positive_term = 2016\n    number_of_positive_terms = (last_positive_term - first_positive_term) // 2 + 1\n    sum_positive_terms = (first_positive_term + last_positive_term) * number_of_positive_terms // 2\n\n    # calculate the sum of the negative terms (odd numbers from 3 to 2015)\n    first_negative_term = 3\n    last_negative_term = 2015\n    number_of_negative_terms = (last_negative_term - first_negative_term) // 2 + 1\n    sum_negative_terms = (first_negative_term + last_negative_term) * number_of_negative_terms // 2\n\n    # calculate the difference:\n    ans = sum_positive_terms - sum_negative_terms\n    \n    return ans\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    sum_of_squares = 2870\n    sum_of_products = 0\n\n    for i in range(1, 21, 2):\n        sum_of_products += i * (i + 2)\n\n    return sum_of_products\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    total_cups = 30\n    total_milk_needed = milk_per_cup * total_cups\n    return total_milk_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            number = int(f\"21{x}{y}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    # +1 because there's a tree at both the start and the end\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n\n    min_students_in_most_populated_week = (total_students // days_in_week) + 1\n\n    return min_students_in_most_populated_week\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n\n    # Calculate the arrangements for the 2 boys (not together)\n    # There are 6 possible positions where the first boy can be placed\n    # (2,3,4,5,6,7), and for each of these positions, the second boy\n    # has 5 choices (excluding the one next to the first boy)\n    boy_arrangements = 6 * 5\n\n    # Calculate the arrangements for the 3 girls (always together)\n    # Since the triplet sisters want to stand together, we can treat them\n    # as a single entity. Additionally, there are 3! ways to arrange \n    # the sisters within that entity.\n    girl_arrangements = factorial(3)\n\n    # Now, we have 5 entities to arrange: 1 triplet entity, 2 boys, and\n    # 2 individual students. They can be arranged in 5! ways\n    student_arrangements = factorial(5)\n\n    # Multiply the different arrangement possibilities\n    total_arrangements = boy_arrangements * girl_arrangements * student_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    from fractions import Fraction\n\n    ans = Fraction(3) / (1 - Fraction(1, 2))\n    return float(ans)\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    glasses_percentage = 20 / 100\n    girls_with_glasses = total_girls * glasses_percentage\n    return int(girls_with_glasses)\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # We know there are 7 days in a week.\n    # To know the greatest number of Fridays that can occur in 55 days,\n    # we need to divide 55 by 7 and then take the ceiling of that because\n    # we want the maximum number of full weeks plus an additional Friday if possible.\n\n    # First, let's find the number of complete weeks.\n    complete_weeks = 55 // 7\n    \n    # Next, let's find out how many additional days are there.\n    additional_days = 55 % 7\n    \n    # If the remainder is greater than 0, that means we can have\n    # at least 1 more Friday if the vacation starts on Friday.\n    # Thus, the greatest number of Fridays is the number of complete weeks (as every week has a Friday)\n    # plus 1 if there are additional days from the last incomplete week.\n    \n    max_fridays = complete_weeks + (1 if additional_days >= 1 else 0)\n    \n    return max_fridays\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    from sympy import lcm\n    \n    # calculate lcm of the given numbers\n    lc = lcm([2, 3, 4, 5, 6, 8, 9])\n\n    # since N gives a remainder of 5 when divided by 7\n    # it must be of the form 7*k + 5\n    # we find the smallest k such that lc*k + 5 is divisible by 7\n\n    k = 0\n    while (lc * k + 5) % 7 != 0:\n        k += 1\n\n    # smallest value of N\n    N = lc * k + 5\n    \n    return N\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    cost_of_pencil = 2\n    cost_of_pen = 4\n\n    # Calculating how many pencils are equivalent to a pen\n    pencils_equivalent_to_pen = cost_of_pen // cost_of_pencil\n    \n    return pencils_equivalent_to_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # Cost of one mug\n    cost_per_mug = 3.50 / 5\n    # Cost of one pen\n    cost_per_pen = 6.80 / 8\n    \n    # Total cost for 7 mugs and 5 pens\n    total_cost = (7 * cost_per_mug) + (5 * cost_per_pen)\n    \n    # Change from £10\n    change = 10 - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    trip_fraction = 1/5\n    pupils_on_trip = total_pupils * trip_fraction\n    pupils_going_to_cathedral = total_pupils - pupils_on_trip\n    \n    return int(pupils_going_to_cathedral)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_for_one_song = 3  # minutes for one child to sing a song\n    number_of_songs = 2    # total number of songs\n    number_of_children = 50 # total number of children\n\n    total_time = time_for_one_song * number_of_songs * number_of_children\n    return total_time\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    decimal_25_percent = 25 / 100\n    decimal_point_3 = 0.3\n\n    if decimal_25_percent > decimal_point_3:\n        ans = '25%'\n    else:\n        ans = '0.3'\n\n    return ans\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    total_donuts = 6 * 6\n    donuts_eaten = 3\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    # Since this is a trivial question where the answer is not dependent on any variables or\n    # calculations, it is assumed this is a placeholder for an actual math question.\n    # Therefore, a literal interpretation would result in the answer being 1:\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    interest_rate = 0.015\n    final_amount = 37100\n\n    # A = P(1 + rt), where A is final amount, P is principal, r is interest rate,\n    # t is number of years\n    # t = (A/P - 1) / r\n    years_saved = (final_amount / principal - 1) / interest_rate\n\n    return round(years_saved)  # return the number of years rounded to the nearest whole number\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least Common Multiple of 3 and 7\n    num = lcm\n    while True:\n        if str(num)[-1] == \"2\":  # Checking if the number ends with a '2'\n            return num\n        num += lcm  # Adding LCM to get the next multiple that satisfies first two conditions\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    # Let's denote the weight of the basket as B and the weight of each apple as A.\n    # According to the problem, we have the following equations:\n    # 5A + B = 580 (equation of the full basket with apples)\n    # 2A + B = 280 (equation of the basket with 3 apples removed)\n    \n    # We'll use simple algebra to find the weight of the basket (B):\n    # Subtracting the second equation from the first, we get:\n    # (5A + B) - (2A + B) = 580 - 280\n    # Simplifying, we get:\n    # 3A = 300\n    # Therefore, A = 100 (weight of one apple)\n    \n    # Substituting the value of A into the second equation:\n    # 2*100 + B = 280\n    # 200 + B = 280\n    # Therefore, B = 280 - 200\n    \n    B = 280 - 200\n    return B\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_per_week = 7\n    num_weeks = 2\n    total_days = days_per_week * num_weeks\n    return total_days\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c be the original number of cookies\n    # Let k be the original number of cakes\n    c, k = symbols('c k')\n    \n    # There were thrice as many cookies as cakes\n    equation1 = Eq(c, 3 * k)\n    \n    # After selling some, 48 cookies and cakes were left\n    equation2 = Eq((c - 39) + (k - 17), 48)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, k))\n    \n    # Number of cookies left after selling 39\n    cookies_left = solutions[c] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return 2 ** 17 % 10\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    # Value of the first 3 is in the ten-thousands place, so it is 3 * 10,000\n    value_first_3 = 3 * 10000\n    # Value of the second 3 is in the hundreds place, so it is 3 * 100\n    value_second_3 = 3 * 100\n    # The difference in their values\n    ans = value_first_3 - value_second_3\n    return ans\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    # Calculate the sum of the first 20 natural numbers. This will give us the total page numbers.\n    # Since the page numbers are following the arithmetic sequence 1, 2, 3, ..., n\n    # The sum of the first n natural numbers is n*(n+1)/2\n    n = 20\n    total_page_numbers = n * (n + 1) // 2\n    \n    return total_page_numbers\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j, o, and a be the rates at which John, Jonah, and Angus work independently\n    j, o, a = symbols('j o a')\n\n    # Equation 1: They all together take 27 hours to build the wall\n    eq1 = Eq(1/(j + o + a), 27)\n\n    # Equation 2: Jonah and Angus together take 36 hours to build the wall\n    eq2 = Eq(1/(o + a), 36)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (j, o, a))\n\n    # Work rate of John working alone would be expressed as the time it would take him alone\n    time_for_john_alone = 1 / solutions[j]\n\n    return time_for_john_alone\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Define the current combined age of Claire and Daniel\n    # Let x be their combined age five years ago\n    # Their combined age now is x + 5 (Claire) + 5 (Daniel)\n    # Since x was 14 years five years ago, their combined age now is 14 + 5 + 5\n    current_combined_age = 14 + 5 + 5\n    # The combined age in 3 years will be current age + 3 (Claire) + 3 (Daniel)\n    combined_age_in_3_years = current_combined_age + 3 + 3\n    \n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(0, 10):\n        for b in range(0, 10):\n            number = 108200 + a * 10 + b\n            # Check divisibility by 12\n            # number divisible by 12 if it is also divisible by both 3 and 4\n            if number % 3 == 0 and number % 4 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    z = 1  # Let z be any positive integer as it will not change the solution.\n    coin1 = 4 * z\n    coin2 = 5 * z\n\n    # Find the largest total that cannot be made according to the Coin Problem (Frobenius Coin Problem).\n    # According to the theorem, the largest amount that cannot be made is denoted as the Frobenius number and is given by:\n    # Frobenius_number = coin1 * coin2 - coin1 - coin2\n    frobenius_number = coin1 * coin2 - coin1 - coin2\n\n    return frobenius_number\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    from math import gcd\n    sum = 1001\n    max_d = 1\n    for i in range(1, sum + 1):\n        if sum % i == 0:\n            current_d = sum // i\n            if gcd(current_d, sum) == current_d:\n                max_d = max(max_d, current_d)\n    return max_d\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    length_one = 45\n    length_two = 30\n\n    longest_length = gcd(length_one, length_two)\n\n    return longest_length\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    # Equations based on the given information\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    # Solve the equations to find the weight of one apple and one pear\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    # Calculate the weight of 4 apples and 4 pears\n    weight_4_apples_4_pears = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight_4_apples_4_pears.evalf()\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    i = 1\n    while True:\n        if i % 5 == 1 and i % 12 == 3:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Equation representing the removal of 1/11 of the boys and 5 girls\n    equation = Eq(boys - boys / 11, girls - 5)\n\n    # Equation representing the total number of students\n    total_students = Eq(boys + girls, 152)\n\n    # Solve the system of equations\n    solutions = solve((equation, total_students), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    pencils = 128\n    box_capacity = 16\n    num_boxes = pencils // box_capacity\n    \n    return num_boxes\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    return 386 + 99\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    eggs_per_day = 50\n    adult_in_days = 30\n    total_days = 40\n\n    adult_fleas = 0\n    for day in range(1, total_days + 1):\n        if day > adult_in_days:\n            adult_fleas += eggs_per_day\n\n    return adult_fleas\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (7 * 3) + 24\n    return ans\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    total_stickers = 378\n    \n    # Cathy received 3 times as many stickers as Amanda.\n    equation1 = Eq(cathy, 3 * amanda)\n    # Amanda received twice as many stickers as Bernie.\n    equation2 = Eq(amanda, 2 * bernie)\n    # Sum of stickers received by all three.\n    equation3 = Eq(amanda + bernie + cathy, total_stickers)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    # Stickers Amanda and Cathy received together.\n    amanda_cathy_total = solutions[amanda] + solutions[cathy]\n\n    return amanda_cathy_total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_of_water = 3 / 4\n    litres_of_water = total_orange_drink * fraction_of_water\n    return litres_of_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    common_difference = 3\n    total_rows = 22\n\n    number_of_students = (total_rows / 2) * (2 * first_term + (total_rows - 1) * common_difference)\n    \n    return int(number_of_students)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    \n    total_books = story_books + magazines\n    \n    return total_books\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french_speakers = 15\n    japanese_speakers = 12\n    italian_speakers = 13\n    french_japanese_speakers = 5\n    french_italian_speakers = 3\n    japanese_italian_speakers = 2\n    all_three_speakers = 1\n\n    total_speakers = (french_speakers + japanese_speakers + italian_speakers -\n                      french_japanese_speakers - french_italian_speakers - \n                      japanese_italian_speakers + all_three_speakers)\n\n    return total_speakers\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 30 / 100 * 1600\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85\n    pencil_cost = 0.38\n    ruler_cost = 0.59\n\n    remaining_money = total_money - (pencil_cost + ruler_cost)\n\n    return remaining_money\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert the mixed numbers to improper fractions\n    num1 = 21 * 286 + 21\n    den1 = 286\n    frac1 = Fraction(num1, den1)\n\n    num2 = 6 * 2530 + 647\n    den2 = 2530\n    frac2 = Fraction(num2, den2)\n\n    num3 = 1 * 2829 + 1370\n    den3 = 2829\n    frac3 = Fraction(num3, den3)\n\n    # Perform the operations\n    result = frac1 / frac2 * frac3\n\n    # Convert the result into a mixed number\n    mixed_num = result.numerator // result.denominator\n    mixed_frac_numerator = result.numerator % result.denominator\n    mixed_frac = Fraction(mixed_frac_numerator, result.denominator)\n\n    return mixed_num, mixed_frac\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Dimensions of the cuboid\n    length, width, height = 6, 10, 12\n    # Volume of the cuboid\n    total_volume = length * width * height\n    # Number of small cubes the cuboid is cut into\n    num_small_cubes = 720\n    # Side length of each small cube\n    side_length_of_small_cube = (total_volume / num_small_cubes) ** (1/3)\n    \n    # Number of small cubes along each dimension of the cuboid\n    num_cubes_length = length / side_length_of_small_cube\n    num_cubes_width = width / side_length_of_small_cube\n    num_cubes_height = height / side_length_of_small_cube\n    \n    # Calculating the number of small cubes with exactly one painted face for each dimension\n    # There are two painted faces for each dimension (front and back)\n    painted_cubes_length = (num_cubes_length - 2) * num_cubes_width * 2\n    painted_cubes_width = (num_cubes_width - 2) * num_cubes_height * 2\n    painted_cubes_height = (num_cubes_height - 2) * num_cubes_length * 2\n    \n    # Summing the small cubes with exactly one painted face from each dimension\n    painted_cubes_one_face = painted_cubes_length + painted_cubes_width + painted_cubes_height\n    \n    return int(painted_cubes_one_face)\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_per_hour, nini_per_hour = symbols('star_per_hour nini_per_hour')\n    equation1 = Eq(5 * star_per_hour + 20 * nini_per_hour, 1)\n    equation2 = Eq(20 * star_per_hour + 8 * nini_per_hour, 1)\n\n    solutions = solve((equation1, equation2), (star_per_hour, nini_per_hour))\n\n    time_for_nini = 1 / solutions[nini_per_hour]\n\n    return time_for_nini\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    # Start checking from the smallest 2-digit number which is 10 until the largest which is 99\n    for number in range(10, 100):\n        if number % 9 == 5 and number % 11 == 2:\n            # This number satisfies both conditions, so return it\n            return number\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # There are 20 keys and 20 doors.\n    # In the worst case, the warden tries the first key with all 20 doors, \n    # then the second key with the remaining 19 doors and so on.\n    # This forms a series: 20 + 19 + 18 + ... + 1\n    \n    # Calculating the sum of the series using the formula for the sum of the first n natural numbers\n    n = 20\n    num_attempts = (n * (n + 1)) // 2\n    \n    return num_attempts\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    # Prime factorization of 140 = 2^2 * 5 * 7\n    # Since the counts per pile are odd, we can't use the factor of 2\n    # Hence we only consider the odd prime factors, which are 5 and 7\n    # We need to find the number of ways to partition 140 as a product of numbers, \n    # however, we only count the partitions that do not include the factor 2.\n    # The exponents of the prime factors + 1 will give the number of divisors,\n    # but since we are excluding even numbers, we only take the odd prime factors.\n    # For a prime factor p with exponent e, the number of ways it can contribute \n    # to the piles is e+1 (including not choosing it at all).\n    \n    # We have 5^1 and 7^1 so there's (1+1)=2 ways to use 5 (either use it or don't)\n    # and (1+1)=2 ways to use 7 (either use it or don't).\n    counts = (1 + 1) * (1 + 1)  # ways to use 5 and 7\n    \n    return counts\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3 / 7\n    num_girls = total_students * fraction_girls\n    return int(num_girls)\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from stack B, the counts are:\n    # Stack A: 20, Stack B: 16\n    # To ensure Jerry wins, he should make sure that after his turn, \n    # the number of stones in the stacks are equal.\n    # Since the stacks are unequal after Tom's turn, Jerry should take stones from stack A.\n    \n    stones_to_take = 20 - 16 # Making the stacks equal\n    stack = 'A' # Stack from which Jerry should take the stones\n    \n    return stones_to_take, stack\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    num1 = 2017\n    num2 = 2018\n    num3 = 20172017\n    num4 = 20182018\n    num5 = 201720172017\n    num6 = 201820182018\n\n    ans = (num1 / num2 + num3 / num4) / (num5 / num6)\n    \n    return ans\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # As the newspaper is folded, each sheet will have 4 page numbers, two on the front and two on the back.\n    # Given that he takes the third sheet, we need to find the page numbers on that sheet.\n    # The first sheet will have page numbers 1, 2, 55, 56 (front: 1, 2; back: 55, 56).\n    # The second sheet will have page numbers 3, 4, 53, 54 (front: 3, 4; back: 53, 54).\n    # The third sheet will have page numbers 5, 6, 51, 52 (front: 5, 6; back: 51, 52).\n    \n    # Sum the page numbers of the third sheet.\n    sum_of_pages = 5 + 6 + 51 + 52\n    return sum_of_pages\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    apples_per_peach = 3 / 2\n    peaches_per_watermelon = 6\n\n    apples_per_watermelon = peaches_per_watermelon * apples_per_peach\n    \n    return int(apples_per_watermelon)\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    total_digits = 933\n    digits_per_page = 1\n    pages_counted = 0\n    digits_used = 0\n\n    while digits_used < total_digits:\n        pages_counted += 1\n        if pages_counted < 10:\n            digits_per_page = 1\n        elif pages_counted < 100:\n            digits_per_page = 2\n        else:\n            digits_per_page = 3\n        digits_used += digits_per_page\n\n    return pages_counted\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    total_cups = 30 + 50 + 20\n    average_cost_per_cup = total_cost / total_cups\n    \n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for page in range(1, 301):\n        if '3' in str(page):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 92):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15   # convert 9:15pm to minutes\n    end_time = (11 * 60) + 6     # convert 11:06pm to minutes\n\n    duration = end_time - start_time  # calculate the duration in minutes\n\n    return duration\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Total initial pens in Box A for each color\n    blue_A = red_A = black_A = green_A = 10\n    \n    # 20 pens are taken from Box A and placed into Box B\n    # Since we want at least 15 of each in Box A, we can take at most 5 of each color from Box A\n    pen_to_remove = 20\n    pens_moved = 0  # Count how many pens we moved\n\n    # Move pens from A to B, ensuring at least 15 pens of each color remain in A\n    for color_pens_A in [blue_A, red_A, black_A, green_A]:\n        pens_to_be_taken = min(color_pens_A - 15, pen_to_remove)\n        pen_to_remove -= pens_to_be_taken\n        pens_moved += pens_to_be_taken\n    \n    # The number of pens needed to be moved back to ensure 15 of each color in A\n    # is the number of pens moved from A to B (20 pens) minus the pens we actually moved\n    pens_to_move_back = 20 - pens_moved\n\n    return pens_to_move_back\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    ans = 1 / 8\n    return ans\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    milk_chocolates = 12\n    soft_centres = 16\n\n    # Since all milk chocolates could have soft-centres,\n    # the maximum number of plain chocolates with soft-centres would be:\n    # total soft-centres - all milk chocolates\n    max_plain_soft_centres = soft_centres - (total_chocolates - plain_chocolates)\n\n    # If all plain chocolates have soft-centres, which is the minimum case,\n    # then there are at least as many plain chocolates with soft-centres as plain chocolates.\n    min_plain_soft_centres = plain_chocolates\n\n    ans = (min_plain_soft_centres, max_plain_soft_centres)\n    return ans\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    total_students = 0\n    boys = 0\n    girls = 0\n    layer = 0\n\n    while True:\n        # Calculate the number of boys and girls in the current layer\n        if layer % 2 == 0:\n            boys_in_layer = (2 * layer + 1)**2 - (2 * layer)**2\n            boys += boys_in_layer\n        else:\n            girls_in_layer = (2 * layer + 1)**2 - (2 * layer)**2\n            girls += girls_in_layer\n\n        # Check if the difference between boys and girls matches the condition\n        if boys - girls == 32:\n            # Calculate the total number of students\n            total_students = (2 * layer + 1)**2\n            break\n\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    quotient = 29\n    remainder = 11\n\n    # dividend = divisor * quotient + remainder\n    # dividend + divisor = 431\n\n    # Combine the above equations to find the divisor\n    # divisor * quotient + remainder + divisor = 431\n    # divisor * (quotient + 1) + remainder = 431\n    # divisor = (431 - remainder) / (quotient + 1)\n\n    divisor = (431 - remainder) // (quotient + 1)\n    dividend = divisor * quotient + remainder\n\n    # The problem asks for the difference between the two numbers\n    difference = abs(dividend - divisor)\n\n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    violin_players = 11\n    violin_percentage = 12.5 / 100\n    \n    total_pupils = violin_players / violin_percentage\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the common number of each type of coin\n    x = symbols('x')\n\n    # Form the equation representing the total pence\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n\n    # Solve the equation for x\n    num_each_coin = solve(equation, x)[0]\n\n    # Calculate the total number of coins (4 types of coins)\n    total_coins = 4 * num_each_coin\n\n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n\n    equation1 = Eq(apples + pears, 105)\n    equation2 = Eq(apples - apples / 3, pears * 5/6)\n\n    solutions = solve((equation1, equation2), (apples, pears))\n\n    apples_sold = solutions[apples] / 3\n    pears_sold = solutions[pears] * 2 / 5\n\n    total_sold = apples_sold + pears_sold\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n\n    # Students A, B, C, and D are always next to each other.\n    # We can treat them as a single unit for the purpose of counting permutations.\n    num_units = 8  # 8 remaining students plus one unit of A,B,C,D\n\n    # Calculate the permutations of these 9 units.\n    permutations_units = factorial(num_units)\n    \n    # Now we need to account for the permutations of A, B, C, and D within their own unit.\n    permutations_within_unit = factorial(4)\n\n    # Total permutations is the product of both permutation counts.\n    total_permutations = permutations_units * permutations_within_unit\n\n    return total_permutations\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the weight of bag A, and y be the weight of bag B.\n    x, y = symbols('x y')\n\n    # Original ratio equation: 5x = 3y\n    original_ratio = Eq(5 * y, 3 * x)\n\n    # New ratio after transferring 10g from A to B: 7(x-10) = 5(y+10)\n    new_ratio = Eq(7 * (x - 10), 5 * (y + 10))\n\n    # Solve the system of equations for x and y.\n    solutions = solve((original_ratio, new_ratio), (x, y))\n\n    # Calculate the total weight: x + y\n    total_weight = solutions[x] + solutions[y]\n\n    return total_weight\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    # Since A:B:C = 4:5:6, let A = 4k, B = 5k, C = 6k for some integer k\n    # It is given that C is greater than A by 10\n    # So, 6k - 4k = 10 => 2k = 10 => k = 5\n    k = 5\n    \n    # Now calculate A, B, C using the value of k\n    A = 4 * k\n    B = 5 * k\n    C = 6 * k\n    \n    # The sum of A, B, and C is A + B + C\n    return A + B + C\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    number_of_girls = (number_of_boys / boys_to_girls_ratio) * 5\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Total matches played can be found through combinations (nC2) where n = number of students.\n    total_matches = (6 * 5) // 2\n    \n    # In each match, total of 2 points are distributed (either 2 and 0, or 1 and 1 in case of a tie).\n    total_points = total_matches * 2\n    \n    # The total points acquired by the five students.\n    points_acquired = 7 + 6 + 5 + 4 + 3\n    \n    # The remaining points is the score of the sixth student.\n    remaining_student_points = total_points - points_acquired\n    \n    return remaining_student_points\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for number in range(100, 201):\n        if number % 3 == 2 and number % 5 == 2 and number % 7 == 2:\n            return number\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    result = 48 * 925 * 38 * 435\n    zero_count = 0\n    while result % 10 == 0:\n        result //= 10\n        zero_count += 1\n    return zero_count\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    # Convert all masses to the same unit (grams) for comparison.\n    masses_in_grams = [30, 1000, 300, 2500, 3000, 150, 3]\n    # Find the largest mass.\n    largest_mass = max(masses_in_grams)\n    return largest_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from sympy import Rational\n\n    # Given values\n    thefts = 2\n    bark_prob_when_theft = Rational(9, 10) # Probability of the dog barking when a thief is around (0.9)\n\n    # Number of weeks in 1000 days\n    weeks_in_1000_days = 1000 / 7\n    # Number of times the dog barks in 1000 days\n    barks_in_1000_days = 3 * weeks_in_1000_days\n\n    # Probability of the dog barking at any given time (Assuming independence and neglecting overlap)\n    prob_bark = thefts / barks_in_1000_days\n\n    # Use Bayes' Theorem to calculate the probability of the theft given the dog has barked\n    # P(Theft|Bark) = P(Bark|Theft) * P(Theft) / P(Bark)\n    prob_theft_given_bark = (bark_prob_when_theft * thefts) / barks_in_1000_days\n\n    return prob_theft_given_bark\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n    \n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(apple + orange + grape + pineapple, 25)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n    \n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    fraction_of_girls = 6 / 11\n    number_of_girls = total_children * fraction_of_girls\n    number_of_boys = total_children - number_of_girls\n    \n    return int(number_of_boys)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n    \n    # Let the common difference be d and the number of lines be n\n    # Using the formula for the sum of an arithmetic series: n/2 * (2a + (n-1)d) = total_players\n    # And the last term can be expressed as: a + (n-1)d = last_line_players\n    # We need to find the value of d and we already know a and the total sum\n    \n    # Rearrange the second equation to express n in terms of d:\n    # n = (last_line_players - first_line_players + d) / d\n    \n    # Substitute the expression for n into the sum of arithmetic series equation:\n    # (last_line_players - first_line_players + d) / (2d) * (2 * first_line_players + (last_line_players - first_line_players + d) / d - 1) * d = total_players\n    # Simplify and solve for d\n    \n    # We will start with an initial assumption that the common difference 'd' is less than the difference between the last and first terms\n    for d in range(1, last_line_players - first_line_players + 1):\n        n = (last_line_players - first_line_players + d) // d\n        arithmetic_sum = n/2 * (2 * first_line_players + (n - 1) * d)\n        if arithmetic_sum == total_players:\n            return d\n\n    # If no solution is found within the loop, it means our initial assumption was wrong and the common difference is not valid.\n    # However, the problem guarantees that there's a solution, so we won't include an error handling case.\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let x be the number of pupils\n    x = Symbol('x')\n\n    # If he gives 13 stickers to each pupil, he will have an excess of 190 stickers.\n    equation1 = 13*x + 190\n\n    # If he gives 17 stickers to each pupil, he will have an excess of 50 stickers.\n    equation2 = 17*x + 50\n\n    # Since the number of stickers is the same, set the two equations equal to each other.\n    equation = equation1 - equation2\n\n    # Solve for number of pupils, x\n    number_of_pupils = solve(equation, x)\n\n    # Calculate the total number of stickers\n    total_stickers = 13*number_of_pupils[0] + 190\n\n    return total_stickers\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # Create the smallest and largest numbers with the digits 1 to 9\n    smallest_number = int(''.join(sorted('123456789')))\n    largest_number = int(''.join(sorted('123456789', reverse=True)))\n    \n    # The smallest possible difference would be between the two consecutive numbers\n    # formed by swapping the two last digits of the largest number\n    almost_largest_number = int(''.join(sorted('123456789', reverse=True)[:7] + \n                                     sorted('123456789', reverse=True)[7:][::-1]))\n    \n    # Calculate the difference\n    difference = largest_number - almost_largest_number\n    return difference\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Original numbers of boys and girls\n    original_ratio = Eq(boys + 65, girls)\n    \n    # After some boys and girls left the hall\n    boys_left = boys - (2/5) * boys\n    girls_left = girls - (3/7) * girls\n    after_recess = Eq(boys_left, girls_left)\n    \n    # Solve the equations\n    solutions = solve((original_ratio, after_recess), (boys, girls))\n    total_left = solutions[boys] + solutions[girls] - ((2/5) * solutions[boys] + (3/7) * solutions[girls])\n\n    return total_left\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the symbol 'b' represent the total number of bricks\n    b = symbols('b')\n\n    # Half of the number of bricks minus 26 on the first trip\n    first_trip = (b / 2) - 26\n\n    # Half of the remaining bricks plus 11 on the second trip\n    second_trip = ((b - first_trip) / 2) + 11\n\n    # 68 bricks moved on the third trip\n    third_trip = 68\n\n    # 25 bricks still unmoved\n    remaining_bricks = 25\n\n    # Setting up the equation for the total number of bricks\n    equation = Eq(first_trip + second_trip + third_trip + remaining_bricks, b)\n\n    # Solving for 'b'\n    solution = solve(equation, b)\n\n    # Returning the result which is the total number of bricks at first\n    return solution[0]\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    number_of_kids = 3\n    arrangements = factorial(number_of_kids)\n\n    return arrangements\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    current_sum = 22\n    target_sum = 40\n\n    # The sum of their ages increases by 2 each year since they both get older by 1 year.\n    years_to_target_sum = (target_sum - current_sum) // 2\n\n    return years_to_target_sum\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    total_pupils = 1690\n    more_boys = 90\n\n    # Let the number of girls be g\n    # Then the number of boys will be g + 90\n    # Therefore, the total number of pupils is g + (g + 90) = 1690\n    g = (total_pupils - more_boys) // 2  # Number of girls\n    b = g + more_boys  # Number of boys\n\n    # The ratio of the number of girls who can swim to those who cannot is 31 : 49\n    # Let the common factor for this ratio be x\n    # So, the number of girls who can swim is 31x\n    # And the number of girls who cannot swim is 49x\n    # Therefore, the total number of girls is 31x + 49x = g\n    # Hence, x = g / 80\n    x = g // 80\n    girls_swim = 31 * x\n    girls_cannot_swim = 49 * x\n\n    # The number of boys who can swim is 120 less than the number of boys who cannot swim\n    # Let the number of boys who cannot swim be y\n    # Therefore, the number of boys who can swim is y - 120\n    # Thus, the total number of boys is (y - 120) + y = b\n    y = (b + 120) // 2\n    boys_swim = y - 120\n    boys_cannot_swim = y\n\n    # Therefore, the total number of pupils who cannot swim is the sum of girls and boys who cannot swim\n    cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return cannot_swim\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    count = 0\n    for i in range(1, 100): # Assume a reasonable upper bound for a class size\n        if (i - 1) * (i - 1) < i:\n            # Check if the 2nd position in line leaves a perfect square of remaining students\n            if (i ** 2 - 1) % (i - 1) == 0:\n                count = i ** 2\n                break\n    return count\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    pages_with_1_digit = 9  # Pages from 1 to 9\n    pages_with_2_digits = 20 - pages_with_1_digit  # Pages from 10 to 20\n\n    total_digits = (pages_with_1_digit * 1) + (pages_with_2_digits * 2)\n    \n    return total_digits\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    return 125 * 34 * 25 * 4 * 8\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # Create a dictionary to store the number of ways to reach each step\n    ways_to_step = {0: 1}  # there's 1 way to stay at the ground (step 0)\n\n    # Iterate over each step from 1 to 10\n    for step in range(1, 11):\n        # Initialize the number of ways to get to the current step as 0\n        ways_to_step[step] = 0\n        \n        # Add the number of ways to reach the current step from two steps before\n        if step - 2 in ways_to_step:\n            ways_to_step[step] += ways_to_step[step - 2]\n        \n        # Add the number of ways to reach the current step from three steps before\n        if step - 3 in ways_to_step:\n            ways_to_step[step] += ways_to_step[step - 3]\n\n    # The answer is the number of ways to reach the 10th step\n    return ways_to_step[10]\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n    minimum_dividend = smallest_divisor * quotient + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    num = \"1998\"\n    n = len(num)\n    while int(num) % 33 != 0:\n        num += \"1998\"\n        n += len(\"1998\")\n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    first_element = group_number\n    second_element = group_number ** 2\n    third_element = group_number ** 3\n    sum_of_numbers = first_element + second_element + third_element\n    return sum_of_numbers\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # original combination lock number ABCD (A*1000 + B*100 + C*10 + D)\n    # new combination lock number DABC (D*1000 + A*100 + B*10 + C)\n    # DABC - ABCD = 5877\n    # (D*1000 + A*100 + B*10 + C) - (A*1000 + B*100 + C*10 + D) = 5877\n    # D*1000 - A*1000 + A*100 - B*100 + B*10 - C*10 + C - D = 5877\n    # 999D - 900A - 90B - 9C = 5877\n    # 111D - 100A - 10B - C = 5877/9\n    # D - A - 0.1B - 0.01C = 653\n    # Since A, B, C, D are digits, 0 <= A, B, C, D <= 9\n\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(10):\n                    if D - A - 0.1*B - 0.01*C == 653 and (D*1000 + A*100 + B*10 + C) - (A*1000 + B*100 + C*10 + D) == 5877:\n                        return A*1000 + B*100 + C*10 + D\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3/2\n    girls = (boys / 3) * 2\n    return girls\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    miles_per_run = 1/4\n    total_miles = 3.75\n\n    num_runs = total_miles / miles_per_run\n\n    return int(num_runs)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 5 == 3 and num % 6 == 4 and num % 9 == 1:\n            return num\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    return 10 * 21 // 14\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n    \n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for num in range(10, 100, 10):  # Two-digit numbers ending with 0, step by 10\n        if num % 6 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    johnny_answer = 5839\n    correct_answer = 5832 + (7 * 10)\n    return johnny_answer == correct_answer, correct_answer\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length = 300  # converting meters to centimeters\n    lengths = [147, 32.5, 67]\n    \n    fourth_length = total_length - sum(lengths)\n    return fourth_length\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    return 308 - 197\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    total_papers = 18\n    interval = 3\n\n    num_leaves = total_papers // interval\n\n    return num_leaves\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    # Probabilities of passing the test\n    p_A = 0.5\n    p_B = 0.4\n    p_C = 0.2\n    \n    # Probabilities of each possible outcome\n    p_0_pass = (1 - p_A) * (1 - p_B) * (1 - p_C)\n    p_1_pass = (p_A * (1 - p_B) * (1 - p_C) +\n                (1 - p_A) * p_B * (1 - p_C) +\n                (1 - p_A) * (1 - p_B) * p_C)\n    p_2_pass = (p_A * p_B * (1 - p_C) +\n                p_A * (1 - p_B) * p_C +\n                (1 - p_A) * p_B * p_C)\n    p_3_pass = p_A * p_B * p_C\n    \n    # Finding the most likely number of people to pass\n    probabilities = [p_0_pass, p_1_pass, p_2_pass, p_3_pass]\n    most_likely_outcome = probabilities.index(max(probabilities))\n    \n    return most_likely_outcome\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    ans = (101 + 234 + 567) * (234 + 567 + 89) - (101 + 234 + 567 + 89) * (234 + 567)\n    return ans\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    # In order to maximize the number of different positive integers that add up to 27,\n    # we would need to start with 1, then use 2, then 3, and so on, because using the smallest\n    # possible numbers maximizes the count of integers we can use.\n    # The sum of the first n natural numbers is given by the formula n(n+1)/2.\n    # We need to find the maximum n for which n(n+1)/2 <= 27.\n\n    n = 1\n    while n * (n + 1) // 2 <= 27:\n        n += 1\n    # The loop will exit when n(n+1)/2 is greater than 27,\n    # so we subtract 1 to find the maximum n that satisfies the condition.\n    n -= 1\n\n    return n\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # Start with the integer part of the series\n    for i in range(2, 11):\n        ans += (i-1)*(1/i)\n\n    return ans\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    time_for_5_intervals = 30\n    time_per_interval = time_for_5_intervals / 5\n    total_intervals = 9\n    total_time = time_per_interval * total_intervals\n    return total_time\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of watches as w and the number of caps as c\n    w, c = symbols('w c')\n    \n    # Initial ratio of watches to caps is 8:11\n    initial_ratio = Eq(w/c, 8/11)\n    \n    # After selling 88 caps, the new number of caps is (c - 88)\n    # The new ratio of watches to caps becomes 12:11\n    new_ratio = Eq(w/(c - 88), 12/11)\n    \n    # We solve the system of equations to find the values of w and c\n    solutions = solve((initial_ratio, new_ratio), (w, c))\n    \n    # The solution gives us the number of watches at the stall\n    return solutions[w]\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_cm = 105  # Convert 1.05 meters to cm\n    longer_piece = (2 / 3) * total_length_cm  # Since one piece is twice as long as the other\n    return longer_piece  # This will give the length in cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10):\n            if A == (D / 4):\n                for B in range(0, 10):\n                    if B == A - 1:\n                        for C in range(0, 10):\n                            if C != A and C != B and C != D:\n                                ABCD = (A * 1000) + (B * 100) +(C * 10) + D\n                                DCBA = (D * 1000) + (C * 100) + (B * 10) + A\n                                if 4 * ABCD == DCBA:\n                                    return ABCD\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # pattern in groups is one black followed by two whites: BWB\n    # each group contributes 2 white balls, so we get the number of groups\n    groups = 92 // 2\n    \n    # every group has 3 balls (1 black and 2 white)\n    total_balls = groups * 3\n\n    # we need to take into account the pattern starts with a black ball\n    # thus, if there is a remainder of 1 while dividing by 2, it means \n    # that there is one additional black ball that is not accounted for\n    if 92 % 2 != 0:\n        total_balls += 1\n\n    return total_balls\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # To win, Jack needs to put Ken in a position where no matter what Ken picks\n    # Jack can always leave a multiple of 12 for Ken's next turn.\n    # To ensure this, after Ken's turn we want to have 2016 (which is 12 * 168)\n    # Jack's first move should be to take enough coins to leave a multiple of 12.\n    # Since 2015 is not divisible by 12, we can find the remainder to get the first move.\n\n    total_coins = 2015\n    remainder = total_coins % 12\n    if remainder == 0:\n        # If it divides exactly by 12, Jack can choose any number as no optimal move exists.\n        return 1\n    else:\n        # The first move should be to pick up the remainder which will leave a multiple of 12.\n        first_move = remainder\n\n    return first_move\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the graph passes through the origin, we know that b = 0 in the equation y = mx + b\n    # Now we need to find the slope m using the point (4, 8)\n    \n    # Using the formula for slope (m) \"change in y / change in x\"\n    x1, y1 = 0, 0  # Origin\n    x2, y2 = 4, 8  # The point given\n    \n    m = (y2 - y1) / (x2 - x1)  # Slope\n    \n    # Substitute b = 0 into the equation y = mx + b\n    ans = f\"y = {m}x + 0\"  # You could also write just y = mx, since b is 0\n    \n    return ans\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def find_pattern(number):\n        return str(number).count('0') + str(number).count('6') + str(number).count('8') * 2 + str(number).count('9')\n\n    ans = find_pattern(2015)\n    return ans\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n\n    # Given numbers\n    num1 = 16\n    num2 = 28\n\n    # Calculate the Highest Common Factor (Greatest Common Divisor)\n    hcf = gcd(num1, num2)\n\n    return hcf\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    for pears in range(1, 1000):  # assuming sensible upper limit for pears\n        if (pears % 6 == 2) and ((pears + 3) % 7 == 0):\n            return pears\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Let the age of the youngest dwarf be x, so the ages are x, (x+1), (x+2), ..., (x+6)\n    # The sum of the ages of the youngest three is then x + (x+1) + (x+2) = 42\n\n    # Solve for x\n    x = (42 - 3) // 3 # Subtract 3 to balance the +1, and +2, then divide by 3 for the youngest three dwarfs\n\n    # The age of the oldest one is then (x+6)\n    return x + 6\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    # Let's denote the initial number of passengers as x.\n    # After the first stop, (2/5)x passengers got off, leaving (3/5)x passengers on the bus.\n    # At the next stop, (1/3) of the remaining (3/5)x passengers got off, leaving (2/3)*(3/5)x = (2/5)x.\n    # According to the problem, this is equal to 22 passengers.\n\n    # Let's solve the equation (2/5)x = 22 for x.\n    x = (22 * 5) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10  # Original length in cm\n    shorten_length_mm = 4  # Shortened length in mm\n    shorten_length_cm = shorten_length_mm / 10  # Convert mm to cm\n\n    # Calculate the new length\n    new_length_cm = original_length_cm - shorten_length_cm\n\n    return new_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stickers John originally had,\n    # and let y be the original number of stickers Peter had.\n    # According to the problem, Sam originally had 7/5 times the stickers Peter had.\n    x, y = symbols('x y')\n\n    # Sam gave 20% of his stickers to John, and so did Peter.\n    # So John has his original amount plus 20% of Sam's (7/5 * y) and Peter's (y) stickers\n    # John's stickers increased by 80%, which means his new amount is 180% of his original amount, or 1.8 * x.\n    # Sam ends up with 20 stickers more than John at the end,\n    # which means Sam has 80% of his original amount plus 20 more than John's final amount.\n    equation1 = Eq(0.8 * (7/5 * y) + 20, 1.8 * x)\n    # Peter's final amount is 80% of his original amount.\n    # John's final amount is 1.8 * x.\n    equation2 = Eq(0.8 * y + 0.2 * (7/5 * y), 1.8 * x)\n\n    # Solve the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The question asks for the number of stickers Peter had at first, which is y\n    return solutions[y]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n    \n    # Distance covered at each speed in meters\n    distance1 = 420\n    distance2 = 620\n    # The total distance is 1200, so we can calculate distance3 as follows\n    distance3 = 1200 - distance1 - distance2\n    \n    # Time = Distance / Speed, calculate time spent for each segment\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    # Total time is the sum of all times\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total = 4 * 89  # Total score for 4 tests\n    target_average = 95\n\n    extra_tests = 0\n    while True:\n        extra_tests += 1\n        new_total_tests = 4 + extra_tests\n        new_total_score_needed = new_total_tests * target_average\n        extra_score_needed = new_total_score_needed - current_total\n        \n        if extra_score_needed <= extra_tests * 100:\n            break\n\n    return extra_tests\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # Since there are three colors, taking one from each color will give us 3 markers.\n    # To ensure we have at least two markers of the same color, we need to take one more.\n    # That's because after 3 markers there's no way to avoid having two of the same color.\n    return 3 + 1\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $2 notes and $10 notes\n    notes_2, notes_10 = symbols('notes_2 notes_10')\n\n    # Create the equations based on the problem statement\n    # The total number of notes is 72\n    equation1 = Eq(notes_2 + notes_10, 72)\n    # After spending, the number of $10 notes is twice the number of $2 notes\n    equation2 = Eq(notes_10 - 0.90 * notes_10, 2 * (notes_2 - 0.75 * notes_2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (notes_2, notes_10))\n\n    # Calculate the amount spent on the gift from the percentages given\n    gift_cost = 0.90 * solutions[notes_10] * 10 + 0.75 * solutions[notes_2] * 2\n\n    return gift_cost\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    # let A, B, C represent the individual rates of the hoses\n    # let x represent the total work which is filling the pool once (x=1)\n\n    # A + B = 1/9 (the work done per hour by hoses A and B together)\n    # A + C = 1/12\n    # B + C = 1/18\n\n    # The system of equations to be solved:\n    # A + B = 1/9\n    # A + C = 1/12\n    # B + C = 1/18\n\n    A_plus_B = 1/9\n    A_plus_C = 1/12\n    B_plus_C = 1/18\n\n    # Summing all the equations, we get:\n    # 2A + 2B + 2C = 1/9 + 1/12 + 1/18\n    # Dividing both sides by 2, we get:\n    # A + B + C = (1/9 + 1/12 + 1/18) / 2 \n\n    A_B_C = (A_plus_B + A_plus_C + B_plus_C) / 2\n\n    # Since A + B + C represents the work done per hour by all three together,\n    # the total time taken when all three hoses are turned on is the reciprocal\n    # of the work done per hour by all three.\n\n    total_time = 1 / A_B_C\n    return total_time\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    # Let x be the number of $2 notes, and y be the number of $5 notes\n    # We have two equations:\n    # 1) x + y = 58\n    # 2) 2x + 5y = 164\n\n    # We will use substitution or elimination to solve this system of equations.\n    # I will use substitution for the simplicity of the code.\n\n    for x in range(59):  # Since x + y = 58, the maximum value of x we need to check is 58\n        y = 58 - x  # From equation 1, we can express y in terms of x\n        total_value = 2 * x + 5 * y  # Calculate the total value from equation 2 with current x and y\n        if total_value == 164:  # If the total value matches the condition, we have a solution\n            return y  # Return the number of $5 notes\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    seventh_term = 105\n    term_difference = 120 - 105\n    nth_term = 100\n    \n    return seventh_term + (nth_term - 7) * term_difference\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Start with two boxes having the same minimum number of marbles\n    # and each subsequent box having the next even number of marbles.\n    marbles = [2, 2]  # Start with two boxes with 2 marbles each\n    box_count = 10    # Total number of boxes\n\n    # Starting from 4, add even numbers of marbles to the list\n    # until we have 10 boxes in total.\n    next_marble_count = 4\n    while len(marbles) < box_count:\n        marbles.append(next_marble_count)\n        next_marble_count += 2\n\n    # The smallest number of marbles is the sum of the marbles in the boxes.\n    ans = sum(marbles)\n    return ans\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    from sympy import Rational, symbols, Eq, solve\n    \n    # Prices and quantities\n    cupcakes_quantity_initial = 36\n    muffins_quantity = 32\n    cupcakes_quantity_additional = symbols('cupcakes_quantity_additional')\n    \n    # Total money spent on initial purchase (5/9 of total money) and on additional cupcakes (1/6 of total money)\n    total_money_initial = Rational(5, 9) + Rational(1, 6)\n    \n    # Price of cupcakes and muffins with the given ratio\n    cupcake_price, muffin_price = symbols('cupcake_price muffin_price')\n    price_ratio = Eq(cupcake_price, 3 * muffin_price)\n    \n    # Money spent on initial cupcakes and muffins\n    initial_purchase = Eq(cupcakes_quantity_initial * cupcake_price + muffins_quantity * muffin_price,\n                          187.50 - (Rational(1, 6) * cupcakes_quantity_additional * cupcake_price))\n    \n    # Total money spent on all cupcakes (initial and additional)\n    total_cupcakes_cost = Eq(cupcakes_quantity_initial * cupcake_price + cupcakes_quantity_additional * cupcake_price,\n                             187.50)\n    \n    # Solve the equations simultaneously\n    solutions = solve((price_ratio, initial_purchase, total_cupcakes_cost), (cupcake_price, muffin_price, cupcakes_quantity_additional))\n    \n    # Money spent on muffins\n    muffins_cost = solutions[muffin_price] * muffins_quantity\n    \n    return muffins_cost\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    return sum(range(1, 10)) + sum(range(4, 9))\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    \n    # Applying the Pigeonhole Principle\n    pigeons_in_most_crowded_cage = (total_pigeons + total_cages - 1) // total_cages\n\n    return pigeons_in_most_crowded_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    # As there are 1007 parterres in a straight line, there must be a sprinkler between each pair of parterres.\n    # Therefore, the number of sprinklers is one less than the number of parterres.\n    num_sprinklers = 1007 - 1\n\n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n\n    # James' error: He multiplied the mass of a papaya by 4 instead of 3.\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            break\n    return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    num1 = 387\n    num2 = 729\n\n    ans = (num1 + num2) / 2\n\n    return ans\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n    \n    stickers_ratio = Eq(marry, 7/5 * alexis)\n    charlotte_after = charlotte + marry*0.2 + alexis*0.2\n    charlotte_increased = Eq(charlotte_after, charlotte*1.8)\n    marry_charlotte_diff = Eq(marry - 0.2*marry, charlotte_after + 20)\n\n    solutions = solve((stickers_ratio, charlotte_increased, marry_charlotte_diff), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    perm = permutations(digits, 3)\n    ans = len(list(perm))\n    return ans\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    remaining_fraction = 5/9\n    given_away = 440\n\n    initial_amount = given_away / (1 - remaining_fraction)\n\n    return initial_amount\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n\n    # Let total_length be the total road length\n    # According to the problem:\n    # 8 + (1/6)*total_length + 4 = (5/12)*total_length\n    equation = Eq(8 + (1/6)*total_length + 4, (5/12)*total_length)\n\n    # Solve the equation for total_length\n    solutions = solve(equation, total_length)\n\n    # Since we are dealing with thousands of feet, we don't need to multiply by 1000\n    return solutions[0]\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    multiple = 35\n    while True:\n        if sum(map(int, str(multiple))) == 35:\n            if str(multiple).endswith('35'):\n                return multiple\n        multiple += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    # Since there are wheat on each of the four corners, these don't count towards the \"in between\" counts.\n    # So we subtract the 4 corner wheat from the total to handle just the wheat on the sides in between the corners.\n    total_wheat = 116 - 4\n    \n    # The total length of the sides of the field (perimeter) without counting corners.\n    # Each side's length is counted twice since we are considering a rectangle.\n    # Each corner should only be counted once, so subtracting 4 accounts for that (each corner is part of two sides).\n    perimeter = 2 * (144 + 204) - 4\n    \n    # The total number of gaps between the wheat is the same as the number of wheat on the sides minus 1.\n    # Since the wheat are evenly spaced, this should be the same for all sides.\n    gaps_between_wheat = total_wheat - 1\n    \n    # To find the distance between each wheat, divide the total length by the number of gaps.\n    distance_between_wheat = perimeter / gaps_between_wheat\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_pine_nuts = 112\n    pine_nuts_sunny = 20\n    pine_nuts_rainy = 12\n\n    # The difference in the number of pine nuts between a sunny day and a rainy day\n    difference = pine_nuts_sunny - pine_nuts_rainy\n\n    # Hypothesizing all days are sunny and then finding the excess pine nuts\n    # Hypothesis gives us the total nuts as if all days were sunny\n    total_as_if_sunny = total_days * pine_nuts_sunny\n    excess_nuts = total_as_if_sunny - total_pine_nuts\n\n    # The excess nuts divided by the difference in nuts gives us the rainy days\n    rainy_days = excess_nuts // difference\n\n    return rainy_days\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    min_cost = float('inf')\n    # prices in pounds\n    price_one = 0.15\n    price_two = 0.28\n    price_five = 0.60\n    # max numbers of packs for each type\n    max_one = 17\n    max_two = 17 // 2\n    max_five = 17 // 5\n\n    for num_five in range(max_five + 1):\n        for num_two in range(max_two + 1):\n            num_one = 17 - num_five * 5 - num_two * 2\n            if num_one >= 0:\n                cost = num_one * price_one + num_two * price_two + num_five * price_five\n                min_cost = min(min_cost, cost)\n    \n    return round(min_cost, 2)\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, the number of games equals the number of players minus 1\n    num_players = 4\n    num_rounds = num_players - 1\n    return num_rounds\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"4/4/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"18/5/2023\", \"%d/%m/%Y\")\n\n    day_off = (end_date - start_date).days + 1\n    \n    return day_off\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed of the train in meters per second\n    time = 5    # time in seconds\n    length = speed * time  # distance = speed * time\n    \n    return length\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for _ in range(6):\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for Rachel and Alice's original amounts\n    rachel, alice = symbols('rachel alice', integer=True)\n    \n    # Equation for if Rachel gives Alice 10 pieces, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # Equation for after they both eat 8 pieces, Rachel has 3 times as many as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate the total amount of candy originally\n    total_candy = solutions[rachel]+ solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # Equation for the total mushrooms\n    equation1 = Eq(first_hour + second_hour, 40)\n    # Equation for the difference between the two hours\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    total_spent = 59\n    towel_cost = 10\n    brush_cost = 3\n    brushes = 0\n\n    while (total_spent - brushes * brush_cost) % towel_cost != 0:\n        brushes += 1\n        if brushes * brush_cost >= 10:\n            break\n\n    return brushes - 1  # subtract 1 because we went over £10 in the loop\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # Original expression without brackets\n    original_expression = 285 + 15 / 5 - 2\n    \n    # Possible bracket insertions (assuming brackets don't enclose the entire expression as it wouldn't change the result):\n    # (285 + 15) / (5 - 2)\n    # (285 + 15) / 5 - 2\n    # 285 + (15 / 5) - 2\n    # 285 + (15 / (5 - 2))\n    # 285 + 15 / (5 - 2)\n    \n    # Unique calculation results\n    unique_results = set()\n    \n    # Evaluate each possible bracket insertion\n    unique_results.add((285 + 15) / (5 - 2))\n    unique_results.add((285 + 15) / 5 - 2)\n    unique_results.add(285 + (15 / 5) - 2)\n    unique_results.add(285 + (15 / (5 - 2)))\n    unique_results.add(285 + 15 / (5 - 2))\n    \n    # Number of different results\n    return len(unique_results)\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    result = 71\n    subtracted = result - 8\n    original_number = subtracted / 7\n    return original_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "def solution():\n    from fractions import Fraction\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    # There are 2 choices for the first digit (1 or 8)\n    # There are 2 choices left for the second digit\n    # There is only 1 choice left for the third digit\n    # So we multiply the possibilities\n    count = 2 * 2 * 1\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    blue = 11\n\n    ans = pink + grey + 1  # draw all pink and grey marbles, and then one more to ensure a blue marble is drawn\n    return ans\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of teddy bears she made on the first day\n    x = symbols('x')\n\n    # Since each day she made 2 more bears than the day before, the number on each day forms an arithmetic sequence\n    # 1st day: x, 2nd day: x+2, 3rd day: x+4, 4th day: x+6, 5th day: x+8\n    # The sum S of an arithmetic sequence is the average of the first and last term times the number of terms, hence\n    # S = (first term + last term) * number of terms / 2\n    # In our case S = (x + (x + 8)) * 5 / 2\n\n    # We are given the total number of bears is 35\n    total_bears = 35\n    equation = Eq((x + (x + 8)) * 5 / 2, total_bears)\n\n    # Solve the equation to find x\n    first_day_bears = solve(equation, x)[0]\n\n    # Now calculate the number of teddy bears on the 5th day which is (first_day_bears + 8)\n    fifth_day_bears = first_day_bears + 8\n\n    return fifth_day_bears\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    tax_rate = 7.5 / 100\n    tax_paid = 30\n    \n    computer_price = tax_paid / tax_rate\n    \n    return computer_price\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_question_correct = 10\n    second_question_correct = 15\n    both_questions_correct = 7\n\n    only_one_correct = first_question_correct + second_question_correct - (2 * both_questions_correct)\n\n    return only_one_correct\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    percentage = (3 / 10) / (6 / 7) * 100\n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boys, g represent the number of girls\n    b, g = symbols('b g')\n\n    # Formulate the equations based on the given conditions\n    equation1 = Eq(g - b, 30)                               # 30 less boys than girls\n    equation2 = Eq(b - (3/5)*b, g - (5/8)*g)  # Boys and girls remaining are equal\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    # Let the initial number of dragonflies be x\n    # Then the initial number of frogs is x + 9\n    # After the magic show, there are 11 frogs and 10 dragonflies in total\n\n    dragonflies_before = 10\n    frogs_before = 11\n\n    # Because each dragonfly was a frog before and vice versa,\n    # the total number before and after should be equal.\n    # So the equation is: initial_frogs + initial_dragonflies = frogs_before + dragonflies_before\n\n    initial_frogs = frogs_before + dragonflies_before - 9  # subtract 9 because initial_frogs = x + 9\n\n    return initial_frogs\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    count = 0\n\n    for perm in permutations(range(1, 9)):\n        coprime_adjacent = True\n        for i in range(1, len(perm)):\n            if gcd(perm[i], perm[i-1]) != 1:\n                coprime_adjacent = False\n                break\n        if coprime_adjacent:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers_to_subtract = [9, 19, 29, 39, 49, 59]\n    ans = 300 - sum(numbers_to_subtract)\n    return ans\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    expressions = [\n        '(285+15)÷5-2', '285+(15÷5)-2', '285+15÷(5-2)',\n        '285+15÷5-2', '(285+15÷5)-2', '285+(15÷5-2)',\n        '((285+15)÷5)-2', '285+((15÷5)-2)', '285+(15÷(5-2))',\n        '(285+15)÷(5-2)'\n    ]\n    \n    results = set()\n    for expr in expressions:\n        # We use eval to compute the result of each expression.\n        # However, eval is dangerous for untrusted input. Here it is okay because we control the content.\n        results.add(eval(expr.replace('÷', '/')))\n\n    return len(results)\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n    \n    s = (amy_apples - john_apples) // 2\n    \n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    ans = (4 * 4) + 24\n    return ans\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    return sum([i if i % 2 == 0 else -i for i in range(1, 101)])\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n\n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # Let the work done by A, B and C per hour be a, b and c respectively.\n    # We have the following equations:\n    # 1. a + b = 1/3 (since they finish the job in 3 hours together)\n    # 2. b + c = 1/4 (since B and C finish the job together in 4 hours)\n    # 3. a + c = 1/8 (since A and C finish the job together in 8 hours)\n\n    # Adding all equations gives:\n    # 2*(a + b + c) = 1/3 + 1/4 + 1/8\n    # a + b + c = (1/3 + 1/4 + 1/8) / 2\n\n    total_work_rate = (1/3 + 1/4 + 1/8) / 2\n    # Time taken by all to complete the job is the reciprocal of total work rate\n    total_time = 1 / total_work_rate\n\n    return total_time\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Equation representing the sugar concentration of the final mixture\n    equation = Eq(0.45 * 2 + 0.15 * x, 0.25 * (2 + x))\n\n    # Solve the equation for x\n    amount_needed = solve(equation, x)\n\n    return amount_needed[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n\n    equation1 = Eq(johnson + vicky, 48)\n    equation2 = Eq(vicky + 8, johnson - 2)\n\n    solutions = solve((equation1, equation2), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the number of candies and k be the number of kids.\n    c, k = symbols('c k')\n\n    # If every kid eats 18 candies, then 12 more candies are needed.\n    # So, 18 * k = c - 12 (1)\n    equation1 = Eq(18 * k, c - 12)\n\n    # If every kid eats 15 candies, the candies are just enough\n    # to be distributed to 2 more kids.\n    # So, 15 * (k + 2) = c (2)\n    equation2 = Eq(15 * (k + 2), c)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (c, k))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys_in_line = 3\n    girls_in_line = 2\n    total_boys = 42\n\n    # Calculate the ratio of boys to girls\n    ratio = boys_in_line / girls_in_line\n\n    # Calculate how many girls there are based on the total number of boys\n    total_girls = total_boys / ratio\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    S = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = str(S)[-5:]\n    return sum(map(int, last_five_digits))\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    # Let the original number be x\n    # Her operation: (x + 6) * 7 = 77\n    # Inverse the operation to find x\n    result_after_addition = 77 / 7\n    original_number = result_after_addition - 6\n    return int(original_number)\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of cookies Sam and Tim originally had\n    sam, tim = symbols('sam tim')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(sam + tim, 1170)  # total cookies\n    equation2 = Eq(sam - sam/4 + (tim + tim/5) - 663, tim + tim/5)  # cookies after eating and buying\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, tim))\n\n    # Calculate how many cookies Sam ate\n    cookies_eaten = solutions[sam] / 4\n\n    return cookies_eaten\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    weight_kg = 0.6\n    cost_per_kg = total_cost / weight_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of cupcakes Eugene has as 'e' and David 'd'\n    e, d = symbols('e d')\n\n    # David has thrice as many cupcakes as Eugene\n    equation1 = Eq(d, 3 * e)\n\n    # David has 14 more cupcakes than Eugene\n    equation2 = Eq(d, e + 14)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (e, d))\n\n    eugene_cupcakes = solutions[e]\n    david_cupcakes = solutions[d]\n\n    # The total number of cupcakes is the sum of Eugene's and David's cupcakes\n    total_cupcakes = eugene_cupcakes + david_cupcakes\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    daily_pick = 24 / 6\n    total_pick = daily_pick * 8\n    return total_pick\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for number in range(200, 301):\n        if (all(number % i == 1 for i in [2, 3, 4, 6]) and number % 7 == 0):\n            return number\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Let x be the number of stamps Sally gave to Ting\n    sally = 40\n    ting = 32\n    x = symbols('x')\n\n    # After giving x stamps to Ting, Sally has 40-x stamps\n    new_sally = 40 - x\n    # Ting has 32+x stamps\n    new_ting = 32 + x\n\n    # They have stamps in the ratio 1:2\n    ratio_eq = Eq(new_sally / new_ting, 1 / 2)\n\n    # Solve for x\n    x_value = solve(ratio_eq, x)[0]\n    # Calculate the number of stamps Ting has in the end\n    final_ting_stamps = ting + x_value\n\n    return final_ting_stamps\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    # Jerry's work rate\n    jerry_rate = 1 / 18\n    # Combined work rate of Tom and Jerry\n    combined_rate = 1 / 6\n    # Tom's work rate\n    tom_rate = combined_rate - jerry_rate\n    # Time taken for Tom to do the job by himself\n    tom_time = 1 / tom_rate\n    return tom_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    money = 20\n    price_per_packet = 4\n    sweets_per_packet = 8\n    free_sweets_per_two_packets = 1\n\n    packets_bought = money // price_per_packet\n    free_sweets = (packets_bought // 2) * free_sweets_per_two_packets\n\n    total_sweets = (packets_bought * sweets_per_packet) + free_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # Sum of first 7 positive integers as they all get at least one piece of candy\n    sum_first_seven = sum(range(1, 8))\n    # Rest of the candies to be given to the child who gets the most\n    remaining_candies = 88 - sum_first_seven\n    return remaining_candies\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time spent walking at the increased speed\n    x = symbols('x')\n\n    # Initial speed is 150 m/min for 10 minutes, so the distance covered is 150 * 10\n    initial_distance = 150 * 10\n\n    # After increasing speed, the speed becomes 200 m/min (150 + 50)\n    increased_speed = 150 + 50\n\n    # The distance covered at the increased speed is 200 * x\n    increased_distance = increased_speed * x\n\n    # Total distance covered is the sum of the two distances\n    total_distance = initial_distance + increased_distance\n\n    # We know the total distance is 3700 meters, so we set up the equation\n    distance_equation = Eq(total_distance, 3700)\n\n    # Solve for x\n    time_increased_speed = solve(distance_equation, x)[0]\n\n    # Total time spent walking in the park is 10 minutes + time spent walking at increased speed\n    total_time = 10 + time_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1 / 4)\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys, 1.4 * girls)\n    equation2 = Eq(boys - 24, 1.5 * (girls - 24))\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    n = 16\n    num_zeroes = 0\n    while n > 0:\n        n //= 5\n        num_zeroes += n\n    return num_zeroes\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    initial_pink = 5\n    total_counters = 5 + 7 + 8\n\n    # Initial chance of choosing a pink counter\n    initial_chance = initial_pink / total_counters\n\n    # Double the chance\n    target_chance = 2 * initial_chance\n\n    # Let x be the number of extra pink counters to add\n    # New chance of choosing a pink counter would be (5 + x) / (total_counters + x)\n    # Set the equation (5 + x) / (total_counters + x) = target_chance\n\n    # Find x that satisfies the equation\n    x = symbols('x')\n    equation = Eq((initial_pink + x) / (total_counters + x), target_chance)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # There are 3 colors and we need at least 2 pairs of the same color.\n    # If we take out 3 socks, they could all be of different colors, giving us 0 pairs.\n    # If we take out 4 socks, we are guaranteed 1 pair (because of the Pigeonhole Principle).\n    # However, we need at least 2 pairs.\n    # If we take out 5 socks, we cannot ensure 2 pairs since we could have a pair and three other different colors.\n    # If we take out 6 socks, we must have at least 2 pairs, because we have 2 socks of each color.\n    # Therefore, taking out one more beyond this, 7 socks, we ensure that we have at least 2 pairs of the same color.\n    return 7\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cupcakes, muffins = symbols('cupcakes muffins')\n\n    # Demi had an equal number of cupcakes and muffins at first.\n    equation1 = Eq(cupcakes, muffins)\n    \n    # After 60 cupcakes and 12 muffins were sold\n    cupcakes_sold = cupcakes - 60\n    muffins_sold = muffins - 12\n    \n    # The number of muffins left was twice the number of cupcakes left\n    equation2 = Eq(muffins_sold, 2 * cupcakes_sold)\n\n    # Solving the system of equations\n    solution = solve((equation1, equation2), (cupcakes, muffins))\n    \n    # Total number of cupcakes and muffins Demi had at first\n    total = solution[cupcakes] + solution[muffins]\n\n    return total\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x + 7, 47)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Helen's daily pocket money as h and George's as g\n    helen, george = symbols('helen george')\n    \n    # Helen receives h, George receives h + 3\n    # Each spends 5 a day, so saves (h - 5) for Helen and (g - 5) for George\n    # After certain days, we have the total saving:\n    # Helen: (h - 5) * days = 60\n    # George: (g - 5) * days = 60 + 90 = 150\n    \n    # Now we set up our equations based on the problem description\n    equation1 = Eq(george, helen + 3)\n    equation2 = Eq((helen - 5) * (150 / (george - 5)), 60)  # The total days are the same for both\n    \n    # Solve the equations for the symbols helen and george\n    solutions = solve((equation1, equation2), (helen, george))\n    \n    return solutions[helen]\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    time_shanghai_to_LA = 12.25\n    time_LA_to_shanghai = 12.25 + 1.5  # 90 minutes is 1.5 hours\n\n    total_time = time_shanghai_to_LA + time_LA_to_shanghai\n\n    return total_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    eq1 = Eq(eddi / wiya, 3/2)\n    eq2 = Eq((eddi + 4) / wiya, 8/5)\n\n    result = solve((eq1, eq2), (eddi, wiya))\n\n    return result[wiya]\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    # Calculate the sum from 1 to 30 using the formula for the sum of an arithmetic series\n    sum_1_to_30 = (30 * (30 + 1)) // 2\n\n    # The sequence is symmetric, so the sum from 29 to 1 is the same as from 1 to 29\n    # Therefore, we can just multiply the sum from 1 to 30 by 2 and subtract 30 (the middle term counted twice)\n    ans = 2 * sum_1_to_30 - 30\n\n    return ans\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    # Using the Inclusion-Exclusion Principle\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance covered in the first 2 hours.\n    distance_first_part = 2 * 40  # hours * speed in km/h\n    \n    # Total distance covered\n    total_distance = distance_first_part + 280  # in km\n    \n    # Time taken for the remaining 280km\n    time_second_part = 280 / 70  # distance / speed in km/h\n    \n    # Total time taken for the whole trip\n    total_time = 2 + time_second_part  # in hours\n    \n    # Average speed = Total distance / Total time\n    average_speed = total_distance / total_time  # in km/h\n\n    return average_speed\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the common difference\n    d = symbols('d')\n    a = symbols('a')  # the first term of the arithmetic progression\n\n    # According to the problem\n    # a + 8d = a + 14d + 18 -> equation for the 9th term being 18 larger than the 15th\n    # a + 19d + a + 11d = 88 -> equation for the sum of the 20th and 12th terms being 88\n\n    equation1 = Eq(a + 8*d, a + 14*d + 18)\n    equation2 = Eq(a + 19*d + a + 11*d, 88)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Get the first term and the common difference\n    a_solution = solutions[a]\n    d_solution = solutions[d]\n\n    # The 32nd term is a + 31d\n    term_32 = a_solution + 31*d_solution\n\n    return term_32\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Total number of three digit numbers without restriction.\n    no_sevens = 8 * 9 * 9  # Number of three digit numbers containing no sevens at all.\n\n    # One seven can be in one of three positions, and there are 9 choices for each of the other two positions.\n    one_seven = 3 * 9 * 9\n\n    # At least two sevens means all numbers except those with no sevens or just one seven.\n    at_least_two_sevens = total_three_digit_numbers - no_sevens - one_seven\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    three_page_letters = 0\n    \n    # Hypothesis\n    while total_penpals >= 0:\n        if 3 * total_penpals + 4 * (11 - total_penpals) == total_pages:\n            return total_penpals\n        total_penpals -= 1\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    digit_str = str(number)\n    place_value = 10 ** (len(digit_str) - digit_str.index('8') - 1)\n    return place_value\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    days_in_packets = lcm(25, 20)\n    march_days = 31  # Assuming non-leap year\n    first_of_next_month = 1  # For any month following March\n\n    # Granny will start new packets after 'days_in_packets' days from March 1st\n    next_start_day = march_days + first_of_next_month + (days_in_packets - 1) % march_days\n    # Calculate the month (assuming no leap year)\n    next_start_month = (1 + (days_in_packets - 1) // march_days)\n\n    return next_start_day, next_start_month\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # First, we place the dancing performances since they are more restricted.\n    # We have to place the 4 dancing performances with 1 singing performance in\n    # between each two of them, making it DSDSDSDSD.\n    \n    # This \"sandwiches\" 3 singing performances between dances and leaves us 3 more singing performances to place anywhere among the 5 slots available (4 slots between dances and one at either end).\n    \n    # We can use the stars and bars method to find the number of ways to place the 3 additional singing performances:\n    # We have 3 \"stars\" (the singing performances) and 5 \"bars\" (the slots before, between, and after the dancing performances), which makes for a total of:\n    # (3+5-1) choose (5-1)\n    singing_slots = 5\n    additional_singing_performances = 3\n    ways_to_place_singing = factorial(singing_slots + additional_singing_performances - 1) // (factorial(additional_singing_performances) * factorial(singing_slots - 1))\n    \n    # Now each of these arrangements can be internally permuted among the singing performances (6 total, 3 fixed between dances, and 3 additional), and among the dancing performances (4 total).\n\n    # Hence, the total number of ways is:\n    total_permutations = ways_to_place_singing * factorial(6) // factorial(3) * factorial(4)\n\n    return total_permutations\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "from fractions import Fraction\n\ndef solution():\n    A = 1\n    a1 = A - Fraction(1, 2)\n    a2 = A - Fraction(2, 3)\n    a3 = A - Fraction(7, 8)\n    a4 = A - Fraction(29, 30)\n    a5 = A - Fraction(139, 144)\n    a6 = A - Fraction(839, 840)\n    \n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n    m, n = a0.numerator, a0.denominator\n\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    # List all guesses and teacher's responses\n    guesses = [\"8765\", \"1023\", \"8642\", \"5430\"]\n    responses = [\n        {'correct': 2, 'wrong_position': True},\n        {'correct': 2, 'wrong_position': True},\n        {'correct': 2, 'wrong_position': False},\n        {'correct': 0, 'wrong_position': False}\n    ]\n\n    # Iterate through all possible 4-digit numbers\n    for num in range(1000, 10000):\n        str_num = str(num)\n        # Skip numbers with digits from guess 4 as none are correct\n        if any(digit in str_num for digit in guesses[3]):\n            continue\n        # Check against each guess\n        match = True\n        for i, guess in enumerate(guesses):\n            correct_count = sum(a == b for a, b in zip(str_num, guess))\n            in_wrong_position = any(a == b and str_num.index(a) != guess.index(b) for a in guess for b in str_num)\n            # Compare the number of correct digits and their positions against the teacher's response\n            if responses[i]['wrong_position']:\n                if correct_count != responses[i]['correct'] or not in_wrong_position:\n                    match = False\n                    break\n            else:\n                if correct_count != responses[i]['correct']:\n                    match = False\n                    break\n        if match:\n            return str_num\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number\n    x = symbols('x')\n    \n    # Define the equations based on the problem statement\n    equation = Eq(x/4 - 25, 2021)\n    \n    # Solve for x\n    original_number = solve(equation, x)[0]\n\n    # Calculate the correct answer by multiplying the original number by 4 and adding 25\n    correct_answer = original_number * 4 + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    factors = [75, 56, 12, 105]\n    count_2 = 0\n    count_5 = 0\n    \n    for factor in factors:\n        while factor % 2 == 0:\n            count_2 += 1\n            factor //= 2\n        while factor % 5 == 0:\n            count_5 += 1\n            factor //= 5\n    \n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    # Let the number of books Donna has be x\n    # Then Chloe has 4 * x books\n    # Given that Chloe has 816 more books than Donna, the equation is:\n    # 4 * x - x = 816\n    # Solve for x\n    donna_books = 816 / 3\n    return int(donna_books)\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a variable to represent the unknown value\n    x = symbols('x')\n\n    # Set up the equation based on the given information\n    equation = Eq((x + 4)/8, 3)\n\n    # Solve the equation for the unknown variable\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, adults, boys, girls = symbols('children adults boys girls')\n\n    equation1 = Eq(adults, 3 * children)\n    equation2 = Eq(boys, 2 * girls)\n    equation3 = Eq(adults, girls + 176)\n\n    solutions = solve((equation1, equation2, equation3), (children, adults, boys, girls))\n\n    total_people = solutions[adults] + solutions[children] + solutions[boys] + solutions[girls]\n\n    return total_people\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 193):\n        if isprime(a):\n            b = (193 - 3 * a) / 11\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    # Try all combinations of a (1 to 9) and b (0 to 9) because a cannot be 0 in a two-digit number\n    for a in range(1, 10):\n        for b in range(0, 10):\n            # Check the given condition\n            if (10 * a + b) * 7 == 100 * a + b:\n                return 10 * a + b\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # Calculate the last digit for a pattern in the powers of 9\n    # The pattern contains 10 elements: 1, 9, 81, 729, and so on...\n    # We find the pattern for the last digit: 1, 9, 1, 9, ...\n    # The last digit of 999 is the same as the last digit of 9\n    # Since 99 is odd, the ones digit in the result will be the second element \n    # in the pattern (because it's 0 indexed), which is 9\n    \n    if 99 % 2 == 0:\n        last_digit = 1\n    else:\n        last_digit = 9\n\n    return last_digit\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    houses_per_worker_per_day = 14 / (3 * 4)\n    total_houses = houses_per_worker_per_day * 9 * 2\n    return int(total_houses)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(gcd(12, 15), 60)\n    return ans\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    # Ellie's purchase\n    equation1 = Eq(banana * 2 + apple * 3, 1.50)\n    # Beth's purchase\n    equation2 = Eq(banana * 3 + apple * 2, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Annabella's purchase\n    cost_for_annabella = solutions[banana] + solutions[apple]\n\n    return round(cost_for_annabella, 2)\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    # Let's denote x as the price of one ball\n    # Adam's budget is therefore 5*x + 15 when he buys 5 balls\n    # Adam's budget is also 8*x - 12 when he buys 8 balls\n    # Since both expressions represent his total budget, they are equal\n    # 5*x + 15 = 8*x - 12\n    # Solving for x gives us the price of one ball\n    x = (15 + 12) / (8 - 5)\n    return x\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    min_product = None\n    for bob in range(1, 28):\n        for fido in range(1, bob):  # Fido is younger than Bob\n            rex = 28 - bob - fido\n            if rex > 0 and rex != bob and rex != fido and fido == bob - 10:  # No dogs are the same age and Fido is 10 years younger than Bob\n                product = bob * rex * fido\n                if min_product is None or product < min_product:\n                    min_product = product\n    return min_product\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    gcd = 75\n    max_sum = 0\n\n    # Loop through all 3-digit numbers that are multiples of 75\n    for A in range(100, 1000, gcd):\n        a_str = str(A)\n        # Check if A has at least two equal digits\n        if len(set(a_str)) < 3:\n            # Loop through all 3-digit numbers greater than A that are multiples of 75\n            for B in range(A + gcd, 1000, gcd):\n                b_str = str(B)\n                # Check if B has at least two equal digits and both numbers are distinct\n                if B != A and len(set(b_str)) < 3:\n                    current_sum = A + B\n                    # Update max_sum if current_sum is greater\n                    if current_sum > max_sum:\n                        max_sum = current_sum\n\n    return max_sum\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    # Let the total number of people at the funfair be p\n    # According to the problem:\n    # Children = 2/5 * p\n    # Women = 1/4 * p\n    # Men = p - (Children + Women)\n    # Also, Children = Men + 20\n    # Hence, we can set up the equation:\n    # 2/5 * p = (p - (2/5 * p + 1/4 * p)) + 20\n    # Solving the above equation we get the value of p\n    # Simplify to find p\n    \n    from fractions import Fraction\n\n    # Define the fractions for children and women\n    frac_children = Fraction(2, 5)\n    frac_women = Fraction(1, 4)\n\n    # Assume total number of people to find a common denominator\n    p = frac_children.denominator * frac_women.denominator  # Start with common denominator to avoid fractions\n\n    # Function to calculate the total people\n    def calc_people(p):\n        children = frac_children * p\n        women = frac_women * p\n        men = p - (children + women)\n        return children, women, men\n\n    # Loop until the difference between children and men is 20\n    while True:\n        children, women, men = calc_people(p)\n        if children - men == 20:\n            break\n        p += 1  # Increase total people\n\n    return p\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9\n    initial_drop_height = height_after_second_bounce * (3**2)\n    return initial_drop_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    num1 = (1/30) + (1/6)\n    den1 = 2/25\n    num2 = 2 - (2/3)\n    den2 = 8/3\n\n    fraction1 = num1 / den1\n    fraction2 = num2 / den2\n\n    ans = fraction1 + fraction2\n\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    \n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n    \n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l be the time Lee takes to finish the job alone\n    # Let n be the time Nancy takes to finish the job alone\n    l, n = symbols('l n')\n\n    # If they work together, they finish in 10 hours\n    # So combined, they do 1/10 of the job per hour\n    equation1 = Eq(1/l + 1/n, 1/10)\n\n    # Lee works for 6 hours, which means he completes 6/l of the job\n    # Nancy works for 20 hours, which means she completes 20/n of the job\n    # Combined, they complete the entire job\n    equation2 = Eq(6/l + 20/n, 1)\n\n    # Solve the system of equations for l and n\n    solutions = solve((equation1, equation2), (l, n))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_pupils = 40 + 30\n    total_average = 90\n\n    # Let the average score of class A be x\n    # Then the average score of class B will be x + 7\n    # According to the problem, the total score is the average multiplied by the number of pupils\n    # (40 * x) + (30 * (x + 7)) = total_pupils * total_average\n\n    # Solving for x gives us the average for class A\n    x = (total_pupils * total_average - 30 * 7) / total_pupils\n    \n    # The average score for class B is x + 7\n    class_b_average = x + 7\n\n    return class_b_average\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    numerator = 1\n    denominator = (1/(2007*2008)) + (1/(2008*2009)) + (1/2009)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    import math\n    students = 40\n    boat_capacity = 7\n    num_boats = math.ceil(students / boat_capacity)\n    return num_boats\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    a = 250250\n    ans = (a ** 2) - (a - 1) * (a + 1)\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    total = 70\n    ways = 0\n    for ten_pence in range(6):  # He can use 0 to 5 ten-pence coins\n        for twenty_pence in range(4):  # He can use 0 to 3 twenty-pence coins\n            for fifty_pence in range(2):  # He can use 0 or 1 fifty-pence coin\n                if 10*ten_pence + 20*twenty_pence + 50*fifty_pence == total:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, chris = symbols('aaron becky chris')\n\n    eq1 = Eq(aaron - becky, becky - chris)\n    eq2 = Eq(aaron + becky + chris, 60)\n\n    solutions = solve((eq1, eq2), (aaron, becky, chris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n\n    people_in_front_of_mark = total_people - people_behind_mark - 1  # Subtracting Mark himself\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    ans = sum(len(str(i)) for i in range(1, 201))\n    return ans\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        if int(f'9{a}8{a}') % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # A number is divisible by 4 if its last two digits form a number that is divisible by 4.\n    for J in range(10):\n        if (int(f\"6{J}\")) % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one apple and one peach\n    cost_apple, cost_peach = symbols('cost_apple cost_peach')\n\n    # Equation 1: 4 apples and 3 peaches cost £10\n    equation1 = Eq(4 * cost_apple + 3 * cost_peach, 10)\n\n    # Equation 2: 4 apples and 6 peaches cost £16\n    equation2 = Eq(4 * cost_apple + 6 * cost_peach, 16)\n\n    # Solve the two equations\n    solution = solve((equation1, equation2), (cost_apple, cost_peach))\n\n    # The solution is a dictionary where the cost of each peach is identified by 'cost_peach'\n    return solution[cost_peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    final_number = 66\n    initial_number = (final_number / 6) - 7\n    return initial_number\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_extra_water = 32\n    jane_water = audrey_water + jane_extra_water\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    a = 9\n    result = 33\n\n    # Substitute the values into the operation definition\n    x = (result + 2 * a) / (5)\n    \n    return x\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    sum_squares = lambda n: (n * (n + 1) * (2 * n + 1)) // 6\n    sum_cubes = lambda n: (n * (n + 1) // 2) ** 2\n\n    ans = sum([i * (i + 1) ** 2 for i in range(24)])\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    return 36 + 17 + 18 + 24 + 33\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    quotient = 476 // 17\n    return quotient\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    # Since the question only contains \"11\", it seems to be incomplete.\n    # Without a proper question, I'm assuming you want the answer to be 11.\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    cards_sent_by_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_by_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of the two packet sizes\n    days_until_next_start = lcm(25, 20)\n\n    # March 1st is day 1, so we add the LCM minus 1 to get the correct date\n    date_next_start = 1 + days_until_next_start - 1\n\n    # Determine the month and day of the new start date: March has 31 days\n    # Since the date_next_start will exceed March, we proceed to April,\n    # and we don't have to worry about further months as LCM(25, 20) = 100, which is within two months.\n    if date_next_start <= 31:\n        return (date_next_start, 'March')\n    else:\n        date_next_start -= 31  # Adjust by the number of days in March\n        return (date_next_start, 'April')\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n    used_per_day_watermelons = 9\n    used_per_day_pineapples = 9\n\n    days = symbols('days')\n    equation = Eq(pineapples - used_per_day_pineapples * days, 3 * (watermelons - used_per_day_watermelons * days))\n    days_needed = solve(equation, days)\n\n    # Select the first solution which is the positive one\n    return days_needed[0]\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    ans = 3.6 * 100\n    return ans\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Declare symbols for times and speeds\n    t_up, t_down, s_up, s_down = symbols('t_up t_down s_up s_down')\n    \n    # Equations based on the problem statement\n    time_total_eq = Eq(t_up + t_down, 360)    # The total time spent was 360 minutes\n    time_ratio_eq = Eq(t_up / t_down, 5 / 4)  # The ratio of time going up to down is 5:4\n    speed_diff_eq = Eq(s_up, s_down - 10)     # Speed going up is 10 m/min slower than going down\n    \n    # Solve for times\n    times = solve((time_total_eq, time_ratio_eq), (t_up, t_down))\n    t_up = times[t_up]\n    t_down = times[t_down]\n    \n    # Use one of the solved times to find the speeds\n    s_down = solve(speed_diff_eq.subs(t_up, times[t_up]), s_down)[0]\n    s_up = s_up.subs(s_down, s_down)\n    \n    # Calculate distance: distance = speed * time\n    distance_up = s_up * t_up\n    distance_down = s_down * t_down\n    \n    # Total distance is the sum of the individual distances\n    total_distance = distance_up + distance_down\n    \n    return total_distance.evalf()\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n    difference = fruits_per_truck - fruits_per_car\n\n    return difference\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    total_days = 329\n    days_in_a_week = 7\n    num_weeks = total_days // days_in_a_week\n    return num_weeks\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62\n    brother_speed = 70\n    time_to_meet = 5\n\n    distance_met = (eddie_speed + brother_speed) * time_to_meet\n    return distance_met\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    # Aiden arrives at 9:22, which is 7 minutes after the 9:15 bus\n    elapsed_since_last_bus = 7\n\n    # Buses leave every 35 minutes\n    bus_interval = 35\n\n    # Time to wait for the next bus\n    wait_time_for_next_bus = bus_interval - elapsed_since_last_bus\n\n    return wait_time_for_next_bus\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Tom's current age as t and Jerry's current age as j\n    t, j = symbols('t j', integer=True)\n\n    # From the information, we construct the equations:\n    # Tom will be twice his age in 4 years from now\n    equation1 = Eq(t + 4, 2 * t)\n\n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((t - 3) + (j - 3), 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, j))\n\n    # Tom's current age\n    tom_age = solutions[t]\n\n    # Now, we construct the equation to find when Jerry's age will be doubled:\n    # Let x be the number of years from now when Jerry's age will be doubled\n    x = symbols('x', integer=True)\n    equation3 = Eq(j + x, 2 * j)\n\n    # Solve for x\n    years_for_jerry = solve(equation3.subs(j, solutions[j]), x)\n\n    return years_for_jerry[0]\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5 / 9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    result = 161 / 46\n    return result\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3*x - 4), 34)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum(((-1)**(i+1))*(i**2) for i in range(3, 52))\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import primerange\n\ndef family_ages(year, ages):\n    for future_year in range(year + 1, year + 100):  # consider the next 100 years\n        future_ages = [age + (future_year - year) for age in ages]\n        if all(age in primerange(2, max(future_ages) + 1) for age in future_ages):\n            return future_year\n    return -1  # no such year found\n\ndef solution():\n    year = 2017\n    ages = [7, 5, 29, 31]  # current prime ages of the family members\n    return family_ages(year, ages)\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15\n    increased = 0.15\n\n    price_after_discount = original_price * (1 - discount)\n    final_price = price_after_discount * (1 + increased)\n\n    return final_price\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    n_circles = 7\n    ans = 1 + n_circles * (n_circles + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_in_box = total_books - books_given_away\n    \n    return books_in_box\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    ans = 90009\n    return ans\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n\n    equation1 = Eq(mother, 3 * lora)\n    equation2 = Eq(lora + mother, 44)\n\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n\n    # Considering that there are 3 flowers between every 2 lamp posts,\n    # the number of gaps between lamp posts will be the total flowers divided by flowers_between_lamps\n    num_gaps_between_lamps = total_flowers // flowers_between_lamps\n\n    # The number of lamp posts is one more than the number of gaps\n    num_lamp_posts = num_gaps_between_lamps + 1\n\n    # The total distance covered by the lamp posts is the length of the road minus 1\n    # because the first lamp post does not contribute to the distance that needs to be divided.\n    length_of_road = 50\n\n    # Distance between every 2 lamp posts is the total length of the road\n    # divided by the number of gaps between the lamp posts\n    distance_between_lamps = length_of_road / num_gaps_between_lamps\n\n    return distance_between_lamps\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    unit_digit_4_power = [4, 6, 4, 6] # The unit digit of powers of 4 repeats every 4 powers\n    # The power cycle of 4 is 4, 16, 64, and 256, so the unit digits are 4, 6, 4, 6, and it repeats.\n    power_index = (2008 - 1) % 4\n    return unit_digit_4_power[power_index]\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n    number_of_males = total_adults * fraction_male\n    return int(number_of_males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40 PM\", \"%I:%M %p\")\n    duration = timedelta(hours=2, minutes=40)\n    leaving_time = arrival_time + duration\n    return leaving_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_p_coins = 124\n    twenty_p_coins = total_coins - one_pound_coins - fifty_p_coins\n\n    total_value = one_pound_coins * 1 + fifty_p_coins * 0.5 + twenty_p_coins * 0.2\n\n    return total_value\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Number of paths from home to shops\n    paths_home_audio = 6\n    paths_home_book = 4\n    paths_home_chapel = 5\n\n    # Number of paths from shops to school\n    paths_audio_school = 2\n    paths_book_school = 2\n    paths_chapel_school = 3\n\n    # Total paths from home to school\n    total_paths = (paths_home_audio * paths_audio_school) + \\\n                  (paths_home_book * paths_book_school) + \\\n                  (paths_home_chapel * paths_chapel_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Adam and Ben weigh 102kg\n    # Ben and Carl weigh 97kg\n    # Adam and Carl weigh 93kg\n    # Adding these three together:\n    # (Adam + Ben) + (Ben + Carl) + (Adam + Carl) = 102 + 97 + 93\n    # This is the same as:\n    # 2 * (Adam + Ben + Carl)\n    # We divide this sum by 2 to get the total weight of Adam, Ben, and Carl.\n    \n    total_weight = (102 + 97 + 93) / 2\n    return total_weight\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belle_sticks, eddie_sticks = symbols('belle_sticks eddie_sticks')\n\n    belle_after = 49 + 11\n    equation = Eq(belle_after, eddie_sticks)\n\n    solutions = solve(equation, eddie_sticks)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    number_of_lamp_posts = 50\n    distance_between_lamp_posts = 2\n    length_of_road = (number_of_lamp_posts - 1) * distance_between_lamp_posts\n    return length_of_road\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    warmer_by = 12\n    exeter_temp = glasgow_temp + warmer_by\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5 / 11) + (2 / 27)) * 11 + (5 / 27)\n    return ans\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n    total_weight = weight_per_box * number_of_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')\n    equation1 = Eq(john + kofi, 25)\n    equation2 = Eq(kofi + 4, john - 3)\n\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    equal_volume = total_tea / 2\n    tea_to_give = equal_volume - 179\n\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 4, 6]\n    perm = permutations(digits)\n\n    return len(list(perm))\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    # Set up the equations based on the problem\n    equation1 = Eq((3/4) * chelsia, (5/6) * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    # Calculate the total amount of money\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money.evalf()\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = 13 * cost_per_banana\n    change = 1000 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = 18 + 2 + 16\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_left = 4\n    neelesh_ate = 1\n    neelesh_initial = neelesh_left + neelesh_ate\n    ayesha_initial = neelesh_initial * 6\n    ayesha_left = ayesha_initial - neelesh_initial\n    return ayesha_left\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    heads = 53\n    feet = 102\n\n    # Let normal_rabbits be x and special_rabbits be y\n    # Solve the system of equations:\n    # x + 3y = heads (1 head normal, 3 heads special)\n    # 4x + 2y = feet (4 feet normal, 2 feet special)\n\n    # We solve for x (normal rabbits) using matrix method (Cramer's Rule)\n    # Det(A) is the determinant of the coefficients matrix\n    # Det(B) is the determinant of the matrix with the second column replaced by the constants (heads, feet)\n\n    A = [[1, 3], [4, 2]]\n    B = [[heads, 3], [feet, 2]]\n    \n    det_A = A[0][0] * A[1][1] - A[0][1] * A[1][0]\n    det_B = B[0][0] * B[1][1] - B[0][1] * B[1][0]\n    \n    normal_rabbits = det_B // det_A\n\n    # Since we now know x, we can find y from any of the equations, let's use the first one:\n    # x + 3y = heads => y = (heads - x) / 3\n\n    special_rabbits = (heads - normal_rabbits) // 3\n\n    ans = (normal_rabbits, special_rabbits)\n    return ans\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    # The decimal 1/70 has a repeating cycle. We need to find this cycle.\n    # The cycle repeats every 6 digits after the decimal point: 014285\n    # We need to find the 500th digit in this repeating sequence\n\n    cycle = '014285'\n    cycle_length = len(cycle)\n    \n    # The 500th digit after the decimal point will be at position (500 - 1) % cycle_length\n    # in the repeating cycle. We subtract 1 because the index in Python starts from 0.\n    position = (500 - 1) % cycle_length\n    \n    # Get the digit at that position\n    digit = cycle[position]\n    \n    return int(digit)\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator = sum(1 / (i * (20 + 11 - i)) for i in range(11, 16))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper, iron = symbols('copper iron')\n\n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n\n    solutions = solve((equation1, equation2), (copper, iron))\n\n    return solutions[copper]\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    for a in range(1, 425):  # a must be between 1 and 424 inclusive to ensure a < b\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    nth_term = 10\n    nth_value = 31\n    common_difference = 28 - 25\n\n    first_term = nth_value - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for boxes B and C\n    B, C = symbols('B C')\n    \n    # Since Box A has 80 marbles, the remaining marbles are 560 - 80 = 480\n    # Box B has twice as many marbles as Box C, and the total for B and C is 480\n    equation1 = Eq(B, 2 * C)\n    equation2 = Eq(B + C, 480)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (B, C))\n    \n    return solutions[C]\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_stone = 15\n    andrew_pounds = 275\n    pounds_per_stone = 14\n\n    david_pounds = david_stone * pounds_per_stone\n    weight_difference = abs(david_pounds - andrew_pounds)\n\n    return weight_difference\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    sum_numbers = 5 + 15 + 17 + 23\n    total_sum = sum_numbers * 3\n    return total_sum\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    # Let x be the number of gummy bears, and y be the number of lollipops\n    # Original ratio means 5x = 7y\n    # After adding 120 to each, ratio becomes 4(x+120) = 5(y+120)\n    \n    # Let's solve the system of equations\n    # 5x = 7y                  (1)\n    # 4(x+120) = 5(y+120)      (2)\n    \n    # Express y in terms of x using equation (1)\n    # y = (5/7)x\n    \n    # Substitute y in equation (2)\n    # 4(x+120) = 5((5/7)x+120)\n    # 4x + 480 = (25/7)x + 600\n    # Multiply by 7 to get rid of fractions\n    # 28x + 3360 = 25x + 4200\n    # 28x - 25x = 4200 - 3360\n    # 3x = 840\n    # x = 280\n    \n    # Now find y using equation (1)\n    # 5x = 7y\n    # 5*280 = 7y\n    # y = (5*280)/7\n    # y = 200\n    \n    # Total candies before adding 120 each\n    total_before = 280 + 200\n    \n    # Total candies now\n    total_now = total_before + (120 * 2)\n    \n    return total_now\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    sequence = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    ans = 58 * 60\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the numbers from base 3 to base 10, perform subtraction, then convert back to base 3\n    number_in_base_10_to_subtract = int('2210', 3)\n    base_10_number = int('12101', 3)\n    result_in_base_10 = base_10_number - number_in_base_10_to_subtract\n    \n    # Convert the result back to base 3\n    ans = ''\n    while result_in_base_10 > 0:\n        ans = str(result_in_base_10 % 3) + ans\n        result_in_base_10 //= 3\n\n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n    \n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Initialize a list that will keep track of which numbers can be chosen\n    can_choose = [True] * 21  # Index 0 is not used for simplicity\n    \n    # Iterate through the first 20 positive integers\n    n = 0\n    for i in range(1, 21):\n        # If the number can be chosen\n        if can_choose[i]:\n            # Increment the count\n            n += 1\n            # Mark all numbers that differ by 5 as not choosable\n            if i + 5 <= 20:\n                can_choose[i + 5] = False\n    \n    return n\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    correct_mark = 12\n    wrong_mark = 0\n\n    total_marks = (correct_answers * correct_mark) + (wrong_answers * wrong_mark)\n    total_answers = correct_answers + wrong_answers\n\n    average_mark = total_marks / total_answers\n    return average_mark\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cake and biscuit\n    cake, biscuit = symbols('cake biscuit')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(1 * cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    # Return the number of calories provided by one biscuit\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, mother = symbols('john mother')\n\n    # John's age in 8 years = mother's age - 20 years\n    equation1 = Eq(john + 8, mother - 20)\n\n    # When John's age * 5 = mother's age\n    equation2 = Eq(5 * john, mother)\n\n    # Solve the equations for John's and mother's age\n    solutions = solve((equation1, equation2), (john, mother))\n\n    # Find the time when mother's age was 5 times John's age\n    age_difference = solutions[mother] - solutions[john]\n\n    # John's age when his mother was 5 times his age\n    john_age_when_5_times = solutions[john] - age_difference\n\n    return john_age_when_5_times\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    from fractions import Fraction\n\n    num = Fraction(2017, 1) + Fraction(7, 8)\n    num *= Fraction(11, 3)\n    subtrahend = Fraction(2016875, 1000) * Fraction(11, 3)\n    denominator = (Fraction(2017, 1) + Fraction(1, 3) - Fraction(2016875, 1000)) * 17\n    multiplication = 3 + Fraction(23, 32)\n    \n    result = (num - subtrahend) / denominator * multiplication\n\n    return float(result)\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for b1 in range(1,10):\n        for b in range(10):\n            total_pencils = int(f\"{b1}{b}\")\n            if total_pencils % 44 == 0:\n                return total_pencils // 44\n    \nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sara, kevin, james = symbols('sara kevin james')\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n\n    solutions = solve((equation1, equation2, equation3), (sara, kevin, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "def solution():\n    from math import lcm\n    ans = lcm(4, 6, 7)\n    return ans\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    lcm = 24 * 8 // math.gcd(24, 8)\n    return lcm\n\nimport math\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = []\n        for divisor in range(2, 11):\n            remainder = M % divisor\n            if remainder == 0 or remainder in remainders:\n                break\n            remainders.append(remainder)\n        else:\n            return M\n        M += 1\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    container_capacity = 4\n    num_containers = (total_apples + container_capacity - 1) // container_capacity\n    return num_containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n    equation = Eq(romily, reema + 10)\n\n    solutions = solve(equation, (romily, reema))\n\n    return solutions[reema]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    # Using the Inclusion-Exclusion Principle to find the intersection\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    distance_between_posts = 4\n    \n    num_posts = (field_length / distance_between_posts) + 1\n    \n    return int(num_posts)\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 since it's a two-digit number\n        for b in range(0, 10):\n            ab = a * 10 + b\n            ba = b * 10 + a\n            \n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from math import gcd\n    # Find the prime factorization of 28\n    n = 28\n    prime_factors = {}\n    for i in range(2, n + 1):\n        while n % i == 0:\n            prime_factors[i] = prime_factors.get(i, 0) + 1\n            n //= i\n\n    # To make a perfect square, all prime factors must have an even exponent.\n    # Calculate the smallest number to multiply by finding the product of primes \n    # raised to the power that would make them even if they are not already.\n    smallest_num = 1\n    for prime, exponent in prime_factors.items():\n        if exponent % 2 != 0:\n            smallest_num *= prime\n\n    return smallest_num\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    return (612 // 34) * 25\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_sum = 10 + 20 + 30 + 50 + 60 + 70\n    negative_sum = 6 + 16 + 26 + 46 + 56 + 66\n    ans = positive_sum - negative_sum\n    return ans\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    from math import factorial\n\n    # Consider A and B as a single entity since they must always be together.\n    # There are 5 entities to arrange: (AB), C, D, E, F.\n    arrangements_of_entities = factorial(5)\n\n    # A and B can be in two orders: AB or BA.\n    arrangements_of_A_and_B = factorial(2)\n\n    # Total arrangements are the product of arrangements of entities and arrangements of A and B.\n    total_arrangements = arrangements_of_entities * arrangements_of_A_and_B\n\n    return total_arrangements\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y):\n    x = symbols('x')\n    equation = Eq(6 * x, y)\n    return equation\n\nans = solution(y)"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Lunch finished at 2:50 pm\n    lunch_finished_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    \n    # Lunch lasted for 20 minutes, calculate when lunch started\n    lunch_started_time = lunch_finished_time - timedelta(minutes=20)\n    \n    # Watched television for 20 minutes before lunch, calculate when TV watching started\n    tv_started_time = lunch_started_time - timedelta(minutes=20)\n    \n    # Played for 10 minutes after reaching home, calculate when Benson reached home\n    reached_home_time = tv_started_time - timedelta(minutes=10)\n    \n    # Convert datetime to the desired output format (e.g., \"HH:MM AM/PM\")\n    ans = reached_home_time.strftime(\"%I:%M %p\")\n    \n    return ans\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n    # Each year, the number of rabbits is 5 times the previous year,\n    # then half die. So the net multiplication factor per year is 5/2.\n    multiplier_per_year = 5 / 2\n    ans = initial_rabbits * (multiplier_per_year ** years)\n    return int(ans)\n\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    # Start with the largest two-digit number, 99\n    # and iterate downwards until we find a number\n    # that meets the conditions\n    for num in range(99, 9, -1):\n        if num % 4 == 3 and num % 5 == 3:\n            return num\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    max_class_size = total_sweets // min_sweets_per_student\n\n    return max_class_size\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    \n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n    \n    return solutions[buzz]\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let x be the total number of steps of the escalator\n    # Peter's time to reach the top at 1 step per second is x seconds\n    # Escalator moves x - 10 steps in x seconds\n    # Peter's time to reach the top at 2 steps per second is x/2 seconds\n    # Escalator moves x/2 - 16 steps in x/2 seconds\n\n    # Now set up the equation:\n    # x - 10 (Peter's steps + Escalator steps at 1 step per second) \n    # equals x/2 - 16 (Peter's steps + Escalator steps at 2 steps per second)\n\n    # Simplifying the equation:\n    # 2 * (x - 10) = x - 32\n    # 2x - 20 = x - 32\n    # x = 32 + 20\n\n    x = 32 + 20\n    return x\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    known_product = 246 * 135\n    known_sum = known_product + 135 * 2\n    return known_sum\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    number_of_trees = (road_length // interval) + 1\n\n    return number_of_trees\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of red balloons be r\n    # The number of green balloons will then be 4r (since red is 1/4th of green)\n    # The number of purple balloons will be (5/3)r (since red is 3/5th of purple)\n    r, g, p = symbols('r g p')\n\n    # Convert the given ratios into equations\n    g_eq = Eq(g, 4 * r)              # g = 4r\n    p_eq = Eq(p, (5 / 3) * r)        # p = (5/3)r\n    \n    # The total mass of the balloons\n    total_mass_eq = Eq(4 * r + 5 * g + 7 * p, 642)\n    \n    # Solving the system of equations\n    solutions = solve((g_eq, p_eq, total_mass_eq), (r, g, p))\n\n    # We are interested in the number of purple balloons 'p'\n    return solutions[p]\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum_of_values = 3 * 10 + 33 * 0.01 + 300 * 0.001\n    return sum_of_values\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    percentage = 25\n    total = 1200\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # James is 120 cm tall\n    height_difference = 30  # James is 30 cm shorter than Mark\n\n    mark_height = james_height + height_difference  # Mark's height\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    num_children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return num_children\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    blocks_given = total_blocks / 4\n    blocks_left = total_blocks - blocks_given\n    return int(blocks_left)\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    return 7268 + 94 + 567\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return float(solutions[jon])\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # Possible hundreds digits (only even numbers: 2, 4)\n        for tens in range(hundreds + 1, 10, 2):  # tens > hundreds and even\n            ones = hundreds * 2\n            if ones < 10 and ones % 2 == 0:  # ones must be an even digit less than 10\n                number = 100 * hundreds + 10 * tens + ones\n                if number % 2 == 0 and number % 9 == 0:\n                    return number\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, notebook = symbols('pencil notebook')\n\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n\n    solutions = solve((equation1, equation2), (pencil, notebook))\n\n    return solutions[pencil] + solutions[notebook]\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original amount of chocolate Sally had, y be the original amount Ken had\n    sally, ken = symbols('sally ken')\n\n    # Given ratio of Sally's to Ken's chocolates\n    ratio_equation = Eq(sally / ken, 5 / 7)\n\n    # Ken gave 24 chocolates to Sally\n    transaction_equation = Eq(sally + 24, ken - 24)\n\n    # After the transaction, Sally had twice as many as Ken\n    final_ratio_equation = Eq(sally + 24, 2 * (ken - 24))\n\n    # Solve the system of equations\n    solutions = solve((ratio_equation, transaction_equation, final_ratio_equation), (sally, ken))\n\n    return solutions[ken]\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    sales_tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    sales_tax = bill * sales_tax_percentage\n    total_cost = bill + tip + sales_tax\n\n    return total_cost\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_in_triangle = 3\n    sides_in_square = 4\n    number_thought_of = (sides_in_square * 2) - sides_in_triangle\n    return number_thought_of\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 12\n\n    new_pay = original_pay * (1 + increase_percentage / 100)\n    \n    return new_pay\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    total_bill = 82\n    free_hours = 40\n    first_segment_rate = 5\n    first_segment_hours = 50\n    second_segment_rate = 8\n    second_segment_hours = 60\n    third_segment_rate = 15\n    \n    extra_bill = total_bill\n    total_hours = free_hours\n    # Calculate hours in the first segment\n    if extra_bill > 0:\n        bill_first_segment = (first_segment_hours - free_hours) * first_segment_rate\n        if extra_bill <= bill_first_segment:\n            total_hours += extra_bill / first_segment_rate\n            return total_hours\n        total_hours += first_segment_hours - free_hours\n        extra_bill -= bill_first_segment\n  \n    # Calculate hours in the second segment\n    if extra_bill > 0:\n        bill_second_segment = (second_segment_hours - first_segment_hours) * second_segment_rate\n        if extra_bill <= bill_second_segment:\n            total_hours += extra_bill / second_segment_rate\n            return total_hours\n        total_hours += second_segment_hours - first_segment_hours\n        extra_bill -= bill_second_segment\n  \n    # Calculate hours in the third segment\n    if extra_bill > 0:\n        total_hours += extra_bill / third_segment_rate\n  \n    return total_hours\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_more_water = 32\n    jane_water = audrey_water + jane_more_water\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    total_digits = 1014\n    page_count = 0\n    digit_count = 0\n \n    while digit_count < total_digits:\n        page_count += 1\n        digit_count += len(str(page_count))\n    \n    return page_count\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let vijay's amount be 'v'\n    vijay = symbols('vijay')\n    \n    # Raju has 3 times as much money as Vijay\n    raju = 3 * vijay\n    \n    # Raju has $152 more than Patrick\n    # Hence, Patrick has 'raju - 152'\n    patrick = raju - 152\n    \n    # The three boys have an average amount of $507\n    # Total amount is 507 * 3\n    total_amount = 507 * 3\n    \n    # Form the equation based on total amount\n    equation = Eq(vijay + raju + patrick, total_amount)\n    \n    # Solve the equation to find the amount Vijay has\n    solution = solve(equation, vijay)\n    \n    return solution[vijay]\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    ans = 96 * 8\n    return ans\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly - amy_spent) * weeks\n\n    difference = joanna_total - amy_total\n\n    return difference\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(3 * number + 6, number + 16)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    \n    months_needed = debt / monthly_salary\n    \n    return months_needed\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the magic number\n    x = symbols('x')\n\n    # Equation representing the problem\n    equation = Eq(57 + x, 4 * (9 + x))\n\n    # Solving the equation for x\n    magic_number = solve(equation, x)\n\n    # Return the solution\n    return magic_number[0]\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    series_sum = sum(10 * i - (6 + (i - 1) * 10) for i in range(1, 8))\n    final_result = series_sum + 2021\n    return final_result\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_ways = 0\n    # Choose 1 teacher in 2 ways\n    teacher_ways = comb(2, 1)\n    \n    # At least 1 female means we have cases with 1, 2, 3 or 4 females\n    # Case with 1 female (5 remaining choices among males)\n    total_ways += comb(6, 1) * comb(7, 3)\n    # Case with 2 females (4 remaining choices among males)\n    total_ways += comb(6, 2) * comb(7, 2)\n    # Case with 3 females (3 remaining choices among males)\n    total_ways += comb(6, 3) * comb(7, 1)\n    # Case with 4 females (2 remaining choices among males)\n    total_ways += comb(6, 4)\n    \n    # Multiply by ways to choose a teacher\n    total_ways *= teacher_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    penny_score = 17\n    total_marks = 20\n    percentage = (penny_score / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "from fractions import Fraction\n\ndef solution():\n    milk_per_cup = Fraction(2, 3)\n    tea_per_cup = Fraction(3, 5)\n    number_of_cups = 45\n\n    total_milk = milk_per_cup * number_of_cups\n    total_tea = tea_per_cup * number_of_cups\n\n    total_liters = total_milk + total_tea\n\n    return total_liters\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    # Given values in the question\n    n10 = 23  # The 10th term\n    n15 = 38  # The 15th term\n    \n    # Using the formula for an arithmetic sequence: a_n = a_1 + (n - 1)d\n    # We will find the common difference 'd' using the two terms provided\n    d = (n15 - n10) / (15 - 10)  # Difference between the terms divided by difference in term number\n    \n    # Now we can find the first term a_1 using the 10th term and our found common difference:\n    a1 = n10 - (10 - 1) * d\n\n    # Now we can find the 12th term using the common difference and the first term\n    n12 = a1 + (12 - 1) * d\n    \n    return n12\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # The degree of a monomial is the sum of the exponents of all its variables\n    # Degree of the given monomial is 5\n    # The given monomial is -x^3 * y^(2n)\n    # So, the degree is the sum of the exponents of x and y\n\n    # Degree of x is 3 as given by x^3\n    # Let's denote the degree of y as 'degree_y'\n    # Degree of y is 2n as given by y^(2n)\n    # Therefore, to find the value of n, we set up the equation:\n    # 3 + 2n = 5\n\n    # Solving the equation for n\n    n = (5 - 3) / 2\n\n    return n\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n\n    # Define the equation based on the problem statement\n    equation = Eq(8 * book_price + 3 * 0.40, 3 * book_price + 8 * 0.40 + 1)\n\n    # Solve the equation for the price of a book\n    book_price_solution = solve(equation, book_price)\n\n    # Get the price of a book in pounds\n    return float(book_price_solution[0])\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angela, bernice, candice = symbols('angela bernice candice')\n    cost_per_gummy_bear = 6 / 100  # cost in pounds\n\n    equation1 = Eq(angela, bernice + 2)  # Angela buys two more gummy bears than Bernice\n    equation2 = Eq(bernice, candice + 8)  # Bernice buys eight more gummy bears than Candice\n    equation3 = Eq((angela + bernice + candice) * cost_per_gummy_bear, 3.42)  # Total cost\n\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # We know the median of the list is the average of the 5th and 6th terms because there are 10 terms in total\n    # The median value is given to be 20, so we can write an equation (n+7 + n+8) / 2 = 20\n    n = (20 * 2 - 15)  # 20 * 2 is 40, from which we subtract 15 (7 + 8)\n\n    # Now calculate the mean of the list using the value of n\n    numbers = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    mean = sum(numbers) / len(numbers)\n    \n    return mean\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n    containers_needed = total_juice / per_container\n    return int(containers_needed)\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the weights of the three apples\n    a1, a2, a3 = symbols('a1 a2 a3')\n    \n    # Assume a1 < a2 < a3, based on the given conditions\n    # When Tim eats the largest apple, the mean weight of the remaining two (a1 and a2) is 70 grams\n    equation1 = Eq((a1 + a2) / 2, 70)\n    # When Tim eats the lightest apple, the mean weight of the remaining two (a2 and a3) is 105 grams\n    equation2 = Eq((a2 + a3) / 2, 105)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a1, a2, a3))\n    \n    # Since a3 is not directly defined in the equations, calculate it as the total minus a1 and a2\n    a3_value = 2 * (70 + 105) - solutions[a1] - solutions[a2]\n    \n    # Calculate the weight difference between the heaviest apple and the lightest apple\n    weight_difference = a3_value - solutions[a1]\n    \n    return weight_difference\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # The sum of three consecutive whole numbers is 60.\n    # Let's denote the smallest of these numbers as n.\n    # Then, the next two consecutive numbers would be n+1 and n+2.\n    # Their sum would be n + (n+1) + (n+2) = 60.\n\n    # Simplifying the above equation gives us 3n + 3 = 60.\n    # Solving for n, we find that n + 1 = 60 / 3 = 20.\n    # Therefore, the largest number, which is n+2 is 20 + 1 = 21.\n\n    n_plus_1 = 60 // 3\n    largest_number = n_plus_1 + 1\n\n    return largest_number\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for num in range(1, 10):  # Only considering one-digit numbers\n        new_num = int(str(num) + '0')\n        if new_num - num == 27:  # Check if the difference is 27\n            return num\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n    nth_term = first_term + (n - 1) * difference\n    return nth_term\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shakers = 4\n    \n    # Total handshakes if everyone shakes hands with everyone else\n    total_handshakes = total_members * (total_members - 1) // 2\n    \n    # Handshakes that didn't happen because the four members didn't shake hands with each other\n    handshakes_not_happened = non_shakers * (non_shakers - 1) // 2\n    \n    # Subtract handshakes that did not happen from total possible handshakes\n    handshakes_happened = total_handshakes - handshakes_not_happened\n    \n    return handshakes_happened\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # Set the initial parameters.\n    # Since there's only one possibility for the first digit (1 through 9), we'll loop through each one and validate it.\n    for A in range(1, 10):\n        num_one = int('AABBB', base=12)\n        num_two = int('BBBAA', base=12)\n        # Let's replace A and B with their respective values.\n        num_one = num_one - (10 * 12**4 + 10 * 12**3) + (A * 12**4 + A * 12**3)\n        num_two = num_two - (11 * 12**4 + 11 * 12**3 + 11 * 12**2) + (A * 12**2 + A)\n        # Check if the condition is satisfied\n        if num_two - num_one == A:\n            return A\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Since Bob is always the 3rd in line no matter the direction, the array consists of:\n    # 2 animals before Bob and 2 animals after Bob in each direction.\n    # Thus, there has to be 3 rows and 3 columns including Bob's position.\n    rows = 3\n    columns = 3\n    total_animals = rows * columns\n    return total_animals\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    return 245 // 5\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = 11 * ((100 // 11) + 1)\n    largest_multiple = 11 * (300 // 11)\n    return smallest_multiple + largest_multiple\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total_salary = 4000 * 12\n    difference_in_salary = 3040 - 2800\n    correct_total_salary = incorrect_total_salary + difference_in_salary\n    correct_average_salary = correct_total_salary / 12\n    return correct_average_salary\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    durian, honeydew = symbols('durian honeydew')\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n    \n    solutions = solve((equation1, equation2), (durian, honeydew))\n    \n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17 * x - 3 * (6 + x), 9 * x + 32)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x, y, z represent the number of one-cent, two-cent, and five-cent coins respectively in Sam's stacks.\n    x, y, z = symbols('x y z')\n\n    # According to the first condition: height of 6 one-cent coins = height of 5 two-cent coins\n    # This can be written as: 6x = 5y since x and y will be in the proportion 6:5 (the number of coins in each equal-height stack)\n    equation1 = Eq(6 * x, 5 * y)\n\n    # According to the second condition: height of 4 one-cent coins = height of 3 five-cent coins\n    # This can be written as: 4x = 3z since x and z will be in the proportion 4:3\n    equation2 = Eq(4 * x, 3 * z)\n\n    # According to the third condition: x + y + z = 124 (total number of coins used)\n    equation3 = Eq(x + y + z, 124)\n\n    # Solve the system of equations for x, y, and z\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # x, y, and z are the quantities of one-cent, two-cent, and five-cent coins respectively\n    one_cent = solutions[x]\n    two_cent = solutions[y]\n    five_cent = solutions[z]\n\n    # Calculate the total value of the coins in cents\n    total_value = one_cent + 2 * two_cent + 5 * five_cent\n\n    return total_value\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for green_pens in range(1, 100):\n        blue_pens = 2 * green_pens / 5\n        red_pens = green_pens / 4\n        total_pens = blue_pens + green_pens + red_pens\n        if total_pens < 100 and red_pens.is_integer() and blue_pens.is_integer():\n            max_red_pens = max(max_red_pens, red_pens)\n    return int(max_red_pens)\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_money = 200\n    money_spent_on_books = initial_money * 0.25\n    money_left_after_books = initial_money - money_spent_on_books\n    money_spent_on_dvd = money_left_after_books * 0.20\n    money_left = money_left_after_books - money_spent_on_dvd\n    return money_left\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')  # The amounts of water in Containers A and B\n\n    # Equation based on the given information\n    equation1 = Eq(A, B + 350)  # A has 350 mL more water than B\n    equation2 = Eq(B, 2 * (A - 500))  # After spilling, B has twice as much as A\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m // 12\n\nans = solution(m)"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n\n    total_children_after_hour = initial_boys + initial_girls + children_joined\n    \n    return total_children_after_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_in_6_days = 42\n    days_to_eat = 9\n\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days_to_eat\n\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    # Iterate from the largest 6-digit palindrome down to the smallest\n    # A six-digit palindrome has the form: abccba\n    for a in range(9, -1, -1):\n        for b in range(9, -1, -1):\n            for c in range(9, -1, -1):\n                # Construct the palindrome\n                palindrome = int(f\"{a}{b}{c}{c}{b}{a}\")\n                # Check if it is a multiple of 6\n                if palindrome % 6 == 0:\n                    return palindrome\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    # Total pins and needles at first\n    total_pins_needles = 2540\n    # Pins sold\n    sold_pins = 1820\n    # Fraction of needles sold\n    fraction_needles_sold = 4 / 5\n    \n    # Pins left after selling\n    pins_left = total_pins_needles - sold_pins\n    \n    # Based on Paul's assumptions:\n    # If 1820 pins is equivalent to 4/5 of the needles,\n    # then 1/5 of the needles would be 1820 / 4\n    one_fifth_needles = sold_pins / 4\n    \n    # All the needles before selling\n    total_needles = one_fifth_needles * 5\n    \n    # Needles left after selling\n    needles_left = total_needles - (fraction_needles_sold * total_needles)\n    \n    # Check if Paul's solution is correct\n    pauls_needles_left = 455 # Paul's answer for needles left\n    is_paul_correct = needles_left == pauls_needles_left\n    \n    return (is_paul_correct, int(needles_left))\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_meters = 1.83\n    too_short_cm = 10\n\n    # Convert too_short_cm to meters\n    too_short_meters = too_short_cm / 100\n\n    # Calculate the length of the wood in the garage by subtracting the missing length\n    garage_wood_length_meters = desired_length_meters - too_short_meters\n\n    return garage_wood_length_meters\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    result = (2/7) * 315\n    return result\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    repetitions = 41 // len(pattern)\n    remainder = 41 % len(pattern)\n\n    sum_of_full_patterns = sum(pattern) * repetitions\n    sum_of_remainder = sum(pattern[:remainder])\n\n    ans = sum_of_full_patterns + sum_of_remainder\n\n    return ans\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of marbles Wei Yan had\n    x = symbols('x')\n\n    # After giving away 3/8 of his marbles, the remaining marbles are 5/8 of x\n    remaining_after_friends = (5/8) * x\n\n    # Then he gave away 5/7 of the remaining marbles to his brother\n    remaining_after_brother = (2/7) * remaining_after_friends\n\n    # His cousin gave him 408 marbles, and in the end, he had twice as many as he started with\n    final = remaining_after_brother + 408\n\n    # Set up the equation according to the problem statement\n    equation = Eq(final, 2 * x)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    # Get the solution, convert to int if necessary (it should be an integer value according to the problem context)\n    return int(solutions[0])\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # the distance covered by the plum trees\n    plum_tree_distance = (41 - 1) * 4\n    \n    # since there's a pine tree at each end just like the plum trees, the number of pine trees is:\n    num_pine_trees = (plum_tree_distance // 5) + 1\n    \n    return num_pine_trees\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = (9 + 10 + 11) / 8 - (10 + 11 + 12) / 9 + (11 + 12 + 13) / 10 - (12 + 13 + 14) / 11\n    denominator = 1 / 8 - 1 / 9 + 1 / 10 - 1 / 11\n\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    count = 0\n    # Iterate through the number of 2p coins from 0 up to 47/2\n    for two_p_coin in range(0, 47//2 + 1):\n        # Check if the remaining amount can be filled by 5p coins\n        if (47 - two_p_coin * 2) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    brian_age = 14\n    father_age = 41\n    age_difference = father_age - brian_age\n\n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_to_pass_tree = 16  # in seconds\n    length_of_train = 480   # in meters\n    speed_of_train = length_of_train / time_to_pass_tree  # in meters per second\n    return speed_of_train\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    number1 = 654876\n    number2 = 279745\n\n    # Round off each number to the nearest hundred\n    rounded_number1 = round(number1, -2)\n    rounded_number2 = round(number2, -2)\n\n    # Calculate the estimated difference\n    estimated_difference = rounded_number1 - rounded_number2\n\n    return estimated_difference\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(list(range(1, 6)) + list(range(4, 0, -1)))\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    # Iterate through possible numbers for the first pile\n    # The minimum number for each pile would be 1\n    # The maximum number for the first pile is 11 - 3 (since we need at least 1 apple in each of the remaining piles)\n    for x1 in range(1, 11 - 3 + 1):  # 11 - 3 + 1 because the last number is exclusive in range()\n        # The maximum number for the second pile is what remains after considering the first pile and saving at least 1 for the third pile\n        for x2 in range(1, 11 - x1 - 1 + 1):\n            # The third pile will take whatever is left from the 11 apples after the first and second piles are accounted for\n            x3 = 11 - x1 - x2\n            # x3 <= x2 to prevent double counting, as the piles must be distinguishable\n            if x3 > 0 and x3 <= x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    return 49 + 83\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_35kg = cost_per_kg * 3.5\n    return cost_for_35kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    result = (2/5) * 30\n    return result\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    # Since we want at least two or more non-zero natural numbers, we start at x1=1\n    for x1 in range(1, 8):\n        for x2 in range(1, 8):\n            if x1 + x2 == 8:\n                count += 1\n            for x3 in range(1, 8):\n                if x1 + x2 + x3 == 8:\n                    count += 1\n                for x4 in range(1, 8):\n                    if x1 + x2 + x3 + x4 == 8:\n                        count += 1\n                    for x5 in range(1, 8):\n                        if x1 + x2 + x3 + x4 + x5 == 8:\n                            count += 1\n                        for x6 in range(1, 8):\n                            if x1 + x2 + x3 + x4 + x5 + x6 == 8:\n                                count += 1\n                            for x7 in range(1, 8):\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 8:\n                                    count += 1\n    return count // 2  # Dividing by 2 to account for double counting (commutative pairs)\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5 / 8) * 4000\n    return result\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    total_lampposts = 113\n    distance_between_lampposts = 8\n\n    # Since there's a lamppost at the start and end, we have total_lampposts - 1 intervals\n    road_length = (total_lampposts - 1) * distance_between_lampposts\n\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n\n    failed_percentage = (failed_pupils / total_pupils) * 100\n\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    sum_erased = sum(i for i in range(1, 51) if '3' in str(i))\n    return sum_erased\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pastas = 4\n    sauces = 3\n    toppings = 3\n    \n    combinations = pastas * sauces * toppings\n    \n    return combinations\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    guests = 153\n    bag_capacity = 12\n\n    poppers_in_last_bag = guests % bag_capacity\n\n    return poppers_in_last_bag\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # In the worst case scenario, for each lock, the warden will have to try all remaining keys\n    # minus 1 (since the last key would definitely be the correct one).\n    \n    total_keys = 10\n    attempts = 0\n    \n    # For each classroom, try the keys until the correct one is found.\n    for remaining_keys in range(total_keys, 0, -1):\n        # He tries all remaining keys minus 1 for each classroom\n        attempts += remaining_keys - 1\n        \n    return attempts\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n    from math import pow, sqrt\n\n    # Setting the precision to handle repeating decimals\n    getcontext().prec = 10\n   \n    # Calculate the repeating decimals using the Decimal module\n    neg_repeating_decimal = Decimal('-40') / Decimal('3')\n    repeating_decimal = Decimal('1') / Decimal('9')\n    root_repeating_decimal = Decimal('100') / Decimal('9')\n\n    # Evaluate the expression with the calculated decimals\n    numerator = pow(neg_repeating_decimal, Decimal('1/3')) * pow(repeating_decimal + 4, 2)\n    denominator = Decimal('59.24') - sqrt(root_repeating_decimal)\n\n    # Calculate the result and round it to three decimal places\n    result = numerator / denominator\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 5 == 3 and num % 6 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # Since we only care about the ones digit, we can look at the pattern of ones digits when\n    # raising 7 to successive powers: 7, 49, 343, 2401, ...\n    # The ones digits follow a cycle: 7, 9, 3, 1. This cycle repeats every 4 multiplications.\n\n    # Compute the position in the cycle for the 2023rd power:\n    cycle_position = 2023 % 4  # 2023 modulo 4 gives us the position in the cycle\n\n    # If cycle_position is 0, the ones digit is the last one in the cycle, which is 1\n    # Otherwise, the ones digit corresponds to the cycle_position - 1 index of the cycle\n    if cycle_position == 0:\n        ones_digit = 1  # Last in the cycle\n    else:\n        # The pattern is 7, 9, 3, 1, so we can create a list with this pattern and use the cycle_position\n        ones_digit_pattern = [7, 9, 3, 1]\n        ones_digit = ones_digit_pattern[cycle_position - 1]\n\n    return ones_digit\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    return comb(10, 2)\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome is 10001 (which is the smallest number that reads the same backwards as forwards).\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome is 999999 (which is the largest number that reads the same backwards as forwards).\n    greatest_6_digit_palindrome = 999999\n    \n    # Calculate the difference between the two palindromes\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    girls_to_boys_ratio = 3 / 1  # 3/4 are girls which means for every girl there is 1/3 boy\n    girls = boys * girls_to_boys_ratio\n    return girls\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    # Since we want the smallest number after removing 46 numbers,\n    # we will remove the first 46 smallest digits, which are '1's and '2's.\n    # The original number is a sequence of increasing integers from 1 to 30 concatenated together.\n\n    # Count the occurrence of '1's and '2's in the original number.\n    num_ones = 0\n    num_twos = 0\n    for i in range(1, 31):\n        num_str = str(i)\n        num_ones += num_str.count('1')\n        num_twos += num_str.count('2')\n\n    total_digits_to_remove = 46\n\n    # Remove '1's first\n    remaining_ones = max(0, num_ones - total_digits_to_remove)\n    total_digits_to_remove -= num_ones - remaining_ones\n    \n    # Then remove '2's if there are still digits to remove\n    remaining_twos = max(0, num_twos - total_digits_to_remove)\n    total_digits_to_remove -= num_twos - remaining_twos\n\n    # Construct the smallest number by skipping the removed '1's and '2's\n    smallest_number = ''\n    for i in range(1, 31):\n        num_str = str(i)\n        for char in num_str:\n            if char == '1' and remaining_ones > 0:\n                remaining_ones -= 1\n            elif char == '2' and remaining_twos > 0:\n                remaining_twos -= 1\n            else:\n                smallest_number += char\n\n    # Convert to integer and return\n    smallest_number = int(smallest_number)\n    return smallest_number\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    ans = (32 - 15) - 12\n    return ans\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    total_years_later = (60 - (sara_age + lucy_age)) / 2\n    return total_years_later\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n    people_two_seater = two_seater_benches * 2\n    people_three_seater = three_seater_benches * 3\n    total_people = people_two_seater + people_three_seater\n    return total_people\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    sequence = [99, -101, 103, -105, 107, -109, 111, -113, 115, -117, 119]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    A = (201 + 1/7) / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the price of a banana and an apple\n    banana, apple = symbols('banana apple')\n    \n    # Ellies pays for 2 bananas and 3 apples\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    # Beth pays for 3 bananas and 2 apples\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n    \n    # Solve the system of equations\n    prices = solve((equation1, equation2), (banana, apple))\n    \n    # Calculate the cost for 1 banana and 1 apple\n    cost_annabella = prices[banana] + prices[apple]\n    \n    return cost_annabella\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    coin_value = 1\n    number_of_coins = int(book_cost // coin_value) + 1\n    change = number_of_coins * coin_value - book_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n    total_marshmallows = marshmallows_per_minute * minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the current age of the older brother, and y the current age of the younger brother.\n    x, y = symbols('x y')\n\n    # When the older brother was y years old, the younger brother was 12 years old.\n    equation1 = Eq(x - y, y - 12)\n\n    # When the younger brother becomes x years old, the older brother will be 27 years old.\n    equation2 = Eq(x + (x - y), 27)\n\n    # Solving the two equations to find x and y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Returning the age of the older brother this year.\n    return solutions[x]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Rona needs to take out one more glove than the product of the number of colors and the number of gloves per pair\n    num_colors = 5\n    gloves_per_pair = 2\n    \n    # She could take out one glove of each color without guaranteeing a pair. The next glove must form a pair.\n    gloves_needed = (num_colors * (gloves_per_pair - 1)) + 1\n    \n    return gloves_needed\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    footballs, basketballs = symbols('footballs basketballs')\n    \n    # Initial condition\n    equation1 = Eq(footballs, (2/5) * basketballs)\n    \n    # After selling basketballs\n    equation2 = Eq(footballs, (2/3) * (basketballs - 16))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (footballs, basketballs))\n    \n    # Total at first\n    total = solutions[footballs] + solutions[basketballs]\n    \n    return total\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = (30 // 8) * 8\n    if first_multiple < 30:\n        first_multiple += 8\n\n    last_multiple = (82 // 8) * 8\n\n    num_multiples = ((last_multiple - first_multiple) // 8) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    num_lines = 13\n    max_junctions = num_lines * (num_lines - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    spring_festival_price = original_price * (1 + 10 / 100)\n    lantern_festival_price = spring_festival_price * (1 - 10 / 100)\n    \n    return lantern_festival_price\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Peter's original amount and Sam's original amount\n    peter, sam = symbols('peter sam')\n\n    # We know Sam had 40 stickers more than Peter initially\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter, and Peter gave 25% of his stickers to Sam\n    # After these transactions, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam - 0.20 * sam + 0.25 * (peter + 0.20 * sam), peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam) + 96)\n\n    # Solve the system of equations for Peter and Sam\n    solutions = solve((equation1, equation2), (peter, sam))\n\n    # Return Peter's original number of stickers\n    return solutions[peter]\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    flora_age_now = 5\n    flora_age_then = flora_age_now - 2\n    father_age_then = 9 * flora_age_then\n    father_age_now = father_age_then + 2\n\n    return father_age_now\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Calculate the total number of games in the group stage\n    # There are 4 people in each group, and each person plays against every other person in the group\n    group_games = 4 * (4 * (4 - 1) // 2)\n    \n    # Calculate the total number of games in the knockout stage\n    # 8 contestants, quarter-finals: 4 games\n    # 4 contestants, semi-finals: 2 games\n    # 2 contestants, final: 1 game\n    # 2 contestants, 3rd place match: 1 game\n    knockout_games = 4 + 2 + 1 + 1\n    \n    # Sum up games from group stage and knockout stage\n    total_games = group_games + knockout_games\n    \n    return total_games\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    for sweets in range(31, 40):\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            return sweets\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert time from minutes to hours\n    time_spent_hours = 7.2 / 60\n\n    # Speed of students\n    speed_students = 8\n\n    # Speed of teacher\n    speed_teacher = 12\n    \n    # relative speed when teacher runs towards the head\n    speed_towards = speed_teacher + speed_students\n    \n    # relative speed when teacher runs back towards the end\n    speed_back = speed_teacher - speed_students\n\n    # Since the time spent for both trips (towards the head and back) is the same,\n    # and distance = speed * time, we can set up the equation:\n    # speed_towards * time_towards = speed_back * time_back\n    # Since time_towards + time_back = time_spent_hours and \n    # assuming time_towards = t, we have time_back = time_spent_hours - t.\n    # Therefore, we have:\n    # speed_towards * t = speed_back * (time_spent_hours - t)\n    # Solving for t we get the time towards the head. The distance can then be obtained from speed_students * t.\n\n    # rearrange the above equation to solve for t\n    t = (speed_back * time_spent_hours) / (speed_towards + speed_back)\n\n    # Calculate the length of the line using the time taken towards the head and speed of students\n    length_of_line = speed_students * t\n\n    return length_of_line\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):  # Check from number 8 to 85\n        count += str(i).count('3')  # Count the number of '3's in each number\n    return count\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Let the distance between home and office be d km.\n    # Let the supposed time to reach office be t hours.\n\n    # Speed = Distance / Time\n    # When Mike is late, time taken is (t + 20/60) hours = (t + 1/3) hours\n    # 4 km/h = d / (t + 1/3)\n\n    # When Mike is early, time taken is (t - 10/60) hours = (t - 1/6) hours\n    # 6 km/h = d / (t - 1/6)\n\n    # Setting up the equations:\n    # 4(t + 1/3) = d ...(1)\n    # 6(t - 1/6) = d ...(2)\n\n    # From equation 1 and 2, we equate the value of d:\n    # 4(t + 1/3) = 6(t - 1/6)\n\n    # Now we solve for t:\n    t = (4/3 + 1)/ (6 - 4)\n\n    # Using t in one of the distances equation to find d:\n    d = 4 * (t + 1/3)\n\n    return d\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        even_number = i * 2\n        count += str(even_number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    # Convert 1 pound to pence\n    pounds_to_pence = 100\n    # Given that £1 = £1.25\n    value_in_pounds = 1.25\n    # Conversion to pence\n    value_in_pence = value_in_pounds * pounds_to_pence\n    return value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    \n    return total_cost\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n    \n    eq1 = Eq(tulips, 3 * roses)\n    eq2 = Eq(sunflowers, roses + 40)\n    eq3 = Eq(roses + tulips + sunflowers, 590)\n    \n    solutions = solve((eq1, eq2, eq3), (roses, tulips, sunflowers))\n    \n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from math import factorial\n\ndef solution():\n    total_letters = 4\n    repetitions = factorial(2)   # There are 2 Z's\n    ways = factorial(total_letters) // repetitions\n    return ways\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    # Reverse the action of Ken\n    ken_took = (remaining + 1) * 2\n    remaining += ken_took - 1 # add back what Ken took\n    \n    # Reverse the action of Nini\n    nini_took = (remaining - 3) * 2\n    remaining += nini_took + 3\n    \n    # Reverse the action of Ivy\n    ivy_took = (remaining + 2) * 2\n    remaining += ivy_took + 2\n    \n    # Reverse the action of Eddie\n    eddie_took = (remaining - 1) * 2\n    remaining += eddie_took + 1\n\n    return remaining\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_climbed = 0\n    for day in range(1, 6):\n        total_climbed += 7  # snail climbs 7 meters each day\n    total_climbed += 3  # on the 6th day, the snail climbs 3 meters\n    \n    # After 6 days, the snail is expected to be out of the burrow but since it is\n    # still inside, it must have slid down the burrow the same distance it climbed.\n    # Therefore, the distance it slides down at night is the total climbed minus the\n    # depth of the burrow.\n    slide_down = total_climbed - 18\n\n    return slide_down\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    for boys in range(1, 99 // 3):\n        girls = 3 * boys\n        paintbrushes = 2 * girls + 3 * boys\n        if paintbrushes == 99:\n            return girls\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "from math import gcd\n\ndef solution():\n    class_A = 12\n    class_B = 16\n    class_C = 20\n\n    gcf = gcd(gcd(class_A, class_B), class_C)\n    \n    return gcf\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import gcd\n    from functools import reduce\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    def lcm_of_list(number_list):\n        return reduce(lcm, number_list)\n\n    lengths = lcm_of_list([2, 3, 5])\n    return lengths\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    term_number = 15\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert each height to centimeters (cm) for comparison\n    height_in_m = 5 * 100  # conversion from meters to centimeters\n    height_in_cm = 120\n    height_in_mm = 50 / 10  # conversion from millimeters to centimeters\n    height_in_feet = 8 * 30.48  # conversion from feet to centimeters\n\n    # A typical human height range in centimeters (let's say from 100cm to 250cm)\n    min_height = 100 # practical minimum adult height\n    max_height = 250 # practical maximum adult height\n\n    # Check which height estimation falls within the typical human height range\n    ans = []\n    for i, h in enumerate([height_in_m, height_in_cm, height_in_mm, height_in_feet]):\n        if min_height < h < max_height:\n            ans.append(i+1)  # Index + 1 to reflect the correct option\n\n    return ans\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    average_boys = 74\n\n    total_participants = total_boys + total_girls\n    overall_average = 82\n\n    total_score_boys = total_boys * average_boys\n    total_score_all = total_participants * overall_average\n\n    total_score_girls = total_score_all - total_score_boys\n    average_girls = total_score_girls / total_girls\n    \n    return average_girls\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # Captured and marked fish are part of the total fish population\n    marked_fish = 100\n    \n    # Captured fish in the second trial\n    second_catch_total = 200\n    \n    # Marked fish found in the second trial\n    marked_fish_second_catch = 25\n    \n    # Calculate the total number of fish in the pond using proportion\n    # (marked_fish / total_fish) = (marked_fish_second_catch / second_catch_total)\n    total_fish = (marked_fish * second_catch_total) / marked_fish_second_catch\n    \n    return int(total_fish)\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    # Total amount of food is enough for 12 rabbits for 15 days\n    total_food = 12 * 15  # This is in \"rabbit-days\", a measure of how much a single rabbit can eat in a day\n\n    # Find out how many days 20 rabbits could be fed with the same amount of food\n    days_for_20_rabbits = total_food / 20\n\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = sum(solutions.values())\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    mass_per_packet = 0.23\n    packets = 6\n    total_mass = mass_per_packet * packets\n    return total_mass\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_initial_money = 10\n    money_given_by_mother = 22\n    dress_cost = 56\n\n    total_money = susan_initial_money + money_given_by_mother\n    money_needed = dress_cost - total_money\n\n    return money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Abigail gets up at 07:40\n    wake_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    \n    # 25 minutes later she starts her breakfast\n    start_breakfast = wake_up_time + timedelta(minutes=25)\n    \n    # Breakfast takes 10 minutes to finish\n    end_breakfast = start_breakfast + timedelta(minutes=10)\n    \n    # Journey takes 35 minutes in total\n    arrival_time = end_breakfast + timedelta(minutes=35)\n    \n    # She arrives 5 minutes late for registration\n    registration_time = arrival_time - timedelta(minutes=5)\n    \n    # Format the registration time to get only the hour and minutes\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 77 // 2 + 1):\n        if (77 - 2 * two_gram_weights) % 3 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_dollars = 2 + 1/2\n    quarters_in_one_dollar = 4\n    \n    num_quarters = total_dollars * quarters_in_one_dollar\n\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score = 90 * 5\n    first_four_scores = 96 + 85 + 89 + 92\n    fifth_score = total_score - first_four_scores\n    return fifth_score\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Function to calculate the sum of the first n cubes\n    def sum_of_cubes(n):\n        return (n * (n + 1) // 2) ** 2\n    \n    # Calculate the sum of cubes from 1 to 20\n    sum_1_to_20_cubes = sum_of_cubes(20)\n    # Calculate the sum of cubes from 1 to 9\n    sum_1_to_9_cubes = sum_of_cubes(9)\n    \n    # Subtract the sum from 1 to 9 from the sum from 1 to 20 to get the sum from 10 to 20\n    result = sum_1_to_20_cubes - sum_1_to_9_cubes\n    return result\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve, lcm\n\n    x = symbols('x')\n\n    equation1 = Eq(x % 4, 3)\n    equation2 = Eq(x % 5, 4)\n    equation3 = Eq(x % 7, 6)\n    lcm_value = lcm(4, 5, 7)\n\n    ans = solve((equation1, equation2, equation3))[0]\n    \n    while ans <= 0:\n        ans += lcm_value\n\n    return ans\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    capacity_per_coach = 34\n    \n    coaches_required = (pupils + capacity_per_coach - 1) // capacity_per_coach\n    \n    return coaches_required\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # Since we want to ensure at least 5 different colors with at least 10 pencils of each,\n    # we can draw the maximum number of pencils for the first 4 colors without getting 10 pencils\n    # of each, and then add 10 for the 5th color.\n\n    # Max pencils for 4 colors without reaching 10 pencils of each\n    max_pencils_without_10_of_each = 4 * (10 - 1)\n    \n    # Adding 10 pencils for the 5th color to ensure at least 10 pencils of this color\n    min_required_pencils = max_pencils_without_10_of_each + 10\n\n    return min_required_pencils\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Initial ratio of sweets between Pip and Bud is 4:7\n    equation1 = Eq(pip/bud, 4/7)\n\n    # After Santa gave Bud five sweets, the ratio between Pip and Bud is 8:15\n    equation2 = Eq(pip/(bud + 5), 8/15)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # Total perimeter of the rectangle\n    perimeter = 2 * (144 + 204)\n\n    # Since wheat is evenly planted and each corner has one, we subtract the corners.\n    # There are 4 corners, so we subtract 4 wheat to get the evenly spaced wheat count.\n    evenly_spaced_wheat_count = 116 - 4\n\n    # The distance between each 2 wheat is the perimeter divided by the number of spaces between the wheat.\n    # The number of spaces is the total count of wheat minus 1.\n    distance_between_wheat = perimeter / evenly_spaced_wheat_count\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    girls_swim = 31/80 * girls  # Ratio of girls who can swim out of total girls\n    girls_cannot_swim = 49/80 * girls  # Ratio of girls who cannot swim out of total girls\n    boys_swim = boys - 120  # Boys who can swim\n    boys_cannot_swim = boys_swim + 120  # Boys who cannot swim\n    \n    # Equations based on the problem statement\n    equation1 = Eq(boys, girls + 90)  # There are 90 more boys than girls\n    equation2 = Eq(girls + boys, 1690)  # Total number of pupils\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    # Calculate the number of pupils who can't swim\n    total_cannot_swim = girls_cannot_swim.subs(girls, solutions[girls]) + boys_cannot_swim.subs(boys, solutions[boys])\n    \n    return int(total_cannot_swim)\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_of_5 = 5\n    last_digit_of_7_power_30 = pow(7, 30, 10)\n    ans = (last_digit_of_5 * last_digit_of_7_power_30) % 10\n    return ans\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    length1 = 39\n    length2 = 52\n    longest_piece_length = gcd(length1, length2)\n    return longest_piece_length\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    return 999 / 2\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    # Simon's equation: 4A + 4B = 36\n    # Peter's equation: 2A + 3B = 22\n    equations = (Eq(4*A + 4*B, 36), Eq(2*A + 3*B, 22))\n    grades_solution = solve(equations, (A, B))\n\n    # Calculate the score of someone with 3 A grades and 5 B grades using the solution\n    score = 3 * grades_solution[A] + 5 * grades_solution[B]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    # Joe has a chocolate bar with 16 squares and he decides to share it with his friend.\n    # As we're not given the specific manner of how the bar is shared, we can assume they share it equally.\n    # Therefore, Joe keeps half of the chocolate bar's squares.\n\n    total_squares = 16\n    joe_squares = total_squares / 2  # Joe has half because he shares with one friend\n\n    return int(joe_squares)  # make sure to return an integer\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "from sympy import primerange\nfrom itertools import permutations\n\ndef solution():\n    prime_numbers = list(primerange(1, 46))\n\n    for A, B, C in permutations(prime_numbers, 3):\n        # A: No addition equation can be formed.\n        # Since all prime numbers except 2 are odd and the sum of two odd numbers is even,\n        # the only way an even number could be the sum is if it's 2 (the only even prime),\n        # which is not possible here because all numbers are below 45 and different.\n        if A + B == C or A + C == B or B + C == A:\n            continue\n        \n        # B's statement that if they subtract 1 from B, the difference is 7\n        # It indicates that B - 1 is even, and the only even prime is 2,\n        # which means B = 2 + 7 = 9, but 9 is not prime, so B's statement\n        # leads to no valid prime number B which gives the difference of 7.\n        # Therefore, we need to interpret this as the difference between A (or C) and B being 7.\n        if abs(B - A) != 7 and abs(B - C) != 7:\n            continue\n        \n        # C's number when multiplied by 2 can form an addition equation with the other two.\n        if not (2 * C) in prime_numbers:\n            continue\n        \n        if (A + B) == 2 * C or (A + (2 * C)) == B or (B + (2 * C)) == A:\n            return A + B + C\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_from_end\n    \n    return total_children\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    ans = sum(str(i).count('1') for i in range(1, 121))\n    return ans\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_off = 42\n    people_on = 60\n    people_after = 322\n\n    people_before = people_after - people_on + people_off\n\n    return people_before\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # A is the smallest prime number\n    A = 2\n    # B is the smallest composite number\n    B = 4\n    # C is neither prime number nor composite number or zero (1)\n    C = 1\n    # D is 2 less than the smallest prime number\n    D = A - 2\n    # E is the largest composite number up to 10\n    E = 10\n    # F only has factors 1 and 5\n    F = 5\n    # G is the greatest factor of 8\n    G = 8 // 2 # Using integer division for python\n    # H is the lowest multiple of 6\n    H = 6\n    \n    ans = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n    return ans\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_per_day = 24 * 60 * 60\n    return seconds_per_day * (1/4) * (1/6) * (1/8)\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total stickers Charlotte has initially\n    # The amount of stickers Marry and Alexis gives to Charlotte would be 0.2 * 7x and 0.2 * 5x respectively\n    # After giving away the stickers, Charlotte's stickers increased by 80% which is equal to her initial stickers plus 0.8 * her initial stickers\n    # 0.2 * 7x + 0.2 * 5x = 0.8 * x\n    # Also, Marry has 20 stickers more than Charlotte after giving away the stickers\n    # 0.8 * 7x + 20 = 1.8x\n\n    x = symbols('x')\n    equation1 = Eq(0.2 * 7 * x + 0.2 * 5 * x, 0.8 * x)\n    equation2 = Eq(0.8 * 7 * x + 20, 1.8 * x)\n\n    # Solve the equations\n    result = solve((equation1, equation2), x)\n\n    # Calculate how many stickers Alexis have initially\n    alexis_stickers = 5 * result[x]\n\n    return alexis_stickers\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "from math import factorial\n\ndef solution():\n    # Since Eddie and his mom and dad always stand together, consider them as a single unit plus the others.\n    # So, first we find the number of ways to arrange this single family unit and the others.\n    \n    num_people_others = 3  # Considering Eddie's family as 'one' and everyone else as individuals\n    \n    arrangements_with_family_as_unit = factorial(num_people_others)\n\n    # Then, find the number of ways Eddie and his mom and dad can arrange themselves within their unit.\n    num_family_members = 3  # Eddie, Mom, Dad\n\n    arrangements_within_family = factorial(num_family_members)\n\n    # The total number of arrangements is the product of these two values\n    total_arrangements = arrangements_with_family_as_unit * arrangements_within_family\n\n    return total_arrangements\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 2, 2, 3, 3]\n    unique_numbers = set(permutations(digits, 4))\n    ans = len(unique_numbers)\n    return ans\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for a in range(1, 10):  # thousands digit (also units digit, cannot be zero)\n        for b in range(0, 10):  # hundreds digit \n            for c in range(0, 10):  # tens digit\n                pips_number = int(f\"{a}{b}{c}{a}\")  # Construct Pip's number\n                buds_number = int(f\"{a}{c}{b}{a}\")  # Construct Bud's number by swapping tens and units\n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    grass_for_1_cow_for_1_day = (25 * 10) # total amount of grass available\n    grass_for_50_days = grass_for_1_cow_for_1_day * 50 # amount needed for 50 days\n    \n    cows_for_50_days = grass_for_1_cow_for_1_day * 10 / 50 # cows that can be fed for 50 days\n    \n    return cows_for_50_days\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    pages = 95\n    days = 0\n    while pages > days:\n        days += 1\n        pages -= days\n    return days\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n\n    # Correct the mistake where Jenson mistook the minuend\n    correct_minuend = 166\n    subtrahend = incorrect_minuend - incorrect_difference\n    correct_difference = correct_minuend - subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = 3 * first_day  # 1/3 of second day is first day\n    third_day = (5 / 3) * second_day  # 5/3 of second day is third day\n\n    total_sold = first_day + second_day + third_day\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    initial_price = 2000\n    discount_rate = 0.30\n    additional_discount = 100\n    tax_rate = 0.10\n    \n    price_after_first_discount = initial_price * (1 - discount_rate)\n    final_selling_price = price_after_first_discount - additional_discount\n    total_tax = final_selling_price * tax_rate\n    total_price_paid = final_selling_price + total_tax\n    \n    return total_price_paid\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    # Let the original number of oranges be 3x and lemons be 5x\n    # After selling 48 oranges, the number of oranges becomes 3x - 48\n    # The new ratio is 1:2, so (3x - 48) / 5x = 1 / 2\n    # We solve the equation for x to find the original number of lemons, which is 5x\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x - 48) / 5*x, 1/2)\n    solution = solve(equation, x)\n\n    # Since x might be a fractions and we need the number of lemons which should be an integer,\n    # we take the first valid solution\n    x_value = next(val for val in solution if val.is_integer)\n    \n    # Calculate the original number of lemons, which is 5 times x\n    num_lemons = 5 * x_value\n\n    return num_lemons\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    cakes_isaac_can_make = 250 / flour_per_cake\n    return int(cakes_isaac_can_make)\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # There are 3! ways to arrange the math books among themselves\n    math_books_arrangement = factorial(3)\n    # There are 2! ways to arrange the English books among themselves\n    english_books_arrangement = factorial(2)\n    # There are 3! ways to arrange the other books among themselves\n    other_books_arrangement = factorial(3)\n    # Treat the block of math books as one unit, the block of English books as one unit, and the 3 other books\n    # Now, we have 5 items to arrange: [math_block, english_block, book1, book2, book3]\n    blocks_arrangement = factorial(5)\n    \n    # The total number of ways to arrange the books is the product of the arrangements\n    total_arrangements = math_books_arrangement * english_books_arrangement * other_books_arrangement * blocks_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ophelia, penelope = symbols('ophelia penelope')\n\n    equation1 = Eq(ophelia, 4 * penelope)\n    equation2 = Eq(penelope + 21, (5/8) * ophelia)\n\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    missing_number = (32 * 8) / 20\n    return missing_number\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    # Ivy's work rate\n    ivy_rate = 1 / 24\n    # Kevin's work rate\n    kevin_rate = 1 / 20\n    \n    # Both working together\n    combined_rate = ivy_rate + kevin_rate\n    \n    # If both worked without breaks, they would finish in:\n    # work_needed = 1 job\n    work_needed = 1\n    # days_to_finish_with_no_breaks = work_needed / combined_rate\n    days_to_finish_with_no_breaks = work_needed / combined_rate\n\n    # Since they finish in 12 days, they work at combined_rate for (12 - days_kevin_takes_off)\n    # Equation: (ivy_rate * 12) + (kevin_rate * (12 - days_kevin_takes_off)) = 1 job\n    # We solve for days_kevin_takes_off.\n    days_kevin_takes_off = 12 - (work_needed - (ivy_rate * 12)) / kevin_rate\n\n    return days_kevin_takes_off\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    both_competitions = (maths_students + art_students) - total_students\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    remainder = 379 % 6\n    return remainder\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    total_colors = 2\n    socks_per_color = 4\n    socks_to_ensure_pair = socks_per_color + 1\n\n    # She must take out 4 (socks_per_color) of one color plus one more to ensure a pair\n    ans = socks_to_ensure_pair\n\n    return ans\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # in pence\n    new_price = 100  # 1.00 pound in pence\n    increase = new_price - original_price  # the increase in price\n    \n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    price = 80\n    gst_rate = 8 / 100\n    total_cost = price * (1 + gst_rate)\n    return total_cost\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "def solution():\n    from math import factorial\n\n    # There are 9 different statues, and we want to arrange 4 of them in a row.\n    # This is a permutation problem, since the order matters.\n\n    # Number of ways to arrange k items from a set of n items (nPk) = n! / (n-k)!\n    n = 9  # total number of statues\n    k = 4  # number of statues to arrange\n\n    # Calculate permutations\n    arrangements = factorial(n) // factorial(n - k)\n\n    return arrangements\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    number_of_years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** number_of_years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    # Let the number of bicycles be x and tricycles be y.\n    # We have two equations based on the problem statement:\n    # x + y = 300 (total number of cycles)\n    # 2x + 3y = y + 180 + 2x (total number of wheels)\n    # Simplify the second equation to find y:\n    # y = 180\n\n    # So, substitute the value of y in the first equation to find x:\n    # x + 180 = 300\n    # x = 300 - 180\n    # x = 120\n\n    # x is the number of bicycles in the shop.\n    num_bicycles = 300 - 180\n\n    return num_bicycles\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1\n    \n    dividend = (quotient * divisor) + remainder\n    return dividend\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # Since there are 2 grey rabbits for every complete pattern cycle,\n    # and there are 14 grey rabbits, we can find the number of complete cycles\n    cycles = 14 // 2\n    \n    # Each complete cycle contains 1 black, 2 white, and 2 grey rabbits\n    rabbits_per_cycle = 1 + 2 + 2\n    \n    # Now calculate the total number of rabbits from the complete cycles\n    total_rabbits = cycles * rabbits_per_cycle\n    \n    # Check if there are any additional grey rabbits beyond the full cycles\n    remaining_grey = 14 % 2\n    # If there are additional grey rabbits, it means there is an incomplete cycle\n    if remaining_grey > 0:\n        # In an incomplete cycle, add 1 black and 2 white rabbits and the remaining grey rabbits\n        total_rabbits += 1 + 2 + remaining_grey\n    \n    return total_rabbits\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    ans = 6 + 9\n    return ans\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    return ((2015**2) - ((2015 + 1) * (2015 - 1)))\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    neither_chocolate_nor_foil = 9\n    chocolate_biscuits = chocolate_with_foil + (total_biscuits - foil_wrappers - neither_chocolate_nor_foil)\n    return chocolate_biscuits\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4/5 * 1\n    return ans\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number_with_decimal = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number_with_decimal, 1)\n    \n    if rounded_number == 9764.0:\n        return False, rounded_number\n    else:\n        return False, rounded_number\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n    \n    # Equation representing the sequence of transactions\n    equation = Eq((initial_crystals / 2) + 10 - 14 + 20, 35)\n\n    solution = solve(equation, initial_crystals)\n\n    return solution[0]\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the original speed be v (m/min) and the original time be t (min)\n    v, t = symbols('v t', positive=True, real=True)\n    \n    # Speed increased by 25%, so the new speed is v + 0.25v = 1.25v\n    # Time decreased by 20 minutes, so the new time is t - 20\n    equation1 = Eq(1.25 * v * (t - 20), v * t)\n    \n    # Speed decreased by 45 m/min, so the new speed is v - 45\n    # Time increased by 75%, so the new time is t + 0.75t = 1.75t\n    equation2 = Eq((v - 45) * 1.75 * t, v * t)\n    \n    # Solve the equations for v and t\n    solutions = solve((equation1, equation2), (v, t))\n    \n    # Distance is original speed times original time\n    distance = solutions[v] * solutions[t]\n    \n    return distance\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Since trailing zeros are made by pairs of 2 and 5 in the prime factorization\n    # We only have 10 twos, and at least 10 fives, so the number of zeros will be\n    # equal to the number of twos, which is the limiting factor\n\n    # Count of fives >= 15\n    # Count of twos = 10\n    # So the number of trailing zeros in A is equal to count of twos (10)\n    return 10\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    # Get all permutations of the digits\n    digit_perms = list(permutations(digits))\n    # There are 4 possible positions for the decimal point in a 4-digit number\n    return len(digit_perms) * 4\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    Olaf, Anna = symbols('Olaf Anna')\n    \n    equation1 = Eq(Olaf, 3 * Anna)\n    equation2 = Eq(Anna + 335, 2 * (Olaf - 335))\n    \n    solutions = solve((equation1, equation2), (Olaf, Anna))\n    \n    return solutions[Anna]\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    # Bala is directly behind Ali so we count Bala only once.\n    total_people = people_in_front_of_ali + people_behind_bala + 1  # +1 for Ali\n\n    return total_people\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # Using the inclusion-exclusion principle\n    blue_fords = fords - (black_dodges - (total_cars - blue_cars))\n\n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return int(total_age)\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    plant_cost_pence = 85\n    budget_pounds = 30\n    budget_pence = budget_pounds * 100  # Convert pounds to pence\n    \n    max_plants = budget_pence // plant_cost_pence\n    \n    return max_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    smaller_number = min(solutions[x], solutions[y])\n\n    return smaller_number\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4  # The smallest composite number is 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        # Check if all are composite\n        if (len([i for i in range(2, A//2+1) if A % i == 0]) > 0 and\n            len([i for i in range(2, B//2+1) if B % i == 0]) > 0 and\n            len([i for i in range(2, C//2+1) if C % i == 0]) > 0 and\n            len([i for i in range(2, D//2+1) if D % i == 0]) > 0):\n            return A + B + C + D\n        A += 1\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    for num in range(1, 1000): # Upper bound as an arbitrary large number to find the smallest value\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_daily_earnings = 120\n    days_worked = 5  # Monday to Friday\n    \n    total_earnings = average_daily_earnings * days_worked\n    return total_earnings\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # To guarantee at least one of each colored ball, the magician must pick at least:\n    # all balls of the two most populous colors + 1 \n    # This guarantees that even if he picked all balls of one color, \n    # he will still have to pick a ball from the remaining colors,\n    # so the +1 will be a ball from the third color.\n\n    # Number of blue, red, and green balls\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n\n    # Calculating the number of picks needed\n    picks_needed = (red_balls + green_balls) + 1  # Based on the Pigeonhole Principle\n\n    return picks_needed\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    # If each child gets at least one apple, we subtract that from the total\n    total_apples -= children\n\n    # Now divide the remaining apples by children to get the least possible number for the child with the most apples\n    min_apples_for_max_child = (total_apples // children) + 1 # Plus one because we already gave each one apple\n\n    # We need to add one back because each child already has an apple\n    return min_apples_for_max_child + 1\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    score_per_correct = 3\n    deduction_per_wrong = 2\n\n    # Let x be the number of correct answers\n    # Then (total_questions - x) is the number of wrong answers\n    # Set up the equation: correct_answers_score - wrong_answers_deduction = total_score\n\n    for correct_answers in range(total_questions + 1):  # +1 because range is exclusive at the end\n        wrong_answers = total_questions - correct_answers\n        total_score = correct_answers * score_per_correct - wrong_answers * deduction_per_wrong\n        if total_score == 125:\n            return correct_answers\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3 / 8) * 960\n    return ans\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "from math import comb\n\ndef solution():\n    teams = 6\n    games = comb(teams, 2)  # Choose 2 teams to play a game from 6 teams\n    return games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n    return gcd(gcd(60, 72), 84)\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    return 7001 - 360\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    return (10 - (30 % 12)) % 12 or 12\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n    \n    while len(sequence) < 2011:\n        next_num = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_num)\n        \n    ans = sequence[2010]\n    return ans\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds = 24\n    full_number = (two_thirds * 3) / 2\n    three_quarters = (full_number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31\n    m = 1\n    \n    while True:\n        odd_sum = sum(range(23, 2 * k, 2))\n        if (odd_sum**0.5).is_integer():\n            m = int(odd_sum**0.5)\n            break\n        k += 1\n        \n    return m\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Calculate the distance covered in the first 2 hours\n    distance_first_part = 2 * 40\n    \n    # Distance covered in the remaining part\n    distance_remaining_part = 280\n    \n    # Time taken to cover the remaining distance\n    time_remaining_part = distance_remaining_part / 70\n    \n    # Total distance covered\n    total_distance = distance_first_part + distance_remaining_part\n    \n    # Total time taken\n    total_time = 2 + time_remaining_part\n    \n    # Calculate average speed\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alan, bob = symbols('alan bob')\n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    solutions = solve((equation1, equation2), (alan, bob))\n    \n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    grass_per_cow_per_day = 1\n    \n    total_grass_eaten = cows * days * grass_per_cow_per_day\n\n    return total_grass_eaten\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 3)\n    equation2 = Eq(3 * banana + 2 * apple, 4)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    annabella_pay = 10 * solutions[banana] + 10 * solutions[apple]\n\n    return annabella_pay\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    initial_amount = 20\n    daily_savings = 1\n    savings_duration = 7  # one week\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_savings = initial_amount + daily_savings * savings_duration\n    money_left = total_savings - lent_to_brother - spent_on_snacks\n\n    return money_left\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    total_visitors = 100  # Assume a hypothetical number of visitors that is easy to work with\n    men = 0.37 * total_visitors  # Calculate the percentage of men\n    women_and_children = total_visitors - men  # The rest are women and children\n\n    # women to children ratio is 4:5, so we can consider 4x women and 5x children\n    children = (women_and_children / (4 + 5)) * 4\n    women = (women_and_children / (4 + 5)) * 5\n    \n    # Given that there are 12 more men than children, we calculate the actual number of visitors\n    actual_children = children * (total_visitors / (men - 12))\n    \n    # Getting the actual number of women based on the hypothetical number assumed\n    actual_women = women * (total_visitors / (men - 12))\n    \n    return int(actual_women)\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amount_sold = symbols('amount_sold')\n    big_bucket = 89 - amount_sold\n    small_bucket = 45 - amount_sold\n    equation = Eq(big_bucket, 12 * small_bucket)\n    \n    amount_sold_solution = solve(equation, amount_sold)\n\n    return amount_sold_solution[0]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_work_late = 0.7\n    prob_home_late = 0.4\n\n    prob_neither_late = (1 - prob_work_late) * (1 - prob_home_late)\n    prob_at_least_one_late = 1 - prob_neither_late\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    initial_strawberries = 86\n    given_away = 29\n    final_strawberries = 100\n    \n    strawberries_received = final_strawberries - (initial_strawberries - given_away)\n    \n    return strawberries_received\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    count = 0\n    for num in range(10, 100):\n        if '6' in str(num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('01/04/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/05/2023', '%d/%m/%Y')\n    day_off = (end_date - start_date).days + 1\n\n    return day_off\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_squared = (2023 ** 2) % 10  # Find the last digit of 2023^2\n    last_digit_2_power_2023 = pow(2, 2023, 10)  # Find the last digit of 2^2023\n\n    # Sum the last digits and raise to the power of 3, then find the last digit\n    last_digit_sum = (last_digit_2023_squared + last_digit_2_power_2023) ** 3\n    ans = last_digit_sum % 10\n\n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count_divisible_by_7 = (2022 // 7)\n    count_divisible_by_17 = (2022 // 17)\n    count_divisible_by_both = (2022 // (7 * 17))\n\n    ans = 2022 - (count_divisible_by_7 + count_divisible_by_17 - count_divisible_by_both)\n    return ans\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    relative_speed = speed_a + speed_b\n\n    time = distance / relative_speed\n\n    return time\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mango, orange, pear = symbols('mango orange pear')\n    \n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4*mango + 2*pear + orange, 13.20)\n    \n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    # The maximum number of intersection points that can occur from 13 straight lines\n    # occurs when no two lines are parallel and no three lines intersect at the same point.\n    # Each pair of lines intersects at a unique point.\n    # Therefore, the number of intersection points is the number of ways to choose 2 lines from 13,\n    # which is C(13, 2) - the combination of 13 taken 2 at a time.\n    \n    from math import comb\n    ans = comb(13, 2)\n    return ans\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "from math import gcd\n\ndef solution():\n    pencils = 28\n    pens = 63\n    \n    ans = gcd(pencils, pens)\n    \n    return ans\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    pi = 22 / 7\n    AB_CD = 14  # Length of AB and CD\n    \n    # The perimeter is made up of two semicircles and two quadrants.\n    # The diameter of the semicircles is AB or CD, so the radius is AB/2 or CD/2.\n    # Since we have two semicircles, their combined perimeter is the perimeter of a full circle.\n    # Additionally, two quadrants make up a semicircle.\n\n    # Calculate the perimeter of a full circle with diameter 14cm (which is also radius 7cm for semicircle)\n    circle_perimeter = pi * (AB_CD)\n    \n    # The quadrants are half the perimeter of the semicircles.\n    # Since we have 2 quadrants, their perimeter is same as a semicircle.\n    quadrant_perimeter = (pi * (AB_CD / 2)) / 2\n    \n    # Calculate total perimeter, which is the perimeter of semicircles plus quadrants\n    total_perimeter = circle_perimeter + (2 * quadrant_perimeter)\n    \n    return total_perimeter\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    return 2.99 + 12.99 + 22.99\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total = symbols('total')\n    first_day = total / 3\n    remaining_after_first = total - first_day\n    second_day = 3/5 * remaining_after_first\n    remaining_after_second = remaining_after_first - second_day\n\n    # Equation representing the number of watermelons left after both days\n    equation = Eq(remaining_after_second, 48)\n\n    # Solving the equation\n    total_watermelons = solve(equation, total)\n\n    return total_watermelons[0]\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the cost of a packet of rice\n    rice_cost = symbols('rice_cost')\n\n    # Equation representing the total cost\n    total_cost = Eq(6 * 95 + 5 * rice_cost, 1170)  # The total cost is given in pence\n\n    # Solve for the cost of a packet of rice\n    rice_cost_solution = solve(total_cost, (rice_cost))\n\n    return rice_cost_solution[0]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 3 == 0 and i % 5 == 0 and i % 7 == 0 and str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    # The last digit of a number raised to any power will repeat with a certain pattern\n    # for base 5, last digit is always 5 irregardless of the power\n    last_digit_of_5 = 5 \n    # for base 7, the last digit cycles every 4th power: 7, 9, 3, 1, ....\n    cycle_of_7 = [7, 9, 3, 1]\n    position_in_cycle = 20 % 4 # Find the position of the last digit after raising base 7 to the 20th power\n    if position_in_cycle == 0: # If the reminder is 0, then we take the last element of cycle\n        position_in_cycle = 4\n    last_digit_of_7 = cycle_of_7[position_in_cycle - 1] # Subtracting 1 since list index starts at 0\n\n    # The last digit of the entire expression will be\n    # the product of the last digits of each group\n    last_digit_of_expression = (last_digit_of_5 * last_digit_of_7) % 10\n\n    return last_digit_of_expression\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    return comb(10, 6)\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    # Assign variables based on the given information\n    combined_rate_days = 12\n    energetic_rate_days = 20\n\n    # Find the combined work rate (houses per day)\n    combined_rate = 1 / combined_rate_days\n\n    # Find the energetic decorator's work rate (houses per day)\n    energetic_rate = 1 / energetic_rate_days\n\n    # Find the lazy decorator's work rate by subtracting the energetic's rate from the combined rate\n    lazy_rate = combined_rate - energetic_rate\n\n    # Calculate the number of days it would take for the lazy one to paint the house on his own\n    # by taking the reciprocal of the lazy's work rate\n    lazy_days = 1 / lazy_rate\n\n    return lazy_days\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    base = (2/3) * 45\n    ans = (30/100) * base\n    return ans\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    average = 1650 / 15  # The average of the 15 consecutive numbers.\n    smallest_number = average - 7  # The middle number is the average, so subtract 7 to get the smallest number.\n    largest_number = average + 7  # Add 7 to the middle number (average) to get the largest number.\n    sum_of_largest_smallest = smallest_number + largest_number\n    \n    return sum_of_largest_smallest\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # We start from the innermost fraction and proceed outwards.\n    # Given the fraction 13/10 can be expressed in the form:\n    # 1 + 1/(a + 1/(b + 1/c))\n    \n    # Begin with the fraction 13/10\n    numerator = 13\n    denominator = 10\n\n    # Subtract 1 to get the fraction part, resulting in 3/10\n    numerator -= denominator\n\n    # Invert the fraction to start finding 'a', resulting in 10/3\n    numerator, denominator = denominator, numerator\n\n    # 'a' is the integral part of the inverted fraction\n    a = numerator // denominator\n\n    # Subtract 'a' to get the fraction part of the next step\n    numerator -= a * denominator\n\n    # Invert the fraction again to find 'b'\n    numerator, denominator = denominator, numerator\n\n    # 'b' is the integral part of the inverted fraction\n    b = numerator // denominator\n\n    # Subtract 'b' to get the fraction part of the next step\n    numerator -= b * denominator\n\n    # Invert the fraction again to find 'c'\n    numerator, denominator = denominator, numerator\n\n    # 'c' is the integral part of the last inverted fraction\n    c = numerator // denominator\n\n    # Calculate the result according to a + 2b + 3c\n    return a + 2 * b + 3 * c\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    pies = 1\n    while not (pies % 4 == 0 and pies % 6 == 0):\n        pies += 1\n    return pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boys_per_line = 3\n    girls_per_line = 2\n    \n    lines = boys / boys_per_line\n    girls = lines * girls_per_line\n    \n    return int(girls)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n    for number in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45.0\n    cloth_per_skirt = 2.83\n    number_of_skirts = 8\n    number_of_blouses = 2\n\n    cloth_used_for_skirts = cloth_per_skirt * number_of_skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = remaining_cloth / number_of_blouses\n\n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    current_number = 1\n    total_digits = 0\n\n    while True:\n        current_number_length = len(str(current_number))\n        if total_digits + current_number_length >= 2019:\n            remaining_digits = 2019 - total_digits\n            return int(str(current_number)[remaining_digits - 1])\n        total_digits += current_number_length\n        current_number += 1\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # For a, the remainder when divided by 8 is 6, so a = 8k1 + 6\n    # For b, the remainder when divided by 8 is 7, so b = 8k2 + 7\n    # We want to find the remainder of (a + b) / 8\n    remainder_a = 6\n    remainder_b = 7\n\n    # Sum the remainders\n    sum_remainders = remainder_a + remainder_b\n\n    # Calculate the remainder of the sum of a and b when divided by 8\n    ans = sum_remainders % 8\n    \n    return ans\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # Since the security guard tries keys one by one and never uses a key again once its correct room has been found,\n    # he will take one try for the first key, then at most 10 tries for the second key, and so on, until 1 try for the last key.\n    # This sums up to the worst-case scenario, which is the sum from 1 to 11.\n    # This can be calculated using the formula for the sum of the first n natural numbers: n*(n+1)/2\n    num_keys = 11\n    max_tries = sum(range(1, num_keys+1))\n\n    return max_tries\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    n, _ = solve_congruence(*congruences)\n    \n    return n\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    unique_numbers = set(permutations(digits, 4))\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n\n    difference = greater_number - smaller_number\n    \n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # total mass in kilograms\n    basket_mass_kg = 500 / 1000  # converting basket mass from grams to kilograms\n    kitten_mass_kg = 0.6  # mass of one kitten in kilograms\n    number_of_kittens = 4\n\n    kittens_total_mass_kg = number_of_kittens * kitten_mass_kg\n    \n    cat_mass_kg = total_mass_kg - basket_mass_kg - kittens_total_mass_kg\n    \n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    return 412 / 1000\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_people = 6\n    cost_per_person = total_cost / number_of_people\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n    new_price = original_price * (1 + increase_percentage / 100)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    siblings = 3 + 4  # 3 brothers and 4 sisters\n    mary = 1\n    people = siblings + mary  # total number of people including Mary\n\n    eggs_bought = people * siblings  # each person buys an egg for each sibling\n\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    format = '%H:%M'\n    leave_time = datetime.strptime('7:50', format)\n    arrive_time = datetime.strptime('8:40', format)\n    journey_duration = arrive_time - leave_time\n    \n    return journey_duration\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for apples and banana\n    apples, banana = symbols('apples banana')\n\n    # Equation for 3 apples and a banana cost 32p\n    equation1 = Eq(3 * apples + banana, 32)\n\n    # Equation for 6 apples and a banana cost 53p\n    equation2 = Eq(6 * apples + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # given sequence\n    sequence = [3, 6, 10, 15]\n    # find the next number by identifying the pattern\n    # pattern: the difference between consecutive numbers increases by 1\n    # (6 - 3) = 3, (10 - 6) = 4, (15 - 10) = 5\n    # next difference should be 6\n    next_diff = (sequence[-1] - sequence[-2]) + 1\n    next_number = sequence[-1] + next_diff\n    return next_number\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_amount = symbols('initial_amount')\n\n    # Samuel spent 1/6 of his money and an additional $5 on a DVD.\n    after_dvd = initial_amount - (initial_amount / 6) - 5\n\n    # He then spent 2/5 of the remaining money and an additional $12 on magazines.\n    after_magazines = after_dvd - (2 / 5) * after_dvd - 12\n\n    # He had $24 left.\n    equation = Eq(after_magazines, 24)\n\n    # Solve for the initial amount of money.\n    solution = solve(equation, initial_amount)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    # Let's denote the original amount of money Joanne had as x.\n    # Based on the problem, after spending 1/5 on a handbag, Joanne is left with 4/5 of her money.\n    # She further spends 3/5 of the remaining (which is 4/5 of the original) on a dress.\n    # This leaves her with 2/5 of 4/5 of the original amount, which is 8/25 of the original amount.\n    # This remaining money is $80, so we can write the equation 8/25 * x = 80.\n\n    # Solve the equation for x to find out how much money Joanne had originally\n    x = (80 * 25) / 8\n\n    return x\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_poured_into_bottle = 5\n    oil_left = total_oil - oil_poured_into_bottle\n    number_of_tanks = 6\n\n    volume_per_tank = oil_left / number_of_tanks\n\n    return volume_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    # Let's denote the number of years in which Grandpa's age is 5 times Johnny's age as x.\n    # Grandpa's age in x years will be 72 + x.\n    # Johnny's age in x years will be 8 + x.\n    # Set up the equation: 72 + x = 5 * (8 + x)\n    # Solve for x.\n    x = symbols('x')\n    equation = Eq(72 + x, 5 * (8 + x))\n\n    # Use sympy's solve function to solve for x.\n    solution = solve(equation, x)\n\n    # Return the solution.\n    return solution[0]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    amount = 2519.42\n    years = 3\n    \n    interest_rate = (amount / principal) ** (1/years) - 1\n    interest_rate_percent = round(interest_rate * 100, 1)  # Convert to percent and round to nearest tenth\n    \n    return interest_rate_percent\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    sum_odd = sum(range(1, 51, 2))\n    sum_even = sum(range(2, 51, 2))\n    ans = sum_even - sum_odd\n    return ans\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position = 8\n    bud_position_from_end = 10\n\n    # Since Pip is in front of Bud and there are 4 children between them,\n    # add 4 to Pip's position to get the total number of children before Bud.\n    bud_position = pip_position + 4 + 1  # +1 because we count Pip as well.\n\n    # The total number of children in the queue is Bud's position from the front\n    # plus his position from the end.\n    total_children = bud_position + bud_position_from_end - 1  # -1 to avoid double counting Bud.\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of cards Alan and Bob have\n    alan, bob = symbols('alan bob')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(bob, alan + 15)        # Bob has 15 more cards than Alan\n    equation2 = Eq(bob + 25, 3 * alan)    # After receiving 25 cards, Bob has 3 times as many as Alan\n\n    # Solve the simultaneous equations to find the values of alan and bob\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    # The solution for 'alan' is what the question is asking\n    return solutions[alan]\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    m, n, x = symbols('m n x')\n    operation_delta = 5*m + 3*n\n    \n    equation = Eq(5*x + 3*9, 37)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Worst case scenario, she takes out all balls of two colors without getting 4 of the same color.\n    max_other_balls = (5 - 1) + (4 - 1) # Take one less from each of the largest groups, 5 blue and 4 orange.\n    \n    # Then, whatever color she picks next has to result in having 4 of the same color.\n    balls_to_ensure_fourth = 1\n\n    # Add 1 for the yellow balls as she might take them out first\n    total_balls_to_take = max_other_balls + balls_to_ensure_fourth + (2 - 1)\n\n    return total_balls_to_take\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15 AM\", \"%I:%M %p\")\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of elderly, and y be the total number of oranges\n    x, y = symbols('x y')\n\n    # Each elderly gets 20 oranges, and 10 do not receive any, so the number of elderly is x + 10\n    # The total number of oranges is the same in both cases\n    equation1 = Eq(y, 20 * (x - 10))\n\n    # If she gives 16 oranges to each elderly, she has enough oranges to pack 25 boxes with 2 dozen each\n    # 25 boxes * 24 oranges/box equals the total number of oranges y \n    equation2 = Eq(y, 16 * x + (25 * 24))\n\n    # Solve the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The number of oranges Janice should give to each elderly\n    elderly_count = solutions[x]\n    oranges_to_give = y / elderly_count\n\n    return oranges_to_give\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    removed_soil_fraction = 1/5\n    remaining_weight = 27\n\n    removed_soil_weight = full_weight * removed_soil_fraction\n    empty_weight = full_weight - removed_soil_weight - (full_weight - remaining_weight)\n\n    return empty_weight\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the quantities of cookies Tim and Tyler have.\n    tim, tyler = symbols('tim tyler')\n\n    # Create equations based on the given information.\n    equation1 = Eq((1/6) * tim, (3/8) * tyler)\n    equation2 = Eq(tim, 9 * (tyler - 96))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (tim, tyler))\n\n    # Calculate the total number of cookies at first.\n    total_cookies = solutions[tim] + solutions[tyler]\n\n    return total_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import symbols\n\n    # Define symbols for the unknowns\n    chocolate, vanilla, blueberry, total = symbols('chocolate vanilla blueberry total')\n    \n    # Set up the equations based on the given information\n    eq1 = chocolate - vanilla - 72          # Chocolate is 72 more than vanilla\n    eq2 = vanilla - blueberry - 36          # Blueberry is 36 less than vanilla\n    eq3 = 1/6 * chocolate + 2/3 * vanilla + 7/9 * blueberry - total  # Cupcakes left after selling\n\n    # Solve the equations to get the number of each type of cupcakes before selling\n    solutions = solve((eq1, eq2, eq3 - 427), (chocolate, vanilla, blueberry))\n\n    # Extract the value of chocolate cupcakes before selling\n    chocolate_cupcakes_before = solutions[chocolate]\n\n    # Calculate the chocolate cupcakes sold\n    chocolate_cupcakes_sold = chocolate_cupcakes_before - 1/6 * chocolate_cupcakes_before\n\n    return int(chocolate_cupcakes_sold)\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    interval_platform_1 = 24\n    interval_platform_2 = 30\n    \n    least_common_multiple = lcm(interval_platform_1, interval_platform_2)\n    \n    hours = least_common_multiple // 60\n    minutes = least_common_multiple % 60\n    \n    next_departure_hour = 9 + hours\n    next_departure_minute = minutes\n    \n    if next_departure_minute >= 60:\n        next_departure_hour += 1\n        next_departure_minute -= 60\n    \n    # Adjust for 24-hour clock format if needed\n    next_departure_hour = next_departure_hour % 24\n\n    return f\"{next_departure_hour:02d}:{next_departure_minute:02d}\"\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 3/4\n    water_poured = 24\n    full_tank = water_poured / part_filled\n\n    return full_tank\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # Remainders when divided by 8\n    remainder_a = 6\n    remainder_b = 7\n\n    # When adding a and b, add the remainders\n    remainder_sum = (remainder_a + remainder_b) % 8  # Use modulo to find the remainder when sum is divided by 8\n\n    return remainder_sum\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n    \n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Initial variables for red and white marbles\n    red, white = symbols('red white', integer=True)\n\n    # Equation for the initial ratio of red to white marbles\n    initial_ratio = Eq(red / white, 3 / 2)\n\n    # Symbols for the number of red and white balls added by Pip and Bud\n    pip_red, bud_white = symbols('pip_red bud_white', integer=True)\n\n    # Equations for the ratio after Pip adds red balls\n    pip_ratio = Eq((red + pip_red) / white, 5 / 3)\n\n    # Equations for the ratio after Bud adds white balls\n    bud_ratio = Eq((red + pip_red) / (white + bud_white), 5 / 4)\n\n    # Equation for the difference in the number of balls added by Bud and Pip\n    ball_difference = Eq(bud_white, pip_red + 100)\n\n    # Solving the system of equations\n    solutions = solve((initial_ratio, pip_ratio, bud_ratio, ball_difference), (red, white, pip_red, bud_white))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    # There must be at least one desk (Jessica's) between the desks in front\n    # of her and behind Judy, so we add 1 to include Jessica's desk.\n    desks_between = 1\n    \n    # The total number of desks is sum of desks in front of Jessica,\n    # desks behind Judy, and the desk where Jessica is seated.\n    total_desks = desks_in_front_of_jessica + desks_between + desks_behind_judy\n    \n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0  # Initialize the counter for the digit '6'\n    for i in range(2, 57):  # Iterate through the numbers 2 to 56\n        str_i = str(i)  # Convert the number to a string to iterate through each digit\n        count += str_i.count('6')  # Count the occurrences of '6' in the string\n    return count  # Return the total occurrences of '6'\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # Let the original average weight be x and the number of people be n\n\n    # After Aaron joins, the average becomes 61kg\n    # So, the total weight of the group plus Aaron's weight is (n+1) * 61\n    # thus, n*x + 45 = (n+1) * 61\n    # nx - 61n + 45 = 61\n\n    # After Ben joins, the average becomes 62kg\n    # So, the total weight of the group plus Aaron's and Ben's weight is (n+2) * 62\n    # thus, n*x + 45 + 71 = (n+2) * 62\n    # nx - 62n + 45 + 71 = 124\n\n    # Now we have the system of equations:\n    # nx - 61n + 45 = 61      ...(1)\n    # nx - 62n + 116 = 124    ...(2)\n\n    # By subtracting equation (1) from equation (2), we get\n    # n = 124 - 116 - 61 + 45 = -8 + 45 = 37\n\n    # Now plugging n back into equation (1) to solve for x\n    # 37x - 61 * 37 + 45 = 61\n    # 37x - 2262 + 45 = 61\n    # 37x = 2278\n    # x = 2278 / 37\n\n    x = (2278) / 37\n\n    return x\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "def solution():\n    from itertools import permutations\n    \n    for p in permutations('123456789', 5):\n        a, b, c, d, e = p\n        num1 = int(a + b)\n        num2 = int(c + '0' + d)\n        product = int(a + b + e + e + e)\n        if num1 * num2 == product:\n            return product\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    total_hours = 15\n    people = 6\n    target_hours = 2\n\n    work_rate_per_person = 1 / (total_hours * people)\n    total_work = work_rate_per_person * total_hours * people\n\n    required_people = total_work / (target_hours * work_rate_per_person)\n\n    return int(required_people)\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_taken = 2989\n\n    while total_taken > 0:\n        # Ming takes 2 balls from Bag A\n        total_taken -= 2\n\n        # If two balls are the same color, add 1 black ball to Bag A\n        if (white_balls % 2 == 0) or (black_balls % 2 == 0):\n            black_balls += 1\n        else:\n            # If the balls are of different color, return 1 white ball to Bag A\n            white_balls += 1\n\n        # Reduce the count of the balls in Bag A\n        white_balls -= 1\n        black_balls -= 1\n        \n        # Check if we only need to take 1 more ball\n        if total_taken == 1:\n            white_balls -= 1\n            break\n\n    # Final state of the balls in the bag\n    if white_balls > 0:\n        return (white_balls, 'white')\n    else:\n        return (black_balls, 'black')\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    return 195 * 46\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # Convert meters to centimeters (1 meter = 100 centimeters)\n    return int(n)  # Return the result as an integer\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    total_money = 30\n    sweets_cost = 3.99\n    magazine_cost = 2.50\n    stickers_cost = 0.70\n    pizza_cost = 10.99\n    orange_juice_cost = 1.50 * 4\n    \n    expenses = sweets_cost + magazine_cost + stickers_cost + pizza_cost + orange_juice_cost\n    change_left = total_money - expenses\n\n    return round(change_left, 2)\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for digit in range(2, 10):\n        hundreds = digit - 2\n        for tens in range(0, 10):\n            count += 1   # Each valid combination of hundreds and tens with the units digit is a valid 'good-number'\n    return count\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2 / 5)\n    initial_chocolates = remaining_after_students / (1 - 0.8)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    for x in range(1, 5): # x is the first part of the sum, which has to be less than 5\n        y = 5 - x # y is the second part of the sum\n        if x != y:\n            count += 1\n    return count // 2 # Dividing by 2 to account for duplicate pairs (e.g., 1+4 and 4+1)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    sum = 0\n    for i in range(1, 101):\n        sum += (2*i - 1)\n    return sum\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    han_mass, daughter_mass = symbols('han_mass daughter_mass')\n    total_mass = 91.2\n\n    equation1 = Eq(han_mass, 3 * daughter_mass)\n    equation2 = Eq(han_mass + daughter_mass, total_mass)\n\n    solutions = solve((equation1, equation2), (han_mass, daughter_mass))\n\n    return solutions[han_mass]\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    total_votes = 25\n    other_max_possible = (total_votes - 1) // 2  # Max votes for the next person, since Samantha has more\n    samantha_min_votes = other_max_possible + 1  # Minimum for Samantha to have more than anyone else\n    return samantha_min_votes\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_values = [1, 2, 5]\n    unique_totals = set()\n    \n    for first_coin in coin_values:\n        for second_coin in coin_values:\n            for third_coin in coin_values:\n                total = first_coin + second_coin + third_coin\n                unique_totals.add(total)\n                \n    return len(unique_totals)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    counts = 0\n    for page in range(1, 131):\n        counts += str(page).count('1')\n    return counts\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits_used = 0\n\n    while digits_used < 291:\n        pages += 1\n        digits_used += len(str(pages))\n\n    # Since we surpassed the amount, we subtract the last page counted.\n    pages -= 1\n    \n    return pages\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000\n    return kg_to_g\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # The principal amount\n    principal = 6000\n    # The final amount\n    final_amount = 8029.35\n    # The number of years\n    years = 5\n    # The annual interest rate (as a decimal)\n    x = symbols('x')\n\n    # Compound interest formula: final_amount = principal * (1 + rate/100) ** years\n    equation = Eq(principal * (1 + x/100) ** years, final_amount)\n\n    # Solve the equation for the interest rate x\n    x_value = solve(equation, x)\n\n    # Since the equation may have multiple solutions, we need to pick the correct one\n    # The interest rate is positive and real\n    x_real_pos = [sol.evalf() for sol in x_value if sol.is_real and sol > 0]\n    return x_real_pos[0] if x_real_pos else None\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money = 1500\n    money_spent_on_chairs = 360\n\n    percent_spent_on_chairs = (money_spent_on_chairs / total_money) * 100\n\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    read, unread = symbols('read unread')\n    total = read + unread\n\n    # Initial ratio condition\n    equation1 = Eq(read, total/6)\n\n    # After reading 80 more pages\n    equation2 = Eq(read + 80, total * 0.70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (read, unread))\n    total_pages = solutions[read] + solutions[unread]\n\n    return total_pages\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return float(solutions[magazine])\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    teachers = 6\n    girls_per_room = 5\n    teachers_per_room = teachers / 3\n\n    rooms_for_girls = girls / girls_per_room\n    rooms_for_teachers = teachers / teachers_per_room\n\n    total_rooms = rooms_for_girls + rooms_for_teachers\n\n    return int(total_rooms)\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    people_initial = 15\n    flour_initial = 650  # in grams\n    people_final = 18\n\n    flour_final = (flour_initial * people_final) / people_initial\n    return flour_final\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_price = 6.34\n    child_price = 4.75\n    adults = 2\n    children = 3\n\n    total_cost = (adults * adult_price) + (children * child_price)\n    \n    return total_cost\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_to_m_conversion_factor = 1000\n    mm = 7000000\n    m = mm / mm_to_m_conversion_factor\n    return m\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    from itertools import combinations\n\n    number_str = '2581953752'\n    n = len(number_str)\n    min_sum = float('inf')  # Initialize with an infinite value\n\n    # Generate all possible two cut points, making sure the numbers do not overlap\n    for cut_points in combinations(range(1, n), 2):\n        i, j = cut_points\n        # Calculate sum of the three numbers obtained by cutting the paper strip\n        total = int(number_str[:i]) + int(number_str[i:j]) + int(number_str[j:])\n        # Determine the minimum sum\n        min_sum = min(min_sum, total)\n    \n    return min_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x and y as the two original numbers\n    x, y = symbols('x y')\n    \n    # The sum of the two numbers is 11.63\n    equation1 = Eq(x + y, 11.63)\n\n    # When the decimal in one of the numbers is shifted, the sum becomes 5.87\n    equation2 = Eq(x + y/10, 5.87)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Difference between the two original numbers, multiplied by 100\n    difference = 100 * abs(solutions[x] - solutions[y])\n\n    return difference\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Hypothesis\n    # Suppose all answers CC answered were correct, then she would have got 10 * 10 = 100 points.\n    # But she actually got 95 - 15 = 80 points. So the hypothesis is 20 points less than the maximum.\n\n    # Since each wrong answer or skip costs 15 points, and 20 points were lost,\n    # then the number of questions CC didn't answer correctly is 20 / 15 = 4/3, which is not possible.\n    # Therefore, we must resolve this by finding a correct formulation.\n\n    # For every question CC gets wrong, she loses out on 10 points she could have had plus the 5 points she lost.\n    # So for every wrong question, it's a 15 point difference from the maximum 100 points she could have scored.\n    # Let's say CC got X questions wrong, then she would have 100 - 15X points.\n\n    # Set up the equations:\n    # CC's points + Vivi's points = 95\n    # Vivi's points = CC's points + 15\n    # CC answered 10 questions, for each correct answer she gets 10 points, \n    # for each wrong answer she loses 5 points from the total she could have had.\n    # CC's score + 15 (extra points Vivi got) = 100 - 15x (CC's score with X wrong answers)\n    # 10 * number of correct answers by CC - 5 * number of wrong answers by CC = CC's total points\n\n    # Iterate through the range of number of questions (0 through 10) to find the value that fits\n    for correct_cc in range(11):\n        wrong_cc = 10 - correct_cc  # Number of wrong answers\n        cc_points = correct_cc * 10 - wrong_cc * 5\n        vivi_points = cc_points + 15\n        if cc_points + vivi_points == 95:\n            return correct_cc\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    total_members = 99\n    # science : literature = 9 : 10, so we can represent them as 9x and 10x\n    # literature : math = 5 : 7, and since literature is 10x, math is 14x (because 10x * (7/5) = 14x)\n    # 9x + 10x + 14x = 99\n    # 33x = 99\n    x = total_members / 33\n    literature_members = 10 * x\n    math_members = 14 * x\n    more_members_in_math = math_members - literature_members\n    \n    return int(more_members_in_math)\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    melissa, mother = symbols('melissa mother')\n    equation1 = Eq(mother, 32 + melissa - 8)\n    equation2 = Eq(mother, 3 * melissa)\n    \n    solutions = solve((equation1, equation2), (melissa, mother))\n    \n    return solutions[melissa]\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    max_blue = 4\n    max_yellow = 3\n    max_red = 1\n\n    # To be sure to get 3 marbles of the same color, we could get the worst case scenario:\n    # - Take out all blue marbles (4), still no three of the same color.\n    # - Take out all yellow marbles (3), still no three of the same color (because 3 yellow is ok).\n    # Now, no matter which marble we take out next, it will give us three of the same color.\n    # So we need to take one more marble.\n    marbles_needed = max_blue + max_yellow + 1 \n\n    return marbles_needed\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Each side of the square has 6 flowers, but each corner flower is counted twice (once for each side it touches).\n    # So we subtract the 4 corner flowers from the total count once to get the correct count.\n    flowers_per_side = 6\n    total_flowers = flowers_per_side * 4 - 4  # Subtract the four corners\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    n = 48\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    even_factors = [f for f in factors if f % 2 == 0]\n    return len(even_factors)\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    piece_1 = 4.8\n    piece_2 = 2.73\n    piece_3 = original_length - piece_1 - piece_2\n\n    pieces = [piece_1, piece_2, piece_3]\n    longest_piece = max(pieces)\n    shortest_piece = min(pieces)\n    difference = longest_piece - shortest_piece\n\n    return difference\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # Thomas's method is incorrect. Let's solve it correctly.\n    book_fraction = 1/3\n    bag_fraction_of_remainder = 1/2\n    total_cost = 132\n\n    # Let x be the initial amount\n    # She spends 1/3 on the book: book_cost = x/3\n    # The remainder after buying the book is 2/3x\n    # She spends 1/2 of the remainder on the bag, bag_cost = (1/2) * (2/3x) = 1/3x\n    # Combined cost for book and bag: book_cost + bag_cost = x/3 + x/3 = 2x/3\n    # Therefore, 2x/3 = 132. Let's solve for x.\n    x = (3/2) * total_cost\n\n    return x\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n    \n    # Equation 1: Cost of 5 basketballs and 6 volleyballs\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n    \n    # Equation 2: Price relation between basketball and volleyball\n    equation2 = Eq(basketball, volleyball + 10)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    base_pattern = [1, 2, 3, 4]\n    repeats, remainder = divmod(47, len(base_pattern))\n\n    total_sum = sum(base_pattern) * repeats + sum(base_pattern[:remainder])\n    \n    return total_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_for_6_bottles = 2.52\n    cost_per_bottle = cost_for_6_bottles / 6\n    cost_for_9_bottles = cost_per_bottle * 9\n    return cost_for_9_bottles\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    avg_all = 35\n    avg_boys = 20\n    avg_girls = 60\n\n    total_pencils = avg_all * 40\n    equation = Eq(boys * avg_boys + girls * avg_girls, total_pencils)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    for cupcakes in range(1, 1000):  # Assuming a reasonable maximum number of cupcakes\n        if cupcakes <= 20:\n            price = cupcakes * 4.50 + 12\n        else:\n            price = (20 * 4.50) + (cupcakes - 20) * (4.50 * 0.80) + 12\n        \n        if price == 120:\n            return cupcakes\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    total_questions = 25\n    score_per_correct = 4\n    score_per_wrong = -1\n    target_score = 61\n    \n    for jack_correct in range(total_questions + 1):\n        jack_wrong = total_questions - jack_correct\n        jack_score = jack_correct * score_per_correct + jack_wrong * score_per_wrong\n        if (jack_score == target_score):\n            for johnson_correct in range(jack_correct):\n                johnson_wrong = total_questions - johnson_correct\n                johnson_score = johnson_correct * score_per_correct + johnson_wrong * score_per_wrong\n                if (johnson_score == target_score):\n                    return total_questions - jack_correct\n    return None\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28\n    total_pence = 57\n\n    # Convert pence to pounds\n    pence_to_pounds = total_pence / 100\n\n    # Add the converted pence to pounds\n    ans = total_pounds + pence_to_pounds\n\n    return ans\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    return 15 * 3\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of pigs and goats\n    pigs, goats = symbols('pigs goats')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(3 * pigs + 1 * goats, 440)\n    equation2 = Eq(1 * pigs + 2 * goats, 280)\n\n    # Solve the equations for the number of pigs and goats\n    solutions = solve((equation1, equation2), (pigs, goats))\n\n    # Calculate the cost for 5 pigs and 5 goats\n    total_cost = 5 * solutions[pigs] + 5 * solutions[goats]\n\n    return total_cost\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') / 3:\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    \n    A_value = solve(equation, A)\n    return A_value[0]  # Assuming there's only one solution\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 12\n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_now = john_age_now + 42\n    total_age_in_2_years = (john_age_now + 2) + (grandmother_age_now + 2)\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 45) / 3, 2 * x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    sum_of_sequence = (n * (n + 1)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the variable l represent the number of days it takes for the lazy decorator to paint the house on his own\n    l = symbols('l')\n\n    # The rate of work for the energetic worker per day\n    rate_energetic = 1/10\n    # The rate of work for the lazy worker per day\n    rate_lazy = 1/l\n\n    # Together, their combined rate is the work done (1 house) divided by the time (6 days)\n    combined_rate = 1/6\n\n    # Equation for the combined rates\n    equation = Eq(rate_energetic + rate_lazy, combined_rate)\n\n    # Solve for the days it would take the lazy one to paint the house on his own\n    solution = solve(equation, l)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    original_number = (result - 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Since each brother has at least 2 books, start the loop from 2\n    for x1 in range(2, 10):\n        for x2 in range(2, 10):\n            # The third brother's books are determined by subtracting the number from 10\n            x3 = 10 - x1 - x2\n            # Each must have at least 2 books\n            if x3 >= 2:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    fraction_of_book = 1/5\n    \n    total_pages = pages_first_day * (1 / fraction_of_book)\n    \n    return total_pages\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # To ensure 4 marbles of different colors, we must consider the worst-case scenario.\n    # That scenario would be picking all marbles of one color, then all of another,\n    # and then all of another before getting to the fourth color.\n    \n    # Since there are only 3 red marbles which are the least, we will pick them last.\n    # First we'll pick all blue marbles (9), then all yellow marbles (8),\n    # and then we need one more marble which will be red to ensure we have 4 colors.\n    \n    num_blue = 9\n    num_yellow = 8\n    num_red_one_more = 1  # We need only one red to ensure we have the fourth color\n    \n    # Total number of marbles drawn to ensure 4 marbles of different colors\n    total_drawn = num_blue + num_yellow + num_red_one_more\n    \n    return total_drawn\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # The '5's in the begining contribute 5*(10^n) for n=0 to 18\n    # The '9's in the end contribute 9*(10^n) for n=1 to 18\n    # We need to find out the value of the middle digit (10^19) which makes the number divisible by 7\n\n    # Calculate the modulo 7 of the repetitive '5's\n    mod_five = sum(5 * (10 ** n) for n in range(19)) % 7\n\n    # Calculate the modulo 7 of the repetitive '9's\n    mod_nine = sum(9 * (10 ** n) for n in range(1, 20)) % 7\n\n    # Now let's find the middle digit such that (mod_five + middle_digit*10^19 + mod_nine) is divisible by 7\n    # Since middle_digit*10^19 % 7 is just middle_digit because 10^19 is congruent to 1 modulo 7\n    for middle_digit in range(10):\n        if (mod_five + middle_digit + mod_nine) % 7 == 0:\n            return middle_digit\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Tom's maximum height would be if all children in front of Tom are of minimum height\n    # Starting from the shortest possible which could be 1 cm, but to maximize Tom's height we start at\n    # 131 - 31 + 1 = 101 cm for the first child\n    # which means the 9 children before Tom would have the heights: \n    # 101, 102, ..., 109 cm\n\n    # Therefore, Tom's maximum height would be 1 more than the child before him\n    tom_maximum_height = 109 + 1\n    \n    return tom_maximum_height\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if hundreds + tens + ones == 15 and tens == 2 * hundreds and hundreds == ones + 1:\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    current_purchase = 105.6\n    extra_cost = 14.4\n    last_purchase = current_purchase - extra_cost\n    total_spent = current_purchase + last_purchase\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    jason_books_after_giving = 30 - 4\n    anthea_books_after_receiving = jason_books_after_giving\n    difference = 4\n    \n    return difference\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    start = 16  # The smallest two-digit number with 6 as the unit digit\n    end = 96    # The largest two-digit number with 6 as the unit digit\n    step = 10   # The step between each qualifying number (e.g., 16, 26, 36, ...)\n    \n    ans = ((end - start) // step) + 1\n    return ans\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(2023 - 2):\n        a, b = b, a + b\n        a, b = a % 3, b % 3  # Taking modulo 3 to simplify calculations\n    return b\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbol for magic number\n    magic_number = symbols('magic_number')\n\n    # Equation representing the situation given in the problem\n    equation = Eq(9 * (136 - magic_number), 208 - magic_number)\n\n    # Solving for the magic number\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    return 0.7 / 100\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    num = 840\n    factors_count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors_count += 1\n    return factors_count\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    remainder_when_5 = 3\n    remainder_when_4 = 9\n    # Since giving 5 gifts per student results in 3 left and giving 4 results in 9 left,\n    # The total number of gifts is a number that when divided by 5 gives a remainder 3\n    # and when divided by 4 gives a remainder 9.\n    # This number also represents the number of gifts Wan Ting has.\n    # We can find this number by checking every number that fulfills these conditions.\n    # Let's start with the first possible number of gifts 9 (as 9%4 == 9) and increment by 4.\n\n    gifts = remainder_when_4\n    while True:\n        if gifts % 5 == remainder_when_5:\n            # Once we find the number of gifts, we can divide by 5 to find the number of students\n            number_of_students = (gifts - remainder_when_5) / 5\n            break\n        # Increment gifts by 4 as the next possible number will leave the same remainder when divided by 4\n        gifts += 4\n    \n    return int(number_of_students)\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    total_money = 200\n    alan_more_chloe = 20\n\n    # Let Bella's money be x\n    # Then Alan's money will be (4/3)x\n    # Chloe's money will be (4/3)x - 20\n    # Total is x + (4/3)x + (4/3)x - 20 = 200\n    # Solve for x to find Bella's money and then Chloe's money\n    bella_money = (total_money + alan_more_chloe) / (1 + 4/3 + 4/3)\n    chloe_money = (4/3) * bella_money - alan_more_chloe\n\n    return chloe_money\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_chocolates_cost = 7.85\n    bar_chocolate_cost = 1.83\n    total_chocolate_cost = box_chocolates_cost + (2 * bar_chocolate_cost)\n    amount_paid = 20\n    change = amount_paid - total_chocolate_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all 2-digit numbers from 1-8 without repeating digits\n    all_numbers = [int(str(a) + str(b)) for a, b in permutations(range(1, 9), 2)]\n    \n    # Define conditions for each number based on the hints\n    condition_smallest = lambda x: x % 10 == 2 * (x // 10)\n    condition_largest = lambda x: (x % 10) + (x // 10) == 9\n    condition_second_largest = lambda x: (x // 10) == (x % 10) + 5\n    condition_odd_number = lambda x: x % 2 != 0\n    \n    # Filter numbers based on the defined conditions\n    smallest_numbers = list(filter(condition_smallest, all_numbers))\n    largest_numbers = list(filter(condition_largest, all_numbers))\n    second_largest_numbers = list(filter(condition_second_largest, all_numbers))\n    odd_numbers = list(filter(condition_odd_number, all_numbers))\n    \n    # Find the largest within the smallest and largest within the largest\n    smallest = min(smallest_numbers)\n    largest = max(largest_numbers)\n    \n    # Get all valid numbers excluding the smallest, largest and non-odd numbers\n    valid_numbers = [num for num in all_numbers if num > smallest and num < largest and num not in odd_numbers]\n    \n    # The second smallest will be the first in the sorted valid numbers\n    second_smallest = sorted(valid_numbers)[0]\n    \n    return second_smallest\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    # Lily can only stand on the left end and her mother can only stand on the right end.\n    # There are 3 family members left whose positions can be changed.\n    # These 3 family members can be arranged in 3! (3 factorial) ways.\n    from math import factorial\n    num_ways = factorial(3)\n    return num_ways\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7  # first row seats\n    last_term = 99  # last row seats\n    difference = 4  # the common difference between rows\n\n    # Calculate total number of rows by finding 'n' in arithmetic sequence formula: last_term = first_term + (n-1) * difference\n    num_rows = ((last_term - first_term) // difference) + 1\n\n    # Calculate the sum using the formula for the sum of an arithmetic sequence: sum = n/2 * (first_term + last_term)\n    total_seats = num_rows / 2 * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    amount_in_pounds = 1.28  # £1.28\n    amount_to_subtract = 0.57  # 57 pence is £0.57\n\n    return amount_in_pounds - amount_to_subtract\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    average_initial = 120\n    total_initial = average_initial * 3\n    average_final = 150\n    total_final = average_final * 4\n    fourth_number = total_final - total_initial\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    m = 5\n    sum_squares = (n*(n+1)*(2*n+1))//6 - ((m-1)*m*(2*(m-1)+1))//6\n    return sum_squares\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    # Let x be the total number of visitors at the fair\n    # According to the problem:\n    # (3/5)x - (1/2)(1 - 3/5)x = 140\n    # Simplifying the equation:\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3/5)*x - (1/2)*(1 - 3/5)*x, 140)\n    total_visitors = solve(equation, x)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Initial condition\n    # sam = peter + 40\n    initial_sam = peter + 40\n\n    # After giving 20%\n    # sam gives 20% to peter\n    # peter = peter + 20% * sam\n    # sam = sam - 20% * sam\n    sam_after_give = initial_sam - 0.20 * initial_sam\n    peter_after_receive = peter + 0.20 * initial_sam\n\n    # After giving 25%\n    # peter gives 25% of his stickers to sam\n    # sam = sam_after_give + 25% * peter_after_receive\n    # peter = peter_after_receive - 25% * peter_after_receive\n    final_sam = sam_after_give + 0.25 * peter_after_receive\n    final_peter = peter_after_receive - 0.25 * peter_after_receive\n\n    # Final condition\n    # final_sam = final_peter + 96\n    equation = Eq(final_sam, final_peter + 96)\n\n    # Solve the equation\n    solution = solve((equation), (peter))\n\n    return solution[peter]\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    # Let x be the number of questions Olivia answered correctly\n    # Let y be the number of questions Olivia answered incorrectly\n    # Since the total number of questions is 20, we have:\n    # x + y = 20\n    # Every correct answer yields 5 points, and every incorrect answer results in a loss of 2 points. Hence:\n    # 5x - 2y = 51\n    # Now we solve for x and y using these two equations.\n\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    x, y = symbols('x y')\n\n    # Set up the equations using the given information\n    equation1 = Eq(x + y, 20)\n    equation2 = Eq(5*x - 2*y, 51)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the value of x, which is the number of questions Olivia answered correctly\n    return solutions[x]\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, gillian = symbols('sally gillian')\n    equation1 = Eq(sally / gillian, 2 / 7)\n    equation2 = Eq((sally + 15) / (gillian + 15), 1 / 2)\n\n    solutions = solve((equation1, equation2), (sally, gillian))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n    actual_subtrahend = 75\n    minuend = mistaken_result + mistaken_subtrahend\n    correct_result = minuend - actual_subtrahend\n    \n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = 12  # Least common multiple of 3 and 4\n    return 40 // lcm\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    ans = (35 / 45) * 9\n    return ans\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    total_seeds = 12\n\n    circumference = distance_between_seeds * total_seeds\n\n    return circumference\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    mass_per_apple = 1 / 9  # Mass of one apple in kg\n    apples_per_kg = 9  # Number of apples in 1 kg\n    total_apples = 8 * apples_per_kg  # Total number of apples the baker has\n    cakes_possible = total_apples // 4  # Number of cakes the baker can bake\n\n    return cakes_possible\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    return (3/8) * 32\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    initial_pieces = 10\n    final_pieces = 16\n\n    # Let the number of pieces cut into three parts be x.\n    # Initial pieces + 2 * x (because each piece cut into three creates two additional pieces) = final pieces\n    x = (final_pieces - initial_pieces) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    n = 1\n    while True:\n        initial_square = n * n\n        surplus_students = initial_square + 9\n        new_square = (n + 1) * (n + 1)\n        needed_students = new_square - surplus_students\n        if needed_students == 16:\n            return surplus_students\n        n += 1\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    total_girls = 8\n    average_boys = 10\n    average_all = 14\n\n    total_score_all = (total_boys + total_girls) * average_all\n    total_score_boys = total_boys * average_boys\n    total_score_girls = total_score_all - total_score_boys\n\n    average_girls = total_score_girls / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Initially, Lily divides 50 postcards into 5 envelopes\n    # This means each envelope has 50 / 5 = 10 postcards\n\n    # Let's denote the number of new postcards given by friends as x\n    # After receiving x postcards, Lily divides these into another 2 envelopes\n    # This means each of these envelopes also has 10 postcards\n\n    # So we can write the equation\n    # x / 2 envelopes = 10 postcards per envelope\n    # Solving for x gives us x = 10 * 2\n\n    # Lily received 20 new postcards from her friends\n    new_postcards = 10 * 2\n\n    # Total number of postcards is the initial 50 plus the new 20 postcards\n    total_postcards = 50 + new_postcards\n\n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    coins = [1, 2, 5, 10, 20, 50, 100, 200]  # Representing pence\n    for smallest_coin in coins:\n        for second_smallest_coin in coins:\n            if smallest_coin != second_smallest_coin:\n                for third_smallest_coin in coins:\n                    if third_smallest_coin not in (smallest_coin, second_smallest_coin):\n                        total = 2 * smallest_coin + 2 * second_smallest_coin + 2 * third_smallest_coin\n                        if total == 250:\n                            return smallest_coin\n    \nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of cookies Jolie baked at first\n    x = symbols('x')\n\n    # The equation representing the problem statement\n    # (3/5)*x are burnt, so (2/5)*x are left.\n    # She sold 75% of the remaining cookies, so she sold 0.75 * (2/5)*x cookies\n    # The number of burnt cookies is 42 more than the number she sold\n    # (3/5)*x = 0.75 * (2/5)*x + 42\n    equation = Eq((3/5)*x, 0.75*(2/5)*x + 42)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Return the total number of cookies Jolie baked at first\n    return solution[0]\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    per_container = 4\n\n    containers_needed = (total_apples + per_container - 1) // per_container\n\n    return containers_needed\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    weight_in_grams = 250\n    cost_per_gram = cost_per_100g / 100\n    total_cost = cost_per_gram * weight_in_grams\n    return total_cost\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(0, 1000):  # assuming the special number is a 4-digit number\n            original_num = j * 10 + 9\n            new_num = int(str(9) + str(j))\n            if new_num == 4 * original_num:\n                return original_num\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money = symbols('original_money')\n    # After spending 6/11 of her money and another $5\n    money_after_highlighters = original_money - (6/11) * original_money - 5\n    # After spending 3/10 of the remainder and another $12\n    money_after_pens = money_after_highlighters - (3/10) * money_after_highlighters - 12\n    # Equation for the money left\n    equation = Eq(money_after_pens, 30)\n    # Solve for original_money\n    initial_amount = solve(equation, original_money)\n\n    return initial_amount[0]\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for Y in range(10):\n        if (1070 + Y) % 6 == 0:\n            return Y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n    \n    # Laura must stand in the front, so we treat her position as fixed\n    # Rita cannot stand at the end, and with Laura in the front, there are 5 positions left for Rita\n    rita_positions = 5\n    \n    # Now we have 5 students (excluding Laura) to arrange in the remaining 5 positions\n    remaining_students_permutations = factorial(5)\n    \n    # Total ways = positions for Rita * permutations of remaining students\n    total_ways = rita_positions * remaining_students_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    otimes = lambda a, b: (a + b) * a\n    ans = otimes(4, 7)\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    discount_percent = 50\n    additional_discount_percent = 20\n    items_bought = 8\n\n    discounted_price = regular_total_price * (100 - discount_percent) / 100.0\n    additional_discounted_price = discounted_price * (100 - additional_discount_percent) / 100.0\n\n    return additional_discounted_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz, jessie + 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction_sold = 4 / 7\n\n    total_apples = sold_apples / fraction_sold\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    jerry_fraction = 3 / 7\n    kevin_speed = 80 # mph\n\n    # Let d be the length of the road.\n    # Jerry's speed is 2/5 of the road length per hour, so his speed is 2/5 * d.\n    # Time taken by Jerry to travel 3/7 of the road is the same as the time\n    # taken by Kevin to travel 4/7 of the road, since they meet there.\n    # Thus, 3/7 * d / (2/5 * d) = 4/7 * d / (80 mph)\n    # Simplify the equation to find d.\n    # (3/7) / (2/5) = (4/7) / 80\n    # (3/7 * 5/2) = (4/7) / 80\n    # 15/14 = 4 / (7 * 80)\n    # d = 4 / (7 * 80) * (14 / 15)\n    # d = (4 * 14) / (7 * 80 * 15)\n    # d = 1 / ( 2 * 80 * 15)\n    # d = 1 / 2400\n    # d = 240\n    d = (4 * 14) / (7 * 80 * 15 / 3)\n\n    return d\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    return 42 / 10\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    # Set up the equations based on the given information\n    total_pencils = 35 * 40\n    boys_pencils = 20 * boys\n    girls_pencils = 60 * girls\n\n    # Equation representing the total number of pencils\n    equation = Eq(boys_pencils + girls_pencils, total_pencils)\n\n    # Solve the equation for the number of boys\n    num_boys = solve(equation, boys)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    prob_sally_win = 0.3\n    prob_sally_draw = 0.1\n    prob_sally_lose = 1 - prob_sally_win - prob_sally_draw\n    \n    # Probability that Sally wins exactly one game:\n    # 1. Sally wins the first and loses/draws the second OR\n    # 2. Sally loses/draws the first and wins the second\n    prob_exactly_one_win = prob_sally_win * (prob_sally_lose + prob_sally_draw) + \\\n                           (prob_sally_lose + prob_sally_draw) * prob_sally_win\n    \n    return prob_exactly_one_win\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    # Define times given in the problem\n    singapore_takeoff = datetime(2023, 8, 24, 5, 0)\n    london_landing = datetime(2023, 8, 24, 11, 0)\n    \n    # Calculate the actual takeoff time in London time\n    singapore_takeoff_london_time = singapore_takeoff - timedelta(hours=7)\n    \n    # Calculate the duration of the flight\n    flight_duration = london_landing - singapore_takeoff_london_time\n    \n    return flight_duration.total_seconds() // 3600  # Convert seconds to hours\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    decimal_fraction = str(1 / 13)[2:]  # Convert 1/13 to string and remove '0.'\n    period = len(decimal_fraction)      # Period of the recurring decimal\n    index = (2012 - 1) % period         # Adjusted index for 2012th decimal place\n\n    return int(decimal_fraction[index])\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    # Assuming a minimum number of lollipops that satisfies the 4 lollipop condition\n    lollipops = 32\n    while True:\n        # Check if the current number of lollipops when divided by 7 leaves a remainder of 3\n        if lollipops % 7 == 3:\n            break\n        # If not, increment lollipops by 4 to satisfy the first condition\n        lollipops += 4\n    return lollipops\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    # Since all the numbers give the same remainder when divided by D,\n    # subtracting the numbers from each other will be divisible by D\n    # We can find the greatest common divisor (GCD) of those differences\n    from math import gcd\n    \n    num1 = 2010\n    num2 = 2377\n    num3 = 3111\n    \n    # Calculate the differences\n    diff1 = num2 - num1\n    diff2 = num3 - num2\n    diff3 = num3 - num1\n    \n    # Calculate the GCD of the differences\n    common_divisor = gcd(gcd(diff1, diff2), diff3)\n    \n    # Once we have D, we can find remainder R for one of the numbers\n    remainder = num1 % common_divisor\n    \n    return common_divisor + remainder\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Iterate through all 2-digit numbers\n        if (i // 10 + i % 10) % 5 == 0:  # Sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n\n    equation1 = Eq(eddi / wiya, 8 / 7)\n    equation2 = Eq((eddi - 4) / (wiya + 4), 18 / 17)\n\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    return solutions[eddi]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    # Red to blue ratio is 5:6, so let's calculate the red marbles\n    red_marbles = (5 / 6) * blue_marbles\n    # The number of red marbles is twice that of green marbles\n    green_marbles = red_marbles / 2\n    # Total number of marbles is the sum of blue, red, and green marbles\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    \n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    # Define the complex fraction components\n    numerator = (2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)\n    denominator = (2017 + 1/3 - 2016.875) * 17\n    fraction = numerator / denominator\n    result = fraction * (3 + 23/32)\n    \n    # Simplify and calculate the answer\n    ans = result\n    \n    return ans\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n\n    piece3 = total_length - (piece1 + piece2)\n\n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 32):\n        for B in range(1, 32 - A):\n            C = 31 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let x be the number of students in Class B\n    # Class A has x + 47 students\n    # We want to find the number y of students to move from Class A to Class B \n    # such that Class A has 9 more students than Class B\n    # After moving y students, Class A will have x + 47 - y students\n    # and Class B will have x + y students\n    # We set up the equation x + 47 - y = x + y + 9\n    # Simplify it to 38 = 2y\n    # Solve for y\n    y = 38 / 2\n    return int(y)\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    ans = 5.221 + 5.8\n    return ans\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_in_one_basket = 5\n    total_baskets = 7\n    total_footballs = footballs_in_one_basket * total_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost_price = 25000\n    selling_price = cost_price * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # m\n\n    # Before rabbit sleeps\n    time_until_sleep = 10  # min\n    distance_covered_by_rabbit_before_sleep = rabbit_speed * time_until_sleep\n    distance_covered_by_turtle_before_sleep = turtle_speed * time_until_sleep\n\n    # While rabbit sleeps\n    sleep_duration = 215  # min\n    distance_covered_by_turtle_during_sleep = turtle_speed * sleep_duration\n\n    # Total distance covered by turtle when rabbit wakes up\n    total_distance_covered_by_turtle = (distance_covered_by_turtle_before_sleep +\n                                        distance_covered_by_turtle_during_sleep)\n\n    # Check if turtle has finished the race during rabbit sleep\n    if total_distance_covered_by_turtle >= race_distance:\n        # Turtle has finished the race, calculate distance between them\n        distance_between = total_distance_covered_by_turtle - race_distance\n        winner = 'turtle'\n    else:\n        # Rabbit starts running again\n        remaining_distance_for_rabbit = race_distance - distance_covered_by_rabbit_before_sleep\n        remaining_time_for_rabbit = remaining_distance_for_rabbit / rabbit_speed\n        \n        # Time for turtle to finish from when rabbit wakes\n        remaining_distance_for_turtle = race_distance - total_distance_covered_by_turtle\n        remaining_time_for_turtle = remaining_distance_for_turtle / turtle_speed\n        \n        if remaining_time_for_rabbit < remaining_time_for_turtle:\n            # Rabbit finishes first, calculate distance between them\n            distance_covered_by_turtle_after_rabbit_finishes = remaining_time_for_rabbit * turtle_speed\n            distance_between = race_distance - (total_distance_covered_by_turtle +\n                                                distance_covered_by_turtle_after_rabbit_finishes)\n            winner = 'rabbit'\n        else:\n            # Turtle finishes first, calculate distance between them\n            distance_between = total_distance_covered_by_turtle - race_distance\n            winner = 'turtle'\n    \n    return winner, distance_between\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    # Initialize the count of oddtastic numbers to zero\n    count = 0\n    \n    # Loop through all numbers from 1 to 999\n    for num in range(1, 1000):\n        # Convert the number to a string to check each digit\n        str_num = str(num)\n        \n        # Assume the current number is oddtastic until proven otherwise\n        is_oddtastic = True\n        \n        # Check if all digits are odd\n        for digit in str_num:\n            if int(digit) % 2 == 0:\n                # If any digit is even, the number is not oddtastic\n                is_oddtastic = False\n                break\n        \n        # Increase the count if the current number is oddtastic\n        if is_oddtastic:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x - y, 57)\n    equation2 = Eq(x + y, 77)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    smaller_number = min(solutions[x], solutions[y])\n    \n    return smaller_number\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    boys, adults, girls = symbols('boys adults girls')\n\n    # Given that there were twice as many adults as boys: adults = 2 * boys\n    equation1 = Eq(adults, 2 * boys)\n    \n    # Given that there were thrice as many girls as boys: girls = 3 * boys\n    equation2 = Eq(girls, 3 * boys)\n    \n    # The total number of people was 480: boys + adults + girls = 480\n    equation3 = Eq(boys + adults + girls, 480)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    # We're looking for the number of girls\n    return solutions[girls]\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # first digit must be odd (1-9) and not zero\n        for j in range(10):    # second digit can be anything (0-9)\n            for k in range(10):  # third digit can be 0-9, sum must be 5\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    avocados_per_pair = 2\n    \n    total_avocados = total_pairs * avocados_per_pair\n    cost_per_avocado_pounds = total_cost_pounds / total_avocados\n    cost_per_avocado_pence = cost_per_avocado_pounds * 100\n    \n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    # Initialize a dictionary to keep track of the sum frequencies\n    sum_frequencies = {i: 0 for i in range(2, 13)}\n\n    # Iterate through all possible outcomes of two dice\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            # Calculate the sum of the two dice and update its frequency\n            sum_frequencies[die1 + die2] += 1\n\n    # Find the sum with the highest frequency\n    most_likely_sum = max(sum_frequencies, key=sum_frequencies.get)\n\n    return most_likely_sum\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n    \n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    # Variables for legs\n    legs_per_rhino = 4\n    legs_per_deer = 4\n    legs_per_ostrich = 2\n\n    # Total heads\n    total_heads = 28\n\n    # Total legs\n    total_legs = 88\n\n    # Since number of rhinos is equal to number of deer, let's use a single variable\n    num_rhinos = num_deer = (total_legs - total_heads * legs_per_ostrich) // (legs_per_rhino + legs_per_deer - legs_per_ostrich)\n\n    return num_rhinos\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_table = 12\n    # Each square table has 4 people on each side when placed individually.\n    sides_per_table = 4\n    people_per_side = people_per_table // sides_per_table\n    \n    # Number of tables\n    number_of_tables = 8\n    \n    # When tables are put together in a row, two sides per table become internal (don't seat people there).\n    external_sides_per_table = sides_per_table - 2\n    \n    # But the two tables at the ends of the row do not lose their external sides.\n    total_external_sides = external_sides_per_table * number_of_tables + 4\n    \n    # Total number of people sitting around the long table\n    max_people = total_external_sides * people_per_side\n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person's marbles\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n\n    # Equation 1: Andrew has 30 marbles less than the average of Boris, Jeffery, and Xavier\n    equation1 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)\n    \n    # Equation 2: Xavier has thrice as many marbles as Andrew\n    equation2 = Eq(xavier, 3 * andrew)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n\n    # Calculate the number of marbles Jeffery and Boris have\n    jeffery_boris_marbles = solutions[boris] + solutions[jeffery]\n\n    return jeffery_boris_marbles\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7, 9786 % 7\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    digits_count = 0\n    page = 0\n    \n    while digits_count < total_digits:\n        page += 1\n        digits_count += len(str(page))\n\n    return page\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time_str = '11:15'\n    travel_duration = timedelta(hours=3, minutes=50)\n\n    arrival_time = datetime.strptime(arrival_time_str, '%H:%M')\n    departure_time = arrival_time - travel_duration\n\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Calculate the last digit of each number using modulus 10\n    last_digit_32_pow_33 = (32 ** 33) % 10\n    last_digit_22_pow_29 = (22 ** 29) % 10\n    \n    # Calculate the last digit of the difference\n    ans = (last_digit_32_pow_33 - last_digit_22_pow_29) % 10\n\n    return ans\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # Initialize variables for student and teacher counts\n    students = 0\n    teachers = 0\n    layer = 0  # Represents the current layer\n    # We are looking for a square number of people so we start checking from 1x1 and increase\n    while True:\n        # Determine the number of people in the current layer\n        # For each layer, there are (side_length - 1) * 4 new people added\n        side_length = 1 + layer * 2\n        people_in_layer = side_length**2 - (side_length - 2)**2 if side_length > 1 else 1\n        # Assign people in the layer to students or teachers based on the layer\n        if layer % 2 == 0:\n            students += people_in_layer\n        else:\n            teachers += people_in_layer\n        # Check if the difference matches our condition\n        if students - teachers == 52:\n            break\n        layer += 1\n    # Since we've broken out of the loop, we found our match and we sum students and teachers\n    ans = students + teachers\n    return ans\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisors, primefactors\n    \n    # Initialize counter for numbers with 15 factors\n    count = 0\n    \n    # Iterate over possible multiples of 15\n    # Note: Since 15 = 3 * 5, a multiple of 15 must have at least the prime factors 3 and 5.\n    # The number of divisors is given by (e1 + 1) * (e2 + 1) * ... * (en + 1) where e1, e2, ..., en\n    # are the exponents of the prime factors of the number.\n    \n    # In our case, we are looking for a number with 15 divisors.\n    # Since 15 is 3 * 5, either the number has one prime factor with an exponent of 14 (which is prime and thus not possible),\n    # or it has two prime factors with exponents adding up to 14 (where not both of them can be 1 because we already have\n    # prime factors 3 and 5, so the responsibility of number of divisors falls on the other factors)\n    \n    # So the factor count for a number such as (p1 ** e1) * (p2 ** e2) * ... * (p3 ** e3) where p1, p2, ..., p3 are prime factors\n    # and e1, e2, ..., e3 are their exponents could be (e1 + 1) * (e2 + 1) * ... * (e3 + 1) = 15.\n    # We know e1 >= 1 and e2 >= 1 because our number is a multiple of 15, and thus already has 3 and 5 as prime factors.\n    # So we need to find other e3, e4, ... such that multiplied by 4 (from e1 + 1 and e2 + 1) equals 15.\n    \n    # For a number 15, the divisors can be 1 * 15 or 3 * 5.\n    # We can dismiss 1 * 15 because then the number would be a power of a prime which cannot be true as it has to have 3 and 5 as prime factors.\n    # So the possible combinations for the exponents could be (e3 + 1) = 3 and (e4 + 1) = 5 or vice versa.\n    # Which means e3 could be 2 or 4, making the prime to the power 2 or 4 a factor in addition to 3 and 5.\n    \n    # Now we must find such numbers, i.e., 15^n * p^2 or 15^n * p^4, where p is a prime number not 3 or 5 and n is the rest of the exponent for 15.\n    \n    for exponent in range(1, 15//2 + 1): # The bigger exponent for 15 can be at most 14 // 2, because we need at least two primes\n        for p in primefactors(15): # Exclude 3 and 5 (prime factors of 15)\n            # Check 15^n * p^2\n            candidate_a = (3 ** exponent) * (5 ** exponent) * (p ** 2)\n            if len(divisors(candidate_a)) == 15:\n                count += 1  # Found a valid number\n            \n            # Check 15^n * p^4\n            candidate_b = (3 ** exponent) * (5 ** exponent) * (p ** 4)\n            if len(divisors(candidate_b)) == 15:\n                count += 1  # Found a valid number\n            \n    return count\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_difference = 0\n    for A in range(10, 100):  # 2-digit numbers from 10 to 99\n        for B in range(1000, 10000):  # 4-digit numbers from 1000 to 9999\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_difference = max(max_difference, B - A)\n    return max_difference\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    return comb(12, 6)\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(apples, 5/7 * oranges)\n    equation2 = Eq(apples, 2/3 * (oranges + 12))\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # 8*80*100 can be expressed as 8^2 * (80*100 / 8)\n    # The value in the box will be 80*100 / 8\n    value_in_box = (80*100) // 8  # The double slash denotes integer division\n\n    return value_in_box\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    end_number = 10  # Stopped at 10 o'clock\n    count = 30  # Counted to 30\n    clock_numbers = 12  # There are 12 numbers on the clock\n\n    start_number = (end_number - (count % clock_numbers)) % clock_numbers\n    return start_number if start_number != 0 else 12\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # Equation based on the given information\n    equation = Eq(89 - x, 12 * (45 - x))\n\n    # Solve for x\n    sold_amount = solve(equation, x)\n\n    return sold_amount[0]\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y, z = symbols('x y z', integer=True)\n    \n    # Create an equation based on the given fraction representation\n    equation = Eq(2014/37, 54 + 1/(x + 1/(y + 1/z)))\n\n    # Find the values for x, y, and z that satisfy the equation\n    solution_set = solve(equation, (x, y, z))\n\n    # Filter only the solutions that meet the condition of x, y, z being distinct integers\n    for sol in solution_set:\n        if isinstance(sol[x], int) and isinstance(sol[y], int) and isinstance(sol[z], int):\n            if len(set(sol)) == 3:  # Checking for distinct values\n                return sol[x] + sol[y] + sol[z]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    winners = 9\n    amount_per_person = jackpot // winners\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n    \n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    price_shoes_per_pack = 78\n    price_socks_per_pair = 12\n    number_of_aliens = 6\n    \n    number_of_legs_per_alien = 5\n    total_legs = number_of_legs_per_alien * number_of_aliens\n\n    number_of_shoes_needed = total_legs\n    number_of_packs_of_shoes = (number_of_shoes_needed + 4) // 5  # rounding up to nearest pack size\n    \n    number_of_pairs_of_socks_needed = total_legs // 2\n\n    total_cost_shoes = number_of_packs_of_shoes * price_shoes_per_pack\n    total_cost_socks = number_of_pairs_of_socks_needed * price_socks_per_pair\n\n    total_cost = total_cost_shoes + total_cost_socks\n    \n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    number = 100\n    while True:\n        if number % 5 == 1 and number % 6 == 1 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    a = 31 - 26\n    b = 26 - 20\n    c = 20 - (31 - a)\n\n    return a * b * c\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls, boys + 8)\n    equation2 = Eq(girls + boys, 26)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    # Convert total time from minutes to hours as the speeds are in km/h\n    total_time_hours = 54 / 60\n    \n    # Let the distance between her home and the park be d km\n    # The time taken to jog to the park is d/5 hours\n    # The time taken to jog back is d/4 hours\n    # Sum of both times is equal to the total time, therefore:\n    # d/5 + d/4 = total_time_hours\n\n    # Calculate d by solving the equation for d\n    # Multiply both sides by 20 to clear the denominators\n    d = (4 * 5 * total_time_hours) / (4 + 5)\n    \n    return d\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pies Rennie baked\n    # Then Joleen baked x + 5 pies\n    x = symbols('x')\n    equation = Eq((3/4) * x, (2/3) * (x + 5))\n    \n    # Solve the equation\n    pies_Rennie = solve(equation, x)[0]\n    pies_Joleen = pies_Rennie + 5\n\n    # Total number of pies baked\n    total_pies = pies_Rennie + pies_Joleen\n\n    return total_pies\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let n be the time it takes for Nancy to finish the job by herself\n    n = symbols('n')\n    \n    # Lee and Nancy together finish the job in 10 hours, so in 1 hour they do 1/10 of the job\n    # Lee works for 6 hours alone, and then Nancy finishes the job in 20 hours\n    equation = Eq(1/10, 6/n + 20/(n+20))\n\n    # Solve the equation for n\n    nancy_time = solve(equation, n)\n\n    # Return the positive solution since time cannot be negative\n    return [sol.evalf() for sol in nancy_time if sol > 0][0]\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    pie_oranges_g = 550 \n    juice_oranges_g = 1050\n\n    used_oranges_kg = (pie_oranges_g + juice_oranges_g) / 1000 \n    remaining_oranges_kg = total_oranges_kg - used_oranges_kg\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of students who like both apples and bananas\n    x = symbols('x')\n\n    # The number of students who like apples is three times the number who like both\n    apples = 3 * x\n\n    # The number of students who like bananas is five times the number who like both\n    bananas = 5 * x\n\n    # Total students is the sum of those who like only one fruit plus those who like both\n    # However, students who like both fruits are counted twice in the sum of apples and bananas\n    # So we need to subtract the number of students who like both once to get the total\n    total_students = apples + bananas - x\n\n    # We set up the equation based on the total number of students\n    equation = Eq(total_students, 35)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y', integer=True)\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(6 * (10*x + y) + 25, 20*x + y)\n    # Solve equations for x and y\n    solutions = solve(equation1)\n    \n    # Calculate A using the values of x and y\n    A = 10 * solutions[x] + solutions[y]\n    \n    return A\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    difference = 3\n    total_days = 5\n    total_chairs = 0\n\n    for day in range(total_days):\n        total_chairs += first_day_chairs + (day * difference)\n\n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0 \n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence_in_pounds = 3.00 * 100\n    percentage = (15 / pence_in_pounds) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    # Using Python's built-in large number support to directly compute the product\n    ans = 11111111 * 99999999\n    return ans\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    # There are C(15, 1) ways to choose a pencil, \n    # C(20, 1) ways to choose a ruler, \n    # and C(10, 1) ways to choose a pen.\n    pencils = 15\n    rulers = 20\n    pens = 10\n    \n    # We need to choose any two items: \n    # this can be a (pencil, ruler), (pencil, pen), or (ruler, pen).\n    # So, for each choice of two items, calculate the number of ways to choose one from each.\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n    \n    # Add the number of ways for each combination\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    for n in range(100, 191):\n        if n % 4 == 3 and n % 13 == 12:\n            return n\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Benny needs to take out at least 3 blue marbles, or 3 yellow marbles, or 3 marbles of any color.\n    # If he takes out 2 blue and 2 yellow, he still does not have 3 of the same color.\n    # Therefore, Benny has to take one more marble, and in the worst case,\n    # this will be a red one. At this point, he may or may not already have 3 of the same color.\n    # If not, the very next marble must give him 3 of the same color due to the Pigeonhole principle.\n    # So he must take out 2 blues + 2 yellows + 1 red + 1 more = 6 marbles.\n\n    ans = 2 + 2 + 1 + 1\n    return ans\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85  # 85¢ is $0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    ans = 98 - 87 + 76 - 65 + 54 - 43 + 32 - 21 + 10\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Sum of Mary and her son's age now\n    sum_now = 45\n    # Sum of their ages in 5 years' time will be the current sum plus 5 years for each\n    sum_in_5_years = sum_now + 5 + 5\n    \n    return sum_in_5_years\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost_p = 7 * 14\n    change_p = 100 - total_cost_p\n    return change_p / 100\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sebastian, garrett = symbols('sebastian garrett')\n\n    equation1 = Eq(garrett, sebastian + 24)\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n\n    return solutions[garrett]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls - boys, 65)\n    equation2 = Eq(boys - 2/5 * boys, girls - 3/7 * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate remaining boys and girls\n    remaining_boys = solutions[boys] - 2/5 * solutions[boys]\n    remaining_girls = solutions[girls] - 3/7 * solutions[girls]\n\n    # Total remaining students\n    total_remaining = remaining_boys + remaining_girls\n\n    return total_remaining\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_rate = 0.06\n    sales_tax_paid = 90\n\n    sofa_price = sales_tax_paid / sales_tax_rate\n\n    return sofa_price\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n    number_of_people = 4\n    number_of_days = 7\n\n    total_travel_cost = travel_cost_per_person * number_of_people\n    total_hotel_cost = hotel_cost_per_day_per_person * number_of_days * number_of_people\n    total_spending_money = spending_money_per_person * number_of_people\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n\n    total_earnings = march_earnings + april_earnings\n\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    nth_term = first_term + (20 - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = 70_017_007\n    return number\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges, bananas = symbols('apples oranges bananas')\n\n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n\n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_in_metres = 8850\n    metres_to_kilometres = 1000\n\n    return height_in_metres / metres_to_kilometres\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # Considering each block of books as a single unit plus the individual biology book\n    # We have 4 units in total (math, chemistry, physics, biology)\n    num_units = 4\n    unit_arrangements = factorial(num_units)\n    \n    # Now to arrange books within their respective subjects (math, chemistry, physics)\n    math_books_arrangements = factorial(4)\n    chemistry_books_arrangements = factorial(3)\n    physics_books_arrangements = factorial(2)\n    \n    # Multiplying the arrangements of the units by arrangements within each unit\n    total_arrangements = (unit_arrangements *\n                          math_books_arrangements *\n                          chemistry_books_arrangements *\n                          physics_books_arrangements)\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    # Total number of ways to arrange the letters \"ORANGES\"\n    total_arrangements = factorial(7)\n    \n    # Number of ways to arrange the three vowels \"AOE\" together as one single unit\n    vowels_arrangements = factorial(3)\n    \n    # Now consider \"AOE\" as one unit. We have to arrange this unit with the other 4 letters\n    # which gives us 5 units in total to arrange.\n    units_arrangements = factorial(5)\n    \n    # Total number of ways to arrange \"AOE\" together\n    together_arrangements = vowels_arrangements * units_arrangements\n    \n    # Therefore, the number of ways where the vowels are NOT all together\n    not_together_arrangements = total_arrangements - together_arrangements\n    \n    return not_together_arrangements\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n    \n    total_ways = category1 * category2 * category3\n    \n    return total_ways\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "from sympy import symbols, Eq, solve, isprime\n\ndef solution():\n    a, b, c = symbols('a b c', integer=True)\n    equation1 = Eq(31 + a, 26 + b)\n    equation2 = Eq(26 + b, 20 + c)\n\n    solutions = solve((equation1, equation2), (a, b, c))\n    a_val, b_val, c_val = solutions[a], solutions[b], solutions[c]\n\n    if isprime(a_val) and isprime(b_val) and isprime(c_val):\n        return a_val * b_val * c_val\n    else:\n        return None\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for a in range(1, 13):\n        for b in range(a, 13):\n            c = 12 - a - b\n            if c >= b and a + b > c:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    ans = 525 + 75\n    return ans\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    total_stickers = 260\n\n    # Ratios after all transactions:\n    eugene_ratio = 46\n    melvin_ratio = 12\n    david_ratio = 7\n    total_ratio = eugene_ratio + melvin_ratio + david_ratio\n\n    # Find the number of stickers each person ends with:\n    eugene_final = (eugene_ratio / total_ratio) * total_stickers\n    melvin_final = (melvin_ratio / total_ratio) * total_stickers\n    david_final = (david_ratio / total_ratio) * total_stickers\n\n    # Work backwards to find the number of stickers each one had initially:\n    # Eugene ends with 2x stickers after David gives him x stickers, so he started with x.\n    eugene_initial = eugene_final / 2\n    # David had x stickers, and after Melvin's gift he has 2x, so initially he had half of what he ended with.\n    david_initial = david_final / 2\n    # Melvin ends with 3x stickers after Eugene's gift. Initially, he had x stickers,\n    # so Eugene must have given him 2x to make a total of 3x.\n    melvin_initial = melvin_final / 3\n\n    # Therefore, the number of stickers Eugene had at first is the sum of what he ended with and what he gave to Melvin:\n    eugene_start = eugene_initial + melvin_initial\n\n    return eugene_start\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # It's a game that is solved using the concept of Nim game and its winning strategy which\n    # follows from the binary representation of the pile sizes.\n    # The winning strategy is to leave an XOR of pile sizes equal to 0 after your turn.\n\n    # Pile sizes\n    pile_A = 35\n    pile_B = 24\n\n    # Find the XOR of the pile sizes\n    nim_sum = pile_A ^ pile_B\n\n    # If the nim sum is 0, the second player has a winning strategy.\n    # In other cases, the first player has a winning strategy.\n    if nim_sum == 0:\n        # If Eddie (going first) finds the nim sum is 0, Wei'er has a winning strategy\n        winner = \"Wei'er\"\n        strategy = \"There is no winning strategy for Eddie as the starting position is already in a losing state.\"\n    else:\n        # Eddie has a winning strategy\n        winner = \"Eddie\"\n        # Find the winning strategy for Eddie\n        # He should make a move such that the new nim sum becomes 0\n        if nim_sum > pile_A:\n            # If nim sum is larger than pile A, take from pile B\n            matches_to_take = pile_B - (nim_sum ^ pile_A)\n            strategy = f\"Eddie should take {matches_to_take} matches from pile B.\"\n        else:\n            # If nim sum is smaller or equal to pile A, take from pile A\n            matches_to_take = pile_A - (nim_sum ^ pile_B)\n            strategy = f\"Eddie should take {matches_to_take} matches from pile A.\"\n\n    return winner, strategy\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # At first\n    equation1 = Eq(boys, girls)\n    \n    # Halfway through\n    boys += 12\n    girls -= 8\n\n    # In the end\n    equation2 = Eq(boys, 2 * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    initial_students = solutions[boys] + solutions[girls]\n    \n    return initial_students\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n\n    # There are 6 people and 8 seats, so there will be 2 empty seats.\n    # However, these don't matter for circular permutations \n    # because we are looking at different orders of people, not the positions of empty seats.\n    \n    # For circular permutations, we fix one person and arrange the remaining (n-1)! ways.\n    # Thus, we have 5! ways to arrange the people around the table.\n    num_people = 6\n    num_seats = 8\n\n    # Fix one person and arrange the remaining.\n    ans = factorial(num_people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = sum(80 - i if i % 2 == 0 else -(80 - i) for i in range(22))\n    return ans\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    result = 21 * (2/7)\n    return result\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 5, 7]\n    all_permutations = set(permutations(digits, 3))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 25))\n    for prime in primes:\n        if 25 - prime in primes:\n            return prime * (25 - prime)\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Calculate the time for each stage of the race\n    time_first_stage = 280 / 7  # 280m at 7m/s\n    time_middle_stage = 400 / 5  # 400m at 5m/s\n    time_last_stage = (800 - 280 - 400) / 8  # Remaining distance at 8m/s\n\n    # Total time is the sum of times for all stages\n    total_time = time_first_stage + time_middle_stage + time_last_stage\n\n    return total_time\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n\n    length_1 = 15\n    length_2 = 45\n    largest_piece_length = gcd(length_1, length_2)\n\n    return largest_piece_length\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12*12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time_hour = 6\n    start_time_minute = 52\n    end_time_hour = 8\n    end_time_minute = 24\n    \n    start_minutes = start_time_hour * 60 + start_time_minute\n    end_minutes = end_time_hour * 60 + end_time_minute\n    \n    time_spent = end_minutes - start_minutes\n\n    return time_spent\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lampposts = 50\n    distance_between = 2\n    # Since there are lamp posts at both ends, we have to subtract one from the count\n    road_length = (num_lampposts - 1) * distance_between\n\n    return road_length\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    halfway_number = (18 + 52) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n    \n    # According to Pigeonhole Principle,\n    # If n items are put into m containers, with n > m,\n    # then at least one container must contain more than n/m items.\n    \n    max_peaches = (total_peaches // total_students) + (1 if total_peaches % total_students != 0 else 0)\n    \n    return max_peaches\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1  # Includes both the start and end page\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    n = 7  # number of consecutive whole numbers\n    total_sum = 140  # sum of the consecutive whole numbers\n    average = total_sum // n\n    first_number = average - (n // 2)\n\n    return first_number\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    fraction = 2 / 9\n    whole_number = 36\n    ans = fraction * whole_number\n    return ans\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of vanilla cupcakes as 'v'\n    v = symbols('v')\n    \n    # According to the problem, we set up the following equations\n    chocolate = v + 72\n    blueberry = v - 36\n    \n    # After selling some cupcakes, the remaining are:\n    remaining_chocolate = chocolate - (chocolate / 6)\n    remaining_vanilla = v - (2 * v / 3)\n    remaining_blueberry = blueberry - (7 * blueberry / 9)\n    \n    # Total remaining cupcakes equation\n    total_remaining_eq = Eq(remaining_chocolate + remaining_vanilla + remaining_blueberry, 427)\n    \n    # Solve for 'v', which represents the number of vanilla cupcakes\n    num_vanilla = solve(total_remaining_eq, v)[0]\n    \n    # Now calculate how many chocolate cupcakes were originally and how many were sold\n    orig_chocolate = num_vanilla + 72\n    sold_chocolate = orig_chocolate / 6\n    \n    return sold_chocolate\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 7), (3, 9)]\n    lcm_remainder, modulo = solve_congruence(*congruences)\n\n    return lcm_remainder\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    postcard_price = 45  # in pence\n    stamp_price = 27     # in pence\n    total_postcards = 10\n    total_stamps = 10\n    note_value = 10 * 100  # converting to pence\n    \n    total_cost = (postcard_price * total_postcards) + (stamp_price * total_stamps)\n    change = note_value - total_cost\n    \n    return change\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    total_ways = 3 * 2 * 1  # Total ways without restriction\n    seated_opposite_ways = 1  # Claire's opposite seat fixed for Tony\n    return total_ways - seated_opposite_ways\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    frank_daily_rate = 180 / 10  # tables per day\n    ryan_daily_rate = 180 / 15   # tables per day\n\n    difference = frank_daily_rate - ryan_daily_rate\n\n    return difference\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    rounded_mass = 7.4\n    smallest_mass = rounded_mass - 0.05\n    return smallest_mass\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    wrong_mark = -2\n    total_marks = 79\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + wrong_answers * wrong_mark == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    # Let's denote the total number of questions as Q.\n    # The time it takes to mark the questions will be Q / rate.\n    # If marking 4 questions per minute makes her leave 5 minutes late, and\n    # marking 6 questions per minute makes her leave 5 minutes early,\n    # then the time it would take to mark all questions on time is the average.\n    \n    time_late = 5  # she leaves 5 minutes late\n    time_early = -5  # she leaves 5 minutes early\n    \n    rate_slow = 4  # questions per minute (slower rate)\n    rate_fast = 6  # questions per minute (faster rate)\n    \n    # time_slow - time_on_time = time_late\n    # time_fast - time_on_time = time_early\n    # where time_on_time is the time to mark all questions on time\n    # Thus, time_slow - time_fast = time_late - time_early\n    \n    # We have two equations now:\n    # Q / rate_slow - Q / rate_fast = time_late - time_early\n    # rearranging we get:\n    # Q * (1 / rate_slow - 1 / rate_fast) = time_late - time_early\n    \n    # solving for Q gives us the total number of questions\n    Q = (time_late - time_early) / (1 / rate_slow - 1 / rate_fast)\n    \n    return int(Q)\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_pence = 165 * 100  # Convert pounds to pence\n    price_per_cake_pence = 75\n    number_of_cakes = total_money_pence // price_per_cake_pence\n    return number_of_cakes\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    # Starting from the smallest 2-digit number\n    for i in range(10, 96):\n        # Generating consecutive numbers\n        nums = [i, i+1, i+2, i+3, i+4]\n        # Checking if any three consecutive numbers sum to a multiple of 37\n        for j in range(3):\n            if (nums[j] + nums[j+1] + nums[j+2]) % 37 == 0:\n                # Checking if any three consecutive numbers (excluding the previous three) sum to a multiple of 60\n                for k in range(1, 4):\n                    if (nums[k] + nums[k+1] + nums[k+2]) % 60 == 0:\n                        # If both conditions are satisfied, return the last number\n                        return nums[4]\n    return None\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    initial_amount = 1440\n    spent_restaurant = 3/7 * initial_amount\n    remaining_after_restaurant = initial_amount - spent_restaurant\n    spent_enrichment = 2/9 * remaining_after_restaurant\n    remaining_after_enrichment = remaining_after_restaurant - spent_enrichment\n    \n    return remaining_after_enrichment\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    total_candies = 24 + 10\n    candies_each = total_candies // 2\n    candies_to_give = 24 - candies_each\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    meters_to_centimeters = 3.2 * 100\n    difference = meters_to_centimeters - 30\n    return difference\n\nans = solution()"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # At 3 pm, chime thrice takes 6 seconds, including intervals between chimes\n    # Since there are 2 intervals between 3 chimes, each interval is thus 3 seconds\n\n    # Interval between chimes = Total time for 3 chimes / (3 chimes - 1)\n    interval_between_chimes = 6 / (3 - 1)\n\n    # At 6 pm, to chime 6 times, there are 5 intervals\n    # Total time for 6 chimes = (Number of intervals * Interval time) + Time for the first chime\n    # Time for first chime is considered 0, as it is the beginning of the chime\n    total_time_for_6_chimes = (6 - 1) * interval_between_chimes\n\n    return total_time_for_6_chimes\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # Work rate of P in terms of jobs per hour\n    P_rate = 1 / (12 * 8)\n    # Work rate of Q in terms of jobs per hour\n    Q_rate = 1 / (8 * 10)\n    \n    # Combined work rate when P and Q work together for 8 hours a day\n    combined_rate = (P_rate + Q_rate) * 8\n    \n    # Calculating the number of days needed if P and Q work together\n    # Since we need whole days, we use ceil to round up to the nearest whole day\n    from math import ceil\n    days_needed = ceil(1 / combined_rate)\n    \n    return days_needed\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    # Formula for the sum of squares of the first n natural numbers is n(n + 1)(2n + 1) / 6\n    n = 10  # because 30/3 = 10 which is the highest number in the sequence when factoring out 3\n    sum_of_squares = 3 * n * (n + 1) * (2 * n + 1) // 6\n    return sum_of_squares\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = 0\n    for page_number in range(1, 41):\n        total_digits += len(str(page_number))\n    return total_digits\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n\n    factors_info = factorint(120)\n    total_factors = 1\n\n    for factor, power in factors_info.items():\n        total_factors *= (power + 1)\n    \n    return total_factors\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temp = -8\n    midday_temp = 13\n    overall_change = midday_temp - midnight_temp\n    return overall_change\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    product = 180\n    factors = set()\n    \n    for i in range(1, int(product**0.5) + 1):\n        if product % i == 0:\n            factors.add((i, product // i))\n    \n    min_diff = float('inf')\n    for factor_pair in factors:\n        min_diff = min(min_diff, abs(factor_pair[1] - factor_pair[0]))\n    \n    return min_diff\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56  # pence\n    total_kg = 5\n    total_cost_pence = cost_per_kg * total_kg\n    \n    total_cost_pounds = total_cost_pence / 100  # convert pence to pounds\n    amount_paid_pounds = 10  # pounds\n    \n    change = amount_paid_pounds - total_cost_pounds\n    return change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for number in range(6, 15):  # Start at 6 because it's the first multiple of 3 after 5\n        if number % 3 == 0 and 27 % number == 0:\n            return number\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    number_of_people = 85\n    price_per_person = 1.30\n\n    total_money_collected = number_of_people * price_per_person\n\n    return total_money_collected\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the time taken by Luca and Max\n    time_luca, time_max = symbols('time_luca time_max')\n\n    # Given ratios of speeds and the extra time taken by Luca\n    speed_ratio_luca_max = 2 / 3\n    extra_time_luca = 10  # in minutes\n\n    # Create the equation representing the relationship between their times\n    # Since speed = distance/time, the ratio of their speeds is inversely \n    # proportional to the ratio of times taken (time_luca/time_max).\n    # Therefore, time_luca/time_max = 3/2\n    equation1 = Eq(time_luca / time_max, 3 / 2)\n\n    # Another equation is formed from the fact that Luca takes 10 more minutes\n    equation2 = Eq(time_luca, time_max + extra_time_luca)\n\n    # Solve the equations to find the time taken by Luca and Max\n    solutions = solve((equation1, equation2), (time_luca, time_max))\n\n    # Calculate the time taken by Luca if he walked double his usual speed\n    # If Luca doubles his speed, the time taken would be halved\n    time_luca_double_speed = solutions[time_luca] / 2\n\n    return time_luca_double_speed.evalf()\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2 * (5 + x), 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_weight_durian = 3 * 2.6\n    total_weight_watermelon = 5 * 9.24\n    total_weight = total_weight_durian + total_weight_watermelon\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    difference = 1000000 - number\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let's introduce a variable x for the unknown initial number of pens and pencils.\n    # Mrs Rajoo has x pens and x pencils initially.\n    # After giving 5 pencils to Ali, she has (x - 5) pencils left.\n    # She had twice as many pens as pencils then, so x = 2(x - 5)\n    # Solving for x gives us x = 2x - 10, which simplifies to x = 10.\n    # She then bought another 18 pens, so in the end, she has 10 + 18 pens.\n\n    initial_pens = 10\n    additional_pens = 18\n    final_pens = initial_pens + additional_pens\n\n    return final_pens\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Time spent jogging (from 6:30 AM to 7:30 AM): 1 hour\n    # Speed while jogging: 6.5 miles per hour\n    jogging_distance = 1 * 6.5\n\n    # Time spent walking (from 7:30 AM to 9:30 AM): 2 hours\n    # Speed while walking: 4.5 miles per hour\n    walking_distance = 2 * 4.5\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # If we pick one card from each pattern, we might not get an \"A\".\n    # So, we have to pick one more card after picking one from each pattern.\n    cards_picked = 13 * 4 + 1\n\n    return cards_picked\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # Let the number of correct answers be x and the number of wrong answers be y.\n    # We have a system of two equations:\n    # 1) x + y = 40 (total number of questions)\n    # 2) 2x - y = 71 (total score, 2 points for correct and -1 for incorrect)\n\n    total_questions = 40\n    total_score = 71\n    \n    # now solve the system\n    # from equation 2, express y in terms of x: y = 2x - total_score\n    # substituting y from equation 2 in equation 1 we get:\n    # x + (2x - total_score) = total_questions\n    # 3x = total_score + total_questions\n    # x = (total_score + total_questions) / 3\n    \n    correct_answers = (total_score + total_questions) / 3\n    # Since correct_answers must be a whole number, round it to the nearest whole number.\n    correct_answers = round(correct_answers)\n\n    # Now, use correct_answers to find the number of wrong answers\n    wrong_answers = total_questions - correct_answers\n\n    return wrong_answers\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    \n    for i in range(1, 100):\n        count += str(i).count('4')\n    \n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship_still_water = 33  # speed of the ship in still water in km/h\n    speed_current = 7  # speed of the current in km/h\n    distance = 320  # distance to travel in km\n\n    speed_downstream = speed_ship_still_water + speed_current  # speed when travelling downstream in km/h\n\n    time = distance / speed_downstream  # time taken to travel downstream in hours\n\n    return time\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n\n    books_per_pile = total_books // piles\n\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    ans = 6081 - 5076\n    return ans\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    initial_length = 240\n    cut_lengths = 2 * 45  # Peter cuts two 45cm lengths\n    remaining_length = initial_length - cut_lengths\n    num_40cm_lengths = remaining_length // 40  # Number of 40cm lengths cut from the remaining wire\n\n    return num_40cm_lengths\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    grams_per_cookie = 20 / 80\n    grams_needed = grams_per_cookie * 100\n    return grams_needed\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"10:35\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    digits = 3\n    choices_per_digit = 3  # since digits 6, 7, 8 can be used for each place\n\n    total_combinations = choices_per_digit ** digits\n\n    return total_combinations\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    fraction_of_left_handed_who_play_tennis = 1/10\n\n    # Total left handed students\n    total_left_handed = left_handed_tennis_players / fraction_of_left_handed_who_play_tennis\n    \n    # Calculate the total number of students using the percentage of left handed students\n    total_students = total_left_handed / 0.25\n\n    return int(total_students)\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    num_zeros = 0\n    num = 0\n    while num_zeros < 100:\n        num += 1\n        num_zeros += str(num).count('0')\n    return num\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # Liters\n    juice_drunk_per_week = 9  # Liters\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drunk_per_week\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n    \n    interest = principal * rate * time\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, solve\n    \n    x = symbols('x')\n    equation = 3 * (2 * x - 2) - (30 - 3 * x)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed1 = 180  # speed in meters per minute in the first part\n    time1 = 6     # time in minutes he bikes at speed1\n\n    speed2 = 120  # speed in meters per minute in the second part\n    time2 = 8     # time in minutes he bikes at speed2\n\n    distance_part1 = speed1 * time1\n    distance_part2 = speed2 * time2\n\n    total_distance = distance_part1 + distance_part2\n\n    return total_distance\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n    elias_position_from_back = danya_position_from_back - 1\n    \n    total_people = people_in_front_of_elias + elias_position_from_back + 1\n\n    return total_people\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    return (42 / 35) * 100\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Let the first term of the eight consecutive numbers be x\n    # The sum of an arithmetic sequence is given by S = n/2 * (a1 + an)\n    # Where n is the number of terms, a1 is the first term, and an is the last term\n    # In this case, the sum S = 2012, n = 8, and an = x + 7 (since they are consecutive numbers)\n    \n    # We have the following equation\n    # 2012 = 8/2 * (x + (x + 7))\n    # Simplifying, we get\n    # 2012 = 4 * (2x + 7)\n    # Further simplifying, we get\n    # 2012 = 8x + 28\n    # So, solving for x, we get\n    # 8x = 2012 - 28\n    # 8x = 1984\n    # x = 1984 / 8\n    x = 1984 // 8\n    \n    # The largest number, which is the last term (an) is x + 7\n    largest_number = x + 7\n    \n    return largest_number\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    # Sachin's cleaning rate per hour\n    sachin_rate = 1 / 3\n    # Peter's cleaning rate per hour\n    peter_rate = 1 / 6\n\n    # Combined cleaning rate per hour\n    combined_rate = sachin_rate + peter_rate\n\n    # Total time taken if they work together\n    time_taken = 1 / combined_rate\n\n    return time_taken\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = symbols('a')\n    equation = Eq(3 * a + 8, 14)\n\n    ans = solve(equation, a)[0]\n\n    return ans\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    ans = 24.4 * 1000\n    return ans\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    dividend = 52248\n    divisor = 12\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of students in class A and b be the number of students in class B\n    a, b = symbols('a b', integer=True)\n\n    # Original proportion of students a to b is 5/7\n    equation1 = Eq(a, 5/7 * b)\n\n    # After transferring 3 students from b to a\n    equation2 = Eq(a + 3, 4/5 * (b - 3))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let x be the side length of the original square array of boys.\n    # Then x^2 is the total number of boys.\n    # After adding 17 girls, we form a new square with side length x+1.\n    # So the new total number of students is (x+1)^2.\n    # The difference between the new square and the original square\n    # is equal to the number of girls added, which is 17.\n    # Therefore, (x+1)^2 - x^2 = 17\n    # Simplifying, we get (x+1+x)(x+1-x) = 17, which is 2x+1 = 17\n    # Solving for x, we get x = 8.\n    # The total number of boys is x^2, which is 8^2 = 64.\n\n    x = (17 - 1) // 2\n    num_boys = x ** 2\n\n    return num_boys\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_per_second = 125\n    total_millilitres = total_litres * 1000\n    total_time_seconds = total_millilitres / flow_rate_per_second\n\n    return total_time_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    pages = 0\n    digits = 0\n    while digits < 237:\n        pages += 1\n        digits += len(str(pages))\n    return pages - 1\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, r be the original speed\n    d, r = symbols('d r')\n    \n    # She travels 6 hours at speed r for some distance d\n    original_time = 6\n    \n    # If she increases her speed by 2 km/h, she travels for 5 hours\n    increased_speed_time = 5\n    \n    # Original speed equation: time * speed = distance\n    original_speed_eq = Eq(original_time * r, d)\n    \n    # Increased speed equation: time * (speed + 2) = distance\n    increased_speed_eq = Eq(increased_speed_time * (r + 2), d)\n    \n    # Solve the system of equations\n    solution = solve((original_speed_eq, increased_speed_eq), (d, r))\n\n    return solution[d]\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let's use x to represent the number of bottles Faye has at first.\n    # Based on the information, after swapping 5 times, Faye gets 4 new bottles.\n    # However, she should have gotten 3 new bottles because she can only get one new bottle for every 3 empty bottles.\n    # This discrepancy means that she has received 1 new bottle without giving the required 3 empty bottles.\n    # Therefore, this one bottle must have been from the remaining empty bottles she had when the shop realized the mistake.\n    # So, she had 4 new bottles and an extra 1 bottle that should not have been exchanged, which leads to a total of 5 bottles that she received.\n    # These 5 bottles would mean that she exchanged 3 * 5 = 15 bottles.\n    # But, since the shop realized that Faye had gotten 1 more bottle than expected, she would have exchanged 15 - 3 = 12 bottles to legitimately get the 4 bottles.\n    # Thus, Faye originally had 12 bottles.\n\n    # Given that she swapped 5 times, for each swap operation, she exchanged 3 empty bottles for 1 new bottle.\n    # Hence, we can establish a simple equation where:\n    # x (initial bottles) - 3(n) + n = 12, where n is the number of swaps, which is 5.\n\n    # Replace n with 5 in the equation:\n    # x - 3(5) + 5 = 12\n    # x - 15 + 5 = 12\n    # x - 10 = 12\n    # x = 12 + 10\n    x = 12 + 10  # Initial number of bottles\n\n    return x\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the first term of the sequence, and 'd' be the common difference.\n    a, d = symbols('a d')\n\n    # The nth term of an arithmetic progression is given by: a + (n-1)*d\n    # According to the problem:\n    # The 9th term is a + 8*d, and the 15th term is a + 14*d. The 9th term is 18 larger than the 15th term.\n    eq1 = Eq(a + 8*d, (a + 14*d) + 18)\n\n    # The 20th term is a + 19*d and the 12th term is a + 11*d. Their sum is given as 88.\n    eq2 = Eq((a + 19*d) + (a + 11*d), 88)\n\n    # Solve the system of equations.\n    solutions = solve((eq1, eq2), (a, d))\n\n    # The value of the first term 'a' and the common difference 'd' from the solutions.\n    a_val = solutions[a]\n    d_val = solutions[d]\n\n    # Calculate the 32nd term, which is the first term plus 31 times the common difference.\n    nth_term = a_val + 31*d_val\n    \n    return nth_term\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    initial_pieces = 4\n    initial_time = 12  # time in minutes for initial pieces\n    target_pieces = 12\n    cuts_needed_initial = initial_pieces - 1\n    cuts_needed_target = target_pieces - 1\n\n    # Calculate the time taken per cut\n    time_per_cut = initial_time / cuts_needed_initial\n\n    # Calculate total time for target cuts\n    total_time_target = time_per_cut * cuts_needed_target\n\n    return total_time_target\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    # Let's denote the number of days as 'd'.\n    # Her true average savings per day is $1462.\n    # Incorrect average savings per day is $1468 because of recording $1268 instead of $1082.\n    # So, the true total savings over 'd' days can be calculated as $1462 * d.\n    # The incorrect total savings over 'd' days would be $1468 * d.\n    \n    # The difference between her incorrect recording and true amount for one day is $1268 - $1082 = $186.\n    # The difference between her total incorrect savings and true total savings is $186 * d.\n    # This difference should also equal the difference between the total calculated for each average,\n    # which is $1468 * d - $1462 * d = $6 * d.\n    # Hence, $186 * d = $6 * d. Solving for 'd' gives us the number of days.\n    \n    incorrect_day_diff = 1268 - 1082\n    daily_average_diff = 1468 - 1462\n    days = incorrect_day_diff / daily_average_diff\n    \n    return int(days)\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    age_in_2011 = 2011 - birth_year\n    return age_in_2011\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25\n    \n    first_term = last_shown_term - (nth_term - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, marry, carol = symbols('lily marry carol')\n    equation1 = Eq(4 * lily * marry * carol, 2240)\n    equation2 = Eq(carol, marry + 2)\n    equation3 = Eq(marry, lily + 1)\n\n    solutions = solve((equation1, equation2, equation3), (lily, marry, carol))\n\n    for solution in solutions:\n        if all(map(lambda x: x.is_real and x > 0, solution)):\n            return solution[2]\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((8*x + 8)/2 - 3*(x + 6), x + 22)\n\n    # Solve the equation to find the value of x\n    solved_x = solve(equation, x)\n\n    # Chewy's working is incorrect due to a mistake in distributing the -3 correctly\n    # The correct subtraction should be -3(x+6) yielding -3x - 18, not 3x + 18\n    # Write the correct simplified equation after fixing the distribution error\n    correct_eq = (8 * x + 8) / 2 - 3 * (x + 6)\n    correct_eq_simplified = correct_eq.simplify()\n\n    # We return the correct simplified equation instead of the value of x\n    return correct_eq_simplified\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_fraction = 2 / 5\n    purple_fraction = 1 / 8\n    \n    red_flowers = total_flowers * red_fraction\n    purple_flowers = total_flowers * purple_fraction\n    \n    return int(red_flowers), int(purple_flowers)\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n    return ans\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    ans = 6444 // 18\n    return ans\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # Conversion factor from liters to quarts\n    liters_to_quarts = 1.05669\n    \n    # Bottle capacity in quarts\n    bottle_capacity_quarts = 2.5 * liters_to_quarts\n    \n    # Cup capacity in quarts\n    cup_capacity_quarts = 0.5\n    \n    # Number of cups she can drink\n    cups = bottle_capacity_quarts / cup_capacity_quarts\n    \n    return round(cups)\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # Since the marbles are identical, the distribution can be thought of as\n    # how many marbles are in the first pile and the rest will be in the second pile.\n    # For 10 marbles, the first pile can have from 0 to 10 marbles.\n    # But since we need to split into 2 piles, both piles must have at least one marble.\n    # So, the first pile can have from 1 to 9 marbles.\n    return (10 - 1)  # 9 possibilities from 1 to 9 each for the first pile.\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    lengths_cm = [85, 147]  # lengths in cm\n    lengths_m = [2]  # lengths in m\n\n    total_length_m = sum(lengths_m) + sum(lengths_cm) / 100  # Convert cm to m and add\n\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number = 2\n    fraction = 34 / 100\n    ans = whole_number + fraction\n    return ans\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # To ensure 3 toy cars of the same colour,\n    # Jeremy might pick all cars of the other two colours.\n    # Therefore, he will need to pick at least the following:\n    # (All reds + All blues + 1 white) or\n    # (All reds + All whites + 1 blue) or\n    # (All blues + All whites + 1 red)\n    # Whichever is smallest.\n    \n    reds = 5\n    blues = 9\n    whites = 4\n\n    # All reds + all blues + 1 white\n    case1 = reds + blues + 1\n    # All reds + all whites + 1 blue\n    case2 = reds + whites + 1\n    # All blues + all whites + 1 red\n    case3 = blues + whites + 1\n\n    ans = min(case1, case2, case3)\n    \n    return ans\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    millilitres_in_a_litre = 1000\n    litres = 7.5\n    millilitres = litres * millilitres_in_a_litre\n    return millilitres\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    for spiders in range(64 // 8 + 1):\n        legs_remain = 64 - spiders * 8\n        ants = legs_remain // 6\n        if legs_remain % 6 == 0:\n            max_ants = max(max_ants, ants)\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    vivian, justin = symbols('vivian justin')\n    \n    # Vivian has $8 more than $5 times the number of coins that Justin has\n    equation1 = Eq(vivian, 5 * justin + 8)\n    \n    # Vivian has $48 more coins than Justin\n    equation2 = Eq(vivian, justin + 48)\n    \n    solutions = solve((equation1, equation2), (vivian, justin))\n    \n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_left = 34\n    stamps_used = 2\n    stamps_bought = 11\n    stamps_given = 14\n    \n    initial_stamps = stamps_left + stamps_used - stamps_bought + stamps_given\n\n    return initial_stamps\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    expression = ((x - 6) * 6 + 6) / 6\n    equation = Eq(expression, 6)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n    \nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 11.63)  # Sum of two numbers\n    equation2 = Eq(0.1 * x + y, 5.87)  # Sum after shifting the decimal\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    difference = abs(solutions[x] - solutions[y])\n    return difference * 100\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    amount_spent = initial_amount / 2\n    amount_left = initial_amount - amount_spent\n    return amount_left\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    # Iterate through numbers between 30 and 40\n    for num in range(30, 41):\n        # Check if number is divisible by both 3 and 4\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let the original height from which the ball was dropped to be h.\n    # After the first bounce, it reaches a height of 3h.\n    # After the second bounce, it reaches a height of 3(3h) = 9h.\n    # After the third and subsequent bounces, it bounces half of the height from which it dropped.\n    # After the third bounce, it reaches a height of 9h/2.\n    # After the fourth bounce, it reaches a height of (9h/2)/2.\n    # According to the problem, after the fourth bounce, it reaches a height of 36 m.\n    # Therefore, (9h/2)/2 = 36.\n    # Solving for h gives us the original height from which the ball was dropped.\n\n    fourth_bounce_height = 36\n    third_bounce_height = fourth_bounce_height * 2    # Reverse the half bounce\n    second_bounce_height = third_bounce_height * 2    # Reverse the half bounce again\n    original_height = second_bounce_height / 9        # Reverse the first two bounces (3 times the height)\n\n    return original_height\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    num_trays = 40\n    total_eggs = eggs_per_tray * num_trays\n    return total_eggs\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(1, 10, 2):  # even number for divisibility by 4\n                    for e in range(0, 10, 5):  # ending in 0 or 5 for divisibility by 5\n                        num = int(f\"8{a}{b}{c}{d}{e}\")\n                        if num % 3 == 0 and num % 4 == 0 and num % 5 == 0:\n                            if len(set(str(num))) == 6:  # all digits are unique\n                                return num\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    song_cost_pence = 99\n    num_songs = 12\n    cd_cost_pounds = 8.99\n\n    total_cost_songs_pence = song_cost_pence * num_songs\n    total_cost_songs_pounds = total_cost_songs_pence / 100\n\n    savings = total_cost_songs_pounds - cd_cost_pounds\n    return savings\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_spent = 1.69 + 0.82 + 2.99\n    total_paid = 20\n    change = total_paid - total_spent\n    return change\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        original = str(i)\n        reversed_num = int(original[::-1])\n        if i > reversed_num:\n            difference = i - reversed_num\n        else:\n            difference = reversed_num - i\n        results.add(difference)\n    return results\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [1, 2, 3]\n    two_digit_numbers = set()\n    \n    for perm in permutations(digits, 2):\n        two_digit_numbers.add(perm[0] * 10 + perm[1])\n    \n    ans = len(two_digit_numbers)\n    return ans\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time_taken = 15  # seconds\n    length_of_train = 450  # meters\n\n    # Speed = distance / time\n    speed_of_train = length_of_train / time_taken  # meters per second\n\n    return speed_of_train\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let peter's stickers be x and sam's stickers be x + 40\n    peter, sam = symbols('peter sam')\n\n    # sam gives 20% of his to peter\n    sam_to_peter = 0.20 * sam\n    # peter gives 25% of his (after receiving from sam) to sam\n    peter_to_sam = 0.25 * (peter + sam_to_peter)\n    \n    # new quantities after exchange\n    peter_new = peter + sam_to_peter - peter_to_sam\n    sam_new = sam - sam_to_peter + peter_to_sam\n    \n    # In the end, Sam had 96 stickers more than Peter\n    equation = Eq(sam_new - peter_new, 96)\n\n    # Sam originally had 40 stickers more than Peter\n    equation2 = Eq(sam - peter, 40)\n    \n    # Solving equations\n    solutions = solve((equation, equation2), (peter, sam))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    return 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_solution = salt + water\n    \n    concentration = (salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    percentage = 70\n    total = 40\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    cost_pencil = 2\n    cost_pen = 4\n    \n    pencils_for_pen = cost_pen // cost_pencil\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    # Smallest possible difference would be realized by distributing\n    # the digits in such a way that the larger number has the smaller digits in the\n    # higher places (ten thousands, thousands) and the smaller digits in the lower\n    # places (ones, tens), while the smaller number has the larger digits in the higher\n    # places and the smaller digits in the lower places.\n\n    # Approach: place the smallest digit (0) in the tens place of the larger number\n    # to minimize its value, and place 1 in the tens place of the smaller number.\n    # The rest of the digits are then distributed in ascending order.\n\n    # Larger number (using 0 in the tens place): _ _ _ 0 _\n    # Smaller number (using 1 in the tens place): _ _ _ 1 _\n    \n    # Digits available for places other than the tens place: 2, 3, 4, 5, 6, 7, 8, 9\n    \n    # We place 2, 3, 4 in the hundredths, thousands, and ten-thousands places of\n    # the smaller number, and 5 in its ones place.\n    # Resulting smaller number: 43210\n    \n    # We place 6, 7, 8, 9 in the remaining places of the larger number.\n    # Resulting larger number: 98706\n    \n    # Now we calculate the difference.\n    larger_number = int('98706')\n    smaller_number = int('43210')\n    difference = larger_number - smaller_number\n    \n    return difference\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    cards_sent_by_each = friends - 1\n    total_cards_sent = friends * cards_sent_by_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for number in range(1, 829):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    return lcm(1, 2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Bala = 10\n    Ali_and_Bala = 2\n\n    total_people = people_in_front_of_Ali + Ali_and_Bala + people_behind_Bala\n\n    return total_people\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 102))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    jugs_added = 4\n\n    total_water = initial_water + (jug_capacity * jugs_added)\n    \n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n    \n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    days_9_cookies = 3\n    days_15_cookies = 2\n    days_10_cookies = 2\n\n    total_cookies = (9 * days_9_cookies) + (15 * days_15_cookies) + (10 * days_10_cookies)\n    total_days = days_9_cookies + days_15_cookies + days_10_cookies\n\n    average_cookies_per_day = total_cookies / total_days\n    \n    return average_cookies_per_day\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The force exerted by the table on the book is equal\n    # to the mass of the book due to Newton's third law.\n    # In this case, the force exerted by the table is simply\n    # the weight of the book, which is 20N.\n    return 20\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    return y - 3\n\nans = solution(y)  # Replace y with any specific value if needed"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Candy's work rate per day\n    candy_rate = 1 / 20\n    # David's work rate per day\n    david_rate = 1 / 25\n    \n    # Total amount of work done by the end of the 12th day\n    total_work = 1\n    \n    # Equation representing the work done\n    # Candy works all 12 days, David works (12 - days_off)\n    # Work done is equal to the sum of their individual contributions\n    for days_off in range(13):  # David can take off from 0 to 12 days\n        work_done = (12 * candy_rate) + ((12 - days_off) * david_rate)\n        if work_done >= total_work:  # They have finished the job\n            return days_off\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')  # Define T as a symbolic variable\n\n    # Calculate the income tax for the first $50,000\n    tax_first_50k = 0.05 * 50000\n\n    # Calculate the income tax for the amount above $50,000\n    remaining_income = 140000 - 50000\n    tax_above_50k = (0.08 + T) * remaining_income\n\n    # Create an equation based on the total tax paid\n    total_tax_paid = Eq(tax_first_50k + tax_above_50k, 15100)\n\n    # Solve for T\n    solution_T = solve(total_tax_paid, T)\n\n    # Since T is a rate, we want to return the percentage by multiply the decimal by 100\n    return float(solution_T[0]) * 100\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    minutes_per_cake = 36 / 6\n    total_minutes_for_10_cakes = minutes_per_cake * 10\n    return total_minutes_for_10_cakes\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Since there are 6 footballs, to guarantee grabbing 6 balls of the same type,\n    # Lily could end up grabbing all the basketballs and volleyballs first.\n    # Thus, the maximum number of basketballs and volleyballs combined she might take is:\n    max_basketballs_and_volleyballs = 9 + 3\n\n    # To guarantee 6 balls of the same type, Lily must take 1 more than all of the other types.\n    # So, she has to take at least the following number of balls:\n    balls_needed = max_basketballs_and_volleyballs + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n\n    # after 3/4 of the fruits were removed, 1/4 of the fruits were left\n    fruits_left = total_fruits / 4\n\n    # there were 1/8 of the apples and 30 pears left after 3/4 were removed\n    apples_left = (4 / 5) * total_fruits * (1 / 8)\n    pears_left = 30\n\n    # the number of apples and pears left is equal to 1/4 of the total fruits\n    equation = Eq(apples_left + pears_left, fruits_left)\n\n    # solve the equation\n    total_fruits_solution = solve(equation, total_fruits)\n\n    return total_fruits_solution[0]\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v be the final speed of the ball\n    v = symbols('v')\n    \n    # Constants\n    g = 9.81  # acceleration due to gravity (m/s^2)\n    h = 5.0   # height of the tabletop (m)\n    \n    # Since the ball falls freely under gravity, we will use the kinematic equation\n    # v^2 = u^2 + 2*g*h, where u is the initial velocity (which is 0 because the ball is gently pushed)\n    # solving for v gives us: v = sqrt(2*g*h)\n    \n    equation = Eq(v**2, 2 * g * h)\n    solutions = solve(equation, v)\n    \n    # Since we are looking for speed, we only consider the positive root\n    return solutions[1]  # the positive solution\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')  # x represents the number of stickers, y the number of pupils\n    \n    equation1 = Eq(x - 13*y, 190)\n    equation2 = Eq(x - 17*y, 50)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "def solution():\n    from math import sin, cos, radians, sqrt\n\n    # Constants given in the problem\n    height = 30  # Height of the building in meters\n    initial_velocity = 5  # Initial velocity of the arrow in m/s\n    angle = 45  # Angle of the shot in degrees\n\n    # Convert angle to radians for calculation\n    angle_rad = radians(angle)\n\n    # Initial velocity components\n    initial_velocity_x = initial_velocity * cos(angle_rad)\n    initial_velocity_y = initial_velocity * sin(angle_rad)\n\n    # Acceleration due to gravity (in m/s^2)\n    g = 9.81\n\n    # Time taken to reach the ground\n    time = (initial_velocity_y + sqrt(initial_velocity_y**2 + 2 * g * height)) / g\n\n    # Final velocity components\n    final_velocity_x = initial_velocity_x  # No horizontal acceleration\n    final_velocity_y = -initial_velocity_y - (g * time)\n\n    # Magnitude of the final velocity\n    final_velocity = sqrt(final_velocity_x**2 + final_velocity_y**2)\n\n    return final_velocity\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    n = 1  # Start from the smallest 2-digit number which is 10\n    while True:\n        s = sum(map(int, str(n)))  # Calculate the digit sum of n\n        if s == 20 and n % 11 == 0:  # Check if the number meets the conditions\n            return n\n        n += 1  # Move to the next number\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "def solution():\n    from math import comb\n    \n    # The problem is equivalent to putting 13 - 3 = 10 indistinguishable oranges into 3 distinguishable boxes,\n    # since each kid must get at least one orange, we give one to each first.\n    # Now we have 10 oranges left to distribute and 2 dividers (to create the 3 groups of oranges).\n    # So the number of ways to do this is the number of combinations of choosing 2 positions \n    # from 10 + 2 = 12 positions.\n    \n    ans = comb(10 + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        S, A, M, O, G = p\n        SASMO = 10000 * S + 1010 * A + 100 * S + 10 * M + O\n        OGAMS = 10000 * O + 1000 * G + 100 * A + 10 * M + S\n        if S != 0 and O != 0 and SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2  # sandwiches, burgers\n    drink_options = 3  # coffee, milk, tea\n    dessert_options = 4  # cake, pudding, ice-cream, pie\n\n    total_ways = food_options * drink_options * dessert_options\n    return total_ways\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    water_each = total_water / 2\n    water_to_transfer_from_A = 48 - water_each\n    return water_to_transfer_from_A\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    e, c, h, p = symbols('e c h p')  # e for elephants, c for cows, h for horses, p for pigs\n    equations = (\n        Eq(2*e, 5*c),\n        Eq(4*c, 3*h),\n        Eq(3*h, 5*p),\n        Eq(p, 8*e)\n    )\n    solutions = solve(equations)\n\n    # Calculate how many pigs weigh as much as 8 elephants by substituting e with 8\n    num_pigs = solutions[p] / solutions[e] * 8\n\n    return int(num_pigs)\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.5\n    total_change = 0.40\n    total_cost = total_paid - total_change\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mango_price, lychee_price = symbols('mango_price lychee_price')\n\n    # Setting up the equations based on the given information\n    equation1 = Eq(mango_price * 24 + lychee_price * 20, 1160)\n    equation2 = Eq(lychee_price, 2 * mango_price - 6)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (mango_price, lychee_price))\n\n    return solutions[lychee_price]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    result = 0.60 * (2/5) * 75\n    return result\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percent = 18\n    tax_percent = 10\n\n    tip_amount = (tip_percent / 100) * bill\n    tax_amount = (tax_percent / 100) * bill\n\n    total_cost = bill + tip_amount + tax_amount\n    return total_cost\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_5_boxes = 350\n    weight_per_box = total_weight_5_boxes / 5\n    total_weight_3_boxes = weight_per_box * 3\n    return total_weight_3_boxes\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    final_amount = 2519.42\n    initial_amount = 2000\n    years = 3\n\n    # Using the formula A = P(1 + r/n)^(nt), where P is the principal amount,\n    # r is the annual interest rate, n is the number of times that interest is compounded per year,\n    # and t is the time the money is invested for.\n\n    # Here, interest is compounded annually, so n = 1, and therefore the formula simplifies to A = P(1+r)^t\n    # We are looking for the interest rate r, we can rearrange the formula to solve for r:\n    # r = (A/P)^(1/t) - 1\n\n    # Calculate the interest rate\n    interest_rate = (final_amount / initial_amount) ** (1 / years) - 1\n\n    return interest_rate\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of possible ways to arrange the singing performances.\n    # There are 6 singing performances, so there are 6! ways to arrange them.\n    singing_ways = factorial(6)\n    \n    # When arranging the dancing performances, we need at least 1 singing performance between every 2 dances.\n    # Therefore, we can slot the 4 dancing performances into the 5 \"spaces\" between singing performances.\n    # Since we have 5 spaces and need to choose 4, there are C(5, 4) ways to do this.\n    # C(5, 4) is the same as C(5, 1), which is equal to 5\n    dancing_ways = 5\n    \n    # The total number of ways is the product of the singing and dancing arrangements.\n    total_ways = singing_ways * dancing_ways\n    \n    return total_ways\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    for correct_dora in range(11):\n        wrong_dora = 10 - correct_dora\n        points_dora = correct_dora * 10 - wrong_dora * 5\n        points_justin = points_dora + 15\n        if points_dora + points_justin == 155:\n            return correct_dora\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # Considering comics as one single book and fictions as another,\n    # we have 2 'books' to arrange, which is just 2! ways.\n    two_groups = factorial(2)\n\n    # Now within the comics group, there are 4! ways to arrange 4 comics.\n    comics_arrangements = factorial(4)\n\n    # Similarly, within the fictions group, there are 6! ways to arrange 6 fictions.\n    fictions_arrangements = factorial(6)\n\n    # Total arrangements is the product of all the possible arrangements\n    total_arrangements = two_groups * comics_arrangements * fictions_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    coffee_amount = 6  # liters\n\n    one_part = coffee_amount / coffee_ratio\n    total_amount = one_part * total_ratio\n\n    return total_amount\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_length = 250\n    used_length = 180\n    number_of_pieces = 10\n\n    remaining_length = total_length - used_length\n    length_per_piece = remaining_length / number_of_pieces\n    \n    return length_per_piece\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n    \n    # Average number of candies sold by each group in Class A\n    avg_A = 12  \n    \n    # Total number of groups in Class A and Class B\n    groups_A = 3  \n    groups_B = 4  \n    \n    # Average number of candies sold by each group in both Class A and Class B\n    total_avg_AB = 8  \n    \n    # Total candies sold by Class A\n    total_candies_A = groups_A * avg_A\n    \n    # Total candies sold by both Class A and Class B\n    total_candies_AB = (groups_A + groups_B) * total_avg_AB\n    \n    # Total candies sold by Class B (Total from A and B - Total from A)\n    total_candies_B = total_candies_AB - total_candies_A\n    \n    # Average number of candies sold by each group in Class B\n    avg_B = total_candies_B / groups_B\n    \n    return avg_B\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n\n    # Lee and Nancy finish the job together in 10 hours\n    equation1 = Eq(1/(lee_rate + nancy_rate), 10)\n\n    # Lee types for 6 hours and Nancy types for 20 hours to finish the job\n    equation2 = Eq((1/lee_rate) * 6 + (1/nancy_rate) * 20, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n\n    # Nancy's rate is the time it takes for her to finish the job by herself\n    nancy_time = 1 / solutions[nancy_rate]\n\n    return nancy_time\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1 / 3)  # One third off at the next stop left 22 people, so (1-1/3) remained\n    initial_passengers = remaining_after_first_stop / (1 - 2 / 5)  # Two fifths off at the first stop, so (1-2/5) remained\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    percentage = 45\n    total = 80\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from itertools import combinations\n\ndef solution():\n    flavours = 7\n    number_of_doughnuts = 2\n    \n    comb = combinations(range(flavours), number_of_doughnuts)\n    ans = len(list(comb))\n    \n    return ans\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    big_square_side = 6\n    small_square_side = 3\n\n    big_square_area = big_square_side ** 2\n    small_square_area = small_square_side ** 2\n\n    ans = big_square_area // small_square_area\n\n    return ans\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's declare symbols for the chocolates\n    white, milk, dark = symbols('white milk dark')\n\n    # Equations based on the problem statement\n    ratio_white_milk = Eq(white / milk, 3 / 7)\n    ratio_milk_dark = Eq(milk / dark, 7 / 5)\n    difference_dark_white = Eq(dark - white, 8)\n\n    # Solve the system of equations\n    solutions = solve((ratio_white_milk, ratio_milk_dark, difference_dark_white), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    red_balls = 5\n    green_balls = 10\n    total_balls = red_balls + green_balls\n    desired_probability = 1/3\n\n    # Let x be the number of red balls to be added.\n    # We need the probability of drawing a green ball to be 1/3,\n    # which is the number of green balls divided by total balls after adding red balls.\n    # So the equation is: green_balls / (total_balls + x) = desired_probability\n    # 10 / (15 + x) = 1/3\n    # Solve for x:\n    x = (green_balls / desired_probability) - total_balls  # isolate x on one side of equation\n\n    return int(x)\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    cm_per_meter = 100\n    cm = meters * cm_per_meter\n    return cm\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5\n    fraction_spent = 1 / 4\n\n    original_amount = spent / fraction_spent\n\n    return original_amount\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = symbols('total_students')\n\n    badminton_group = total_students / 4 + 3\n    remaining = total_students - badminton_group\n\n    table_tennis_group = remaining / 3 - 3\n\n    # Given that the rest who like football are 25\n    football_group = 25\n\n    # Total students is the sum of all groups\n    equation = Eq(badminton_group + table_tennis_group + football_group, total_students)\n\n    students_in_class = solve(equation, total_students)\n\n    return students_in_class[0]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols representing the number of stickers they initially have\n    sam, peter = symbols('sam peter')\n\n    # Equations based on the problem statement\n    equation1 = Eq(sam, peter + 40)  # Sam has 40 stickers more than Peter\n    # Sam gives 20% of his stickers to Peter\n    equation2 = Eq(sam - 0.20 * sam, peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam) + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    # Get the initial number of stickers Peter had\n    return solutions[peter]\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Ones digits repeat every 4 power cycles for any base number\n    ones_digit_32 = [2**i % 10 for i in range(4)][33 % 4]  # Find the repeating cycle's ones digit for 32^33\n    ones_digit_22 = [2**i % 10 for i in range(4)][29 % 4]  # Find the repeating cycle's ones digit for 22^29\n    \n    # Calculate the ones digit of the difference\n    ans = (ones_digit_32 - ones_digit_22) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    fruits = 2\n    vegetables = 3\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def count_sixes(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += str(i).count('6')\n    return count\n\ndef solution():\n    left, right = 1, 1000  # Initial search space for binary search\n    while left < right:\n        mid = (left + right) // 2\n        if count_sixes(mid) < 18:\n            left = mid + 1\n        else:\n            right = mid\n    return left - 1  # Assuming at least one '6' is on the last page\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    # Iterate through all possible combinations of three dice\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            for die3 in range(1, 7):\n                # Check if the sum of the dice is 12 and all dice have different numbers\n                if die1 + die2 + die3 == 12 and len({die1, die2, die3}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    missing_number = (4 / 9) * 81\n    return missing_number\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    fall_down = 3\n    jumps = 0\n    \n    height_after_jumps = 0\n    while height_after_jumps < total_height:\n        jumps += 1\n        height_after_jumps += jump_up\n        if height_after_jumps >= total_height:\n            break\n        if jumps % 2 == 0:\n            height_after_jumps -= fall_down\n\n    return jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    total_sum = 0\n    for n in range(1, 2013):\n        total_sum += (2 * n) ** 3 / (n * (n + 1) * (n + 2))\n    total_sum += 1 / 4026\n    return total_sum\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for i in range(1, 100):\n        if i % 16 == 0 and (i + 1) % 5 == 0 and (i**0.5).is_integer():\n            return i\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    first_term = 15\n    common_difference = 21 - 15\n    fifth_term = 39\n    next_term = fifth_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    total_cans = cans_per_day * 9\n    return total_cans\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "def solution():\n    from math import factorial\n    total_letters = len(\"RAINBOW\")  # Total number of letters in RAINBOW\n    total_vowels = len(\"AI\")  # Total vowels in RAINBOW\n\n    total_arrangements = factorial(total_letters)  # Total arrangements of all letters\n    vowels_together = factorial(total_vowels) * factorial(total_letters - total_vowels + 1)  # Vowels together\n\n    return total_arrangements - vowels_together\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # If we have to share 16 sausages among 24 people,\n    # every person should get 16/24 = 2/3 of a sausage.\n    # This means every sausage must be cut into 3 parts.\n    # Since every cut produces one additional piece,\n    # we can share 16 sausages among 24 people by making\n    # (24-16) = 8 cuts, because each cut produces one more piece to share.\n\n    # Starting with 16 whole sausages, the first cut will produce 17 pieces,\n    # the second cut 18 pieces, and so on until the eighth cut produces 24 pieces.\n    # No piece needs to be cut more than once.\n\n    # The least number of cuts needed is 8.\n    return 8\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    marks_correct = 4\n    marks_wrong_or_unanswered = -2\n    total_marks = 152\n    \n    # Let the number of correct answers be x\n    # Therefore, the number of wrong answers is total_questions - x\n    # Total marks = marks_correct*x + marks_wrong_or_unanswered*(total_questions - x)\n    # 152 = 4x - 2(80 - x)\n    # Solve for x\n    \n    # Simplify the equation:\n    # 152 = 4x - 160 + 2x\n    # 152 = 6x - 160\n    # 312 = 6x\n    # x = 312 / 6\n    correct_answers = (total_marks + marks_wrong_or_unanswered * total_questions) / (marks_correct + marks_wrong_or_unanswered)\n    \n    # Return number of correct answers\n    return int(correct_answers)\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n\n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    # How old Wendy will be in 5 years time\n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    a = 39\n    b = 51\n    c = 147\n\n    # Find the greatest common divisor of the differences\n    gcd_ab = gcd(b - a, c - b)\n    gcd_abc = gcd(gcd_ab, a - c)\n\n    # The integer we are looking for is the gcd of the differences\n    return gcd_abc\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    # Let x be the original amount of water in Container A\n    # Then (x - 350) is the amount of water in Container B\n    # After spilling 500mL, Container A has (x - 500)mL\n    # At this point, Container B has twice as much water as Container A\n    # So 2 * (x - 500) = x - 350\n    # Solve the equation for x\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (x - 500), x - 350)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n    \n    total_tickets_sold = first_week_tickets + second_week_tickets + third_week_tickets\n    \n    return total_tickets_sold\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    # Page 1 to 9, 9 pages, using 1 digit each.\n    pages_1_digit = 9\n\n    # Page 10 to 99, 90 pages, using 2 digits each.\n    pages_2_digits = 99 - 10 + 1\n\n    # Page 100 to 325, 325 - 100 + 1 pages, using 3 digits each.\n    pages_3_digits = 325 - 100 + 1\n\n    # Total digits used.\n    total_digits = pages_1_digit * 1 + pages_2_digits * 2 + pages_3_digits * 3\n\n    return total_digits\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Let's denote the total number of team members as n.\n    # Lovelle and 5 other team members each said 3 sentences to each other.\n    # This implies, excluding Lovelle, 5 other members spoke, and since they\n    # cannot speak to Lovelle again, they must have spoken to 3 different\n    # members each. So these 5 members spoke to 5 * 3 = 15 unique members.\n\n    # Additionally, there are 12 members who did not speak to Lovelle.\n    # So, the number of team members who spoke to Lovelle (5 members)\n    # plus Lovelle herself, plus 12 members who did not speak to Lovelle\n    # gives us the total number of team members.\n\n    # However, we should also note that the 15 unique members spoken to includes\n    # the 5 who spoke. So we should not double count these.\n    # Therefore, the total is Lovelle (1) + the other 5 who spoke to other people\n    # + the 12 who did not speak at all. All the others have been accounted for.\n\n    total_members_spoken_to = 5  # 5 other than Lovelle\n    total_members_not_spoken_to = 12\n\n    # Adding Lovelle to the mix\n    total_team_members = 1 + total_members_spoken_to + total_members_not_spoken_to\n\n    return total_team_members\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = 'STATISTIC'\n    t_count = word.count('T')\n    non_t_count = len(word) - t_count\n    # Compute all possible permutations without T's being together\n    # This is done by calculating permutations for non 'T' characters\n    perm_non_t = factorial(non_t_count)\n    # We can place T's in the gaps between non 'T' characters, non T has non_t_count+1 gaps\n    # There are non_t_count + 1 places to insert the first T, then non_t_count places for the next one, etc.\n    places_to_insert_ts = perm_non_t * factorial(non_t_count + 1) // factorial(non_t_count + 1 - t_count)\n    # Calculate permutations of T's among themselves\n    perm_ts = factorial(t_count)\n    # The total count will be permutations of non 'T's times ways to insert 'T's\n    total_permutations = places_to_insert_ts\n    \n    # However, we have to divide the total permutations by the permutations \n    # of the indistinguishable letters 'S' and 'I'\n    s_count = word.count('S')\n    i_count = word.count('I')\n    total_permutations //= (factorial(s_count) * factorial(i_count))\n    \n    return total_permutations\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    time_to_complete = total_pieces / pieces_per_hour\n\n    return time_to_complete\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for gums in range(1, 10000):  # Assuming a reasonable upper bound for the number of gums\n        remaining_after_secret = gums - 2\n        shared = remaining_after_secret // 3\n        if remaining_after_secret % 3 == 0:  # Check if one third of the gums is an integer\n            remaining_after_sharing = remaining_after_secret - shared\n            if remaining_after_sharing % 4 == 0:  # Check if the remaining can be equally divided by 4\n                return gums  # This is the smallest number of gums that satisfies the conditions\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sarah, mark = symbols('sarah mark')\n    \n    equation1 = Eq(sarah, mark + 20)\n    equation2 = Eq(sarah + 16, 3 * mark)\n    \n    solutions = solve((equation1, equation2), (sarah, mark))\n    \n    return solutions[sarah]\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    ans = (2018 - 20 + 18) // 8\n    return ans\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # The worst case scenario is that for each chest, the explorer tries all remaining keys.\n\n    attempts = 0\n    remaining_keys = 9\n\n    for chest in range(1, 5):\n        # The number of attempts for the current chest is equal to the number of remaining keys.\n        attempts += remaining_keys\n        # Once a key fits a chest, it is no longer considered, so we reduce the number of remaining keys by one.\n        remaining_keys -= 1\n\n    return attempts\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    return sum(i**2 for i in range(1, 26, 2))\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n\n    solution = solve(equation, h)\n\n    return solution[h]\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # By observing the pattern, we see that the sequence alternates between adding 500 and subtracting 200\n    # Starting from the first element: 2945 + 500 = 3445, 3445 - 200 = 3245, 3245 + 500 = 3745\n    # Following this pattern, the next term in the sequence should be:\n    missing_number = 3745 - 200  # we subtract 200 from the last known term\n\n    return missing_number\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.10\n    number_of_years = 6\n    depreciation_multiplier = (1 - depreciation_rate) ** number_of_years\n\n    final_value = initial_value * depreciation_multiplier\n    \n    return final_value\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    women, men = symbols('women men')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(2 * women + 5 * men, 182)\n\n    solutions = solve((equation1, equation2), (women, men))\n\n    return solutions[women]\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    total_mushrooms = 40\n    additional_mushrooms = 26\n\n    # Let x be the number of mushrooms gathered in the first hour\n    # The number of mushrooms gathered in the second hour would be x + 26\n    # Total mushrooms gathered in both hours is x + (x + 26) = 40\n\n    # Solving for x using the above equation\n    x = (total_mushrooms - additional_mushrooms) / 2\n    second_hour_mushrooms = x + additional_mushrooms\n\n    return int(second_hour_mushrooms)\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    second_term = 8\n    num_terms = 14\n    difference = second_term - first_term\n\n    last_term = first_term + (num_terms - 1) * difference\n    sum_sequence = (first_term + last_term) * num_terms // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded = round(number / 100) * 100\n    return rounded\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    number_of_coins = 11\n    diameter_of_each_coin = 1.85  # in cm\n    total_length = (number_of_coins - 1) * diameter_of_each_coin\n    return total_length\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator = 3\n    denominator_original = 12\n    denominator_new = 20\n\n    ans = (numerator * denominator_new) / denominator_original\n    return ans\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    # Each handshake involves 2 participants, so total number of handshakes\n    # is combinations of 10 taken 2 at a time (10 choose 2)\n    handshakes = (participants * (participants - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    people = 8\n\n    # Since the table is circular, fix one person and arrange the remaining people\n    # This avoids counting rotations as different arrangements\n    arrangements = factorial(people - 1)\n\n    return arrangements\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n\n    temp_difference = night_temp - morning_temp\n\n    return temp_difference\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age = 8\n    mother_age = sandra_age + 33\n    difference_2_years_ago = (mother_age - 2) - (sandra_age - 2)\n    return difference_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    return 25 * 123 * 0.4\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # Since we only care about the last digit, we can use modular arithmetic\n    # the last digit of a number is equivalent to the number modulo 10\n    \n    # The last digit of powers of 2: 2, 4, 8, 6, repeats every 4\n    last_digit_2 = 2 ** (2017 % 4)\n    \n    # The last digit of powers of 3: 3, 9, 7, 1, repeats every 4\n    last_digit_3 = 3 ** (2017 % 4)\n    \n    # The last digit of the entire expression is the product of the last digits of the 2's and 3's\n    last_digit_expression = (last_digit_2 * last_digit_3) % 10\n    \n    return last_digit_expression\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    # Let x be the initial number of ants in the kitchen\n    # After sweeping 3/4 into the neighbour's house, 1/4 remains.\n    # Then 2/5 of the remaining ants run away, leaving 3/5 of 1/4 which is 3/20 of the original number.\n    # 185 ants crawl into the kitchen afterwards.\n    # Finally, the number of ants is twice the original number, so it equals 2 * x.\n\n    # Set up the equation according to the problem:\n    # (3/20) * x + 185 = 2 * x\n    # Solve for x:\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((3/20) * x + 185, 2 * x)\n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_price = 13\n    books_day1 = 89\n    books_day2 = 11\n\n    total_cost = (books_day1 + books_day2) * book_price\n\n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    next_term_index = 8  # The next term after 49 is the 8th term in the sequence\n    next_square_number = next_term_index ** 2  # Square the index to get the square number\n\n    return next_square_number\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens = pens_per_friend * number_of_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    # Start with the initial number\n    num = 1\n    # Loop through to find the 2022nd number\n    for i in range(1, 2022):\n        num = num * 2 + 4  # Double the number and add 4\n        if num >= 100:  # If number is 100 or more, remove the hundreds digit\n            num %= 100\n    return num\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first term be a, and the common difference be d\n    a, d = symbols('a d', real=True)\n\n    # The sum S of the first n terms of an arithmetic progression is given by:\n    # S = n/2 * (2a + (n - 1)d)\n    # Now we set the equations for the sum of first 4 and the sum of last 4 terms\n    sum_first_4 = 2 * (2 * a + 3 * d)\n    sum_last_4 = 2 * (2 * (a + 4 * d) + 3 * d)\n\n    # According to the problem statement: (Sum of last four terms) - (Sum of first four terms) = 32\n    equation = Eq(sum_last_4 - sum_first_4, 32)\n\n    # Solving for d\n    solution_d = solve(equation, d)\n\n    return solution_d[d]\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    # Find the Least Common Multiple (LCM) of the two flashing rates\n    from math import lcm\n    flashes_per_minute_red = 4\n    flashes_per_minute_green = 6\n\n    # LCM of 4 and 6 is the frequency at which they flash together per minute\n    lcm_flashes = lcm(flashes_per_minute_red, flashes_per_minute_green)\n\n    # Number of times both lights flash together in 1 minute\n    flashes_together_per_minute = lcm_flashes // flashes_per_minute_red\n\n    # Since there are 60 minutes in 1 hour\n    ans = flashes_together_per_minute * 60\n\n    return ans\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    num1 = 4.5\n    num2 = 10.3\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n    solution = solve(equation, n)\n\n    return solution\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 14):  # Since 'a' is prime and 3a <= 41, the highest value 'a' can be is 13 (3*13=39 < 41)\n        for b in range(2, 41):  # Since 'b' is prime and 7b <= 41, b can range from 2 to 5 (7*5=35 < 41)\n            if isprime(a) and isprime(b):\n                if 3 * a + 7 * b == 41:\n                    return a + b\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_volume_per_bottle = 120 / (2/5)\n    water_volume_per_bottle = total_volume_per_bottle - 120\n    water_needed_for_six_bottles = water_volume_per_bottle * 6\n    return water_needed_for_six_bottles\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n\n    cost_price = (selling_price * 100) / (100 + profit_percent)\n    \n    new_profit = 5000\n    new_selling_price = cost_price + new_profit\n    new_profit_percent = ((new_selling_price - cost_price) / cost_price) * 100\n\n    return new_profit_percent\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    n = 8.2 * 1000  # Convert kilograms to grams\n    return int(n)\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "def solution():\n    from math import factorial\n\n    num_ways = factorial(len(\"EARTH\"))\n    return num_ways\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150\n    friend_speed = 200\n    walking_time = 10\n\n    simon_distance_walked = simon_speed * walking_time\n    simon_return_time = simon_distance_walked / (2 * simon_speed)\n    friend_total_time = walking_time + simon_return_time\n    friend_distance_walked = friend_speed * friend_total_time\n\n    distance_between = simon_distance_walked + friend_distance_walked\n\n    return distance_between\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    # All possible digits for permutation\n    digits = '0123456789'\n    for perm in permutations(digits, 5):\n        if perm[0] != '0':\n            s, e, n, d, m, o, r, y = perm\n            send = int(s + e + n + d)\n            more = int(m + o + r + e)\n            money = int(m + o + n + e + y)\n            if send + more == money:\n                return money\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_balls = 2 + 2 + 2 + 1  # Two bells, two stars, two red balls, and one green ball\n    identical_bells = 2\n    identical_stars = 2\n    identical_red_balls = 2\n    \n    # The total number of permutations is 7!. Then we divide by the repetitions:\n    # (2! for the bells, 2! for the stars, and 2! for the red balls).\n    num_ways = factorial(total_balls) // (factorial(identical_bells) * factorial(identical_stars) * factorial(identical_red_balls))\n\n    return num_ways\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Fastest persons (Eddie and Jack, 2 min) cross first\n    time = 2\n    # Eddie goes back with the flashlight (1 min)\n    time += 1\n    # Slowest persons (Rose and Mary, 10 min) cross together\n    time += 10\n    # Jack goes back with flashlight (2 min)\n    time += 2\n    # Eddie and Jack cross again (2 min)\n    time += 2\n    return time\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            number = int(f\"2{x}{y}335\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 100\n    while n % 7 != 0:\n        n -= 1\n    return n - 7\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # litres\n    container_fraction = 0.25\n    cup_volume_ml = 150  # ml\n    cups_count = 14\n\n    container_volume = initial_volume * container_fraction\n    cups_volume_litre = (cup_volume_ml / 1000) * cups_count\n\n    remaining_volume = initial_volume - container_volume - cups_volume_litre\n\n    return remaining_volume\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    def fact(n):\n        return 1 if n == 0 else n * fact(n - 1)\n    \n    def derangements(n):\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        return (n - 1) * (derangements(n - 1) + derangements(n - 2))\n    \n    return derangements(7)\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24  # minutes\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages_per_day_original = symbols('pages_per_day_original')\n    total_pages = 8 * pages_per_day_original\n    equation = Eq(total_pages, (8 - 2) * (pages_per_day_original + 2))\n\n    solution = solve(equation, pages_per_day_original)\n\n    return 8 * solution[0]\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expr = (12*a) / 4 + 2*a*5\n    simplified_expr = expr.simplify()\n    \n    return simplified_expr\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # The value after the first year's increase by 10%\n    value_after_increase = 11000\n\n    # Calculate the original price of the house before the increase\n    # Since the value was increased by 10%, we can get the original price by dividing value_after_increase by 1.1\n    original_price = value_after_increase / 1.1\n\n    # Calculate the value after this year's decrease by 10%\n    # Since the value was decreased by 10%, we can get the new value by reducing the last price by 10%\n    # The same as multiplying by 0.9\n    value_after_decrease = value_after_increase * 0.9\n\n    # Calculate the amount of profit or loss by comparing with the original price\n    profit_or_loss = value_after_decrease - original_price\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # He could take all 10 red and black socks first. \n    red_socks = 10\n    black_socks = 10\n    # To guarantee a pair of white socks, he then needs to take 2 white socks.\n    at_least_one_white_pair = 2\n\n    # Total socks taken at most to ensure a pair of white socks\n    total_socks = red_socks + black_socks + at_least_one_white_pair\n\n    return total_socks\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Calculate the rate at which Pip bakes bread: loaves per minute\n    pip_rate = 5 / 20\n    # Calculate the rate at which Bud bakes bread: loaves per minute\n    bud_rate = 3 / 15\n\n    # Total time in minutes they bake together\n    total_time = 40\n\n    # Calculate the total loaves baked by Pip in 40 minutes\n    pip_loaves = pip_rate * total_time\n    # Calculate the total loaves baked by Bud in 40 minutes\n    bud_loaves = bud_rate * total_time\n\n    # Sum the loaves baked by Pip and Bud together\n    total_loaves = pip_loaves + bud_loaves\n\n    return int(total_loaves)\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = 1  # Assume d is 1 for simplicity\n    ans = (6 * d) + (5 * d) - d\n    return ans * d  # Multiply by 'd' to get the result in terms of 'd'\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies = symbols('cookies')\n\n    equation = Eq(cookies - (3/8) * cookies - (1/6) * cookies, 33)\n    \n    initial_cookies = solve(equation, cookies)\n\n    return initial_cookies[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence += [i] * (i + 2)\n    return sequence[len(sequence) // 2]\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jemmas_number = symbols('jemmas_number')\n\n    equation = Eq((jemmas_number + 3) * 5, 35)\n\n    solution = solve(equation, jemmas_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_capacity = 120\n    bucket_capacity = 8\n\n    ans = barrel_capacity // bucket_capacity\n\n    return ans\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('2023-05-05', '%Y-%m-%d')\n    end_date = datetime.strptime('2023-06-07', '%Y-%m-%d')\n    one_day = timedelta(days=1)\n    \n    sundays_count = 0\n    current_date = start_date\n    \n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sundays_count += 1\n        current_date += one_day\n    \n    return sundays_count\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of red and white balls be 3x and 2x\n    # Let y be the number of red balls that Pip adds\n    x, y = symbols('x y')\n\n    # After Pip adds red balls, the ratio becomes 5:3\n    equation1 = Eq((3*x + y) / (2*x), 5/3)\n\n    # Bud adds 100 more white balls than the red balls added by Pip\n    # After Bud adds white balls, the ratio becomes 5:4\n    equation2 = Eq((3*x + y) / (2*x + y + 100), 5/4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The original number of white balls is 2x\n    return 2 * solutions[x]\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # kg\n    num_packets = 25\n    flour_per_packet = total_flour / num_packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # For a number to be divisible by 3, the sum of its digits must be divisible by 3.\n    # For a number to be divisible by 4, the last two digits must form a number that is divisible by 4.\n\n    # Therefore, we need to find a digit K such that:\n    # (5 + K + 2 + 7 + K) is divisible by 3, which implies 14 + 2K is divisible by 3.\n    # The last two digits \"2K\" must form a number that's divisible by 4.\n\n    for K in range(10):\n        if (14 + 2 * K) % 3 == 0 and (20 + K) % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent the number of cookies and b represent the number of brownies originally\n    c, b = symbols('c b')\n\n    # Original ratio: 4:3\n    equation1 = Eq(4*b, 3*c)\n    \n    # After giving away 6 brownies, the ratio became 12:7\n    equation2 = Eq(12*(b - 6), 7*c)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, b))\n    \n    # The total number of cookies and brownies baked\n    total_baked = solutions[c] + solutions[b]\n    \n    return total_baked\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Amount of work done by 4 companies in 5 days\n    work_done = 900\n    days_taken_by_4_companies = 5\n\n    # Total work for 5400m expressway\n    total_work = 5400\n\n    # Work rate for 4 companies\n    rate_for_4_companies = work_done / days_taken_by_4_companies\n\n    # Since work rate is proportional to the number of companies,\n    # the rate for 6 companies is 6/4 times the rate of 4 companies.\n    rate_for_6_companies = (6 / 4) * rate_for_4_companies\n\n    # Days taken by 6 companies = total work / rate for 6 companies\n    days_taken_by_6_companies = total_work / rate_for_6_companies\n\n    return days_taken_by_6_companies\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    buy_price_1 = 10\n    sell_price_1 = 20\n    buy_price_2 = 30\n    sell_price_2 = 40\n\n    profit_1 = sell_price_1 - buy_price_1\n    profit_2 = sell_price_2 - buy_price_2\n\n    total_profit = profit_1 + profit_2\n\n    return total_profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    # Calculate the price per ticket\n    price_per_ticket = 93 / 6\n\n    # Calculate the number of tickets Claire buys\n    number_of_tickets = 124 / price_per_ticket\n\n    return int(number_of_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    term_10th = 25 + (10 - 1) * 3  # Since 25 is the first term and the difference is 3\n    term_1st = 25 - (10 - 1) * 3  # To find the first term, we subtract the difference 9 times\n    return term_1st\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    all_cards = set(range(1, 9))\n    player_one_sum = 23\n    highest_possible_card = 0\n\n    for card1 in range(1, 8):\n        for card2 in range(card1 + 1, 8):\n            for card3 in range(card2 + 1, 8):\n                for card4 in range(card3 + 1, 8):\n                    if card1 + card2 + card3 + card4 == player_one_sum:\n                        player_two_cards = all_cards - {card1, card2, card3, card4}\n                        highest_card_player_two = max(player_two_cards)\n                        highest_possible_card = max(highest_possible_card, highest_card_player_two)\n\n    return highest_possible_card\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs means 18 shoes in total\n    time_per_shoe = 2  # 2 minutes per shoe\n    cobblers = 2  # number of cobblers\n\n    # Since both cobblers work at the same time, we divide the total work by the number of cobblers\n    time_to_clean_all_shoes = (total_shoes * time_per_shoe) / cobblers\n\n    return time_to_clean_all_shoes\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum((i**2 * (21-i) for i in range(1, 21)))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    packets_needed = -(-total_cookies // cookies_per_packet)  # Ceiling division\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    players = 6\n    handshakes = comb(players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n\n    difference = luna_dumplings - lucy_dumplings\n    dumplings_to_give = difference // 2\n\n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds = 24\n    whole_number = (two_thirds * 3) / 2\n    three_quarters = (whole_number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    total_score = 168\n    correct_score = 4\n    wrong_penalty = -1\n    \n    # Number of questions Amna attempted\n    attempted = total_questions - not_attempted\n    \n    # Let x be the number of correct answers\n    # Then, the number of wrong answers is (attempted - x)\n    # According to the given conditions:\n    # 4x - (attempted - x) = total_score\n    # Solve for x:\n    x = (total_score + attempted) / (correct_score - wrong_penalty)\n    \n    return int(x)\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    total_sum = sum(range(1, 20, 2))\n    return total_sum\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n    # find the least common multiple of the packs\n    packs_lcm = lcm(6, 8, 9, 15)\n\n    # calculate the minimum number of markers needed\n    min_markers = packs_lcm\n    while min_markers < 1000:\n        min_markers += packs_lcm\n    \n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        B, D, E, C = perm\n        CBCD = C * 1000 + B * 100 + C * 10 + D\n        CDBC = C * 1000 + D * 100 + B * 10 + C\n        BDEC = B * 1000 + D * 100 + E * 10 + C\n\n        if CBCD + CDBC == BDEC and B != 0 and C != 0:\n            return BDEC\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n    \n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n    return total_dresses\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 50\n    while n % 13 != 0:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Average spent for January to March\n    jan_to_mar = 450 * 3\n    # Average spent for April to July\n    apr_to_jul = 350 * 4\n    # Total spent for August to October\n    aug_to_oct = 1250\n    # Average spent for November to December\n    nov_to_dec = 400 * 2\n\n    # Total spent for the entire year\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    # Total number of months\n    total_months = 12\n\n    # Calculate the average spent per month over the entire year\n    average_spent = total_spent / total_months\n\n    return average_spent\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "def solution():\n    from math import factorial\n\n    total_letters = len(\"CHALLENGE\")\n    vowel_count = len(\"AEE\")\n    consonant_count = total_letters - vowel_count\n    \n    # Treating the three vowels AEE as a single entity since they must be together.\n    # There will be factorial(consonant_count + 1) ways to arrange consonants and the vowel entity\n    arrangements_with_vowel_together = factorial(consonant_count + 1)\n    \n    # Now we find the number of ways to arrange the vowels AEE. Since E is repeated, we divide by factorial(2).\n    vowel_arrangements = factorial(vowel_count) // factorial(2)\n    \n    # The total number of ways to rearrange the letters with the restriction is the product of\n    # the two arrangements calculated above.\n    total_arrangements = arrangements_with_vowel_together * vowel_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    dividend = remainder\n\n    # Iterate until we find a dividend where the divisor equals the quotient\n    while True:\n        quotient = dividend // remainder\n        if remainder == quotient:\n            return dividend\n        dividend += 1\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_cakes = 4 + 1 + 5\n    total_revenue = (4 * 5) + (1 * 10) + (5 * 12)\n    average_price = total_revenue / total_cakes\n    return average_price\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    num_years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** num_years)\n    \n    return final_value\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    equation1 = Eq(cars, 4 / 3 * bikes)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    combined_vehicles = Eq(cars + bikes + lorries)\n\n    # Use a loop to enforce the condition that the total is even and less than 100\n    for total_vehicles in range(2, 100, 2):  # Steps of 2 for even numbers\n        equation3 = combined_vehicles.subs(cars + bikes + lorries, total_vehicles)\n        solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n\n        if solutions and all(v.is_integer and v > 0 for v in solutions.values()):\n            return solutions\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    number_of_rows = 12\n    difference = 2\n\n    seats_in_12th_row = first_term + (number_of_rows - 1) * difference\n\n    return seats_in_12th_row\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    days_needed = total_pages / pages_per_day\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    entrance_rate_1 = 25\n\n    # Time taken to check in visitors with one entrance\n    time_with_1_entrance = 16\n\n    # Total number of visitors in 16 minutes\n    total_visitors = visitors_per_minute * time_with_1_entrance\n\n    # Rate for 2 entrances\n    entrance_rate_2 = entrance_rate_1 * 2\n\n    # Time with 2 entrances\n    time_with_2_entrances = total_visitors / entrance_rate_2\n\n    return time_with_2_entrances\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    # Initialize the value of p to None\n    p = None\n    \n    # Iterate through potential values of p to find one that makes 245p a cube number\n    for i in range(1, 10000):  # We will look for p within a reasonable range\n        if (245 * i) ** (1/3) % 1 == 0:  # Check if 245p is a perfect cube; the cube root will be an integer if so\n            p = i\n            break\n    \n    return p\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = (6**2) - (4**2)\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine = 142\n    elvis = shermaine + 157\n    claudia = elvis + 202\n    total_rulers = claudia + elvis + shermaine\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    total_money = 100\n\n    spent_on_book = 0.10 * total_money\n    remaining_money_after_book = total_money - spent_on_book\n\n    spent_on_dvd = 0.20 * remaining_money_after_book\n    remaining_money_after_dvd = remaining_money_after_book - spent_on_dvd\n\n    return remaining_money_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # In 1/3, the decimal part is repeating '3's\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    climb_per_day = 5\n    slide_per_night = 3\n    net_distance_per_day = climb_per_day - slide_per_night\n    day_counter = 0\n    distance_climbed = 0\n    \n    while distance_climbed < total_distance:\n        day_counter += 1\n        distance_climbed += climb_per_day\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_per_night\n        \n    return day_counter\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n    original_number = (final_number - added_number) / 2\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_goals = sum(scores)\n    mean_goals = total_goals / len(scores)\n    return mean_goals\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    equation1 = Eq(oranges / lemons, 3 / 5)\n    equation2 = Eq((oranges - 48) / lemons, 1 / 2)\n\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n\n    combos = burgers * sides * drinks\n    return combos\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are three types of fruits: apples (A), pears (P), and cherries (C).\n    # Each student can choose 1, 2, or 3 types of fruits.\n    # Possible choices for the students without considering the order are as follows:\n    # 1 fruit type: A, P, C (3 possibilities)\n    # 2 fruit types: AP, AC, PC (3 possibilities)\n    # 3 fruit types: APC (1 possibility)\n\n    # Total different choices possible:\n    total_choices = 3 + 3 + 1\n\n    # By the Pigeonhole Principle, to ensure that at least two students choose the same combination\n    # of fruits, we need one more student than the total number of different choices.\n    students_needed = total_choices + 1\n\n    return students_needed\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_rate = 0.10  # 10%\n    discount_amount = original_price * discount_rate\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    amount_spent = 10\n    fraction_of_total = 1 / 4\n\n    total_money = amount_spent / fraction_of_total\n\n    return total_money\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n    \n    class_a = 45\n    class_b = 75\n    class_c = 210\n\n    # Calculate the Greatest Common Divisor (GCD)\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # number of legs for each animal type\n    ducks_legs = 2\n    parrots_legs = 2\n    rabbit_legs = 4\n    cats_legs = 4\n\n    # count the legs of ducks, parrots, and rabbit\n    fixed_legs = 3 * ducks_legs + 2 * parrots_legs + 1 * rabbit_legs\n\n    # total number of legs to reach\n    total_legs = 32\n\n    # calculate the number of remaining legs that cats have to account for\n    remaining_legs = total_legs - fixed_legs\n\n    # since each cat has 4 legs, divide the remaining legs by 4 to find the number of cats\n    number_of_cats = remaining_legs // cats_legs\n\n    return number_of_cats\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "from math import comb\n\ndef solution():\n    teams = 11\n    matches = comb(teams, 2)\n    return matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Judy's age and her father's age\n    judy, father = symbols('judy father')\n    \n    # Equation 1: Father is 33 years older than Judy\n    equation1 = Eq(father, judy + 33)\n    # Equation 2: Sum of their ages is 63\n    equation2 = Eq(judy + father, 63)\n    \n    # Solve the equations for Judy's and father's current age\n    current_ages = solve((equation1, equation2), (judy, father))\n    \n    # Extract Judy's current age and her father's current age\n    judy_age = current_ages[judy]\n    father_age = current_ages[father]\n    \n    # Define a new symbol for the number of years ago\n    years_ago = symbols('years_ago')\n    \n    # Equation 3: Father's age was four times Judy's age \"years_ago\" years ago\n    equation3 = Eq(father_age - years_ago, 4 * (judy_age - years_ago))\n    \n    # Solve for years_ago\n    years_ago_solution = solve(equation3, years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi_operation(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n\n    inner_result = phi_operation(8, 3)\n    final_result = phi_operation(4, inner_result)\n\n    return final_result\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_current, younger_current = symbols('older_current younger_current')\n\n    # When the older brother was the same age as the younger brother's current age, the younger brother was 12\n    equation1 = Eq(older_current - younger_current, 12)\n\n    # When the younger brother becomes the same age as the older brother's current age, the older brother will be 27\n    # The age difference between the brothers will always be the same\n    age_difference = older_current - younger_current\n    # When the younger brother is older_current years old, the older brother will be older_current + age_difference years old (27 in this case)\n    equation2 = Eq(older_current + age_difference, 27)\n\n    solutions = solve((equation1, equation2), (older_current, younger_current))\n\n    return solutions[older_current]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    def lcm(a, b):\n        from math import gcd\n        return a * b // gcd(a, b)\n\n    # Finding the LCM of all the multiples\n    multiples = [6, 8, 9, 15]\n    current_lcm = lcm(multiples[0], multiples[1])\n    for m in multiples[2:]:\n        current_lcm = lcm(current_lcm, m)\n\n    # Determining the minimum number of markers that is more than 1000\n    min_markers = current_lcm\n    while min_markers < 1000:\n        min_markers += current_lcm\n\n    return min_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rooms = symbols('rooms')\n    \n    # When there are 4 people in each room, 40 students don't have dormitories\n    equation1 = Eq(4 * rooms + 40, 6 * rooms - 24)\n        \n    # Solve for the number of rooms\n    rooms_solved = solve(equation1, rooms)\n    \n    return rooms_solved[0]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    # Given values in the sequence\n    term_10 = 23\n    term_15 = 38\n\n    # Calculate the common difference of the arithmetic sequence\n    common_difference = (term_15 - term_10) / (15 - 10)\n\n    # Calculate the first term in the sequence\n    first_term = term_10 - (10 - 1) * common_difference\n\n    # Calculate the 102nd term\n    term_102 = first_term + (102 - 1) * common_difference\n\n    return term_102\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    sweets_eaten = 18\n    fraction_eaten = 3 / 5\n    total_sweets = sweets_eaten / fraction_eaten\n    sweets_left = total_sweets - sweets_eaten\n    return int(sweets_left)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age = 9\n    john_age = 5\n    jane_target_age = 15\n    years_diff = jane_target_age - jane_age\n    john_target_age = john_age + years_diff\n    return john_target_age\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    for x in range(13 + 1):  # Since we are looking for a whole number solution, we only need to check until 13\n        if (13 - x) ** 2 == 25:\n            return x\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    part1 = 7 + (3 * 11)\n    part2 = (7 + 3) * 11\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'cp' be the cost price\n    cp = symbols('cp')\n\n    # Calculate the marked price (20% above cp)\n    mp = cp * 1.20\n\n    # Calculate the selling price (80% of mp)\n    sp = mp * 0.80\n\n    # The loss is the difference between cost price and selling price ($40 loss)\n    loss = cp - sp\n\n    # Set up the equation and solve for cp (cost price)\n    equation = Eq(loss, 40)\n\n    cp_value = solve(equation, cp)\n\n    return cp_value[0]\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    only_apples = 20 - 10  # Students who like only apples\n    only_strawberries = 30 - 10  # Students who like only strawberries\n    both = 10\n    neither = 5\n    total_students = only_apples + only_strawberries + both + neither\n    return total_students\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_percentage = 12\n    discount_amount = usual_price * (discount_percentage / 100)\n    final_price = usual_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Let the capacity of the tank be denoted by C.\n    # The rate at which tap X fills the tank is C/10 per minute.\n    # The rate at which taps X and Y together fill the tank is C/6 per minute.\n    \n    # Let the rate at which tap Y fills the tank be C/y per minute.\n    # According to the inclusion-exclusion principle, the combined rate equals the sum of individual rates.\n    # Therefore, we have the equation: (C/10) + (C/y) = C/6\n    \n    # Solving for y, the time taken by tap Y alone to fill the tank, we get:\n    # C/y = C/6 - C/10\n    # 1/y = 1/6 - 1/10\n    # 1/y = (10 - 6) / 60\n    # 1/y = 4/60\n    # y = 60/4\n    y = 60/4\n    \n    return y\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * points_correct + incorrect * points_incorrect == 44:\n            return correct\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of markers they originally had\n    xuanrui, yaokuan = symbols('xuanrui yaokuan', integer=True)\n\n    # The sum of their markers is 708\n    eq1 = Eq(xuanrui + yaokuan, 708)\n\n    # After the transactions, they have an equal number of markers\n    eq2 = Eq(xuanrui - 532, yaokuan - (3/7) * yaokuan)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (xuanrui, yaokuan))\n\n    return solutions[xuanrui]\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorials_sum = sum([1, 2, 6, 24, 120, 720, 5040, 40320])\n    last_two_digits = factorials_sum % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    total_marbles = 1442\n    ratio = 6\n\n    # The total number of marbles is 7 parts\n    marbles_per_part = total_marbles / (ratio + 1)\n\n    # Ryan's marbles\n    ryan_marbles = marbles_per_part\n\n    # Ahmad's marbles\n    ahmad_marbles = ryan_marbles * ratio\n\n    # Find the difference, then divide by 2 for the amount to give\n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n\n    return int(marbles_to_give)\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def count_digit_in_range(digit, n):\n    count = 0\n    for i in range(1, n+1):\n        count += str(i).count(str(digit))\n    return count\n\ndef solution():\n    return count_digit_in_range(4, 200)\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    return 3/10 + 1/100 + 7/1000\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Volumes and concentrations of each cup\n    volume_a = 300 # mL\n    concentration_a = 0.20 # 20% sugar\n    \n    volume_b = 300 # mL\n    concentration_b = 0.30 # 30% sugar\n    \n    # Calculate the total sugar in each cup\n    sugar_a = volume_a * concentration_a\n    sugar_b = volume_b * concentration_b\n    \n    # Calculate the total volume and total sugar of the mixed solution\n    total_volume = volume_a + volume_b\n    total_sugar = sugar_a + sugar_b\n    \n    # Calculate new concentration\n    new_concentration = total_sugar / total_volume\n    \n    return new_concentration\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    pounds_to_dollars = 2.50\n    dollars = 1000\n    pounds = dollars / pounds_to_dollars\n    return pounds\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    space_between = 1\n\n    # Subtract the head length and divide by the sum of carriage length and space\n    num_carriages = (total_length - head_length) // (carriage_length + space_between) + 1\n\n    return num_carriages\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    total_notes = 95\n    total_after_exchange = 175\n    \n    # Let x be the number of $2-notes\n    # and (total_notes - x) be the number of $10-notes\n    # After the exchange, each $10-note becomes five $2-notes, so:\n    # x + 5 * (total_notes - x) = total_after_exchange\n    # Now, we solve for x.\n    x = symbols('x')\n    equation = Eq(x + 5 * (total_notes - x), total_after_exchange)\n    \n    number_of_2_notes = solve(equation, x)\n    \n    return number_of_2_notes[0]\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # Counting the digit '8' in the ones place\n    ones_place_count = 0\n    for i in range(1, 289):\n        if i % 10 == 8:\n            ones_place_count += 1\n\n    # Counting the digit '8' in the tens place\n    tens_place_count = 0\n    for i in range(80, 289, 10):\n        tens_place_count += 1\n        if i + 8 < 289:\n            tens_place_count += 1\n\n    # Counting the digit '8' in the hundreds place\n    hundreds_place_count = 0\n    for i in range(180, 289):\n        hundreds_place_count += 1\n\n    # Correct total count\n    total_count = ones_place_count + tens_place_count + hundreds_place_count\n    return total_count\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen - pencil, 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_questions = 50\n    correct_points = 2\n    wrong_points = -1\n    actual_score = 82\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_points + wrong_answers * wrong_points\n        if score == actual_score:\n            return correct_answers\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 0\n    while True:\n        if (24*x - 8) % 25 == 0:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation = Eq(2 * (10 * x + y), 6 * (10 * x + y) + 25)\n\n    solutions = solve(equation)\n\n    return 10 * solutions[x] + solutions[y]\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    price_after_discount = original_price - discount\n    increase = 0.15 * price_after_discount\n    final_price = price_after_discount + increase\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    price_per_kg_bag1 = 5 / 2.5\n    price_per_kg_bag2 = 7.70 / 4\n    return '2.5kg bag' if price_per_kg_bag1 < price_per_kg_bag2 else '4kg bag'\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = sum(1/i for i in range(2001, 2011))\n    S = 1 / S_inverse\n    return int(S)\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    book_price = 4.50\n    number_of_books = 5\n    total_cost = book_price * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    pages_monday = 280\n    pages_tuesday = pages_monday - 28\n    total_pages_read = pages_monday + pages_tuesday\n\n    return total_pages_read\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    length_of_road = 60\n    interval = 10\n\n    num_trees_each_side = (length_of_road // interval) + 1\n    total_trees = num_trees_each_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n\n    # Since 3/4 full is 350g, which means 2/4 (or 1/2) full is 100g more than 1/4 full\n    mass_half_full = mass_quarter_full + 100\n    \n    # Therefore, the mass of an empty jar is the mass when it is 1/4 full minus the mass of the 1/4 marmite\n    mass_empty_jar = mass_quarter_full - (mass_half_full - mass_quarter_full)\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    distance = lcm(5, 10, 12)\n    return distance\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n    \n    total_length = (number_of_buses * bus_length) + (distance_between_buses * (number_of_buses - 1))\n    \n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    incorrect_equation = Eq((x / 4) - 25, 2021)\n    correct_number = solve(incorrect_equation, x)[0]\n    correct_answer = (correct_number * 4) + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    difference = 1\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    total_height_28_blocks = 182\n    number_of_blocks_28 = 28\n    \n    # Find the height of one block\n    height_per_block = total_height_28_blocks / number_of_blocks_28\n    \n    number_of_blocks_42 = 42\n    # Calculate the total height of 42 blocks\n    total_height_42_blocks = height_per_block * number_of_blocks_42\n\n    return total_height_42_blocks\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        if (2 + E + 3 + E + 2) % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    eq = Eq(x/5, y/3)\n\n    y_value_when_x_is_5 = solve(eq.subs(x, 5), y)\n\n    return y_value_when_x_is_5[0]\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price_after_increase = cost_price * 1.50\n    final_selling_price = selling_price_after_increase * 0.90\n    profit = final_selling_price - cost_price\n    return profit\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    a = symbols('a')\n    # Let the third number be a\n    # Based on the sequence pattern, we have:\n    # 4th number = a + (a - x) => which is given to be 6\n    # 5th number = a + 6\n    # 6th number = 6 + (a + 6) => which is given to be 15\n    # Now we have two equations:\n    # a + (a - x) = 6 -> eq1\n    # 6 + (a + 6) = 15 -> eq2\n\n    # Solving the second equation gives us the value of a:\n    a_val = solve(6 + (a + 6) - 15, a)[0]\n\n    # Substitute a into the first equation to find the value of x\n    x_val = solve((a_val + (a_val - a)) - 6, a)[0]\n\n    # The fifth number is a + 6 which we calculate\n    fifth_num = a_val + 6\n    # The seventh number will be the sum of fifth and sixth numbers\n    seventh_num = fifth_num + 15\n\n    return seventh_num\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    from math import sqrt, floor\n\n    # start with m^2 + 5 (the initial group with 5 left out must be a perfect square - 5)\n    # and check adding 18 to that number gives another perfect square\n    # start searching from 1 up to a reasonable number\n    for m in range(1, 1000):\n        initial_group = m ** 2 + 5\n        # now check if initial_group + 18 forms a perfect square\n        if sqrt(initial_group + 18).is_integer():\n            # return the number of students in the initial group\n            return initial_group - 5  # original number of students\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2 * x + 3) / 4 + (6 + 4 * x) / 3, (7 * x + 22) / 8)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    class_a = 12\n    class_b = 15\n    class_c = 18\n\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    total_numbers = 3\n    original_sum = original_average * total_numbers\n    new_sum = new_average * total_numbers\n    changed_number = original_sum - new_sum + 16\n    return changed_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            break\n        num += 1\n    return num\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time_in_minutes = 5 * 60  # 5 p.m. converted to minutes\n    play_badminton = 45  # 45 minutes of playing badminton\n    jogging = 30  # 30 minutes of jogging\n\n    total_activity_time = play_badminton + jogging\n    end_time_in_minutes = start_time_in_minutes + total_activity_time\n\n    end_hour = end_time_in_minutes // 60\n    end_minute = end_time_in_minutes % 60\n    # Adjust if the time goes beyond midnight (24-hour format)\n    end_hour = end_hour if end_hour < 24 else end_hour - 24\n\n    return f\"{end_hour}:{end_minute:02d}\"\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    total_students = 36\n    total_avg_score = 89\n    girls_avg_score = 88\n    boys_avg_score = 91\n\n    # Let the number of girls be x\n    # Then, the number of boys will be (total_students - x).\n    \n    # The total score for girls will be x * girls_avg_score\n    # The total score for boys will be (total_students - x) * boys_avg_score\n    \n    # The combined average is the total score divided by the total number of students.\n    # total_score = girls_total_score + boys_total_score\n    # total_avg_score = total_score / total_students\n    \n    # Now we create an equation based on the above information.\n    # girls_total_score + boys_total_score = total_avg_score * total_students\n    # x * girls_avg_score + (total_students - x) * boys_avg_score = total_avg_score * total_students\n\n    # Now we can solve this equation for x.\n    x = (total_avg_score * total_students - boys_avg_score * total_students) / \\\n        (girls_avg_score - boys_avg_score)\n\n    return int(x)\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # Calculate the total amount of sugar in each solution\n    sugar_david = 800 * 0.05\n    sugar_eugene = 200 * 0.30\n    sugar_felix = 300 * 0.10\n\n    # Calculate the total solution weight after mixing\n    total_weight = 800 + 200 + 300\n\n    # Calculate the total amount of sugar after mixing\n    total_sugar = sugar_david + sugar_eugene + sugar_felix\n\n    # Calculate the concentration of the resulting sugar solution\n    concentration = (total_sugar / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n\n    total_pens = black_pens + blue_pens + green_pens\n\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, gill = symbols('andrew gill')\n    \n    equation1 = Eq(andrew + gill, 62)\n    equation2 = Eq(gill, andrew + 18)\n    \n    solutions = solve((equation1, equation2), (andrew, gill))\n    \n    return solutions[gill]\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    score_for_correct = 4\n    score_for_incorrect = -2\n    total_score = 66\n\n    # Rex answered all but one, so the number of questions answered is total_questions - 1\n    questions_answered = total_questions - 1\n\n    # Let x be the number of correct answers\n    # The number of incorrect answers is then questions_answered - x\n    # The equation representing the total score is:\n    # score_for_correct * x + score_for_incorrect * (questions_answered - x) = total_score\n    # 4x - 2(questions_answered - x) = 66\n    # Simplify the equation to find x:\n    # 4x - 2 * questions_answered + 2x = 66\n    # 6x = 66 + 2 * questions_answered\n    # x = (66 + 2 * questions_answered) / 6\n    correct_answers = (total_score + 2 * questions_answered) // 6\n\n    return correct_answers\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    from itertools import permutations\n\n    # Representation of graph in form of a dictionary where each node is a vertex of the cube\n    # and each list represents the edges connecting to other vertices.\n    # Cube vertices: (8 vertices of a cube are named as V1, V2, ..., V8)\n    cube_graph = {\n        'V1': ['V2', 'V4', 'V5'],\n        'V2': ['V1', 'V3', 'V6'],\n        'V3': ['V2', 'V4', 'V7'],\n        'V4': ['V1', 'V3', 'V8'],\n        'V5': ['V1', 'V6', 'V8'],\n        'V6': ['V2', 'V5', 'V7'],\n        'V7': ['V3', 'V6', 'V8'],\n        'V8': ['V4', 'V5', 'V7']\n    }\n\n    # We will store the Hamiltonian paths starting at vertex 'V1'\n    # A Hamiltonian path is a path that visits each vertex exactly once\n    hamiltonian_paths = []\n\n    # Recursive function to find all the Hamiltonian paths\n    def find_hamiltonian_path(graph, node, visited, path):\n        # If all vertices are visited and there is an edge from the last vertex to the starting vertex\n        if len(visited) == len(graph) and 'V1' in graph[node]:\n            # Add the cycle to the list of Hamiltonian paths and return\n            hamiltonian_paths.append(path + ['V1'])\n            return\n\n        # If every vertex is visited, we stop the recursion\n        if len(visited) == len(graph):\n            return\n\n        # We have not completed visiting all vertices yet\n        for neighbour in graph[node]:\n            if neighbour not in visited:\n                # Mark the neighbour as visited\n                visited.add(neighbour)\n                # Recurse with the updated path and visited vertices\n                find_hamiltonian_path(graph, neighbour, visited, path + [neighbour])\n                # Backtrack and remove the neighbour from the visited set\n                visited.remove(neighbour)\n\n    # Start the search for Hamiltonian paths from vertex 'V1'\n    find_hamiltonian_path(cube_graph, 'V1', set(['V1']), ['V1'])\n\n    # After we find all unique Hamiltonian paths starting from 'V1'\n    # We find the total number by finding all permutations that path could generate\n    # This considers rotations and reflections of the cube\n    unique_paths = set()\n    for path in hamiltonian_paths:\n        perms = [\"\".join(p) for p in permutations(path)]\n        unique_paths.update(perms)\n\n    ans = len(unique_paths)\n    return ans\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    num_people = 4\n    ans = comb(num_people, 2)\n    return ans\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    return 58 + 74\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    \n    fruit_juice_1 = 20 * 0.35\n    fruit_juice_2 = 30 * 0.60\n    \n    total_fruit_juice = fruit_juice_1 + fruit_juice_2\n    \n    concentration = (total_fruit_juice / total_volume) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    cookies = 148\n    box_capacity = 9\n    boxes_needed = -(-cookies // box_capacity)\n    return boxes_needed\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of badges Wendy made at the beginning\n    x = symbols('x')\n\n    # Wendy sold 5/7 of the badges on the first day\n    # The remaining badges after the first day would be 2/7 of x\n    remaining_after_first_day = (2/7) * x\n\n    # Wendy sold 1/3 of the remaining badges on the second day\n    # The remaining badges after the second day would be 2/3 of 2/7 of x\n    remaining_after_second_day = (2/3) * remaining_after_first_day\n\n    # Wendy made an additional 354 badges\n    # Total badges Wendy had at the end is 3 times the number of badges she made at first\n    # So, remaining_after_second_day + 354 = 3 * x\n    equation = Eq(remaining_after_second_day + 354, 3 * x)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "from itertools import permutations\n\ndef solution():\n    original_password = \"0141705021\"\n    password_letters = ['D', 'e', 'v', 'i', 'l']\n    letter_positions = [original_password.index(str(ord(letter) - ord('A'))) for letter in password_letters]\n    \n    # Check if Andy's attempt has the same pattern as the original password\n    attempt = \"4005220912\"\n    if all(attempt[i] == original_password[j] for i, j in enumerate(letter_positions)):\n        return True\n    else:\n        # If Andy's attempt does not match, find the correct password\n        return ''.join(attempt[i] for i in letter_positions)\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # In a knockout tournament, each round halves the number of players\n    # Thus, the total number of rounds is the number of times we can halve the players until one player remains\n    import math\n    num_players = 4\n    rounds_to_play = math.ceil(math.log(num_players, 2))  # Calculate the log base 2 and round up\n    return rounds_to_play\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # Initialize the minimum value to a high number that's out of the possible range\n    minimum_number = 999\n\n    for hundreds_digit in range(1, 10): # Hundreds digit cannot be 0\n        for tens_digit in range(10):     # Tens digit can be 0-9\n            for ones_digit in range(10): # Ones digit can be 0-9\n                # Check if one of the digits is 7\n                if hundreds_digit == 7 or tens_digit == 7 or ones_digit == 7:\n                    # Check the difference condition\n                    if abs(hundreds_digit - tens_digit) <= 4 \\\n                        and abs(hundreds_digit - ones_digit) <= 4 \\\n                        and abs(tens_digit - ones_digit) <= 4:\n                        # Form the number and check if it's the minimum\n                        number = hundreds_digit * 100 + tens_digit * 10 + ones_digit\n                        minimum_number = min(minimum_number, number)\n    \n    return minimum_number\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_by_A = 266\n    not_by_B = 178\n\n    only_A_or_B = total_exhibits - not_by_A - not_by_B\n    by_both_A_and_B = total_exhibits - only_A_or_B\n\n    return by_both_A_and_B\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for number in range(200, 301):\n        if number % 6 == 3 and number % 7 == 3 and number % 11 == 5:\n            return number\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # To guarantee picking at least one ball of each color, we must consider the worst case scenario:\n    # picking all the balls of the two most prevalent colors first.\n    # Therefore, we need to pick all red and green balls plus one more ball to ensure we have one of each color.\n    red_balls = 10\n    green_balls = 13\n    at_least_one_of_each_color = red_balls + green_balls + 1\n    return at_least_one_of_each_color\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse_cost = symbols('blouse_cost')\n    skirt_cost = blouse_cost + 14\n    total_cost_eq = Eq(3 * skirt_cost + 2 * blouse_cost, 317)\n\n    solution = solve(total_cost_eq, blouse_cost)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    last_year_value = 110000\n    decrease_percentage = 0.10\n    # since the house value was 110,000 after an increase of 10%, we calculate the initial value\n    initial_value = last_year_value / 1.10\n    # now we calculate the decreased value for this year\n    this_year_value = last_year_value * (1 - decrease_percentage)\n    # finally, we calculate the profit or loss by subtracting the initial value from this year's value\n    profit_or_loss = this_year_value - initial_value\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n\n    return pupils_each_room\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Iterate over potential prime values for A and B\n    for A in range(2, 100):  # setting an upper limit for search for simplicity\n        # Check if A is a prime number\n        if all(A % i != 0 for i in range(2, int(A**0.5) + 1)):\n            # Check the condition 8A - 3B is a multiple of 3 for prime B\n            for B in range(2, 100):  # setting an upper limit for search for simplicity\n                # Check if B is a prime number\n                if all(B % i != 0 for i in range(2, int(B**0.5) + 1)):\n                    # Check if 8A - 3B is a multiple of 3\n                    if (8 * A - 3 * B) % 3 == 0:\n                        return A  # The first valid A is the answer\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "import math\n\ndef solution():\n    # Calculate the number of ways to arrange the groups of flowers\n    # There are 3 types of flowers: roses, jasmines, and daisies\n    arrangements_of_groups = math.factorial(3)\n    \n    # Calculate the number of ways to arrange roses and jasmines within their groups\n    arrangements_of_roses = math.factorial(3)\n    arrangements_of_jasmines = math.factorial(4)\n    \n    # Since there is only one daisy, it doesn't contribute to the permutations\n    \n    # Multiply the permutations of the groups with the permutations within each group\n    total_arrangements = arrangements_of_groups * arrangements_of_roses * arrangements_of_jasmines\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    ans = 0\n    sum = 0\n    i = 1\n    while sum + i <= 60:\n        sum += i\n        ans += 1\n        i += 1\n    return ans\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    for pies in range(1, 1000):  # Assume a reasonable upper limit for number of pies\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_percentage = 20\n    discount_amount = (discount_percentage / 100) * original_price\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    # The multiple of 1*2*3*4*5*6\n    multiple = 1*2*3*4*5*6\n    # The number m must also be a factor of 1*2*3*4*5*6*7*8\n    factor = 1*2*3*4*5*6*7*8\n    \n    # The factor should be divisible by the multiple\n    # So m can be any factor of (1*2*3*4*5*6*7*8) that is also divisible by (1*2*3*4*5*6)\n    ans = 0\n    for i in range(multiple, factor + 1):\n        if factor % i == 0 and i % multiple == 0:\n            ans += 1\n    return ans\n    \nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    rate_per_minute = 20  # ml per min\n    minutes_in_hour = 60\n    ml_per_hour = rate_per_minute * minutes_in_hour\n    litres_per_hour = ml_per_hour / 1000  # 1 litre = 1000 ml\n\n    return litres_per_hour\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The conditions can be rewritten as:\n    # age % 2 == 1\n    # age % 3 == 1\n    # age % 4 == 1\n    # age % 6 == 1\n    # age % 7 == 0\n    # We can use Chinese Remainder Theorem to solve this\n    # Note that 4 is a multiple of 2 so we do not need to consider 2 separately\n    \n    congruences = [(1, 3), (1, 4), (1, 6), (0, 7)]\n    age = solve_congruence(*congruences)\n    \n    return age[0]\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120  # cm\n    height_difference = 30  # cm\n    mark_height = james_height + height_difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # There are 3 colors, to ensure we have one pair of the same color,\n    # we use the Pigeonhole Principle. We need to pick one more than\n    # three times the number of colors to ensure a pair.\n    socks_needed = 3 * 3 + 1\n    return socks_needed\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each person's number of sweets\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n    \n    # Return the number of sweets Abdul has\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    # Initially, there are 10 pieces of paper.\n    # After cutting, there are 16 pieces of paper.\n    # If a paper is cut into three parts, it results in 2 more pieces (3 - 1 = 2 additional pieces per cut).\n    # Let x be the number of papers cut into three parts.\n\n    # The relation is: initial papers + 2 * (papers cut) = total papers\n    # 10 + 2x = 16\n    # Solve for x:\n    x = (16 - 10) // 2\n\n    return x\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0123456789', 3):\n        s, e, x = perm\n        if s == '0':  # leading digit cannot be zero\n            continue\n        see = int(s + e + e)\n        eex = int(e + e + x)\n        xxx = see + eex\n        xxx_str = str(xxx)\n        if len(xxx_str) == 3 and len(set(xxx_str)) == 1: # all digits in XXX should be the same\n            return see\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000 - 20\n    return number\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    ans = 6.3 + 8.7 + 9.6 - 2.6\n    return ans\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # In the worst case, to guarantee getting 2 apples of the same color, \n    # we have to consider picking one of each color until we are forced \n    # to pick a matching color.\n\n    # Picking one red apple\n    red_apples_picked = 1\n    # Picking one green apple\n    green_apples_picked = 1\n\n    # To ensure we get two of the same color, we pick one more apple\n    # This apple will either be red or green, so we have 2 of one color.\n    next_apple_picked = 1\n\n    # Total apples picked to guarantee 2 of the same color\n    total_apples_picked = red_apples_picked + green_apples_picked + next_apple_picked\n\n    return total_apples_picked\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    water_per_pail = 4\n    number_of_pails = 4\n    water_left = 7\n    total_water = (water_per_pail * number_of_pails) + water_left\n    return total_water\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    sum = 0\n    for i in range(1, 47, 2):\n        sum += i\n    return sum\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n\n    sol = solve(equation, c)\n\n    return sol[0]\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    # Given x^20 * y^15 * z^5 = 243\n    # We want to find the value of x^8 * y^6 * z^2\n\n    # Notice that 243 is 3^5\n    # Hence we can assume x^20 * y^15 * z^5 = (3^5)\n    # It means that each of x, y, z raised to their respective power equals 3\n    # x^4 = y^3 = z = 3 since 20:15:5 = 4:3:1\n\n    # Thus we can express x, y, z in terms of 3\n    x = 3 ** (1/4)\n    y = 3 ** (1/3)\n    z = 3\n\n    # Then we calculate the value of x^8 * y^6 * z^2 using the expressions above\n    ans = (x ** 8) * (y ** 6) * (z ** 2)\n\n    return ans\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define our symbols\n    book, pencil_box = symbols('book pencil_box')\n    \n    # Write down the equations based on the problem\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n    \n    # Solve the equations for the variables\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    result = 1\n    for i in range(1, 2011):\n        result *= i\n        while result % 10 == 0:\n            result //= 10\n        result %= 100000  # To prevent overflow, keep only the last few digits\n\n    return result % 10\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Create the sequence according to the pattern, up to the number 8\n    sequence = []\n    for num in range(1, 9):\n        sequence.extend([num] * (num+1))\n\n    # Calculate the median of the sequence\n    n = len(sequence)\n    sequence.sort()\n    if n % 2 == 0:\n        median = (sequence[n//2 - 1] + sequence[n//2]) / 2\n    else:\n        median = sequence[n//2]\n\n    return median\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_for_four = 150 - 2\n    total_height_for_four = 4 * average_height_for_four\n    total_height_for_two = total_height_for_six - total_height_for_four\n    average_height_for_two = total_height_for_two / 2\n\n    return average_height_for_two\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    participants = 10\n    handshakes = comb(participants, 2)\n    return handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_distance = 500\n    daily_distance = 50\n\n    num_days = total_distance / daily_distance\n\n    return int(num_days)\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    from sympy import factorint\n\n    x = 42  # since 42 * x = 42^2, x must be 42\n    y = 1\n\n    # 42 is 2 * 3 * 7, so y has to be the product of these prime factors without repetition\n    factors = factorint(42)\n    for p in factors:  # iterate through prime factors\n        y *= p\n\n    ans = x + y\n    return ans\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    fodder_per_cattle_per_day = 10\n    number_of_cattles = 8\n    number_of_days = 4\n\n    total_fodder = fodder_per_cattle_per_day * number_of_cattles * number_of_days\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    # We can establish the following relationships:\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 * 2 chickens\n\n    # Number of chickens that weigh as much as one dog\n    num_chickens = 8 * 2\n\n    return num_chickens\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "from sympy.solvers import solve\nfrom sympy import Symbol\n\ndef solution():\n    x = Symbol('x')\n    # Given that Larry had x marbles initially.\n    # According to the question statement: x - 5/12*x - 30 - 26 = 35\n    equation = x - (5/12)*x - 30 - 26 - 35\n    # Solve the equation\n    number_of_marbles = solve(equation, x)\n\n    return number_of_marbles[0]\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # Total weight of the sugar solution in grams\n    concentration = 0.22  # Sugar concentration (22%)\n\n    sugar_weight = total_weight * concentration  # Weight of the sugar in the solution\n\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for number in range(1, 100):\n        for digit in str(number):\n            total += int(digit)\n    return total\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Jess and Jill's initial number of sweets\n    jess, jill = symbols('jess jill', integer=True)\n\n    # Jill has six sweets for every five Jess has.\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # After Jill gives eight sweets to Jess, \n    # Jill now has four sweets for every seven Jess has.\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Total number is the sum of Jess and Jill's sweets\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    initial_amount = 4.44\n    part_given = initial_amount * (1/4)\n    return part_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for x in range(10000, 100000):\n        if int('1' + str(x)) * 3 == int(str(x) + '1'):\n            return x\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    today = datetime.now()\n    birthdate = today - timedelta(days=(38 * 365.25 + 6 * 30.4375))\n    ans = birthdate.year\n    return ans\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    piece_cut = 3.75\n    remaining_length = original_length - piece_cut\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    return sum(i**4 for i in range(1, 20))\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial money Hanson had as 'x'\n    x = symbols('x')\n\n    # After spending 1/4 of his money and an additional $3, Hanson is left with the following:\n    # (3/4)*x - 3\n    # Then, Hanson spent 3/5 of the remaining money and an additional $6:\n    # (2/5)*((3/4)*x - 3) - 6\n    # After all spending, Hanson is left with $24:\n    # (2/5)*((3/4)*x - 3) - 6 = 24\n\n    # Now we translate the word problem into an equation to solve for 'x'\n    equation = Eq((2/5)*((3/4)*x - 3) - 6, 24)\n\n    # Solving for x\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n    \n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits:\n            if perm[0] != '0':\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = [i for i in range(40, 81) if i % 4 == 0 and i % 7 == 0]\n    return beads[0]\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    total_money = 1848\n    pie_ratio = 15\n    cake_ratio = 7\n    pie_number_ratio = 4\n    cake_number_ratio = 1\n    price_diff = 13\n\n    # Let's call the price of one pie \"p\" and the price of one cake \"c\"\n    p, c = symbols('p c')\n\n    # We have the following equations based on the problem statement:\n    # 1. The ratio of money collected from pies to cakes is 15:7.\n    # Therefore, 15p / 7c = 15/7 => c = (15p/7) / (15/7) => c = p + 13\n    equation1 = Eq(c, p + price_diff)\n\n    # 2. The total money collected from pies and cakes is $1848, so we have:\n    # 15p + 7c = 1848\n    # We also know that there are 4 times as many pies sold as cakes, so:\n    # pie_number_ratio * p + cake_number_ratio * c = total_money\n    # But we need to account for the prices to get the amounts correct.\n    # We can transform pie_number_ratio/pie_ratio and cake_number_ratio/cake_ratio into c and p\n    # Therefore, 4 * p + c = 4 * p + (p + 13) = 5p + 13\n    # We use the price of a pie multiplied by 4 and the price of a cake multiplied by 1.\n    equation2 = Eq(pie_number_ratio * (total_money / (pie_ratio + cake_ratio)) +\n                   price_diff * (total_money / (pie_ratio + cake_ratio)) / p, total_money / (pie_ratio + cake_ratio) * cake_ratio)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (p, c))\n\n    # Calculate the number of cakes sold\n    number_of_cakes = total_money / (pie_ratio + cake_ratio) * cake_ratio / solutions[c]\n\n    return int(number_of_cakes)\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # The units digit of powers of 9 repeats in a cycle: 9, 1, 9, 1, ...\n    # Since 9^1 has a units digit of 9, 9^2 has a units digit of 1,\n    # this pattern will repeat every 2 powers.\n\n    # For 9^2015, since 2015 % 2 = 1, the units digit is 9.\n    # For 9^2016, since 2016 % 2 = 0, the units digit is 1.\n    # Therefore, the sum of the units digits is 9 + 1 = 10, and the unit digit of the sum is 0.\n\n    return 0\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial\n\n    # First, calculate the number of ways to arrange the 5 men independently.\n    men_arrangements = factorial(5)\n    \n    # There are 6 possible spaces where the women can be placed in relation to the men:\n    # (_M_M_M_M_M_) -- M represents men and underscores represent possible positions for the women.\n    women_positions = 6\n    \n    # Choose 3 positions out of the 6 to place the women.\n    women_position_choices = factorial(women_positions) // (factorial(3) * factorial(women_positions - 3))\n    \n    # Now, calculate the number of ways to arrange the 3 women in the chosen positions.\n    women_arrangements = factorial(3)\n    \n    # Multiply the arrangements of men, the ways to choose positions for women, and the arrangements of women.\n    total_arrangements = men_arrangements * women_position_choices * women_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    length_1 = 45\n    length_2 = 30\n    longest_piece_length = gcd(length_1, length_2)\n    return longest_piece_length\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    qiqi_speed = 60  # m/min\n    weiling_speed = 72  # m/min\n    weiling_later_time = 2  # minutes\n    qiqi_arrived_before = 4  # minutes\n\n    # Since Weiling arrives 4 minutes before Qiqi, and started 2 minutes after Qiqi,\n    # the difference in the time they spent travelling is 4 + 2 = 6 minutes.\n\n    time_difference = 6  # Weiling traveled 6 minutes less than Qiqi\n\n    # Distance = Speed * Time\n    # qiqi_distance = qiqi_speed * qiqi_time\n    # weiling_distance = weiling_speed * weiling_time\n    # Since they both cover the same distance, we can equate the distances:\n    # qiqi_speed * qiqi_time = weiling_speed * (qiqi_time - time_difference)\n\n    # Let's denote qiqi_time as 't'. So, we have:\n    # qiqi_speed * t = weiling_speed * (t - time_difference)\n    # 60 * t = 72 * (t - 6)\n\n    # Solving for 't':\n    t = (weiling_speed * time_difference) / (weiling_speed - qiqi_speed)\n    \n    # Now calculate the distance using the time 't' and Qiqi's speed:\n    distance = qiqi_speed * t\n\n    return distance\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    result = 0.45 * 540\n    return result\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    marc_current_minutes = (11 * 60) + 50 - 15  # Convert 11:50 AM to minutes and subtract 15 because it's slow\n    george_current_minutes = marc_current_minutes + 7  # George's watch is fast by 7 minutes\n\n    half_hour_later = george_current_minutes + 30  # 30 minutes later\n\n    # Convert minutes back to hours and minutes\n    hours = half_hour_later // 60\n    minutes = half_hour_later % 60\n    \n    # Adjust for 12-hour format\n    hours = hours if hours <= 12 else hours - 12\n    \n    return hours, minutes\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    h = symbols('h')\n\n    # Define the equation\n    equation = Eq(2 * h, 25 + h)\n\n    # Solve the equation\n    solution = solve(equation, h)\n\n    # Return the solution for h\n    return solution[0]\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n\n    tax_on_first_30000 = T / 100 * 30000\n    tax_on_remaining = (T + 3) / 100 * (income - 30000)\n    total_tax_paid = income * (T + 1) / 100\n\n    # The tax paid on income above $30000 should only be considered if income is actually above $30000.\n    tax_equation = Eq(tax_on_first_30000 + (tax_on_remaining if income > 30000 else 0), total_tax_paid)\n\n    # Solve for income given T is the same in all instances and income is greater than $30000.\n    solutions = solve((tax_equation, income > 30000), (T, income))\n\n    # As income should be an amount of money, we select the positive and real solution.\n    ans = [sol[1] for sol in solutions if sol[1].is_real and sol[1] > 0]\n\n    return ans[0]  # There should be only one valid solution for income.\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    jump_up = 3\n    fall_down = 2\n    effective_jump = jump_up - (fall_down / 3)\n    tree_height = 31\n    jumps_before_last_jump = (tree_height - jump_up) / effective_jump\n\n    # The squirrel will reach or exceed the tree's height in its final jump without falling down\n    total_jumps = int(jumps_before_last_jump) * 3 + 1  # Plus 1 for the final jump\n\n    return total_jumps\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    correct_mark = 5\n    wrong_mark = -1\n    total_marks = 90\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + wrong_answers * wrong_mark == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    rate_A = 1 / 10\n    rate_B = 1 / 15\n    combined_rate = rate_A + rate_B\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Since we want to ensure 4 marbles of different colours\n    # We will consider the worst case according to the Pigeonhole Principle.\n    # Draw all red marbles first (12), then all blue (9), then all yellow (8)\n    # Now we have to draw just one more marble to ensure we have 4 of different colours,\n    # which will be the first green marble.\n    \n    return 12 + 9 + 8 + 1\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for number in range(0, 101):\n        if number % 3 == 0 and number % 7 == 0 and (number - 2) % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = -4  # the difference between consecutive terms\n\n    # A term will be positive if it's greater than 0, so we solve for n in the inequality:\n    # first_term + (n - 1) * difference > 0\n    # 50 + (n - 1) * (-4) > 0\n    # (n - 1) * (-4) > -50\n    # (n - 1) < 50 / 4\n    # n < 50 / 4 + 1\n    n = 50 / 4 + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    result = 1.29 * 1000\n    return result\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = sum([int(digit) for digit in \"20190406\"])\n    A = (9 - (digits_sum % 9)) % 9  # Ensure A is a single digit from 0 to 9\n    return A\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Calculate the year when Gigi was 22\n    gigi_birthday_2002 = 2002\n    gigi_age_2002 = 45\n    gigi_birth_year = gigi_birthday_2002 - gigi_age_2002\n    year_when_gigi_was_22 = gigi_birth_year + 22\n\n    # Calculate Jenny's age at that year\n    jenny_birthday_1995 = 1995\n    jenny_age_1995 = 22\n    jenny_birth_year = jenny_birthday_1995 - jenny_age_1995\n    jenny_age_when_gigi_was_22 = year_when_gigi_was_22 - jenny_birth_year\n\n    return jenny_age_when_gigi_was_22\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(f\"451{last_digit}\")\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    # Daniel spent three weeks preparing and writing the presentation\n    days_spent = 3 * 7\n    end_date = start_date + timedelta(days=days_spent)\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    # The number must be a multiple of 3 and 8, which implies that it must be a \n    # multiple of the Least Common Multiple (LCM) of 3 and 8.\n    # In this case, LCM(3, 8) = 24.\n    # Additionally, it must end in 2, meaning it must be 10k + 2 for some integer k.\n    lcm = 24\n    ans = None\n    num = 10  # Starting multiple we will increase by increments of lcm until we reach a number ending in 2\n    \n    # We continue in a loop looking for a candidate number until we find one that ends in 2\n    while True:\n        candidate = num * lcm\n        if str(candidate)[-1] == '2':  # Check if it ends with 2\n            ans = candidate\n            break\n        num += 1\n    \n    return ans\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from sympy import root, sqrt\n\n    numerator = -6.94 - root(9.604, 3)\n    denominator = sqrt(44.541 / 67) - ((-377 / 6) * (5 / 3))\n\n    result = numerator / denominator\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    # For each possible quantity in one group, the other group will have\n    # the remaining apples. Since each group must have a different number\n    # of apples and at least 1 apple, we iterate from 1 to half of 12\n    # (since one group cannot have more than half or it would be impossible\n    # for the other group to have a different number).\n    total_apples = 12\n    count = 0\n    for apples_in_group1 in range(1, total_apples // 2 + 1):\n        apples_in_group2 = total_apples - apples_in_group1\n        if apples_in_group1 != apples_in_group2:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_in_still_water = 25\n    speed_of_current = 3\n    distance_to_travel = 140\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    time_to_travel = distance_to_travel / speed_downstream\n\n    return time_to_travel\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percentage = 15\n    discount_amount = original_price * (discount_percentage / 100)\n    sale_price = original_price - discount_amount\n\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    total_cost = (5 * 0.99) + (2 * 1.98)\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    # Cost of 3 cupcakes\n    cost_of_cupcakes = 3 * 3.25\n    \n    # Total cost paid by Fatimah\n    total_cost = 12.15\n    \n    # Deducting the cost of cupcakes from the total cost to find the cost of 2 cans of drink\n    cost_of_2_cans = total_cost - cost_of_cupcakes\n    \n    # The cost of 1 can of drink\n    cost_of_1_can = cost_of_2_cans / 2\n    \n    return cost_of_1_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    for correct_answers in range(21):\n        wrong_answers = 20 - correct_answers\n        score = correct_answers * 5 - wrong_answers * 2\n        if score == 51:\n            return correct_answers\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import lcm\n    \n    first_light_cycle = 0.5  # in minutes\n    second_light_cycle = 0.75  # in minutes\n    combined_cycle = 9  # in minutes\n    \n    # Find the least common multiple of the first two lights' cycles\n    lcm_two_lights = lcm(int(first_light_cycle * 60), int(second_light_cycle * 60))  # convert to seconds\n\n    # To synchronize with the combined cycle (every 9 minutes), the third light needs to have a cycle\n    # that is a divisor of the LCM of the combined cycle time (converted to seconds)\n    combined_cycle_seconds = combined_cycle * 60\n\n    # Find the LCM of the two lights with the combined cycle\n    lcm_all_lights = lcm(lcm_two_lights, combined_cycle_seconds)\n\n    # Now find the smallest cycle for the third light that is greater than or equal to 30 seconds\n    # and also a divisor of lcm_all_lights\n    third_light_cycle = min(filter(lambda x: x >= 30 and lcm_all_lights % x == 0, range(1, lcm_all_lights + 1)))\n\n    return third_light_cycle / 60  # return the answer in minutes\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of people in group A and y be the number of people in group B.\n    x, y = symbols('x y')\n\n    # Set up the equations based on the problem\n    # The number of people in group A and group B that can fit into full buses, plus the remaining 11 from group A\n    # can fit into a single bus (total seats in a bus is 36).\n    equation1 = Eq((x - 11) % 36 + y % 36, 0)\n\n    # The total number of pictures is x * y, the product of the number of people in each group.\n    # The remaining pictures after filling up the rolls of film with 36 pictures each is the remainder\n    # when dividing by 36. This is the answer we are looking for.\n    equation2 = Eq((x * y) % 36, 36 - (11 * y % 36))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Find the solution that makes sense in context (positive number of group members)\n    for sol in solutions:\n        if sol[x] > 0 and sol[y] > 0:\n            # We want to find out how many more pictures the last roll of film can take\n            # Which is the remainder of the division of total pictures by 36\n            remaining_pictures = (sol[x] * sol[y]) % 36\n            return remaining_pictures\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    sequence = [8, 20, 31, 41, 50]\n    differences = [sequence[i+1] - sequence[i] for i in range(len(sequence)-1)]\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n\n    next_difference = differences[-1] + second_differences[-1]\n    next_number = sequence[-1] + next_difference\n\n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    # We have seven known numbers and one missing number\n    known_numbers = [9, 1, 7, 4, 3, 6, 8]\n    total_numbers = 8\n    mean_value = 5\n    # Since the mean is the sum of numbers divided by the count of numbers,\n    # we can find the sum of all numbers first\n    total_sum = mean_value * total_numbers\n    # Then we subtract the sum of known numbers to find the missing number\n    missing_number = total_sum - sum(known_numbers)\n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # The first pass can go to any of the other 3 individuals (B, C, or D).\n    # The second pass can go to either of the remaining 2 individuals.\n    # The third pass must go back to individual A.\n    # Since each choice is independent of the others, multiply the possibilities.\n    \n    num_methods = 3 * 2 * 1  # First pass: 3 choices, Second pass: 2 choices, Third pass: 1 choice (A)\n    \n    return num_methods\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper_g = 25\n    number_of_students = 250\n    total_weight_g = weight_per_paper_g * number_of_students\n    total_weight_kg = total_weight_g / 1000\n    return total_weight_kg\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Daniel and Ming's ages\n    Daniel, Ming = symbols('Daniel Ming')\n    \n    # Equation representing the current age relationship\n    equation1 = Eq(Daniel, 4 * Ming)\n    # Equation representing the age sum in six years\n    equation2 = Eq((Daniel + 6) + (Ming + 6), 62)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Daniel, Ming))\n    \n    return solutions[Daniel]\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum((1000 - 2 * i) ** 2 - (998 - 2 * i) ** 2 for i in range(0, 497))\n    return ans\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    max_product = 0\n    \n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    from sympy import solve, symbols, Eq\n\n    # Define the symbol for the first even number\n    x = symbols('x', integer=True)\n    \n    # Set up the equation where the product of x*(x+2)*(x+4) equals 2688\n    equation = Eq(x * (x + 2) * (x + 4), 2688)\n    \n    # Use sympy's solve to find the solutions for x\n    solutions = solve(equation, x)\n\n    # Find the largest of the three numbers using max after evaluating the solutions\n    largest = max(solution + 4 for solution in solutions if solution % 2 == 0 and solution > 0)\n    \n    return largest\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # The time taken for the entire line to cross a bridge is equal to the time taken for the\n    # end of the line to reach the end of the bridge after the front has reached the beginning.\n    time_to_cross_first_bridge = 8  # in seconds\n    time_to_cross_second_bridge = 10  # in seconds\n    length_of_line = 3  # in meters\n    length_of_first_bridge = 9  # in meters\n\n    # Let the length of the second bridge be 'x'.\n\n    # The time taken for the entire line to cross the bridge is the time taken for the line to cover\n    # the bridge length plus its own length\n    # 8 seconds to cross the first bridge (9 meters):\n    # Hence, speed = (length of bridge + length of line) / time to cross\n    speed = (length_of_first_bridge + length_of_line) / time_to_cross_first_bridge\n\n    # For the second bridge:\n    # 10 seconds to cross the unknown-length bridge (x meters):\n    # Hence, x + length of line = speed * time to cross\n    length_of_second_bridge = speed * time_to_cross_second_bridge - length_of_line\n\n    return length_of_second_bridge\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = (11, 55)  # 11:55 AM\n    end_time = (13, 40)    # 1:40 PM in 24-hour format\n\n    start_total_minutes = start_time[0] * 60 + start_time[1]\n    end_total_minutes = end_time[0] * 60 + end_time[1]\n    \n    duration_minutes = end_total_minutes - start_total_minutes\n    \n    return duration_minutes\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    left_side = 11\n    right_side = 7\n\n    # Assuming Crystal is not counted twice, we need to add 1 for Crystal herself\n    total_people = left_side + right_side + 1\n\n    return total_people\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    n = 224\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('8:30', '%H:%M')\n    # 3 lessons of 45 minutes each and 2 moving periods of 5 minutes each\n    total_time_passed = (3 * 45) + (2 * 5)\n    break_start_time = start_time + timedelta(minutes=total_time_passed)\n\n    return break_start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 3 == 0 and i % 11 == 0:  # Check if i is divisible by both 3 and 11.\n            if (i - 1) % 2 == 0 and (i - 1) % 7 == 0:  # Check if i - 1 is divisible by both 2 and 7.\n                return i\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    # Maddy has 10 cupcakes to divide into 2 groups with each group having a different number of cupcakes.\n    # Since each group needs to have at least 1 cupcake, we can give 1 cupcake to the smaller group \n    # and then distribute the remaining cupcakes.\n    \n    # Total cupcakes:\n    total_cupcakes = 10\n    \n    # The smallest number of cupcakes in one group is 1.\n    # The largest number of cupcakes in one group can only be total_cupcakes - 1,\n    # otherwise there will not be at least 1 cupcake leftover for the other group.\n    \n    # We only need to consider half the distribution possibilities due to symmetry.\n    # If there is 1 in one group, there will be 9 in the other and so forth.\n    # Therefore, the maximum we need to check is total_cupcakes // 2.\n    \n    # We start with the smallest group having 1 cupcake and increment until we reach half of the total.\n    # With each iteration, we have a unique way to distribute cupcakes between two groups.\n    max_for_smaller_group = total_cupcakes // 2\n    \n    # Count the unique distributions:\n    count = max_for_smaller_group\n    \n    return count\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):  # hundreds digit must be non-zero\n        for b in range(0, 10):  # tens digit can be zero\n            for c in range(0, 10):  # ones digit can also be zero\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return 100*a + 10*b + c\n\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n    return gcd(gcd(28, 84), 126)\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n\n    equation1 = Eq(troy, 5 * adam)\n    equation2 = Eq(adam + 24, troy / 3)\n\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    total_coins = solutions[troy] + solutions[adam]\n\n    return total_coins\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total = neha_won + jasmine_won\n    return total\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wands, cards = symbols('wands cards')\n    \n    total_items_eq = Eq(wands + cards, 69)\n    difference_eq = Eq(wands, cards + 17)\n    \n    solutions = solve((total_items_eq, difference_eq), (wands, cards))\n    \n    return solutions[wands]\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    # let x be the number of $10 notes, y be the number of $5 notes.\n    x, y = Symbol('x'), Symbol('y')\n    total_notes = 57  # total number of notes\n    spent_10_notes = 0.6  # 60% of $10 notes spent\n    spent_5_notes = 0.25  # 25% of $5 notes spent\n    remaining_ratio = 2  # Twice as many $10 notes as $5 notes left\n\n    # The total number of notes is the sum of $10 and $5 notes.\n    equation1 = Eq(x + y, total_notes)\n    # The remaining $10 notes is twice the remaining $5 notes after spending.\n    equation2 = Eq(x * (1 - spent_10_notes), y * (1 - spent_5_notes) * remaining_ratio)\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the cost of the bag\n    total_spent = solutions[x] * 10 * spent_10_notes + solutions[y] * 5 * spent_5_notes\n    \n    return total_spent\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        product = 1\n        for digit in str(i):\n            product *= int(digit)\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    # Iterate over all three-digit even numbers\n    for i in range(100, 1000, 2): \n        digits = [int(x) for x in str(i)]\n        # Check if the sum of digits is 8 and all digits are different\n        if sum(digits) == 8 and len(set(digits)) == 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # In the worst case, Darrell could draw all the blue and white beads first.\n    worst_case_blue_white = 5 + 6\n    # Then, to get 5 green beads for sure, he has to draw 5 green beads next.\n    green_beads_needed = 5\n    # Total beads Darrell must draw in the worst case\n    total_beads = worst_case_blue_white + green_beads_needed\n    return total_beads\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbolic variable for the initial amount of money Hanson had\n    initial_money = symbols('initial_money')\n\n    # After spending 1/4 and additional $3 on CDs, he's left with (3/4 * initial_money - 3)\n    money_after_CDs = initial_money * (3/4) - 3\n\n    # Then he spends 3/5 of the remaining money and an additional $6 on batteries\n    # He is left with (2/5 * money_after_CDs - 6) which is equals $24\n    final_equation = Eq((2/5) * money_after_CDs - 6, 24)\n\n    # Solve for the initial amount of money Hanson had\n    solutions = solve(final_equation, initial_money)\n\n    return solutions[0].evalf()\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    one_fourth_of_16 = 1 / 4 * 16\n    missing_number = one_fourth_of_16 * 2\n    return missing_number\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Calculate the number of games in each group stage for a single round-robin.\n    # In a round-robin tournament with n players, each player plays n-1 games and there are n*(n-1)/2 games in total.\n    group_games = 4 * (4 * (4 - 1) // 2)\n\n    # Calculate the number of games in the knockout round.\n    # Since 8 people enter, it's 7 games in total (4 quarterfinals, 2 semifinals, 1 final).\n    knockout_games = 8 - 1\n\n    # The third-place playoff is an additional game.\n    third_place_game = 1\n\n    # Calculate the total number of games.\n    total_games = group_games + knockout_games + third_place_game\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(B, 2 * A)\n    equation2 = Eq(A, B - 12)\n    combined_rate, time = symbols('combined_rate time')\n\n    # Solve for A's and B's individual times to complete the job\n    times = solve((equation1, equation2), (A, B))\n\n    A_time = times[A]\n    B_time = times[B]\n\n    # A and B's combined work rate when working together (A's work per day plus B's work per day)\n    equation3 = Eq(combined_rate, 1/A_time + 1/B_time)\n\n    # Solve for the time taken when A and B work together\n    solution = solve((equation3), (time))\n\n    return solution[time]\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    total_plants = 9\n    plants_to_arrange = 4\n    \n    # Calculate arrangements (permutations) using factorial\n    arrangements = factorial(total_plants) // factorial(total_plants - plants_to_arrange)\n    \n    return arrangements\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    banana_likers = 18\n    apple_likers = 12\n\n    both_likers = banana_likers + apple_likers - total_people\n\n    return both_likers\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_end = 489\n    stickers_given_away = 76\n    stickers_bought = 65\n\n    stickers_start = stickers_end - stickers_bought + stickers_given_away\n\n    return stickers_start\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # Rachel gives Alice 10 pieces, they have same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n    # Alice gives Rachel 10 pieces, Rachel has 4 more than 3 times Alice's\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Sum of candies they originally had\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for the weights of the pineapple and apple\n    pineapple, apple = symbols('pineapple apple')\n\n    # Equation 1: A pineapple weighs 650g more than an apple\n    equation1 = Eq(pineapple, apple + 650)\n\n    # Equation 2: 3 pineapples and 4 apples weigh 5450g altogether\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    from math import gcd\n\n    # The least common multiple (lcm) of 15 and 21 will give us the product of the prime factors of the number\n    # We use the formula lcm(a, b) = |a * b| / gcd(a, b)\n    lcm_15_21 = (15 * 21) // gcd(15, 21)\n\n    # A number that has exactly 8 factors must be of the form p^3 * q or p * q * r where p, q, r are prime numbers\n    # Here we assume it to be of the form p^3 * q since we have 15 and 21 as factors which share a common prime factor 3\n\n    # We try to find p and q such that p^3 * q = lcm(15, 21)\n    # p is the gcd of 15 and 21, since it must be a common prime factor (which is 3)\n    p = gcd(15, 21)\n\n    # Now, we can find q by dividing the lcm by p^3\n    q = lcm_15_21 // (p**3)\n\n    # Once we have p and q, we know the number is p^3 * q\n    the_number = p**3 * q\n\n    # Given a number in the form p^3 * q, the sum of its factors is (1 + p + p^2 + p^3) * (1 + q)\n    sum_of_factors = (1 + p + p**2 + p**3) * (1 + q)\n\n    return sum_of_factors\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0123456789'):\n        if perm[0] != '8':  # Ensuring the leftmost digit is 8\n            continue\n        if int(''.join(perm[0:2])) % 2 != 0:\n            continue\n        if int(''.join(perm[0:3])) % 3 != 0:\n            continue\n        if int(''.join(perm[0:4])) % 4 != 0:\n            continue\n        if int(''.join(perm[0:5])) % 5 != 0:\n            continue\n        if int(''.join(perm[0:6])) % 6 != 0:\n            continue\n        if int(''.join(perm[0:7])) % 7 != 0:\n            continue\n        if int(''.join(perm[0:8])) % 8 != 0:\n            continue\n        if int(''.join(perm[0:9])) % 9 != 0:\n            continue\n        if int(''.join(perm[0:10])) % 10 != 0:\n            continue\n        return ''.join(perm)  # Once all conditions are satisfied, we have our number\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    # Let x be the number of tomatoes Matthew has at first\n    # After giving 7 tomatoes to Matthew, Belinda has (36 - 7) tomatoes\n    belinda_tomatoes_after = 36 - 7\n\n    # They will have the same number of tomatoes after Belinda gives away 7\n    # So Matthew's initial number of tomatoes plus 7 equals Belinda's tomatoes after\n    # x + 7 = belinda_tomatoes_after\n    x = belinda_tomatoes_after - 7\n\n    return x\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    base_assembly_rate = 10\n    increased_efficiency_rate = base_assembly_rate * 1.50\n    \n    return increased_efficiency_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n\n    # We know that 2012 ≡ 1274 (mod D) hence 2012 - 1274 ≡ 0 (mod D)\n    difference = 2012 - 1274\n\n    # Since D is a divisor of the difference and we want the largest possible value of D\n    # Then D has to be the greatest common divisor of 2012 and 1274, which is also odd. \n    D = gcd(2012, 1274)\n    \n    # Ensure D is odd; if not, remove factors of 2.\n    while D % 2 == 0:\n        D = D // 2\n    \n    # Since 2012 and 1274 give the same remainder when divided by D, \n    # R is the remainder when 2012 (or 1274) is divided by D\n    R = 2012 % D\n\n    return D - R\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):\n        ducks = 7 - rabbits\n        if (rabbits * 4 + ducks * 2) == 20:\n            return rabbits\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n\n    juice_to_grace = (5 / 7) * total_juice\n    remainder = total_juice - juice_to_grace\n    juice_to_evelyn = (1 / 9) * remainder\n\n    juice_left = remainder - juice_to_evelyn\n\n    return juice_left\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    last_digit_4_power = pow(4, 2009, 10)\n    last_digit_6_power = pow(6, 2010, 10)\n\n    ans = (last_digit_4_power + last_digit_6_power) % 10\n\n    return ans\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Let's think in terms of the 'nim' game strategy\n    # The winner is the one who forces the other to take the last turn to write the remaining numbers.\n    # To do so, the first player should aim to leave the second player with a number of remaining\n    # numbers such that they cannot win in their next turn.\n    # Total sum is 1+3+4+6 = 14, which means if we leave a multiple of 14 to the second player\n    # and continue to do so, the second player will eventually lose.\n\n    # Now we check if 52 is a multiple of 14 or not to determine who should start and what strategy to follow.\n    remaining_numbers = 52\n    if remaining_numbers % 14 == 0:\n        # If it's a multiple of 14, Betty should let Abby start first,\n        # and then always make the total numbers written by both in each round a multiple of 14.\n        ans = (2, 'Make the total multiples of 14 after each round.')\n    else:\n        # If it's not a multiple of 14, Betty should start first and make it a multiple of 14 on her turn,\n        # then follow the above strategy.\n        first_move = remaining_numbers % 14\n        ans = (1, 'Start with writing {} numbers to make a multiple of 14, then follow the 14-multiple strategy.'.format(first_move))\n\n    return ans\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    total_weight = 63\n    ways = 0\n    for two_gram_weights in range(0, total_weight // 2 + 1):\n        if (total_weight - 2 * two_gram_weights) % 5 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Let's denote the first term as 'a' and the common difference as 'd'.\n    # The sum of the first n terms of an arithmetic sequence can be calculated by the formula: S_n = n/2 * (2a + (n-1)d)\n    # We have two equations based on the provided sums:\n    # S_8 = 8/2 * (2a + (8-1)d) = 32\n    # S_22 = 22/2 * (2a + (22-1)d) = 44\n\n    # Let's solve this system of equations to find 'a' and 'd'.\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    eq1 = Eq(8/2 * (2*a + (8-1)*d), 32)\n    eq2 = Eq(22/2 * (2*a + (22-1)*d), 44)\n\n    # Solve the system of equations for 'a' and 'd'\n    solution = solve((eq1, eq2), (a, d))\n    a_value = solution[a]\n    d_value = solution[d]\n\n    # Now we can find the sum of the first 15 terms using the values of 'a' and 'd'.\n    S_15 = 15/2 * (2*a_value + (15-1)*d_value)\n\n    return S_15\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_six = 6 * 150\n    average_height_four = 150 - 2\n    total_height_four = 4 * average_height_four\n    total_height_two = total_height_six - total_height_four\n    average_height_two = total_height_two / 2\n    \n    return average_height_two\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    # Let's denote the rate of A as a tons per unit time, and so B's rate is 2a.\n    # Let C's rate be c tons per unit time.\n    # Given when A and C are on, A provides 18 tons of water.\n    # Similarly, when B and C are on, B provides 27 tons of water.\n    # We can also say that the ratio A/C = 18/x and B/C = 27/x where x is the amount of water C provides.\n    # According to the question, B's rate is twice A's rate: B = 2A\n    # Therefore, substituting B = 2A into the rates 2A/C = 27/x, we infer that A/C = 27/2x\n    # Now we have two equations with the same ratio of A/C:\n    # 18/x = 27/2x\n    # To find x, we can solve for x:\n    # 18/x = 27/2x -> 36 = 27/2x -> 72 = 27x\n  \n    x = 72 / 27\n    # We have found the ratio of C = 72 / 27.  Let's denote it as c_ratio.\n    # The amount A provides is A / (A+C) times the full capacity of the pool. Similarly, B provides B / (B+C).\n    # Since we know the ratio of A / C and B / C, we can find the full capacity by A / (A+A/c_ratio) = 18/tons_capacity:\n    \n    c_ratio = 72 / 27\n    # A / (A + A/c_ratio) = 18/tons_capacity\n    # (c_ratio * A) / (c_ratio * A + A) = 18/tons_capacity\n    # we can now replace A with a, as they represent the same value\n    # (c_ratio * a) / ((c_ratio + 1) * a) = 18/tons_capacity\n    # c_ratio / (c_ratio + 1) = 18/tons_capacity\n    # tons_capacity = 18 / (c_ratio / (c_ratio + 1))\n    # tons_capacity = 18 * ((c_ratio + 1) / c_ratio)\n    \n    tons_capacity = 18 * ((c_ratio + 1) / c_ratio)\n  \n    return tons_capacity\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    ans = sum(range(1, 21)) + sum(range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Assuming Alberta's age is between 10 and 99\n        reversed_age = int(str(age)[::-1])  # Reverse the digits\n        if reversed_age + 1 == age // 2:\n            return age\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    \n    # Rex didn't attempt one question, so he attempted 24 questions\n    attempted_questions = total_questions - 1\n    rex_points = 66\n    \n    # Let x be the number of correct answers, then (24 - x) is the number of incorrect answers\n    # 4x - 2(24 - x) = rex_points\n    # Solve for x\n    x = (rex_points + 2 * attempted_questions) / (points_correct + abs(points_incorrect))\n    \n    return int(x)\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from math import factorial\n\n    # There are 4 letters \"MATH\" and 5 colors to choose from\n    # We want to paint each letter with a different color\n\n    # First letter can be painted with any of the 5 colors\n    ways_first_letter = 5\n\n    # Second letter can be painted with any of the remaining 4 colors\n    ways_second_letter = 4\n\n    # Third letter can be painted with any of the remaining 3 colors\n    ways_third_letter = 3\n\n    # Fourth letter can be painted with any of the remaining 2 colors\n    ways_fourth_letter = 2\n\n    # Total number of ways to paint the 4 letters with different colors\n    # is the product of the number of ways to paint each letter\n    total_ways = (ways_first_letter * ways_second_letter *\n                  ways_third_letter * ways_fourth_letter)\n\n    return total_ways\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    number = 9.32\n    fraction = 1 / 10\n    increase_by_fraction = number * fraction\n    ans = number + increase_by_fraction\n\n    return ans\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    # Assume the initial number of students is 's'\n    # Assume the number of meatballs every student gets is 'm'\n    # Total meatballs is 's * m + 20'\n    # After the new student comes, total meatballs is '(s + 1) * m + 10'\n    # These two expressions must be equal, so we need to solve for 'm':\n    # s * m + 20 = (s + 1) * m + 10\n    # After rearranging: 10 = m - 20\n    # Hence, each student gets 10 + 20 meatballs\n    \n    # Number of meatballs every student gets\n    m = 10 + 20\n    return m\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n\n    if fraction_value > decimal_value:\n        ans = \"4/25 is larger\"\n    else:\n        ans = \"0.17 is larger\"\n\n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    initial_volume = 1000  # 1 litre of water in millilitres\n    poured_volume = 200 * 3  # Total volume poured into 3 cups in millilitres\n    remaining_volume = initial_volume - poured_volume\n    return remaining_volume\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    remaining_questions_third_day = 23\n\n    # Let total_questions be the total number of questions Andrew had for homework.\n    # On the 1st day he does (total_questions / 2) + 7\n    # On the 2nd day he does (remaining_questions / 2) - 5\n    # remaining_questions = total_questions - ((total_questions / 2) + 7)\n    # On the 2nd day he does (remaining_questions / 2) - 5 which equals remaining_questions_third_day\n    # Finally: remaining_questions_third_day = remaining_questions - ((remaining_questions / 2) - 5)\n    \n    # From the equation on the 2nd day, we solve for remaining_questions:\n    # 23 = remaining_questions - ((remaining_questions / 2) - 5)\n    # 23 = (remaining_questions / 2) + 5\n    # remaining_questions = 2 * (23 - 5)\n    remaining_questions_after_first_day = 2 * (remaining_questions_third_day - 5)\n\n    # Now we solve for total_questions\n    # remaining_questions_after_first_day = total_questions - ((total_questions / 2) + 7)\n    # total_questions = 2 * (remaining_questions_after_first_day + 7)\n    total_questions = 2 * (remaining_questions_after_first_day + 7)\n\n    return total_questions\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n  \n    roses_initial, daisies_initial, monthly_plants = symbols('roses_initial daisies_initial monthly_plants')\n    \n    # Equation 1: The total initial number of flowers is 300\n    equation1 = Eq(roses_initial + daisies_initial, 300)\n    \n    # Equation 2: In a few months, the number of roses will be 280\n    equation2 = Eq(roses_initial + monthly_plants, 280)\n    \n    # Equation 3: In the same few months, the number of daisies will be 180\n    equation3 = Eq(daisies_initial + monthly_plants, 180)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (roses_initial, daisies_initial, monthly_plants))\n    \n    return solutions[roses_initial]\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    ans = 221 * 8\n    return ans\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    ans = sum(1 for i in range(1, 251) if int(i**0.5)**2 == i)\n    return ans\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 60\n    total_correct = (20 / 100) * 10 + (80 / 100) * 20 + (90 / 100) * 30\n    overall_score_percentage = (total_correct / total_problems) * 100\n    return overall_score_percentage\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_diff = fifteenth_term - tenth_term\n    common_difference = term_diff / (15 - 10)  # Difference between terms / difference in term number\n\n    twelfth_term = tenth_term + 2 * common_difference  # We add the common_difference twice (for 11th and 12th terms)\n    \n    return int(twelfth_term)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    water, fruit = symbols('water fruit')\n    \n    # Two bottles of water and three bags of fruit cost a total of £2.55\n    equation1 = Eq(2 * water + 3 * fruit, 2.55)\n\n    # A bottle of water costs 15p more than a bag of fruit\n    equation2 = Eq(water, fruit + 0.15)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (water, fruit))\n\n    return solutions[fruit]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 4, 5, 7, 8]\n    max_num = 0\n\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num % 11 == 0:\n            max_num = max(max_num, num)\n\n    return max_num\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # The area covered by each 6 dm brick\n    area_per_6dm_brick = 6 ** 2 # dm^2\n\n    # The total area to be covered, which is the same in both cases\n    total_area = 80 * area_per_6dm_brick # dm^2\n\n    # The area covered by each 64 cm^2 brick\n    # Converting square decimeters to square centimeters: 1 dm^2 = 100 cm^2\n    area_per_64cm_brick = 64 / 100 # dm^2\n\n    # The number of 64 cm^2 bricks needed\n    num_bricks = total_area / area_per_64cm_brick\n\n    return int(num_bricks)\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    difference = 30\n\n    # Let number of boys be b and girls be g.\n    # We know that g = b + difference and g + b = total_pupils.\n    # Solving these two equations gives us:\n    boys = (total_pupils - difference) // 2\n    girls = boys + difference\n\n    return girls\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    n = 91\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False  # This means 91 is not a prime number\n    return True  # This means 91 is a prime number\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    total_students = 0\n    more_boys = 31\n    layer = 0\n\n    while True:\n        boys = (layer * 4 + 1) ** 2 - (layer * 4 - 1) ** 2\n        girls = (layer * 4 - 1) ** 2 - ((layer - 1) * 4 + 1) ** 2\n\n        if boys - girls == more_boys:\n            total_students = (layer * 4 + 1) ** 2\n            break\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    from math import log10\n\n    power_of_4 = 4 ** 2018\n    power_of_25 = 25 ** 2018\n\n    product = power_of_4 * power_of_25\n\n    num_of_digits = int(log10(product)) + 1\n\n    return num_of_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_A = 10  # The length of Ribbon A\n    length_B = 5 * length_A  # Ribbon B is five times as long as Ribbon A\n    total_length = length_A + length_B  # The total length of Ribbon A and B\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n    possible_teams = comb(total_players, team_size)\n    return possible_teams\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n    cost_price = selling_price / (1 + profit_percent / 100)\n\n    # In another scenario\n    actual_profit = 5000\n    new_selling_price = cost_price + actual_profit\n    new_profit_percent = (actual_profit / cost_price) * 100\n\n    return new_profit_percent\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 9):\n            for x3 in range(1, 9):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            x3 = 14 - (x1 + x2)\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2  # Danny and Emily themselves count as two people\n\n    total_people = people_in_front_of_emily + people_behind_danny + danny_and_emily\n    return total_people\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    # Let the total number of apples be x\n    # After selling 1/5 on Monday, he has 4/5x apples left\n    # After selling 80 apples on Tuesday, he has (4/5x - 80) apples left\n    # In the end, he is left with 30% of the apples, which is 0.3x\n    # So, we have the equation 4/5x - 80 = 0.3x\n    # To solve for x, we can rearrange and simplify the equation:\n    # 4/5x - 0.3x = 80\n    # (4/5 - 0.3)x = 80\n    # (0.8 - 0.3)x = 80\n    # 0.5x = 80\n    # x = 80 / 0.5\n    # x = 160\n    # Therefore, in the end, he has 30% of the apples he had at first:\n    # 0.3 * 160 = 48 apples\n\n    total_apples_initial = 80 / 0.5\n    total_apples_end = 0.3 * total_apples_initial\n\n    return int(total_apples_end)\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let the first even number be x\n    x = symbols('x')\n    \n    # Define the seven consecutive even numbers\n    first = x\n    second = x + 2\n    third = x + 4\n    fourth = x + 6\n    fifth = x + 8\n    sixth = x + 10\n    seventh = x + 12\n    \n    # Equation based on the condition:\n    # The fourth number is larger than one-third of the sum of the first and seventh numbers by 6\n    equation = Eq(fourth, (first + seventh) / 3 + 6)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Use the solution to find the sum of these seven numbers\n    sum_of_numbers = first + second + third + fourth + fifth + sixth + seventh\n\n    return sum_of_numbers.subs(x, solution[0])\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    number_of_pieces = 2\n    length_each_piece = total_length / number_of_pieces\n    return length_each_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = (1/5) * total_cookies\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = (3/4) * remainder_cookies\n\n    return afternoon_cookies\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km = 1.5\n    meters = km * 1000\n    return meters\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum_of_9_numbers = 9 * 140\n    total_sum_of_8_numbers = total_sum_of_9_numbers - 180\n    average_of_8_numbers = total_sum_of_8_numbers / 8\n    return average_of_8_numbers\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue = 80\n    red = 2 * blue\n    green = blue + 45\n    total_markers = red + blue + green\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n\n    # Trees on one side, including the first tree at the start\n    trees_on_one_side = (length_of_highway // distance_between_trees) + 1\n\n    # Since trees are planted on both sides, double the number\n    total_trees = trees_on_one_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd = 1\n    difference = 2\n    n = 20\n\n    # Now using the formula for the n-th term of an arithmetic sequence\n    # a_n = a_1 + (n - 1) * d\n    nth_odd = first_odd + (n - 1) * difference\n\n    return nth_odd\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    # Let's assume the number of white orchids is w.\n    # Then, the number of yellow orchids is 3w (since he has 3 times as many yellow orchids as white ones).\n    # The number of purple orchids is twice the number of yellow ones, which means 2 * 3w = 6w.\n\n    # According to the problem, there are 38 red and white orchids combined.\n    # And given that 28 orchids are red, the number of white orchids (w) is 38 - 28 = 10.\n\n    # Now that we have the number of white orchids, we can calculate yellow and purple:\n    w = 10\n    yellow = 3 * w\n    purple = 6 * w\n    red = 28  # Given in the problem\n\n    # Total number of orchids is the sum of purple, yellow, white, and red.\n    total_orchids = purple + yellow + w + red\n\n    return total_orchids\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    return 5 + 2\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    eddie_age_now = 8\n    mike_age_now = 48\n    age_difference = mike_age_now - eddie_age_now\n    eddie_age_future = 18\n    mike_age_future = eddie_age_future + age_difference\n    return mike_age_future\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_price = 15.99\n    amy_price = lily_price + 8.01\n    total_price = lily_price + amy_price\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    n_sides = 9\n    interior_angle = ((n_sides - 2) * 180) / n_sides\n    return interior_angle\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    # Let x be the initial number of rings in the box\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings  # Amber removed 5 times as many rings as Johnny\n    remaining_rings = 65\n\n    initial_rings = johnny_rings + amber_rings + remaining_rings\n\n    return initial_rings\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    total = 0\n    for i in range(1, 21):\n        total += int('5' * i)\n    return total % 10000\n\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 0.25\n    women_fraction = 1/5\n\n    men_count = total_people * men_percentage\n    women_count = total_people * women_fraction\n    children_count = total_people - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    # Let the number of checked shirts be x\n    # Then the number of white shirts is 7x\n    # The total number of shirts sold is 72\n    # Therefore, x + 7x = 72\n    # Solving for x gives us the number of checked shirts\n    # Then, multiplying x by 7 gives us the number of white shirts\n    \n    x = symbols('x')\n    equation = Eq(x + 7 * x, 72)\n    checked_shirts = solve(equation, x)[0]\n    white_shirts = 7 * checked_shirts\n    \n    return white_shirts\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    num = 0\n    while True:\n        if (num % 3 == 2) and (num % 4 == 3) and (num % 5 == 4):\n            return num\n        num += 1\n        if num >= 100:\n            break\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution(y, x):\n    man_days_per_wall = 2 * 3  # 2 men for 3 days\n    total_man_days = man_days_per_wall * x  # Total man-days to build x walls\n    days_per_man = total_man_days / y  # Days required for y men to build x walls\n    return days_per_man\n\nans = solution(6, 4)  # Example usage with 6 men and 4 walls"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    greatest_number = 0\n    # Iterate through 3-digit numbers\n    for i in range(100, 1000):\n        # Check if the number is odd, divisible by 9, and tens place is divisible by 4\n        if i % 2 != 0 and i % 9 == 0 and (i // 10) % 10 % 4 == 0:\n            greatest_number = max(greatest_number, i)\n    return greatest_number\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    series = [72, 60, 48, 36, 24, 12]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n\n    return final_value\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Define the pattern based on the given placeholder \"(insert pic)\", assumed numeric sequence\n    pattern = [1, 2, 3, 4, 5]  # Replace with the actual pattern from the image\n\n    # Perform necessary calculations to find the value of the pattern\n    # The current logic is placeholder logic; please replace it with actual logic\n    # derived from the pattern in the picture when provided.\n    ans = pattern[-1]  # Assuming the value of \"(insert pic)\" is the last element\n\n    # Return the calculated value\n    return ans\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # In the worst case, you might draw all balls of different colors until you get a pair\n    # So you draw all 8 white, then 7 red, and the next draw must be a repeat color\n    max_single_color_draws = 8  # Since 8 is the largest number of balls of the same color\n    total_other_colors = 7 + 5  # Total number of balls of the other colors\n\n    # Draw all from max single color + 1 more draw to ensure you get a pair,\n    # no matter what the previous draws were\n    min_draws = max_single_color_draws + total_other_colors + 1\n    \n    return min_draws\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    \n    total_children = 390\n\n    equation1 = Eq(girls / 3, boys / 2)\n    equation2 = Eq(girls + boys, total_children)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    number = solve_congruence(*congruences)\n\n    return number[0]\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    def S(n):\n        return sum(int(digit) for digit in str(n))\n\n    m = 1\n    while True:\n        if S(m) == 5 * S(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    number = (24 * 4) / 3\n    return int(number)\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_fruit_pick = 24 / 5\n    total_fruit_pick = daily_fruit_pick * 8.5\n    return total_fruit_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02\n    return k\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    jan_to_apr = 4 * 300\n    may_to_jul = 3 * 250\n    aug_to_sep = 750\n    oct_to_dec = 3 * 300\n    \n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    avg_per_month = total_spent / 12\n    \n    return avg_per_month\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    start_temp = 17\n    end_temp = -2\n    drop_in_temp = start_temp - end_temp\n    return drop_in_temp\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    # when Tom reaches his father's current age, the difference in their ages will remain constant\n    age_difference = father_future_age - tom_age\n    \n    # Father's current age is Tom's current age plus the age difference\n    father_current_age = tom_age + age_difference\n\n    return father_current_age\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"0735\", \"%H%M\")\n    train_journey = timedelta(hours=1, minutes=35)\n    walk_time = timedelta(minutes=40)\n\n    arrival_time = departure_time + train_journey + walk_time\n    return arrival_time.strftime(\"%H%M\")\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_fraction = 9 / 20\n    women_percentage = 30 / 100\n\n    men_count = total_passengers * men_fraction\n    women_count = total_passengers * women_percentage\n    children_count = total_passengers - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jordan, evie, emily, total_votes = symbols('jordan evie emily total_votes')\n\n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16  # pence\n    total_money_in_pence = 200  # £2 = 200p\n    num_bags = total_money_in_pence // price_per_bag\n    return num_bags\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    # Iterate through numbers less than 200\n    possible_values = []\n    for N in range(200):\n        # Convert N to base 4, 6, 8 and calculate sum of digits for each\n        sum_digits_base4 = sum(int(digit) for digit in format(N, 'b4'))\n        sum_digits_base6 = sum(int(digit) for digit in format(N, 'b6'))\n        sum_digits_base8 = sum(int(digit) for digit in format(N, 'o'))\n\n        # Check the conditions for the sum of the digits in different bases\n        if sum_digits_base4 == 5 and sum_digits_base6 == 8 and sum_digits_base8 == 9:\n            possible_values.append(N)\n\n    return possible_values\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_of_six_hotdogs = 1.10\n    number_of_hotdogs_to_buy = 12\n\n    cost_per_hotdog = cost_of_six_hotdogs / 6\n    total_cost = cost_per_hotdog * number_of_hotdogs_to_buy\n\n    return total_cost\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are 3 choices for the first digit (2, 3, 0 is not allowed as it would not be a three-digit number)\n    first_digit_choices = 2\n\n    # For the second and third digits, we can use 0, 2, or 3, so there are 3 choices for each\n    second_digit_choices = 3\n    third_digit_choices = 3\n\n    # The total number of different numbers is the product of the choices for each digit position\n    total_numbers = first_digit_choices * second_digit_choices * third_digit_choices\n\n    return total_numbers\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n\n    # The number of ways to arrange the books is given by the formula:\n    # Total arrangements = Total! / (Fiction! * Comic!)\n    ans = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n\n    return ans\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    # Let's assume Chip initially had C acorns and Dale had D acorns.\n    # After giving 14 acorns away, Chip would have C-14 and Dale would have D+14.\n    # They end up with the same amount, so C-14 = D+14.\n    # Together they had 124 acorns, so C + D = 124.\n    # Hence, C = D+28 (from the first equation).\n    # By substituting C in the second equation we get D+28 + D = 124.\n    # Simplifying it we get 2D + 28 = 124.\n    # Subtracting 28 from both sides we get 2D = 96.\n    # Dividing by 2 we get D = 48.\n    # Now we can find C: C = D + 28 = 48 + 28.\n    dale_acorns = (total_acorns - 28) / 2\n    chip_acorns = dale_acorns + 28\n    return chip_acorns\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for i in range(2, 100):\n        if i % 2 == 0 and i % 4 == 0 and i % 3 == 0 and (i ** 0.5) % 1 == 0:\n            return i\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))  # Generate a list of prime numbers less than 51\n    min_count = 51  # Start with an assumption that each prime number could be 1\n\n    for prime in primes[::-1]:  # Start from the largest prime\n        if 51 % prime == 0:\n            min_count = 51 // prime\n            break\n\n    return min_count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    num_trays = 4\n\n    total_eggs = eggs_per_tray * num_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 41)])\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    interest = principal * interest_rate\n    return interest\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for num in range(100, 1000):\n        if num // 24 == 36 and num % 24 == 0:\n            return num\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n\n    for three_page_penpals in range(total_penpals + 1):\n        four_page_penpals = total_penpals - three_page_penpals\n        if (3 * three_page_penpals) + (4 * four_page_penpals) == total_pages:\n            return three_page_penpals\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    return 7 - (-4)\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    initial_weight_kg = 2.5\n    apple_pie_weight_kg = 750 / 1000  # converting grams to kilograms\n    apple_juice_weight_kg = 1025 / 1000  # converting grams to kilograms\n\n    remaining_apples_kg = initial_weight_kg - (apple_pie_weight_kg + apple_juice_weight_kg)\n\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    # Number of people in front of Amy\n    people_in_front = 9\n    \n    # Amy's position from the back\n    position_from_back = 15\n\n    # People behind Amy = Amy's position from the back - 1\n    people_behind = position_from_back - 1\n    \n    # Total number of people = People in front of Amy + People behind Amy + Amy\n    total_people = people_in_front + people_behind + 1\n    \n    return total_people\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17  # cm\n    final_height = 65    # cm\n    time_period = 4      # weeks\n\n    growth_per_week = (final_height - initial_height) / time_period\n\n    return growth_per_week\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    favorite_book_position = 14\n    books_on_right = 6\n\n    total_books = favorite_book_position + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200  # since we are not given the actual dimensions, we assume volume is proportional to weight\n    new_volume = original_volume * (1/2) * (1/2) * (1/2)  # each dimension is halved, so the volume is reduced by 1/8\n    return new_volume\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # Worst case is that you might pick all balls of one color first, then all balls of the second color.\n    # After that, the next ball must be of the remaining color.\n    red_balls = 5\n    white_balls = 5\n    yellow_balls = 5\n    \n    # If we pick all red and all white balls first, that's 5 + 5.\n    # The next ball must be yellow, so that's 1 more ball.\n    ans = red_balls + white_balls + 1\n    return ans\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    x, y = symbols('x y')\n\n    # Two equations based on the problem statement\n    eq1 = Eq(x + y, 12.75)  # the sum of the lengths of the two pieces\n    eq2 = Eq(x, 2 * y)      # one piece is twice as long as the other\n\n    # Solve the system of equations\n    sol = solve((eq1, eq2), (x, y))\n\n    # Return the length of the longer piece\n    return sol[x]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n\n    ans = sum(1 for i in range(1, 21) if not isprime(i))\n    return ans\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    product = 694 * 27\n    return product\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 1 and sum(map(int, str(i))) == 11:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    time_to_boil_one_egg = 5\n    # Assuming that all 3 eggs can be boiled at the same time\n    ans = time_to_boil_one_egg\n    return ans\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "import math\n\ndef solution():\n    students = 35\n    cabin_capacity = 6\n    num_cabins = math.ceil(students / cabin_capacity)\n    return num_cabins\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    father_birth_year = 41 - 14  # The year when Brian was born\n    age_difference = 41 - 14     # The age difference between Brian and his father\n\n    # Loop to find the next age reversal\n    for i in range(1, 100):\n        brian_age = 14 + i  # Brian's age after i years\n        father_age = 41 + i  # Father's age after i years\n        # Check if the reverse of brian_age is father_age\n        if int(str(brian_age)[::-1]) == father_age and brian_age != 14:\n            return brian_age\n            break\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    gigi_before, lily_before, gigi_after, lily_after, coins_class = symbols('gigi_before lily_before gigi_after lily_after coins_class')\n\n    # Gigi had $120 coins before class\n    equation1 = Eq(gigi_before, 120)\n\n    # Lily had $24 coins before class\n    equation2 = Eq(lily_before, 24)\n\n    # Gigi and Lily got the same amount of coins in the class\n    equation3 = Eq(gigi_after, gigi_before + coins_class)\n    equation4 = Eq(lily_after, lily_before + coins_class)\n\n    # After class, the amount of coins Gigi has is three times the amount Lily has\n    equation5 = Eq(gigi_after, 3 * lily_after)\n\n    # solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (gigi_before, lily_before, gigi_after, lily_after, coins_class))\n\n    # return the number of coins they get in the class\n    return solutions[coins_class]\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough = 11.16  # in kilograms\n    cookie_weight = 45 / 1000  # converting grams to kilograms\n    brownie_weight = 150 / 1000  # converting grams to kilograms\n    total_cookie_weight = 240 * cookie_weight\n    total_brownie_weight = 2 * brownie_weight\n    dough_used = total_cookie_weight + total_brownie_weight\n    dough_left = total_dough - dough_used\n    return round(dough_left, 2)\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    \n    # Dan wants to intake less today, so the calories for today (let's denote it as 'c') should be less than yesterday's\n    # c < calories_yesterday\n    # However, since we are writing this in Python and it needs to be an expression that can be returned,\n    # we need to somehow represent this inequality in a way that we can use in code.\n    \n    # If we had to compute something with this inequality, we might approach it differently,\n    # but since it's just a representation of the inequality, we'll return a string representation \n    # which shows the inequality that Dan is aiming for\n    \n    return \"c < {}\".format(calories_yesterday)\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits_end = 10\n\n    # Inverse operation for the second day\n    biscuits_before_second_day = (remaining_biscuits_end + 2) * 2\n    \n    # Inverse operation for the first day\n    total_biscuits = (biscuits_before_second_day + 4) * 2\n\n    return total_biscuits\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n    wine_gums_per_child = total_wine_gums // children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    total_days = 15\n    bob_money = 100\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:  # Deposit days (odd days)\n            bob_money += 5\n        else:  # Spending days (even days)\n            bob_money -= 8\n    return bob_money\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern_length = 5  # The repeating pattern length 70, 71, 72, 71, 70\n    pattern = [70, 71, 72, 71, 70]\n\n    # The 1004th number position in the pattern\n    position = (1004 - 1) % pattern_length\n\n    # Finds the number at the given position in the pattern\n    ans = pattern[position]\n\n    return ans\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = num_terms * (first_term + last_term) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = (4362 + 3239) - (2468 + 357)\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolates, friends = symbols('chocolates friends')\n    \n    # Equation 1: chocolates - 18*friends = 41\n    equation1 = Eq(chocolates - 18*friends, 41)\n    \n    # Equation 2: chocolates - 23*friends = -34\n    equation2 = Eq(chocolates - 23*friends, -34)\n\n    # Solve equations to find the number of chocolates and friends\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    # Use the solutions to find the remaining chocolates when she gives each friend 20 pieces\n    remaining = solutions[chocolates] - 20*solutions[friends]\n\n    return remaining\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    # Calculate the sum of an arithmetic sequence using the formula:\n    # Sum = n/2 * (first_term + last_term)\n    \n    # Given data\n    sum_first_4 = 124\n    sum_last_4 = 156\n    total_sum = 210\n\n    # There are 2 sets of 4 numbers (first 4 and last 4)\n    # Let n be the total number of elements in sequence\n    # total_sum = n/2 * (first_term + last_term)\n    # since sum_first_4 is the sum of first 4 and sum_last_4 is the sum of last 4\n    # we have two equations as below:\n    # 2*sum_first_4 = 4 * (first_term + first_term + 3d)\n    # 2*sum_last_4 = 4 * (last_term - 3d + last_term)\n    # where d is the common difference\n    # also,\n    # total_sum = n/2 * (first_term + last_term)\n\n    # Simplifies to\n    # sum_first_4 = 4/2 * (2*first_term + 3d)\n    # sum_last_4 = 4/2 * (2*last_term - 3d)\n    \n    # From total_sum equation, we can express last_term in terms of first_term and total number of elements (n)\n    # total_sum = n/2 * (first_term + first_term + (n-1)d)\n    # => total_sum = n/2 * (2*first_term + (n-1)d)\n    # => 2*total_sum/n = 2*first_term + (n-1)d\n    # => last_term = first_term + (n-1)d\n    # => last_term = (2*total_sum/n - 2*first_term) / (n-1)\n\n    # Now we have two expressions for sum_first_4 and sum_last_4, and one expression involving total_sum and n\n    # Let's solve for n by substituting what we know\n    # sum_first_4 + sum_last_4 = total_sum\n    # 4/2 * (2*first_term + 3d) + 4/2 * (2*last_term - 3d) = total_sum\n    # 2*first_term + 2*last_term = total_sum / 2\n    # But 2*first_term + 2*last_term = 2*(first_term + last_term)\n    # So (first_term + last_term) = total_sum / 4\n    # And from the total_sum equation,\n    # (n/2) * (first_term + last_term) = total_sum\n    # Substitute (first_term + last_term) from the above and solve for n\n    # n/2 * (total_sum / 4) = total_sum\n    # n/2 = 4\n    # n = 8\n    \n    # We know the number of numbers in the sequence is twice the amount used in the sums (since we are given the sums of 4 numbers two times)\n    return 8\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    from itertools import combinations\n\n    # Define the set of all 3-digit numbers\n    three_digit_numbers = range(100, 1000)\n\n    # Define the statements\n    def is_multiple_of_27(x): return x % 27 == 0\n    def is_multiple_of_7(x): return x % 7 == 0\n    def digits_sum_17(x): return sum(int(digit) for digit in str(x)) == 17\n    def is_perfect_square(x): return int(x ** 0.5) ** 2 == x\n    def is_factor_of_89100(x): return 89100 % x == 0\n\n    # Loop through each number and check the statements\n    for number in three_digit_numbers:\n        statements = [\n            is_multiple_of_27(number), \n            is_multiple_of_7(number),\n            digits_sum_17(number),\n            is_perfect_square(number),\n            is_factor_of_89100(number)\n        ]\n        \n        # Check all combinations of three statements\n        for combo in combinations(statements, 3):\n            if sum(combo) == 3 and sum(statements) == 3:  # Exactly 3 statements are true\n                return number\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    total_money = 200\n    spent_on_book = total_money * 0.15\n    money_left_after_book = total_money - spent_on_book\n    spent_on_dvd = money_left_after_book * 0.30\n    money_left = money_left_after_book - spent_on_dvd\n    return money_left\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    ans = 5992 / 7\n    return ans\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    teams = 32\n    games_already_played = 30\n\n    total_games = (teams - 1)  # Total number of games required to complete the tournament in knockout format\n    games_remaining = total_games - games_already_played\n\n    return games_remaining\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown_up = 22\n    balloons_burst = 3\n\n    balloons_still_needed = total_balloons_needed - (balloons_blown_up - balloons_burst)\n\n    return balloons_still_needed\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    return (15 + 37) / 2\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Let m represent the number of push-ups Mulan can do.\n    # According to the problem, Mulan can beat the best boy soldier who can do 50 push-ups.\n    # Therefore, the inequality to represent how many push-ups Mulan can do should be:\n    # m > 50\n    \n    # However, because this problem is solved through an inequality rather than a numeric answer,\n    # and given the conditions and the way the function should return the final result,\n    # we return True to represent that there are indeed more push-ups that Mulan can do compared to 50.\n    m = symbols('m')\n    inequality = m > 50\n\n    # We return the inequality as it is, since evaluating it does not make sense without additional info.\n    # However, in order to stick to the requested format, we return an un-evaluated symbolic expression.\n    return inequality\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    volume_per_pail = 4\n    number_of_pails = 4\n    water_left = 7\n\n    original_volume = (volume_per_pail * number_of_pails) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Tom took 4 stones from Stack B, so now Stack A has 20 stones and Stack B has 16 stones.\n    # To win, Jerry should aim to leave the stacks in a state where the number of stones in them is even.\n    # By doing so, whatever Tom does next, Jerry can mirror the move on the other stack and keep them even until the last stone.\n    # Stack A = 20, Stack B = 16 (after Tom's move)\n    # Jerry should take 4 stones from Stack A to make Stack A = 16, leaving both stacks even.\n    # Answer: Jerry must take 4 stones from Stack A.\n\n    stones_taken = 4\n    stack_taken_from = \"A\"\n\n    return stones_taken, stack_taken_from\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # To ensure each of the 8 children gets at least one piece\n    # and no two children get the same number of pieces, we\n    # distribute the candies in an increasing manner starting\n    # with 1 candy for the first child, 2 for the second, and so on.\n    min_candies = sum(range(1, 9))  # sum of 1, 2, ..., 8\n    \n    # We have already given out min_candies, so we subtract\n    # this from the total candies to see what remains for distribution.\n    remaining_candies = 88 - min_candies\n    \n    # We distribute the remaining candies to each child starting from the one\n    # who got the fewest initially, ensuring the most candies any child gets\n    # is minimized. This is an iterative process as we want the extreme case\n    # where the last child gets the least possible amount for the max.\n    # The least number for the child can be obtained by continuously adding\n    # 7 to the largest number (as each increment is spread across all 7 other children),\n    # until we run out of candies.\n    child_max_candies = 8\n    while remaining_candies >= 8:\n        remaining_candies -= 8\n        child_max_candies += 1\n\n    return child_max_candies\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Ratio of girls to boys is 7:9\n    ratio_girls = 7\n    ratio_boys = 9\n    \n    # There are 16 more boys than girls\n    difference = 16\n    \n    # Calculate the number of girls and boys\n    number_of_boys = (ratio_boys * difference) / (ratio_boys - ratio_girls)\n    number_of_girls = number_of_boys - difference\n    \n    # Calculate total number of pupils\n    total_pupils = number_of_boys + number_of_girls\n    \n    return int(total_pupils)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    # Suppose no one made a mistake\n    expected_sum = 37 / 2 * (1 + (1 + 3 * (37 - 1)))\n    \n    # Calculate the difference\n    mistake_difference = expected_sum - 2011\n\n    # Since the error is subtracting instead of adding, we have made a mistake with twice the normal step\n    # Mathematically: (mistake_number + 3) - (mistake_number - 3)\n    # Actual error: mistake_number - 3 - mistake_number = -3\n    # Error difference: 6, but we take into account that the sequence in which the mistake occurs also displaces by 3\n    # Error position: mistake_difference / 6\n    mistake_position = int(mistake_difference / 6)\n\n    return mistake_position\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds_digit in range(1, 10):\n        for ones_digit in range(10):\n            M = hundreds_digit * 100 + ones_digit\n            S = hundreds_digit + ones_digit\n            if M == 67 * S:\n                reverse_M = ones_digit * 100 + hundreds_digit\n                ans = reverse_M // S\n                return ans\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Since there is a sequence of 5 consecutive numbers, we can let the middle term represent the average,\n    # this way each term is equally distant from the average.\n    # If n is the middle term, then the five terms are (n-2), (n-1), n, (n+1), (n+2)\n    # The sum of these terms gives us 5n, which is equal to the total sum of 160\n    total_sum = 160\n    num_students = 5\n\n    # Calculate the average number of balls\n    average = total_sum // num_students\n\n    # The student with the most balls will have the average number plus 2\n    most_balls = average + 2\n\n    return most_balls\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # 2 metres converted to centimetres\n    piece_length_cm = 6     # each piece is 6 cm\n\n    number_of_pieces = stick_length_cm // piece_length_cm\n\n    return number_of_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "def solution():\n    from math import comb\n\n    total_balls = 10\n    selected_balls = 7\n\n    ans = comb(total_balls, selected_balls)\n\n    return ans\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    average_per_day = 40\n\n    days_needed = total_pages / average_per_day\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    # Rearrange fraction 13/10 as a continued fraction\n    # 13/10 = 1 + (3/10) = 1 + 1/((10/3))\n    # 10/3 = 3 + (1/3) = 3 + 1/3\n    # Thus a = 3, b = 3, c = 3 (1/3 can be written as 1/1/3)\n    a = 3\n    b = 3\n    c = 3\n\n    # Calculate a + 2*b + 3*c\n    result = a + 2*b + 3*c\n\n    return result\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # The pattern of the ones digit of 8 raised to a power:\n    # 8^1 = 8 -> ones digit is 8\n    # 8^2 = 64 -> ones digit is 4\n    # 8^3 = 512 -> ones digit is 2\n    # 8^4 = 4096 -> ones digit is 6\n    # 8^5 = 32768 -> ones digit is 8, and the pattern repeats every 4 powers.\n    \n    powers_of_8_ones_digit = [8, 4, 2, 6]\n    index = 30 % 4  # To find the index in the pattern, we use modulo by the length of the pattern\n    \n    if index == 0:  # If the remainder is 0, it means we're at the last number in the pattern before it repeats\n        ones_digit = powers_of_8_ones_digit[-1]\n    else:\n        ones_digit = powers_of_8_ones_digit[index - 1]  # Else we take the previous one because index is 1-based\n    \n    return ones_digit\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 0\n    total_peaches = 100\n    while total_peaches >= days:\n        days += 1\n        total_peaches -= days\n    return days\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_seq\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    # let's denote the number of correct answers as c and incorrect ones as i\n\n    # Since Justin answers all questions, we have c + i = 20\n\n    # For each correct answer 5 points are awarded and for each incorrect answer 3 points are deducted so 5c - 3i = 52\n\n    # We can then solve this system of equations\n    # (i = 20 - c)\n    # 5c - 3(20-c) = 52\n\n    # Simplifying the second equation gives us:\n    # 5c - 60 + 3c = 52\n    # 8c - 60 = 52\n    # 8c = 112\n    # c = 14\n\n    correct_answers = 14  # This is the number of correct answers Justin gave\n    return correct_answers\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    sum_of_numbers = sum(number for number in range(1, 21) if number % 6 == 1)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(girls + boys, 100)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600  # Total weight of the sugar solution\n    sugar_concentration = 0.48  # Sugar concentration in the solution (48%)\n    \n    sugar_weight = total_weight * sugar_concentration  # Weight of the sugar in the solution\n    water_weight = total_weight - sugar_weight  # Weight of the water (remainder)\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    # 0.3 times 100 gives 30\n    left_side = 0.3 * 100\n    \n    # We need to find the divisor that makes the division equal to the left side\n    # We know that 150 divided by that number should give 30\n    # We can use algebra to solve: 150 / x = 30\n    # Multiplying both sides by x gives: 150 = 30 * x\n    # Dividing both sides by 30 gives: x = 150 / 30\n    # Now we calculate x\n    ans = 150 / left_side\n    \n    return ans\n    \nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    times = 9\n    addend = 5\n    ans = sum([addend] * times)\n    return ans\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(0, 5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Let's find the median of the youngest three\n    median_age_of_youngest_three = 42 // 3\n\n    # Age of the eldest dwarf\n    eldest_dwarf_age = median_age_of_youngest_three + 3 * 2\n\n    # Ages of the oldest three\n    age_oldest_three_dwarfs = eldest_dwarf_age + (eldest_dwarf_age - 1) + (eldest_dwarf_age - 2)\n\n    return age_oldest_three_dwarfs\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if 1000*a + 100*b + 10*c + d + 100*a + 10*b + c + a == 1370:\n                        return 1000*a + 100*b + 10*c + d\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    # Calculate five eighths of 408 pence\n    ans = (5 / 8) * 408\n    return ans\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    numbers = [19, 199, 1999, 19999, 199999]\n    fraction_sum = 4 / 5 * len(numbers)\n    whole_number_sum = sum(numbers)\n    total_sum = whole_number_sum + fraction_sum\n    return total_sum\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    total_current_age = janice_age + sister_age\n    years_to_reach_35 = (35 - total_current_age)\n\n    return years_to_reach_35\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 3 * 75\n    marks_in_two_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_in_two_tests\n    \n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 0\n\n    for i in range(1, 9):\n        for j in range(1, i+1):\n            ans += j / i\n        for j in range(i-1, 0, -1):\n            ans += j / i\n    \n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))  \n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sweets, milk_chocolates = symbols('total_sweets milk_chocolates')\n\n    # Eddie bought 6 fruit drops which was 2/7 of the number of milk chocolates\n    eq1 = Eq(6, (2/7) * milk_chocolates)\n\n    # the number of milk chocolates was 3/4 of the total number of sweets he bought\n    eq2 = Eq(milk_chocolates, (3/4) * total_sweets)\n\n    # solve the equations\n    solutions = solve((eq1, eq2), (total_sweets, milk_chocolates))\n\n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of one volleyball as 'v' and one football as 'f'.\n    f, v = symbols('f v')\n\n    # First scenario: 1 football and 2 volleyballs cost $60.\n    equation1 = Eq(f + 2*v, 60)\n\n    # Second scenario: 2 footballs cost $60 - $16 (returned).\n    equation2 = Eq(2*f, 60 - 16)\n\n    # Solve the equations.\n    solutions = solve((equation1, equation2), (f, v))\n\n    # solution for one volleyball\n    return solutions[v]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the ages of the students\n    a, b, c, d, e = symbols('a b c d e', integer=True)\n    \n    # Create equations based on the given averages and range\n    mean_eq = Eq((a + b + c + d + e) / 5, 9)\n    median_eq = Eq(c, 8)\n    mode_eq = Eq(a, 7)\n    range_eq = Eq(e - a, 6)\n\n    # Find all possible ordered sets of ages\n    ages = solve((mean_eq, median_eq, mode_eq, range_eq), (a, b, c, d, e))\n    \n    # There could be multiple solutions, so we filter valid combinations:\n    valid_ages = [age_set for age_set in ages if age_set[a] <= age_set[b] <= age_set[c] <= age_set[d] <= age_set[e]]\n    \n    # Since the ages must be valid positive integers, make sure no age is below 1\n    valid_ages = [age_set for age_set in valid_ages if all(age > 0 for age in age_set)]\n\n    # Return the age of the second oldest student\n    return valid_ages[0][d]\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    return 1000 - 630\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    return 57 + 8\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n    # There are 3 books to be arranged, thus 3! ways to arrange them\n    num_arrangements = factorial(3)\n    return num_arrangements\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_numbers = n * (n + 1) // 2\n    sum_of_cubes = sum_of_numbers ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    series_sum = (num_terms * (first_term + last_term)) // 2\n    return series_sum\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    ans = math.ceil(math.log(num_people, 2))\n    return ans\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # From the first question, we get two digits that are correct and in the correct places.\n    # We'll represent this information as follows (where 'x' denotes an unknown digit):\n    # John's Number: x x x x\n    # Peter's Guess: 1 7 0 3\n    # Matching Info: x x 0 3\n\n    # From the second question, we have two correct digits, but their positions are all wrong.\n    # So, looking at the second number, all of the digits must be different from John's corresponding digit.\n    # John's Number: x x 0 3\n    # Peter's Guess: 2 7 4 5\n    # Matching Info: x x 0 3 (none of 2, 7, 4, 5 can take the position they are in now)\n\n    # Lastly, the third guess gives us all the correct digits but in the wrong places.\n    # Using this information, we know that John's number contains 3, 5, 4, and 1, but not in the positions shown.\n    # John's Number: x x 0 3 \n    # Peter's Guess: 3 5 4 1\n    # Correct Digits: 3, 5, 4, 1 (but none of them are in the right place in Peter's guess)\n\n    # The correct third place is already given from the first guess, and it's 0.\n    # Now considering the third guess, 3 and 1 cannot be the first number because they are in the first and last positions in the third guess \n    # and the correct number cannot have any digit in the position from the third guess. \n    # This means 4 or 5 must be the first number. But 4 cannot be in the third position, so 5 must be the first number of the correct number.\n    # Likewise, 1 cannot be in the last position, so 1 must be the second number.\n\n    # Now we have: 5 1 0 x\n    # From the third guess and knowing 5 and 1 are in the first and second positions of the correct number respectively, 3 or 4 must be in the last position.\n    # Since 3 cannot be in the fourth position from the first guess, 4 must be the last digit.\n    \n    # Now we have: 5 1 0 4\n    # All positions are filled and all digits are accounted for. Confirming with previous clues, this configuration satisfies all conditions.\n    \n    ans = '5104'\n    return ans\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "from math import factorial\n\ndef solution():\n    # A can only be in positions 2, 3, or 4.\n    # A has 3 choices for his position.\n    \n    # After placing A, there are 4 positions left to place B, C, D, and E\n    # which can be done in 4! (factorial 4) ways.\n    \n    num_ways_A = 3  # Choices for A's position\n    num_ways_rest = factorial(4)  # Ways to arrange B, C, D, and E\n\n    total_ways = num_ways_A * num_ways_rest\n    \n    return total_ways\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Let the number of yellow flowers be y\n    # Given, the number of red flowers is 3 times that of yellow flowers\n    # Therefore, the number of red flowers is 3y\n    # Also, the number of pink flowers is y - 7\n    # Given that the number of pink flowers is 3, we can set up the equation\n    # y - 7 = 3\n    \n    # Solving for y, the number of yellow flowers\n    y = 3 + 7\n    \n    # Now we need to find red flowers which is 3 times yellow flowers\n    red_flowers = 3 * y\n    \n    # The total number of red and yellow flowers is sum of red and yellow flowers\n    total_flowers = red_flowers + y\n\n    return total_flowers\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay = timedelta(minutes=30)\n    arrival_time = scheduled_time + delay\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    original_ratio = Eq(apples / oranges, 3 / 8)\n    new_ratio = Eq((apples - 1) / oranges, 1 / 3)\n\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit goes from 1 to 9\n        for tens in range(0, 10):  # Tens digit goes from 0 to 9\n            for ones in range(1, 10):  # Ones digit goes from 1 to 9\n                if hundreds > tens and ones > tens:  # Check for 'high-low-high' condition\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')  # boys = number of boys in the morning; girls = number of girls in the morning\n\n    # The number of boys was 50% more than the number of girls\n    morning_equation = Eq(boys, 1.5 * girls)\n\n    # After 12 boys and 12 girls joined, the ratio became 19:14\n    afternoon_equation = Eq((boys + 12) / (girls + 12), 19 / 14)\n\n    # Solve the system of equations\n    solutions = solve((morning_equation, afternoon_equation), (boys, girls))\n\n    # Total number of children in the afternoon\n    total_children = solutions[boys] + 12 + solutions[girls] + 12\n\n    return total_children\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    \n    return derangement(6)\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    first_floor_rows = 9\n    seats_per_row = 36\n    students_total = 500\n\n    first_floor_capacity = first_floor_rows * seats_per_row\n    second_floor_students = students_total - first_floor_capacity\n\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    previous_term = 56\n    common_ratio = 2\n    next_term = previous_term * common_ratio\n\n    return next_term\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    pencils = 0\n    notebooks = 10\n    while 3 * notebooks + 9 * pencils <= 48:\n        if 3 * notebooks + pencils * 9 == 48:\n            return pencils\n        pencils += 1\n        notebooks -= 1\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    return 385 // 7\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the first number in the sequence be x.\n    # Then the six consecutive even numbers are x, x+2, x+4, x+6, x+8, x+10\n    # Sum of these six numbers is 6x + (2+4+6+8+10) which is equal to 510\n    \n    # Calculate x from the equation\n    # 6x + 30 = 510\n    x = (510 - 30) // 6\n    \n    # Find the 3rd and 4th terms (middle terms) for median\n    median = (x + 4 + x + 6) / 2\n    \n    # The mean is the sum (510) divided by the number of terms (6)\n    mean = 510 / 6\n    \n    # Difference between the mean and median is simply\n    ans = mean - median\n\n    return ans\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    n = 50\n    count_twos = 0\n    count_fives = 0\n\n    for i in range(2, n + 1):\n        while i % 2 == 0:\n            count_twos += 1\n            i = i // 2\n        while i % 5 == 0:\n            count_fives += 1\n            i = i // 5\n    \n    return min(count_twos, count_fives)\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    sum_total = 0\n    is_addition = True\n    for i in range(1, 32):\n        if is_addition:\n            sum_total += i\n            is_addition = False\n        else:\n            sum_total -= i\n            is_addition = True\n    return sum_total\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    card_A = 40\n    card_B = card_A / 2\n    card_C = card_B / 2\n    total_value = card_A + card_B + card_C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    concentration = 0.65\n\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    # Symbols for the number of cards Helen and Oliver currently have\n    helen_current, oliver_current = symbols('helen_current oliver_current')\n\n    # The initial number of cards\n    helen_initial = 18\n    oliver_initial = 22\n    \n    # Equation representing the current cards Helen has after some rounds\n    equation1 = Eq(helen_current, helen_initial - oliver_current + oliver_initial)\n    # Equation representing Helen having 10 more cards than Oliver now\n    equation2 = Eq(helen_current, oliver_current + 10)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (helen_current, oliver_current))\n\n    return solutions[helen_current]\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    climb_up_first = 23\n    climb_down = 31\n    climb_up_second = 17\n\n    final_height = initial_height + climb_up_first - climb_down + climb_up_second\n\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    base = 5\n    exponent = 100\n    \n    number = base ** exponent  # Calculate 5^100\n    num_digits = len(str(number))  # Find the number of digits\n    \n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n    equation1 = Eq(mangoes, strawberries + 448)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    composite_numbers = total_numbers - prime_numbers - 1  # Subtract 1 to exclude the number 1, which is neither prime nor composite\n\n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # If n is the smallest number, the five numbers are n, n+1, n+2, n+3, n+4\n    # Their sum is n + (n+1) + (n+2) + (n+3) + (n+4) = 40\n    # Simplifying, we get 5n + 10 = 40\n    # Solving for n, we subtract 10 from both sides and then divide by 5\n    smallest_number = (40 - 10) / 5\n    return int(smallest_number)\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    initial_sweets = 33\n    sweets_given_away = 8\n    sweets_left = initial_sweets - sweets_given_away\n    return sweets_left\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '3', '5', '2']\n    largest_number = int(''.join(sorted(digits, reverse=True)))\n    return largest_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4000404\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    # Index of the fourth term in the sequence\n    n4 = 4\n    # Value of the fourth term\n    a4 = 39\n    # Index of the twelfth term in the sequence\n    n12 = 12\n    # Value of the twelfth term\n    a12 = 57\n\n    # Calculate the common difference of the arithmetic sequence\n    difference = (a12 - a4) / (n12 - n4)\n\n    # Calculate the first term of the arithmetic sequence\n    first_term = a4 - (n4 - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    digits = [0, 1, 3, 4, 6, 8, 9]\n    five_digit_multiples_of_9 = []\n\n    # Create all possible 5-digit numbers from the given digits\n    for a in digits:\n        for b in digits:\n            for c in digits:\n                for d in digits:\n                    for e in digits:\n                        if a != b and a != c and a != d and a != e and b != c and b != d and b != e and c != d and c != e and d != e:\n                            number = a * 10000 + b * 1000 + c * 100 + d * 10 + e\n                            if number >= 10000 and number % 9 == 0:\n                                five_digit_multiples_of_9.append(number)\n\n    # Sort the numbers to get the largest and smallest\n    five_digit_multiples_of_9.sort()\n\n    M = five_digit_multiples_of_9[-1]  # The largest multiple of 9\n    N = five_digit_multiples_of_9[0]   # The smallest multiple of 9\n\n    difference_divided_by_9 = (M - N) // 9\n\n    return difference_divided_by_9\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n\n    difference_in_addends = incorrect_addend - correct_addend\n    correct_sum = incorrect_sum - difference_in_addends\n\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    for i in range(1, 380):\n        if i * i + i == 380:\n            return i\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    salt_30g = 30 * 0.30\n    salt_20g = 20 * 0.20\n    total_salt = salt_30g + salt_20g\n    target_concentration = 0.10\n    \n    # Total weight of the new solution = salt / target_concentration\n    total_new_weight = total_salt / target_concentration\n    # The weight of the water to be added = total weight of the new solution - initial total weight\n    water_to_add = total_new_weight - (30 + 20)\n\n    return water_to_add\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "from sympy import primerange\n\ndef solution():\n    prime_numbers = list(primerange(1, 21))\n    total_numbers = 20\n    prime_proportion = len(prime_numbers) / total_numbers\n\n    return round(prime_proportion, 2)\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # m/min\n    vicky_speed = 250  # m/min\n    race_distance = 3000  # m\n\n    time_for_johnson = race_distance / johnson_speed\n    time_for_vicky = race_distance / vicky_speed\n    \n    time_difference = time_for_vicky - time_for_johnson\n\n    return time_difference\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # With 52 cards, each number has 4 patterns.\n    # To ensure that at least 3 cards have the same number,\n    # we may have to draw all cards of the other numbers, which is 2 cards from each number.\n    # There are 13 different numbers, so we might draw 2 cards from each number.\n    max_cards_with_no_triples = 13 * 2\n    \n    # After that point, the next card we draw must result in at least 3 cards with the same number.\n    # This is based on the Pigeonhole Principle.\n    needed_draws = max_cards_with_no_triples + 1  # +1 for the next card ensuring three of the same number\n\n    return needed_draws\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    num1 = 3.2\n    num2 = 5.6\n    avg = (num1 + num2) / 2\n    return avg\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    first_sum = 1275\n    sum_difference = 51 - 1\n    ans = first_sum + sum_difference\n    return ans\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_known_sum = sum(known_numbers)\n    mean_value = 8\n    total_numbers = 8\n    \n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - total_known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n    \n    combinations = len(notebook_prices) * len(calendar_prices)\n    \n    return combinations\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume of lime solution transferred from each container in litres\n    x = symbols('x')\n\n    # After transferring x litres:\n    # Bottle A will have (5 - x) litres with 10% lime and x litres with 20% lime from Bottle B\n    # Bottle B will have (3 - x) litres with 20% lime and x litres with 10% lime from Bottle A\n\n    # The concentration will be same in both bottles after the transfer,\n    # so the equation for the concentration in both bottles is:\n\n    concentration_A = Eq(0.1 * (5 - x) + 0.2 * x,  (x * 0.1 + (3 - x) * 0.2) / 3)\n    # Solving the equation for x yields the volume of lime solution transferred from each container\n    solution_x = solve(concentration_A, x)\n\n    return solution_x[0]\n\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n    for perm in permutations(students):\n        if perm.index('C') > perm.index('A') and perm.index('C') < perm.index('B') or \\\n           perm.index('C') < perm.index('A') and perm.index('C') > perm.index('B'):\n            if abs(perm.index('D') - perm.index('E')) == 1 and \\\n               abs(perm.index('F') - perm.index('G')) == 1:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # We are trying to ensure that we get 29, 28 and 10 balls of each color.\n    # If we pick one less from each amount, there is no guarantee we have the required distribution.\n    # If we pick just 28 blues, 27 reds, and 9 whites, we may not achieve the requirement.\n    # So, we have to pick 29 blues, 28 reds, and 10 whites at the very least to ensure we meet the requirement.\n    # But picking 29 from the largest group does not guarantee 28 from the second group, nor 10 from the smallest.\n    # Thus we need to pick 1 extra from each of the other colors to ensure the count.\n    # Since the worst-case scenario is not getting any white ball until we have all red and blue balls,\n    # we also need 1 more to guarantee the 10 white balls. \n\n    # Following the pigeonhole principle:\n    # To ensure 29 balls of one color, we pick all balls except 28 of the other two colors (40 red + 30 white - 28 - 28)\n    # To ensure 28 balls of another color, we do the same (80 blue + 30 white - 28 - 28)\n    # To ensure 10 balls of the last color, we do the same (80 blue + 40 red - 28 - 28)\n    # Lastly, we add one more pick because after picking 80 + 40 - 28 - 28, we could still be missing a white ball.\n\n    blue = 80\n    red = 40\n    white = 30\n\n    # Number of balls to ensure 29 of one color\n    balls_for_29 = blue + red - (28 + 28)\n\n    # Number of balls to ensure 28 of another color\n    balls_for_28 = blue + white - (28 + 28)\n\n    # Number of balls to ensure 10 of the last color\n    balls_for_10 = red + white - (28 + 28)\n\n    # Minimum balls needed is balls required for 29 of first color + 1 ball to ensure 28 of second color + 1\n    # ball to ensure 10 of third color.\n    total_balls = balls_for_29 + 1 + 1\n\n    return total_balls\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5  # Sum of all coins\n\n    for lost_coin in [50, 20, 10, 5]:\n        if (total_amount - lost_coin) == 2 * (total_amount // 2 - lost_coin // 2):\n            return lost_coin\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    # Initialize the sum and the number to be added in each step\n    total_sum = 0\n    number = 123\n\n    # Loop through 123 times to sum up all numbers\n    for _ in range(123):\n        total_sum += number\n        # Append digit '1' to the right of number '123' for the next sum\n        number = number * 10 + 1\n        \n    # Extract the hundreds digit by using floor division and modulo operations\n    hundreds_digit = (total_sum // 100) % 10\n    return hundreds_digit\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    original_length = 90\n    new_length = original_length - 70.5\n    length_ratio = 5\n    breadth_ratio = 2\n    \n    original_breadth = (breadth_ratio / length_ratio) * original_length\n    new_breadth = (breadth_ratio / length_ratio) * new_length\n    \n    # Round down to account for the maximum size in whole blocks\n    max_breadth = int(new_breadth)\n\n    return max_breadth\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_cost = 5.50\n    milk_cost = 3.75\n    voucher_value = 1.10\n\n    total_cost = cake_cost + milk_cost\n    actual_payment = total_cost - voucher_value\n\n    return actual_payment\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_pay_rate = 12\n    hours_worked = 10\n    overtime_rate_multiplier = 1 + 1/4\n    normal_hours = 8\n    \n    # Calculate normal pay for the first 8 hours\n    normal_pay = normal_hours * normal_pay_rate\n    \n    # Calculate overtime pay\n    overtime_hours = hours_worked - normal_hours\n    overtime_pay = overtime_hours * normal_pay_rate * overtime_rate_multiplier\n    \n    # Total pay is the sum of normal and overtime pay\n    total_pay = normal_pay + overtime_pay\n    \n    return total_pay\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan's finishing distance in meters\n    jaan_speed = 8       # Jaan's speed in meters per second\n    kane_distance = jaan_distance - 12.5  # Kane's finishing distance when Jaan finishes\n    \n    # We know that speed = distance/time, so we can calculate the time taken for Jaan to finish\n    jaan_time = jaan_distance / jaan_speed  # Time taken by Jaan to finish the race\n    \n    # Kane's speed = Kane's distance / Time (which is same as Jaan's time since they started at the same time)\n    kane_speed = kane_distance / jaan_time  # Kane's speed\n    \n    return kane_speed\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    percentage = 35\n    total = 60\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the individual rates of John, Raj, and Pete as J, R, and P respectively\n    J, R, P = symbols('J R P')\n\n    # They can together finish the job in an hour, so their combined rate is 1 job per hour\n    eq1 = Eq(J + R + P, 1)\n\n    # John and Raj can finish the job in 1 hr 12 min (72 minutes) => 5/6 of a job per hour\n    eq2 = Eq(J + R, 5 / 6)\n\n    # Raj and Pete can finish the job in 1 hr 30 min (90 minutes) => 2/3 of a job per hour\n    eq3 = Eq(R + P, 2 / 3)\n\n    # Now we solve the equations to find R, which is Raj's rate of work per hour\n    solutions = solve((eq1, eq2, eq3), (J, R, P))\n    \n    # Raj's time to finish the job is the inverse of his work rate (R). We multiply by 60 to convert hours to minutes\n    raj_time = 60 / solutions[R]\n    \n    return raj_time\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1/(1+ 1/(2 + 1/(3 + 1/x))), 30/43)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the two brothers' current ages\n    elder, younger = symbols('elder younger')\n    \n    # The sum of the current ages of the two brothers is 42\n    eq1 = Eq(elder + younger, 42)\n    \n    # A few years ago, the age of the elder brother equals the current age of the younger brother\n    # At that time, the younger brother was half the current age of the elder brother\n    # Let's denote 'diff' as the difference in age between the elder and younger brother a few years ago\n    diff = symbols('diff')\n    eq2 = Eq(elder - diff, younger)\n    eq3 = Eq(younger - diff, elder/2)\n    \n    # We solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (elder, younger, diff))\n    \n    # We return the age of the elder brother\n    age_elder_brother = solutions[elder]\n    \n    return age_elder_brother\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    number = 1  # Start with the smallest number that leaves a remainder of 1\n    while not (number % 5 == 1 and number % 6 == 1 and number % 7 == 1):\n        number += 1  # Increment the number until conditions are met\n    return number\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # Taking 1 ball of each color, we are not guaranteed to have 3 of the same color.\n    # After that point, the next ball we take must result in having 3 of one color.\n    # So we need to take at most 1+1+1 (for the other colors) and then 3 of any single color.\n    # We take the worst-case scenario where we pick 2 balls from every color,\n    # and then the next ball we pick must give us 3 of the same color.\n\n    # 2 white, 2 blue, 2 green, 2 orange = 8 balls, \n    # the next one (9th ball) will guarantee 3 of the same color.\n    balls_needed = 2 * 4 + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    single_block = 928\n    block_length = len(str(single_block))\n    total_blocks = 99 // block_length\n    last_block_digits = 99 % block_length\n\n    # Considering the repeating blocks of '928' and remainder when divided by 9\n    block_remainder = single_block % 9\n    total_remainder = (block_remainder * total_blocks) % 9\n\n    # Considering the last partial block and its remainder when divided by 9\n    if last_block_digits > 0:\n        last_block = int(str(single_block)[:last_block_digits])\n        last_block_remainder = last_block % 9\n        total_remainder = (total_remainder + last_block_remainder) % 9\n\n    ans = total_remainder\n    return ans\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(0, 10):\n            original_number = 10 * tens + ones\n            swapped_number = 10 * ones + tens\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    current_sum_ages = 34\n    future_sum_ages = 40\n    difference = future_sum_ages - current_sum_ages\n    years_later = difference // 2\n\n    return years_later\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    # Let the number of teams be n\n    # Each team plays n-1 other teams twice (home and away)\n    # Total number of matches played in the league: n * (n-1)\n    # But each match is counted twice as each team plays home and away\n    # So the total number of matches is actually n * (n-1) / 2\n    # We need to find the value of n such that n * (n-1) / 2 = 30\n    \n    # Starting from 1, incrementally check each number to see if it satisfies the equation\n    n = 1\n    while (n * (n - 1) / 2) != 30:\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    num_countries = 11\n    min_to_guarantee = 5\n    max_without_guarantee = (min_to_guarantee - 1) * num_countries\n    min_participants = max_without_guarantee + 1\n    \n    return min_participants\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    x, y, z = symbols('x y z')\n\n    # Define the equations\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Calculate the sum x + y + z\n    x_val = solutions[x]\n    y_val = solutions[y]\n    z_val = solutions[z]\n    sum_xyz = x_val + y_val + z_val\n\n    return sum_xyz\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the length of the rope required for one turn\n    length_per_turn = symbols('length_per_turn')\n    \n    # Equation for 10 turns leaving 3 meters of the rope\n    equation1 = Eq(10 * length_per_turn + 3, 12 * length_per_turn - 3)\n    \n    # Solve the equation to find the length per turn\n    solution = solve(equation1, length_per_turn)\n    \n    # Calculate how many meters around 8 turns left\n    meters_left = 8 * solution[length_per_turn] + 3  # We add 3 because 10 turns leave an excess of 3 meters\n\n    return meters_left\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        # ABCD\n        # -DAB\n        # ----\n        # CDD\n        if (A * 1000 + B * 100 + C * 10 + D) - (D * 100 + A * 10 + B) == (C * 100 + D * 10 + D):\n            return A + B + C + D\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000  # Total numbers from 1000 to 1999\n    numbers_greater_than_1499 = 1999 - 1499  # Numbers from 1500 to 1999\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    # Given that Catherine has 54 cards and she has 5 more cards than Ben\n    ben_cards = 54 - 5\n    # Ash has three times as many Pokemon cards as Ben has\n    ash_cards = 3 * ben_cards\n    \n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    ans = 92 * 503\n    return ans\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    # Let the original number be x\n    # According to the problem, we have the equation: 2*x + 6 = 28\n\n    # We will find x by performing inverse operations\n    answer = (28 - 6) / 2\n\n    return answer\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    number = 111\n    dot_value = 7\n    ans = number - sum(range(1, dot_value))\n    return ans\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n\n    spent_on_bag = 3 / 7 * total_money\n    not_used = total_money - spent_on_bag\n    difference = spent_on_bag - not_used\n\n    equation = Eq(difference, 12)\n\n    solutions = solve(equation, total_money)\n\n    amount_spent_on_bag = 3 / 7 * solutions[0]\n\n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # If the youngest three have ages that add up to 42, and they are consecutive, then:\n    # Let x = age of the youngest dwarf, then the other two ages are (x+1) and (x+2)\n    # Thus, x + (x+1) + (x+2) = 42\n    # 3x + 3 = 42\n    # 3x = 39\n    # x = 13 (age of youngest dwarf)\n    \n    # Also, since all dwarfs have consecutive ages, the oldest three will have ages:\n    # (x+4), (x+5), (x+6).\n    # Therefore, their ages add up to (x+4) + (x+5) + (x+6).\n    # Substitute x = 13 into the above expression to calculate the sum of ages.\n    \n    x = 13\n    sum_oldest_three = (x+4) + (x+5) + (x+6)\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    ans = (1/6) * n * (n + 1) * (2 * n + 1) * (5 ** 2)\n    return int(ans)\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    salary_per_month = 1.4\n    debt_in_bitcoins = 5.04\n\n    months_needed = debt_in_bitcoins / salary_per_month\n\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    num = 72\n    factors = [i for i in range(1, num + 1) if num % i == 0]\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    # A + B + C = 659\n    equation_total = Eq(A + B + C, 659)\n    # A + B = 447\n    equation_AB = Eq(A + B, 447)\n    # B + C = 335\n    equation_BC = Eq(B + C, 335)\n    \n    # Solving the system of equations\n    solutions = solve((equation_total, equation_AB, equation_BC), (A, B, C))\n    \n    # Return the number of toys made by Factory B\n    return solutions[B]\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys + girls, 500)\n    equation2 = Eq(girls, boys + 30)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file_price, storybook_price = symbols('file_price storybook_price')\n\n    equation1 = Eq(7 * file_price + 4 * storybook_price, 108)\n    equation2 = Eq(5 * file_price + 3 * storybook_price, 80)\n\n    solutions = solve((equation1, equation2), (file_price, storybook_price))\n\n    total_cost = solutions[file_price] + solutions[storybook_price]\n    \n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_sausages = 21\n\n    total_initial_sausages = initial_trays * initial_mean\n    total_sausages_after_additional = total_initial_sausages + additional_sausages\n    total_trays_after_additional = initial_trays + 1\n    new_mean = total_sausages_after_additional / total_trays_after_additional\n\n    return new_mean\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10): # hundreds digit 1-9\n        for tens in range(0, 10): # tens digit 0-9\n            for units in range(0, 10): # units digit 0-9\n                if hundreds > tens and units > tens:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    ans = (3 + 1/2) / (1/4)\n    return ans\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani_money = 456\n    brenda_money = 528\n    total_money = rani_money + brenda_money\n    money_to_give = brenda_money - (total_money // 2)\n    return money_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # Given values\n    train_length = 137\n    first_bridge_length = 263\n    first_bridge_time = 20  # in seconds\n    second_bridge_time = 27  # in seconds\n\n    # The speed of the train crossing the first bridge\n    speed = (train_length + first_bridge_length) / first_bridge_time\n\n    # The length of the second bridge\n    second_bridge_length = (speed * second_bridge_time) - train_length\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    ans = (2022 + 4567 * 7890) / (4568 * 7890 - 5778)\n    return ans\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red', integer=True)\n    equation1 = Eq((2/5) * blue, (3/5) * red)\n    equation2 = Eq(blue + red, 125)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue] - solutions[red]\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watch, handbag = symbols('watch handbag')\n    \n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n    \n    solutions = solve((equation1, equation2), (watch, handbag))\n    \n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n    \n    return total_cost\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "def solution():\n    from math import factorial\n\n    # Function to calculate combinations\n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Each of the three students must get one book each, that leaves us with 7 - 3 = 4 books\n    # We then have to distribute these 4 books among the 3 students where a student can get 0 or more books\n\n    # Total ways = Ways to choose 1 book for first student * Ways to choose 1 book for second student *\n    # Ways to choose 1 book for third student * Ways to distribute the remaining books among three students\n\n    total_ways = combinations(7, 1) * combinations(6, 1) * combinations(5, 1) * (combinations(4 + 3 - 1, 4))\n    return total_ways\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    total_candy = 88\n    children = 8\n\n    # The sum of the first n natural numbers is (n * (n + 1)) / 2.\n    # We need to subtract the smallest n numbers from total candy\n    # such that the remaining candies (total_candy - sum_of_smallest_n_numbers)\n    # can be the least possible number for the child with the most pieces.\n\n    # Find the sum of the smallest 7 numbers because we have 8 children\n    # and we want to distribute the rest to the 8th child\n    sum_of_smallest_n_numbers = (children - 1) * children // 2  # smallest possible distribution\n\n    # Remaining candies for the 8th child\n    remaining_candies = total_candy - sum_of_smallest_n_numbers\n\n    return remaining_candies\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_age_in_2008 = 80\n    daughter_age_in_1996 = 40\n    difference_in_years = 2008 - 1996\n    daughter_birth_year = 2008 - grandmother_age_in_2008\n    grandmother_age_when_daughter_born = daughter_birth_year - (1960 - daughter_age_in_1996)\n    return grandmother_age_when_daughter_born\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    total_passes = 3\n    people = 3  # excluding A, as A must receive the last pass\n\n    # After A makes the first pass, there are 3 options for the first receiver\n    # For the second pass, the receiver can't pass back to the one who just passed\n    # to them, so there are only 2 options for the second receiver.\n    # The third pass must go to A, so there are again 2 options for the third receiver.\n    num_methods = people * (people - 1) * (people - 1)\n\n    return num_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    # Nicole had thrice as many tokens as Eddy\n    equation1 = Eq(nicole, 3 * eddy)\n\n    # Nicole used 130 tokens and Eddy used 38 tokens\n    # They had 24 tokens left altogether\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    # We want to find the original number of Nicole's tokens\n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial\n    # Consider A and B as a single entity as they want to stand next to each other,\n    # giving us 7 entities to arrange. This can be done in 7! ways.\n    # A and B can arrange themselves in 2! ways.\n    ab_together = factorial(7) * factorial(2)\n\n    # Now we need to subtract the arrangements where C and D are together.\n    # If C and D are together, treat them as a single entity too, along with A and B,\n    # giving us 6 entities. This can be done in 6! ways.\n    # C and D can arrange themselves in 2! ways, and A and B can arrange themselves in 2! ways.\n    cd_together_with_ab = factorial(6) * factorial(2) * factorial(2)\n\n    # Total arrangements are the ones with A and B together minus C and D being together.\n    total_arrangements = ab_together - cd_together_with_ab\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_solution = 200\n    lenny_solution = 300\n    total_solution = leroy_solution + lenny_solution  # Total mass of the mixed solution\n\n    leroy_salt = leroy_solution * 0.35  # Mass of salt in Leroy's solution\n    lenny_salt = lenny_solution * 0.50  # Mass of salt in Lenny's solution\n    total_salt = leroy_salt + lenny_salt  # Total mass of salt in the mixed solution\n\n    concentration = total_salt / total_solution  # Concentration of salt in the mixed solution\n\n    return concentration * 100  # convert to percentage\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, valeria = symbols('mike valeria')\n\n    equation1 = Eq(mike - valeria, 6 - 22)\n    equation2 = Eq(mike + valeria, 36)\n\n    solutions = solve((equation1, equation2), (mike, valeria))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300\n    sugar_concentration = 0.35\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # Since we are comparing two powers, we can take the 50th root of both sides\n    # to make the comparison easier:\n    # (12^50)^(1/50) > (k^75)^(1/50)\n    # Simplifying, we have:\n    # 12 > k^(75/50) or k^(3/2)\n    # Now, we take the inverse power to isolate k:\n    # (12)^(2/3) = k\n    # We want the largest whole number, so we need to take the floor of the result.\n\n    k = int(12 ** (2 / 3))\n\n    # Subtract 1 if the result is not a whole number\n    if 12 ** (2 / 3) > k:\n        return k - 1\n    else:\n        return k\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    thrown_away = 34\n    bought = 25\n    final_count = 133\n\n    return final_count - bought + thrown_away\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def Psi(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n\n    ans = Psi(Psi(14, 13), 12)\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    # Count the number of digits in the given sequence\n    ans = sum(len(str(i)) for i in range(1, 20))\n    return ans\n\n# Call the function `solution` to get the number of digits\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n    total_score = 36 * 89\n    girls_score = 88 * girls\n    boys_score = 91 * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    minutes_per_flight = 12 / 4  # Time to walk up from the first to the fifth floor (4 flights)\n    flights_in_30_min = 30 // minutes_per_flight  # Number of flights Alison can walk in 30 minutes\n    return int(flights_in_30_min)\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Let b represent the number of birds Tina has.\n    # Since birds have 2 legs each, the total number of legs contributed by birds is 2b.\n    # Cats have 4 legs each, so 2 cats contribute 8 legs.\n    # Dogs have 4 legs each, so 2 dogs contribute 8 legs.\n    # A rabbit has 4 legs.\n    # The total number of legs is 28.\n    \n    # Therefore, the equation we need to solve is:\n    # 8 (legs from cats) + 8 (legs from dogs) + 4 (legs from rabbit) + 2b (legs from birds) = 28\n    \n    # Simplify the equation by subtracting the legs from cats, dogs, and rabbit from both sides:\n    # 2b = 28 - 8 (cats) - 8 (dogs) - 4 (rabbit)\n    # 2b = 28 - 20\n    # 2b = 8\n    \n    # Now, divide both sides by 2 to solve for b (the number of birds):\n    # b = 8 / 2\n    # b = 4\n    \n    # Tina has 4 birds.\n    number_of_birds = 4\n    return number_of_birds\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # Calculate the amount of work (person-hours) needed for the original fence\n    original_work = 5 * 6  # number of people times number of hours\n\n    # Since the neighbor's fence is twice as long, the work to be done is also doubled\n    neighbors_work = 2 * original_work\n\n    # Calculate the minimum number of people needed to complete the doubled work in less than 5 hours\n    # Here we use ceil to ensure we have enough people to complete the task in less than 5 hours.\n    # If the result is an integer, we need one more person to make it less than 5 hours.\n    from math import ceil\n    min_people = ceil(neighbors_work / 4.9999)  # slightly less than 5 to satisfy the \"less than 5 hours\" condition\n\n    return min_people\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    initial_butter = 8\n    initial_cookies = 50\n    new_butter = 21.6\n\n    cookies_per_gram = initial_cookies / initial_butter\n    new_cookies = cookies_per_gram * new_butter\n\n    return new_cookies\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert octal number to integer\n    N = int(\"12345654321\", 8)\n    \n    # Compute remainders\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    \n    # Calculate the sum of the remainders\n    sum_remainders = remainder_7 + remainder_9\n    \n    return sum_remainders\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    handbag, wallet, belt = symbols('handbag wallet belt')\n    \n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(handbag + wallet + belt, 840)\n    \n    solutions = solve((equation1, equation2, equation3), (handbag, wallet, belt))\n    \n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, magazine = symbols('book magazine')\n    \n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, magazine))\n    \n    # Extract the cost of one magazine\n    magazine_cost = solutions[magazine]\n    \n    return magazine_cost\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_of_integers = (n * (n + 1)) // 2\n    ans = sum_of_squares + sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_past = 7  # Three years ago\n    combined_age_now = combined_age_past + 2 * 3  # Each cat ages 3 years to the present\n    combined_age_future = combined_age_now + 2 * 4  # Each cat ages 4 more years to the future time\n    return combined_age_future\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    return 637 - 473\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    import math\n\n    n = 2016\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % (i * i) == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    for i in range(1, 60):\n        if i + (i + 1) + (i + 2) == 60:\n            return i + 2  # the largest of the three consecutive numbers\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_pail, small_pail = symbols('big_pail small_pail')\n    equation1 = Eq(3 * big_pail + 4 * small_pail, 68)\n    equation2 = Eq(4 * big_pail + 2 * small_pail, 64)\n\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n\n    return solutions[big_pail]\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    children = 70\n    pens_per_child = 3\n    pens_needed = children * pens_per_child\n    pack_size = 8\n    \n    packs_needed = (pens_needed + pack_size - 1) // pack_size\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Annabella could pick all shirts that are not yellow first,\n    # so in the worst case scenario, she picks all orange, pink, and brown shirts\n    orange_shirts = 6\n    pink_shirts = 4\n    brown_shirts = 12\n\n    # The number of shirts that can be taken out without getting a yellow one\n    non_yellow_shirts = orange_shirts + pink_shirts + brown_shirts\n\n    # To then be sure to get a yellow shirt, she must take out one more shirt\n    ans = non_yellow_shirts + 1\n\n    return ans\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    # Convert the mixed fractions to improper fractions\n    # Multiply the whole number by the denominator and add the numerator.\n\n    terms = [9 + 4/5, 99 + 4/5, 199 + 4/5, 2999 + 4/5, 39999 + 4/5, 1]\n\n    # Sum all the terms\n    ans = sum(terms)\n\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_solution_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_solution_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from sympy import symbols, solve\n\ndef solution():\n    A, B, C, D = symbols('A B C D', integer=True)\n    \n    # Express the given equation in terms of A, B, C, D\n    equation = Eq(100*A + 10*B + A + 100*C + 10*D + C, 726)\n    \n    # Set the domain for digits between 0 and 9 and A != B != C != D\n    domain = (A > 0) & (B >= 0) & (C >= 0) & (D >= 0) & (A < 10) & (B < 10) & (C < 10) & (D < 10) & \\\n             (A != B) & (A != C) & (A != D) & (B != C) & (B != D) & (C != D)\n    \n    # Solve the equation\n    solutions = solve((equation, domain), (A, B, C, D), dict=True)\n    \n    # Since we might get several solutions, we are interested in sum of A + B + C + D for each solution\n    answer_sets = [sum(solution.values()) for solution in solutions]\n    \n    # Ensure the uniqueness of the results by converting to a set\n    unique_answers = set(answer_sets)\n    \n    # We expect only one unique sum if the problem statement gives a unique answer.\n    # We take the first element from the set, as we need to return an integer.\n    return unique_answers.pop()\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Analyzing the pattern\n    difference1 = 80 - 73  # Difference between 80 and 73\n    difference2 = 73 - 66  # Difference between 73 and 66\n    # Assume the pattern continues escalating by 1\n    missing_difference = difference1 + 1  # Calculate the difference for the missing number\n    \n    # Find the missing number by subtracting the missing difference from the first number\n    missing_number = 94 - missing_difference\n    \n    return missing_number\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # given remainders and divisors\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    \n    # Applying the Chinese Remainder Theorem\n    age = solve_congruence(*congruences)\n\n    return age[0]\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n\n    position_from_end = total_people - position_from_front + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glasses = 25\n    tumblers = 12\n    wine_glass_volume_ml = 100\n    tumbler_volume_ml = 200\n    carton_volume_litres = 1\n    carton_volume_ml = carton_volume_litres * 1000\n\n    total_volume_ml = (wine_glasses * wine_glass_volume_ml) + (tumblers * tumbler_volume_ml)\n    cartons_needed = total_volume_ml / carton_volume_ml\n\n    return int(cartons_needed) if total_volume_ml % carton_volume_ml == 0 else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # Since we want to find the last digit of the number, we can\n    # simply focus on the pattern that the last digit of powers\n    # of 2 follows: 2, 4, 8, 6 and then it repeats every 4 powers of 2.\n    # Thus, we only need to find the remainder when 859433 is divided by 4.\n    \n    exponent_modulo_4 = 859433 % 4\n\n    # The last digits cycle through 2, 4, 8, 6, which correspond to\n    # powers of 2 with exponents 1, 2, 3, 0 (mod 4) respectively.\n    last_digit_dict = {1: 2, 2: 4, 3: 8, 0: 6}\n\n    return last_digit_dict[exponent_modulo_4]\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    students_facing_teacher = 0\n\n    for student in range(1, 61):\n        if (student % 3 == 0 and student % 5 == 0) or (student % 3 != 0 and student % 5 != 0):\n            students_facing_teacher += 1\n\n    return students_facing_teacher\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the problem variables\n    a, p, l = symbols('a p l')\n\n    # Create equations based on the problem description:\n    # Let 'k' be a constant that will be used to determine the actual number of fruits.\n    # Since ratio of avocados to peaches to lemons was 2:9:8 originally, we have\n    # a = 2k, p = 9k, l = 8k\n    # After selling some fruits, the new ratio between peaches and lemons is 6:5\n    # (p - 12)/(l - 60) = 6/5\n\n    # Set up the equations\n    equation1 = Eq((p - 12) / (l - 60), 6 / 5)\n\n    # Substitute p and l in terms of a, using the original ratios:\n    # p = 9k -> p = (9/2)a and l = 8k -> l = (8/2)a because k = a/2\n    equation1 = equation1.subs(p, (9 / 2) * a)\n    equation1 = equation1.subs(l, (8 / 2) * a)\n\n    # Calculate 'a' after selling 52 avocados\n    equation2 = Eq(a - 52, 2 * (a / 2))\n\n    # Solve the equations to find the value of 'a'\n    solutions = solve((equation1, equation2), a)\n\n    # The calculate the total number of fruits after selling some\n    avocados_left = solutions[a] - 52\n    peaches_left = (9 / 2) * solutions[a] - 12\n    lemons_left = (8 / 2) * solutions[a] - 60\n\n    # Total number of fruits left\n    total_fruits_left = avocados_left + peaches_left + lemons_left\n\n    return total_fruits_left\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    from itertools import permutations\n    \n    max_divisible_number = 0\n    for digits_count in range(1, 8):\n        for digits in permutations(range(1, 8), digits_count):\n            num = int(''.join(map(str, digits)))\n            if all(num % d == 0 for d in digits):\n                max_divisible_number = max(max_divisible_number, num)\n    return max_divisible_number\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from sympy import lcm, solve\n    from sympy.abc import x\n\n    # Least Common Multiple of 2, 4, and 6\n    lcm_246 = lcm(2, 4, 6)\n\n    # Peter's age needs to be of the form lcm_246 * k + 1 to satisfy the first condition\n    # Also, it needs to satisfy the condition x % 7 == 5 for the second condition\n    # Solve the following equation for x: (lcm_246 * k + 1) % 7 == 5\n    \n    # Create the equation based on the conditions\n    equation = (lcm_246 * x + 1) % 7 - 5\n\n    # Solve the equation to find the smallest positive integer solution for Peter's age\n    ans = solve(equation, x)\n\n    # Find the first positive solution which is Peter's age\n    for possible_age in ans:\n        if possible_age > 0:\n            return lcm_246 * possible_age + 1\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    max_length = 0\n    for length in range(1, 900):\n        # Using formula for sum of arithmetic sequence Sn = n/2 * (a1 + an)\n        # For consecutive odd numbers a1 = 1 and an = 1 + 2*(n-1)\n        sum_sequence = (length / 2) * (1 + (1 + 2*(length - 1)))\n        if sum_sequence > 900:\n            break\n        if 900 % length == 0 and (900 // length) % 2 == 1:\n            max_length = length\n    return max_length\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let jess_sweets be the number of sweets Jess has originally\n    # Let jill_sweets be the number of sweets Jill has originally\n    jess_sweets, jill_sweets = symbols('jess_sweets jill_sweets')\n    \n    # Equation 1: Jill has 6 sweets for every 5 Jess has before sharing\n    equation1 = Eq(jill_sweets, 6/5 * jess_sweets)\n    \n    # Equation 2: After sharing, Jill has 4 sweets for every 7 Jess has\n    # Jess now has jess_sweets + 8 sweets\n    # Jill now has jill_sweets - 8 sweets\n    equation2 = Eq(jill_sweets - 8, 4/7 * (jess_sweets + 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess_sweets, jill_sweets))\n    \n    # Total number of sweets they have altogether is the sum of both their sweets\n    total_sweets = solutions[jess_sweets] + solutions[jill_sweets]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):  # Loop through all two-digit numbers\n        if num % 3 == 2 and num % 11 == 2:  # Check the remainders\n            return num  # Return the first number that matches the criteria\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the weights of Adam, Ben, and Carl.\n    adam, ben, carl = symbols('adam ben carl')\n    \n    # Define the equations based on the weights provided.\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n    \n    # Solve the system of equations for the weights.\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n    \n    # Calculate the total weight.\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n    \n    return total_weight\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    number = 120\n    while True:\n        number += 1\n        if number % 53 == 2:\n            return number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest = min(numbers)\n    return smallest\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_meters = 2\n    height_centimeters = 2\n\n    height_in_meters = height_meters + (height_centimeters / 100)\n\n    return height_in_meters\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_score = first_test_score * 1.25\n    third_test_score = second_test_score * 0.8\n\n    total_score = first_test_score + second_test_score + third_test_score\n\n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    savings = [13, 18, 5]\n    mean_saving = sum(savings) / len(savings)\n    return mean_saving\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    # 24-hour format: 00:00 to 23:59\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    from sympy import isprime\n\n    ans = isprime(233)\n    return ans\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    ans = sum((7*i)**2 for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum = 4.22 + 31.49 + 0.76\n    return sum\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(130, 151))\n    return len(primes)\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    first_multiple = 56 // 4\n    if 56 % 4 != 0:\n        first_multiple += 1  # If 56 is not a multiple, start from the next multiple.\n\n    last_multiple = 92 // 4\n\n    # The number of multiples is last - first + 1\n    num_multiples = last_multiple - first_multiple + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    num_students = 15\n    num_selected = 2\n\n    ans = comb(num_students, num_selected)\n\n    return ans\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "def solution():\n    initial_time_hour = 3\n    initial_time_minute = 15\n    waiting_time_hour = 1\n    waiting_time_minute = 25\n\n    total_minutes = (initial_time_hour * 60 + initial_time_minute) + (waiting_time_hour * 60 + waiting_time_minute)\n    meeting_time_hour = total_minutes // 60\n    meeting_time_minute = total_minutes % 60\n\n    ans = (meeting_time_hour, meeting_time_minute)\n    return ans\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    t = symbols('t')\n    \n    # Given values\n    distance = 144  # the distance between Magic Town and Super Town in km\n    time_downstream = 8  # time taken to travel downstream in hours\n    speed_still_water = 15  # speed of the ship in still water in km/h\n    \n    # Calculate the speed of the stream\n    # Speed of the stream is calculated by considering the extra distance covered downstream in 8 hours\n    # distance = (speed_still_water + speed_stream) * time_downstream \n    # => speed_stream = (distance / time_downstream) - speed_still_water\n    speed_stream = (distance / time_downstream) - speed_still_water\n    \n    # Equation for upstream trip\n    # distance = (speed_still_water - speed_stream) * t\n    equation = Eq((speed_still_water - speed_stream) * t, distance)\n    \n    # Solve for t\n    solutions = solve(equation, t)\n    \n    return float(solutions[0])\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hippo, kangaroo = symbols('hippo kangaroo')\n\n    # The hippo eats 45 kilograms more food than the kangaroo.\n    equation1 = Eq(hippo, kangaroo + 45)\n\n    # 20 days later, the hippo has consumed 10 times as much food as the kangaroo.\n    equation2 = Eq(20 * hippo, 10 * (20 * kangaroo))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hippo, kangaroo))\n\n    # Return the total food consumed by the hippo over 20 days\n    total_hippo_food = solutions[hippo] * 20\n\n    return total_hippo_food\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(sum(1/j for j in range(i+1, 21)) for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure having at least two balls of the same color,\n    # the worst-case scenario is when we take out all balls\n    # of one color and then one ball of the other color.\n    # Since there are 7 green balls and 8 blue balls,\n    # taking one of each color would result in taking 7 + 1 = 8 balls.\n    # But to ensure we have at least two of the same color,\n    # we need to take one more ball, which will definitely be the same\n    # color as one of the previously taken balls.\n    return 7 + 1 + 1  # The +1 ensures we have a pair of the same color.\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    signs = 12\n    students_per_sign_to_guarantee_10 = 10\n    # If there are 10 students per sign, there can't be 11 students with the same sign, \n    # so we need at least one more to guarantee 11 students with the same sign.\n    ans = signs * students_per_sign_to_guarantee_10 + 1\n    return ans\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef solution():\n    students = 'ABCDEF'  # Since D and E are always together, we treat them as one\n    count = 0\n    for perm in permutations(students):\n        lineup = ''.join(perm)\n        if 'DE' in lineup or 'ED' in lineup:\n            if lineup.index('B') < lineup.index('A') < lineup.index('C') or lineup.index('C') < lineup.index('A') < lineup.index('B'):\n                if 'FG' not in lineup and 'GF' not in lineup:\n                    count += 1\n    return count * 2  # Multiply by 2 for the DE and ED permutations\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Worker A's daily work rate\n    A_rate = 1 / 15\n    # Worker B's daily work rate\n    B_rate = 1 / 20\n    # Combined work rate\n    combined_rate = A_rate + B_rate\n    \n    # Total work done in 2 days together\n    work_done = 2 * combined_rate\n    \n    # Remaining work\n    remaining_work = 1 - work_done\n    \n    # Days for worker A to finish the remaining work alone\n    days_remaining = remaining_work / A_rate\n    \n    return days_remaining\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 5, 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n    return lcm(7, 3)\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    n = 60\n\n    last_term = first_term + (n - 1) * common_difference  # nth term of arithmetic sequence\n    sum_of_n_terms = n * (first_term + last_term) // 2  # Sum of first n terms\n\n    return sum_of_n_terms\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Taking the worst-case scenario using the pigeonhole principle\n    # After taking all yellow and white balls, the next ball has to be black.\n    # Hence, we guarantee that the 10th ball is the same color as the previous ones.\n\n    yellow_balls = 5\n    white_balls = 15\n    balls_for_guarantee_same_color = 10\n\n    # Now, we take all yellow balls, then all white, and finally one more to guarantee 10 black balls.\n    min_balls_to_take = yellow_balls + white_balls + balls_for_guarantee_same_color\n\n    return min_balls_to_take\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    starting_seat = 3\n\n    # We account for the starting seat by subtracting 1 (as the first child is effectively 'seat 0')\n    # Then we add the total candies and get the seat number by taking the modulo with total children.\n    last_seat = (starting_seat - 1 + total_candies) % total_children\n\n    # If the last_seat is 0, it means the last candy goes to child on seat number 9\n    if last_seat == 0:\n        last_seat = total_children\n\n    return last_seat\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Using the Inclusion-Exclusion Principle to find the minimum number\n    # of children with both dogs and cats.\n    both = (children_with_dogs + children_with_cats) - total_children\n\n    return both\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data_set = [12, 145, 32, 77, 62]\n    range_of_dataset = max(data_set) - min(data_set)\n    return range_of_dataset\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    total_months = 3\n    \n    total_saving = monthly_saving * total_months\n    \n    return total_saving\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirts, skirts = symbols('shirts skirts')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(shirts, skirts - 36)\n    equation2 = Eq((2/3) * shirts + (5/6) * skirts, 72)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # Assuming this is a table of an arithmetic sequence\n    # with an unknown number of terms but with a known pattern.\n    \n    # The sum of an arithmetic sequence can be calculated as\n    # sum = (n/2) * (first_term + last_term)\n    # where n is the number of terms, first_term is the first term of the series,\n    # and last_term is the last term of the series.\n    \n    # Assuming the table starts with the number 1 and ends with 100,\n    # and the difference between each number is 1 (which is a typical\n    # interpretation if not specified otherwise), then:\n    first_term = 1\n    last_term = 100\n    difference = 1\n    \n    # To find the number of terms, we use:\n    # last_term = first_term + (n - 1) * difference\n    # thus n = ((last_term - first_term) / difference) + 1\n    \n    # Plugging in the values we get:\n    n = ((last_term - first_term) / difference) + 1\n    \n    # Calculating the sum:\n    sum_of_numbers = (n / 2) * (first_term + last_term)\n    \n    return sum_of_numbers\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    length_of_material = 100\n    width_of_material = 80\n    length_of_cloak = 5\n    width_of_cloak = 4\n\n    number_of_cloaks_lengthwise = length_of_material // length_of_cloak\n    number_of_cloaks_widthwise = width_of_material // width_of_cloak\n\n    total_number_of_cloaks = number_of_cloaks_lengthwise * number_of_cloaks_widthwise\n\n    return total_number_of_cloaks\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    for num_biscuits in range(400, 801):\n        if (num_biscuits % 5 == 1) and (num_biscuits % 6 == 2) and (num_biscuits % 11 == 7):\n            return num_biscuits\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Speed going to the place\n    speed_going = 20\n    # Distance to the place and back\n    distance = 120\n    # Expected average speed for the whole trip\n    average_speed = 30\n    \n    # Total time for the trip there and back at the expected average speed\n    total_time = (distance * 2) / average_speed\n    \n    # Time to travel to the place at the speed of 20 mph\n    time_going = distance / speed_going\n    \n    # Remaining time for the return trip\n    time_returning = total_time - time_going\n    \n    # Speed needed for the return trip to meet the expected average speed\n    speed_returning = distance / time_returning\n    \n    return speed_returning\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    # Nell's ratio part = 4\n    # Joe's ratio part = 5\n    # Total ratio parts = 4 (for Nell) + 5 (for Joe) = 9 parts.\n    # Nell received 24 sweets which corresponds to her 4 parts of the ratio.\n    # Hence, 1 part of the ratio corresponds to 24 sweets / 4 parts = 6 sweets.\n    # Therefore, the total number of sweets = total ratio parts * sweets per part\n    # = 9 parts * 6 sweets per part\n    total_sweets = 9 * (24 / 4)\n    return total_sweets\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    count = 0\n    for i in range(1, 35):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # Since it takes 2 minutes to cut the rod into two pieces, one cut takes 2 minutes.\n    # To divide a rod into 5 pieces, we need 4 cuts (every cut increases the number of pieces by 1).\n    # If each cut takes 2 minutes, then for 4 cuts, it will take 2 * 4 = 8 minutes.\n    total_minutes = 2 * (5 - 1)\n    return total_minutes\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(sequence) / len(sequence)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if int('14' + str(m)) == 8 * int('1' + str(m)) - 3:\n            return m\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    initial_average = 120\n    final_average = 110\n    initial_sum = initial_average * 3\n\n    # to find the final sum, we add the final average times 4 (3 numbers + 1 to be added)\n    final_sum = final_average * 4\n\n    # the number to be added is the difference between the final sum and the initial sum\n    number_to_add = final_sum - initial_sum\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the number of marbles Sean has\n    sean = symbols('sean')\n    \n    # The equations as per the problem statement\n    jovan = 2 * sean\n    herman = 3 * jovan\n    equation = Eq(jovan, herman - 240)\n    \n    # Solve the equation\n    solutions = solve((equation, ), (sean,))\n    \n    # Calculate the number of marbles for each person\n    sean_marbles = solutions[sean]\n    jovan_marbles = 2 * sean_marbles\n    herman_marbles = 3 * jovan_marbles\n    \n    # Calculate the total number of marbles\n    total_marbles = sean_marbles + jovan_marbles + herman_marbles\n\n    return total_marbles\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    common_difference = 4\n    n = ((last_term - first_term) // common_difference) + 1\n    sum_of_series = n * (first_term + last_term) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    # Using the unitary method, find the number of days one horse could feed on the pile of hay:\n    days_per_horse = horses_initial * days_initial\n    \n    # Now, find out for how many days 20 horses can feed on the same pile of hay:\n    days_final = days_per_horse / horses_final\n\n    return days_final\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7*x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 12)\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n    \n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n    \n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n    \n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n    \n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900\n    total_companies = 4\n    total_days = 5\n\n    meters_per_company_per_day = (total_expressway / total_companies) / total_days\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean, median, mode, variance, stdev\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    \n    # Compute the mean of the data set\n    data_mean = mean(data)\n    \n    # Calculate the absolute deviations from the mean\n    absolute_deviations = [abs(x - data_mean) for x in data]\n    \n    # Calculate the mean of the absolute deviations, which is the MAD\n    mad = mean(absolute_deviations)\n    \n    return mad\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    # Price of one set of 5 individual shoes\n    shoe_set_price = 78\n    # Price of one pair of socks\n    sock_pair_price = 12\n    \n    # Number of aliens (including the one making the purchase)\n    num_aliens = 6\n    # Number of legs per alien\n    legs_per_alien = 5\n\n    # Total legs for all aliens\n    total_legs = num_aliens * legs_per_alien\n\n    # Each leg needs one shoe and one sock, socks come in pairs, \n    # so total pairs of socks needed is half the number of total legs\n    total_sock_pairs_needed = total_legs // 2\n\n    # Total cost for shoes (1 set of shoes per alien)\n    total_shoe_cost = shoe_set_price * num_aliens\n\n    # Total cost for socks (1 pair of socks per 2 legs)\n    total_sock_cost = sock_pair_price * total_sock_pairs_needed\n\n    # Total cost\n    total_cost = total_shoe_cost + total_sock_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    total_oranges = 13\n    # Adding 1 for each child to handle the case where a child can get 0 oranges\n    # The problem becomes equivalent to distributing 13 + 3 oranges to 3 kids,\n    # where each kid gets at least one orange.\n    # This can be solved using the stars and bars method\n    # We have total_oranges + 2 bars and we choose 2 bars (for 3 kids)\n    # Hence the formula is C(total_oranges + 2, 2)\n    from math import comb\n    ans = comb(total_oranges + 2, 2)\n    return ans\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "def solution():\n    from itertools import combinations\n\n    numbers = [6, 12, 35, 175, 245, 300]\n    products = {}\n\n    for comb in combinations(numbers, 2):   # Candy picks 2 cards\n        product = comb[0] * comb[1]\n        products[product] = products.get(product, []) + [comb]\n\n    for comb in combinations(numbers, 3):   # Candice picks 3 cards\n        product = comb[0] * comb[1] * comb[2]\n        if product in products:\n            all_picked_numbers = set(comb + products[product][0])\n            return (set(numbers) - all_picked_numbers).pop()   # Get the unpicked number\n    \n    return None\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    ans = [books for books in possible_totals if books % 7 == 4]\n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of $0.50 and $0.10 cookies\n    fifty_cent_cookies, ten_cent_cookies = symbols('fifty_cent_cookies ten_cent_cookies')\n    \n    # Jeremy's cookies are 3/5 as many $0.50 cookies as $0.10 cookies\n    equation1 = Eq(fifty_cent_cookies, (3/5) * ten_cent_cookies)\n    \n    # There were 60 fewer $0.10 cookies than $0.50 cookies\n    equation2 = Eq(ten_cent_cookies, fifty_cent_cookies - 60)\n    \n    # David's cookies cost thrice as much as Jeremy's cookies. Since David had only 1 $0.50 cookie\n    # This translates to the value of David's cookies being equivalent to three $0.50 Jeremy's cookies\n    # David's cookies ($0.50 * 1) = 3 * Jeremy's cookies ($0.50 * fifty_cent_cookies)\n    # However, we are interested in the worth, not in this equation, hence this can be left out of the system.\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (fifty_cent_cookies, ten_cent_cookies))\n    \n    # Calculate how much were Jeremy's cookies worth\n    jeremy_cookies_worth = solutions[fifty_cent_cookies] * 0.5\n    \n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12  # Flow rate of tap A (tank per minute)\n    rate_b = 1 / 8   # Flow rate of tap B (tank per minute)\n    combined_rate = rate_a + rate_b  # Combined flow rate of both taps\n\n    # Time taken to fill half the tank with both taps\n    time_to_fill_half = 0.5 / combined_rate\n\n    return time_to_fill_half\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Original expression\n    original_expr = (36 * 21) / (6 * 7)\n    \n    # Mistake 1: Division does not distribute over multiplication\n    # Correct expression:\n    correct_expr = 36 / 6 * 21 / 7\n    \n    # Verify if Jason's answer is correct\n    jasons_answer = 882\n    is_correct = correct_expr == jasons_answer\n    \n    return int(correct_expr) if not is_correct else jasons_answer\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_between_first_fifth = 20  # distance between the first and fifth tree\n    distance_between_trees = distance_between_first_fifth / 4  # distance between each tree\n    total_length_of_road = 200  # total length of the road\n\n    # The number of intervals will be the number of trees minus 1\n    # So the number of trees will be the number of intervals plus 1\n    number_of_intervals = total_length_of_road / distance_between_trees\n    number_of_trees = number_of_intervals + 1\n\n    return int(number_of_trees)\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    number_of_apples = total_fruit * fraction_apples\n    number_of_pears = total_fruit - number_of_apples\n    return int(number_of_pears)\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Since the number increased by 5877 when the digits changed places,\n    # we know that the thousands place increased by a certain number (n) and the ones decreased by n.\n    # So, the difference between the new and old thousands place value is (n * 1000).\n    # Similarly, the difference between the old and new ones place value is n.\n    # The sum of these two differences is 5877.\n    # Hence, 1000n - n = 5877 => 999n = 5877.\n    # Solving for n gives us the value by which the thousands digit increased\n    # and the ones digit decreased.\n\n    n = 5877 // 999\n\n    # Now, we know the ones place originally had the value 'n'\n    # and the thousands place originally had the value (n - 1).\n    # The new number's ones place is (n - 1) which was originally the thousands place.\n\n    # Since we have no information about the tens and hundreds place, they remain the same.\n    # Hence, the original number is in the form of (n-1)XYZn (where XYZ are the original tens and hundreds digits\n    # which didn't change).\n\n    # As we know the range of n, it can only be from 1-9 because it's a single digit, so the original number's thousands place\n    # has to be in the range 0-8 (as n starts from 1), which means the original number is in the form of (n-1)XYZn,\n    # which fits the description of a 4-digit number.\n\n    # The original combination lock number can be calculated by concatinating the original thousands place (n-1),\n    # original ones place (n) and assuming the tens and hundreds place as 0 (since we don't have any info about them)\n    # which results in the 4-digit number (n-1)00n.\n\n    original_number = (n - 1) * 1000 + n\n\n    return original_number\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = jane_age * 2\n    cousin_age_in_8_years = cousin_age_now + 8\n    return cousin_age_in_8_years\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    ann_to_david = ann_position + people_between + 1  # Plus 1 because David is after the people between\n    david_position_from_end = 2\n    total_people = ann_to_david + david_position_from_end - 1  # Minus 1 to account for David's position itself\n\n    return total_people\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    # Start with an initial guess for the number of boys, assuming it's a perfect square\n    boys = 0\n    \n    while True:\n        # Increment boys to check for the next larger square\n        boys += 1\n        # Calculate the total number of students when adding the girls\n        total_students = boys + 17\n        # The total number of students should also form a square\n        side_length_with_girls = int(total_students ** 0.5)\n        \n        # Check if the total number of students indeed forms a perfect square\n        if side_length_with_girls * side_length_with_girls == total_students:\n            # Check if adding one row and one column to the boys' square equals the total\n            if (side_length_with_girls - 1) * (side_length_with_girls - 1) == boys:\n                break\n    \n    return boys\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    page_count = 0\n    digit_count = 0\n    \n    while digit_count < 22:\n        page_count += 1\n        digit_count += str(page_count).count('8')\n        \n    return page_count\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = 8 * (9 / 12)\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    third_number = 555 - (first_number + second_number)\n    return third_number\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_height = 9\n    climb_per_day = 3\n    slide_per_night = 1\n\n    net_climb_per_day = climb_per_day - slide_per_night\n    remaining_height_after_full_days = total_height - climb_per_day\n\n    full_days = remaining_height_after_full_days // net_climb_per_day\n    if remaining_height_after_full_days % net_climb_per_day > 0:\n        full_days += 1\n    \n    return full_days + 1 # plus one for the last partial day of climbing out\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_competitors = 30\n    art_competitors = 26\n\n    both_competitors = maths_competitors + art_competitors - total_students\n\n    return both_competitors\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time = 3\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleeps = 8\n    mary_sleeps = lucy_sleeps + 2\n    return mary_sleeps\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4 * x, 19)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    england_highest = 978\n    world_highest = 8848\n\n    difference = world_highest - england_highest\n\n    return difference\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To ensure we get 29 balls of one color, we need to consider the worst-case scenario\n    # where we pick the maximum number of the other two colors first.\n    \n    # If we want to make sure we get 29 balls of one color, we have to consider the worst case:\n    # Picking all other balls first, which means picking all 40 red and 30 white balls.\n    # After that, any ball we pick will be blue, so to get 29 blue balls we need to pick:\n    red_balls = 40\n    white_balls = 30\n    blue_balls = 29\n\n    # The minimum number of balls to pick to ensure 29 blue balls in the worst-case:\n    min_picks = red_balls + white_balls + blue_balls\n\n    # However, we also need to make sure we have 28 balls of another color which means we should also account for getting 28 red or white balls.\n    # Therefore we need to pick one less than 29 blue or white balls, to ensure we get 28 of the other colors.\n    # After picking all the blue and white balls, we will have 28 red balls for sure.\n    # Similarly for the case of picking all blue and red balls, we will have 28 white balls for sure.\n    min_picks_blue_white = blue_balls + white_balls - 1\n    min_picks_blue_red = blue_balls + red_balls - 1\n    \n    # We take the maximum of these two numbers to find out the number of picks needed to ensure 28 of both red and white balls.\n    min_picks_red_white = max(min_picks_blue_white, min_picks_blue_red)\n\n    # Finally, we can't forget about ensuring we have at least 10 balls of the remaining color, which is already guaranteed since we picked all 30 white balls.\n    \n    # Hence, the minimum number of balls we should pick in the worst case is the sum:\n    ans = max(min_picks, min_picks_red_white)\n\n    return ans\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "from sympy import primerange\n\ndef solution():\n    # primes less than 50, since the number is less than 50\n    primes = list(primerange(1, 50))\n\n    for prime in primes:\n        # check if two less than a multiple of 3\n        if (prime + 2) % 3 == 0:\n            # check if two more than a multiple of 5\n            if (prime - 2) % 5 == 0:\n                return prime\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Any number factorial greater than 10 will have at least one 10 as a factor,\n    # which will result in the last digit being 0.\n    # Therefore, the last digit of 2014! is 0.\n    return 0\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    product = 2*2*3*8*5*5*5\n    zeros_count = 0\n    while product % 10 == 0:\n        zeros_count += 1\n        product //= 10\n    return zeros_count\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Alicia's, Beth's, and Casey's starting money as a, b, c respectively.\n    a, b, c = symbols('a b c')\n    \n    # Alicia spent half her money\n    alicia_spent = a / 2\n    # Beth spent $60\n    beth_spent = 60\n    # Casey spent 3 times as much money as Alicia did\n    casey_spent = 3 * alicia_spent\n    \n    # They all have the same amount of money left\n    alicia_left = a - alicia_spent\n    beth_left = b - beth_spent\n    casey_left = c - casey_spent\n    \n    # Now we setup our equations\n    equation1 = Eq(alicia_left, beth_left)\n    equation2 = Eq(beth_left, casey_left)\n    # The total amount of money they originally had\n    equation3 = Eq(a + b + c, 900)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    \n    return solutions[a]\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 6\n    whole_numerator = 30\n\n    ans = (whole_numerator * 20) // numerator\n\n    return ans\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variable for the initial number\n    number = symbols('number')\n\n    # Form the equation based on the problem description (in reverse)\n    equation = Eq(((number + 6) * 3) / 8 - 8, 1)\n\n    # Solve the equation\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_number = symbols('original_number')\n    new_number = 10 * original_number\n    equation = Eq(original_number + new_number, 253)\n    \n    solution = solve(equation, original_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = 5  # Number of terms (days)\n    total_cookies = 100\n\n    a1 = symbols('a1')  # First day cookies\n    d = 6  # Common difference\n\n    # Sum of an arithmetic sequence formula: (n/2) * (2*a1 + (n - 1) * d)\n    eq = Eq((n / 2) * (2 * a1 + (n - 1) * d), total_cookies)\n\n    a1_value = solve(eq, a1)\n\n    return a1_value[0]\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    number_of_boxes = 8\n\n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // number_of_boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for num in range(1, 90):\n        if num % 9 == 0 and (num + 1) % 5 == 0 and is_prime(num + 1):\n            return num\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n    \n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, cayden * 2)\n    equation3 = Eq(yixuan, sicheng + 22)\n    \n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n    \n    total_questions = sum(solutions.values())\n    \n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    return 18 / 100 * 250\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "from math import factorial\n\ndef solution():\n    ways_for_men = factorial(4)  # There are 4 men to arrange\n    ways_for_women = factorial(4)  # There are 4 women to arrange\n    # Men and women can be arranged independently, and they alternate,\n    # so we have two choices for who stands first (man or woman).\n    return ways_for_men * ways_for_women * 2\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(len(\"HAPPY\"))  # Total permutations of the word HAPPY\n    h_count = factorial(\"HAPPY\".count(\"H\"))  # Permutations of H's\n    p_count = factorial(\"HAPPY\".count(\"P\"))  # Permutations of P's\n    # ways = total permutations / (permutations of H's * permutations of P's)\n    ans = total_letters // (h_count * p_count)\n    return ans\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = 2 * cost_per_roll_ali\n    cost_for_3_rolls_mya = 3 * cost_per_roll_mya\n    return cost_for_3_rolls_mya\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    total_girls = 12\n    fraction_boys = 2 / 5\n    fraction_girls = 1 - fraction_boys\n    total_students = total_girls / fraction_girls\n    number_of_boys = total_students * fraction_boys\n    return int(number_of_boys)\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n    equation1 = Eq(justin, crystal + 72)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    total_pages = sum(solutions.values())\n    return total_pages\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    peter_and_john = 2\n\n    total_people = people_in_front_of_peter + peter_and_john + people_behind_john\n\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    result = (60 / 100) * (10 / 100) * 900\n    return result\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    n = 96\n    i = 2\n    factors = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count = 1\n            while n % i == 0:\n                n //= i\n                count += 1\n            factors *= count + 1\n    if n > 1:\n        factors *= 2\n    return factors\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time = 12  # Noon in 24-hour format\n    flight_duration = 4  # 4 hours\n    time_difference = 3  # St Petersburg is +3 hours ahead of England\n\n    arrival_time = (departure_time + flight_duration + time_difference) % 24\n\n    return arrival_time\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 2):\n        N, O = perm\n        if N != 0:  # Avoid leading zero\n            NO = 10 * N + O\n            break\n    return NO\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = 0\n    for i in range(25, 51):\n        ans += (2*i - 100) * (-1)**i\n    return ans\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_g = 1000\n    weight_in_kg = 2.5\n    ans = weight_in_kg * kg_to_g\n    return ans\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # Since there are 3 colours and Cindy needs at least one pair of the same colour,\n    # in the worst case scenario, she would pick 3 single socks of different colours first.\n    # After these 3, the next sock she picks must form a pair of one of the colours.\n    # So she must pick 3 + 1 = 4 socks in total to guarantee a pair.\n    num_socks_needed = 3 + 1\n    return num_socks_needed\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3/8\n    \n    # Let's find the number of boys first\n    # If fraction_boys is 3/8, then fraction_girls is 5/8 because 1 - 3/8 = 5/8\n    \n    sweets_per_boy = 4\n    sweets_per_girl = 12\n    \n    # Total number of children\n    total_children = total_sweets // (fraction_boys * sweets_per_boy + (1 - fraction_boys) * sweets_per_girl)\n    \n    # Number of boys and girls\n    boys = total_children * fraction_boys\n    girls = total_children - boys\n\n    return int(girls)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 1 / 5  # 1 km / 5 cm\n    map_distance_cm = 12  # distance on the map in cm\n    ground_distance_km = scale_ratio * map_distance_cm  # distance on the ground in km\n\n    return ground_distance_km\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2\n    speed_mps = speed_kmh * (1000 / 3600)  # Convert km/h to m/s\n    time_seconds = 24\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let the unknown number be x\n    x = symbols('x')\n    # The system of equation based on the problem statement\n    eq1 = Eq(x % 7, 5)  # Remainder when x is divided by 7 is 5\n    eq2 = Eq(x % 8, 6)  # Remainder when x is divided by 8 is 6\n    eq3 = Eq(x % 10, 6) # Remainder when x is divided by 10 is 6\n    eq4 = Eq((x // 6) + (x // 7) + (x // 8), 265) # Sum of quotients is 265\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2, eq3, eq4), x)\n\n    # Assuming the solutions are non-negative and x is an integer\n    # The actual number would be the first and only solution in the list.\n    number = solution[0]\n    \n    return number\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    maths_students = 70\n    language_students = 54\n\n    both_classes = maths_students + language_students - total_students\n\n    only_maths = maths_students - both_classes\n\n    return only_maths\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    from fractions import Fraction\n\n    result = Fraction(3, 2)\n    for i in range(3, 10):\n        result *= Fraction(i + 1, i)\n    \n    ans = result.simplify()\n    return ans\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n    \n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n    \n    num = 40309\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num - 40309\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 12):            # First group\n        for x2 in range(1, 12-x1):     # Second group\n            for x3 in range(1, 12-x1-x2):  # Third group\n                x4 = 12 - x1 - x2 - x3  # Fourth group\n                if x4 > 0 and x4 != x3 and x4 != x2 and x4 != x1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # Pip's statement is not fully correct. According to the definition, \n    # a composite number is a positive integer that has at least one positive divisor \n    # other than one or the number itself. In other words, a composite number is a \n    # positive integer that can be formed by multiplying two smaller positive integers.\n    # However, the number 1 is neither prime nor composite. Therefore, Pip's \n    # statement misses the case of the number 1.\n\n    # To implement this in Python, we will create a function that checks for prime numbers,\n    # and we will determine if Pip's statement is correct by testing a set of numbers,\n    # including the edge case of the number 1.\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # We will test numbers from 1 to 10 to see if the statement holds.\n    # Expected results: \n    # - 1: Not prime and not composite (Pip's statement does not cover this case)\n    # - Prime numbers: 2, 3, 5, 7 (Should not be composite)\n    # - Composite numbers: 4, 6, 8, 9, 10 (Should be composite)\n\n    test_numbers = list(range(1, 11))  # Numbers from 1 to 10\n    composite_numbers = [n for n in test_numbers if not is_prime(n) and n != 1]\n\n    # If the list of composite numbers contains all non-prime numbers except 1,\n    # it means Pip's statement is incorrect because it doesn't exclude 1.\n    # We expect composite_numbers to be [4, 6, 8, 9, 10], and the number 1 to \n    # not be in this list to confirm Pip's statement is incorrect.\n\n    if 1 in composite_numbers:\n        ans = \"Pip's statement is incorrect.\"\n    else:\n        ans = \"Pip's statement is incorrect, but only because it does not exclude 1.\"\n\n    return ans\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    kasia_keeps = 13\n    total_sweets = 42\n    sweets_to_share = total_sweets - kasia_keeps\n    sweets_per_friend = sweets_to_share // 2\n\n    lucie_gives_to_joan = sweets_per_friend * 2 // 7\n    lucie_keeps = sweets_per_friend - lucie_gives_to_joan\n\n    return lucie_keeps\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    boy_difference = 52\n    total_students = 0\n    for girls in range(1, 500):\n        boys = girls + boy_difference\n        if (girls % 2 == 1 and boys % 2 == 0) or (girls % 2 == 0 and boys % 2 == 1):\n            # Ensuring that one is even and the other is odd to form a square array\n            # with alternate layers of boys and girls\n            girl_layers = (girls + 1) // 2\n            boy_layers = boys // 2\n            if girl_layers * girl_layers + boy_layers * boy_layers == girls + boys:\n                total_students = girls + boys\n                break\n    return total_students\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for n in range(2, 51):\n        product *= ((1/n) - (1/(51-n)))\n    return product\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let x represent the total weekly pension.\n    # On Friday, Granddad spends one quarter of his pension, which leaves him with 3/4 of his pension.\n    friday_spending = 1/4\n    remaining_after_friday = 1 - friday_spending  # This is 3/4.\n\n    # On Saturday, he spends one third of the remaining pension, which is one third of 3/4.\n    saturday_spending = (1/3) * remaining_after_friday  # This is 1/3 of 3/4.\n    remaining_after_saturday = remaining_after_friday - saturday_spending  # Subtract the 1/3 of 3/4 from the remaining amount.\n\n    # The final remaining fraction is what he has for the rest of the week.\n    remaining_for_week = remaining_after_saturday\n\n    return remaining_for_week\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    ratio_sum = ratio_adults + ratio_children\n    num_adults = (total_people * ratio_adults) / ratio_sum\n\n    return int(num_adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n\n    combinations = num_school_bags * num_pencil_boxes\n\n    return combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    # Let the original number of apples be 3x and the number of pears be 4x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    original_apples = 3 * x\n    original_pears = 4 * x\n\n    # After replacing 36 pears with 36 apples\n    new_apples = original_apples + 36\n    new_pears = original_pears - 36\n\n    # New ratio is 1.5 : 1 (or 3 : 2)\n    equation = Eq(new_apples, 1.5 * new_pears)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    # Compute the original number of apples\n    original_apples_count = original_apples.subs(x, solutions[0])\n\n    return original_apples_count\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let's name the total water needed to fill the tank as 'total_water'.\n\n    # When using a 5-litre pail, 4 litres overflow which means:\n    # total_water + 4 = 5 litres\n\n    # When using a 3-litre pail, he needs another 4 pails to fill the tank which means:\n    # total_water = 3 + (4 * 3) litres\n    # total_water = 3 + 12 litres\n    # total_water = 15 litres\n\n    # Equating the two expressions for total_water, we get:\n    # total_water + 4 = 5 litres\n    # And we already know that total_water is 15 litres:\n    # 15 + 4 = 5 litres\n    # This is not possible because the total_water cannot be 15 litres\n    \n    # The correct approach:\n    # If he uses a 5-litre pail, it overflows by 4 litres, which means the tank holds 1 litre less than a multiple of 5.\n    # If he uses a 3-litre pail and 4 more pails of water in addition to the initial 3 litre, it indicates the total water is 3 litres + 4 * 3 litres.\n    # That gives total_water = 3 + (4 * 3) = 3 + 12 = 15 litres\n\n    # Now we check to ensure that 15 litres of water will leave 4 litres overflow when using 5-litre pail.\n    # 15 % 5 = 0, thus 15 litres of water does not leave any overflow.\n    # Since we know the overflow occurs, and the amount of water is 1 litre less than a multiple of 5, we add 1 more litre to make it a multiple of 5.\n    # 15 + 1 = 16 litres gives us the correct amount which overflows 4 litres from the 5-litre pail.\n    # Therefore, the tank can hold (16 - 4) litres of water without overflowing when using a 5-litre pail.\n\n    total_water = 16 - 4\n    return total_water\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_sequence = \"6129043\"\n    sequence_sum = sum(int(digit) for digit in recurring_sequence)\n    full_repeats, remaining_digits = divmod(212, len(recurring_sequence))\n    total_sum = full_repeats * sequence_sum + sum(int(recurring_sequence[i]) for i in range(remaining_digits))\n    return total_sum\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    for n in range(1, 100):\n        if n * n + n + n + 1 == n * n + 31:\n            total_soldiers = (n + 1) * (n + 1)\n            return total_soldiers\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = ginkgo_trees - 1\n\n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    def find_trailing_zeros(num):\n        count = 0\n        i = 5\n        while num // i >= 1:\n            count += num // i\n            i *= 5\n        return count\n    \n    n = 1\n    while True:\n        if find_trailing_zeros(n) == 28:\n            break\n        n += 1\n    \n    return n\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    result = (2/3) * 729\n    return result\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    n_people = 12\n    handshakes = n_people * (n_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    cost_of_lemonade = 5 * 1.09\n    cost_of_chocolate = 6 * 0.55\n    total_cost = cost_of_lemonade + cost_of_chocolate\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam = symbols('sam')\n    equation = Eq(sam + 4, 2 * (sam - 4))\n\n    current_age = solve(equation, sam)\n\n    return current_age[0]\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # At worst, Daniel could pick all the different colors without getting a matching pair.\n    # Since there are 5 different colors of socks, he could pick 5 socks at worst without a matching pair.\n\n    # To ensure a pair, he would need to pick one more sock.\n    first_pair_picks = 5 + 1\n\n    # After securing the first pair, there are 4 different colors left.\n    # For the worst case, Daniel could pick one of each of the remaining colors.\n    second_pair_picks = 4\n\n    # To ensure a second pair, he needs one more pick.\n    final_pick = 1\n\n    # Total picks needed to have two matching pairs.\n    total_picks = first_pair_picks + second_pair_picks + final_pick\n    return total_picks\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the given digits\n    digits = '3728'\n    perm = permutations(digits)\n\n    # Find the smallest odd number made from permutations\n    smallest_odd = None\n    for p in perm:\n        number = int(''.join(p))\n        if number % 2 == 1:\n            if smallest_odd is None or number < smallest_odd:\n                smallest_odd = number\n\n    return smallest_odd\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # The sum of the first n terms of an arithmetic progression is given by:\n    # S_n = n/2 * (2a + (n-1)d)\n    # where a is the first term, n is the number of terms, and d is the common difference.\n    # According to the problem, we have two equations:\n    # S_10 = 20 = 10/2 * (2a + (10-1)d) => 2a + 9d = 4\n    # S_30 = 90 = 30/2 * (2a + (30-1)d) => 2a + 29d = 6\n    \n    # We can solve the two equations to find d.\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    equation1 = Eq(2*a + 9*d, 4)\n    equation2 = Eq(2*a + 29*d, 6)\n\n    solutions = solve((equation1, equation2), (a, d))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    # Total number of letters in RAINBOW\n    total_letters = 7\n    # Number of vowels in RAINBOW\n    vowels = 3\n    # Number of consonants in RAINBOW\n    consonants = 4\n\n    # Calculate the factorial of total letters, vowels, and consonants\n    total_permutations = factorial(total_letters)\n    vowel_permutations = factorial(vowels)\n    consonant_permutations = factorial(consonants)\n\n    # Calculating the number of permutations where vowels are together\n    # Treat the vowels as a single unit. Now we have 5 units to arrange (4 consonants + 1 unit of vowels)\n    permutations_with_vowels_together = factorial(consonants + 1) * vowel_permutations\n\n    # Subtracting the number of permutations where vowels are together from the total permutations\n    permutations_with_vowels_apart = total_permutations - permutations_with_vowels_together\n\n    return permutations_with_vowels_apart\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    # Initialize a variable to hold the answer\n    ans = None\n    # Check multiples of 4 between 10 and 20\n    for i in range(10, 21):\n        if i % 4 == 0 and 36 % i == 0:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    ans = 3.462 / 0.3\n    return ans\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    equation1 = Eq(chickens + goats, 40)\n    equation2 = Eq(3 * chickens, 5 * cows)\n    equation3 = Eq(2 * goats, 10 * cows)\n\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    chicken_feet = 2 * solutions[chickens]\n    goat_feet = 4 * solutions[goats]\n    cow_feet = 4 * solutions[cows]\n\n    total_feet = chicken_feet + goat_feet + cow_feet\n\n    return total_feet\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_amy = 5\n    ratio_penny = 4\n    combined_ratio = ratio_amy + ratio_penny\n\n    stickers_penny = (total_stickers * ratio_penny) // combined_ratio\n\n    return stickers_penny\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes_per_day = 9\n    days = 6\n\n    words_per_day = words_per_minute * minutes_per_day\n    total_words = words_per_day * days\n\n    return total_words\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6\n    time_seconds = 300\n\n    speed_mps = speed_kmh * (1000 / 3600)\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    sum_sequence = sum(range(200, 209, 2))\n    return sum_sequence\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    closest_num = None\n    min_difference = float('inf')\n    \n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        difference = abs(num - 2978)\n        \n        if difference < min_difference:\n            min_difference = difference\n            closest_num = num\n    \n    return closest_num\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    sold_apples = 40\n    fraction_sold = 4 / 7\n\n    brought_yesterday = sold_apples / fraction_sold\n    fraction_brought = 1 / 2\n\n    total_apples = brought_yesterday / fraction_brought\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let the numbers be a, b, c, d\n    # Given that (a + b) / 2 = 10 => a + b = 20\n    a_plus_b = 20\n\n    # Given that (c + d) / 2 = 22 => c + d = 44\n    c_plus_d = 44\n\n    # Given that (a + d) / 2 = 14 => a + d = 28\n    a_plus_d = 28\n\n    # To find the average of b and c, we can use the totals we have\n    # Average of b and c = (b + c) / 2\n    # We know a + b, c + d, and a + d, thus we can find b + c:\n    # a + b + c + d = (a + d) + (b + c)\n    # But a + b + c + d is a + b + c + d = (a + d) + (b + c) = 20 + 44\n    \n    total = a_plus_b + c_plus_d\n    # Now we subtract a + d from the total to get b + c\n    b_plus_c = total - a_plus_d\n\n    # Finally, calculate the average of b and c\n    average_middle_numbers = b_plus_c / 2\n    return average_middle_numbers\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    lines = 10\n    ans = 1 + lines * (lines + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    result = []\n    for i in range(10, 100):         # 2-digit numbers start from 10 to 99\n        if i % 7 == 0:               # Checking for a multiple of 7\n            for j in range(i, 100):  # Start the second loop from i to avoid duplicates\n                if j % 7 == 0 and i * j == 7007: # Checking condition\n                    result.append((i, j))\n\n    # Assuming there is only one such pair that meets the condition\n    first_num, second_num = result[0]\n    return first_num + second_num  # returning the sum\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    # Perform the inverse operations\n    original_number = (result + 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    # Arithmetic sequence sum formula: S_n = n/2 * (a_1 + a_n)\n    # where S_n is the sum of n terms, a_1 is the first term and a_n is the n-th term\n\n    # First term (a_1) is the number of seats in the front row\n    a_1 = 48\n    # Last term (a_n) is the number of seats in the last row\n    a_n = 80\n    # Common difference (d) is the difference in number of seats between rows\n    d = 4\n\n    # Calculate the total number of rows (n)\n    n = (a_n - a_1) // d + 1\n\n    # Calculate the sum of seats (S_n)\n    S_n = n/2 * (a_1 + a_n)\n\n    return int(S_n)\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    # Given average of A and B\n    average_ab = 22\n\n    # Value of C\n    C = 19\n\n    # Sum of A and B\n    sum_ab = average_ab * 2\n\n    # Sum of A, B, and C\n    sum_abc = sum_ab + C\n\n    # Average of A, B, and C\n    average_abc = sum_abc / 3\n\n    return average_abc\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "from datetime import date\n\ndef solution():\n    birth_date = date(1533, 9, 7)\n    death_date = date(1603, 3, 24)\n    age = death_date.year - birth_date.year - ((death_date.month, death_date.day) < (birth_date.month, birth_date.day))\n    return age\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n\n    remainder = total_coins % children\n\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    # Applying Pigeonhole Principle formula: (n-1)//m+1\n    max_cakes_in_a_layer = (total_cakes - 1) // layers + 1\n    return max_cakes_in_a_layer\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let's denote C as the sum of ages of Chinese teachers,\n    # E as the sum of ages of English teachers,\n    # and M as the sum of ages of Mathematics teachers.\n    \n    # From the given problem, we have the following equations:\n    # (C + E) / 2 = 34 => C + E = 68\n    # (E + M) / 2 = 36 => E + M = 72\n    # (C + M) / 2 = 44 => C + M = 88\n  \n    # Add all the equations:\n    # (C + E) + (E + M) + (C + M) = 68 + 72 + 88\n    # 2*(C + E + M) = 228\n    # C + E + M = 114\n\n    # Since we want the average age of these 3 subject teachers, we shall divide by 3 instead of 2.\n    avg_age = 114 / 3\n    return avg_age\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    rope_length = 23\n    max_square_side = int(rope_length ** 0.5)\n    length_to_cut = rope_length - max_square_side * max_square_side\n    return length_to_cut\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    result = (21 + 1) * 7 - (20 + (1 * 7))\n    return result\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        total += (2018 + i) / 5 - (2018 + i) // 5\n    return total\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    d = symbols('d')  # The difference between the number of cookies in two adjacent boxes\n    # Sum of arithmetic series formula: S_n = n/2 * (2 * a1 + (n - 1) * d), where\n    # S_n is the sum of n terms, a1 is the first term, and d is the common difference.\n    # Here, a1 is given as 11, n is 10, and S_n is 425.\n    sum_series_eq = Eq(10 / 2 * (2 * 11 + (10 - 1) * d), 425)\n\n    solution_d = solve(sum_series_eq, d)\n\n    return int(solution_d[0])\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be Chelsia's money and y be Benson's money\n    chelsia, benson = symbols('chelsia benson')\n    \n    # Setting up the equations based on the problem statement\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia, benson - 18)\n    \n    # Solving the system of equations for Chelsia and Benson's money\n    solutions = solve((equation1, equation2), (chelsia, benson))\n    \n    # Calculating the total sum of Chelsia and Benson's money\n    total_sum = solutions[chelsia] + solutions[benson]\n    \n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Let the first term of the sequence of odd numbers be a\n    # The terms are a, a+2, a+4, a+6, a+8, a+10, a+12 since they are consecutive odd numbers\n    # The sum of an arithmetic sequence is given by the formula: sum = n/2 * (first_term + last_term)\n    n = 7 # The number of terms\n    last_term = 'a + 12'  # Expression for the last term\n    sum_of_sequence = 357  # The given sum of the sequence\n    \n    # Let's setup our equation based on the sum of arithmetic sequence formula\n    # sum = n/2 * (first_term + last_term)\n    # 357 = 7/2 * (a + (a + 12))\n    # Simplifying the above equation will yield the value of 'a'\n    \n    first_term = (sum_of_sequence / n) * 2 - 12\n    return int(first_term)\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum(1 / i for i in range(1995, 2009))\n    A = 1 / A_inverse\n    return int(A)\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total = factorial(5) # Calculate the factorial of 5 for all permutations\n    repeat_1 = factorial(2) # Calculate the factorial of 2 for the repeated '1's\n    ans = total // repeat_1 # Divide by the factorial of the number of repeats\n    return ans\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of a chair and a table\n    table, chair = symbols('table chair')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for number in range(200, 401):  # search within the specified range\n        if all([\n            number % 3 == 2,\n            number % 4 == 2,\n            number % 5 == 2,\n            number % 7 == 5\n        ]):\n            return number\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for speed\n    speed_martin, speed_carter = symbols('speed_martin speed_carter')\n    \n    # Speed relation between Martin and Carter\n    equation_speed = Eq(speed_martin, speed_carter + 20)\n    \n    # Time ratio 9:13 means the speed ratio is the inverse 13:9\n    equation_ratio = Eq(speed_martin / speed_carter, 13/9)\n    \n    # Solve the equations for Carter's speed\n    solutions = solve((equation_speed, equation_ratio), (speed_martin, speed_carter))\n    \n    return solutions[speed_carter]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - (x1 + x2)\n            if x3 > 0 and x1 != x2 and x2 != x3 and x1 != x3:\n                count += 1\n    return count // 6  # dividing by 6 due to overcounting for each permutation\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Create congruence equations based on the problem statement:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Use the Chinese Remainder Theorem to solve the congruences\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # The only even prime number is 2, since every other even number has at least\n    # 2 and itself as factors, meaning they are not prime.\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    # Fred and George together rate\n    fg_rate = 1 / 6\n\n    # Fred's rate\n    f_rate = 1 / 9\n\n    # George's rate\n    g_rate = fg_rate - f_rate  # because 1/F + 1/G = 1/FG\n\n    # George's time\n    g_time = 1 / g_rate\n\n    return g_time\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    total_cloth = 18\n    remaining_cloth = total_cloth - x\n    return remaining_cloth\n\nans = solution(x)  # You need to define the value of x before calling the function"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "def solution():\n    from fractions import Fraction\n\n    ans = Fraction(3) / Fraction(1, 3)\n    return ans\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    ans = 543 + 284\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # If we take out one more than the number of yellow apples,\n    # we are assured to have at least one pair of red apples.\n    ans = 20 + 1\n    return ans\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    # There are 5 choices for each of the 4 people\n    ways_for_tina = 5\n    ways_for_joe = 5\n    ways_for_mike = 5\n    ways_for_black = 5\n\n    # Since the order in which they enter matters, we multiply the possibilities for each person\n    total_ways = ways_for_tina * ways_for_joe * ways_for_mike * ways_for_black\n\n    return total_ways\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Number of red pens left\n    red_pens_left = 20\n    \n    # Initial ratio\n    initial_ratio_red_to_black = 3 / 7\n    \n    # Final ratio\n    final_ratio_red_to_black = 5 / 13\n    \n    # From the final ratio, calculate the number of black pens left\n    black_pens_left = (red_pens_left / 5) * 13\n    \n    # Calculate the total number of pens sold (which is the same for red and black)\n    pens_sold = (black_pens_left / 7 - red_pens_left / 3) / (final_ratio_red_to_black - initial_ratio_red_to_black)\n    \n    # Calculate the initial number of red pens before selling\n    initial_red_pens = red_pens_left + pens_sold\n    \n    return pens_sold\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    return 2.42 * 1.6\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Number of legs for each pet type\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Number of each pet type\n    cats = 2\n    dogs = 2\n    rabbits = 1\n\n    # Calculate the total legs for cats, dogs, and rabbits\n    total_legs_without_birds = (cats * cat_legs) + (dogs * dog_legs) + (rabbits * rabbit_legs)\n\n    # Given total number of legs\n    total_legs = 28\n\n    # Calculate the number of birds by subtracting the legs of other pets from the total\n    birds = (total_legs - total_legs_without_birds) // bird_legs\n\n    return birds\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # Given that the house value increased by 5% and the value was £10,500 after one year\n    value_after_increase = 10500\n    # Calculate the original value of the house before the increase\n    original_value = value_after_increase / 1.05\n\n    # Now the house value decreases by 5%\n    value_after_decrease = original_value * (1 - 0.05)\n\n    # Calculate the profit or loss by comparing it with the original value of the house\n    profit_or_loss = value_after_decrease - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_by_5 = 200 // 5\n    count_by_7 = 200 // 7\n    count_by_35 = 200 // 35  # 5*7\n\n    # Apply Inclusion-Exclusion Principle\n    ans = count_by_5 + count_by_7 - count_by_35\n\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    third_of_number = 27\n    number = third_of_number * 3\n    return number\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for factor in factors_of_42:\n        if 10 < factor < 20:\n            return factor\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers_sum = 6 * 4  # Average * Total numbers\n    sum_of_known_numbers = 8 + 3 + 9\n    missing_number = numbers_sum - sum_of_known_numbers\n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen_price, ruler_price = symbols('pen_price ruler_price')\n\n    # equation representing the total cost\n    equation1 = Eq(2 * ruler_price + 9 * pen_price, 21.60)\n    # equation representing the cost difference between a ruler and a pen\n    equation2 = Eq(ruler_price, pen_price + 0.90)\n\n    solutions = solve((equation1, equation2), (pen_price, ruler_price))\n\n    return round(solutions[ruler_price], 2)\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n\n    num_bags = total_weight / bag_weight\n    return int(num_bags) if num_bags.is_integer() else int(num_bags) + 1\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    result += 50  # Step 8: Add 50\n    # Now, result = (Month * 4 + 6) * 5 * 5 + Day - 20 * 5 = Day + Month * 100\n    \n    day = result % 100  # Extract day\n    month = (result - day) // 100  # Extract month\n\n    return (month, day)\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 50))  # Generate all primes less than 50\n    for prime in primes:\n        if prime < 50:\n            if (prime + 2) % 5 == 0 and (prime + 2) <= 50 and \\\n               (prime - 2) % 3 == 0 and (prime - 2) >= 0:\n                return prime\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        first = int(''.join(perm[:3]))\n        second = int(''.join(perm[3:5])) * 10 + int(perm[6])\n        third = int(''.join(perm[5:6])) * 100 + int(''.join(perm[3:5]))\n        \n        if second == 2 * first and third == 4 * first:\n            ans = third\n            return ans\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # Calculate the sum of the increasing sequence from 4 to 400\n    # This forms an arithmetic sequence with:\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms_increasing = (last_term - first_term) // difference + 1\n    sum_increasing = (num_terms_increasing / 2) * (first_term + last_term)\n\n    # Calculate the sum of the decreasing sequence from 396 to 4\n    # This also forms an arithmetic sequence with:\n    first_term_decreasing = 396\n    sum_decreasing = sum_increasing - first_term_decreasing - last_term\n\n    # Combine the sums\n    total_sum = sum_increasing + sum_decreasing\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    ans = 24 * 7\n    return ans\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    cup_price = 5\n    refill_price = 1\n    richards_money = 10\n\n    cups = 1 + (richards_money - cup_price) // refill_price\n\n    return cups\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # Number of peaches eaten by one monkey in one day\n    peaches_per_monkey_per_day = 96 / (3 * 2)\n    \n    # Total number of peaches eaten by 5 monkeys in 4 days\n    total_peaches = peaches_per_monkey_per_day * 5 * 4\n    \n    return int(total_peaches)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    story_books = 2\n    comic_books = 3\n    science_books = 4\n\n    # Calculate permutations within each category\n    story_perm = factorial(story_books)\n    comic_perm = factorial(comic_books)\n    science_perm = factorial(science_books)\n\n    # Calculate permutations for the categories themselves (3 categories)\n    category_perm = factorial(3)\n\n    # Calculate total permutations\n    total_permutations = story_perm * comic_perm * science_perm * category_perm\n\n    return total_permutations\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    income = 120000\n    base_tax_rate = 0.06\n    base_tax_amount = 50000 * base_tax_rate\n    additional_income = income - 50000\n    tax_paid = 10000\n    \n    T = symbols('T')\n    equation = Eq(base_tax_amount + additional_income * ((base_tax_rate + T) / 100), tax_paid)\n\n    T_value = solve(equation, T)[0]\n\n    return float(T_value)\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    ways = 0\n    total_ice_creams = 5\n    minimum_ice_creams = 1\n\n    for zyan in range(minimum_ice_creams, total_ice_creams - 2*minimum_ice_creams + 1):\n        for xuan_ying in range(minimum_ice_creams, total_ice_creams - zyan - minimum_ice_creams + 1):\n            sicheng = total_ice_creams - zyan - xuan_ying\n            if sicheng >= minimum_ice_creams:\n                ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Average spending from January to March\n    jan_to_mar = 450 * 3\n    # Average spending from April to July\n    apr_to_jul = 350 * 4\n    # Total spending from August to October\n    aug_to_oct = 1250\n    # Average spending from November to December\n    nov_to_dec = 400 * 2\n\n    # Total spending for the whole year\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    # Total months in a year\n    months_in_year = 12\n\n    # Calculate the average spending per month from January to December\n    average_per_month = total_spent / months_in_year\n\n    return average_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # m/min\n    cycling_speed = 60  # m/min\n\n    # Let's assume the distance to the library is 'd' meters\n    # Time taken to walk to the library: time_walking = d / walking_speed\n    # Time taken to cycle back from the library: time_cycling = d / cycling_speed\n    \n    # Since time = distance / speed, the total time for both trips is the sum of the individual times\n    # total_time = time_walking + time_cycling = d / walking_speed + d / cycling_speed\n\n    # The total distance for both trips is 2 * d (to the library and back)\n    # total_distance = 2 * d\n\n    # Therefore, average speed = total distance / total time.\n    # Substitute total_distance and total_time to get:\n    # average_speed = (2 * d) / (d / walking_speed + d / cycling_speed)\n\n    # The 'd' terms will cancel out in the above equation, therefore it is not needed to know the exact distance 'd'\n    average_speed = (2 * walking_speed * cycling_speed) / (walking_speed + cycling_speed)\n    \n    return average_speed\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Suppose the cost of one serving is x dollars.\n    # Equation based on given information:\n    # 5*x = total_money + 2.30\n    # 3*x = total_money - 0.30\n    # Simplifying both equation by eliminating x:\n    # 2*x = 2.60\n    # Solving for x:\n    x = 2.60 / 2\n    \n    # Now calculating total money using the value of x in second equation:\n    total_money = (3 * x) + 0.30\n    \n    return total_money\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    # Iterate possible values for M from 0 to 9 to find the one that makes 127M divisible by 25\n    for M in range(10):\n        total_sweets = int(\"127\" + str(M))\n        if total_sweets % 25 == 0:\n            # Calculate the number of sweets in each bag\n            sweets_per_bag = total_sweets // 25\n            return sweets_per_bag\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(9/x, y/2)\n    \n    # Solve the equation for y in terms of x\n    y_expr = solve(equation, y)[0]\n    \n    # Find the value of y when x = 3\n    y_value = y_expr.subs(x, 3)\n\n    return str(y_expr), y_value\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['2', '3', '5', '6']\n    smallest_odd = float('inf')\n    \n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 2 != 0 and num < smallest_odd:\n            smallest_odd = num\n    \n    return smallest_odd\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # If we remove 1 ball of each color,\n    # we have removed 2 balls but do not have two of the same color.\n    # But if we remove one more ball (the third ball),\n    # we will definitely have two balls of the same color.\n    ans = 2 + 1 # One more than one of each color\n\n    return ans\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let's assume the number we start with is x\n\n    # Add 3\n    x_plus_3 = lambda x: x + 3\n    # Multiply by 2\n    times_2 = lambda x: x * 2\n    # Take away 2\n    minus_2 = lambda x: x - 2\n    # Add 10\n    plus_10 = lambda x: x + 10\n    # Divide by 2\n    divide_2 = lambda x: x / 2\n    # Take away the number you started with\n    subtract_initial = lambda x, initial: x - initial\n\n    # Let's start with x and apply all the operations\n    initial = 0  # Can be any number, operations should yield the same result\n    result = x_plus_3(initial)\n    result = times_2(result)\n    result = minus_2(result)\n    result = plus_10(result)\n    result = divide_2(result)\n    result = subtract_initial(result, initial)\n\n    return result\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import pow, sqrt\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 5/3)\n\n    ans = round(numerator / denominator, 3)\n\n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    # Let Felicia's original number of bracelets be F.\n    # Let Janice's original number of bracelets be J, which is given as 96.\n    J = 96\n\n    # Felicia sold 3/5 of her bracelets, and Janice bought 2/5 of these sold bracelets.\n    # Let the number of bracelets Janice bought from Felicia be B.\n    # Then B = (3/5) * (2/5) * F = (6/25) * F\n\n    # After selling and buying, Felicia has (2/5) * F bracelets left.\n    # Janice now has J + B = 96 + (6/25) * F bracelets.\n\n    # The new ratio of Felicia's bracelets to Janice's bracelets is 5:7.\n    # Therefore, (2/5) * F / (96 + (6/25) * F) = 5/7\n\n    # Solving the proportion for F:\n    from sympy import symbols, Eq, solve\n\n    F = symbols('F')\n    equation = Eq((2/5) * F / (96 + (6/25) * F), 5/7)\n    solution_F = solve(equation, F)[0]\n\n    # Now, find the number of bracelets Janice bought from Felicia.\n    B = (6/25) * solution_F\n\n    return int(B)\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    # Define the cost of each type of book\n    cost_science_fictions = 4\n    cost_comic_books = 5\n    cost_novels = 6\n    \n    # Define the number of each type of book\n    num_science_fictions = 20\n    num_comic_books = 10\n    num_novels = 20\n    \n    # Calculate the total cost for each type of book\n    total_cost_science_fictions = cost_science_fictions * num_science_fictions\n    total_cost_comic_books = cost_comic_books * num_comic_books\n    total_cost_novels = cost_novels * num_novels\n    \n    # Calculate the total cost of all books\n    total_cost = total_cost_science_fictions + total_cost_comic_books + total_cost_novels\n    \n    # Calculate the total number of books\n    total_books = num_science_fictions + num_comic_books + num_novels\n    \n    # Calculate the average cost per book\n    avg_cost_per_book = total_cost / total_books\n    \n    return avg_cost_per_book\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n\n    equation1 = Eq(jack, 5 * kyle)\n    equation2 = Eq(kyle, 2/7 * (jack - 72))\n\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # In the worst case, Annabella could take out all the shirts of other colors.\n    # Therefore, the number of other color shirts is:\n    other_shirts = 6 + 4 + 12  # Orange + Pink + Brown\n\n    # To ensure she gets at least 1 yellow shirt, she needs to take out one more shirt.\n    return other_shirts + 1\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    ans = lcm(9, 10, 15)\n    return ans\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    rate = 0.05\n    time = 11\n    interest = principal * rate * time\n    total_amount = principal + interest\n    return total_amount\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    # Number of terms (n)\n    n = 20\n    # Sum of the sequence (S_n)\n    S_n = 560\n    # Common difference (d)\n    d = 2\n    # The formula for the sum of an arithmetic sequence:\n    # S_n = n/2 * (2a + (n - 1)d)\n\n    # We rearrange the formula to solve for the first term (a):\n    # 2a = (S_n * 2 / n) - (n - 1)d\n    a = (S_n * 2 / n - (n - 1) * d) / 2\n    \n    return a\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_cost = 35 / 100  # convert pence to pounds\n    total_individual_cost = 15 * individual_cost\n    savings = total_individual_cost - multipack_cost\n    \n    return savings\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_distance = 8\n    day_distance = 3\n    night_distance = 2\n    distance_after_slip = day_distance - night_distance\n\n    # The worm will reach the top during the day, so we calculate the days without the last climb\n    days_without_last_climb = (total_distance - day_distance) / distance_after_slip\n\n    if days_without_last_climb == int(days_without_last_climb):\n        # If the worm reaches exactly 5 meters at the end of a day, then it gets out the next day\n        ans = int(days_without_last_climb) + 1\n    else:\n        # Otherwise, we need to count the incomplete day as well\n        ans = int(days_without_last_climb) + 2\n\n    return ans\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    # Each 3/4 is equal to 3 times 1/4\n    # 3/4 + 3/4 + 3/4 can be rewritten as (3 * 1/4) + (3 * 1/4) + (3 * 1/4)\n    # This simplifies to 3 * (1/4 + 1/4 + 1/4)\n    # (1/4 + 1/4 + 1/4) = 3/4, so we multiply 3 by 3/4 to find the total number of 1/4s\n    total_quarters = 3 * (3 / 4)\n    \n    # We are told the sum equals 1 + (box) * 1/4, so we subtract 1 to find (box) * 1/4\n    missing_quarters = total_quarters - 1\n    \n    # To find the value in the box, we divide the missing quarters by 1/4\n    box_value = missing_quarters / (1 / 4)\n    \n    return box_value\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    # Calculate the total number of pages Eddie read\n    total_pages = (25 * 4) + (40 * 6) + 80\n    # Calculate the total number of days Eddie took to read the book\n    total_days = 4 + 6 + 5\n    # Calculate the average number of pages per day\n    average_pages_per_day = total_pages / total_days\n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # Let the original number of toys her brother had be x.\n    # Initially, Penny has x + 10 toys.\n    # After giving away some toys, Penny has 14 toys and her brother has 12 toys.\n    # We can set up the equation: (x + 10 - y) = 14 and (x + y) = 12, where y is the number of toys given.\n\n    # We can solve for x using the second equation: x = 12 - y\n    # Substitute x in the first equation: (12 - y + 10 - y) = 14\n    # Simplify the equation: 22 - 2y = 14\n\n    y = (22 - 14) / 2  # Solve for y, which gives y = 4\n    x = 12 - y  # Now, use y to solve for x\n\n    return x  # This is the original number of toys her brother had\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (3, 4),  # x ≡ 3 (mod 4)\n        (3, 5),  # x ≡ 3 (mod 5)\n        (5, 7),  # x ≡ 5 (mod 7)\n        (9, 11)  # x ≡ 9 (mod 11)\n    ]\n    \n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    # I will perform a simple multiplication that is likely to be outside\n    # of the traditional multiplication table range (i.e., beyond 12x12)\n\n    # Let's say we multiply 123 by 456, which would be outside of the\n    # common multiplication tables taught in schools\n    number1 = 123\n    number2 = 456\n\n    # Perform the multiplication\n    ans = number1 * number2\n\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1])  # Interchange the digits\n        if age == 2 * (reversed_age + 1):\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    ans = 3588 // 13\n    return ans\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Each suit has a maximum of 3 cards before Tom is guaranteed to have 4 of a suit\n    # Therefore, for the 4th suit, he just needs to draw one more card to be sure he has 4 of a suit\n    max_cards_without_four_of_a_kind = 3 * 4\n    ans = max_cards_without_four_of_a_kind + 1\n    return ans\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percentage_sold = 60 / 100\n    remaining_tickets = 28\n    total_capacity = remaining_tickets / (1 - percentage_sold)\n    return int(total_capacity)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for the amount spent\n    spent = symbols('spent')\n\n    # Initial amounts saved\n    hayden_saved = 1420\n    mitchell_saved = 505\n\n    # Hayden's and Mitchell's amounts after spending\n    hayden_left = hayden_saved - spent\n    mitchell_left = mitchell_saved - spent\n\n    # Equation based on the problem statement\n    equation = Eq(hayden_left, 4 * mitchell_left)\n\n    # Solve for the amount spent\n    solution = solve(equation, spent)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    number = 15 * 4\n    two_thirds = (number * 2) / 3\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    girls = 45\n    # Since 3/8 of the children were boys, 5/8 were girls.\n    children = girls * (8 / 5)\n    # Adults made up 3/7 of the total, so children made up 4/7 of the total.\n    total_people = children * (7 / 4)\n    return int(total_people)\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    two_dollar_notes = 5\n    fifty_cent_coins = 7\n    two_dollar_total = two_dollar_notes * 2\n    fifty_cent_total = fifty_cent_coins * 0.50\n    file_cost = 11.95\n    \n    total_money = two_dollar_total + fifty_cent_total\n    money_left = total_money - file_cost\n    \n    return round(money_left, 2)\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_to_n = n * (n + 1) // 2\n    return sum_to_n\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = saturday_sales - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    net_distance = day_distance - night_distance\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n\n        if current_distance >= total_distance:\n            break\n        \n        current_distance -= night_distance\n        \n    return days\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    # Calculate the number of ways 3 pupils can be seated in a row\n    # This can be calculated using the permutations formula: P(n, r) = n! / (n-r)!\n    # where n is total number of pupils and r is number of pupils to be seated in a row\n    n = 18\n    r = 3\n    num_ways = factorial(n) // factorial(n - r)\n\n    return num_ways\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    spaces_between_ginkgo = ginkgo_trees - 1\n    willow_trees_per_space = 2\n    total_willow_trees = spaces_between_ginkgo * willow_trees_per_space\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    return 10 - 2\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_in_still_water = 28\n    speed_of_current = 3\n    distance = 150\n\n    upstream_speed = speed_in_still_water - speed_of_current\n    time_to_travel_upstream = distance / upstream_speed\n\n    return time_to_travel_upstream\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the amount of money Andrew, Brian, and Christopher have as A, B, and C respectively.\n    A, B, C = symbols('A B C')\n    \n    # According to the problem, we have the following equations:\n    equation1 = Eq(A + B, 40)  # Andrew and Brian have £40 together\n    equation2 = Eq(A + C, 37)  # Andrew and Christopher have £37 together\n    equation3 = Eq(B + C, 25)  # Brian and Christopher have £25 together\n    \n    # We want to find the value for A, B, and C\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Total money is the sum of money of Andrew, Brian, and Christopher.\n    total_money = solutions[A] + solutions[B] + solutions[C]\n    \n    return total_money\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Let A, B, and C represent the weights of Adam, Ben, and Carl respectively.\n    # According to the problem we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    \n    # Adding all three equations we get:\n    # 2A + 2B + 2C = 292\n    # Dividing both sides by 2 we get the total weight\n    total_weight = (102 + 97 + 93) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x - 4, 26)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = ramen_price * 6\n    total_spent = ramen_price + pineapple_juice_price + roasted_duck_price\n    return total_spent\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_cost = 7.48 * (500 / 1000)\n    apples_cost = 8 * 0.12\n    yogurts_cost = 2 * 0.46\n    total_cost = cheese_cost + apples_cost + yogurts_cost\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    zack_rate = 150\n    total_aircrafts = 1200\n    combined_time = 6\n    combined_rate = total_aircrafts / combined_time\n    \n    andy_rate = combined_rate - zack_rate\n    andy_time = total_aircrafts / andy_rate\n    \n    return andy_time\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    # Let the total number of layers be n.\n    # For odd layers, it will be students, and for even layers, it will be teachers.\n    # The total number of people in the ith layer is equal to the perimeter of the square\n    # for that layer minus 4 (since the corners are counted twice).\n    # The side length for the ith layer will be i, assuming a unit square for simplicity.\n    # Hence, the number of people in the ith layer is 4*i - 4.\n    \n    # We know the difference between the number of students and teachers is 80.\n    # We can start testing with the smallest square that has more students than\n    # teachers and increase the size until we satisfy the condition.\n    \n    # We will assume the smallest square has a size of 3 (1 teacher surrounded by 8 students).\n    # This is because we must have at least one layer of each - students and teachers - for the\n    # problem to make sense, it cannot be a 1x1 array since that would have 0 teachers.\n    # The total number of people will be the sum of the series: 4*1, 4*2 - 4, 4*3 - 4, ..., 4*n - 4\n    # Lets find n using a brute force approach:\n\n    n = 3 # Starting with 3 as explained above\n    students = 0\n    teachers = 0\n    while True:\n        # Total people in the nth layer\n        if n % 2 == 1: # Odd layer, students\n            students += 4*n - 4\n        else: # Even layer, teachers\n            teachers += 4*n - 4\n            \n        if students - teachers == 80:\n            # Return the total number of people\n            return students + teachers + 1 # +1 to include the initial teacher\n        \n        n += 1\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts collected by Chloe, David, and Emily\n    chloe, david, emily = symbols('chloe david emily')\n\n    # Set up the equations based on the problem description\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    # Get the amount collected by Chloe\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_ratio = 2 + 7 + 6\n    orange_ratio = 7\n\n    drink_total = 300\n    orange_volume = (orange_ratio / total_ratio) * drink_total\n\n    return orange_volume\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(x, 3 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    saved_daily = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = saved_daily * days_saved\n    remaining_amount = original_amount + total_saved - lent_to_brother - spent_on_snacks\n\n    return remaining_amount\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Mark's amount be a variable 'x'\n    steve, mark, ryan = symbols('steve mark ryan')\n    meal_cost = symbols('meal_cost')\n\n    # According to the condition, Steve has ＄40 more than Mark\n    equation1 = Eq(steve, mark + 40)\n    \n    # If Steve paid for the meal, the amounts left are in the ratio 3:8:9 respectively\n    equation2 = Eq((steve - meal_cost)/3, (mark/8))\n    equation3 = Eq((mark/8), (ryan/9))\n\n    # If Ryan paid for the meal, the amounts left are in the ratio 5:4:1 respectively\n    equation4 = Eq((steve/5), (mark/4))\n    equation5 = Eq((ryan - meal_cost)/1, (mark/4))\n\n    # If Mark paid for the meal, the amounts left are in the ratio 10:1:9 respectively\n    equation6 = Eq((steve/10), ((mark - meal_cost)/1))\n    equation7 = Eq(((mark - meal_cost)/1), (ryan/9))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), \n                      (steve, mark, ryan, meal_cost))\n\n    return solutions[meal_cost]\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    initial_amount = 28.74\n    repaid_mum = 10.50\n    remaining_amount = initial_amount - repaid_mum\n    spent_on_magazines = remaining_amount / 2\n    amount_left = remaining_amount - spent_on_magazines\n\n    return amount_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    q = 44000\n    cube_root_q = q ** (1/3)\n    \n    while not cube_root_q.is_integer():\n        q -= 1\n        cube_root_q = q ** (1/3)\n    \n    return q\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for length and width\n    length, width = symbols('length width')\n    \n    # The length of the rectangle is twice its width\n    equation1 = Eq(length, 2*width)\n    \n    # The perimeter is 72 meters\n    equation2 = Eq(2*length + 2*width, 72)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (length, width))\n    \n    return solutions[length]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    num = 81\n    factor_count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factor_count += 1\n    return factor_count\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    third_term = 23\n    fifteenth_term = 155\n    n_diff = 15 - 3\n\n    common_difference = (fifteenth_term - third_term) / n_diff\n    \n    return common_difference\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')  # Scores of Student A and Student B\n    \n    equation1 = Eq(B, A - 50)  # B is 50 points less than A\n    equation2 = Eq(A + 25, 5 * (B - 25))  # A's score after giving 25 points is 5 times B's score after giving 25 points\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    g = 9.81  # acceleration due to gravity in m/s^2\n    coefficient_of_static_friction = 0.4  # coefficient of static friction\n    force_applied = 250  # force applied in N\n\n    # Calculating the normal force, which is the force perpendicular to the floor\n    normal_force = mass * g\n\n    # Calculating the maximum force of static friction\n    max_static_friction = coefficient_of_static_friction * normal_force\n\n    # The force of static friction that acts on the crate is the minimum\n    # of the applied force and the maximum force of static friction.\n    force_of_static_friction = min(force_applied, max_static_friction)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    i = 1\n    while True:\n        square = i * i\n        cube_root = round(square ** (1/3))\n        if cube_root ** 3 == square - 1:\n            return square\n        i += 1\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    ans = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return ans\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n    \n    parts_per_hour_per_worker = total_parts / (total_workers * total_hours)\n\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    total_distance = 16\n    distance_per_day = 5\n    slide_per_night = 3\n    effective_distance = distance_per_day - slide_per_night\n\n    # The snail reaches the top before slipping back on the last day\n    days = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += distance_per_day\n\n        # Check if the snail has climbed out of the burrow\n        if distance_climbed >= total_distance:\n            break\n\n        distance_climbed -= slide_per_night\n    \n    return days\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    # We will use two variables, j for James's buttons and n for Nina's buttons\n    # According to the problem we have two equations:\n    # Equation 1 -> j + n = 24\n    # Equation 2 -> n - 6 = j + 6\n    \n    # We will solve the equations by substituting j from Equation 1 into Equation 2.\n    \n    # From Equation 1: j = 24 - n\n    # Substitute j into Equation 2: n - 6 = (24 - n) + 6\n    \n    # Now solve the second equation for n\n    n = (24 + 6 + 6) // 2  # The // operator is used for integer division\n\n    return n\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Given that there is a tax of $0.05 charged for each bag used\n    tax_per_bag = 0.05\n\n    # Let x represent the number of bags used\n    x = symbols('x')\n\n    # Let y represent the tax charged\n    y = symbols('y')\n\n    # The relationship between the number of bags used and the tax charged is\n    # y = tax_per_bag * x\n    equation = Eq(y, tax_per_bag * x)\n\n    # We are not actually solving the equation here, just providing it\n    return equation\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    coins = symbols('coins')\n    equations = [\n        Eq(coins % 4, 3),\n        Eq(coins % 5, 3),\n        Eq(coins % 7, 3),\n        Eq(coins % 9, 0)\n    ]\n    \n    ans = solve(equations, coins)\n    return min(ans)\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction_value = 8 / 100\n    decimal_value = 0.7\n    ans = decimal_value if decimal_value > fraction_value else fraction_value\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return result\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    # Define the weight ratio\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n\n    # Calculate how many chickens weigh as much as one dog\n    chickens_for_one_dog = dog_to_rabbit * rabbit_to_chicken\n\n    return chickens_for_one_dog\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    ans = 1\n    for i in range(2, 51):\n        ans *= ((1/i) - (1/(102-i)))\n    return ans\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    flat_fee = 30\n    daily_fee_short = 25\n    daily_fee_long = 20\n    total_paid = 275\n    max_short_term_days = 5\n    total_days = 0\n    \n    # Calculate the cost for 5 days or less\n    cost_for_max_short_term = flat_fee + (daily_fee_short * max_short_term_days)\n    \n    if total_paid <= cost_for_max_short_term:\n        # If total cost is less than or equal to max short term cost,\n        # find days within 5 day limit\n        total_days = (total_paid - flat_fee) // daily_fee_short\n    else:\n        # Cost is more than max short term, calculate additional days\n        additional_days = (total_paid - cost_for_max_short_term) // daily_fee_long\n        total_days = max_short_term_days + additional_days\n    \n    return total_days\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    # Sam had an equal number of green and yellow toy cars\n    equation1 = Eq(green, yellow)\n\n    # After giving away 60 green toy cars and 14 yellow toy cars\n    equation2 = Eq(green - 60, yellow - 14)\n\n    # He had thrice as many yellow toy cars as green toy cars\n    equation3 = Eq(yellow - 14, 3 * (green - 60))\n\n    solutions = solve((equation1, equation2, equation3), (green, yellow))\n\n    # he had green cars left after giving away 60\n    green_cars_left = solutions[green] - 60\n\n    return green_cars_left\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.10\n    total_distance = initial_height  # to include the first drop\n\n    while initial_height * rebound_ratio > 0:\n        initial_height *= rebound_ratio\n        total_distance += 2 * initial_height  # for both the ascent and the descent\n\n    return total_distance\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    total_distance = 3000\n    buck_speed = 600  # metres per minute\n    elephant_speed = 250  # metres per minute\n\n    buck_time = total_distance / buck_speed\n    elephant_time = total_distance / elephant_speed\n\n    time_difference = elephant_time - buck_time\n    return time_difference\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # Let n be the number of the first page on the sheet in question.\n    # The other pages will be n+1, 2*sheets - n + 1, and 2*sheets - n. (since after folding sheet in half,\n    # the page on the opposite side of first will be the last, thus 2*sheets - n)\n    # The sum of page numbers on that sheet will be:\n    # n + (n+1) + (2*sheets - n + 1) + (2*sheets - n) = 58\n    # This simplifies to:\n    # 4*sheets + 2 = 58\n    # Thus:\n    # 4*sheets = 56\n    # sheets = 56 / 4 = 14\n    # Therefore, there were 14 sheets of paper at the start.\n    \n    return 14\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    # Calculate the sum of the first part 4+8+12+...+396+400\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = (last_term - first_term) // difference + 1\n    sum_forward = num_terms * (first_term + last_term) // 2\n    \n    # Calculate the sum of the second part 396+...+12+8+4\n    # The second part is the same as the first part, just without the last term\n    second_last_term = 396\n    num_terms_second_part = (second_last_term - first_term) // difference + 1\n    sum_backward = num_terms_second_part * (first_term + second_last_term) // 2\n    \n    # The total sum is the sum of both parts\n    total_sum = sum_forward + sum_backward\n    return total_sum\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apple_percentage = 15\n    bad_apples = (bad_apple_percentage / 100) * total_apples\n    return bad_apples\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    cost_of_12_pencils = 1.80\n    cost_of_1_pencil = cost_of_12_pencils / 12\n    ratio_pen_to_pencil = 7 / 3\n    cost_of_1_pen = cost_of_1_pencil * ratio_pen_to_pencil\n    cost_of_5_pens = cost_of_1_pen * 5\n    return cost_of_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    # Define the speeds in km/h\n    speed_simon = 80\n    speed_wife = 60\n\n    # Define the difference in distances from their offices to the point where Simon overtakes his wife\n    distance_diff = 15\n\n    # Relative speed at which Simon is closing the distance to his wife in km/h\n    relative_speed = speed_simon - speed_wife\n\n    # Find the time required for Simon to overtake his wife in hours\n    time_to_overtake = distance_diff / relative_speed\n\n    # Initial time when they both left their offices in hours and minutes\n    initial_hour = 18\n    initial_minutes = 10\n\n    # Convert the time to overtake into minutes\n    overtake_minutes = time_to_overtake * 60\n\n    # Calculate the total minutes when Simon overtakes his wife\n    total_minutes = initial_minutes + overtake_minutes\n\n    # Convert back to hours and minutes\n    overtake_hour = initial_hour + int(total_minutes // 60)\n    overtake_minute = int(total_minutes % 60)\n    \n    # Since the time is in the evening and can exceed 24 hours, adjust for the 24-hour clock\n    if overtake_hour >= 24:\n        overtake_hour -= 24\n    \n    # Convert to time format (HH:MM)\n    overtake_time = \"{:02d}:{:02d}\".format(overtake_hour, overtake_minute)\n    \n    return overtake_time\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2  # coffee, milk\n    foods = 3   # hamburgers, burritos, bagels\n\n    combinations = drinks * foods # Principle of Multiplication\n\n    return combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    # Initialize count of unlocked lockers to 0\n    unlocked_count = 0\n    \n    # Iterate through locker numbers 1 to 100\n    for locker in range(1, 101):\n        # Initially, all lockers are unlocked.\n        # Locker is locked if it is divisible by 3.\n        is_locked = (locker % 3 == 0)\n        \n        # If locker is divisible by 5, toggle its state.\n        if locker % 5 == 0:\n            is_locked = not is_locked\n        \n        # If the locker is finally not locked, increase the unlocked count\n        if not is_locked:\n            unlocked_count += 1\n    \n    return unlocked_count\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    pancakes_per_minute = 2 / 3\n    pancakes_in_12_minutes = pancakes_per_minute * 12\n    \n    return int(pancakes_in_12_minutes)\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    discount_fraction = 1/5\n    original_price = sale_price / (1 - discount_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road = 500\n    total_days = 5\n    road_per_day = total_road / total_days\n\n    return road_per_day\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # Since the boat can only seat 2 people, the fastest two (Jason and Chi Yew) will be rowing back and forth.\n    # They take 5 minutes each to cross. One of them must always row back, making it the limiting factor for each round trip.\n    # Strategy:\n    # 1. Jason and Chi Yew cross together: 5 minutes\n    # 2. One of them returns: 5 minutes\n    # 3. The two slowest (Wei Jie and Michael) cross together: 9 minutes (since the boat goes at the speed of the slower person)\n    # 4. Jason or Chi Yew returns: 5 minutes\n    # 5. Jason and Chi Yew cross again: 5 minutes\n    # Total time: 5 + 5 + 9 + 5 + 5 = 29 minutes\n    return 29\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    # To ensure at least one country has a minimum of 9 participants\n    # we have to consider the worst-case scenario where each of\n    # the other countries has one less than 9.\n    # So we fill the countries with 8 participants each (one less than 9)\n    # and the next participant ensures that one country has at least 9.\n    participants = (countries * (9 - 1)) + 1\n    \n    return participants\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(88 / A, 22)\n    \n    A_value = solve(equation, A)\n    \n    correct_answer = 98 / A_value[0]\n\n    return A_value[0], correct_answer\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    from math import factorial as f\n\n    # Function to calculate combinations\n    def comb(n, r):\n        return f(n) // (f(r) * f(n - r))\n\n    # Number of ways to reach the 5th step: (1+1+1+1+1) or (2+1+1+1) or (1+2+1+1) or (1+1+2+1) or (1+1+1+2)\n    # Thus, there are 5 ways to reach the 5th step.\n\n    # Number of ways to climb from the 5th to the 10th step (5 steps remaining)\n    # can either be (1, 1, 1, 1, 1), (1, 1, 1, 2), (1, 1, 2, 1), (1, 2, 1, 1), (2, 1, 1, 1), (2, 2, 1), (2, 1, 2), \n    # (1, 2, 2), (1, 1, 2, 1) => total 8 combinations\n    # Using combinatorial calculation for choosing the positions of '2's in the sequence:\n    ways_to_climb_rest = comb(4, 0) + comb(4, 1) + comb(3, 2)\n\n    # Total ways = ways to reach 5th step * ways to climb the rest\n    ans = 5 * ways_to_climb_rest\n    return ans\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_for_four = 32\n    cost_for_one = cost_for_four / 4\n    cost_for_twelve = cost_for_one * 12\n    return cost_for_twelve\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    lucas_speed = 5 / 6  # laps per minute\n    miller_speed = 5 / 10  # laps per minute\n\n    relative_speed = lucas_speed - miller_speed  # relative lap speed per minute\n\n    time_to_overtake = 1 / relative_speed  # time in minutes to overtake once\n\n    return time_to_overtake * 2  # time in minutes between first and second overtake\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    return 1670 + 4  # Since the amount is rounded to the nearest $10, adding 4 gives the greatest possible amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    remainder = 5217 % 13\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2.5\n    minutes_per_hour = 60\n    total_minutes = hours * minutes_per_hour\n    return total_minutes\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # Number of terms (n) is given as 53\n    n = 53\n    \n    # The sum of the arithmetic sequence (S) is given as 2014\n    S = 2014\n    \n    # The formula for the sum of an arithmetic sequence is S = n/2 * (first_term + last_term)\n    # So we can use the formula for the sum: S = n/2 * (2a + (n-1)*d), where d = 1 for consecutive numbers\n    # For consecutive numbers, the difference (d) is 1\n    d = 1\n    \n    # In this case, the first term (a) is what we need to find out\n    # From the formula S = n/2 * (2a + (n-1)), we can solve for the first term (a)\n    # 2 * S = n * (2a + (n-1)*d)\n    # 2 * S = n * (2a + n - 1)\n    # 2 * S = n * (2a + 52)\n    # (2 * S) / n - 52 = 2a\n    # ((2 * S) / n - 52) / 2 = a\n    a = ((2 * S) / n - 52) / 2\n    \n    # Now that we have the first term (a), we can find the last term (last_term) by adding (n-1) * d to it\n    # last_term = a + (n-1)*d\n    last_term = a + (n-1) * d\n    \n    # Return the last term as the largest number, converting it to an integer if necessary\n    return int(last_term)\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_visitors = symbols('total_visitors')\n    \n    children = (3 / 5) * total_visitors\n    remaining_visitors = total_visitors - children\n    men = (1 / 4) * remaining_visitors\n    equation = Eq(children, men + 120)\n    \n    solutions = solve(equation, total_visitors)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_string_length = 5.52  # in meters\n    orange_to_purple_ratio = 9.2\n    green_string_extra_length = 24.9  # in cm\n\n    # Calculate the length of the purple string\n    purple_string_length = orange_string_length / orange_to_purple_ratio  # in meters\n\n    # Convert the extra length of the green string to meters\n    green_string_extra_length /= 100.0  # convert cm to m\n\n    # Calculate the length of the green string\n    green_string_length = purple_string_length + green_string_extra_length\n\n    return green_string_length\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Tim's current age and his mother's current age.\n    tim, mother = symbols('tim mother')\n    \n    # Tim is currently 8 years old.\n    tim_current_age = 8\n    \n    # When Tim is as old as his mother currently is, his mother will be 54.\n    # This means the difference in their ages is mother - tim_current_age.\n    # Tim's age at that time will be his mother's current age: tim_future_age = mother\n    # His mother's age at that time will be 54: mother_future_age = 54\n    \n    # Setting up the equation based on age difference:\n    age_difference = mother - tim_current_age\n    \n    # Future age equation (Tim's future age is equal to his mother's current age):\n    tim_future_age = mother\n    mother_future_age = 54\n\n    # Now we set up the equation mother_future_age = tim_future_age + age_difference\n    equation = Eq(mother_future_age, tim_future_age + age_difference)\n\n    # Solve the equation for the mother's age\n    solutions = solve((equation, Eq(tim, tim_current_age)), (tim, mother))\n\n    return solutions[mother]\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # Let us use brute force to find the possible values of A.\n    \n    # Loop over each possible 2 digit number for A.\n    for A in range(10, 100):\n        # Calculating other numbers based on A's value.\n        B = A + 1\n        C = B + 1\n        D = C + 1\n        E = D + 1\n        F = E + 1\n        G = F + 1\n        H = G + 1\n        \n        # Conditions to check if it satisfies the given problem's vertical sum.\n        # All digits should be unique, check with set\n        # Since H is the last digit, adding it should not carry over to another column.\n        if len(set(str(A) + str(B) + str(C) + str(D) + str(E) + str(F) + str(G) + str(H))) == 16 and str(A)[0] == str(H)[1]:\n            return A\n            \n    return None  # case no valid number is found\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_charge = 0.8  # Base charge for up to 15 minutes\n    additional_charge = 0.05  # Charge for each additional minute\n    total_cost = 1.4  # Total cost of the call\n\n    # Subtract base charge from total cost to find cost of additional minutes\n    additional_minutes_cost = total_cost - base_charge\n\n    # Calculate the number of additional minutes\n    additional_minutes = additional_minutes_cost / additional_charge\n\n    # Calculate total minutes by adding 15 minutes of base charge to additional minutes\n    total_minutes = 15 + additional_minutes\n\n    return total_minutes\n    \nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    # Ivy's work rate per day\n    ivy_rate = 1 / 24\n    # Kevin's work rate per day\n    kevin_rate = 1 / 20\n    # Total time they have to finish the job\n    total_time = 18\n\n    # Equation: ivy_rate * total_time + kevin_rate * (total_time - days_off) = 1\n    # Solve for days_off\n    days_off = total_time - (1 - (ivy_rate * total_time)) / kevin_rate\n\n    return int(days_off)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_per_day_from_mum = 60\n    money_per_day_from_dad = 40\n\n    days = 3  # Monday, Tuesday, Wednesday\n\n    total_money = (money_per_day_from_mum + money_per_day_from_dad) * days\n\n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_litres = 36\n    ratio_sum = 4 + 5\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / ratio_sum) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the two pieces of the rope\n    x, y = symbols('x y')\n\n    # Equation 1: one piece is 5 times longer than the other\n    equation1 = Eq(x, 5 * y)\n    # Equation 2: the sum of the two pieces is 49.5 meters\n    equation2 = Eq(x + y, 49.5)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Get the length of the longer piece and round it\n    longer_piece = round(solutions[x], 1)\n\n    return longer_piece\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    well_height = 25\n    climb_up = 4\n    slide_down = 1\n    current_height = 0\n    day = 0\n    \n    while current_height < well_height:\n        day += 1\n        current_height += climb_up\n        if current_height >= well_height:\n            break\n        current_height -= slide_down\n\n    return day\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number_str = '3' * 12\n    number = int(number_str)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    initial_money = 100\n    days = 15\n    total_money = initial_money\n\n    for day in range(1, days + 1):\n        if day % 2 == 1:  # Odd days, deposit £5\n            total_money += 5\n        else:  # Even days, spend £8\n            total_money -= 8\n    \n    return total_money\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Nancy's rate of writing is 1 book per 6 days, which means 1/6 book per day\n    nancy_rate = 1/6\n    \n    # With Tim's help, they can complete the book in 4 days, which means 1/4 book per day together\n    combined_rate = 1/4\n    \n    # Tim's rate can be calculated by subtracting Nancy's rate from their combined rate\n    tim_rate = combined_rate - nancy_rate\n    \n    # The time it takes for Tim to complete the book alone is the reciprocal of his rate\n    tim_time = 1 / tim_rate\n\n    return tim_time\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    return 32.4 * 20\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let x be the total number of pupils normally at school\n    # 20% of x are in Year 7, so 0.20 * x are Year 7 pupils\n    # Let y be the number of Year 7 girls missing school\n    # After the girls miss school, the number of pupils left is (x - y) and equals 400\n    # The proportion of these pupils who are in Year 7 is 10%, so 0.10 * (x - y) are Year 7 pupils\n    \n    # We have two equations:\n    # 1) 0.20 * x - y = 0.10 * (x - y)\n    # 2) x - y = 400\n    \n    # From equation 2, we have y = x - 400\n    # Substitute y in equation 1:\n    # 0.20 * x - (x - 400) = 0.10 * (x - (x - 400))\n    # Simplify equation:\n    # 0.20 * x - x + 400 = 0.10 * (400)\n    \n    # Move all x terms on one side:\n    # 0.20 * x - x = 0.10 * 400 - 400\n    # -0.80 * x = -400 * 0.90\n    \n    # Solve for x:\n    x = (-400 * 0.90) / -0.80\n    \n    return int(x)\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    slide_down = 2\n    effective_jump = jump_up - (slide_down / 3)\n    jumps_needed = (total_height - jump_up) / effective_jump + 1\n\n    return int(jumps_needed)\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    money_left_after_dress = 40 / (2/5)  # Inverse of spending 3/5ths on shoes\n    initial_money = money_left_after_dress / (2/3)  # Inverse of spending 1/3rd on a dress\n    return initial_money\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    def term(n):\n        if n == 0:\n            return 0\n        return n / ((n * (n + 1) / 2) * ((n * (n + 1) / 2) + 1))\n    \n    ans = sum(term(n) for n in range(1, 7)) + 1/22\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def count_trailing_zeros(n, base):\n    count = 0\n    i = base\n    while n // i >= 1:\n        count += n // i\n        i *= base\n    return count\n\ndef solution():\n    zeros_in_999_factorial = count_trailing_zeros(999, 5)\n    zeros_in_300_factorial = count_trailing_zeros(300, 5)\n    ans = zeros_in_999_factorial - zeros_in_300_factorial\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Number of students in the outer layer on one side of the square (divide by 4 sides)\n    outer_students_per_side = 60 // 4\n    # Total students = sum of squares of numbers from 1 to outer_students_per_side\n    total_students = sum((2 * i + 1) for i in range(outer_students_per_side))  \n    return total_students\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    equation1 = Eq(cars, bikes + bikes / 3)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    equations = [equation1, equation2, Eq(cars + bikes + lorries, 2 * symbols('n'))]\n\n    # Iterate through possible even values for the total number\n    for n in range(1, 50):\n        totals_eq = Eq(cars + bikes + lorries, 2 * n)\n        solutions = solve((equation1, equation2, totals_eq), (cars, bikes, lorries))\n        if all(val.is_integer and val > 0 for val in solutions.values()):\n            return {'cars': solutions[cars], 'bikes': solutions[bikes], 'lorries': solutions[lorries]}\n\n    return None\n\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = 18*20132013 - 2013*180018\n    return ans\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 1\n    red_tiles = 0\n    green_tiles = 0\n\n    while total_tiles > 0:\n        tiles_in_layer = (layer * 2 - 1) ** 2\n        if layer % 2 == 1:\n            red_tiles += tiles_in_layer\n        else:\n            green_tiles += tiles_in_layer\n        total_tiles -= tiles_in_layer\n        layer += 1\n\n    more_color = 'red' if red_tiles > green_tiles else 'green'\n    difference = abs(red_tiles - green_tiles)\n\n    return more_color, difference\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A_initial, B_initial = symbols('A_initial B_initial')\n\n    # Ken added x buttons to A and removed 2x buttons from B, resulting in B having 28 fewer buttons.\n    x = symbols('x')\n    B_final = B_initial - 2 * x - 28\n\n    # Ratio of total buttons to B_final is 4:1, so total buttons is 4 * B_final.\n    total_buttons = 4 * B_final\n\n    # Equations based on the problem statement.\n    equation1 = Eq(A_initial - B_initial, 64)\n    equation2 = Eq(A_initial + x + B_initial - 2 * x - 28, total_buttons)\n    equation3 = Eq(B_initial - 2 * x - 28, total_buttons / 4)\n\n    # Solve the system of equations.\n    solution = solve((equation1, equation2, equation3), (A_initial, B_initial, x))\n\n    return solution[A_initial]\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    length_of_boulevard = 300\n    interval = 10\n\n    # Including both ends, the number of bins is one more than the number of intervals.\n    num_bins = (length_of_boulevard // interval) + 1\n\n    return num_bins\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_gain = 24\n    total_rounds = 12\n    gain_per_win = 4\n    loss_per_lose = 2\n\n    for lost_rounds in range(total_rounds + 1):\n        won_rounds = total_rounds - lost_rounds\n        if won_rounds * gain_per_win - lost_rounds * loss_per_lose == total_gain:\n            return lost_rounds\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    amount_of_flour_per_cake = 326\n    number_of_cakes = 112\n\n    total_amount_of_flour = amount_of_flour_per_cake * number_of_cakes\n\n    return total_amount_of_flour\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18\n    rounds = 0\n    while min(x, y, z) > 0:\n        max_coins = max(x, y, z)\n        if x == max_coins:\n            x -= 3\n            y += 1\n            z += 1\n        elif y == max_coins:\n            y -= 3\n            x += 1\n            z += 1\n        else:\n            z -= 3\n            x += 1\n            y += 1\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    def is_divisible_by_33(number):\n        # 33 = 3 * 11, so a number is divisible by 33 if \n        # it's divisible by both 3 and 11.\n        \n        # Divisibility rule for 3: Sum of digits is multiple of 3\n        sum_digits = sum(int(digit) for digit in str(number))\n        divisible_by_3 = sum_digits % 3 == 0\n        \n        # Divisibility rule for 11: The difference between the sum of the digits in the odd positions and \n        # the sum of the digits in the even positions is a multiple of 11\n        odd_even_diff = sum(int(str(number)[i]) * (-1)**i for i in range(len(str(number))))\n        divisible_by_11 = odd_even_diff % 11 == 0\n        \n        return divisible_by_3 and divisible_by_11\n\n    # We start by checking for the smallest n and increment until we find one that works\n    n = 1\n    while True:\n        # Generate the number based on the current n\n        number = int(f\"26{'2011' * n}7\")\n        if is_divisible_by_33(number):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    time_for_one_cut = 3 / (4 - 1)\n    number_of_cuts_for_8_pieces = 8 - 1\n    time_for_8_pieces = time_for_one_cut * number_of_cuts_for_8_pieces\n    return time_for_8_pieces\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    cards_after_selling = initial_cards - duplicates\n    total_cards = cards_after_selling + new_cards\n\n    return total_cards\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of money Rasidah and Chai Seng have\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(chai_seng - rasidah, 48)  # Chai Seng had $48 more than Rasidah\n\n    # Rasidah spent 3/5 of her money, so she has 2/5 left\n    # Chai Seng spent 6/7 of his money, so he has 1/7 left\n    # Chai Seng has 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng * (1/7), (rasidah * (2/5)) * (1/2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    ans = sum(1 / i for i in range(1, 8))\n    return int(ans)\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # The plates are identical, so we just need to find the number of partitions of 7 into at most 3 parts.\n    # This is a classic combinatorics problem, and can be solved by considering the weak compositions of 7\n    # into 3 parts (which allows zero and is order-specific).\n    # But since the plates are identical, we only want the number of unique combinations.\n\n    # Initializing the count to 0\n    count = 0\n\n    # Since the plates can be empty, we consider all possibilities.\n    # We'll iterate through all combinations where the number of lollipops in\n    # each plate can range from 0 to 7.\n\n    for i in range(7 + 1):  # Number of lollipops in the first plate\n        for j in range(i, 7 + 1):  # Number of lollipops in the second plate, starting from i to avoid duplicate scenarios\n            # Since the lollipops are indistinguishable, and the third plate's count would just be 7 - i - j,\n            # we only need to increment the count of unique partitions\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    total_people = 8\n    # Treat Amy and Judy as one person, as they must sit together\n    grouped_people = total_people - 1\n    # There are (grouped_people - 1)! ways to arrange the remaining seats in a circle\n    ways_to_arrange_others = factorial(grouped_people - 1)\n    # Amy and Judy can be arranged in 2! ways within their group\n    ways_to_arrange_amy_judy = factorial(2)\n    # Total arrangements is the product of the two previous calculations\n    total_arrangements = ways_to_arrange_others * ways_to_arrange_amy_judy\n    return total_arrangements\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n    years = 0\n\n    while principal < final_amount:\n        principal += principal * interest_rate\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n\n    pencils = 56\n    pens = 60\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, ben = symbols('andy ben')\n\n    equation1 = Eq(andy, ben - 84)  # Andy had 84 fewer cookies than Ben at first\n    equation2 = Eq(andy + andy / 3, ben + ben / 5)  # After buying cookies\n    equation3 = Eq((andy + andy / 3) / 3, ben + ben / 5)  # Andy had 1/3 as many cookies as Ben in the end\n\n    solutions = solve((equation1, equation2, equation3), (andy, ben))\n\n    andy_end = solutions[andy] + solutions[andy] / 3\n\n    return andy_end\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    numbers = [0.7, 0.04, 1.006]\n    return sum(numbers)\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Since all numbers are two digits and different, and students saw 8 different numbers,\n    # we can create a set that contains all two-digit numbers.\n    # We will then remove numbers as we apply the constraints from the problem.\n    all_two_digit_numbers = set(range(10, 100))\n\n    # After the first question, 4 students raised their hands.\n    # This means that out of the 8 visible numbers to Tom, 4 must be either divisible by the mystery number,\n    # or not divisible, but Tom cannot definitively know his own number with this information.\n    # However, this information isn't enough to make any definitive exclusions, so we proceed to the next clue.\n\n    # After the second question, 6 students raised their hands.\n    # Since Tom raised his hand again, he knows his number is divisible or not divisible by 24.\n    # This information allows us to split the set of numbers into those divisible by 24\n    # and those not divisible by 24.\n    divisible_by_24 = {number for number in all_two_digit_numbers if number % 24 == 0}\n    not_divisible_by_24 = all_two_digit_numbers - divisible_by_24\n\n    # Because 6 students (including Tom) raised their hands at the second question,\n    # it means that Tom saw exactly 5 hats with numbers that are either divisible by 24\n    # or not divisible by 24, which is a condition satisfied by all numbers, so we learn nothing new.\n    # But considering Tom raised his hand both times, Tom's number must be in the intersection\n    # of both sets we considered earlier. However, since Tom's number is unknown,\n    # we cannot deduce his number or the numbers he saw. We need a further clue to solve this problem,\n    # but since there isn't any, we can't find the sum of numbers Tom saw.\n\n    # Since the problem doesn't provide sufficient information to solve it,\n    # I'm returning 0 to acknowledge the inability to calculate the sum based on the provided data.\n    return 0\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    for largest in range(51, 0, -1):\n        # Calculate the average of the other three numbers\n        average_other_three = 51 - largest\n        # Calculate the sum of the other three numbers\n        sum_other_three = 3 * average_other_three\n        # Calculate the smallest number\n        smallest = 39 - average_other_three\n        # The three numbers other than the smallest\n        remaining_three = sum_other_three - smallest\n        # Check if the remaining_three can be split into three distinct positive whole numbers\n        if smallest > 0 and remaining_three - largest > largest:\n            # If the above condition is true, it's the maximum largest number\n            return largest\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n\n    # Find the common factor of the original fraction.\n    common_factor = new_numerator / original_numerator\n\n    # Multiply the original denominator by the common factor to find the new denominator.\n    new_denominator = original_denominator * common_factor\n\n    return int(new_denominator)\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # Pattern analysis:\n    # Even-indexed terms: 18, 19, 20, ... (increasing by 1)\n    # Odd-indexed terms: -16, -15, ... (increasing by 1)\n    # The next term in the sequence is odd-indexed, as we follow the pattern\n    # Last even-indexed term is 20, so the next odd-indexed term is -14\n\n    n = -14\n    return n\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Given values\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n    at_least_one_pass = 43\n\n    # Maximum number of students passing all three tests can be calculated by assuming no students passing only two tests.\n    # This would mean all students passing individual tests would either pass a single test or all three.\n    \n    # Total individual tests passed\n    total_individual_pass = math_pass + science_pass + english_pass\n    \n    # Calculate maximum number of students passing all three, using Inclusion-Exclusion Principle\n    max_all_three_pass = total_individual_pass - at_least_one_pass\n\n    return max_all_three_pass\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the distance from school to their home in meters.\n    x = symbols('x')\n    \n    # Ahmad's time to reach the school is x / 80 minutes.\n    # His brother's time to meet Ahmad is (x - 210) / 50 minutes.\n    # Ahmad's total time (to school and back to meeting point) is x / 80 + (x - 210) / 80.\n    # Their times are equal when they meet.\n    equation = Eq(x / 80, (x - 210) / 50)\n    \n    # Solve the equation for x.\n    solution = solve(equation, x)\n    \n    # Returning the distance as the answer.\n    return solution[0]\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    count = 0\n    for x in range(1, 6):\n        for y in range(1, 6):\n            if x + y < 6:\n                z = 6 - x - y\n                if z > 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    # Calculating each part of the expression\n    numerator_1 = (1/30) + (1/6)\n    denominator_1 = 2/25\n    part_1 = numerator_1 / denominator_1\n    \n    numerator_2 = 2 - (2/3)\n    denominator_2 = 8/3\n    part_2 = numerator_2 / denominator_2\n    \n    # Calculating the final result by adding both parts\n    ans = part_1 + part_2\n    \n    return ans\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    for A in range(10):\n        number = int(f\"572{A}\")\n        if number % 4 == 0 and number % 5 == 0:\n            return A\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    num = 8844\n    place_value_first_8 = 8 * 1000  # The place value of the first 8 (thousands)\n    place_value_second_8 = 8 * 100  # The place value of the second 8 (hundreds)\n    difference = place_value_first_8 - place_value_second_8  # Difference between the place values\n    return difference\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    number = 40309\n    while True:\n        number += 1\n        if str(number) == str(number)[::-1]:\n            return number - 40309\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Step 1: Find the common supplement\n    # The common supplement does not need to be found separately for the solution.\n\n    # Step 2: Find the LCM of all the divisors\n    # Using the sympy library to solve the congruences directly also finds the LCM internally.\n\n    # Step 3: The unknown = the common multiple of all the divisors - the common remainder\n    # Above steps are included in solving the congruences\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    common_multiple, lcm = solve_congruence(*congruences)\n\n    # The unknown number of biscuits\n    unknown = common_multiple\n\n    return unknown\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n    length1 = 16\n    length2 = 24\n    longest_piece_length = gcd(length1, length2)\n    return longest_piece_length\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    min_palindrome = None\n    max_palindrome = None\n    \n    # Finding max palindrome which is a multiple of 45, we can start from 99999 and go downwards\n    for num in range(99999, 10000, -1):\n        if str(num) == str(num)[::-1] and num % 45 == 0:\n            max_palindrome = num\n            break\n            \n    # Finding min palindrome which is a multiple of 45, we can start from 10000 and go upwards\n    for num in range(10000, 99999):\n        if str(num) == str(num)[::-1] and num % 45 == 0:\n            min_palindrome = num\n            break\n            \n    # Calculating the difference between the largest and smallest palindromes\n    if min_palindrome and max_palindrome:\n        difference = max_palindrome - min_palindrome\n    else:\n        difference = 0\n        \n    return difference\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind_luna = 4\n    \n    total_sheep = luna_position + sheep_behind_luna\n    \n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n    required_hours = desired_earnings / hourly_rate\n    return required_hours\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = 10\n    top_students = 3\n    last_students = total_students - top_students\n\n    top_mean_score = 92\n    all_mean_score = symbols('all_mean_score')\n    \n    # Equation for the sum of the top student's scores\n    top_sum_score = top_mean_score * top_students\n    \n    # Equation for the sum of the last student's scores\n    last_sum_score = (all_mean_score - 6) * last_students\n    \n    # Total sum of all student's scores\n    total_sum_score = top_sum_score + last_sum_score\n    \n    # Equation for the total mean score\n    equation = Eq(total_sum_score, all_mean_score * total_students)\n    \n    # Getting the solution for the mean score of all students\n    all_mean_solution = solve(equation, all_mean_score)\n\n    return all_mean_solution[0]\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = str(year)\n        if len(set(digits)) == 4:  # No duplications\n            digits_sorted = sorted(digits)\n            if digits_sorted[0] != '0' and int(digits_sorted[1]) - int(digits_sorted[0]) == 1 \\\n               and int(digits_sorted[2]) - int(digits_sorted[1]) == 1 and int(digits_sorted[3]) - int(digits_sorted[2]) == 1:\n                # Check if four consecutive digits\n                year_permutations = set(permutations(digits_sorted))\n                lucky_years += len(year_permutations)  # Add all the permutations of the digit\n    return lucky_years\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "def solution():\n    bags = [19, 21, 27, 32, 37, 40]  # The number of marbles in each bag\n    total_red_marbles = 0\n\n    for red_bag in bags:\n        x_bags = [bag for bag in bags if bag != red_bag]\n\n        for i in range(len(x_bags)):\n            for j in range(i + 1, len(x_bags)):\n                jaslin_bags = x_bags[i] + x_bags[j]\n                george_bags = sum(x_bags) - jaslin_bags\n\n                if jaslin_bags == 2 * george_bags:\n                    total_red_marbles = red_bag\n                    return total_red_marbles\n\n    return total_red_marbles  # If no valid division is found, defaults to 0\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest even number be x\n    # The consecutive even numbers are: x, x+2, x+4, x+6, x+8\n    # Their sum is: x + (x+2) + (x+4) + (x+6) + (x+8) = 100\n    # Simplifying: 5x + 20 = 100\n    # Solving for x: 5x = 80\n    x = 80 // 5  # Smallest even number\n    return x\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance = 550  # Total distance covered in 5 hours\n    time = 5  # Total time taken to cover 550 km\n    speed = distance / time  # Speed of the car in km/hr\n\n    distance_in_3_hours = speed * 3  # Distance covered in 3 hours\n\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    # Let x be the number of sweets Beth has now\n    # Andre will then have x + 6 sweets now\n    # Before their teacher gave them sweets, Beth had x - 4 and Andre had (x + 6) - 4\n    # Together they had a total of 24 sweets before being given more\n    # This gives us the equation: (x - 4) + ((x + 6) - 4) = 24\n    # Simplifying the equation we get: 2x + 4 = 28\n    # Solving for x we get: x = 12\n    # Since we know x is the amount of sweets Beth has now, which is after being given 4 more sweets\n    # We subtract 4 to find out how many she had originally\n    \n    x_now = (24 + 6 + 4) / 2\n    beth_original = x_now - 4\n    \n    return beth_original\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_fraction = 1 - 2/5\n    remaining_apples = 150\n    initial_apples = remaining_apples / remaining_fraction\n    return int(initial_apples)\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    distance_per_jump = 3\n    total_jumps = 14  # Jumped from the 1st to the 2nd, 2nd to the 3rd,..., 14th to the 15th post\n\n    total_distance = distance_per_jump * total_jumps\n\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # Total number of fruits\n    total_friends = 6  # Number of friends\n    fruits_per_friend = total_fruits / total_friends  # Fruits for each friend\n    return fruits_per_friend\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    # 1/total_work = 1/alan_time + 1/bob_time \n    # Given total_work = 4, and bob_time = 6\n    total_work = 4\n    bob_time = 6\n\n    # 1/alan_time = 1/total_work - 1/bob_time\n    alan_time = 1 / (1/total_work - 1/bob_time)\n\n    return alan_time\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "def solution():\n    from math import factorial as f\n    from fractions import Fraction\n\n    # A function to calculate n choose k\n    def choose(n, k): return f(n) // f(k) // f(n - k)\n\n    # Arranging one color with even blocks in between\n    # The positions of the first block of the color can be 0, 2, 4, 6, 8, or 10\n    even_positions = 6\n    # The positions of the second block, given the first, can be 2, 4, 6, 8, or 10 (5 choices)\n    even_pairs = 5\n\n    # Number of even arrangements for one pair of colors\n    even_arrangements_one_color = even_positions * even_pairs\n\n    # Number of ways to position the 6 pairs of blocks\n    possible_positions = choose(12, 2) * choose(10, 2) * choose(8, 2) * choose(6, 2) * choose(4, 2) * choose(2, 2)\n\n    # Since there are 6 colors, the number of even arrangements for all colors is\n    # the number of even arrangements for one color to the power of 6\n    even_arrangements_all_colors = even_arrangements_one_color ** 6\n\n    # The probability that her arrangement is even\n    prob_even = even_arrangements_all_colors / possible_positions\n\n    # Simplifying to lowest terms\n    prob_even = Fraction(prob_even).limit_denominator()\n\n    # Sum of numerator and denominator\n    m_plus_n = prob_even.numerator + prob_even.denominator\n\n    return m_plus_n\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    # Probability it rains on Saturday\n    p_saturday = 0.7\n    # Probability it rains on Sunday\n    p_sunday = 0.5\n    \n    # Probability it does NOT rain on Saturday\n    not_p_saturday = 1 - p_saturday\n    # Probability it does NOT rain on Sunday\n    not_p_sunday = 1 - p_sunday\n    \n    # Probability it does NOT rain on both days\n    not_p_both = not_p_saturday * not_p_sunday\n    \n    # Probability it rains at least one day\n    p_at_least_one = 1 - not_p_both\n\n    return p_at_least_one\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(henry + fred + richard, 204.56)\n    equation2 = Eq(richard, henry - 3.24)\n    equation3 = Eq(fred, richard + 5.6)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return solutions[fred]\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    pool_capacity = 1  # the pool's full capacity is represented as 1, a complete pool\n\n    a_rate = pool_capacity / 36  # inlet A's rate per minute\n    b_rate = pool_capacity / 48  # inlet B's rate per minute\n\n    # Define the cycle (A for 1 min, B for 2, A for 2, B for 1)\n    cycle_time = 1 + 2 + 2 + 1  # total time of one full cycle in minutes\n    cycle_fill = 1 * a_rate + 2 * b_rate + 2 * a_rate + 1 * b_rate  # pool volume filled in one cycle\n\n    # Determine how many whole cycles are needed to fill the pool\n    full_cycles_needed = pool_capacity // cycle_fill\n    time_full_cycles = full_cycles_needed * cycle_time  # total time of full cycles\n\n    # Determine the remainder of the pool to fill after full cycles\n    remainder_pool = pool_capacity - full_cycles_needed * cycle_fill\n\n    # Fill the remainder of the pool, going through the cycle pattern as needed\n    additional_time = 0\n    pattern = [(1, a_rate), (2, b_rate), (2, a_rate), (1, b_rate)]\n    for minutes, rate in pattern:\n        if remainder_pool > 0:\n            fill_time = min(remainder_pool / rate, minutes)\n            additional_time += fill_time\n            remainder_pool -= fill_time * rate\n\n        if remainder_pool <= 0:\n            break\n\n    total_time = time_full_cycles + additional_time\n\n    return int(total_time)\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    n = 1\n    count_of_twos = 0\n    count_of_fives = 0\n    \n    while True:\n        temp_n = n\n        while temp_n % 2 == 0:\n            count_of_twos += 1\n            temp_n //= 2\n        while temp_n % 5 == 0:\n            count_of_fives += 1\n            temp_n //= 5\n        \n        if min(count_of_twos, count_of_fives) >= 28:\n            break\n        n += 1\n        \n    return n\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_correct = 10\n    points_incorrect = -3\n    total_questions = 10\n\n    # Let x be the number of correct answers. Then the number of incorrect answers is total_questions - x.\n    # The total score is then x*points_correct + (total_questions - x)*points_incorrect.\n    # \n    # We can set up the following equation:\n    # x*points_correct + (total_questions - x)*points_incorrect = total_points\n    # \n    # Solving for x, we'll get the number of correct answers and therefore can find the incorrect ones.\n\n    for x in range(total_questions + 1):\n        if x * points_correct + (total_questions - x) * points_incorrect == total_points:\n            incorrect_answers = total_questions - x\n            return incorrect_answers\n\n    return None\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_back = 12\n\n    children_between = total_children - (vanessa_position_from_front + andrea_position_from_back)\n\n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    initial_sweets = 320\n    final_sweets = 348\n    weeks = 7\n    sweets_bought_per_week = 30\n\n    total_sweets_after_weeks = initial_sweets + sweets_bought_per_week * weeks\n    sweets_eaten_per_week = (total_sweets_after_weeks - final_sweets) / weeks\n\n    return int(sweets_eaten_per_week)\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    total_bought = 10\n    empty_bottles = total_bought\n    total_drank = total_bought\n    borrowed = 1\n    \n    # Loop to keep exchanging bottles as long as we have enough empties\n    while empty_bottles // 2 > 0 or borrowed > 0:\n        # Exchange empty bottles for full ones\n        exchange = (empty_bottles + borrowed) // 2\n        # Return the borrowed empty if it was used\n        borrowed = (empty_bottles + borrowed) % 2\n        # Drink exchanged bottles\n        total_drank += exchange\n        # The empty bottles are now the ones that were exchanged\n        empty_bottles = exchange\n        \n    return total_drank\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(\"281\" + str(digit))\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path = 5/6\n    fenced_path = 2/3\n    unfenced_path = total_path - fenced_path\n    return unfenced_path\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    t = symbols('t')\n    # The rate of draining pool A is 1/10 per minute\n    # The rate of draining pool B is 1/6 per minute\n    \n    # The volume of water left in pool A after t minutes is (1 - t/10)\n    # The volume of water left in pool B after t minutes is (1 - t/6)\n    \n    # Set up equation where the height of water in pool A is 3 times the height in pool B\n    equation = Eq(1 - t/10, 3 * (1 - t/6))\n    \n    # Solve the equation for t\n    solution = solve(equation, t)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Initial conditions\n    chenxi_more = 5  # Chenxi has 5 more sweets than Yue Ying\n    chenxi_gives = 10  # Chenxi gives 10 sweets to Yue Ying\n    \n    # After giving 10 sweets away, Chenxi will have 10 sweets less than originally\n    chenxi_after = chenxi_more - chenxi_gives  # 5 - 10 = -5\n    \n    # The difference in number of sweets they have now\n    difference_now = abs(chenxi_after)  # Taking absolute value in case of negative number\n\n    return difference_now\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # In the 'Time Problem', there's only one possible case for each specific time.\n    # Since we're given the value '1', we imply that we're looking for the number\n    # of cases where time is '1' o'clock, which, considering how time works, is only one.\n    \n    # The answer is simply one case for '1' o'clock.\n    return 1\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # converting minutes to hours\n    late_time = 12 / 60  \n    early_time = 8 / 60  \n\n    # Let the distance be 'd' km\n    # Time taken at 3 km/h speed to cover the distance d is d/3\n    # Time taken at 7 km/h speed to cover the distance d is d/7\n    # According to the problem\n    # (d/3) - (d/7) = late_time + early_time\n    # Solve for d\n    d = (late_time + early_time) * (3 * 7) / (7 - 3)\n\n    return d\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    \n    return lambs\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    total_amount = 200\n    \n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 70))\n    for i in primes:\n        if 69 - i in primes:\n            return abs(i - (69 - i))\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_points = 70\n    correct_points = 10\n    incorrect_points = -5\n    total_questions = 10\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_points + incorrect_answers * incorrect_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the number of students in school A originally,\n    # and 'b' be the number of students in school B originally.\n    a, b = symbols('a b')\n\n    # Total number of students before transfer.\n    equation1 = Eq(a + b, 1050)\n\n    # After transfer: a-20 (students left in school A), b+20 (students in school B now).\n    # And school A has 10 more students than school B.\n    equation2 = Eq((a - 20) - (b + 20), 10)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    students_math = 20\n    students_both_classes = 11\n    students_neither_class = 10\n\n    students_only_writing = total_students - students_math - students_neither_class + students_both_classes\n\n    return students_only_writing\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "def solution():\n    from sympy import prevprime\n\n    # Digits from Judy's birthday: 0, 8, 0, 7, 2, 0, 0, 3\n    # The largest number less than 50 using these digits ('8' can only be used once as a digit)\n    # Start from 49 because 50 is not prime and we are looking for a prime number less than 50.\n    largest_num = 49\n\n    # Find the nearest prime number less than the largest number\n    return prevprime(largest_num)\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_average = 54\n    average_first_two = 48\n    total_sum = total_average * 5\n    sum_first_two = average_first_two * 2\n    sum_last_three = total_sum - sum_first_two\n    average_last_three = sum_last_three / 3\n    \n    return average_last_three\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "from sympy import symbols, maximize\n\ndef solution():\n    x = symbols('x')\n    expression = 15 + 5 * x + 15 - 6 + 7\n    brackets_positions = [\n        ((15 + 5) * (x + 15) - 6 + 7),\n        ((15 + 5 * x) + (15 - 6) + 7),\n        (15 + (5 * (x + 15)) - 6 + 7),\n        (15 + 5 * (x + (15 - 6)) + 7),\n        (15 + (5 * x + 15) - (6 + 7)),\n        (15 + 5 * (x + 15 - 6) + 7),\n        ((15 + 5 * x + 15) - 6 + 7),\n        (15 + (5 * x + 15 - 6) + 7)\n    ]\n    \n    max_value = float('-inf')\n    for expr in brackets_positions:\n        # substitute x with 5 since we're interested in maximizing the numeric expression\n        num_expression = expr.subs(x, 5) \n        max_value = max(max_value, num_expression)\n    \n    return max_value\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    max_slices = 1  # start with 1 slice, the whole pizza\n    for cuts in range(1, 5):\n        max_slices += cuts\n    return max_slices\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    # Let t be the age of Teddy when his father is 40\n    t = symbols('t')\n    \n    # Let f be the father's age when Teddy was 5\n    f = 7 * 5  # f is 7 times Teddy's age when Teddy was 5\n    \n    # When father is 40, Teddy will be (40 - f) + 5\n    teddy_age_when_father_is_40 = Eq(t, (40 - f) + 5)\n    \n    # Solve for t\n    teddy_age = solve(teddy_age_when_father_is_40, t)\n    \n    return teddy_age[0]\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 110):\n        total_sum += sum([int(digit) for digit in str(i)])\n    return total_sum\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    # Given an arithmetic progression where the first term is 1,\n    # the common difference is 2, and the last term is 17.\n    # The sum of an arithmetic series = n/2 * (first_term + last_term)\n    first_term = 1\n    last_term = 17\n    n = (last_term - first_term) // 2 + 1\n    \n    # Calculate the sum of the series\n    sum_series = n * (first_term + last_term) // 2\n    \n    return sum_series\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # find the ratio of girls to the whole\n    girls_ratio = (1 - 4/5) * (5/7)\n    # simplify it to 1/35\n    # find the ratio of adults to the whole\n    adults_ratio = 2/7\n    # the difference in ratios between adults and girls\n    difference_ratio = adults_ratio - girls_ratio\n    # simplify it to 10/35, which equals 2/7\n    # since 80 equals to the difference in people and 2/7 to the difference in ratios,\n    # we can find the total number of people by dividing 80 by the ratio's numerator and multiplying by the denominator\n    total_people = 80 / (difference_ratio.numerator) * (difference_ratio.denominator)\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base = 9\n    # area of a triangle = 1/2 * base * height\n    height = (2 * area) / base\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    # If the elephant is at the 10th position from the left and there are 5 toys\n    # from the rabbit to the elephant, the rabbit must be at the (10 + 5)th position\n    # from the left.\n    rabbit_position_from_left = 10 + 5\n\n    # To find the rabbit's position from the right, we subtract the rabbit's position\n    # from the left from the total number of toys and add 1 (since we are counting positions).\n    rabbit_position_from_right = 40 - rabbit_position_from_left + 1\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    # Let p represent the number of pink dolphins\n    # Let g represent the number of gray dolphins\n    # g = 11 * p  (given)\n    # p + g = 48  (total number of dolphins)\n\n    p = symbols('p')\n    g = 11 * p  # Equation representing the relationship between pink and gray dolphins\n    \n    # Solving the equation p + g = 48\n    equation = Eq(p + g, 48)\n\n    # Solving for p\n    solution = solve(equation, p)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(2, 33, 3))\n    return sum_squares\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    result = 0.35 * 700\n    return result\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tables, chairs = symbols('tables chairs')\n\n    equation1 = Eq(chairs - tables, 0)         # Initially, the number of chairs equals the number of tables\n    equation2 = Eq(chairs + 24, 4 * (tables - 42))  # After changes, chairs are four times the number of tables\n\n    solutions = solve((equation1, equation2), (tables, chairs))\n\n    return solutions[chairs]\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_to_left = 4\n    cabinets_to_right = 7\n    candy_cabinet = 1  # Candy's own cabinet\n\n    total_cabinets = cabinets_to_left + candy_cabinet + cabinets_to_right\n\n    return total_cabinets\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_first_day = 455\n    books_second_day = 198\n    total_books = books_first_day + books_second_day\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for i in range(100, 1000, 2):  # 3-digit even numbers start at 100 and end at 998\n        sum_of_digits = sum(map(int, str(i)))  # calculate the sum of the digits of i\n        if sum_of_digits == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        if (1060 + Y) % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = initial_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    classes = 5\n\n    total_boxes = boxes_per_class * classes\n\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    for i in range(99, -1, -1):\n        number = int(f\"49{i:02d}\")\n        if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Rewrite the bases with a common exponent to simplify the calculation.\n    # 2^2019 = 2^(2*982 + 55) => 2^(2*982) * 2^55\n    # 4^982 = (2^2)^982 = 2^(2*982)\n    # 2^1963 = 2^(2*982 - 1) => 2^(2*982) / 2\n\n    # Rewrite the original fraction after simplification:\n    # (2^(2*982) * 2^55) / (2^(2*982) - 2^(2*982) / 2) => 2^55 / (1 - 1/2)\n\n    # Simplify the denominator:\n    # 1 - 1/2 = 1/2\n\n    # Now we have:\n    # 2^56 / (1/2)\n    # Multiply both the numerator and the denominator by 2 to get rid of the fraction in the denominator:\n    # 2^56 = 2^55 * 2^1\n    # The question boils down to finding the remainder of 2^56 divided by 5.\n\n    # Since we're interested in the remainder when divided by 5, we can use the modulo property of powers\n    # If a ≡ b (mod m), then a^n ≡ b^n (mod m)\n    # We can express 2^n as a series of remainders when divided by 5.\n\n    # We know that the consecutive powers of 2 modulo 5 are: 2, 4, 3, 1, ... and then they repeat every 4\n    # We are looking for the remainder of 2^(56) modulo 5.\n    # 56 % 4 because the pattern repeats every 4. The remainder will tell us the position in the pattern to take.\n\n    remainder_pattern = [2, 4, 3, 1]\n    position_in_pattern = 56 % 4  # Because of the cyclicity of the powers of 2 modulo 5\n    remainder_of_power = remainder_pattern[position_in_pattern - 1]  # position - 1 due to 0-based index\n\n    # Since we now know 2^56 congruent to remainder_pattern[position_in_pattern - 1] (modulo 5)\n    # Thus, the remainder we are looking for is remainder_pattern[position_in_pattern - 1]\n\n    return remainder_of_power\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    # Calculate the sum of the first 100 natural numbers\n    n = 100\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the square of the sum of the first 100 natural numbers\n    square_sum_n = sum_n ** 2\n    \n    # Calculate the final answer\n    ans = square_sum_n / sum_n\n    \n    return ans\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n    \n    equation1 = Eq(motorcycles + cars + lorries, 27)\n    equation2 = Eq(2 * motorcycles + 4 * cars + 6 * lorries, 96)\n    equation3 = Eq(cars, lorries)\n    \n    solutions = solve((equation1, equation2, equation3), (motorcycles, cars, lorries))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    return 113 - 29\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let x be the mass of one chocolate and y be the mass of the empty jar.\n    # We have two equations based on the information given:\n    # y + 5x = 185\n    # y + 17x = 317\n    # We want to find the value of y + 10x.\n    \n    # Subtracting the first equation from the second gives us:\n    # (y + 17x) - (y + 5x) = 317 - 185\n    # 12x = 132\n    # x = 132 / 12\n    x = 132 / 12\n    \n    # Substitute x back into the first equation to find y:\n    # y + 5x = 185\n    y = 185 - 5 * x\n    \n    # Now find the mass of the jar with 10 chocolates\n    mass_with_10_chocolates = y + 10 * x\n    \n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana_height = 150\n    olaf_height = symbols('olaf_height')\n    kristoff_height = symbols('kristoff_height')\n\n    equation1 = Eq(ana_height, olaf_height + 116)\n    equation2 = Eq(kristoff_height, 5.5 * olaf_height)\n\n    solutions = solve((equation1, equation2), (olaf_height, kristoff_height))\n    kristoff_ana_difference = solutions[kristoff_height] - ana_height\n\n    return kristoff_ana_difference\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    apples, pears, mangoes = symbols('apples pears mangoes')\n\n    # Given ratios and cost per apple\n    cost_apple_per_unit = 0.60  # Cost per apple\n    ratio_apples_pears = 3 / 2  # Ratio apples to pears\n    ratio_pears_mangoes = 1 / 5  # Ratio pears to mangoes\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(apples * cost_apple_per_unit + pears * (2/3) * cost_apple_per_unit + mangoes * (1/10) * cost_apple_per_unit, 150)\n    equation2 = Eq(pears, (4/5) * apples)\n    equation3 = Eq(mangoes, (2/5) * apples)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (apples, pears, mangoes))\n\n    # Calculate the total number of fruits\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n\n    return total_fruits.evalf()\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    ans = 3.05 - 0.1\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_solution_weight = 700  # grams\n    sugar_concentration = 0.32  # 32%\n\n    sugar_weight = total_solution_weight * sugar_concentration\n    water_weight = total_solution_weight - sugar_weight\n\n    return water_weight\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_distance = 800  # in meters\n    total_trees = 21\n    interval_space = (total_distance) / (total_trees - 1)\n\n    return interval_space\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    min_value = float('inf')  # Initialize with a very large number\n\n    for x in range(1000):   # Since we are looking for a 3 digit number to fit in the squares\n        number = int(f'1992{x:03d}')  # Generate the number by formatting x with leading zeros\n        if number % 2 == 0 and number % 3 == 0 and number % 5 == 0 and number % 11 == 0:\n            min_value = min(min_value, number)  # Update the minimum value\n    \n    return min_value\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    num_ways = factorial(len(word))\n    for count in letter_counts.values():\n        num_ways //= factorial(count)\n    return num_ways\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = last_term - first_term + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    avg_second_half = 65\n    months_in_half_year = 6\n\n    total_second_half = avg_second_half * months_in_half_year\n    total_year = total_first_half + total_second_half\n    months_in_year = 12\n\n    avg_per_month = total_year / months_in_year\n    \n    return avg_per_month\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    # Hazel's age in three years\n    hazel_age_in_3_years = 9\n    # Hazel's current age\n    hazel_current_age = hazel_age_in_3_years - 3\n    # Jessica's current age, which is 3 years younger than Hazel\n    jessica_current_age = hazel_current_age - 3\n    # Hazel's age next year\n    hazel_age_next_year = hazel_current_age + 1\n    # Jessica's age next year\n    jessica_age_next_year = jessica_current_age + 1\n    # Their total age next year\n    total_age_next_year = hazel_age_next_year + jessica_age_next_year\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    total_score_for_six_assignments = 6 * 92\n    total_score_for_five_assignments = 5 * 94\n    sixth_assignment_score = total_score_for_six_assignments - total_score_for_five_assignments\n\n    return sixth_assignment_score\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    purchase_price_per_pair = 65\n    selling_price_per_pair = 74\n    total_profit = 440\n    remaining_pairs = 5\n\n    profit_per_pair = selling_price_per_pair - purchase_price_per_pair\n    pairs_sold = total_profit // profit_per_pair\n    initial_pairs = pairs_sold + remaining_pairs\n\n    return initial_pairs\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    halfway_time = datetime.strptime('17:30', '%H:%M')\n    end_time = datetime.strptime('19:15', '%H:%M')\n    duration = end_time - halfway_time\n    start_time = halfway_time - duration\n    return start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_at_end = 30\n    cars_entered = 8\n    cars_exited = 10\n\n    cars_at_beginning = cars_at_end - cars_entered + cars_exited\n\n    return cars_at_beginning\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(((x * 2 / 4)**2 - 4) / 10, 6)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_min = 27 / 5\n    toys_in_20_min = toys_per_min * 20\n    return toys_in_20_min\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n    amy_visit = 24\n    ginny_visit = 36\n    \n    lcm = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n    \n    return lcm\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_liters_needed = 59\n    fill_rate = 10\n    leak_rate = 3\n    current_liters = 3  # First day fill\n    days = 1\n    \n    while current_liters < total_liters_needed:\n        current_liters += (fill_rate - leak_rate)\n        days += 1\n    \n    return days\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [1/2 * 30, 1/3 * 36, 1/4 * 40, 1/5 * 60, 1/6 * 96]\n    difference = max(amounts) - min(amounts)\n    return difference\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    # One digit every second\n    # Half an hour = 30 minutes = 30 * 60 seconds\n    total_seconds = 30 * 60\n    \n    current_number = 1\n    digits_written = 0\n    \n    while True:\n        # Count the number of digits in the current number\n        digits_in_number = len(str(current_number))\n        # Check if the next number can be written within the remaining time\n        if digits_written + digits_in_number > total_seconds:\n            break\n        # Write the number and move to the next\n        digits_written += digits_in_number\n        current_number += 1\n    \n    # Return the last number that was finished\n    ans = current_number - 1\n    return ans\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    num_teams = 20\n    num_matches = comb(num_teams, 2)\n\n    return num_matches\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%20%p')\n    game_duration = timedelta(minutes=225)\n    start_time = end_time - game_duration\n    return start_time.strftime('%I:%M %p').lstrip('0')\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # To ensure getting the first green one, Darrell has to account for taking all marbles \n    # that are not green first, which is the worst-case scenario.\n    non_green_marbles = 5 + 9 + 2  # blue + white + black\n    # Darrell needs to take all non-green marbles plus one to guarantee a green marble.\n    marbles_to_draw_for_first_green = non_green_marbles + 1\n    return marbles_to_draw_for_first_green\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_in_1_minute = toys_in_3_minutes / 3\n    return toys_in_1_minute\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    \n    for _ in range(years):\n        initial_rabbits = (initial_rabbits * 3) // 2\n    \n    return initial_rabbits\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_climbed = 0\n    days = 6\n    for i in range(1, days):\n        total_climbed += 6  # Snail climbs up during the day\n        if total_climbed >= 20:  # If snail is out, no need to slide down\n            break\n        # Snail slides down at night, but we don't know by how much, so we just subtract a variable slide\n        total_climbed -= \"slide\"  # We will calculate \"slide\" later\n    \n    # On the 7th day, the snail climbs an additional 2 meters\n    total_climbed += 2\n\n    # The \"slide\" distance is the difference between what the snail should have climbed in 6 days and the height of the well, minus the last 2 meters\n    slide = (6 * 6 - 20 + 2) / 6\n\n    return slide\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120_puffs = 120 / puffs_per_hour\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Let candy's speed be x meters per minute\n    # Then Ivy's speed would be x + 20 meters per minute\n    # Candy walked for 12 minutes and Ivy walked for 12 + 6 = 18 minutes\n    # The total distance they covered is 1200 meters\n\n    # Distance covered by Candy = Candy's speed * time walked by Candy\n    # Distance covered by Ivy = Ivy's speed * time walked by Ivy\n\n    # The equation representing their total distance would be:\n    # (x * 12) + ((x + 20) * 18) = 1200\n    # 12x + 18x + 360 = 1200\n    # 30x + 360 = 1200\n    # 30x = 1200 - 360\n    # 30x = 840\n    # x = 840 / 30\n    candy_speed = 840 // 30  # Using integer division since speed will be a whole number\n\n    return candy_speed\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament, each player plays every other player once.\n    # Thus, the total number of wins available is (8-1)*8/2 = 7*8/2 = 28 wins in total.\n    # Since each player has a different number of wins, we distribute the wins in a descending order.\n    # The distribution starts with the maximum number of wins for the champion and ends with the player who has the least wins.\n    # The maximum number of wins would be 7 (since the champion would have won against all other players).\n    \n    # Therefore, the champion has 7 wins.\n    return 7\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    nickel_metal_1 = 6 * 0.45\n    nickel_metal_2 = 14 * 0.60\n    total_nickel = nickel_metal_1 + nickel_metal_2\n    total_metal = 6 + 14\n    nickel_concentration_percent = (total_nickel / total_metal) * 100\n    return nickel_concentration_percent\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    # Let x be the number of years in the future\n    # Edward's age in x years = 8 + x\n    # Mother's age in x years = 32 + x\n    # Mother's age is three times Edward's age: 32 + x = 3 * (8 + x)\n    # Solving for x:\n    x = symbols('x')\n    equation = Eq(32 + x, 3 * (8 + x))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio_cm_to_m = 1 / 6  # 1cm to 6m\n    playground_length_cm = 5  # length on the plan\n\n    real_length_m = playground_length_cm / scale_ratio_cm_to_m  # real length in meters\n    return real_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 1 and number % 5 == 1:\n            return number\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    numbers = range(1, 14)\n    max_product = 0\n    for comb in combinations_with_replacement(numbers, 4):\n        if sum(comb) == 13:\n            product = 1\n            for num in comb:\n                product *= num\n            max_product = max(max_product, product)\n    return max_product\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    result = (3 / 5) * 35\n    return result\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    for n in range(1, 100):  # Assuming the number of students doesn't exceed 10,000\n        if (n**2 + 11) + 12 == (n + 1)**2:\n            ans = n**2 + 11\n            break\n    return ans\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n    number_of_boxes = total_money // cost_per_box\n    return number_of_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    number_to_find = 4060800 - 4000000 - 800\n    return number_to_find\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen = symbols('pen')\n\n    pencil = pen - 0.5\n    total_cost = Eq(pen + pencil, 4.5)\n\n    pen_price = solve(total_cost, pen)\n\n    return pen_price[0]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    oil_in_tank_A = 673\n    oil_difference = 56\n\n    oil_in_tank_B = oil_in_tank_A + oil_difference\n\n    return oil_in_tank_B\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    total_boys = 15\n    apples_per_boy = 30\n    apples_per_girl = 20\n    avg_apples_per_person = 26\n\n    boys_apples = total_boys * apples_per_boy\n\n    # Let number of girls be g\n    # (boys_apples + g * apples_per_girl) / (total_boys + g) = avg_apples_per_person\n    # Solving for g:\n    # boys_apples + g * apples_per_girl = avg_apples_per_person * (total_boys + g)\n    # g * apples_per_girl - avg_apples_per_person * g = avg_apples_per_person * total_boys - boys_apples\n    # g * (apples_per_girl - avg_apples_per_person) = avg_apples_per_person * total_boys - boys_apples\n    # g = (avg_apples_per_person * total_boys - boys_apples) / (apples_per_girl - avg_apples_per_person)\n    \n    g = (avg_apples_per_person * total_boys - boys_apples) / (apples_per_girl - avg_apples_per_person)\n\n    return int(g)\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000\n    richie_share = total_wealth * (1 / 3)\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1 / 2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2 / 5)\n    archie_share = remaining_after_thrifty - bounty_share\n\n    return archie_share\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_balls = 12\n    total_cost = 340\n    cost_basketball = 30\n    cost_volleyball = 25\n\n    # Let the number of basketballs be x and volleyballs be y\n    # We have two equations:\n    # x + y = total_balls\n    # cost_basketball*x + cost_volleyball*y = total_cost\n\n    # We can use substitution or elimination method, here we will use elimination\n    # First we express y in terms of x from the first equation:\n    # y = total_balls - x\n\n    # Now we substitute the value of y in the second equation\n    # cost_basketball*x + cost_volleyball*(total_balls - x) = total_cost\n    # which simplifies to:\n    # (cost_basketball - cost_volleyball)*x = total_cost - cost_volleyball*total_balls\n\n    # Finally we find x\n    x = (total_cost - cost_volleyball * total_balls) / (cost_basketball - cost_volleyball)\n\n    return int(x)\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(1/i for i in range(2, 61) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    given_to_lily = (3/4) * total_candy\n    remaining_after_lily = total_candy - given_to_lily\n    given_to_brother = (1/3) * remaining_after_lily\n    remaining_candy = remaining_after_lily - given_to_brother\n    \n    return remaining_candy\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    # Variables for the common ratio of mint and chocolate candies and the fractions of strawberry candies.\n    mint_chocolate_ratio = 1 # Given that the ratio stays the same\n    fractions_strawberry = [2/5, 2/7, 2/9]\n\n    # Variables for the sum of weights and the sum of fractions\n    total_weight = 1371\n    sum_fractions = sum([1 - frac for frac in fractions_strawberry])\n\n    # Calculate the weight of mint and chocolate candies combined\n    # using the sum of fractions as the equivalent whole amounts of mint+chocolate candies\n    weight_mint_chocolate = total_weight / (1 + mint_chocolate_ratio * sum_fractions)\n\n    # Calculate the mass of all strawberry candies using the known fractions\n    mass_strawberry_candies = sum([frac / (1 - frac) * weight_mint_chocolate for frac in fractions_strawberry])\n    \n    return int(mass_strawberry_candies)\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roy, dennis = symbols('roy dennis')\n\n    # Equation representing the total sum of money shared\n    equation1 = Eq(roy + dennis, 340)\n\n    # After spending, Dennis has twice as much as Roy\n    equation2 = Eq(dennis - dennis/4, 2 * (roy - (2/3) * roy))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (roy, dennis))\n\n    # Dennis' amount after spending 1/4 of his money\n    dennis_remaining = solutions[dennis] - solutions[dennis] / 4\n\n    return dennis_remaining\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    ans = 675 / 25\n    return ans\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    friday = symbols('friday')\n    saturday = friday + 27\n    sunday = friday - 14\n    \n    equation = Eq(friday + saturday + sunday, 475)\n    \n    sold_on_friday = solve(equation, friday)[0]\n    \n    return sold_on_friday\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    number_of_balls = 8\n    ball_cost = 20.45\n    number_of_hoops = 6\n\n    total_ball_cost = number_of_balls * ball_cost\n    total_hoop_cost = total_cost - total_ball_cost\n    hoop_cost = total_hoop_cost / number_of_hoops\n\n    return hoop_cost\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    # Total number of digits used\n    total_digits = 300\n    # Number of digits used so far\n    digits_used = 0\n    # Current page number\n    page_number = 0\n\n    # Each loop represents the number of digits a page number uses\n    for digits_in_number in range(1, len(str(total_digits)) + 2):\n        if digits_used + digits_in_number * 9 * (10 ** (digits_in_number - 1)) < total_digits:\n            digits_used += digits_in_number * 9 * (10 ** (digits_in_number - 1))\n            page_number += 9 * (10 ** (digits_in_number - 1))\n        else:\n            remaining_digits = total_digits - digits_used\n            page_number += remaining_digits // digits_in_number\n            break\n    return page_number\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    from sympy import factorint\n    \n    # factorize 693 into its prime factors\n    factors = factorint(693)\n    # To make it a perfect square, each prime factor's power should be even\n    product = 1\n    for prime, power in factors.items():\n        # Make the power even by adding one if it's odd\n        if power % 2 == 1:\n            product *= prime\n    return product\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_juice = 8 * 3  # Total amount of juice in liters\n    juice_left = total_juice - 9  # Remaining juice after drinking\n    container_volume = 5  # Volume of each container in liters\n    containers_needed = -(-juice_left // container_volume)  # Ceiling division to find number of containers\n\n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64/27)\n\n    ans = solve(equation, A)[0]\n\n    return ans\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # The unit digit of a number remains the same when the number is raised to a power.\n    # We can use this property to find the unit digit of the given expression.\n    \n    # The unit digit of a power of 13 follows a cycle: 3, 9, 7, 1...\n    # The length of this cycle is 4. Since 242 % 4 = 2, the unit digit of 13^242 is the same as that of 13^2, which is 9.\n    \n    unit_digit_13 = 9\n    \n    # The unit digit of a power of 17 follows a cycle: 7, 9, 3, 1...\n    # The length of this cycle is 4. Since 379 % 4 = 3, the unit digit of 17^379 is the same as that of 17^3, which is 3.\n    \n    unit_digit_17 = 3\n    \n    # The unit digit of a power of 4 follows a cycle: 4, 6...\n    # The length of this cycle is 2. Since 2012 % 2 = 0, the unit digit of 4^2012 is the same as that of 4^0, which is 1.\n    unit_digit_4 = 6\n    \n    # Now, we calculate the unit digit of the expression 17^379 * 4^2012\n    # Since the unit digit of 17^379 is 3 and the unit digit of 4^2012 is 6,\n    # the unit digit of their product is the unit digit of 3 * 6, which is 8.\n    unit_digit_17_4 = (unit_digit_17 * unit_digit_4) % 10\n    \n    # Lastly, we add the unit digits of 13^242 and the product of 17^379 * 4^2012\n    ans = (unit_digit_13 + unit_digit_17_4) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    steak_weight = 3 + 1/2  # 3 1/2 kg\n    cost_per_kg = 7.50\n    total_cost = steak_weight * cost_per_kg\n    money_held = 20\n    additional_money_needed = total_cost - money_held\n    return additional_money_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddies_position_from_front = 12\n    eddies_position_from_end = total_people - eddies_position_from_front + 1\n    return eddies_position_from_end\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # Marry had 7/5 as many stickers as Alexis\n    equation1 = Eq(marry, (7/5) * alexis)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    marry_gives = 0.20 * marry\n    alexis_gives = 0.20 * alexis\n\n    # Charlotte's stickers increased by 80%\n    equation2 = Eq(charlotte + marry_gives + alexis_gives, charlotte * 1.80)\n\n    # Mary had 20 stickers more than Charlotte after giving\n    equation3 = Eq(marry - marry_gives + 20, charlotte + charlotte * 0.80)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    return 498 + 349\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    ans = 6.5 + 2.55\n    return ans\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the mass of a light bowling ball\n    mass_light = symbols('mass_light')\n\n    # Equation for the total mass of the bowling balls\n    equation = Eq(6 * mass_light + 6 * (2 * mass_light), 65.7)\n\n    # Solve the equation for the mass of a light bowling ball\n    mass_light_value = solve(equation, mass_light)[0]\n\n    # Return the mass rounded to the nearest kg\n    return round(mass_light_value)\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n    benson_final = benson - 34\n    clive_final = clive - 63\n    total_money = 705\n\n    equation1 = Eq(benson + clive, total_money)\n    equation2 = Eq(benson_final, clive_final)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    total = sum(scores)\n    num_scores = len(scores)\n\n    average = total / num_scores\n    return average\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for digit1 in range(1, 10): # First digit must be from 1 to 9 (four-digit number)\n        for digit2 in range(0, 10): \n            count += 1 # Every unique combination of digit1 and digit2 forms a palindromic number\n    return count\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n    return sweets_in_C\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    ans = 3192 // 7\n    return ans\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    # average of A and B\n    avg_AB = 50\n    total_AB = avg_AB * 2  # total of A and B\n\n    # average of B and C\n    avg_BC = 43\n    total_BC = avg_BC * 2  # total of B and C\n\n    # average of A and C\n    avg_AC = 45\n    total_AC = avg_AC * 2  # total of A and C\n\n    # Sum of averages of AB, BC, and AC, will be twice the sum of A, B and C\n    sum_of_averages = total_AB + total_BC + total_AC\n    # therefore sum of A, B and C\n    sum_ABC = sum_of_averages / 2\n\n    # average of A, B, and C\n    avg_ABC = sum_ABC / 3\n\n    return avg_ABC\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - (4 * 2) + 3\n    return ans\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jay, denise = symbols('jay denise')\n\n    equation1 = Eq(jay, 6 * denise)\n    equation2 = Eq(jay + denise, 126)\n\n    solutions = solve((equation1, equation2), (jay, denise))\n\n    return solutions[denise]\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    chocolate_price_each = 1.26\n    total_chocolate_cost = 5 * chocolate_price_each\n    cookie_price_each = total_chocolate_cost / 6\n    money_at_first = 9.05\n    cost_of_cookies = 4 * cookie_price_each\n    money_left = money_at_first - cost_of_cookies\n    return money_left\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Equation based on the problem statement:\n    # boys/3 + girls/2 = total number of balls\n    # boys + girls = total number of children\n    equation1 = Eq(boys/3 + girls/2, 250)\n    equation2 = Eq(boys + girls, 650)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # g = number of girls initially\n    # b = number of boys initially\n    g, b = symbols('g b')\n\n    # g - 25 = (2/3) * (b)\n    equation1 = Eq(g - 25, 2/3 * b)\n\n    # (b - 15) = (g - 25)\n    equation2 = Eq(b - 15, g - 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Total number of students initially = number of girls + number of boys\n    total_students = solutions[g] + solutions[b]\n\n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):\n        for ten in range(0, 10):\n            for one in range(0, 10, 2):\n                if hundred + ten + one == 8:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the number in the box\n    box_number = symbols('box_number')\n    \n    # Setup the equation based on the given expression\n    equation = Eq(8 * 11, box_number * 9 + 34)\n    \n    # Solve the equation for the box_number\n    solution = solve(equation, box_number)\n    \n    # Get the solution as an integer\n    ans = solution[0]\n    \n    return ans\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    decrease = 12\n    midnight_temp = midday_temp - decrease\n    return midnight_temp\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    total_spent = 6400\n    discount = 0.80\n    saved = total_spent / (1 - discount)\n    return saved - total_spent\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    side_length = 7\n    hole_side = 3\n    volume_with_hole = 320\n    \n    area_of_base = side_length ** 2\n    area_of_hole = hole_side ** 2\n    effective_area_of_base = area_of_base - area_of_hole\n    \n    height_of_prism = volume_with_hole / effective_area_of_base\n\n    return height_of_prism\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    weight_of_x = 1.5  # in grams\n    weight_of_y = (3 * weight_of_x) / 10  # since 3x's balance with 10y's\n    return weight_of_y\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let the number of 10-cent coins be 8x and the number of 50-cent coins be 3x\n    # Then, the total value of the 10-cent coins is 8x * $0.10 and\n    # the total value of the 50-cent coins is 3x * $0.50\n\n    # The total value for all the coins is $75.90\n    # 8x * $0.10 + 3x * $0.50 = $75.90\n    # 0.8x + 1.5x = 75.90\n    # 2.3x = 75.90\n    # x = 75.90 / 2.3\n    x = 75.90 / 2.3\n\n    # Now, we find the total value of the 50-cent coins\n    # Total value of the 50-cent coins = 3x * $0.50\n    total_value_50_cent = 3 * x * 0.50\n\n    return total_value_50_cent\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # Initialize total counts and current number in the sequence\n    total_counts = 0\n    current_num = 0\n\n    # Iterate over numbers as long as the total counts is less than 2008\n    while total_counts < 2008:\n        current_num += 1            # Move to the next number in the sequence\n        total_counts += current_num # Increment total by the size of the current set of numbers\n        \n    # Find which number within the current set of numbers is the 2008th\n    nth_number = total_counts - 2008 # This is how many numbers we have exceeded\n\n    # The answer is the size of the current set minus the excess\n    ans = current_num - nth_number\n\n    return ans\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "def solution():\n    from math import factorial\n\n    # Treat Amy and Judy as one person, plus the other 6 people, for a total of 7 \"people\"\n    # There are factorial(7) ways to arrange 7 \"people\" in a circle\n    \n    # There are 2! ways to arrange Amy and Judy between themselves\n    arrangements = factorial(7) * factorial(2)\n\n    # Since the table is round, there are 7 equivalent rotations for each configuration\n    # Divide by 7 to account for rotational symmetry\n    distinct_arrangements = arrangements // 7\n\n    return distinct_arrangements\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    terms = [6, 10, 14, 18, 22, 26]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 5, 9]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(int(digit) for digit in str(i)) == 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n    \n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n\n    tomatoes_sold = 27\n\n    solutions = solve(Eq(equation.lhs.subs(tomatoes, tomatoes_sold), equation.rhs), cucumbers)\n\n    return solutions[cucumbers]\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    bags_given_away = total_bags // 3\n    bags_left = total_bags - bags_given_away\n    return bags_left\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    # Start with the first number in the range that gives us the remainder 2 when divided by 5, which is 2\n    first_term = 2\n    # The common difference of the arithmetic sequence that we're dealing with (every 5th number)\n    common_difference = 5\n    # The last term in the range that gives us the remainder 2 when divided by 5, which is 97\n    last_term = 97  \n\n    # Calculate the number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    \n    # Find the sum of the arithmetic sequence\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # The number of mosquitoes ate on the 16th night\n    a16 = 100\n    # Difference each night\n    d = 6\n    \n    # To find the first term (a1), we will use the formula for the nth term of an arithmetic sequence:\n    # an = a1 + (n - 1) * d\n    # a16 is the 16th term, n = 16\n    # 100 = a1 + (16 - 1) * 6\n    \n    a1 = a16 - (16 - 1) * d\n    \n    # To find the total number of mosquitoes ate in 31 nights, we will use the sum of an arithmetic sequence formula:\n    # S = n/2 * (a1 + an)\n    # n = 31 (total number of nights)\n    \n    # Find the last term (a31)\n    a31 = a1 + (31 - 1) * d\n    \n    # Calculate the sum\n    S = 31 / 2 * (a1 + a31)\n    \n    return int(S)\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        ABC = A * 100 + B * 10 + C\n        if A != 0 and B != 0 and C != 0: \n            return ABC\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # For Chris to win, he needs to put Dylan in a position where Dylan must take the last match.\n    # An optimal strategy for winning a matchstick game like this is to force the opponent into a position\n    # where they are left with a multiple of the number of matchsticks that can be removed plus one.\n    # In this case, the number is 3 (since Chris can take either 1 or 2 sticks, leading to 3 possible states: take 1, take 2, or the opponent's turn).\n    # Chris wants to leave 4 sticks after his first move, forcing Dylan into a losing position.\n    # Therefore, Chris must take away 7 - 4 = 3 matches to ensure victory.\n    \n    # Chris takes away 3 matches on the first turn.\n    return 3\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    morning_time = 9 * 60 + 23  # Convert 9.23am to minutes\n    afternoon_time = 13 * 60 + 6  # Convert 1.06pm to minutes (13:06 in 24h format)\n\n    minutes_between = afternoon_time - morning_time\n\n    return minutes_between\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        if A == 0 or D == 0:\n            continue  # Skip if the first digit of the number is zero.\n        ABAC = A * 1000 + B * 100 + A * 10 + C\n        DBEC = D * 1000 + B * 100 + E * 10 + C\n        ACEDC = A * 10000 + C * 1000 + E * 100 + D * 10 + C\n        if ABAC + DBEC == ACEDC:\n            return DBEC\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    a = 64\n    b = 36\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    sequence = list(range(1, 10)) + list(range(8, 0, -1))\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    choices = 1  # There is always at least one choice: to eat at any one restaurant\n\n    # If there are R restaurants, then the number of combinations of restaurants\n    # which can be chosen is the sum of combinations from 1 to R (since we allow one)\n    for r in range(2, 11):  # From 2 to 10 restaurants, as he cannot eat more than at 10 restaurants\n        choices += math.comb(10, r)\n\n    return choices\n\nimport math\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = 53 - 50 + 47 - 44 + 41 - 38 + 35 - 32 + 29 - 26 + 23\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    return 6.6 * 30\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    walk_speed = 8\n    correct_time = distance / walk_speed\n    auntie_time = 5\n    return int(correct_time)\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "def solution():\n    for A in range(1, 10):  # A cannot be 0\n        for E in range(0, 10):\n            if A != E:\n                AEEA = int(f\"{A}{E}{E}{A}\")\n                return AEEA\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the items\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # Given equations based on the problem statement\n    equation1 = Eq(notebook + pencil_case, 6)       # A notebook and a pencil case cost $6\n    equation2 = Eq(pencil_case + eraser, 8)         # A pencil case and an eraser cost $8\n    equation3 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50) # Angel bought the items at $50\n    \n    # Getting the solution for the equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n    \n    # Returning the cost of a pencil case\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    measurements = [8300, 200, 8, 50]  # Convert all measurements to centimeters\n    door_height = 200  # Standard classroom door height in centimeters\n\n    closest = min(measurements, key=lambda x: abs(x - door_height))\n    return closest\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    # Define the total number of people\n    total_people = 4\n    # Calculate the total age by multiplying the average age by the total number of people\n    total_age = 25 * total_people\n    # Calculate the combined age of the other family members\n    other_family_age = 14 + 36 + 10\n    # The age of Harry's dad is the total age minus the ages of the other family members\n    harrys_dad_age = total_age - other_family_age\n    return harrys_dad_age\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    digits_per_page = 1\n    pages = 0\n    total_digits = 0\n\n    while total_digits < 450:\n        pages += 1\n        if pages >= 100:\n            digits_per_page = 3\n        elif pages >= 10:\n            digits_per_page = 2\n        total_digits += digits_per_page\n\n    return pages - 1  # Subtract one because we add a page before checking if we've used 450 digits\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = 5 * (5 - 1) // 2\n    games_won_by_lily_eva_tina_emma = 2 + 1 + 4 + 3\n    games_won_by_gina = total_games - games_won_by_lily_eva_tina_emma\n    \n    return games_won_by_gina\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest = max(numbers)\n    smallest = min(numbers)\n    difference = largest - smallest\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    remaining_after_lunch = 1 - 5/12  # Fraction of money left after buying lunch\n    remaining_after_dinner = 1 - 2/7  # Fraction of money left after buying dinner\n    remaining_money = 45  # Money left after buying dinner\n\n    initial_money = remaining_money / (remaining_after_lunch * remaining_after_dinner)\n\n    return initial_money\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    digits_per_section = 9\n    section = 1\n    pages = 0\n    total_digits = 0\n\n    while total_digits < 1524:\n        section_length = digits_per_section * section\n        next_total = total_digits + section_length\n        if next_total >= 1524:\n            remaining_digits = 1524 - total_digits\n            pages += remaining_digits // section\n            if remaining_digits % section != 0:\n                pages += 1\n            break\n        total_digits = next_total\n        pages += digits_per_section\n        digits_per_section *= 10\n        section += 1\n\n    return pages\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_price = 5\n    bag_price = 10\n    total_spent = 300\n    \n    # Correct the mistake in Marcus's solution\n    price_per_group = (4 * shirt_price) + bag_price\n    number_of_groups = total_spent // price_per_group\n    shirts_bought = number_of_groups * 4\n    \n    return shirts_bought\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Given values\n    angle = 20  # degree\n    d = 400  # meters\n    mu = 0.2  # coefficient of kinetic friction\n    g = 9.81  # acceleration due to gravity, m/s^2\n\n    # Convert angle to radians for math calculations\n    angle_rad = math.radians(angle)\n\n    # Calculate the acceleration along the incline a = g(sin(angle) - mu * cos(angle))\n    a = g * (math.sin(angle_rad) - mu * math.cos(angle_rad))\n\n    # Using the final velocity formula: v^2 = u^2 + 2as\n    # Initial velocity u is 0, s is the distance\n    v_squared = 2 * a * d\n\n    # Calculating the final speed (velocity) v at the bottom of the slope\n    v = math.sqrt(v_squared)\n\n    return v\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    for avril_correct in range(11):  # Avril can only answer between 0 and 10 questions correctly\n        eddie_correct = avril_correct + 15//10  # Eddie has 15 more points than Avril, which corresponds to 1.5 more correct answers\n        avril_wrong = 10 - avril_correct\n        eddie_wrong = 10 - eddie_correct\n        \n        if ((avril_correct * 10 - avril_wrong * 5) + \n            (eddie_correct * 10 - eddie_wrong * 5) == 155):\n            return avril_correct\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    men_rate = 1 / (6 * 5)  # work per day per man\n    women_rate = 1 / (5 * 6)  # work per day per woman\n    combined_rate = 10 * men_rate + 5 * women_rate  # combined work per day\n    days_to_complete = 1 / combined_rate  # total days to complete the job\n\n    return days_to_complete\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of the coffee beans\n    type_A = 56\n    type_B = 96\n    type_C = 120\n\n    # Calculate the greatest common divisor (GCD) of the three weights\n    greatest_mass = gcd(gcd(type_A, type_B), type_C)\n\n    return greatest_mass\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n\n    # Initial situation: thrice as many boys as girls\n    initial_condition = Eq(boys, 3 * girls)\n    \n    # After 12 boys left and 20 girls joined, the number of boys and girls became equal\n    after_change_condition = Eq(boys - 12, girls + 20)\n\n    # Solve the system of equations\n    solution = solve((initial_condition, after_change_condition), (boys, girls))\n\n    return solution[boys]\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    # Let x be the number of apples\n    # Then there are 2x bananas and 3x oranges\n    # According to the question, the total number of fruits is 24, so:\n    # x + 2x + 3x = 24\n    # 6x = 24\n    x = 24 / 6  # Number of apples\n    bananas = 2 * x  # Number of bananas\n    return int(bananas)\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    may_short = 7\n    nancy_long = 18\n\n    may_total_length = may_short * 40 + 2.4 * 100  # Convert 2.4 m to cm\n    nancy_total_length = nancy_long * 70\n    \n    # Since they have an equal number of ribbons\n    may_long = (may_total_length - nancy_total_length) / 70\n    may_total_ribbons = may_short + may_long\n\n    return int(may_total_ribbons)\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    for chickens in range(13):  # maximum number of chickens cannot exceed total animals\n        rabbits = 12 - chickens\n        if 2 * chickens + 4 * rabbits == 34:\n            return rabbits\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the variables we're going to find: the number of years\n    years = symbols('years')\n\n    # Anna's age after some years\n    anna_future_age = 8 + years\n    # Anna's mother's age after some years\n    mother_future_age = 44 + years\n\n    # Equation representing the time when Anna's mother is three times as old as Anna\n    equation = Eq(mother_future_age, 3 * anna_future_age)\n\n    # Solve the equation\n    solutions = solve(equation, years)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    apples = 30\n    children = 6\n    # All children get at least one apple, so initialize distribution\n    distribution = [1] * children\n    apples -= children  # Subtract the minimum guaranteed apples\n\n    # Remaining apples is distributed such that\n    # one child gets the most possible (max_apples)\n    max_apples = 1  # initialize the maximum to the least possible\n    while apples > 0:\n        # Add an apple to the child with the current maximum\n        distribution[distribution.index(max(distribution))] += 1\n        max_apples = max(distribution)\n        # Reduce the remaining apple count\n        apples -= 1\n\n    return max_apples\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = 2.4 * 52 / 100 + 7.6 * 52 / 100\n    return ans\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    # Start from the largest two-digit number, 99, and go down until we find a number\n    # that matches the given condition\n    for num in range(99, 9, -1):\n        if (num - 3) % 4 == 0 and (num - 3) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_quantity = 1  # total 1 litre of Purple Fire paint\n    ratio_red_to_blue = 3 / 1\n    # Red paint is 3 parts of the total 4 parts (since 3 parts red + 1 part blue = 4 parts)\n    red_paint = (ratio_red_to_blue / (ratio_red_to_blue + 1)) * total_quantity\n    return red_paint\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    mean_value = 6\n    total_numbers = 8\n\n    # Calculate the total sum of the numbers\n    total_sum = mean_value * total_numbers\n    \n    # Find the missing number by subtracting the sum of known numbers from the total sum\n    missing_number = total_sum - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    money_given = total_money * (1/4)\n    money_left = total_money - money_given\n    return money_left\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a and b represent the number of books in shelf A and B respectively.\n    a, b = symbols('a b')\n\n    # Equation representation:\n    # a - 40 = b + 40  =>  After A gives B 40 books, they have the same number.\n    equation1 = Eq(a - 40, b + 40)\n    # a + 40 = 3 * (b - 40)  =>  After B gives A 40 books, A has three times as many as B.\n    equation2 = Eq(a + 40, 3 * (b - 40))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Return the original number of books in bookshelf A.\n    return solutions[a]\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_for_12_packets = 1.02\n    mass_per_packet = total_mass_for_12_packets / 12\n    total_mass_for_4_packets = mass_per_packet * 4\n    return total_mass_for_4_packets\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # Define a helper function to compute the number of apples the child with most apples can receive.\n    def max_apples(n, children, at_least_one=True):\n        minimal_apples = children * (children + 1) // 2 if at_least_one else 0\n        return n - minimal_apples + children\n\n    # Given 50 apples and 8 children.\n    answer = max_apples(50, 8)\n\n    return answer\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Total amount of grass present in the grassland can be represented as 'total_grass'.\n    # Since 8 cows can eat for 10 days, we have total_grass = 8 cows * 10 days.\n    # Similarly, 4 cows can eat the same amount of grass for 15 days, hence\n    # total_grass = 4 cows * 15 days.\n    # This means that 8*10 = 4*15 which gives the same total amount of grass.\n    \n    total_grass = 8 * 10\n    \n    # Now we need to find out how many cows (x) can be fed for 5 days with the same amount of grass.\n    # total_grass = x * 5 days.\n    # Solving for x:\n    \n    x = total_grass / 5\n    \n    return x\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    true_result = symbols('true_result')\n    equation = Eq(true_result / 1.22 - true_result, 99.396)\n\n    solved = solve(equation, true_result)\n\n    return float(solved[0])\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    cds = 4\n    tapes = 3\n    total_cost = 83\n    tape_cost = 9\n\n    # Total cost of tapes\n    total_tape_cost = tapes * tape_cost\n    # Total cost of cds\n    total_cd_cost = total_cost - total_tape_cost\n    # Cost of each cd\n    cost_per_cd = total_cd_cost / cds\n\n    return cost_per_cd\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    result_after_operations = 35\n    result_after_multiplication = result_after_operations - 8\n    original_number = result_after_multiplication / 3\n\n    return original_number\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n    \n    boys = 28\n    girls = 32\n\n    greatest_common_divisor = gcd(boys, girls)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # 1 litre is 1000 millilitres\n    return n\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    total_cards = 876\n    # Let x be the number of cards Hisham had, thus Melissa had 2x cards\n    # x + 2x = 876 => 3x = 876 => x = 876 / 3\n    hisham_cards = total_cards / 3\n    melissa_cards = 2 * hisham_cards\n    # After giving y cards to Hisham, Melissa and Hisham will have equal number of cards\n    # (hisham_cards + y) = (melissa_cards - y)\n    # For this to be true y equals the difference between Melissa and Hisham's cards divided by 2\n    cards_to_give = (melissa_cards - hisham_cards) / 2\n    return int(cards_to_give)\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    sum = 0\n    for i in range(1, 8):\n        num = 1 / ((5 * i - 4) * (5 * i + 1))\n        sum += num\n    ans = 36 * sum\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    odd_numbers = []\n\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 2 == 1 and len(str(number)) == 5:\n            odd_numbers.append(number)\n\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for i in range(0, 41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    return (4**2) + 4 + 1\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # 24 men complete the job in 16 days, so one man does 1/24 of the job in 16 days.\n    man_rate = 1 / (24 * 16)\n    # 16 women complete the job in 24 days, so one woman does 1/16 of the job in 24 days.\n    woman_rate = 1 / (16 * 24)\n\n    # 10 men and 6 women working together\n    combined_rate = 10 * man_rate + 6 * woman_rate\n\n    # The total job is 1, so we divide the total job by the combined rate to find the time needed.\n    time_required = 1 / combined_rate\n\n    return time_required\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    total_people = 5\n    # Total permutations\n    total_perm = factorial(total_people)\n    # Permutations with Eddie in the middle\n    eddie_middle_perm = factorial(total_people - 1)\n    # Total permutations minus the ones with Eddie in the middle\n    valid_perm = total_perm - eddie_middle_perm\n\n    return valid_perm\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # We know f(4) = 6 and f(6) = 15\n    \n    # Let's denote the first number as f(1) = a\n    # and the second number as f(2) = b\n    \n    # Thus, f(3) = a + b\n    # f(4) = 6 = b + (a + b) --> b + a + b = 2b + a\n    # f(5) = (a + b) + (2b + a) --> 2a + 3b\n    # f(6) = 15 = (2b + a) + (2a + 3b) --> 3a + 5b\n    \n    # Now we have two equations:\n    # 2b + a = 6\n    # 3a + 5b = 15\n    \n    # we can solve for a and b using simple algebra\n    # multiplying the first equation by 3 gives us: 3a + 6b = 18\n    # subtracting the second equation from this result yields: 6b - 5b = 18 - 15\n    # which gives us b = 3\n    \n    # substituting b back into the first equation: 2 * 3 + a = 6\n    # we get a = 6 - 6 = 0\n    \n    # Now that we have a and b, we can find f(7):\n    # f(7) = f(6) + f(5) = 15 + (2a + 3b) = 15 + (2 * 0 + 3 * 3)\n    # f(7) = 15 + 9\n    # f(7) = 24\n    \n    a = 0  # first number\n    b = 3  # second number\n    \n    # since we directly have f(6) we can just add to it f(5)\n    f_5 = 2 * a + 3 * b  # calculation for the 5th number\n    \n    # finally adding f(5) to f(6) to get f(7)\n    f_7 = 15 + f_5  # calculation for the 7th number\n    \n    return f_7\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for num_tuple in permutations(range(1, 10)):\n        num = int(''.join(map(str, num_tuple)))\n        if num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Given sequence is 96, n, 24, 12, 6, which looks like a geometric sequence.\n    # To find the common ratio (r), we can use the terms we know: 24 and 12.\n    # In a geometric sequence, each term is r times the previous term.\n    # So, r = term_after_n / n = term_before_n / n\n    # We have 24 as term_after_n and 12 as term_before_n.\n    # Thus, r = 12 / 24 = 1/2\n    \n    # Now we can find n by using the fact that n * r = term_after_n\n    # n * (1/2) = 24 -> n = 24 / (1/2) -> n = 24 * 2\n    n = 24 * 2\n\n    return n\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each person's earnings\n    julie, marion, ethan = symbols('julie marion ethan')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n    \n    # Sum up the earnings of all three to get the total\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n    \n    return total_earnings\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the sum of money Hamid had at first as 'x'\n    x = symbols('x')\n    \n    # According to the problem, after spending 1/3 of his money on a watch, he spent $56 on a tie,\n    # and he was left with 3/8 of the original sum.\n    # This can be translated into the following equation:\n    # x - (1/3)*x - 56 = (3/8)*x\n    \n    equation = Eq(x - (1/3)*x - 56, (3/8)*x)\n    \n    # Solving the equation for 'x'\n    initial_money = solve(equation, x)[0]\n    \n    # Now that we have the initial sum of money, we can calculate how much he spent on the watch,\n    # which is 1/3 of the initial sum. The total amount he spent is the cost of the watch plus $56 for the tie\n    money_spent_on_watch = (1/3) * initial_money\n    total_spent = money_spent_on_watch + 56\n    \n    return total_spent\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3         # Eddie's speed in m/s\n    train_speed = 57        # Train's speed in m/s\n    time_to_pass = 10       # Time to pass Eddie in seconds\n\n    # Relative speed is the sum of both speeds as they are moving towards each other\n    relative_speed = eddie_speed + train_speed\n\n    # The length of the train is the relative speed multiplied by the time it takes to pass Eddie\n    train_length = relative_speed * time_to_pass \n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the Chinese Remainder Theorem\n    congruences = [(1, 5), (2, 7), (3, 9)]\n\n    # Use solve_congruence which returns the solution and the modulo system base\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "def solution():\n    from itertools import product\n    \n    symbols = ['+', '*']\n    max_value = 0\n\n    for comb in product(symbols, repeat=3):\n        expression = f'1{comb[0]}2{comb[1]}3{comb[2]}4'\n        value = eval(expression)\n        max_value = max(max_value, value)\n    \n    return max_value\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    # total distance for the train to clear the bridge is the sum of train length and bridge length\n    total_distance = 700 + 900\n    speed = 400  # speed of the train\n\n    # time = distance / speed\n    time = total_distance / speed\n    return time\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_questions = 12\n    total_marks = 63\n    correct_marks = 8\n    incorrect_deduction = 3\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = (correct_answers * correct_marks) - (incorrect_answers * incorrect_deduction)\n        if score == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for i in range(3, 1997):\n        a, b = b, (a + b) % 3  # We only need the remainder when divided by 3\n    return b\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers sam and peter have initially\n    peter = symbols('peter')\n    sam = peter + 40\n\n    # Sam gives 20% of his stickers to Peter\n    sam_gives = 0.20 * sam\n    peter_gives = 0.25 * (peter + sam_gives)\n\n    # Update the number of stickers each person has after the exchange\n    sam_final = sam - sam_gives + peter_gives\n    peter_final = peter + sam_gives - peter_gives\n\n    # The difference between their stickers after the exchange is 96\n    equation = Eq(sam_final - peter_final, 96)\n\n    # Solve for peter's initial number of stickers\n    solution = solve((equation,), (peter,))\n\n    return solution[peter]\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    return 1.25 * 47 * 8\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n\n    while peter_age != pip_age + pit_age:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n\n    return peter_age\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Hazel's current age and her mom's current age\n    hazel_current, mom_current = symbols('hazel_current mom_current')\n    \n    # Equation 1: Hazel will be three times her current age in 12 years\n    equation1 = Eq(hazel_current + 12, 3 * hazel_current)\n    \n    # Equation 2: On Hazel's 18th birthday, her mom will be three times Hazel's age\n    equation2 = Eq(mom_current + (18 - hazel_current), 3 * 18)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hazel_current, mom_current))\n    \n    # Mom's current age is one of the solutions\n    mom_current_age = solutions[mom_current]\n    \n    return mom_current_age\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    # Formula: 1^3 + 2^3 + 3^3 + ... + n^3 = (1 + 2 + 3 + ... + n)^2\n    n = 10\n    sum_of_numbers = sum(range(1, n+1))\n    ans = sum_of_numbers ** 2\n    return ans\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 4 different patterns. Thus, we can always draw 4 of the same number without having consecutive numbers.\n    # There are 13 different numbers, so to ensure consecutive numbers we could have to draw 4 cards of each number.\n    # But the last group of the same number drawn ensures we have a consecutive number with the previous group.\n    # Hence, we need to draw 4 cards of each of the first 12 different numbers, which adds up to 48.\n    # With the next card drawn, we are guaranteed to have consecutive numbers.\n    ans = 48 + 1\n    return ans\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    ans = 10 * 2\n    return ans\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    return (124 + 231) // 5\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Each sheet consists of 4 page numbers\n    # The fifth sheet will therefore have the 4 pages that are 17th to 20th in the numbers\n    # Because the back page is 36, we count backwards from there\n    # The last sheet (9th) will have page numbers 36 & 35 on one side and 1 & 2 on the other side\n    # So, the 5th sheet will be (36 - 2*(9-5)) & (36 - 2*(9-5) - 1) && (2*(5-1) + 1) & (2*(5-1) + 2)\n    \n    back_page_num = 36\n    fifth_sheet = back_page_num - 2 * (9 - 5)\n    \n    # Calculate all four page numbers on the fifth sheet\n    pages = [fifth_sheet, fifth_sheet - 1, fifth_sheet - 2, fifth_sheet - 3]\n    \n    # Sum the page numbers on that sheet\n    page_sum = sum(pages)\n    \n    return page_sum\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_row = 48\n    last_row = 80\n    difference = 4\n    # Using arithmetic sequence sum formula: n/2 * (first_term + last_term)\n    total_rows = (last_row - first_row) // difference + 1\n    total_seats = total_rows * (first_row + last_row) // 2\n    return total_seats\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    # Although the cost decreases, the selling price remains the same.\n    selling_price_per_laptop = 2000\n    initial_profit = 60000\n    increased_profit = initial_profit * 1.3  # 30% increase in profit\n\n    # Let x be the number of laptops.\n    # Let c be the original cost per laptop.\n    # initial_profit = x * (selling_price_per_laptop - c)\n    # increased_profit = x * (selling_price_per_laptop - c * 4/5)\n    \n    # By equating the profit formulas, we can solve for x.\n    # initial_profit = increased_profit - x * c * 1/5\n    # x * c = initial_profit + x * c * 1/5\n    # x * c * 4/5 = increased_profit - initial_profit\n    # x = (increased_profit - initial_profit) / (c * 4/5)\n\n    # Solve for x using the known values.\n    # x * (selling_price_per_laptop - c) = initial_profit\n    # x * c * 4/5 = increased_profit - initial_profit\n    # x = initial_profit / (selling_price_per_laptop - c)\n    # c = selling_price_per_laptop - initial_profit / x\n\n    # Replace c in the second equation and solve for x.\n    # x = (increased_profit - initial_profit) / ((selling_price_per_laptop - initial_profit / x) * 4/5)\n    # solve for x with cross-multiplication and simplification\n\n    # x = (130% - 100%) * initial_profit / (80% * initial_profit / x - initial_profit)\n\n    # x**2 = (30 / 80 * initial_profit) / (selling_price_per_laptop - initial_profit / x)\n    # After simplifying we get the quadratic equation:\n    # 0 = x**2 - (30/80 * initial_profit) / (selling_price_per_laptop * x - initial_profit)\n\n    # 80 * x**2 = 30 * initial_profit * x - 30 * percentage_profit_increase * initial_profit / selling_price_per_laptop\n    # 80 * x**2 - 30 * initial_profit * x + 30 * percentage_profit_increase * initial_profit / selling_price_per_laptop = 0\n\n    # Substitute the given values and solve the quadratic equation.\n    # 30% increase in profit is the percentage_profit_increase\n    percentage_profit_increase = 0.3\n    laptops = (30/80 * initial_profit) / (selling_price_per_laptop - (30/80 * initial_profit))\n    \n    # Solving the quadratic equation.\n    # Since there can't be a negative number of laptops, we choose the positive root.\n    ans = abs(laptops)  # Number of laptops should be positive\n\n    return int(ans)\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    one_digit = 9\n    two_digit = 90 * 2\n    three_digit = (129 - 100 + 1) * 3\n    \n    total_digits = one_digit + two_digit + three_digit\n    return total_digits\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    M = symbols('M')\n    a = symbols('a', integer=True, positive=True)\n    eqns = []\n\n    # M mod 7, M mod 9, M mod a, and M mod 28 form an increasing arithmetic sequence\n    # Let the common difference be d\n    d = symbols('d', integer=True, positive=True)\n    \n    # Build the system of modular equations\n    # M = 7k + r, M = 9m + (r+d), M = an + (r+2d), M = 28p + (r+3d) where 0 <= r < 7 (as r must be smaller than 7, the smallest divisor)\n    r = symbols('r', integer=True)\n    for i, mod in enumerate([7, 9, a, 28]):\n        eqns.append(Eq(M % mod, r + i*d))\n    \n    # Additionally, we know that a is in between 9 and 28, and since it forms an arithmetic sequence in remainder\n    # We have three times the common difference added to the second term (remainder by dividing 9) is < 28\n    eqns.append(Eq(r + 3*d < 28))\n\n    # Solve to find valid a's and d's that satisfy the system of equations\n    solutions = solve(eqns, (M, a, r, d), dict=True)\n\n    # Find the smallest positive integer M that meets the conditions\n    smallest_M = min(sol[M] for sol in solutions if sol[M] > 0)\n\n    return smallest_M\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Calculate work done by one man in one day\n    work_per_man_per_day = 120 / (3 * 2)\n    \n    # Calculate total work for 880 metres trench\n    total_work = 880\n\n    # Calculate how many days it takes for four men to complete the trench\n    days_for_four_men = total_work / (4 * work_per_man_per_day)\n    \n    return days_for_four_men\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    def total_students(n):\n        # For an nxn square, boys are in even layers and girls in odd layers considering 1-indexed layers\n        boys = sum([(2*i+1)**2 for i in range(0, n//2)])  # sum of squares of even layers\n        girls = sum([(2*i)**2 for i in range(1, n//2+1)])  # sum of squares of odd layers\n        return boys, girls, boys + girls  # return count of boys, girls and total\n\n    for n in range(1, 100):  # Assume the square won't be larger than 100x100\n        boys, girls, total = total_students(n)\n        if boys - girls == 36:\n            return total\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    # Total number of people to be interviewed\n    total_people = 400\n    \n    # Number of people Ellie can interview each week\n    ellie_rate = 60\n    \n    # Number of weeks Ellie and Gloria together take to finish the work\n    time_together = 4\n    \n    # Calculate the rate at which Ellie and Gloria together can interview people per week\n    both_rate = total_people / time_together\n    \n    # Calculate Gloria's rate per week\n    gloria_rate = both_rate - ellie_rate\n    \n    # Calculate the time it will take Gloria to finish interviewing everyone by herself\n    time_gloria = total_people / gloria_rate\n    \n    return time_gloria\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = 2 * 15 // 5\n    return numerator\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    numerator = (285 + 6/7) + (181 + 10/11) + (153 + 12/13)\n    denominator = (1/7) + (1/11) + (1/13)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    first_shelf = 18\n    second_shelf = 24\n\n    # Let x be the number of books to move from the first shelf to the second shelf.\n    # The new number of books on the first shelf will be (first_shelf - x)\n    # The new number of books on the second shelf will be (second_shelf + x)\n    # According to the problem we want the second shelf to have twice as many books as the first shelf\n    # This gives us the equation: second_shelf + x = 2 * (first_shelf - x)\n\n    # Solving the equation:\n    x = symbols('x')\n    equation = Eq(second_shelf + x, 2 * (first_shelf - x))\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Let's denote the first term of the arithmetic sequence as 'a',\n    # and the common difference as 'd'.\n    \n    # The sum of the first 5 terms can be expressed using the formula for the sum of an arithmetic sequence:\n    # Sum_first_5 = 5/2 * [2*a + (5-1)*d] = 10\n    # Similarly, the sum of the last 5 terms is:\n    # Sum_last_5 = 5/2 * [2*(a + (60-1)*d) + (5-1)*d] = 120\n    \n    # We have two equations:\n    # 1) 5a + 10d = 20\n    # 2) 120a + 295d = 240\n    # Now we solve for 'a' and 'd'.\n    \n    # Simplify the equations\n    # 1) a + 2d = 4 (divide by 5)\n    # 2) a + (59/5)d = 2 (divide by 60 and simplify)\n    \n    # Subtract equation 1) from equation 2):\n    # (59/5)d - 2d = 2 - 4\n    # (59/5 - 10/5)d = -2\n    # (49/5)d = -2\n    # d = -2 / (49/5)\n    # d = -10/49\n    \n    # Now substitute d back into equation 1) to find 'a'\n    # a + 2(-10/49) = 4\n    # a - 20/49 = 4\n    # a = 4 + 20/49\n    # a = (196+20)/49\n    # a = 216/49\n    \n    # Having found 'a' and 'd', we can now find the sum of the 60 terms using the sum formula for an arithmetic sequence:\n    # Sum_60 = 60/2 * [2*a + (60-1)*d]\n    # Sum_60 = 30 * [2*(216/49) + 59*(-10/49)]\n    # Sum_60 = 30 * [(432 - 590)/49]\n    # Sum_60 = 30 * [-158/49]\n    # Sum_60 = 30 * -158 / 49\n    # Sum_60 = -4740 / 49\n    # Sum_60 = -96.73469387755102\n    \n    # Final answer should be rounded to the nearest whole number\n    # because the terms of the sequence and their sums must be integers\n    sum_60 = -4740 // 49  # Integer division rounds towards minus infinity, which gives -97\n    \n    return sum_60\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    distance = 300  # Bridge length in meters\n    time = 20       # Time to cross in seconds\n\n    # Speed is distance divided by time\n    speed = distance / time  # Speed in meters per second\n\n    # Convert speed to kilometers per hour\n    speed_kmh = speed * 3.6\n\n    return speed_kmh\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    # Let x be the total number of pupils in the class\n    # Then 5 pupils are in the band\n    # 3/4 * (x - 5) pupils are in the choir\n    # 2/9 * x pupils are neither in the band nor the choir\n    # So, x = 5 + 3/4 * (x - 5) + 2/9 * x\n    \n    # Solving the equation for x to find the total number of pupils\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the number of pupils\n    x = symbols('x')\n    \n    # Set up the equation based on the problem statement\n    equation = Eq(x, 5 + (3/4) * (x - 5) + (2/9) * x)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # The solution is the number of pupils in the class\n    return solution[0]\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    total_balls = 47\n    long_tube_capacity = 8\n    short_tube_capacity = 5\n\n    # Assume the number of long tubes is x and the number of short tubes is y.\n    # We have the equation: 8x + 5y = 47\n    # We also know that x and y must be whole numbers.\n\n    # To find the possible value of x, we loop from 0 to the maximum number\n    # of long tubes that can hold 47 balls and check if the remaining balls can be\n    # held by an integer number of short tubes.\n    max_long_tubes = total_balls // long_tube_capacity\n    for x in range(max_long_tubes + 1):\n        remaining_balls = total_balls - (long_tube_capacity * x)\n        if remaining_balls % short_tube_capacity == 0:\n            return x\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    term_distance = 9 - 3\n    difference = (ninth_term - third_term) / term_distance\n    \n    # getting the first term by subtracting two times the difference from the third term\n    first_term = third_term - 2 * difference\n    \n    # calculate the 11th term\n    eleventh_term = first_term + 10 * difference\n    \n    return eleventh_term\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    F, J = symbols('F J')  # F is the original number of Felicia's bracelets, J is how many Janice bought.\n\n    # Felicia sold 3/5 of her bracelets\n    F_sold = 3 * F / 5\n\n    # Janice bought 2/5 of the bracelets Felicia sold\n    J_bought = 2 * F_sold / 5\n\n    # After selling and buying, Felicia has 2/5 of her original bracelets\n    F_after = F - F_sold\n\n    # Janice now has her original bracelets plus the ones she bought\n    J_after = 96 + J_bought\n\n    # The new ratio is 5:7\n    equation_ratio = Eq(F_after / J_after, 5/7)\n\n    # Janice originally had 96 bracelets\n    equation_initial_janice = Eq(J_bought, J)\n\n    # Solve the system of equations\n    solutions = solve((equation_ratio, equation_initial_janice), (F, J))\n\n    return solutions[J]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    # Starting with 32, as we know there are at least 32 lollipops\n    lollipops_left_4 = 32\n    # When putting 7 lollipops per box, last box has only 3 lollipops\n    # So, starting the count for 7 lollipops case with 3 lollipops\n    lollipops_left_7 = 3\n\n    # We increment the number of lollipops by multiples of 4 until we find a number\n    # that also satisfies the condition for 7 lollipops boxes (last box has 3 lollipops).\n    while lollipops_left_7 % 7 != 3 or lollipops_left_4 % 4 != 0:\n        lollipops_left_4 += 4\n        lollipops_left_7 += 4\n\n    # Returning the total number of lollipops which is the sum of \n    # lollipops in complete boxes for case of 4 lollipops per box (lollipops_left_4) \n    # and the extra 32 lollipops which were left when Jonathan used 4 lollipops per box.\n    return lollipops_left_4\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    def sum_of_cubes(n):\n        return sum(i**3 for i in range(1, n+1))\n\n    excluded_numbers = [3, 6, 9, 12, 15]\n    ans = sum_of_cubes(15) - sum([x**3 for x in excluded_numbers])\n    return ans\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discounted_price = original_price * (1 - discount_percentage / 100)\n\n    return discounted_price\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(5 * boys + 3 * girls, 448) # total candies equation\n    equation2 = Eq(girls, boys + 8)           # relation between number of girls and boys\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    total_children = solutions[boys] + solutions[girls]\n    \n    return total_children\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let's denote the true result as x\n    # If Will forgets to put down the decimal point, the calculation becomes 432 * unknown_number\n    # Therefore, 432 * unknown_number = x + 2138.4\n    # But since unknown_number is the same in both cases, we also have 4.32 * unknown_number = x\n    # Combining the equations:\n    # 432 * unknown_number - 4.32 * unknown_number = 2138.4\n    # 432/4.32 * x - x = 2138.4\n    # (432/4.32 - 1) * x = 2138.4\n    # 100x - x = 2138.4\n    # 99x = 2138.4\n    # x = 2138.4 / 99\n    x = 2138.4 / 99\n    return x\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # The remainders are the same, so the differences between the numbers should be divisible by A\n    diff1 = 2758 - 2017\n    diff2 = 3670 - 2758\n    # Calculate the greatest common divisor (GCD) of the differences\n    from math import gcd\n    A_gcd = gcd(diff1, diff2)\n    \n    # Any divisor of the gcd (except the number itself) is a potential value for A\n    possible_values_A = []\n    for i in range(1, A_gcd):\n        if A_gcd % i == 0:\n            possible_values_A.append(i)\n    \n    # Sum the possible values of A\n    sum_possible_values_A = sum(possible_values_A)\n    return sum_possible_values_A\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    milk, fruit = symbols('milk fruit')\n    # Given ratios\n    equation1 = Eq(milk / fruit, 7/9)\n    # Ratio after eating 8 milk candies\n    equation2 = Eq((milk - 8) / fruit, 2/3)\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (milk, fruit))\n    return solutions[milk]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1  # Start searching from the smallest integer that leaves a remainder of 1 when divided by 3.\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            break\n        B += 1\n    return B\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    grandmother_age_in_2008 = 80\n    mother_age_in_1996 = 40\n    years_difference = 2008 - 1996\n    grandmother_age_when_mum_born = grandmother_age_in_2008 - mother_age_in_1996 - years_difference\n    return grandmother_age_when_mum_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = sum(str(i).count('3') for i in range(4, 52))\n    return count\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    total_apples = 60\n    apples_per_friend = 4\n    \n    # Find the number of friends\n    number_of_friends = total_apples / apples_per_friend\n    \n    # Each friend asks for one more apple\n    apples_per_friend += 1\n    \n    # Calculate new total number of apples needed\n    total_needed_apples = number_of_friends * apples_per_friend\n    \n    return total_needed_apples\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    for groups_of_6 in range(25):\n        groups_of_4 = 24 - groups_of_6\n        if groups_of_6 * 6 + groups_of_4 * 4 == 112:\n            return groups_of_6\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    cm_per_meter = 100\n    ans = meters * cm_per_meter\n    return ans\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Assume Yohan takes socks out in the worst case scenario where he does not get a pair of white socks.\n    # In the worst case, he could take out all red and black socks first.\n    red_socks = 10\n    black_socks = 10\n    # One more to get at least a pair of white socks.\n    white_socks_needed = 2\n    # Total socks taken to ensure a pair of white socks in the worst case.\n    socks_taken = red_socks + black_socks + white_socks_needed\n\n    return socks_taken\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    average_initial = 60\n    average_final = 90\n    num_initial_numbers = 3\n    num_final_numbers = 4\n    \n    sum_initial_numbers = average_initial * num_initial_numbers\n    sum_final_numbers = average_final * num_final_numbers\n    \n    fourth_number = sum_final_numbers - sum_initial_numbers\n    \n    return fourth_number\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A != 0:  # A cannot be 0 as it is a 3-digit number\n            ABC = 100 * A + 10 * B + C\n            return ABC\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    # Let x be the number of bottles of lemonade sold at $4\n    # Let y be the number of bottles of \"1000 Plus\" sold at $7\n    # Total bottles = x + y\n    # Total income = 4x + 7y\n    # We are looking for the minimum value of y such that:\n    # x + y = 350 (since he started with 350 bottles)\n    # 4x + 7y = 2012 (since his total income was $2012)\n    # We express x in terms of y using the first equation x = 350 - y\n    # And substitute it into the second equation to find the minimum y\n    \n    # Initialize y to the total number of bottles since we are looking\n    # for the minimum number of \"1000 Plus\" which implies a maximum for\n    # lemonade, so starting from the total and going downward.\n    y = 350\n    while True:\n        # Calculate x from y\n        x = 350 - y\n        # Check if this distribution of bottles gives the total income\n        if 4*x + 7*y == 2012:\n            # We have found the minimum number of \"1000 Plus\" that could have been sold\n            return y\n        # Decrement y (since we're looking for the minimum y, we go downwards)\n        y -= 1\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    pen_cost = 3 * 1.60\n    pencil_cost = 2 * 0.62\n    magazine_cost = 4.50\n\n    total_cost = pen_cost + pencil_cost + magazine_cost\n    change = 20 - total_cost\n\n    return change\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Owen to Oscar: 3 fish for 2 rabbits or 3/2 fish per rabbit\n    # Oscar to Dennis: 3 rabbits for 4 packs of wheat or 3/4 rabbits per pack of wheat\n    # Owen to Dennis: (3/2 fish per rabbit) * (3/4 rabbits per pack of wheat) = (9/8) fish per pack of wheat\n    # For 8 packs of wheat: (9/8) fish/pack * 8 packs = 9 fish\n    \n    fish_per_pack_of_wheat = (3 / 2) * (3 / 4)\n    total_fish_for_8_packs = fish_per_pack_of_wheat * 8\n    \n    return int(total_fish_for_8_packs)\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    from math import floor\n\n    n = 25\n    count = 0\n    while n > 0:\n        n = floor(n / 5)\n        count += n\n\n    return count\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Original price of handbag before discount\n    handbag_before_discount = symbols('handbag_before_discount')\n    # Price of purse before discount\n    purse_before_discount = symbols('purse_before_discount')\n\n    # Alicia bought a handbag for $428 after a discount of 20%\n    # Hence, handbag_before_discount * (1 - 20/100) = $428\n    equation1 = Eq(handbag_before_discount * (1 - 0.20), 428)\n\n    # Alicia also bought a purse at 28% discount.\n    # The total discount for the handbag and the purse was $121\n    # Hence, (handbag_before_discount * 20/100) + (purse_before_discount * 28/100) = $121\n    equation2 = Eq((handbag_before_discount * 0.20) + (purse_before_discount * 0.28), 121)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (handbag_before_discount, purse_before_discount))\n\n    return solutions[purse_before_discount]\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    dances_per_week = 2\n    weeks = 2\n\n    total_dances = dances_per_week * weeks\n\n    return total_dances\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    well_height = 25\n    climb_day = 4\n    slide_night = 1\n    progress_day = climb_day - slide_night\n    current_height = 0\n    day = 0\n    \n    while current_height < well_height:\n        day += 1\n        current_height += climb_day\n        if current_height >= well_height:\n            break\n        current_height -= slide_night\n    \n    return day\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_money = symbols('original_money')\n    \n    spent_chair = 120\n    spent_jacket_percent = 0.40\n    left_percent = 0.30\n    \n    equation = Eq(original_money - (spent_chair + spent_jacket_percent * (original_money - spent_chair)), original_money * left_percent)\n\n    solutions = solve(equation, original_money)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # Given a recurring decimal 0.A22... where A is unknown.\n    # The sum of the first 20 digits after the decimal point is 80.\n\n    # Let's calculate the sum of one period of the recurring sequence, which is A + 2.\n    # Since the period is repeating every 2 digits, there are 10 full periods in the first 20 digits.\n\n    # Sum of digits in one period\n    sum_one_period = 0\n\n    # Since we know it's a two-digit recurring decimal, period is 'A2'\n    # Sum of one period A + 2\n    sum_one_period = 10 + 2\n\n    # Total sum of digits for 20 digits would be sum_one_period * 10\n    # We set that equal to 80 and solve for A.\n\n    A = (80 / 10) - 2\n\n    # The answer is A.\n    return int(A)\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Time jogged in hours before starting to walk\n    jogged_time_hours = (7 - 6) - (30/60)\n    # Time walked in hours\n    walked_time_hours = 1\n    \n    jogging_speed_mph = 6\n    walking_speed_mph = 5\n    \n    # Distance covered jogging\n    distance_jogged = jogging_speed_mph * jogged_time_hours\n    # Distance covered walking\n    distance_walked = walking_speed_mph * walked_time_hours\n    \n    # Total distance traveled\n    total_distance = distance_jogged + distance_walked\n    \n    return total_distance\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5  # because all fractions are in the form n/(n+5)\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(6, 10)\n    \n    return ans\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    least_books_in_most_layer = (total_books + layers - 1) // layers\n    return least_books_in_most_layer\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    # Iterate over the possible hundreds place (1, 2, or 3)\n    for hundreds in range(1, 4):\n        # Iterate over the possible tens place, which cannot be the same as hundreds\n        for tens in (0, 1, 2, 3):\n            if tens != hundreds:\n                # Iterate over the possible ones place, cannot be same as hundreds or tens\n                for ones in range(4):  # 0, 1, 2, 3 are possible for one's place\n                    if ones != tens and ones != hundreds:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    difference = -4\n\n    num_terms = 0\n    term = first_term\n    while term > 0:\n        num_terms += 1\n        term += difference\n\n    return num_terms\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Ahmad originally bought\n    x = symbols('x')\n    \n    # Equation based on the average cost before purchasing additional books\n    equation1 = Eq((3.5 * x + 2 * 6) / (x + 2), 4)\n    \n    # Solving for x, the number of books originally bought\n    num_books_original = solve(equation1, x)\n    \n    # Adding 2 to the number of originally bought books to get the total number of books\n    total_books = num_books_original[0] + 2\n\n    return total_books\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    result = 129.35 - 0.47\n    return result\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    # For fixed sum, the product abc is maximized when a, b, and c are as close as possible\n    # since (a - x)(b)(c + x) < abc for positive integers (the AM-GM inequality)\n    \n    # Therefore, we start by dividing the sum 31 by 3, to split it as evenly as possible\n    a = b = c = 31 // 3  # This is the integer division\n\n    # Since 31 is not divisible exactly by 3, we need to add the remainder to one of the numbers\n    remainder = 31 % 3\n    \n    # Distribute the remainder starting from the largest variable\n    c += remainder  # Now c will be the largest number\n\n    # Calculate the product of a, b and c\n    max_product = a * b * c\n    \n    return max_product\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight_in_grams = 1.2 * 1000\n    piece_weight = 30\n    num_pieces = total_weight_in_grams / piece_weight\n    return int(num_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.056688\n    cup_capacity_quarts = 0.5\n    number_of_cups = liters_to_quarts / cup_capacity_quarts\n    \n    return round(number_of_cups)\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Rachel and Alice's candies\n    r, a = symbols('r a')\n\n    # Equation representing Rachel gives Alice 10 pieces\n    eq1 = Eq(r - 10, a + 10)\n\n    # Equation representing Rachel has 3 times the candies as Alice after eating 8 pieces each\n    eq2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (r, a))\n\n    # Total candies they originally had\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    return 748 - 189\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    ans = 18 // 3\n    return ans\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    if len(set([A, 2, 0, C, E, F])) == 6: # All digits must be different\n                        num1 = 500000 + A*10000 + 2000 + C*100 + E*10 + F\n                        num2 = E*100000 + F*10000 + A*1000 + 200 + 100*C\n                        if 5 * num1 == 6 * num2:\n                            return A*1000 + C*100 + E*10 + F\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n\n    equation1 = Eq(angel, 5/6 * belle)\n    equation2 = Eq(angel - 58, 75/100 * belle)\n\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Jogging time from 6:30 am to 7:30 am\n    jogging_time = 1  # hours\n    jogging_speed = 6  # miles per hour\n\n    # Walking time from 7:30 am to 9:30 am\n    walking_time = 2  # hours\n    walking_speed = 5  # miles per hour\n\n    # Total distance\n    distance_jogging = jogging_time * jogging_speed\n    distance_walking = walking_time * walking_speed\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    return (4/9) * 36\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of children\n    x = symbols('x')\n    \n    # If there was 20p more, each child would receive 70p\n    equation1 = Eq(x * 70, x * 60 + 20)\n\n    # If each child was to receive 60p, 2.10 pounds would be left over\n    equation2 = Eq(x * 60 + 210, x * 70)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), x)\n\n    return solutions[x]\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d represent the dad's current age and s represent the son's current age.\n    d, s = symbols('d s')\n\n    # Equation for the age relation six years ago\n    equation1 = Eq(d - 6, 5 * (s - 6))\n\n    # Equation for the sum of their ages this year\n    equation2 = Eq(d + s, 78)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (d, s))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 20 / 100\n    bank_charge_percentage = 0.5 / 100\n\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len({x1, x2, x3}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    account_balance = -76.20\n    payment = 120.75\n\n    ans = account_balance + payment\n\n    return ans\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for num in range(10, 10000):  # Limiting the range for practical purposes, knowing the number can't be too large\n        if int(str(9) + str(num)[:-1]) == num * 4:\n            return num\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    import math\n\n    # Eddie is fixed on the left end, Avril can either be on his immediate right or left (2 ways)\n    # There are 5! ways to arrange the remaining 5 students\n    ways_to_arrange_remaining = math.factorial(5)\n\n    # Apply the multiplication principle\n    total_ways = 2 * ways_to_arrange_remaining\n    \n    return total_ways\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"2nd March 2023\", \"%dth %B %Y\")\n    end_date = datetime.strptime(\"15th April 2023\", \"%dth %B %Y\")\n    difference = end_date - start_date\n\n    return difference.days + 1\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    percentage_increase = 45\n    increased_amount = (original_price * percentage_increase) / 100\n    new_price = original_price + increased_amount\n\n    return new_price\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Total gloves per color: blue = 1 left + 3 right = 4, green = 2 left + 4 right = 6\n    # To guarantee a pair of the same color, she needs to take all of one color plus one more.\n    # If all gloves of one color are of the same hand, the next glove Dilly picks will ensure a pair.\n    \n    # Worst case scenario, she picks all blue gloves first, which are 4 in total.\n    # Then she has to pick a green glove, and the first green will ensure a pair.\n    number_of_gloves = 4 + 1  # All blue gloves + 1 green glove\n    \n    return number_of_gloves\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    numbers = [9, 7, 5, 4, 1, 8, 8]\n    mean = 6\n    total_numbers = 8\n    total_sum = mean * total_numbers\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Initial conditions\n    circumference = 300  # circumference of the garden in meters\n    first_interval = 3   # initial interval in meters\n    new_interval = 5     # new interval in meters after the 30th hole\n\n    # Number of holes dug with the initial interval\n    initial_holes = 30\n\n    # Distance covered after 30 holes\n    distance_covered = initial_holes * first_interval\n\n    # Remaining distance to cover\n    remaining_distance = circumference - distance_covered\n    \n    # Calculate the number of additional holes needed with new interval\n    additional_holes = -(-(remaining_distance) // new_interval)\n    \n    return int(additional_holes)\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    types_of_pasta = 2\n    types_of_sauces = 3\n    types_of_toppings = 2\n\n    ans = types_of_pasta * types_of_sauces * types_of_toppings\n    return ans\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    # Rachel gives Alice 10 sweets, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # Both eat 8 sweets, Rachel has 3 times as many as Alice\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Sum the number of sweets they originally had\n    total_sweets = solutions[rachel] + solutions[alice]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    def climb_ways(steps):\n        if steps == 1:\n            # one way to climb one step\n            return 1\n        elif steps == 2:\n            # two ways: (1, 1) or (2)\n            return 2\n        else:\n            # ways to climb n steps is the sum of ways to climb (n-1) and (n-2) steps\n            return climb_ways(steps - 1) + climb_ways(steps - 2)\n    \n    # calculate ways to reach the 5th step\n    ways_to_5 = climb_ways(5)\n    # calculate ways to reach the 10th step from the 5th step\n    ways_from_5_to_10 = climb_ways(10 - 5)\n    \n    # total different ways is the product of the two\n    return ways_to_5 * ways_from_5_to_10\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum((i * (16 - i) for i in range(1, 16)))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the unknown number\n    x = symbols('x')\n\n    # Set up the equation based on the given information\n    equation = Eq((x + 3) / 4, 12)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    # Pages from 1 to 50\n    for page in range(1, 51):\n        # Check if '3' is in the page number\n        if '3' in str(page):\n            erased_sum += page\n    return erased_sum\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    pipe_length = 305\n    each_pipe_length = 5\n\n    num_pipes_needed = -(-pipe_length // each_pipe_length) # Ceiling division to get the approximate number of pipes\n\n    return num_pipes_needed\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_average = 80\n    ivan_total = ivan_average * 5\n    \n    billy_average = 89\n    billy_total = billy_average * 4\n    \n    desired_average_billy = ivan_average + 10\n    \n    billy_fifth_assignment_score = (desired_average_billy * 5) - billy_total\n\n    return billy_fifth_assignment_score\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # Option 1: (15+5) * (5+15) - 6 + 7\n    result1 = (15+5) * (5+15) - 6 + 7\n    # Option 2: 15 + (5 * (5+15)) - 6 + 7\n    result2 = 15 + (5 * (5+15)) - 6 + 7\n    # Option 3: 15 + 5 * (5+(15-6+7))\n    result3 = 15 + 5 * (5+(15-6+7))\n    # Option 4: ((15+5) * 5 + 15) - 6 + 7\n    result4 = ((15+5) * 5 + 15) - 6 + 7\n    # Option 5: 15 + ((5 * 5 + 15) - 6 + 7)\n    result5 = 15 + ((5 * 5 + 15) - 6 + 7)\n    \n    ans = max(result1, result2, result3, result4, result5)\n    return ans\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    count = 0\n    for x1 in range(1, 1000):\n        x2 = 1000 - x1\n        if x2 >= 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    m = 1\n    while True:\n        if (1260 * m) ** 0.5 == int((1260 * m) ** 0.5):\n            break\n        m += 1\n    return m\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    n_th_term = 100  \n    a_9 = 49  \n    k = 9  \n\n    common_difference = (a_9 - 39) / 2  \n    a_1 = a_9 - (k - 1) * common_difference  \n\n    a_n = a_1 + (n_th_term - 1) * common_difference  \n    return int(a_n)\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + (2 * peaches)\n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for i in range(1, 28):\n        if (i % 4 == 3) and (i % 7 == 3):\n            return (i % 28)\n    return 0\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 792\n    pages_with_1_digit = 9\n    pages_with_2_digits = 90 * 2\n    pages_with_3_digits = 900 * 3\n\n    used_digits = pages_with_1_digit + pages_with_2_digits\n\n    remaining_digits = total_digits - used_digits\n    pages_with_3_digits = remaining_digits // 3\n    \n    total_pages = pages_with_1_digit + 90 + pages_with_3_digits\n\n    return total_pages\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm = 8*11 # Since 8 and 11 are coprime, their LCM is simply their product\n    for num in range(10, 100):  # Loop through all two-digit numbers\n        if num % 8 == 6 and num % 11 == 6:\n            return num\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    base = 9\n    ones_digit_power_cycle = [base**i % 10 for i in range(1, 5)]  # The cycle of ones digits in powers of 9\n    exponent = 99\n    position_in_cycle = exponent % len(ones_digit_power_cycle)  # Position in the cycle for 9^99\n    ans = ones_digit_power_cycle[position_in_cycle - 1]  # -1 because the list index starts at 0\n    return ans\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n\n    # Calculate the number of boats needed using integer division for full boats,\n    # and then check if there is a remainder for an additional boat\n    num_boats_full = students // boat_capacity\n    remainder = students % boat_capacity\n\n    # If there is a remainder, an additional boat is needed\n    if remainder > 0:\n        num_boats_full += 1\n\n    return num_boats_full\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    \n    return total_spent\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    remainder = 2**2015 % 3\n    return remainder\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of the 5 other ponies\n    x = symbols('x')\n\n    # Initially, the average value in the small stable is (x + 250000) / 3\n    # Initially, the average value in the large stable is x / 3\n\n    # After Rein Beau moves, the average value in the small stable is x / 2\n    # After Rein Beau moves, the average value in the large stable is (x + 250000) / 4\n\n    # When Rein Beau moves, each average increases by 10000\n    equation1 = Eq((x + 250000) / 3 + 10000, x / 2)\n    equation2 = Eq(x / 3 + 10000, (x + 250000) / 4)\n\n    # Solve the equations to find the total value of the 5 other ponies\n    total_value = solve((equation1, equation2), (x))\n\n    # The total value of all ponies is the value of the 5 ponies plus Rein Beau\n    return total_value[x] + 250000\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    given_away = 9\n\n    remaining_stickers = (animal_stickers + fruit_stickers) - given_away\n\n    return remaining_stickers\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    # Since 50 is subtracted at the end, we can add it back to invert step (5)\n    result += 50\n\n    # Step (4) implies that by removing the double day number, we can reverse the addition\n    # to find the intermediate number after step (3)\n    for day in range(1, 32):  # assuming day of birth is between 1 and 31\n        intermediate_result = result - (2 * day)\n        # We need to find a day number that makes the intermediate result\n        # divisible by 50, reverting step (3)\n        if intermediate_result % 50 == 0:\n            intermediate_result /= 50  # undoing step (3)\n            intermediate_result -= 1  # undoing step (2)\n            month = intermediate_result / 4  # undoing step (1)\n\n            if month.is_integer() and 1 <= month <= 12:  # month must be valid\n                return int(month), day\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    # Four pupils insisting on standing together can be considered as one unit.\n    # Therefore, we have 5 units to arrange (the 4 pupils as 1 unit + 4 individual pupils).\n    units_to_arrange = factorial(5)\n    \n    # The 4 pupils within their own unit can be arranged among themselves in 4! ways.\n    arrangements_within_unit = factorial(4)\n    \n    # The total arrangements will be the product of the arrangements of the units\n    # and the arrangements within the unit.\n    total_arrangements = units_to_arrange * arrangements_within_unit\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    gold_medals, silver_medals = symbols('gold_medals silver_medals')\n\n    eq1 = Eq(5 * gold_medals + 4 * silver_medals, 331)\n    eq2 = Eq(gold_medals + silver_medals, 80)\n\n    solutions = solve((eq1, eq2), (gold_medals, silver_medals))\n\n    return solutions[gold_medals]\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_lamb = 8.70\n    cost_beef = 9.40\n    lamb_kg = 7\n    beef_kg = 30\n    \n    total_cost = (cost_lamb * lamb_kg) + (cost_beef * beef_kg)\n    \n    return total_cost\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    n = symbols('n')\n    # n is the first of the three consecutive numbers\n    # The second number will be n + 1 and the third n + 2\n    # The sum of these numbers is n + (n + 1) + (n + 2)\n    equation = Eq(n + (n + 1) + (n + 2), 60)\n    # Solve for n\n    solution = solve(equation, n)\n    # The largest number is n + 2\n    largest_number = solution[0] + 2\n    return largest_number\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    return 176 / 8\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_spectators = symbols('total_spectators')\n\n    children = total_spectators * 1/3\n    remainder = total_spectators - children\n    men = remainder * 5/8\n    women = 80\n\n    equation = Eq(total_spectators, children + men + women)\n\n    solutions = solve(equation, total_spectators)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Given the operation results, we can deduce that the operation ★ either adds or multiplies the two numbers based on their relation.\n    # When the first number is smaller than the second, the operation seems to add them (5★2 = 5+2).\n    # When the first number is greater than or equal to the second, the operation seems to multiply them (6★3 = 6*3).\n    # Applying this logic to 11★10, since 11 is greater than 10, the operation would multiply them.\n    \n    result = 11 * 10\n    \n    return result\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    position_elephant_left = 10\n    position_rabbit_right = 9\n    dolls_between = 5\n\n    total_dolls = position_elephant_left + position_rabbit_right + dolls_between - 1  # Subtract 1 because we counted one doll twice (the doll at the meeting point of two counting directions)\n    \n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * (11/52 / (2 + 3/4) * (4.3 - 1.8)) * 26\n    return result\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'm' be the work done by a master in one day.\n    # Let 'a' be the work done by an apprentice in one day.\n\n    m, a = symbols('m a')\n\n    # If 1 master and 3 apprentices are working together, they complete the work in 4 days\n    equation1 = Eq(1 * m + 3 * a, 1/4)\n\n    # If 2 masters and 1 apprentice are working together, they complete the work in 3 days\n    equation2 = Eq(2 * m + 1 * a, 1/3)\n\n    # Solving the system of equations to find the values of 'm' and 'a'\n    solutions = solve((equation1, equation2), (m, a))\n\n    m_value = solutions[m]\n    a_value = solutions[a]\n\n    # Time taken for 1 apprentice to complete the work alone\n    time_for_apprentice_alone = 1 / a_value\n\n    return time_for_apprentice_alone\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(50, 61))  # 61 is exclusive\n    return sum(primes)\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of roses and daisies originally in the park\n    original_roses, original_daisies = symbols('original_roses original_daisies')\n\n    # Total number of flowers initially\n    equation1 = Eq(original_roses + original_daisies, 300)\n\n    # Total number of flowers after a few months\n    equation2 = Eq(original_roses + (280 - original_roses), original_daisies + (180 - original_daisies))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (original_roses, original_daisies))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    # Let x be the number of comics\n    # Then Chinese books will be 2x\n    x = symbols('x')\n    equation = Eq(english_books + 2*x + x, total_books)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    # Known values from the problem\n    t10 = 23  # The 10th term\n    t15 = 38  # The 15th term\n\n    # Find the common difference, d\n    d = (t15 - t10) / (15 - 10)\n\n    # Find the first term, a (t1)\n    # a + 9d = t10\n    a = t10 - 9 * d\n\n    # Find the 102nd term\n    # t102 = a + 101d\n    t102 = a + 101 * d\n\n    return int(t102)\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    coffee = 6\n    latte = (coffee / coffee_ratio) * total_ratio\n    return latte\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    total_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + missed_shots\n    average_score = total_score / total_shots\n\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = sum(str(i).count('0') for i in range(1, 201))\n    return count\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    ans = (1/30 + 1/6) / (2/25) + (2 - 2/3) / (8/3)\n    return ans\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    # Let n be the total number of layers, where even n represents boys on the outermost layer and odd n represents girls on the outermost layer.\n    # The number of students in layer i (counting from outside to inside) is 4 * (side_length_of_layer_i - 1).\n    # The side length of layer i is side_length - 2 * (i - 1), where side_length is the side length of the square array.\n    # The total number of boys minus the total number of girls should be 32.\n    # We need to find the side_length such that the difference between the number of boys and girls is 32 and that forms a perfect square.\n    \n    n = 1  # Starting with the smallest possible square with a side length of n\n    found = False\n    total_students = 0\n\n    while not found:\n        side_length = n\n        boys = 0\n        girls = 0\n\n        # Calculate boys and girls in each layer starting from the outermost\n        for layer in range((side_length + 1) // 2):\n            # Each layer count, except for the last single row or column which is counted once\n            layer_count = 4 * (side_length - 2 * layer) - 4 if layer != side_length // 2 else side_length - 2 * layer\n\n            if layer % 2 == 0:  # Even layer (0-indexed), boys\n                boys += layer_count\n            else:  # Odd layer, girls\n                girls += layer_count\n\n        if boys - girls == 32:\n            # Calculate the total number of students\n            total_students = boys + girls\n            found = True\n\n        n += 2  # Increase n to try the next possible square (only odd squares have boys on the outer layer)\n\n    # Total number of students is the final answer\n    return total_students\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for n in range(2, 9):\n        for x in range(1, 8):\n            if x < 8 - x and 8 - x <= 8:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box  # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # The kid who gets the most apples has the least possible number when the distribution is as even as possible\n    # but still satisfies the condition that each child receives a different number of apples.\n\n    # Distribute 1 apple to each child as they must get at least one.\n    apples_remaining = 50 - 8  # 50 total apples - 8 children\n\n    # Distribute apples such that each subsequent child gets one more apple than the previous.\n    child_apples = 1  # Starting from 1 for the first child as each child must get at least 1 apple.\n\n    for i in range(1, 8):  # There are 7 more children remaining\n        apples_for_next_child = child_apples + 1  # Next child gets one more apple\n        if apples_remaining >= apples_for_next_child:\n            apples_remaining -= apples_for_next_child\n            child_apples = apples_for_next_child\n        else:\n            break\n\n    # At this point, child_apples is the number of apples of the second-to-last child in the distribution.\n    # The child with the most apples will get the remaining apples.\n    max_apples = apples_remaining + child_apples + 1  # The '+1' is for ensuring the last child gets more than the second-to-last\n\n    return max_apples\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    total_distance = train_length + tunnel_length\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let a be the mass of one apple and o be the mass of one orange\n    a, o = symbols('a o')\n    \n    # Setting up the equations based on given information\n    equation1 = Eq(3*a + 5*o, 270)\n    equation2 = Eq(3*a + 7*o, 342)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (a, o))\n    \n    # Mass of one orange\n    return solutions[o]\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    return -7 - 4\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return 0.50 * 0.20 * 350\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # If there's overlapp using inclusion-exclusion principle\n    # Minimum wearing either bow ties or spectacles (or both)\n    min_either_or = bow_ties + spectacles - total_men\n\n    # Maximum not wearing bow ties or spectacles\n    max_neither = total_men - min_either_or\n\n    return max_neither\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n\n    equation = Eq(blue + red + green, 112)\n\n    solution = solve(equation, blue)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    result = (1/3) * 414\n    return result\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Since each child needs at least one apple, and no two children can get the same number of apples,\n    # let's first distribute one apple to each child.\n    remaining_apples = 19 - 5\n\n    # Now, we need to distribute the remaining 14 apples such that no child gets the same number.\n    # The distribution will start from the child who gets the least after receiving one apple.\n    # We can ensure that no two children get the same number of apples by incrementing the amount\n    # of apples each subsequent child gets by at least one more apple than the previous child.\n\n    # Let's start by giving the second child one more apple than the first, the third child\n    # one more than the second, and so on.\n    # To maximize the number of apples for the child who gets the most, we should give\n    # the fewest apples to the other children. Therefore, we distribute the apples\n    # in increasing order starting from one extra apple to the second child:\n    # First child:  will have the 1 apple we already gave.\n    # Second child: 1 (initial) + 1 (extra) = 2 apples,\n    # Third child:  1 (initial) + 2 (extra) = 3 apples,\n    # Fourth child: 1 (initial) + 3 (extra) = 4 apples,\n    # Fifth child:  Rest of the apples.\n\n    # Subtract the extra apples given to the second, third, and fourth child from the remaining apples.\n    extra_apples_given = 1 + 2 + 3\n    remaining_apples -= extra_apples_given\n\n    # Now the fifth child will get the rest of the apples.\n    fifth_child_apples = 1 + remaining_apples\n\n    return fifth_child_apples\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n\n    # Treat Ali and Bala as a single entity (AB) since they must stand together,\n    # so we have 4 entities to arrange now: (AB), Charles, Dan, Ella.\n    # Dan must stand at the leftmost position, so we have 3 entities left to arrange: Dan-(AB)-Charles-Ella\n    arrangements_3_entities = factorial(3)  # for (AB), Charles, Ella\n    \n    # However, within (AB), Ali and Bala can switch places.\n    arrangements_within_AB = factorial(2)\n    \n    # Multiply the arrangements of the 3 entities with the arrangements within AB\n    total_arrangements = arrangements_3_entities * arrangements_within_AB\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Owen trades 3 fishes for 2 rabbits: 3 fishes / 2 rabbits\n    # Oscar trades 3 rabbits for 4 packs of wheat: 3 rabbits / 4 packs of wheat\n    # We combine these ratios to see how many fishes would equate to 8 packs of wheat.\n    # (3 fishes / 2 rabbits) * (3 rabbits / 4 packs of wheat) = (3/2) * (3/4) fishes per pack of wheat\n    # Simplify the ratio: (3/2) * (3/4) = 9/8 fishes per pack of wheat\n    # Therefore, for 8 packs of wheat: 9/8 * 8 = 9 fishes\n    ans = (9 / 8) * 8\n    return int(ans)\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n\n    # 1-9 each have 1 digit\n    total_digits += 1 * 9\n\n    # 10-99 each have 2 digits\n    total_digits += 2 * (99 - 10 + 1)\n\n    # 100-140 each have 3 digits\n    total_digits += 3 * (140 - 100 + 1)\n\n    return total_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Serene mistook the tens place in the subtrahend as 5 instead of 3 \n    # and ones place as 3 instead of 2, getting a difference of 36.\n    # Let x be the original two-digit number (minuend)\n    # The modified subtrahend is '5x' (tens place taken as 5) and 'x3' (ones place as 3)\n    # We need to find the original number and correct the mistake.\n    \n    for minuend in range(10, 100):  # two-digit numbers range from 10 to 99\n        modified_subtrahend = int('5' + str(minuend)[1]) - int(str(minuend)[0] + '3')\n        if minuend - modified_subtrahend == 36:\n            correct_subtrahend = int('3' + str(minuend)[1]) - int(str(minuend)[0] + '2')\n            correct_difference = minuend - correct_subtrahend\n            return correct_difference\n    \n    return None\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Getting the worst case scenarios for each color being drawn last,\n    # since we want to ensure 3 different coloured balls.\n    # We take the total of the other two colors and add 1.\n    red_last = 9 + 6 + 1\n    white_last = 15 + 6 + 1\n    yellow_last = 15 + 9 + 1\n    \n    # Since we need the minimum number of balls to be drawn to meet the criteria,\n    # we take the minimum of these worst case scenarios.\n    ans = min(red_last, white_last, yellow_last)\n\n    return ans\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = range(2, 36, 3)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    average_students = total_students / 4\n\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_for_fences = 3.2\n    used_for_woods = 6.5\n\n    left_over = total_length - (used_for_fences + used_for_woods)\n\n    return left_over\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    # Ellen gives away 12 sweets, so she has (ellen - 12)\n    # This is 13/24 of the total which is (ellen + lenny)\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n\n    # Lenny gives away 12 sweets, so he has (lenny - 12)\n    # This is 3/8 of the total which is (ellen + lenny)\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    return solutions[ellen] + solutions[lenny]\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variable for T\n    T = symbols('T')\n\n    # the first 50000 is taxed at 6%\n    tax_for_first_50k = 0.06 * 50000\n\n    # remaining income\n    remaining_income = 120000 - 50000\n\n    # income tax for the remaining income is taxed at (6 + T)%\n    tax_for_remaining_income = (0.06 + T / 100) * remaining_income\n\n    # equation for total tax paid\n    total_tax_paid = Eq(tax_for_first_50k + tax_for_remaining_income, 10000)\n\n    # solve for T\n    solution = solve(total_tax_paid, T)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # To find the smallest possible difference, we need to form the smallest and largest 5-digit numbers from the digits\n    # and subtract the smaller from the larger. For the smallest difference, the digits should be as close to each\n    # other as possible.\n    # Example: For the smallest number - we use 0 for the last position, and arrange the smallest digits in increasing order\n    # Example: For the largest number - we use 9 for the last position, and arrange the largest digits in decreasing order\n\n    smallest = int('01234')\n    largest = int('98765')\n  \n    difference = largest - smallest\n  \n    return difference\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    total_present_permutations = list(permutations(range(7), 5))\n    valid_combinations = 0\n    \n    for perm in total_present_permutations:\n        # Richard wants 0 (toy car) or 1 (puzzle)\n        # Kevin wants 0 (toy car) or 2 (calculator)\n        if (0 in perm and 0 == perm[0] or 1 == perm[0]) or (2 in perm and 0 == perm[1] or 2 == perm[1]):\n            continue\n        valid_combinations += 1\n\n    return valid_combinations\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # in meters\n    tunnel_length = 500  # in meters\n    speed = 10  # in meters per second\n    \n    # Duration for the train to completely enter the tunnel would be the time taken for the train's end to enter the tunnel\n    time_to_enter = train_length / speed\n    \n    # Duration for the train to completely pass through the tunnel after the entire train has entered\n    time_to_pass = tunnel_length / speed\n    \n    # Total duration is the time to enter and the time to pass\n    total_time = time_to_enter + time_to_pass\n    \n    return total_time\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49  # in pence\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought  # total cost in pence\n    pounds_in_pence = 100  # 1 pound is 100 pence\n\n    change_from_pound = pounds_in_pence - total_cost  # change in pence\n\n    return change_from_pound\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n\n    # Since n, n+4, and n+6 are prime, n must be odd and n must not be 3\n    # otherwise n+4 or n+6 will be divisible by 3.\n    # Start checking from 5 to a large number where primes are likely to be spaced out by at least 250.\n    n = 5\n    while True:\n        if (isprime(n) and isprime(n + 4) and isprime(n + 6) and\n                isprime(n + 132) and isprime(n + 250)):\n            return n\n        n += 2  # increment by 2 since if n is even, n + 1 will not be prime\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    ans = 374 * 36\n    return ans\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of the rabbits\n    first_rabbit, second_rabbit, third_rabbit = symbols('first_rabbit second_rabbit third_rabbit')\n\n    # Create the equations based on the question\n    equation1 = Eq(second_rabbit, first_rabbit + 2)                    # Second costs £2 more than the first\n    equation2 = Eq(third_rabbit, second_rabbit - 80 / 100)            # Third costs 80p (£0.80) less than the second\n    equation3 = Eq(first_rabbit + second_rabbit + third_rabbit, 19.7) # The total cost of the three rabbits\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first_rabbit, second_rabbit, third_rabbit))\n\n    return solutions[first_rabbit]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    concentration = 0.15\n\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # km per hour\n    rose_speed = 10  # km per hour\n    time = 10        # hours\n\n    # Jack travels further by the (jack_speed - rose_speed) * time, which is the distance between A and B\n    distance_between_A_and_B = (jack_speed - rose_speed) * time\n\n    return distance_between_A_and_B\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((2*n+2)**2 - (2*n)**2 for n in range(1, 1010))\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    max_number = 5000\n    count_7 = max_number // 7\n    count_13 = max_number // 13\n    count_7_and_13 = max_number // (7 * 13)\n\n    ans = count_7 + count_13 - count_7_and_13\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = 'SUCCESS'\n    total_len = len(word)\n    count_S = word.count('S')\n    \n    # Count permutations excluding 'S'\n    perm_without_S = factorial(total_len - count_S) // (factorial(word.count('C')) * factorial(word.count('U')) * factorial(word.count('E')))\n    \n    # For each permutation, place 'S' in the slots not adjacent to another 'S'\n    slots_for_S = total_len - count_S + 1\n    ways_to_place_S = factorial(slots_for_S) // factorial(slots_for_S - count_S)\n    \n    num_ways = perm_without_S * ways_to_place_S\n\n    return num_ways\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    difference = boys - teachers\n\n    return difference\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    total_days = 14\n    david_rate = 1/10\n    emma_rate = 1/18\n    for days_david_worked in range(total_days):\n        days_emma_worked = total_days - days_david_worked\n        if days_david_worked * david_rate + days_emma_worked * emma_rate == 1:\n            return days_emma_worked\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    tshirts_bought = 138\n    money_left = 56\n    total_tshirts = 145\n\n    cost_per_tshirt = money_left / (total_tshirts - tshirts_bought)\n    total_money = cost_per_tshirt * total_tshirts\n\n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_squares = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = (n * (n + 1)) // 2\n    ans = sum_of_squares / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        num = int(f'1{a}2{a}3{a}4{a}5{a}')\n        if num % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    # The maximum height difference is 132 - 124 = 8 cm\n    # At least 4 students are of the same height, which is the worst-case scenario for pigeonhole principle\n    # Therefore, the class size must be at least the product of the number of pigeonholes and the minimum number of occupants per hole\n    # There can be 9 different heights (124, 125, ..., 132)\n    pigeonholes = 9\n    students_per_height = 4\n    class_size = pigeonholes * students_per_height\n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay = 6.50\n    percent_increase = 0.12\n    new_pay = original_pay + (original_pay * percent_increase)\n    return new_pay\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # calculate the total sum of the 14 numbers\n    total_sum = 14 * 119\n\n    # the sum of an arithmetic series is given by the formula:\n    # sum = n/2 * (first_term + last_term)\n    # where n is the number of terms\n    # since these are consecutive even numbers, the difference (d) between terms is 2\n    # we can express the last_term as: first_term + (n - 1) * d\n    # hence, sum = n/2 * (first_term + first_term + (n - 1) * d)\n    # simplifying sum = n * first_term + n/2 * (n - 1) * d\n    # we know the sum, n, and d, so we can solve for first_term\n\n    n = 14\n    d = 2\n\n    # from the equation total_sum = n * first_term + n/2 * (n - 1) * d\n    # we find that first_term = (total_sum - n/2 * (n - 1) * d) / n\n    first_term = (total_sum - (n/2) * (n - 1) * d) / n\n    \n    return int(first_term)\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Rachel takes 12 minutes to make 4 cuts to divide the wood into 5 sections\n    # Therefore, for each cut, she needs 12 / 4 = 3 minutes\n\n    # If she needs to cut the wood 5 times, it means making 5 cuts\n    # So the total time needed is 5 cuts * 3 minutes per cut\n    total_time = 5 * (12 / 4)\n\n    return total_time\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    # Since there are equal number of 2p and 5p coins, let the common number of coins be x\n    # Therefore we have 2p * x + 5p * x = 126p (since £1.26 is 126 pence)\n    # This simplifies to 7x = 126\n    # Thus x = 126 / 7\n\n    x = 126 / 7\n    # There are x coins of each type, and since there are 2 types, the total coins = 2*x\n\n    total_coins = 2 * x\n\n    return int(total_coins)\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # The ones digit of powers of 3 follow a pattern: 3, 9, 7, 1, and then it repeats.\n    # The pattern repeats every 4 powers.\n    # To find the ones digit of 3^2009, we need to find the remainder of 2009 divided by 4. \n\n    exponent_mod_4 = 2009 % 4\n\n    # The ones digit pattern for the powers of 3 is [3, 9, 7, 1] for [0, 1, 2, 3] respectively.\n    # So, we map the exponent_mod_4 to the ones digit.\n    ones_digit_pattern = [1, 3, 9, 7]\n\n    # Find the ones digit from the pattern using the remainder.\n    ones_digit = ones_digit_pattern[exponent_mod_4]\n    \n    return ones_digit\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girls = 36\n\n    # Let's represent the total number of people at the party as p.\n    # If 2/5 of the people are adults, this means 3/5 are not adults (boys and girls).\n    # Among the 3/5 who are not adults, 5/9 are boys, hence 4/9 of the 3/5 are girls.\n\n    # Thus, 4/9 of 3/5 of p equals the number of girls, which is 36.\n    # (4/9) * (3/5) * p = 36\n    # p = 36 / ((4/9) * (3/5))\n    p = girls / ((4/9) * (3/5))\n\n    return int(p)\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    i = 1\n    while True:\n        candidate = i**2\n        if candidate % 2 == 0 and candidate % 5 == 0:\n            return candidate\n        i += 1\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount_rate = 0.25\n    child_ticket_cost = 30\n\n    # Calculate the cost of an adult ticket based on the child's discount\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount_rate)\n\n    # Calculate the cost of a senior citizen's ticket based on the senior discount rate\n    senior_discount_rate = 0.20\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount_rate)\n\n    return senior_ticket_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    books = 20\n    kids = 4\n    # Adding 3 extra books for combination_with_replacement, which will be removed later on.\n    ways = combinations_with_replacement(range(books + kids - 1), kids - 1)\n    # Count the number of ways to divide the books\n    return len(list(ways))\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men1 = 3\n    days1 = 30\n    men2 = 2\n\n    work_done_per_day_by_one_man = 1 / (men1 * days1)\n    total_work = 1\n    days_for_two_men = total_work / (men2 * work_done_per_day_by_one_man)\n\n    return days_for_two_men\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for Will's current age\n    will_age = symbols('will_age')\n\n    # Create the equation based on the problem statement\n    equation = Eq(will_age + 8, 4 * (will_age - 4))\n\n    # Solve the equation to find Will's current age\n    sol = solve(equation, will_age)\n\n    # Return Will's age as an integer (since age is a whole number)\n    return sol[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    # Number of ways to choose trains, cars, and boats\n    trains = 3\n    cars = 4\n    boats = 2\n\n    # Using the law of addition for independent events\n    total_ways = trains + cars + boats\n\n    return total_ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    days_to_finish = total_pages / pages_per_day\n\n    return int(days_to_finish)\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # We ensure each kid gets at least 2 books, that's 2*5=10 books in total\n    remaining_books = 30 - 10  # 20 books left to distribute\n\n    # We are distributing remaining books to 5 kids, which is similar to placing\n    # 20 indistinguishable objects into 5 distinguishable boxes \n    # This can be calculated using the stars and bars method:\n    # We have 20 stars (books) and 4 bars (dividers) to place, which equals to\n    # comb(20+5-1, 5-1) = comb(24, 4)\n\n    ans = comb(24, 4)\n    return ans\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    interest_rate = 0.06\n    time = 2\n    balance = principal * (1 + interest_rate) ** time\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    one_direction_fans = 20\n    the_vamps_fans = 17\n    both_fans = 15\n    \n    neither_fans = total_girls - ((one_direction_fans + the_vamps_fans) - both_fans)\n    return neither_fans\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    equation1 = Eq(mason, (2/3) * chewy)\n    equation2 = Eq(chewy, (40/100) * mike)\n    equation3 = Eq(mike - mason, 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n    total_soup_litres = total_soup_ml / 1000\n\n    return total_soup_litres\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one jug and one cup\n    jug_cost, cup_cost = symbols('jug_cost cup_cost')\n\n    # Equation 1: Cost of 4 jugs and 5 cups\n    equation1 = Eq(4 * jug_cost + 5 * cup_cost, 85)\n\n    # Equation 2: Cost of 2 jugs and 2 cups\n    equation2 = Eq(2 * jug_cost + 2 * cup_cost, 40)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (jug_cost, cup_cost))\n\n    # Return the cost of one cup\n    return solutions[cup_cost]\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef evaluate_expression(frac1, op, frac2):\n    if op == '+':\n        return frac1 + frac2\n    elif op == '-':\n        return frac1 - frac2\n    elif op == '*':\n        return frac1 * frac2\n    else:  # op == '/'\n        return frac1 / frac2\n\ndef solution():\n    operators = ['+', '-', '*', '/']\n    fractions = [(Fraction(1, 2), Fraction(1, 9)),\n                 (Fraction(1, 3), Fraction(1, 8)),\n                 (Fraction(1, 4), Fraction(1, 7)),\n                 (Fraction(1, 5), Fraction(1, 6))]\n                 \n    max_sum = Fraction(0)\n    second_largest_term = None\n    for permutation in permutations(operators):\n        terms = []\n        for i, (frac1, frac2) in enumerate(fractions):\n            terms.append(evaluate_expression(frac1, permutation[i], frac2))\n        current_sum = sum(terms)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            second_largest_term = sorted(terms, reverse=True)[1]\n            \n    A, B = second_largest_term.numerator, second_largest_term.denominator\n    return A + B\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # Define the value of coins in pence\n    coin_values = [200, 100, 50, 20, 10, 5, 2, 1]\n    # Susan's bus fare in pence\n    bus_fare = 44\n    # The initial payment in pence (only a £2 coin or £1 coin as these are common)\n    payment_options = [200, 100]\n    \n    # Initialize the minimum number of coins variable with a sufficiently large value\n    min_coins = float('inf')\n    \n    # Check for each payment option to find the minimum number of coins\n    for payment in payment_options:\n        # Change owed to Susan\n        change = payment - bus_fare\n        # Counter for the number of coins\n        coins_counter = 0\n        \n        # Iterate over the coin values and count coins to make the change\n        for coin in coin_values:\n            # Use the largest coins possible first\n            while change >= coin:\n                change -= coin\n                coins_counter += 1\n        \n        # Update minimum number of coins if current payment option uses fewer coins\n        if coins_counter < min_coins:\n            min_coins = coins_counter\n    \n    # The smallest number of coins that can change hands is Susan's payment (1 coin) plus the change\n    ans = min_coins + 1\n    return ans\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500  # the length of the road in meters\n    tree_interval = 5  # the interval between trees in meters\n\n    # number of trees is road_length divided by tree_interval plus one additional tree\n    # because there are trees at both ends of the road\n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    num_classrooms = 27\n    num_chairs_per_classroom = 28\n    total_chairs = num_classrooms * num_chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum(range(2, 89, 2)) - sum(range(1, 88, 2))\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    x = symbols('x')\n    inequality = Eq((x + 3) / (2 * x + 5), 0.505)\n    # Assuming integer values for x, so take the floor of the highest possible x (solve for '<' type inequality)\n    ans = solve(inequality, x)[0].evalf()  # evaluate the solution to get a number\n    return int(ans) - 1  # We decrease by one since x must be less than the solution\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    remaining = 20.35\n    original_amount = spent + remaining\n    return original_amount\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    nth_10 = 23\n    nth_15 = 38\n    common_difference = (nth_15 - nth_10) / (15 - 10)\n\n    nth_12 = nth_10 + common_difference * (12 - 10)\n\n    return nth_12\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    A, B, C = 24, 36, 42\n    common_gcd = gcd(gcd(A, B), C)\n\n    return common_gcd\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # There are 12 points on the circle\n    total_points = 12\n    # for a right angled triangle in a circle with equal spacing, the hypotenuse must be the diameter. \n    # Hence the right angle will be on the point opposite the hypotenuse, and since the circle has 12 points,\n    # there will be 6 diameters\n    right_angle_options = total_points // 2 # There are 6 points opposite the diameter\n    # for each of those 6 points that form the right angle,\n    # we can choose any 2 from the remaining 10 points to form a triangle.\n    import math\n    combination_options = math.comb(10, 2) # ways to choose 2 points from the remaining 10 \n    \n    # We can form the right angled triangle for any of the 6 right angle options\n    # and for each of those choose any of the combinations of other 2 points\n    count = right_angle_options * combination_options\n    \n    return count\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    # Define the initial condition\n    numerator = 1\n    ans = 0\n\n    # Define the function to calculate the terms\n    def term(n):\n        return numerator / (n * (n + numerator))\n\n    # Calculate the terms using the function above for all except last term\n    for n in [1, 2, 4, 7, 11, 16, 22]:\n        ans += term(n)\n        numerator += 1\n\n    # Add the last term separately since it is different from the pattern\n    ans += 1/29\n\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    number_of_children = 200\n    daily_lunch_cost = 4.36\n    number_of_days = 5\n\n    total_cost = number_of_children * daily_lunch_cost * number_of_days\n\n    return total_cost\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    sum = 0\n    for i in range(1, 201):\n        if i % 4 in (1, 2):\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    result = (3/8) * 16\n    return result\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n    \n    marked_price = 1.20 * cost_price\n    selling_price = 0.90 * marked_price\n    \n    profit = selling_price - cost_price\n\n    equation = Eq(profit, 120)\n\n    solution = solve(equation, (cost_price))\n\n    return solution[cost_price]\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    # Let x be the number of correct answers\n    # Let y be the number of wrong answers\n    # Since there are 20 questions, x + y = 20\n    # A correct answer gives 5 points, and a wrong answer gives -3 points\n    # 5x - 3y = 76 points in total\n\n    # Hypothesis: Assume all answers are correct initially, which gives maximum points\n    # Then correct them one by one (lose 5 + 3 = 8 points per correction)\n\n    max_points = 20 * 5\n    points_loss_per_correction = 5 + 3\n    num_corrections = (max_points - 76) // points_loss_per_correction\n    correct_answers = 20 - num_corrections\n\n    return correct_answers\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    num_people = 38\n    total_cost = cost_per_person * num_people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "from sympy import symbols, Eq, solve, Abs\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2 * x + 5)\n    solutions = solve(equation, x)\n    return solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "def solution():\n    from math import factorial\n    \n    # For the first scenario, arrange four different colored socks.\n    # This is a permutation of 4 distinct items.\n    arrangements_with_different_socks = factorial(4)\n\n    # For the second scenario, arrange two different colored pairs of socks.\n    # This is a permutation of 4 items where there are 2 pairs of indistinguishable items.\n    arrangements_with_pairs = factorial(4) // (factorial(2) * factorial(2))\n\n    return arrangements_with_different_socks, arrangements_with_pairs\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    first_number = 13.8\n    second_number = 18.6\n    average = (first_number + second_number) / 2\n    return average\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # a cannot be zero because a is the first digit of a three-digit number\n        for b in range(10): # b can be from 0 to 9\n            ab = int(f\"{a}{b}\")\n            ba = int(f\"{b}{a}\")\n            aab = int(f\"{a}{a}{b}\")\n            if ab + ba + b == aab:\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    handshakes = num_people * (num_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    num_triangles = comb(num_points, num_vertices)\n    return num_triangles\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    equation1 = Eq(andre + beth, 24)\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To ensure a win, Anthea needs to make sure that after her move,\n    # the number of apples left is a multiple of 4.\n    # This is because whatever Ben takes (1, 2, or 3 apples),\n    # she can then take (3, 2, or 1 apples) to get back to a multiple of 4.\n\n    total_apples = 18\n\n    # We need to find out how many apples Anthea should take first,\n    # so after her move, the apples remaining are a multiple of 4.\n    for first_move in [1, 2, 3]:\n        if (total_apples - first_move) % 4 == 0:\n            # If after Anthea's move, apples are a multiple of 4, \n            # she can keep the number of remaining apples a multiple of 4\n            # until she wins the game.\n            return first_move\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    men_taller_than_180 = 4500\n    men_taller_than_190 = 750\n    men_between_180_and_190 = men_taller_than_180 - men_taller_than_190\n    return men_between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "from math import factorial\n\ndef solution():\n    # Judy can stand in 2 different positions (either end of the line)\n    judy_positions = 2\n\n    # The remaining 5 friends can stand in any order\n    friend_permutations = factorial(5)\n\n    # By the multiplication principle, multiply the two possibilities\n    total_ways = judy_positions * friend_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    # Equation 1: andre + beth = total sweets before receiving extras\n    equation1 = Eq(andre + beth, 24)\n    \n    # Equation 2: After receiving 4 sweets each, Andre has 6 more sweets than Beth\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n\n    # Solve the system of equations to find the number of sweets Beth has now\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Beth's sweets now, add 4 since she received extra from the teacher\n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_5_bars = cost_per_bar * 5\n    return cost_for_5_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # If the Ferrari driver finished in second place after overtaking 5 cars,\n    # it means there was only one car that the driver did not overtake.\n    # Therefore, the total number of cars he did not overtake is 1 (the car in first place).\n    # Thus, we add the 5 cars he overtook to the 1 car he did not overtake and his own car.\n    total_cars = 5 + 1 + 1  # The cars Ferrari driver overtook + the first place car + Ferrari driver's own car\n    \n    return total_cars\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    answer = 2\n    original_number = (answer * 12) + 6\n    return original_number\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # The sum of the four numbers is 4 * average = 4 * 130\n    sum_of_four = 4 * 130\n    # The sum of the remaining three numbers is 3 * new_average = 3 * 110\n    sum_of_three = 3 * 110\n    # The removed number is the difference between these two sums\n    removed_number = sum_of_four - sum_of_three\n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from math import lcm\n\ndef solution():\n    # Convert minutes to seconds for synchronization time\n    # We need to find the LCM of 60s (1 minute), 90s (1.5 minutes)\n    # and the time in seconds for the third light, which we don't know yet.\n    # The LCM should be a multiple of 9 minutes (540 seconds)\n    \n    # First find the LCM of 60 and 90 which is a lower bound for the time of the third light\n    lower_bound = lcm(60, 90)\n    \n    # Now we need to find the smallest multiple of the lower_bound\n    # which is greater than or equal to 30 seconds and also a factor of 540 seconds\n    for i in range(1, (540 + 1)):\n        third_light_time = lower_bound * i\n        if third_light_time >= 30 and 540 % third_light_time == 0:\n            return third_light_time / 60  # Convert seconds back to minutes for the result\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the time each sister spent on each subject\n    elder_maths, younger_maths, younger_english = symbols('elder_maths younger_maths younger_english')\n    \n    # Equations based on the problem\n    equation1 = Eq(elder_maths, younger_maths + 10)  # elder spent 10 more minutes on maths\n    equation2 = Eq(younger_english, younger_maths + 12)  # younger spent 12 less minutes on maths than English\n    equation3 = Eq(elder_maths + younger_english, 88)  # elder spent a total of 88 minutes\n    equation4 = Eq(younger_maths + 4, younger_english)  # younger spent 4 more minutes on English\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (elder_maths, younger_maths, younger_english))\n\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # To ensure his victory, Leo needs to leave a number of apples such that\n    # no matter whether Mia picks 1 or 2 apples, Leo can always adjust his\n    # pick in the next turn to eventually leave Mia with the inevitable\n    # choice of taking the last but one apple, thus ensuring Leo can take\n    # the last apple.\n    # Since the pile has 14 apples, Leo should aim to leave a multiple of 3\n    # apples after his first pick. This way, he can always pick 1 or 2 apples\n    # to keep the number of apples as a multiple of 3 after Mia's turn.\n\n    # Multiples of 3 less than 14 are 3, 6, 9, and 12.\n    # So Leo should aim to leave 12 apples after his turn so that, combined with his first turn,\n    # the sequence will be [Leo, Mia, Leo, Mia, ...] and Leo will always keep\n    # the number of apples after his turn as multiples of 3.\n    # Hence, Leo should pick 14 - 12 = 2 apples in his first turn.\n\n    apples_to_take = 14 % 3\n    return apples_to_take\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let S be the value of one silver spoon and G be the value of one gold ring.\n    # According to the problem, 12 silver spoons have three quarters the value of 6 gold rings.\n    # So, 12S = 3/4 * 6G which simplifies to 12S = 4.5G\n    # Simplify that equation to get the value of S in terms of G: S = 4.5G / 12 = 0.375G\n    # Now we need to find out how many silver spoons are equal to 3 gold rings.\n    # We can calculate this by taking the value of 3 gold rings and dividing it by the value of one spoon.\n    # Therefore, the required number of silver spoons is 3G / S.\n    # Substitute the value of S from the earlier equation to get 3G / (0.375G).\n    # Cancel out the G to find the number of spoons: 3 / 0.375 = 8.\n\n    number_of_silver_spoons = 3 / 0.375\n    return int(number_of_silver_spoons)\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_cost = 28\n    num_items = 12\n    cost_marker = 3\n    cost_paintbrush = 1\n\n    # Assume all items are paintbrushes\n    cost_all_paintbrushes = num_items * cost_paintbrush\n    extra_cost = total_cost - cost_all_paintbrushes\n\n    # Since each marker costs 2 more than a paintbrush\n    # the extra cost divided by 2 gives the number of markers\n    num_markers = extra_cost // (cost_marker - cost_paintbrush)\n\n    return num_markers\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of female teachers\n    f = symbols('f')\n    \n    # Total weight of male teachers\n    total_male_weight = 3 * 75\n    \n    # Total weight of all teachers (including both male and female)\n    average_weight_all = 65\n    total_weight_all = (3 + f) * average_weight_all\n    \n    # Average weight of female teachers\n    average_female_weight = 60\n    total_female_weight = f * average_female_weight\n    \n    # Equation based on the total weight\n    equation = Eq(total_male_weight + total_female_weight, total_weight_all)\n    \n    # Solve the equation for f\n    solutions = solve(equation, f)\n    \n    # The solution gives us the number of female teachers\n    return solutions[0]\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    # The number of boys and girls can be expressed in terms of side length of the square\n    # Let n be the side length for boys, n-2 for girls, and so on.\n    # Total boys B = n^2 + (n-4)^2 + (n-8)^2 + ...\n    # Total girls G = (n-2)^2 + (n-6)^2 + (n-10)^2 + ...\n    # We need to find such n that B - G = 55\n    # Both B and G are sum of squares of an arithmetic sequence with common difference of -4\n    # Sum of squares formula: 1^2 + 2^2 + 3^2 + ... + n^2 = n*(n + 1)*(2n + 1)/6\n    n = 1\n    while True:\n        # Calculate the number of boys using sum of squares formula\n        k = (n + 1) // 2  # Number of terms for the boys\n        boys = (k * ((2 * k - 1) * (4 * (k - 1) + 1) + 1)) // 3\n\n        # Calculate the number of girls using sum of squares formula\n        k = k - 1  # Number of terms for the girls\n        girls = (k * ((2 * k - 1) * (4 * (k - 1) + 1) + 1)) // 3\n\n        # Check if difference between boys and girls is 55\n        if boys - girls == 55:\n            # Calculate the total number of students\n            total_students = boys + girls\n            return total_students\n        n += 2  # Increment n to check for the next pattern\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    ans = 527 - 382\n    return ans\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    from_the_front = 5\n    from_the_back = 7\n    from_the_left = 2\n    from_the_right = 4\n\n    total_rows = from_the_front + from_the_back - 1\n    total_columns = from_the_left + from_the_right - 1\n\n    total_students = total_rows * total_columns\n\n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 33 and 55\n    factors_33 = factorint(33)\n    factors_55 = factorint(55)\n\n    # Merge the factors together, this is essentially the prime factorization of 33 * 55\n    factors_all = factors_33\n    for factor in factors_55:\n        if factor in factors_all:\n            factors_all[factor] += factors_55[factor]\n        else:\n            factors_all[factor] = factors_55[factor]\n\n    # Find the smallest m by ensuring all exponents in the prime factorization are even\n    m = 1\n    for factor, exponent in factors_all.items():\n        if exponent % 2 != 0:\n            m *= factor\n\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    count = 0\n    for x1 in range(2, 8-2*2+1):  # First plate gets at least 2 candies\n        for x2 in range(2, 8-x1-1):  # Second plate gets at least 2 candies\n            # Ensuring the total is 8 and every plate has at least 2 candies\n            x3 = 8 - (x1 + x2)  # Third plate gets the rest\n            if x3 >= 2:  # Checking if third plate has at least 2 candies\n                count += 1\n    return count\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n\n    # As Star is fixed as the first runner, we have to arrange the remaining 4 teammates.\n    total_ways = factorial(4)  # 4! for the remaining positions\n\n    return total_ways\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    # Analyzing the pattern, it seems like the operation takes two numbers a and b,\n    # multiplies the first by the second and then adds the second number squared.\n    # E.g., 2 otimes 4 = 2 * 4 + (4 ** 2) = 8 + 16 = 24\n    # Let's test this operation with the given examples to see if it holds true for all of them.\n    \n    a = 6\n    b = 12\n    result = a * b + b ** 2\n    return result\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    num, _ = solve_congruence(*congruences)\n    \n    while num < 100:\n        num += 3 * 5 * 7\n    \n    return num if num < 200 else None\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    initial_segments = 31\n    initial_time = 60  # in minutes\n\n    required_segments = 50\n    # Every cut increases the total segment count by 1, so the time is proportional to the number of cuts.\n    # The initial number of segments is achieved with initial_segments - 1 cuts.\n    # We need to find the time it takes for required_segments - 1 cuts.\n    time_per_cut = initial_time / (initial_segments - 1)\n    \n    total_time_for_required_segments = time_per_cut * (required_segments - 1)\n\n    return total_time_for_required_segments\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    x = 210 / (1 - 0.3)\n    return x\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002\n    while True:\n        year += 1\n        if str(year) == str(year)[::-1]:  # Check if the year is a palindrome\n            break\n    return year - 2002\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # Since the sum of the three integers is 26352 and each digit is used exactly once in each number,\n    # the sum of each position's digits must be equal to 2 * (1+2+3+4+5+6+7+8+9) = 2 * 45 = 90, because\n    # the digits 0-9 sum up to 45 and each is counted twice across the three numbers.\n    \n    # But the sum must account for the thousands, hundreds, tens, and ones places. Thus,\n    # the sum must be divisible by 1111 (because 1111 = 1000 + 110 + 11 + 1).\n    \n    # Let's find the multiplier for 1111 that will give us the sum 26352.\n    multiplier = 26352 // 1111\n    remaining_sum = 26352 % 1111\n    \n    # The remaining sum after dividing must be 0, as each digit's place contributes one of each digit (0-9).\n    if remaining_sum != 0:\n        return None\n    \n    # We start constructing the smallest number using the condition of increasing digits.\n    # Since we don't know the exact digits but we know that they must sum to 2 * 45 and\n    # their sum with the multiplier and 1 (for each thousand's place in three numbers) should be divisible by 1111.\n    # We use these constraints to determine the smallest number.\n    smallest_number = ''\n    # Start with the thousands place and go down to the ones place\n    for i in range(3, -1, -1):\n        for digit in range(1, 10):\n            if (multiplier * (10 ** i) * digit) % 1111 == 0 and str(digit) not in smallest_number:\n                smallest_number += str(digit)\n                break\n    \n    return int(smallest_number)\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    base_cost = 200\n    increase_percentage = 45\n\n    new_cost = base_cost * (1 + increase_percentage / 100)\n\n    return new_cost\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"ARRANGE\")\n    A_count = 2\n    R_count = 2\n    N_count = 1\n    G_count = 1\n    E_count = 1\n    \n    ways = factorial(total_letters) // (factorial(A_count) * factorial(R_count) * factorial(N_count) * factorial(G_count) * factorial(E_count))\n    return ways\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of flowers Candy gave to Nancy\n    x = symbols('x')\n    \n    # Candy's flowers after giving x to Nancy\n    candy_flowers_after = 11 - x\n    \n    # Nancy's flowers after receiving x from Candy\n    nancy_flowers_after = 9 + x\n    \n    # Equation for the condition that Nancy has 8 more flowers than Candy\n    equation = Eq(nancy_flowers_after, candy_flowers_after + 8)\n    \n    # Solve the equation for x\n    solution_x = solve(equation, x)\n    \n    # Calculate the number of flowers Candy has now\n    candy_now = 11 - solution_x[0]\n    \n    return candy_now\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum = 60\n    money_from_dad = 40\n    days = 3\n\n    total_money = (money_from_mum + money_from_dad) * days\n\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for number in range(100, 1000):  # Iterate through all 3-digit numbers\n        if number // 24 == 36 and number % 24 == 0:  # Check if division results in 36 with no remainder\n            return number\n\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    temp_midnight_friday = -5\n    temp_midday_saturday = 17\n\n    overall_change = temp_midday_saturday - temp_midnight_friday\n\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    increment = 1\n    while term <= 50:\n        increment += 1\n        term += increment\n    return term\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_p = 43\n    booklet_cost_pounds = 1.85\n\n    total_cost_pounds = (3 * pen_cost_p / 100) + (4 * booklet_cost_pounds)\n    total_money_pounds = 10\n\n    change = total_money_pounds - total_cost_pounds\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n    total_people = people_in_front + position_from_back - 1  # Subtract one because Sibel is counted twice\n    \n    return total_people\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n    ans = prime(3)\n    return ans\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000): # Loop through all 3-digit numbers\n        str_num = str(i)\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and \\\n           abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # Since the question asks to write the population of St. Petersburg in figures,\n    # I will assume the population count provided by the latest statistics.\n    # As per the latest data I have (my knowledge cutoff date is in 2023), \n    # the population of St. Petersburg is approximately 5.4 million.\n    # However, please note, this number should be verified with the latest data\n    # as population figures can change.\n\n    # Writing the population in figures (without any formatting)\n    population = 5400000\n\n    return population\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for i in range(5000, 10000):\n        digits = [int(d) for d in str(i)]\n        if digits[1] == 0 or digits[2] == 0:\n            continue  # thousands digit cannot be divisible by 0\n        if digits[0] % digits[1] == 0 and digits[0] % digits[2] == 0 and digits[0] % digits[3] == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    return (22 - 4) * 2\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the tilde symbol\n    tilde = symbols('tilde')\n\n    # Set up the equation according to the question\n    equation = Eq((tilde + 7) / 9, 9)\n\n    # Solve for the tilde variable\n    solution = solve(equation, tilde)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    common_difference = 4\n    number_of_weeks = 10\n\n    # Sum of an arithmetic sequence formula: n/2 * (2a + (n - 1)d)\n    total_coins = number_of_weeks / 2 * (2 * first_term + (number_of_weeks - 1) * common_difference)\n    \n    return int(total_coins)\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    return 0.8 * 3 * 10\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    # Given that Lily had 24 dresses and it's twice as many as Gina\n    gina_dresses = 24 // 2\n    # Gina had 4 times as many dresses as Fiona\n    fiona_dresses = gina_dresses // 4\n    # Calculate the total number of dresses that Gina and Fiona had all together\n    total_dresses = gina_dresses + fiona_dresses\n\n    return total_dresses\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    possible_numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    \n    # Eliminate numbers that are marked as wrong in 1258\n    for digit in '1258':\n        possible_numbers.remove(digit)\n    \n    correct_digits = set()\n    \n    # Based on other clues, find two correct digits from each guess\n    guesses = ['5648', '3628', '3147', '5629']\n    for guess in guesses:\n        correct_count = 0\n        for digit in guess:\n            if digit in possible_numbers:\n                correct_count += 1\n        # If there are exactly two correct digits, add them to the set of correct digits\n        if correct_count == 2:\n            for digit in guess:\n                if digit in possible_numbers:\n                    correct_digits.add(digit)\n    \n    # correct_digits now contains the correct digits, we just need to find the right combination\n\n    # Generate all possible combinations of the correct digits\n    from itertools import permutations\n    for combo in permutations(correct_digits, 4):\n        # Check if combination fits each given condition\n        conditions_met = True\n        for guess in guesses:\n            correct_in_combo = sum(1 for c, g in zip(combo, guess) if c == g)\n            if correct_in_combo != 2:\n                conditions_met = False\n                break\n        if conditions_met:\n            return ''.join(combo)\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    initial_amount = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n    years_claimed = 5\n\n    # Calculate the amount with compound interest for the claimed number of years\n    amount_with_claimed_years = initial_amount * ((1 + interest_rate) ** years_claimed)\n\n    # Bella is wrong if the final amount doesn't equal the calculated amount\n    if amount_with_claimed_years != final_amount:\n        # Solve for the actual number of years\n        years_actual = (final_amount / initial_amount) ** (1/interest_rate)\n        return False, int(years_actual)\n    else:\n        return True\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    # Let's denote the empty jar mass as 'e' and the mass of the full jar of Marmite as 'm'. \n    # Therefore, the mass of 1/4 full jar is e + 1/4*m and the mass of 3/4 full jar is e + 3/4*m.\n    # We set up our equations based on the problem statement.\n    # e + 1/4*m = 250\n    # e + 3/4*m = 350\n\n    # We can solve for 'e' by subtracting the first equation from the second:\n    # (e + 3/4*m) - (e + 1/4*m) = 350 - 250\n    # 3/4*m - 1/4*m = 100\n    # 1/2*m = 100\n    m = 2 * 100\n\n    # Now we substitute m into the first equation to solve for 'e'\n    # e + 1/4*m = 250\n    e = 250 - (1/4 * m)\n\n    return e\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_liters = 13.15\n    bottle_capacity_liters = 9.1\n    cup_capacity_ml = 350\n    cups_to_liters = 4 * (cup_capacity_ml / 1000)\n\n    bottle_filled_liters = (1 / 7) * bottle_capacity_liters\n    remaining_soda_after_bottle = total_soda_liters - bottle_filled_liters\n    remaining_soda_after_cups = remaining_soda_after_bottle - cups_to_liters\n\n    return remaining_soda_after_cups\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Given values\n    average_weight_all = 65\n    average_weight_male = 75\n    average_weight_female = 60\n    male_teachers = 3\n\n    # Total weight of male teachers\n    total_weight_male = average_weight_male * male_teachers\n\n    # Let's assume that there are 'female_teachers' female teachers\n    # If 'x' is the number of female teachers, their total weight would be '60 * x'\n    # Since the average of all teachers is 65, the total weight of teachers (male + female) would be '65 * (3 + x)'\n    # Based on the average formula, we set up the equation:\n    # 75 * 3 (total weight of male teachers) + 60 * x (total weight of female teachers)\n    #  = 65 * (3 + x) (total weight of all teachers)\n\n    # Simplifying the equation to solve for 'x'\n    total_weight_all = average_weight_all * (male_teachers + female_teachers)  # This includes an unknown 'female_teachers'\n    # Now express the total weight of all teachers using the known values and 'female_teachers'\n    total_weight_all = total_weight_male + average_weight_female * female_teachers\n    \n    # Since both expressions represent the total weight of all teachers, we can equate them to solve for 'female_teachers':\n    # 65 * (3 + female_teachers) = 75 * 3 + 60 * female_teachers\n    # Solving the equation:\n    female_teachers = (average_weight_male * male_teachers - average_weight_all * male_teachers) / (average_weight_all - average_weight_female)\n\n    return int(female_teachers)\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Average mark of A, B, C is 95\n    equation1 = Eq((A + B + C) / 3, 95)\n    # Average mark of B, C, D is 94\n    equation2 = Eq((B + C + D) / 3, 94)\n    # E's mark is 96 and is the second highest\n    equation3 = Eq(E, 96)\n    # A has the highest mark, thus A > E\n    equation4 = Eq(A > E, True)\n    # B and D have the same score\n    equation5 = Eq(B, D)\n    # Every student scored above 91, which could be included as conditions, but they are not needed to solve the problem.\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation5), (A, B, C, D, E))\n\n    # Filter solutions for the one which maintains A > E\n    valid_solution = {k: v for k, v in solutions.items() if v > 96} #A > E (96)\n    \n    return valid_solution[D]\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023 ** 0.5\n    b = -a\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father, son = symbols('father son')\n\n    equation1 = Eq((father - 6), 5 * (son - 6))\n    equation2 = Eq(father + son, 78)\n\n    solutions = solve((equation1, equation2), (father, son))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # To ensure victory, Rose must leave a multiple of 3 marbles for Kylie after her first move.\n    # Since they can only remove 1 or 2 marbles each turn.\n    # So that in subsequent rounds, she can always force Kylie to be in a position to leave a multiple of 3 again.\n    # Finally leaving Kylie with 1 or 2 marbles before her turn, ensuring Rose's victory.\n    for first_move in range(1, 3):\n        if (14 - first_move) % 3 == 0:\n            return first_move\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    return 245 - 182\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pence = 45 * 100  # £45 in pence\n    coin_value = 5  # value of each coin in pence\n    num_coins = total_pence // coin_value\n\n    return num_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Given values\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    A = 8.0 / 100  # amplitude in meters (converted from cm to m)\n    x = 4.0 / 100  # position from equilibrium in meters (converted from cm to m)\n\n    # Total energy in the oscillator (measured in Joules) is given by E = (1/2) * k * A^2\n    E = (1/2) * k * A**2\n\n    # Kinetic energy at given position x (measured in Joules) is given by KE = E - PE\n    # Potential energy at position x is given by PE = (1/2) * k * x^2\n    PE = (1/2) * k * x**2\n    KE = E - PE\n\n    # The speed v of the block at position x can be found using KE = (1/2) * m * v^2\n    # Solve for v: v = sqrt((2 * KE) / m)\n    v = symbols('v')\n    equation = solve((1/2) * m * v**2 - KE, v)\n\n    # Since speed cannot be negative, we take the positive solution\n    v_positive = [sol.evalf() for sol in equation if sol > 0][0]\n\n    return E, v_positive\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the distance Bud runs in one minute\n    # Then, Pip runs x+20 metres in one minute\n    # Total distance run by Bud in 3 minutes is 3x\n    # Total distance run by Pip in 3 minutes is 3(x+20)\n    # The sum of distances run by both in 3 minutes is 540 metres\n    \n    x = symbols('x')\n    equation = Eq(3 * x + 3 * (x + 20), 540)\n    \n    # Solve the equation to find x, the distance Bud runs in one minute\n    solution_x = solve(equation, x)\n\n    # Calculate the distance Pip runs in 3 minutes\n    pip_distance = 3 * (solution_x[0] + 20)\n    \n    return pip_distance\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Initially, if we assume that there were 100 bottles\n    initial_bottles = 100\n    initial_coffee = 60  # 60% of the initial bottles were coffee\n    initial_tea = initial_bottles - initial_coffee  # The rest were tea\n\n    # After buying more tea, 40% of the total bottles were coffee\n    # Which means 60% are now tea\n    # Let x be the number of additional tea bottles added\n    # Then (initial_tea + x) / (initial_bottles + x) = 60 / 100\n    \n    # 100 * (initial_tea + x) = 60 * (initial_bottles + x)\n    # We solve for x using the values we already know (40 and 100)\n    x = symbols('x')\n    eq = Eq(100 * (initial_tea + x), 60 * (initial_bottles + x))\n    x_value = solve(eq, x)[0]\n\n    # Calculate the percentage increase\n    percentage_increase = x_value / initial_tea * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of coins\n    a, b, c_initial, c_final = symbols('a b c_initial c_final')\n    \n    # Box A contains 4 times as many coins as Box B\n    eq1 = Eq(a, 4 * b)\n    \n    # 6% of the coins in Box A are removed and transferred to Box C\n    # 20% of the coins in Box B are removed and transferred to Box C\n    # c_final is 1220, which is 22% more than the original number of coins in Box C\n    eq2 = Eq(c_final, c_initial + 0.06 * a + 0.20 * b)\n    eq3 = Eq(c_final, 1220)\n    eq4 = Eq(c_final, 1.22 * c_initial)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (a, b, c_initial, c_final))\n\n    # b represents the number of coins in Box B, a is 4 times b, and is the original number of coins in Box A\n    return solutions[a]\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    # Convert hexadecimal to decimal, perform the addition, and convert back\n    hex_num1 = '2A3'\n    hex_num2 = '17B'\n    \n    dec_num1 = int(hex_num1, 16)\n    dec_num2 = int(hex_num2, 16)\n    \n    sum_in_dec = dec_num1 + dec_num2\n    sum_in_hex = hex(sum_in_dec).upper()[2:]  # Convert back to hex and remove '0x'\n    \n    return sum_in_hex\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    return 0.25 * 0.30 * 0.40 * 300\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    return 152 + 45 - 52 + 16\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    for tricycles in range(25):  \n        cars = 24 - tricycles  \n        if 3 * tricycles + 4 * cars == 86:  \n            return tricycles\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    time_washing_watermelons = 1\n    time_washing_glasses = 3\n    time_juicer_working = 4\n    time_pouring = 1\n    \n    min_time = time_washing_watermelons + time_washing_glasses + time_juicer_working + time_pouring\n    \n    return min_time\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    red_flowers = 5\n    green_flowers = 2\n    white_flowers = 3\n\n    red_price = 2\n    green_price = 5\n    white_price = 10\n\n    total_revenue = (red_flowers * red_price) + (green_flowers * green_price) + (white_flowers * white_price)\n    total_flowers = red_flowers + green_flowers + white_flowers\n\n    average_price = total_revenue / total_flowers\n    \n    return average_price\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"WINNING\")\n    freq_w = 1\n    freq_i = 2\n    freq_n = 3\n    freq_g = 1\n\n    arrangements = factorial(total_letters) // (factorial(freq_w) * factorial(freq_i) * factorial(freq_n) * factorial(freq_g))\n  \n    return arrangements\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13-2*3+1):\n        for x2 in range(3, 13-x1-3+1):\n            x3 = 13 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money = 60  # in pence\n    james_money = 110  # in pence, since £1.10 is equivalent to 110p\n\n    total_money = lewis_money + james_money  # sum the money, still in pence\n    total_money_in_pounds = total_money / 100  # convert pence to pounds for the final answer\n\n    return round(total_money_in_pounds, 2)  # rounding off to 2 decimal places for currency\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    return 7 * 0.4\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    from itertools import permutations\n\n    # Function to calculate sub-factorial ~ derangement numbers (using the formula !n = (n-1)(!(n-1) + !(n-2)))\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n-1) * (subfactorial(n-1) + subfactorial(n-2))\n\n    ans = subfactorial(6)\n    return ans\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from sympy import divisors\n\n    def has_unique_factors(num_set):\n        factors_count_set = set(map(lambda x: len(divisors(x)), num_set))\n        return len(factors_count_set) == len(num_set)\n    \n    # All possible numbers.\n    all_numbers = set(range(1, 14))\n    \n    # Iterate through combinations of 9 numbers\n    for number_set in combinations(all_numbers, 9):\n        if has_unique_factors(number_set):\n            for alice_number in number_set:\n                # Check if Alice's number is odd\n                if alice_number % 2 == 1:\n                    # Possible set of numbers for May and Mark\n                    for may_number in number_set:\n                        if may_number == alice_number - 2:\n                            for mark_number in number_set:\n                                if mark_number == may_number - 1:\n                                    # Numbers not picked\n                                    not_picked = all_numbers - set(number_set)\n                                    return math.prod(not_picked)\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # kg\n    final_velocity = 8  # m/s\n    time = 4  # s\n\n    acceleration = final_velocity / time  # a = Δv / t\n    force = mass * acceleration  # F = m * a\n\n    return force\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    # Given\n    total_bottles = 350\n    income = 2012\n    price_lemonade = 4\n    price_plus = 7\n\n    # Let the number of bottles of \"1000 Plus\" be x\n    # The number of bottles of lemonade will then be (total_bottles - x)\n    # Our equation will be: price_plus * x + price_lemonade * (total_bottles - x) = income\n\n    # We start with the minimum number of bottles of \"1000 Plus\" and increment until\n    # we find a solution that satisfies the equation\n    for x in range(0, total_bottles + 1):\n        if price_plus * x + price_lemonade * (total_bottles - x) == income:\n            return x  # Found the minimum number of bottles of \"1000 Plus\"\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(0, 101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    ans = 20172017 // 2017\n    return ans\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Let the initial number of blue pens be 3x and red pens be 5x\n    # Given: Total pens initially = 3x + 5x = 8x\n    # And we know there are 96 pens initially, \n    # so we can find the value of x by solving equation 8x = 96\n    total_initial_pens = 96\n    x = total_initial_pens // 8\n    \n    # Calculate the initial number of blue pens\n    initial_blue_pens = 3 * x\n    \n    # After adding 60 red pens and some unknown number of blue pens \"blue_added\":\n    # New total pens = initial blue pens + blue added + initial red pens + 60\n    # New blue pens = initial blue pens + blue added\n    # It is given that 40% of the pens are blue after addition\n    # So, 0.4 * New total pens = New blue pens\n    # We can represent this in equation and solve for blue_added\n    \n    initial_red_pens = 5 * x\n    # Let the number of blue pens added be blue_added\n    blue_added = symbols('blue_added')\n    \n    new_total_pens = initial_blue_pens + blue_added + (initial_red_pens + 60)\n    blue_pens_equation = Eq(0.4 * new_total_pens, initial_blue_pens + blue_added)\n    \n    blue_pens_added_solution = solve(blue_pens_equation, blue_added)\n    return blue_pens_added_solution[0]\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # The largest number that can't be obtained by combining multiples of 3 and 7\n    # is given by the Frobenius coin problem, which states that the largest number\n    # is a*b - a - b where a and b are relatively prime integers (which 3 and 7 are).\n    return 3 * 7 - 3 - 7\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    distance_km = 32\n    num_friends = 11\n\n    total_cost = cost_per_km * distance_km\n    cost_per_person = total_cost / num_friends\n\n    return cost_per_person\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbol for number of incorrect answers\n    incorrect = symbols('incorrect')\n    \n    # Based on the problem, we express the number of correct answers in terms of incorrect answers\n    correct = 12 + 3 * incorrect\n    \n    # Each correct answer gains 5 points, each incorrect answer loses 2 points\n    # Total points are the sum of points from correct and incorrect answers\n    # Jane got a total of 151 points\n    total_points = Eq(5 * correct - 2 * incorrect, 151)\n    \n    # Solve the equation for the number of incorrect answers\n    solutions = solve(total_points, incorrect)\n    \n    # Get the number of correct answers using the number of incorrect answers\n    correct_answers = 12 + 3 * solutions[0]\n    \n    return correct_answers\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert to base 10, add and convert back to base 7\n    sum_base_10 = int('45', 7) + int('66', 7)\n    ans = ''\n    while sum_base_10 > 0:\n        ans = str(sum_base_10 % 7) + ans\n        sum_base_10 //= 7\n    return ans\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    total_matches = (4 + 6 + 2 + 1 + 3 + 5) // 2\n    # As every match involves two players, total matches played is the sum of matches played by each player divided by 2\n    matches_by_f = total_matches * 2 - (4 + 6 + 2 + 1 + 3 + 5)\n    # Matches played by F equals total matches times 2 minus the sum of matches played by other players\n    return matches_by_f\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Cici's current age and Linda's current age\n    cici_age, linda_age = symbols('cici_age linda_age')\n\n    # Given that Linda was 11 years old when Cici was born\n    equation1 = Eq(linda_age - cici_age, 11)\n\n    # The sum of their ages 4 years later will be 37\n    equation2 = Eq((cici_age + 4) + (linda_age + 4), 37)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cici_age, linda_age))\n    \n    # Linda's age 3 years later\n    linda_age_later = solutions[linda_age] + 3\n\n    return linda_age_later\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    from sympy import gcd\n    \n    # Since we are concerned with numbers from 1 to 20,\n    # we need to consider the least common multiple (LCM) of these numbers.\n    # The prime factorization of the LCM of 1 to 20 will give us the required N,\n    # since N must be divisible by 18 out of these 20 numbers.\n    lcm = 1\n    for i in range(1, 21):\n        lcm = (lcm * i) // gcd(lcm, i)\n\n    # Now, we need to find two consecutive numbers that do not divide N.\n    # Since there are only 20 numbers, we can simply iterate to find them.\n    for i in range(1, 20):\n        if lcm % i != 0 and lcm % (i + 1) != 0:\n            return i + (i + 1)\n    \n    return -1\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    ans = 0\n    for num in range(161, 15 * 15):\n        if num % 15 == num // 15:\n            ans += num\n    return ans\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (first_term + last_term) * num_terms // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    min_sum = first_number_min + second_number_min\n    return min_sum\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Jamie-Anne's stamps as J and Natasha's stamps as N\n    J, N = symbols('J N')\n\n    # Create the equations based on the problem\n    equation1 = Eq(J, 5 * N / 3)       # Ratio of Jamie's stamps to Natasha's stamps is 5:3\n    equation2 = Eq(J - N, 18)          # Jamie-Anne has 18 more stamps than Natasha\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (J, N))\n\n    # Total stamps is the sum of Jamie's and Natasha's stamps\n    total_stamps = solutions[J] + solutions[N]\n\n    return total_stamps\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_one_way = 300  # Distance from home to school or vice versa\n    speed_uphill = 10  # Speed uphill\n    speed_downhill = 30  # Speed downhill\n\n    time_uphill = distance_one_way / speed_uphill\n    time_downhill = distance_one_way / speed_downhill\n\n    total_time = time_uphill + time_downhill\n    total_distance = distance_one_way * 2\n\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n    num_bags = total_peaches // peaches_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    # There are 5 entrances and 4 people.\n    # Each person can choose from 5 entrances independently of each other.\n    # Therefore, for each person, there are 5 choices.\n    # We then multiply the choices for each person to get the total number of combinations.\n    \n    choices_per_person = 5\n    total_people = 4\n    total_ways = choices_per_person ** total_people\n    \n    return total_ways\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Subtract the leftover fruits to find the distributable amount\n    distributable_apples = 226 - 10\n    distributable_pears = 352 - 28\n    distributable_oranges = 157 - 13\n\n    # The largest possible number of students is the greatest common divisor of the distributable amounts\n    ans = gcd(distributable_apples, gcd(distributable_pears, distributable_oranges))\n\n    return ans\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    digit_count = 0\n    current_number = 1\n\n    while True:\n        current_number_length = len(str(current_number))\n        digit_count += current_number_length\n\n        if digit_count >= 200:\n            return int(str(current_number)[current_number_length - (digit_count - 200) - 1])\n\n        current_number += 1\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    import math\n\n    # Judy can stand in 2 different places (first or last)\n    judy_positions = 2\n    # Number of friends\n    friends = 5\n    # Calculate the permutations for the friends\n    friends_permutations = math.factorial(friends)\n    # Total permutations including Judy's positions\n    total_permutations = judy_positions * friends_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number_1 = 6\n    lcm = 12\n\n    for number_2 in range(1, lcm + 1):\n        if (number_1 * number_2) % lcm == 0:\n            common_factors = set()\n            for i in range(1, min(number_1, number_2) + 1):\n                if number_1 % i == 0 and number_2 % i == 0:\n                    common_factors.add(i)\n            if common_factors == {1, 2}:\n                return number_2\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost = symbols('cost')\n    sale_price = cost + 40\n    customer_price = sale_price * 0.8\n    profit = Eq(customer_price - cost, 12)\n\n    cost_value = solve(profit, cost)\n\n    return cost_value[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    daniel, daughter = symbols('daniel daughter')\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n    solutions = solve((equation1, equation2), (daniel, daughter))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    qualified_points = 5\n    unqualified_penalty = 18\n    total_points = 9931\n    total_days = 4\n    tvs_per_day = 500\n\n    # Let x be the number of qualified products, and y be the number of unqualified products\n    # Over four days, x + y = 500 * 4\n    # Each qualified product gives 5 points, and each unqualified product removes 18 points, adding to 9931 points.\n    # Therefore the equations are:\n    # x + y = 500 * 4\n    # 5x - 18y = 9931\n\n    # Solving these equations, we can use the first equation to express y in terms of x:\n    # y = 500 * 4 - x\n\n    # Substitute y in the second equation\n    # 5x - 18(500 * 4 - x) = 9931\n    # 5x - 18 * 500 * 4 + 18x = 9931\n    # 23x - 18 * 500 * 4 = 9931\n    # x = (9931 + 18 * 500 * 4) / 23\n\n    qualified_products_total = (total_points + unqualified_penalty * tvs_per_day * total_days) // qualified_points\n\n    return qualified_products_total\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n\n    # Original scenario equation: hens = 6 * roosters\n    original_equation = Eq(hens, 6 * roosters)\n    \n    # After adding chickens equation: hens + 60 = 4 * (roosters + 60)\n    new_equation = Eq(hens + 60, 4 * (roosters + 60))\n\n    solutions = solve((original_equation, new_equation), (hens, roosters))\n\n    # Before number of chickens = number of hens + number of roosters\n    total_chickens_before = solutions[hens] + solutions[roosters]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    # The sequence is symmetric around the central '8', so we can just calculate one half\n    # and multiply by 2, then add the middle number '8' and the remaining tail '1+2'.\n    half_sum = sum(range(1, 9))\n    tail_sum = 1 + 2\n    total_sum = 2 * half_sum + tail_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    period = \"538462\"  # The recurring period of the decimal\n    position = 2021  # The position after the decimal point we are interested in\n\n    # Since the period is of length 6, we use modulo to find the position within the period\n    period_position = (position - 1) % len(period)\n\n    # Get the digit at the calculated position within the period\n    digit = period[period_position]\n\n    return int(digit)\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    mean_initial = 12\n    numbers_initial = 7\n    \n    # Total sum for the initial seven numbers\n    total_sum_initial = mean_initial * numbers_initial\n    \n    mean_final = 11\n    numbers_final = numbers_initial + 1\n    \n    # Total sum after including the eighth number\n    total_sum_final = mean_final * numbers_final\n    \n    # The eighth number\n    eighth_number = total_sum_final - total_sum_initial\n    \n    return eighth_number\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = 99  # zero-based indexing\n    ans = sequence[index % len(sequence)]\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # For two-digit numbers\n    for i in range(1, 10):\n        # Numbers between 10 and 100 are 11, 22, ..., 99\n        count += 1  # i.e., 11, 22, ..., 99\n    \n    # For three-digit numbers\n    for i in range(1, 10):\n        for j in range(0, 10):\n            # Numbers between 100 and 1000 are 101, 111, ..., 999\n            count += 1  # i.e., 101, 111, ..., 999\n            \n    return count\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    result = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return result\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    total_cost = 132\n    fraction_book = 1/3\n    fraction_bag = 2/5\n    \n    # Let the total money Bud had be x\n    # According to the problem, 1/3*x + 2/5*x = 132\n    # Solve for x\n    x = total_cost / (fraction_book + fraction_bag)\n    \n    return x\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let the speed of April be 'a' and Baye be 'b'.\n    # April meets Baye 800m from Q, which means Baye has walked 1000m (1800 - 800).\n    # Since they started at the same time and Baye is still walking towards Q,\n    # the time it takes for April to walk 1800m and run back 800m, is the same\n    # as the time Baye took to walk 1000m. Let that time be 't'.\n    # So, 1800/a + 800/(4a) = 1000/b\n    # Thus, 1800/a + 200/a = 1000/b, or 9a + 2a = 5b, or 11a = 5b.\n    # When April meets Baye, April would have traveled a total of 2600m (1800 + 800).\n    # After meeting Baye, April runs back to P, which is another 1000m, at 4 times her walking speed.\n    # Baye continues to walk towards Q while April is running back to P.\n    # The time April takes to run back to P is the time Baye takes to walk from the meeting point to her final position.\n    # So, 1000/(4a) = distance_to_q/b\n    # We know 11a = 5b, so we can substitute a with (5b/11) in above.\n    # So, 1000/(4*(5b/11)) = distance_to_q/b\n    # Simplifying, 1000/(20b/11) = distance_to_q/b\n    # distance_to_q = b*(1000/(20b/11)) = 11 * 1000 / 20\n    distance_to_q = 11 * 1000 / 20\n\n    # The distance Baye is away from Q when April arrives back at P is 1800 - distance_to_q\n    return int(1800 - distance_to_q)\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Maximum number of draws to not get 5 green beads would include all blue and white beads\n    max_not_green = 5 + 6\n\n    # To then surely get 5 green beads, draw one more after all blue and white beads\n    ans = max_not_green + 5\n\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    digits = 0\n    for i in range(1, 216):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    count_div_5 = 105 // 5\n    count_div_7 = 105 // 7\n    count_div_5_and_7 = 105 // (5 * 7)\n    \n    count = count_div_5 + count_div_7 - count_div_5_and_7\n    \n    return count\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(C, B - 75)\n    equation3 = Eq(A + B + C, 835)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    count = 0\n    for i in range(1, 82):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') / 3:\n            return num\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a, b = 6, 2\n    ans = 5 * a - 2 * b\n    return ans\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # Here we assume that the number of minutes John needs to walk is directly proportional to the number of floors he walks.\n    # Given that John needs 12 minutes for 3 floors (from the 1st to the 4th floor), \n    # the time he needs for 1 floor is 12 minutes divided by 3.\n    \n    minutes_per_floor = 12 / 3\n\n    # Now, we calculate the number of floors from the 1st to the 8th, which is 7 floors.\n    # We then multiply the minutes per floor by the total number of floors to get the total time.\n\n    total_floors_to_8th = 8 - 1\n    total_minutes_to_8th = minutes_per_floor * total_floors_to_8th\n\n    return total_minutes_to_8th\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    ways = 0\n    # Since the baskets are identical, we only need to consider the distribution of apples\n    # without regard to order. This is a problem of partitioning the number 6 into at most 3 parts.\n    # We use stars and bars method to calculate the possible ways.\n    for a in range(7):  # a represents the number of apples in the first basket, from 0 to 6\n        for b in range(a, 7):  # b represents the number at least as many as in the first basket.\n            # Basket 3 will have the remaining apples, which automatically satisfies b >= c.\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    dividend_quotient_values = set()\n\n    for divisor in range(1, 40):\n        for quotient in range(1, 40 // divisor + 1):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                dividend_quotient_values.add(dividend / quotient)\n\n    ans = len(dividend_quotient_values)\n    return ans\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    num_months = 5  # March to July inclusive\n\n    total_pizzas = average_pizzas_per_month * num_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Initial ratio of birds to squirrels\n    ratio_birds_to_squirrels = 8 / 5\n\n    # Let the initial number of birds be 8x and squirrels be 5x\n    birds_initial = 8\n    squirrels_initial = 5\n\n    # Total number of animals initially is 13x\n    total_initial = birds_initial + squirrels_initial\n\n    # The number of squirrels increased by 20%\n    squirrels_later = squirrels_initial * 1.20  # This is 6x now\n\n    # Since the total number doesn't change, the number of birds later will be:\n    birds_later = total_initial - squirrels_later\n\n    # The percentage of birds that flew away is:\n    birds_flew_away_percentage = ((birds_initial - birds_later) / birds_initial) * 100\n\n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    ans = 32 * 2.99\n    return ans\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    def custom_operation(a, b):\n        return a + b - (a % 10)\n    \n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # Arithmetic sequence formula: an = a1 + (n-1)d, where an is the nth term (last day pages),\n    # a1 is the first term (first day pages), and d is the common difference between terms\n\n    # Rearrange the formula to solve for n (number of days) and cast it to int\n    num_days = ((last_day_pages - first_day_pages) / difference) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_l_juice = 8 * 3\n    consumed_juice = 9\n    remaining_juice = total_l_juice - consumed_juice\n    container_volume = 5\n    containers_needed = -(-remaining_juice // container_volume)  # Ceil division\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    first_term = 7\n    common_difference = 15 - 7\n    num_terms = 4  # We already have 4 terms\n\n    next_term = first_term + common_difference * num_terms\n\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    total_loafs_needed = 35\n    cups_needed = total_loafs_needed / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    num_friends = 4\n    cards_sent_per_person = num_friends - 1  # Each friend sent a card to every other friend\n    total_cards_sent = num_friends * cards_sent_per_person\n    \n    return total_cards_sent\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 10):  # Since A is an integer and 9/A < 1, A has to be between 1 and 9.\n        if 5/9 < 9/A < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    total_students = 39\n    condition = Eq(boys / 4, 2 * girls / 5)\n    total_count = Eq(boys + girls, total_students)\n\n    solutions = solve((condition, total_count), (boys, girls))\n\n    return solutions[boys] - solutions[girls]\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left_of_Tanya = 3\n    members_right_of_Tanya = 5\n    Tanya = 1  # Including Tanya herself\n\n    total_members = members_left_of_Tanya + Tanya + members_right_of_Tanya\n\n    return total_members\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    D, A, R, T, C = symbols('D A R T C')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(D + A + R + T, 11)\n    equation2 = Eq(T + A + R + T, 12)\n    equation3 = Eq(C + A + R + T, 13)\n\n    # Assume the sum of A, R, T is a constant named S\n    S = A + R + T\n\n    # From equation2 we know that T = 12 - S\n    # Substitute T in equation1, then we have D + S = 11, so D = 11 - S\n    # Substitute T in equation3, then we have C + S = 13, so C = 13 - S\n\n    # Since D and C both are different integers and not equal to 0, and their\n    # sum is 24, the maximum possible integer value for S is when D = 1 and C = 10,\n    # so that S can have the maximum value, because if S were any higher it would \n    # result in D or C having to be 0, which is not allowed. \n\n    # Thus the maximum value of S, which is A + R + T is:\n    max_value_S = 11 - 1  # Substitute D = 1\n\n    return max_value_S\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primefactors\n\n    number = 87878\n    factors = primefactors(number)\n    largest_prime_factor = max(factors)\n\n    four_digit_factors = [factor for factor in factors if 1000 <= factor <= 9999]\n\n    return max(four_digit_factors) if four_digit_factors else largest_prime_factor\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5  # The total weight of all crates\n    max_load_per_van = 12  # Maximum load each van can carry\n    vans_needed = -(-total_weight // max_load_per_van)  # Ceiling division to get the number of vans needed\n    return vans_needed\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n\n    equation1 = Eq(daniel - 24, patrick + 10)\n    equation2 = Eq(patrick + 10, 2 * (daniel - 24))\n\n    solutions = solve((equation1, equation2), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    speed1 = 7  # speed in the first part of the race\n    speed2 = 5  # speed in the middle part of the race\n    speed3 = 8  # speed in the last part of the race\n\n    distance1 = 280  # distance of the first part of the race\n    distance2 = 400  # distance of the middle part of the race\n    distance3 = 800 - distance1 - distance2  # distance of the last part of the race\n\n    # Calculate the time taken for each part of the race\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time for the entire race\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def count_partitions(n, k):\n        # Base case\n        if n == 0:\n            return 1\n        if n < 0 or k <= 0:\n            return 0\n        # Counting with including kth number and excluding kth number\n        return count_partitions(n - k, k) + count_partitions(n, k - 1)\n\n    return count_partitions(5, 5) - 1  # Exclude the number itself as a partition\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = -82  # 82 metres below sea level is represented as -82\n    plane_height = 569  # 569 metres above sea level\n    total_distance = plane_height - whale_depth  # Subtracting a negative is the same as adding\n    return total_distance\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day = 6\n    total_days = 9\n    total_skirts = 0\n    \n    for day in range(1, total_days + 1):\n        total_skirts += day * skirts_per_day\n\n    return total_skirts\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    # Total number of pupils\n    total_pupils = 30\n    \n    # Number of right-handed pupils\n    right_handed = 21\n    \n    # Number of girls\n    girls = 16\n    \n    # The smallest number of girls who are right-handed occurs when all the non-right-handed pupils are girls.\n    # Hence, first find the number of left-handed pupils (which is total pupils - right-handed pupils)\n    left_handed = total_pupils - right_handed\n    \n    # The minimum number of right-handed girls will be the total number of girls minus the left-handed ones,\n    # assuming all left-handed pupils are girls\n    min_right_handed_girls = girls - left_handed\n    \n    return min_right_handed_girls\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n\n    apples = (2 / 3) * total_fruits\n    bananas = (1 / 9) * total_fruits\n    lemons = total_fruits - apples - bananas\n\n    equation = Eq(apples - lemons, 12)\n\n    total_fruits_solution = solve(equation, total_fruits)\n    \n    lemons_count = lemons.subs(total_fruits, total_fruits_solution[0])\n\n    return int(lemons_count)\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n\n    return qiqi_pizza\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    min_diff = float('inf') # start with infinity as the minimum difference\n\n    # using itertools to get all permutations of the digits 1 to 9\n    from itertools import permutations\n    \n    # Create all possible permutation of the digits\n    digits = '123456789'\n    all_numbers = [''.join(p) for p in permutations(digits)]\n\n    # check all possible pairs for the smallest difference\n    for i, n1 in enumerate(all_numbers):\n        for n2 in all_numbers[i + 1:]:\n            # Calculate the difference between the two numbers\n            num1 = int(n1)\n            num2 = int(n2)\n            diff = abs(num1 - num2)\n            \n            # if this difference is smaller than the current smallest, update min_diff\n            if diff < min_diff:\n                min_diff = diff\n                if min_diff == 1:  # the smallest possible difference is 1\n                    return 1\n\n    return min_diff\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n\n    probability_over_25 = probability_over_25_given_over_20 / probability_over_20\n\n    return probability_over_25\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if a * a + a + a == 399:\n            return a\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # If 5 taps take 2 minutes to fill a 1 litre jug,\n    # 1 tap takes 10 minutes to fill the same jug \n    # (since 5 taps are 5 times faster than 1 tap).\n    time_for_one_tap = 5 * 2\n    \n    # Since we have to fill only 500 ml, which is half of 1 litre,\n    # it should take half of the time for one tap to fill 1 litre.\n    time_for_half_litre = time_for_one_tap / 2\n    \n    return time_for_half_litre\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    height_difference = 20  # Ben is 20cm shorter than Sally\n\n    sally_height = ben_height + height_difference\n\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n\n    children = 3/5 * total_visitors\n    remaining_visitors = total_visitors - children\n    men = 1/2 * remaining_visitors\n\n    equation = Eq(children, men + 140)\n\n    solutions = solve(equation, total_visitors)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_volume_ml = 2000  # converting 2 liters to millilitres\n    volume_drank_ml = 350\n    volume_left = total_volume_ml - volume_drank_ml\n    return volume_left\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    return 3280 * 0.40\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "def solution():\n    digits = [8, 7, 6, 4, 3, 1]\n    # To get the greatest sum, we need the largest digits to be placed in the hundred's place,\n    # followed by the next largest in the ten's place and so on.\n    # With the given digits, two highest numbers that can be formed are 874 and 631.\n    # Using the largest digits for the hundreds place (8 and 7), next largest for tens (7 and 6), \n    # and the remaining for the units (4 and 3). The numbers 1 and 3 can't be used as tens\n    # or hundreds place as they would decrease the overall sum.\n    \n    first_number = digits[0] * 100 + digits[2] * 10 + digits[5]  # 874\n    second_number = digits[1] * 100 + digits[3] * 10 + digits[4]  # 631\n    \n    ans = first_number + second_number\n    return ans\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # The provided sequence is: 1, 8, 16, 23, 46, 53\n    # Looking at the pattern, we can see two rules:\n    # 1. When moving from an odd-indexed number to the next even-indexed number, 7 is added.\n    # 2. When moving from an even-indexed number to the next odd-indexed number, the number is doubled.\n    \n    # Considering the last number 53 (odd-indexed), the next number (even-indexed) should be:\n    # Applying rule 1 (since it's moving from odd-index to even-index), we add 7 to 53.\n    next_number = 53 + 7\n\n    return next_number\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    matches_played = 20\n    earnings_per_match = 500\n    goals_per_game = 2\n    earnings_per_goal = 100\n    \n    total_earnings = (matches_played * earnings_per_match) + (matches_played * goals_per_game * earnings_per_goal)\n\n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rate_a, rate_b, rate_c, total = symbols('rate_a rate_b rate_c total')\n    \n    # Equations based on given conditions\n    equation1 = Eq(rate_a + rate_c, total)\n    equation2 = Eq(rate_b + rate_c, total)\n    equation3 = Eq(rate_b, 2 * rate_a)\n    \n    # Water contribution by pipes A and B\n    contribution_a = 18 # tons\n    contribution_b = 27 # tons\n    \n    # Combining equations 1 and 3, we have 3 * rate_a + rate_c = total\n    equation4 = Eq(3 * rate_a + rate_c, total)\n    \n    # Equations for contributions\n    contribution_equation_a = Eq(rate_a / (rate_a + rate_c), contribution_a / total)\n    contribution_equation_b = Eq(rate_b / (rate_b + rate_c), contribution_b / total)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, contribution_equation_a, contribution_equation_b), \n                      (rate_a, rate_b, rate_c, total))\n    \n    return solutions[total]\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_kilograms = 8\n    total_cost = 26.8\n\n    cost_per_kilogram = total_cost / total_kilograms\n\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    start_number = 1\n    terms = 10\n    ans = sum(start_number + 2 * i for i in range(terms))\n    return ans\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let G be the total amount of grass,\n    # R be the rate at which grass grows per day (assumed to be constant),\n    # H be the daily grass consumption by one horse,\n    # and S be the daily grass consumption by one sheep.\n\n    # From the given data:\n    # 20H + 12R = G (1) - when 20 horses eat for 12 days\n    # 60S + 24R = G (2) - when 60 sheep eat for 24 days\n\n    # The amount of grass a horse eats per day is equal to that of 4 sheep:\n    # H = 4S (3)\n\n    # We want to solve for D, the number of days 12 horses and 88 sheep can eat all grass:\n    # 12H + 88S + D*R = G (4)\n\n    # By adjusting equations (1) and (2) to have the same \"G\" on both sides, we can find a relationship:\n    # 20H + 12R = 60S + 24R, which simplifies to:\n    # 20H - 60S = 12R (5)\n\n    # Since H = 4S, we can substitute that in (5):\n    # 80S - 60S = 12R, which simplifies further to:\n    # 20S = 12R or S = 3/5R (6)\n\n    # Now, we substitute S=3/5R in equation (2) to get the value of G:\n    # 60(3/5R) + 24R = G, which simplifies to:\n    # 36R + 24R = G, further simplified to:\n    # 60R = G (7)\n\n    # Then, we want to find D using S=3/5R and H = 4S, in terms of R in equation (4):\n    # 12H + 88S + D*R = G, substituting H=4S and G=60R, we get:\n    # 12(4S) + 88S + D*R = 60R, which simplifies to:\n    # 48S + 88S + D*R = 60R, further simplified to:\n    # 136S + D*R = 60R, substituting S=3/5R, we get:\n    # 136(3/5R) + D*R = 60R, which simplifies to:\n    # 81.6R + D*R = 60R, or:\n    # D*R = 60R - 81.6R, which simplifies to:\n    # D = (60 - 81.6) / R\n\n    D = (60 - 81.6) / 1  # Since R is assumed to be constant and nonzero, we can divide by R directly\n\n    return -D  # Negative is taken because D resulted in a negative value due to 60R - 81.6R being negative\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        M, A, T, H = perm\n        if M == 0 or H == 0:\n            continue\n        num1 = M*1000 + A*100 + T*10 + H\n        num2 = H*1000 + T*100 + A*10 + M\n        if num1 + num2 == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    count = 0\n    # Count numbers with exactly two sevens (77x, x77, 7x7)\n    for i in range(10):\n        if i != 7:\n            # When the last digit is not seven\n            count += 1\n            # When the first digit is not seven\n            count += 1\n            # When the middle digit is not seven\n            count += 1\n    # Count numbers with three sevens (777)\n    count += 1\n    return count\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    total_balls = 16\n    cost_per_ball = total_cost / total_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten_by_bill = total_sweets / 2\n    sweets_left = total_sweets - sweets_eaten_by_bill\n    sweets_given_away = sweets_left / 3\n    sweets_remaining = sweets_left - sweets_given_away\n    return sweets_remaining\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    num1 = 1.9\n    num2 = 1.99\n    mid_num = (num1 + num2) / 2\n    return mid_num\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # Mr. Spencer and his 2 children can be seated in 3! (3 factorial) ways.\n    # This is because once Mr. Spencer is seated between his two children,\n    # there are 3 different ways to arrange the children around him.\n    spencer_family_ways = factorial(3)\n    \n    # After placing Mr. Spencer and his children, 3 seats are taken,\n    # leaving 3 seats for the other three people.\n    # These three people can be seated in those 3 seats in 3! (3 factorial) ways.\n    other_people_ways = factorial(3)\n    \n    # The total number of different possible seating arrangements is the product\n    # of the permutations of Mr. Spencer and his children and the other three people.\n    ans = spencer_family_ways * other_people_ways\n    \n    return ans\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    for correct in range(7):\n        incorrect = 6 - correct\n        if correct * 5 - incorrect * 2 == 23:\n            return correct\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    num_twos, num_fives = symbols('num_twos num_fives')\n\n    # Initial conditions\n    equation1 = Eq(num_twos + num_fives, 55)\n\n    # Cindy spent 1/3 of the number of $2 notes and received 8 more $5 notes\n    spent_twos = num_twos / 3\n    remaining_twos = num_twos - spent_twos\n    new_num_fives = num_fives + 8\n\n    # After that, the number of $5 notes she had was 3/7 of the remaining number of notes\n    remaining_notes = remaining_twos + new_num_fives\n    equation2 = Eq(new_num_fives, 3 * remaining_notes / 7)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (num_twos, num_fives))\n\n    # Calculate the total amount of money\n    total_money = solutions[num_twos] * 2 + solutions[num_fives] * 5\n\n    return total_money\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # in meters\n    speed = 7      # meters per minute\n    time = distance / speed  # time = distance / speed (in minutes)\n    return time\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    # Factors of 24 (for A*B) and their pairs (A, B)\n    factors_24 = [(i, 24 // i) for i in range(1, 25) if 24 % i == 0]\n    \n    # Factors of 52 (for B*C) and their pairs (B, C)\n    factors_52 = [(i, 52 // i) for i in range(1, 53) if 52 % i == 0]\n\n    # Dictionary to store the B values and corresponding A or C\n    b_dict = {}\n    \n    # Find B common in both factor pairs\n    for a, b in factors_24:\n        b_dict[b] = a  # Store A for each B\n\n    # Initializing minimum sum of A + C\n    min_sum = float('inf')\n    \n    # Check each pair (B, C) in factors of 52\n    for b, c in factors_52:\n        # If B is in the dictionary, we found A, B, C that meets the conditions\n        if b in b_dict:\n            a = b_dict[b]\n            min_sum = min(min_sum, a + c)\n\n    return min_sum\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n\n    # A, B, and C can be arranged in 3! ways, and EF can be arranged in 2! ways.\n\n    # Consider ABC as a single person and EF as a single person.\n    # Now, we have 6 \"people\" that can be arranged in 6! ways.\n\n    # Therefore, the total number of different ways = 6! * 3! * 2!\n\n    num_ways = factorial(6) * factorial(3) * factorial(2)\n\n    return num_ways\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sweets, students = symbols('sweets students')\n\n    equation1 = Eq(sweets - 6 * students, -26)\n    equation2 = Eq(sweets - 5 * students, -5)\n\n    solutions = solve((equation1, equation2), (sweets, students))\n\n    return solutions[sweets]\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    # The pattern of odd numbers is an arithmetic sequence with a common difference of 2\n    # starting from the first odd number, which is 1.\n    first_odd_number = 1\n    common_difference = 2\n    n = 20  # We want the 20th odd number\n\n    # The nth term of an arithmetic sequence is given by the formula:\n    # nth_term = first_term + (n-1) * difference\n    nth_odd_number = first_odd_number + (n - 1) * common_difference\n    \n    return nth_odd_number\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    # Let's represent the original number by x\n    # According to the problem, if we divide x by 3 and then add 7, we get 18\n    # So we can write the equation:\n    # (x / 3) + 7 = 18\n    # Solving for x:\n    # Subtract 7 from both sides\n    result_after_adding = 18 - 7\n    # Multiply by 3 to get x\n    original_number = result_after_adding * 3\n    # This is the original number we were looking for\n    return original_number\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):  # Ensure x2 is greater than x1\n            for x3 in range(x2 + 1, 15):  # Ensure x3 is greater than x2\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series = [2, 4, 6, 8, 10, 12, 14]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of scarfs produced per day originally\n    x = symbols('x')\n    \n    # The original plan: produce x scarfs per day for 6 days\n    original_total = 6 * x\n    \n    # The new plan: produce (x+24) scarfs per day for 4 days\n    new_total = 4 * (x + 24)\n    \n    # The total number of scarfs produced should be the same in both plans\n    equation = Eq(original_total, new_total)\n    \n    # Solve for x\n    solutions = solve(equation, x)\n    \n    # Calculate the total number of scarfs using the value of x\n    total_scarfs = solutions[0] * 6\n    \n    return total_scarfs\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls', integer=True)\n\n    # Initial ratio of boys to girls\n    original_ratio = Eq(boys / girls, 5/3)\n\n    # New ratio after 15 boys left\n    new_ratio = Eq((boys - 15) / girls, 5/6)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (boys, girls))\n\n    total_pupils = solutions[boys] + solutions[girls]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    original_price = sale_price / (1 - 1/3)\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_age_now = 65\n    josh_age_5_years_ago = (3 / 5) * (shelby_age_now - 5)\n    josh_age_now = josh_age_5_years_ago + 5\n    \n    return josh_age_now\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    ans = 10 * 20 * 30 * 40\n    return ans\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    prime_factors = []\n    number = 675\n    i = 2\n    \n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            number //= i\n            prime_factors.append(i)\n    if number > 1:\n        prime_factors.append(number)\n\n    prime_factors_count = {}\n    \n    for prime in prime_factors:\n        if prime in prime_factors_count:\n            prime_factors_count[prime] += 1\n        else:\n            prime_factors_count[prime] = 1\n\n    B = 1\n    for prime, count in prime_factors_count.items():\n        if count % 2 != 0:\n            B *= prime\n\n    return B\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost_pence = 695  \n    single_can_cost_pence = 65    \n    individual_cost_pence = 12 * single_can_cost_pence \n    savings = individual_cost_pence - multipack_cost_pence \n    return savings\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_of_amount = total_amount / 4\n    return quarter_of_amount\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')  # a for apple, b for banana\n    equation1 = Eq(3 * a + b, 32)\n    equation2 = Eq(6 * a + b, 53)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let's denote Adam, Ben, and Carl's weights as A, B, and C respectively.\n    \n    A_plus_B = 102  # Adam and Ben together\n    B_plus_C = 97   # Ben and Carl together\n    A_plus_C = 93   # Adam and Carl together\n    \n    # The sum of all pairs is A+B + B+C + A+C which is equal to 2*(A + B + C)\n    sum_of_pairs = A_plus_B + B_plus_C + A_plus_C\n    \n    # Divide by 2 to find the total weight\n    total_weight = sum_of_pairs / 2\n    \n    return int(total_weight)\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    return 55 / 100 * 80\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time Alan takes to paint the room on his own.\n    alan = symbols('alan')\n\n    # Alan and Bob's combined work rate\n    combined_rate = 1 / 4\n    # Bob's work rate\n    bob_rate = 1 / 6\n\n    # Alan's work rate is equal to their combined work rate minus Bob's rate.\n    # The work rate is the reciprocal of the time it takes to complete the task. \n    # So, the time Alan takes is the reciprocal of his work rate.\n    alan_rate = combined_rate - bob_rate\n    alan_time = 1 / alan_rate\n\n    # Solve for Alan's time\n    solutions = solve(Eq(alan, alan_time), alan)\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n\n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n\n    amount = principal * (1 + rate) ** time\n\n    return amount\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    count = 0\n    # Count numbers for the 3000s, 4000s and 5000 range separately\n\n    # For the 3000s\n    for thousands in [3]:\n        for hundreds in [1, 2, 4, 5, 6]:\n            for tens in [1, 2, 3, 4, 5, 6]:\n                for ones in [1, 2, 3, 4, 5, 6]:\n                    # Make sure all digits are unique\n                    if len({thousands, hundreds, tens, ones}) == 4:\n                        count += 1\n\n    # For the 4000s\n    for thousands in [4]:\n        for hundreds in [1, 2, 3, 5, 6]:\n            for tens in [1, 2, 3, 4, 5, 6]:\n                for ones in [1, 2, 3, 4, 5, 6]:\n                    if len({thousands, hundreds, tens, ones}) == 4:\n                        count += 1\n\n    # For the 5000 range, since upper bound is 5120, we have limited options for hundreds, tens and ones\n    for thousands in [5]:\n        for hundreds in [0, 1]:\n            if hundreds == 0:\n                for tens in [1, 2, 3, 4, 5, 6]:\n                    for ones in [1, 2, 3, 4, 5, 6]:\n                        if len({thousands, hundreds, tens, ones}) == 4:\n                            count += 1\n            elif hundreds == 1:\n                for tens in [0, 2]:\n                    for ones in [1, 2, 3, 4, 5, 6]:\n                        if len({thousands, hundreds, tens, ones}) == 4:\n                            count += 1\n\n    return count\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    number1 = 10024\n    number2 = 3968\n    return number1 + number2\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    from math import gcd\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_consumption = 15\n    total_weeks = 26\n    total_food_needed = weekly_consumption * total_weeks\n    return total_food_needed\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    # Get the number of stamps Andrew has\n    return solutions[andrew]\n\n# Execute the function and store the answer\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_score = symbols('original_score')\n    equation = Eq((original_score / 2) + 10, original_score - 30)\n    \n    score = solve(equation, original_score)\n    \n    return score[0]\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    return 250 - (6*6) - (8*6)\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    # Given votes\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n    \n    # Votes left to be distributed\n    remaining_votes = total_votes - (mark_votes + nicole_votes + peter_votes)\n    \n    # Votes needed for Peter to win without fail is one more than half the total votes\n    votes_needed_for_majority = (total_votes // 2) + 1\n    \n    # Additional votes needed by Peter to reach that number\n    additional_votes_needed = votes_needed_for_majority - peter_votes\n    \n    return additional_votes_needed\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    remaining_flour = 21\n    used_flour = total_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the original amount of money Alex and Nicholas each had\n    x = symbols('x')\n    \n    # After Alex spent $58, he had x-58 left\n    # After Nicholas spent $13, he had x-13 left, which is 6 times what Alex has left\n    # So, x-13 = 6*(x-58)\n    equation = Eq(x - 13, 6 * (x - 58))\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # The total amount they had at first is 2*x\n    total = 2 * solution[0]\n\n    return total\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    return 12.35 + 8.65 + 9.8 - 2.8\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_in_week = 7\n    days_later = 28\n\n    # Calculating the remainder when days_later is divided by days_in_week will give us\n    # how many days ahead it will be in terms of the week cycle.\n    remainder = days_later % days_in_week\n\n    # Mapping the days of the week to their corresponding numeric codes\n    day_codes = {\n        \"Monday\": \"0001\",\n        \"Tuesday\": \"0002\",\n        \"Wednesday\": \"0003\",\n        \"Thursday\": \"0004\",\n        \"Friday\": \"0005\",\n        \"Saturday\": \"0006\",\n        \"Sunday\": \"0000\"\n    }\n\n    # Since today is Monday and 28 days later is exactly 4 weeks later,\n    # it will be the same day of the week: Monday.\n    return day_codes[\"Monday\"]\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a = 9 ** (3/2)\n    return a\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    # The value of the digit 6 in the decimal 54.016 is determined by its position.\n    # The 6 is in the thousandths place, so its value is 6 thousandths or 6/1000.\n    value_of_6 = 6 * 0.001\n\n    return value_of_6\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    length_of_road = 240\n    interval = 12\n\n    # Number of intervals is one less than the number of poles\n    num_poles = (length_of_road // interval) - 1\n\n    return num_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    total_items = 52\n    difference = 10\n\n    # Let x be the number of rulers Alison has, then she has x + difference pencils.\n    # The sum of pencils and rulers is total_items.\n    # x + (x + difference) = total_items\n    # 2x + difference = total_items\n    # Solve for x:\n    x = (total_items - difference) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean = 11\n    total_numbers = 5\n    total_sum = mean * total_numbers\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    # The value of the 7 in the ten thousands place (7 * 10,000)\n    value_ten_thousands_7 = 7 * 10000\n\n    # The value of the 7 in the tens place (7 * 10)\n    value_tens_7 = 7 * 10\n\n    # The difference between the values\n    difference = value_ten_thousands_7 - value_tens_7\n\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, blue, yellow = symbols('red blue yellow')\n    \n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n    \n    solutions = solve((equation1, equation2, equation3), (red, blue, yellow))\n    \n    return solutions[blue]\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    girls_ratio = 6\n    boys_count = 200\n\n    total_ratio = boys_ratio + girls_ratio\n    girls_count = (girls_ratio / total_ratio) * (boys_count / (boys_ratio / total_ratio))\n\n    return int(girls_count)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # The decimal expansion of 1/3 is repeating \"3\"\n    # Since we want the sum of the first 1000 digits from the right, they are all \"3\"\n    digit = 3\n    sum_of_digits = digit * 1000\n    return sum_of_digits\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15\n    total_amount = 29\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # Worst case scenario: taking 3 marbles of each color without getting 4 of the same color.\n    worst_case = 3 * 3  # 3 red, 3 yellow, and 3 blue\n\n    # To ensure the next marble is the fourth of the same color.\n    next_marble = 1\n\n    # Total number of marbles needed to be taken out.\n    total_marbles = worst_case + next_marble\n\n    return total_marbles\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    max_number = 100\n    step = 2\n\n    crossed_out = max_number // step\n\n    return crossed_out\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2/5\n    percentage = 35/100\n    decimal = 0.604\n    \n    total = fraction + percentage + decimal\n    \n    return total\n    \nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original concentration of the solution added to container A\n    x = symbols('x')\n\n    # Concentration of the solution in container A after adding 10 grams of x concentration\n    concentration_A = (10 * x) / 40\n    \n    # Concentration of the solution in container B after receiving 10 grams from container A\n    concentration_B = (10 * concentration_A) / 50\n    \n    # Concentration of the solution in container C after receiving 10 grams from container B\n    concentration_C = (10 * concentration_B) / 60\n\n    # Equation based on the information given for concentration C\n    equation = Eq(concentration_C, 0.5 / 100)\n\n    # Solve for the original concentration x\n    original_concentration = solve(equation, x)\n\n    return original_concentration[0]\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    first_three_days_total = 33\n    last_four_days_average = 18\n    last_four_days_total = last_four_days_average * 4\n    total_for_week = first_three_days_total + last_four_days_total\n    days_in_week = 7\n    average_per_day = total_for_week / days_in_week\n\n    return average_per_day\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    from math import factorial\n    # Five people can be arranged in 5! ways\n    total_arrangements = factorial(5)\n    \n    # When two people want to stand next to each other, treat them as a single unit\n    # Now we have 4 entities to arrange (the 'pair' and the remaining 3 individuals)\n    arrangements_with_pair = factorial(4)\n    \n    # The pair themselves can be arranged in 2! ways\n    arrangements_of_pair = factorial(2)\n\n    # The total number of arrangements is the product of the pair arrangements\n    # and the arrangements of the pair with the remaining individuals\n    return arrangements_with_pair * arrangements_of_pair\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight1 = 12\n    nickel_percent1 = 40\n    weight2 = 13\n    nickel_percent2 = 60\n\n    total_weight = weight1 + weight2\n    total_nickel = (weight1 * (nickel_percent1 / 100)) + (weight2 * (nickel_percent2 / 100))\n\n    nickel_concentration = (total_nickel / total_weight) * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    n = 1\n    while True:\n        correct_sum = n * (n + 1) // 2\n        if correct_sum > 3405:\n            break\n        if 3405 - correct_sum <= n:\n            return 3405 - correct_sum\n        n += 1\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament with eight players, each player plays every other player once.\n    # Therefore, each player plays 7 games (one against each of the other 7 players).\n    # Since everyone scores a different number of wins, we can distribute the wins from 0 to 7 (inclusive).\n    # The champion, having the highest number of wins, will be the one with 7 wins, because if there was a player with 6 wins,\n    # there would have to be another player with 6 wins to defeat the champion, violating the unique win count condition.\n    ans = 7  # Champion's wins\n    return ans\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Given sum of first 6 terms (S6)\n    S6 = 64\n    # Given sum of first 12 terms (S12)\n    S12 = 156\n\n    # Using the formula for the sum of the first n terms of an arithmetic sequence:\n    # Sn = n/2 * (2a + (n - 1)d)\n    # S12 = 2 * S6, because the sum of the terms from 7 to 12 is the same as from 1 to 6 in an A.P.\n    # So, S12 = 2 * S6\n\n    # Therefore, S18 (sum of first 18 terms) is:\n    # S18 = S12 + S6 (sum of the terms from 13 to 18, which is same as from 1 to 6)\n    S18 = S12 + S6\n\n    return S18\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    # 2016 = 2^5 * 3^2 * 7\n    # 1377 = 3^2 * 7 * 11\n    # Looking for a solution where ages multiply to a number 2^x * 3^y * 7*z\n    # where x decreases by 5, y decreases by 2, and z decreases by 1 compared to 2016\n    # when we go back each year.\n\n    # Factorizing both 2016 and 1377, we can see the common factors are 3^2 * 7 \n    # (both are divisible by 9 and 7)\n    \n    # Since last year, each of the cousins was younger, so at least one of them has to \n    # be divisible by 11 now in order for their product to be 1377 last year.\n    # Hence, one of the cousins is currently 11 years old.\n    \n    # The product of the remaining two cousins' ages must be 2016 / 11\n    # which simplifies to 2^5 * 3^2 * 7 / 11 = 2^5 * 3 * 21 / 11.\n    \n    # Looking at the prime factorization of the product of the remaining two cousins' ages, \n    # We can deduce that one of the cousins was a prime age last year (because of the factor 11 \n    # going into 1377 and not into 2016, one must have aged from one prime to another).\n    \n    # The primes less than 11 are 2, 3, 5, and 7.\n    # Considering the cousin currently aged 11, the potential range of their age last year is 10, \n    # and it must have been a prime, this leaves us only with 7.\n    \n    # Hence, the cousin currently aged 11 was aged 7 last year, meaning their age 2 years ago was 6.\n    \n    # Now we have ages for two cousins currently: 11 and another prime factor, 6.\n    # The product of their ages 2 years ago would be 11 * 6 = 66.\n    \n    # The third cousin's current age times 66 must equal 2016, so the third cousin is currently 2016/66.\n    \n    age_product_two_years_ago = 66 * (2016 // 66)\n    \n    # 30 is the product of three cousins' ages two years ago, \n    # considering the factors of 66 and 2016 (divided by 66 to account for the two known cousins' ages).\n    \n    return age_product_two_years_ago\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    possibilities = set()\n    remainder = 3\n    for divisor in range(1, 40):\n        for quotient in range(1, 40):\n            dividend = divisor * quotient + remainder\n            if divisor + quotient + dividend + remainder == 40:\n                possibilities.add(dividend / quotient)\n    return len(possibilities)\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    math_club_total = 146 + 94\n    history_club_total = (7 / 8) * math_club_total\n    return int(history_club_total)\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    # Let c be the total number of chickens\n    # Let p be the number of pens originally, which is 24\n    # Let n be the number of chickens per pen originally\n    # After building 6 more pens (p+6), the number of chickens per pen becomes (n-6)\n    \n    # Since the total number of chickens doesn't change, we can write the following equation:\n    # c = n * p = (n - 6) * (p + 6)\n    \n    # Substitute p with 24 to get the equation:\n    # c = n * 24 = (n - 6) * 30\n    # Simplify to find n:\n    # n * 24 = n * 30 - 6 * 30\n    # 6 * n = 6 * 30\n    # n = 30\n    \n    # Now substitute n back into the original equation to find c:\n    c = 30 * 24\n    \n    return c\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "from math import gcd\n\ndef solution():\n    return gcd(45, 60)\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # On planet Zog, numbers are written in reverse\n    # Thus, the subtraction should be done with reversed numbers:\n    # 927 (which is 729 in reverse)\n    # -62 (which is 26 in reverse)\n    result = int(str(927)[::-1]) - int(str(62)[::-1])\n    \n    # Now we reverse the result to get the answer Pluto would write\n    ans = int(str(result)[::-1])\n    return ans\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_score_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_score_percentage / 100) * total_marks\n    marks_difference = hebe_score - emily_score\n\n    return int(marks_difference)\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    years_ago = 3\n    ashley_age_years_ago = ashley_age - years_ago\n    brother_age_years_ago = ashley_age_years_ago - 2\n    brother_current_age = brother_age_years_ago + years_ago\n    return brother_current_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_speed = 20  # speed of train in meters per second\n    train_length = 160  # length of the train in meters\n    time_to_pass = 30  # time to pass through the bridge in seconds\n\n    # Distance covered by the train to pass the bridge is the length of the train plus the length of the bridge\n    # Distance = Speed * Time\n    distance_covered = train_speed * time_to_pass\n    \n    # Subtract the length of the train to find the length of the bridge\n    bridge_length = distance_covered - train_length\n    \n    return bridge_length\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    return 0.23 + 1.9 + 0.083\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Time spent jogging (from 6:30 am to 7:00 am) in hours\n    jogging_time = (7 - 6.5)  \n    # Distance covered jogging at 9 km/h\n    jogging_distance = jogging_time * 9  \n\n    # Time spent walking (from 7:00 am to 8:00 am) in hours\n    walking_time = (8 - 7)  \n    # Distance covered walking at 7.5 km/h\n    walking_distance = walking_time * 7.5  \n\n    # Total distance covered\n    total_distance = jogging_distance + walking_distance  \n\n    return total_distance\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    games_won, games_lost = symbols('games_won games_lost')\n\n    equation1 = Eq(games_won, 2 * games_lost)\n    equation2 = Eq(games_won + games_lost, 63)\n\n    solutions = solve((equation1, equation2), (games_won, games_lost))\n\n    return solutions[games_lost]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    result1 = 55 * common_factor\n    result2 = 44 * common_factor\n    ans = result1 - result2\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 options for the hundreds place (it can't be 0)\n    hundreds_options = 2\n    # There are 3 options for the tens place (0, 3, or 4)\n    tens_options = 3\n    # There are 3 options for the ones place (0, 3, or 4)\n    ones_options = 3\n\n    # The total number of different three-digit numbers\n    total_numbers = hundreds_options * tens_options * ones_options\n\n    return total_numbers\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - (-8) + 7 - (-6) + 5 - (-4) + 3 - (-2) + 1\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let total number of animals initially be 't'\n    # Let the initial number of goats be 'g'\n    t, g = symbols('t g')\n\n    # 65% are cows so 35% are goats\n    # initial goats = g = 35% of total = 0.35 * t\n    equation1 = Eq(g, 0.35 * t)\n\n    # After adding, total number of animals is t + 240\n    # The percentage of cows becomes 65% + 20% = 85%\n    # The number of goats doubled so it's 2 * g\n    # New number of cows is 85% of the new total so cows = 0.85 * (t + 240)\n    # The new number of goats is the rest of the animals: (t + 240) - 0.85 * (t + 240)\n    # This number is twice the original number of goats: 2 * g\n    equation2 = Eq((t + 240) - 0.85 * (t + 240), 2 * g)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, g))\n\n    return int(solutions[g])\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    area_x = (3**2 * (3**0.5)) / 4  # Area of Triangle X using formula A = s^2 * sqrt(3) / 4\n    area_y = (9**2 * (3**0.5)) / 4  # Area of Triangle Y using the same formula\n    return int(area_y / area_x)     # The number of times Triangle X fits into Triangle Y\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n    \nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    num_students = 5\n    num_select = 2\n    return comb(num_students, num_select)\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    larger_product = 8 * 9 * 10\n    smaller_product = 1 * 2 * 3\n    difference = larger_product - smaller_product\n    return difference\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Create the equation: 5x * 12 pens + 3x * 5 pencils = 120 total\n    equation = Eq(5 * x * 12 + 3 * x * 5, 120)\n    \n    # Solve the equation for x\n    solved_value = solve(equation, x)\n    \n    return solved_value[0]\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n\n    return total_roses\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    for children in range(100, 201):\n        if children % 8 == 3 and children % 9 == 1:\n            return children\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    # Number of choices for appetisers and main courses\n    appetisers = 2\n    main_courses = 3\n    \n    # The soup and dessert are optional, John can choose to have either, both or none, Thus there are 2 choices for each (having it or not)\n    soup_options = 2\n    dessert_options = 2\n    \n    # Total combinations\n    total_combinations = appetisers * main_courses * soup_options * dessert_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    first_term = 6\n    last_term = 41\n    difference = 5\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    blue_balls = symbols('blue_balls')\n    \n    # total balls in the bag before drawing\n    total_balls = 4 + blue_balls  \n\n    # Probability of drawing two red balls without replacement\n    prob_two_red = (4 / total_balls) * (3 / (total_balls - 1)) \n\n    # Setting up the equation based on the given probability\n    equation = Eq(prob_two_red, 2/7)\n\n    # Solving the equation for the number of blue balls\n    num_blue_balls = solve(equation, blue_balls)\n\n    # We only take the positive integer solution since the number of balls can't be negative or non-integer\n    ans = [sol for sol in num_blue_balls if sol.is_integer and sol > 0]\n\n    return ans[0]\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    remaining_slices = 2 + 4  # slices given to friends plus slices left\n    remaining_fraction = 1 - 3/5  # fraction of the cake left after family ate\n    initial_slices = remaining_slices / remaining_fraction\n    return initial_slices\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n    return ans\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "def solution():\n    from math import factorial as fact\n\n    # The prime factorization of 2^27 is just 2 repeated 27 times\n    # All the digits must be 2, 4, or 8 since these are the digits whose prime factorization only includes 2's\n    # We need to find the number of combinations where 10 digits can be selected from these, \n    # with their product being 2^27\n    # This is equivalent to the partitioning of the number 27 into a sum of at most 10 terms,\n    # each term being 1, 2, or 3 (corresponding to the powers of 2 that give 2, 4, and 8).\n\n    # Initialize count to 0\n    count = 0\n    \n    # Since we are using partitions of the number 27, we don't have to worry about permutations\n    # where digits are in different orders - we just care about the count of each digit.\n\n    # We iterate over the possible counts of the digit 8 (which contributes a factor of 2^3)\n    for eights in range(10):\n        for fours in range(10 - eights):\n            twos = 10 - eights - fours\n            # Check if the current combination results in the desired power of 2\n            if (eights * 3 + fours * 2 + twos * 1) == 27:\n                # Calculate combinations as the multinomial coefficient\n                count += fact(10) // (fact(eights) * fact(fours) * fact(twos))\n\n    return count\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m = time Mike takes to finish the job by himself\n    # Let d = time Danny takes to finish the job by himself\n    m, d = symbols('m d', positive=True, real=True)\n    \n    # Combined work equation: 1 job / (1/m + 1/d) hours = 10 hours\n    equation1 = Eq(1/(1/m + 1/d), 10)\n    \n    # Sequential work equation: Mike works for 8 hours + Danny works for 13 hours = 1 job\n    # 8/m + 13/d = 1\n    equation2 = Eq(8/m + 13/d, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, d))\n\n    # Return the time it takes Danny to finish the job by himself\n    return solutions[d]\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_1 = 3 * 10**2  # The place value of the 3 in the hundreds place\n    place_value_2 = 3 * 10**5  # The place value of the 3 in the hundred thousands place\n    difference = abs(place_value_2 - place_value_1)\n    return difference\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial as fact\n\ndef solution():\n    def permute(n, r):\n        return fact(n) // fact(n - r)\n\n    # Girls can be treated as one unit and there are three teachers\n    # Total units = girls as one unit + 3 teachers = 4\n    ways_girls_teachers = permute(4, 4)  # 4! ways for these\n\n    # Girls among themselves can be arranged in 3! ways\n    ways_girls = fact(3)\n\n    # For boys to not be adjacent, they have to stand in spaces between girls and teachers.\n    # We have 5 places to put boys (_ G _ T _ T _ T _) where G is girls unit, T is teacher\n    # and _ denotes spaces where boys can stand\n    # Choose 3 places for 3 boys out of 5 available ones and permute boys among chosen places\n    spaces_for_boys = 5\n    boys_to_place = 3\n    ways_boys = permute(spaces_for_boys, boys_to_place) * fact(boys_to_place)\n\n    # Total arrangements\n    return ways_girls_teachers * ways_girls * ways_boys\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    total_cases = 2\n    \n    # Using the Pigeonhole Principle to find the minimum number in one pencil case\n    min_pencils_in_one_case = (total_pencils + total_cases - 1) // total_cases\n\n    return min_pencils_in_one_case\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    interval = 3\n    # Calculate the number of chess pieces on one side, including one corner\n    per_side = side_length // interval + 1\n    # Total chess pieces is 4 sides - 4, since we counted corners in each side\n    total_chess = 4 * per_side - 4\n    return total_chess\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    # The operation a ⊕ b is a sum from a to a + b inclusive\n    # this sum can be represented as a * (b + 1) (b terms starting from 'a')\n    # plus the sum of an arithmetic progression: 1 + 2 + ... + b\n    # which is b * (b + 1) / 2 (the sum of the first 'b' natural numbers)\n    # So, for m ⊕ 10 = 66 we get the equation:\n    # m * 11 + 10 * 11 / 2 = 66\n    # This simplifies to:\n    # m * 11 + 55 = 66\n    # Subtract 55 from both sides:\n    m = (66 - 55) / 11\n    return int(m)\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # To minimize the red squares, we want to distribute the digits in a way\n    # that as few as possible digits appear 5 times or more.\n    # The maximum number of different digits that can appear 4 times or fewer\n    # without any digit appearing 5 times is 9 (for digits 1-9, zero cannot be counted\n    # because then it would require another digit to be painted red).\n\n    # Each of the digits (1-9) can appear at most 4 times.\n    # If all nine digits are used this way, we have 9 * 4 = 36 squares filled.\n    # With 100 squares to fill, this leaves us with 100 - 36 = 64 squares.\n    # We can fill these with the tenth digit (let's use 0),\n    # which will have to be painted red.\n\n    # So the answer is 64 red squares (filled with 0).\n    \n    return 64\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # which is -4\n\n    # Let 'n' be the number of terms until the first negative term\n    # a_n = a_1 + (n - 1)d < 0, solve for 'n'\n    # 50 + (n - 1)(-4) < 0\n    # 50 - 4n + 4 < 0\n    # -4n < -54\n    # n > 13.5\n    # Since 'n' must be an integer, n must be at least 14 to be the first negative term\n    \n    n = 14\n    return n\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(100):\n        num_str = str(i * i)\n        if len(num_str) == 4 and num_str[0] == num_str[1] and num_str[2] == num_str[3]:\n            return int(num_str)\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_money = 10\n    spent_money = 2.89\n    money_received = 4/5\n\n    remaining_money = initial_money - spent_money + money_received\n\n    return round(remaining_money, 2)\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3 * m) - 1 + m\n    return ans\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    remaining_distance = 130\n    tim_speed = 56\n    bob_speed = 74\n\n    distance_covered_together = initial_distance - remaining_distance\n    combined_speed = tim_speed + bob_speed\n\n    time_taken = distance_covered_together / combined_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    climb_rate = 3\n    slide_rate = 1\n    net_distance_day = climb_rate - slide_rate\n    burrow_depth = 11\n    day = 0\n    distance_climbed = 0\n\n    while distance_climbed < burrow_depth:\n        day += 1\n        distance_climbed += climb_rate\n        if distance_climbed >= burrow_depth:\n            break\n        distance_climbed -= slide_rate\n\n    return day\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    # To create 28 consecutive zeros in the factorial of a number, we need to count the number of factors of 5 (since each zero requires one 2 and one 5, and there are always more 2s than 5s in a factorial)\n    # Start by finding how many 5s are in factorials, as they are less frequent than 2s\n\n    zeros = 28\n    factor = 5\n    five_count = 0\n    n = 0\n\n    # Increment n until the number of fives in the factorization is enough to produce 28 zeros\n    while five_count < zeros:\n        n += 1  # Test the next number\n        # Check the multiplicity of the factor 5 in n!\n        temp_n = n\n        while temp_n % 5 == 0:\n            temp_n //= 5\n            five_count += 1\n    \n    # Return the largest value of n that produces at least 28 zeros at the end of n!\n    return n\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    numbers_sum = 5 * 5  # Mean * number of items\n    known_numbers_sum = 3 + 4 + 6 + 10\n    fifth_number = numbers_sum - known_numbers_sum\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import lcm\n\n    akon = 4\n    ben = 7\n    cris = 8\n\n    least_days = lcm(akon, ben, cris)\n\n    return least_days\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    decimal_part = '8354'\n    sum_of_digits = 0\n    for i in range(84):\n        sum_of_digits += int(decimal_part[i % len(decimal_part)])\n    return sum_of_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n\n    total_distance = eddie + jenny + jason\n    average_distance = total_distance / 3\n\n    return average_distance\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = set()\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            # Consecutive digits check\n            sorted_digits = sorted(map(int, digits))\n            if all([sorted_digits[i] + 1 == sorted_digits[i + 1] for i in range(len(sorted_digits) - 1)]):\n                perms = set(permutations(str(year)))\n                lucky_years.update(int(''.join(p)) for p in perms if p[0] != '0')\n    return len(lucky_years)\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    duration_per_strike = 3\n    delay_between_strikes = (43 - 6 * duration_per_strike) / (6 - 1)\n  \n    total_duration_for_12_strikes = 12 * duration_per_strike + (12 - 1) * delay_between_strikes\n\n    return int(total_duration_for_12_strikes)\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    m = 0\n    while True:\n        m += 1\n        original_students = m**2 + 5\n        if ((original_students + 18) ** 0.5).is_integer():\n            ans = original_students\n            break\n    return ans\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_zero_numbers = 9 * 9 * 9\n    at_least_one_zero_numbers = total_three_digit_numbers - no_zero_numbers\n    return at_least_one_zero_numbers\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    # If 6 people can build a bridge in 15 hours,\n    # they collectively work 6 * 15 = 90 person-hours to complete it.\n    total_person_hours = 6 * 15\n    \n    # If we want to build the bridge in 2 hours,\n    # we need to divide the total person-hours by 2 to find how many people are needed.\n    people_needed = total_person_hours / 2\n    \n    return people_needed\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    def combinations(n, k): \n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # This is a problem of distributing n identical items into r distinct groups,\n    # such that each group gets at least one item. This is given by the formula\n    # C(n - 1, r - 1), where C is the combination function.\n    pens = 20\n    kids = 6\n    # Since each kid gets at least one pen, we distribute one pen to each kid\n    # first. This leaves us with pens - kids pens to distribute.\n    return combinations(pens - 1, kids - 1)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz = 30  # time in minutes to finish a single quiz\n    number_of_quizzes = 4  # number of quizzes to be taken\n\n    total_time_minutes = time_per_quiz * number_of_quizzes\n    total_time_hours = total_time_minutes / 60  # converting minutes to hours\n\n    return total_time_hours\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # mass of the ball in kilograms\n    speed = 30   # speed of the ball in meters/second\n\n    kinetic_energy = 0.5 * mass * speed ** 2\n\n    return kinetic_energy\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    term_number = 7\n\n    # General form of the n-th term of an arithmetic sequence:\n    # a_n = a_1 + (n-1)d\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for number in range(100, 201):\n        if (number % 3 == 1 and number % 4 == 1 and \n            number % 5 == 1 and number % 7 == 2):\n            return number\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the problem statement\n    congruences = [(2, 5), (2, 6), (2, 7)]\n    \n    # Use the Chinese Remainder Theorem to solve the congruences\n    lcm_solution = solve_congruence(*congruences)\n    \n    # Since we know the number is less than 300, we can modify the solution\n    ans = next(filter(lambda x: x < 300, range(lcm_solution[0], 1000, lcm_solution[1])))\n    \n    return ans\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    equal_pieces = cuts + 1\n    length_each_piece = total_length / equal_pieces\n\n    return length_each_piece\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # Smallest 4-digit number means smallest digit will be in the thousands place\n    # 1 is the smallest non-zero digit\n    thousands_place = 1\n    \n    # Ones place is greatest odd number 9, since 7 and 5 are needed for the sum of 13\n    ones_place = 9\n    \n    # Hundreds and tens place must add up to 13\n    # Since the digits must be different, we can't use 9 and 4 as 9 is already used in ones place\n    # So we try using 7 as the next odd number, and 6 will be the digit that complements to 13\n    hundreds_place = 7\n    tens_place = 6  # 13 - 7, still different from ones and thousands place\n    \n    # Using the digits found, we form the smallest 4-digit number\n    smallest_number = (thousands_place * 1000) + (hundreds_place * 100) + (tens_place * 10) + ones_place\n\n    return smallest_number\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    current_height = 100  # Representing original height as 100%\n    target_height = 25    # Target height as 25% of original\n    bounce_count = 0      # Counter for number of bounces\n\n    while current_height >= target_height:\n        current_height *= 0.75  # After each bounce, it reaches 75% of previous height\n        bounce_count += 1\n\n    return bounce_count\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    sequence = range(5, 21, 3)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let the speed of Jerry be \"s\" miles per hour, then the speed of Kevin is \"1.5s\".\n    # If we say that they meet after \"t\" hours, then:\n    # Distance covered by Jerry = s * t\n    # Distance covered by Kevin = 1.5s * t\n    # And we know that the sum of these distances is 225 miles, so:\n    # s * t + 1.5s * t = 225\n    # Combining like terms, we get:\n    # 2.5s * t = 225\n    # Since we need to find the distance Jerry drove, we are looking for s * t\n    # Now we can solve for \"t\" by expressing \"t\" in terms of \"s\":\n    # t = 225 / (2.5s)\n    # Substituting t back into the distance equation for Jerry:\n    # Distance_Jerry = s * (225 / (2.5s))\n    # Simplifying the equation by canceling out \"s\":\n    # Distance_Jerry = 225 / 2.5\n    # Now we can calculate the distance:\n    distance_jerry = 225 / 2.5\n    return distance_jerry\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width = 4800\n    picture_width = 210\n    number_of_pictures = 10\n\n    # Since we have one picture on each extreme, we have 8 gaps for 8 pictures\n    number_of_gaps = number_of_pictures - 1\n    total_gap_width = total_width - picture_width * number_of_pictures\n    \n    # Distance between the centers of each picture (including picture width)\n    distance_between_centers = total_gap_width / number_of_gaps + picture_width\n\n    # Distance from the center of the wall to the center of the first picture is half the distance_between_centers\n    distance_from_wall_center_to_first_picture = distance_between_centers / 2\n\n    # Center of the third picture, considering one picture width and one full distance_between_centers (for the second picture)\n    distance_from_left_wall_to_third_picture_center = picture_width + distance_between_centers\n\n    # Now find how far the center of the third picture is from the vertical line down the center of the wall\n    distance_third_picture_from_center = abs(total_width / 2 - distance_from_left_wall_to_third_picture_center)\n\n    return distance_third_picture_from_center\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 3 * x + 2, 30 + 6 * x - 8 * x)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age_now = 10\n    uncle_age_difference = 40 - doris_age_now\n\n    uncle_age_now = doris_age_now + uncle_age_difference\n\n    return uncle_age_now\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100\n\n    principal = interest / rate\n\n    return principal\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    # Ellie's transaction: 2 bananas + 3 apples = 1.50\n    equation1 = Eq(2*banana + 3*apple, 1.50)\n    \n    # Beth's transaction: 3 bananas + 2 apples = 1.45\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    # Annabella's purchase: 1 banana + 1 apple\n    cost = solutions[banana] + solutions[apple]\n\n    return cost\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    Amanda, Belinda, Lisa = symbols('Amanda Belinda Lisa')\n    equation1 = Eq(Amanda, 4 * Belinda)\n    equation2 = Eq(Lisa, Amanda - 11)\n    equation3 = Eq(Amanda + Belinda + Lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (Amanda, Belinda, Lisa))\n\n    return solutions[Lisa]\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # Given the riddle, we are trying to find an unknown number that when added to 8 gives 15\n    # So we simply need to subtract 8 from 15 to find the unknown number\n    unknown = 15 - 8\n    \n    # Check if Timothy's answer is correct\n    is_correct = (unknown == 7)\n    \n    # Return the correct answer and whether Timothy's answer is correct\n    return (unknown, is_correct)\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    first_interest_rate = 1.15763\n    second_interest_rate = 1.1664\n\n    amount_after_first_period = initial_investment * first_interest_rate\n    total_amount = amount_after_first_period * second_interest_rate\n\n    return round(total_amount, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    # If a number is rounded to the nearest 100, then the original number could be 50 less or 49 more than the rounded price\n    lowest_possible_price = rounded_price - 50\n    return lowest_possible_price\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_amount = symbols('original_amount')\n    amount_after_watch = original_amount - 200\n    amount_after_shirt = amount_after_watch - (2/7) * amount_after_watch\n    equation = Eq(amount_after_shirt, original_amount / 3)\n\n    original_amount_value = solve(equation, original_amount)\n\n    return original_amount_value[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "from math import factorial\n\ndef solution():\n    # Tom and Harry standing together is treated as one entity.\n    # With Ronda fixed at the rightmost position, there are effectively 5 entities\n    # to arrange: Tom&Harry, and the other 5 students.\n    arrangements_of_5 = factorial(5)\n\n    # Tom and Harry can be arranged in 2! ways themselves.\n    arrangements_of_tom_and_harry = factorial(2)\n\n    # Total arrangements is the product of the two possibilities.\n    total_arrangements = arrangements_of_5 * arrangements_of_tom_and_harry\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_average = 89\n    target_average = 95\n    current_total = current_average * 4\n    num_tests_taken = 4\n    \n    while True:\n        num_tests_taken += 1\n        new_total = target_average * num_tests_taken\n        if new_total - current_total <= (num_tests_taken - 4) * 100:\n            break\n    \n    return num_tests_taken - 4\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Calculate time for each segment of the race\n    time_first_segment = 540 / 9  # time = distance / speed\n    time_middle_segment = 300 / 6\n    time_last_segment = (1000 - 540 - 300) / 10\n\n    # Sum times for all segments to get total time\n    total_time = time_first_segment + time_middle_segment + time_last_segment\n\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    difference_in_age = uncle_future_age - doris_age\n    uncle_current_age = doris_age + difference_in_age\n    return uncle_current_age\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    extra_performances = 2  # Lia and Liz each prepare an extra performance\n\n    total_performances = total_classes + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # speed in meters per second\n\n    total_distance = train_length + bridge_length\n    time_to_cross = total_distance / speed\n    \n    return time_to_cross\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep_begin, cows_begin = symbols('sheep_begin cows_begin')\n\n    # Initial ratio equation\n    equation1 = Eq(sheep_begin, (5/7) * cows_begin)\n    \n    # Final ratio equation after changes\n    equation2 = Eq(cows_begin - 7, (3/4) * (sheep_begin + 21))\n\n    solutions = solve((equation1, equation2), (sheep_begin, cows_begin))\n\n    return solutions[sheep_begin]\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    original_speed, time = symbols('original_speed time', real=True, positive=True)\n    \n    # Equation for the first scenario (speed increased by 20% -> time decreases by 1 hour)\n    eq1 = Eq(original_speed * 1.2 * (time - 1), original_speed * time)\n    \n    # Equation for the second scenario (200 km at original speed, rest at 25% increased speed, time decreases by 12 min)\n    eq2 = Eq(original_speed * (200/original_speed) + (original_speed * 1.25) * (time - 200/original_speed - 1/5), original_speed * time)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (original_speed, time))\n    distance = original_speed * time\n\n    # Calculate the distance between city P and Q\n    return distance.subs(solutions)\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    h_diff = 9 - 8\n    m_diff = 25 - 30\n    total_minutes = (h_diff * 60) + m_diff\n    return total_minutes\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, pencil_box = symbols('book pencil_box')\n    \n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    A_time = 6\n    B_time = A_time * 2\n\n    A_rate = 1 / A_time\n    B_rate = 1 / B_time\n\n    combined_rate = A_rate + B_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    geoff_age, sister_age, years_later = symbols('geoff_age sister_age years_later')\n    present_age_sum = Eq(geoff_age + sister_age, 22)\n    future_age_sum = Eq(geoff_age + years_later + sister_age + years_later, 30)\n\n    solutions = solve((present_age_sum, future_age_sum), (geoff_age, sister_age, years_later))\n\n    return solutions[years_later]\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 0.50  # cost of one packet of Haribo in dollars\n    mamee_cost = haribo_cost - 0.30  # cost of one packet of Mamee in dollars\n    big_jelly_cost = 6 * mamee_cost  # cost of one big packet of jelly in dollars\n\n    return big_jelly_cost\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    numerator = 18 * 32\n    denominator = 36\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Total candies\n    total = symbols('total')\n    \n    # According to the problem\n    anna = 3/8 * total\n    belle = 1/4 * total\n    cathy_dawn = total - (anna + belle)\n    equation = Eq(anna + belle, cathy_dawn + 90)\n    \n    # Solving the equation\n    solutions = solve(equation, total)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_bricks = 4\n    # Reverse the process done by Joel\n    before_joel = (remaining_bricks + 2) * 2\n    # Reverse the process done by Valerie\n    before_valerie = (before_joel + 3) * 2\n    # Reverse the process done by Ethan\n    initial_bricks = (before_valerie + 1) * 2\n    \n    return initial_bricks\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for the number of fish balls made at first\n    initial_fish_balls = symbols('initial_fish_balls')\n\n    # Equation based on the problem statement\n    # He sold 3/4 in the morning, so he had 1/4 left\n    # He sold 1/3 of what was left, so he had 2/3 of 1/4, which is 1/6 of the initial total\n    # He then made 506 more and had twice the initial number\n    equation = Eq(1/6 * initial_fish_balls + 506, 2 * initial_fish_balls)\n\n    # Solve the equation for the number of fish balls made initially\n    solution = solve(equation, initial_fish_balls)\n\n    return solution[0]\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    \n    books_to_give = (beck_books - chris_books) // 2\n\n    return books_to_give\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Sally had 72 more chocolate cupcakes than vanilla cupcakes\n    equation1 = Eq(chocolate, vanilla + 72)\n\n    # She had 36 lesser blueberry cupcakes than vanilla cupcakes\n    equation2 = Eq(blueberry, vanilla - 36)\n\n    # After selling cupcakes, Sally had 427 cupcakes left altogether\n    equation3 = Eq((chocolate - chocolate / 6) + \n                   (vanilla - 2 * vanilla / 3) + \n                   (blueberry - 7 * blueberry / 9), 427)\n\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    chocolate_sold = solutions[chocolate] / 6\n\n    return int(chocolate_sold)\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 / 100\n    return ans\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6 * 6 + 2)\n    solution = solve(equation, circle)\n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    for number in range(400, 501):\n        if number % 3 == 1 and number % 5 == 3 and number % 7 == 5:\n            return number\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    ratio_boys = 2\n    ratio_girls = 7\n\n    total_students = boys * (ratio_boys + ratio_girls) // ratio_boys\n\n    return total_students\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_price = 3\n    marble_price = strawberry_price + 2\n    cheese_price = 3 * marble_price\n    total_price = 2 * cheese_price\n\n    return total_price\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    from math import sqrt\n\n    n = 36\n    factors = set()\n    \n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    \n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    pigs = 8\n    green_apples = pigs  # one green apple per pig\n    red_apples = pigs / 2  # one red apple for every two pigs\n\n    total_apples = green_apples + red_apples\n    \n    return int(total_apples)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    seeds_died = total_seeds / 4\n    sunflowers_grown = total_seeds - seeds_died\n    return int(sunflowers_grown)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Setting up the congruences based on the problem statement\n    # (remainder, modulus)\n    congruences = [(3, 5), (4, 7), (5, 9)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    lcm_remainder, _ = solve_congruence(*congruences)\n\n    # Return the smallest possible value of the number\n    return lcm_remainder\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of one shirt and one pair of pants\n    shirt, pants = symbols('shirt pants')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n    \n    # Solve the system of equations for the price of one shirt and one pair of pants\n    solutions = solve((equation1, equation2), (shirt, pants))\n    \n    # Calculate the total price of one shirt and one pair of pants\n    total_price = solutions[shirt] + solutions[pants]\n\n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    # In terms of a net effect over two days, Andy deposits £2 (£10 - £8)\n    net_effect = 10 - 8 \n\n    # Number of complete cycles (each cycle is 2 days)\n    complete_cycles = total_days // 2  \n\n    # Account for the net deposit over the complete cycles\n    money_after_cycles = 100 + (complete_cycles * net_effect)\n    \n    # Check if there's an additional day after complete cycles\n    if total_days % 2 != 0:\n        # If 15th day is an odd day, Andy deposits £10\n        money_after_cycles += 10\n\n    return money_after_cycles\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n\n    return int(remaining_durians)\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    number_after_operations = 54\n    result_before_divide = number_after_operations * 4\n    result_before_add = result_before_divide - 178\n    original_number = result_before_add / 2\n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n    average_apples = total_apples / num_students\n    return average_apples\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    time_original = 8\n    time_earlier = 7\n    speed_increase = 5\n\n    # Original speed calculation: original_speed * time_original = speed_increase * time_earlier + original_speed * time_earlier\n    # Simplified: original_speed = speed_increase * time_earlier / (time_original - time_earlier)\n    original_speed = speed_increase * time_earlier / (time_original - time_earlier)\n\n    # Distance calculation: original_speed * time_original\n    distance = original_speed * time_original\n\n    return distance\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4 * 3 * 2 * 1 # Total ways without any restrictions\n    unwanted_ways = 2 * 2       # Ways where Claire and Tony sit across from each other\n    \n    return total_ways - unwanted_ways\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    \n    # Max's purchase: 1 banana + 2 pears = 94p\n    eq1 = Eq(1 * banana + 2 * pear, 94)\n    \n    # Emily's purchase: 1 banana + 1 pear = 62p\n    eq2 = Eq(1 * banana + 1 * pear, 62)\n    \n    # Solve the system of equations\n    sol = solve((eq1, eq2), (banana, pear))\n    \n    return sol[banana]\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of stickers Charlotte has\n    mary, alexis, charlotte = symbols('mary alexis charlotte')\n    equation1 = Eq(mary, (7/5) * alexis)               # Mary to Alexis ratio\n    equation2 = Eq(mary - 0.2 * mary, alexis - 0.2 * alexis + 20)  # Mary had 20 stickers more than Charlotte after giving away 20%\n    equation3 = Eq((0.2 * mary + 0.2 * alexis), 0.8 * charlotte)  # Charlotte's stickers increased by 80% after receiving 20% from both Mary and Alexis\n\n    solutions = solve((equation1, equation2, equation3), (mary, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    permuted_digits = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = permuted_digits[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    import math\n    num_bottles = 1000\n    num_test_tubes = math.ceil(math.log(num_bottles, 2))\n    return num_test_tubes\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = (7**2) - (6**2)\n    return n\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angle1, angle2 = symbols('angle1 angle2') # angle1 is the fourth angle, angle2 is five times larger than angle1\n\n    # We know that the sum of the angles in a quadrilateral is 360 degrees\n    # We also know that two of the angles are right angles (90 degrees each)\n    equation = Eq(90 + 90 + angle1 + 5 * angle1, 360)\n\n    solution = solve(equation, angle1)\n\n    # largest angle is five times the fourth angle\n    largest_angle = 5 * solution[angle1]\n\n    return largest_angle\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance_with_10_chairs = 36  # meters\n    number_of_spaces_with_10_chairs = 10 - 1  # After placing 10 chairs, there will be 9 spaces between them\n\n    # Distance between each chair when there are 10 chairs\n    distance_between_chairs_with_10 = total_distance_with_10_chairs / number_of_spaces_with_10_chairs\n\n    number_of_chairs_after_removal = 10 - 3  # Remaining chairs after removing 3\n    number_of_spaces_after_removal = number_of_chairs_after_removal - 1  # Spaces between remaining chairs\n\n    # Distance between each chair after removing 3 chairs\n    distance_between_chairs_after_removal = distance_between_chairs_with_10 * (number_of_spaces_with_10_chairs / number_of_spaces_after_removal)\n\n    return distance_between_chairs_after_removal\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    # Each brother has at least two books.\n    # Let x1, x2, x3 represent the number of books each brother has.\n    # x1 + x2 + x3 = 10\n    # Since each brother must have at least 2 books, we substitute x1 = y1 + 2, x2 = y2 + 2, x3 = y3 + 2\n    # Thus, the new equation with substitution is y1 + y2 + y3 = 4\n    # This is a problem of distributing 4 identical items into 3 distinct groups, which can be done using stars and bars method.\n    # The solution to this problem is the number of ways to insert two dividers in a sequence of 4 identical items.\n    # This is equivalent to choosing 2 divider spots from a total of (4 items + 2 dividers - 1) spots.\n    # Thus, the solution is C(n + k - 1, k - 1) where n is the number of items and k is the number of groups.\n    # For this problem, n = 4 and k = 3, so we have C(4 + 3 - 1, 3 - 1) = C(6, 2)\n    \n    from math import comb\n    \n    n = 4\n    k = 3\n    ans = comb(n+k-1,k-1)\n    \n    return ans\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    ways = [0] * 11\n    ways[0] = 1\n\n    for i in range(1, 11):\n        if i == 5:\n            continue\n        ways[i] += ways[i - 1] if i - 1 >= 0 else 0\n        ways[i] += ways[i - 2] if i - 2 >= 0 else 0\n        ways[i] += ways[i - 3] if i - 3 >= 0 else 0\n\n    # Avoiding the fifth step, so take combinations of reaching the fourth and directly to sixth step\n    ans = ways[4] * ways[10 - 6]\n\n    return ans\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = [i for i in range(10, 100) if i % 7 == 0 and 7007 % i == 0]\n    sum_of_factors = sum(factors[:2])  # Get the sum of the first two valid factors\n    return sum_of_factors\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for num in range(1, 10):\n        sequence.extend([num] * num)\n\n    mid_index = len(sequence) // 2\n\n    ans = sequence[mid_index]\n    return ans\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    # Initialize the minimum number of boxes to a large number\n    min_boxes = float('inf')\n\n    # Loop through each possible combination of small, medium, and large boxes\n    for small in range(54 // 5 + 1):\n        for medium in range(54 // 7 + 1):\n            for large in range(54 // 10 + 1):\n                if 5 * small + 7 * medium + 10 * large == 54:  # Check if the combination gives us 54 apples\n                    min_boxes = min(min_boxes, small + medium + large)  # Update the minimum number of boxes if needed\n\n    return min_boxes\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import Eq, solve, symbols\n\n    x = symbols('x')\n    equation = Eq((x + 6)/3, 5)\n\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots_needed = carrots_per_week * weeks\n    return total_carrots_needed\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    # speed in miles per hour\n    speed_mph = 65\n    # time in hours\n    time_hours = 15 / 60\n    # distance in miles\n    distance_miles = speed_mph * time_hours\n    # conversion factor from miles to kilometers\n    miles_to_km = 1.60934\n    # distance in kilometers\n    distance_km = distance_miles * miles_to_km\n    \n    return distance_km\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    height = 16\n    climb_up = 5\n    slide_down = 3\n    net_climb = climb_up - slide_down\n    days = 0\n    current_height = 0\n\n    while current_height < height:\n        days += 1\n        current_height += climb_up\n        if current_height >= height:\n            break\n        current_height -= slide_down\n\n    return days\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n    \n    remaining_cookies = total_cookies - given_away\n    number_of_bottles = remaining_cookies / cookies_per_bottle\n    \n    return int(number_of_bottles)\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n    \n    # With one entrance\n    total_visitors_with_one_entrance = visitors_per_minute * 16\n    check_ins_with_one_entrance = check_in_per_entrance * 16\n    \n    queue_cleared_with_one_entrance = check_ins_with_one_entrance - total_visitors_with_one_entrance\n    \n    # If there are 2 entrances\n    check_in_per_entrance_with_two = check_in_per_entrance * 2\n    \n    # Find the minute where the number of check-ins is greater or equal to the total visitors\n    time = 0\n    while True:\n        total_check_ins = check_in_per_entrance_with_two * time\n        total_visitors = visitors_per_minute * time\n        \n        if total_check_ins >= total_visitors:\n            break\n        \n        time += 1\n    \n    return time\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    max_multiple = 999 // 25 * 25\n    return max_multiple\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of dragonflies initially and x + 9 be the number of frogs\n    x = symbols('x')\n\n    # Equation representing the initial difference in number of frogs and dragonflies\n    equation1 = Eq(x + 9, x + 1)\n\n    # After the magic show, the number of frogs and dragonflies\n    equation2 = Eq(x - (11 - 10), 11)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x))\n\n    # Since we want to find the number of frogs initially, which is x + 9\n    initial_frogs = solutions[x] + 9\n\n    return initial_frogs\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n    \n    equation1 = Eq(cookies, muffins + 24)\n    equation2 = Eq(muffins * 1/4 + cookies * 3/8, 74)\n\n    solutions = solve((equation1, equation2), (cookies, muffins))\n    \n    return solutions[cookies]\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    # A twelve-digit even number with the format 123A456A789A\n    # is divisible by 9 but not divisible by 5.\n    # For a number to be divisible by 9, the sum of its digits must be divisible by 9.\n    # The given number is also even and not divisible by 5, therefore A cannot be 5 or 0.\n    # We need to find the sum of known digits first and then check which A makes the whole number divisible by 9.\n    \n    sum_known_digits = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n    for A in range(10):\n        if (sum_known_digits + 3 * A) % 9 == 0 and A != 5 and A % 2 == 0:\n            return A\n    \n    return None\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Speed ratio of the driver to the cyclist\n    speed_ratio_driver_to_cyclist = 13 / 2\n    \n    # Time difference in minutes\n    time_difference = 143\n    \n    # The time it takes for the cyclist is the product of the time it takes the driver and the speed ratio\n    # Let t be the time it takes for the driver in minutes\n    # Then the time it takes for the cyclist is t * speed_ratio_driver_to_cyclist\n    # The equation for the time difference is then:\n    # t * speed_ratio_driver_to_cyclist - t = time_difference\n    \n    # We solve for t\n    t = time_difference / (speed_ratio_driver_to_cyclist - 1)\n    \n    # We return the time it takes for the driver to reach the destination in minutes\n    return t\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use symbols for all the unknowns\n    metro_ticket, coffee_price, entry_fee, friends = symbols('metro_ticket coffee_price entry_fee friends', integer=True)\n\n    # Assume that Richard buys tickets for himself and his friends, coffee for everyone, and pays for a metro ticket back and forth.\n    total_expense = Eq(40, (friends + 1) * (2 * metro_ticket + coffee_price + entry_fee))\n\n    # The values for metro_ticket, coffee_price, and entry_fee are unknown.\n    # But we can set them to some reasonable values for this problem.\n    # As we have a single equation with multiple unknowns, we will have to experiment and see if there is a \n    # combination that satisfies all these conditions and results in the number of friends being a positive integer.\n\n    # Let's brute force the possible values for metro_ticket, coffee_price, and entry_fee.\n    # The ranges here are guesses, assuming that each cost is positive and less than 40 dollars.\n    for metro_price in range(1, 40):\n        for coffee_cost in range(1, 40):\n            for entry_cost in range(1, 40):\n                try:\n                    num_friends = solve(total_expense.subs({metro_ticket: metro_price, coffee_price: coffee_cost, entry_fee: entry_cost}), friends)\n                    # We're looking for positive integer solutions for the number of friends Richard can bring.\n                    if 0 < num_friends[0] == int(num_friends[0]):\n                        return int(num_friends[0])\n                except Exception as e:\n                    continue\n\n    # If no solution was found within the given ranges, we return 0 indicating Richard cannot bring any friend.\n    return 0\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = 4 * 24 + 5 * 81 + 7 * 20\n    return total_cost\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    # Calculate the sum of the integers from 2 to 12\n    n = 12\n    sum_of_integers = sum(range(2, n + 1))\n    # Apply the formula for the sum of cubes: 1³ + 2³ + 3³ + ...... + n³ = (1 + 2 + 3 + ...... + n)²\n    ans = sum_of_integers ** 2\n    return ans\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    for coins in range(1, 1000):  # Let's assume the number of coins can be found within this range\n        if coins % 4 == 0 and (coins // 4 + 2) * 3 == coins:\n            return coins\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    ways_trains = 4\n    ways_cars = 3\n    ways_flights = 2\n    \n    total_ways = ways_trains + ways_cars + ways_flights\n    \n    return total_ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Since only one statement is correct, we can check the logic of each statement\n    # If statement 1 is correct, it contradicts the premise that only one statement is correct.\n    if False:\n        pass  # It's impossible for statement 1 to be correct.\n\n    # If statement 2 is correct (which says none of the statements are correct), it would contradict itself.\n    if False:  # This statement cannot be correct, otherwise it would make itself incorrect.\n        pass\n\n    # If statement 3 is correct (which says one of the statements above is correct), it would contradict the premise.\n    if False:  # It's impossible for statement 3 to be correct, as both above statements are incorrect.\n        pass\n\n    # If statement 4 is correct (which says all the statements above are correct), it similarly contradicts the premise.\n    if False:  # It's impossible for statement 4 to be correct, as this would mean more than one statement is correct.\n        pass\n\n    # If statement 5 is correct (which says none of the statements above is correct), it is the only one that doesn't contradict itself or the premise.\n    # Therefore, statement 5 must be the correct statement.\n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500\n    total_days = 5\n    meters_per_day = total_road / total_days\n    return meters_per_day\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    numbers = [2/5, 1/4, 0.45, 0.35, 7/20]\n    numbers.sort()\n    middle_index = len(numbers) // 2\n    return numbers[middle_index]\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol\n    x = symbols('x')\n\n    # Create the equation based on the problem statement\n    equation = Eq((5 * x + 7) / 4, 8)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef count_ways_to_insert_comedy(sing_count, comed_count):\n    # comedy shows can be inserted in the positions between singing shows or at the start or end\n    # so there are (sing_count - 1) positions between singing shows and 2 extra positions at the extremities\n    positions_for_comedy = sing_count + 1\n    if comed_count > positions_for_comedy:\n        return 0\n    else:\n        # choosing comed_count positions from positions_for_comedy possible positions\n        return factorial(positions_for_comedy) // (factorial(comed_count) * factorial(positions_for_comedy - comed_count))\n    \ndef solution():\n    sing_count = 5\n    comed_count = 3\n    \n    # Calculate the number of ways to arrange the comedy shows such that they are not consecutive\n    non_consecutive_comedy_ways = count_ways_to_insert_comedy(sing_count, comed_count)\n    \n    # Now arrange the shows - multiply by factorial(sing_count) for the singing shows\n    # (since they can be in any order) and by factorial(comed_count) for the comedy shows.\n    total_ways = non_consecutive_comedy_ways * factorial(sing_count) * factorial(comed_count)\n    \n    return total_ways\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    # Let x be the original number\n    # Equation: (x / 2) - 9 = 12\n    \n    ans = (12 + 9) * 2\n    return ans\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # Calculate the contribution of each recurring decimal to the first 2100 digits\n    sum_digits = 0\n\n    # Calculate the contributions for each term in the series\n    for i in range(1, 7):\n        # Each term contributes its digit times the number of times it appears in the first 2100 digits\n        contribution = (i + 1) * (2100 // (i + 1))\n        sum_digits += contribution\n\n    # For the last partial term that may not complete its cycle\n    last_term_digit = 2100 % (2100 // 7 + 1) + 1\n    sum_digits += last_term_digit\n\n    return sum_digits\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for i in range(41, 60):  # Check all numbers between 40 and 60\n        if i % 4 == 2 and i % 6 == 2:  # The number should leave a remainder of 2 when divided by 4 and 6\n            return i  # Return the number that satisfies the conditions\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "from math import factorial\n\ndef solution():\n    # There are 8 seats, but we can fix one person to eliminate circular permutations equivalence\n    fixed_seats = 8 - 1\n    \n    # There are 6 people to arrange in these fixed seats\n    num_people = 6\n\n    # Calculate the arrangements\n    arrangements = factorial(fixed_seats) // factorial(fixed_seats - num_people)\n\n    return arrangements\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['4', '5', '7', '9']\n    even_digits = ['4']\n    smallest_even_number = float('inf')\n\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits:  # Ensuring the number is even\n            number = int(''.join(perm))\n            smallest_even_number = min(smallest_even_number, number)\n    \n    return smallest_even_number\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n\n    total_quarters = total_dollars * quarters_in_one_dollar\n\n    return int(total_quarters)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    # Calculate the total cost Theo spent\n    total_cost = 10 * 100 - 3.88 * 100  # Convert pounds to pence for the whole operation\n    \n    # Cost of chocolate bar in pence\n    chocolate_cost = 72\n    \n    # Remaining cost after buying the chocolate bar\n    remaining_cost = total_cost - chocolate_cost\n    \n    # Cost of one balloon in pence\n    balloon_cost = 20\n    \n    # Calculate the number of balloons by dividing the remaining cost by the cost of one balloon\n    num_balloons = remaining_cost // balloon_cost\n    \n    return int(num_balloons)\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    return lcm(3, 4, 10)\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let the number of steps of the escalator be x.\n\n    # When Peter walks at 1 step per second, he takes 10 steps.\n    # The escalator also moves a certain number of steps during these 10 seconds.\n    # Total steps = Peter's steps + Escalator's steps in 10 seconds.\n\n    # When Peter walks at 2 steps per second, he takes 16 steps.\n    # The escalator also moves a certain number of steps during these 8 seconds.\n    # Total steps = Peter's steps + Escalator's steps in 8 seconds.\n\n    # Since these two totals must be equal to x (the total steps of the escalator),\n    # we can form two equations:\n    # x = 10 + e * 10 (where e is the number of steps the escalator moves in one second)\n    # x = 16 + e * 8\n\n    # Now we need to find the value of x that satisfies both equations.\n\n    # Subtracting the second equation from the first gives us:\n    # 0 = 10 - 16 + 10*e - 8*e\n    # 6 = 2*e\n    # e = 3\n\n    # Now substitute back into either equation to find x:\n    # x = 10 + 10*3\n    e = 3\n    x = 10 + e * 10\n    return x\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percent = 45\n    total_distance = 2000\n    distance = (percent / 100) * total_distance\n    return distance\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    kayak_capacity = 4\n\n    kayaks_needed = (students + kayak_capacity - 1) // kayak_capacity\n\n    return kayaks_needed\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    x = symbols('x')\n    a = 4 * sqrt(3)\n    equation = Eq(3 * a, sqrt(3 * x))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    part1 = 4 + (2 * 13)\n    part2 = (4 + 2) * 13\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # if the youngest is x years old, the ages of the youngest three are x, x+1, x+2\n    # their sum is 3x + 3\n    # since their sum is 42, we have: 3x + 3 = 42\n    # solving for x, we get:\n    x = (42 - 3) // 3\n    \n    # now, the ages of the oldest three are x+4, x+5, x+6\n    # their sum is 3x + 15\n    # substituting the value of x we found:\n    sum_oldest_three = 3 * x + 15\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2/9\n    spent_money = total_money * spent_fraction\n    remaining_money = total_money - spent_money\n    \n    # Let the cost of 2 cupcakes be x\n    # Then the cost of 3 slices of pizza is also x\n    # Total cost for 5 cupcakes and 6 slices of pizza:\n    # 5/2 * x (for cupcakes) + 6/3 * x (for pizza) = spent_money\n    # Simplifying, we get (5/2 + 2) * x = spent_money\n    x = spent_money / (5/2 + 2)\n\n    # The greatest number of cupcakes that he could buy with the remaining money\n    # is then the integer division of the remaining money by the cost of each cupcake (x / 2)\n    cupcakes_cost = x / 2\n    max_cupcakes = remaining_money // cupcakes_cost\n\n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for number in range(74, 200):\n        if len(set(str(number))) == len(str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n    digits = [2, 3, 5]\n    digit_permutations = list(permutations(digits, 3))\n    return len(digit_permutations)\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    import math\n    \n    count = 0\n    for i in range(1, 10):\n        number = int('2' + '5' * i)\n        if math.isqrt(number) ** 2 == number:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    # Initial number of pieces of paper\n    initial_pieces = 10\n    \n    # Final number of pieces of paper\n    final_pieces = 16\n    \n    # Each piece cut into three parts generates two new pieces (3 - 1 = 2)\n    new_pieces_generated_per_cut = 2\n    \n    # Calculate the number of pieces that were cut\n    pieces_cut = (final_pieces - initial_pieces) / new_pieces_generated_per_cut\n    \n    # Return the number of pieces that were cut into three parts\n    return int(pieces_cut)\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    parts_per_worker_per_minute = (120 / 6) / 4\n    total_parts = parts_per_worker_per_minute * 3 * 10\n    return int(total_parts)\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors, is_square\n    \n    # Get all divisors of 2240\n    divs = divisors(2240)\n    \n    # Iterate over divisors to check for square number\n    for d in divs:\n        if is_square(2240 // d):\n            n = d\n            break\n\n    ans = n\n    return ans\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_apples = 8 * 10\n    rotten_apples = total_apples * 1/4\n    non_rotten_apples = total_apples - rotten_apples\n    \n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original_value = 160\n    new_value = 168\n    increase = new_value - original_value\n    percentage_increase = (increase / original_value) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = 0.70 * total_pupils\n    girls_swimming = 200\n\n    # Let's assume the total number of girls in the school is 'girls'\n    # It's given that 200 girls can swim, which means the remaining girls cannot swim\n    # Let's also assume the total number of boys in the school is 'boys', so boys = total_pupils - girls\n    # It is given that 40% of the boys cannot swim, which means 60% of the boys can swim\n    \n    # The total number of pupils who can swim is the sum of girls who can swim and 60% of the boys\n    # swimming_pupils = girls_swimming + 0.60 * (total_pupils - girls)\n    # We can rearrange the equation to solve for 'girls':\n    # girls = (swimming_pupils - girls_swimming) / 0.60\n\n    girls = (swimming_pupils - girls_swimming) / 0.60\n    return int(girls)\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice_sack, oatmeal_packet = symbols('rice_sack oatmeal_packet')\n\n    equation1 = Eq(3 * rice_sack + 3 * oatmeal_packet, 36)\n    equation2 = Eq(rice_sack, 2 * oatmeal_packet)\n\n    solutions = solve((equation1, equation2), (rice_sack, oatmeal_packet))\n\n    return solutions[rice_sack]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * (6*x + 1) - 2*x, 89)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    return sum_of_cubes\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n    return total_percentage_discount\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    def count_ways(n):\n        count = 0\n        for i in range(1, n // 2 + 1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    ans = count_ways(200) - 1  # subtracting 1 because dividing 200 by 200 is not considered\n    return ans\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of 10% sugar water needed\n    x = symbols('x')\n    \n    # Equation based on mass of sugar: 4 kg * 30% + x kg * 10% = (4 kg + x kg) * 26%\n    equation = Eq(4 * 0.3 + x * 0.1, (4 + x) * 0.26)\n    \n    # Solve for x\n    amount = solve(equation, x)\n    \n    return amount[0]\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def operation(a, b):\n    return a * b - a - b + 1\n\ndef solution():\n    return operation(operation(2, 3), 4)\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let the mass of the jar be j and the mass of one chocolate be c.\n    # From the first scenario, we have j + 5c = 185\n    # From the second scenario, we have j + 17c = 317\n    \n    # To find the mass of j and c, we need to solve these two linear equations\n    \n    # Setting up the equations\n    # j + 5c = 185 => j = 185 - 5c\n    # Substituting j in the second equation\n    # (185 - 5c) + 17c = 317 => 12c = 317 - 185 => 12c = 132 => c = 132 / 12\n    \n    # Calculate the mass of one chocolate\n    c = 132 / 12\n    \n    # Calculate the mass of the jar using the first scenario\n    j = 185 - 5 * c\n    \n    # Calculate the mass of the jar with 10 chocolates\n    total_mass_with_10_chocolates = j + 10 * c\n    \n    return total_mass_with_10_chocolates\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    lana, mark = symbols('lana mark')\n    total_sweets = 674\n\n    equation1 = Eq(lana - lana / 3 + mark - 34, total_sweets)\n    equation2 = Eq(lana / 3 * 2, mark - 34)\n\n    solutions = solve((equation1, equation2), (lana, mark))\n    lana_sweets = solutions[lana]\n    mark_sweets = solutions[mark]\n\n    return lana_sweets - mark_sweets\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, Eq(dorothy, 96), equation2), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # Total number of wheat 'n' is given to be 116.\n    # Since wheat is planted at every corner, we need to subtract these 4 corner plants to get the total plants along the sides.\n    n = 116 - 4\n    \n    # The field is rectangular, so there are two pairs of equal sides: 144m and 204m.\n    # Since the wheat is evenly planted, the number of intervals 'i' on each side would be (number of wheats on that side) - 1.\n    # Let 'x' be the number of intervals on the shorter side (144m) and 'y' be the number of intervals on the longer side (204m).\n    # Then 'x' + 'y' (not the corners) should be equal to the total number of intervals 'n' we calculated above.\n    # The total perimeter 'p' is 2*(144 + 204).\n    p = 2 * (144 + 204)\n\n    # We can represent the total number of intervals as the sum of (number of intervals on shorter side - 1) and \n    # (number of intervals on longer side - 1), then multiply by 2 since the field is symmetric.\n    # Then solve the system of equations:\n    # 2x + 2y + 4 = n + 4\n    # (144 - 1x) + (204 - 1y) = p/n\n    # x + y = n\n    #\n    # Let's express x in terms of y using the last equation: x = n - y.\n    # We replace x in the second equation and solve for y.\n    \n    for y in range(1, n//2 + 1):\n        x = n - y\n        distance_shorter_side = 144 / (x + 1)\n        distance_longer_side = 204 / (y + 1)\n        \n        # Check if the distances match. When they do, we've found the correct distribution of intervals.\n        if distance_shorter_side == distance_longer_side:\n            return distance_shorter_side\n\n# Call the function and store the answer\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    # if one cat catches one fish in 10 minutes,\n    # five cats will also catch five fish in 10 minutes,\n    # because they work simultaneously.\n    ans = 10\n    return ans\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    # Let the total days of holiday be 'total_days'\n    # According to the question:\n    # After working in the music store for half the time,\n    # half the time is left: total_days / 2\n    # After reading and relaxing for half of the remaining time,\n    # and spending 4 days at a friend's house, he had 2 weeks left.\n    # So (total_days / 2) / 2 - 4 = 14 (2 weeks in days)\n    # This simplifies to total_days / 4 - 4 = 14\n    # Solve for 'total_days'\n\n    from sympy import symbols, Eq, solve\n\n    total_days = symbols('total_days')\n    equation = Eq(total_days / 4 - 4, 14)\n    solutions = solve(equation, total_days)\n    return solutions[0]\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    initial_number = (result / 9) * 4 - 3\n    return initial_number\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, pineapple = symbols('watermelon pineapple')\n    \n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n    \n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n    \n    return solutions[watermelon]\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = total_bracelets * 2 / 7\n    remainder_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = remainder_bracelets * 3 / 5\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    bracelets_needed = total_bracelets - bracelets_made\n\n    return int(bracelets_needed)\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    length = 144\n    width = 204\n    total_wheat = 116\n\n    # The corners are included in both the length and the width count,\n    # so we need to subtract them to avoid double counting.\n    # There are 4 corners, hence we subtract 4 from the total number of wheat.\n    # Then we divide by 2 because the remaining wheat are split between the length and the width.\n    num_wheat_per_side = (total_wheat - 4) // 2\n\n    # Now we split them between length and width.\n    # Since the corners are included there's one less space than the number of wheat on each side.\n    distance_length = length / (num_wheat_per_side // 2)\n    distance_width = width / (num_wheat_per_side // 2)\n\n    # The distance between each wheat should be the same for both length and width.\n    # We can take either distance since they should be equal.\n    # We will validate this assumption to make sure we are correct.\n    assert distance_length == distance_width\n\n    return distance_length\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations('123456789', 4):\n        if '2' in perm or '0' in perm:\n            continue\n        a, c, e, f = perm\n        \n        num1 = int(f\"5{a}2{c}0{e}f\")\n        num2 = int(f\"{e}{f}a2{c}0\")\n\n        if 5 * num1 == 6 * num2:\n            return int(f\"{a}{c}{e}{f}\")\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    return (3/8) * 48\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    # Ellie's rate of interviewing per week\n    ellie_rate = 40\n\n    # Total number of interviews to complete\n    total_interviews = 200\n\n    # Total time for Ellie and Gloria to complete the work together\n    combined_time_weeks = 4\n\n    # Total number of interviews completed by Ellie and Gloria together per week\n    combined_rate = total_interviews / combined_time_weeks\n\n    # Gloria's rate of interviewing per week\n    gloria_rate = combined_rate - ellie_rate\n\n    # Time it would take Gloria to finish the interviews by herself\n    gloria_time_weeks = total_interviews / gloria_rate\n\n    return gloria_time_weeks\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    rate_per_minute = 15  # in milliliters\n    minutes_in_hour = 60\n    hours = 2\n    milliliters_to_liters = 1 / 1000\n\n    water_leaked = rate_per_minute * minutes_in_hour * hours * milliliters_to_liters\n\n    return water_leaked\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    rice_in_A = 15 * 0.40\n    rice_in_mixture = total_weight * 0.28\n    \n    # Let's denote rice_in_B as x\n    # rice_in_A + x = rice_in_mixture\n    # rice_in_B = rice_in_mixture - rice_in_A\n    rice_in_B = rice_in_mixture - rice_in_A\n\n    # Now, find the percent of rice in dogfood B:\n    rice_percent_in_B = (rice_in_B / 60) * 100\n\n    return rice_percent_in_B\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    for largest in range(51, 1, -1):\n        average_rest_three = 51 - largest\n        smallest = 39 - average_rest_three\n        if smallest < 1 or smallest >= largest:\n            continue\n\n        # Checks if the smallest and largest can actually form\n        # a set of 4 distinct integers with the required properties\n        sum_rest_three = average_rest_three * 3\n        middle_two_sum = sum_rest_three - smallest\n        for second_largest in range(largest-1, 1, -1):\n            third_largest = middle_two_sum - second_largest\n            if smallest < third_largest < second_largest < largest:\n                return largest\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, pen = symbols('book pen')\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n    \n    solutions = solve((equation1, equation2), (book, pen))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_received = (2 * 10) + (5 * 5) + (4 * 0.20)\n    money_spent = 100 - total_received\n    return money_spent\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Barbara's speed is 60 m/min, Catherine's is 45 m/min.\n    # Let's denote the total distance to the shopping mall as 'd'.\n    # Since they start at the same time and Barbara has reached the shopping mall,\n    # the time 't' they both walked is the same.\n\n    # From Barbara's perspective:\n    # distance (d) = speed (60 m/min) * time (t)\n    # hence, t = d / 60\n    \n    # From Catherine's perspective:\n    # d - 60 (since she still has 60m to go) = speed (45 m/min) * time (t)\n    # We'll replace the time 't' with d/60 from our first equation.\n    # So, d - 60 = 45 * (d / 60)\n    # Simplifying the equation, we get:\n    # d - 60 = (3/4) * d\n    # (1/4) * d = 60\n    # Therefore, d = 60 * 4\n    \n    d = 60 * 4\n    return d\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n    \n    solutions = solve(equation, x)\n    \n    return solutions[x]\n    \nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3\n    total_time = 18\n    num_plates = total_time // time_per_plate\n\n    return num_plates\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    total_money = 200\n    ratio_A_to_B = Eq(A/B, 4/3)\n    more_than_C = Eq(A, C + 20)\n    total_sum = Eq(A + B + C, total_money)\n\n    solutions = solve((ratio_A_to_B, more_than_C, total_sum), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nini, dad = symbols('nini dad')\n\n    equation1 = Eq(dad, nini + 25)\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n\n    solutions = solve((equation1, equation2), (nini, dad))\n\n    return solutions[nini]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    students = 50\n    facing_teacher = students\n\n    multiples_of_4 = {i for i in range(1, students + 1) if i % 4 == 0}\n    multiples_of_6 = {i for i in range(1, students + 1) if i % 6 == 0}\n\n    # Turning backwards once\n    facing_teacher -= len(multiples_of_4)\n\n    # Turning backwards if multiple of 6, but considering they might have turned already\n    for i in multiples_of_6:\n        if i not in multiples_of_4:  # If they haven't turned already\n            facing_teacher -= 1\n        else:  # If they have turned already, now they are facing the teacher again\n            facing_teacher += 1\n\n    return facing_teacher\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    return 471471471471 // 157157157157\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    sold_first_day = total_pears * 2 / 5\n    remaining_pears = total_pears - sold_first_day\n    sold_second_day = remaining_pears * 7 / 9\n\n    return int(sold_second_day)\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    ans = 2536 // 4\n    return ans\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    fraction = 3 / 4\n    percentage = 30 / 100\n    whole_number = 120\n\n    result = fraction * percentage * whole_number\n\n    return result\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n    \n    ways_to_pick = boys * girls\n    \n    return ways_to_pick\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(10, 100):\n        if isprime(num):\n            reversed_num = int(str(num)[::-1])\n            if num != reversed_num and isprime(reversed_num):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    apples = 29\n    # If at least one student gets at least 3 apples, we can first give 3 apples to one student.\n    remaining_apples = apples - 3\n    # Now, we need to distribute the remaining apples to the students, with each getting at least 1 apple.\n    # Using the pigeonhole principle, if we have n students (including the one who got 3 apples),\n    # we need to distribute the remaining 26 apples such that everyone gets at least 1.\n    # To maximize the number of students (size of class), we give 1 apple to each student.\n    # So, if k is the total number of students, 1 apple per student is equivalent to k pigeons into k pigeonholes.\n    # Hence, the number of students k is the number of remaining_apples + 1 (for the student who received 3 already).\n    class_size = remaining_apples + 1\n    return class_size\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original = 140\n    new = 87.5\n    percent_change = ((new - original) / original) * 100\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of green balls and b be the number of blue balls\n    g, b = symbols('g b')\n\n    # Equation 1: Total number of green and blue balls\n    equation1 = Eq(g + b, 140)\n\n    # Equation 2: After removing balls, equal number of green and blue balls\n    equation2 = Eq(g - 28, b - (2/5) * b)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Since the alcoholic goes to three bars at random,\n    # and he is not found in two of them, there's a\n    # 100% chance he is in the third bar.\n    return 1\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n\n    equation1 = Eq(eliot, 2 * cousin)\n    equation2 = Eq(eliot + 4, 16)\n\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    cousin_age_then = solutions[cousin] + 4\n\n    return cousin_age_then\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    ans = 5183 - 594\n    return ans\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    number1 = 387\n    number2 = 729\n    ans = (number1 + number2) / 2\n    return ans\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    total_caught_first = 100\n    total_caught_second = 100\n    marked_second = 16\n\n    estimated_total_fish = (total_caught_first * total_caught_second) / marked_second\n\n    return estimated_total_fish\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    years_difference = 12 - elaine_current_age\n    mandy_age_when_elaine_is_12 = mandy_current_age + years_difference\n\n    return mandy_age_when_elaine_is_12\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    ans = 324 + 132\n    return ans\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    numerator = 1 + 3/99 + 3 + 3/33 + 9 + 3/11\n    denominator = 1 + 1/99 + 3 + 1/33 + 9 + 1/11\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the distance (in meters) Nancy walks.\n    nancy = symbols('nancy')\n\n    # Randy will have walked (10 + nancy) when they meet.\n    randy_walk = nancy + 10\n\n    # For every 2 meters Nancy walks, Randy walks 3 meters.\n    equation = Eq(2*nancy, 3*randy_walk)\n\n    # Solve for Nancy's walking distance.\n    distance_nancy = solve(equation, nancy)\n\n    # Calculate total distance.\n    total_distance = 2 * distance_nancy[0] + 10\n\n    return total_distance\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Let 0.201414141... be 'y'\n    y = 0.201414141414\n    \n    # Consider 100y to shift two decimal positions to left: 100y = 20.141414...\n    # Take away y from 100y, we get 99y which removes the repeating pattern\n    # 100y - y = 99y = 20.141414... - 0.201414141414...\n    # 99y = 20.14 - 0.20 = 19.94\n    # So y = 19.94 / 99\n    \n    y = 19.94 / 99\n\n    # Multiply by 9900 to get x\n    x = y * 9900\n\n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n\n    equation1 = Eq(ali + 5, (bronson + charlie) / 2)\n    equation2 = Eq(bronson, 2 * ali)\n\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    \n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    \n    # In 10 years' time, their total age is 53 years old\n    equation2 = Eq(alice + sister + 20, 53)  # adding 10 years to each of their ages\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    even_digits = [0, 2, 4, 6, 8]\n    count = 0\n    for perm in permutations(digits, 3):\n        if sum(perm) == 8 and perm[2] in even_digits and perm[0] != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for num in range(100000, 1000000):  # Range of six-digit numbers\n        if num % 10 == 2:  # Checks if the last digit is 2\n            new_num = int(str(num // 10).rjust(5, '2'))  # Place 2 at the start and remove the last digit\n            if new_num == num // 3:  # Check if the new number is one-third of the original\n                return num  # Original number\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    passed_only_first = passed_first_exam - (total_students - failed_second_exam - passed_second_failed_first)\n\n    return passed_only_first\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    number = solve_congruence(*congruences)\n\n    # Filter the solution to ensure it is between 500 and 1000\n    ans = [num for num in number if 500 <= num < 1000]\n    \n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n    bars_left = total_bars % people\n    return bars_left\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    sum_of_numbers = (a + b + c) * (111)\n    return sum_of_numbers\n\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):  # since 'a' is the tens digit it cannot be 0\n        for b in range(10):  # 'b' is the ones digit and can be from 0 to 9\n            ab = a * 10 + b\n            ba = b * 10 + a\n            product = ab * ba\n            if product % 100 == 0:  # checking if the ones and tens digits are both 0\n                return ab\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_per_hour = 78 / 6.5\n    hours_needed = 300 / pay_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    large_sack, small_sack = symbols('large_sack small_sack')\n    \n    # 20% more potatoes means the large sack has 1.2 times potatoes in small sack\n    equation1 = Eq(large_sack, 1.2 * small_sack)\n    \n    # Together they hold 77 potatoes\n    equation2 = Eq(large_sack + small_sack, 77)\n    \n    answers = solve((equation1, equation2), (large_sack, small_sack))\n    \n    return answers[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # Mrs Lee sold half of the apples and 35 oranges\n    equation1 = Eq(oranges + apples, 125)\n    # In the end, she had an equal number of oranges and apples left\n    equation2 = Eq(oranges - 35, apples / 2)\n\n    solutions = solve((equation1, equation2), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5 / 9, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome is 10001\n    least_5_digit_palindrome = 10001\n\n    # The greatest 6-digit palindrome is 999999\n    greatest_6_digit_palindrome = 999999\n\n    # Calculate the difference\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    import math\n    total_students = 35\n    capacity_per_cabin = 6\n\n    min_cabins = math.ceil(total_students / capacity_per_cabin)\n\n    return min_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    count = 0\n    for i in range(1, 59):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    num_digits = 0\n    for i in range(1200, 0, -1):\n        num_digits += len(str(i))\n        if num_digits >= 2011:\n            return int(str(i)[-(num_digits - 2011) - 1])\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of coins as 'x'\n    x = symbols('x')\n\n    # Equations based on the problem statement\n    equation1 = Eq(1/4 * x + 2, 1/3 * x)\n\n    # Solve the equation for 'x'\n    solutions = solve(equation1, x)\n\n    # Get the solution for the total number of coins\n    return solutions[0]\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_from_left = 14\n    books_on_right = 6\n    total_books = position_from_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    sum_of_multiples = sum(range(5, 51, 5))\n    return sum_of_multiples\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # km per minute\n    speed_planet2 = 40  # km per minute\n    time_before_collision = 5  # minutes\n\n    # Calculate the distance each planet travelled in 5 minutes\n    distance_travelled_planet1 = speed_planet1 * time_before_collision\n    distance_travelled_planet2 = speed_planet2 * time_before_collision\n\n    # The total distance between the planets 5 minutes ago is the sum of the distances each travelled\n    total_distance = distance_travelled_planet1 + distance_travelled_planet2\n\n    return total_distance\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let the number of cars be c and the number of motorbikes be m.\n    # Each car has 4 tyres and each motorbike has 2 tyres.\n    # We have two equations:\n    # c + m = 140 (total number of vehicles)\n    # 4c + 2m = 490 (total number of tyres)\n    \n    # We can solve the system of equations by expression substitution or elimination.\n    # From the first equation, we get m = 140 - c.\n    # Substituting m in the second equation, we get 4c + 2(140 - c) = 490.\n    \n    # Solving for c:\n    # 4c + 280 - 2c = 490\n    # 2c = 490 - 280\n    # 2c = 210\n    c = 210 // 2\n    \n    return c\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    tens_place_options = 5  # 1, 2, 3, 4, 5 (0 is excluded for tens place)\n    ones_place_options = 6  # 0, 1, 2, 3, 4, 5\n\n    total_combinations = tens_place_options * ones_place_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_amount = 64\n    discount_rate = 0.20\n    original_price = paid_amount / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_litres = 36\n    ratio_apple_to_total = 4 / (4 + 5)\n    apple_juice_litres = total_litres * ratio_apple_to_total\n    return apple_juice_litres\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown number and remainders\n    n, a = symbols('n a')\n\n    # Set up the equations based on the given conditions\n    eq1 = Eq(190 % n, a)\n    eq2 = Eq(137 % n, a + 4)\n    eq3 = Eq(101 % n, a + 6)\n\n    # Solve the system of equations to find the values of n and a\n    sol = solve((eq1, eq2, eq3), (n, a))\n\n    # Find the remainder when 299 is divided by the number n\n    for possible_solution in sol:\n        if possible_solution[0].is_real and possible_solution[0] > 0:\n            n_value = possible_solution[0]\n            break\n\n    remainder = 299 % n_value\n\n    return int(remainder)\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    day_climb = 3\n    night_slip = 1\n    net_climb = day_climb - night_slip\n    burrow_height = 11\n    days = 0\n    \n    distance_climbed = 0\n    while True:\n        days += 1\n        distance_climbed += day_climb\n        if distance_climbed >= burrow_height:\n            break\n        distance_climbed -= night_slip\n    \n    return days\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_kilograms = 960\n    per_box_kilograms = 8\n    num_boxes = total_kilograms // per_box_kilograms\n    return num_boxes\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    ans = 0.2 * 5.39\n    return ans\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    num = 1\n    while True:\n        if num % 2 == 1 and num % 13 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    result = (9/5) * (25 / 100) + (1/4) * 2.2 - 0.25\n    return result\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    doubled_number = result - 12\n    original_number = doubled_number / 2\n    return original_number\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    students_per_class = 100\n    classes = 5\n    donation_per_student = 5.78\n\n    total_donation = students_per_class * classes * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    from sympy import isprime\n\n    ans = 0\n    for x in range(2, 200):    # Begin from 2 as it's the smallest prime number\n        if isprime(x):\n            y = (200 - x) / (x - 1)\n            if y.is_integer() and isprime(y) and x != y:  # Check the conditions\n                ans = max(ans, int(x + y))\n\n    return ans\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    # Total digits available are 6.\n    total_digits = factorial(6)\n    # There are repetitions for 2 and 3.\n    # We have 2 twos, hence we divide by factorial(2).\n    # We have 2 threes, hence we divide by factorial(2).\n    count_repetitions = factorial(2) * factorial(2)\n    # Compute the number of distinct permutations\n    distinct_permutations = total_digits // count_repetitions\n    return distinct_permutations\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    total_spent = 2\n    fraction_of_total = 1/4\n    initial_amount = total_spent / fraction_of_total\n    return initial_amount\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    teams = 8\n    # Each team plays against all the other teams once\n    total_rounds = teams * (teams - 1) // 2\n\n    return total_rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    from fractions import Fraction\n\n    result = (Fraction(31, 6) + Fraction(31, 5)) / (Fraction(1, 6) + Fraction(1, 5))\n\n    ans = result.simplify()\n    return ans\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n    sleepy_height = 80\n\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sneezey, dopey)\n    equation4 = Eq(bashful, dopey)\n    equation5 = Eq(grumpy, dopey)\n    equation6 = Eq(doc + sleepy, dopey + sneezy)\n    equation7 = Eq(sleepy, sleepy_height)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), \n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    total_height = sum(solutions.values())\n    return total_height\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 5, 9]\n    all_permutations = sorted([''.join(map(str, p)) for p in permutations(digits)])\n    fifth_number = all_permutations[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    days_for_1000m = 5\n    length_to_construct = 2600\n\n    days_per_meter = days_for_1000m / 1000\n    days_for_2600m = days_per_meter * length_to_construct\n\n    return days_for_2600m\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance_in_5_hours = 250\n    time_in_5_hours = 5\n    time_in_3_hours = 3\n\n    speed_per_hour = distance_in_5_hours / time_in_5_hours\n    distance_in_3_hours = speed_per_hour * time_in_3_hours\n\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees / 4\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for number in range(10, 60):  # 2-digit number smaller than 60\n        if number % 8 == 3 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    distance_apart = 5\n    num_trees = 30\n    length_road = (num_trees - 1) * distance_apart\n    return length_road\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    first_term = 12\n    last_term = 90\n    num_terms = last_term - first_term + 1\n\n    # If the number of terms is even, the sum is the same as the parity of the terms.\n    # If the number of terms is odd, the sum flips the parity of the individual terms.\n    # In this case we have 90 - 12 + 1 = 79 which is odd.\n    # Since our sequence starts with an even number and has an odd number of terms,\n    # the sum will be odd.\n\n    is_sum_odd = (num_terms % 2 == 1) and (first_term % 2 == 0)\n    \n    return 'odd' if is_sum_odd else 'even'\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    # Let the numbers on the hats be a, b, and c.\n    # According to the problem, we have:\n    # a + b = 11\n    # a + c = 17\n    # b + c = 22\n    \n    # Solving the system of equations for a, b, and c:\n    a_plus_b = 11\n    a_plus_c = 17\n    b_plus_c = 22\n    \n    # Summing all three equations, we get 2*(a + b + c) = 11 + 17 + 22\n    total_sum = a_plus_b + a_plus_c + b_plus_c\n    \n    # Divide by 2 to find the sum of a, b, and c\n    a_b_c_sum = total_sum / 2\n    \n    # Calculate individual numbers using the sum and the given totals\n    a = a_b_c_sum - b_plus_c\n    b = a_b_c_sum - a_plus_c\n    c = a_b_c_sum - a_plus_b\n    \n    # The largest number on a hat is max(a, b, c)\n    return max(a, b, c)\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    result = 1.5 * 1.3333333333333333 * 1.25 * 1.2 * 1.1666666666666667 * 1.1428571428571428 * 1.125 * 1.1111111111111112\n    return result\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for i in range(1, 21):\n        if isprime(i):\n            if isprime(i + 6) or isprime(i - 6):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 346):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20  # Students plus teachers\n    buses_needed = -(-total_people // 25)  # Division rounded up\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_prize_money = symbols('total_prize_money')\n    equation = Eq((1/5 + 1/15) * total_prize_money, 360)\n\n    solution_dict = solve(equation, total_prize_money)\n\n    return solution_dict[total_prize_money]\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # Convert minutes to hours for speed\n    time_first = 30 / 60\n    time_second = 30 / 60\n    time_third = 30 / 60\n    \n    # Distance covered in each time frame\n    dist_first = x * time_first\n    dist_second = (x - 20) * time_second\n    dist_third = (x + 10) * time_third\n    \n    # Equation for total distance\n    equation = Eq(dist_first + dist_second + dist_third, 70)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # There are 5 positions left to fill after coach and captain (7 - 2)\n    # The remaining players can be arranged in 5! ways\n    player_arrangements = factorial(5)\n\n    # The captain can stand either on the left or the right side of the coach\n    # so there are 2 possible positions for the captain\n    captain_positions = 2\n\n    # Multiply the two possibilities together to get the total number of lineups\n    total_lineups = player_arrangements * captain_positions\n\n    return total_lineups\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    total_students = 0\n    diff_boys_girls = 20\n    size = 1  # starting with the smallest possible square size\n\n    # Increment the size of the square until the condition is met.\n    while True:\n        boys = size**2 - (size - 2)**2 if size > 1 else 1\n        girls = (size - 2)**2 - (size - 4)**2 if size > 3 else 0\n        difference = boys - girls\n\n        # Check if the current difference is the one we are looking for.\n        if difference == diff_boys_girls:\n            total_students = size**2\n            break\n\n        size += 2  # Increment the size by 2 to maintain alternating boys and girls.\n\n    return total_students\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n    equation1 = Eq(3 * penguins + 25, 6 * penguins + 1)\n\n    total_penguins = solve(equation1, penguins)\n\n    return total_penguins[0]\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    # Initialize sum\n    sum_terms = 0\n    \n    # Calculate sum of the first 30 terms\n    for i in range(1, 30+1):\n        # The term value corresponds to the integer part of the (i + 1) divided by 2 for the ith term\n        sum_terms += (i + 1) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = (25 / 100) * 20 + (1 / 5) * 30 + (2 / 3) * 18\n    return ans\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina's age on 10th May 2005\n    gina_age_2005 = 50\n\n    # James' age on 10th May 1997\n    james_age_1997 = 20\n\n    # Calculate the year when James was born\n    james_birth_year = 1997 - james_age_1997\n\n    # Calculate the year when Gina was the same age\n    gina_birth_year = 2005 - gina_age_2005\n\n    # Calculate Gina's age when James was born\n    gina_age_when_james_born = james_birth_year - gina_birth_year\n\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n\n    votes_left = total_votes - (alice_votes + betty_votes + cindy_votes)\n    max_other_votes = max(alice_votes, betty_votes)\n    \n    # To ensure Cindy wins, she needs one more vote than the current maximum.\n    votes_needed_for_cindy = max_other_votes + 1 - cindy_votes\n\n    # If there are not enough votes left for Cindy to surpass the maximum by one,\n    # she will need enough votes out of the remaining votes to ensure victory.\n    if votes_needed_for_cindy <= votes_left:\n        return votes_needed_for_cindy\n    else:\n        return \"Not enough votes left to ensure Cindy wins.\"\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "from fractions import Fraction\n\ndef solution():\n    # Evaluate the first part: 7 / -3.333... / cube_root(-0.027)\n    first_numerator = Fraction(7, 1)\n    first_denominator = Fraction(-10, 3)  # -3.333... is -10/3\n    first_cube_root = Fraction(-27, 1000) ** Fraction(1, 3)  # The cube root of -0.027\n    first_part = (first_numerator / first_denominator) / first_cube_root\n\n    # Evaluate the second part: 2^3 / (4^2 / (0.125 * [1.8 - (0.2 * 7)]))\n    second_numerator_power = Fraction(2 ** 3, 1)\n    second_denominator_power = Fraction(4 ** 2, 1)\n    second_inner_bracket = Fraction(18, 10) - (Fraction(2, 10) * 7)\n    second_denominator = Fraction(125, 1000) * second_inner_bracket  # 0.125 converted to fraction\n    second_part = second_numerator_power / second_denominator_power / second_denominator\n\n    # Evaluate the last part: [0.1 / (0.1(register_4 2 8 5 7)) + (2 * 0.3)]\n    third_numerator = Fraction(1, 10)\n    third_denominator = Fraction(1, 7)  # 0.142857 recurring is 1/7\n    third_addition = 2 * Fraction(3, 10)\n    third_part = (third_numerator / third_denominator) + third_addition\n\n    # Final result being the sum of all parts\n    ans = first_part + second_part - third_part\n    return ans.numerator / ans.denominator\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, solve\n    \n    sales = symbols('sales')\n    \n    base_salary = 2500\n    salary = 3300\n    commission_1_rate = 0.02\n    commission_2_rate = 0.05\n    commission_1_sales = 25000\n    \n    # salary equation considering two commission rates based on sales\n    equation = (base_salary + commission_1_rate * min(sales, commission_1_sales) +\n                commission_2_rate * max(0, sales - commission_1_sales) - salary)\n    \n    # Solve for sales\n    sales_july = solve(equation, sales)\n    \n    return max(sales_july)  # we're interested in the positive value\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote R as the number of Ryan's marbles and A as the number of Audrey's marbles\n    R, A = symbols('R A')\n\n    # Original ratio 2:7\n    equation1 = Eq(R/A, 2/7)\n\n    # New ratio after changes 1:3\n    equation2 = Eq((R + 20)/(A - 80), 1/3)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (R, A))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_six_players = 6 * 150\n    average_height_four_players = 150 - 2\n    total_height_four_players = 4 * average_height_four_players\n\n    total_height_other_two_players = total_height_six_players - total_height_four_players\n    average_height_other_two_players = total_height_other_two_players / 2\n\n    return average_height_other_two_players\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt\n    p_first = 0.4\n    # Probability of failing the first attempt and passing on the second\n    p_second = 0.6 * 0.5\n    # Probability of failing the first two attempts and passing on the third\n    p_third = 0.6 * 0.5 * 0.3\n\n    # Total probability of passing before the fourth attempt\n    total_probability = p_first + p_second + p_third\n\n    return total_probability\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    total_digits = 1014\n    digits = 0\n    page = 0\n    \n    while total_digits > digits:\n        page += 1\n        digits += len(str(page))\n\n    return page\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n    combinations = num_fruits * num_vegetables\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_ways = ways_A_to_B * ways_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    number_of_terms = 30\n\n    # Using the formula for the sum of an arithmetic series: n/2 * (2a + (n - 1)d)\n    sum_of_sequence = number_of_terms / 2 * (2 * first_term + (number_of_terms - 1) * common_difference)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    rate_per_hour = 50\n\n    time_needed = total_pieces / rate_per_hour\n\n    return time_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    n = 15\n    factor_2 = 0\n    factor_5 = 0\n\n    for i in range(1, n + 1):\n        while i % 2 == 0:\n            factor_2 += 1\n            i /= 2\n        while i % 5 == 0:\n            factor_5 += 1\n            i /= 5\n\n    ans = min(factor_2, factor_5)\n    return ans\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    age = symbols('age')\n    equation = Eq((age / 4) + 32, age - 22)\n    solution = solve(equation, age)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    # Initialize the difference between boys and girls\n    difference = 44\n    \n    # Start searching for the square size incrementally\n    for total in range(difference, 100000):\n        # Check if sqrt(total) is an integer, which would mean it's a perfect square\n        root = int(total**0.5)\n        if root**2 == total:\n            # Calculate the number of boys\n            boys = (root // 2) * ((root // 2) + 1) * 4\n            if root % 2 == 1:\n                boys += root + 1\n            \n            # Calculate girls by subtracting boys from total and the difference\n            girls = total - boys\n            \n            # Check if the difference matches the problem statement\n            if boys - girls == difference:\n                return total\n    \n    # Return None if no solution found within the reasonable search space\n    return None\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_distance = 18\n    daily_climb = 7\n    sixth_day_climb = 3\n    days = 6\n    # Calculate the total distance climbed until the end of the 5th day\n    distance_climbed_by_day_5 = (days - 1) * daily_climb\n    # Calculate the distance remaining on the 6th day before climbing\n    remaining_distance_sixth_day = total_distance - distance_climbed_by_day_5\n    # Calculate the night slide based on the remaining distance and the 6th day climb\n    night_slide = remaining_distance_sixth_day - sixth_day_climb\n    \n    return night_slide\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    # The number of apples that the second student can get at most\n    # can be found by minimizing the number of apples the other three get.\n    # Since each student must get a positive integer number of apples \n    # and different number of apples, we start by giving 1 apple to the first student,\n    # 2 apples to the third student, and 3 apples to the fourth student.\n    # Then the remaining apples can be given to the second student.\n    \n    # Total number of apples\n    total_apples = 48\n    \n    # Minimum apples for the first, third, and fourth students\n    min_apples_others = 1 + 2 + 3\n    \n    # The most number of apples the second student can get\n    max_apples_second_student = total_apples - min_apples_others\n    \n    return max_apples_second_student\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    fastest, sec_fastest, third_fastest, slowest = 1, 2, 5, 10\n    total_time = 0\n    # Strategy: send the fastest (Eddie) with each person and come back\n    # Then send the two slowest together and send the fastest back again\n    total_time += fastest + slowest + fastest + third_fastest + fastest + sec_fastest\n    return total_time\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum((2 * i - 1) ** 2 for i in range(1, 45))\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    import math\n    num_students = 4\n    return math.factorial(num_students)\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let the width be w and the original length be l\n    w, l = symbols('w l')\n    # the modified length is l + 12\n    # perimeter of a rectangle is 2*(width + length)\n    # the modified perimeter is 38\n    equation = Eq(2 * (w + (l + 12)), 38)\n\n    # solve for l in terms of w\n    l_expr = solve(equation, l)[0]\n\n    # the perimeter of the original rectangle is 2 * (w + l)\n    original_perimeter = 2 * (w + l_expr)\n\n    # Using the expression for l, we substitute l back into the original\n    # perimeter formula to express it only in terms of w\n    # Since we only have w as a variable, we can generate an equation to find the value of w\n    equation_for_w = Eq(original_perimeter, 2 * (w + (l_expr.subs(l, l_expr))))\n    \n    # solve for w\n    solutions = solve(equation_for_w, w)\n\n    # There will be only one solution that makes sense (positive width)\n    w_value = next(s for s in solutions if s > 0)\n    \n    # Now we can find the original length by plugging in the width's value\n    l_value = l_expr.subs(w, w_value)\n    \n    # Finally, calculate the perimeter of the original rectangle\n    original_perimeter = 2 * (w_value + l_value)\n    \n    return original_perimeter.evalf()\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    ways = 0\n    for i in range(1, 8):\n        if i < 8 - i:\n            ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # There are three types of food: chocolate (C), peaches (P), and strawberries (S)\n    # Since Jenny eats chocolate on the first day, we have only two options for the second day: P or S\n    # For each choice on the second day, there are again two options for the third day, not repeating the second day's choice\n    # Therefore, for each second day choice, there are 2 ways for the third day\n    \n    ways_for_second_day = 2  # P or S\n    ways_for_third_day = 2  # The remaining two options excluding the second day's choice\n    \n    total_ways = ways_for_second_day * ways_for_third_day\n    \n    return total_ways\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    # There are 7 people to seat and 8 seats, but since the table is circular,\n    # we fix one person to remove rotational symmetry and seat the remaining 6.\n    # This is essentially arranging 6 people in a line, which is a permutation.\n    \n    ans = factorial(6)\n    \n    return ans\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    ans = 50 / (5/3)\n    return ans\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    spent_on_tv = 5/9 * salary\n    remaining = 4/9 * salary\n    spent_on_table = 3/4 * remaining\n    left_money = 160\n\n    equation = Eq(remaining - spent_on_table, left_money)\n\n    sol = solve(equation, salary)\n    cost_of_tv = spent_on_tv.subs(salary, sol[0])\n\n    return cost_of_tv\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6  # From Monday to Saturday\n\n    total_weekly_earnings = average_daily_earnings * number_of_working_days\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    num_points = 15\n    num_points_to_choose = 3\n\n    num_triangles = comb(num_points, num_points_to_choose)\n\n    return num_triangles\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    sheets_per_ream = sheets_per_quire * quires_per_ream\n    total_sheets = sheets_per_ream * reams\n    \n    return total_sheets\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Emma and John's ages\n    e, j = symbols('e j')\n\n    # John and Emma's total age in 3 years will be 27\n    # e + 3 + j + 3 = 27\n    equation1 = Eq(e + 3 + j + 3, 27)\n\n    # Emma's age is the difference between her own and John's ages\n    # e = j - e\n    equation2 = Eq(e, j - e)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (e, j))\n\n    # Emma's current age\n    return solutions[e]\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed: 48 km/h\n    # Jack's speed: 50 km/h\n    # Jack's delay: 3 hours\n    # Time after Jack's departure until cars are 15 km apart: 5 hours\n    # Distance that Tom travels until they are 15 km apart: 48*(3+5) km\n    # Distance that Jack travels until they are 15 km apart: 50*5 km\n    # The total distance between A and B: Tom's distance + Jack's distance + 15 km\n    \n    tom_distance = 48 * (3 + 5)\n    jack_distance = 50 * 5\n    total_distance = tom_distance + jack_distance + 15\n\n    return total_distance\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    water_angle = 36\n    total_angle = 360\n    water_fraction = water_angle / total_angle\n\n    coffee_people = 7\n    cola_fraction = 0.3  # 30%\n    tea_fraction = 0.25  # 25% or one quarter\n    \n    # total fraction for tea, coffee, and cola\n    total_fraction = tea_fraction + cola_fraction + water_fraction\n    \n    # the fraction for coffee = fraction of 1 person since only coffee is counted in people not fraction\n    coffee_fraction = coffee_people * (1 - total_fraction)\n\n    # total number of people\n    total_people = coffee_people / coffee_fraction\n\n    return int(total_people)\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_pupils = 18\n    absent_ratio = 2/5\n    total_pupils = present_pupils / (1 - absent_ratio)\n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    children = symbols('children')\n    # Each child has 2 legs and each dog has 4 legs.\n    # 3 dogs per child, so each child represents 3 * 4 + 2 = 14 legs.\n    equation = Eq(children * 14, 56)\n    solutions = solve(equation, children)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = 4 + 5\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday - sunday, 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    distance = 2\n    # Since trees are planted at corners, we need to subtract 1 to avoid counting corners twice\n    # There will be two sides of length and two sides of width, but four corners\n    trees_in_length = (length // distance) - 1\n    trees_in_width = (width // distance) - 1\n    \n    # Total trees is the sum of trees along the length and width, multiplied by 2 (for both sides),\n    # and add 4 for the trees at the corners\n    total_trees = 2 * (trees_in_length + trees_in_width) + 4\n    \n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_m = 1.36  # Katie's height in metres\n    height_cm = height_m * 100  # converting metres to centimetres\n    return height_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_amount = 500\n    income_tax_rate = 0.03\n    tax_paid = initial_amount * income_tax_rate\n    final_amount = initial_amount - tax_paid\n    return final_amount\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    for adults in range(2, 110 // 20 + 1):  # At least two adults, and max adults that could be bought with 110\n        for children in range(0, 110 // 15 + 1):\n            total_cost = adults * 20 + children * 15\n            if total_cost == 110:\n                return children\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    \n    sweets_per_person = total_sweets // people\n    \n    return sweets_per_person\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 10000):\n            original_number = j * 10 + 9\n            new_number = int(str(9) + str(j))\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_squash = 750\n    ratio_squash_to_water = 1 / 9\n    total_drink_volume = total_squash * (1 + ratio_squash_to_water)\n    bottle_volume = 1000\n    num_bottles = total_drink_volume // bottle_volume\n    return int(num_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    left_side = 0.6 * 100\n    right_side = 180\n    ans = right_side / left_side\n    return ans\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    modulus = 7\n\n    remainder = pow(base, exponent, modulus)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # We can use modulo arithmetic to find the last two digits, which is equivalent to finding the number modulo 100.\n    last_two_digits = (6**2015 + (2015*6) + 2015**6) % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    total_cost = 132\n    # Thomas' solution is incorrect.\n    # He has made a mistake by adding the fractions incorrectly.\n    # Let's solve it correctly.\n    \n    # Let x be the original amount of money Li Yan had.\n    # She spent 1/3 of it on a book: (1/3)*x\n    # The remainder is 2/3 of the original amount: (2/3)*x\n    # She then spent 1/2 of the remainder on a bag: (1/2)*(2/3)*x = (1/3)*x\n    \n    # Therefore, the cost of the book and the bag together is 2 times (1/3)*x\n    # 2*(1/3)*x = total_cost\n    # (2/3)*x = total_cost\n    # x = total_cost * (3/2)\n    x = total_cost * (3/2)\n\n    return x\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    return 8234 - 909\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # The factors are 1, 2, 4, 7, 8\n    # Since 7 is a prime number, it cannot be the result of multiplying other factors\n    # So, the next two factors must be 7*2 and 7*4\n    # The number itself is the last factor, which is 7*8\n    \n    number = 7 * 8\n\n    return number\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount = original_price * 0.1\n    new_price = original_price - discount\n    return new_price\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    # Try all the combinations for A,C,E, and F \n    # since B=2 and D=0 are already provided\n    for A in range(1, 10):\n        for C in range(10):\n            for E in range(1, 10):\n                for F in range(10):\n                    # Avoid duplicate digits\n                    if len(set([A, 2, 0, C, E, F])) == 6:\n                        # Multiply ABCDEF by 5\n                        product = 5 * (A * 100000 + 2 * 10000 + 0 * 1000 + C * 100 + E * 10 + F)\n                        # Multiply EFABCD by 6 and check if they are equal\n                        if product == 6 * (E * 100000 + F * 10000 + A * 1000 + 2 * 100 + 0 * 10 + C):\n                            return A * 1000 + C * 100 + E * 10 + F\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_position_from_front = 6\n    amy_position_from_back = 8\n    \n    # Since Amy is directly behind Jolene:\n    total_children_in_queue = jolene_position_from_front + amy_position_from_back - 1\n    \n    return total_children_in_queue\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    # Let's denote the total number of cookies in the box as 'cookies_total'.\n    \n    # From the problem we know:\n    # In the first month, James sold 1680 cookies and kept the rest.\n    cookies_sold_first_month = 1680\n    \n    # In the second month, he sold 7/20 more cookies from another similar box of cookies.\n    cookies_sold_second_month = cookies_sold_first_month + (7/20) * cookies_sold_first_month\n    \n    # It is given that the number of cookies James kept decreased by 3/20. Therefore,\n    # cookies_kept_first_month - cookies_kept_second_month = (3/20) * cookies_total\n    # cookies_total - cookies_sold_first_month - (cookies_total - cookies_sold_second_month) = (3/20) * cookies_total\n    # cookies_sold_second_month - cookies_sold_first_month = (3/20) * cookies_total\n    # (7/20) * cookies_sold_first_month = (3/20) * cookies_total\n    \n    # Now, we can solve for 'cookies_total'.\n    cookies_total = (cookies_sold_first_month * (7/20)) / (3/20)\n    \n    return cookies_total\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    effective_jump_height = (2 * jump_up) - slide_down\n    jumps_per_cycle = 2\n\n    # Calculate the height reached before the final cycle\n    final_jump_height = total_height - (jump_up - slide_down)\n\n    # The number of complete cycles (pairs of jumps) needed to reach the final jump height\n    complete_cycles = final_jump_height // effective_jump_height\n\n    # The number of jumps taken in complete cycles\n    jumps_taken = complete_cycles * jumps_per_cycle\n\n    # Height reached after the complete cycles\n    height_reached = complete_cycles * effective_jump_height\n\n    # The remaining height the monkey has to climb\n    remaining_height = total_height - height_reached\n\n    # Calculate the final jumps needed after the complete cycles\n    while remaining_height > 0:\n        jumps_taken += 1\n        remaining_height -= jump_up\n        if remaining_height <= 0:\n            break\n        remaining_height += slide_down\n\n    return jumps_taken\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total number of animals originally be 'x'\n    cows, goats, x = symbols('cows goats x')\n    \n    # The original number of cows is 0.65 * x\n    original_cows = 0.65 * x\n    \n    # The original number of goats is 'x - original_cows'\n    equation1 = Eq(goats, x - original_cows)\n    \n    # After adding 240 animals, cows become 0.65 * x + 240\n    new_cows = original_cows + 240\n    \n    # And the percentage of cows becomes 85% (65% + 20%)\n    equation2 = Eq(new_cows, 0.85 * (x + 240))\n    \n    # The number of goats becomes double after adding 240 animals\n    equation3 = Eq(2 * goats, x + 240 - new_cows)\n    \n    # Solving the equations simultaneously\n    solutions = solve((equation1, equation2, equation3), (cows, goats, x))\n    \n    return solutions[goats]\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if number % 5 == 1 and number % 6 == 2 and number % 11 == 9:\n            return number\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    ans = 253 * 160\n    return ans\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    budget_pounds = 3\n    budget_pence = budget_pounds * 100\n    stamps_count = budget_pence // stamp_cost_pence\n    return stamps_count\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n    \n    # Since it's a regular pentagon, all sides are equal.\n    # Therefore, the number of sunflowers on each side (not counting corners) is (side_length / distance_apart) - 1.\n    sunflowers_per_side = (side_length // distance_apart) - 1\n    \n    # Since there are 5 sides, and each corner is shared by two sides, we'll count one per corner and multiply sunflowers_per_side by 5.\n    total_sunflowers = sunflowers_per_side * 5 + 5  # Adding 5 for the corners\n    \n    return total_sunflowers\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    capacity = 7\n    trip_time = 2  # minutes per trip\n    \n    # Number of full trips\n    full_trips = adventurers // capacity\n    # Remaining adventurers for the last trip if any\n    remaining_adventurers = adventurers % capacity\n    \n    # Calculate the number of trips. Need to add (full_trips - 1) for the return trips.\n    # If there are remaining adventurers, they need one more trip to cross and one return trip.\n    trips = full_trips + (full_trips - 1) + (1 if remaining_adventurers else 0)\n    \n    # Calculate the total time for all the trips\n    total_time = trips * trip_time\n    \n    return total_time\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    return 100 * 99\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the usual driving time be t hours\n    t = symbols('t')\n    \n    # When driving at 45 mph, the total distance is 45*t miles\n    # Due to heavy traffic, he drives at 30 mph for t+2 hours, covering the same distance\n    # So, we have the equation 45*t = 30*(t+2)\n    \n    equation = Eq(45*t, 30*(t + 2))\n    \n    # Solve the equation for t\n    usual_time = solve(equation, t)[0]\n    \n    return usual_time\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):  # Check digits from 0 to 9\n        number = int(f\"976{digit}3\")  # Fill in the digit\n        if number % 3 == 0:  # Divisibility condition for 3\n            return digit  # Return the smallest digit that satisfies the condition\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    return sum(range(3, 11)) + sum(range(3, 7))\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        if n < 0 or m == 0:\n            return 0\n        return count_partitions(n - m, m) + count_partitions(n, m - 1)\n\n    ans = count_partitions(5, 5) - 1  # Subtracting 1 to exclude the number itself (5)\n    return ans\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219 ** 2) / (4 + 2/3 + 38/59)\n    denominator = 2.501 ** 3\n    result = numerator / denominator\n    ans = round(result, 3)\n    return ans\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students and y be the number of sweets.\n    x, y = symbols('x y')\n\n    # If each student gets 6 sweets, Mr. Lim will be short of 26 sweets.\n    equation1 = Eq(x * 6, y + 26)\n    \n    # If each student gets 5 sweets, he will be short of 5 sweets.\n    equation2 = Eq(x * 5, y + 5)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin = 329\n    jessica = amin + 97\n    mary = jessica - 58\n    return mary\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Let's denote the number of fruits on the middle tree as x.\n    # Then the numbers on the trees are x-3, x-2, x-1, x, x+1, x+2, x+3, x+4\n    # The sum of these numbers is 8x + 4, since the -3 and +4, -2 and +3, etc. cancel each other out.\n    # We're given that this sum should equal 225, so we set up the equation 8x + 4 = 225.\n\n    # Now we can check if there's a solution that is an integer.\n    total_sum = 225\n    remainder = (total_sum - 4) % 8\n    possible = remainder == 0\n\n    if possible:\n        x = (total_sum - 4) // 8\n        return f'x-3={x-3}, x-2={x-2}, x-1={x-1}, x={x}, x+1={x+1}, x+2={x+2}, x+3={x+3}, x+4={x+4}'\n    else:\n        return \"It is not possible.\"\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n    equation = Eq(white_shirts, 6 * blue_shirts)\n    total_shirts = Eq(white_shirts + blue_shirts, 63)\n    \n    solutions = solve((equation, total_shirts), (white_shirts, blue_shirts))\n    \n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    # The sequence starts with 3 and 10 and each integer is the sum of the two before it\n    # It forms a Fibonacci-like sequence\n    # Let's find the pattern of remainders when dividing by 3\n    \n    # Initialize the first two numbers and their remainders when divided by 3\n    a, b = 3 % 3, 10 % 3\n    c = 0\n    # We only need the remainders, so we can loop to find the pattern\n    # We look for the first two terms to repeat since that will indicate the cycle start\n    remainders = [a, b]\n\n    # Since the sequence is recursive, finding the cycle of remainders would mean the sequence\n    # of remainders will repeat beyond that point\n    for i in range(2, 1997):\n        c = (a + b) % 3\n        remainders.append(c)\n        # Update the values of a and b\n        a = b\n        b = c\n        # Check if we have found a repetition which indicates the beginning of a new cycle\n        if i > 2 and remainders[i] == remainders[1] and remainders[i-1] == remainders[0]:\n            cycle_length = i - 1\n            # We found a cycle, so we break the loop\n            break\n    \n    # Find the position of the 1997th term within the pattern\n    # We subtract 1 because list indices start from 0\n    position_in_cycle = (1997 - 1) % cycle_length\n    \n    # The remainder of the 1997th number divided by 3 is the same as the remainder\n    # at the position_in_cycle index in the remainders list\n    ans = remainders[position_in_cycle]\n    \n    return ans\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let leo_age be Leo's age now and son_age be his son's age now.\n    leo_age, son_age = symbols('leo_age son_age')\n\n    # According to the first statement \"When I was your age, you were 4 years old.\"\n    # The difference between their ages is a constant.\n    # So when Leo was his son's current age, his son was 4 years old.\n    # Therefore, we have the equation: leo_age - son_age = son_age - 4\n\n    equation1 = Eq(leo_age - son_age, son_age - 4)\n\n    # According to the second statement \"When you reach my age, I will be 70 years old.\"\n    # When his son reaches Leo's current age, the difference between their ages will remain the same.\n    # So, we have the equation: (leo_age + (leo_age - son_age)) = 70\n\n    equation2 = Eq(leo_age + (leo_age - son_age), 70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo_age, son_age))\n\n    return solutions[leo_age]\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years_later = symbols('years_later')\n    heidi_age_now = 8\n    dad_age_now = 50\n\n    equation = Eq(dad_age_now + years_later, 4 * (heidi_age_now + years_later))\n\n    years_later_solution = solve(equation, years_later)\n\n    return years_later_solution[0]\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    return (11 * 14 + 26) / 15\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # We need to place at least 1 singing performance between every 2 dancing performances.\n    # Since there are 3 dancing performances D1, D2, D3, we can think of them as two pairs separated by singing:\n    # D1 S ... S D2 and D2 S ... S D3\n    # There are 4 singing performances S1, S2, S3, and S4, and we need at least 1 singing performance between the dancing performances.\n    # Thus, 2 singing performances are placed between dancing, leaving us with 2 additional singing performances to arrange.\n    # We now treat the remaining 2 singing performances and 2 pairs of dancing as unique elements.\n    # We have 4 unique elements to arrange: S, S, D1D2, D2D3.\n    \n    # Number of ways to arrange these 4 unique elements:\n    arrange_4_elements = factorial(4)\n    \n    # Now we distribute the 2 remaining singing performances among the 5 positions in the different arrangements.\n    # There are total 5 positions, before D1D2, between D1D2 and D2D3, and after D2D3.\n    # We use the stars and bars method to find the number of ways to distribute 2 indistinguishable performances (stars) across 5 positions (bars).\n    arrange_2_singings = factorial(2 + 5 - 1) / (factorial(2) * factorial(5 - 1))\n\n    # The total number of arrangements:\n    total_arrangements = arrange_4_elements * arrange_2_singings\n\n    return int(total_arrangements)\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    n = 60\n    count_of_fives = 0\n    for i in range(1, n + 1):\n        while i % 5 == 0:\n            count_of_fives += 1\n            i //= 5\n    return count_of_fives\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Let the three original numbers have a sum of S.\n    # The average of these three numbers is 120, so S / 3 = 120\n    S = 3 * 120\n\n    # When the fourth number is added, the average is now 150.\n    # Let the fourth number be X.\n    # The average of four numbers is 150, so (S + X) / 4 = 150\n    # Therefore, S + X = 4 * 150\n    total_with_fourth = 4 * 150\n\n    # To find the fourth number, we subtract the original sum from the new sum.\n    X = total_with_fourth - S\n\n    return X\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # 216 = 2^3 * 3^3, let's find the minimum multiplier r for it to be a perfect square\n    r = symbols('r')\n    equation = Eq(r * (2**3) * (3**3), r**2)  # The equation for a perfect square\n\n    solutions = solve(equation)\n    ans = min(solutions)  # We want the smallest integer solution for r\n\n    return ans\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    return (3/13) * 52\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = 1  # start checking from the smallest possible divisor which is 1\n\n    while True:\n        dividend = smallest_divisor * quotient + remainder\n        if dividend % smallest_divisor == remainder:\n            return dividend\n        smallest_divisor += 1\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    daily_climb = 8\n    nightly_slip = 3\n    effective_daily_climb = daily_climb - nightly_slip\n    total_days_to_climb = 9\n\n    # The snail reaches the top before slipping back on the 9th day\n    # Calculate the distance climbed until the beginning of the 9th day\n    distance_before_last_day = effective_daily_climb * (total_days_to_climb - 1)\n\n    # Add the final climb distance to get the well's depth\n    well_depth = distance_before_last_day + daily_climb\n\n    return well_depth\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    return 285 // 3\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # Applying Inclusion-Exclusion Principle\n    both_languages = french_teachers + japanese_teachers - total_teachers\n\n    # Teachers who know only French\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bag_of_sweets, can_of_drink = symbols('bag_of_sweets can_of_drink')\n    \n    equation1 = Eq(3 * bag_of_sweets + 5 * can_of_drink, 4.90)\n    equation2 = Eq(bag_of_sweets + 3 * can_of_drink, 2.70)\n\n    solutions = solve((equation1, equation2), (bag_of_sweets, can_of_drink))\n\n    return solutions[bag_of_sweets]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    # Total permutations for 6 people\n    total_permutations = factorial(6)\n\n    # Permutations where Teddy is on the furthest left (which we cannot have)\n    teddy_left_permutations = factorial(5)\n\n    # Subtracting the restricted permutations from the total\n    ans = total_permutations - teddy_left_permutations\n\n    return ans\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # Which is -4\n\n    # We want to find the term that is just before becoming negative.\n    # This means we want to solve for n in the equation: A_n = A_1 + (n-1) * d > 0\n    # Rearranging the terms, we get: n < (A_1 / -d) + 1\n\n    terms_before_negative = (first_term / -common_difference) + 1\n\n    # Since we cannot have a fraction of a term and we're looking for the term just before becoming negative,\n    # we take the floor of the calculated value.\n    return int(terms_before_negative)\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4/9\n\n    result = total_pence * fraction\n\n    return result\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    def square_diff(a, b):\n        return a**2 - b**2\n\n    ans = square_diff(1000, 990) + square_diff(980, 970) + square_diff(20, 10)\n    \n    return ans\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # Let the first number of the seven consecutive numbers be n\n    # The sum of seven consecutive numbers would be n + (n+1) + (n+2) + (n+3) + (n+4) + (n+5) + (n+6) = 280\n    # This simplifies to 7n + 21 = 280\n    # Subtract 21 from both sides: 7n = 259\n    # Divide both sides by 7: n = 259 / 7\n    n = 259 // 7\n    \n    # The largest number is the 7th number, which is n + 6\n    largest_number = n + 6\n\n    return largest_number\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    return sum(range(1, 10))\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    x, y = symbols('x y')\n\n    # Equation 1: The sum of two numbers is 49\n    equation1 = Eq(x + y, 49)\n    # Equation 2: The difference of the two numbers is 9\n    equation2 = Eq(x - y, 9)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We are interested in the bigger number\n    return solutions[x]\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    total = sum((-1)**(i+1) * (20 - 2 * i) for i in range(10))\n    \n    return total\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    sum_of_series = 8 + 32 + 72 + 128 + 200 + 288 + 392 + 512 + 648\n    return sum_of_series\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    # Since the HCF of A and B is 75, both A and B must be multiples of 75.\n    # The smallest 3-digit multiple of 75 is 100 and the largest is 975.\n    # We will look for the largest possible sum of A and B by starting from the largest multiple of 75.\n    \n    max_sum = 0\n    # Loop over possible values of A from largest multiple of 75 to the smallest\n    for A in range(975, 100 - 1, -75):\n        str_A = str(A)\n        # Check if A has two equal digits\n        if len(set(str_A)) < 3:\n            # Loop over possible values of B from largest multiple of 75 to the smallest\n            for B in range(A - 75, 100 - 1, -75):\n                str_B = str(B)\n                # Check if B has two equal digits and is distinct from A\n                if B != A and len(set(str_B)) < 3:\n                    max_sum = max(max_sum, A + B)\n                    break  # Found the highest B for this A, no need to continue\n\n    return max_sum\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    skip_next = False\n    for throw in throws:\n        if not skip_next:\n            if throw != 6:\n                position += throw\n            else:\n                skip_next = True\n        else:\n            position -= throw\n            skip_next = False\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n\n    initial_total = Eq(alex + brayden, 756)\n    after_giving = Eq(alex - 65, 3 * (brayden + 65))\n\n    solutions = solve((initial_total, after_giving), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n    total_money = kate + james\n    money_each_after_sharing = total_money / 2\n    money_given_by_james = james - money_each_after_sharing\n    return money_given_by_james\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for total_gums in range(1, 1000):  # search within a reasonable range\n        after_secretly_eaten = total_gums - 2\n        shared_with_friends = after_secretly_eaten // 3\n        remaining_after_sharing = after_secretly_eaten - shared_with_friends\n        if remaining_after_sharing % 4 == 0:  # can be equally divided over 4 lessons\n            return total_gums\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial\n\ndef solution():\n    # Since we want at least 1 magazine between every 2 storybooks,\n    # we can start by placing the magazines and then insert the storybooks in between.\n    # There are 5 magazines, so create 6 slots (_M_M_M_M_M_) around them for the storybooks.\n    # We must place storybooks in only 4 of these slots to fulfill the condition.\n    # This can be thought of as choosing 4 slots from 6 to place the storybooks.\n\n    slots_to_choose = 6  # The slots are the spaces between and outside the magazines\n    storybooks_to_place = 4  # We need to pick 4 slots from these to place the storybooks\n    ways_to_place_storybooks = factorial(slots_to_choose) // (factorial(storybooks_to_place) * factorial(slots_to_choose - storybooks_to_place))\n\n    # After choosing the slots for storybooks, we also need to account for the number of permutations\n    # for arranging 5 magazines and 5 storybooks in their respective slots.\n    ways_to_arrange_magazines = factorial(5)\n    ways_to_arrange_storybooks = factorial(5)\n\n    # The total number of arrangements is the product of the ways to choose the storybook slots,\n    # the permutations of magazines and the permutations of storybooks.\n    total_arrangements = ways_to_place_storybooks * ways_to_arrange_magazines * ways_to_arrange_storybooks\n\n    return total_arrangements\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = 420000 + A*1000 + 280 + B\n            if number % 99 == 0:\n                return A*10 + B\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum_initial = 10 * 10  # Average of 10 numbers is 10, so sum is 10*10\n    total_sum_remaining = 9 * 9   # Average of remaining 9 numbers is 9, so sum is 9*9\n    removed_number = total_sum_initial - total_sum_remaining  # Difference is the removed number\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6\n    time_seconds = 300\n\n    # Convert speed from km/h to m/s\n    speed_ms = speed_kmh * (1000 / 3600)\n    distance_meters = speed_ms * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # Calculate the sum of odd numbers from 1 to 21\n    sum_of_odd_numbers = sum(range(1, 22, 2))\n    # Use the formula: the sum of the cubes of the first 'n' numbers is equal to the square of the sum of the 'n' numbers.\n    ans = sum_of_odd_numbers ** 2\n    return ans\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the amount each of the three brothers got when sharing with the sister as 'x'.\n    x = symbols('x')\n\n    # When shared only among brothers, each would get 'x + 20'.\n    # Originally, the sum of money is shared among 4 people, so the total is '4 * x'.\n    # If the sum is shared among the 3 brothers, then it is '3 * (x + 20)'.\n\n    # Both expressions should represent the total sum of money.\n    equation = Eq(4 * x, 3 * (x + 20))\n\n    # Solving for 'x' will give us the amount each brother got when the sister was included.\n    solution = solve(equation, x)[0]\n\n    # To find the original sum of money, we multiply the amount each got when the sister was included by 4.\n    original_sum = 4 * solution\n\n    return original_sum\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    fraction_art = 1 / 3\n    fraction_science = 4 / 5\n\n    science_books = (art_books * fraction_art) / fraction_science\n\n    return int(science_books)\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    averages = [36, 38, 39, 45, 49]\n    total_sums = [avg * 4 for avg in averages]  # Each sum of 4 numbers\n\n    # The sum of all 5 numbers is the sum of any 4 plus the 5th (excluded from average)\n    all_sums = [sum(total_sums) - total_sum for total_sum in total_sums]\n\n    # The largest number must be excluded from the smallest total sum\n    largest_number = max(all_sums)\n    return largest_number\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    ans = 32 * 20 * 300\n    return ans\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for red, green, and blue beads left\n    red, green, blue = symbols('red green blue')\n    \n    # System of equations based on the problem statement\n    equation1 = Eq(red, 2 * green)                       # Red is twice the amount of green\n    equation2 = Eq(blue, red - 50)                       # Blue is 50 less than red\n    equation3 = Eq(red + green + blue, 350)              # Total amount left is 350 beads\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (red, green, blue))\n\n    # Calculate the original amount of blue beads\n    original_blue = solutions[blue] + 112\n\n    return original_blue\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    # Let x be the number of stickers Katelyn has, then Jared has 5/2 * x stickers (according to the ratio 2:5)\n    # According to the problem, Jared has 60 more stickers than Katelyn\n    # We get the equation: 5/2 * x = x + 60\n    # Solving the equation for x gives us the number of stickers Katelyn has, and then we can find the total\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5/2 * x, x + 60)\n\n    katelyn_stickers = solve(equation, x)[0]\n    jared_stickers = (5/2) * katelyn_stickers\n\n    total_stickers = katelyn_stickers + jared_stickers\n\n    return total_stickers\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.10**2\n\n    final_amount = initial_investment * interest_first_three_years * interest_last_two_years\n\n    ans = round(final_amount, 1)\n    return ans\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    sausages = 16\n    people = 24\n    # In the best-case scenario, each cut increases the number of pieces by 1.\n    # Start with 16 sausages, each additional cut will add 1 more piece\n    # We need to figure out how many cuts to get at least 24 pieces (for 24 people)\n    cuts = 0\n    while sausages < people:\n        cuts += 1\n        sausages += 1\n    return cuts\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    def find_gcd(x, y, z):\n        result = gcd(x, gcd(y, z))\n        return result\n\n    chinese_books = 42\n    math_books = 63\n    nature_books = 28\n    greatest_number_of_textbooks = find_gcd(chinese_books, math_books, nature_books)\n\n    return greatest_number_of_textbooks\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n\n    # If Star types 5 hours and then Nini types 20 hours, they will finish the job.\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n    \n    # If Star types 20 hours and then Nini types 8 hours, they can also finish the job.\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n\n    # Calculate the time it takes for Nini to finish the job by herself: 1 / nini_rate\n    nini_time_to_finish = 1 / solutions[nini_rate]\n\n    return nini_time_to_finish\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # St. Petersburg and Manchester have a time difference of 3 hours\n    time_difference = 3\n    # Richard meets the plane at 12 noon, St Petersburg time\n    st_petersburg_time = datetime.strptime('12:00', '%H:%M')\n    # Calculate the departure time from Manchester\n    manchester_departure_time = st_petersburg_time - timedelta(hours=time_difference)\n    # Format the time in HH:MM format\n    ans = manchester_departure_time.strftime('%H:%M')\n    return ans\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    return 5 * 2.2\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance between the library and the school.\n    d = symbols('d')\n\n    # Qiqi's speed is 60 m/min, and she walks for t minutes\n    # Weiling's speed is 72 m/min, and she starts walking 2 minutes\n    # after Qiqi, so she walks for t - 2 minutes\n    # Weiling arrives 4 minutes before Qiqi, so Weiling walks for t - 6 minutes\n\n    # d = speed * time\n    # Equation for Qiqi: d = 60 * t\n    # Equation for Weiling: d = 72 * (t - 6)\n\n    equation1 = Eq(d, 60 * (symbols('t')))\n    equation2 = Eq(d, 72 * (symbols('t') - 6))\n\n    eqs = [equation1, equation2]\n\n    # Solve the system of equations to find the value of t and d.\n    solution = solve(eqs)\n\n    # Get the distance 'd' from the solution dictionary\n    distance = solution[d]\n\n    return distance\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # One construction company builds the expressway in x days\n    x = symbols('x')\n\n    # 4 construction companies build 900m in 5 days\n    # So, one company would build it in 4 * 5 = 20 days\n    # They collectively build 900m in 5 days, so one company's contribution is 900m in 20 days\n    \n    # Now, we want 1 company to build 2700m expressway,\n    # which is three times the length of 900m\n    # Therefore, it will take 3 times the days for one company to build 2700m\n    # which is 20 days * 3 = 60 days\n    \n    days_for_one_company_to_build_2700m = 20 * 3\n    return days_for_one_company_to_build_2700m\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n    ben_height = jane_height - difference\n    return ben_height\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    coffee_amount = 6  # litres\n    latte_amount = (coffee_amount / coffee_ratio) * total_ratio\n    return latte_amount\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 8 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum_positive = sum(range(4, 33, 4))\n    sum_negative = sum(range(2, 31, 4))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Ben is 6th from the front, Frank is 9th from the back\n    ben_position = 6\n    frank_position_from_back = 9\n    people_between = 10\n\n    # Total people from Ben's position to the end of the queue (including Frank)\n    total_people_to_end = people_between + ben_position\n\n    # To find the total number of people, add Frank's position from the back to the total to end\n    # and subtract 1 because Ben is counted twice (once in ben_position and once in frank_position_from_back)\n    total_people = total_people_to_end + frank_position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    percentage = 72 / 100\n    total = 140\n    ans = percentage * total\n    return ans\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P = symbols('P')\n    rate = 0.09\n    time = 5\n    A = 870\n    \n    # A = P * (1 + r)**t\n    equation = Eq(P * (1 + rate)**time, A)\n\n    initial_deposit = solve(equation, P)\n\n    return initial_deposit[0]\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    return 19 + 18 + 17 + 16 + 10\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    num = 42663\n    divisor = 9\n\n    remainder = (num % divisor) ** 2 % divisor\n\n    return remainder\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from fractions import Fraction\n    \n    # Let the total number of marbles be x\n    # According to the question:\n    # 2/5 * x + 1/3 * x + 96 = x\n    # Find a common denominator (3*5=15) for the fractions:\n    # (2/5 * x) * (3/3) + (1/3 * x) * (5/5) + 96 = (15/15 * x)\n    # 6/15 * x + 5/15 * x + 96 = x\n    # Combine like terms:\n    # (6/15 + 5/15) * x + 96 = x\n    # (11/15) * x + 96 = x\n    # Move the fraction to the other side:\n    # 96 = x - (11/15) * x\n    # 96 = (15/15 - 11/15) * x\n    # 96 = (4/15) * x\n    # Solve for x:\n    x = 96 / Fraction(4, 15)\n\n    return x\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    last_digits = 0\n    current_addend = 1\n    \n    for _ in range(2015):\n        # Add the current value and get the last 4 digits only\n        last_digits = (last_digits + current_addend) % 10000\n        # Prepare the next addend which is the previous addend times 10 plus 1\n        current_addend = (current_addend * 10 + 1) % 10000\n        \n    return last_digits\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # In the worst case, we might pick one of each color before picking two of the same color.\n    # There are 2 colors, so in the worst case, we pick one blue and one yellow,\n    # and on the third pick, we'll definitely have two of the same color.\n    return 3\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3\n    n = 7\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    max_age_product = 2019\n    min_age_product_next_year = 2021  # 2020 + 1 because next year the product will be greater than 2020\n\n    # Define the age range based on the condition that the product of ages must be less than 2019\n    max_age = int(max_age_product ** (1/2))  # Square root of 2019 to get the maximum age\n\n    # Initialize answer\n    sum_of_ages = 0\n\n    # Iterate John and Mary's age, considering John is one year older than Mary\n    for mary_age in range(1, max_age):\n        john_age = mary_age + 1\n\n        # Check product of John and Mary's age for this year and the next year\n        if john_age * mary_age < max_age_product and (john_age + 1) * (mary_age + 1) > min_age_product_next_year:\n            # Search for the ages of the three children\n            for child1_age in range(1, max_age):\n                # Two more children with ages 2 years apart\n                child2_age = child1_age + 2\n                child3_age = child1_age + 4\n\n                # Check the product of the children's ages for this year and the next year\n                if (child1_age * child2_age * child3_age < max_age_product and \n                        (child1_age + 1) * (child2_age + 1) * (child3_age + 1) > min_age_product_next_year):\n                    # Calculate the sum of all five ages\n                    sum_of_ages = john_age + mary_age + child1_age + child2_age + child3_age\n                    return sum_of_ages  # Return as soon as we find the correct ages\n\n    return sum_of_ages\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # Since we're only interested in the unit digit, we look at the unit digit patterns.\n    # For 13^n, the unit digits repeat in a cycle of 4: 3, 9, 7, 1\n    unit_digit_13 = [3, 9, 7, 1]\n    \n    # For 17^n, the unit digits repeat in a cycle of 4: 7, 9, 3, 1\n    unit_digit_17 = [7, 9, 3, 1]\n    \n    # For 4^n, the unit digits repeat in a cycle of 2: 4, 6\n    unit_digit_4 = [4, 6]\n\n    # Determine the unit digit for each term by using the remainder of the exponent divided by the cycle length\n    unit_13 = unit_digit_13[(242 - 1) % 4]\n    unit_17 = unit_digit_17[(379 - 1) % 4]\n    unit_4 = unit_digit_4[(2012 - 1) % 2]\n    \n    # Multiply the unit digits of the latter two terms and find the unit digit\n    unit_17_4 = (unit_17 * unit_4) % 10\n    \n    # Add the unit digits of the two terms and find the unit digit of the sum\n    unit_sum = (unit_13 + unit_17_4) % 10\n    \n    return unit_sum\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    miles_per_minute = 1 / (2 + 30 / 60)  # convert 2 minutes and 30 seconds to minutes\n    miles_in_hour = miles_per_minute * 60  # calculate how many miles in 1 hour\n\n    return miles_in_hour\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let total money be x\n    # x - 36 is what remains after buying plates\n    # 3/4 * (x - 36) is spent on cups\n    # 1/6 * x is what is left after buying cups\n    # From the problem, 1/6 * x is also what is left after both purchases\n    # Therefore, 1/6 * x = x - 36 - 3/4 * (x - 36)\n    # Simplifying this equation will give us the total money x\n\n    from sympy import symbols, Eq, solve\n    x = symbols('x') # Total money\n\n    # Create the equation based on the information given\n    equation = Eq(x / 6, x - 36 - (3 / 4) * (x - 36))\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Since we expect a single solution for x\n    return solution[0]\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = perm\n        total = (100*a + 10*b + c) + (100*b + 10*c + d) + (100*c + 10*d + e) + \\\n                (100*d + 10*e + f) + (100*e + 10*f + g) + (100*f + 10*g + h) + \\\n                (100*g + 10*h + i)\n        max_sum = max(max_sum, total)\n    return max_sum\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 0\n    number = 0\n\n    # Start at 8 because it's the first number in the sequence with leftmost digit of 8\n    current = 8\n\n    while count < 2012:\n        str_num = str(current)\n\n        # If the first digit is 8, it's part of the sequence\n        if str_num[0] == '8':\n            count += 1\n            number = current\n\n        # Increment current number to check next integer\n        current += 1\n\n    return number\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    result = 25 / 100 * 80\n    return result\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    total_balls = 160\n    num_students = 5\n    for i in range(1, total_balls):\n        mid_ball = i\n        first_ball = mid_ball - 2\n        last_ball = mid_ball + 2\n        if first_ball + (first_ball + 1) + mid_ball + (last_ball - 1) + last_ball == total_balls:\n            return last_ball\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    # Initialize sum\n    total_sum = 0\n    # Loop through the even numbers from 2 to 20\n    for i in range(2, 21, 2):\n        # Add the square of each even number to the total sum\n        total_sum += i**2\n    return total_sum\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    income = symbols('income')\n    \n    # Define the piecewise tax function\n    tax = Eq(0.15 * min(income, 20000) + 0.20 * max(0, income - 20000), 7000)\n\n    # Solve for the income\n    solutions = solve(tax, income)\n\n    # There should only be one positive solution that makes sense in this context\n    return next(val for val in solutions if val > 0)\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "from itertools import combinations\n\ndef solution():\n    # Since we need at least 2 envelopes in box A, at least 4 in B, and at least 3 in C,\n    # we have a total of 2 + 4 + 3 = 9 envelopes that are already placed.\n    # This leaves us with 15 - 9 = 6 envelopes that can be freely distributed among the 4 mailboxes.\n    free_envelopes = 6\n    \n    # The number of ways we can distribute n identical items into r distinct boxes\n    # is C(n + r - 1, r - 1), where C is the combination function.\n    # In this case, we need to distribute the remaining 6 envelopes into 4 boxes,\n    # which means we have to calculate C(6 + 4 - 1, 4 - 1) = C(9, 3).\n    \n    # Calculate the combinations.\n    # We will use the combinations function from the itertools module, as there is no direct combination function in Python's standard library.\n    # However, we can calculate the combinations using the factorial function from the math module.\n    from math import factorial\n    \n    # Define a function to calculate combinations.\n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n    \n    # Calculate the number of combinations.\n    num_ways = combinations(free_envelopes + 4 - 1, 4 - 1)\n    \n    return num_ways\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of a watermelon and a honeydew\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    # Create the equations based on the problem\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    # Solve the equations for the cost of a watermelon and a honeydew\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    ans = 1.4 * 1/10\n    return ans\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    import math\n    lengths = [28, 14, 56]\n    gcd = math.gcd(math.gcd(lengths[0], lengths[1]), lengths[2])\n    return gcd\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    for chickens in range(41):\n        rabbits = 40 - chickens\n        if 2 * chickens + 4 * rabbits == 100:\n            return chickens\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    A = symbols('A')\n    equation = Eq(A - 290, 3*(A - 290))\n    total = solve(equation, A)\n    return 2 * total[0]\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # Convert 1/13 to its decimal representation\n    decimal_representation = format(1/13, '.3000f')  # Get at least 2022 digits\n    \n    # 1/13 in decimal form is a recurring pattern, which is 076923 recurring.\n    # We can determine the digit in the 2022th place by considering the index\n    # within this recurring pattern. The pattern has a length of 6.\n    \n    # Since Python indexing starts at 0, we’ll search for the 2021st index\n    index_in_pattern = (2022 - 1) % 6\n    \n    # Creating the recurring pattern manually\n    recurring_pattern = '076923'\n    \n    # Find the digit in the 2022th decimal place\n    digit = recurring_pattern[index_in_pattern]\n    \n    return int(digit)\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    total_uniforms = 3600\n    uniforms_in_5_days = 720\n    days_per_uniform = 5 / uniforms_in_5_days\n    total_days = days_per_uniform * total_uniforms\n    return total_days\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = set()\n    \n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    \n    return len(factors)\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    boys_packed = 4\n    girls_school_lunch = 7\n    boys_home = 3\n    students_home = 5\n    \n    girls = total_students - boys\n    girls_packed = girls - girls_school_lunch\n    girls_home = students_home - boys_home\n    girls_packed += boys_home - boys_packed\n    \n    packed_lunch = boys_packed + girls_packed\n    \n    return packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark_chocolate_cost = 20 * 6\n    total_milk_chocolate_cost = 20 * 5\n    total_strawberry_chocolate_cost = 20 * 4\n    total_cost = total_dark_chocolate_cost + total_milk_chocolate_cost + total_strawberry_chocolate_cost\n    total_chocolates = 20 + 20 + 20\n    average_cost = total_cost / total_chocolates\n    return average_cost\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    return (100 - 1) // 12\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed_m_per_s = 53\n    time_s = 19\n    \n    train_length_m = speed_m_per_s * time_s\n    \n    return train_length_m\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Let x be the number of days the wife will take to finish the barrel on her own\n    \n    # 1/day rate of drinking for the man\n    man_rate = 1 / 15\n    \n    # 1/day combined rate of drinking for the man and his wife\n    combined_rate = 1 / 12\n    \n    # 1/day rate of drinking for the wife\n    wife_rate = combined_rate - man_rate\n    \n    # Number of days the wife will take to finish the barrel on her own\n    wife_days = 1 / wife_rate\n    \n    return wife_days\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    return result\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_fruits = 18 + 30  # Total number of pears and strawberries\n    friends = 6  # Number of friends\n\n    fruits_per_friend = total_fruits // friends  # Divide equally among friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    number_of_tricycles = 6\n    total_wheels = wheels_per_tricycle * number_of_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam_number = symbols('sam_number')\n    \n    equation = Eq(2 * sam_number + 6, 3 * sam_number - 3)\n    \n    solution = solve(equation, sam_number)\n    \n    return solution[sam_number]\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    price_per_book = 16\n    bundle_count = 5 // 3  # Number of full bundles Subhan can get.\n    free_books = bundle_count  # Number of free books he gets.\n    total_books_to_pay_for = 5 - free_books  # Total books he needs to pay for.\n    \n    total_cost = total_books_to_pay_for * price_per_book\n    return total_cost\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154\n    mount_fuji_tip = 3776\n\n    distance = mount_fuji_tip - turpan_depression_base\n\n    return distance\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    total_pupils = 40\n    total_pencils = 35 * total_pupils  # Total number of pencils in the class\n    boys_average = 20\n    girls_average = 60\n    \n    # Let the number of boys be x\n    # Then the number of girls will be total_pupils - x\n    # Boys' pencils + Girls' pencils = Total pencils\n    # x * boys_average + (total_pupils - x) * girls_average = total_pencils\n\n    # Solving the equation for x\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(x * boys_average + (total_pupils - x) * girls_average, total_pencils)\n    boys_count = solve(equation, x)[0]\n\n    return boys_count\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    ans = (4 - remainder) % 4\n    return ans\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of women (W), men (M), and children (C)\n    W, M, C = symbols('W M C')\n    \n    # Given equations\n    # (2/5) of total people (W+M+C) is women\n    equation1 = Eq(W, 2/5 * (W + M + C))\n    # There are three times as many men as children\n    equation2 = Eq(M, 3 * C)\n    # There are 190 more women than children\n    equation3 = Eq(W, C + 190)\n    \n    # Solve the system of equations for W, M, and C\n    solutions = solve((equation1, equation2, equation3), (W, M, C))\n    \n    # Calculate the total number of people at the exhibition\n    total_people = solutions[W] + solutions[M] + solutions[C]\n    \n    return total_people\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 51):\n        total_sum += int('1' * i)\n    return total_sum % 100\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20  # Students participating only in the coding competition\n    math_only = 21 - 20  # Students participating only in the maths competition\n    both_competitions = 20  # Students participating in both competitions\n\n    total_students = coding_only + math_only + both_competitions\n\n    return total_students\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one apple and one banana\n    cost_apple, cost_banana = symbols('cost_apple cost_banana')\n\n    # Create equations based on the given information\n    equation1 = Eq(6 * cost_apple + 7 * cost_banana, 8 * cost_apple + 4 * cost_banana)\n    equation2 = Eq(cost_apple, cost_banana)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_apple, cost_banana))\n\n    # Calculate the number of bananas that can be bought with the same amount of money\n    num_bananas = (8 * cost_apple + 4 * cost_banana) / solutions[cost_banana]\n\n    return num_bananas\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    # Using the Inclusion-Exclusion Principle\n    both_competitions = math_students + art_students - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n    \n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    \n    return seconds_per_week\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    count = 0\n    # Since there are specific minimum requirements for each box (A, B, C), we calculate the minimum already used.\n    min_envelopes_used = 2 + 4 + 3  # Box A, Box B, Box C respectively\n    remaining_envelopes = 15 - min_envelopes_used  # The remaining envelopes that can be distributed freely\n\n    # We will iterate through all possible distributions of the remaining envelopes\n    for a_extra in range(0, remaining_envelopes + 1):\n        for b_extra in range(0, remaining_envelopes - a_extra + 1):\n            c_extra = remaining_envelopes - a_extra - b_extra\n            # The number for box D is whatever remains: 15 - (A's total) - (B's total) - (C's total)\n            d_total = 15 - (2 + a_extra) - (4 + b_extra) - (3 + c_extra)\n            if d_total >= 0:  # Making sure Box D has a non-negative number of envelopes\n                count += 1  # Each valid distribution is one possible way\n\n    return count\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    # We know that the error is the result is 98.01 less than the true result.\n    # If we call the dividend 'x' and the true divisor 2.11, then we can set up an equation\n    # true_result = x / 2.11\n    # incorrect_result = true_result - 98.01\n    # We know that the incorrect result is due to treating 2.11 as 211:\n    # incorrect_result = x / 211\n    # Now we have two equations:\n    # (1) true_result = x / 2.11\n    # (2) incorrect_result = x / 211\n    # We combine them knowing that incorrect_result = true_result - 98.01, and solve for true_result.\n    # x / 211 = (x / 2.11) - 98.01\n    # Solving for x, we have:\n    # x = (x / 2.11 - 98.01) * 211\n    # Now we need to solve for x\n\n    true_result = symbols('true_result')\n\n    # According to the equation we developed:\n    equation = Eq((true_result / 2.11) - 98.01, true_result / 211)\n\n    # Solving the equation\n    true_result_value = solve(equation, true_result)\n\n    return true_result_value[0]\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the initial amount of money John and Choon Mui each had\n    john, choon_mui = symbols('john choon_mui')\n\n    # John spent $30\n    equation1 = Eq(john - 30, choon_mui / 4)\n\n    # Choon Mui spent $150\n    equation2 = Eq(choon_mui - 150, john * 4)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (john, choon_mui))\n\n    # Get how much money John had left\n    john_left = solutions[john] - 30\n\n    return john_left\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    initial_value = 200\n    percentage_increase = 10\n    final_value = initial_value * (1 + percentage_increase / 100)\n    return final_value\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    speed_mph = 65\n    time_hours = 15 / 60\n    distance_miles = speed_mph * time_hours\n    miles_to_km = 1.60934\n    distance_km = distance_miles * miles_to_km\n\n    return distance_km\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    f, m = symbols('f m')  # f for female, m for male\n    \n    # Equations based on the problem:\n    eq1 = Eq(m, f + 450)  # On the first day, males are 450 more than females.\n    \n    # On second day\n    # Female visitors increased by 15%\n    # Male visitors decreased by 18%\n    # Total visitors are 1354\n    eq2 = Eq(f * 1.15 + m * 0.82, 1354)\n   \n    # Solve the equations\n    solutions = solve((eq1, eq2), (f, m))\n\n    return solutions[m]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    # Let's denote the initial number of eggs as x.\n    # According to the problem, after the first sale, the seller has (x/2 - 5) eggs left.\n    # After the second sale, the seller has (x/2 - 5)/2 + 4 = remaining_eggs.\n    # We know the remaining eggs are 15, so we can set up the equation:\n    # (x/2 - 5)/2 + 4 = 15 -> (x/2 - 5)/2 = 11 -> x/2 - 5 = 22 -> x/2 = 27 -> x = 54\n    initial_eggs = (remaining_eggs + 4) * 2 + 10\n    return initial_eggs\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    ones_like_one_direction = 20\n    ones_like_the_vamps = 17\n    ones_like_both = 15\n\n    ones_like_neither = total_girls - (ones_like_one_direction + ones_like_the_vamps - ones_like_both)\n    \n    return ones_like_neither\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8\n    scale_ratio = 1/20\n    model_length_m = actual_length_m * scale_ratio\n    model_length_cm = model_length_m * 100\n    return model_length_cm\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    \n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # Total number of arrangements.\n    total_arrangements = factorial(4)\n\n    # Now we must subtract the cases where at least one person remains in their original position.\n    # Case 1: Exactly one person remains in the original position.\n    # There are 4 choices for the person who does not move and factorial(3) arrangements for the others.\n    case_one = 4 * factorial(3)\n\n    # Case 2: Exactly two people remain in their original positions.\n    # There are 6 choices for the two people who do not move.\n    case_two = 6\n\n    # The inclusion-exclusion principle is used to find the final answer.\n    # Subtract cases where at least one person remains in the same place and add the case where two people remain in place.\n    ans = total_arrangements - case_one + case_two\n    return ans\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for num in range(2, 100):\n        if num % 7 == 2 and num % 13 == 2:\n            return num\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(95/100 * x - 2/5 * x, 55)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    daily_wage = (78 / 6.5) * 8\n    weekly_wage = daily_wage * 5  # Assuming \"this week\" means 5 working days\n    remaining_debt = 700 - weekly_wage\n    return remaining_debt\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('20:30', '%H:%M')\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    num = 14575\n    ans = round(num, -2)\n    return ans\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    # This seems like a cryptic clue. Without more context or an actual puzzle, this can't be solved.\n    # The variable A is undefined and there is no clear relationship or function that gives A a value.\n    # Typically, a number puzzle would include a set of conditions or a pattern that has to be followed.\n    \n    # Since no context is provided, I'm returning None to signify that the value of A cannot be determined.\n    return None\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    arjun_period = 14  # 2 weeks in days\n    yahya_period = 10\n    ans = lcm(arjun_period, yahya_period)\n    return ans\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    first_distance = 280\n    middle_distance = 400\n    last_distance = 800 - (first_distance + middle_distance)\n    \n    first_speed = 7\n    middle_speed = 5\n    last_speed = 8\n    \n    first_time = first_distance / first_speed\n    middle_time = middle_distance / middle_speed\n    last_time = last_distance / last_speed\n    \n    total_time = first_time + middle_time + last_time\n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for d1 in range(10):\n        for d2 in range(10):\n            number = int(f\"2{d1}9{d2}\")\n            if number % 3 == 0 and number % 5 == 0:\n                total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    tree_spacing = 7\n    # Calculate the number of trees by dividing the highway length by the tree spacing\n    # Since there are no trees on both ends, subtract 1 from the division result\n    num_trees = (highway_length // tree_spacing) - 1\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    return 34 + 14 - 11 + 2\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note = 50\n\n    # Lucas gave £50 change and lost shoes worth £30\n    money_lost = fake_note + cost_of_shoes\n    \n    return money_lost\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    number_of_terms = (last_term - first_term) // 1 + 1\n    sum_of_sequence = (number_of_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    return (5/7) * 112\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    return 6 * 9 * 12\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    group_of_three_factorial = factorial(3)            # Permutations of A, B, C together\n    rest_students_factorial = factorial(10 - 3)        # Permutations of remaining 7 students\n    combined_groups_permutations = factorial(8)        # Permutations of the group as a unit with the other 7\n    \n    total_ways = group_of_three_factorial * combined_groups_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # Create the original long number by concatenating numbers from 1 to 30 as strings\n    original_number = ''.join(str(i) for i in range(1, 31))\n    \n    # We remove the smallest 46 digits to get the smallest number, which are from 1 to 9\n    # except for the last '0' that we need to make sure the number is not zero.\n    # Since there are four '1's in the original number, we remove three of them and keep one.\n    # Similarly, for '2' to '9', we remove all four appearances.\n    digits_to_remove = {'1': 3, '2': 4, '3': 4, '4': 4, '5': 4, '6': 4, '7': 4, '8': 4, '9': 4}\n    count_removed = sum(digits_to_remove.values())\n\n    # Creating a list from the string so we can remove elements from it\n    number_list = list(original_number)\n\n    # Remove the specified number of the smallest digits from the list\n    for digit, amount in digits_to_remove.items():\n        for _ in range(amount):\n            number_list.remove(digit)\n    \n    # After removing the digits, the smallest number left will be at the start\n    # So we need to sort the remaining digits to get the smallest number\n    smallest_number = ''.join(sorted(number_list))\n    \n    # Return the smallest number that can be formed\n    return int(smallest_number)\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, worst case is that we keep picking all blue balls\n    # There are 6 blue balls, so to ensure we get at least one white ball,\n    # we need to pick all blue ones (6) plus one more (1 white).\n    return 6 + 1\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    \n    days_to_reach = (total_distance - climb_per_day) // net_distance_per_day + 1\n    \n    if (total_distance - climb_per_day) % net_distance_per_day != 0:\n        days_to_reach += 1\n    \n    return days_to_reach\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total = james + linda + ben\n    return total\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    expression_result = (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n    return expression_result\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    number = 2000 - 222\n    return number\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    length_of_each_ruler = 20\n    overlap_length = 3\n    number_of_rulers = 3\n\n    total_length = (number_of_rulers * length_of_each_ruler) - (overlap_length * (number_of_rulers - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Speed for jogging\n    jogging_speed = 6  # miles per hour\n    # Speed for walking\n    walking_speed = 5  # miles per hour\n\n    # Jogging time from 6:30 AM to 7:30 AM is 1 hour\n    jogging_time = 1  # hour\n    # Walking time from 7:30 AM to 9:30 AM is 2 hours\n    walking_time = 2  # hours\n\n    # Distance covered when jogging\n    jogging_distance = jogging_speed * jogging_time\n    # Distance covered when walking\n    walking_distance = walking_speed * walking_time\n\n    # Total distance covered\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    initial_cups = 721\n    total_new_cups = 0\n    \n    while initial_cups >= 7:\n        new_cups = initial_cups // 7\n        total_new_cups += new_cups\n        \n        initial_cups = new_cups + initial_cups % 7\n        \n    return total_new_cups\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    first_days = 3 * 14\n    following_days = 2 * 9\n    last_day = 12\n    total_days = 6\n\n    total_pages = first_days + following_days + last_day\n    average_pages = total_pages / total_days\n\n    return average_pages\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n    \n    class_A = 8\n    class_B = 12\n    class_C = 20\n    \n    # Calculate the greatest common divisor of all three classes\n    gcf = gcd(gcd(class_A, class_B), class_C)\n    \n    return gcf\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    # Convert the length of the vegetable plot to centimeters\n    length_cm = 23 * 100\n    \n    # Calculate the total space each cauliflower occupies including the spacing\n    cauliflower_total_space = 15 + 45  # cm\n    \n    # Calculate the remaining length after the first cauliflower is planted 20 cm away from the start\n    remaining_length_cm = length_cm - 20  # cm\n    \n    # The number of cauliflowers that can be planted is the number of times the cauliflower Total space\n    # fits into the remaining length\n    num_cauliflowers = remaining_length_cm // cauliflower_total_space\n    \n    return int(num_cauliflowers)\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    return ans\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    badminton, bowling = symbols('badminton bowling')\n    \n    equation1 = Eq(badminton, 3 * bowling)\n    equation2 = Eq(badminton - 36, bowling - 4)\n    \n    solutions = solve((equation1, equation2), (badminton, bowling))\n    \n    return solutions[badminton] - 36, solutions[bowling] - 4\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    n = 72\n    factors_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors_count += 1\n    return factors_count\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10 ** 2  # meters per second\n    distance = 1.5 * 10 ** 3  # meters (1.5 kilometers)\n\n    time = distance / speed_of_sound  # time = distance / speed\n\n    return time\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let w represent Wendy's current age and v represent Vivien's current age\n    w, v = symbols('w v')\n    \n    # Wendy is twice as old as Vivien\n    equation1 = Eq(w, 2 * v)\n    \n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(v - 10, (w - 10) / 4)\n    \n    # Solve the system of equations for w and v\n    solutions = solve((equation1, equation2), (w, v))\n    \n    # Wendy's age in 5 years' time\n    wendy_future_age = solutions[w] + 5\n\n    return wendy_future_age\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n    for i in range(301, 1000):\n        while i % 2 == 0:\n            count_2 += 1\n            i = i // 2\n        while i % 5 == 0:\n            count_5 += 1\n            i = i // 5\n    return min(count_2, count_5)\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    # Given total value of numbers on cards is 504\n    total_value = 504\n    # Given average value of all numbers is 126\n    average_value = 126\n    # The number of cards can be found by dividing total value by average value\n    num_cards = total_value // average_value\n\n    # The difference between the greatest and smallest number is 6\n    difference = 6\n\n    # If the average is 126 and there are 4 cards, the numbers must be symmetrically arranged around the average\n    # Hence, the smallest number can be found by subtracting the difference divided by 2 twice from the average\n    # (since there must be two numbers below the average and two numbers above the average)\n    smallest_number = average_value - (difference // 2) * (num_cards // 2)\n\n    return smallest_number\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_fraction = sum(1/i for i in range(10, 20))\n    return int(sum_fraction)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / 1\n    return x\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for number in range(10, 100):\n        if number % 6 == 0 and (number - 1) % 13 == 0:\n            return number\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    difference = number1 - number2\n    return difference\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols(\n        'girls boys girls_swim girls_not_swim boys_swim boys_not_swim'\n    )\n\n    # equations based on given information\n    equation1 = Eq(boys, girls + 90)\n    equation2 = Eq(girls_swim / girls_not_swim, 31 / 49)\n    equation3 = Eq(boys_swim, boys_not_swim - 120)\n    equation4 = Eq(girls + boys, 1690)\n    equation5 = Eq(girls, girls_swim + girls_not_swim)\n    equation6 = Eq(boys, boys_swim + boys_not_swim)\n\n    # solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6),\n                      (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    num_girls_not_swim = solutions[girls_not_swim]\n    num_boys_not_swim = solutions[boys_not_swim]\n\n    # total number of pupils who cannot swim\n    return num_girls_not_swim + num_boys_not_swim\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_only = 20 - 15\n    math_only = 35 - 15\n    both = 15\n    total_students = english_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    # Speed of rabbit and turtle\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    \n    # Time when the rabbit starts sleeping (in minutes)\n    time_before_sleep = 10\n    \n    # Distance covered before rabbit sleeps\n    distance_before_sleep = rabbit_speed * time_before_sleep  # in meters\n    \n    # The rabbit sleeps (in minutes)\n    sleep_time = 215\n    \n    # Distance covered by the turtle during the rabbit sleep time (in meters)\n    turtle_distance_during_sleep = turtle_speed * (time_before_sleep + sleep_time)\n    \n    # Total time rabbit takes to finish the race (in minutes)\n    remaining_distance_for_rabbit = 6990 - distance_before_sleep\n    total_time_rabbit = time_before_sleep + sleep_time + (remaining_distance_for_rabbit / rabbit_speed)\n    \n    # Total time turtle takes to finish the race (in minutes)\n    total_time_turtle = 6990 / turtle_speed\n    \n    # Finding who reaches the finish line first and the distance between them\n    if total_time_rabbit < total_time_turtle:\n        winner = \"rabbit\"\n        distance_behind = (total_time_turtle - total_time_rabbit) * turtle_speed\n    else:\n        winner = \"turtle\"\n        distance_behind = (total_time_rabbit - total_time_turtle) * rabbit_speed\n    \n    return (winner, distance_behind)\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    increment = 1 + (10 / 100)  # 10% increase each year\n    amount_2018 = final_amount / (increment ** 2)  # since the money went up for two years (2018 to 2020)\n\n    return amount_2018\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bolt, boris = symbols('bolt boris')\n    \n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n    \n    total_distance = solutions[bolt] + solutions[boris]\n    \n    return total_distance\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1/2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n\n    # Calculate the common difference of the arithmetic sequence based on the first and fourth terms\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    # Use the formula for the sum of n terms of an arithmetic sequence:\n    # sum = n/2 * (2 * a + (n - 1) * d)\n    total_athletes = num_rows / 2 * (2 * first_term + (num_rows - 1) * common_difference)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "from sympy import primefactors, factorial\n\ndef count_trailing_zeros(n):\n    # Count the number of 5s in the prime factors of n as there will\n    # be at least as many 2s which can pair with the 5s to form 10s,\n    # hence determining the number of trailing zeros\n    count_5s = 0\n    for i in range(1, n+1):\n        number = i\n        while number % 5 == 0:\n            count_5s += 1\n            number = number // 5\n    return count_5s\n\ndef solution():\n    return count_trailing_zeros(789)\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "from math import factorial\n\ndef solution():\n    total_people = 7\n    people_who_dont_want_to_stand_next_to_each_other = 3\n    \n    # Total permutations without restrictions\n    total_permutations = factorial(total_people)\n    \n    # Permutations of the 3 people who don't want to stand next to each other\n    unwanted_permutations = factorial(people_who_dont_want_to_stand_next_to_each_other)\n    \n    # Positions where the group of 3 could be placed if they were to stand together\n    positions_for_group = total_people - people_who_dont_want_to_stand_next_to_each_other + 1\n    \n    # Permutations where the group of 3 is standing together\n    # We consider the group as a single entity, plus the remaining individuals\n    group_together_permutations = positions_for_group * factorial(total_people - people_who_dont_want_to_stand_next_to_each_other)\n    \n    # The number of permutations where the group of 3 people are standing together\n    # and within that group, there are permutations of the 3 individuals\n    grouped_permutations = group_together_permutations * unwanted_permutations\n    \n    # Subtract grouped permutations from the total permutations to get the result\n    ans = total_permutations - grouped_permutations\n    \n    return ans\n\n# Call the function and store the answer\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    ans = 23 * 76\n    return ans\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    \n    total_cost = number_of_cakes * cost_per_cake\n    \n    return total_cost\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Total score for team A\n    total_score_A = 76 * 20\n    \n    # Let x be the number of students in team B\n    # Total score for both teams will be the average score of the two teams combined times the total number of students\n    # We can set up the equation: (total_score_A + 67 * x) / (20 + x) = 70\n    \n    # Rearrange the equation to solve for x\n    # total_score_A + 67 * x = 70 * (20 + x)\n    # 1520 + 67 * x = 1400 + 70 * x\n    # 120 = 3 * x\n    x = 120 // 3\n    \n    return x\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    # If each of the most populated schools had only 3 participants, then there would \n    # be the maximum number of schools with the potential for one to reach 4 participants.\n    # Using the Pigeonhole Principle, it's clear that adding one more participant to the schools \n    # with 3 members guarantees one school reaches 4.\n    # Hence, we divide the total participants by 3 and round up to find the maximum number of schools.\n    max_schools = -(-participants // 3) # Ceiling division\n    \n    return max_schools\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    min_steps = 25\n    max_dice_roll = 6\n    min_rolls = (min_steps - 1) // max_dice_roll + 1\n    return min_rolls\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):  # Loop through hours\n        for minute in range(60):  # Loop through minutes\n            time_str = f'{hour:02d}{minute:02d}'  # Format time as a string 'HHMM'\n            if time_str.count('4') >= 2:  # Check if '4' appears at least twice\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perms = permutations(digits, 6)\n    min_product = float('inf')\n    for perm in perms:\n        num1 = perm[0] * 100 + perm[1] * 10 + perm[2]\n        num2 = perm[3] * 100 + perm[4] * 10 + perm[5]\n        product = num1 * num2\n        if product < min_product:\n            min_product = product\n    return min_product\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    return 4.5 * 14\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    # This is an arithmetic sequence where a1 = 2019, an = 19, d = -50\n    a1 = 2019\n    an = 19\n    d = -50\n    # Number of terms n can be found using the formula: n = (an - a1) / d + 1\n    n = (an - a1) / d + 1\n    # Sum of the series can be found using the formula: S = n/2 * (a1 + an)\n    S = n / 2 * (a1 + an)\n    return int(S)\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    # Start with the smallest digit in the tens place.\n    for digit_tens in range(1, 10):\n        # Since the sum of the digits is 15, calculate the unit place accordingly.\n        digit_ones = 15 - digit_tens\n        # Ensure the unit place is a single digit, i.e., less than 10.\n        if digit_ones < 10:\n            # Construct the 2-digit number.\n            return digit_tens * 10 + digit_ones\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    all_digits = set(range(1, 10))\n    max_product = float('-inf')\n    min_product = float('inf')\n    \n    # Generate all permutations of 7 distinct digits\n    for p in permutations(all_digits, 7):\n        ABCD = 1000*p[0] + 100*p[1] + 10*p[2] + p[3]\n        EFG = 100*p[4] + 10*p[5] + p[6]\n        \n        # Check if the sum is 1993\n        if ABCD + EFG == 1993:\n            # Calculate the product\n            product = ABCD * EFG\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n    \n    # Return the difference between max and min products\n    return max_product - min_product\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    for number in range(29, -1, -1):  # start from 29 and go backwards\n        if isprime(number):\n            return number\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    missing_number = 3989 - (3000 + 80 + 9)\n    return missing_number\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    total_distance = 220\n    climb_rate = 40\n    slip_back = 10\n    effective_climb = climb_rate - slip_back\n    hours = 0\n    \n    while total_distance > 0:\n        hours += 1\n        total_distance -= climb_rate\n        if total_distance <= 0:\n            break\n        total_distance += slip_back\n\n    return hours\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    money_spent = 97\n    money_saved = total_money - money_spent\n    return money_saved\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    initial_typists = 5\n    words_to_type = 6000\n    minutes_taken = 20\n    \n    # Find the rate of typing per typist\n    rate_per_typist = words_to_type / (initial_typists * minutes_taken)\n    \n    # New situation\n    remaining_typists = initial_typists - 2\n    words_needed = 9000\n    \n    # Calculate the time needed for the remaining typists to type out 9000 words\n    time_needed = words_needed / (rate_per_typist * remaining_typists)\n\n    return time_needed\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cabbage_price = 0.96\n    cabbages_bought = 8\n    lettuces_bought = 6\n\n    total_spent = cabbage_price * cabbages_bought\n    lettuce_price = total_spent / lettuces_bought\n\n    return lettuce_price\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    return sum(divisors(20))\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_plants_initially = 11\n    distance_between_first_last = 30\n    \n    # Total intervals initially is one less than the number of potted plants\n    total_intervals_initially = total_plants_initially - 1\n    \n    # Distance between each plant initially\n    interval_initially = distance_between_first_last / total_intervals_initially\n    \n    # After removing 8 plants, there are 3 plants left\n    total_plants_remaining = total_plants_initially - 8\n    \n    # Total intervals remaining is one less than the number of remaining potted plants\n    total_intervals_remaining = total_plants_remaining - 1\n    \n    # Since the total distance between first and last plant doesn't change,\n    # the new interval is the initial interval multiplied by the initial number\n    # of intervals and divided by the remaining number of intervals.\n    new_interval = (interval_initially * total_intervals_initially) / total_intervals_remaining\n    \n    return new_interval\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 0.40 * 320\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = (13 * 60) + 52  # Convert start time to minutes\n    end_time = (14 * 60) + 5     # Convert end time to minutes\n    duration = end_time - start_time  # Calculate the duration of the call in minutes\n    cost_per_minute = 14  # Cost per minute in pence\n    total_cost = duration * cost_per_minute  # Calculate the total cost\n    return total_cost\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    count = 0\n    # iterate through possible three-digit numbers\n    for i in range(100, 1000):\n        str_num = str(i)\n        # check if the number contains only 2 and 3 and each at least once\n        if set(str_num).issubset({'2', '3'}) and '2' in str_num and '3' in str_num:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_price = pen_price + ruler_price\n    return total_price\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import date, timedelta\n\n    start_date = date(year=2023, month=10, day=17)  # 17th October 2023\n    end_date = date(year=2023, month=12, day=20)    # 20th December 2023\n    days_diff = (end_date - start_date).days + 1    # Calculate the inclusive difference in days\n\n    # Since 17th is Tuesday, first Sunday will be after (6 - 2) days\n    first_sunday = start_date + timedelta(days=(6 - 2))\n\n    # Calculate how many days are there from the first Sunday to the end_date\n    remaining_days = (end_date - first_sunday).days + 1\n\n    # Count Sundays by finding how many full weeks are there\n    sundays_count = remaining_days // 7\n\n    # If there are extra days that could include a Sunday, add it\n    if remaining_days % 7 > 0:\n        sundays_count += 1\n\n    return sundays_count\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n    \n    # Given equations\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "from sympy import lcm\n\ndef solution():\n    time_first_light = 0.5  # minutes\n    time_second_light = 0.75  # minutes\n    time_all_green = 9  # minutes\n    \n    # Find the least common multiple of the first two lights\n    lcm_first_second = lcm(time_first_light, time_second_light)\n    \n    # Since the third light needs to have a time greater than or equal to 30 seconds (0.5 minutes),\n    # we find the smallest common multiple of the first two lights that is at least 0.5\n    third_light = lcm_first_second\n    while third_light < time_all_green:\n        third_light += lcm_first_second\n    \n    # Return the time for the third light in seconds\n    return third_light * 60\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n    \n    ways = factorial(5)  # 5! ways to distribute 5 different skiboards among 5 people\n    \n    return ways\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    # Let the total number of pieces be x\n    # On the first day, Tim fits 20% of the pieces, i.e., 0.20 * x\n    # On the second day, he fits another 60 pieces, so now he has fitted 0.20 * x + 60 pieces\n    # The ratio of the fitted pieces to the unfitted pieces is 2:5\n    # Therefore, (0.20 * x + 60) / (x - (0.20 * x + 60)) = 2 / 5\n    # Solve for x\n    from sympy import symbols, solve, Eq\n\n    x = symbols('x')\n    equation = Eq((0.20 * x + 60) / (x - (0.20 * x + 60)), 2/5)\n    total_pieces = solve(equation, x)\n\n    return total_pieces[0]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position = 18\n    tony_position = total_children - 17 + 1\n    if henry_position <= tony_position:\n        count = tony_position - henry_position + 1\n    else:\n        count = henry_position - tony_position + 1\n    return count\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    metres = 2\n    millimetres_per_metre = 1000\n    ans = metres * millimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    original_amount = 4\n    paid_amount = original_amount * 0.30\n    amount_owed = original_amount - paid_amount\n    return amount_owed\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote apple_tarts as 'a' and strawberry_tarts as 's'\n    # and a_cost for the cost of an apple tart and s_cost for strawberry tart.\n    # Since the lady spent an equal amount on each type, the total spent on apple tarts is twice the spent on strawberry tarts, therefore:\n    # a_cost * 2 * s = s_cost * s\n    # Also given that a strawberry tart costs $0.40 more than an apple tart, we have:\n    # s_cost = a_cost + 0.40\n    # And the total amount she paid is $40, therefore:\n    # (a_cost * 2 * s) + (s_cost * s) = 40\n    # Now we have three equations and three unknowns which we can solve simultaneously.\n\n    a_cost, s_cost, s = symbols('a_cost s_cost s')\n    \n    # Equation representing the relation between the number of apple tarts and strawberry tarts\n    equation1 = Eq(a_cost * 2 * s, s_cost * s)\n    # Equation linking the cost of apple tarts to strawberry tarts\n    equation2 = Eq(s_cost, a_cost + 0.40)\n    # Equation representing the total cost\n    equation3 = Eq((a_cost * 2 * s) + (s_cost * s), 40)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (a_cost, s_cost, s))\n\n    # Number of apple tarts bought is twice the number of strawberry tarts\n    number_of_apple_tarts = 2 * solutions[s]\n    # Total number of tarts\n    total_tarts = number_of_apple_tarts + solutions[s]\n\n    return total_tarts\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    count_multiples_of_10 = total_numbers // 10\n    count_not_multiples_of_10 = total_numbers - count_multiples_of_10\n    percentage_not_multiples_of_10 = (count_not_multiples_of_10 / total_numbers) * 100\n\n    return percentage_not_multiples_of_10\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # km/h\n    rose_speed = 10  # km/h\n    meeting_time = 10  # hours\n\n    total_distance = (jack_speed + rose_speed) * meeting_time\n\n    return total_distance\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Each cat has 4 legs, 2 cats have a total of 8 legs\n    # Each dog has 4 legs, 2 dogs have a total of 8 legs\n    # A rabbit has 4 legs\n    legs_of_cats_dogs_rabbit = 8 + 8 + 4\n\n    # Since birds have 2 legs, let's find out how much legs are left for the birds\n    legs_left_for_birds = 28 - legs_of_cats_dogs_rabbit\n\n    # Divide the remaining legs by 2 to find the number of birds\n    number_of_birds = legs_left_for_birds // 2\n\n    return number_of_birds\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = 0\n    for i in range(1, 25, 2): # 1 to 24, odd numbers only\n        if 24 % i == 0:\n            n += i\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let Polly's age be x years when the sum of her children's ages is equal to her age.\n    # At that time, the ages of her children will be (x-20), (x-22), and (x-24) years respectively.\n\n    # Set up the equation where Polly's age is the sum of her children's ages.\n    # x = (x-20) + (x-22) + (x-24)\n    \n    # Simplify the equation:\n    # x = 3x - 66\n    # 66 = 2x\n    # x = 33\n\n    # Polly was 33 when the sum of her children's ages was equal to her age.\n\n    return 33\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n    \n    cards = [6, 12, 35, 175, 245, 300]\n    two_card_combinations = list(combinations(cards, 2))\n    three_card_combinations = list(combinations(cards, 3))\n    \n    two_card_products = {prod(comb): comb for comb in two_card_combinations}\n    three_card_products = {prod(comb): comb for comb in three_card_combinations}\n\n    for product in two_card_products.keys():\n        if product in three_card_products:\n            two_card_set = two_card_products[product]\n            three_card_set = three_card_products[product]\n            for card in cards:\n                if card not in two_card_set and card not in three_card_set:\n                    return card\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    ans = (2 * 5 + 1 * 5) == ((2 + 1) * 5)\n    return ans\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    # Let x be the total number of cards Melvin, Nelson and Oliver had at first.\n    # Let m, n, o be the number of cards Melvin, Nelson and Oliver have at the end.\n    # Initially, Melvin has 40 cards, so we have:\n    # x = 40 + (x - 40)\n    \n    # In the first round, Melvin gains 5/8 of his original number of cards from Nelson:\n    # m = 40 + (5/8)*40\n    \n    # In the second round, Melvin and Nelson lose 1/4 of Melvin's original number of cards to Oliver:\n    # m = m - (1/4)*40\n    # n = (x - 40) - (5/8)*40 - (1/4)*40\n    # o = 40 + (1/4)*40 + (1/4)*40\n    \n    # In the final round, Melvin gains 1/8 of his original number of cards from Nelson:\n    # m = m + (1/8)*40\n    # n = n - (1/8)*40\n    \n    # Finally, all three have the same number of cards:\n    # m = n = o\n    \n    # We can represent this with the following calculations\n    m = 40 + (5/8)*40 - (1/4)*40 + (1/8)*40\n    n = (40 + (5/8)*40 - (1/4)*40 + (1/8)*40) - (5/8)*40 - (1/8)*40\n    o = (1/4)*40 + (1/4)*40\n\n    # Since m = n = o, we can find out x by summing these up (because they're all the same)\n    x = m + n + o\n\n    return x\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    # This is an arithmetic sequence where a_1 = 2, a_n = 100, and d = 2 (common difference)\n    a_1 = 2\n    a_n = 100\n    d = 2\n\n    # The number of terms (n) in an arithmetic sequence can be found by: n = (a_n - a_1)/d + 1\n    n = (a_n - a_1)//d + 1\n\n    # The sum of an arithmetic sequence can be found by: S = n/2 * (a_1 + a_n)\n    S = n/2 * (a_1 + a_n)\n\n    return int(S)\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight_with_presents = 20  \n    multiple = 5\n    suitcase_weight = total_weight_with_presents / multiple\n\n    return suitcase_weight\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6*big_boxes) // 4\n        if small_boxes >= 0 and 4 * small_boxes + 6 * big_boxes == 50:\n            return big_boxes\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x - y, 39)\n    equation2 = Eq(x + y, 59)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    smaller_number = min(solutions[x], solutions[y])\n    return smaller_number\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = (5 * 4) + (6 * 8)\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Four years ago, the combined age of the 2 dogs was 10 years\n    combined_age_four_years_ago = 10\n\n    # Each year, each dog grows older by 1 year\n    # There are 2 dogs, so in 4 years, the combined age increases by 4 years * 2 dogs\n    age_increase_in_four_years = 4 * 2\n    \n    # Calculate the combined age right now\n    current_combined_age = combined_age_four_years_ago + age_increase_in_four_years\n\n    # Calculate the combined age in 2 more years\n    combined_age_in_two_years = current_combined_age + 2 * 2\n    \n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    return x - 12 + y\n\nans = solution(x, y)"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15 / 100\n    amount = 340\n\n    return percentage * amount\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    # from the equation 14m = 8(1m) - 3\n    # we can simplify it to 14m = 8m + 8 - 3\n    # bringing all terms involving m to one side, we get 14m - 8m = 8 - 3\n    # simplifying we get 6m = 5, so m = 5/6.\n\n    m = 5 / 6\n    return m\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    product_A_B = 30\n    product_B_C = 35\n    product_C_A = 42\n\n    # Use the product of the equations to solve for A^2 * B^2 * C^2\n    product_ABC_squared = product_A_B * product_B_C * product_C_A\n    ABC = int(product_ABC_squared ** (1/3))\n\n    # Find A, B, and C individually by dividing ABC by the known products\n    A = product_B_C // ABC\n    B = product_C_A // ABC\n    C = product_A_B // ABC\n\n    # Calculate the sum A+B+C\n    sum_ABC = A + B + C\n\n    return sum_ABC\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    \n    justin_age = 8 + years\n    mother_age = 32 + years\n    \n    equation = Eq(mother_age, 3 * justin_age)\n    \n    answer = solve(equation, years)\n    \n    return answer[0]\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    from math import factorial\n    return factorial(10)\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin (0, 0) and (4, 8), we can calculate the slope (m).\n    x1, y1 = 0, 0\n    x2, y2 = 4, 8\n    m = (y2 - y1) / (x2 - x1)\n\n    # Since the line passes through the origin, the y-intercept (b) is 0.\n    b = 0\n\n    # The equation of the line is y = mx + b\n    return f\"y={m}x+{b}\"\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of sweets Cora and Qingle have\n    cora, qingle = symbols('cora qingle')\n\n    # Create the equations based on the problem statement\n    eq1 = Eq(qingle + 8, cora - 8 + 4)  # After Cora gives 8 sweets to Qingle\n    eq2 = Eq(cora - qingle, cora - (qingle + 8))  # Difference in the number of sweets they have at first\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (cora, qingle))\n\n    # Calculate the difference in the number of sweets they have at first\n    difference = solutions[cora] - solutions[qingle]\n\n    return difference\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    max_num = 0\n    current_num = 0\n    for i in range(20,0,-1):\n        current_num += i  # Warren adds\n        max_num = max(max_num, current_num)\n        current_num -= (21 - i)  # Naida subtracts\n    return max_num\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    combined_rate = first_faucet_rate + 3 * other_faucet_rate\n    \n    time_to_fill_pool = 1 / combined_rate\n    return time_to_fill_pool\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Variables for Jane and Eric's seashells\n    jane, eric = symbols('jane eric')\n\n    # Original ratio of seashells Jane:Eric is 5:7\n    original_ratio = Eq(jane / eric, 5 / 7)\n    \n    # After Eric gives Jane 6 seashells, the new ratio becomes 11:13\n    new_ratio = Eq((jane + 6) / (eric - 6), 11 / 13)\n    \n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (jane, eric))\n    \n    # Calculate the total number of seashells\n    total_seashells = solutions[jane] + solutions[eric]\n\n    return total_seashells\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    both = piano_pupils / 4\n\n    neither = total_pupils - (piano_pupils + violin_pupils - both)\n\n    return int(neither)\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal_amount = 20000\n    interest_rate = 0.05\n    time_period = 11\n\n    total_amount = principal_amount * (1 + interest_rate * time_period)\n\n    return total_amount\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    from math import factorial\n\n    # Prime factorize each number\n    factors = [48, 925, 38, 435]\n    two_count = 0\n    five_count = 0\n\n    for factor in factors:\n        while factor % 2 == 0:\n            two_count += 1\n            factor //= 2\n        while factor % 5 == 0:\n            five_count += 1\n            factor //= 5\n\n    # The number of zeros is determined by the minimum of the count of 2's and 5's in the prime factorization\n    return min(two_count, five_count)\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    perm = permutations(digits)\n    \n    smallest_even = float('inf')\n    for p in perm:\n        number = int(''.join(map(str, p)))\n        if number % 2 == 0 and number < smallest_even:\n            smallest_even = number\n    \n    return smallest_even\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    days_in_a_week = 7\n    return days_in_a_week\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_second_stop = 22\n    remaining_after_first_stop = remaining_after_second_stop / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    import math\n\n    # Define the area of the isosceles right triangle\n    waist_length = 2\n    triangle_area = (waist_length**2) / 2\n\n    # Define the area of the quarter circle\n    quarter_circle_area = math.pi * (1**2) / 4\n\n    # Calculate the probability\n    probability = quarter_circle_area / triangle_area\n\n    return probability\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10):\n            if A == (1/4) * D:\n                for B in range(0, 10):\n                    if B == A - 1:\n                        for C in range(0, 10):\n                            if C != A and C != B and C != D:\n                                ABCD = 1000 * A + 100 * B + 10 * C + D\n                                DCBA = 1000 * D + 100 * C + 10 * B + A\n                                if 4 * ABCD == DCBA:\n                                    return ABCD\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    A_in_Maths = 10\n    A_in_English = 15\n    A_in_both = 2\n\n    A_in_either = A_in_Maths + A_in_English - A_in_both\n\n    return A_in_either\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    time_bus_caught = datetime.strptime(\"16:01\", \"%H:%M\")\n    bus_trip_duration = timedelta(minutes=18)\n    time_got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    time_spent_walking = (time_bus_caught - time_left_school) + (time_got_home - (time_bus_caught + bus_trip_duration))\n    total_walking_minutes = time_spent_walking.seconds // 60\n    \n    return total_walking_minutes\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for num in range(100, 200):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    result = 25\n    initial_result = result - 10\n    original_number = initial_result * 3\n    return original_number\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    total_number = 2030452\n    extracted_number = total_number - 30000 - 452\n    missing_number = extracted_number // 2\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150\n    half_length_m = (total_length_cm / 2) / 100\n    return half_length_m\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]  # given numbers without 'a'\n    mean = 5  # given mean\n    \n    # The mean is the sum of the numbers divided by the count of numbers\n    total_with_a = mean * (len(numbers) + 1)  # total sum including 'a'\n    total_without_a = sum(numbers)            # total sum without 'a'\n    \n    a = total_with_a - total_without_a  # calculate 'a' by subtracting\n    return a\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Worst case scenario:\n    # Lina gets 1 white sock, 1 grey sock, and 1 black sock in the first three tries.\n    # On the 4th try, irrespective of the color she gets, she will have a pair.\n    return 4\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_victoria_row = 6 + 1 + 7  # pupils to the left, Victoria herself, and pupils to the right\n    total_rows = 1 + 1 + 8  # row in front of her, Victoria's row, and rows behind her\n    total_pupils = pupils_in_victoria_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_two_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_in_two_tests\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 0.012\n    time_period = 1\n\n    interest = principal * interest_rate * time_period\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator_sum = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1/(i*(21-i)) for i in range(11, 16))\n\n    ans = numerator_sum / denominator_sum\n\n    return ans\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown number\n    n = symbols('n')\n    \n    # Write the equation step by step\n    # Step 1: A number is added to 3: (n + 3)\n    # Step 2: The new sum is divided by 4: (n + 3)/4\n    # Step 3: The quotient is then multiplied by 9: 9 * ((n + 3) / 4)\n    # The resulting answer is 81: 9 * ((n + 3) / 4) = 81\n    \n    # Form the equation\n    equation = Eq(9 * ((n + 3) / 4), 81)\n    \n    # Solve the equation for n\n    solutions = solve(equation, n)\n    \n    # The solution is the number we need\n    return solutions[0]\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    return (17 - 2) / 5\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    distance_covered = 6300 - 1800  # Distance covered in 30 minutes\n    distance_remaining = 1800  # Distance remaining at 8.30 am\n    time_taken_to_cover_remaining_distance = (30 / distance_covered) * distance_remaining\n    \n    # Peter's arrival time in minutes after 8.00 am\n    arrival_time_in_minutes = 30 + time_taken_to_cover_remaining_distance\n\n    # Convert total time to hours and minutes\n    hours = int(arrival_time_in_minutes // 60)\n    minutes = int(arrival_time_in_minutes % 60)\n\n    # Since he started at 8.00 am, we add the hours and minutes\n    arrival_hour = 8 + hours\n    arrival_minute = 0 + minutes\n\n    # If minutes reach 60, add one hour and reset minutes to zero\n    if arrival_minute >= 60:\n        arrival_hour += 1\n        arrival_minute -= 60\n\n    return f'{arrival_hour}:{arrival_minute:02} am'\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    mr_smith_sugar = 300 * 0.50 + 600 * 0.20\n    mrs_smith_sugar = 700 * 0.10 + 300 * (x / 100)\n    \n    total_volume_mr_smith = 300 + 600\n    total_volume_mrs_smith = 700 + 300\n\n    equation = Eq(mr_smith_sugar / total_volume_mr_smith, mrs_smith_sugar / total_volume_mrs_smith)\n    \n    x_value = solve(equation, x)\n    return round(x_value[0], 2)\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    to_lily = total_candy * 3 / 4\n    remaining_after_lily = total_candy - to_lily\n    to_brother = remaining_after_lily / 3\n    remaining_candy = remaining_after_lily - to_brother\n\n    return remaining_candy\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n\n    total_pancakes = pancakes_per_minute * minutes\n\n    return total_pancakes\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age, kenny_age, brother_age = symbols('may_age kenny_age brother_age')\n    may_current_age = 7\n\n    # When May is 10 years old\n    may_future_age = 10\n    equation1 = Eq(kenny_age + brother_age, 3 * may_future_age)\n    equation2 = Eq(kenny_age, brother_age + 2)\n\n    # Solve for Kenny and his brother's current age\n    ages = solve((equation1, equation2), (kenny_age, brother_age))\n\n    # Kenny's current age\n    kenny_current_age = ages[kenny_age] - (may_future_age - may_current_age)\n\n    # Calculate how much older Kenny is than May\n    kenny_may_age_difference = kenny_current_age - may_current_age\n\n    return kenny_may_age_difference\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total money Amy had initially as 'm'\n    m = symbols('m')\n\n    # Price per donut and muffin\n    price_per_donut = 10 / 7\n    price_per_muffin = 6 / 3\n\n    # Amy spends half her money on donuts and half on muffins.\n    # She gets 54 more donuts than muffins.\n    # m/2 is the money spent on donuts,\n    # m/2 is the money spent on muffins.\n    # The total numbers of donuts and muffins bought are m/(2*price_per_donut)\n    # and m/(2*price_per_muffin), respectively.\n\n    # Equation based on the number of muffins and donuts\n    equation = Eq(m / (2 * price_per_donut) - m / (2 * price_per_muffin), 54)\n\n    # Solving for 'm', the total amount of money Amy had\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n    # Deduct the minimum number of apples to guarantee each child gets one\n    total_apples -= children\n    # The remaining apples can be given to one child, plus the one apple he/she initially got.\n    max_apples_for_one_child = total_apples + 1\n    return max_apples_for_one_child\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Total weight of sweets in grams\n    total_weight_grams = 5000  # 5 kg converted into grams\n    # Weight of each bag of sweets in grams\n    weight_per_bag = 250\n    # Total number of bags\n    total_bags = total_weight_grams / weight_per_bag\n    \n    # Cost price for the sweets\n    total_cost_price = 10  # in pounds\n    # Selling price per bag in pounds\n    selling_price_per_bag = 65 / 100  # converted pence into pounds\n    \n    # Total selling price for all sweets\n    total_selling_price = total_bags * selling_price_per_bag\n    \n    # Profit calculation\n    profit = total_selling_price - total_cost_price\n    \n    # Percentage profit calculation\n    percentage_profit = (profit / total_cost_price) * 100\n    \n    return int(percentage_profit)\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    distance_per_interval = 30 / (9 - 4)\n    total_length_mm = distance_per_interval * (100 - 1)\n    total_length_cm = total_length_mm / 10\n    return total_length_cm\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total_sum = 46563 + 9785 + 859\n    return total_sum\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    total_permutations = 5!  # Total permutations for 5 people\n    adjacent_permutations = 2! * 4!  # Permutations where the two are adjacent\n\n    # Subtract the cases where the two are adjacent from total permutations\n    non_adjacent_permutations = total_permutations - adjacent_permutations\n    \n    return non_adjacent_permutations\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sales = total_vegetables * (2/3)\n    remaining_after_monday = total_vegetables - monday_sales\n    tuesday_sales = remaining_after_monday * (2/5)\n    total_sales = monday_sales + tuesday_sales\n    return total_sales\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # The maximum number of balls you might pick, without picking 16 of one color and 13 of another\n    # is obtained by picking 15 balls of each color + 12 balls of another color.\n    # The next ball picked has to either give us the 16th ball of a color or the 13th ball of another.\n    max_balls_without_complete_set = (15 * 5) + (12 * 4)\n    \n    # Now pick one more to ensure we get the required set.\n    min_balls_for_required_set = max_balls_without_complete_set + 1\n    \n    return min_balls_for_required_set\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # grandmother's age on 1st December 2008\n    grandmother_age_2008 = 80\n    # mum's age on 1st December 1996\n    mum_age_1996 = 40\n    \n    # Calculate the years between 1996 and 2008\n    years_between = 2008 - 1996\n\n    # Calculate how old the mum was in 2008\n    mum_age_2008 = mum_age_1996 + years_between\n    \n    # Calculate how old the grandmother was when mum was 25\n    # First, find the difference in age between mum and grandmother\n    age_difference = grandmother_age_2008 - mum_age_2008\n\n    # Now we find the grandmother's age when mum was 25\n    grandmother_age_when_mum_25 = 25 + age_difference\n    return grandmother_age_when_mum_25\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    return 26.1 / 10000\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    sum_positive = sum(range(5, 860, 10))\n    sum_negative = sum(range(-10, -860, -20))\n    ans = sum_positive + sum_negative\n    return ans\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # To distribute 5 identical ice-cream cones to 3 friends with each getting at least 1 cone,\n    # we can use the stars and bars method.\n    # If each friend gets at least 1 cone, then we have 5 - 3 = 2 cones left to distribute freely among the 3 friends.\n    # The problem then becomes equivalent to placing 2 indistinguishable items into 3 distinguishable bins.\n    # Using stars and bars, the number of ways to distribute these is (n + k - 1) choose (k - 1),\n    # where n is the number of items and k is the number of bins.\n    # In this case, n = 2 (remaining cones) and k = 3 (friends).\n\n    from math import comb\n    n = 2  # Remaining cones\n    k = 3  # Friends\n    num_ways = comb(n + k - 1, k - 1)\n    return num_ways\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p, q = symbols('p q')\n\n    equation1 = Eq(p, 4 * q)\n    equation2 = Eq(p, q + 2700)\n\n    solutions = solve((equation1, equation2), (p, q))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    biscuits_given = total_biscuits / 4\n    remaining_biscuits = total_biscuits - biscuits_given\n    return remaining_biscuits\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t, c = symbols('t c') # t - cost of one table, c - cost of one chair\n\n    # 2 tables and 5 chairs cost £220\n    equation1 = Eq(2*t + 5*c, 220)\n    \n    # cost of one table is the same as the cost of 3 chairs\n    equation2 = Eq(t, 3*c)\n\n    solutions = solve((equation1, equation2), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    sum_of_numbers = sum(numbers)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    total_spent = 1.55 + 2.25\n    remaining_fraction = 4/5\n    initial_money = total_spent / (1 - remaining_fraction)\n    return initial_money\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    A, B, C = symbols('A B C')\n\n    # Define the equations\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the value of B\n    return solutions[B]\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 40 / 100 * 75\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann = 3\n    sana = 6\n    nancy = 8\n    total_coins = joann + sana + nancy\n    \n    return total_coins\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    difference = -1\n    num_terms = 30\n\n    sum_terms = (num_terms / 2) * (2 * first_term + (num_terms - 1) * difference)\n    \n    return sum_terms\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n    \n    pizza_per_person = pizzas_initial / people_initial\n    pizzas_needed = pizza_per_person * people_final\n\n    return round(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    from math import log2\n\n    teams = 16\n    rounds = log2(teams)\n\n    return int(rounds)\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    # Ratios of Lucas to his mother\n    ratio_lucas = 3\n    ratio_mother = 5\n\n    # Total distance travelled when they are 4 miles apart\n    total_distance_travelled = 20 - 4\n\n    # Lucas's share of the distance travelled\n    lucas_distance = (ratio_lucas / (ratio_lucas + ratio_mother)) * total_distance_travelled\n\n    return lucas_distance\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    import math\n\n    count = 0\n    for i in range(1, 2017):\n        if math.sqrt(i * 72).is_integer():\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n\n    eq = Eq(marion - ethan, -168)\n\n    julie_salary = solve(eq, julie)[0]\n    marion_salary = 2 * julie_salary\n    ethan_salary = 5 * julie_salary\n\n    total_salary = julie_salary + marion_salary + ethan_salary\n\n    return total_salary\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    # Finding the numerator of the fraction. Since the fraction of 35 equals 21, we can find the number that goes\n    # into the box by dividing 21 by the value 35 is being multiplied by (in this case, 1/5)\n    numerator = 21 / (35 * (1/5))\n    \n    return int(numerator)\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_class, small_class = symbols('big_class small_class')\n\n    # Each student from the big class received 2 apples and 3 oranges\n    # Each student from the small class received 2 apples and 2 oranges\n    # In total, 48 apples and 55 oranges were given\n\n    # Create equations based on the given information\n    equation1 = Eq(2*big_class + 2*small_class, 48) # Apples equation\n    equation2 = Eq(3*big_class + 2*small_class, 55) # Oranges equation\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (big_class, small_class))\n\n    # Return the number of students in the small class\n    return solutions[small_class]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    number_of_lollipops = 10\n    total_cost = cost_per_lollipop * number_of_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Chinese Remainder Theorem:\n    # x ≡ 0 (mod 5)\n    # x ≡ 6 (mod 7)\n    # x ≡ 7 (mod 8)\n    \n    congruences = [(0, 5), (6, 7), (7, 8)]\n    least_num_children = solve_congruence(*congruences)[0]\n    \n    return least_num_children\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wands, cards = symbols('wands cards')\n    \n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n    \n    solutions = solve((equation1, equation2), (wands, cards))\n    \n    return solutions[wands]\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the number of years it will take for the ratio to become 5:3\n    years = symbols('years')\n\n    # Efron is x years old, and Danny is x+30 years old currently.\n    # According to the current ratio 8:3, we have 8x = 3(x+30)\n    # Solving for x gives us Efron's current age.\n    efron_current_age = solve(Eq(8 * 3, 3 * (3 + 30)), 3)[0]\n\n    # Danny's current age is Efron's current age plus 30\n    danny_current_age = efron_current_age + 30\n\n    # Set up the equation for the future ages based on the years variable\n    equation = Eq((danny_current_age + years) / (efron_current_age + years), 5/3)\n\n    # Solve the equation for the number of years\n    future_years = solve(equation, years)\n\n    # Return the number of years it will take for the ratio to become 5:3\n    return future_years[0]\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_initial = 100\n    butter_initial = 40\n    cookies_final = 150\n\n    # The ratio of butter per cookie remains the same\n    butter_per_cookie = butter_initial / cookies_initial\n    butter_final = butter_per_cookie * cookies_final\n\n    return butter_final\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for number in range(1, 405):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ways_to_choose_pencil_and_ruler = pencils * rulers\n    ways_to_choose_pencil_and_pen = pencils * pens\n    ways_to_choose_ruler_and_pen = rulers * pens\n\n    ans = ways_to_choose_pencil_and_ruler + ways_to_choose_pencil_and_pen + ways_to_choose_ruler_and_pen\n\n    return ans\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Number of games in group stage for each group:\n    # For a single round-robin tournament with 4 teams, each team plays 3 games,\n    # and there are 4 choose 2 combinations = 6 games in total in one group.\n    games_per_group = (4 * 3) // 2\n\n    # Total games in group stage for all groups:\n    total_groups = 8\n    group_stage_games = games_per_group * total_groups\n\n    # Number of games in knockout rounds:\n    # Round of 16 + Quarter-finals + Semi-finals + Third place + Final\n    # 16 teams in the round of 16, so 8 games there\n    # 8 teams in the quarter-finals, so 4 games\n    # 4 teams in the semi-finals, so 2 games\n    # 1 third place game and 1 final game\n    knockout_stage_games = 8 + 4 + 2 + 1 + 1\n\n    # Total games played in the World Cup:\n    total_games = group_stage_games + knockout_stage_games\n\n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    # Loop through possible second digits from 1 to 4\n    # because 1st digit is one more than twice the 2nd digit (max 2nd digit is 4 to keep 1st digit < 10)\n    for second_digit in range(1, 5):\n        first_digit = 1 + 2 * second_digit\n        # Loop through possible third digits from 0 to 9\n        for third_digit in range(0, 10):\n            if 10 <= (first_digit + second_digit + third_digit) <= 13:  # sum condition\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    return -6 / 6 == 6\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    matches = 15\n    n = 1\n    while n * (n - 1) / 2 != matches:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    n = 224\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    number = 210 / 0.7\n    return number\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(3*apple + 2*banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations for the cost of an apple and a banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ways = pencils * rulers * pens\n\n    return ways\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    shorts, tshirt = symbols('shorts tshirt')\n    \n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n    \n    solutions = solve((equation1, equation2), (shorts, tshirt))\n    \n    return solutions[tshirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the number of triangles, then the number of quadrilaterals is t + 82.\n    # Given there are 2 pentagons.\n    # The total number of sides is given as 394.\n    # sides of triangles (3 * t) + sides of quadrilaterals (4 * (t + 82)) + sides of pentagons (5 * 2) = 394\n\n    t = symbols('t')\n    equation = Eq(3 * t + 4 * (t + 82) + 5 * 2, 394)\n\n    # Solve for t\n    solutions = solve(equation, t)\n\n    # Number of quadrilaterals\n    quadrilaterals = solutions[0] + 82\n\n    return quadrilaterals\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    score_for_correct = 6\n    score_for_incorrect = -2\n    total_score = 44\n    \n    # Let x be the number of correctly answered questions\n    # Then, the number of incorrectly answered questions is (total_questions - x)\n    # The total score is then x * score_for_correct + (total_questions - x) * score_for_incorrect\n    # Which simplifies to x * (score_for_correct - score_for_incorrect) - total_questions * score_for_incorrect\n    # So we solve for x given the total score\n    for x in range(total_questions + 1):\n        if x * score_for_correct + (total_questions - x) * score_for_incorrect == total_score:\n            return x\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens_digit in range(1, 10):\n        ones_digit = tens_digit - 3\n        if ones_digit >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n    third_term = second_term + common_difference\n\n    return third_term\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_each = 25\n    number_of_gaps = 3  # since there are 4 posts, there are 3 gaps between them\n    total_distance = distance_between_each * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for num in range(lcm, 1000, lcm):  # Start from lcm and increment by lcm\n        if str(num).startswith('6'):  # Check if the number starts with 6\n            return num\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    return 63 - (55 - 27)\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r be the number of sweets Rachel has, and a be the number of sweets Alice has\n    r, a = symbols('r a')\n    \n    # If Rachel gives Alice 10 sweets, they have the same amount\n    equation1 = Eq(r - 10, a + 10)\n    \n    # If both eat 8 sweets, Rachel has 3 times as many as Alice\n    equation2 = Eq(r - 8, 3 * (a - 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # The total number of sweets originally\n    total_sweets = solutions[r] + solutions[a]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    total_students = 150\n    one_boy_teams = 15\n    two_or_more_boy_teams = 27\n\n    # All-boys teams + all-girls teams + one-boy teams + teams with two or more boys = total teams\n    # Let the number of all-girls teams be x\n    # Then the number of all-boys teams is 2x\n    # Total teams = 2x + x + one_boy_teams + two_or_more_boy_teams\n    total_teams = total_students // 3\n    all_girl_teams = (total_teams - one_boy_teams - two_or_more_boy_teams) // 3\n\n    # number of girls = all-girl teams * 3\n    girls = all_girl_teams * 3\n\n    return girls\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Difference in time between cycling at 10 km/h and 15 km/h\n    time_diff = 2 # hours (from 8am to 10am)\n    \n    # Distance remains the same, so we can set the distance equation\n    # Speed * Time = Distance, and since the distance is the same we can equate them:\n    # 10 km/h * (Time at 10 km/h) = 15 km/h * (Time at 15 km/h - 2 hours)\n    # Let Time at 10 km/h be 't', then:\n    # 10 * t = 15 * (t - 2)\n    \n    # Solve the equation for 't'\n    t = (15 * 2) / (15 - 10) # Simplifying the equation\n    \n    # Now we have the time it takes to cycle at 10 km/h to get at 10am which is 't'.\n    # To find out the speed required to arrive at 9am, we subtract one hour from the time at 10 km/h\n    # Speed = Distance / Time, so the Distance can be expressed as Distance = 10 * t\n    # Required speed = Distance / (t - 1)\n    required_speed = (10 * t) / (t - 1)\n    \n    return required_speed\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert numbers from base 10 to base 7\n    num1_base7 = int(str(61), 7)\n    num2_base7 = int(str(34), 7)\n    \n    # Perform the subtraction in base 10\n    result_base10 = num1_base7 - num2_base7\n    \n    # Convert the result back to base 7\n    result_base7 = ''\n    while result_base10 > 0:\n        result_base7 = str(result_base10 % 7) + result_base7\n        result_base10 //= 7\n    \n    return int(result_base7)\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # 1 dog = 8 rabbits, and 1 rabbit = 2 chickens.\n    # Therefore, 1 dog = 8 * 2 chickens.\n    dog_to_chicken_ratio = 8 * 2\n    return dog_to_chicken_ratio\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # We use the Pigeonhole Principle to find the smallest number of gloves.\n    # The worst case is pulling out all gloves of one type (left or right) before getting a matching pair.\n    # Since there are 1+3 left gloves and 2+4 right gloves, let's assume the worst case.\n    left_gloves = 1 + 3 # Sum of left-hand gloves\n    right_gloves = 2 + 4 # Sum of right-hand gloves\n\n    # The worst case: pulling all left gloves and 1 right, or all right gloves and 1 left.\n    # We need to consider one additional glove to guarantee a pair of either left or right.\n    gloves_needed = max(left_gloves, right_gloves) + 1\n\n    return gloves_needed\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    initial_students = 5\n    initial_candies_per_student = 12\n    new_students = initial_students + 1\n\n    total_candies = initial_students * initial_candies_per_student\n    new_candies_per_student = total_candies // new_students\n\n    return new_candies_per_student\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    num = 1\n    while True:\n        if num % 4 == 3 and num % 5 == 4 and num % 7 == 6:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    \n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return round(final_value, 4)\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    for i in range(1, 100):  # Assuming the total layers do not exceed 100 for simplicity\n        # Boys are in layers 1, 3, 5, ... (odd layers)\n        # Girls are in layers 2, 4, 6, ... (even layers)\n        boys = ((i * 2 - 1)**2 + ((i - 1)//2) * 2 * 8) if i%2 else (i**2 + (i//2) * 2 * 8)\n        girls = (((i-1) * 2)**2 + ((i - 2)//2) * 2 * 8) if i > 1 else 0\n        \n        if boys - girls == 52:\n            total_students = boys + girls\n            return total_students\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    letters_count = {letter: word.count(letter) for letter in set(word)}\n    ans = factorial(len(word))\n    for count in letters_count.values():\n        ans //= factorial(count)\n    return ans\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    return 825\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for the number of pins Eugene and Yuna initially have\n    eugene_pins, yuna_pins = symbols('eugene_pins yuna_pins')\n    \n    # Equation representing the relationship before Yuna buys more pins\n    # Eugene had 3 times as many pins as Yuna\n    equation1 = Eq(eugene_pins, 3 * yuna_pins)\n    \n    # Equation representing the relationship after Yuna buys pins\n    # Yuna has 7/9 as many pins as Eugene after buying 76 pins\n    equation2 = Eq(yuna_pins + 76, (7/9) * eugene_pins)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eugene_pins, yuna_pins))\n    \n    # Extract the solution for the number of pins Eugene had\n    return solutions[eugene_pins]\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    normal_price = 480\n    discount_percentage = 35\n    sale_price = normal_price * (1 - discount_percentage / 100)\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To ensure victory, Kelly must leave an even number of matches for Dan\n    # so that she always has the opportunity to win.\n    # She can do this by taking 1 match in her first turn.\n    # Then no matter whether Dan takes 1 or 2 matches, \n    # Kelly can always make the total matches taken in each round (by both players) 3\n    # This will continue until Kelly can take the last match and win.\n    \n    return 1\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n\n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4 * remaining_flowers / 7\n\n    equation = Eq(red_flowers, pink_flowers + 6)\n\n    solutions = solve(equation, total_flowers)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # Since the number is divisible by 9,\n    # the sum of its digits must be divisible by 9.\n    # We already have the sum of the first 5 digits: 1 + 2 + 3 + 4 + 5 = 15.\n    sum_of_digits = 15\n    # We now need to find an A such that (sum_of_digits + A) is divisible by 9.\n    # The smallest possible value for A that satisfies this condition is:\n    A = (9 - (sum_of_digits % 9)) % 9\n    # Now we have a six-digit number where the last digit is A.\n\n    # For a number to be divisible by 4, the last two digits must\n    # form a number that is divisible by 4.\n    # Thus, we only care about the number formed by the last two digits: 5A.\n    # Since A is a single digit, we need to compute (5A) % 4.\n\n    # Construct the actual last two digits of the number.\n    last_two_digits = 50 + A\n    # Compute the remainder when the last two digits divided by 4.\n    remainder = last_two_digits % 4\n\n    return remainder\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    from fractions import Fraction\n\n    numerator = Fraction(5 * 7 + 1, 7) + Fraction(3 * 11 + 3, 11) + Fraction(1 * 23 + 13, 23)\n    denominator = Fraction(3 * 7 + 3, 7) + Fraction(2 * 11 + 2, 11) + Fraction(1 * 23 + 1, 23)\n\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    sum_squares = (1/6) * n * (n + 1) * (2 * n + 1)\n    return int(sum_squares)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    num_ways = factorial(num_kids)\n\n    return num_ways\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    return (65 + 3) // 4\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    vehicles = 27\n    total_wheels = 78\n\n    # Suppose all vehicles are motorcycles, calculate the excess wheels if this were true\n    all_motorcycles_wheels = 2 * vehicles\n    excess_wheels = total_wheels - all_motorcycles_wheels\n\n    # Each car adds 2 more wheels than a motorcycle\n    cars = excess_wheels // 2\n    return cars\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of stickers Nicole had originally as 'nicole'.\n    jason, nicole = symbols('jason nicole')\n    \n    # At first, Jason had 20 stickers.\n    jason_initial = 20\n    \n    # After Nicole gave Jason 18 stickers, Jason had 5 fewer stickers than Nicole.\n    # So, after giving away the stickers, Nicole had (nicole - 18) stickers.\n    # Jason had jason_initial + 18 stickers after receiving them.\n    # According to the problem, Jason had 5 stickers less than Nicole after the exchange.\n    # Therefore, (jason + 18) = (nicole - 18) - 5\n\n    equation = Eq(jason_initial + 18, nicole - 18 - 5)\n    \n    # Solving for 'nicole' to find out how many stickers she initially had.\n    solution = solve(equation, nicole)\n    \n    # Returning the number of stickers Nicole had initially.\n    return solution[nicole]\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original length, breadth, and height of the cuboid are 100% each\n    # Candy performed the following changes:\n    # Increased the length by 10%, making it 110%\n    # Reduced the breadth to 4/5 of the original breadth, making it 80%\n    # The new height to the original height ratio is 11:10, so the new height is 110%\n    \n    # Calculate the new volume as a percentage of the original\n    # Original volume (for calculation purposes) = 100% * 100% * 100% = 100%\n    # New volume = 110% * 80% * 110%\n    new_volume_percentage = (110 / 100) * (80 / 100) * (110 / 100) * 100\n    \n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    count = 0\n    for two_gram_weights in range(0, 77 // 2 + 1):\n        for three_gram_weights in range(0, 77 // 3 + 1):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_initial = 180  # meters per minute\n    time_initial = 6  # minutes\n    speed_tired = 120  # meters per minute\n    time_tired = 8  # minutes\n\n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correction = 81 - 18\n    correct_total = incorrect_total - correction\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    num_marshals = 9\n    # Subtract 1 from the number of marshals to get the number of intervals\n    num_intervals = num_marshals - 1\n    # Convert total distance to meters\n    total_distance_m = total_distance_km * 1000\n    # Divide the total distance by the number of intervals to get distance between marshals\n    distance_between_marshals = total_distance_m / num_intervals\n    return distance_between_marshals\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    rate = 0.03\n    interest_first_year = principal * rate\n    principal_second_year = principal + interest_first_year\n    interest_second_year = principal_second_year * rate\n    return interest_second_year\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # Initialize the number of tiles for each color\n    red_tiles = 0\n    green_tiles = 0\n    \n    # The total number of tiles is 400, which means the wall is a 20x20 square\n    # (since 20x20 = 400), and each layer from the outside to the inside alternates colors\n    \n    # Starting with the outer layer and moving inward\n    total_layers = 20 // 2  # There are 10 full layers because the tiles are in pairs (red-green)\n    \n    # Calculate the number of red and green tiles\n    for layer in range(1, total_layers + 1):\n        # The number of tiles in the current layer is (side length of the layer)^2\n        layer_side_length = 20 - (layer - 1) * 2  # Subtracting 2 for each layer (1 on each side)\n        layer_tiles = layer_side_length**2\n        \n        # If the layer is odd-numbered, it gets red tiles; otherwise, green tiles\n        if layer % 2 != 0:\n            red_tiles += layer_tiles\n        else:\n            green_tiles += layer_tiles\n    \n    # Find out which colour of the tile is more and by how many\n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    more_tiles = abs(red_tiles - green_tiles)\n    \n    return (dominant_color, more_tiles)\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 80  # minutes (1 hour and 20 minutes = 60 + 20)\n\n    num_pictures = total_time_available / time_for_one_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    mixed_number = 1 + 4/7\n    decimal_number = round(mixed_number, 1)\n    return decimal_number\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    decimal_part = \"428571\"  # recurring part of the decimal\n    index = 69 % len(decimal_part) - 1  # Get the position of the 69th digit in the recurring part\n    ans = int(decimal_part[index])  # Convert the digit to an integer\n    return ans\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    total_salt = 300 * 0.35 + 200 * 0.50  # grams\n    total_solution = 300 + 200  # grams\n\n    concentration = total_salt / total_solution  # as a decimal\n\n    return concentration * 100  # as a percentage\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution(y):\n    return y / 2\n\nans = solution(y)"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    # Let's denote:\n    # P = planned profit (which is 50% of the cost price)\n    # T = total profit (which is 82% of planned profit P)\n    # C = cost price of the goods\n    # S1 = sales from the first day\n    # S2 = sales from the second day\n    # D = discount rate for the second day\n    \n    # Calculate the total profit, T\n    T = 0.82 * 0.50\n    \n    # Calculate the sales from the first day\n    # Sold 70% of goods at 50% profit\n    S1 = 0.70 * (1 + 0.50)\n    \n    # Remaining goods is 30% of C. The income from selling remaining goods is the total income minus income from the first day\n    # S1 * C + S2 * C = total sales = C + (T * C), we simplify to S1 + S2 = 1 + T\n    # S2 = 1 + T - S1\n    \n    # The second day sales after discount is equal to 30% of goods at cost price minus the discount on those goods\n    # So S2 = 0.30 * (1 - D) where D is the discount rate.\n    \n    # Now we solve for D\n    S2 = 1 + T - S1\n    D = (0.30 - S2) / 0.30\n    \n    # Convert D to percentage\n    discount_rate = D * 100\n    \n    return discount_rate\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Megacorp's widget sales in 2014 and 2015\n    megacorp_2014, megacorp_2015 = symbols('megacorp_2014 megacorp_2015')\n    \n    # Vastco's widget sales in 2014 are 68% more than Megacorp's sales in 2014\n    vastco_2014 = megacorp_2014 * 1.68\n    \n    # Vastco's widget sales in 2015 are 32% more than in 2014\n    vastco_2015 = vastco_2014 * 1.32\n    \n    # Vastco's widget sales in 2015 are 44% more than Megacorp's sales in 2015\n    vastco_2015_eq = Eq(vastco_2015, megacorp_2015 * 1.44)\n\n    # Solve the equation to find Megacorp's sales in 2015\n    megacorp_2015_solution = solve(vastco_2015_eq, megacorp_2015)[0]\n\n    # The percentage increase in Megacorp's widget sales from 2014 to 2015\n    percentage_increase = ((megacorp_2015_solution - megacorp_2014) / megacorp_2014) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = 48\n\n    while empty_bottles >= 4:\n        new_bottles, empty_bottles_left = divmod(empty_bottles, 4)\n        total_bottles += new_bottles\n        empty_bottles = new_bottles + empty_bottles_left\n\n        # Borrowing one bottle if needed\n        if empty_bottles == 3 and new_bottles != 0:\n            total_bottles += 1\n            empty_bottles = 0\n\n    return total_bottles\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each child's age\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter', integer=True)\n    \n    # Equations according to the problem statement\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation2 = Eq(younger_son, older_son + 3)\n    equation3 = Eq(younger_daughter, older_daughter + 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Find the youngest child's age, which will be the minimum of the solutions\n    youngest_child_age = min(solutions[older_son], solutions[younger_son], solutions[older_daughter], solutions[younger_daughter])\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Calculate the number of digits within ranges 1-9, 10-99, 100-113\n    digits_1_9 = 9  # Numbers 1 to 9 have one digit each\n    digits_10_99 = (99 - 10 + 1) * 2  # Numbers 10 to 99 have two digits each\n    digits_100_113 = (113 - 100 + 1) * 3  # Numbers 100 to 113 have three digits each\n\n    # Add them up to get the total number of digits\n    total_digits = digits_1_9 + digits_10_99 + digits_100_113\n\n    return total_digits\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n    days_for_one_worker = total_work / 1\n    return days_for_one_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    # Let x be the total number of pearls originally on the strand\n    # According to the problem, we have the following equation:\n    # x = (1/2)x + (1/4)x + (1/6)x + 3\n    # We need to find the value of x that satisfies this equation\n\n    from fractions import Fraction\n    \n    # Convert to a common denominator and set up the equation:\n    # (6/12)x + (3/12)x + (2/12)x + 3 = x\n    # Simplify the fractions: (11/12)x + 3 = x\n    \n    # Move everything to one side: (11/12)x - x + 3 = 0\n    # Combine like terms: (-1/12)x + 3 = 0\n    # Isolate x: x = 3/(1/12) \n    # Multiply both sides by 12 to get rid of the fraction: 12 * 3 = x\n    \n    x = 12 * 3\n    return x\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import permutations\n\ndef solution():\n    persons = ['Len', 'Joe', 'Angle', 'Jack']\n    entrances = [1, 2, 3]\n    count = 0\n    for perm in permutations(persons):\n        for first_entrance in entrances:\n            for second_entrance in entrances:\n                for third_entrance in entrances:\n                    if len(set([first_entrance, second_entrance, third_entrance])) == 3:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john - brother, 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    # Define the number of glasses\n    total_glasses = 100\n    \n    # Let's use 'b' for the number of glasses broken\n    # Peter earns $1 for each glass delivered safely, so he earns $(100 - b) for those\n    # Peter pays $1 for each glass broken, so he pays $b for those\n    # Peter makes $92 in total, so we set up the equation: (100 - b) - b = 92\n    \n    # Simplifying the equation we get: 100 - 2b = 92\n    # Now we solve for b\n    b = (100 - 92) // 2  # We use integer division since the number of glasses cannot be a fraction\n    \n    return b\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    # Let n be the number of teams, then the total number of games\n    # played in a round-robin format is n*(n-1)/2\n    n = Symbol('n', integer=True)\n    \n    # Equation for round-robin games, solving for n \n    equation = n*(n-1)/2 - 45\n    \n    # Solve for n and find the positive integer solution\n    number_of_teams = solve(equation, n)\n    \n    # Filter positive solutions since number of teams cannot be negative\n    number_of_teams = [sol.evalf() for sol in number_of_teams if sol.is_real and sol > 0]\n\n    # Return the solution as integer\n    return int(number_of_teams[0])\n    \nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    black, white, grey = symbols('black white grey')\n    \n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n    \n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n    \n    return solutions[white]\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    result = (40 - 4) / 2\n    return result\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_of_one_banana = 98 / 7\n    cost_of_fifteen_bananas = cost_of_one_banana * 15\n    change = 1200 - cost_of_fifteen_bananas\n    return change\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for x in range(1, 57, 2):\n        if x + (x + 2) + (x + 4) == 57:\n            return x\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    x, y = symbols('x y')\n\n    # x represents the number of boats originally\n    # y represents the number of people per boat originally\n    equation1 = Eq((x - 1) * 9, x * y)\n    equation2 = Eq((x + 1) * 6, x * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Total number of people in the class (x boats each with y people)\n    total_people = solutions[x] * solutions[y]\n    return total_people\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for num in [2, 6, 1, 10, 5, 3]:\n        if num * 3 == 6:\n            return num\n    return None\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            x3 = 15 - x1 - x2\n            if x3 >= 3 and x1 <= x2 <= x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, peter = symbols('john peter')\n\n    equation1 = Eq(john, peter + 180)\n    equation2 = Eq(john * 4/5, peter - peter * 3/10)\n\n    solutions = solve((equation1, equation2), (john, peter))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    # Loop through each number in the range 5 to 15 to find the multiples of 4\n    # and also check if the number is a factor of 36\n    for num in range(5, 16):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "from math import gcd\n\ndef solution():\n    pencils = 32\n    pens = 40\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    previous_total = 4 * 60  # Total percentage from first 4 tests\n    new_score = 70  # Score of the fifth test\n    new_total = previous_total + new_score\n    new_average = new_total / 5\n    return new_average\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')\n    for perm in permutations(digits, 4):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        current_sum = num1 + num2\n        if current_sum < min_sum:\n            min_sum = current_sum\n    return min_sum\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n    \n    apples_per_horse = 20\n    apples_per_pig = 15\n    apples_per_rabbit = 5\n    \n    total_apples_eaten = (total_horses * apples_per_horse +\n                          total_pigs * apples_per_pig +\n                          total_rabbits * apples_per_rabbit)\n    \n    total_animals = total_horses + total_pigs + total_rabbits\n    \n    average_apples_eaten = total_apples_eaten / total_animals\n    \n    return average_apples_eaten\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(1, 10):    # First digit cannot be 0 in a 3-digit number\n        for j in range(10):   # Second digit can be 0-9\n            k = i + j\n            if k < 10:        # Third digit must be a single digit (0-9)\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of students in Class A\n    # Let b be the number of students in Class B\n    # Let p be the number of peaches\n    a, b, p = symbols('a b p')\n\n    # Equation representing peaches given to Class A\n    equation1 = Eq(a * 5 + 10, p)\n\n    # Equation representing peaches given to Class B\n    equation2 = Eq(b * 8, p - 2)\n\n    # Equation representing the difference in the number of students between Class A and B\n    equation3 = Eq(a, b + 3)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, p))\n\n    return int(solutions[p])\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_cups = 6\n    cost_without_sale = full_price_per_cup * total_cups\n    sale1_discount = 10 / 100\n    sale2_discount = 20 / 100\n\n    sale1_price = full_price_per_cup * (1 - sale1_discount)\n    sale2_price = full_price_per_cup * (1 - sale2_discount)\n\n    cost_with_sale1 = sale1_price * total_cups\n    cost_with_sale2 = sale2_price * total_cups\n\n    saved1 = cost_without_sale - cost_with_sale1\n    saved2 = cost_without_sale - cost_with_sale2\n\n    if saved1 > saved2:\n        ans = cost_with_sale1\n    else:\n        ans = cost_with_sale2\n    \n    return ans\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    nearest_hundred = round(number / 100) * 100\n    return nearest_hundred\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    total_sum = 0\n    current_number = 0\n    for i in range(2017):\n        current_number = current_number * 10 + 2\n        total_sum += current_number\n\n    last_five_digits = total_sum % 100000\n    \n    return last_five_digits\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3 / 4\n    litres_of_water = total_orange_drink * fraction_water\n    return litres_of_water\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    # Let x be the amount of money Jayden had left.\n    # Since Benson had three times as much as Jayden after spending,\n    # and Benson spent $74, the amount Benson had left is 3x.\n    # Jayden spent $120, so Jayden had $120 + x before spending.\n    # Similarly, Benson had $74 + 3x before spending.\n    # Initially, they had a combined total of $590, so:\n    # ($120 + x) + ($74 + 3x) = $590\n    # $194 + 4x = $590\n    # 4x = $590 - $194\n    # 4x = $396\n    # x = $396 / 4\n    x = (590 - 120 - 74) // 4\n    \n    return x\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    congruences = [(2, 7), (3, 9), (4, 11)]\n    least_number, _ = solve_congruence(*congruences)\n\n    return least_number\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    return 145 + 37\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    result = 547 * 479\n    n = result % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    meters = 212.4\n    centimeters_per_meter = 100\n    centimeters = meters * centimeters_per_meter\n    \n    return centimeters\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    result = 32068 - 1774\n    return result\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    box = symbols('box')\n    equation = Eq(box * box + box, 380)\n    solutions = solve(equation, box)\n\n    for sol in solutions:\n        if sol.is_integer and sol > 0:\n            return sol\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    raspberry_ratio = 1 / total_parts\n    glass_volume = 300\n    raspberry_volume = glass_volume * raspberry_ratio\n    return raspberry_volume\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_pet_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_pet_owners - ((dog_owners - both_owners) + (goldfish_owners - both_owners) + both_owners)\n\n    return neither_owners\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # Let t be the time difference that Betty leaves before Kevin.\n    # Let v_b be the speed of Betty, and v_k be the speed of Kevin.\n    # After 6 minutes, Kevin has walked 150 meters.\n    # If they walk for another 3 minutes at the same speed,\n    # Kevin will reach the grocery store, and Betty will be 900 meters from the cinema.\n\n    # This implies that Betty walks for 9 + t minutes,\n    # Kevin walks for 9 minutes, and Kevin's speed is 150/6 meters per minute.\n\n    # Let's calculate the distance from the cinema to the grocery store using Kevin's speed:\n    distance_to_store = (150 / 6) * 9\n\n    # Now, Betty's speed can be calculated using the distance Betty is from the cinema\n    # after (9 + t) minutes and the fact that she is 900 meters away:\n    v_b = (distance_to_store + 900) / (9 + t)\n\n    # We know that Betty also travels the distance to the grocery store in (6 + t) minutes.\n    # Setting up the equation (distance_to_store) = v_b * (6 + t) and solve for t:\n    t = (distance_to_store / (distance_to_store / (9 + t))) - 6\n\n    # Solve for t knowing that distance_to_store = v_k * 9:\n    # Rearrange the equation to isolate t, and simplify\n    t = (distance_to_store - 6 * (distance_to_store / 9)) / (distance_to_store / 9)\n\n    return t\n\nans = solution()"
    ]
}