{
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9\n    end_time = 10\n    \n    duration = end_time - start_time\n    \n    return duration\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / (1 - 0.40)\n    original_amount = remaining_after_bag / (1 - 0.20)\n    return original_amount\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction_of_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    first_term = 5\n\n    # Directly using the formula for the sum of squares of the first n natural numbers\n    # and subtracting the sum of squares of the first (first_term - 1) numbers\n    total_sum = (n * (n + 1) * (2 * n + 1)) / 6\n    first_terms_sum = ((first_term - 1) * first_term * (2 * (first_term - 1) + 1)) / 6\n\n    ans = total_sum - first_terms_sum\n    return int(ans)\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for num_students in range(1, 1000):\n        if (num_students + 5)**0.5 % 1 == 0:\n            if ((num_students + 26) + 1)**0.5 % 1 == 0:\n                return num_students\n    return None\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - physics_students - biology_students\n\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    # Let x be the number of apples Amy has to give John.\n    # After giving x apples, Amy will have (amy_apples - x) apples and John will have (john_apples + x) apples.\n    # According to the problem, Amy will have exactly 4 more apples than John, so we have:\n    # amy_apples - x = (john_apples + x) + 4\n    # Solving for x gives us:\n    x = (amy_apples - john_apples - 4) / 2\n    return int(x)\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of potted plants\n    r = 4  # number of potted plants to arrange in a row\n\n    # Calculate the number of permutations (arrangements)\n    num_ways = factorial(n) // factorial(n - r)\n\n    return num_ways\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    # Combinations with a blouse and pants\n    blouse_pants_combinations = shirts * pants * shoes\n\n    # Combinations with a dress\n    dress_combinations = dresses * (shoes + heels)\n\n    # Total combinations\n    total_combinations = blouse_pants_combinations + dress_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom_age = symbols('tom_age')\n    dad_age = 43\n\n    equation = Eq(dad_age, 4 * tom_age - 5)\n\n    solution = solve(equation, tom_age)\n\n    return solution[tom_age]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    \n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    return 66666 * 66666\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    # Let's define the cost prices of the two houses and calculate their selling prices\n    # Assume cost price of the first house is c1 and of the second house is c2\n\n    # Selling price for both the houses is Â£99000\n    sp = 99000\n\n    # From the problem, we know that:\n    # sp = c1 + 0.1 * c1 (10% profit on the first house)\n    # sp = c2 - 0.1 * c2 (10% loss on the second house)\n\n    # We solve these two equations to find the cost prices\n    # c1 * 1.1 = sp -> c1 = sp / 1.1\n    # c2 * 0.9 = sp -> c2 = sp / 0.9\n\n    c1 = sp / 1.1\n    c2 = sp / 0.9\n\n    # Total cost price of the two houses is c1 + c2\n    total_cost = c1 + c2\n\n    # Total selling price of the two houses is 2 * sp (since there are two houses sold at the same price)\n    total_sp = 2 * sp\n\n    # Profit or loss is calculated as total selling price minus total cost price\n    profit_or_loss = total_sp - total_cost\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    return 816 // 17\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # Every time leaving a multiple of 4 to your opponent guarantees a win.\n    # The sequence is 1,2,3, (4), 5,6,7, (8), 9,10,11, (12), 13,14,15...\n    # For instance, if there are 5 oranges, take 1, and 4 remain.\n    # The opponent can take 1, 2, or 3, but never win because 1/2/3 will always remain.\n    \n    # Since 15 is not a multiple of 4, Fred should remove oranges in a way to\n    # leave a multiple of 4 for George, ensuring that no matter how George plays,\n    # Fred can always keep the remaining oranges as a multiple of 4 until Fred wins.\n    \n    # Fred should remove (15 % 4) oranges to leave George with a multiple of 4.\n    oranges_to_take = 15 % 4\n    \n    # If the modulo is 0, meaning there are exactly 12 oranges on Fred's turn,\n    # he should take 3, leaving 12 for George,\n    # following the winning sequence 12 (George), 11 or 10 or 9 (Fred), etc.\n    if oranges_to_take == 0:\n        oranges_to_take = 3\n\n    return oranges_to_take\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    count = 0\n    # A is in the middle of B and C, so let's place B and C first.\n    for first in ['B', 'C']:\n        for second in ['B', 'C']:\n            if first != second:\n                for third in ['A']:\n                    # Placing A in the middle.\n                    for fourth in ['D', 'E']:\n                        for fifth in ['D', 'E']:\n                            if fourth != fifth:\n                                count += 1\n    return count\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_set = 3\n    set_of_cupcakes = 15\n\n    total_eggs = (cupcakes // set_of_cupcakes) * eggs_per_set\n\n    return total_eggs\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    total_skipping_rope = 40\n    total_long_jump = 31\n    both_events = 21\n    \n    only_one_event = (total_skipping_rope - both_events) + (total_long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    jogging_time = 2  # From 6.30 to 8.30\n    walking_time = 1  # From 8.30 to 9.30\n\n    jogging_speed = 8  # km per hour\n    walking_speed = jogging_speed / 2  # half the jogging speed\n\n    jogging_distance = jogging_time * jogging_speed\n    walking_distance = walking_time * walking_speed\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    return 74 * 15 * 8 * 250\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'n' be the number of each type of note\n    n = symbols('n')\n\n    # Equation representing the total value of the notes\n    total_value_eq = Eq(5*n + 10*n + 20*n, 280)\n\n    # Solve the equation for 'n'\n    solution = solve(total_value_eq, n)\n\n    # Number of notes is 3 times 'n' (since there are 3 types of notes)\n    total_notes = 3 * solution[0]\n\n    return total_notes\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction = 3/20\n    number = 0.16\n\n    if fraction > number:\n        ans = \"3/20 is larger\"\n    elif fraction < number:\n        ans = \"0.16 is larger\"\n    else:\n        ans = \"They are equal\"\n\n    return ans\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def custom_operator_diamond(M, N):\n        return M * N + N + 1\n\n    def custom_operator_square(M, N):\n        return 8 * M - N * N\n\n    diamond_result = custom_operator_diamond(7, 6)\n    square_result = custom_operator_square(diamond_result, 9)\n    \n    return square_result\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2  # Start with the first prime number.\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    # Calculation for the sum of fractions\n    A = 60 * (1 + 1/2 + 1/3 + 1/4 + 1/5)\n    return A\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = (19 + 1) // 2  # We only want odd numbers, so we divide by 2 and round up\n    return (n * (n + 1) * (2 * n + 1)) // 6\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # It is assumed that each floor is equidistant\n    # Time taken from the first to the fourth floor is 12 minutes\n    # Hence, time taken for each floor is 12 minutes divided by the number of intervals (3 floors)\n    time_per_floor = 12 / 3\n\n    # Time taken from the first floor to the second floor is just one interval, hence:\n    return time_per_floor\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # The sum of the marbles to be divided into 4 piles is 16\n    total_marbles = 16\n    \n    # As each pile must have a different number of marbles,\n    # let's start with the smallest possible numbers for the first three piles\n    # and then find the biggest possible number of marbles in the biggest pile\n    for smallest_pile in range(1, total_marbles - 3):\n        for second_pile in range(smallest_pile + 1, total_marbles - 2):\n            for third_pile in range(second_pile + 1, total_marbles - 1):\n                # The biggest pile will have the remaining marbles\n                fourth_pile = total_marbles - (smallest_pile + second_pile + third_pile)\n                # Make sure the biggest pile has more marbles than the third pile\n                if fourth_pile > third_pile:\n                    return fourth_pile\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # The last digit of a number only depends on the last digit of the factors involved in multiplication\n    \n    # The last digit of 2^n where n >= 1 (2, 4, 8, 6, 2, 4, 8, 6, ...)\n    last_digit_2 = (2 ** (100 % 4)) % 10  # cycle repeats every 4, so we use 100 % 4 to find the position in the cycle\n    \n    # The last digit of 7^n where n >= 1 (7, 9, 3, 1, 7, 9, 3, 1, ...)\n    last_digit_7 = (7 ** (100 % 4)) % 10  # cycle repeats every 4, so we use 100 % 4 to find the position in the cycle\n    \n    # The last digit of 9^n where n >= 1 (9, 1, 9, 1, 9, 1, ...)\n    last_digit_9 = (9 ** (100 % 2)) % 10  # cycle repeats every 2, so we use 100 % 2 to find the position in the cycle\n    \n    # Calculate the last digit of the entire expression\n    last_digit = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    ans = sum((n**2 + (n + 1)**2) / (n * (n + 1)) for n in range(1, 2008))\n    return round(ans)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    result = 24 / 100 * 25\n    return result\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    # Let n be the number of girls\n    # Average height was supposed to be 163cm, but was recorded as 159cm due to one girl's height written as 126cm instead of 162cm\n    # Therefore, the sum of the heights was 4n cm less than it should have been\n    # Because the error in recording was (162 - 126) = 36cm\n    # We have the equation 4n = 36\n    n = 36 // 4\n    \n    return n\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    # Since no specific calculation was given, this code cannot compute an answer.\n    # Suppose the question involves a basic multiplication or division of whole numbers,\n    # here's a hypothetical problem: \"Calculate the result of the multiplication: 8 * 7\"\n\n    result = 8 * 7 # Replace 8 and 7 with the actual numbers you'd like to multiply or divide\n\n    return result\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # Calculate the sum of the series 1+3+5+...+13\n    last_term = 13\n    number_of_terms = (last_term + 1) // 2\n    \n    sum_of_series = number_of_terms ** 2\n    \n    # Use the formula for the sum of the cubes: (1Â³+2Â³+3Â³+......+nÂ³) = (1+2+3+......+n)Â²\n    return sum_of_series ** 2\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    # Use the fractions module for precise fraction arithmetic\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions and multiply them\n    result = Fraction(3, 2)\n    for i in range(3, 10):\n        result *= Fraction(i, i + 1)\n    \n    # Convert the final result back to a float or mixed number if needed\n    ans = float(result)\n\n    return ans\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of seashells Beth and Ken have\n    beth, ken = symbols('beth ken')\n\n    # Equation 1: Ken had $75 more seashells than Beth\n    equation1 = Eq(ken, beth + 75)\n\n    # Equation 2: 4/5 of the number of seashells Beth had was equal to 2/5 of the number of seashells Ken had\n    equation2 = Eq(4/5 * beth, 2/5 * ken)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (beth, ken))\n\n    # Calculate the total number of seashells they have together\n    total_seashells = solutions[beth] + solutions[ken]\n    \n    return total_seashells\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    # Lengths of Jamie's ribbons\n    ribbon1 = 56\n    ribbon2 = 42\n    ribbon3 = 84\n\n    # Calculate the greatest common divisor (GCD) of the lengths\n    gcd12 = gcd(ribbon1, ribbon2)\n    gcd123 = gcd(gcd12, ribbon3)\n\n    return gcd123\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    ans = number + 10000\n    return ans\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube_root in range(1, 50):\n        cube = cube_root ** 3\n        square = cube - 2\n        square_root = square ** 0.5\n        if square_root.is_integer():\n            return int(square)\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    total_students = 92\n    capacity_per_minibus = 6\n\n    num_minibusses_needed = -(-total_students // capacity_per_minibus)\n\n    return num_minibusses_needed\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol declaration\n    ten_notes, two_notes = symbols('ten_notes two_notes')\n\n    # Equations based on the problem statement\n    total_notes = Eq(ten_notes + two_notes, 40)\n    spent_tens = 0.4 * ten_notes\n    spent_twos = 0.25 * two_notes\n    remaining_tens = ten_notes - spent_tens\n    remaining_twos = two_notes - spent_twos\n    ratio = Eq(remaining_tens / remaining_twos, 4/5)\n\n    # Solve the system of equations\n    solutions = solve((total_notes, ratio), (ten_notes, two_notes))\n    ten_notes_solution = solutions[ten_notes]\n    two_notes_solution = solutions[two_notes]\n\n    # Calculate the cost of the gift\n    gift_cost = (spent_tens * 10 + spent_twos * 2).subs({ten_notes: ten_notes_solution, two_notes: two_notes_solution})\n\n    return gift_cost\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    # Since it's a simple summation of integers, just sum all the numbers directly.\n    ans = sum([1, 2, 3, 4, 5, 6, 7, 7, 8, 9])\n    return ans\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # Total oranges to be distributed after giving each kid two oranges\n    oranges_to_distribute = 13 - 3 * 2\n    # Number of partitions (kids) - 1\n    partitions = 3 - 1\n    # Distribute according to the \"stars and bars\" combinatorial method\n    # We are calculating comb(n + k - 1, k - 1) where n is oranges_to_distribute and k is partitions\n    ways = comb(oranges_to_distribute + partitions, partitions)\n    return ways\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    result = (7/8) * 32\n    return result\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 11.63)\n    equation2 = Eq(x + y/10, 5.87)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    difference = abs(solutions[x] - solutions[y])\n    return int(difference * 100)\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 2 * a + 4\n\n    ans = custom_operation(200, 199)\n    for i in range(188, 0, -1):\n        ans = custom_operation(ans, i)\n\n    return ans\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # Given the pattern, we can observe that the right side's denominator will match\n    # the last term's denominator on the left side when we multiply out the terms on left side.\n    # So, we just need to find the exponent that matches 2009 after increasing by one and doubling each time.\n\n    # Let's start with n = 1 for the first term after 1+1/2.\n    n = 1\n\n    # We'll keep track of the exponent starting with the first term.\n    exponent = 2\n\n    # We'll run a loop until the exponent reaches 2009.\n    while True:\n        if exponent == 2009:\n            break\n        # Move to the next term by increasing n and doubling exponent.\n        n += 1\n        exponent *= 2\n\n    return n\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    return 342 // 6\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, john = symbols('sally john')\n    \n    # Sally will be 6 times as old as John in 3 years\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    # Their total age now is 50 years\n    equation2 = Eq(sally + john, 50)\n\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 7 == 1 and i % 9 == 5:\n            return i\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        P, A, S, O = perm\n        if P == 0:  # Skip if the first digit is 0 because we want a 4-digit number\n            continue\n        PASO = 1000*P + 100*A + 10*S + O\n        if P + A + S + O == 21 and P * A * S * O == 168:\n            return PASO\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    man_rate = 1 / 15\n    together_rate = 1 / 12\n    wife_rate = together_rate - man_rate\n    wife_days = 1 / wife_rate\n    return wife_days\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    # Arithmetic sequence starting from 3, with a common difference of 3\n    first_day = 3\n    common_difference = 3\n    num_days = 7  # From Monday to Sunday\n\n    # Last day's number of questions\n    last_day = first_day + (num_days - 1) * common_difference\n\n    # Sum of arithmetic sequence: n/2 * (first_term + last_term)\n    total_questions = num_days / 2 * (first_day + last_day)\n\n    return int(total_questions)\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Harry and Liam's original water amounts\n    harry, liam = symbols('harry liam')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(harry + liam, 640)  # Total water is 640 mL\n    equation2 = Eq(harry + 90, 3 * (liam - 90))  # After transfer, Harry has 3 times Liam's water\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (harry, liam))\n    \n    return solutions[harry]\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Since the increments are the same, we can use the pattern to figure out the increment\n    # Increment from 9 to 10 is 28 - 20 = 8\n    # Increment from 10 to 11 is 36 - 28 = 8\n    # Therefore, we can conclude the increment is 8 beans per hour\n    \n    # Now we find the number of beans at 8 o'clock by subtracting increment from 9 o'clock beans count.\n    beans_at_8 = 20 - 8\n    \n    # Similarly, find the number of beans at 7 o'clock by subtracting increment again\n    beans_at_7 = beans_at_8 - 8\n    \n    return beans_at_7\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # First digit must be from 1 to 9 (three-digit number)\n        for j in range(10):  # Second digit\n            for k in range(10):  # Third digit\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from itertools import combinations\n\ndef solution():\n    count = 0\n    # Iterate through the number of white balls taken\n    for white in range(1, 7):\n        # Iterate through the number of red balls taken\n        for red in range(1, 4):\n            # Iterate through the number of black balls taken\n            for black in range(1, 5):\n                if white + red + black == 10:\n                    # Calculate the ways of choosing the balls for each color\n                    count += len(list(combinations(range(9), white))) * len(list(combinations(range(5), red))) * len(list(combinations(range(6), black)))\n    return count\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2 ** 10) % 3\n    return remainder\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pearls_total = symbols('pearls_total')\n\n    # Create the equation based on the problem statement\n    equation = Eq((1/2) * pearls_total + (1/4) * pearls_total + (1/6) * pearls_total + 3, pearls_total)\n\n    # Solve for the number of pearls\n    solutions = solve(equation, pearls_total)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5  # Insect length in cm\n    snake_length_m = 1  # Snake length in meters\n    snake_length_cm = snake_length_m * 100  # Convert snake length from meters to cm\n\n    ans = snake_length_cm / insect_length_cm\n    return ans\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    n = 1\n    term = 1\n    while True:\n        term = n*(n + 1)//2\n        if term >= 100:\n            break\n        n += 1\n    return term - n\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    mean_three_numbers = 120\n    sum_three_numbers = mean_three_numbers * 3\n    \n    mean_four_numbers = 150\n    sum_four_numbers = mean_four_numbers * 4\n    \n    fourth_number = sum_four_numbers - sum_three_numbers\n    \n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = initial_mass - given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    ans = 372 * 6\n    return ans\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    half_basket_weight = half_full_weight - (full_weight - half_full_weight)\n    \n    return half_basket_weight\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    pip_position = 6\n    bud_position = 6\n    between_pip_bud = 5\n\n    total_children = pip_position + between_pip_bud + bud_position - 1\n    return total_children\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    # x â¡ 0 (mod 7), x+2 â¡ 0 (mod 8), x+4 â¡ 0 (mod 9)\n    # Here x is the first even number, x+2 is the second and x+4 is the third\n    # Since we are looking for even numbers, we can treat the divisibility conditions as congruences\n    congruences = [(0, 7), (6, 8), (5, 9)]\n\n    # Using the Chinese Remainder Theorem to find the smallest x that satisfies the congruences\n    x = solve_congruence(*congruences)\n\n    # The smallest possible sum of these three numbers\n    sum_of_numbers = x[0] + (x[0] + 2) + (x[0] + 4)\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    difference = (25 - 10) // (4 - 1)  # difference between consecutive terms\n    total_rows = 25\n\n    # Using arithmetic series sum formula: n/2 * (2a + (n-1)d)\n    total_athletes = total_rows / 2 * (2 * first_term + (total_rows - 1) * difference)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The Chinese Remainder Theorem can solve this problem.\n    # We have the congruences:\n    # x â¡ 3 (mod 5)\n    # x â¡ 4 (mod 6)\n    # x â¡ 1 (mod 7)\n    congruences = [(3, 5), (4, 6), (1, 7)]\n\n    # Use `solve_congruence` from sympy to find the solution.\n    lcm_solution = solve_congruence(*congruences)\n    \n    return int(lcm_solution[0])\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    paintings_done = 35\n    days_passed = 5\n    total_paintings_goal = 56\n\n    paintings_per_day = paintings_done / days_passed\n    remaining_paintings = total_paintings_goal - paintings_done\n    additional_days_needed = remaining_paintings / paintings_per_day\n\n    return int(additional_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    total_sum = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    times = total_sum // 3\n    return times\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    # Total age of the family\n    total_age_family_now = 29 * 6\n\n    # Total age of the children\n    total_age_children = 64\n\n    # Total age of the parents now\n    total_age_parents_now = total_age_family_now - total_age_children\n\n    # Number of parents, assuming the remaining family members are the parents\n    num_parents = 6 - 2  # subtracting the number of children (2)\n\n    # The average age of the parents 3 years ago\n    average_age_parents_3yrs_ago = (total_age_parents_now - 3 * num_parents) / num_parents\n\n    return average_age_parents_3yrs_ago\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    papers = 18\n    interval = 3\n    leaves = papers // interval\n\n    return leaves\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    value = 95 * (37 + 42 + 21)\n    return value\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    # Since we know the 5th and 12th term, we can use the formula for the nth term of an arithmetic progression:\n    # T_n = a + (n-1)d, where T_n is the nth term, a is the first term, d is the common difference, and n is the term number.\n\n    # T_5 = a + 4d = 8\n    # T_12 = a + 11d = 50\n\n    # Now, we can form two equations and solve for d:\n    # (1) a + 4d = 8\n    # (2) a + 11d = 50\n\n    # Subtract equation (1) from (2):\n    # (a + 11d) - (a + 4d) = 50 - 8\n    # 11d - 4d = 42\n    # 7d = 42\n    # d = 42 / 7\n    # d = 6\n    \n    # The common difference d is 6\n    return 6\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    last_term = 242\n    n = (last_term - first_term) // common_difference + 1   # find the total number of terms\n    \n    while n > 3:  # keep erasing the first three and adding one until only three numbers are left\n        sum_of_first_three = 3 * first_term + 3 * common_difference  # sum of first three terms\n        first_term += 3 * common_difference  # the new first term after erasing the initial first three terms\n        n -= 2  # reduce the total count by 2, (erase 3, add 1)\n\n    second_number = first_term + common_difference  # the second term after operations\n    return second_number\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import permutations\n\ndef time_taken(strategy, times):\n    time = 0\n    left = list(range(4))\n    while len(left) > 1:\n        # Send the fastest two on the left to the right\n        i1, i2 = strategy[left[0]], strategy[left[1]]\n        time += max(times[i1], times[i2])\n        left.remove(left[0])\n        left.remove(left[0])\n        \n        # If there's more than one person on the right, send the fastest back\n        if left:\n            time += times[strategy[0]]\n\n        # After crossing back, reorder the list based on who's still on the left\n        left = sorted(left, key=lambda i: strategy[i])\n\n    # Send the last two on the left to the right\n    if left:\n        time += times[strategy[left[0]]]\n    \n    return time\n\ndef solution():\n    times = [7, 9, 4, 10]\n    min_time = float('inf')\n\n    # Test each permutation of people \n    for strategy in permutations(range(4)):\n        time = time_taken(strategy, times)\n        min_time = min(min_time, time)\n\n    return min_time\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest_number = min(numbers, key=lambda x: abs(x - 0.1))\n    return closest_number\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    ans = 29 + 37 + 76 + 63 + 24 + 45 + 61 + 55\n    return ans\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n\n    total_children = jacob + sisters + brothers\n\n    return total_children\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    # Let p be the weight of Pip, b be the weight of Bud, and o be the weight of Bob.\n\n    # Average weight of Pip and Bud is 30 kg:\n    # (p + b) / 2 = 30\n    # p + b = 60\n\n    # Average weight of Pip and Bob is 33 kg:\n    # (p + o) / 2 = 33\n    # p + o = 66\n\n    # Average weight of Bud and Bob is 36 kg:\n    # (b + o) / 2 = 36\n    # b + o = 72\n\n    # Solving the equations (p + b) + (p + o) = (60 + 66) and (p + b) + (b + o) = (60 + 72)\n    # 2p + b + o = 126\n    # p + 2b + o = 132\n\n    # Subtract the two equations:\n    # 2p + b + o - (p + 2b + o) = 126 - 132\n    # 2p - p + b - 2b + o - o = -6\n    # p - b = -6\n\n    # Now we can substitute p - b into the first equation:\n    # (p - b = -6) => p = b - 6\n\n    # Now let's substitute p = b - 6 into the first original equation (p + b = 60):\n    # (b - 6) + b = 60\n    # 2b - 6 = 60\n    # 2b = 66\n    # b = 33\n\n    # Now we can find p using p = b - 6:\n    # p = 33 - 6\n    p = 27\n\n    return p\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    days_to_complete_with_five_people = 15\n    desired_completion_days = 7\n    people_needed = (5 * days_to_complete_with_five_people) / desired_completion_days\n\n    additional_people_needed = int(people_needed) - 5\n    if people_needed > int(people_needed):\n        additional_people_needed += 1\n\n    return additional_people_needed\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    return value_after_years\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A and B represent the original number of students in school A and school B respectively.\n    A, B = symbols('A B')\n\n    # Equation representing the total number of students before transferring\n    equation1 = Eq(A + B, 1050)\n    \n    # Equation representing the difference in the number of students after 20 students transfer from A to B\n    equation2 = Eq((A - 20) - (B + 20), 10)\n\n    # Solving the two equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_time = 5\n    final_time = 10.5\n    initial_temp = -3\n    temp_rise_per_hour = 2\n\n    hours_passed = final_time - initial_time\n    temp_increase = hours_passed * temp_rise_per_hour\n    final_temp = initial_temp + temp_increase\n\n    return final_temp\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    # Let's represent the usual speed as s meters per minute. Since Maria\n    # usually covers the distance in 30 minutes, the length of the journey is 30s meters.\n    # When it rains, the speed is reduced by 20%, so her new speed is 0.8s meters per minute.\n    # Let's say she runs at her usual speed for t minutes before it starts raining.\n    # Then she covers a distance of ts meters at her usual speed.\n    # The remaining distance is (30s - ts) and at her reduced speed, she covers it in (30s - ts) / (0.8s) minutes.\n    # The total time spent is t + (30s - ts) / (0.8s) minutes and this is equal to 30 + 5 minutes.\n    # So, we have the equation:\n    # t + (30s - ts) / (0.8s) = 35\n    # Solving for t gives:\n    # 0.8st + 30s - ts = 0.8s * 35\n    # 0.8st - 0.2st = 0.8s * 35 - 30s\n    # 0.6st = 0.8s * 35 - 30s\n    # t = (0.8 * 35 - 30) / 0.6\n    # Also, she runs for 2400 meters after the rain started, so:\n    # 2400 = (30s - ts) * 0.8\n    # We use t from the above calculation to find s:\n    # s = 2400 / ((30 - ((0.8 * 35 - 30) / 0.6)) * 0.8)\n    \n    # Calculating t\n    t = (0.8 * 35 - 30) / 0.6\n    \n    # Calculating s\n    s = 2400 / ((30 - t) * 0.8)\n    \n    # Length of the journey will be 30s\n    length_of_journey = 30 * s\n    \n    return length_of_journey\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the initial amount of money Mrs. Chan had\n    money = symbols('money')\n\n    # Set up the equation based on the given information\n    remaining_after_A = money / 2 - 1\n    remaining_after_B = remaining_after_A / 2 - 2\n    remaining_after_C = remaining_after_B - 3 - (remaining_after_B / 3)\n\n    # Equation representing the money left after shopping in three shops\n    equation = Eq(remaining_after_C, 49)\n\n    # Solve the equation to find the initial amount of money\n    initial_money = solve(equation, money)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    ans = 12321 // 37\n    return ans\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Darrell might draw all blue and white pencils first before getting a green one\n    # There are 3 blue and 3 white pencils, so he must draw at least 3 + 3 + 1 = 7 pencils\n    # to get at least one green pencil for sure.\n    \n    return 3 + 3 + 1\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_of_boys = 3/4\n    number_of_boys = total_students * fraction_of_boys\n    number_of_girls = total_students - number_of_boys\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    # Let x be the number of books on the top shelf.\n    # Then each subsequent shelf contains x + 3, x + 6, ..., x + 18 books, forming an arithmetic sequence.\n    # The sum of an arithmetic series can be calculated by S = n/2 * (a1 + an),\n    # where n is the number of terms, a1 is the first term, and an is the last term.\n    \n    # There are 7 shelves, so n = 7\n    # The sum of the books is given as 280, hence we can write the equation as follows:\n    # 7/2 * (2x + (7 - 1) * 3) = 280\n    # Simplifying the equation to find x\n\n    n = 7\n    total_books = 280\n    common_difference = 3\n    # 7/2 * (2 * x + 6 * 3) = 280\n    # 7 * x + 6 * 3 * 7/2 = 280\n    # 7 * x + 63 = 280\n    # 7 * x = 280 - 63\n    # x = (280 - 63) / 7\n    \n    x = (total_books - (n - 1) * common_difference * n // 2) // n\n    return x\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n    # Define the cycle in days for each of the chores\n    sweep_cycle = 3\n    mop_cycle = 5\n    cook_cycle = 9\n    clean_windows_cycle = 3 * 7  # Convert weeks to days\n\n    # Calculate the least common multiple (lcm) of the four cycles\n    days_until_together = lcm(sweep_cycle, mop_cycle, cook_cycle, clean_windows_cycle)\n\n    return days_until_together\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n    \n    total_competitions = math_competition + art_competition\n    both_competitions = total_competitions - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Get all divisors of 2240\n    divs = divisors(2240)\n\n    # Find a divisor such that 2240 / divisor is a square\n    for d in divs:\n        if is_square(2240 // d):\n            return d\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candies, kids = symbols('candies kids')\n\n    equation1 = Eq(candies, 18 * kids + 12)\n    equation2 = Eq(candies, 15 * (kids + 2))\n\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 311):\n        for digit in str(i):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    ans = 22 * 125 * 8\n    return ans\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = (dad_age_now - 2) - (avril_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_of_nine = 6.30\n    cost_per_item = cost_of_nine / 9\n    cost_of_eleven = cost_per_item * 11\n    return cost_of_eleven\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from math import pow, sqrt, ceil, floor\n    numerator = pow(-4.56, 2) - pow(8.1, 3)\n    denominator = pow(7.2, 3) * (-sqrt(6 + 3/4) + 30.15)\n    expression = 16.7 - pow(numerator / denominator, 1/3)\n    ans = round(expression, 3)\n    return ans\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Ratio of Jayden's speed to Carter's speed\n    ratio_jayden = 7\n    ratio_carter = 4\n    \n    # Total ratio for both Jayden and Carter\n    total_ratio = ratio_jayden + ratio_carter\n    \n    # Distance between place A and place B\n    total_distance = 440\n    \n    # Distance Jayden covers before the meeting point\n    distance_jayden = (total_distance * ratio_jayden) / total_ratio\n    \n    return distance_jayden\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Let 'n' be the number of years later for the sum of their ages to be 48\n    # Oliver's age n years later = 20 + n\n    # Lin's age n years later = 26 + n\n    # Their combined age = (20 + n) + (26 + n) = 48\n    # Solve for n: 46 + 2n = 48\n    \n    # Simplify the equation to find n\n    n = (48 - 46) / 2\n    return n\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_age, mrs_age = symbols('mr_age mrs_age')\n\n    equation1 = Eq(mr_age - 7, 6*(mrs_age - 7)/5)\n    equation2 = Eq(mr_age + mrs_age, 69)\n\n    solutions = solve((equation1, equation2), (mr_age, mrs_age))\n\n    return solutions[mr_age]\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # Total score of 5 students with mean 87\n    total_score_5_students = 5 * 87\n    # Total score of all 6 students with mean 88\n    total_score_6_students = 6 * 88\n    # Jim's score will be the difference between the total scores of 6 and 5 students\n    jims_score = total_score_6_students - total_score_5_students\n    return jims_score\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter, john_initial, john_final = symbols('sam peter john_initial john_final')\n\n    # Sam to Peter ratio is 7:5, sam = 7k, peter = 5k\n    equation1 = Eq(sam, 7/5 * peter)\n\n    # Sam and Peter give 20% of their stickers to John\n    sam_gives = sam * 20 / 100\n    peter_gives = peter * 20 / 100\n\n    # John's stickers increased by 80%\n    john_increased_by = john_initial * 80 / 100\n    equation2 = Eq(john_final, john_initial + sam_gives + peter_gives)\n    equation3 = Eq(john_final, john_initial + john_increased_by)\n\n    # Sam had 20 stickers more than John in the end\n    equation4 = Eq(sam - sam_gives, john_final + 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter, john_initial, john_final))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    original_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    price_after_first_discount = original_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    capacity = 6\n    buses_needed = (boys + capacity - 1) // capacity\n    return buses_needed\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    cost_price_per_bat = 135\n    selling_price_per_bat = 185\n    remaining_bats = 3\n    profit = 2945\n\n    # Let the number of bats originally purchased be x\n    # Total cost = cost_price_per_bat * x\n    # Total revenue = selling_price_per_bat * (x - remaining_bats)\n    # According to the problem, Total revenue = Total cost + profit\n    # So, we have the equation: selling_price_per_bat * (x - remaining_bats) = cost_price_per_bat * x + profit\n\n    # Now we solve that equation for x\n    x = (profit + (cost_price_per_bat * remaining_bats)) / (selling_price_per_bat - cost_price_per_bat)\n    return int(x)\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    raja, kumar = symbols('raja kumar')\n    \n    # After spending, Kumar has 4 times as much as Raja\n    equation1 = Eq(kumar - 109, 4 * (raja - 286))\n    # Initially, Raja and Kumar had the same amount of money\n    equation2 = Eq(raja, kumar)\n    \n    solutions = solve((equation1, equation2), (raja, kumar))\n    \n    return solutions[raja]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for table (t) and chair (c)\n    t, c = symbols('t c')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(t, c + 160)  # Table costs $160 more than a chair\n    equation2 = Eq(t + 5 * c, 328)  # Mrs Lim bought a table and 5 chairs for $328\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    # Get the cost of one chair\n    return solutions[c]\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[triangle]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    sum_result = 879 + 268\n    return sum_result\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    mean_of_all = 1111\n    diff = 240\n\n    # Total sum of all numbers\n    total_sum = 10 * mean_of_all\n\n    # Let x be the mean of the last 6 numbers\n    # (mean_of_first_4_numbers = x - diff)\n    # 4*(x - diff) + 6*x = total_sum\n    # 4x - 4*diff + 6x = total_sum\n    # 10x - 4*diff = total_sum\n    # x = (total_sum + 4*diff) / 10\n\n    x = (total_sum + 4*diff) / 10\n\n    return int(x)\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    # If Rachel gives Alice 10 pieces of candy, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If Alice gives Rachel 10 pieces, Rachel has 4 more than 3 times Alice's candy\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate the total number of candies they originally had\n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    # Convert Bud's amount to pence\n    bud_pence = 110\n\n    # Pip's amount in pence\n    pip_pence = 60\n\n    # Calculate the total amount in pence\n    total_pence = pip_pence + bud_pence\n    \n    # Convert the total amount back to pounds and pence\n    pounds = total_pence // 100\n    pence = total_pence % 100\n\n    # Combine the pounds and pence for the final answer\n    ans = pounds + pence / 100\n    return ans\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    # Let the rate of the hot tap be x baths per 10 minutes. \n    # Then the rate of the cold tap is 2x baths per 10 minutes.\n    # So, the combined rate of both taps is x + 2x = 3x baths per 10 minutes.\n    # They fill 1 bath in 10 minutes together, so 3x = 1/10 baths per minute.\n    # Therefore, x = (1/10) / 3 baths per minute, which is the rate of the hot tap.\n    \n    # Now we find out how long it takes for the cold tap to fill the bath by itself.\n    # Since the cold tap's rate is twice that of the hot, its rate is 2x.\n    \n    # Given that the rate is the reciprocal of the time, we can find the time it takes \n    # for the cold tap to fill the bath by taking 1 over the rate of the cold tap.\n    \n    # Form the equation for the cold tap's rate:\n    hot_tap_rate = (1/10) / 3\n    cold_tap_rate = 2 * hot_tap_rate\n    \n    # Since rate = 1 / time, we can write:\n    # cold_tap_rate = 1 / cold_tap_time\n    # Solving for cold_tap_time yields:\n    cold_tap_time = 1 / cold_tap_rate\n    \n    # The cold_tap_time will be in terms of the time unit used, which is 10 minutes.\n    # So, we multiply by 10 to get the time in minutes.\n    cold_tap_time_in_minutes = cold_tap_time * 10\n    \n    return cold_tap_time_in_minutes\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Calculate the time for each part of the race\n    time_first_part = 280 / 7  # Time = Distance / Speed\n    time_middle_part = 400 / 5\n    time_last_part = (800 - 280 - 400) / 8\n\n    # Total time spent on the race\n    total_time = time_first_part + time_middle_part + time_last_part\n\n    return total_time\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    \n    final_value = initial_value * (1 - depreciation_rate) ** years\n    ans = round(final_value, 1)\n    \n    return ans\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    # Given ratio of Joyce's speed to Lori's speed is 3:2\n    # Lori's speed = 2 meters/second\n    lori_speed = 2\n    joyce_speed_ratio = 3\n    lori_speed_ratio = 2\n    \n    # Calculate Jocye's speed based on the given ratio\n    joyce_speed = (joyce_speed_ratio / lori_speed_ratio) * lori_speed\n    \n    # Calculate the distance Jocye can run in 10 seconds\n    time = 10\n    joyce_distance = joyce_speed * time\n    \n    return joyce_distance\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    prob_over_20 = 0.6\n    prob_over_25_given_over_20 = 0.3 / prob_over_20\n\n    return prob_over_25_given_over_20\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assuming P, I and S are different digits\n    P, I, S = symbols('P I S', integer=True)\n\n    # Setting the equation based on the problem\n    equation = Eq(S + S + S + S, P*10 + I)\n\n    # Digits can be from 0 to 9, but since P is the first digit of a two-digit number, P cannot be 0\n    solutions = solve(equation, (P, I, S), dict=True)\n    filtered_solutions = [s for s in solutions if all(val.is_Integer and 0 <= val <= 9 for key, val in s.items())]\n    filtered_solutions = [s for s in filtered_solutions if s[P] != 0 and s[P] != s[I] and s[P] != s[S] and s[I] != s[S]]\n\n    return filtered_solutions[0][P] * 10 + filtered_solutions[0][I]\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "from math import comb\n\ndef solution():\n    teams = 5\n    games = comb(teams, 2)\n    return games\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    total_digits = 792\n    pages = 0\n    digits = 0\n\n    for i in range(1, total_digits+1):\n        digits += len(str(i))\n        if digits > total_digits:\n            break\n        pages += 1\n\n    return pages\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n    \n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don's speed in metres per minute\n    distance_from_house_to_meeting_point = 360  # Distance from house to meeting point\n    distance_from_house_to_library = 780  # Distance from house to library\n\n    # Time taken for Don to reach the meeting point\n    time_to_meeting_point = distance_from_house_to_meeting_point / don_speed\n\n    # Distance Danny travels to the meeting point\n    distance_danny_travels = distance_from_house_to_library - distance_from_house_to_meeting_point\n\n    # Danny's speed\n    danny_speed = distance_danny_travels / time_to_meeting_point\n\n    return danny_speed\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    total_sum = 0\n    for numerator in range(1, 11):\n        for denominator in range(numerator, 11):\n            total_sum += numerator / denominator\n    return total_sum\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B have two positions to choose: leftmost or rightmost\n    positions_AB = 2  # Either A on the left and B on the right or vice versa\n\n    # Once A and B have taken their positions, C and D have 2! ways to arrange among themselves.\n    permutations_CD = 2  # C and D can switch places with each other\n\n    # The total number of different ways they can line up\n    total_ways = positions_AB * permutations_CD\n\n    return total_ways\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    numerator = 20 * 27 / 30\n    return int(numerator)\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    # Convert all quantities to grams for uniformity\n    flour_g = 1 * 1000 + 500  # 1 kg 500 g of flour\n    sugar_g = 1 * 1000 + 200  # 1 kg 200 g of brown sugar\n    butter_g = 900            # 900 g of butter\n\n    # Calculate the total mixture in grams\n    total_mixture_g = flour_g + sugar_g + butter_g\n\n    # Divide the mixture equally into 8 cake tins\n    mixture_per_tin_g = total_mixture_g / 8\n\n    return mixture_per_tin_g\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    red = 10\n    blue = 5\n    green = 8\n    # To ensure she gets 4 marbles of the same color in the worst case scenario,\n    # she needs to take out all marbles of the two colors with fewer marbles (blue and green) plus one.\n    min_marbles = blue + green + 1\n    \n    return min_marbles\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [1, 2, 3]\n    two_digit_permutations = set(permutations(digits, 2))\n    count = len(two_digit_permutations)\n    \n    return count\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    even_digits = [digit for digit in digits if digit % 2 == 0]\n    \n    # Smallest even digit should be in the units place\n    smallest_even_digit = min(even_digits)\n    remaining_digits = sorted([digit for digit in digits if digit != smallest_even_digit])\n    \n    # Form the smallest 4-digit even number\n    smallest_4_digit_even_number = int(str(remaining_digits[0]) + \n                                       str(remaining_digits[1]) + \n                                       str(remaining_digits[2]) + \n                                       str(smallest_even_digit))\n    return smallest_4_digit_even_number\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for i in range(99, 9, -1):  # Start from the largest 2-digit number and go downwards\n        if i % 7 == 5 and i % 13 == 11:\n            return i  # Return the first (largest) number that satisfies the conditions\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days = 3\n    # If 3 workers take 3 days, then 1 worker would take 3 times as long\n    days_for_1_worker = workers * days\n    return days_for_1_worker\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    A = 10 * x + y\n    B = 10 * (2 * x) + y\n\n    equation = Eq(6 * A + 25, B)\n    solutions = solve(equation, (x, y))\n    \n    # Check if (4, 5) is a solution for x and y\n    if solutions[x] == 4 and solutions[y] == 5:\n        ans = False  # John is not right because there are other solutions\n    else:\n        ans = 10 * solutions[x] + solutions[y]  # Get the value of A\n\n    return ans\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n    pupils_per_row = total_pupils // rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    a = 16 - 12\n    b = 18 - 2*a\n    return b\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlocked_lockers = 0\n    for i in range(1, 101):\n        if i % 3 == 0:\n            unlocked_lockers += 1\n        if i % 5 == 0:\n            unlocked_lockers -= 1\n    return 100 - unlocked_lockers\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Define the original expression components\n    a, b, c, d, e = 285, 15, 5, 2, 2\n    \n    # Different ways to insert brackets (1 pair or 2 pairs)\n    solutions = set([\n        a + (b / c) - d - e,\n        a + b / (c - d) - e,\n        a + (b / (c - d) - e),\n        (a + b) / c - d - e,\n        ((a + b) / c - d) - e,\n        (a + (b / c) - d) - e,\n        a + ((b / c) - d - e),\n        a + b / ((c - d) - e),\n        a + (b / c - d) - e,\n        (a + b / c) - (d - e),\n        a + ((b / c) - (d - e)),\n        (a + b / c) - d - e,\n        a + b / c - d - e\n    ])\n\n    # Return how many distinct values we obtain\n    return len(solutions)\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFG'):\n        if perm.index('A') in [perm.index('B') + 1, perm.index('B') - 1] or \\\n           perm.index('A') in [perm.index('C') + 1, perm.index('C') - 1]:\n            continue\n        \n        if abs(perm.index('D') - perm.index('E')) == 1:\n            continue\n        \n        if abs(perm.index('F') - perm.index('G')) != 1:\n            continue\n            \n        count += 1\n        \n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # Assume Nicolas's speed is 1 level per unit time, so Yiding's speed is 3/4 level per unit time.\n    # When Nicolas reaches level 16, the time passed will be 16 - 1 = 15 units of time.\n    nicolas_current_level = 16\n    nicolas_start_level = 1\n    yiding_start_level = 1\n    yiding_speed_ratio = 3/4\n\n    time_passed = nicolas_current_level - nicolas_start_level\n    yiding_current_level = yiding_start_level + time_passed * yiding_speed_ratio\n\n    return int(yiding_current_level)\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    quotient = 11\n    remainder = 5\n    divisor = 12\n\n    number = (quotient * divisor) + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1/(2-3)) - (4/(5-6)) - (7/(8-9))\n    return ans\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create a symbol for the cost of one cake\n    cost_per_cake = symbols('cost_per_cake')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(10 * cost_per_cake - (0 + 11), 0) # 0 + borrowed money = total money for 10 cakes\n    equation2 = Eq(13 * cost_per_cake - (0 + 26), 0) # 0 + borrowed money = total money for 13 cakes\n    \n    # Solve the equations to find the cost of one cake\n    solution = solve((equation1, equation2), (cost_per_cake))\n    \n    return solution[cost_per_cake]\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    num1 = 4.6\n    num2 = 13.8\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    mean_score = 40\n    total_score = mean_score * total_matches\n    known_scores_total = 37 + 53 + 29 + 41\n    x = total_score - known_scores_total\n    return x\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_mass_children = total_mass_boys + total_mass_girls\n    number_of_children = 4 + 6\n    average_mass = total_mass_children / number_of_children\n    return average_mass\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('CHEESE')\n    c_count = 1\n    h_count = 1\n    e_count = 3\n    s_count = 1\n    \n    ways = factorial(total_letters) // (factorial(c_count) * factorial(h_count) * factorial(e_count) * factorial(s_count))\n    \n    return ways\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    count = 0\n    # Counting all the numbers with exactly two sevens\n    # Two sevens can be in the following positions:\n    # 77*, *77, 7*7 where * is not 7\n    # For each case we have 9 options for the non-seven digit (1-9 for first position, 0-9 for others)\n    \n    # Case 1: 77*\n    for i in range(1, 10):  # Exclude 7\n        if i != 7:\n            count += 1\n    \n    # Case 2: *77\n    for i in range(10):  # Include 0-9\n        if i != 7:\n            count += 1\n            \n    # Case 3: 7*7\n    for i in range(10):  # Include 0-9\n        if i != 7:\n            count += 1\n    \n    # Counting all the numbers with exactly three sevens (777)\n    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let total number of animals be x\n    # let initial number of cows be y (65% of x, hence 0.65x)\n    # let initial number of goats be z (35% of x, hence 0.35x)\n\n    x, y, z = symbols('x y z')\n    initial_cows = Eq(y, 0.65 * x)\n    initial_goats = Eq(z, 0.35 * x)\n\n    # 240 more cows and goats were added\n    total_animals_after = Eq(x + 240, y + z + 240)\n\n    # percentage of cows increased by 20% (from 65% to 85%)\n    percent_cows_after = Eq(y + 240, 0.85 * (x + 240))\n\n    # number of goats doubled\n    goats_doubled = Eq(z * 2, z + 240)\n\n    # solving the system of equations\n    solutions = solve((initial_cows, initial_goats, total_animals_after, percent_cows_after, goats_doubled), (x, y, z))\n\n    return solutions[z]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for num in range(10000, 100000):  # Since adding the digit \"9\" forms a 6-digit number, iterate through 5-digit numbers starting with \"9\"\n        special_num = int(str(9) + str(num))\n        new_number = int(str(num) + str(9))\n        if new_number == 4 * special_num:\n            return special_num\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Jonathan and Abigail's present ages\n    jonathan, abigail = symbols('jonathan abigail')\n\n    # Equation 1: Abigail is 6 years older than Jonathan\n    equation1 = Eq(abigail, jonathan + 6)\n    \n    # Equation 2: Six years ago, she was twice as old as he was\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (jonathan, abigail))\n\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a - b\n    return new_operation(4, 3) - new_operation(3, 4)\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n    \n    # Since ABA + CDC = 726, we know that A and C cannot be 0 or 7.\n    # Also, A can be 1 to 6 and C can be 1, 2, 3, 4, 5, 8, 9 (not 6 since A can be 6)\n    for p in permutations(range(1, 10), 4):\n        A, B, C, D = p\n        if A != 7 and C != 7 and A != C:\n            num1 = 100 * A + 10 * B + A\n            num2 = 100 * C + 10 * D + C\n            if num1 + num2 == 726:\n                return A + B + C + D\n                \nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percent_increase = (increase / initial_amount) * 100\n\n    return percent_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    total_work = 1  # The whole job\n    alice_work_per_day = 1 / 40\n    bob_work_per_day = 1 / 60\n\n    # Let's say Alice takes 'x' days off.\n    # Then, Alice and Bob work together for (27 - x) days and Bob works alone for 'x' days.\n\n    # Total work done when both are working together for (27 - x) days\n    work_done_together = (alice_work_per_day + bob_work_per_day) * (27 - x)\n    # Work done by Bob alone for 'x' days\n    work_done_bob_alone = bob_work_per_day * x\n\n    # The total work should equal the entire job\n    # work_done_together + work_done_bob_alone = total_work\n    # (1/40 + 1/60) * (27 - x) + 1/60 * x = 1\n            \n    # We solve the equation to find 'x'\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = (1 / 40 + 1 / 60) * (27 - x) + (1 / 60) * x - 1\n    days_off = solve(equation, x)\n\n    return days_off[0]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    apple, banana = symbols('apple banana')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = 36 * 37 * 38 * 39 * 40 * 41\n    remainder = product % 7\n    return remainder\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    return 126 / 2\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    total_days = symbols('total_days')\n    \n    # Given conditions\n    # Vanessa reads 30 pages a day and finishes 2 days after the deadline\n    # Vanessa reads 39 pages a day and finishes 4 days before the deadline\n    # Let the total number of pages in the book be 'total_pages'\n    \n    total_pages = 30 * (total_days + 2)\n    total_pages = 39 * (total_days - 4)\n    \n    # These two expressions for total_pages should be equal\n    equation = Eq(30 * (total_days + 2), 39 * (total_days - 4))\n    \n    # Solve the equation\n    days_solution = solve(equation, total_days)\n    \n    # Find the number of days\n    days = days_solution[0]\n    \n    # Find the total number of pages\n    pages = 30 * (days + 2)\n    \n    return int(days), int(pages)\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    pattern_length = 6   # The sequence is repeating every 6 digits: 202020\n    digit_count = 535\n    \n    complete_patterns = digit_count // pattern_length  # Complete repetitions of the pattern\n    remaining_digits = digit_count % pattern_length    # Remaining digits after the last complete pattern\n\n    count_2s_in_pattern = 3  # There are three '2's in each complete pattern of length 6\n    \n    # Count '2's in complete patterns and in the remaining part\n    total_2s = complete_patterns * count_2s_in_pattern\n    # Counting the '2's in the remainder part of the sequence\n    for i in range(remaining_digits):\n        if (i % 2) == 0:  # In the pattern 202020, '2' occurs at indices 0, 2, and 4\n            total_2s += 1\n            \n    return total_2s\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # Define a function that calculates the Delta operation based on patterns\n    def delta_operation(a, b):\n        return a**2 + a*b\n\n    ans = delta_operation(10, 9)\n    return ans\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_away_cookies = 55\n\n    remaining_cookies = (morning_cookies + afternoon_cookies) - given_away_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        if (adults * 5 + children * 3) == 75:\n            return adults\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of 50-cent coins Owen had \n    # Let y be the original number of 1-dollar coins Owen had\n    x, y = symbols('x y')\n\n    # According to the problem, we have the following equations\n    # Since 2/7 of his coins were 50-cent, 5/7 were 1-dollar coins:\n    equation1 = Eq(x, (2/7) * (x + y))\n\n    # His mother gave him 10 more 1-dollar coins and 10 more 50-cent coins (since she gave five dollars worth of fifty-cent coins which makes 10 coins)\n    equation2 = Eq(y + 10, 2 * (x + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The total number of coins Owen had at first is x + y\n    total_coins = solutions[x] + solutions[y]\n\n    return total_coins\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_save = 7\n    andy_total_save = 378\n    brenda_daily_save = 6\n\n    days_passed = andy_total_save // andy_daily_save\n    brenda_total_save = days_passed * brenda_daily_save\n\n    return brenda_total_save\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n    \n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    dress_cost = solutions[dress]\n    shirt_cost = solutions[shirt]\n\n    return dress_cost - shirt_cost\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    numerator = 52\n    denominator = 2/3\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of marbles Anna (A), Betsy (B) and Charlene (C) initially had\n    A, B, C = symbols('A B C')\n\n    # Total marbles before any transactions\n    equation1 = Eq(A + B + C, 168)\n\n    # The transactions based on the problem statement\n    equation2 = Eq(B + 15, C - 15)  # Betsy received 15 from Charlene\n    equation3 = Eq(A + 8, B - 8)    # Anna received 8 from Betsy\n\n    # Ratios after transactions. Because total marbles remain same, we assume 2k, 5k, and 7k\n    k = symbols('k')\n    equation4 = Eq(2*k, A + 8)      # Anna now has 2 parts\n    equation5 = Eq(5*k, B - 8)      # Betsy now has 5 parts\n    equation6 = Eq(7*k, C - 15)     # Charlene now has 7 parts\n\n    # Solving the simultaneous equations gives us the number of marbles each had initially\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (A, B, C, k))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    total_points = 44\n\n    # Let x be the number of correct answers and (total_questions - x) be the number of incorrect answers.\n    # Then we have the equation: points_correct * x + points_incorrect * (total_questions - x) = total_points\n    for x in range(total_questions + 1):\n        if points_correct * x + points_incorrect * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    num_contestants = 8\n    \n    # The number of ways we can award the prizes\n    ways = factorial(num_contestants) / factorial(num_contestants - 3)\n\n    return int(ways)\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original volume of the cuboid: V_original = length * breadth * height\n    # New length: length_new = length * 1.10 (increased by 10%)\n    # New breadth: breadth_new = breadth * 4/5 (reduced to 4/5 of the original)\n    # New height: height_new = height * 11/10 (ratio of new height to original height is 11:10)\n\n    # New volume of the cuboid: V_new = length_new * breadth_new * height_new\n    # V_new = length * 1.10 * breadth * 4/5 * height * 11/10\n\n    # New volume as a percentage of original volume:\n    # (V_new / V_original) * 100%\n    percentage_new_volume = (1.10 * 4/5 * 11/10) * 100\n\n    return percentage_new_volume\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    num_triangles = comb(num_points, num_vertices)\n    return num_triangles\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sum_repeated = (30 + 40 + 50) * 3\n    return sum_repeated\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_percentage = 1 - 0.60 # 100% - 60% work completed\n    total_masks = 360 / remaining_percentage\n    return int(total_masks)\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    ans = round(number, -1)\n    return ans\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of mushrooms gathered in the first hour\n    # Let y be the number of mushrooms gathered in the second hour\n    x, y = symbols('x y')\n\n    # Total mushrooms gathered in two hours\n    total_mushrooms = 40\n\n    # Equation 1: x + y = total_mushrooms\n    eq1 = Eq(x + y, total_mushrooms)\n\n    # Equation 2: If 26 more mushrooms were gathered in the first hour, it would equal the second hour\n    eq2 = Eq(x + 26, y)\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2), (x, y))\n\n    # We're interested in the number of mushrooms gathered in the second hour\n    return solution[y]\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    \n    return difference\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Time spent jogging: 7:30 - 6:30\n    jogging_time_hours = 1\n\n    # Time spent walking: 9:30 - 7:30\n    walking_time_hours = 2\n\n    # Speed while jogging in miles per hour\n    jogging_speed_mph = 6.5\n\n    # Speed while walking in miles per hour\n    walking_speed_mph = 4.5\n\n    # Distance traveled while jogging\n    jogging_distance = jogging_speed_mph * jogging_time_hours\n\n    # Distance traveled while walking\n    walking_distance = walking_speed_mph * walking_time_hours\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    return 200 * 30 * 60\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    foldable, non_foldable = symbols('foldable non_foldable')\n    \n    # Total bicycles before any were sold\n    total_bicycles_eq = Eq(foldable + non_foldable, 476)\n\n    # Bicycles left after sales\n    # 208 bicycles were sold\n    bicycles_left = 476 - 208\n\n    # 5/9 of the non-foldable bicycles left after the sale\n    non_foldable_left_eq = Eq(non_foldable * (5/9), non_foldable - (non_foldable - (5/9 * non_foldable)))\n    \n    # 4/7 of the foldable bicycles left after the sale\n    foldable_left_eq = Eq(foldable * (4/7), foldable - (foldable - (4/7 * foldable)))\n\n    # The equations of foldable and non-foldable bicycles left in the shop need to add up to the total bicycles left\n    bicycles_left_eq = Eq((non_foldable * (5/9)) + (foldable * (4/7)), bicycles_left)\n\n    # Solve the system of equations\n    solutions = solve((total_bicycles_eq, non_foldable_left_eq, foldable_left_eq), (foldable, non_foldable))\n\n    foldable_sold = solutions[foldable] - (solutions[foldable] * (4/7))\n\n    return foldable_sold\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    climbed = 0\n    day = 0\n\n    while climbed < height:\n        day += 1\n        climbed += 10  # climbs up 10m every day\n        if climbed >= height:\n            break\n        climbed -= day  # slides down 'day' meters every night\n\n    return day\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    scan_age, ted_age = symbols('scan_age ted_age')\n\n    # Given ratios\n    present_ratio = Eq(scan_age/ted_age, 1/4)\n    future_ratio = Eq((scan_age + 4)/(ted_age + 4), 1/3)\n\n    # Solve the system of equations\n    ages_now = solve((present_ratio, future_ratio), (scan_age, ted_age))\n\n    # Extract the ages\n    scan_age_now = ages_now[scan_age]\n    ted_age_now = ages_now[ted_age]\n\n    # Define a new variable for years ago when the ratio was 1:9\n    years_ago = symbols('years_ago')\n\n    # Ratio years ago\n    past_ratio = Eq((scan_age_now - years_ago)/(ted_age_now - years_ago), 1/9)\n\n    # Solve for years ago\n    years_ago_solution = solve(past_ratio, years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # In this problem, Noa and his 4 classmates are 5 people in total.\n    # Everyone should solve at least one question and no one can solve the same number of questions.\n    # To maximize the number of questions Noa can solve, we should minimize the number of questions \n    # each of the other classmates solve.\n    # We give 1 question to the first classmate, 2 to the second, 3 to the third, 4 to the fourth,\n    # which totals to 1+2+3+4 = 10. This is the smallest number of questions we can distribute to others\n    # while keeping the condition that everyone solves a different number of questions.\n    # The remaining questions can be solved by Noa.\n    remaining_questions = 40 - (1 + 2 + 3 + 4)\n    return remaining_questions\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_factor = 2 / 300  # scale from cm to m (2cm/3m)\n    real_tree_height_m = 12  # real tree height in meters\n    model_tree_height_cm = real_tree_height_m * scale_factor * 100  # convert meters to cm\n\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    # Let x be the number of guppies\n    # Number of goldfish = 2 * x\n    # Number of mollies = 2 * (2 * x) = 4 * x\n    # We know there are 276 mollies\n    # So, 4 * x = 276\n    # Solving for x gives us the number of guppies\n    x = 276 // 4\n\n    # The number of mollies is 276 which is 4 * number of guppies\n    # So difference between mollies and guppies is 276 - x\n    return 276 - x\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    from sympy import divisors\n\n    return sum(divisors(20))\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    ans = 9 * 100\n    return ans\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # According to the Pigeonhole Principle, if you want to make sure at least one student gets 3 candies,\n    # you need to have enough candies for each of the other 19 students to have 2 candies plus 3 candies for one student.\n    # Thus, the minimum number of candies Valeria needs is 19 students * 2 candies/student + 3 candies = 41 candies.\n    \n    candies_for_other_students = 19 * 2\n    candies_for_one_student = 3\n    total_candies = candies_for_other_students + candies_for_one_student\n    \n    return total_candies\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_fraction = 1 - 5/8\n    remaining_grams = 6000\n    original_grams = remaining_grams / remaining_fraction\n    return original_grams\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    return 0.60 * 765\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    correct_mark = 8\n    wrong_mark = -4\n    total_score = 100\n    \n    # Assume x is the number of correct answers, then (total_questions - x) is the number of wrong answers.\n    # correct_mark * x + wrong_mark * (total_questions - x) = total_score\n    for x in range(total_questions + 1):  # +1 because range is not inclusive of the upper bound\n        if correct_mark * x + wrong_mark * (total_questions - x) == total_score:\n            return x\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n\n    number_of_intervals = total_flowers // flowers_between_posts + 1\n    road_length = 50\n\n    distance_between_posts = road_length / number_of_intervals\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    ans = sum(range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    ans = 3 * 126\n    return ans\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # Worst case scenerio to get a pair of white socks is to pick all red and black socks first.\n    # That would be 10 red and 10 black, total 20 socks.\n    # Next two socks to pick could be white which will definitely make a pair of white socks.\n    # So total socks picked is 20 (red + black) + 2 (white) = 22 socks.\n    \n    max_socks_for_pair_white = (10 + 10) + 2\n    return max_socks_for_pair_white\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    return 48 * (5 / 4)\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    books_left = 6\n    books_right = 14 - 1  # Subtract one because the 14th book from the right is the favorite book itself\n\n    total_books = books_left + books_right + 1  # Add one for the favorite book\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    return 8 - 17\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n    # Including trees on both ends of the road\n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    return 13.8 * 10**7 * 5.4 * 10**-12\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    keep_for_sister = 6\n    number_of_friends = 6\n\n    sweets_for_friends = (total_sweets - keep_for_sister) // number_of_friends\n\n    return sweets_for_friends\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    nth_term = first_number * (ratio ** (5 - 1))\n    return nth_term\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    p_rate_per_hour = 1 / (12 * 8)\n    q_rate_per_hour = 1 / (8 * 10)\n    \n    combined_rate_per_hour = p_rate_per_hour + q_rate_per_hour\n    combined_rate_per_day = combined_rate_per_hour * 8\n    \n    days_to_complete = 1 / combined_rate_per_day\n    \n    return days_to_complete\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_van_1 = 132  # speed of the faster van in km per hour\n    speed_van_2 = 78   # speed of the other van in km per hour\n    time = 8           # time in hours\n\n    distance_apart = (speed_van_1 + speed_van_2) * time\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # To maximize the number of apples for the child who gets the most,\n    # we need to minimize the number of apples for the other children.\n    # Therefore, we give 1 apple to the first child, 2 apples to the second,\n    # 3 to the third, and 4 to the fourth. Now we find the number of apples\n    # for the fifth child by subtracting the total number of apples given away\n    # from the initial amount.\n\n    total_apples = 19\n    # The sum of the first four children's apples\n    given_apples = 1 + 2 + 3 + 4\n    # The number of apples for the fifth child (who gets the most)\n    max_apples = total_apples - given_apples\n\n    return max_apples\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = 360 / (remaining_work_percentage / 100)\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    solution = solve(equation, original_score)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12\n    distance_from_edge = 1.5\n    distance_between_bushes = 3\n\n    # Calculate the length available for planting the rosebushes on one side\n    available_length_each_side = side_length - 2 * distance_from_edge\n\n    # Calculate the number of rosebushes that can be planted on one side\n    # Add 1 at the end because we start with a bush at each corner\n    num_bushes_each_side = int(available_length_each_side / distance_between_bushes) + 1\n\n    # Since there are 4 sides and we counted the corner bushes twice, subtract 4 to get the total number\n    total_num_bushes = 4 * num_bushes_each_side - 4\n\n    return total_num_bushes\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    count = 0\n    for bags in range(2, 79, 2): # Check for even number of bags\n        if 78 % bags == 0:       # Check if 78 apples can be evenly distributed\n            count += 1\n    return count\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given exchange rates\n    rabbits_for_goats = 9 / 3\n    goats_for_cows = 2 / 4\n    \n    # Find the exchange rate for rabbits to cows by multiplying the inverse of goats to cows with rabbits to goats\n    rabbits_for_cows = rabbits_for_goats * (1 / goats_for_cows)\n    \n    # Find how many rabbits can 2 cows be exchanged for by multiplying the exchange rate with 2\n    rabbits_for_two_cows = rabbits_for_cows * 2\n\n    return rabbits_for_two_cows\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Let's assume the number of pencils is 4k and pens is 5k for some integer k\n    # After taking out a pen and adding a pencil, the ratio should become 7:8\n    # This gives us the two equations:\n    # 4k + 1 (pencils) and 5k - 1 (pens)\n    # (4k + 1)/(5k - 1) = 7/8\n    # Solving for k and then calculating the total number of pencils and pens\n\n    # As this is a simple system we can just iterate over possible values of k\n    k = 1\n    while True:\n        pencils = 4 * k + 1\n        pens = 5 * k - 1\n        if pencils * 8 == pens * 7:\n            break\n        k += 1\n    total = pencils + pens\n    return total\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    total_score = 168\n\n    # Let the number of correct answers be x\n    # Therefore, the number of wrong answers will be attempted_questions - x\n    # 4 * number_of_correct_answers - 1 * number_of_wrong_answers = total_score\n    # 4x - (attempted_questions - x) = total_score\n    # 4x - attempted_questions + x = total_score\n    # 5x = total_score + attempted_questions\n    # x = (total_score + attempted_questions) / 5\n\n    correct_answers = (total_score + attempted_questions) // 5\n\n    return correct_answers\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 5 * a + 8\n    \n    result = hash_op(10, 9)\n    result = hash_op(result, 8)\n    result = hash_op(result, 7)\n    result = hash_op(result, 6)\n    result = hash_op(result, 5)\n    result = hash_op(result, 4)\n    \n    return result\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    number_of_terms = 10\n    \n    # Formula to calculate the sum of an arithmetic sequence: n/2 * (2a + (n-1)d)\n    total_seats = (number_of_terms / 2) * (2 * first_term + (number_of_terms - 1) * common_difference)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    # Percentage of girls on the school trip\n    percent_girls = 100 - 40\n    # Number of girls\n    num_girls = 72\n    # Calculate the total number of children on the trip\n    total_children = (num_girls * 100) / percent_girls\n    return int(total_children)\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    remaining_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n\n    return remaining_strawberries\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n    \n    for i in digits:\n        for j in digits:\n            if i != j and (10 * i + j) % 2 != 0:\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # Each sheet has a front and back side, which corresponds to 2 consecutive page numbers.\n    # Since the page numbers are consecutive, we can calculate the number of missing page numbers \n    # by subtracting the last page number before the missing pages from the first page number after.\n    # However, since page 14 is the last one before the missing, the next page (15) is the first missing page number,\n    # and since page 35 is the first one after the missing, the last missing page number is the one before it (34).\n    missing_pages = 35 - 14 - 1\n    \n    # To find the number of sheets missing, divide the number of missing page numbers by 2.\n    # We'll use integer division since we're dealing with whole sheets.\n    missing_sheets = missing_pages // 2\n    \n    return missing_sheets\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = (4 * 8) + (4 * 17)\n    return ans\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original cost of the books be x\n    original_cost = symbols('x')\n\n    # He hopes to earn a 60% profit, so the planned profit is 0.6 * x\n    planned_profit = 0.6 * original_cost\n\n    # On the first day, he earned a 60% profit on 70% of the books\n    first_day_profit = 0.7 * original_cost * 0.6\n\n    # Total profit is 80% of the planned profit\n    total_profit = 0.8 * planned_profit\n\n    # The profit from the second day is the remaining profit after the first day\n    second_day_profit = total_profit - first_day_profit\n\n    # Since he sells the remaining 30% of his books on the second day,\n    # the cost of the remaining books is 0.3 * x. Let 'd' be the discount rate on the second day\n    remaining_books_cost = 0.3 * original_cost\n    discount_rate = symbols('d')\n\n    # The revenue from the second day is the cost minus the achieved profit\n    revenue_second_day = remaining_books_cost - second_day_profit\n\n    # Setting up the equation for the revenue with discount rate\n    equation = Eq(revenue_second_day, remaining_books_cost * (1 - discount_rate))\n\n    # Solving for the discount rate 'd'\n    discount_solution = solve(equation, discount_rate)\n\n    return float(discount_solution[0])\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a tuna puff and curry puff\n    tuna_puff_price, curry_puff_price = symbols('tuna_puff_price curry_puff_price')\n\n    # We know that Jenna bought 12 tuna puffs and 19 curry puffs for $39.60\n    # We also know each curry puff costs $0.20 less than a tuna puff\n    equation1 = Eq(12 * tuna_puff_price + 19 * curry_puff_price, 39.60)\n    equation2 = Eq(curry_puff_price, tuna_puff_price - 0.20)\n\n    # Solve the system of equations for the price of a tuna puff and curry puff\n    solutions = solve((equation1, equation2), (tuna_puff_price, curry_puff_price))\n\n    # Return the price of each tuna puff\n    return solutions[tuna_puff_price]\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start = 10\n    end = 25\n    count = end - start + 1\n    return count\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60.0\n    distance_meters = speed_m_per_min * time_minutes\n    return distance_meters\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_balloons = 126\n    total_children = 38\n\n    for boys in range(total_children + 1):\n        girls = total_children - boys\n        if (boys * 2 + girls * 4) == total_balloons:\n            return boys\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) / 4\n    return n\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    from fractions import Fraction\n\n    product = 1  # Initialize product to 1 (multiplicative identity)\n    for i in range(3, 21, 2):  # Start from 3, end at 19, increment by 2\n        product *= Fraction(1, 1) + Fraction(2, i)\n    return product\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x denote the initial total number of animals in the farm\n    x = symbols('x')\n\n    # Given that initially, 65% were cows, so the number of cows = 0.65x\n    # Rest were goats, so number of goats = x - 0.65x = 0.35x\n\n    # After adding 240 animals the percentage of cows increases by 20%\n    # Therefore, the new percentage of cows is 65% + 20% = 85%\n    # Number of goats doubles so new number of goats = 2 * 0.35x\n\n    # Setting up the equation based on the new distribution\n    # Number of cows (0.85 * (x + 240)) = Number of initial cows (0.65x) + 240\n    equation = Eq(0.85 * (x + 240), 0.65*x + 240)\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    # Initial number of goats = 0.35x\n    initial_goats = 0.35 * solution[0]\n\n    return int(initial_goats)\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (-cookies) % 5 == -3:\n            return cookies\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    length_needed_cm = 400 * 85  # Total length needed in centimeters\n    roll_length_cm = 20 * 100    # Length of one roll in centimeters (converted from meters to centimeters)\n    \n    rolls_needed = length_needed_cm / roll_length_cm\n    rolls_needed = int(rolls_needed) if rolls_needed.is_integer() else int(rolls_needed) + 1  # Round up if not an integer\n    \n    return rolls_needed\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    donation = salary / 4\n    spending = (salary - donation) * (5 / 6)\n    savings = salary - donation - spending\n\n    equation = Eq(spending, donation + 78)\n    solutions = solve(equation, salary)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Emma and John's ages now\n    emma, john = symbols('emma john')\n\n    # The equation representing the sum of their ages in 3 years\n    equation1 = Eq(john + 3 + emma + 3, 27)\n\n    # The equation representing the fact that John is 7 years older than Emma\n    equation2 = Eq(john, emma + 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (emma, john))\n\n    # Return the age of Emma\n    return solutions[emma]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # The last digit of a number only depends on the last digit of its factors.\n    # The last digit of powers of 2 cycles through 2, 4, 8, 6, and repeats this pattern every 4 powers.\n    # Since 2017 mod 4 is 1, the last digit of 2^2017 will be the first digit in the cycle: 2.\n    last_digit_2 = 2\n\n    # Similarly, the last digit of powers of 3 cycles through 3, 9, 7, 1 and repeats this pattern\n    # every 4 powers. Since 2017 mod 4 is 1, the last digit of 3^2017 will be the first digit in \n    # the cycle: 3.\n    last_digit_3 = 3\n\n    # The product of the last digits of (2^2017) and (3^2017) will give us the last digit of \n    # the entire expression.\n    last_digit = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 400:\n        return ans\n        ans += 2*3*5*7\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of minutes David walks at the initial speed.\n    x = symbols('x')\n\n    # Distance walked at initial speed: 150m/min * x minutes\n    distance_initial_speed = 150 * x\n    \n    # Distance walked at increased speed: (150m/min + 50m/min) * (x - 10) minutes\n    distance_increased_speed = (150 + 50) * (x - 10)\n\n    # Total distance walked\n    equation = Eq(distance_initial_speed + distance_increased_speed, 3700)\n    \n    # Solving the equation\n    time_spent = solve(equation, x)\n    \n    # David spends x minutes at initial speed and x - 10 minutes at increased speed\n    total_time = time_spent[0] + (time_spent[0] - 10)\n    \n    return total_time\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    # Given terms\n    term_7th = 57\n    term_15th = 89\n    position_7th = 7\n    position_15th = 15\n\n    # Common difference formula for arithmetic sequence:\n    # An = A1 + (n - 1)d, where An is the nth term, A1 is the first term, d is the common difference, and n is the term position.\n    # Convert this to find common difference (d): d = (An - A1) / (n - 1)\n    \n    # We have two terms, hence we have two equations and we can solve for d directly:\n    # A15 = A7 + (15 - 7)d\n    # 89 = 57 + 8d\n    # Solve for d\n    common_difference = (term_15th - term_7th) / (position_15th - position_7th)\n\n    return common_difference\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets_left = 240\n    sweets_per_week = 45 - 60\n    target_sweets = 150\n    weeks = 0\n\n    while sweets_left > target_sweets:\n        sweets_left += sweets_per_week\n        weeks += 1\n\n    return weeks\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    sum_digits = 4 + 7 + 1 + 9  # Sum of the given digits\n\n    # The sum of the digits of a number divisible by 9 must be multiple of 9\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if len({4, 7, A, 1, B, 9, C}) == 7:  # all digits are different\n                    if (sum_digits + A + B + C) % 9 == 0:\n                        return A + B + C, 4700000 + A * 10000 + 1000 + B * 100 + 900 + C\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    # For each digit in a three-digit number, we can choose among 3 options (5, 6, 7)\n    # Since each digit can be used more than once, each place (hundreds, tens, ones)\n    # has 3 possible digits. So, we have 3 choices for each of the 3 places.\n    count = 3 * 3 * 3  # Hundreds * Tens * Ones\n    return count\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = (sport_class + reading_class) - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for price of an apple and an orange\n    apple, orange = symbols('apple orange')\n\n    # Equations based on the word problem\n    equation1 = Eq(2 * apple + 1 * orange, 40)\n    equation2 = Eq(1 * apple + 2 * orange, 35)\n    \n    # Solve the system of equations\n    solution_prices = solve((equation1, equation2), (apple, orange))\n    \n    # Calculate what Carrie pays using the obtained prices\n    carrie_pays = solution_prices[apple] + solution_prices[orange]\n\n    return carrie_pays\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n    total_amount = 140\n    rackets_cost = 2 * racket_price\n\n    remaining_money = total_amount - rackets_cost\n    num_balls = remaining_money / ball_price\n\n    return int(num_balls)\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    heinz_rate = 4\n    jed_chocolates = 137\n    jed_rate = -6\n\n    weeks = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_rate\n        jed_chocolates += jed_rate\n        weeks += 1\n\n    return weeks\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # We use the Pigeonhole Principle to solve this problem.\n    # We want to make sure that we have three different colored balls.\n    # In the worst-case scenario, we could draw all balls of one color before seeing another color.\n    # There are 4 balls each of purple, white, and red.\n\n    # If we draw 4 balls, they could all be of one color (say, all purple).\n    # If we draw another 4 balls, in the worst case, they could all be of one color different from the first (say, all white).\n    # We still do not have 3 different colored balls.\n  \n    # We need to draw at least 1 more ball to ensure that we get a ball of the third color (say, red).\n\n    # So the answer is 4 (first color) + 4 (second color) + 1 (to guarantee the third color).\n    ans = 4 + 4 + 1\n    return ans\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(3 * apples + 5 * oranges, 270)\n    equation2 = Eq(3 * apples + 7 * oranges, 342)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    box_of_apples = solutions[apples]\n    box_of_oranges = solutions[oranges]\n\n    return (box_of_apples, box_of_oranges)\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    # Equation 1: racket + 5 * shuttlecock = 205\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    # Equation 2: 2 * racket + 15 * shuttlecock = 515\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "from itertools import combinations\n\ndef solution():\n    total_points = 12\n\n    # For a right-angled triangle to be formed on a circle, the hypotenuse should be the diameter of the circle.\n    # By choosing any two points to form the diameter, we can form one unique right angled triangle.\n    # Since the hypotenuse is also a side between two points, there are total_points/2 choices to form the diameter.\n    # Any other point on the circle except the two points chosen for the diameter can be the third point.\n    # So for each hypotenuse choice, we have (total_points - 2) options for the third point.\n\n    hypotenuse_choices = total_points // 2\n    third_point_choices = total_points - 2\n\n    # Total number of triangles is the product of the number of choices for the hypotenuse\n    # and the number of choices for the third point.\n    total_triangles = hypotenuse_choices * third_point_choices\n\n    return total_triangles\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # If the tiger is the 11th in line and also in the middle,\n    # it means there are 10 animals in front and 10 animals behind.\n    total_animals = 10 + 1 + 10  # 10 in front, the tiger, and 10 behind\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    result = (1/3)*24 + (2/5)*30 + (1/3)*15\n    return result\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    vase_division1 = 24 // 3\n    vase_division2 = vase_division1\n    total_roses = vase_division2 * (3 + 4)\n\n    return total_roses\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    return 100 - (33 + 34)\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 50  # cost in cents\n    mamee_cost = haribo_cost - 30\n    jelly_cost = 6 * mamee_cost  # big packet of jelly cost\n\n    # Convert the cost to dollars\n    jelly_cost_dollars = jelly_cost / 100\n\n    return jelly_cost_dollars\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    total = 2405 + 1827\n    return num2words(total)\n\nfrom num2words import num2words\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_candies = 2\n    cherry_candies = 7\n    mint_candies = 1\n\n    if mint_candies > 0:\n        candies_will_can_eat = lemon_candies + cherry_candies\n    else:\n        candies_will_can_eat = lemon_candies + cherry_candies + mint_candies\n\n    return candies_will_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    return (-18 + -2) / 2\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Defining the congruences based on the problem statement\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    \n    # Solving the system of congruences using the Chinese Remainder Theorem\n    num, _ = solve_congruence(*congruences)\n\n    # Getting the smallest positive solution less than 100\n    while num >= 100:\n        num -= 3 * 4 * 5\n\n    return num\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    result = 10.256 + 9.2 - 7.51\n    return result\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    for number in range(1, 80):\n        if (number % 2 == 1) and (number % 3 == 2) and (number % 4 == 3) and (number % 5 == 4):\n            return number\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):  # A cannot be 0 as it is a four-digit number\n        for B in range(10):  # B can be from 0 to 9\n            for C in range(10):  # C can be from 0 to 9\n                for D in range(1, 10, 2):  # D cannot be even (divisible by 5 and not 0)\n                    AB = 10 * A + B\n                    BC = 10 * B + C\n                    CD = 10 * C + D\n                    ABC = 100 * A + 10 * B + C\n                    BCD = 100 * B + 10 * C + D\n                    \n                    # Checking for divisibility\n                    if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and ABC % 9 == 0 and BCD % 11 == 0:\n                        # All divisibility conditions are satisfied\n                        return 1000 * A + 100 * B + 10 * C + D\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    # The number of games played in a single-elimination tournament is always one less than the number of participants, since each game played eliminates one participant until only the winner remains.\n    num_teachers = 16\n    num_games = num_teachers - 1\n    return num_games\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    ans = (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n    return ans\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    # The ratio of height to width on an old television screen is 3:4\n    ratio_height = 3\n    ratio_width = 4\n\n    # The height of a television screen\n    height = 21\n\n    # Calculate the width based on the height and the given ratio\n    width = (ratio_width * height) / ratio_height\n\n    # Calculate the perimeter of the screen\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of the children\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter', integer=True)\n\n    # Define the equations based on the provided conditions\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)       # Sum of ages is 55\n    equation2 = Eq(younger_son, older_son + 3)                                            # Sons are 3 years apart\n    equation3 = Eq(younger_daughter, older_daughter + 2)                                  # Daughters are 2 years apart\n    equation4 = Eq(younger_son, 2 * older_daughter)                                       # Younger son is twice as old as the older daughter\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Extract the age of the youngest child, which could be either the younger daughter or the older daughter\n    youngest_child_age = min(solutions[younger_daughter], solutions[older_daughter])\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurring_sequence = '428571'\n    sequence_length = len(recurring_sequence)\n    total_digits = 58\n    sum_of_digits = 0\n\n    for i in range(total_digits):\n        sum_of_digits += int(recurring_sequence[i % sequence_length])\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wallet, watch = symbols('wallet watch')\n\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    \n    average_distance = total_distance / number_of_people\n    \n    return average_distance\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Sum of all books\n    # Calculating the factorial of total books\n    different_ways = factorial(total_books) \n    # Dividing by the factorial of the number of identical books for each type\n    different_ways //= factorial(3)\n    different_ways //= factorial(4)\n    different_ways //= factorial(2)\n    different_ways //= factorial(2)\n\n    return different_ways\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_length = 13\n    nicks_length = toms_length + 25\n    difference = nicks_length - toms_length\n    return difference\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken_tenders = 18\n    total_students = 50\n    \n    percentage = (students_choosing_chicken_tenders / total_students) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    ans = 0.2 * 0.3\n    return ans\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution exchanged\n    x = symbols('x')\n\n    # Initial amounts of sugar in each bottle\n    sugar_A_initial = 50 * 0.11\n    sugar_B_initial = 50 * 0.47\n\n    # Amounts of sugar after exchange\n    sugar_A_after = sugar_A_initial - 0.11 * x + 0.47 * x\n    sugar_B_after = sugar_B_initial + 0.11 * x - 0.47 * x\n\n    # Set the two amounts equal to each other to find x\n    equation = Eq(sugar_A_after, sugar_B_after)\n\n    # Solve the equation\n    sol = solve(equation, x)\n\n    # Return only the positive solution as the amount cannot be negative\n    return sol[0]\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # Convert length into centimeters\n    cauliflower_spacing_cm = 40\n    first_cauliflower_offset_cm = 20\n\n    # Planting begins 20cm from the end and there should be at least 20cm from the other end, hence -40\n    available_length_cm = plot_length_cm - first_cauliflower_offset_cm - first_cauliflower_offset_cm \n\n    # Number of cauliflowers is the number of spaces plus one.\n    num_cauliflowers = (available_length_cm // cauliflower_spacing_cm) + 1\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    # Since the numbers must be three-digit, we cannot repeat any digit in a single number.\n    # Each digit must be used exactly once, and there are 3 digits.\n    # So the number of different three-digit numbers we can make is simply\n    # the number of permutations of these 3 digits, which is 3! (3 factorial).\n    \n    from math import factorial\n    ans = factorial(3)\n    return ans\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    prime_list = []\n\n    for num in range(2, 51):\n        if isprime(num) and isprime(num + 6) and num + 6 <= 50:\n            count += 1\n            prime_list.append(str(num))\n        elif isprime(num) and isprime(num - 6):\n            count += 1\n            prime_list.append(str(num))\n    \n    return count, ', '.join(prime_list)\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(1, 15):\n            for x3 in range(1, 15):\n                for x4 in range(1, 15):\n                    if x1 + x2 + x3 + x4 == 15 and len(set([x1, x2, x3, x4])) == 4:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    base_value = 250\n\n    ans = (percentage / 100) * base_value\n    \n    return ans\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    # Previous two numbers in the Fibonacci sequence\n    prev, current = 13, 21\n    # Calculate the next number in the sequence\n    next_num = prev + current\n    return next_num\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_meters = 3.7 + 64 / 100\n    subtract_meters = 2 + 7 / 100\n    ans = total_meters - subtract_meters\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    # Max's purchase: 1 banana + 2 pears = 94p\n    equation1 = Eq(banana + 2 * pear, 94)\n    # Emily's purchase: 1 banana + 1 pear = 62p\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    black, white, grey = symbols('black white grey')\n    \n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n    \n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n    \n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earnings = 70\n    num_days_worked = 6  # Monday to Saturday\n\n    total_earnings = average_daily_earnings * num_days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # 20th number in the sequence is 2^(20-1) as the sequence starts from 2^0\n    twentieth_number = 2 ** (20 - 1)\n    # 17th number in the sequence is 2^(17-1) as the sequence starts from 2^0\n    seventeenth_number = 2 ** (17 - 1)\n    # The answer is the 20th number divided by the 17th number\n    ans = twentieth_number // seventeenth_number\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_numbers = 35\n    max_product = 0\n    for i in range(1, sum_of_numbers // 2 + 1):\n        j = sum_of_numbers - i\n        product = i * j\n        if product > max_product:\n            max_product = product\n    return max_product\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    seconds = minutes * seconds_per_minute\n    return seconds\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Average number of books Alice, Becky, and Crystal have\n    average_initial = 60\n    \n    # Total books Alice, Becky, and Crystal have\n    total_initial = 3 * average_initial\n    \n    # New average when including Dennis\n    new_average = average_initial + 10\n    \n    # New total including Dennis\n    total_with_dennis = 4 * new_average\n    \n    # Books that Dennis has\n    dennis_books = total_with_dennis - total_initial\n    \n    return dennis_books\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    import sympy as sp\n    \n    smallest_two_digit_prime = sp.prime(4)  # The 4th prime is the smallest two-digit prime number\n    largest_two_digit_square = int(9)**2   # The largest two-digit square number is 9^2\n    \n    product = smallest_two_digit_prime * largest_two_digit_square\n    \n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1_to_4 = 9\n    flags_between_1_and_4 = 4 - 1\n    distance_between_each_flag = distance_1_to_4 / flags_between_1_and_4\n    flags_between_1_and_9 = 9 - 1\n    distance_1_to_9 = distance_between_each_flag * flags_between_1_and_9\n    return distance_1_to_9\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n    \n    mikes_height = (johns_height / ratio_john) * ratio_mike\n    \n    return mikes_height\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    return 4 + 0.6 + 0.07\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    import sympy\n    \n    # Check if 233 is a prime number\n    if sympy.isprime(233):\n        ans = True  # Michael is correct, Candy cannot divide the chocolate bars evenly\n    else:\n        ans = False  # Michael is incorrect, Candy can divide the chocolate bars evenly\n\n    return ans\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    distance_climbed_per_day = 5\n    slide_down_at_night = 3\n    net_distance_per_day = distance_climbed_per_day - slide_down_at_night\n    total_height = 16\n    day = 0\n    distance_climbed = 0\n\n    while True:\n        day += 1\n        distance_climbed += distance_climbed_per_day\n        if distance_climbed >= total_height:\n            break\n        distance_climbed -= slide_down_at_night\n\n    return day\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_a_pen = pen_cost // pencil_cost\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_in_still_water = 22\n    speed_of_current = 3\n    distance = 200\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    classA, classB, peaches = symbols('classA classB peaches')\n\n    equation1 = Eq(classA - classB, 3)\n    equation2 = Eq(5 * classA + 10, peaches)\n    equation3 = Eq(8 * classB + 2, peaches)\n\n    solutions = solve((equation1, equation2, equation3), (classA, classB, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    planes = 2\n\n    total_ways = trains + buses + planes\n    return total_ways\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_points = -2\n    total_points = 36\n\n    # Let x be the number of correct answers\n    # Total points is the sum of points from correct answers and incorrect answers\n    # correct_points * x + incorrect_points * (total_questions - x) = total_points\n    \n    for x in range(total_questions + 1):\n        if correct_points * x + incorrect_points * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    return 9.95 - 2.6 - 3.412\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    def count_derangements(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n    \n    ans = count_derangements(7)\n    \n    return ans\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 28512\n    factors = factorint(28512)\n    \n    # For 28512/h to be a cube, all prime factors' powers must be multiples of 3\n    h = 1\n    for prime, power in factors.items():\n        if power % 3 != 0:\n            # Multiply h by the prime raised to the difference needed to reach the next multiple of 3\n            h *= prime**(3 - (power % 3))\n    \n    return h\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # To ensure that Bart gets 2 M&Mâs chips of different colors, he needs to consider the worst-case scenario.\n    # The worst-case scenario would be picking all the chips of one color first.\n    # Since there are 3 red, 4 yellow, and 5 brown, the worst case would be taking all 5 brown first.\n    # To ensure he gets 2 different colors, he would then need to take 1 more, which could be red or yellow.\n    # So he would have to take all brown (5) + 1 more (either red or yellow), which equals 6 in total.\n\n    return 6\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Calculate the arrangements of 7 dancing (D) performances\n    dance_arrangements = factorial(7)\n    \n    # There are effectively 8 places where the 3 playing a sketch (P) performances can be inserted\n    # (before and after each of the 7 D performances and between them, meaning 7 + 1)\n    sketch_slots = 8\n    \n    # Choose 3 out of the 8 slots for the P performances\n    slot_arrangements = factorial(sketch_slots) // (factorial(3) * factorial(sketch_slots - 3))\n    \n    # The total arrangements is the product of the two types of arrangements\n    return dance_arrangements * slot_arrangements\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n    return total_children\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = 31415925\n    ans = (a + b) * (a - b)  # using the difference of two squares formula: (a+b)(a-b)=a^2-b^2\n    return ans\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_sequence = '85274'\n    sequence_length = len(recurring_sequence)\n    position = (79 - 1) % sequence_length  # Subtract 1 for zero-based index\n    digit = int(recurring_sequence[position])\n    return digit\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    families = 10\n    members_per_family = 3  # father, mother, child\n\n    # Each father shakes hands with members of other 9 families (father, mother, child)\n    handshakes_by_fathers = (families - 1) * families * members_per_family\n\n    # Each mother shakes hands with the fathers and children of other 9 families (father, child)\n    # 2 members from other families (excluding mothers)\n    handshakes_by_mothers = (families - 1) * families * (members_per_family - 1)\n\n    # Each child shakes hands with the fathers and mothers of other 9 families (father, mother)\n    # 2 members from other families (excluding children)\n    handshakes_by_children = (families - 1) * families * (members_per_family - 1)\n\n    # Total handshakes is the sum of all handshakes\n    total_handshakes = handshakes_by_fathers + handshakes_by_mothers + handshakes_by_children\n\n    return total_handshakes\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9\n    odd_digits_count = 5\n    \n    # For a 3 digit number, we have three places to fill with odd digits\n    # Each place can be filled with any of the 5 odd digits\n    # Therefore, for each place we have 5 choices, and since the digits are independent\n    # we can use the multiplication rule for independent events\n\n    ans = odd_digits_count * odd_digits_count * odd_digits_count \n    return ans\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_pages = 62\n    actual_sum = sum(range(1, total_pages + 1))\n    time_sum = 1939\n    missing_page = actual_sum - time_sum\n\n    return missing_page\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    # The smallest common multiple of 17 and 19 is their product since they are prime numbers\n    lcm = 17 * 19\n\n    # Start from the largest three-digit number and go down until we find one that satisfies the condition\n    for num in range(999, 99, -1):\n        if (num + 2009) % lcm == 0:\n            return num\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    free_hours = 40\n    hours = free_hours\n    extra_bill = bill\n\n    # Calculate the bill for hours between 40 and 50\n    if extra_bill > 0:\n        rate_40_50 = 5\n        if extra_bill <= (10 * rate_40_50):\n            hours += extra_bill / rate_40_50\n            return hours\n        else:\n            extra_bill -= (10 * rate_40_50)\n            hours += 10\n\n    # Calculate the bill for hours between 50 and 60\n    if extra_bill > 0:\n        rate_50_60 = 8\n        if extra_bill <= (10 * rate_50_60):\n            hours += extra_bill / rate_50_60\n            return hours\n        else:\n            extra_bill -= (10 * rate_50_60)\n            hours += 10\n\n    # Calculate the bill for hours above 60\n    if extra_bill > 0:\n        rate_above_60 = 15\n        hours += extra_bill / rate_above_60\n\n    return hours\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(1000):\n        if i + (i + 1) == 777:\n            return i + 2\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # we consider the worst case scenario\n    # Jane draws all marbles of one color then all of another, and so on.\n    # Finally, Jane will have to draw at least one from the remaining color to ensure she has all four colors.\n    \n    # Number of red, green, blue, and orange marbles\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # Drawing all but one color (worst case without drawing the fourth color)\n    # Choose the maximum numbers from three colors (since they are bigger and we want the worst case)\n    max_three = sorted([red, green, blue, orange])[-3:]\n\n    # Add one to ensure the fourth color is also drawn\n    ans = sum(max_three) + 1\n\n    return ans\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    ans = 5 / 16\n    return ans\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n\n    perimeter = 2 * (length + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    number = 3016\n    ans = number - 100\n    return ans\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # Define the number of ways to reach each step\n    ways = [0] * (10 + 1)\n    ways[0] = 1  # 1 way to start at the beginning\n\n    for i in range(1, 10 + 1):\n        if i == 5: # skip the muddy 5th step\n            continue\n        # Calculate ways to reach step i from i-1, i-2 and i-3 steps\n        if i - 1 >= 0:\n            ways[i] += ways[i - 1]\n        if i - 2 >= 0:\n            ways[i] += ways[i - 2]\n        if i - 3 >= 0:\n            ways[i] += ways[i - 3]\n        # If ith step cannot be the 5th step, then include the ways to jump over\n        # the 5th step directly from the 4th step to the 6th step, hence \n        # ways[6] includes ways[4] and so on for higher steps\n        if i - 4 >= 0:\n            ways[i] += ways[i - 4]\n\n    return ways[10]\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_earnings_per_day = 60\n    days_in_a_week = 7\n\n    total_earnings = average_earnings_per_day * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5 * x - 2 * x + 7), (6 * x + 4 * x - 14))\n\n    solution_to_equation = solve(equation, x)\n\n    return solution_to_equation[0]\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    max_val = 85\n    # Since we need the largest possible odd number, start by subtracting the smallest possible odd numbers\n    # for the other four numbers: 1, 3, 5, and 7\n    for i in range(1, 8, 2):\n        max_val -= i  # Subtract each of the four smallest odd numbers from max_val\n    return max_val  # max_val is now the largest possible odd number\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_in_still_water = 88\n    speed_of_current = 12\n    distance = 500\n\n    # Calculate the effective downstream speed\n    downstream_speed = speed_in_still_water + speed_of_current\n\n    # Calculate the time taken to travel 500 km downstream\n    time_taken = distance / downstream_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = symbols('income')\n\n    equation1 = Eq(0.01 * T * 30000 + 0.01 * (T + 3) * (income - 30000), 0.01 * (T + 1) * income)\n    solutions = solve((equation1), (T, income))\n\n    # Find only the solution for income over $30,000\n    actual_solution = [sol[income] for sol in solutions if sol[income] > 30000]\n\n    return actual_solution[0] if actual_solution else None\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n\n    return closest\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes_to_seconds = 2.5 * 60\n    return int(minutes_to_seconds)\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    coins = 213\n    children = 5\n    remainder = coins % children\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    total_coins = 21\n    total_value = 630  # in cents\n\n    for fifty_cent_coins in range(total_coins + 1):\n        twenty_cent_coins = total_coins - fifty_cent_coins\n        if 50 * fifty_cent_coins + 20 * twenty_cent_coins == total_value:\n            return fifty_cent_coins\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    count = 0\n    num = 2\n    while True:\n        # construct the number\n        str_num = '2' + '5' * num\n        int_num = int(str_num)\n\n        # Check if it's a perfect square by comparing the square of its rounded square root with itself\n        if int(round(int_num ** 0.5)) ** 2 == int_num:\n            count += 1\n        \n        # Since the numbers are increasing by powers of 10 and appending 5, it's unlikely to have another perfect square\n        # after a sequence of checks, so if count stays 0 for long enough, we assume there are no further squares and break\n        if count > 0 or num > 10:\n            break\n\n        num += 1\n\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Alice's and Tom's original amount of money\n    alice_original, tom_original = symbols('alice_original tom_original')\n\n    # Given conditions\n    # After Alice spent $36, she had $25.40 less than Tom\n    equation1 = Eq(alice_original - 36, tom_original - 25.40)\n    # Tom had $68.10\n    equation2 = Eq(tom_original, 68.10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice_original, tom_original))\n\n    # The amount of money Alice had at first\n    return solutions[alice_original]\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the speed of Alan be x meters per minute\n    # Then the speed of Phillip will be x + 15 meters per minute\n    # Since Phillip takes 12 minutes, Alan will take 12 + 3 = 15 minutes\n    # Therefore, the distance covered by Phillip (D) = 12 * (x + 15)\n    # The distance covered by Alan (D) = 15 * x\n    # Both equations should be equal because the distance from A to B is the same\n\n    x = symbols('x')\n    distance_phillip = 12 * (x + 15)\n    distance_alan = 15 * x\n\n    # Setting up the equation: distance by Phillip equals distance by Alan\n    equation = Eq(distance_phillip, distance_alan)\n\n    # Solving the equation\n    speed_alan = solve(equation, x)[0]\n\n    # Calculating the distance between A and B using either Alan's or Phillip's distance\n    distance_AB = distance_alan.subs(x, speed_alan)\n\n    return distance_AB.evalf()\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance = 74\n    distance_between_benches = 7\n    number_of_benches = 9\n\n    bench_length = (total_distance - (number_of_benches - 1) * distance_between_benches) / number_of_benches\n\n    return bench_length\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    # Calculate the total sum for the first set of 5 numbers\n    sum_of_first_set = 5 * 28\n    \n    # Calculate the total sum for the second set of 12 numbers\n    sum_of_second_set = 12 * 11\n    \n    # Calculate the total sum of both sets\n    total_sum = sum_of_first_set + sum_of_second_set\n    \n    # Calculate the total number of elements in both sets\n    total_numbers = 5 + 12\n    \n    # Calculate the mean of all the numbers\n    mean_of_all_numbers = total_sum / total_numbers\n    \n    return mean_of_all_numbers\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    \n    return final_price\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    class_a, class_b, candies = symbols('class_a class_b candies')\n    \n    # Equation 1: Each student in class A gets 4 candies but 20 more are needed\n    equation1 = Eq(4 * class_a, candies - 20)\n    \n    # Equation 2: Each student in class B can get 6 candies with 16 left over\n    equation2 = Eq(6 * class_b, candies - 16)\n    \n    # Equation 3: Number of students in class A is twice that in class B\n    equation3 = Eq(class_a, 2 * class_b)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (class_a, class_b, candies))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # We have 6 gold and 6 silver coins.\n    # In the worst case scenario, we can keep drawing coins of the same color.\n    # To ensure drawing 2 different colored coins, we draw all of one color first.\n    # After drawing all 6 gold coins, the next coin we draw must be a silver coin.\n    # Therefore, we need at least 7 coins to guarantee 2 different colored coins.\n\n    ans = 6 + 1  # 6 coins of the same color + 1 to ensure a different color\n    return ans\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    # Each time Peter cuts off 5 arms, 1 arm grows back.\n    # In effect, Peter reduces the total number of arms by 4 when he cuts 5.\n\n    # Total number of arms cut by Peter\n    arms_cut = 21\n\n    # Real reduction in the number of arms after each cut and growth\n    real_reduction = 5 - 1  # which is 4\n\n    # Find out how many times the action has taken place\n    action_count = arms_cut // real_reduction\n\n    # Since each action effectively removes 4 arms and there were 21 arms cut,\n    # the original number of arms would be 21 (arms cut) plus the number of actions,\n    # considering that an arm is grown back after each action (except the last)\n    original_arms = arms_cut + action_count\n\n    return original_arms\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    distance_per_interval = 20 / (5 - 1)  # distance between 1st and 5th tree divided by the number of intervals between them\n    total_distance = distance_per_interval * (14 - 8)  # distance between 8th and 14th tree is number of intervals times distance per interval\n    return total_distance\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # The 3rd greatest number is 246.\n    # Therefore, the two numbers greater than it should be at least 247 and 248.\n    # This implies that the first three largest numbers have a minimum sum of 246 + 247 + 248.\n    three_largest_sum = 246 + 247 + 248\n    \n    # The remaining 7 numbers should have values strictly less than 246.\n    # To minimize the 4th number, we make the 7 smallest numbers as large as possible without exceeding 245.\n    # Since they need to be different, we take the largest 7 numbers less than 246, which are: 239, 240, 241, 242, 243, 244, 245\n    seven_smallest_sum = sum(range(246 - 7, 246))\n    \n    # The total sum for the 10 numbers is 2021.\n    total_sum = 2021\n    \n    # Thus, the minimum value for the fourth greatest number is:\n    # 2021 (total sum) - (sum of largest 3 + sum of smallest 7).\n    min_fourth_number = total_sum - (three_largest_sum + seven_smallest_sum)\n\n    return min_fourth_number\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    return 38 * 32 + 37 * 33 + 36 * 34\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_minute = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n    distance = speed_m_per_minute * time_minutes\n    return distance\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    count = 0\n    for num in range(1, 25):\n        can_select = True\n        for divisor in range(2, min(num, 25 - num) + 1):\n            if num % divisor == 0 and (num + 1) % divisor == 0:\n                can_select = False\n                break\n            if num % divisor == 0 and (num - 1) % divisor == 0 and num != 1:\n                can_select = False\n                break\n        if can_select:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n\n    # Devi is 8 years older than Jerry\n    equation1 = Eq(devi, jerry + 8)\n\n    # In 4 years, the ratio of their ages will be 5:7\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey_age, father_age = symbols('grey_age father_age')\n    # When Grey was born, his father was 30 years old.\n    # Assume Grey is now x years old, then his father is x + 30 years old.\n    # This year, the age of Grey's father is three times that of Grey's age.\n    # Father's age is x + 30, Grey's age is x, so equation is x + 30 = 3 * x\n    equation = Eq(father_age, 3 * grey_age)\n\n    # Using the information that when Grey was born, his father was 30:\n    # We could deduce that the difference in age between them remains constant.\n    difference_in_age = 30\n\n    # Father's age is Grey's age plus this difference\n    solution = solve((equation, Eq(father_age - grey_age, difference_in_age)), (grey_age, father_age))\n\n    return solution[father_age]\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n    # Applying the Pigeonhole Principle, we divide the number of books\n    # by the number of layers and round up for the maximum\n    max_books_on_a_layer = -(-total_books // layers)\n\n    return max_books_on_a_layer\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    # As per the given question, we can say that if Bud has 'x' apples,\n    # then Pip has '5x' apples. This is a relationship that can be represented\n    # as parts in a graph.\n    \n    # If we assume Bud has 1 part, then Pip has 5 parts. Together they have 6 parts.\n    # We can't draw an actual graph here, but we can represent it as numbers with a list.\n    # This isn't a calculation task, but rather a visualization one.\n    \n    # So, to represent the \"parts\" graph, we can use a list where each element\n    # of the list represents one part. Bud has 1 part: [1], and Pip has 5 parts: [5].\n    Bud_parts = 1\n    Pip_parts = 5\n    graph = {'Bud': [1], 'Pip': [5]}\n    \n    return graph\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator_sum = 2998 + 2999 + 3000\n    denominator_sum = 2997 + 2998 + 2999 + 3000 + 3001\n    fraction = numerator_sum / denominator_sum\n    ans = 10 * fraction\n    return ans\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 6, 9]\n    perm = permutations(digits, 3)  # Permutations of length 3\n    # Count how many permutations we have\n    count = len(list(perm))\n\n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    return 0.12 + 0.345 + 0.6789\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    return 3 * 37 * 9\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_row_seats = 48\n    last_row_seats = 80\n    difference = 4\n\n    # Calculate the number of rows using the formula for the nth term of an arithmetic sequence:\n    # last_row_seats = first_row_seats + (number_of_rows - 1) * difference\n    number_of_rows = ((last_row_seats - first_row_seats) // difference) + 1\n\n    # Sum of an arithmetic sequence formula: n/2 * (first_term + last_term)\n    total_seats = (number_of_rows / 2) * (first_row_seats + last_row_seats)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    divisor = 12\n    remainder = 3\n    quotient = 12\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans = solve_congruence(*congruences)\n\n    possible_values = []\n    for i in range(ans[0], 200, ans[1]):\n        if 100 < i < 200:\n            possible_values.append(i)\n\n    return possible_values[0]\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    count = 0\n    for i in range(1, 3):  # The first digit can be 1 or 2\n        for j in range(0, 3):  # The second digit can be 0, 1, or 2\n            for k in range(0, 3):  # The third digit can be 0, 1, or 2\n                if len(set([i, j, k])) == 3:  # all digits are different\n                    count += 1\n                elif len(set([i, j, k])) == 2 and j != 0:  # two digits are the same, but the second digit is not 0\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n    \n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n    \n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote yyears as the symbol y (Hazel's age in three years)\n    hazel_in_three_years, jessica = symbols('hazel_in_three_years jessica')\n\n    # Jessica is 3 years younger than Hazel\n    equation1 = Eq(jessica, hazel_in_three_years - 3)\n\n    # Their total age next year will be Hazel's age in three years plus one (minus 3 for Jessica's current age) \n    # and Jessica's current age plus one.\n    total_age_next_year = (hazel_in_three_years + 1) + (jessica + 1)\n\n    # Expression for total age next year in terms of Hazel's age in three years\n    total_age_next_year = total_age_next_year.subs(jessica, hazel_in_three_years - 3)\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    time_to_reach_uncles_age = 38 - melanie_age\n    uncles_current_age = melanie_age + time_to_reach_uncles_age\n    return uncles_current_age\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote cows as 'c' and goats as 'g'\n    c, g = symbols('c g')\n\n    # 65% of the animals were cows, so the number of goats makes up (100% - 65%)\n    equation1 = Eq(c, 0.65 * (c + g))\n    \n    # When 240 more animals were added, percentage of cows increased by 20% (making it 85%)\n    # It was also given that the number of goats doubled.\n    # The total number of animals before addition is (c + g), hence the total number of goats will be 2 * g.\n    # The new total number of animals is (c + g + 240), hence the new number of cows is 0.85 * (c + g + 240).\n    equation2 = Eq(0.85 * (c + g + 240), c + 240)\n    equation3 = Eq(g * 2, g + 240)\n\n    # Solve the two simultaneous equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to centimeters\n    section1 = 30  # already in cm\n    section2 = 1.5 * 100  # convert from meters to cm\n    section3 = 150 / 10  # convert from mm to cm\n\n    # Calculate the total width\n    total_width = section1 + section2 + section3\n    \n    return total_width\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence_in_pound = 100  # There are 100 pence in one pound\n    total_pence = 3.00 * pence_in_pound  # Convert pounds to pence\n    part_pence = 15  # The part we are interested in is 15p\n\n    percentage = (part_pence / total_pence) * 100  # Calculate the percentage\n\n    return percentage\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "def solution():\n    start_time_hours = 15\n    start_time_minutes = 25\n    duration_minutes = 108\n\n    end_time_minutes = start_time_minutes + duration_minutes\n    end_time_hours = start_time_hours\n\n    if end_time_minutes >= 60:\n        end_time_hours += end_time_minutes // 60\n        end_time_minutes = end_time_minutes % 60\n\n    return f\"{end_time_hours:02d}:{end_time_minutes:02d}\"\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    degree = 5\n    x_degree = 3\n    y_total_degree = degree - x_degree  # Since the degree of the monomial is the sum of the degrees of x and y\n    n = y_total_degree / 2  # Because the degree of y in the monomial is 2n\n\n    return n\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    mixed_numbers = [Fraction(19, 8), Fraction(81, 12), Fraction(30, 16)]\n    ans = sum(mixed_numbers)\n    return ans\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    # Initialize counter for students facing the teacher\n    facing_teacher = 0\n\n    # Iterate through all students\n    for i in range(1, 51):\n        # Student turns backwards if number is multiple of 4 or 6\n        # If number is multiple of both 4 and 6 (i.e., multiple of 12), student ends up facing teacher again\n        # Only increase counter if student is not turning (not multiple of 4 or 6) or turns twice (multiple of 12)\n        if (i % 4 != 0 and i % 6 != 0) or (i % 12 == 0):\n            facing_teacher += 1\n    \n    return facing_teacher\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 20):\n        for j in range(i+1, 21):\n            total_sum += i / j\n    return total_sum\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_3_years_later = amy_age_5_years_ago\n    sister_age_now = sister_age_3_years_later - 3\n    \n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # To ensure two cards of the same number or letter, we must consider the worst case scenario.\n    # There are 13 different numbers or letters, in each of the 4 suits.\n    # According to the Pigeonhole Principle, if you draw one card from each number/letter,\n    # that would be 13 cards, and these could all be from different suits.\n    # The next card you draw would then be guaranteed to be a repeat number/letter.\n    \n    draws_to_ensure_pair = 13 + 1  # One for each number/letter, plus one to guarantee a pair\n\n    return draws_to_ensure_pair\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    smallest_number = None\n    # Iterate over possible 3-digit numbers\n    for i in range(100, 1000):\n        # Check if the number is even\n        if i % 2 == 0:\n            # Calculate the sum of digits\n            sum_of_digits = sum(int(digit) for digit in str(i))\n            # Check if the sum of digits is 21\n            if sum_of_digits == 21:\n                smallest_number = i\n                break\n    return smallest_number\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    partial_amount = 18  # Amount corresponding to 3/5 of the whole\n    fraction = 3/5       # Fraction that represents the part\n\n    whole_amount = partial_amount / fraction  # Calculate the whole by dividing the part by the fraction\n\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    x = (20 - 5) / 3\n    return x\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares_sum = sum(i**2 for i in range(2, 21, 2))\n    odd_squares_sum = sum(i**2 for i in range(1, 20, 2))\n    return even_squares_sum - odd_squares_sum\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    water_poured_out = 2 * 6\n    water_left = total_water - water_poured_out\n    return water_left\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cacti, sunflowers = symbols('cacti sunflowers')\n\n    equation1 = Eq(2*cacti + 7*sunflowers, 156)\n    equation2 = Eq(cacti, sunflowers + 6)\n\n    solutions = solve((equation1, equation2), (cacti, sunflowers))\n\n    return solutions[cacti]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    result = 12.5 * 32\n    return result\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price, pencil_price = symbols('book_price pencil_price')\n    sarah_books = 8\n    sarah_pencils = 3\n    rebecca_books = 3\n    rebecca_pencils = 8\n    pencil_cost = 40 / 100  # 40p is 0.4Â£\n    \n    # Sarah's total cost\n    equation_sarah = Eq(sarah_books * book_price + sarah_pencils * pencil_cost, 0)\n    # Rebecca's total cost\n    equation_rebecca = Eq(rebecca_books * book_price + rebecca_pencils * pencil_cost, 0)\n    # Difference in total cost\n    equation_difference = Eq(sarah_books * book_price + sarah_pencils * pencil_cost - \\\n                             (rebecca_books * book_price + rebecca_pencils * pencil_cost), 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation_sarah, equation_rebecca, equation_difference), (book_price, pencil_price))\n    \n    return solutions[book_price]\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    liverpool_initial, manchester_initial = symbols('liverpool_initial manchester_initial')\n    \n    # Initial difference\n    equation1 = Eq(liverpool_initial - manchester_initial, 1000)\n    \n    # After 30 minutes\n    equation2 = Eq(manchester_initial + 4836, 3 * (liverpool_initial + 472))\n    \n    solutions = solve((equation1, equation2), (liverpool_initial, manchester_initial))\n    \n    return solutions[liverpool_initial]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_more_points = 18\n    jack_points = andrew_points + jack_more_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    return comb(12, 6)\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n\n    # Sarah's payment equation\n    sarah_payment = 8 * book_price + 3 * 0.40\n\n    # Rebecca's payment equation\n    rebecca_payment = 3 * book_price + 8 * 0.40\n\n    # Sarah paid Â£1.00 more than Rebecca equation\n    equation = Eq(sarah_payment, rebecca_payment + 1.00)\n\n    # Solve the equation\n    book_price_solution = solve(equation, book_price)\n\n    return book_price_solution[0]\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    # Since Andy had $3 after giving $2 to Mike, she had $5 before that.\n    before_mike = 3 + 2\n    # She gave half to Nini, so before giving to Nini she had 2 * $5.\n    before_nini = before_mike * 2\n    # She gave half to Bob, so before giving to Bob she had 2 * the amount before Nini.\n    before_bob = before_nini * 2\n    # She gave half to her mother, so before giving to her mother she had 2 * the amount before Bob.\n    original_amount = before_bob * 2\n    return original_amount\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    num, digit_count = '', 0\n    for i in range(1, 5000):\n        num += str(i)\n        digit_count += len(str(i))\n        if digit_count >= 2023:\n            return int(num[2023 - 1])\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    sum_of_numbers = 450\n\n    third_number = sum_of_numbers - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 99 - 11  # Calculating the birth year by subtract from the year 99 by age 11\n    age_on_31_12_01 = 1 - birth_year  # Calculating the age on 31/12/01 by subtracting the birth year from the year 1\n    return age_on_31_12_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '6', '2', '5']\n    odd_numbers = []\n\n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number % 2 == 1:\n            odd_numbers.append(number)\n\n    ans = min(odd_numbers)\n    return ans\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's say the number of students in class B is x. \n    # Then, the number of students in class A would be x + 3.\n    # Let the total number of peaches be p.\n    a_students, b_students, p = symbols('a_students b_students p')\n    \n    # Now we set up our equations based on the problem:\n    # Equation 1: If all peaches are given to class A, each student gets 5 peaches and there are 10 peaches left.\n    # Equation 2: If all peaches are given to class B, each student gets 8 peaches and we need 2 more peaches.\n    # Equation 3: Class A has 3 more students than class B.\n    equation1 = Eq(p, 5 * (b_students + 3) + 10)\n    equation2 = Eq(p, 8 * b_students - 2)\n    equation3 = Eq(a_students, b_students + 3)\n\n    # We solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a_students, b_students, p))\n    \n    # Return the total number of peaches\n    return solutions[p]\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    difference = 2\n    ordinal_number = (36 - first_term) // difference + 1\n    return ordinal_number\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    boat_capacity = 6\n    \n    trips = total_students // boat_capacity\n    if total_students % boat_capacity > 0:\n        trips += 1\n    \n    return trips\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for tens_digit in [2, 3, 5, 7]:\n        for ones_digit in [2, 3, 5, 7]:\n            N = tens_digit * 10 + ones_digit\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catches = 8\n    run_away = 5\n    library_catches = 9\n\n    total_catches = (initial_catches - run_away) + library_catches\n\n    return total_catches\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_per_picture = 10  # time taken to paint one picture in minutes\n    total_time = 80  # total time in minutes (1 hour and 20 minutes)\n    \n    number_of_pictures = total_time // time_per_picture\n    \n    return number_of_pictures\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    # Let the number of cards Eric has be x.\n    # Then Joe has 7*x cards.\n    # Joe gives y cards to Eric, then Joe will have (7*x - y) cards\n    # and Eric will have (x + y) cards.\n    # We want both Joe and Eric to have 168 cards after the exchange.\n    # So we have the equations:\n    # 7*x - y = 168\n    # x + y = 168\n    # Adding both equations, we get:\n    # 7*x + x = 168 + 168\n    # 8*x = 336\n    x = 336 // 8\n\n    # Now we know the number of cards Eric has, we can find y:\n    # y = 168 - x\n    y = 168 - x\n\n    return y\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    for people in range(1, 50):  # Upper range is an arbitrary number for the sake of this problem\n        if (19 - 6) == people / 2:\n            return people\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n    num_students = 5\n    num_ways = factorial(num_students)\n    return num_ways\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):  # Start from 1 because we want groups of different sizes\n        x2 = 10 - x1        # The other group will have the rest of the apples\n        if x1 != x2:        # Ensure the groups have different numbers of apples\n            count += 1\n    return count // 2  # Each split is counted twice (e.g., 1-9 and 9-1), so divide by 2\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swimming_times = 14\n    joanne_swimming_times = 5\n    more_times = amy_swimming_times - joanne_swimming_times\n\n    return more_times\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    # total pears\n    total_pears = 38\n    \n    # Anne gives Charlie 6 pears and they have equal amounts\n    # Let x be the number of pears Anne has originally\n    # Anne has x pears, Charlie has (total_pears - x) pears\n    # After giving away, Anne has (x - 6) pears, Charlie has (total_pears - x + 6) pears\n    # Set the two equal to each other and solve for x\n    for x in range(1, total_pears):\n        if (x - 6) == (total_pears - x + 6):\n            return x\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, joseph = symbols('isaac joseph')\n    \n    eq1 = Eq(isaac, 5 * joseph)\n    eq2 = Eq(joseph + 154, 9/10 * isaac)\n    \n    solutions = solve((eq1, eq2), (isaac, joseph))\n    \n    return solutions[isaac]\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tshirts, caps = symbols('tshirts caps')\n\n    # Cost of t-shirts and caps\n    cost_tshirt = 3\n    cost_cap = 5\n\n    # Ratio of t-shirts to caps\n    equation1 = Eq(tshirts / caps, 8 / 5)\n\n    # Siti sold 1/4 of the t-shirts and 1/5 of the caps\n    total_sold = (1 / 4) * tshirts * cost_tshirt + (1 / 5) * caps * cost_cap\n\n    # She collected $132 for the items she sold\n    equation2 = Eq(total_sold, 132)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (tshirts, caps))\n\n    return solutions[tshirts]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n\n    n = factorial(29)\n    \n    zero_count = 0\n    while n % 10 == 0:\n        zero_count += 1\n        n //= 10\n    \n    return zero_count\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    # Convert the base 8 number to base 10\n    N = int('12345654321', 8)\n    \n    # Calculate remainders\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    \n    # Sum the remainders\n    ans = remainder_7 + remainder_9\n    \n    return ans\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    # The expanded form of the given equation is:\n    # 1000a + 100b + 10c + d + 100a + 10b + c + 10a + b + a = 1370\n    # Simplifying gives:\n    # 1111a + 111b + 11c + d = 1370\n    # The goal is to solve for abcd (1000a + 100b + 10c + d)\n\n    # Iterating through possible values of a, b, c, and d\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if 1111 * a + 111 * b + 11 * c + d == 1370:\n                        # Once the correct values are found, calculate and return abcd\n                        return 1000 * a + 100 * b + 10 * c + d\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # 5-digit number 2018A is divisible by 9\n    # A digit A needs to be found such that the sum of digits of 2018A is divisible by 9\n    for A in range(10):\n        if (2 + 0 + 1 + 8 + A) % 9 == 0:\n            number = int(f\"2018{A}\")\n            break\n    \n    # The remainder when 2018A is divided by 8\n    remainder = number % 8\n    \n    return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    # According to Squirrel Ryan, 5 squirrels are in front of him.\n    ryan_front = 5\n    \n    # According to Squirrel Elvis, 7 squirrels are behind him.\n    elvis_behind = 7\n    \n    # There's only 1 squirrel between Ryan and Elvis.\n    between_ryan_elvis = 1\n    \n    # The total number of squirrels is the sum of the number of squirrels \n    # in front of Ryan, behind Elvis, the squirrel between Ryan and Elvis,\n    # and Ryan and Elvis themselves.\n    total_squirrels = ryan_front + elvis_behind + between_ryan_elvis + 2  # +2 for Ryan and Elvis\n\n    return total_squirrels\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let x be the length of the path\n    # Let l be the distance Linda jogged (1200m)\n    # Let t be the distance Ted jogged.\n    # According to the speed ratio (Linda: 3/4 * Ted's speed)\n    # When they meet, the sum of the distances they jogged is the length of the path, so:\n    # l + t = x\n    # We know l = 1200, and since their speeds are in ratio 3:4, the distances are too, so:\n    # l / 3 = t / 4\n    # Replacing l with 1200, we get 1200 / 3 = t / 4\n    # Solving for t, we get t = 1200 / 3 * 4\n    t = 1200 / 3 * 4\n    # Now, substituting back into l + t = x to find the length of the path\n    x = 1200 + t\n \n    return int(x)\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 6*x + 3*x + 2 - (38 + 5*x - 8*x)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n    days_for_one_worker = total_work / 1\n    return days_for_one_worker\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    def count_derangements(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            # recursive formula: D(n) = (n - 1) * (D(n - 1) + D(n - 2))\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n    \n    ans = count_derangements(6)\n    return ans\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 2 / 100\n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    return 64 * 0.25\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    ans = 0.30 * 45\n    return ans\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    # Nora spent 70% of her money on a bag\n    percentage_spent_on_bag = 70\n    \n    # Remainder is 100% - 70% = 30%\n    remainder = 100 - percentage_spent_on_bag\n    \n    # Spent 3/8 of the remainder on a purse\n    percentage_spent_on_purse = (3/8) * remainder\n    \n    return percentage_spent_on_purse\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack_age = symbols('jack_age')\n    \n    equation = Eq(jack_age - 5, (jack_age + 8) / 2)\n    \n    ans = solve(equation, jack_age)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    # Let x be the original number of pupils in School P.\n    # Let y be the original number of pupils in School Q.\n    # According to the problem, x/y = 2/3.\n    # After admitting 240 pupils each, the new ratio is (x + 240)/(y + 240) = 3/4.\n\n    # Cross multiply to find the relationships in terms of x and y.\n    # 2y = 3x -> Equation (1)\n    # 4(x + 240) = 3(y + 240) -> Simplify to 4x + 960 = 3y + 720 -> Equation (2)\n    \n    # From Equation (1), we get y = (3/2)x\n    # Substitute y in Equation (2) with (3/2)x\n    # 4x + 960 = 3((3/2)x) + 720\n    # 4x + 960 = (9/2)x + 720\n    # Multiply all terms by 2 to get rid of fraction\n    # 8x + 1920 = 9x + 1440\n    # Subtract 8x from both sides\n    # 1920 = x + 1440\n    # Subtract 1440 from both sides\n    x = 1920 - 1440\n\n    # Return the value of x, the original number of pupils in School P\n    return x\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    return 86.3 + 7\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Given BAC = 50 degrees\n    BAC = 50\n    \n    # The sum of angles in any triangle is always 180 degrees\n    # Given that BP and CP are angle bisectors, the angles will be as follows:\n    ABC = (180 - BAC) / 2   # ABC is bisected by BP\n    ACB = (180 - BAC) / 2   # ACB is bisected by CP\n    \n    # BPC is the external angle for triangle BCP, and will be equal to the sum of the opposite internal angles\n    BPC = ABC + ACB\n    \n    return BPC\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"EDUCATION\"\n    total_letters = len(word)\n    vowels = \"AEIOU\"\n    num_vowels = sum(word.count(v) for v in vowels)\n    num_consonants = total_letters - num_vowels\n    \n    # Total ways to arrange the letters\n    total_arrangements = factorial(total_letters)\n    \n    # Ways to arrange where vowels are together as one unit\n    vowels_together = factorial(num_vowels) * factorial(num_consonants + 1)\n    \n    # Subtracting the cases where vowels are together from total arrangements\n    ans = total_arrangements - vowels_together\n    return ans\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    # Initially, 5 students get 12 candies each\n    initial_students = 5\n    initial_candies_per_student = 12\n    \n    # Total candies before the new student joins\n    total_candies = initial_students * initial_candies_per_student\n    \n    # Now 1 more student joins\n    new_total_students = initial_students + 1\n    \n    # Candies distributed among the new total number of students\n    new_candies_per_student = total_candies // new_total_students\n    \n    return new_candies_per_student\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    bought_sweets = 11\n    wrappers = 11\n    \n    while wrappers >= 3:\n        new_sweets = wrappers // 3\n        bought_sweets += new_sweets\n        wrappers = wrappers % 3 + new_sweets\n    \n    return bought_sweets\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:40', '%H:%M')\n    duration = timedelta(hours=4, minutes=50)\n    leave_time = arrival_time + duration\n    return leave_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for i in range(10, 100):  # smallest two-digit number is 10\n        if i % 5 == 4 and i % 7 == 4:\n            return i\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    # total weight of sweets in kg\n    total_weight_kg = 5\n    \n    # cost price of the sweets\n    cost_price_pounds = 10\n    \n    # quantity per bag in g\n    quantity_per_bag_g = 250\n    \n    # selling price per bag in pounds\n    selling_price_per_bag_pounds = 0.65\n    \n    # total weight of sweets in g\n    total_weight_g = total_weight_kg * 1000\n    \n    # calculating the number of bags\n    number_of_bags = total_weight_g / quantity_per_bag_g\n    \n    # total selling price of all bags\n    total_selling_price_pounds = number_of_bags * selling_price_per_bag_pounds\n    \n    # calculating profit\n    profit_pounds = total_selling_price_pounds - cost_price_pounds\n    \n    # calculating percentage profit\n    percentage_profit = (profit_pounds / cost_price_pounds) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Ways from Ayton to Deeton through Beeton and Ceeton\n    ways_through_beeton_ceeton = 4 * 5 * 6  # Multiplication Principle\n    # Direct ways from Ayton to Deeton\n    direct_ways = 3\n    # Total different ways\n    ans = ways_through_beeton_ceeton + direct_ways\n    return ans\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    numerator = 15\n    denominator = 20\n    \n    simplified_denominator = (numerator * denominator) / 15\n    return simplified_denominator\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for numbers of each bird type\n    two_tails, three_tails, six_tails, eight_tails = symbols('two_tails three_tails six_tails eight_tails', integer=True)\n    \n    # Number of two-talied birds is 5 more than twice as many as the number of eight-tailed birds\n    eq1 = Eq(two_tails, 2 * eight_tails + 5)\n\n    # Number of three-tailed birds is 2 more than half the number of six-talied birds\n    eq2 = Eq(three_tails, six_tails / 2 + 2)\n\n    # Total number of their tails is 2 less than four times as many as the total number of their heads\n    eq3 = Eq(2 * two_tails + 3 * three_tails + 6 * six_tails + 8 * eight_tails, 4 * (two_tails + three_tails + six_tails + 2 * eight_tails) - 2)\n\n    # The difference between the total number of their heads and their tails is 241\n    eq4 = Eq((two_tails + three_tails + six_tails + 2 * eight_tails) - (2 * two_tails + 3 * three_tails + 6 * six_tails + 8 * eight_tails), 241)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3, eq4), (two_tails, three_tails, six_tails, eight_tails))\n\n    return solutions[three_tails]\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    # Given terms in the sequence\n    nth_10 = 23\n    nth_15 = 38\n    \n    # Calculate the common difference using the given terms\n    difference = (nth_15 - nth_10) / (15 - 10)\n    \n    # Calculate the 12th term using the common difference and the 10th term\n    nth_12 = nth_10 + (12 - 10) * difference\n    \n    return nth_12\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    ans = 1003.67 + 108.98 + 9.08 + 102.33 + 32.02 - 3.08\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n    for num in range(1, 2017):\n        times_underlined = 0\n        if num % 2 == 0: times_underlined += 1\n        if num % 3 == 0: times_underlined += 1\n        if num % 4 == 0: times_underlined -= 1  # Since multiples of 4 are also multiples of 2, they'd be underlined twice, so we subtract one\n        if times_underlined == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_3_days_avg = 135\n    last_5_days_avg = 151\n    total_days = 8\n\n    total_trees = (first_3_days_avg * 3) + (last_5_days_avg * 5)\n    overall_avg = total_trees / total_days\n\n    return overall_avg\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbol for the amount of money Joe had at first\n    joe_initial = symbols('joe_initial')\n\n    # Sally had $3.75, spent $2.50, so she has $3.75 - $2.50 left\n    sally_left = 3.75 - 2.50\n\n    # Together, Sally and Joe have $5 left after spending $2.50 each on ice-cream\n    total_left = 5\n\n    # Set up the equation: Sally's money left + Joe's money left = $5\n    # Joe's money left = Joe's initial money - $2.50 (spent on ice-cream)\n    equation = Eq(sally_left + (joe_initial - 2.50), total_left)\n\n    # Solve the equation to find the initial amount of money Joe had\n    solutions = solve(equation, joe_initial)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0:\n            digits = [int(d) for d in str(i)]\n            if sum(digits) == 7:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    first_number = 149 + magic_number\n    second_number = 21 + magic_number\n    \n    equation = Eq(first_number, 5 * second_number)\n    \n    magic_number_value = solve(equation, magic_number)[0]\n\n    return magic_number_value\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    first_number = 202 + magic_number\n    second_number = 22 + magic_number\n\n    equation = Eq(first_number, 6 * second_number)\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetable_dishes = 12\n    sandwiches = 6\n\n    salad_soup = comb(salads, 1) * comb(soups, 1)\n    salad_vegetable = comb(salads, 1) * comb(vegetable_dishes, 1)\n    salad_sandwich = comb(salads, 1) * comb(sandwiches, 1)\n    soup_vegetable = comb(soups, 1) * comb(vegetable_dishes, 1)\n    soup_sandwich = comb(soups, 1) * comb(sandwiches, 1)\n    vegetable_sandwich = comb(vegetable_dishes, 1) * comb(sandwiches, 1)\n    \n    total_combinations = (salad_soup + salad_vegetable + salad_sandwich +\n                          soup_vegetable + soup_sandwich + vegetable_sandwich)\n    \n    return total_combinations\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    boy_difference = 32\n    total_students = 0\n    layer = 0\n    while True:\n        boys = (layer * 2 + 1) ** 2\n        girls = layer ** 2 if layer != 0 else 0\n        if boys - girls == boy_difference:\n            total_students = boys + girls\n            break\n        layer += 1\n    return total_students\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters / 20\n    return days_last\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n\n    n = 3  # Starting from the first odd prime because even numbers cannot be prime\n    \n    while True:\n        # Check if all numbers in the given form are prime\n        if all(isprime(n + i) for i in [0, 2, 4, 106, 308]):\n            return n  # If they are all prime, we found our n\n        n += 2  # Increment by 2 to check the next set of odd numbers, as even n will never work\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the masses of strawberries and mangoes\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    # Equation 1: The mass of mangoes is 448g more than that of strawberries\n    equation1 = Eq(mangoes, strawberries + 448)\n\n    # Equation 2: After giving away 900g, the mass of strawberries is twice that of mangoes\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    # From the question we have the following relationships:\n    # (2/3) * total_items = number of apples\n    # (1/9) * total_items = number of bananas\n    # and the rest are lemons\n    # Also, number of apples - number of lemons = 12\n\n    # Define the equation for lemons based on the above relationships\n    equation = Eq((2/3) * total_items - ((1 - 2/3 - 1/9) * total_items), 12)\n\n    # Solve the equation for total_items\n    solutions = solve(equation, total_items)\n\n    # Calculate the number of lemons\n    lemons = (1 - 2/3 - 1/9) * solutions[0]\n\n    return int(lemons)\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let max_money be the original amount of money Max had\n    # Let anthony_money be the original amount of money Anthony had\n    max_money, anthony_money = symbols('max_money anthony_money')\n\n    # If Max bought the chocolates, remaining Max money is max_money - 12\n    # The ratio of the remaining money is (max_money - 12) : anthony_money = 2 : 5\n    equation1 = Eq((max_money - 12) / anthony_money, 2 / 5)\n\n    # If Anthony bought the chocolates, remaining Anthony money is anthony_money - 12\n    # The ratio of the remaining money is max_money : (anthony_money - 12) = 8 : 13\n    equation2 = Eq(max_money / (anthony_money - 12), 8 / 13)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (max_money, anthony_money))\n\n    # return Max's original money\n    return solutions[max_money]\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    # Number of pens and kids\n    total_pens = 20\n    total_kids = 6\n    \n    # Since each kid gets at least one pen, we distribute one to each first\n    remaining_pens = total_pens - total_kids  # Pens remaining after each kid gets one\n    \n    # This is now a problem of partitioning remaining_pens into total_kids parts\n    # which is equivalent to distributing remaining_pens indistinguishable items\n    # into total_kids distinguishable boxes, which can be done with \"stars and bars\"\n    # method (n+k-1) choose (k-1) where n = remaining_pens and k = total_kids\n    ans = factorial(remaining_pens + total_kids - 1) // (factorial(total_kids - 1) * factorial(remaining_pens))\n    \n    return ans\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of stickers Liz originally had for each color be 'x'\n    red_stickers, blue_stickers = symbols('red_stickers blue_stickers')\n\n    # Red stickers given away and remaining\n    red_given = 2/3 * red_stickers\n    red_remaining = red_stickers - red_given\n\n    # Total stickers remaining is 1/4 of total initial stickers\n    total_stickers_remaining = (red_stickers + blue_stickers) / 4\n\n    # Equation representing remaining stickers (Red remainders + Blue remainders)\n    equation = Eq(red_remaining + (blue_stickers - blue_stickers * symbols('blue_fraction')), total_stickers_remaining)\n\n    # Blue stickers fraction given away\n    blue_fraction = symbols('blue_fraction')\n\n    # Since the number of red and blue stickers was the same initially, we can use 'red_stickers' in place of 'blue_stickers'\n    solution_dict = solve((equation.subs(blue_stickers, red_stickers),), (blue_fraction,))\n\n    return solution_dict[blue_fraction]\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # The unit digit of 4^1 is 4, so the unit digit repeats every 2 powers\n    # 4^1 -> 4\n    # 4^2 -> 6\n    # 4^3 -> 4\n    # 4^4 -> 6\n    # ...\n    # Thus, the unit digit cycles through 4 and 6 alternately.\n    \n    # Since 2022 is even, the unit digit will be the same as in 4^2\n    unit_digit = (4 ** 2) % 10\n    \n    return unit_digit\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    total_pages = (num_terms * (first_term + last_term)) // 2\n    \n    return total_pages\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit = 99999\n    smallest_6_digit = 100000\n    return smallest_6_digit - largest_5_digit\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Start with the smallest number of marbles in the largest pile, i.e., 4\n    # Since there are 4 piles and each pile has to have a different number of marbles\n    # We need to check if there's a combination that sums up to 16 with other 3 piles' marbles\n    for largest in range(4, 16):\n        # The other piles should contain fewer marbles than the largest\n        for second_largest in range(1, largest):\n            for middle in range(1, second_largest):\n                for smallest in range(1, middle):\n                    if largest + second_largest + middle + smallest == 16:\n                        return largest\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "from itertools import permutations\n\ndef solution():\n    digits = '123456'\n    count = 0\n    for perm in permutations(digits, 3):\n        number = int(''.join(perm))\n        if number % 2 == 1:  # odd number\n            count += 1\n    return count\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n    \n    total_students = swim_only + basketball_only + both + neither\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    terms = [3, 7, 11, 15, 19]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Convert all lengths to millimetres\n    lengths_mm = {\n        '10mm': 10,  # 10 millimetres\n        '100cm': 100 * 10,  # 100 centimetres\n        '10m': 10 * 1000,  # 10 metres\n        '2km': 2 * 1000 * 1000,  # 2 kilometres\n        '2800cm': 2800 * 10,  # 2800 centimetres\n        '2500m': 2500 * 1000,  # 2500 metres\n        '100mm': 100,  # 100 millimetres\n        '100m': 100 * 1000  # 100 metres\n    }\n\n    # Find the key with the smallest length in millimetres\n    min_key = min(lengths_mm, key=lengths_mm.get)\n    \n    # Return the smallest length (underline the original unit and value)\n    ans = f\"_{min_key[:-2]}_{min_key[-2:]}\"\n    \n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            break\n    return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for A, B, and C\n    A, B, C = symbols('A B C')\n    \n    # Define the equations based on the problem\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(A, C - 21)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Return the value of A\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4*pupils, 8)\n    equation2 = Eq(bookmarks - 6*pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    avg_boys = symbols('avg_boys')\n    \n    # Total number of children is 11 girls + 5 boys = 16 children\n    total_children = 11 + 5\n\n    # Total average height of the group of children\n    total_avg_height = 122.5\n\n    # Total height of all children\n    total_height = total_avg_height * total_children\n\n    # Equation based on average height difference between girls and boys\n    equation = Eq(((avg_boys + 3.2) * 11) + (avg_boys * 5), total_height)\n\n    # Solve for the average height of the boys\n    avg_boys_height = solve(equation, avg_boys)\n\n    # Calculate average height of the girls\n    avg_girls_height = avg_boys_height[0] + 3.2\n\n    return avg_girls_height\n\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # We can derive the maximum number of regions (R) using the recursive formula:\n    # R(n) = R(n - 1) + n, where R(0) = 1 (one triangle can divide the plane into 2 regions)\n    # Starting with n=1 (R(1) = 2 regions), we increment up to n=5.\n    \n    regions = 1  # Initial number of regions with 0 triangles\n    for n in range(1, 6):  # We have 5 triangles\n        regions += n\n        \n    return regions\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n    \n    # Let's assume all animals are cows, as cows have more legs (4) than ducks (2).\n    # So the calculation starts with the number of legs if all animals were cows.\n    all_cows_legs = total_animals * 4\n    \n    # The difference between all cows legs and total legs gives us the deficit,\n    # which can be compensated by replacing some cows with ducks, \n    # since ducks have 2 less legs than cows.\n    legs_deficit = all_cows_legs - total_legs\n    \n    # As each duck introduced reduces the leg count by 2, the number of ducks \n    # can be calculated as the leg deficit divided by 2.\n    num_ducks = legs_deficit // 2\n    \n    return num_ducks\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # n terms of an arithmetic sequence formula: n/2 * (first_term + last_term)\n    # Since there are 9 consecutive odd numbers, we can denote them as:\n    # a, a+2, a+4, a+6, a+8, a+10, a+12, a+14, a+16\n    # Sum of these terms is given by 9/2 * (a + (a + 16)) = 1503\n    # Solving for 'a' we get 'a' as the first term (smallest odd number)\n\n    total_numbers = 9\n    total_sum = 1503\n\n    # Solve for the first term 'a'\n    # Equation: total_numbers/2 * ( 2 * a + (total_numbers - 1) * 2 ) = total_sum\n    # The common difference for consecutive odd numbers is 2\n    a = (total_sum * 2) / (total_numbers * (2 + (total_numbers - 1) * 2))\n\n    return int(a)\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    # Given terms\n    term_32 = 157\n    term_108 = 537\n    \n    # Position of the terms\n    position_32 = 32\n    position_108 = 108\n    \n    # Difference between positions\n    position_diff = position_108 - position_32\n    \n    # Increase in terms, which is the common difference in linear sequence\n    term_increase = term_108 - term_32\n    \n    # Calculation of common difference 'd'\n    common_difference = term_increase / position_diff\n    \n    # Formula to find the first term 'a': a = term_n - (n - 1) * d\n    first_term = term_32 - (position_32 - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of candies Donna had\n    x = symbols('x')\n\n    # Donna kept half of the candies plus 3\n    donna_kept = x / 2 + 3\n    \n    # Remaining candies Jane got\n    jane_got = x - donna_kept\n\n    # Jane ate 1/3 of the candies plus 4\n    jane_ate = jane_got / 3 + 4\n    \n    # Remaining candies Kate got\n    kate_got = jane_got - jane_ate\n\n    # Kate ate 1/4 of the candies and had 42 left\n    equation = Eq(kate_got - kate_got / 4, 42)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g = symbols('g')\n\n    # Total number of students\n    total_students = 70\n\n    # Total score of students\n    total_score = total_students * 66\n\n    # Average score for girls and boys\n    avg_girls = 70\n    avg_boys = 63\n\n    # Number of boys is total students minus number of girls\n    b = total_students - g\n\n    # Total score is the sum of girls' and boys' scores\n    total_girls_score = g * avg_girls\n    total_boys_score = b * avg_boys\n\n    # Equation for total score\n    equation = Eq(total_girls_score + total_boys_score, total_score)\n\n    # Solve the equation for g\n    solution = solve(equation, g)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # Since A cannot receive the ball until the last pass,\n    # there are 3 players who can receive the first pass (not A),\n    # and for the second pass, the player who received the first pass cannot pass it back to the passer,\n    # so there are 2 options for the second pass. The third pass must be to A.\n    # Thus, the total number of different methods is 3 * 2 * 1 = 6.\n    ans = 3 * 2 * 1\n    return ans\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    \n    total_cost = cost_per_day * days\n\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) / (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for Q, P in permutations(range(10), 2):\n        if (P > Q) and (2 * (10 * Q + P) == 10 * P + Q):\n            return 10 * Q + P\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    for i in range(1, 4*10 + 1):  # Least Common Multiple (LCM) of 4 and 10 is the upper bound\n        if i % 4 == 0 and i % 10 == 0:\n            return i\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    return sum(range(27, 34))\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = sum([0.98, 1.98, 2.98, 3.98])\n    return ans\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    jason_books = 30\n    anthea_books = jason_books - 4  # After giving 4 books\n    # When Jason gives 4 books to Anthea, they have the same number\n    # This means that the difference between Jason's books and Anthea's books is 8\n    # because when Jason gives away 4, he loses 4 and Anthea gains 4\n    difference = jason_books - anthea_books\n    return difference\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_s = 2\n    time_s = 12 * 60\n    distance_m = speed_m_per_s * time_s\n    return distance_m\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor = 4\n    simplified term1 = 2020 // common_factor\n    simplified term2 = 68\n    simplified term3 = 505 // common_factor\n    simplified term4 = 128\n\n    ans = (simplified_term1 * simplified_term2 + simplified_term3 * simplified_term4) * common_factor\n    \n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    # Calculate the amount of sugar in each solution\n    sugar_xavier = 100 * 0.25\n    sugar_yelena = 500 * 0.55\n    sugar_carol = 400 * 0.35\n    \n    # Calculate the total amount of sugar\n    total_sugar = sugar_xavier + sugar_yelena + sugar_carol\n    \n    # Calculate the total volume of the solution\n    total_volume = 100 + 500 + 400\n    \n    # Calculate the concentration of the resulting solution\n    concentration = (total_sugar / total_volume) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    # Let B's efficiency be 1 unit/day, so A's efficiency is 2 units/day\n    # Let the number of days B takes to finish the work alone be x\n    # A finishes 12 days earlier than B, so A finishes in (x - 12) days\n\n    # Total work done is same for both A and B when they finish the job alone\n    # B's work = 1 unit/day * x days\n    # A's work = 2 units/day * (x - 12) days\n    # Since both A's and B's work are equal: x = 2 * (x - 12)\n\n    # Solving for x\n    x = 24\n\n    # A's rate of work is 2 and B's rate of work is 1\n    a_rate = 2\n    b_rate = 1\n\n    # Work done by A and B when working together per day\n    combined_rate = a_rate + b_rate\n\n    # Calculate the time taken to complete the job when working together\n    time_together = x / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10\n    change_received = 4.83\n    newspaper_cost = 2.20\n    \n    tissues_cost = total_paid - change_received - newspaper_cost\n    \n    return tissues_cost\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Let d be the distance from home to office\n    # Time taken at 3 km/h = d/3 hours\n    # Time taken at 5 km/h = d/5 hours\n    # Time difference between the two scenarios = 12 + 4 = 16 min (12 min late - (-4 min early))\n\n    # Convert 16 minutes to hours\n    time_difference = 16 / 60  # hours\n\n    # The difference in time is due to the difference in speeds\n    # (d/3) - (d/5) = time_difference\n    # Solve for d\n    d = 3 * 5 * time_difference / (5 - 3)  # d = (3 * 5 * time_difference) / 2\n\n    return d\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 11111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from itertools import permutations\n\ndef solution():\n    digits = '123'\n    count = 0\n    for i in range(1, len(digits)+1):\n        count += len(list(permutations(digits, i)))\n    return count\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    tomatoes = 27\n    cucumbers = 3 + (3 * tomatoes)\n    return cucumbers\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the original number of boys (which is also the original number of girls)\n    b = symbols('b')\n\n    # After 3/5 of the boys and 42 girls left, we have the following equation\n    # (1 - 3/5)b + 12 = b - 42\n    equation = Eq((1 - 3/5) * b + 12, b - 42)\n\n    # Solving for b\n    num_boys_girls = solve(equation, b)\n\n    # The total number of students at the exhibition at first is twice the number of boys or girls\n    total_students = num_boys_girls[0] * 2\n\n    return total_students\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    single_cost = 6.25\n    total_cost = single_cost * 12\n    \n    return total_cost\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    temperature_change = 13 - (-8)\n    return temperature_change\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Initial ratio\n    equation1 = Eq(boys / girls, 3 / 2)\n    \n    # Updated ratio after 12 boys and 12 girls joined\n    equation2 = Eq((boys + 12) / (girls + 12), 19 / 14)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    # Total number of children is the sum of boys and girls in the afternoon\n    total_children = solutions[boys] + 12 + solutions[girls] + 12\n    \n    return total_children\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    # Four different colored socks in a row\n    ways_with_four_diff_socks = factorial(4)\n\n    # Two different colored pairs of socks in a row\n    ways_with_two_pairs = factorial(4) // (factorial(2) * factorial(2))\n\n    return ways_with_four_diff_socks, ways_with_two_pairs\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    \n    return A + B + C\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Rachel and Alice's candies\n    rachel, alice = symbols('rachel alice')\n\n    # Equation for the scenario where Rachel gives Alice 10 candies and they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # Equation for the scenario where Alice gives Rachel 10 candies and Rachel has 4 more than 3 times Alice's candies\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total candies originally\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_after_transfer = total_pupils // 2\n    return pupils_after_transfer\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_first_bar = 23\n    length_second_bar = 37\n    length_welded_part = 3\n\n    # Subtracting the welded part once as it is counted twice, once in each bar\n    full_length = length_first_bar + length_second_bar - length_welded_part\n\n    return full_length\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    red_count = green_count = 0\n    side_length = int(total_tiles**0.5)\n    \n    for layer in range(1, (side_length // 2) + 1):\n        if layer % 2 == 1:\n            red_count += (side_length - 2 * (layer - 1)) * 4 - 4\n        else:\n            green_count += (side_length - 2 * (layer - 1)) * 4 - 4\n            \n    # Add center tile if side length is odd\n    if side_length % 2 == 1:\n        red_count += 1\n    \n    more_tiles = max(red_count, green_count) - min(red_count, green_count)\n    dominant_color = 'red' if red_count > green_count else 'green'\n\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1 Mar 2023', '%d %b %Y')\n    end_date = datetime.strptime('15 Apr 2023', '%d %b %Y')\n\n    days_difference = (end_date - start_date).days + 1\n\n    return days_difference\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth_power = x_squared ** 2\n    return x_fourth_power\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    # We will denote Justin's correct answers by 'j' and Williamâs correct answers by 'w'.\n    # Each correct answer gives 6 points and each wrong answer gives -2 points.\n    # The total number of points together is 96. \n    # Justin has 24 more points than William.\n\n    # So we have following equations:\n    # 6j - 2(10 - j) + 6w - 2(10 - w) = 96   (1)\n    # 6j - 2(10 - j) = 6w - 2(10 - w) + 24    (2)\n    \n    # From equation (1), we can simplify it to:\n    # 6j - 20 + 2j + 6w - 20 + 2w = 96\n    # 8j + 8w = 136\n    # j + w = 17                                (3)\n    \n    # From equation (2), we can simplify it to:\n    # 6j - 20 + 2j = 6w - 20 + 2w + 24\n    # 8j - 8w = 24\n    # j - w = 3                                 (4)\n    \n    # Now solving equations (3) and (4) together:\n    from sympy import symbols, Eq, solve\n\n    j, w = symbols('j w')\n    equation1 = Eq(j + w, 17)\n    equation2 = Eq(j - w, 3)\n\n    solutions = solve((equation1, equation2), (j, w))\n\n    return solutions[w]\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # This seems to be a puzzle where \"A\" is a missing value from a vertical form\n    # Given that the question is quite ambiguous and doesn't provide the necessary details\n    # about the actual puzzle, we make the assumption that \"A\" is a digit in a sum operation\n    # in a vertical form like the following:\n    #   AAB\n    #  +BBC\n    # -----\n    #  CCCA\n    #\n    # We will now try all the possible values for A from 0 to 9 and try to find which one\n    # satisfies the condition if such a puzzle were given.\n    \n    for A in range(10):\n        if str(A) in str(A * 111 + A * 111):\n            return A  # Assuming the above-mentioned form\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    ans = 265 * 30\n    return ans\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    # Assume length of pendulum is L, and g_earth is the acceleration due to gravity on Earth\n    # The period T on Earth is given by T_earth = 2 * pi * sqrt(L / g_earth)\n    # Solve for L using the given period of T_earth = 1s\n    g_earth = 9.81  # m/s^2, acceleration due to gravity on Earth\n    T_earth = 1  # second\n\n    # Formula for period of a pendulum T = 2 * pi * sqrt(L / g), where g is the gravitational acceleration\n    # L = (T_earth ** 2 * g_earth) / (4 * pi ** 2)\n    # We don't need to explicitly calculate L, as it will cancel out in the next step\n\n    # The acceleration due to gravity on the Moon is one-sixth of its value on Earth\n    g_moon = g_earth / 6\n\n    # The period on the Moon T_moon is given by T_moon = 2 * pi * sqrt(L / g_moon)\n    # Substituting L from the T_earth equation, we get:\n    # T_moon = T_earth * sqrt(g_earth / g_moon)\n    T_moon = T_earth * sqrt(g_earth / g_moon)\n\n    return T_moon\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's work rate is 1/15 job per day\n    # B's work rate is 1/10 job per day\n    \n    # A and B together work for first 3 days\n    work_done_in_3_days = (1/15 + 1/10) * 3\n    \n    # Remaining work after 3 days\n    remaining_work = 1 - work_done_in_3_days\n    \n    # B's rate is 1/10 job per day, we then divide the remaining work by B's rate to find remaining days\n    remaining_days_for_B = remaining_work / (1/10)\n    \n    return remaining_days_for_B\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    n = 100 ** (1/2)  # since 100 people are in a square array, take the square root to find the number on each side\n    outer_layer = (n * 4) - 4  # calculate the outer layer count as 4 sides minus 4 (since corners are counted twice)\n\n    return int(outer_layer)\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loaves_per_cup = 6 / 5\n    required_loaves = 24\n    cups_needed = required_loaves / loaves_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # This is -4\n\n    # The nth term of the sequence an = first_term + (n-1) * common_difference\n    # We need to find n such that an < 0\n    # 0 > 50 + (n-1) * (-4)\n    # (n-1) * 4 > 50\n    # n-1 > 12.5\n    # n > 13.5\n    # Since n must be an integer, the first negative term will be when n = 14\n    \n    return 14\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # Let x be the initial amount of cash Hugo had\n    # After giving 3/7 of his cash to his sister, he has 4/7 of his cash left\n    # Then he gives 1/8 of the remaining cash to his mum\n    # After giving 1/8 of the remaining cash, he has 7/8 of the remaining left, which is $280\n    # Hence, we have the equation (4/7)x * (7/8) = 280\n    # Simplifying the equation, we get x = 280 * (8/7) * (7/4)\n    x = 280 * (8/7) * (7/4)\n    return x\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # Using Pigeonhole principle, we can compute the maximum possible class size\n    # by assuming the largest class where only one student gets 3 apples and the rest get 1.\n    # If the class were any larger, then two students would have to get 3 apples,\n    # which would exceed the number of apples available.\n    \n    # Total apples\n    apples = 80\n    \n    # At least one student must get at least 3 apples\n    # So we can calculate the remaining apples after giving 3 to one student\n    remaining_apples = apples - 3\n    \n    # The remaining students will get at least 1 apple each\n    # This means the number of remaining apples is the number of other students\n    # Hence the class size will be remaining_apples + 1 (for the student who got 3 apples)\n    class_size = remaining_apples + 1\n    \n    return class_size\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Based on the game described, Tom can win by always ensuring that the\n    # number of cards remaining in both piles is always a multiple of the\n    # nim-sum (binary XOR of the pile sizes). In this type of game, the winning\n    # strategy involves making a move that results in a zero nim-sum.\n    # Initially, the nim-sum is 88 XOR 52.\n    \n    nim_sum = 88 ^ 52\n    \n    if nim_sum == 0:\n        # If the nim-sum is already 0, Tom cannot guarantee a win by following\n        # this strategy. In this case, it doesn't matter what move Tom makes,\n        # he will need to rely on Jane making an error to win. However, with\n        # this problem statement, we can assume that the nim-sum is not zero and\n        # Tom follows the winning strategy.\n        winning_move = (\"No winning strategy\", 0)\n    else:\n        # Tom can guarantee a win. He should make a move that results in the nim-sum\n        # of the two piles becoming 0. He should calculate the nim-sum of the piles\n        # after his move and take enough cards from one pile to achieve that target nim-sum.\n        for pile_size in (88, 52):\n            target_pile_size = pile_size ^ nim_sum\n            if target_pile_size < pile_size:\n                winning_move = (pile_size, pile_size - target_pile_size)\n                break\n    \n    pile = 'A' if winning_move[0] == 88 else 'B'\n    cards_to_take = winning_move[1]\n\n    # Tom's strategy will involve taking cards_to_take from the indicated pile\n    # to maintain the zero nim-sum.\n    return (pile, cards_to_take)\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    \n    amount_per_person = total_amount / people\n    \n    return amount_per_person\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for cheesecakes and logcakes\n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    # Equation 1: 6 cheesecakes and 7 logcakes cost $1426\n    equation1 = Eq(6*cheesecake + 7*logcake, 1426)\n\n    # Equation 2: 4 cheesecakes cost thrice as much as a logcake\n    equation2 = Eq(4*cheesecake, 3*logcake)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    # Calculate the cost for 10 cheesecakes and 10 logcakes\n    total_cost = 10*solutions[cheesecake] + 10*solutions[logcake]\n\n    return total_cost\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Since 10! and above will include a factor of 10, which is 2*5,\n    # the last digit of 10! and any factorial above will be 0.\n    # Hence, the last digit of 2014! will also be 0.\n    return 0\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5 * 5\n    hole_area = 1 * 1\n    net_base_area = base_area - hole_area\n\n    height = 480 / net_base_area\n\n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    ans = sum(i * (2*i - 1) for i in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    # Cost of one pencil\n    cost_of_pencil = 5\n    # Cost of one pen\n    cost_of_pen = 15\n\n    # Calculating how many pencils are equivalent to the cost of one pen\n    pencils_per_pen = cost_of_pen / cost_of_pencil\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    total_balls = 34\n    # Let the number of red balls be r, white balls be w, and black balls be b.\n    # According to the problem, we have r:w = 1:2 and w:b = 3:4.\n    # Therefore, we can write r = w / 2 and w = (3/4) * b.\n    # The total number of balls is the sum of red, white, and black balls: r + w + b = 34.\n\n    # Let's represent w as the common variable and express r and b in terms of w.\n    # We have r = w / 2 and b = (4/3) * w. Thus, r + w + b can be rewritten as:\n    # (w / 2) + w + (4/3) * w = 34.\n    # Combining the terms, we get (11/6) * w = 34.\n\n    # Now we can solve for w.\n    w = (6/11) * 34\n\n    # Finally, we find the number of red balls, using r = w / 2.\n    r = w / 2\n\n    return int(r)\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    ans = sum([i if i % 2 != 0 else -i for i in range(1, 1002)])\n    return ans\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_brother = 26\n    marbles_given_sisters = 13 * 2\n    marbles_left = 16\n    \n    initial_marbles = marbles_given_brother + marbles_given_sisters + marbles_left\n\n    return initial_marbles\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x in range(1, 13 - 2 + 1):\n        for y in range(1, 13 - x - 1 + 1):\n            z = 13 - x - y\n            if z > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let y represent the original number of yellow beads\n    # Let g represent the original number of green beads\n    y, g = symbols('y g')\n\n    # Ratio before buying more beads: yellow to green is 3:2\n    equation1 = Eq(y/g, 3/2)\n\n    # Ratio after buying more beads: (g + 20) to (y + 5) is 3:2\n    equation2 = Eq((g + 20)/(y + 5), 3/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (y, g))\n\n    # Total beads at first is the sum of the original yellow and green beads\n    total_beads_at_first = solutions[y] + solutions[g]\n\n    return total_beads_at_first\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # For 2-digit palindromic numbers\n    for x in range(1, 10):  # The first digit can be from 1 to 9\n        count += 1  # The second digit must be the same as the first\n    \n    # For 3-digit palindromic numbers\n    for x in range(1, 10):  # The first digit can be from 1 to 9\n        for y in range(0, 10):  # The second digit can be from 0 to 9\n            count += 1  # The third digit must be the same as the first\n    return count\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    ans = 617 + 385\n    return ans\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    meet_time = 4\n    \n    # Combined speed at which they are approaching each other\n    combined_speed = amy_speed + christen_speed\n    \n    # Distance they meet after 4 hours\n    distance_meet = combined_speed * meet_time\n    \n    # Time Christen will take to reach Amy's starting point\n    time_to_amy_start = distance_meet / christen_speed\n    \n    return time_to_amy_start\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n    \n    for perm in permutations(digits, 4):\n        # Check if the number is even\n        if perm[-1] in even_digits:\n            # Check if the first digit is not zero\n            if perm[0] != '0':\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    correct_mark = 4\n    wrong_mark = -1\n    total_marks = 110\n\n    # Let x be the number of correct answers\n    # Then the number of incorrect answers is 50 - x\n    # The total score is then 4x - 1*(50 - x) = 110\n    # Solving this simple equation gives us x\n    x = (total_marks + (total_questions * wrong_mark)) / (correct_mark - wrong_mark)\n\n    return int(x)\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    # total number of cakes\n    total_cakes = 420\n\n    # number of vanilla cakes\n    vanilla_cakes = (2 / 7) * total_cakes\n\n    # number of banana cakes\n    banana_cakes = (35 / 100) * total_cakes\n\n    # number of lemon and chocolate cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    # since the ratio is 4:5, the number of lemon cakes is 4/9 of the remaining cakes\n    lemon_cakes = (4 / 9) * remaining_cakes\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Three-digit integers start from 100\n        digits = set(str(i))    # Get the unique digits\n        if len(digits) == 2:    # Check if there are exactly two different digits\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # Each person can pass the ball to two others.\n    # After the first pass, there will be 2 options for each of the 2 players.\n    # Therefore, the total number of passing ways is 2 * 2 = 4.\n    ans = 2 * 2\n    return ans\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    first_four_avg = 89\n    num_assignments = 4\n    fifth_score = 94\n    \n    total_score_first_four = first_four_avg * num_assignments\n    total_score_all_five = total_score_first_four + fifth_score\n    avg_score_all_five = total_score_all_five / (num_assignments + 1)\n    \n    return avg_score_all_five\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (alan, bilal, chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    # Let x be the number of books Lily has and y be the number of books Judy has.\n    # Let z be the number of books Lily sends to Judy.\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    \n    # When Lily sends z books to Judy, they have the same amount:\n    # Lily will have x - z books, Judy will have y + z books.\n    # We set up the equation x - z = y + z\n    equation1 = Eq(x - z, y + z)\n\n    # The second piece of information is that initially Lily has more books than Judy.\n    # Let the difference be d, so x = y + d\n    d = symbols('d')\n    equation2 = Eq(x, y + d)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y, z, d))\n\n    # The solution for d will be the number of books Lily had more than Judy initially.\n    return solutions[d]\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum((2 * i + 1) for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    # Total number of arms for wibbles\n    wibbles_arms = 11 * 6\n    \n    # Subtract the total number of arms contributed by the wibbles from the overall total\n    remaining_arms = 81 - wibbles_arms\n    \n    # Since each wobble has 5 arms, divide the remaining arms by 5 to find the number of wobbles\n    wobbles = remaining_arms // 5\n    \n    return wobbles\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = boys * 2\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    total_amount = 420\n    percentage = 15\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n    return int(total_seconds)\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Since the operator # is associative, we can reduce from right to left one by one.\n    # start with the last two values, 2#1\n    result = 2 + 1 - (2 * 1) / 910\n    # we then iterate from 3 up to 2016 with the result from the previous operation\n    for i in range(3, 2017):\n        result = i + result - (i * result) / 910\n        # The result simplifies to just 'i' because (i * result) / 910 becomes result - result\n        result = i\n    return result\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    # Convert Maverick's catch up time to hours\n    maverick_time = 24 / 60\n    \n    # Speed difference between Maverick and Kelvin\n    speed_diff = 15 - 10\n    \n    # Distance traveled by Maverick to catch up with Kelvin\n    distance_maverick = 15 * maverick_time\n    \n    # Kelvin's initial lead\n    kelvin_lead = 10\n    \n    # Check if Maverick caught up within 24 minutes\n    if distance_maverick * speed_diff == kelvin_lead:\n        answer = maverick_time * 60  # Convert the time back to minutes\n    else:\n        # If not, calculate the correct time it takes for Maverick to catch up\n        correct_time = kelvin_lead / speed_diff  # Time in hours\n        answer = correct_time * 60  # Convert the time to minutes\n    \n    return answer\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    eq1 = Eq(x + y, 80)\n    eq2 = Eq(x - y, 40)\n    \n    solutions = solve((eq1, eq2), (x, y))\n    \n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    primes = [\n        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, \n        31, 37, 41, 43, 47, 53, 59, 61, 67, 71, \n        73, 79, 83, 89, 97, 101, 103, 107, 109, 113, \n        127, 131, 137, 139, 149, 151, 157, 163, 167, 173, \n        179, 181, 191, 193, 197, 199, 211, 223, 227, 229, \n        233, 239, 241, 251, 257, 263, 269, 271, 277, 281, \n        283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n        353, 359, 367, 373, 379, 383, 389, 397, 401, 409, \n        419, 421, 431, 433, 439, 443, 449, 457, 461, 463, \n        467, 479, 487, 491, 499, 503, 509, 521, 523, 541, \n        547, 557, 563, 569, 571, 577, 587, 593, 599, 601, \n        607, 613, 617, 619, 631, 641, 643, 647, 653, 659, \n        661, 673, 677, 683, 691, 701, 709, 719, 727, 733, \n        739, 743, 751, 757, 761, 769, 773, 787, 797, 809, \n        811, 821, 823, 827, 829, 839, 853, 857, 859, 863, \n        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, \n        947, 953, 967, 971, 977, 983, 991, 997\n    ]\n    \n    for a in primes:\n        for b in primes:\n            if 7 * a + 9 * b == 179:\n                return a + b\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    ways = boys * girls\n\n    return ways\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    total_length = (41 - 1) * 4  # Total length of the road\n    num_pine_trees = (total_length // 5) + 1  # Calculate number of pine trees\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    for correct in range(7):  # since score for one correct answer is 5, the max number of correct answers can be 6\n        incorrect = 6 - correct  # total questions are 6, so wrong answers would be 6 - number of correct answers\n        score = correct * 5 - incorrect * 2\n        if score == 23:\n            return correct\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    return sum(range(1, 7))\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    # Since each child should get at least one eraser, we start by giving each one eraser.\n    # This leaves us with 3 erasers to distribute among the three kids.\n    remaining_erasers = 6 - 3  # Which is 3 erasers.\n\n    # Now, we need to find the number of ways to distribute these remaining erasers.\n    # This is equivalent to partitioning 3 indistinguishable items (erasers) into 3 distinguishable groups (kids),\n    # which can be solved using the 'stars and bars' method.\n\n    # For n items and k groups, the formula is: (n + k - 1) choose (k - 1)\n    # In our case, n is 3 and k is 3, therefore we calculate (3 + 3 - 1) choose (3 - 1)\n    from math import comb\n    n = remaining_erasers\n    k = 3  # number of kids\n    ways = comb(n + k - 1, k - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    initial_people = 10\n    initial_hours = 9\n    target_hours = 3\n    \n    # Work is constant, so work = people * hours\n    work = initial_people * initial_hours\n    # Number of people needed = work / target_hours\n    people_needed = work / target_hours\n    \n    return people_needed\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    # Let the total amount of money Bud had initially be x\n    # She spent 1/3 of it on a book, which leaves her with 2/3 of x\n    # She then spends 2/5 of the remaining money on a bag, which costs Â£120\n\n    # We set up the equation: (2/3)x * (2/5) = 120\n    # We solve the equation to find x\n    x = 120 / (2/5) / (2/3)\n\n    return x\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the current ages of the two men\n    younger, older = symbols('younger older')\n\n    # Create an equation based on the first statement:\n    # older - diff = younger and younger - diff = 4\n    # where diff is the difference in age between the two\n    equation1 = Eq(older - younger, younger - 4)\n\n    # Create an equation based on the second statement:\n    # older + diff = younger and younger + diff = 61\n    # where diff is the difference in age between the two\n    equation2 = Eq(older + (older - younger), 61)\n\n    # Solve the system of equations for the ages of the two men\n    solutions = solve((equation1, equation2), (younger, older))\n\n    # Return the age of the younger man\n    return solutions[younger]\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 0.6)\n    total_watermelons = remaining_after_first_day / (1 - 1/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    \n    total_litres = week1 + week2 + week3\n    \n    return total_litres\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    \n    ans = (n*(n+1)*(2*n+1))//6 - ((first_term-1)*first_term*(2*(first_term-1)+1))//6\n    return ans\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    ans = 125 * 8 * 49\n    return ans\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 9):\n            for x3 in range(1, 9):\n                if x1 + x2 + x3 == 13 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    # Each combination is counted 6 times due to permutations,\n    # so we divide by 6 to get the number of distinct combinations.\n    return count // 6\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    # There are 5 desks in front of Jessica's desk\n    desks_in_front_of_jessica = 5\n    \n    # There are 7 desks behind Judy's desk\n    desks_behind_judy = 7\n\n    # Since Jessica sits in front of Judy, there is at least one desk between them\n    # Thus, the total number of desks in the column can be calculated as\n    # the sum of the number of desks in front of Jessica, 1 desk for Jessica,\n    # 1 desk for Judy, and the number of desks behind Judy.\n    total_desks = desks_in_front_of_jessica + 1 + 1 + desks_behind_judy\n\n    return total_desks\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(0.75 * x - 5, 2.5)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    start = 1000\n    difference = -11\n    term = start\n    n = 1\n    \n    while term >= 0:\n        n += 1\n        term = start + (n - 1) * difference\n    \n    return term\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    boys, girls = symbols('boys girls')\n\n    # Total number of students\n    total_students = 152\n\n    # Setting up the equation based on the given condition\n    # (boys - boys/11) == (girls - 5)\n    equation = Eq(boys - boys/11, girls - 5)\n\n    # Given the total number of students is the sum of boys and girls\n    total_equation = Eq(boys + girls, total_students)\n\n    # Solve the system of equations\n    solutions = solve((equation, total_equation), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    halfway_point = 0.126\n    known_number = 0.11\n    other_number = (halfway_point - known_number) + halfway_point\n\n    return other_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n    \n    sweets_per_person = total_sweets // classmates\n    \n    return sweets_per_person\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    ratio = 7 / 12\n    toffees = chocolates * ratio\n    return int(toffees)\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    mangoes_cases = 24\n    lychees_cases = 19\n    total_cost = 2826\n    mangoes_cost_per_case = 56\n\n    lychees_cost_per_case = (total_cost - (mangoes_cases * mangoes_cost_per_case)) / lychees_cases\n    return lychees_cost_per_case\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for number in range(28, 41):\n        if number % 4 == 0 and 9 in set(factor for factor in range(1, number+1) if number % factor == 0):\n            return number\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    # Coin values\n    coins = [1, 2, 5]\n    # Set to keep track of different totals\n    totals = set()\n\n    # Iterate over all possible combinations of three coins\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                # Calculate the sum of the three coins\n                total = c1 + c2 + c3\n                # Add the sum to the set of totals\n                totals.add(total)\n\n    # Return the number of different totals\n    return len(totals)\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    number_of_teams = 6\n    number_of_games = comb(number_of_teams, 2)\n    return number_of_games\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percent_value = 65 / 100\n    decimal_value = 0.507\n    fraction_value = 1 / 4\n\n    ans = percent_value + decimal_value + fraction_value\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        num1 = 4 * (10 ** 4) + C * (10 ** 3) + A * (10 ** 2) + B * 10 + 1\n        num2 = 4 * (10 ** 2) + A * 10 + B\n        if num1 * num2 == 400032 + A * (10 ** 5) + B * (10 ** 4) + 4 * (10 ** 3) + C * (10 ** 2) + 4 * 10 + 4:\n            return A + B + C\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    # Create a set to hold unique permutations\n    unique_numbers = set()\n    \n    # Get all permutations of the four cards\n    all_permutations = permutations([1, 1, 2, 2], 3)\n    \n    # Iterate over the permutations and form three-digit numbers\n    for perm in all_permutations:\n        if perm[0] != 0:  # Make sure the number is three-digit\n            number = int(''.join(map(str, perm)))\n            unique_numbers.add(number)\n    \n    # The number of unique three-digit numbers\n    ans = len(unique_numbers)\n    return ans\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Define the possible values P, Q, R can take\n    possible_values = range(10)\n    \n    # Loop over all possible combinations of P, Q, R\n    for P in possible_values:\n        for Q in possible_values:\n            for R in possible_values:\n                # Perform the multiplications according to the multiplication tiling puzzle rules\n                if (P*100 + Q*10 + R) * R == (P*10000 + Q*1000 + R*100 + Q*10 + 2):\n                    # Return the sum of the values of P, Q, R\n                    return P + Q + R\n    # If there is no such combination found, which is unlikely, return None\n    return None\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Susan jogs for 1 hour from 7:30 a.m. to 8:30 a.m.\n    jogging_time_hours = 1\n    jogging_speed_mph = 5\n\n    # Susan walks from 8:30 a.m. to 10:30 a.m. which is 2 hours.\n    walking_time_hours = 2\n    walking_speed_mph = 3\n\n    # Calculate distance traveled while jogging\n    jogging_distance = jogging_time_hours * jogging_speed_mph\n\n    # Calculate distance traveled while walking\n    walking_distance = walking_time_hours * walking_speed_mph\n\n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # If we have five consecutive numbers, we can represent them as:\n    # (n), (n + 1), (n + 2), (n + 3), (n + 4)\n    # The sum of these numbers is:\n    # n + (n + 1) + (n + 2) + (n + 3) + (n + 4) = 100\n    # Simplifying the sum we get:\n    # 5n + 10 = 100\n    # Now we solve for n:\n    n = (100 - 10) // 5\n    \n    return n\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    cube_roots = [i**3 for i in range(1, 35) if 44000 % (i**3) == 0]\n    q = 44000 // cube_roots[-1]  # Since we need the largest perfect cube factor\n    return q\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of children who paid Â£10, and y be the number who paid Â£15\n    x, y = symbols('x y')\n    \n    # We have two equations based on the problem statement\n    equation1 = Eq(x + y, 50)       # Total number of children\n    equation2 = Eq(10*x + 15*y, 555) # Total amount paid\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We are interested in the number of children who paid Â£15, which is represented by y\n    return solutions[y]\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_big_boxes = 10 * 3\n    oranges_in_small_boxes = 5 * 7\n    oranges_left = total_oranges - (oranges_in_big_boxes + oranges_in_small_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    balls = 27\n    balls_per_bag = 5\n    bags_used = (balls - 2) // balls_per_bag\n    return bags_used\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # Since there are 4 different patterns for each number,\n    # in the worst-case scenario, you must draw one of each pattern before getting a repeat.\n    # Therefore, to guarantee that you have 3 cards with the same number,\n    # you need to draw 2 full sets of the different patterns (8 cards) plus 1 card.\n    # This one extra card will ensure you have 3 cards with the same number\n    # because you can have at most two sets of four cards with the same pattern\n    # after drawing 8 cards. Drawing one more will guarantee a third card with the same number.\n    ans = (4 * 2) + 1\n    return ans\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800\n    number_of_trees = 21\n\n    distance_between_trees = total_length / (number_of_trees - 1)\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    return 3 / 4 * 28\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Define the possible cards for each suit\n    spades = ['A', 'J', 'K']\n    hearts = ['3', '5', 'K']\n    diamonds = ['2', '7', 'J']\n    clubs = ['A', '7']\n\n    # Create a dictionary to store all possible cards\n    suits = {'spades': spades, 'hearts': hearts, 'diamonds': diamonds, 'clubs': clubs}\n\n    # Use process of elimination based on the conversation\n    # Eddie does not know the card, so the suit cannot be clubs as there are only two options\n    # Avril now knows the card after Eddie mentioned that, which means it must be a unique number\n    # Eddie now knows the card, which means this number must be the only one in its suit\n\n    # Find the number that is unique across all suits\n    all_numbers = spades + hearts + diamonds + clubs\n    unique_numbers = [number for number in all_numbers if all_numbers.count(number) == 1]\n\n    # Now find the card with the unique number\n    for suit, numbers in suits.items():\n        for number in unique_numbers:\n            if number in numbers:\n                # This is the card as it has the unique number Eddie and Avril realized\n                return suit, number\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    total_distance = 90\n    number_of_intervals = 9 + 1 # Trees create 9 + 1 intervals\n    distance_between_each_tree = total_distance / number_of_intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy = 149\n    given_to_sister = 38\n\n    sister = andy - given_to_sister // 2  # Joey's assumption step\n\n    # Correct calculation:\n    # Let x be the number of notebooks sister originally had, we have:\n    # andy - given_to_sister = x\n    # So, x = 149 - 38\n    correct_sister = andy - given_to_sister\n\n    # Check if Joey is correct\n    is_correct = sister == correct_sister\n\n    # Return the correct answer\n    return (is_correct, correct_sister)\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    initial_number = 200\n    primes_count = 0\n    for place in [1, 10, 100]:  # Units, tens, and hundreds places\n        for digit in range(0, 10):\n            if place == 100 and digit == 2:  # Skip 200 itself\n                continue\n            new_number = initial_number - (initial_number // place % 10) * place + digit * place\n            if isprime(new_number):\n                primes_count += 1\n    return primes_count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 72)\n    equation2 = Eq(x, 2 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n    return solutions[y]\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n    emily_position_from_back = danny_position_from_back - 1\n    \n    total_people = people_in_front_of_emily + emily_position_from_back + 1  # Including Emily\n    return total_people\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    numbers = [3, 4, 6, 10]\n    mean_of_numbers = 5\n    total_numbers = 5\n\n    total_sum = mean_of_numbers * total_numbers\n    sum_of_known_numbers = sum(numbers)\n\n    fifth_number = total_sum - sum_of_known_numbers\n\n    return fifth_number\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    time_per_cut = 12 / 3  # Because cutting into 4 sections requires 3 cuts\n    total_cuts_needed = 5 * 4  # For 5 times, each time requires 4 sections (3 cuts each time, but the last one doesn't require a cut)\n    total_time_needed = time_per_cut * (total_cuts_needed - 1)  # Subtracting one cut since the last one is not needed\n    return total_time_needed\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n    cost_per_cup = total_cost / number_of_cups\n    return cost_per_cup\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    pages_with_5 = 30\n    pages = 0\n    count_5 = 0\n    \n    while count_5 < pages_with_5:\n        pages += 1\n        count_5 += str(pages).count('5')\n    \n    return pages\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of pages, days to deadline, and total days given for the book\n    pages_per_day_slow, pages_per_day_fast = 30, 39\n    days_late, days_early = 2, -4\n    total_pages, deadline = symbols('total_pages deadline')\n\n    # Equation for reading slower (30 pages/day) and finishing 2 days late\n    eq1 = Eq(pages_per_day_slow * (deadline + days_late), total_pages)\n\n    # Equation for reading faster (39 pages/day) and finishing 4 days early\n    eq2 = Eq(pages_per_day_fast * (deadline + days_early), total_pages)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (total_pages, deadline))\n\n    # Return the number of days to deadline and total pages of the storybook\n    return solutions[deadline], solutions[total_pages]\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    ans = 7.298 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_worker_per_day = 2\n    workers = 2\n    total_rooms = 4\n\n    # Each worker can paint 2 rooms in a day, so 2 workers can paint 4 rooms in a day.\n    days = total_rooms / (workers * rooms_per_worker_per_day)\n\n    return days\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    sum_first_part = sum(range(6, 11))  # sum of 10, 9, 8, 7, 6\n    sum_second_part = sum(range(1, 6))  # sum of 5, 4, 3, 2, 1\n    ans = sum_first_part - sum_second_part\n    return ans\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = (60 * 60) / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n    \n    correct_solution = solve(equation, x)\n    \n    # Celeste made a mistake in her calculation at the step of simplification:\n    # Correct the step: (7 - 4x) = (3 - x) should be (7 - 4x + x) = (3), which becomes\n    # (7 - 3x) = (3) => 4 - 3x = 0 => 3x = 4 => x = 4/3\n\n    celestes_answer = 4/3\n\n    if celestes_answer == correct_solution[0]:\n        return False, celestes_answer, correct_solution[0]\n    else:\n        return True, celestes_answer, correct_solution[0]\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    badges_given = total_badges * (3/8)\n    badges_left = total_badges - badges_given\n    return int(badges_left)\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    # Kate buys 1 apple and 2 oranges = 48p\n    equation1 = Eq(apple + 2 * orange, 48)\n    # Jade buys 1 apple and 1 orange = 31p\n    equation2 = Eq(apple + orange, 31)\n\n    # Solve the equations\n    solution = solve((equation1, equation2), (apple, orange))\n\n    return solution[orange]\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if str_num.count('0') == 1 and '00' not in str_num:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n    total_steps = steps_per_staircase * total_staircases\n    return total_steps\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elias, aileen = symbols('elias aileen')\n    \n    # originally Elias had 5 times the stickers as Aileen\n    original_condition = Eq(elias, 5 * aileen)\n    \n    # after giving away and losing stickers, they have the same amount\n    after_condition = Eq(elias - 88, aileen - 8)\n    \n    # solve the system of equations\n    solutions = solve((original_condition, after_condition), (elias, aileen))\n    \n    # amount of stickers each of them had in the end\n    elias_end = solutions[elias] - 88\n    aileen_end = solutions[aileen] - 8\n    \n    return elias_end, aileen_end\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    louis_position = total_people - people_behind - 1 # Subtract 1 because we don't count Louis himself\n    return louis_position\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let pocket_money be the money I get each week, and price_per_ball be the price of one tennis ball.\n    pocket_money, price_per_ball = symbols('pocket_money price_per_ball')\n\n    # From the first week: pocket_money - 4 * price_per_ball = 27p = Â£0.27\n    week1 = Eq(pocket_money - 4 * price_per_ball, 0.27)\n\n    # From the second week: pocket_money - 2 * price_per_ball = Â£1.51\n    week2 = Eq(pocket_money - 2 * price_per_ball, 1.51)\n\n    # Solve the system of equations\n    solutions = solve((week1, week2), (pocket_money, price_per_ball))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    thomas, gerald = symbols('thomas gerald')\n\n    # Equation based on the problem statement\n    equation1 = Eq(5*gerald, 3*thomas)\n    equation2 = Eq(thomas + gerald, 104)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (thomas, gerald))\n\n    # Calculate the difference in the number of pieces of cheese eaten\n    difference = solutions[thomas] - solutions[gerald]\n\n    return difference\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    numbers = range(11, 32, 2)\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    ans = cookies_per_gram * 48\n    return ans\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert the numbers from base 8 to base 10, perform the addition, then convert back to base 8\n    num1 = int('25', 8)\n    num2 = int('37', 8)\n    \n    sum_base10 = num1 + num2\n    \n    # Converting the sum back to base 8\n    ans = oct(sum_base10)[2:] # slice to remove the '0o' prefix\n    \n    return ans\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    ans = 5987 + 67 + 983\n    return ans\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    return 12.4 / 40\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Let the number of boys be b and girls g. We have the following relationship:\n    # b = (2/7) * g\n    # Let the number of children be c and adults a. We have the following relationship:\n    # a = (2/3) * c + 1228\n    # The number of children is the sum of boys and girls: c = b + g\n    # We have the equation for adults in terms of boys: a = (2/3) * (b + (7/2) * b) + 1228\n    # Let's solve this equation for b and then determine the total number of people (b + g + a)\n    \n    from sympy import symbols, Eq, solve\n\n    b = symbols('b')    \n    eq = Eq((2/3) * (b + (7/2) * b) + 1228, b)\n    b_value = solve(eq, b)[0]\n    g_value = (7/2) * b_value\n    c_value = b_value + g_value\n    a_value = (2/3) * c_value + 1228\n\n    total_people = b_value + g_value + a_value\n\n    return total_people\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    num_bags = 8\n    pens_per_bag = 4\n    total_pens = num_bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n * (n - 1) // 2 + n * (n - 1) * (n - 2) // 6 + n * (n - 1) * (n - 2) * (n - 3) // 24\n    return ans\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    cost_price_per_racket = 150\n    selling_price_per_racket = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Let x be the number of rackets purchased initially\n    # The total cost price for x rackets is 150x\n    # The shop sold x - 8 rackets and made a profit of 525\n    # Therefore, the proceeds (selling_price_per_racket * (x - 8)) from selling x - 8 rackets should be equal \n    # to the cost of all rackets (cost_price_per_racket * x) plus the profit (profit).\n    # Thus: selling_price_per_racket * (x - 8) = cost_price_per_racket * x + profit\n\n    # Rearrange the equation and solve for x\n    # 175x - 175 * 8 = 150x + 525\n    # 175x - 150x = 175 * 8 + 525\n    # 25x = 1400 + 525\n    # 25x = 1925\n    # x = 1925 / 25\n    x = (selling_price_per_racket * remaining_rackets + profit) / (selling_price_per_racket - cost_price_per_racket)\n\n    return int(x)\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Let x be the initial amount of money both Chloe and Gordon had.\n    # Given that Chloe spent $20 each day and Gordon spent $25 each day,\n    # and when Chloe had $157 left, Gordon had $82 left.\n\n    # This means the difference in their spendings is the difference in their remaining amounts.\n    # So, (Initial Amount - Chloe's Remaining) / Chloe's Daily Spending = \n    # (Initial Amount - Gordon's Remaining) / Gordon's Daily Spending\n\n    # Let's denote the number of days as \"days\".\n    # Chloe's equation: x - 157 = 20 * days\n    # Gordon's equation: x - 82 = 25 * days\n    # Since both equations equal the number of days, we can set them equal to each other:\n    # x - 157 = x - 82\n    # Subtract x from both sides:\n    # -157 = -82 + (25 - 20) * days\n    # Simplifying\n    # 75 = 5 * days\n    # Divide both sides by 5:\n    days = (157 - 82) / (25 - 20)\n    \n    # Now we can find the initial amount of money\n    # Use Chloe's equation:\n    # Initial Amount = Chloe's Remaining + Chloe's Daily Spending * days\n    initial_amount = 157 + 20 * days\n    return initial_amount\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n\n    str_factorial = str(factorial)\n    ans = len(str_factorial) - len(str_factorial.rstrip('0'))\n\n    return ans\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):  # x2 should be greater than x1\n            x3 = 14 - x1 - x2  # the third number is determined by the first two\n            if x3 > x2:  # x3 should be greater than x2\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_per_melon = 15 / total_melons\n    bad_melons = total_melons * 1/5\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.5\n    revenue = remaining_melons * selling_price_per_melon\n    cost = total_melons * cost_per_melon\n    profit = revenue - cost\n\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    oranges = 150\n    apples = 100\n    orange_leftover = 17\n    apple_leftover = 5\n\n    # Total oranges and apples that can be divided among neighbours\n    distributable_oranges = oranges - orange_leftover\n    distributable_apples = apples - apple_leftover\n\n    # Find the greatest common divisor of the distributable oranges and apples\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    neighbours = gcd(distributable_oranges, distributable_apples)\n\n    return neighbours\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # length of the line in cm\n    crosses_interval = 1  # distance between each cross in cm\n\n    # The total number of crosses will be the line length divided\n    # by the interval between crosses plus one for the cross at the\n    # beginning of the line.\n    total_crosses = (line_length // crosses_interval) + 1\n\n    return total_crosses\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of the jewels in box P before transferring\n    # Let y be the total value of the jewels in box Q before transferring\n    \n    x, y = symbols('x y')\n\n    # After transferring one jewel worth Â£5000 from P to Q\n    # New average value of jewels in P = (x - 5000)/2\n    # New average value of jewels in Q = (y + 5000)/4\n\n    # According to the given condition:\n    # New average of P is Â£1000 more than the old average of P -> (x - 5000)/2 = x/3 + 1000\n    # New average of Q is Â£1000 more than the old average of Q -> (y + 5000)/4 = y/3 + 1000\n\n    # Set up the equations\n    equation1 = Eq((x - 5000)/2, x/3 + 1000)\n    equation2 = Eq((y + 5000)/4, y/3 + 1000)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The total value of all 6 jewels is the sum of x and y\n    total_value = solutions[x] + solutions[y]\n\n    return total_value\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    ans = 6.23 - 5.72\n    return ans\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    num_teams = 3\n    matches = num_teams * (num_teams - 1) / 2\n    return int(matches)\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sandra, jessica = symbols('sandra jessica')\n    \n    # Sandra has more marbles than Jessica initially\n    initial_condition = Eq(sandra, jessica + 13)\n    \n    # After giving Jessica 13 marbles, Sandra has 6 fewer than Jessica\n    after_condition = Eq(sandra - 13, jessica + 13 - 6)\n    \n    solutions = solve((initial_condition, after_condition), (sandra, jessica))\n    \n    return solutions[sandra] - solutions[jessica]\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_1_and_6 = 60  # distance between the 1st and the 6th lamp post\n    number_of_intervals_1_6 = 6 - 1  # number of intervals between the 1st and 6th lamp post\n\n    # distance for one interval\n    distance_per_interval = distance_between_1_and_6 / number_of_intervals_1_6\n\n    number_of_intervals_1_9 = 9 - 1  # number of intervals between the 1st and 9th lamp post\n    distance_between_1_and_9 = distance_per_interval * number_of_intervals_1_9\n\n    return distance_between_1_and_9\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6  # Length of the repeating pattern\n    green_balloons_in_pattern = 2  # Number of green balloons in each pattern\n\n    # Calculate the number of complete patterns\n    complete_patterns = 75 // pattern_length\n\n    # Calculate the number of green balloons in the complete patterns\n    green_count = complete_patterns * green_balloons_in_pattern\n\n    # Calculate any additional green balloons in the incomplete pattern\n    remaining_balloons = 75 % pattern_length\n    if remaining_balloons >= 3:\n        green_count += 1\n    if remaining_balloons == 6:\n        green_count += 1\n\n    return green_count\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_floor = 9\n    bob_floor = 5\n    top_floor = 25\n    ratio = bob_floor / andy_floor\n    bob_top_floor = top_floor * ratio\n\n    return int(bob_top_floor)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    # Starting with the hypothesis that N is 2 digits long: 10 to 99\n    ones_count = 0\n    twos_count = 0\n    for n in range(10, 100):\n        ones_count += str(n).count('1')\n        twos_count += str(n).count('2')\n\n        if ones_count == 15 and twos_count == 14:\n            return n\n\n    # If not found, assuming N is 3 digits long: 100 to 999\n    for n in range(100, 1000):\n        ones_count += str(n).count('1')\n        twos_count += str(n).count('2')\n\n        if ones_count == 15 and twos_count == 14:\n            return n\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    pieces_each_friend = 26\n    num_friends = 7\n    pieces_left_with_kate = 22\n    total_at_school = pieces_each_friend * num_friends + pieces_left_with_kate\n    total_initial_candy = total_at_school * 3  # because she ate 1/3 at home, so 2/3 is brought to school\n    \n    return total_initial_candy\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if 120 + m == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_words, original_speed = symbols('total_words original_speed')\n    \n    # If he keeps the original speed, he finishes the work in 3 minutes.\n    equation1 = Eq(total_words, 3 * original_speed)\n    \n    # If he types 30 more words per minute, he finishes 1 minute earlier (2 minutes in total).\n    equation2 = Eq(total_words, 2 * (original_speed + 30))\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (total_words, original_speed))\n    \n    return solutions[total_words]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0] * 10\n\n    # Ms. Lily pressed every other light switch starting from 1\n    for i in range(0, 10, 2):\n        lights[i] = 1 - lights[i]\n\n    # Sam then pressed every even numbered light switch 7 times\n    for i in range(1, 10, 2): \n        lights[i] = lights[i] + 7\n    \n    # Any light that was pressed an odd number of times will be on\n    num_lights_on = sum(light % 2 == 1 for light in lights)\n\n    return num_lights_on\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    depth_of_well = 8\n    climb_up = 3\n    slip_down = 2\n    total_climbed = 0\n    day = 0\n\n    while total_climbed < depth_of_well:\n        day += 1\n        total_climbed += climb_up\n        if total_climbed >= depth_of_well:\n            break\n        total_climbed -= slip_down\n\n    return day\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let pail A contain 'a' liters and pail B contain 'b' liters of water\n    a, b = symbols('a b')\n\n    # Pail A contains 2/3 as much water as Pail B\n    equation1 = Eq(a, (2/3) * b)\n    # After pouring 4 liters from B to A, A has 7/8 as much water as B\n    equation2 = Eq(a + 4, (7/8) * (b - 4))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # The total amount of water in both pails will be a + b\n    total_water = solutions[a] + solutions[b]\n\n    return total_water\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_already_made = 20\n    time_taken = 2  # hours\n    total_parts_needed = 100\n\n    # Rate of production per hour\n    production_rate = parts_already_made / time_taken\n\n    # Remaining parts to be made\n    parts_remaining = total_parts_needed - parts_already_made\n\n    # Time needed for remaining parts\n    time_needed = parts_remaining / production_rate\n\n    return time_needed\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900  # ml\n    initial_sugar_percentage = 0.06  # 6%\n    desired_sugar_percentage = 0.10  # 10%\n\n    # Calculate the amount of sugar in the initial solution\n    initial_sugar = initial_volume * initial_sugar_percentage\n\n    # Let x be the amount of pure sugar to be added\n    # The final volume will be initial_volume + x\n    # The final amount of sugar will be initial_sugar + x\n    # We want the final sugar concentration to be 10%, so:\n    # (initial_sugar + x) / (initial_volume + x) = desired_sugar_percentage\n    # Solve for x\n    x = symbols('x')\n    equation = Eq((initial_sugar + x) / (initial_volume + x), desired_sugar_percentage)\n\n    # Solve the equation for x\n    added_sugar = solve(equation, x)[0]\n\n    return added_sugar\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50  # cost of one chocolate bar in pence\n    number_of_bars = 4  # number of chocolate bars\n\n    total_cost = cost_per_bar * number_of_bars  # total cost of the chocolate bars\n\n    return total_cost\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "def solution():\n    from math import comb\n\n    # By the Pigeonhole principle, to guarantee at least one color match \n    # among participants with exactly two balls each, there must be one more \n    # participant than there are combinations of colors taken 2 at a time.\n\n    # Number of colors\n    colors = 5\n\n    # Combinations of 2 colors from 5\n    color_combinations = comb(colors, 2)\n\n    # At least one overlapping pair, so add 1 to the combinations\n    participants = color_combinations + 1\n\n    return participants\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    ans = 20504 // 8\n    return ans\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hisham, melissa = symbols('hisham melissa')\n    total_cards = 876\n\n    # Melissa had twice as many cards as Hisham\n    equation1 = Eq(melissa, 2 * hisham)\n    # The total number of cards Hisham and Melissa had\n    equation2 = Eq(hisham + melissa, total_cards)\n\n    # Solve the equations to find the number of cards Hisham and Melissa had\n    solutions = solve((equation1, equation2), (hisham, melissa))\n    hisham_cards = solutions[hisham]\n    melissa_cards = solutions[melissa]\n\n    # Calculate how many cards Melissa should give to Hisham\n    cards_to_give = melissa_cards - hisham_cards\n\n    return cards_to_give // 2  # Melissa needs to give half the difference for them to have the same number.\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    # Since it's an arithmetic sequence, the common difference (d) can be found by\n    # subtracting the first term from the third term and dividing by the number of jumps (2)\n    common_difference = (third_term - first_term) / 2\n    return common_difference\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # To ensure the product of any two numbers is divisible by 4, we need to consider\n    # the worst-case scenario where we pick the maximum number of numbers without\n    # getting a product divisible by 4.\n    # Numbers divisible by 4 will always ensure the product is divisible by 4, so we need\n    # to count them last. Numbers with a remainder of 2 when divided by 4 can be paired\n    # with another such number to get a product divisible by 4, so we count them second last.\n    # We will count the number of non-divisible numbers (remainder 1 or 3) and then add 1 to\n    # that total to ensure we have a number that makes the product divisible by 4.\n    \n    # For the integers from 10 to 41, we categorize them as follows:\n    # - Numbers leaving a remainder of 2 when divided by 4 (e.g., 10, 14,...)\n    # - Numbers divisible by 4 (e.g., 12, 16,...)\n    # - Numbers leaving a remainder of 1 or 3 (e.g., 11, 13,...)\n    \n    count_remainder_2 = 0      # Count of numbers with remainder 2 when divided by 4\n    count_remainder_1_or_3 = 0 # Count of numbers with remainder 1 or 3 when divided by 4\n    \n    for i in range(10, 42):\n        if i % 4 == 2:\n            count_remainder_2 += 1\n        elif i % 4 == 0:\n            pass\n        else:\n            count_remainder_1_or_3 += 1\n    \n    # We can ensure a pair with a product divisible by 4 if we draw at least:\n    # One more than the number of numbers with remainder 1 or 3\n    return count_remainder_1_or_3 + 1\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # To ensure we have 3 different coloured balls in the worst-case scenario, \n    # we must think of the case where we pick as many same coloured balls as we can before getting all 3 colours.\n\n    # Since there are 5 balls of each colour, we can pick all 5 balls of one colour and still not have 3 different colours.\n    # Therefore, we can pick 5 red and 5 white balls, making it 10 balls, without guaranteeing 3 different colours.\n\n    # However, as soon as we draw one more ball after that, it is guaranteed to be the third colour (yellow in this case).\n    # This is because there would be no other colour left aside from yellow.\n\n    # Thus, the minimum number of balls we must draw to guarantee 3 different coloured balls is 11.\n    return 11\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Convert 2 m 20 cm to cm\n    # Cut the rope into two equal pieces\n    length_each_piece = total_length_cm / 2\n    return length_each_piece\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = 0\n    for i in range(46, 51):\n        ans += i * (100 - i)\n    return ans\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    ans = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import isprime\n    from math import sqrt\n    \n    # Find the smallest two-digit prime number\n    for i in range(10, 100):\n        if isprime(i):\n            smallest_two_digit_prime = i\n            break\n    \n    # Find the largest two-digit square number\n    largest_two_digit_square = int(sqrt(99)) ** 2\n    \n    # Calculate the product\n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the unknown value in the equation\n    x = symbols('x')\n    \n    # Create equation based on the problem statement\n    equation = Eq(40/(x + 5), 5)\n\n    # Solve the equation for the variable x\n    solution = solve(equation, x)\n\n    # Get the result\n    ans = solution[0]\n    return ans\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian's age at his 14th birthday\n    brian_age = 14\n    # Father's age at that time\n    father_age = 41\n\n    # The difference in age will remain constant\n    age_difference = father_age - brian_age\n\n    # Brian's age when the reversed digits occur next\n    while True:\n        brian_age += 1\n        father_age += 1\n        # Get the reversed age of Brian, which is the father's current age\n        reversed_brian_age = int(str(brian_age)[::-1])\n\n        # Check if the reversed age matches the father's age and Brian's age is two digits\n        if father_age == reversed_brian_age and len(str(brian_age)) == 2:\n            return brian_age\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd = 1 / 0.96\n    cost_in_euro = 4.8\n    cost_in_usd = cost_in_euro * euro_to_usd\n    return cost_in_usd\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_value = None\n\n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = p\n        value = a + b / c + (d / e) * f - (g + h / j)\n        if value.is_integer():\n            if max_value is None or value > max_value:\n                max_value = value\n                \n    return max_value\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    initial_total_books = 3900\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n\n    initial_chinese_books = (ratio_chinese / total_ratio) * initial_total_books\n    initial_malay_books = (ratio_malay / total_ratio) * initial_total_books\n    initial_english_books = (ratio_english / total_ratio) * initial_total_books\n\n    new_books = 510\n    increased_chinese_books = initial_chinese_books * 0.20\n    increased_malay_books = initial_malay_books * 0.10\n\n    increased_books_without_english = increased_chinese_books + increased_malay_books\n    increased_english_books = new_books - increased_books_without_english\n\n    percentage_increase_english = (increased_english_books / initial_english_books) * 100\n\n    return percentage_increase_english\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    # Number of juniors and seniors\n    juniors_count = 12\n    seniors_count = 8\n    \n    # Average scores\n    junior_avg_score = 10\n    total_avg_score = 14\n    \n    # Total score of juniors\n    total_juniors_score = juniors_count * junior_avg_score\n    \n    # Total score of all participants\n    total_score = (juniors_count + seniors_count) * total_avg_score\n    \n    # Total score of seniors\n    total_seniors_score = total_score - total_juniors_score\n    \n    # Average score of seniors\n    senior_avg_score = total_seniors_score / seniors_count\n    \n    return senior_avg_score\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    rex_score = 66\n    \n    # Rex answered all but one question, so he answered 24 questions\n    for correct in range(0, 24):\n        incorrect = 24 - correct  # The rest of the questions Rex answered incorrectly\n        score = correct * points_correct + incorrect * points_incorrect\n        # Check if the calculated score matches Rex's score of 66 points\n        if score == rex_score:\n            return correct\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago, combined age was 10 years.\n    combined_age_four_years_ago = 10\n\n    # Every year each dog gets 1 year older, so together they get 2 years older every year\n    # After 4 years, the combined age will increase by 4 * 2 years.\n    increase_in_age_since_then = 4 * 2\n\n    # Combined age currently.\n    current_combined_age = combined_age_four_years_ago + increase_in_age_since_then\n\n    # In 2 more years, they will each be 2 years older, so combined 2 * 2 years.\n    increase_in_two_years = 2 * 2\n\n    # Future combined age.\n    future_combined_age = current_combined_age + increase_in_two_years\n\n    return future_combined_age\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    containers = 10\n    min_apples = (containers - 1) + 2\n    return min_apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * (10 ** (-2022))\n    denominator = 92 * (10 ** (-2024))\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made = 160\n    butter_used = 50\n    desired_cookies = 300\n\n    butter_needed = (butter_used / cookies_made) * desired_cookies\n    \n    return butter_needed\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    return 15.9 * 2\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_questions = 90\n    mochi_answers = symbols('mochi_answers')\n    mochi_score = 264\n    \n    # Equation: (correct answers * 5 marks) - (incorrect answers * 2 marks) + (unanswered questions * 1 mark) = total score\n    equation = Eq(mochi_answers * 5 - (total_questions * 0.6 - mochi_answers) * 2 + (total_questions - total_questions * 0.6) * 1, mochi_score)\n    \n    correct_answers = solve(equation, mochi_answers)\n    \n    return correct_answers[0]\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    # Applying the inverse operation to solve for the square\n    return (19 + 2) // 3\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n\n    # Dedra had 4 times as much money as Timm at first\n    equation1 = Eq(dedra, 4 * timm)\n\n    # Both received $72 each\n    equation2 = Eq(dedra + 72, 2 * (timm + 72))\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (dedra, timm))\n\n    return solutions[dedra]\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jane, jack = symbols('jane jack')\n    equation1 = Eq(jane, jack + 5)\n    equation2 = Eq(jane + jack, 33)\n    \n    solutions = solve((equation1, equation2), (jane, jack))\n    \n    return solutions[jane]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    current_length = 0\n    number = 1\n\n    while True:\n        number_length = len(str(number))\n        if current_length + number_length >= 1000:\n            break\n        current_length += number_length\n        number += 1\n\n    remaining_digits = 1000 - current_length\n    nth_digit_number = str(number)[remaining_digits - 1]\n    \n    return int(nth_digit_number)\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n\n    people_in_front = total_people - people_behind - 1\n\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    ans = 257.36 / 0.4\n    return ans\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "from math import factorial\n\ndef solution():\n    n = 18  # total pupils\n    r = 3   # pupils to be seated\n    permutations = factorial(n) / factorial(n - r)\n    return int(permutations)\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    salary_per_month = 1.4\n    debt_in_bitcoins = 5.04\n    \n    months_needed = debt_in_bitcoins / salary_per_month\n    \n    return months_needed\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    # Given number of types of fruits containing respective vitamins\n    fruits_A = 62\n    fruits_C = 90\n    fruits_E = 68\n\n    # Given number of types of fruits containing two vitamins\n    fruits_AC = 48\n    fruits_AE = 36\n    fruits_CE = 50\n\n    # Given number of types of fruits containing all three vitamins\n    fruits_ACE = 25\n\n    # Using the Inclusion-Exclusion Principle to find the total number of types\n    total_types = (fruits_A + fruits_C + fruits_E) - (fruits_AC + fruits_AE + fruits_CE) + fruits_ACE\n\n    return total_types\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n    return rachel\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack_age = 4\n    jason_age, bruce_age, willie_age = symbols('jason_age bruce_age willie_age')\n    \n    equation1 = Eq(jason_age, bruce_age)  # Jason's age is same as Bruce's age\n    equation2 = Eq(jason_age, willie_age)  # Jason's age is same as Willie's age\n    equation3 = Eq(jack_age + jason_age + bruce_age + willie_age, 19)  # Total age of the 4 children\n\n    solutions = solve((equation1, equation2, equation3), (jason_age, bruce_age, willie_age))\n    \n    return solutions[jason_age]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    # Let n be the total number of erasers and f be the number of friends.\n    # If each friend received 5 erasers, Andy would have 3 left: n - 5*f = 3\n    # If each friend received 6 erasers, Andy would be short of 2 erasers: 6*f - n = 2\n\n    n, f = 5, 1  # Start the search with 5 erasers and 1 friend, since Andy is left with 3 erasers in the first scenario\n    while True:\n        if n - 5*f == 3 and 6*f - n == 2:\n            return n\n        # Increment the number of erasers and friends, keeping the difference as per the given conditions\n        n += 1\n        f += 1\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Jake's and John's current ages\n    jake, john = symbols('jake john')\n\n    # Equation 1: The sum of their ages is 44\n    equation1 = Eq(jake + john, 44)\n\n    # Equation 2: In 14 years, Jake will be twice as old as John\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jake, john))\n\n    # Calculate how old John will be in 14 years\n    john_future_age = solutions[john] + 14\n\n    return john_future_age\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    ans = 2018 - 786\n    return ans\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    ans = sum((i**2 + (i + 1)**2)/(i * (i + 1)) for i in range(1, 2008))\n    return round(ans)\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let y be the age of the youngest child in months\n    y = symbols('y')\n\n    # Oldest child age in terms of the youngest (in months)\n    oldest = 6 * y\n\n    # Age difference between each child in months\n    age_diff = 15\n\n    # The sum of ages difference for all the children between the oldest and youngest\n    total_diff = sum(age_diff * i for i in range(8))\n\n    # Equation representing the age of oldest in terms of youngest and age difference\n    equation = Eq(oldest - y, total_diff)\n    \n    # Solve for the age of the youngest child in months\n    youngest_months = solve(equation, y)[0]\n    \n    # Since the ages are usually expressed in years, convert months to years\n    youngest_years = youngest_months / 12\n\n    return youngest_years\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let's denote the number of sweets Jiaxiang has as x.\n    # Therefore, Cayden has x + 5 sweets.\n    # After Cayden gives Jiaxiang 10 sweets, Cayden will have (x + 5 - 10) sweets, which means (x - 5) sweets.\n    # Jiaxiang will have (x + 10) sweets.\n    # The difference in number of sweets they have now would be the absolute value of (x + 10) - (x - 5), which simplifies to 15.\n    return abs((10) - (-5))\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) + 1 \n    last_multiple = 150 // 11\n    number_of_multiples = last_multiple - first_multiple + 1\n    return number_of_multiples\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    from sympy import symbols, Min\n\n    # Defining the symbol for the operation result\n    result = symbols('result')\n\n    # List all possible ways to insert two pairs of brackets\n    expressions = [\n        (15 + 5) * (5 + 15) - 6 + 7,\n        ((15 + 5) * 5 + 15) - 6 + 7,\n        15 + (5 * (5 + 15) - 6) + 7,\n        15 + 5 * ((5 + 15) - 6) + 7,\n        15 + 5 * (5 + (15 - 6)) + 7,\n        (15 + 5) * 5 + (15 - 6) + 7,\n        15 + ((5 * 5 + 15) - 6) + 7,\n        (15 + (5 * 5) + 15) - 6 + 7,\n        15 + 5 * (5 + 15 - 6) + 7,\n        15 + (5 * 5 + (15 - 6)) + 7,\n        ((15 + 5 * 5) + 15) - 6 + 7,\n        15 + 5 * 5 + (15 - (6 - 7))\n    ]\n    \n    # Calculate the smallest result\n    min_result = Min(*expressions)\n\n    return min_result\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Let's denote the original combination lock number as ABCD (where A, B, C, D are its digits).\n    # According to the problem, the new 4-digit number is DCBA.\n    # The difference is given by: DCBA - ABCD = 5877.\n    # Which translates to: (D*1000 + C*100 + B*10 + A) - (A*1000 + B*100 + C*10 + D) = 5877.\n    # By expanding and simplifying we get: 999D - 999A = 5877, which simplifies to D - A = 6.57...\n    # Since D and A are digits, the maximum difference can be 9 (if D is 9 and A is 0).\n    # However, A cannot be 0 because it's the first digit of a 4-digit number.\n    # So the maximum difference of 6 can only be achieved if D is 9 and A is 3.\n    # This means the smallest original combination would be when A is the smallest possible value (3)\n    # and D is A + 6, which is 9 in this case, making B and C the smallest possible digits (0).\n    \n    A = 3\n    B = 0\n    C = 0\n    D = A + 6\n    smallest_original_number = A*1000 + B*100 + C*10 + D\n    return smallest_original_number\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2 / 15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Number of students without Mary\n    num_students_without_mary = 5\n    # Total score without Mary\n    total_score_without_mary = num_students_without_mary * 72\n    # Number of students with Mary\n    num_students_with_mary = 6\n    # Total score with Mary included to reach an average of 75%\n    total_score_with_mary = num_students_with_mary * 75\n    # Mary's score is the difference between the total with her and without her\n    marys_score = total_score_with_mary - total_score_without_mary\n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200  # in meters\n    bridge_length = 220  # in meters\n    speed = 60  # in meters per second\n\n    # The total distance the train needs to cover to completely cross the bridge\n    total_distance = train_length + bridge_length\n\n    # Time taken to cross the bridge is total distance divided by speed\n    time_taken = total_distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * 1/5\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * 3/4\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    # Start from the greatest 3-digit number and go backward\n    for num in range(999, 99, -2):  # only consider odd numbers\n        if num % 9 == 0:  # divisible by 9\n            tens_digit = (num // 10) % 10  # get the tens digit\n            if tens_digit % 4 == 0:  # check if tens digit is divisible by 4\n                return num\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # Since Jane has to ensure she gets 4 different coloured marbles,\n    # in worst case she can pick all 4 red, then all 7 green, then all 6 blue,\n    # and only then she is guaranteed to pick an orange one to have all 4 different colours.\n    ans = 4 + 7 + 6 + 1  # Add 1 for guarantee of the first orange marble\n    return ans\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    total_amount = 500  # Five pound note in pence\n    coins = [5, 10, 20, 50, 100, 200]  # Possible coins in pence\n    spend = total_amount - sum(coins)\n\n    return spend\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    # We have 11 identical doughnuts and want to divide them among 4 students with\n    # each student getting at least one doughnut. We can solve this by the method of\n    # stars and bars. We consider 10 'spaces' between 11 doughnuts and choose 3\n    # out of these to place a 'bar' which will partition the doughnuts into 4 groups.\n\n    # Since each student is required to get at least one doughnut, we will first\n    # distribute one doughnut to each student, that leaves us with 11 - 4 = 7 doughnuts\n    # to distribute freely.\n\n    # Now, we need to choose 3 partition points (bars) from the remaining 7 + 3 partitions\n    # which equals to choosing 3 from 10.\n    \n    ans = comb(10, 3)\n    return ans\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance_to_market = 48  # in meters\n    walking_speed = 8  # meters per minute\n    correct_time = distance_to_market // walking_speed  # correct division for time calculation in minutes\n    aunt_lina_time = 5  # Aunt Lina's estimated time in minutes\n    if correct_time != aunt_lina_time:\n        return correct_time\n    else:\n        return aunt_lina_time\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_temp = 11\n    \n    midnight_temp = midday_temp - drop_temp\n    \n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of $2 notes and $10 notes\n    notes_2, notes_10 = symbols('notes_2 notes_10')\n\n    # Given equations based on the problem\n    eq1 = Eq(notes_2 + notes_10, 38)  # Total number of notes\n    eq2 = Eq(0.25 * notes_2, 3 * 0.2 * notes_10)  # Relationship after spending\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (notes_2, notes_10))\n\n    # Determine the cost of the fan\n    fan_cost = 0.8 * solutions[notes_10] * 10 + 0.75 * solutions[notes_2] * 2\n\n    return fan_cost\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    hives_for_50kg = 5\n    honey_per_hive = 50 / hives_for_50kg\n    hives_needed_for_90kg = 90 / honey_per_hive\n    additional_hives_needed = hives_needed_for_90kg - hives_for_50kg\n    return int(additional_hives_needed)\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 23\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    import math\n\n    # Calculate the horizontal distance (east-west)\n    horizontal_distance = 15 - 9  # east minus west\n\n    # Calculate the total vertical distance (north)\n    vertical_distance = 3 + 5  # sum of both north travels\n\n    # Use Pythagoras to calculate the shortest distance from city A to city B\n    shortest_distance = math.sqrt(horizontal_distance**2 + vertical_distance**2)\n\n    return shortest_distance\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    # Let the number of erasers Ali initially has be 7x and Kumar has 5x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # Equations based on the problem statement\n    ali_initial = 7*x\n    kumar_initial = 5*x\n    \n    # Ali gives Kumar 10 erasers, so we update their counts\n    ali_after_giving = ali_initial - 10\n    kumar_after_receiving = kumar_initial + 10\n    \n    # The new ratio after Ali gives Kumar 10 erasers is 1:5\n    equation = Eq(ali_after_giving / kumar_after_receiving, 1/5)\n    \n    # Solve the equation to find the value of x\n    x_value = solve(equation, x)[0]\n    \n    # Calculate the total number of erasers they have altogether\n    total_erasers = ali_initial.subs(x, x_value) + kumar_initial.subs(x, x_value)\n    \n    return total_erasers\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define symbols for the price of one banana (b) and one pear (p)\n    b, p = symbols('b p')\n\n    # create equations based on the problem statement\n    equation1 = Eq(1*b + 3*p, 84)  # Max bought 1 banana and 3 pears for 84p\n    equation2 = Eq(1*b + 1*p, 48)  # Emily bought 1 banana and 1 pear for 48p\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "def solution():\n    from itertools import permutations\n\n    cards = ['0', '3', '5', '8']\n    count = 0\n    \n    for perm in permutations(cards):\n        number = int(\"\".join(perm))\n        if number > 5000:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time_in_minutes = 8 * 60 + 20  # Convert 8 hours and 20 minutes into minutes\n    activity_and_break_time = 45 + 20     # Duration of each activity and the following break in minutes\n\n    # Subtract the last break time since there is no break after the last activity\n    activities_time = total_time_in_minutes - 20\n    \n    # Calculate the number of activities\n    num_activities = activities_time // activity_and_break_time\n\n    return num_activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B, and Carl's weight as C.\n    A_plus_B = 102\n    B_plus_C = 97\n    A_plus_C = 92\n\n    # Sum of the weights of Adam, Ben, and Carl twice counts the total weight.\n    two_times_total = A_plus_B + B_plus_C + A_plus_C\n\n    # The total weight is half of this sum.\n    total_weight = two_times_total / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # A's efficiency is twice B's efficiency\n    equation1 = Eq(A, 2 * B)\n    \n    # A finishes the job in 5 days less than B\n    equation2 = Eq(1 / A, (1 / B) - (1/5))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = 1/5 * total_bulbs\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40 / 100\n    total_grams = 650\n    ans = percentage * total_grams\n    return ans\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    # George might be using the divisibility rule for 11 which is: \n    # Take the alternating sum of the digits in the number, and if the result is divisible by 11, then the number is as well.\n\n    number = 123456\n    digits = [int(d) for d in str(number)]\n    alternating_sum = sum(digits[::2]) - sum(digits[1::2])\n    \n    # Check the alternating sum's divisibility by 11\n    divisible_by_11 = alternating_sum % 11 == 0\n    remainder = alternating_sum % 11\n    \n    return (divisible_by_11, remainder)\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    def count_ways(steps):\n        if steps == 0:\n            return 1\n        if steps < 0:\n            return 0\n        return count_ways(steps - 1) + count_ways(steps - 4)\n    \n    return count_ways(9)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # Initial length in meters\n    remaining_length_cm = 78  # Remaining length in centimeters\n    \n    # Convert remaining length from centimeters to meters\n    remaining_length_m = remaining_length_cm / 100\n    \n    # Calculate the length of icicle melted in meters\n    melted_length_m = initial_length_m - remaining_length_m\n    \n    # Return the melted length in meters\n    return melted_length_m\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    return 3549 // 7\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return planes_in_36_minutes\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n\n    # At the first stop two-fifths get off and then 7 people get on\n    passengers_after_first_stop = initial_passengers - (2/5 * initial_passengers) + 7\n\n    # At the next stop a quarter of the people remaining on the bus get off and then 13 get on\n    passengers_after_second_stop = passengers_after_first_stop - (1/4 * passengers_after_first_stop) + 13\n\n    return int(passengers_after_second_stop)\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    n = int(10 / 0.5)  # Calculate the number of terms\n    sum_of_series = sum(i * 0.5 for i in range(1, n + 1))  # Sum of 1, 1.5, 2, ..., 10\n    ans = sum_of_series ** 2  # Square of the sum\n    return ans\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    precision = 5\n\n    # The least amount is the lower bound of the range of estimates\n    least_amount = estimated_price - (precision / 2)\n    \n    return least_amount\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum_ages = 22\n    future_sum_ages = 40\n    time_passed = future_sum_ages - current_sum_ages\n    return time_passed\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for x1 in range(98, 103):  # School 1 orders from 98 to 102 magazines, inclusive\n        for x2 in range(98, 103):  # School 2 does the same\n            x3 = 300 - x1 - x2  # The number of magazines for school 3 is determined by the first two\n            if 98 <= x3 <= 102:  # Ensure school 3's order is within the allowed range\n                count += 1  # If all conditions are met, increment the count\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    # Number of toys in the row\n    total_toys = 40\n    \n    # Position of the elephant counting from left to right\n    elephant_position_left = 10\n    \n    # Number of toys between the rabbit and the elephant\n    toys_between = 5\n    \n    # Position of the rabbit counting from left to right\n    rabbit_position_left = elephant_position_left - toys_between - 1\n    \n    # Position of the rabbit counting from right to left\n    rabbit_position_right = total_toys - rabbit_position_left\n    \n    return rabbit_position_right\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1  # Starting from the smallest possible number of pencils\n    while True:\n        if (pencils % 2 == 1 and pencils % 3 == 2 and\n                pencils % 4 == 3 and pencils % 5 == 4):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people = 1 + 3  # Ewan and his 3 sisters\n    biscuits_each = total_biscuits // people\n    return biscuits_each\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    result = (3 / 7) * 385\n    return result\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n represent the rate at which Nancy writes\n    # Let t represent the rate at which Tim writes\n    # Rates are in books per day\n    n, t = symbols('n t')\n\n    # Nancy can complete 1 book in 6 days so her rate is 1/6 books per day\n    # Together they can complete 1 book in 4 days, so the rate is 1/4 books per day\n    # The combined rate is then n + t\n   \n    # We form an equation for Nancy's rate\n    equation1 = Eq(n, 1/6)\n    # We form an equation for the combined rate\n    equation2 = Eq(n + t, 1/4)\n\n    # We solve the equations \n    solutions = solve((equation1, equation2), (n, t))\n\n    # Tim's rate is the solution for t, but we want the time it takes for him to write one book\n    tim_rate = solutions[t]\n    tim_time = 1 / tim_rate\n\n    return tim_time\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    total_mass_g = 172000  # Convert kg to grams\n    ratio_p = 7\n    ratio_q = 3\n    ratio_r = 2\n    mass_p = 300\n    mass_q = 400\n    mass_r = 500\n    \n    total_ratio = ratio_p + ratio_q + ratio_r\n    mass_per_ratio = (ratio_p * mass_p + ratio_q * mass_q + ratio_r * mass_r)\n    \n    packets = total_mass_g / mass_per_ratio * total_ratio\n    \n    return int(packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean = 12\n    total_sum = mean * (len(numbers) + 1)  # We add 1 because 'a' is also a number in the list\n    current_sum = sum(numbers)\n    a = total_sum - current_sum\n    return a\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    prep_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    total_time = prep_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.5  # 50% off is the same as a 0.5 rate\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n\n    # Convert times to seconds\n    light1_cycle = 60  # 1 minute\n    light2_cycle = 90  # 1.5 minutes\n    sync_cycle = 540  # 9 minutes\n\n    # Calculate the least common multiple for light1 and light2\n    common_cycle = lcm(light1_cycle, light2_cycle)\n\n    # If the common cycle is less than the sync cycle, \n    # the third light cycle should be a factor of the sync cycle\n    third_light_cycle = sync_cycle\n    \n    # Check from 30 seconds onwards till we reach the common cycle time\n    for time in range(30, common_cycle + 1, 30):\n        if sync_cycle % time == 0:\n            third_light_cycle = time\n            break\n\n    # Convert the third light cycle back to minutes and seconds\n    minutes = third_light_cycle // 60\n    seconds = third_light_cycle % 60\n    \n    return (minutes, seconds)\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # First, convert all lengths to the same unit (centimeters)\n    pink_ribbon_cm = 2.5 * 100  # Convert 2.5 meters to centimeters\n    blue_ribbon_cm = 220  # Already in centimeters\n    orange_ribbon_cm = 30.5 # Already in centimeters\n\n    # Create a list of ribbon lengths\n    ribbon_lengths = [\n        ('pink', pink_ribbon_cm),\n        ('blue', blue_ribbon_cm),\n        ('orange', orange_ribbon_cm)\n    ]\n\n    # Find the longest ribbon\n    longest_ribbon_color, _ = max(ribbon_lengths, key=lambda x: x[1])\n\n    return longest_ribbon_color\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    red_cars = 3\n    blue_cars = 12\n    green_cars = 15\n    \n    people_in_red = red_cars * 10\n    people_in_blue = blue_cars * 15\n    people_in_green = green_cars * 20\n    \n    total_people = people_in_red + people_in_blue + people_in_green\n    total_cars = red_cars + blue_cars + green_cars\n    \n    average_people_per_car = total_people / total_cars\n    \n    return average_people_per_car\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    base = 4\n    repetitions = 3\n    result = sum(base * 10**i for i in range(repetitions))\n    return result\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    percent_boys = (boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    cad_to_usd_rate = 1.25\n    book_cost_cad = 64\n    book_cost_usd = book_cost_cad / cad_to_usd_rate\n    return book_cost_usd\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # If the book is on the 8th shelf from the front and the 10th from the back,\n    # this implies that there are 7 shelves in front of it and 9 shelves behind it.\n    # Therefore, the total number of shelves is the shelves in front, the shelf of the book itself, and shelves behind.\n    \n    total_shelves = 7 + 1 + 9\n    return total_shelves\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    # students = 5, average = 90, total_points = average * students\n    total_points = 90 * 5\n    \n    # Since everyone should have a different score and the scores are whole numbers,\n    # let's start giving the highest possible score to the first student, which will be\n    # one less than the total points minus the sum of four lowest unique scores.\n    # 4 lowest unique scores are 1, 2, 3, 4 (totaling 10)\n    lowest_possible_score = total_points - (1 + 2 + 3 + 4) - (100 - 1)\n    \n    return lowest_possible_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the lengths of the ropes\n    A, B, C = symbols('A B C')\n    \n    # Set up the equations based on the problem description\n    equation1 = Eq(A, 3 * B)\n    equation2 = Eq(C, B + 56)\n    equation3 = Eq(A, C + 130)  # 1 m 30 cm is 130 cm\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Calculate the total length of the three ropes\n    total_length = solutions[A] + solutions[B] + solutions[C]\n    \n    return total_length\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    rachel_speed = 84  # Rachel's speed in km/h\n    eleanor_time_to_g = 4  # Eleanor's total time to reach city G in hours\n\n    # When Eleanor reached City G, Rachel was 39 km away from City F and 1.5h passed\n    # In that 1.5 hours, Rachel has traveled 84 km/h * 1.5 h\n    rachel_distance_in_15h = rachel_speed * 1.5\n\n    # The remaining distance to city F for Rachel is 39 km\n    # So the distance Rachel has covered when Eleanor reached city G is the total distance minus 39 km\n    # This is also the distance Eleanor covered in 2.5 hours (4 hours - 1.5 hours)\n    eleanor_distance_in_25h = rachel_distance_in_15h + 39\n\n    # Now we find Eleanor's speed: distance / time\n    eleanor_speed = eleanor_distance_in_25h / 2.5\n\n    # The total distance between City F and City G is Eleanor's speed times her total travel time\n    total_distance = eleanor_speed * eleanor_time_to_g\n\n    return total_distance\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest = max(numbers)\n    smallest = min(numbers)\n    return (2 * largest) - (3 * smallest)\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 48 * (3/4)\n    return x\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from math import factorial\n\ndef solution():\n    total_letters = 5\n    string_length = 3\n\n    # Calculate the number of ways to choose a string of 3 letters out of 5\n    total_combinations = factorial(total_letters) / (factorial(string_length) * factorial(total_letters - string_length))\n\n    # Calculate the number of ways to choose a string with A and B both in it \n    # We need to choose one more letter from the remaining 3.\n    combinations_with_A_and_B = factorial(total_letters - 2)\n\n    # Probability that a string includes A and B.\n    probability = combinations_with_A_and_B / total_combinations\n\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_students = 50 * 0.16\n    female_students = 70 * 0.10\n    total_students = male_students + female_students\n    total_members = 50 + 70\n    percentage_students = (total_students / total_members) * 100\n\n    return percentage_students\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_initial = 37\n    john_initial = 15\n    amy_final = john_initial + 4\n    apples_given = amy_initial - amy_final\n\n    return apples_given\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    volume1 = 200\n    concentration1 = 0.35\n    volume2 = 300\n    concentration2 = 0.50\n\n    total_volume = volume1 + volume2\n    total_fruit_juice = volume1 * concentration1 + volume2 * concentration2\n\n    concentration_new_mixture = (total_fruit_juice / total_volume) * 100\n\n    return concentration_new_mixture\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    markers_left = 32 - 7\n    bags = markers_left // 5\n    return bags\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "def solution():\n    # Part (1)\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # Calculate the fraction of the chicken pies more than vegetable pies\n    more_chicken_than_vegetable = chicken_pies - vegetable_pies\n    fraction_more_chicken = more_chicken_than_vegetable / chicken_pies\n\n    # Part (2)\n    # Calculate the fraction of the vegetable pies less than fruit pies\n    less_vegetable_than_fruit = fruit_pies - vegetable_pies\n    fraction_less_vegetable = less_vegetable_than_fruit / vegetable_pies\n\n    return (fraction_more_chicken, fraction_less_vegetable)\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Initial speed per hour, total papers, and remaining time (4 hours originally planned)\n    speed, papers, remaining_time = symbols('speed papers remaining_time')\n\n    # After working for one hour, she found that if she marks 6 more papers per hour\n    # she can finish in another 4 hours. So the remaining papers are equal to (speed + 6) * 4\n    equation1 = Eq(papers - speed * 1, (speed + 6) * remaining_time)\n\n    # If she marks 10 more papers per hour, she can finish 1 hour earlier (3 hours instead of 4)\n    equation2 = Eq(papers - speed * 1, (speed + 10) * (remaining_time - 1))\n\n    # It's given that the remaining time is 4 hours after working for one hour\n    equation3 = Eq(remaining_time, 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (speed, papers, remaining_time))\n\n    return solutions[papers]\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    return greatest_1_digit_even + smallest_2_digit_odd\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # 'a' should be a non-zero digit\n        for b in range(10):  # 'b' can be zero\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 208):\n        for digit in str(i):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_completed = 3/4\n\n    total_designs = made_designs / fraction_completed\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # First digit must be 1-9 for a three-digit number\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if hundreds + tens + ones == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the cost of each wristband and 3c be the cost of each cap.\n    c, money = symbols('c money')\n\n    # Caleb spent 2/5 of his money on 4 caps and 6 wristbands\n    cap_wristband_cost = Eq(4 * (3 * c) + 6 * c, money * 2/5)\n\n    # Caleb has 3/5 of his money left after spending on caps and wristbands\n    remaining_money = money * 3/5\n    \n    # Caleb then spent 1/3 of his remaining money on more caps\n    # Let x be the number of caps he bought with the remaining money\n    x, cap_cost = symbols('x cap_cost')\n    more_cap_cost = Eq(3 * c * x, remaining_money * 1/3)\n\n    # Solve the system of equations\n    solutions = solve((cap_wristband_cost, more_cap_cost), (c, x, money))\n\n    # Total caps bought altogether (4 initial caps + x more caps)\n    total_caps = 4 + solutions[x]\n    return total_caps\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Constants\n    g = 9.81  # acceleration due to gravity (m/s^2)\n    h0 = 3000  # initial height (m)\n    h = 2000  # target height (m)\n\n    # Symbols\n    v = symbols('v')  # final velocity\n\n    # Using the equation of motion without air resistance: v^2 = u^2 + 2gh\n    # Initial velocity (u) is 0 because the skydiver starts from rest\n    equation = Eq(v**2, 2 * g * (h0 - h))\n\n    # Solve for final velocity (v)\n    solutions = solve(equation, v)\n\n    # We need the positive solution because velocity here can't be negative\n    ans = max(solutions)\n    \n    return ans\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # Since there are 13 different numbers and we want 4 consecutive cards,\n    # dividing 13 by 4 and taking the ceiling gives the minimum number\n    # of groups of 4 possible within the 13 numbers.\n    number_of_groups = (13 - 1) // 4 + 1\n\n    # Thus, to ensure we have 4 consecutive cards we need to draw one card\n    # from each of these groups plus 1 (worst case scenario).\n    # We perform this operation 4 times for each pattern: hearts, spades, diamonds, and clubs.\n    cards_needed = (number_of_groups - 1) * 4 + 1\n    \n    return cards_needed\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    brother_age_3_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "def solution():\n    from itertools import permutations\n    \n    # Given conditions\n    A = 3\n    C = 1\n    G = 7\n    \n    # Find all permuations of the remaining digits\n    digits = [0,2,4,5,6,8,9]\n    for perm in permutations(digits):\n        B, D, E, F, H, I, J = perm\n        \n        # Check divisibility conditions\n        if (A*10 + B) % 2 == 0 and \\\n           (A*100 + B*10 + C) % 3 == 0 and \\\n           (D == 0 or D == 4 or D == 8) and \\\n           (A*1000 + B*100 + C*10 + D) % 5 == 0 and \\\n           (A*10000 + B*1000 + C*100 + D*10 + E) % 6 == 0 and \\\n           (G == 0 or G == 5) and \\\n           (A*1000000 + B*100000 + C*10000 + D*1000 + E*100 + F*10 + G) % 8 == 0 and \\\n           (A*10000000 + B*1000000 + C*100000 + D*10000 + E*1000 + F*100 + G*10 + H) % 9 == 0 and \\\n           I % 1 == 0 and J == 0:\n            # If we found the valid combination, assign values to the variables and break\n            return {\"A\": A, \"B\": B, \"C\": C, \"D\": D, \"E\": E, \"F\": F, \"G\": G, \"H\": H, \"I\": I, \"J\": J}\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    omitted_page_count = (89 // 3) + (1 if 89 % 3 else 0)\n    last_numbered_page = 89 + omitted_page_count\n    \n    return last_numbered_page\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    adult_price = 5\n    child_price = 3\n    total_tickets = 19\n    total_sales = 75\n\n    for adults in range(total_tickets + 1):\n        children = total_tickets - adults\n        if adult_price * adults + child_price * children == total_sales:\n            return adults\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3\n    count_5 = 600 // 5\n    count_15 = 600 // 15  # multiples of both 3 and 5\n    \n    ans = count_3 + count_5 - count_15  # Including multiples of 3 or 5, excluding double-counted\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_age_now = 10\n    tom_age_future = 20\n    grandma_age_future = 60\n    \n    # Calculate the difference in years between Tom's current age and when he will be 20\n    years_difference = tom_age_future - tom_age_now\n    \n    # Grandma will be 60 when Tom is 20, so subtract the years difference\n    # from Grandma's age when Tom will be 20\n    grandma_age_now = grandma_age_future - years_difference\n    \n    return grandma_age_now\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_in_B = symbols('candies students_in_B')\n    students_in_A = 2 * students_in_B\n    equation1 = Eq(4 * students_in_A - candies, 20)  # 4 candies per student in class A, 20 more needed\n    equation2 = Eq(candies - 6 * students_in_B, 16)  # 6 candies per student in class B, 16 left\n\n    solutions = solve((equation1, equation2), (candies, students_in_B))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    count = 0\n    for ten_pences in range(6):       # Jeremy can use from 0 to 5 ten-pence coins\n        for twenty_pences in range(4): # Jeremy can use from 0 to 3 twenty-pence coins\n            for fifty_pences in range(2): # Jeremy can use 0 or 1 fifty-pence coin\n                if ten_pences * 10 + twenty_pences * 20 + fifty_pences * 50 == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # since we have 3 red and 3 green,\n    # in the worst-case scenario, we will pick one of each color first (2 stickers)\n    # if we pick the third one, it has to be either red or green, ensuring 2 of the same color\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Worst case: she only gets 3 balls of the same color in the first 3x3 picks\n    worst_case_same_color = 3 * 3\n    # Next pick guarantees the 4th ball of the same color\n    next_pick = 1\n    \n    ans = worst_case_same_color + next_pick\n    return ans\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(\"\".join(map(str, sorted(digits, reverse=True))))\n    smallest = int(\"\".join(map(str, sorted(digits))))\n    return largest - smallest\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    # Number of teams\n    n = 5\n\n    # Each team plays against each other team exactly once\n    # Number of matches is the number of ways to choose 2 teams from 5\n    ans = n * (n - 1) // 2\n\n    return ans\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys, 3 * girls)  # There were three times as many boys as girls\n    equation2 = Eq(2 * boys + 4 * girls, 570)  # Total sweets\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Calculate the number of boxes in each of the top three layers\n    # Topmost layer: 1 box\n    top_layer = 1\n    # Second layer: 3x3 boxes\n    second_layer = 3**2\n    # Third layer: 4x4 boxes\n    third_layer = 4**2\n    \n    # Total number of boxes is the sum of the top three layers\n    total_boxes = top_layer + second_layer + third_layer\n    \n    return total_boxes\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    sum_with_1 = 1.2 + 1.23 + 1\n    sum_without_1 = 1.2 + 1.23\n    ans = (sum_with_1 * sum_with_1) - (sum_with_1 * sum_without_1)\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for num in range(100, 201):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    duck_legs = 4 * 2  # Each duckling has 2 legs\n    goose_legs = 2 * 2  # Each baby goose has 2 legs\n    lamb_legs = 4       # Each lamb has 4 legs\n\n    total_legs = 36\n    remaining_legs = total_legs - (duck_legs + goose_legs)\n    num_lambs = remaining_legs // lamb_legs\n\n    return num_lambs\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    total_good_copies = 600\n    good_copies_a = (3 / 5) * total_good_copies\n    good_copies_b = (2 / 5) * total_good_copies\n\n    total_copies_a = good_copies_a * (5 / 4)  # For every 4 good, there is 1 bad, so total is 5 copies for 4 good\n    total_copies_b = good_copies_b * (6 / 5)  # For every 5 good, there is 1 bad, so total is 6 copies for 5 good\n\n    total_copies = total_copies_a + total_copies_b\n\n    return int(total_copies)\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    days_in_january = 31\n    total_smiles_in_january = average_smiles_per_day * days_in_january\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n\n    num_students = 40\n    students_per_side = int(math.sqrt(num_students))\n\n    return students_per_side\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10  # initial drop height in meters\n    bounce_height = initial_height / 2  # height after first bounce\n    total_distance = initial_height + bounce_height * 2  # total distance after second bounce\n    return total_distance\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    annie_sugar = 300 * 0.15\n    becky_sugar = 400 * 0.25\n    carol_sugar = 300 * 0.35\n\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    total_solution = 300 + 400 + 300\n\n    concentration = total_sugar / total_solution\n\n    return concentration * 100\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    # Let x be the time it takes for the son to finish the work alone\n    # (1/x) is the son's work rate (portion of work done per hour)\n    #\n    # The farmer finishes his work in 24 hours, so his work rate is (1/24)\n    # Together they work at a rate of (1/x) + (1/24)\n    #\n    # They can finish the work in 16 hours working together, so\n    # 16 * ((1/x) + (1/24)) = 1 (completing one whole job)\n    #\n    # Solving the equation for x gives us the time it takes the son to finish the work alone\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(16 * ((1/x) + (1/24)), 1)\n    solution = solve(equation, x)\n\n    # Assuming that the son won't take more than 24h to finish the job alone:\n    if solution[0] > solution[1]:\n        return solution[1]\n    else:\n        return solution[0]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_five = 1/6\n    expected_number_of_fives = total_rolls * probability_of_five\n    return expected_number_of_fives\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(2, 41, 2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Johnny's calculation\n    johnnys_answer = (quotient * remainder) + divisor\n    \n    # The correct way to find the original number before division\n    correct_answer = (quotient * divisor) + remainder\n\n    # Check if Johnny's answer is correct\n    if johnnys_answer == correct_answer:\n        return True\n    else:\n        return False, correct_answer\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_permutations = factorial(5)  # All possible permutations without restrictions\n    \n    # Count permutations where Hugh is between Louise and Richard\n    # There are two scenarios when Hugh is between Louise and Richard:\n    # 1. Louise-Hugh-Richard\n    # 2. Richard-Hugh-Louise\n    # For these scenarios, we treat the three as a single unit, and then there are\n    # 3! ways to arrange the unit and the other two children, and 3! ways to arrange\n    # within the unit itself, making it 3! * 3! total for each scenario.\n    between_permutations = 2 * factorial(3) * factorial(3)\n\n    # Subtracting the unwanted permutations from the total gives the number of\n    # valid permutations where Hugh is not between Louise and Richard\n    ans = total_permutations - between_permutations\n    return ans\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    # Given fractions for wins and draws, and the number of losses\n    wins_fraction = 2/5\n    draws_fraction = 7/20\n    losses = 10\n\n    # Since they lost 10 matches, it means wins and draws fractions are with respect to (total matches - 10)\n    total_matches_minus_losses = 1 / (wins_fraction + draws_fraction)\n\n    # Calculate the actual number of matches (total_matches = total_matches_minus_losses + losses)\n    total_matches = total_matches_minus_losses + losses\n\n    # Calculate the number of wins and draws\n    wins = wins_fraction * total_matches\n    draws = draws_fraction * total_matches\n    \n    # Calculate points: wins give 3 points, draws give 1 point\n    points = (3 * wins) + (1 * draws)\n\n    return int(points)  # Return the number of points as an integer\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = initial_price * 0.10\n    price_after_first_discount = initial_price - first_discount\n    second_discount = price_after_first_discount * 0.20\n    final_price = price_after_first_discount - second_discount\n    return final_price\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    chocolate_price = 0.75  # price in pounds\n    pen_price = 0.95        # price in pounds\n    chocolate_bars = 4\n    pens = 3\n    note_value = 10         # value of the note in pounds\n    \n    total_cost = (chocolate_price * chocolate_bars) + (pen_price * pens)\n    change = note_value - total_cost\n\n    return change\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    total_numbers = 8\n    overall_mean = 555\n    difference_means = 296\n    first_3_mean = overall_mean - difference_means\n\n    # Calculate the total sum of all 8 numbers\n    total_sum = overall_mean * total_numbers\n\n    # Calculate the sum of the first 3 numbers\n    sum_first_3 = first_3_mean * 3\n\n    # Calculate the sum of the last 5 numbers\n    sum_last_5 = total_sum - sum_first_3\n\n    # Calculate the mean of the last 5 numbers\n    last_5_mean = sum_last_5 / 5\n\n    return last_5_mean\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    max_number = 100\n    start_number = 2\n    step = 2\n\n    multiples_crossed_out = (max_number - start_number) // step + 1\n\n    return multiples_crossed_out\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n    \n    bud_position_from_front = pip_position + children_between + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n\n    return bud_position_from_end\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    days_for_5_people = 15\n    days_for_x_people = 5\n    people_initially = 5\n\n    # Work = People * Days\n    work = people_initially * days_for_5_people\n\n    # Work / New Number of Days = New Number of People\n    people_needed = work / days_for_x_people\n\n    # Additional people needed\n    additional_people = people_needed - people_initially\n\n    return int(additional_people)\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n    equation3 = Eq(vicky, 99)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_in_one_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_in_one_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(rasidah - (3/5)*rasidah, (1/2)*(chai_seng - (6/7)*chai_seng))\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_current_age = 53\n    mother_current_age = 81\n    years_ago = symbols('years_ago')\n\n    isaac_age_then = isaac_current_age - years_ago\n    mother_age_then = mother_current_age - years_ago\n    equation = Eq(isaac_age_then, mother_age_then / 3)\n\n    years_ago_solution = solve(equation, years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    pounds_to_kg = 1 / 2.2\n    kg = pounds * pounds_to_kg\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    # Define the new operator function\n    def new_operator(a, b):\n        result = sum(range(a, b)) - b\n        return result\n\n    # Calculate (5 â 10) - (4 â 9) using the new operator\n    ans = new_operator(5, 10) - new_operator(4, 9)\n\n    return ans\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are:\n    # grandma's age % 4 = 2\n    # grandma's age % 5 = 3\n    # grandma's age % 9 = 6\n\n    # They can be transformed into a system of modular congruences that can be solved using the Chinese Remainder Theorem (CRT):\n    # x â¡ 2 (mod 4)\n    # x â¡ 3 (mod 5)\n    # x â¡ 6 (mod 9)\n\n    # Solve the system of congruences\n    ans = solve_congruence((2, 4), (3, 5), (6, 9))\n\n    # Return the age, which is the first element of the tuple returned by solve_congruence\n    return ans[0]\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8\n    cat_speed = 3\n    distance_difference = 500\n\n    speed_difference = elena_speed - cat_speed\n    time_to_catch_up = distance_difference / speed_difference\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [1, 2, 3]\n    three_digit_numbers = list(permutations(digits, 3))\n    count = len(three_digit_numbers)\n    \n    return count\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(2, 21):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_diff = [differences[i] - differences[i - 1] for i in range(1, len(differences))]\n    next_diff = differences[-1] + second_diff[-1]\n    next_number = 50 + next_diff\n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "from math import factorial\n\ndef solution():\n    # Total ways to arrange 4 cards (excluding the last digit which must be even)\n    total_ways_for_4_cards = factorial(4)\n    \n    # The last digit must be even, so there are 2 choices: 2 or 4\n    even_choices = 2\n    \n    # Multiplied by the number of ways to choose the last digit\n    ans = total_ways_for_4_cards * even_choices\n    \n    return ans\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for digit1 in range(1, 10):\n        for digit2 in range(10):\n            if digit1 + digit2 == 15:\n                return int(f\"{digit1}{digit2}\")\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    initial_mean = 50\n    initial_total = initial_mean * 8  # Total weight of the initial 8 apples\n    new_mean = 52\n    new_total = new_mean * 9  # Total weight after the extra apple is added\n\n    extra_apple_weight = new_total - initial_total\n\n    return extra_apple_weight\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    from sympy import sqrt, symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(sqrt(-x), 4)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    ans = sum(range(96, 100))\n    return ans\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages = symbols('pages')\n    original_time = pages / 50\n    new_time = pages / 70\n    time_difference = original_time - new_time\n\n    equation = Eq(time_difference, 2)\n    solution = solve(equation, pages)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # Since a lamp changes its state only when its number is a divisor\n    # of the person entering the room's number, a lamp will end up in\n    # the on position only if it has an odd number of divisors.\n    # Only perfect squares have an odd number of divisors.\n    # Thus, we need to count the number of perfect squares less than or\n    # equal to 250.\n\n    import math\n\n    # Find the largest perfect square less than or equal to 250\n    largest_square = int(math.sqrt(250))\n\n    # Each of these squares (1*1, 2*2, ..., largest_square*largest_square)\n    # corresponds to a lamp that will be ON. Therefore, the number of lamps\n    # that are on is exactly the number of perfect squares up to 250.\n    ans = largest_square\n\n    return ans\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    number_of_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    difference = 4\n    n = 30  # term number we want to find\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 1000):  # reasonably large range to ensure capturing the least possible divisor\n        # We know the pattern of division with remainder: Dividend = Divisor * Quotient + Remainder\n        dividend = divisor * 8 + 7  # Since the quotient is 8 and remainder is 7\n        if dividend % divisor == 7:  # If the remainder is 7 upon dividing\n            return (dividend, divisor)\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime(\"2013-01-28\", \"%Y-%m-%d\")\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n\n    def is_leap_year(year):\n        return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\n    year = 2013\n    while True:\n        year += 1\n        if is_leap_year(year-1):\n            start_date += one_year + one_day\n        else:\n            start_date += one_year\n        if start_date.weekday() == 0 and start_date.day == 28 and start_date.month == 1:\n            break\n    \n    return start_date.year\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n    \n    meters_per_day_per_company = total_expressway / (companies * days)\n    \n    return meters_per_day_per_company\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount_percent = 10\n    number_of_members = 30\n\n    discounted_cost = normal_cost - (normal_cost * (discount_percent / 100))\n    cost_per_member = discounted_cost / number_of_members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    initial_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    money_spent = 3\n\n    total_savings = initial_amount + (daily_savings * days_saved) - lent_to_brother - money_spent\n\n    return total_savings\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    last_digit_2 = pow(2, 2017, 10)\n    last_digit_3 = pow(3, 2017, 10)\n    \n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Star jogs for 1 hour from 6:30 am to 7:30 am\n    jogging_time = 1  # hour\n    jogging_speed = 6  # miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Star walks from 7:30 am to 9:30 am, which is 2 hours\n    walking_time = 2  # hours\n    walking_speed = 5  # miles per hour\n    walking_distance = walking_speed * walking_time\n\n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_rate = 0.80\n    additional_rate = 0.05\n    total_cost = 1.4\n    additional_cost = total_cost - base_rate\n\n    if additional_cost <= 0:\n        minutes = 15\n    else:\n        additional_minutes = additional_cost / additional_rate\n        minutes = 15 + additional_minutes\n\n    return int(minutes)\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Define a pattern based on the provided examples\n    def custom_operator(a, b):\n        return (a % 10) + b - (a // 10)\n    \n    # Apply the pattern to find 9 â 20\n    ans = custom_operator(9, 20)\n\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    result = ((37 - 11) * 2) + 4\n    return result\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5) * 5\n    if first_multiple < 56:\n        first_multiple += 5\n        \n    last_multiple = (120 // 5) * 5\n\n    num_multiples = ((last_multiple - first_multiple) // 5) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina was 50 years old on 10th May 2005.\n    gina_birth_year = 2005 - 50\n\n    # James was 20 years old on 10th May 1997.\n    james_birth_year = 1997 - 20\n\n    # When Gina was 35, the year was Gina's birth year + 35.\n    year_when_gina_was_35 = gina_birth_year + 35\n\n    # James's age when Gina was 35 would be the year when Gina was 35 minus James's birth year.\n    james_age_when_gina_35 = year_when_gina_was_35 - james_birth_year\n\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    # 1 quarter is 1/4, so we divide 2 and a half (2.5) by 1/4\n    total_quarters = 2.5 / 0.25\n    return int(total_quarters)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5\n    eddie_position = 9\n    people_between = 2\n\n    total_people = lucy_position + people_between + eddie_position\n\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        if int(f'26{B}789') % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert meters to centimeters\n    dress_length_cm = 5 * 100 + 8    # Convert meters to centimeters\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm / 9\n    return stripe_length_cm\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 4) * 7 - 21, 35)\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    # Potential remainders which are prime numbers\n    primes = [2, 3, 5, 7]\n    \n    # Check each combination of remainders for divisibility criteria\n    for x in range(1, 1000):  # Check within a reasonable range\n        success = True\n        remainders = []\n        for div in [3, 5, 7, 8]:\n            remainder = x % div\n            if remainder in primes:\n                remainders.append(remainder)\n                primes.remove(remainder)  # Remove to ensure uniqueness\n            else:\n                success = False\n                break\n        primes = [2, 3, 5, 7]  # Reset the prime numbers\n        if success and len(set(remainders)) == 4:\n            return x\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    # Since not all girls are right-handed, let's assume all boys are right-handed.\n    # The minimum number of right-handed girls would then be the total number of\n    # right-handed pupils minus the number of boys (total_pupils - girls).\n    right_handed_girls = right_handed - (total_pupils - girls)\n    \n    return right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n    \n    # Equation 1: Cost of books and files\n    equation1 = Eq(12 * books + 9 * files, 336)\n    \n    # Equation 2: Number of books is 14 more than files\n    equation2 = Eq(books, files + 14)\n\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Total number of flowers\n    total_flowers = Eq(orchids + tulips + roses, 3616)\n    \n    # Ratio of the number of orchids to the number of tulips\n    ratio_orchids_tulips = Eq(orchids/tulips, 3/5)\n    \n    # Number of flowers left after selling\n    flowers_left = Eq((orchids - 0.40 * orchids) + (tulips - tulips / 5) + (roses - 0.25 * roses), 2644)\n\n    # Solve the system of equations\n    solutions = solve((total_flowers, ratio_orchids_tulips, flowers_left), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):  # since max number of chickens is 10\n        rabbits = 10 - chickens\n        if (chickens * 2 + rabbits * 4) == 34:\n            return chickens\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    def last_digit_of_power(base):\n        return (base ** 2013) % 10\n\n    ans = sum(last_digit_of_power(i) for i in range(1, 10)) % 10\n    return ans\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    age = None\n    for i in range(30, 121):\n        if i % 6 == 2 and i % 7 == 5:\n            age = i\n            break\n    return age\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    # Assume the starting day is day 0 and 8pm is 20 hours\n    departure_time = 20  # 8pm in 24-hour clock\n    arrival_time_japan = 7 + 1  # 1am plus 7-hour difference\n    \n    # Since the flight lands on the next day, we add 24 hours to the arrival time\n    duration = (24 + arrival_time_japan) - departure_time\n    \n    return duration\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Since there are 3 pairs of different color socks,\n    # in the worst case, Peter could pick one of each color before he picks a matching pair.\n    # So 3 socks could be all different.\n    # To make sure he gets two socks of the same colour, he must pick one more.\n    return 3 + 1  # The worst-case scenario (1 of each color) + 1 for the guaranteed match.\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    total_score = 168\n    attempted_questions = total_questions - not_attempted\n    \n    # Suppose Amna answers all attempted questions correctly, then deducts 5 points for each wrong answer\n    # Let x be the number of wrong questions\n    # 4 * (attempted_questions - x) - x = total_score\n    # 4 * attempted_questions - 4x - x = total_score\n    # 5x = 4 * attempted_questions - total_score\n    # x = (4 * attempted_questions - total_score) / 5\n\n    wrong_answers = (4 * attempted_questions - total_score) / 5\n    correct_answers = attempted_questions - wrong_answers\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    total_digits = 0\n\n    # Counting digits for pages 1-9 (1 digit each)\n    total_digits += 1 * 9\n\n    # Counting digits for pages 10-99 (2 digits each)\n    total_digits += 2 * (99 - 10 + 1)\n\n    # Counting digits for pages 100-131 (3 digits each)\n    total_digits += 3 * (131 - 100 + 1)\n\n    return total_digits\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # 2-digit numbers cannot start with 0\n    # For the first digit we have 2 choices: 1 or 2\n    # For the second digit we have 3 choices: 0, 1, or 2\n    first_digit_choices = 2\n    second_digit_choices = 3\n\n    # According to the multiplication principle\n    total_numbers = first_digit_choices * second_digit_choices\n\n    return total_numbers\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    ans = 391 * 7\n    return ans\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # let the smallest even number be x\n    # then the numbers are x, x+2, x+4, x+6, x+8\n    # their sum is 5x + 20 = 200\n    # thus 5x = 200 - 20\n    # so x = (200 - 20) / 5\n    x = (200 - 20) / 5\n    return int(x)\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    # Calculate the terms of the series one by one using a loop\n    term = 100\n    numerator = term\n    denominator = 97\n    ans = 0\n    while denominator > 0:\n        ans += (numerator / denominator)\n        numerator *= (numerator - 1)\n        denominator -= 1\n    return ans\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # The time it takes to make 5 sections is the time to make 4 cuts\n    cuts_needed_for_5_sections = 4\n\n    # Time for one cut is total time divided by cuts needed for 5 sections\n    time_per_cut = 8 / cuts_needed_for_5_sections\n\n    # For 6 sections, we need 5 cuts\n    cuts_needed_for_6_sections = 5\n\n    # Total time for 6 sections is time per cut times number of cuts\n    total_time_for_6_sections = time_per_cut * cuts_needed_for_6_sections\n    \n    return total_time_for_6_sections\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    current_votes_peter = 35\n    half_plus_one = (total_votes // 2) + 1\n    \n    required_votes_peter = half_plus_one - current_votes_peter\n    \n    return required_votes_peter\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume of sugar solution transferred in grams.\n    x = symbols('x')\n\n    # Sugar in container A before transfer:\n    sugar_A = 50 * 0.10\n    # Water in container A before transfer:\n    water_A = 50 - sugar_A\n    \n    # Sugar in container B before transfer:\n    sugar_B = 30 * 0.20\n    # Water in container B before transfer:\n    water_B = 30 - sugar_B\n    \n    # After transferring x grams from A to B:\n    # Sugar concentration in A = (sugar_A - 0.10*x) / (50 - x)\n    # Water in A = 50 - x\n\n    # After transferring x grams from B to A:\n    # Sugar concentration in B = (sugar_B - 0.20*x) / (30 - x)\n    # Water in B = 30 - x\n\n    # Setting the concentrations equal to each other:\n    equation = Eq((sugar_A - 0.10*x) / (50 - x), (sugar_B - 0.20*x) / (30 - x))\n\n    # Solving the equation for x\n    volume_transferred = solve(equation, x)\n\n    return volume_transferred[0]\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(boys + girls, 995)\n    equation2 = Eq(girls, boys - 7)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    numbers = [31, 32]\n    max_units = max(numbers, key=lambda x: x % 10)\n    return max_units\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    discount = 189\n    percentage_reduction = (discount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    # total_amount is in pence (since the coins are in pence)\n    total_amount = 490  # ï¿¡4.90 converted to pence\n\n    # Looking for number_of_coins for each type of coin where:\n    # 5 * number_of_coins + 10 * number_of_coins + 20 * number_of_coins = total_amount\n    # Since there is an equal number of each coin, simplify using \"total_coins\" for each type:\n    # 5 * total_coins + 10 * total_coins + 20 * total_coins = total_amount\n\n    # Simplify the equation further:\n    # (5 + 10 + 20) * total_coins = total_amount\n    # 35 * total_coins = total_amount\n    # total_coins = total_amount / 35\n\n    # Since the number of coins must be an integer, we use integer division\n    total_coins_each = total_amount // 35\n\n    # The total number of coins is three times the number for one type, as there are three types\n    total_coins = total_coins_each * 3\n\n    return total_coins\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_amount_cents = 28 * 100  # Convert dollars to cents\n    gift_cost_cents = 20 * 100  # Convert dollars to cents\n    remaining_cents = initial_amount_cents - gift_cost_cents\n    return remaining_cents\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    total_days = 9\n    total_sweets = 135\n    difference = 3\n\n    # Using the formula for the sum of an arithmetic series: n/2 * (2a + (n-1)d) = S\n    # where n is the number of terms, a is the first term, d is the common difference and S is the sum of the series.\n    # We have S, d, and n, and we need to find a.\n\n    # Rearrange the formula to find the first term a:\n    # a = (2S/n - (n - 1)d) / 2\n\n    first_term = (2 * total_sweets / total_days - (total_days - 1) * difference) / 2\n\n    # The last term can be found by adding the common difference (n - 1) times to the first term:\n    last_term = first_term + (total_days - 1) * difference\n\n    return int(last_term)\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_money = 100\n    book_cost = 0.10 * initial_money\n    money_left_after_book = initial_money - book_cost\n    dvd_cost = 0.20 * money_left_after_book\n    money_left = money_left_after_book - dvd_cost\n    \n    return money_left\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    interest_rate = 0.06\n    years = 5\n\n    balance = principal * (1 + interest_rate) ** years\n\n    return balance\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    # For 1-9, there are 9 single-digit numbers, using 9 digits in total\n    single_digit_pages = 9\n    # For 10-99, there are 90 two-digit numbers, using 180 digits in total\n    double_digit_pages = 90 * 2\n    # For 100-185, there are 86 three-digit numbers, using 258 digits in total\n    three_digit_pages = (185 - 99) * 3\n    \n    # Total number of digits used is the sum of the above three\n    total_digits = single_digit_pages + double_digit_pages + three_digit_pages\n    return total_digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    raise_percentage = 10 / 100\n    new_annual_salary = annual_salary * (1 + raise_percentage)\n    new_monthly_salary = new_annual_salary / 12\n    \n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4*x - 5 * (4 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for day in range(1, 32):\n        for month in range(1, 13):\n            if month * 31 + day * 12 == 376:\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    # Using the distributive property\n    # 4.08 * 20 = (1.08 + missing_number) * 20\n    # To find the missing_number we can isolate it in the equation\n    # missing_number = (4.08 * 20) - (1.08 * 20)\n    missing_number = (4.08 * 20) / 20 - (1.08 * 20) / 20\n    \n    return missing_number\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    ans = 119 + 117 - 115 + 113 - 111 + 109 - 107 + 105 - 103 + 101 - 99\n    return ans\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n\n    total_cost = price_per_cooker * number_of_cookers\n\n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_ratio = 40\n    milk_ratio = 80\n    available_flour = 25\n\n    required_milk = (milk_ratio / flour_ratio) * available_flour\n\n    return required_milk\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    total_sweets = sweets_taken + sweets_left\n    return total_sweets\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    # Original prices\n    calculator_price = 6  # in pounds\n    protractor_price = 0.30  # 30p in pounds\n    \n    # Discounts\n    calculator_discount = 0.25  # 25% discount\n    protractor_discount = 0.5   # 50% discount\n    \n    # Reduced prices\n    reduced_calculator_price = calculator_price * (1 - calculator_discount)\n    reduced_protractor_price = protractor_price * (1 - protractor_discount)\n    \n    # Number of items bought\n    calculators_bought = 8\n    protractors_bought = 20\n    \n    # Total cost\n    total_cost = (reduced_calculator_price * calculators_bought) + \\\n                 (reduced_protractor_price * protractors_bought)\n    \n    return total_cost\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # The amount of grass is proportional to the number of oxen and the time they take:\n    # 27 oxen * 6 weeks = 23 oxen * 9 weeks\n    # Let's find the amount of grass G in terms of ox-weeks (a constant value):\n    G = 27 * 6  # This could be any multiple of this product, as it represents the same proportion\n\n    # Now we want to find the number of weeks (W) for 21 oxen to eat the grass G\n    # 21 oxen * W weeks = G\n    W = G / 21\n\n    return W\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    \n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let x be the current age of the older elephant\n    # Let y be the number of years from now when the younger elephant reaches the current age of the older elephant\n    # We know that the younger elephant is currently 18 years old\n    # When the younger elephant is x years old, the older elephant will be 62 years old\n    \n    # From the information given, we can set up the following equation:\n    # Current age of younger elephant + y = Current age of older elephant (x)\n    # Current age of older elephant + y = 62\n    \n    # We know the current age of the younger elephant is 18\n    # So, we can set up the system of equations:\n    # 18 + y = x\n    # x + y = 62\n    \n    # Subtract the first equation from the second to find y:\n    # (x + y) - (18 + y) = 62 - 18\n    # x - 18 = 44\n    # y = 44\n    \n    # Substitute y back into the first equation to find x:\n    # 18 + 44 = x\n    x = 18 + 44\n\n    return x\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    result_in_tonnes = 1.194 * (2/3)\n    result_in_kilograms = result_in_tonnes * 1000\n    return result_in_kilograms\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02)**2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    ans = 1440 // 24\n    return ans\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # For placing 5 identical balls into 3 boxes with empty boxes allowed, the number of ways can be calculated\n    # as a problem of distributing n identical items into r different groups which is a combination with repetition\n    # This follows the formula: (n + r - 1)! / (r - 1)!n!\n    from math import factorial\n\n    n = 5  # number of balls\n    r = 3  # number of boxes\n    # Calculate combinations with repetition\n    ways = factorial(n + r - 1) // (factorial(r - 1) * factorial(n))\n    return ways\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, green = symbols('blue red green')\n\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    letters = \"TEENAGE\"\n    letter_count = {letter: letters.count(letter) for letter in set(letters)}\n    total_ways = factorial(len(letters))\n\n    for count in letter_count.values():\n        total_ways //= factorial(count)\n\n    return total_ways\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen's bike ride\n    bike_speed = 10  # miles per hour\n    bike_time = 1  # hour (from 7:30 to 8:30)\n    bike_distance = bike_speed * bike_time\n\n    # Ellen's train ride\n    train_speed = 50  # miles per hour\n    train_time = 2  # hours (from 8:30 to 10:30)\n    train_distance = train_speed * train_time\n\n    # Total distance\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Since Lucas is the 3rd counting from front to back, and 2nd from back to front,\n    # there must be 3 + 2 - 1 = 4 rows.\n    rows = 3 + 2 - 1\n    \n    # Since Lucas is the 4th counting from left to right, and 3rd from right to left,\n    # there must be 4 + 3 - 1 = 6 columns.\n    columns = 4 + 3 - 1\n    \n    # The number of students is the number of rows multiplied by the number of columns.\n    num_students = rows * columns\n    \n    return num_students\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount = 0.25\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    number = 217\n    while sum_of_digits(number) != 9:\n        number += 1\n\n    return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'ew' be the money Ema had initially\n    # Let 'kw' be the money Keng Wee had initially\n    ew, kw = symbols('ew kw')\n\n    # Ema had $360 less than Keng Wee\n    equation1 = Eq(ew, kw - 360)\n\n    # After spending, Ema and Keng Wee had the same amount\n    # Ema spent 1/4 of her money, so she had 3/4 left\n    # Keng Wee spent 4/7 of his money, so he had 3/7 left\n    equation2 = Eq(3/4 * ew, 3/7 * kw)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ew, kw))\n\n    # Extract the amount of money Keng Wee had initially\n    return solutions[kw]\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    one_tenth_of_square = one_fourth_of_36\n    square = one_tenth_of_square * 10\n    return int(square)\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    ans = 6.4 * 2.7\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # The positions of Lucas in the array give us the dimensions of the rectangle.\n    # From front to back: 3rd, and from back to front: 2nd gives us one dimension as 3+2-1 = 4\n    # Lucas was the 4th from left to right and 3rd from right to left gives us the other dimension as 4+3-1 = 6\n    \n    # Now we know the dimensions of the rectangle are 4 rows and 6 columns.\n    num_rows = 3 + 2 - 1\n    num_columns = 4 + 3 - 1\n    \n    # The number of students is the multiplication of the number of rows and columns.\n    num_students = num_rows * num_columns\n    \n    return num_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    g, b = symbols('g b')  # g for girls, b for boys\n\n    # Initial condition: girls = (9/11) * boys\n    equation1 = Eq(g, (9/11) * b)\n    # After transferring: girls + 2 = (10/11) * boys\n    equation2 = Eq(g + 2, (10/11) * b)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Number of students after the transfer is girls + boys\n    num_students = solutions[g] + solutions[b]\n\n    return num_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    return sum(numbers)\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    result = 77.5 * 52 / 100 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1  # For the initial value 1 at the beginning of the series\n    for denominator in range(2, 11):  # Start from 1/2 to 10/10\n        # for each denominator add the sum of fractions from 1/denominator to denominator/denominator\n        # and then back to 1/denominator\n        ans += sum(2 * n / denominator for n in range(1, denominator)) + 1\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(2 * (3 * x - y), 2 * x + 4)\n    ans = solve(equation, (x, y))\n\n    return ans[2*x - y]\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_pence = (3 * 31) + (2 * 17) + 78 + (105)\n    amount_paid_pence = 5 * 100 # Convert pounds to pence\n    change_pence = amount_paid_pence - total_cost_pence\n    return change_pence\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan_current = symbols('zehan_current')\n    zehan_future = zehan_current + 12\n\n    equation = Eq(zehan_future, 3 * zehan_current)\n    solution = solve(equation, zehan_current)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(15, 5)                # Total ways to choose 5 out of 15\n    ways_with_none_of_ABC = comb(12, 5)     # Ways to choose 5 out of 12 (excluding A, B, C)\n    ways_with_ABC = comb(12, 2) * 3         # Ways to choose 2 out of 12 (excluding A, B, C) times 3 (A or B or C)\n    \n    ans = total_ways - ways_with_none_of_ABC + ways_with_ABC\n    return ans\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    decimal_number = 0.36\n    percent = decimal_number * 100\n    return percent\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    number_of_tickets = 7\n    cost_per_ticket = total_cost / number_of_tickets\n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim, tan = symbols('lim tan')\n    equation1 = Eq(lim, 5 * tan)\n    equation2 = Eq(lim + tan, 390)\n\n    solutions = solve((equation1, equation2), (lim, tan))\n\n    return solutions[lim] - solutions[tan]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    return 536 - 11\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    savannah_ratio = 5\n    shaila_sweets = 36\n\n    total_sweets = shaila_sweets * (shaila_ratio + savannah_ratio) / shaila_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_lemon, water = symbols('original_lemon water')\n\n    # initial ratio of lemon juice to water is 2:3\n    equation1 = Eq(original_lemon/water, 2/3)\n\n    # After adding 80ml lemon juice, the ratio becomes 6:5\n    equation2 = Eq((original_lemon + 80)/water, 6/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (original_lemon, water))\n\n    return solutions[original_lemon]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n    return only_french\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for Kim's total savings\n    total_savings = symbols('total_savings')\n\n    # Create equations based on the given problem\n    # 1/3 of total savings given to mother\n    mother_share = total_savings / 3\n    # Money spent on dresses and earrings\n    spent = 177 + 129\n    # Money left is 1/2 of what she gave her mother, so it's 1/3 of the total savings\n    money_left = mother_share / 2\n\n    # The equation representing the situation\n    # Total savings = money given to mother + money spent on dresses and earrings + money left\n    equation = Eq(total_savings, mother_share + spent + money_left)\n\n    # Solve the equation\n    solutions = solve(equation, total_savings)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    # Define the variable for the number we are looking for\n    number = symbols('number')\n    \n    # Apply the operations described:\n    # Add the number to 8\n    # Multiply the sum by 8\n    # Subtract 8 from the product\n    # Divide the difference by 8\n    # The result of these operations must equal 80\n    equation = Eq(((number + 8) * 8 - 8) / 8, 80)\n    \n    # Solve the equation\n    solution = solve(equation, number)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the distance, v be the original speed, and t be the original time.\n    d, v, t = symbols('d v t')\n    \n    # When speed increases by 25%, time decreases by 20 minutes\n    equation1 = Eq(v * 1.25 * (t - 20/60), d)\n    \n    # When speed decreases by 45 meters per minute, time increases by 75%\n    equation2 = Eq((v - 45) * t * 1.75, d)\n    \n    # Equating the two equations for distance\n    equation3 = Eq(v*t, d)\n    \n    # Solve the system of equations for d\n    solutions = solve((equation1, equation2, equation3), (d, v, t))\n    \n    return solutions[d]\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.3  # 30% increase in usual speed\n    delay = 9 / 60  # 9 minutes converted to hours\n    # Distance = Speed * Time\n    # Usual travel time = Increased speed travel time + Delay time\n    # Usual distance = Usual speed * Usual travel time\n    # Increased distance = Increased speed * Increased speed travel time\n    # Since the distances are equal, we equate both expressions and solve for Usual travel time\n    usual_travel_time = delay / (1 - usual_speed/increased_speed)\n    # Compute the distance\n    distance = usual_speed * usual_travel_time\n\n    return distance\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    # calculation done via a hypothesis method substitute for red ropes and blue ropes\n    total_ropes = 10\n    total_length = 26\n\n    # Let us assume all ropes were red\n    all_red_length = 2 * total_ropes\n\n    # Calculate the surplus length when assuming all ropes were red\n    surplus_length = total_length - all_red_length\n\n    # Calculate the number of blue ropes by dividing the surplus by the difference\n    # in length between blue and red ropes\n    blue_ropes = surplus_length // (3 - 2)\n\n    # Calculate the number of red ropes\n    red_ropes = total_ropes - blue_ropes\n\n    return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = 21 / 0.30\n    return P\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    children = 0\n    while True:\n        children += 7\n        if children % 9 == 2:\n            break\n    return children\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    total = 22\n    count = 0\n    for i in range(1, total):\n        if total - i > i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies_fraction = Fraction(1, 7)\n    cookies_fraction = Fraction(1, 14)\n    muffins_fraction = Fraction(1, 2)\n    \n    total_fraction_used = brownies_fraction + cookies_fraction + muffins_fraction\n    \n    return total_fraction_used.simplify()\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    avg_second_half = 65\n    months_second_half = 6\n    total_second_half = avg_second_half * months_second_half\n    total_year = total_first_half + total_second_half\n    months_in_year = 12\n    avg_per_month = total_year / months_in_year\n    return avg_per_month\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    # We know that the smallest factor of any number A is 1\n    # And the greatest factor of A is A itself\n    # So, if the difference between the greatest and smallest factor is 41, then\n    # A - 1 = 41 => A = 41 + 1 => A = 42\n    \n    A = 42\n    \n    # The 7th multiple of A is 7 times A => 7 * 42\n    seventh_multiple = 7 * A\n    \n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n    \n    # Since the ratios give us the relationship of height to width\n    # We find the width by (width / height) = (ratio_width / ratio_height)\n    width = (ratio_width * height) / ratio_height\n    \n    # The perimeter of a rectangle is given by P = 2 * (width + height)\n    perimeter = 2 * (width + height)\n    \n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(1, 1)  # start with the fraction 1/1\n    \n    for i in range(2, 12):\n        result *= Fraction(i, i + 1)  # multiply by each fraction in the sequence\n        \n    return float(result)  # return as a decimal number for better readability\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, 3 * sheena / 5)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    number_of_terms = (last_term - first_term) // 2 + 1\n    sum_of_series = (number_of_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # let x and y be the two numbers such that x > y\n    # According to the problem x - y = 36 (difference between the numbers)\n    # And x + y = 98 (sum of the numbers)\n\n    # Rearranging the equations, we get:\n    # x = y + 36\n    # (y + 36) + y = 98\n    # 2y + 36 = 98\n    # 2y = 98 - 36\n    # 2y = 62\n    # y = 62 / 2\n    y = 62 / 2\n\n    return y\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    # Calculate the result of the provided math expression\n    result = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return result\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Calculate the last digit for each base by taking it to the 100th power\n    last_digit_4 = pow(4, 100, 10)  # Last digit of 4^100\n    last_digit_7 = pow(7, 100, 10)  # Last digit of 7^100\n    last_digit_9 = pow(9, 100, 10)  # Last digit of 9^100\n    last_digit_11 = pow(11, 100, 10)  # Last digit of 11^100, but 11^100 has the same last digit as 1^100\n\n    # Multiply the last digits together and find the last digit of the result\n    last_digit = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_percentage = 0.70\n    marks_per_correct = 3\n    marks_deducted_per_wrong = 1\n\n    correct_answers = total_questions * correct_percentage\n    wrong_answers = total_questions - correct_answers\n    total_marks = (correct_answers * marks_per_correct) - (wrong_answers * marks_deducted_per_wrong)\n    \n    # Since we know the total marks Meng scored and the formula to calculate it, \n    # we can use an equation to solve for the number of correct answers.\n    # total_marks = (correct_answers * marks_per_correct) - ((total_questions - correct_answers) * marks_deducted_per_wrong)\n    # Plugging in the known values gives us:\n    # 78 = (correct_answers * 3) - ((60 - correct_answers) * 1)\n    # Rearrange the equation to solve for correct_answers:\n    # 78 = 3*correct_answers - 60 + correct_answers\n    # 78 + 60 = 4*correct_answers\n    # 138 = 4*correct_answers\n    # correct_answers = 138 / 4\n    \n    correct_answers = (78 + total_questions) / (marks_per_correct + marks_deducted_per_wrong)\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John's and Jessie's initial amounts of money\n    john_initial, jessie_initial = symbols('john_initial jessie_initial')\n\n    # John had 5/13 of the amount of Jessie's money\n    equation1 = Eq(john_initial, (5/13) * jessie_initial)\n\n    # Jessie transferred $600 to John\n    john_final = john_initial + 600\n    jessie_final = jessie_initial - 600\n\n    # John's money became 50% of the amount of Jessie's money\n    equation2 = Eq(john_final, 0.5 * jessie_final)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_initial, jessie_initial))\n\n    # Calculate the total amount of money they had initially\n    total_money_initial = solutions[john_initial] + solutions[jessie_initial]\n\n    return total_money_initial\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Known values from the question\n    cost_of_6_files_and_10_rulers = 40\n    cost_ratio_files_to_rulers = 6 / 10  # Assuming the cost ratio is constant\n\n    # Finding the cost of one file and one ruler based on the given information\n    # Let cost of one file be f and one ruler be r, then\n    # 6f + 10r = 40 (from the given data)\n    # Using the ratio 6:10 we can say cost of one file is to one ruler as 6 is to 10\n    # thus 6*r/cost_ratio_files_to_rulers + 10*r = 40\n    # cost_of_6_files_and_10_rulers = 40\n\n    # Calculate cost of one ruler (r)\n    r = cost_of_6_files_and_10_rulers / (10 + 6 / cost_ratio_files_to_rulers)\n    # Cost of one file (f)\n    f = r * cost_ratio_files_to_rulers\n\n    # Now we need to find the cost of 9 files and 15 rulers\n    # Which is simply 9f + 15r\n    cost_of_9_files_and_15_rulers = 9 * f + 15 * r\n\n    return cost_of_9_files_and_15_rulers\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    # The digits '1' will occupy positions in the numbers from 1 to N.\n    # Since the digit '1' appeared 15 times, we can guess that N spans two digit numbers.\n    # The digit '1' appears once in every 10 numbers as the last digit from 1 to 100.\n    # Also, from 10 to 19, every number has '1' at the beginning. There are 11 '1's in 10-19.\n    \n    # Let's count how many times '1' has been used already up to certain points.\n    times_1_used = 1 * 9      # From 1 to 9, '1' is used once\n    times_1_used += 11 * 1    # From 10 to 19, '1' is used 11 times\n    \n    # The remaining four '1's must be in the tens place of the numbers\n    # since each appears once in the ten's place from 20 to 109.\n    # Therefore, N must be 19 + 4 = 23 (since 20, 21, 22, and 23 have '1' in the tens place).\n    # At this stage, 15 '1's have been used.\n    \n    # Now let's count the digit '2'.\n    # From 1 to 23, '2' is used as follows:\n    times_2_used = 1 * 3  # From 20 to 23, '2' is used three times in the tens place\n    times_2_used += 2     # '2' is used twice in the ones place, in 2 and 22\n    \n    # Now, if N goes into the next ten's digit (30s), '2' will be used 10 more times in the tens place.\n    # We're looking for the total number of times '2' is used to be 14.\n    remaining_2 = 14 - times_2_used\n    N = 23 + remaining_2\n    \n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_format = \"%H:%M\"\n    start_time = datetime.strptime(\"10:30\", time_format)\n    end_time = datetime.strptime(\"11:00\", time_format)\n    \n    time_diff = end_time - start_time\n    return int(time_diff.total_seconds() / 60)  # convert time difference to minutes\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    t_shirts, caps = symbols('t_shirts caps')\n    \n    # Ratio of T-shirts to caps\n    ratio_eq = Eq(t_shirts / caps, 8 / 5)\n    \n    # Sold 1/4 T-shirts and 1/5 caps\n    # Amount collected from selling T-shirts and caps\n    amount_eq = Eq(3 * (t_shirts / 4) + 5 * (caps / 5), 132)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_eq, amount_eq), (t_shirts, caps))\n    \n    # Number of T-shirts at first\n    t_shirts_original = solutions[t_shirts]\n    \n    return t_shirts_original\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    cost_of_bananas = 3 * 12  # pence\n    cost_of_apples = 5 * 11   # pence\n    total_cost_in_pence = cost_of_bananas + cost_of_apples\n    amount_paid_in_pence = 200  # pence, since Â£2 = 200p\n    \n    change_in_pence = amount_paid_in_pence - total_cost_in_pence\n    \n    # Convert pence to pounds and pence\n    pounds = change_in_pence // 100\n    pence = change_in_pence % 100\n    \n    change = pounds + pence / 100  # in pounds\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number_str = '3' * 12  # Create a string of 12 '3's\n    number = int(number_str)  # Convert to an integer\n    remainder = number % 7  # Calculate the remainder when divided by 7\n    return remainder\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_siblings = 7\n    # Since Harvir is the oldest, he is 2 years older than each of his siblings.\n    # We can calculate Harvir's age by adding 2 years for each sibling younger than him.\n    harvir_age = youngest_age + age_difference * (number_of_siblings - 1)\n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n    total_spent = calendar_price + ball_price\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_muffins_kg = 1/5\n    flour_cookies_kg = 1/2\n    flour_left_kg = 360 / 1000  # convert grams to kilograms\n    \n    total_flour_kg = flour_muffins_kg + flour_cookies_kg + flour_left_kg\n    \n    return total_flour_kg\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    orange_price = 26\n    lemon_price = 30\n    total_spent = 500  # Convert to pence\n\n    # Number of oranges and lemons\n    num_oranges, num_lemons = symbols('num_oranges num_lemons', integer=True)\n\n    eq1 = Eq(orange_price * num_oranges + lemon_price * num_lemons, total_spent)\n\n    # Solve for number of oranges and lemons\n    possible_solutions = [(sol[num_oranges], sol[num_lemons]) \n                          for sol in solve((eq1,), (num_oranges, num_lemons))\n                          if sol[num_oranges] >= 0 and sol[num_lemons] >= 0]\n\n    # Calculate the total number of fruits\n    total_fruits = [sum(sol) for sol in possible_solutions]\n\n    return total_fruits[0] if total_fruits else 0\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    people = 4\n    # Since the table is circular, we consider one person to be fixed and arrange the others around them\n    # which is (people - 1)!\n    arrangements = factorial(people - 1)\n    return arrangements\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_eggs = symbols('original_eggs')\n    \n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n    \n    solution = solve(equation, original_eggs)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n\n    def star(a, b):\n        return 3 * a - 2 * b\n\n    result = delta(star(delta(3, 4), 5), 6)\n\n    return result\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = -(-cookies // box_capacity)  # Ceiling division\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of male and female visitors on the first day\n    males, females = symbols('males females')\n    \n    # Given conditions\n    equation1 = Eq(males, females + 450)  # males are 450 more than females on the first day\n    equation2 = Eq(females * 1.15 + males * 0.82, 1354)  # total second day visitors with the increase and decrease in percentage\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (males, females))\n    \n    # Calculate the total number of visitors on the first day\n    total_visitors_first_day = solutions[males] + solutions[females]\n    return total_visitors_first_day\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n    equation1 = Eq(leo - jason, 220)\n    equation2 = Eq(jason, 2 * (leo + 180) - 1100)\n\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # sum of all books\n    # Calculate factorial of total books\n    total_permutations = factorial(total_books)\n    # Since books of the same type are indistinguishable, divide by factorial of each type's count\n    total_permutations /= (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n    \n    return int(total_permutations)\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        if A == 0:\n            continue\n        F = E - D\n        H = C + E\n        G = F + C + B\n        if len(set([A, B, C, D, E, F, G, H])) == 8:\n            EFCBH = 10000*E + 1000*F + 100*C + 10*B + H\n            return EFCBH\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    ways = 0\n    for case1 in range(8):\n        for case2 in range(8 - case1):\n            case3 = 7 - case1 - case2\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_week = 7\n    total_robots = robots_per_day * days_in_week\n    return total_robots\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start_number = 345\n    decrement = 9\n    # The last positive number before passing zero is the remainder\n    # when the start number is divided by the decrement.\n    last_positive_number = start_number % decrement\n    return last_positive_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000  # Total cost of the mansion\n    num_friends = 5         # Number of friends sharing the cost\n\n    cost_per_friend = total_cost / num_friends\n\n    return cost_per_friend\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    # Let x be the number of children who paid Â£10\n    # Let y be the number of children who paid Â£15 to have their name put on the shirts\n    # We have two equations based on the problem statement:\n    # Equation 1: x + y = 50 (total number of children)\n    # Equation 2: 10x + 15y = 555 (total amount paid)\n    \n    # From equation 1: x = 50 - y\n    # Substituting x in equation 2:\n    # 10(50 - y) + 15y = 555\n    # 500 - 10y + 15y = 555\n    # 5y = 555 - 500\n    # 5y = 55\n    # y = 55 / 5\n    y = 55 // 5\n    \n    return y\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    # Let the time walked with increased speed be x minutes\n    # Initial speed: 150 m/min for the first 10 minutes\n    # Increased speed: 150 + 50 = 200 m/min for the next x minutes\n\n    # Total distance travelled: 150*10 + 200*x = 3700\n\n    # Solve for x\n    x = (3700 - 1500) / 200   # minutes walked after speed increase\n    total_time = 10 + x  # Total time including the first 10 minutes\n\n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n\n    # On the first day.\n    equation1 = Eq(male_first_day, female_first_day + 450)\n\n    # On the second day.\n    male_second_day = male_first_day * (1 - 0.18)\n    female_second_day = female_first_day * (1 + 0.15)\n\n    # The total number of visitors on the second day is 1354.\n    equation2 = Eq(male_second_day + female_second_day, 1354)\n\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    # Initialize position to 1 as there will always be at least one student left.\n    position = 1\n    \n    # While there is more than one student in line,\n    # keep multiplying the position by 2 because with each iteration,\n    # every second student (or every student at an odd position) leaves,\n    # effectively multiplying the position of the remaining students by 2.\n    while position * 2 <= 40:\n        position *= 2\n    \n    # Return the position of the last student left\n    return position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Calculate the time difference between Singapore and London when the plane lands.\n    # As Singapore is 7 hours ahead, we subtract 7 hours from the Singapore time when the plane lands.\n    singapore_landing_time = 11 + 7  # Because the clock showed 11:00 in London upon landing\n    \n    # If time is greater than or equal to 24, it implies the next day. \n    if singapore_landing_time >= 24:\n        singapore_landing_time -= 24\n\n    # Calculate the flight duration\n    flight_duration = singapore_landing_time - 5  # Because the plane took off at 05:00 Singapore time\n\n    # If flight duration is negative, it implies the plane landed on the next day\n    if flight_duration < 0:\n        flight_duration += 24\n\n    return flight_duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7 # Total number of cards\n    # Calculate the permutations of all cards\n    total_permutations = factorial(total_cards)\n    # Divide by the permutations of each type of card to get distinct arrangements\n    distinct_arrangements = total_permutations // (factorial(4) * factorial(3) * factorial(7))\n    return distinct_arrangements\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # The smallest multiple of 5\n    second_digit = 1  # The smallest odd number among the natural numbers\n    third_digit = 9  # The largest single-digit odd number\n    fourth_digit = 2  # The smallest even number\n    fifth_digit = 8  # The largest single-digit number that is a multiple of 2\n    sixth_digit = 3  # The smallest odd number greater than 1 in nature\n    seventh_digit = 0  # It must be a multiple of 2 and 5, therefore it's 0\n\n    # Combine all digits to form the final phone number\n    phone_number = (first_digit * 10**6 + second_digit * 10**5 +\n                    third_digit * 10**4 + fourth_digit * 10**3 +\n                    fifth_digit * 10**2 + sixth_digit * 10 +\n                    seventh_digit)\n    return phone_number\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    \n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds = 4 / 9\n    cashew_nuts = 1 / 3\n    difference = almonds - cashew_nuts\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    # Johnny's answer calculation\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Incorrectly multiplies the remainder by the quotient instead of adding it\n    johnny_ans = quotient * 2 + divisor  # Incorrect step\n\n    # Correct calculation: Multiply the quotient by the divisor and add the remainder\n    correct_ans = quotient * divisor + remainder\n\n    # Check if the answer provided by Johnny is correct\n    is_correct = johnny_ans == correct_ans\n\n    # Return the correct answer and a boolean indicating if Johnny's answer was correct\n    return (correct_ans, is_correct)\n\nans, is_correct = solution()  # The correct answer, and a boolean flag for Johnny's correctness"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    # Initial pages read and increase per day\n    first_day_pages = 20\n    increase_per_day = 5\n    last_day_pages = 80\n\n    # Total pages read including the last day\n    # This will form an arithmetic sequence from the first day till the last but one day\n    total_pages = last_day_pages\n\n    # Variable to hold the day count excluding the last day\n    day_count = 0\n\n    # Loop to add the pages read each day excluding the last day\n    while True:\n        total_pages += first_day_pages + increase_per_day * day_count\n        day_count += 1\n        # On the last but one day, Danny should read less than 80 pages\n        # As on the last day, he reads exactly 80 pages\n        if first_day_pages + increase_per_day * day_count >= last_day_pages:\n            break\n\n    return total_pages\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    positive_sum = sum(range(4, 55, 4))  # Sum of numbers being added, from 4 to 54, step by 4\n    negative_sum = sum(range(2, 51, 4))  # Sum of numbers being subtracted, from 2 to 50, step by 4\n    ans = positive_sum - negative_sum\n    return ans\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's say the number of boys is b and the number of girls is g\n    b, g = symbols('b g')\n    \n    # Each boy distributes 4 bags, so the total number of bags distributed by boys is 4*b\n    # Each girl distributes 3 bags, so the total number of bags distributed by girls is 3*g\n    # The boys distributed 62 more bags than the girls: 4*b = 3*g + 62\n    \n    # There are 40 boys and girls: b + g = 40\n    \n    # We now have a system of linear equations:\n    # 4*b - 3*g = 62\n    # b + g = 40\n    equation1 = Eq(4*b - 3*g, 62)\n    equation2 = Eq(b + g, 40)\n    \n    # Using sympy.solve to solve for b and g\n    solutions = solve((equation1, equation2), (b, g))\n    \n    return solutions[b]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # The sequence shows that every number n appears n times.\n    # The total number of terms before the first 11 would be sum of first 10 natural numbers\n    total_terms = sum(range(1, 11))\n    # The median would be the middle number(s) of the sequence\n    # Since the sum of first 10 natural numbers is even, there will be two middle numbers\n    middle_term_index1 = total_terms // 2\n    middle_term_index2 = middle_term_index1 + 1\n    \n    # Find the median values\n    number_at_index1 = 1\n    number_at_index2 = 1\n    term_count = 0\n    for n in range(1, 11):\n        term_count += n\n        if term_count >= middle_term_index1:\n            number_at_index1 = n\n            break\n    for n in range(1, 11):\n        term_count += n\n        if term_count >= middle_term_index2:\n            number_at_index2 = n\n            break\n            \n    # Since we are looking for two middle values, median is their average\n    median = (number_at_index1 + number_at_index2) / 2\n\n    return median\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    # We will try each combination of S, A, M, O, G between 0 and 9\n    # Since they are digits, S cannot be 0 as SASMO is a 5-digit number\n    for S in range(1, 10):\n        for A in range(0, 10):\n            for M in range(0, 10):\n                for O in range(0, 10):\n                    for G in range(0, 10):\n                        # Ensure all digits are unique\n                        if len({S, A, M, O, G}) == 5:\n                            SASMO = int(f\"{S}{A}{S}{M}{O}\")\n                            OGAMS = int(f\"{O}{G}{A}{M}{S}\")\n                            # Check if the multiplication is correct\n                            if SASMO * 4 == OGAMS:\n                                return SASMO\n    return None\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_five = 1 / 6\n\n    expected_number_of_fives = total_rolls * probability_of_five\n\n    return expected_number_of_fives\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    ans = 345 * 4\n    return ans\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    ans = 15 / 0.05\n    return ans\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbol for the part cut from each rope\n    cut_length = symbols('cut_length')\n    \n    # Equation representing the remaining lengths after cutting\n    equation = Eq(65 - cut_length, 3 * (29 - cut_length))\n    \n    # Solve for the cut part's length\n    cut_length_solution = solve(equation, cut_length)\n    \n    return cut_length_solution[0]\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    ans = (12 / 18) * 6\n    return ans\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A/B, 2/3)\n    equation2 = Eq(B/C, 6/5)\n    equation3 = Eq((A + B + C) / 3, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    # Number of dresses and skirts\n    num_dresses = 6\n    num_skirts = 3\n    \n    # Cost per dress (unknown, represented by 'x')\n    # Cost per skirt\n    cost_per_skirt = 35\n    \n    # Total cost spent\n    total_cost = 441\n    \n    # Based on the given information, we can set up an equation:\n    # Total cost = (Number of dresses * Cost per dress) + (Number of skirts * Cost per skirt)\n    # 441 = (6 * 7x) + (3 * 35)\n    # Solve for 'x' which represents the cost of a dress\n\n    # Simplifying the equation\n    cost_dresses = 6 * 7  # this is the coefficient of 'x'\n    cost_skirts = num_skirts * cost_per_skirt  # this is the constant term\n    total_cost_without_skirts = total_cost - cost_skirts  # subtract the skirt cost from the total\n\n    # Solve for 'x'\n    x = total_cost_without_skirts / cost_dresses\n\n    # Return the cost of a dress\n    return x\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    odd_digits = [1, 3, 5, 7, 9]  # All odd digits\n    # Each of the three positions can take any of the 5 odd digits\n    count = len(odd_digits) * len(odd_digits) * len(odd_digits)\n    return count\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2012\n    return k - 1\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    # Let x be the time the lazy one would take to paint the house on his own\n    energetic_rate = 1 / 12  # energetic one paints 1 house in 12 days\n    combined_rate = 1 / 8    # together they paint 1 house in 8 days\n\n    # 1/x is the rate at which the lazy one works\n    # The combined rate is the sum of the individual rates\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(1/x + energetic_rate, combined_rate)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    total = sum(i**2 for i in range(1, 1000, 2))\n    return total % 3\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n    \n    total_sweets = nell_sweets * (nell_ratio + joe_ratio) / nell_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n    \n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the original length and width of the rectangle\n    length, width = symbols('length width')\n    \n    # The increased length is original length + 12\n    increased_length = length + 12\n    \n    # The perimeter of the new rectangle with the increased length\n    increased_perimeter = 2 * increased_length + 2 * width\n    \n    # Equation based on the new perimeter being 38 cm\n    eq_perimeter = Eq(increased_perimeter, 38)\n    \n    # Solve the system of equations to find the length and width\n    solutions = solve((eq_perimeter,), (length, width))\n    \n    # There will be multiple solutions for length and width, but we need just one pair that is reasonable (positive length and width).\n    # Since the problem doesn't give more details, we'll need additional constraints, or we assume one of the values.\n    # For this single variable case, we can't solve for a specific length and width without more information.\n    # However, we know that perimeter of the original rectangle is 2*length + 2*width,\n    # And for the new rectangle, it's 2*(length+12) + 2*width = 38,\n    # Hence, the original rectangle's perimeter is 38 - 2*12.\n\n    original_perimeter = 38 - 2 * 12\n    \n    return original_perimeter\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j and n be the number of stamps Jamie-Anne and Natasha have, respectively.\n    j, n = symbols('j n')\n\n    # According to the problem, we have two equations\n    equation1 = Eq(j, 5/3 * n)  # the ratio 5:3\n    equation2 = Eq(j - n, 18)    # Jamie-Anne has 18 more stamps\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (j, n))\n\n    # Calculate total number of stamps\n    total_stamps = solutions[j] + solutions[n]\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be zero.\n        for b in range(0, 10):\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n\n    # Sana had 8 times as many coins as Mina\n    equation1 = Eq(sana, 8 * mina)\n\n    # After Mina gave away 12 coins\n    equation2 = Eq(sana + (mina - 12), 234)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (sana, mina))\n\n    # Mina's coins after giving away 12\n    mina_left = solutions[mina] - 12\n\n    return mina_left\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    percentage = (15 / (3.00 * 100)) * 100\n    return percentage\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = (3/7) * total_grapes\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = (3/8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    bag_weight = 3/4\n    num_bags = remaining_after_tuesday / bag_weight\n\n    return int(num_bags)\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Each corner flower is counted twice because it is at the end of two sides.\n    # Therefore, we subtract the 4 corner flowers one time from the total count.\n    flowers_per_side = 6\n    total_sides = 4\n    corner_flowers = 4\n\n    total_flowers = (flowers_per_side * total_sides) - (corner_flowers)\n\n    return total_flowers\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n    total_flour = flour_per_student * number_of_students\n    return total_flour\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total items be x\n    # Apples = (2/3)x, Bananas = (1/9)x, Lemons = x - (2/3)x - (1/9)x\n    # Apples (2/3)x = Lemons + 12\n    x = symbols('x')\n    equation = Eq((2/3)*x, x - (2/3)*x - (1/9)*x + 12)\n    total_items = solve(equation, x)\n    \n    # Calculate the number of lemons\n    lemons = total_items[0] - (2/3)*total_items[0] - (1/9)*total_items[0]\n    \n    return lemons\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Uncle Sam cycles past 10 lamp posts in 50 seconds (from the first to the eleventh).\n    posts_in_50_seconds = 10\n    # Find the number of lamp posts per second\n    posts_per_second = posts_in_50_seconds / 50\n    # Calculate the number of lamp posts after 80 seconds\n    posts_in_80_seconds = posts_per_second * 80\n    # Since he starts at the first lamp post, we need to add 1 to the total count.\n    total_posts = int(posts_in_80_seconds) + 1\n    return total_posts\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    additional_length = 56\n    football_field_length = basketball_court_length + additional_length\n    return football_field_length\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    fraction_of_total = 5 / 6\n    total_two_days = first_day + second_day\n\n    total_steering_wheels = total_two_days / fraction_of_total\n\n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price_rina = 60 / (1 - 0.20)\n    discount_ana = original_price_rina - 67.50\n    discount_percentage_ana = (discount_ana / original_price_rina) * 100\n\n    return discount_percentage_ana\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # The digit in the hundreds place is given to have a value of 800, which means it is 8\n    hundreds_digit = 8\n\n    # The digit in the ones place is the sum of all factors of 4 (factors of 4 are 1, 2, and 4)\n    ones_digit = sum([1, 2, 4])\n\n    # The digit in the thousands place is 1 more than the digit in the hundreds place\n    thousands_digit = hundreds_digit + 1\n\n    # The digit in the tens place is the difference between the digit in the hundreds place and the ones place\n    tens_digit = hundreds_digit - ones_digit\n\n    # The digit in the ten-thousands place is between 4 and 5, so it is 4\n    ten_thousands_digit = 4\n\n    # Combining the digits to form the 5-digit number\n    number = (ten_thousands_digit * 10000 +\n              thousands_digit * 1000 +\n              hundreds_digit * 100 +\n              tens_digit * 10 +\n              ones_digit)\n\n    return number\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(12 * x - (7 * x + 9), 1)\n\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "from fractions import Fraction\n\ndef solution():\n    min_difference = float('inf')  # Initialize the minimum difference to a high value.\n    min_s = None  # Placeholder for the smallest s value.\n\n    # Loop over possible s values - as we are looking for the smallest s, we limit to a practical range.\n    for s in range(1, 10000):  # Assuming range within practical computation limits\n        # Compute the lower and upper r values for the current s, based on the fractions given in the problem.\n        lower_r = Fraction(3, 10) * s\n        upper_r = Fraction(5, 16) * s\n\n        # Loop through possible r values that satisfy the condition for the current s.\n        for r in range(int(lower_r) + 1, int(upper_r) + 1):\n            fraction_value = Fraction(r, s)\n\n            # Check if the fraction falls between 3/10 and 5/16.\n            if Fraction(3, 10) < fraction_value < Fraction(5, 16):\n                # If s is smaller than the current smallest value, update min_s.\n                if fraction_value.denominator < min_difference:\n                    min_s = s\n                    min_difference = fraction_value.denominator\n                break  # We found the valid r, no need to keep looping.\n\n    return min_s\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Maximum capacity of the bus in terms of children\n    max_children = 40\n    \n    # Capacity used by 15 children already on the bus\n    capacity_used_by_children = 15\n    \n    # Remaining capacity in terms of children\n    remaining_capacity_in_children = max_children - capacity_used_by_children\n    \n    # Conversion factor from children to adults\n    # It's the ratio of max capacity as children to max capacity as adults\n    children_to_adults_conversion = 40 / 24\n    \n    # Remaining capacity in terms of adults\n    remaining_capacity_in_adults = remaining_capacity_in_children / children_to_adults_conversion\n\n    # Returning the greatest integer (floor) since we cannot have a fraction of an adult\n    return int(remaining_capacity_in_adults)\n\n# Calling the function and storing the answer\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    time_for_2_pancakes = 3\n    total_time = 12\n    \n    pancakes_in_total_time = (total_time / time_for_2_pancakes) * 2\n\n    return int(pancakes_in_total_time)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from math import gcd\n\n    # The smallest number that can be multiplied with 28 to get a perfect square\n    # is the smallest number that will make the prime factors of 28 have even powers.\n\n    # Prime factorize 28: 28 = 2^2 * 7^1\n    # The smallest number that will even out the powers for prime factors to be a square\n    # is the product of the prime factors taken to the difference of half their needed power.\n\n    # For 7^1 (odd power), we need another 7^1 to make it 7^2\n    # Hence the smallest number is 7 (for prime factor 7 having an odd power).\n    smallest_number = 7\n\n    return smallest_number\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    triangle_operation = lambda a, b: (a + 2) / b\n    ans = triangle_operation(8, triangle_operation(6, 4))\n    return ans\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    # According to the Pigeonhole Principle, if n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item.\n    # For this question, we have 35 students and 3 sizes of uniforms.\n    \n    number_of_students = 35\n    number_of_uniform_sizes = 3\n    \n    # Calculating the minimum students wearing the same size, using the Pigeonhole Principle:\n    min_students_same_size = (number_of_students // number_of_uniform_sizes) + 1\n\n    return min_students_same_size\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40\n    total = 120\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the total monthly salary of Mr Krishnan\n    x = symbols('x')\n\n    # Money spent on DVD player\n    dvd_price = 740\n\n    # 3/4 of the remaining salary is spent on television\n    tv_fraction = 3 / 4\n    tv_price = tv_fraction * (x - dvd_price)\n\n    # 1/5 of the salary is left unspent\n    remaining_salary_fraction = 1 / 5\n    remaining_salary = remaining_salary_fraction * x\n\n    # Equation representing the scenario described in problem statement\n    equation = dvd_price + tv_price + remaining_salary - x\n\n    # Solving the equation for x\n    salary = solve(equation, x)\n\n    return salary[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Russell's current age\n    russell_now = symbols('russell_now')\n\n    # Create the equation based on the given information\n    equation = Eq(russell_now + 32, 4 * (russell_now - 16))\n\n    # Solve the equation\n    solution = solve(equation, russell_now)\n\n    # Return Russell's current age\n    return solution[0]\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    # Since 6 is directly opposite to 19, the number of people\n    # spaced in between must be equal on both sides.\n    # This difference is also half the total number of people.\n\n    difference = 19 - 6\n    total_people = difference * 2\n\n    return total_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                pip_number = 1000 * A + 100 * B + 10 * C + A\n                bud_number = 1000 * C + 100 * B + 10 * A + A\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make 1 cut to get 2 pieces\n    # To get 5 pieces, we need to make 4 cuts\n    num_cuts = 5 - 1\n    time_per_cut = 2\n    total_time = num_cuts * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Original number of students in 6A and 6B\n    students_6A, students_6B = symbols('students_6A students_6B')\n\n    # Initial condition equation\n    initial_condition = Eq(students_6A, 4/9 * students_6B)\n\n    # After reshuffling their numbers are equal\n    # students_6A - 3 (went to 6B) + 18 (came from 6B) = students_6B + 3 - 18\n    reshuffled_condition = Eq(students_6A - 3 + 18, students_6B + 3 - 18)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, reshuffled_condition), (students_6A, students_6B))\n\n    return solutions[students_6A]\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    chocolate = 40\n    biscuits_original = 100\n    biscuits_available = 75\n\n    chocolate_needed = (chocolate / biscuits_original) * biscuits_available\n\n    return chocolate_needed\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # Let x be the number of shelves with math books,\n    # and (15 - x) be the number of shelves with spelling books.\n    # Each shelf with math books has 4 math books,\n    # and each shelf with spelling books has 9 spelling books.\n    # Total spelling books is 72.\n\n    # Create equations based on the above information:\n    # 4x + 9(15 - x) = total number of books,\n    # 9(15 - x) = number of spelling books.\n\n    # We know that there are 72 spelling books:\n    # 9(15 - x) = 72,\n    # 135 - 9x = 72.\n\n    # Solving for x gives us:\n    x = (135 - 72) // 9\n\n    # Calculate the number of math books (4 books per shelf with math books):\n    math_books = 4 * x\n\n    return math_books\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    daily_earnings = 90\n    days_in_week = 7\n    weekly_earnings = daily_earnings * days_in_week\n    return weekly_earnings\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Time Jeffrey needs to walk from first to fourth floor\n    time_to_fourth = 6\n    \n    # Floors Jeffrey walks (from 1st to 4th, total floors is 4 - 1 = 3)\n    floors_walked = 4 - 1\n\n    # Time taken per floor\n    time_per_floor = time_to_fourth / floors_walked\n    \n    # Floors Jeffrey needs to walk to reach 10th floor from 1st (10 - 1 = 9 floors)\n    floors_to_tenth = 10 - 1\n\n    # Total time to reach 10th floor\n    time_to_tenth = time_per_floor * floors_to_tenth\n\n    return time_to_tenth\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    for n in range(1, 33):  # Range 1 to 32 because 32 divided by 33 or more will be less than 1\n        if 32 / n == n / 2:\n            return n\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_types = 2\n    sauce_types = 3\n    topping_types = 2\n    \n    total_combinations = pasta_types * sauce_types * topping_types\n    \n    return total_combinations\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - 9*6 - 7*6\n    return ans\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    first_distance = 280\n    first_speed = 7\n    middle_distance = 400\n    middle_speed = 5\n    last_distance = 800 - (first_distance + middle_distance)\n    last_speed = 8\n\n    first_time = first_distance / first_speed\n    middle_time = middle_distance / middle_speed\n    last_time = last_distance / last_speed\n\n    total_time = first_time + middle_time + last_time\n\n    return total_time\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # The 8th student is opposite the 16th in the first game,\n    # which implies there are 16 - 8 = 8 students between them.\n    # To be directly opposite, there must be a total of 8 * 2 = 16 students around the circle initially.\n    \n    initial_students = 16\n\n    # After more students join, the 8th is now opposite the 22nd,\n    # which implies there are 22 - 8 = 14 students between them.\n    # So now, there are 14 * 2 = 28 students in total.\n    \n    new_total_students = 28\n    \n    # Calculate the number of new students that joined.\n    new_students_joined = new_total_students - initial_students\n    \n    return new_students_joined\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial as fact\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n\n    # Using the formula for permutations of multiset: n! / (n1! * n2! * n3! ...)\n    ways = fact(total_cards) // (fact(yellow_cards) * fact(red_cards) * fact(green_cards))\n\n    return ways\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of marbles each person originally had\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Equations representing the marble transactions\n    charlene_to_betsy = charlene - 15\n    betsy_to_anna = betsy + 15 - 8\n    anna_end = anna + 8\n\n    # Ratio after transactions: Anna : Betsy : Charlene = 2 : 5 : 7\n    ratio_eq = Eq(anna_end / betsy_to_anna, 2 / 5) & Eq(betsy_to_anna / charlene_to_betsy, 5 / 7)\n\n    # Total marbles equation\n    total_eq = Eq(anna + betsy + charlene, 168)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, total_eq), (anna, betsy, charlene))\n\n    return solutions[betsy]\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    count = 0\n    # 1-9 each uses 1 digit\n    count += 9\n    # 10-99 each uses 2 digits\n    count += (99 - 10 + 1) * 2\n    # 100-268 each uses 3 digits\n    count += (268 - 100 + 1) * 3\n\n    return count\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lollipops, gum_drops = symbols('lollipops gum_drops')\n\n    ratio_before = Eq(lollipops / gum_drops, 5 / 7)\n    ratio_after = Eq((lollipops + 120) / (gum_drops + 120), 4 / 5)\n\n    solutions = solve((ratio_before, ratio_after), (lollipops, gum_drops))\n\n    total_candy_now = solutions[lollipops] + 120 + solutions[gum_drops] + 120\n\n    return total_candy_now\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    # Dimensions of the white paper in cm\n    length_cm = 136\n    width_cm = 80\n\n    # Calculate the Greatest Common Divisor (GCD) of the two dimensions\n    side_of_square_cm = gcd(length_cm, width_cm)\n\n    # Calculate the number of squares that can be cut\n    num_squares = (length_cm // side_of_square_cm) * (width_cm // side_of_square_cm)\n\n    return num_squares\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    count_by_5 = (201 - 1) // 5\n    count_by_7 = (201 - 1) // 7\n    count_by_5_and_7 = (201 - 1) // (5 * 7)\n\n    ans = count_by_5 + count_by_7 - count_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon', real=True, positive=True)\n\n    # Chris's transactions\n    equation1 = Eq(durian + 2 * pineapple + 3 * watermelon, 440)\n    # Dylan's transactions\n    equation2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    matches = 30\n    # If each team plays each other team twice, we have n * (n-1) matches, where 'n' is the number of teams\n    # We thus need to solve for n in the equation: n * (n - 1) = 2 * matches\n\n    # Rearrange the equation to form a quadratic equation: n^2 - n - 2 * matches = 0\n\n    # We'll use the quadratic formula to solve for n: n = (1 + sqrt(1 + 4 * 2 * matches)) / 2\n\n    # Import the sqrt function from the math module\n    from math import sqrt\n\n    # Calculate the number of teams\n    n = (1 + sqrt(1 + 4 * 2 * matches)) / 2\n\n    return int(n)\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(10):\n        if (i + 135) % 10 == 0:\n            ans = (i + 135) // 10\n            return ans\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1 / 20 + (3 - 0.85) / (5 / 6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let x be the total number of students\n    # According to the problem:\n    # 0.80x students chose Grade A Math\n    # 0.35x students chose Grade B Math\n    # 0.10x students chose neither\n    # x - (0.10x) = students who chose at least one subject\n    # 0.80x + 0.35x = students who chose either or both subjects (without subtracting the overlap)\n    # 75 students chose both subjects\n\n    # Since there are students who chose both subjects, we will be double counting these students when we add the percentages directly.\n    # Therefore, we will subtract the number of students that chose both subjects to avoid double counting:\n    # 0.80x + 0.35x - 75 = x - (0.10x)\n\n    # Solving for x:\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(0.80*x + 0.35*x - 75, x - (0.10*x))\n\n    students = solve(equation, x)\n\n    return students[0]\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2\n    hundreds = 3\n    number = hundreds * 100 + tens * 10 + ones\n    return number\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    # Initialize count to zero\n    count = 0\n    \n    # Three nested loops to iterate through each position of the three-digit number\n    for hundreds in [4, 5, 7]:\n        for tens in [4, 5, 7]:\n            for units in [4, 5, 7]:\n                # Check if the units place is odd\n                if units % 2 != 0:\n                    # If yes, increment the count\n                    count += 1\n                    \n    # Return the final count\n    return count\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial as f\n    ans = f(100) / (f(99) + f(98))\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frank, alex, paul = symbols('frank alex paul')\n\n    equation1 = Eq(frank - alex, alex - paul)\n    equation2 = Eq(frank + alex + paul, 99)\n\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    return solutions[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 4, 6, 9]\n    all_numbers = [''.join(p) for p in permutations(map(str, digits))]\n    all_numbers_ints = [int(number) for number in all_numbers]\n    average = sum(all_numbers_ints) / len(all_numbers_ints)\n    return average\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "def solution():\n    from itertools import combinations\n    from sympy import factorint\n\n    # List of all numbers\n    all_numbers = list(range(1, 14))\n\n    # Function to find number of factors for an integer n\n    def num_factors(n):\n        factors = factorint(n)\n        count = 1\n        for exp in factors.values():\n            count *= (exp + 1)\n        return count\n\n    # Generate all possible combinations of 9 numbers\n    comb = combinations(all_numbers, 9)\n\n    for nums in comb:\n        # Calculate the product of factors for the combination\n        factors_count = [num_factors(n) for n in nums]\n\n        # Find unique factor counts\n        unique_factors = set(factors_count)\n\n        # Two students raised their hands, hence we need exactly 2 unique counts\n        if len(unique_factors) == len(factors_count) - 2:\n\n            # Alice sees 8 numbers, if she sees 1, she would know her number isn't 1.\n            # So Alice's number can't be in nums. \n            # Same for any prime number since she would know her number is 1 or that prime number.\n            possible_alice_nums = [n for n in all_numbers if num_factors(n) > 2]\n\n            for alice_num in possible_alice_nums:\n                if alice_num in nums:\n                    # Check if May's conditions are satisfied\n                    may_num = alice_num - 2\n                    if may_num in nums and may_num - 1 not in nums:\n                        # The four numbers not in nums are the answer\n                        not_picked = [n for n in all_numbers if n not in nums]\n                        return not_picked[0] * not_picked[1] * not_picked[2] * not_picked[3]\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys, girls)\n    equation2 = Eq(girls - 12, 2 * (boys - 60))\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for digit1 in range(9, 0, -1):  # The greatest 1-digit number for the hundreds place\n        for digit2 in range(0, 10):  # Possible digit for the tens place\n            for digit3 in range(0, 10, 2):  # Possible even digit for the ones place\n                if (digit1 != digit2 and digit1 != digit3 and digit2 != digit3 and\n                        digit2 + digit3 == 15):\n                    return int(f\"{digit1}{digit2}{digit3}\")  # Combine the digits to form the number\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n    min_trips = (students - 1) // (boat_capacity - 1) * 2 + 1\n\n    return min_trips\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    van_speed = 80  # km per hour\n    car_speed = 120  # km per hour\n\n    # The van has a 3-hour head start, so it is 240 km ahead (80 km/h * 3 h)\n    head_start_distance = van_speed * 3\n\n    # Relative speed at which the car is catching up to the van\n    catch_up_speed = car_speed - van_speed\n\n    # Time it takes for the car to catch up to the van\n    catch_up_time = head_start_distance / catch_up_speed\n\n    return catch_up_time\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "from itertools import combinations\n\ndef solution():\n    hats = 4\n    shirts = 3\n    pants = 2\n    skirt = 1\n\n    # Hats are optional, so she can choose to wear 0 to 4 hats.\n    # Shirts, pants and skirt are mandatory, one of each must be selected.\n    total_combinations = 0\n    for i in range(hats + 1):  # +1 to include the option of wearing no hat\n        total_combinations += combinations(hats, i) * combinations(shirts, 1) * combinations(pants, 1) * combinations(skirt, 1)\n    \n    return total_combinations\n\n# Helper function to calculate combinations directly using factorial\ndef combinations(n, r):\n    return factorial(n) // (factorial(r) * factorial(n - r))\n\n# Helper function to calculate factorial of a given number\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    # 3 bowls of water fill 1 jug, hence 1 bowl of water fills 1/3 of a jug.\n    bowl_to_jug_ratio = 1/3\n    \n    # 2 jugs of water fill 1 pail, hence 1 jug of water fills 1/2 of a pail.\n    jug_to_pail_ratio = 1/2\n    \n    # The number of bowls of water needed to fill 1 pail is the product of the\n    # ratios bowl_to_jug_ratio and jug_to_pail_ratio.\n    bowls_to_fill_pail = bowl_to_jug_ratio * jug_to_pail_ratio\n    \n    # As we know from the ratio, this is 1/3 of a jug times 1 pail per 2 jugs,\n    # which means we need 1/(1/3 * 1/2) bowls to fill one pail.\n    # That simplifies to 1/(1/6) = 6.\n    \n    return 1 / bowls_to_fill_pail\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    from sympy import Rational\n\n    # Recurring decimal 0.0101... is equal to 1/99\n    repetend = Rational(1, 99) * Rational(1, 99)\n\n    # Resultant repetend's denominator will determine the repetend length\n    repetend_length = len(str(repetend.q)) - 1\n\n    return repetend_length\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    ans = 72 * 43\n    return ans\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Number of minutes in half an hour\n    minutes = 30\n    \n    # Rate of Printer A (pages per minute)\n    rate_A = 300 / 12\n    \n    # Rate of Printer B (pages per minute)\n    rate_B = 300 / 10\n    \n    # Combined rate of Printer A and B\n    combined_rate = rate_A + rate_B\n    \n    # Total pages printed in half an hour\n    total_pages = combined_rate * minutes\n    \n    return int(total_pages)\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items', positive=True, integer=True)\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n\n    equation = Eq(apples - lemons, 12)\n    total_items_solution = solve(equation, total_items)\n\n    lemons_bought = lemons.subs(total_items, total_items_solution[0])\n\n    return lemons_bought\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # There will only be one cube at each corner of the cuboid \n    # that has three faces painted.\n    # Since it's a cuboid, it has 8 corners.\n    # Therefore, the total number of small cubes with three painted faces is 8.\n    return 8\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    durian, chocolate, strawberry = symbols('durian chocolate strawberry')\n    \n    # Create equations based on the given information\n    equation1 = Eq(durian / chocolate, 3 / 4)\n    equation2 = Eq(chocolate / strawberry, 4 / 2)\n    equation3 = Eq(5*durian + 3*chocolate + 4*strawberry, 560)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (durian, chocolate, strawberry))\n\n    # Calculate the amount collected from durian puffs\n    amount_durian = 5 * solutions[durian]\n\n    return amount_durian\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check if the (day, month) is a valid date in 2019\n            try:\n                if month == 2 and (day == 30 or day == 31):\n                    continue\n                if month in [4, 6, 9, 11] and day == 31:\n                    continue\n                \n                date_str = \"{:02d}/{:02d}/2019\".format(day, month)\n                count += date_str.count('3')\n            except ValueError:\n                pass\n    return count\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens_digit in range(1, 10):  # The tens digit cannot be 0 in a two-digit number.\n        for ones_digit in range(10):  # The ones digit can be 0-9.\n            original_number = tens_digit * 10 + ones_digit\n            swapped_number = ones_digit * 10 + tens_digit\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate_first_period = 1.06\n    rate_second_period = 1.08\n    \n    # Calculate amount after first three years\n    amount_after_three_years = principal * (rate_first_period ** 3)\n    \n    # Calculate final amount after the last two years\n    final_amount = amount_after_three_years * (rate_second_period ** 2)\n    \n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roll, donut = symbols('roll donut')\n\n    equation1 = Eq(5 * roll + 6 * donut, 14.70)\n    equation2 = Eq(roll, 3 * donut)\n\n    solutions = solve((equation1, equation2), (roll, donut))\n\n    return solutions[roll]\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "from math import gcd\n\ndef solution():\n    students_school1 = 24\n    students_school2 = 36\n    students_school3 = 42\n\n    # Find GCD of the three numbers\n    gcd_pair_1_2 = gcd(students_school1, students_school2)\n    gcd_all = gcd(gcd_pair_1_2, students_school3)\n\n    return gcd_all\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds_digit in range(1, 10):\n        for tens_digit in range(1, 10):\n            for units_digit in range(1, 10):\n                if hundreds_digit % tens_digit == 0 and hundreds_digit % units_digit == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a1, d = symbols('a1 d')\n    sum_9 = Eq(((2 * a1 + 8 * d) * 9) / 2, 99)  # Sum of first 9 terms of arithmetic sequence\n    sum_27 = Eq(((2 * a1 + 26 * d) * 27) / 2, 540)  # Sum of first 27 terms of arithmetic sequence\n\n    solutions = solve((sum_9, sum_27), (a1, d))\n\n    a1 = solutions[a1]\n    d = solutions[d]\n\n    # Sum of first 16 terms\n    sum_16 = ((2 * a1 + 15 * d) * 16) / 2\n    return sum_16\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the costs\n    notebook_cost, pencil_case_cost, eraser_cost = symbols('notebook_cost pencil_case_cost eraser_cost')\n\n    # Set up the equations based on the problem statement\n    eq1 = Eq(3 * notebook_cost + 4 * pencil_case_cost + 5 * eraser_cost, 50)\n    eq2 = Eq(notebook_cost + pencil_case_cost, 6)\n    eq3 = Eq(pencil_case_cost + eraser_cost, 9)\n\n    # Solve the system of equations\n    solved_values = solve((eq1, eq2, eq3), (notebook_cost, pencil_case_cost, eraser_cost))\n\n    # Extract the cost of a pencil case from the solutions\n    pencil_case_cost_value = solved_values[pencil_case_cost]\n\n    return pencil_case_cost_value\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D, Zachary, Yvonne, Xavier, Waylon = symbols('A B C D Zachary Yvonne Xavier Waylon', integer=True)\n    constraints = [\n        # A stays in a unit higher than C but lower than D\n        (A > C, A < D),\n        # B stays in a unit that is lower than Xavier's unit\n        (B < Xavier,),\n        # D stays in an unit that is 5 times Yvonne's unit\n        (D == 5 * Yvonne,),\n        # If Zachary moves up two levels the difference between his and Waylon's and his and Xavier's is the same\n        (Zachary + 2 - Xavier == Zachary + 2 - Waylon,),\n        # The level Zachary stays is the sum of the level Yvonne and Xavier stay\n        (Zachary == Yvonne + Xavier,),\n        # All levels are between 1 and 18, and are unique\n        (A > 0, A <= 18, B > 0, B <= 18, C > 0, C <= 18, D > 0, D <= 18,\n         Zachary > 0, Zachary <= 18, Yvonne > 0, Yvonne <= 18,\n         Xavier > 0, Xavier <= 18, Waylon > 0, Waylon <= 18),\n        (A != B, A != C, A != D, B != C, B != D, C != D,\n         Zachary != Yvonne, Zachary != Xavier, Zachary != Waylon,\n         Yvonne != Xavier, Yvonne != Waylon, Xavier != Waylon)\n    ]\n\n    # Merge tuples and convert pairs of inequalities to actual constraints\n    merged_constraints = []\n    for constraint in constraints:\n        merged_constraints.extend(constraint)\n    solutions = solve(merged_constraints)\n\n    # Filter solutions with unique values for A, B, C, D, and ensure they are in 1-18 range\n    for sol in solutions:\n        levels = [sol[A], sol[B], sol[C], sol[D]]\n        if len(set(levels)) == 4 and all(1 <= level <= 18 for level in levels):\n            return sol[A]\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    numbers_written = sum(range(1, 13)) # Calculate how many numbers in total will be written\n    middle_index = numbers_written // 2 # Find the middle index for the median\n\n    count = 0\n    for i in range(1, 13):\n        count += i # Sum up the counts\n        if count >= middle_index:\n            return i # Return the current number as the median\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 8]\n    all_possible_numbers = list(permutations(digits))\n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    cups_needed_for_24_loafs = 24 / loafs_per_cup\n    return cups_needed_for_24_loafs\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    \n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    count = 0\n    for number in range(7, 41):\n        count += len(str(number))\n    return count\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    from math import gcd\n\n    # Calculate the Least Common Multiple (LCM) of the two flashing rates\n    lcm = (4 * 6) // gcd(4, 6)\n    \n    # The lights flash together every 'lcm/60' minutes\n    # Multiply by 60 to convert to per hour, and add 1 for the first time\n    flashes_per_hour = (60 // (lcm // 60)) + 1\n    \n    return flashes_per_hour\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = int(0.40 * total_paintings)  # 40% of the paintings are landscapes\n    still_lifes = total_paintings - landscapes\n    french_landscapes = 25\n    french_paintings = 40\n    non_french_landscapes = landscapes - french_landscapes\n    non_french_still_lifes = french_paintings - french_landscapes\n    non_french_still_lifes = still_lifes - non_french_still_lifes\n\n    return non_french_still_lifes\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Calculate the number of games in the group stage\n    teams_per_group = 4\n    games_per_group = teams_per_group * (teams_per_group - 1) // 2  # Round-robin tournament within group\n    total_groups = 8\n    group_stage_games = games_per_group * total_groups\n    \n    # Calculate the number of games in the knockout round\n    rounds = [\"top_16\", \"top_8\", \"top_4\", \"top_2\", \"third_place\"]\n    knockout_games = sum(2 ** (4 - i) for i in range(len(rounds)))  # 16 -> 8 -> 4 -> 2 -> 1 (third place match)\n\n    # Total number of games\n    total_games = group_stage_games + knockout_games\n    \n    return total_games\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of the rose drink\n    max_volume_per_glass = total_volume // 9  # Maximum volume that can be poured into each glass equally\n\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Let the number be x\n    # According to the problem,\n    # 3 * x + 1 = 22\n    \n    # Now, we perform inverse operations to find x\n    x = (22 - 1) / 3\n    \n    return x\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_sec = 300\n    time_min = time_sec / 60\n\n    distance = speed_m_per_min * time_min\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    weight_mix1 = 100\n    concentration_mix1 = 50 / 100\n    \n    weight_mix2 = 400\n    concentration_mix2 = 80 / 100\n    \n    total_weight = weight_mix1 + weight_mix2\n    total_rice = (weight_mix1 * concentration_mix1) + (weight_mix2 * concentration_mix2)\n    \n    concentration_new_mix = (total_rice / total_weight) * 100\n    \n    return concentration_new_mix\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    total_hay = 12 * 15  # Total hay is enough for 12 horses for 15 days\n    days_for_20_horses = total_hay / 20  # How many days will this total hay last for 20 horses\n    \n    return days_for_20_horses\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    sum_last_five = 0\n    current_number = 0\n\n    # Iterate through each term of the sequence\n    for _ in range(2017):\n        current_number = current_number * 10 + 2\n        sum_last_five = (sum_last_five + current_number) % 100000  # Keep only the last five digits\n\n    return sum_last_five\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    # Iterate over all 4-digit numbers\n    for num in range(1000, 10000):\n        # Convert to string to manipulate digits\n        num_str = str(num)\n        # Move the first digit to the end of the string\n        new_num_str = num_str[1:] + num_str[0]\n        # Convert back to integer\n        new_num = int(new_num_str)\n        # Check if the new number is bigger by 4707\n        if new_num - num == 4707:\n            return num\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_to_one = min(numbers, key=lambda x: abs(x - 1))\n    return closest_to_one\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age = 8\n    mother_age = 4 * sandra_age\n    difference = (mother_age - 2) - (sandra_age - 2)\n    return difference\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Oliver's current age\n    oliver_age_now = 20\n    # Lin's current age\n    lin_age_now = 26\n    # Target sum of their ages\n    target_sum_age = 48\n\n    # Let x be the number of years later when their ages will sum up to 48\n    # Oliver's age in x years = oliver_age_now + x\n    # Lin's age in x years = lin_age_now + x\n    # Their ages' sum in x years = oliver_age_now + x + lin_age_now + x = target_sum_age\n    # Simplify the equation: 2x + oliver_age_now + lin_age_now = target_sum_age\n    # Solve for x: x = (target_sum_age - oliver_age_now - lin_age_now) / 2\n    x = (target_sum_age - oliver_age_now - lin_age_now) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    leap_years = len([year for year in range(1904, 2000, 4)])\n    normal_years = 99 - leap_years\n    days = (leap_years * 366) + (normal_years * 365)\n    return days\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 3 != 0 and number % 7 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    # We are looking for a number that is a multiple of 35, ends with '35' and the sum of its digits is 35.\n\n    # Start checking from the smallest possible candidate, which is 100+35=135, because we need the number to\n    # end with '35' and we also need to be at least 3-digits long since the sum of its digits needs to be 35.\n    multiple = 135  \n    while True:\n        if str(multiple).endswith('35'):\n            # Check if the digits sum to 35.\n            if sum(int(digit) for digit in str(multiple)) == 35:\n                return multiple\n        multiple += 35  # Increase by the next multiple of 35\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    total_money = 8 * y\n    watch_cost = 4 * y\n    handbag_cost = 20\n    each_child_received = y - 5\n    \n    # Total money spent on children\n    money_spent_on_children = 2 * each_child_received\n    \n    # Equation for total money spent (watch + handbag + children)\n    equation = Eq(watch_cost + handbag_cost + money_spent_on_children, total_money)\n\n    # Solve the equation for y\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    daily_change = 10 - 8\n    number_of_cycles = 15 // 2\n    last_day_amount = 10 if 15 % 2 != 0 else -8\n    total_amount = 100 + (daily_change * number_of_cycles) + last_day_amount\n    return total_amount\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    ans = 5.6 * 2.4\n    return ans\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n    \n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    # In 12 hours, the clock strikes 1 time at 1 o'clock, 2 times at 2 o'clock and so on until 12 times at 12 o'clock.\n    # This forms an arithmetic sequence with a first term of 1, a last term of 12, and a common difference of 1.\n    first_term = 1\n    last_term = 12\n    num_terms = 12  # Since there are 12 hours in the sequence\n\n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    total_strikes = num_terms / 2 * (first_term + last_term)\n\n    return int(total_strikes)\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_pence = 40  # total value in pence\n    number_of_coins = total_pence / 10  # the number of ten-pence coins\n\n    total_weight = weight_per_coin * number_of_coins  # total weight of all coins\n\n    return total_weight\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_sum = 1 + 4\n    adults = total_people * (1 / ratio_sum)\n    return int(adults)\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    james, nina = symbols('james nina')\n\n    # Nina has more buttons than James\n    equation1 = Eq(nina, james + 4)\n\n    # When Nina gave 4 of her buttons to James, then they have the same number of buttons\n    equation2 = Eq(james + 4, nina - 4)\n\n    # The total number of buttons that James and Nina have is 22\n    equation3 = Eq(james + nina, 22)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    starting_seat = 3\n    num_children = 9\n\n    # Since the children are numbered from 1 to 9, we subtract 1 to work with zero-based indexing\n    last_child_seat = (total_candies + starting_seat - 1) % num_children\n\n    # We add 1 to convert back to one-based indexing\n    if last_child_seat == 0:\n        last_child_seat = num_children\n\n    return last_child_seat\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    initial_speed = 10  # initial speed of the box in m/s\n    angle_degrees = 37  # angle of the ramp in degrees\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Convert the angle to radians for calculation\n    angle_radians = math.radians(angle_degrees)\n\n    # Use the formula for motion without friction to calculate height\n    # Formula: h = v^2 * sin^2(angle) / (2 * g)\n    # where v is the initial velocity, g is the acceleration due to gravity,\n    # and angle is the angle of the ramp.\n    height = initial_speed**2 * math.sin(angle_radians)**2 / (2 * g)\n    \n    # Calculate the distance along the ramp\n    # The distance d can be calculated using the height and the angle of the ramp\n    # Using the relationship: height = d * sin(angle),\n    # solving for d gives us d = height / sin(angle)\n    distance = height / math.sin(angle_radians)\n    \n    return height, distance\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    return sum(numbers)\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r be the mass of one racket and b be the mass of one ball.\n    r, b = symbols('r b')\n    \n    # Equation 1: One racket + three balls = 536g\n    equation1 = Eq(r + 3*b, 536)\n    # Equation 2: Two rackets + three balls = 904g\n    equation2 = Eq(2*r + 3*b, 904)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, b))\n    \n    # We want the mass of one racket\n    return solutions[r]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    correct = symbols('correct')\n\n    # Each correct answer gives 5 marks, each wrong answer reduces 2 marks.\n    # Let's assume all the questions answered by Valerie were correct first.\n    # Then for each incorrect answer, instead of getting 5 marks, she loses 2 marks, making a 7-mark difference.\n    total_questions = 6\n    total_marks = 23\n\n    # Equation: 5 * correct - 2 * (total_questions - correct) = total_marks\n    equation = Eq(5 * correct - 2 * (total_questions - correct), total_marks)\n\n    # Solve the equation to find the number of correct answers\n    correct_answers = solve(equation, correct)\n\n    return correct_answers[0]  # Return the number of correct answers as an integer\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    num_players = 64\n    players_in_match = 4\n\n    num_matches = (num_players - 1) // (players_in_match - 1)\n\n    return num_matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # The worst case scenario is that Sheila takes out balls in such a way that she avoids\n    # getting the 4 balls of the same color until it becomes unavoidable due to Pigeonhole Principle.\n    # First, she takes all 5 blue balls.\n    balls_taken = 5\n    \n    # Next, she can take 3 orange balls, avoiding the 4th.\n    balls_taken += 3\n    \n    # Then, she can take both yellow balls, avoiding making a set of 4 of any color.\n    balls_taken += 2\n\n    # At this point, no matter what Sheila takes out next, since she has already\n    # taken 3 orange balls, the next ball of any color will give her 4 balls of that same color.\n    # So, she takes one more to get either 4 blue or 4 orange balls.\n    balls_taken += 1\n\n    # She now has one set of 4 balls of the same color. Next, she will take from the remaining colors.\n    # There are now 3 orange balls and 2 yellow balls left.\n\n    # She needs to take all 3 remaining orange balls to try and avoid a second set of 4.\n    balls_taken += 3\n\n    # Then, she will be forced to take a yellow ball next, because she has no choice left.\n    balls_taken += 1  # This gives her 4 orange balls, thus achieving the requirement\n                      # for two groups of 4 balls of the same color.\n\n    return balls_taken\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    num_bags = 4\n\n    flour_weight = (total_weight - cheese_weight) / num_bags\n\n    return flour_weight\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    # Since the new number is 4707 more than the original,\n    # The change solely indicated by moving the first digit to the end...\n    # ...would be 1000*x - x, where x is the first digit, plus 4707\n    # So, 999*x + 4707 = original number + 4707\n    # We are looking for x such that 999*x + 4707 is a four-digit number\n\n    for x in range(1, 10):  # The first digit cannot be 0 and should be less than 10\n        new_number = 999*x + 4707\n        if 1000 <= new_number < 10000:  # Check if the new number is a 4-digit number\n            original_number = new_number - 4707  # The original number is the new number - 4707\n            if str(original_number)[0] == str(x):  # The first digit of the original should be x\n                return original_number  # If condition satisfies, return the original house number\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assuming we need to take the exchange rate into account, but as the exchange rate is not provided,\n    # we will consider the universal cost of a CD irrespective of exchange rates.\n    \n    # We are assuming that the cost of a CD in St Petersburg is also Â£14 or its equivalent.\n    # Since no exchange rate or price difference is provided, we just return the amount of CDs\n    # Richard can buy given the amount of money he spent.\n    \n    amount_spent = 14  # The amount spent by Richard in pounds\n    cost_per_cd = 14   # The cost of one CD in pounds\n    \n    # Calculate the number of CDs\n    num_cds = amount_spent // cost_per_cd\n\n    return num_cds\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime, primerange\n\n    # The search range can be inferred from the possible answers\n    min_age = 28 - 12  # 12 years back from the smallest age\n    max_age = 84 + 12  # 12 years ahead of the largest age\n    \n    # Check each age for the conditions\n    for age in range(min_age, max_age):\n        if (age - 3)**0.5 % 1 == 0:  # Square number 3 years ago\n            if isprime(age + 1):  # Prime number next year\n                cube_root = (age + 12)**(1/3)\n                if cube_root.is_integer():  # Cube number in 12 years\n                    if age in [28, 39, 52, 84]:\n                        return age\n    return None\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    # define the new operation\n    def vee(a, b):\n        return a * b + a + b\n\n    # define the equation based on the given information\n    def equation(x):\n        return vee(2, vee(x, 4)) - 59\n    \n    # solve for x\n    for x in range(-100, 100):  # Limit the range for practical purposes\n        if equation(x) == 0:\n            return x\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # S_n = n/2 * (a_1 + a_n) and S_n = n/2 * (2 * a_1 + (n - 1) * d)\n    # From the problem, we have:\n    # S_9 = 9/2 * (2 * a_1 + (9 - 1) * d) = 72\n    # S_23 = 23/2 * (2 * a_1 + (23 - 1) * d) = 736\n    # We can create two equations based on these sums and solve for a_1 (first term) and d (common difference)\n\n    # Equation 1: 9/2 * (2 * a_1 + 8 * d) = 72\n    # Equation 2: 23/2 * (2 * a_1 + 22 * d) = 736\n\n    # We solve these two linear equations to find a_1 and d\n    a_1 = symbols('a_1')\n    d = symbols('d')\n    equation1 = Eq(9/2 * (2 * a_1 + 8 * d), 72)\n    equation2 = Eq(23/2 * (2 * a_1 + 22 * d), 736)\n\n    solutions = solve((equation1, equation2), (a_1, d))\n\n    # After determining a_1 and d, we use them to find S_16\n    # S_16 = 16/2 * (2 * a_1 + (16 - 1) * d)\n    a_1_value = solutions[a_1]\n    d_value = solutions[d]\n    S_16 = 16/2 * (2 * a_1_value + (16 - 1) * d_value)\n\n    return S_16\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # ratio of Bernice's speed to Andrew's speed\n    bernice_to_andrew = 5 / 3\n    # ratio of Cassandra's speed to Bernice's speed\n    cassandra_to_bernice = 6 / 10\n    \n    # Find Andrew's level when Cassandra is at level 19\n    # Using cross multiplication with the previously found ratios\n    # Cassandra_to_Bernice = Bernice_to_Andrew\n    # (19 - 10) * X / 3 = (X - 5) * 6 / 10\n    # Solve for X, which is Andrew's level\n    andrew_level = (9 * 3) / (6 / 10 + 1)\n    \n    return int(andrew_level)\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    return 43242 / 100\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    pattern_length = len(pattern)\n    \n    complete_patterns = 43 // pattern_length\n    remaining_digits = 43 % pattern_length\n\n    complete_sum = sum(map(int, pattern)) * complete_patterns\n    partial_sum = sum(map(int, pattern[:remaining_digits]))\n\n    ans = complete_sum + partial_sum\n\n    return ans\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometers = 4.7\n    centimeters_per_kilometer = 100000\n    centimeters = kilometers * centimeters_per_kilometer\n    return centimeters\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz = 30  # minutes\n    total_quizzes = 4\n    total_time_minutes = time_per_quiz * total_quizzes\n    total_time_hours = total_time_minutes / 60\n    \n    return total_time_hours\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages = [4, 7, 12]\n    x = symbols('x')\n    equation = Eq(sum([age + x for age in grandsons_ages]), grandpa_age + x)\n    ans = solve(equation)\n\n    return ans[x]\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chair, table = symbols('chair table')\n    \n    # Equation for the total cost\n    total_cost_eq = Eq(4*table + 9*chair, 504)\n    # Equation representing the relationship between the cost of each table and chair\n    cost_relation_eq = Eq(table, 3*chair)\n    \n    # Solving the system of equations\n    solutions = solve((total_cost_eq, cost_relation_eq), (chair,table))\n    \n    # Returning the cost of each chair\n    return solutions[chair]\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert the 40 minutes into hours to match the unit of the speeds\n    time_shared = 40 / 60  # convert minutes to hours\n    speed_shafur = 54\n    speed_samuel = 66\n\n    # Distance covered by both during the time they traveled together\n    distance_shared_shafur = speed_shafur * time_shared\n    distance_shared_samuel = speed_samuel * time_shared  # this will be doubled because he drives the same distance back\n\n    # After Samuel turns back, Shafur continues to travel for the same distance Samuel covers two times\n    # at this time, Shafur's distance will represent the total distance between towns X and Y\n    distance_remaining_shafur = distance_shared_samuel * 2  # Samuel drives back and then to town Y\n    total_distance_shafur = distance_shared_shafur + distance_remaining_shafur\n\n    return total_distance_shafur\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for num_fives in range(9):  \n        for num_tens in range(5): \n            if num_fives * 5 + num_tens * 10 == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    n = 1  # Because we start counting from the first term\n\n    while first_term >= 0:\n        first_term += difference\n        if first_term >= 0:\n            n += 1\n\n    return n\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for number in range(100, 1000):\n        digits_product = 1\n        for digit in str(number):\n            digits_product *= int(digit)\n        if digits_product >= 100 and digits_product <= 999:\n            return number\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    vase_capacity = 9\n\n    num_vases = (flowers + vase_capacity - 1) // vase_capacity\n\n    return num_vases\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    return 100 / 40\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning = 416\n    afternoon = 248\n    difference = morning - afternoon\n    return difference\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    ans = lcm(12, 15)\n    return ans\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 + 2) // 3 * 3  # Find the first multiple of 3 that is >= 38\n    last_multiple = 81 // 3 * 3  # Find the last multiple of 3 that is <= 81\n\n    # Calculate the number of multiples of 3 in the range\n    num_multiples = (last_multiple - first_multiple) // 3 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Taking out 2 chips of each color to ensure getting 2 of different colors.\n    # Bart takes 2 red, then 2 yellow.\n    # Now, he is sure to get a brown one in the next draw.\n    # Total = 2 red + 2 yellow + 1 brown = 5\n    return 2 + 2 + 1\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Calculate the sum of the first part of the sequence up to 10\n    first_half_sum = sum(range(3, 11))  # 3 to 10 inclusive\n    \n    # Calculate the sum of the second part of the sequence starting from 10 again\n    second_half_sum = sum(range(11, 7, -1))  # 10 to 6 inclusive\n    \n    # Add the two parts together\n    total_sum = first_half_sum + second_half_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip, bud + 50)\n    equation2 = Eq((1 - 0.8) * pip / (1 - 3/4) * bud, 6/5)\n    \n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    from fractions import Fraction\n\n    # First expression evaluation\n    numerator_1 = Fraction(7, -10) / Fraction(-10, 3)  # 7 / -3.3Ì = 7 / (-10/3) = 7 * (-3/10)\n    denominator_1 = Fraction(-27, 1000).root(3)  # cube root of -0.027 = (-27/1000)^(1/3)\n    expression_1 = numerator_1 / denominator_1\n\n    # Second expression evaluation\n    numerator_2 = Fraction(2**3) / 4**2  # 2^3 / 4^2 = 8 / 16\n    denominator_2 = Fraction(125, 1000) * (Fraction(18, 10) - (Fraction(2, 10) * 7))  # 0.125 * (1.8 - (0.2 * 7))\n    expression_2 = numerator_2 / denominator_2\n\n    # Third expression evaluation\n    repeating_fraction = Fraction(1, 999)  # since 0.001 = 1/999\n    expression_3_part_1 = Fraction(1, 10) / repeating_fraction  # 0.1 / 0.1Ì4Ì2Ì8Ì5Ì7Ì\n    expression_3_part_2 = 2 * Fraction(3, 10)  # 2 * 0.3\n    expression_3 = -(expression_3_part_1 + expression_3_part_2)\n\n    # Final expression\n    ans = float(expression_1 + expression_2 + expression_3)\n\n    return ans\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    num_people = 5\n    games_played = num_people - 1\n    \n    return games_played\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    # Find the original number based on the given fraction 3/7\n    original_number = (18 * 7) / 3\n\n    # Calculate 5/6 of the original number\n    result = (original_number * 5) / 6\n\n    return result\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    # Let x be the original number of mobile phones \n    # After January, the remaining phones: x/2 - 22\n    # After February, sold 13 more than half of the remaining: (x/2 - 22)/2 - 13\n    # They had 78 mobile phones left: ((x/2 - 22)/2 - 13) = 78\n    # Inverse the operations step-by-step to find the original number of phones\n    phones_left_after_feb = 78 + 13\n    phones_left_after_jan = 2 * phones_left_after_feb\n    original_phones = 2 * (phones_left_after_jan + 22)\n    \n    return original_phones\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    # Let the number of pencils be x\n    # Then, the number of pens will be x + 50\n    # The total will then be x + (x + 50)\n    # We set up the equation: 2x + 50 = 438\n    # And solve for x\n    x = (total_items - more_pens) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    total_spent = (500 * 4) + (300 * 3) + 400 + (300 * 3)\n    average_per_month = total_spent / 12\n    return average_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    apples_from_bud = 16\n\n    total_apples = (boxes * apples_per_box) + apples_from_bud\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_amount_needed = 70 * 4 # Because Mrs Koh wanted to put $70 into each of the 4 red packets\n    amount_short = 15 # Mrs Koh would be short of $15\n\n    amount_mrs_koh_had = total_amount_needed - amount_short\n\n    return amount_mrs_koh_had\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for number in range(4, 23):\n        count += str(number).count('3')\n    return count + 1  # Adding 1 for the '3' digit in number 23\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a one-on-one knockout tournament, every game eliminates one player.\n    # Since there are 5 players, we need to eliminate 4 players to determine the winner.\n    # Hence, there will be 4 games played.\n    return 4\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # Let's denote the total number of shelves as 'n'.\n    # According to the problem:\n    # 8th shelf from front to back = 10th shelf from back to front\n    # This implies: \n    # Front to back count + Back to front count = n + 1 (since we start counting shelves from 1)\n    # Therefore, the position from the front + the position from the back = the total number of shelves + 1\n    position_front = 8\n    position_back = 10\n    \n    # Now we solve for 'n':\n    total_shelves = position_front + position_back - 1\n    \n    return total_shelves\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Counting from the front and back:\n    total_lines_vertical = 7 + 4 - 1  # The minus 1 is because Chris is counted twice\n    # Counting from the left and the right:\n    total_lines_horizontal = 3 + 7 - 1  # The minus 1 is because Chris is counted twice\n\n    # Total number of students is the product of the two dimensions\n    total_students = total_lines_vertical * total_lines_horizontal\n\n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    combined_age_4_years_ago = 10\n    time_passed = 4 + 2\n    combined_future_age = combined_age_4_years_ago + time_passed * 2\n    return combined_future_age\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    # Define variables for the number of marbles they originally had\n    Anna = Symbol('Anna')\n    Betsy = Symbol('Betsy')\n    Charlene = Symbol('Charlene')\n    \n    # Equations based on the problem statement\n    total_marbles = Anna + Betsy + Charlene - 15 + 8  # Adjust for the marbles given and received\n    final_ratio = (Anna + 8) / (Betsy - 8 + 15) / (Charlene - 15)  # The final ratio after exchanges\n    equation1 = total_marbles - 168  # The total should be 168\n    equation2 = final_ratio - 2/5/7  # Ratio of marbles should be 2:5:7\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Anna, Betsy, Charlene))\n    \n    # Betsy's initial amount of marbles\n    ans = solutions[Betsy]\n\n    return ans\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "from sympy import divisors\n\ndef solution():\n    # Prime factorization of 2016\n    factorization = [2, 2, 2, 2, 2, 2, 3, 3, 7]  # 2016 = 2^6 * 3^2 * 7\n\n    # Find all sets of divisors that multiply to 2016 and consist of four numbers all under 10\n    divs = [d for d in divisors(2016) if d < 10]\n    age_combinations = [(i, j, k, 2016 // (i * j * k)) for i in divs for j in divs for k in divs\n                        if i * j * k in divs and i < j < k and 2016 // (i * j * k) < 10 and i * j * k * (2016 // (i * j * k)) == 2016]\n\n    # Calculate the sum of ages for each valid combination\n    sums_of_ages = {sum(ages) for ages in age_combinations}\n\n    # Return the maximum of these sums, which represents the sum of ages of Mary's four children\n    return max(sums_of_ages)\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return ans\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    twelfth_term = 140\n    n = 12\n\n    common_difference = (twelfth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_p = symbols('ten_p')\n\n    twenty_p = 2 * ten_p\n    five_p = ten_p / 2\n    total_value = Eq(5*five_p + 10*ten_p + 20*twenty_p, 1575)\n\n    solutions = solve((total_value,), (ten_p))\n\n    return solutions[ten_p] * 2\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining = 60\n    fraction_eaten = 3/5\n    original_mass = remaining / (1 - fraction_eaten)\n    return original_mass\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boys and g represent the number of girls\n    b, g = symbols('b g')\n\n    # Creating equations based on the problem statement\n    # Each boy has as many sisters as brothers, b - 1 = g\n    # Each girl has half as many sisters as brothers, g - 1 = (b / 2)\n    equation1 = Eq(b - 1, g)\n    equation2 = Eq(g - 1, b / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Since the number of children must be an integer, we only look at integer solutions\n    b_value = solutions[b]\n    g_value = solutions[g]\n\n    # Total number of children is the sum of the number of boys and girls\n    total_children = b_value + g_value\n\n    return total_children\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Declare the symbol x for the speed\n\n    # Distance travelled in each interval\n    distance_first_30 = x * (30 / 60)\n    distance_second_30 = (x - 20) * (30 / 60)\n    distance_last_30 = (x + 10) * (30 / 60)\n\n    # Total distance equation\n    total_distance_eq = Eq(distance_first_30 + distance_second_30 + distance_last_30, 70)\n\n    # Solve for x\n    speed_x = solve(total_distance_eq, x)\n\n    return speed_x[0]  # Return the first (and only) solution\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # Assuming the current year is 2023\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    common_difference = 11 - 5  # difference between the second and the first term\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n-1)d\n    # where a_n is the nth term, a_1 is the first term, d is the common difference, and n is the number of terms\n    # Here we solve for n: 131 = 5 + (n-1)*6\n\n    num_students = (last_term - first_term) // common_difference + 1\n\n    return num_students\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    num = 96\n    base = 6\n    if num == 0:\n        return \"0\"\n    \n    digits = []\n    \n    while num:\n        digits.append(str(num % base))\n        num //= base\n    \n    digits.reverse()\n    ans = ''.join(digits)\n    return ans\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    # Start with minimum distribution such that each child gets different number of apples\n    # We start by giving each child the least number of apples, i.e., 1, 2, 3, ..., k\n    # We need to find the least number of apples the kid with the most can get given the total number\n    # of apples and that each kid must have more apples than the previous.\n    \n    # Let's distribute apples starting with the child who gets the least\n    min_apples = 1  # the least a child can get\n    total_children = 5\n    total_apples = 27\n    \n    # Sum of the minimum apples first 4 children could get\n    apples_distributed = sum(range(min_apples, min_apples + total_children - 1))  # 1+2+3+4 = 10\n    \n    # Remaining apples for the 5th child\n    fifth_child_apples = total_apples - apples_distributed\n    \n    return fifth_child_apples\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50  # cost of meal per person\n    number_of_people = 6  # number of people\n    \n    total_cost = total_cost_per_person * number_of_people  # total cost of meal for all people\n    tip_percentage = 0.10  # 10% tip\n    total_tip = total_cost * tip_percentage  # total tip amount\n    \n    total_payment = total_cost + total_tip  # total payment including tip\n    paid_amount = 50  # amount paid with a Â£50 note\n    \n    change = paid_amount - total_payment  # change to receive from the Â£50 note\n    \n    return round(change, 2)  # round the change to 2 decimal places\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    depth = 10\n    climb = 4\n    slide = 2\n    progress_per_day = climb - slide\n    total_progress = 0\n    day = 0\n    \n    while total_progress < depth - climb:\n        total_progress += progress_per_day\n        day += 1\n        \n    day += 1\n    \n    return day\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    return 953 + 1065\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    # Find the sum of the arithmetic series S = 5 + 10 + 15 + ... + 5n\n    # This can be rewritten as S = 5 * (1 + 2 + 3 + ... + n)\n    # The sum of the first n positive integers is n(n+1)/2\n    # Therefore, S = 5 * n * (n+1) / 2\n    # We need to find the smallest n such that S is divisible by 2013\n    # This means 5 * n * (n+1) / 2 is divisible by 2013\n    # Being divisible by 2013 implies that S / 2013 has a remainder of 0\n\n    max_divisor = 2013\n\n    # Check divisible by 2013 starting from the smallest n\n    n = 1\n    while True:\n        sum_series = 5 * n * (n + 1) // 2\n        if sum_series % max_divisor == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    probability = 1 - 0.9 * 0.9  # Not being in the first two bars\n    return probability\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # Start by taking out 1 marble; if he can't ensure victory, increment until he can\n    for first_move in range(1, 4):\n        # As long as Jason can leave a multiple of 4 marbles to Belinda, he can guarantee a win.\n        # Since they can only take 1-3 marbles per turn, any time Belinda takes N marbles\n        # Jason can take (4 - N) marbles to leave a multiple of 4 again to Belinda.\n        # So the target is to leave 25, 21, 17, 13, 9, 5, or 1 marble to Belinda\n        # Which means Jason should leave 24, 20, 16, 12, 8, 4 marbles at the end of his turn.\n        if (26 - first_move) % 4 == 0:\n            return first_move\n    return 0  # If no such move can guarantee a win (though not possible in this game)\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    # Generate all combinations of 7 natural numbers (1-24 inclusive)\n    # that sum to 25, with each number appearing only once\n    all_combinations = list(combinations(range(1, 25), 7))\n    valid_combinations = [comb for comb in all_combinations if sum(comb) == 25]\n\n    # Return the count and the valid combinations\n    return len(valid_combinations), valid_combinations\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths = 18\n    # Find the full number\n    full_number = (7 * three_sevenths) / 3\n    # Now find 5/6th of the same number\n    five_sixths = (5 * full_number) / 6\n    return five_sixths\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # Assuming the year is 2023\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%d%m%Y')\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    volunteers, trees = symbols('volunteers trees')\n    \n    # If each volunteer plants 4 trees, 5 trees will be left.\n    equation1 = Eq(volunteers * 4 + 5, trees)\n    \n    # If each of them plants 7 trees, one volunteer will have nothing to plant.\n    equation2 = Eq((volunteers - 1) * 7, trees)\n    \n    solutions = solve((equation1, equation2), (volunteers, trees))\n\n    return solutions\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of pencils and markers\n    pencil, marker = symbols('pencil marker')\n\n    # Equation for cost of 3 pencils and 2 markers\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n\n    # Equation for cost of 2 pencils and 3 markers\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    # Calculate the total cost of 7 pencils and 7 markers\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    missing_number = (10 * 21) / 14\n    return missing_number\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stickers in Bag A at first, y in Bag B at first\n    x, y = symbols('x y')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(x + y, 270)              # Total stickers is 270\n    equation2 = Eq((y + 56) / (x - 56), 3/2) # Ratio after moving stickers is 3:2\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the number of stickers in Bag A at first\n    return solutions[x]\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    total_diff = 55\n    total_students = 0\n\n    # Starting with a square of side 1 (which would be all boys if we have at least one student)\n    # and increasing the size of the square incrementally.\n    side_length = 1  # initial side length of the square\n\n    while True:\n        boys = side_length * side_length  # Boys count as a full square\n        # Girls are in a square with two less rows and columns than the boys\n        girls = (side_length - 2) ** 2 if side_length > 1 else 0\n        diff = boys - girls\n\n        # Check if the calculated difference matches the target difference\n        if diff == total_diff:\n            total_students = boys + girls\n            break\n        else:\n            # Move to the next square size\n            side_length += 1\n\n    return total_students\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    difference = 6\n    last_term = 41\n    next_term = last_term + difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets_needed = (children // bars_per_packet) + (children % bars_per_packet > 0)\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 0.05 * 180\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    ans = (30 - 28) + (26 - 24) + (22 - 20) + (18 - 16) + 14\n    return ans\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(number):\n        return sum([i for i in range(1, number) if number % i == 0])\n\n    number = 1  # Starting from the smallest positive integer\n    while True:\n        if sum_of_factors(number) == number:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    \n    boxes_needed = total_cakes // cakes_per_box + (total_cakes % cakes_per_box > 0)\n    \n    return boxes_needed\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let x be the amount of grass (in cow-week units) available at the beginning of the period\n    # and y be the weekly growth of the grass (in cow-week units).\n    \n    # 120 cows eat up the grass in 12 weeks.\n    # So, the total amount of grass eaten by 120 cows in 12 weeks is 120 * 12 = 1440 cow-weeks.\n    # This can be represented by the equation: x + 12y = 1440\n    \n    # 150 cows eat up the grass in 8 weeks.\n    # So, the total amount of grass eaten by 150 cows in 8 weeks is 150 * 8 = 1200 cow-weeks.\n    # This can be represented by the equation: x + 8y = 1200\n    \n    # We can solve these two equations to find the values of x and y.\n    \n    # Subtract the second equation from the first to find y:\n    # (x + 12y) - (x + 8y) = 1440 - 1200\n    # 4y = 240\n    y = 240 / 4  # y = 60 (cow-week units of grass growth per week)\n    \n    # Substitute the value of y in the second equation to find x:\n    # x + 8y = 1200\n    x = 1200 - (8 * 60)  # x = 1200 - 480\n    x = 720  # x = 720 (the initial amount of grass in cow-week units)\n    \n    # Now, we need to find out how many cows can the pasture sustain for 6 weeks.\n    # Let z be the number of cows the pasture can sustain for 6 weeks.\n    # The total amount of grass consumed by these cows in 6 weeks will be 6z.\n    # According to Newton's problem of Cows and Fields, this amount should equal to the sum of the initial grass and the grass grown over 6 weeks:\n    # x + 6y = 6z\n    # We know x and y, we can solve for z.\n    \n    z = (x + 6 * y) / 6  # z = (720 + 6 * 60) / 6\n    z = (720 + 360) / 6\n    z = 1080 / 6\n    z = 180  # The pasture can sustain 180 cows for 6 weeks.\n    \n    return z\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    last_term = 31\n    n = 10  # the nth term\n    common_difference = 3  # difference between consecutive terms\n\n    first_term = last_term - (n - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_left = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_left // number_of_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    ans = 30 // 2\n    return ans\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n    total_muffins = 3998\n    lovelle_sold = 462\n    makayla_sold_fraction = 2 / 5\n\n    # Lovelle and Makayla had $3998 muffins altogether.\n    equation1 = Eq(lovelle + makayla, total_muffins)\n\n    # After selling their muffins, Lovelle and Makayla had an equal number of muffins left.\n    equation2 = Eq(lovelle - lovelle_sold, makayla - makayla_sold_fraction * makayla)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    number_of_daffodils = 8\n    gap_between_daffodils = 1.1\n\n    return (number_of_daffodils - 1) * gap_between_daffodils + 0.1 # Add extra 0.1 m for the initial daffodil's space, correct to 0.1 m as per given pattern\n  \nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the total amount of money Irene had at first\n    total_money = symbols('total_money')\n\n    # Create equations based on the problem statement\n    equation = Eq((1/4) * total_money + (2/7) * total_money, 225)\n\n    # Solve the equation\n    solutions = solve(equation, total_money)\n\n    # Return the solution which is the total amount of money Irene had at first\n    return solutions[0]\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # Using the Pigeonhole Principle\n    # Need to ensure that we pick the worst-case scenario for the colours with fewer cards\n    # before reaching 10 cards of the same colour.\n\n    cards_to_pick = 9 * 3 + 1  # We pick 9 from each of the first three colors (9 * 3) then 1 more to ensure 10 of one color\n    return cards_to_pick\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    ribbon_length = 87\n    pieces = 30\n\n    length_per_piece = ribbon_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1+1, 9):  # Ensure x2 is greater than x1 to avoid duplicates\n            x3 = 9 - x1 - x2\n            if x3 > x2:  # Ensure x3 is greater than x2 to have distinct numbers\n                count += 1\n    return count\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance_to_market = 48  # in meters\n    walking_speed = 8        # meters per minute\n    minutes_required = distance_to_market / walking_speed\n\n    return minutes_required\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    missing_number = one_fourth_of_16 * 2\n    return missing_number\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_items = 18 + 30 + 18\n    friends_count = 6\n    items_per_friend = total_items // friends_count\n    return items_per_friend\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_ways = 0\n    # Count number of ways to form a group of 4 with at least 1 boy\n    for boys in range(1, 5):  # from 1 to 4 boys\n        girls = 4 - boys  # complementary number of girls to make a group of 4\n        if girls > 5:\n            continue  # cannot have more than 5 girls\n        # Calculate combinations of choosing certain number of boys and girls\n        ways = comb(7, boys) * comb(5, girls)\n        total_ways += ways\n    return total_ways\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    # Let the amount Jane drinks be x\n    # Then Alex drinks 1.5 * x because Alex drinks 50% more than Jane\n    # Combined they drink the entire bottle, which is 150ml\n    # x + 1.5 * x = 150\n  \n    # We can solve for x: \n    # 2.5 * x = 150\n    # x = 150 / 2.5\n    jane_drink = 150 / 2.5\n    # Now we can calculate how much Alex drinks\n    alex_drink = 1.5 * jane_drink\n    return alex_drink\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    bag_cost = 60\n    fraction_remaining_after_book = 1 - 1/4\n    fraction_spent_on_bag = 2/5\n    \n    # Fraction of the original amount spent on the bag\n    fraction_of_original_for_bag = fraction_remaining_after_book * fraction_spent_on_bag\n    \n    original_amount = bag_cost / fraction_of_original_for_bag\n\n    return original_amount\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 242, 2):  # Checking only odd numbers in the range\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    total_trees = 41\n    distance_between_trees = 3\n    distance_between_lamps = 8\n\n    road_length = (total_trees - 1) * distance_between_trees\n    number_of_lamps = (road_length // distance_between_lamps) + 1\n\n    return number_of_lamps\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    digits_per_page = 1\n    total_digits = 0\n    page = 1\n\n    while total_digits < 157:\n        total_digits += digits_per_page\n        if page >= 10 and page < 100:\n            digits_per_page = 2\n        elif page >= 100:\n            digits_per_page = 3\n        if total_digits <= 157:\n            page += 1\n\n    return page - 1\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            price = int(str(i) + \"679\" + str(j))\n            if price % 72 == 0:\n                return price // 72\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # in meters\n    speed = 40  # in meters per second\n\n    time_to_pass = train_length / speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    ans = 208 // 8\n    return ans\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for num in range(10, 100):  # Two-digit numbers range from 10 to 99 inclusive\n        digits_sum = sum(int(digit) for digit in str(num))\n        if digits_sum % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of candies and students\n    candies, students_B = symbols('candies students_B')\n    \n    # Equation 1: If each student in class A gets 4 candies, 20 more candies are needed\n    # Therefore, the total required candies for class A is 4*(2*students_B) + 20 \n    # (since class A has twice the number of students as class B)\n    equation1 = Eq(4 * (2 * students_B) + 20, candies)\n    \n    # Equation 2: If each student in class B gets 6 candies, there are 16 candies left\n    # Therefore, the total available candies for class B is candies - 16\n    equation2 = Eq(6 * students_B, candies - 16)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (candies, students_B))\n    \n    return solutions[candies]\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    for year in range(3):\n        # Each year, there are 3 times as many rabbits as last year\n        initial_rabbits *= 3\n        # Wolves eat half the rabbits' total population every year\n        initial_rabbits //= 2\n    return initial_rabbits\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_savings = 24\n    spent_on_dvd = total_savings / 3\n    remaining_after_dvd = total_savings - spent_on_dvd\n    spent_on_book = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - spent_on_book\n\n    return remaining_after_book\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    target_amount = 12\n    num_washes = (target_amount / amount_per_wash) + 1\n\n    return int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    total_distance = 2  # Sum of the distances\n    time_for_first_mile = 1 / 60  # Time to cover 1 mile at 60 mph (in hours)\n    time_for_second_mile = 1 / 30  # Time to cover 1 mile at 30 mph (in hours)\n    \n    total_time = time_for_first_mile + time_for_second_mile  # Total time for both miles (in hours)\n    average_speed = total_distance / total_time  # Average speed formula: total distance divided by total time\n    \n    return average_speed\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    candies_eaten_first_day = 2\n    days_passed = 4 - 1  # We subtract 1 because we start counting from the second day\n    candies_eaten = candies_eaten_first_day * (2 ** days_passed)\n    return candies_eaten\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for number in range(121, 136):\n        if number % 4 == 0 and number % 6 == 0:\n            return number\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    ans = 901 - 582\n    return ans\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earnings = 70\n    days_worked = 6\n\n    total_earnings = average_daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angle_x, angle_2x = symbols('angle_x angle_2x')\n    right_angle = 90\n\n    equation1 = Eq(angle_x + angle_2x, 180 - right_angle) # Sum of angles in a triangle is 180 degrees\n    equation2 = Eq(angle_2x, 2 * angle_x) # One angle is two times the other\n\n    solutions = solve((equation1, equation2), (angle_x, angle_2x))\n\n    return solutions[angle_2x]\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "from itertools import permutations\n\ndef solution():\n    for p, i, s in permutations(range(10), 3):\n        if p == 0 or s == 0:\n            continue\n        is_value = i * 10 + s\n        pi_value = p * 10 + i\n        if 4 * is_value == pi_value:\n            return pi_value\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy.solvers.diophantine.diophantine import diop_solve\n    from sympy import symbols\n\n    # Let's define 'n' as the natural number we are trying to find\n    n = symbols('n', integer=True)\n\n    # We create the equations based on the information given:\n    # When dividing 290 by n, the remainder is a, so the equation is 290 = n * k + a\n    # When dividing 235 by n, the remainder is a + 2, so the equation is 235 = n * k + (a + 2)\n    # When dividing 200 by n, the remainder is a + 5, so the equation is 200 = n * k + (a + 5)\n    # The remainders when n divides 290 and 235 differ by 2: (290-a) - (235-(a+2)) = n * k\n    # The remainders when n divides 235 and 200 differ by 3: (235-(a+2)) - (200-(a+5)) = n * k\n\n    # By solving these two simplified equations we get:\n    eq1 = 290 - 235 - 2\n    eq2 = 235 - 2 - (200 - 5)\n\n    # This simplifies to:\n    # eq1 = n * k1\n    # eq2 = n * k2\n    # Thus\n    # 55 - 2 = 53 = n * k1\n    # 35 + 2 - 5 = 32 = n * k2\n\n    # Now we need to find a common divisor of 53 and 32 which is greater than 1\n    # The only common divisor is 1, which means that the natural number has to be 53\n    # Because it's the only number greater than 1 that divides both 53 and 32 leaving different remainders\n\n    common_divisor = 53\n\n    return common_divisor\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    mon_to_sat_hours = 3 * 6\n    sunday_hours = 10\n    total_hours = mon_to_sat_hours + sunday_hours\n    average_sunshine = total_hours / 7\n    return average_sunshine\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    # The sum of an arithmetic sequence is given by the formula:\n    # Sum = n/2 * (first_term + last_term)\n    # where n is the number of terms, first_term is the first number in the sequence,\n    # and last_term is the last number in the sequence.\n    # In this case, there are 9 elderly members, so n = 9,\n    # and the sum of their ages is 765.\n    \n    # Given that we have 9 consecutive numbers, we can calculate the average age\n    # (which will be the age of the middle person since the numbers are consecutive\n    # and equally spaced).\n    # The sum of ages divided by the number of members will give the average age,\n    # which is also the age of the middle member.\n    \n    total_sum = 765\n    n = 9\n    average_age = total_sum // n\n\n    # Since the sequence is of consecutive natural numbers,\n    # the middle number will be the average age.\n    \n    return average_age\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    necklace, earring = symbols('necklace earring')\n    \n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + earring, 438)\n    \n    solutions = solve((equation1, equation2), (necklace, earring))\n    \n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_distance = 320\n    trees = 79\n    intervals = trees + 1  # Trees are at each interval, so there is one more interval than trees\n    distance_between_trees = total_distance / intervals\n    return distance_between_trees\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_who_saw_movie = boys * 0.50\n    girls_who_saw_movie = girls * 0.60\n    total_pupils_who_saw_movie = boys_who_saw_movie + girls_who_saw_movie\n    return int(total_pupils_who_saw_movie)\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed\n    walk_time_to_school = 24  # min\n    total_distance = walking_speed * walk_time_to_school\n    \n    half_distance = total_distance / 2\n    \n    walking_time_half = half_distance / walking_speed\n    running_time_half = half_distance / running_speed\n    \n    total_time_half_walk_half_run = walking_time_half + running_time_half\n    \n    return total_time_half_walk_half_run\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n    leftover = total_length % cut_length\n    return leftover\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    # Let x be the original savings Kim had\n    # Kim gave 1/3 of her savings to her mother, so she had 2/3*x left\n    # She then spent 177 + 129 on dresses and earrings, so she had 2/3*x - 177 - 129 left\n    # According to the problem, the amount left, which is 2/3*x - 177 - 129, is equal to 1/2 of what she gave to her mother, which is 1/6 of the original savings x\n    # Hence, we have the equation (2/3*x - 177 - 129) = 1/2 * (1/3*x)\n    \n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((2/3*x - 177 - 129), (1/2 * (1/3*x)))\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    ans = 1 + 3/100\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    teams = 8\n    matches = teams * (teams - 1) / 2\n    return int(matches)\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    result = 0\n    for N in range(1, 2018):  # Since the divisor cannot be greater than 2018\n        if (2018 - 11) % N == 0:\n            result += N\n    return result\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker_per_day = 6\n    total_skirts = 0\n\n    for day in range(1, 10):\n        workers = day\n        total_skirts += workers * skirts_per_worker_per_day\n\n    return total_skirts\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # Using stars and bars method for distributing n identical items into k distinct boxes\n    n = 6  # Number of apples\n    k = 3  # Number of baskets\n\n    # Stars and bars formula for distributing n identical items into k identical boxes: C(n+k-1, k-1)\n    # Here C(n, r) is the binomial coefficient. It calculates the number of ways to choose r items from a set of n items without order and without repetition.\n\n    # In our case, we use n+k-1 identical items which are n apples and k-1 identical dividers (baskets)\n    # Then we choose k-1 dividers from these identical items.\n\n    # Import the factorial function from math module to calculate binomial coefficient\n    from math import factorial\n\n    def binomial_coefficient(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # Calculate the binomial coefficient\n    ways = binomial_coefficient(n + k - 1, k - 1)\n\n    return ways\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    total_animals = 8\n    total_legs = 26\n\n    # Let's assume all animals are chickens with 2 legs each.\n    # Excess legs will then be equal to the number of cows,\n    # since cows have 4 legs, while chickens have 2.\n    chickens = (4 * total_animals - total_legs) // 2\n    return chickens\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    common_difference = 3\n\n    # Helper function to check if a term is in the sequence\n    def isInSequence(term):\n        if (term - first_term) % common_difference == 0:\n            return True\n        else:\n            return False\n\n    # Check each number in the specified range\n    for num in range(30, 61):\n        if isInSequence(num):\n            return num\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    sequence = ''\n    number = 1\n\n    while len(sequence) < 2023:\n        sequence += str(number)\n        number += 1\n\n    return int(sequence[2022])\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    \n    # Class size is total_sweets divided by min_sweets_per_student\n    class_size = total_sweets // min_sweets_per_student\n    \n    return class_size\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n\n    # Income tax equation based on given conditions\n    income_tax_equation = Eq(0.08 * 50000 + (150000 - 50000) * (0.08 + T/100), 15000)\n\n    # Solve for T\n    T_value = solve(income_tax_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    total_score = 66\n    correct_points = 4\n    incorrect_points = -2\n    # He didn't answer one question, so there are total_questions - 1 questions answered\n    for correct in range(total_questions):\n        incorrect = total_questions - 1 - correct\n        score = correct * correct_points + incorrect * incorrect_points\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    days_in_january = 31\n    boys_in_club = 432\n    # According to the Pigeonhole Principle\n    min_boys_per_day = boys_in_club // days_in_january\n    if boys_in_club % days_in_january != 0:\n        min_boys_per_day += 1\n    return min_boys_per_day\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # Since 0 cannot be the first digit of a three-digit number\n    # There are 2 choices for the first digit (2 or 3)\n    first_digit_choices = 2\n    \n    # There are 3 choices for the second digit, as 0 can be used here,\n    # as well as the remaining number that was not used for the first digit.\n    second_digit_choices = 3\n    \n    # There are only 1 choice left for the third digit, which is the\n    # number that hasn't been used yet.\n    third_digit_choices = 1\n    \n    # The total number of different three-digit numbers is the product\n    # of the choices for each digit position.\n    total_numbers = first_digit_choices * second_digit_choices * third_digit_choices\n    \n    return total_numbers\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_car_length = 4\n    number_of_other_cars = 31 - 1\n    distance_between_cars = 5\n    total_distance_between_cars = distance_between_cars * 31\n\n    total_length = first_car_length + (other_car_length * number_of_other_cars) + total_distance_between_cars\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    a7 = 105  # 7th term\n    a8 = 120  # 8th term\n    a9 = 135  # 9th term\n\n    difference = a8 - a7  # common difference\n\n    a100 = a7 + (100 - 7) * difference  # 100th term formula for arithmetic sequence\n    \n    return a100\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given = 23\n    remaining_chocolates = total_chocolates - chocolates_given\n    return remaining_chocolates\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    # Rachel gives Alice 10 pieces, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n    # Both eat 8 pieces, Rachel has 3 times as many as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Total number of pieces of candy originally\n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n    initial_length = current_length / (1 + growth_rate)\n    return initial_length\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    # The ratio of Sarah's share is 3 parts\n    sarah_ratio = 3\n    \n    # Sarah received 12 sweets, which correspond to her ratio part\n    sarah_share = 12\n\n    # Calculate the total number of parts in the ratio 2:3:5\n    total_parts = 2 + 3 + 5\n\n    # Calculate the total number of sweets\n    total_sweets = (sarah_share / sarah_ratio) * total_parts\n\n    return total_sweets\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    biscuits_price_pence = 7 * 73\n    cakes_price_pence = 9 * 113\n    total_price_pence = biscuits_price_pence + cakes_price_pence\n    total_price_pounds = total_price_pence / 100\n    change = 20 - total_price_pounds\n    return round(change, 2)\n    \nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_petrol = week1 + week2 + week3\n\n    return total_petrol\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms\n    return combinations\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from math import factorial\nfrom itertools import permutations\n\ndef count_arrangements(remaining_students, a_position, b_position, c_position):\n    count = 0\n    for perm in permutations(remaining_students):\n        perm = list(perm)\n        # Insert A between B and C\n        b_index = perm.index(b_position)\n        c_index = perm.index(c_position)\n        # Positions for A to be between B and C, without being next to any\n        possible_a_positions = range(b_index+1, c_index) if b_index < c_index else range(c_index+1, b_index)\n        for pos in possible_a_positions:\n            new_perm = perm[:pos] + [a_position] + perm[pos:]\n            count += factorial(len(new_perm) - 3)  # Multiply by the arrangements of D and E anywhere\n    return count\n\ndef solution():\n    total_count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for a_position in students:\n        for b_position in students:\n            if b_position == a_position: # A cannot be in the same position as B\n                continue\n            for c_position in students:\n                if c_position in (a_position, b_position): # A and B cannot be in the same position as C\n                    continue\n                remaining_students = [s for s in students if s not in (a_position, b_position, c_position)]\n                total_count += count_arrangements(remaining_students, a_position, b_position, c_position)\n    return total_count\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('12:40 PM', '%I:%M %p')\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    return departure_time.strftime('%I:%M %p').lstrip('0')\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Lunch finished at 2:50 PM\n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n\n    # Duration before lunch\n    play_duration = timedelta(minutes=10)\n    tv_duration = timedelta(minutes=20)\n    lunch_duration = timedelta(minutes=20)\n\n    # Calculate the time Benson reached home\n    arrival_time = lunch_end_time - (play_duration + tv_duration + lunch_duration)\n\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Sam's and Peter's original number of stickers\n    sam, peter = symbols('sam peter')\n\n    # Peter originally has x stickers, so Sam has x + 40 stickers\n    sam_start = peter + 40\n\n    # Sam gives 20% of his stickers to Peter\n    peter_after_sam_gives = peter + 0.20 * sam_start\n\n    # Peter's sticker count after giving 25% of what he has to Sam\n    sam_after_peter_gives = sam_start - 0.20 * sam_start + 0.25 * peter_after_sam_gives\n\n    # In the end, Sam has 96 stickers more than Peter\n    equation = Eq(sam_after_peter_gives, peter_after_sam_gives + 96)\n\n    # Solve for Peter's original sticker count\n    solution = solve(equation, peter)\n\n    # Return the value of Peter's original sticker count\n    return solution[0]\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    num = 1  # Start from the smallest whole number\n    while True:\n        # Check the remainders for each division\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 1:\n            return num\n        num += 1  # Increment the number and check again\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    ans = 6.5 / 0.5\n    return ans\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    number_of_terms = 14\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_terms = (number_of_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    pages, total_nines = 0, 0\n    while total_nines < 181:\n        pages += 1\n        total_nines += str(pages).count('9')\n    return pages - 1  # Subtract one because we add a page before checking\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from math import factorial\n\ndef solution():\n    # calculate the number of 3-digit numbers\n    # The thousand's place can be chosen in 3 ways (2,1,7), the hundred's\n    # in 3 ways (excluding the one chosen for thousand's) and the ten's\n    # in 2 ways (excluding the two chosen before), and we don't make any selection for unit's\n    num_3_digit = 3 * 3 * 2\n    \n    # calculate the number of 4-digit numbers\n    # The digits can be arranged in 4! ways and since 0 cannot be at the thousand's\n    # we subtract the arrangements where 0 is at the beginning\n    num_4_digit = factorial(4) - factorial(3)\n    \n    # add them together to get the total number\n    return num_3_digit + num_4_digit\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n\n    # He sold 10 more than half of his crystals to Yvonne\n    sold_to_yvonne = (initial_crystals / 2) + 10\n\n    # Then, he mined 20 more crystals\n    after_mining = sold_to_yvonne - ((initial_crystals / 2) + 10) + initial_crystals + 20\n\n    # After that, he sold 14 crystals to Cherlyn.\n    final_crystals = after_mining - 14\n\n    # He has 35 crystals in the end.\n    equation = Eq(final_crystals, 35)\n\n    solution = solve(equation, initial_crystals)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_rabbits = 14\n    pattern_repeat = grey_rabbits // 2  # Each pattern has 2 grey rabbits\n\n    # Number of each type of rabbit based on the repeating pattern\n    black_rabbits = pattern_repeat\n    white_rabbits = 2 * pattern_repeat\n\n    # Total rabbits\n    total_rabbits = black_rabbits + white_rabbits + grey_rabbits\n\n    return total_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "from itertools import permutations\n\ndef solution():\n    numbers = [0, 1, 5, 8]\n    three_digit_numbers = set()\n\n    for perm in permutations(numbers, 3):\n        # Skip permutations that start with 0, as they are not three-digit numbers\n        if perm[0] != 0:\n            num = int(''.join(map(str, perm)))\n            three_digit_numbers.add(num)\n\n    largest_number = max(three_digit_numbers)\n    smallest_number = min(three_digit_numbers)\n    difference = largest_number - smallest_number\n\n    return difference\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n    \n    A, B, C = 12, 15, 18\n    \n    ans = gcd(gcd(A, B), C)\n    \n    return ans\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    \n    return total_age\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1234'\n    even_digits = '24'\n    total_count = 0\n\n    for perm in permutations(digits):\n        if perm[-1] in even_digits:  # checking if the last digit is an even number\n            total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    factors = []\n    for i in range(1, 181):\n        if 180 % i == 0 and i % 9 == 0:\n            factors.append(i)\n    return len(factors)\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n\n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        if (2 + 6 + a + 5 + 3 + 9) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    interest_rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + interest_rate) ** years)\n    \n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    total_price = price_per_box * 12\n    return total_price\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    pounds = 2\n    pence = pounds * 100  # Convert pounds to pence\n    single_price = 12\n    deal_price = 30\n    deal_quantity = 3\n\n    # Calculate how many deals Roma can afford\n    max_deals = pence // deal_price\n    remaining_pence = pence % deal_price\n\n    # Buy additional sweets with the remaining pence\n    additional_sweets = remaining_pence // single_price\n\n    # Total sweets\n    total_sweets = (max_deals * deal_quantity) + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    balls = 10\n    boxes = 7\n\n    count = comb(balls - 1, boxes - 1)\n    \n    return count\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    may_age_future = 10\n    kenny_younger_brother_age_diff = 2\n    kenny_and_brother_future_age_sum = 3 * may_age_future\n\n    kenny_age_future = (kenny_and_brother_future_age_sum + kenny_younger_brother_age_diff) / 2\n    kenny_age_now = kenny_age_future - 10 + 7\n\n    may_age_now = 7\n    kenny_may_age_difference = kenny_age_now - may_age_now\n\n    return kenny_may_age_difference\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the amount of water the tank can hold\n    # If using a 5-litre pail, then x + 4 = 5n (where n is some positive integer)\n    # If using a 3-litre pail, then x = 3m + 4 (where m is some positive integer)\n    # We are searching for the smallest positive integer solution to the system\n    # x + 4 = 5n and x = 3m + 4 which is equivalent to 5n = 3m + 8.\n    \n    n = 1\n    while True:\n        excess_water = 5 * n\n        if (excess_water - 8) % 3 == 0:\n            return excess_water - 4\n        n += 1\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    pipe_length = 305\n    segment_length = 5\n\n    num_pipes = pipe_length // segment_length\n    if pipe_length % segment_length > 0:\n        num_pipes += 1\n    \n    return num_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # Total candies\n    total_candies = 10\n    \n    # Win the game by eating the last candy\n    # If Felix can always ensure that after his turn,\n    # the remaining candies are multiple of 3, he will win.\n    # Because, no matter what John does (eats 1 or 2 candies),\n    # Felix can eat 2 or 1 candies to bring it back to a multiple of 3.\n    \n    # Felix should go first and eat 1 candy, making the total remaining candies 9 (a multiple of 3).\n    # After this, no matter what John eats, Felix can always eat such that total remaining candies\n    # are a multiple of 3.\n    \n    # Strategy for Felix:\n    # 1. Eat 1 candy on the first turn.\n    # 2. If John eats 1 candy, Felix should eat 2 candies.\n    # 3. If John eats 2 candies, Felix should eat 1 candy.\n    # 4. Continue this strategy to ensure the remaining candies are always a multiple of 3.\n    \n    # Yes, Felix needs to go first to ensure victory with the strategy above.\n    return \"Felix should go first and eat 1 candy. Then, depending on what John eats, Felix should eat 2 or 1 candy to keep the remaining candies a multiple of 3.\"\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for number in range(1, 2017):\n        if (number % 2 == 0 and number % 3 == 0) ^ (number % 2 == 0 and number % 4 == 0) ^ (number % 3 == 0 and number % 4 == 0):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count = 0\n    page = 1\n    \n    # Starting page by page count while it's less than or equal 28 occurrences\n    while count < 28:\n        count += str(page).count('3')\n        page += 1\n    \n    # Subtract 1 because we added 1 before checking count\n    return page - 1\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amounts = [(total_amount - lost_coin) / 2 for lost_coin in [50, 20, 10, 5]]\n\n    for lost_coin, brother_amount in zip([50, 20, 10, 5], brother_amounts):\n        if brother_amount in [50, 20, 10, 5]:\n            return lost_coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    averages = [36, 38, 39, 45, 49]\n    total_sum = sum(averages)\n\n    # Calculate the sum of the 4 numbers for each average value\n    sums_of_four = [avg * 4 for avg in averages]\n\n    # Since each number is part of 4 of these sums, the grand total across all 5 sets of 4 numbers\n    # will be 4 times the sum of the 5 original numbers.\n    grand_total = sum(sums_of_four)\n\n    # Determine the sum of the 5 original numbers\n    sum_of_five = grand_total // 4\n\n    # Largest number will be the total sum of 4 numbers minus sum of first 4 smallest numbers\n    larger_number = sum_of_five - total_sum + min(averages)  # Adjusting by adding back the smallest average value\n\n    return larger_number\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55  # Convert 15:55 to minutes past midnight\n    second_bus_time = 16 * 60 + 35  # Convert 16:35 to minutes past midnight\n    \n    time_missed_first_bus = first_bus_time + 4  # 4 minutes late for the first bus\n    \n    wait_time_for_second_bus = second_bus_time - time_missed_first_bus\n    \n    return wait_time_for_second_bus\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    between_trees = 5\n\n    number_of_trees = (road_length // between_trees) + 1\n\n    return number_of_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    lorry_capacity = 8\n    lorries_needed = -(-workers // lorry_capacity)  # Ceiling division\n\n    return lorries_needed\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for boys (b) and girls (g)\n    b, g = symbols('b g')\n\n    # Total number of students\n    total_students = 152\n\n    # Equation representing the total number of students\n    equation_total = Eq(b + g, total_students)\n\n    # Equation after removing 1/11 of boys and 5 girls\n    equation_new = Eq(b - b / 11, g - 5)\n\n    # Solve the system of equations\n    solutions = solve((equation_total, equation_new), (b, g))\n\n    # Original number of boys\n    return solutions[b]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    next_four_days = 20 * 4\n    last_two_days = 60\n\n    total_pages = first_three_days + next_four_days + last_two_days\n\n    return total_pages\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    room = 1\n    students = 0\n    while True:\n        students = 4 * room + 6\n        if (students - 1) % 5 == 0:\n            break\n        room += 1\n\n    return students\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [\n        (3, 4),  # Remainder 3 when divided by 4\n        (3, 5),  # Remainder 3 when divided by 5\n        (3, 9),  # Remainder 3 when divided by 9\n    ]\n\n    # Find the smallest number that satisfies all the congruences\n    num = solve_congruence(*congruences)\n\n    # Ensure the number is a positive three-digit number less than 200\n    while num[0] >= 200:\n        num = (num[0] - num[1], num[1])\n\n    return num[0]\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_weight_g = 15\n    \n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_weight_g\n    \n    return total_weight_g\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    # Since dice are of different colors, the order matters,\n    # so we will consider all permutations of the numbers\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 != dice2 and dice2 != dice3 and dice1 != dice3:\n                    if dice1 + dice2 + dice3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    # ages of Bill and his grandsons\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n\n    # calculate sum of grandsons' ages\n    sum_grandsons = sum(grandsons_ages)\n    \n    # calculate the years required for the sum of grandsons' ages to equal Bill's age\n    years = 0\n    while sum_grandsons < bill_age:\n        # each year, each grandson's age increases by 1, so the sum increases by 3\n        sum_grandsons += 3\n        bill_age += 1\n        years += 1\n\n    return bill_age\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people * (1/3)\n    people_still_at_party = total_people - people_left\n    return people_still_at_party\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_sum_initial = 7 * 9\n    total_sum_after_removal = 6 * 10\n    removed_number = total_sum_initial - total_sum_after_removal\n    return removed_number\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    # Least Common Multiple (LCM) of the train intervals\n    next_arrival_lcm = lcm(15, 12, 8)\n\n    # Since trains from all three towns arrive at 10:00 am, we add the LCM to 10:00 am\n    # to find out the next time they all arrive together.\n    # Convert the total minutes to hours and minutes\n    hours = next_arrival_lcm // 60\n    minutes = next_arrival_lcm % 60\n\n    # Calculate the next arrival time\n    next_hour = 10 + hours\n    next_minute = 0 + minutes\n\n    # The answer should be in 24h format, so we might need to adjust the hour if it's beyond 24 hours\n    if next_hour >= 24:\n        next_hour -= 24\n\n    # Return the next time as a string formatted as 'HH:MM'.\n    ans = f'{next_hour:02d}:{next_minute:02d}'\n\n    return ans\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    wrong_mark = -2\n    total_marks = 79\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + wrong_answers * wrong_mark == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    value = (3999 * 2014.2014 + 3999.3999 * 2014) / 12.0012\n    return value\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # At least one sport (by adding all of them we double count the intersections)\n    at_least_one = swimmers + cyclists + table_tennis_players\n\n    # Since every student at the least plays one sport, we can find the least number of students\n    # playing all three sports by subtracting the total number from the count of students playing\n    # at least one sport.\n    all_three_at_least = at_least_one - total_students\n\n    # However, since this number includes students that could be playing just two of the sports,\n    # the least possible number playing all three is when this excess is maximal; that is, when all\n    # the students not counted in the total_students are playing exactly two sports. This happens\n    # when the number of students playing all three sports is at its minimum.\n    all_three_least = all_three_at_least - (swimmers - 1) - (cyclists - 1) - (table_tennis_players - 1)\n\n    return max(all_three_least, 0)  # In case the least number is negative, the answer is 0.\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_to_pass = 30  # time taken to pass a tree in seconds\n    train_length = 360  # length of the train in meters\n    \n    # Speed is distance/time\n    speed = train_length / time_to_pass  # speed in meters per second\n    \n    # Convert speed from m/s to km/h (1 m/s = 3.6 km/h)\n    speed_kmh = speed * 3.6\n    \n    return speed_kmh\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = distance_per_day - slide_per_night\n\n    # The snail will climb out before sliding down on the day it reaches the top.\n    # We need to check the distance climbed without the final slide.\n    days_taken = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days_taken += 1\n        distance_climbed += distance_per_day\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_per_night\n    \n    return days_taken\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Pigeonhole principle: Draw one more than the total number of all but one color to ensure the fourth color is included.\n    min_marbles = (12 + 9 + 8) - 3 + 1\n    return min_marbles\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    total_numbers = (24 - 10) * 2\n    return total_numbers\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    # Number of choices for each type of restaurant\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n\n    # The total number of different choices Eddie has\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n    return possible_ages[-1]\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    import math\n    lcm = math.lcm(24, 64)\n    return lcm\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    for i in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if 75 % i == 0 and i % 6 == 3:  # Check if it's a factor of 75 and leaves a remainder of 3 when divided by 6\n            return i\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    incorrect_subtrahend = 41\n    incorrect_difference = 50\n    \n    # Little Miss Careless's incorrect minuend calculation:\n    incorrect_minuend = incorrect_subtrahend + incorrect_difference\n\n    # Correct subtrahend value\n    correct_subtrahend = 14\n    \n    # Calculating the correct difference with the correct subtrahend\n    correct_difference = incorrect_minuend - correct_subtrahend\n    \n    return correct_difference\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    count = 0\n    \n    # Count for numbers starting with 3\n    # 3___ -> Options for remaining slots = 5 * 4 * 3 (each slot should have a different number)\n    count += 5 * 4 * 3\n    \n    # Count for numbers starting with 4 (all the numbers are valid, since 4xxx will always be less than 5120)\n    # 4___ -> Options for remaining slots = 5 * 4 * 3\n    count += 5 * 4 * 3\n\n    # To count for numbers starting with 5, we need to consider that the second digit must be 0 or 1\n    # 50__ -> Options for remaining slots = 4 * 3\n    # 51__ -> Options for remaining slots = 4 * 3\n    count += (4 * 3) * 2\n    \n    return count\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2*x - 2), 16)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum([40-38, 36-34, 32-30, 28-26, 24-22])\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters_apples_each = 5\n    four_sisters = 4\n    apples_left = 20\n\n    total_eaten = justin_apples + sisters_apples_each * four_sisters\n    total_apples_before = total_eaten + apples_left\n\n    return total_apples_before\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_stationery_percentage = 20\n    savings_less_food = 6\n\n    # Calculate the money spent on books and stationery\n    books_stationery = (books_stationery_percentage / 100) * pocket_money\n\n    # Let the amount spent on transport be 'x', thus food is '3x' and savings is '3x - 6'\n    # The total expenditure includes books/stationery, transport, food, and savings\n    # 80 = books_stationery + x + 3x + (3x - 6), where x represents transport expenditures\n    # 3x - 6 is savings\n    # Solve for x\n    transport = (pocket_money - books_stationery + 6) / 7\n    \n    # Calculate savings\n    food = 3 * transport\n    savings = food - savings_less_food\n\n    # Calculate the percentage of pocket money that goes to savings\n    savings_percentage = (savings / pocket_money) * 100\n    \n    return round(savings_percentage, 2)\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    return 45.36 + 1.25 + 2.75 + 4.64\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    for n in range(1, 100):\n        if (n + 1) * (n + 1) == n * n + 31:\n            return (n + 1) * (n + 1)\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    return 56 / 21\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbol for interest rate\n    r = symbols('r')\n\n    # The formula for compound interest: A = P*(1 + r)^n\n    # A = amount owed after n years\n    # P = principal amount (initial loan)\n    # r = annual interest rate\n    # n = number of years the money is borrowed for\n    P = 5000\n    A = 7320.5\n    n = 4\n\n    # Setting up the equation\n    equation = Eq(P * (1 + r)**n, A)\n\n    # Solving for the interest rate\n    interest_rate = solve(equation, r)\n\n    # Since we are expecting a positive interest rate we take the positive solution\n    ans = interest_rate[1].evalf()\n\n    return ans\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2 + 6.77 + 8.88\n    b = 6.77 + 8.88 + 6.3\n    c = 6.77 + 8.88\n\n    ans = (a * b) - ((a + 6.3) * c)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n\n    february_saved = total_saved - january_saved - march_saved\n\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original = 176\n    new = 88\n    percent_change = ((original - new) / original) * 100\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_per_picture = 10  # minutes to paint one picture\n    total_time = 80  # one hour and twenty minutes is 80 minutes\n\n    num_pictures = total_time / time_per_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n\n    return seconds_per_minute * minutes\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    ans = 7.3 - 2.64\n    return ans\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    annual_interest_rate = 0.08\n    number_of_years = 4\n\n    # The formula to calculate the present value: P = A / (1 + r)^n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** number_of_years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Total apples\n    total_apples = 30\n    # Number of children excluding Ann\n    children = 5\n    # Each of the other five children should get at least one apple\n    # That means we reserve 5 apples (one for each child), before giving to Ann\n    apples_for_others = children * 1\n    # The largest possible number of apples Ann can get is what remains\n    max_apples_for_Ann = total_apples - apples_for_others\n    return max_apples_for_Ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '6', '7', '8', '9']\n    for perm in permutations(digits):\n        first_number = int(''.join(perm))\n        second_number = 2 * first_number\n        third_number = 4 * first_number\n        all_numbers = str(first_number) + str(second_number) + str(third_number)\n        if len(set(all_numbers)) == 7 and len(all_numbers) == 7:\n            return third_number\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # combinations with pants (shirt-pants-shoes)\n    combos_with_pants = shirts * pants * shoes\n    \n    # combinations with dresses (dress-shoes or dress-heels)\n    combos_with_dresses = dresses * (shoes + heels)\n\n    # total combinations\n    total_combinations = combos_with_pants + combos_with_dresses\n\n    return total_combinations\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of one book and one teddy bear\n    book, teddy_bear = symbols('book teddy_bear')\n\n    # Write the equations based on the given information\n    equation1 = Eq(4*book + 8*teddy_bear, 164)\n    equation2 = Eq(2*book + 3*teddy_bear, 67)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum(sum(1/i for i in range(1, n+1)) for n in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    # Prime factors of M and N are 3 and 5\n    # Highest common factor of M and N is 75 = 3^1 * 5^2\n    # M has 12 factors, and N has 10 factors\n    \n    # If a number x has prime factorization of x = p^a * q^b, where p and q are prime numbers,\n    # The total number of factors of x is given by (a+1) * (b+1)\n    # So, if M has 12 factors, one possibility is M = 3^2 * 5^2 (as 3 * 4 = 12)\n    # Another possibility is M has a prime factor of 5 with a higher power since the HCF only requires minimum condition\n    # And if N has 10 factors, one possibility is N = 3^1 * 5^3 (as 2 * 5 = 10)\n    # Another possibility is N has a prime factor of 3 with higher power\n    # However, the higher power of 5 is taken by M to satisfy the number of factors, and symmetry applies for N and power of 3\n    \n    # Find M by multiplying the highest common factor with the additional factor of 3 to match 12 factors\n    # 3^2 * 5^2 is the HCF * additional 3, which is the least possible value for additional factor to get 12 factors in total for M\n    \n    M = 75 * 3  # 75 already contains 3^1, so we only need to multiply by an additional 3 to make it 3^2\n    # Find N by multiplying the HCF with the additional factor of 5\n    N = 75 * 25  # 75 already contains 5^2, so we only need to multiply by an additional 5^2 to make it 5^3\n\n    # The sum of M and N\n    return M + N\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    # Convert everything to grams for easier calculation\n    total_mass_g = 9 * 1000 + 5  # Convert kg to g and add 5g\n    soil_mass_g = 4 * 1000 + 50  # Convert kg to g and add 50g\n    \n    # Calculate the mass of the pack of sand\n    sand_mass_g = total_mass_g - soil_mass_g\n    \n    # Convert back to kg and g for the difference\n    diff_g = abs(soil_mass_g - sand_mass_g)\n    diff_kg = diff_g // 1000  # Get the integer part for kilograms\n    diff_g = diff_g % 1000    # Get the remainder for grams\n    \n    # Since we need to find the difference, it's the absolute value.\n    ans = (diff_kg, diff_g)  # Return the result as a tuple (kg, g)\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    score_correct = 4\n    score_incorrect = -2\n    total_score = 29\n    \n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * score_correct + incorrect * score_incorrect == total_score:\n            return correct\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    # The total number of buttons that James and Nina have is 22\n    total_buttons_equation = Eq(james + nina, 22)\n    \n    # When Nina gave 4 of her buttons to James, then they have the same number of buttons\n    same_number_of_buttons_equation = Eq(nina - 4, james + 4)\n\n    # Nina has more buttons than James\n    nina_more_buttons_inequality = Eq(nina > james)\n\n    # Solving the system of equations\n    solutions = solve((total_buttons_equation, same_number_of_buttons_equation), (james, nina))\n\n    # Nina's original number of buttons\n    return solutions[nina]\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n    kites_made = total_paper // paper_per_kite\n    return int(kites_made)\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern = \"12345\"\n    pattern_sum = sum(int(digit) for digit in pattern)\n    full_patterns = 52 // len(pattern)\n    remainder = 52 % len(pattern)\n\n    sum_full_patterns = full_patterns * pattern_sum\n    sum_remainder = sum(int(pattern[i]) for i in range(remainder))\n\n    total_sum = sum_full_patterns + sum_remainder\n    return total_sum\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    # Number of intervals will be one less than the number of trees, since there are no trees in front of the school or her house\n    num_intervals = 79 - 1\n\n    # Total length of the road\n    total_length = 320\n\n    # Distance between each tree is total length divided by the number of intervals\n    distance_between_trees = total_length / num_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    total_length = Fraction(10) + Fraction(4, 5)\n    short_rod_length = Fraction(3, 10)\n\n    number_of_short_rods = total_length / short_rod_length\n\n    return number_of_short_rods\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen trades 10 fish for 4 rabbits => 10 fish / 4 rabbits\n    fish_per_rabbit = 10 / 4\n    \n    # Oscar trades 5 rabbits for 6 packs of wheat => 6 wheat / 5 rabbits\n    # To find fish per wheat, we have to invert the 5 rabbits / 6 wheat to get wheat per rabbit\n    wheat_per_rabbit = 6 / 5\n    \n    # Find number of fish per pack of wheat by multiplying\n    # (fish per rabbit) * (wheat per rabbit)\n    fish_per_wheat = fish_per_rabbit * wheat_per_rabbit\n    \n    # Dennis requires 12 packs of wheat, so calculate fish needed for 12 packs\n    fish_needed = fish_per_wheat * 12\n    \n    return fish_needed\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_price = 149.99\n    deal_price_for_30 = 2800\n    number_of_laptops = 20\n    \n    normal_price_for_20 = single_laptop_price * number_of_laptops\n    unit_price_in_deal = deal_price_for_30 / 30\n    deal_price_for_20 = unit_price_in_deal * number_of_laptops\n    \n    savings = normal_price_for_20 - deal_price_for_20\n    \n    return savings\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    total_earnings = hourly_rate * hours_worked\n    return total_earnings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "def solution():\n    from math import factorial\n\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    def arrangements(s, d):\n        return nCr(s - 1, d - 1)\n\n    # We place the 4 dancing performances first with spaces between them: D _ D _ D _ D\n    # We need to distribute the 6 singing performances in the 5 slots (denoted by underscores).\n    # We need at least 1 singing performance between the dancing ones, reducing the number of singing performances to 3.\n    # These 3 singing performances need to be distributed in the 5 slots.\n\n    # Calculate the total number of different arrangements\n    total_ways = arrangements(6 - 3 + 5, 5)\n\n    return total_ways\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the number of penguins\n    p = symbols('p')\n\n    # If 3 fish are given to each of the penguins, there will be 5 fish left\n    # fish_count = 3*p + 5\n\n    # If 4 fish are given to each of the penguins, 15 more fish are needed\n    # fish_count = 4*p - 15\n\n    # Since the amount of fish is fixed, the two expressions for fish_count must be equal\n    equation = Eq(3*p + 5, 4*p - 15)\n\n    # Solving the equation for p\n    solution = solve(equation, p)\n\n    return solution[0]\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    number_subtracted = -14 + 26\n    correct_number = number_subtracted + 26 + 26\n    return correct_number\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height * ratio_kelly) / ratio_matthew\n\n    return kelly_height\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    for home_ht in range(4):  # Half time goals for home cannot exceed final goals\n        for away_ht in range(3):  # Half time goals for away cannot exceed final goals\n            # Half time goals cannot be more than final score\n            if home_ht <= 3 and away_ht <=2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n    cards_lost = original_cards * fraction_lost\n    return cards_lost\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percentage = 35\n    total = 80\n\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "def solution():\n    from math import comb\n    ans = comb(6, 2)\n    return ans\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 as it is the first digit of a two-digit number\n        for b in range(10): # 'b' can range from 0 to 9\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    clara, emma = symbols('clara emma')\n    equation = Eq(clara, 5 * emma)\n    total_cookies = Eq(clara + emma, 1002)\n    \n    solutions = solve((equation, total_cookies), (clara, emma))\n    \n    return solutions[emma]\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    return 85 / 100 * 400\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    # When the basket is half full, it includes the weight of the empty basket.\n    # Let the weight of the empty basket be 'empty_weight'.\n    # The weight of the mangoes when the basket is half full is 'half_full_weight - empty_weight'.\n    # When the basket is full, it is twice the weight of the mangoes when the basket is half full plus the weight of the empty basket.\n    # So we have: full_weight = 2 * (half_full_weight - empty_weight) + empty_weight\n    # Simplifying the equation gives us: empty_weight = 2 * half_full_weight - full_weight\n    empty_weight = 2 * half_full_weight - full_weight\n    return empty_weight\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5) + 3.2 * (x - 2), 2.5 * x + 3 * (2.5 - x))\n    x_value = solve(equation, x)[0]\n\n    return x_value\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for the number of girls and boys\n    g, b = symbols('g b')\n    \n    # Since an equal number of boys and girls cannot swim\n    non_swimming_boys = b * (2/5)\n    non_swimming_girls = g * (5/8)\n\n    # Equation based on the provided information\n    equation = Eq(non_swimming_boys, non_swimming_girls)\n    \n    # There are 20 pupils who cannot swim, which is the sum of non-swimming boys and girls\n    total_non_swimmers = Eq(non_swimming_boys + non_swimming_girls, 20)\n    \n    # Solving the two equations to find the number of boys and girls\n    solutions = solve((equation, total_non_swimmers), (g, b))\n    \n    # Total number of pupils\n    total_pupils = solutions[g] + solutions[b]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    product = 6 * 5\n    percent_of_40 = (product / 40) * 100\n    return percent_of_40\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    bud_sweets = 16\n    pip_fraction = 3 / 5\n    total_sweets = bud_sweets / (1 - pip_fraction)\n    return int(total_sweets)\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Initialize the answer variable\n    ans = 0\n    # Since the arrangement is a rectangle, we iterate over possible row and column counts\n    for rows in range(1, 100):  # Upper limit is arbitrary, as real classrooms won't have 100 rows or columns\n        for cols in range(1, 100):\n            # Mike is the 2nd in line no matter the direction, so there must be at least 2 rows and 2 columns\n            if rows > 1 and cols > 1:\n                # The total number of students is the number of desks\n                total_students = rows * cols\n                # Mike's position in terms of rows and columns is (2, x) or (x, 2)\n                # The possible positions for Mike are then:\n                # (2, 1), (1, 2), (2, cols), (rows, 2)\n                # These positions also count from the opposite direction\n                # since it forms the same rectangle, e.g. (2, 1) is same as (rows-1, cols)\n                # So, Mike could only be in one of 4 specific desks that are essentially the \"2nd in line\"\n                # Therefore, the rectangle must be 2x2\n                if total_students == 4:  \n                    ans = total_students\n                    return ans\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    cost_per_cup = 30 / 3\n    total_cost_for_5_cups = cost_per_cup * 5\n    return total_cost_for_5_cups\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    return 5 * 57 * 4\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    daily_earnings = 60\n    days_in_week = 7\n\n    total_earnings = daily_earnings * days_in_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        ans += (-1)**(i+1) * i**2\n    return ans\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    ways = [0] * (6 + 1)\n    ways[0], ways[1], ways[2] = 1, 1, 2\n\n    for i in range(3, 7):\n        ways[i] = ways[i - 1] + ways[i - 2] + ways[i - 3]\n\n    return ways[6]\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    total_rabbits = 38\n    big_mushroom_houses = 5\n    small_mushroom_houses = 9\n    big_mushroom_capacity = 4\n    rabbits_in_big = big_mushroom_houses * big_mushroom_capacity\n    remaining_rabbits = total_rabbits - rabbits_in_big\n    capacity_small_mushroom_house = remaining_rabbits // small_mushroom_houses\n    return capacity_small_mushroom_house\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    months_from_march_to_july = 5\n\n    total_pizzas = average_pizzas_per_month * months_from_march_to_july\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    total = 21 + 22 + 23\n    ans = total // (2 * 3)\n    return ans\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n\n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 3\n    distance = 150\n\n    # Speed upstream is speed in still water minus speed of current\n    speed_upstream = speed_in_still_water - speed_of_current\n\n    # Time is distance divided by speed\n    time = distance / speed_upstream\n\n    return time\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    for i in range(1, 100):\n        if i % 3 == 2 and i % 4 == 3 and i % 5 == 4:\n            return i\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = ((56 + 3) // 4) * 4\n    last_multiple = 92 // 4 * 4\n    count = (last_multiple - first_multiple) // 4 + 1\n    return count\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    halfway_number = (3.5 + 6.9) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = 0\n    for i in range(1, 61, 4):\n        ans += i + (i - 1)\n    for i in range(3, 61, 4):\n        ans -= i + (i - 1)\n    return ans\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Claire's current age as 'c'\n    c = symbols('c')\n\n    # Setting up the equation: In 6 years, Claire's age will be three times her current age\n    # So, c + 6 = 3 * c\n    equation = Eq(c + 6, 3 * c)\n\n    # Solve the equation for 'c'\n    current_age = solve(equation, c)[0]\n\n    # Claire's age two years from now will be current_age + 2\n    age_in_two_years = current_age + 2\n\n    return age_in_two_years\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    return (4/15) - (7/10) + (11/15) - (3/10)\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    base_digit = 9\n    exponent = 99\n\n    # Find the last non-zero digit of base_digit^1, base_digit^2, ..., base_digit^4\n    # As base_digit is 9, the pattern of the ones digit will be 9, 1, 9, 1, ...\n    # Because 9^2 ends with 1 and 9^3 will end with 9 again, and so on.\n    # Therefore, we just need to check if the exponent is even or odd\n    if exponent % 2 == 0:\n        # If the exponent is even, the ones digit will be 1\n        ones_digit = 1\n    else:\n        # If the exponent is odd, the ones digit will be 9\n        ones_digit = 9\n    \n    return ones_digit\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    actual_time, expected_time = symbols('actual_time expected_time')\n\n    # The actual time is 11/12 of the expected time\n    equation1 = Eq(actual_time, expected_time * 11 / 12)\n\n    # The actual time is expected time minus 15 minutes plus 5 minutes late\n    equation2 = Eq(actual_time, expected_time - 15 + 5)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (actual_time, expected_time))\n\n    return solutions[expected_time]\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    \n    missing_number_product = total_product - known_product\n    missing_number = missing_number_product / 5.42\n    \n    return missing_number\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    sweets_per_person = total_sweets // people\n    \n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # Number of each color of marbles\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # Maximum number of marbles she can draw without getting 4 different colours\n    max_without_4_colours = (green - 1) + (blue - 1) + (orange - 1)\n\n    # She must draw at least one more to ensure she has 4 different colours\n    marbles_to_draw = max_without_4_colours + 1\n\n    return marbles_to_draw\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 // 4\n    total_legs = 9 * legs_per_chicken\n    return total_legs\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # Susan's bus fare\n    bus_fare = 44\n\n    # List of coin denominations in pence\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n\n    # Start with a larger denomination than the bus fare\n    # to minimize the number of coins exchanged\n    paid_amount = next(coin for coin in coins if coin > bus_fare)\n\n    # Susan pays this amount and gets change\n    change = paid_amount - bus_fare\n\n    # Count the smallest number of coins for the change\n    coin_count = 1  # Susan hands over one coin\n    for coin in coins:\n        if change >= coin:\n            num_coins = change // coin  # Number of coins of this denomination\n            coin_count += num_coins  # Add to the count\n            change -= coin * num_coins  # Reduce the remaining change\n\n        if change == 0:\n            break\n\n    return coin_count\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    day_distance = 3\n    night_distance = 1\n    total_distance = 9\n    total_climbed = 0\n    day_count = 0\n\n    while total_climbed < total_distance:\n        day_count += 1\n        total_climbed += day_distance\n        if total_climbed >= total_distance:\n            break\n        total_climbed -= night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # General formular for distributing n identical items to r containers with at least one in each:\n    # C(n - 1, r - 1) where C is the combination nCr = n! / r! * (n - r)!\n    # 19 books to 4 kids with at least one book per kid means we're distributing the rest (19 - 4) books freely\n    n = 19 - 4  # Remaining books after giving one to each kid\n    r = 4 - 1   # Remaining kids after one book each\n    # Calculate the number of combinations\n    ans = factorial(n) // (factorial(r) * factorial(n - r))\n    return ans\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    # Initial terms of the sequence\n    a, b = 2, 3\n    while b < 100:  # Checking if the number has three digits\n        a, b = b, a + b  # Generate the next term using the previous two\n    return b  # The first three-digit number in the sequence\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "from math import factorial\n\ndef solution():\n    # Since each pencil case cannot be empty, we start by placing one pen in each case.\n    pens_left = 6 - 3\n    pencil_cases = 3 - 1  # we will use pencil_cases - 1 dividers to separate pens\n\n    # The number of ways to distribute pens_left pens into pencil_cases slots\n    # is equivalent to calculating the combinations of pens_left + pencil_cases\n    # taken pencil_cases at a time.\n\n    # Using the formula for combinations: nCr = n! / (r! * (n-r)!)\n    ans = factorial(pens_left + pencil_cases) / (factorial(pencil_cases) * factorial(pens_left))\n\n    return int(ans)\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 // 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the water in each tank\n    A, B, C, D = symbols('A B C D')\n\n    # Equation for Tank A and Tank B relation: A = 5B\n    equation1 = Eq(A, 5 * B)\n    # Equation for Tank B and Tank C relation: B = C + 5\n    equation2 = Eq(B, C + 5)\n    # Equation for Tank C and Tank D sum to equal Tank A: C + D = A\n    equation3 = Eq(C + D, A)\n    # Equation defining the amount of water in Tank D\n    equation4 = Eq(D, 41)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (A, B, C, D))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    # Define the number of wheels for each vehicle type\n    motorbike_wheels = 2\n    tricycle_wheels = 3\n    van_wheels = 4\n\n    # Let's denote:\n    # x = number of motorbikes\n    # y = number of tricycles\n    # z = number of vans\n    \n    # We have three equations:\n    # (1) motorbike_wheels*x + van_wheels*z = tricycle_wheels*y + 35\n    # (2) tricycle_wheels*y + van_wheels*z = motorbike_wheels*x + 13\n    # (3) motorbike_wheels*x + tricycle_wheels*y + van_wheels*z = 101\n\n    # From (1) and (2), we can find relationship between x and y, z and y:\n    # (1) => 2x + 4z - 3y = 35\n    # (2) => 3y + 4z - 2x = 13\n    # Let's add the both sides of these two equations\n    # 2x - 2x + 4z + 4z - 3y + 3y = 35 + 13\n    # 8z = 48 => z = 6 (since all terms cancel out except for z)\n\n    # With z found, we can substitute into (3) to find x and y:\n    # 2x + 3y + 4*6 = 101\n    # 2x + 3y = 101 - 24\n    # 2x + 3y = 77\n\n    # We also have another equation from the differences in wheels (1):\n    # 2x + 4*6 = 3y + 35\n    # 2x + 24 = 3y + 35\n    # 2x - 3y = 11\n\n    # Now we solve the system of equations:\n    # 2x + 3y = 77 (3)\n    # 2x - 3y = 11 (1) simplified\n    \n    # We can subtract second equation from the first:\n    # 2x + 3y - (2x - 3y) = 77 - 11\n    # 6y = 66\n    # y = 11\n    \n    # With y found, we can substitute into the equation 2x - 3y = 11 to find x:\n    # 2x = 11 + 3*11\n    # 2x = 11 + 33\n    # 2x = 44\n    # x = 22\n    \n    # Now we are asked to find the difference between the number of motorbikes and vans:\n    # motorbikes = x, vans = z\n    motorbikes = 22\n    vans = 6\n    more_motorbikes_than_vans = motorbikes - vans\n\n    return more_motorbikes_than_vans\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((2*i+2)**2 - (2*i)**2 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    cups_order = 30\n    gallons_needed = cups_order / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    pip_and_bud = 2  # Pip and Bud themselves are 2 people\n\n    total_people = people_in_front_of_pip + pip_and_bud + people_behind_bud\n    \n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    n_term = 298\n    \n    term_number = ((n_term - first_term) / common_difference) + 1\n    \n    return int(term_number)\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    both = symbols('both')\n    \n    football = 3 * both\n    basketball = 4 * both\n    total_students = 36\n    \n    equation = Eq(football + basketball - both, total_students)\n    \n    solutions = solve(equation, both)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "def solution():\n    from itertools import permutations\n\n    year = \"2014\"\n    days = 0\n\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Generate date string\n            date_str = year + \"{:02d}\".format(month) + \"{:02d}\".format(day)\n\n            # Check if date is valid\n            if date_str[4:6] not in {\"00\", \"02\", \"04\", \"06\", \"09\", \"11\"} and int(date_str[6:]) > 30:\n                continue  # Invalid date for April, June, September, November\n            if date_str[4:6] == \"02\" and int(date_str[6:]) > 28:\n                continue  # Invalid date for February (not a leap year)\n            \n            # Count the occurrences of 0, 1, 2\n            count_0 = date_str.count(\"0\")\n            count_1 = date_str.count(\"1\")\n            count_2 = date_str.count(\"2\")\n\n            # Check if 0, 1, 2 have the same count\n            if count_0 == count_1 == count_2:\n                days += 1\n\n    return days\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    numbers = [4, 5, 6, 9, 3, 9]\n    average = 6\n    total_sum = average * 8\n    sum_of_known = sum(numbers)\n    sum_of_p_q = total_sum - sum_of_known\n    \n    difference = 6\n\n    # Since we are looking for the smallest possible value for q, \n    # we start by setting p to the minimum value it can take (which would make q as big as possible)\n    # Given that p < q and the difference between the highest and lowest is 6, we can start \n    # with the value for p that is 6 less than the current highest value which is 9\n    # because if p was any lower, the difference would not be maintainable when q is introduced\n    p = min(numbers) + difference\n\n    # Now, we can calculate q based on the smallest p\n    q = sum_of_p_q - p\n\n    # Iterate through possible values of p to find the minimum q such that q - min(numbers) <= 6\n    while q - min(numbers) > difference:\n        p += 1\n        q = sum_of_p_q - p\n\n    return q\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    n = 21\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    # Chinese Remainder Theorem could be applied to solve this problem\n    from sympy.ntheory.modular import solve_congruence\n\n    # Creating the congruences based on the problem statement:\n    # x â¡ 3 (mod 7), x â¡ 7 (mod 11), x â¡ 9 (mod 13)\n    congruences = [(3, 7), (7, 11), (9, 13)]\n\n    # Solve the system of congruences\n    result, _ = solve_congruence(*congruences)\n\n    # Getting the first five-digit number which satisfies the congruences\n    # If the CRT result is not a five-digit number, we add the product of the moduli until it is\n    while result < 10000:\n        result += 7 * 11 * 13\n\n    # Return the smallest possible value\n    return result\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    adam_speed = 60  # Adam's speed in km/h\n    jacob_speed = 80  # Jacob's speed in km/h\n    jacob_time = 3  # Jacob's travel time in hours\n    adam_extra_time = 0.5  # Adam's extra travel time in hours\n\n    # Distance Jacob covered to reach home\n    jacob_distance = jacob_speed * jacob_time\n    # Total time Adam traveled to reach home\n    adam_time = jacob_time + adam_extra_time\n    # Distance Adam covered to reach home\n    adam_distance = adam_speed * adam_time\n\n    # Total distance apart are their homes\n    total_distance = jacob_distance + adam_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def solution():\n    def custom_multiply(a, b):\n        return ((a * b + 16) / (a + b)) ** 2\n\n    # Calculate sequentially using the custom multiplication\n    result = custom_multiply(custom_multiply(custom_multiply(custom_multiply(1, 2), 3), 4), 5)\n    \n    # Return the largest integer not exceeding the result\n    return int(result)\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n\n    # Compute the minimum maximum using the Pigeonhole Principle\n    min_max_cakes = (total_cakes + layers - 1) // layers\n\n    return min_max_cakes\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 7 / 100\n    total_paid_with_gst = 0.91\n    cost_before_gst = total_paid_with_gst / (1 + gst_rate)\n\n    return round(cost_before_gst, 2)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    prime_factorization = {2: 2, 3: 2, 7: 1}  # 252 = 2^2 * 3^2 * 7^1\n    factor_count = 1\n  \n    for exponent in prime_factorization.values():\n        factor_count *= (exponent + 1)\n\n    return factor_count\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # As per the pigeonhole principle,\n    # if Lucy picks 3 marbles, there's a possibility she might get 1 blue and 2 yellow,\n    # or the other way around. But if she picks 4 marbles, she's guaranteed to have,\n    # at least, 2 marbles of the same color.\n    \n    ans = 4\n    return ans\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    kg_to_g_conversion = 1000\n    total_g = (2.49 * kg_to_g_conversion) + 670 + (3 * kg_to_g_conversion) + 80\n    return total_g\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time = 60  # total time in minutes\n    cycling_fraction = 1/3\n    jogging_time = total_time * (1 - cycling_fraction)\n\n    return int(jogging_time)\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    \n    equation = Eq(justin + 18, 4 * (justin - 6))\n    \n    solution = solve(equation, justin)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    first_term = 22\n    common_difference = 18 - 22  # Common difference from the sequence\n    n_minus_1_term = 2  # The term before n (which is the last term given in sequence)\n\n    # Apply the arithmetic sequence formula: a_n = a + (n - 1)d\n    next_term = n_minus_1_term + common_difference  # In this case, we're finding a_n directly\n\n    return next_term\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    # Sam's car consumption details\n    distance = 273\n    sam_miles_per_gallon = 72.8\n\n    # Calculate gallons used by Sam to cover the distance\n    sam_gallons_used = distance / sam_miles_per_gallon\n\n    # Tom's car uses 6.75 gallons more than Sam's to cover the same distance\n    tom_extra_gallons_used = 6 + 3/4\n    tom_gallons_used = sam_gallons_used + tom_extra_gallons_used \n\n    # Calculate Tom's average consumption rate (miles per gallon)\n    tom_miles_per_gallon = distance / tom_gallons_used \n\n    return tom_miles_per_gallon\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # Maximum number of chips Bart can take of one color without getting two different colors is 4\n    # This is because there are 4 yellow M&M's, the biggest number for one color.\n    # Having taken 4 yellow M&M's, the next chip he takes should guarantee a different color\n    # either red or brown since 4 yellow M&Mâs is the maximum of one color.\n    # Therefore, he needs to take out 4 + 1 = 5 chips to assure that he gets 2 of different colors.\n    \n    return 5\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import gcd\nfrom functools import reduce\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef solution():\n    # Calculate least common multiple to find the time they next meet\n    times = [56, 80, 105]\n    lcm_time = reduce(lcm, times)\n    \n    # Calculate the time they meet in hours\n    meet_time_hours = lcm_time // 3600\n    meet_time_minutes = (lcm_time % 3600) // 60\n    meet_time_seconds = lcm_time % 60\n    \n    # Starting time is 10.00 am\n    start_hour = 10\n    start_minute = 0\n    \n    # Calculate the new time they meet\n    new_hour = (start_hour + meet_time_hours) % 24\n    new_minute = (start_minute + meet_time_minutes)\n    new_second = meet_time_seconds\n\n    # Adjust for any additional hours due to minutes overflow\n    if new_minute >= 60:\n        new_hour += new_minute // 60\n        new_minute = new_minute % 60\n    \n    # Format the time they meet\n    ans = f\"{new_hour:02d}:{new_minute:02d}:{new_second:02d}\"\n    return ans\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for i in range(10):\n        number = int(f\"24572{i}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Start with the minimum number each child can have, which is one apple each.\n    # One child will get the most apples, we'll call him 'A'.\n    # The remaining 5 children must have at least one apple each, and different counts from each other and 'A'.\n    # The maximum number for 'A' occurs when the apples are most unevenly distributed.\n    # So we start by giving each of the remaining 5 children one apple and then\n    # distribute the rest of the apples to them in an increasing order without exceeding 'A'.\n    \n    # Number of apples\n    total_apples = 30\n    # Number of children\n    num_children = 6\n    # Initialize an array to hold the number of apples for the remaining children\n    distribution = [1, 2, 3, 4, 5]  # Minimum distribution among 5 children\n    \n    # Calculate apples remaining after the minimum distribution\n    apples_remaining = total_apples - sum(distribution)\n    \n    # The child 'A' who gets the maximum can get all the remaining apples\n    max_apples_for_A = apples_remaining\n    \n    return max_apples_for_A\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    ans = 9039 + 93\n    return ans\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # assuming geometric sequence pattern (common ratio)\n    # common ratio r can be found by dividing the second term by the first term\n    r = 27 // 3  # common ratio is 9\n\n    # to find the third term, we multiply the second term by the common ratio\n    third_term = 3 * r\n\n    return third_term\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    num_shirts = 2\n    num_skirts = 2\n\n    # Principle of Multiplication: for each shirt, there are two possible skirts \n    # that can be matched with it, so we multiply the possibilities\n    num_ways_to_match = num_shirts * num_skirts\n\n    return num_ways_to_match\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # Given that 105, 120, 135 are the 7th, 8th, 9th terms in an arithmetic sequence\n\n    # Calculate the common difference\n    difference = 120 - 105  # or 135 - 120\n\n    # Now, we need to find the first term 'a' using the 7th term formula: a_n = a + (n-1)*d\n    # 105 = a + (7-1)*difference -> a = 105 - 6 * difference\n    first_term = 105 - 6 * difference\n\n    # Calculate the 100th term using the formula: a_n = a + (n-1)*d\n    nth_term = first_term + (100 - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert the base 10 numbers to base 7\n    num1_base7 = int(str(45), 7)\n    num2_base7 = int(str(66), 7)\n\n    # Calculate the sum in base 10\n    sum_base10 = num1_base7 + num2_base7\n\n    # Convert the sum back to base 7\n    sum_base7 = ''\n    while sum_base10 > 0:\n        sum_base7 = str(sum_base10 % 7) + sum_base7\n        sum_base10 //= 7\n\n    return int(sum_base7)\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_day_per_rabbit = 4\n    number_of_rabbits = 8\n    number_of_days = 5\n    \n    total_carrots = carrots_per_day_per_rabbit * number_of_rabbits * number_of_days\n    \n    return total_carrots\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    return (5 / 8) * 160\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    # Let the original number of oranges be 3x and lemons be 5x\n    # After selling 48 oranges, the number of oranges becomes 3x - 48\n    # The new ratio after selling is 1:2, so (3x - 48) : 5x = 1:2\n    # We can now set up the proportion (3x - 48)/5x = 1/2\n    # Solving for x will give us the original amount of lemons, which is 5x\n    \n    # Solve the proportion for x\n    x = 48 / (3 - (5 / 2))\n\n    # Calculate the original number of lemons, which is 5x\n    lemons = 5 * x\n\n    return int(lemons)\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    mother_current_age, daughter_current_age = symbols('mother_current_age daughter_current_age')\n    \n    # When the daughter reaches the mother's current age, the mother will be 75\n    equation1 = Eq(mother_current_age + (mother_current_age - daughter_current_age), 75)\n    \n    # When the mother was the daughter's current age, the daughter was 3\n    equation2 = Eq(daughter_current_age - (mother_current_age - daughter_current_age), 3)\n    \n    sol = solve((equation1, equation2), (mother_current_age, daughter_current_age))\n    \n    return sol[mother_current_age]\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Calculate the rate at which each animal eats a bale of hay per day\n    horse_rate = 1 / 2\n    cow_rate = 1 / 3\n    sheep_rate = 1 / 12\n    \n    # Calculate the total rate at which the hay is eaten\n    total_rate = horse_rate + cow_rate + sheep_rate\n    \n    # Calculate the total number of days for the hay to last\n    days = 22 / total_rate\n    \n    return days\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # To make sure to get 3 red apples, take out all the non-red apples first.\n    # Number of green and yellow apples\n    green_yellow_apples = 11 + 7\n    \n    # To guarantee the next 3 apples are red, add 3 to the previous sum.\n    minimum_apples_to_take = green_yellow_apples + 3\n   \n    return minimum_apples_to_take\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Construct the equation 7(x+2) = 51 + 2(x-1)\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_amount = 200\n    final_amount = 204\n\n    percentage_change = ((final_amount - initial_amount) / initial_amount) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    digits = ['0', '0', '1', '1', '2', '2']  # two each of 0, 1, and 2\n    for p in set(permutations(digits)):\n        yyyy = '2014' + ''.join(p[:2])\n        mm = ''.join(p[2:4])\n        dd = ''.join(p[4:6])\n        if int(mm) > 12 or int(mm) == 0:  # month should be between 01 and 12\n            continue\n        if int(dd) > 31 or int(dd) == 0:  # day should be between 01 and 31\n            continue\n        if int(mm) in [4, 6, 9, 11] and int(dd) > 30:  # April, June, September, November have 30 days max\n            continue\n        if int(mm) == 2 and int(dd) > 28:  # February has 28 days max in 2014\n            continue\n        count += 1\n    return count\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # The smallest number of right-handed girls occurs when the maximum number of left-handed pupils are girls.\n    left_handed = total_pupils - right_handed\n    left_handed_girls = min(left_handed, girls)\n    \n    # The remaining girls must be right-handed\n    right_handed_girls = girls - left_handed_girls\n    \n    return right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = (20 - 19) + (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    original_price = 6400 / 0.2\n    money_saved = original_price - 6400\n    return money_saved\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # In a round-robin tournament with 6 teams, every team plays with each of the other teams exactly once.\n    # Number of games = Combination of 6 teams taken 2 at a time = 6C2\n    # In each game, there are 2 points to distribute (either 2 to winner and 0 to loser, or 1 each if it's a tie).\n    # Total points in all games = number of games * 2\n    from math import comb\n    total_games = comb(6, 2)\n    total_points = total_games * 2\n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    capacity = 8\n\n    minibuses_needed = -(-children // capacity) # Using ceiling division to round up\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    # Perform quick summation of the given numbers.\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # We want to ensure we get 4 different coloured marbles.\n    # Let's use the worst-case scenario which is derived from the Pigeonhole Principle.\n    # We take all the marbles from the most abundant color (7 green), then all of another (6 blue),\n    # and then one each from the remaining colors (red and orange).\n    # This would ensure that by the end we have all 4 different colours.\n\n    marbles_needed = 7 + 6 + 1 + 1  # Sum of all but one marble from each color + 1 marble from the last color\n    return marbles_needed\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    num_zeros = 28\n    n = 1\n    count_5 = 0\n    \n    while count_5 < num_zeros:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            count_5 += 1\n            temp_n /= 5\n    \n    return n\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 14):  # a must be less than 14, else 3a will exceed 41\n        if isprime(a):\n            b = (41 - 3 * a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    cost_per_tender_4pc = 7 / 4\n    cost_per_tender_6pc = 8.5 / 6\n    return \"4pc\" if cost_per_tender_4pc < cost_per_tender_6pc else \"6pc\"\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n    bet_amount = 1\n    win_amount = 10\n    total_outcomes = 6 * 6  # Since each die has 6 sides\n\n    # Calculate the probability of getting a total greater than 10\n    # Sums greater than 10 are (5,6), (6,5), (6,6), which is 3 combinations.\n    winning_outcomes = 3\n    prob_win = winning_outcomes / total_outcomes\n\n    # Expected winnings per game\n    expected_win_per_game = prob_win * win_amount\n\n    # Expected loss per game (the amount bet - expected winnings)\n    expected_loss_per_game = bet_amount - expected_win_per_game\n\n    # Expected total loss after playing 60 times\n    expected_total_loss = expected_loss_per_game * total_rolls\n\n    return expected_total_loss\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g, b = symbols('g b')\n    \n    # Total number of pupils\n    total_pupils = 1690\n    \n    # Equation for total number of boys and girls\n    equation1 = Eq(g + b, total_pupils)\n    \n    # There are 90 more boys than girls\n    equation2 = Eq(b - g, 90)\n    \n    # Ratio of girls who can swim to those who cannot\n    girls_can_swim = 31\n    girls_cannot_swim = 49\n    \n    # Ratio of boys who can swim to those who cannot\n    boys_less = 120\n    \n    # Solve for the number of girls and boys\n    num_of_students = solve((equation1, equation2), (g, b))\n    num_girls = num_of_students[g]\n    num_boys = num_of_students[b]\n    \n    # Calculate the number of girls who can and cannot swim according to the ratio\n    total_girls_swim_ratio = girls_can_swim + girls_cannot_swim\n    girls_who_cannot_swim = (num_girls * girls_cannot_swim) // total_girls_swim_ratio\n    \n    # Calculate the number of boys who can and cannot swim\n    boys_who_can_swim = (num_boys - boys_less) // 2\n    boys_who_cannot_swim = num_boys - boys_who_can_swim\n    \n    # Calculate the total number of students who cannot swim\n    cant_swim_total = girls_who_cannot_swim + boys_who_cannot_swim\n\n    return cant_swim_total\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_two_apples = 280\n    weight_of_three_apples = total_weight_with_apples - weight_with_two_apples\n    \n    weight_of_basket = weight_with_two_apples - 2 * (weight_of_three_apples / 3)\n    \n    return int(weight_of_basket)\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['2', '3', '4']\n    perm = permutations(digits)\n    count = sum(1 for _ in perm)\n    return count\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n    phone_cost = 740\n    rent_percentage = 0.75\n    remaining_salary_fraction = 1/5\n\n    # Kiera spends $740 on phone, 75% of the remaining on rent\n    # and she finally has 1/5th of her salary left.\n    \n    # Kiera's remaining money after buying the phone\n    remaining_after_phone = salary - phone_cost\n    \n    # Kiera's spendings on the rent\n    rent_cost = rent_percentage * remaining_after_phone\n    \n    # The final money Kiera is left with, which is 1/5th of her salary\n    remaining_final = salary * remaining_salary_fraction\n    \n    # Equation representing that after spending on phone and rent, she is left with 1/5th of her salary\n    equation = Eq(remaining_after_phone - rent_cost, remaining_final)\n\n    # Solve the equation for salary\n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    remaining_after_class = 150 + 100  # 100ml drank after class, so add it back\n    original_amount = remaining_after_class * 2  # Pip drank half before class, so multiply by 2\n    return original_amount\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "from itertools import product\n\ndef solution():\n    # Convert initial time to minutes\n    initial_hour, initial_minute = 2, 31\n    initial_time = initial_hour * 60 + initial_minute\n    \n    # All possible combinations for the time when all '0, 1, 2, 3' are present\n    possible_hours = [10, 20, 21, 12, 23, 13, 02, 03, 11, 22, 00]\n    possible_minutes = [0, 1, 2, 3, 10, 11, 12, 13, 20, 21, 22, 23, 30, 31, 32]\n\n    # Looking for the next time after 2:31\n    for minute_combination in product(possible_hours, possible_minutes):\n        hour, minute = minute_combination\n        total_minutes = hour * 60 + minute\n        if total_minutes > initial_time:\n            ans = total_minutes - initial_time\n            return ans\n\n    # If time not found, the clock will go over to the next day, add 24 hours to the initial time\n    next_day = initial_time + 24 * 60\n\n    # Looking for the earliest time on the next day\n    for minute_combination in product(possible_hours, possible_minutes):\n        hour, minute = minute_combination\n        total_minutes = hour * 60 + minute\n        if total_minutes < initial_time:\n            ans = (24 * 60 - initial_time) + total_minutes\n            return ans\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n\n    # Lynn and Mary initially had the same amount of money\n    equation1 = Eq(lynn, mary)\n    # After spending, Mary had thrice as much money left as Lynn\n    equation2 = Eq(mary - 58, 3 * (lynn - 160))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lynn, mary))\n\n    # Calculate how much money Lynn had left after spending\n    lynn_left = solutions[lynn] - 160\n\n    return lynn_left\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n    \n    def triangle(A, B):\n        return 5 * A - B * B\n    \n    ans = triangle(diamond(4, 2), 6)\n    \n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    initial_quantity = 210\n    sold_monday = (3 / 7) * initial_quantity\n    remaining_after_monday = initial_quantity - sold_monday\n    sold_tuesday = (3 / 8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    small_bag_weight = 3 / 4\n    number_of_small_bags = remaining_after_tuesday / small_bag_weight\n\n    return int(number_of_small_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percent_sold = 60\n    percent_unsold = 100 - percent_sold\n    tickets_unsold = 28\n    \n    total_tickets = tickets_unsold * 100 / percent_unsold\n    \n    return int(total_tickets)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    # Dividend = Divisor * Quotient + Remainder\n    # To find the minimum value of the dividend, we find the smallest divisor \n    # that will give us the given remainder\n    # As Divisor > Remainder to get a remainder, the smallest Divisor will be Remainder + 1\n    divisor = remainder + 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Jerry's current age as jerry and Devi's current age as devi\n    jerry, devi = symbols('jerry devi')\n\n    # According to the problem, Devi is 8 years older than Jerry\n    equation1 = Eq(devi, jerry + 8)\n\n    # In 4 years' time, the ratio of their ages will be 5:7\n    equation2 = Eq((jerry + 4) / (devi + 4), 5/7)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (jerry, devi))\n\n    # Jerry's current age\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    seq = list(range(44, 65, 2))  # Generate the sequence 44 to 64 with step 2\n    ans = sum(seq[::2]) - sum(seq[1::2])  # Subtract the sum of alternate elements\n    return ans\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    # We define a variable for the number Phoebe thought of\n    phoebe_number = symbols('phoebe_number')\n    \n    # Now we set up the equation according to the problem statement\n    equation = Eq(phoebe_number * 5 - 4, 41)\n    \n    # We solve the equation using sympy's solve function\n    solution = solve(equation, phoebe_number)\n    \n    # Since we expect a single solution, we retrieve it by indexing\n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_juice_ml = 7 * 195\n    jug_capacity_ml = 250\n\n    num_jugs = -(-total_juice_ml // jug_capacity_ml)  # Ceiling division\n\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1\n    desired_red_percentage = 90 / 100\n    blue_balls = 1\n    \n    red_balls_to_remain = desired_red_percentage * total_balls / (1 - desired_red_percentage) * blue_balls\n    \n    red_balls_to_remove = 49 - red_balls_to_remain\n    \n    return int(red_balls_to_remove)\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    for tens_place_guess in range(0, 10):\n        for ones_place_guess in range(0, 10):\n            for tens_place_actual in range(0, 10):\n                for ones_place_actual in range(0, 10):\n                    subtrahend_guess = 10 * tens_place_guess + ones_place_guess\n                    minuend = 10 * tens_place_actual + ones_place_actual\n                    subtrahend_actual = 10 * (tens_place_guess - 2) + (ones_place_guess - 1)\n\n                    if minuend - subtrahend_guess == 36 and tens_place_guess - 2 == 3 and ones_place_guess - 1 == 2:\n                        correct_difference = minuend - subtrahend_actual\n                        return correct_difference\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    result = 0\n    numerator = 100\n    for i in range(97, 0, -1):\n        result += numerator / i\n        numerator *= i - 3\n    return result\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45  # grams\n    empty_box_weight = 12  # grams\n    number_of_matches = 220\n    weight_of_matches = total_weight_with_matches - empty_box_weight\n    weight_per_match = weight_of_matches / number_of_matches\n    return weight_per_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # since we know that each cow has 4 legs and each bird has 2 legs\n    # Let cows = c and birds = b\n    c, b = symbols('c b')\n    \n    # total number of cows and birds\n    equation1 = Eq(c + b, 1300)\n    \n    # total number of legs\n    equation2 = Eq(4*c + 2*b, 3440)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (c, b))\n    \n    return solutions[c]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    num = 96\n    factors = set()\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    return len(factors)\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    max_num = 0\n    for i in range(999, 100, -1):  # Start from 999 and go down to 100\n        if i % 2 == 1:  # Check if the number is odd\n            if i % 9 == 0:  # Check if the number is divisible by 9\n                tens_digit = (i // 10) % 10  # Extract the tens digit\n                if tens_digit % 4 == 0:  # Check if the tens digit is divisible by 4\n                    max_num = i  # Assign the current number as the max\n                    break  # Break the loop as we found the largest number satisfying the conditions\n    return max_num\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    total_distance = (21 - 1) * 2 # Total distance covered by 21 trees with 2m interval\n    num_lamp_posts = (total_distance // 10) + 1  # Number of lamp posts with 10m interval\n    return num_lamp_posts\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens_start = 83\n    pens_given_to_ben = 28\n    ben_pens_start = jenny_pens_start - pens_given_to_ben * 2\n\n    return ben_pens_start\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    import math\n    \n    # mass and velocities\n    m1 = 500  # mass of car 1 (kg)\n    v1_north = 20  # velocity of car 1 due north (m/s)\n    m2 = 500  # mass of car 2 (kg)\n    v2_west = 30  # velocity of car 2 due west (m/s)\n\n    # since the cars lock bumpers and stick together, we use conservation of momentum\n    # momentum is a vector quantity, so we calculate the momentum components separately\n\n    # momentum before collision\n    p1_north = m1 * v1_north  # northward momentum of car 1\n    p2_west = m2 * v2_west   # westward momentum of car 2\n\n    # since car 2 was traveling due west, it has no momentum in the north-south direction\n    # similarly, car 1 was traveling north, so it has no momentum in the east-west direction\n\n    # momentum after collision\n    p_total_north = p1_north  # total northward momentum (unchanged)\n    p_total_west = p2_west   # total westward momentum (unchanged)\n\n    # the velocity after the impact can be found by dividing the total momentum vector\n    # by the total mass of the two-car system\n\n    # total mass\n    total_mass = m1 + m2\n\n    # calculate the velocity components after the collision\n    v_final_north = p_total_north / total_mass\n    v_final_west = p_total_west / total_mass\n\n    # the total velocity is the magnitude of the resultant vector\n    v_final_magnitude = math.sqrt(v_final_north**2 + v_final_west**2)\n\n    # use atan2 to find the direction with respect to north\n    direction_rad = math.atan2(-v_final_west, v_final_north)  # west is negative, north is positive\n    direction_deg = math.degrees(direction_rad)\n\n    return v_final_magnitude, direction_deg\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n    ans = sizes * colors\n    return ans\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789', 5):\n        s, e, n, d, m = perm\n        send = int(s + e + n + d)\n        more = int(m + o + r + e)\n        money = int(m + o + n + e + y)\n        if send + more == money:\n            return int(y)\n    return None\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dvd_price = symbols('dvd_price')\n    laptop_price = 2960 - dvd_price\n\n    total_cost = Eq(5 * laptop_price + 4 * dvd_price, 14438)\n\n    dvd_price_solution = solve(total_cost, dvd_price)\n\n    return dvd_price_solution[0]\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):  # Ensure j > i to get distinct numbers and avoid double-counting\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, n = symbols('x n')  # x is the original average, n is the number of people originally in the group\n\n    # Equation 1: Total weight before Aaron joined\n    eq1 = Eq(n * x, 61 * (n + 1) - 45)\n\n    # Equation 2: Total weight after Ben joined\n    eq2 = Eq(62 * (n + 2), 61 * (n + 1) + 71 - 45)\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2), (x, n))\n\n    return solution[x]\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    base_pattern = [1, 2, 3, 4, 5]\n    pattern_length = len(base_pattern)\n    full_repeats = 2000 // pattern_length\n    partial_repeat_length = 2000 % pattern_length\n\n    sum_full_repeats = sum(base_pattern) * full_repeats\n    sum_partial_repeat = sum(base_pattern[:partial_repeat_length])\n\n    total_sum = sum_full_repeats + sum_partial_repeat\n\n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15  # total cost in pounds\n    coffee_cost = 3.69  # coffee cost in pounds\n    milk_cost = 0.89  # milk cost in pounds, converted from pence to pounds\n\n    sugar_cost = total_cost - (coffee_cost + milk_cost)\n    \n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hour in range(1, 12):\n        hours_passed = hour\n        hours_remaining = 12 - hour\n        if hours_passed == 2 * hours_remaining:\n            return hour\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    price_oranges = 1.5\n    price_mangoes = 2.3\n    weight_oranges = 4.1\n    weight_mangoes = 2\n\n    total_cost = (price_oranges * weight_oranges) + (price_mangoes * weight_mangoes)\n    \n    return total_cost\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # To get at least 4 balls of the same color in the worst case, Sheila could\n    # take out all balls of the other two colors. Therefore, the calculation below.\n\n    # Maximum number of balls Sheila can take out without getting 4 of same color:\n    # (All of the orange balls and all of the yellow balls) + (3 blue balls)\n    # Since the very next ball must be blue, which will be the 4th blue ball.\n\n    max_balls_without_4_same_color = 4 + 2 + 3\n    \n    # Therefore, the minimum number of balls she needs to take out to ensure she\n    # has 4 of the same color is 1 more than that amount.\n    balls_to_ensure_4_same_color = max_balls_without_4_same_color + 1\n\n    return balls_to_ensure_4_same_color\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_numbers = len(numbers) + 1  # Including 'a' in the count\n    total_sum = mean_value * total_numbers\n\n    sum_of_known_numbers = sum(numbers)\n    a = total_sum - sum_of_known_numbers\n\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    total_sum = sum(range(1, 14)) * 2 - 13\n    return total_sum\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Work rates of A and B\n    rate_A = 1/15\n    rate_B = 1/10\n    \n    # Work done by A and B in 4 days\n    work_done = 4 * (rate_A + rate_B)\n    \n    # Remaining work to be done by B alone\n    remaining_work = 1 - work_done\n    \n    # Days B needs to finish the remaining work alone\n    days_for_B = remaining_work / rate_B\n    \n    return days_for_B\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    test_tubes = 0\n    while 2 ** test_tubes < 1000:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction = original_price - reduced_price\n\n    percentage_reduction = (reduction / original_price) * 100\n\n    return percentage_reduction\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    boys_diff = 52\n    total_students = 0\n\n    # Start with a square side length of 1 (which would be all boys),\n    # and increase the side length by 2 each time to add a layer of boys\n    # and a layer of girls (one layer inside the other).\n    side_length = 1\n    while True:\n        # Calculate the total boys and girls for the current square side length\n        total_boys = side_length ** 2\n        total_girls = (side_length - 2) ** 2 if side_length > 1 else 0\n        \n        # Check if the difference matches the condition\n        if total_boys - total_girls == boys_diff:\n            total_students = total_boys + total_girls\n            break\n        \n        # Increase side length for the next square\n        side_length += 2\n\n    return total_students\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    for i in range(100, 1000):\n        if (i % 5 == 1) and (i % 6 == 1) and (i % 7 == 1):\n            return i\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    ducklings_legs = 4 * 2  # Ducklings have 2 legs each\n    baby_geese_legs = 2 * 2  # Baby geese have 2 legs each\n    total_legs_without_lambs = ducklings_legs + baby_geese_legs\n    lambs_legs = 36 - total_legs_without_lambs  # Total legs minus the legs of ducklings and baby geese\n    number_of_lambs = lambs_legs // 4  # Lambs have 4 legs each\n    return number_of_lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # convert litres to millilitres\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n    remaining_after_third_day = remaining_sweets * (4/3)\n    remaining_after_second_day = remaining_after_third_day * (5/4)\n    remaining_after_first_day = remaining_after_second_day * (6/5)\n    initial_sweets = remaining_after_first_day * (7/6)\n    \n    return int(initial_sweets)\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Total number of cookies Charlene had at first\n\n    # Charlene kept half of the cookies plus 8 cookies\n    charlene_kept = x / 2 + 8\n\n    # Remaining cookies after Charlene kept hers\n    remaining_after_charlene = x - charlene_kept\n\n    # Emerald ate 1/3 of the remaining cookies plus 4\n    emerald_ate = remaining_after_charlene / 3 + 4\n\n    # Remaining cookies after Emerald ate\n    remaining_after_emerald = remaining_after_charlene - emerald_ate\n\n    # Hebe ate 1/4 of the remaining cookies, 42 cookies left\n    hebe_ate = remaining_after_emerald / 4\n    hebe_left = 42\n\n    # Equation for remaining cookies for Hebe\n    equation = Eq(remaining_after_emerald - hebe_ate, 42)\n\n    # Solving for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of teams\n    n = symbols('n', integer=True)\n\n    # The total number of matches when each team plays every other team twice\n    # is given by the combination n choose 2 times 2 because each team plays\n    # two matches against each other (one home and one away)\n    matches_equation = Eq(n*(n-1), 30*2)\n\n    # Solve for n\n    teams = solve(matches_equation, n)\n\n    # Since we need a positive number of teams, discard the negative solution\n    for team_count in teams:\n        if team_count > 0:\n            return team_count\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    return 528 + 30\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    total_uniforms = 3600\n    made_in_5_days = 720\n    days_for_720_uniforms = 5\n\n    # Calculate the rate of making uniforms per day\n    rate_per_day = made_in_5_days / days_for_720_uniforms\n\n    # Calculate the total number of days to make 3600 uniforms\n    total_days = total_uniforms / rate_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n    \n    # Ways to reach the 4th step (1 before lucky step)\n    ways_to_fourth = fib(5)  # fib(4+1) because it includes 0th step\n    # Ways to reach the top (10th step) from the 5th step\n    ways_from_fifth_to_top = fib(6)  # fib(5+1) because it includes 10th step\n    \n    return ways_to_fourth * ways_from_fifth_to_top\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(first + second + third, 7656)\n    equation2 = Eq(first, second + 1099)\n    equation3 = Eq(third, second - 877)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    # Return the value of the second number\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = 45\n    \n    equation = Eq(girls, 3 * boys - 21)\n    \n    number_of_boys = solve(equation, boys)\n    \n    return number_of_boys[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    from math import prod\n    prime_factors = [2, 2, 2, 3, 8, 5, 5, 25]\n    product = prod(prime_factors)\n    \n    count_zeros = 0\n    while product % 10 == 0:\n        count_zeros += 1\n        product //= 10\n        \n    return count_zeros\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(7, 8): # Since square root of 40 is less than 7 and square root of 50 is less than 8\n        n = i**2\n        if 40 < n < 50:\n            return n\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    ans = 5.824 / 0.4\n    return ans\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_volume = 150\n    cup_volume = 40\n    cups_poured = 3\n    water_left = initial_volume - (cup_volume * cups_poured)\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    ans = 936 // 54\n    return ans\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "from sympy import solve, Eq, symbols\n\ndef solution():\n    a = symbols('a', integer=True)\n    equation = Eq(a*(a+1)*(a+2)*(a+3), 3024)\n    solutions = solve(equation, a)\n    max_num = max(solutions) + 3\n    return max_num\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    students = 10\n    handshakes = students * (students - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    ans = 34 * 19\n    return ans\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "from sympy import lcm\n\ndef solution():\n    packs = (6, 8, 9, 15)\n    \n    # Calculate the least common multiple (LCM) of the pack sizes\n    lcm_packs = lcm(packs)\n    \n    # Calculate the smallest number of packs needed to get at least 1000 markers\n    packs_needed = -(-1000 // lcm_packs)  # Ceiling division\n\n    return packs_needed\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of cards Bob and Alan originally have\n    bob, alan = symbols('bob alan')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(bob, alan + 15)  # Bob has 15 more cards than Alan\n    equation2 = Eq(bob + 25, 3 * alan)  # After receiving 25 cards, Bob has 3 times as many as Alan\n\n    # Use sympy's solve function to solve the system of equations\n    solutions = solve((equation1, equation2), (bob, alan))\n\n    # Return the number of cards Alan has\n    return solutions[alan]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest = min(numbers, key=lambda num: abs(num - target))\n    return closest\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n\n    anne_apples = solve(total_apples, anne)\n\n    return anne_apples[0]\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    difference = (20 / 100) * 90 - (90 / 100) * 20\n    return difference\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_amount = 10  # in grams\n\n    water_amount = (orange_amount * water_ratio) / orange_ratio\n\n    return water_amount\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    def to_fraction(recurring_section, non_recurring_tail, places_of_repetition):\n        numerator = int(recurring_section) - int(non_recurring_tail)\n        denominator = (10**places_of_repetition - 1) * 10**len(non_recurring_tail)\n        return numerator, denominator\n\n    def find_smallest_n(fraction1, fraction2):\n        num1, denom1 = fraction1\n        num2, denom2 = fraction2\n        lcm_denom = denom1 * denom2 // math.gcd(denom1, denom2)\n        multiple1 = lcm_denom // denom1\n        multiple2 = lcm_denom // denom2\n\n        # Searching for the smallest n for which the nth decimal is the same\n        n = 1\n        while True:\n            digit1 = (num1 * multiple1 * 10**n) // lcm_denom % 10\n            digit2 = (num2 * multiple2 * 10**n) // lcm_denom % 10\n            if digit1 == digit2:\n                return n\n            n += 1\n\n    import math\n\n    # Convert the recurring decimals to fractions\n    fraction1 = to_fraction('1119925', '11199', 6)\n    fraction2 = to_fraction('234567', '23456', 1)\n\n    # Find the smallest n where the nth decimal digits of the two fractions match\n    ans = find_smallest_n(fraction1, fraction2)\n    return ans\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    target_average = 8.5\n    total_judges = 5\n\n    required_sum = target_average * total_judges\n    current_sum = sum(scores)\n    final_judge_score = required_sum - current_sum\n\n    return final_judge_score\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8*(2*x - 5), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Total number of pages Jason read.\n    total_pages = 550\n    \n    # Pages read on the first day.\n    first_day_pages = 30\n    \n    # Pages read on the last day.\n    last_day_pages = 70\n    \n    # Let 'd' be the common difference (the number of pages more Jason reads each day than the previous day).\n    # Let 'n' be the total number of days Jason read the book.\n    d, n = symbols('d n', integer=True)\n    \n    # Arithmetic series sum formula: total_pages = n/2 * (2*first_day_pages + (n - 1)*d)\n    # We also know the last term of the sequence: last_day_pages = first_day_pages + (n - 1)*d\n    \n    # Setting up the equations.\n    eq1 = Eq(total_pages, n/2 * (2*first_day_pages + (n - 1)*d))\n    eq2 = Eq(last_day_pages, first_day_pages + (n - 1)*d)\n    \n    # Solving the equations.\n    solutions = solve((eq1, eq2), (d, n))\n    \n    # Return the common difference 'd'.\n    return solutions[d]\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    final_number = 43\n    original_number = (final_number - 7) / 2\n    return original_number\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    # The correct way to find the dividend is to multiply the quotient by the divisor \n    # and then add the remainder, not multiply the quotient by the remainder.\n    quotient = 9\n    divisor = 4\n    remainder = 2\n    \n    # Correct calculation:\n    dividend = (quotient * divisor) + remainder\n    return dividend\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    hannah_speed = symbols('hannah_speed')\n    peter_speed = hannah_speed + 15\n    ratio_time = 3 / 4\n    \n    equation = Eq(peter_speed / hannah_speed, 1 / ratio_time)\n    hannah_speed_value = solve(equation, hannah_speed)[0]\n    \n    return hannah_speed_value\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n    \n    # Given equations\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    return 3.7 + 5.7\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'r' be the interest rate per year\n    r = symbols('r')\n\n    # Since the interest is compounded yearly, the total amount after 2 years is:\n    # A = P * (1 + r)^2\n    # where A is the total amount after 2 years, P is the principal, and r is the interest rate.\n    # Given that A = P + interest earned, we can solve for r.\n    P = 10000  # Principal amount\n    A = P + 816  # Total amount after 2 years with interest\n\n    # Equation for the amount A after 2 years at interest rate r, solved for A:\n    equation = Eq(P * (1 + r)**2, A)\n    \n    # Solve for the interest rate r\n    interest_rate_per_year = solve(equation, r)\n\n    # Since there can be two solutions (positive/negative), we take the positive one as the interest rate cannot be negative\n    r = [sol.evalf() for sol in interest_rate_per_year if sol > 0]\n\n    # The rate is assumed to be in decimal, to convert to percentage we multiply by 100\n    final_interest_rate_per_year = r[0] * 100\n\n    return final_interest_rate_per_year\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    emily, victor, victoria = symbols('emily victor victoria')\n    \n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n    \n    return solutions[victoria]\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    parts = 1 + circles + line + (circles * (circles - 1) // 2) + circles * (line + 1)\n    return parts\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_multiple_choice = 23\n    time_spent_fill_in_blank = 35\n\n    time_left = total_time - (time_spent_multiple_choice + time_spent_fill_in_blank)\n\n    return time_left\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins Owen had initially\n    x = symbols('x')\n\n    # Initial number of fifty-cent coins\n    fifty_cents_initial = 2 / 7 * x\n\n    # Initial number of one-dollar coins\n    one_dollar_initial = x - fifty_cents_initial\n\n    # Mother gave 10 one-dollar coins and 10 fifty-cent coins (5 dollars worth)\n    one_dollar_final = one_dollar_initial + 10\n    fifty_cents_final = fifty_cents_initial + 10\n\n    # In the end, he had twice as many one-dollar coins as fifty-cent coins\n    equation = Eq(one_dollar_final, 2 * fifty_cents_final)\n\n    # Solve the equation\n    solutions = solve(equation)\n\n    # Find the number of coins Owen had initially (value of x)\n    initial_coins = next(val for val in solutions if val > 0)\n\n    return int(initial_coins)\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30  # meters per second\n    crossing_time = 45  # seconds\n    \n    # distance traveled by the train to completely cross the tunnel\n    distance_traveled = train_speed * crossing_time\n\n    # The length of the tunnel is the distance traveled minus the length of the train\n    tunnel_length = distance_traveled - 850  # the length of the train\n    \n    return tunnel_length\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_pocket_money = 55\n    saved_money = 32.5\n    spent_money = total_pocket_money - saved_money\n\n    # Let's call the amount spent on transportation x\n    # Then the amount spent on food is 2x\n    # And we know that x + 2x = spent_money\n    # Thus, 3x = spent_money\n    transportation = spent_money / 3\n    food = 2 * transportation\n\n    return food\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9, 3258 % 9\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "def solution():\n    from itertools import permutations\n\n    # First, let's find all the possible permutations for the people entering the station.\n    # Tina can choose any of the 4 entrances, Joe can then choose from the remaining 3 entrances,\n    # and Mike has 2 entrances left if he can't go with Joe.\n    total_permutations = len(list(permutations(range(4), 3)))\n    \n    # However, this counts the scenarios where Joe and Mike enter through the same entrance.\n    # We need to subtract these cases.\n    # There are 4 choices for them to enter the same entrance, and 2 remaining entrances for Tina.\n    # Since the order of Joe and Mike doesn't matter in this case where they choose the same entrance,\n    # we only count each entrance once.\n    incorrect_permutations = 4 * 2\n    \n    # Subtract the incorrect permutations from the total permutations\n    correct_permutations = total_permutations - incorrect_permutations\n    \n    return correct_permutations\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # The cost for the first 3 tons\n    base_cost = 4 * 3 + 4  # $4/ton * 3 tons + $4 service fee\n    # The remaining amount after paying the base cost\n    remaining_amount = 109 - base_cost\n    # Calculate the additional tons she can use with the remaining amount\n    additional_tons = remaining_amount // 3  # $3/ton for additional usage\n\n    # Total tons of water she can use is the sum of the first 3 tons and the additional tons\n    total_tons = 3 + additional_tons\n\n    return total_tons\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amelia = 160\n    carl, daniel = symbols('carl daniel', real=True, positive=True)\n    \n    bala = amelia / 2 + carl + daniel\n    carl = 3/4 * (amelia + bala + daniel)\n    \n    equation1 = Eq(bala, 320 + daniel)\n    equation2 = Eq(bala, amelia / 2 + carl + daniel)\n    equation3 = Eq(carl, 3/4 * (amelia + bala + daniel))\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (carl, daniel))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    # The smallest possible divisor that leaves a remainder of 6 is the remainder itself plus 1, hence divisor = 7.\n    divisor = remainder + 1\n    # dividend = divisor * quotient + remainder\n    dividend = divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9\n    girls = 3\n    candy_per_girl = total_candy // girls\n    return candy_per_girl\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's assume x is the time in hours the lazy gardener would take to mow the lawn alone\n    x = symbols('x')\n    \n    # The quick gardener mows the lawn in 12 hours, which means in 1 hour, he can do 1/12 of the work.\n    quick_gardener_rate = 1/12\n    \n    # The combined rate of both gardeners mowing the lawn together is 1/8 as they take 8 hours.\n    combined_rate = 1/8\n    \n    # The rate at which the lazy gardener works is unknown, we'll represent it by 1/x.\n    lazy_gardener_rate = 1/x\n    \n    # Equation representing the sum of both gardeners' rates equaling the combined rate.\n    equation = Eq(quick_gardener_rate + lazy_gardener_rate, combined_rate)\n    \n    # Solving the equation for x will give us the number of hours the lazy gardener takes to mow the lawn alone.\n    solution = solve(equation, x)\n    \n    return solution[0]\n\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    # Belinda has 36 tomatoes initially.\n    belinda_tomatoes = 36\n    \n    # After giving away 7, she has 36 - 7 tomatoes.\n    belinda_after_giving = belinda_tomatoes - 7\n    \n    # Since they now have the same number of tomatoes,\n    # Matthew must have had 7 less than what Belinda has now.\n    matthew_initial_tomatoes = belinda_after_giving - 7\n    \n    return matthew_initial_tomatoes\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of apples and oranges\n    apples, oranges = symbols('apples oranges')\n    \n    # The number of oranges is 32 more than the number of apples\n    equation1 = Eq(oranges, apples + 32)\n    \n    # After giving away 1/3 of his apples and 1/2 of his oranges, he had 100 fruits left\n    equation2 = Eq(apples*(2/3) + oranges*(1/2), 100)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    # Calculate the total number of fruits at first\n    total_fruits = solutions[apples] + solutions[oranges]\n    \n    return total_fruits\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    noah, pete, howard = symbols('noah pete howard')\n    \n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n    \n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n    \n    return solutions[noah]\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    initial_amount = 182\n    dress_cost = 5\n    skirt_cost = 3\n    remaining_money = 5 * x\n\n    # Equation representing initial amount after buying dresses and skirts and the remaining money.\n    equation = Eq(initial_amount - (dress_cost * x + skirt_cost * x), remaining_money)\n\n    # Solve for x\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    term1 = floor(2017)       # [2017]\n    term2 = floor(201.7)      # {201.7}\n    term3 = ceil(20.17)       # [20.17]\n    term4 = ceil(-2.017)      # {2.017} Need to take negative for ceiling function to work as a fractional part subtractor\n\n    result = term1 - term2 + term3 - term4\n\n    return result\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity = 990  # in milliliters\n    half_jug = jug_capacity / 2\n    cup_capacity = half_jug / 3\n    return cup_capacity\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import lcm\n\n    green_line_interval = 5\n    red_line_interval = 6\n\n    least_common_multiple = lcm(green_line_interval, red_line_interval)\n    hours, minutes = divmod(least_common_multiple, 60)\n\n    first_common_time = f\"{5 + hours:02d}:{minutes:02d} am\" if (5 + hours) < 12 else f\"{(5 + hours) - 12:02d}:{minutes:02d} pm\"\n\n    return first_common_time\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    # Initial sum is 0\n    sum_ = 0\n    # Initialize a variable to keep track of the current term\n    current_term = 1\n    for i in range(1, 15):\n        # For even numbers, we multiple by the current term to the sum\n        if i % 2 == 0:\n            sum_ += current_term * i\n        # For odd numbers (except for 1), we multiply the current term by the number\n        else:\n            if i > 1:\n                current_term *= i\n    return sum_\n\n# Call the function and store the answer\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n    position_from_back = total_cars - position_from_front + 1\n    return position_from_back\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    num = 29381\n    ans = round(num, -3)\n    return ans\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Given that there is a tree every 3 meters, the distance from the first to the 101th tree\n    # is 100 intervals of 3 meters each\n    distance_to_101th_tree = 100 * 3  # in meters\n    \n    # Olivia takes 3 minutes to walk this distance\n    time_to_101th_tree = 3  # in minutes\n\n    # To find Olivia's walking speed, divide the distance by the time\n    walking_speed = distance_to_101th_tree / time_to_101th_tree  # meters per minute\n\n    # Now calculate how long it would take for her to travel 4000 meters with that walking speed\n    time_to_travel_4000m = 4000 / walking_speed  # in minutes\n\n    return time_to_travel_4000m\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_100g = 80\n    grams_needed = 250\n    cost_per_gram = cost_per_100g / 100\n    total_cost = cost_per_gram * grams_needed\n    return total_cost\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, banana = symbols('apple banana')\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n    \n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    cost_of_5_bananas = 5 * solutions[banana]\n    \n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(6, 52, 5))\n    return sum_of_squares\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # Define a function to calculate the sum of squares of an arithmetic progression\n    def sum_of_squares(n, a, d):\n        return n*(2*a + (n-1)*d)*(2*a*a + (2*n-1)*a*d + (n-1)*n*d*d) // 6\n        \n    # Calculate the number of terms in the sequence\n    first_term = 4\n    common_difference = 4\n    last_term = 124\n    number_of_terms = ((last_term - first_term) // common_difference) + 1\n    \n    # Calculate the sum of squares\n    ans = sum_of_squares(number_of_terms, first_term, common_difference)\n    return ans\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    ans = 2017 + 597\n    return ans\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_questions = 6\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = 5 * correct_answers - 2 * wrong_answers\n        if score == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from math import factorial\n\ndef combinations(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef solution():\n    # Case 1: All four people choose the same entrance - 0 ways because at least one entrance must be entered\n    case_1 = 0\n\n    # Case 2: Three people choose one entrance, and the remaining person chooses another one - there are 3 ways for the single person to choose an entrance and 3 ways for the remaining entrance to be chosen. Then there are 4 options for which person is the one going alone.\n    case_2 = combinations(3, 1) * combinations(3, 1) * combinations(4, 1)\n\n    # Case 3: Two people choose one entrance, and the other two choose the remaining two entrances - there are 3 ways to choose the entrance for the pair, and 2 ways to arrange the remaining two people.\n    # Within the pair and within the singles, the order doesn't matter, but we have to choose the pair, so that's \"4 choose 2\"\n    case_3 = combinations(4, 2) * combinations(3, 1) * 2\n\n    ans = case_1 + case_2 + case_3\n    \n    return ans\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean_value = sum(numbers) / len(numbers)\n    return mean_value\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    number_of_drawings = 111\n    total_time = time_per_drawing * number_of_drawings\n    return total_time\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial total number of animals in the farm.\n    # Let y be the initial number of goats in the farm.\n    x, y = symbols('x y')\n    \n    # 65% of the animals were cows, so the initial number of cows is 0.65 * x.\n    # The rest were goats, so the initial number of goats is x - 0.65 * x = 0.35 * x which is y.\n    equation1 = Eq(y, 0.35 * x)\n    \n    # 240 more cows and goats were added, new total is x + 240.\n    # The percentage of cows increased by 20% to 85%, so the number of cows is now 0.85 * (x + 240).\n    # Since the number of goats doubled, the new number of goats is 2 * y.\n    # The new number of cows is the total new animals minus the new number of goats, which is 0.85 * (x + 240).\n    equation2 = Eq(0.85 * (x + 240), x - y + 240 - 2 * y)\n    \n    # Solve the equations for x and y.\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen the fisher's exchange rate:\n    # 5 fish for 2 rabbits => fish:rabbit = 5:2\n\n    # Oscar the hunter's exchange rate:\n    # 4 rabbits for 7 packs of wheat => rabbit:wheat = 4:7\n\n    # Combined exchange of fish for wheat:\n    # (fish:rabbit) * (rabbit:wheat) = (fish:wheat)\n    # (5:2) * (4:7) => (5*4) : (2*7) = 20:14\n\n    # Simplify the combined exchange rate between fish and wheat:\n    # (fish:wheat) => 20:14 can be simplified to 10:7 (dividing by 2)\n\n    # Calculate number of fish for 14 packs of wheat:\n    # (fish:wheat) = (x:14) where (10:7) = (x:14)\n    # Since we need the amount of fish that corresponds to 14 packs of wheat,\n    # we calculate x as follows: (10/7) = (x/14)\n    # x = (10/7) * 14\n\n    fish_for_14_wheat = (10/7) * 14\n\n    return int(fish_for_14_wheat)\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n    equation = Eq(justin + 18, 4 * (justin - 6))\n    \n    justin_age = solve(equation, justin)[0]\n\n    return justin_age\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    return 378 - 196\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    for num in range(1, 100):\n        if num % 4 == 1 and num % 5 == 2 and num % 6 == 3:\n            return num\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    num1 = 2.6\n    num2 = 4.8\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n    \n    boys_permutations = factorial(2)  # The two boys can be arranged in 2! ways\n    girls_permutations = factorial(3) # The three girls can be arranged in 3! ways\n    \n    ans = boys_permutations * girls_permutations  # Multiply permutations\n    \n    return ans\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    discount = 15  # Since the total cost is above $50, the discount is $15\n    final_payment = total_cost - discount\n    return final_payment\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Worst case scenario to get 3 balls of same color: \n    # Draw all balls of one color (5), and then all balls of second color (5)\n    # The next draw regardless of its color will ensure 3 balls of different colors.\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    num = '2023'\n    n = 1\n    while True:\n        big_num = int(num * n)\n        if big_num % 11 == 0:\n            return n\n        else:\n            n += 1\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    ages.sort() # Sorting the list to make sure we comply with \"Jason is younger than Tom\"\n    for age in ages:\n        if age % 3 == 0:\n            tom_age = age\n            break\n    ages.remove(tom_age) # Remove Tom's age since we identified it\n    adam_age = ages[1] # Adam is the only one left with known age and must be older than the youngest\n    return adam_age\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    ans = 483 // 21\n    return ans\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # We know we need to distribute 28 apples to 6 children, including Avril.\n    # Each child must get at least one apple.\n    # We first give 1 apple to each of the other five children.\n    remaining_apples = 28 - 5\n\n    # Remaining children (excluding Avril) can't have the same number of apples\n    # To maximize the apples Avril gets, we need to minimize what the other children get.\n    # Therefore, we assign the remaining 5 children their apples in increasing order starting from 1.\n    # This forms a sequence 1, 2, 3, 4, ..., and we subtract each from remaining_apples.\n    for i in range(1, 5):\n        remaining_apples -= i\n    \n    # Now, the remaining_apples is the maximum number Avril can get.\n    return remaining_apples\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2\n    ratio_jocye_lori = 3 / 2\n    jocye_speed = lori_speed * ratio_jocye_lori\n    time_seconds = 10\n    jocye_distance = jocye_speed * time_seconds\n    return jocye_distance\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    laptop_cost = (5/8) * total_money\n    return laptop_cost\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    sum_of_two = 60 * 2\n    sum_of_three = 70 * 3\n    new_number = sum_of_three - sum_of_two\n    return new_number\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    # Let the symbols represent the following:\n    # triangle = t, square = s, circle = c, diamond = d\n    # Now we translate the symbolic equations into algebraic ones:\n    # t + t = s         (1)\n    # s + t = c         (2)\n    # d = c + s + t     (3)\n    \n    # From equation (1), we know that:\n    # s = 2 * t\n    \n    # We substitute s in equation (2), to find c:\n    # c = (2 * t) + t = 3 * t\n    \n    # Now we substitute s and c in equation (3), to find d:\n    # d = (3 * t) + (2 * t) + t = 6 * t\n    \n    # We want to find out how many triangles are equal to a diamond\n    # Since d = 6 * t, it means that each diamond is equal to 6 triangles.\n    ans = 6\n\n    return ans\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime\n\n    # Parse the time strings into datetime objects\n    departure_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    bus_catch_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    bus_dropoff_time = bus_catch_time + timedelta(minutes=18)\n    arrival_home_time = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    # Calculate the walking times before and after the bus trip\n    walking_time_before_bus = (bus_catch_time - departure_time).total_seconds() / 60\n    walking_time_after_bus = (arrival_home_time - bus_dropoff_time).total_seconds() / 60\n\n    # Add the walking times together for the total\n    total_walking_time = walking_time_before_bus + walking_time_after_bus\n\n    return total_walking_time\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    difference = second_term - first_term\n    last_term = 79\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of money Ken and Lisa have\n    ken, lisa = symbols('ken lisa')\n\n    # Equation 1: Ken had $15 more than Lisa at first\n    equation1 = Eq(ken, lisa + 15)\n\n    # Equation 2: After giving some money (x), Ken had $21 less than Lisa\n    x = symbols('x')\n    equation2 = Eq(ken - x, lisa + x - 21)\n\n    # Solve the system of equations for x to find the amount Ken gave to Lisa\n    solutions = solve((equation1, equation2), (ken, lisa, x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    base_pyramid_trophies = 5 * (5 + 1) // 2  # Sum of first 5 numbers\n    top_pyramid_trophies = 4 + 3 + 2 + 1      # Sum from 6th to 9th question\n    total_trophies = base_pyramid_trophies + top_pyramid_trophies\n    return total_trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    total_cookies = 100\n    days = 5\n    difference = 6\n\n    # Using the sum of arithmetic sequence formula: Sn = n/2 * (2a + (n-1)d)\n    # Where Sn is the total number of cookies, n is the number of days, a is the first term and d is the common difference\n    # Here we know Sn = 100, n = 5, d = 6, we need to find a\n\n    # Solving for a gives us: a = (Sn - n(n-1)d/2) / n\n    first_day_cookies = (total_cookies - days*(days-1)*difference/2) / days\n\n    return int(first_day_cookies)\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest = int(''.join(map(str, sorted(digits))))\n    return largest - smallest\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Calculate the total number of elements written\n    total_elements = sum((i+1) for i in range(2, 9))\n\n    # Calculate the total number of elements before the '8's\n    elements_before_8 = sum((i+1) for i in range(2, 8))\n\n    # Since two '7's come before the '8's, we need to find the median position\n    median_position = (total_elements + 1) // 2\n    \n    # Determine if the median is in the '8's or before.\n    if median_position <= elements_before_8:\n        # Median is in the numbers before '8'\n        for num in range(2, 8):\n            if median_position - (num + 1) <= 0:\n                ans = num\n                break\n            else:\n                median_position -= (num + 1)\n    else:\n        # Median is 8\n        ans = 8\n\n    return ans\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    total_blue = 18\n    total_red = 6\n    total_orange = 8\n\n    # We need to ensure 2 red marbles, so we consider the worst-case scenario\n    # where we pick all other colors before getting the red ones.\n    \n    # Worst case: picking all blue and orange marbles\n    worst_case_non_red = total_blue + total_orange\n    \n    # To ensure we have 2 red marbles, we need to pick one more than the worst case\n    # to guarantee that we have picked at least 2 red marbles.\n    marbles_needed = worst_case_non_red + 2\n\n    return marbles_needed\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    students_facing_teacher = 30\n    for i in range(1, 31):\n        # A student will end up facing the teacher if they are turned an even number of times.\n        turn_count = 0\n        if i % 2 == 0:\n            turn_count += 1\n        if i % 3 == 0:\n            turn_count += 1\n        if turn_count % 2 != 0:\n            students_facing_teacher -= 1\n\n    return students_facing_teacher\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((x)**0.5 + 36**0.5, 81**0.5)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    return 221 * 4\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    # Find the common difference from the terms provided\n    common_difference = (fourth_term - first_term) // 3\n    \n    num_rows = 25\n    # Using the formula for the sum of n terms in arithmetic sequence: n/2 * (2a + (n-1)d)\n    total_athletes = num_rows / 2 * (2 * first_term + (num_rows - 1) * common_difference)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if number % 4 == 2 and number % 3 == 2 and number % 7 == 1:\n            break\n    return number\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Initially, the probability of the car being behind any gate is 1/3.\n    # When you choose gate 1, there's a 1/3 chance the car is there and a 2/3 chance it's behind gates 2 or 3.\n    # The host knows where the car is and opens gate 3, showing a goat. This means:\n    # If the car was behind your gate (gate 1), it remains there - probability 1/3.\n    # If the car was not behind your gate (gate 1), it must be behind gate 2 - probability 2/3.\n    # The probability of gate 2 having the car has increased to 2/3, while gate 1 still has a probability of 1/3.\n\n    # Hence, you should choose gate 2 for a higher chance of winning the car.\n    # Therefore, return 'gate 2' as the choice.\n    return 'gate 2'\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    total = sum(i * (i + 1) for i in range(1, 32))\n    return total\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    total_people = 13  # Tommy and his 12 friends\n    time_per_person = 142  # minutes spent by each on mathematics homework\n\n    total_time = total_people * time_per_person\n\n    return total_time\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_sum = symbols('original_sum')\n    \n    spent_on_CDs = 75\n    spent_on_batteries_fraction = 1 / 4\n    remaining_fraction = 1 / 3\n    \n    equation = Eq(original_sum - spent_on_CDs - (original_sum - spent_on_CDs) * spent_on_batteries_fraction, original_sum * remaining_fraction)\n    \n    solution = solve(equation, original_sum)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # If 7 trainers catch 7 pokemon in 7 minutes,\n    # it means 1 trainer catches 1 pokemon in 7 minutes.\n    \n    # Since the number of trainers is directly proportional to the\n    # number of pokemon they can catch in a given time,\n    # the same number of trainers will catch 49 pokemon in 7 * 7 = 49 minutes.\n    \n    # Hence, the number of trainers needed is the same (7).\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "def solution():\n    from math import factorial\n\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n    \n    # each student gets 1 book, so we pick 1 book out of 7 for each student\n    ans = nCr(7, 1) * nCr(6, 1) * nCr(5, 1)\n\n    return ans\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrectly_identified = 1500\n\n    percentage_incorrect = (incorrectly_identified / total_people) * 100\n    \n    return percentage_incorrect\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the variable we want to solve\n    oplus = symbols('oplus')\n    \n    # Represent the equation as oplus * 9 + 47 - oplus = 84 + 27\n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n    \n    # Solve the equation\n    solution = solve(equation, oplus)\n\n    # Return the solution (as the first and only element of the solution list)\n    return solution[0]\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest = min(numbers, key=lambda num: abs(num - target))\n    return closest\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # The 99-digit number is composed of the three-digit sequence '928' repeated 33 times.\n    # Since the sum of the digits in '928' is 9+2+8=19, and 19 mod 9 equals 1,\n    # the sum of the digits of the 99-digit number will be 33 * (19 mod 9).\n    # The remainder when any number is divided by 9 is the same as the remainder\n    # when the sum of its digits is divided by 9.\n    \n    sum_of_digits_of_sequence = 9 + 2 + 8  # sum of digits in '928'\n    remainder_of_sequence = sum_of_digits_of_sequence % 9  # remainder of the sum divided by 9\n    repeated_times = 99 // 3  # '928' is repeated 33 times to form the 99-digit number\n\n    # Calculate the sum of the digits of the 99-digit number\n    total_sum_of_digits = remainder_of_sequence * repeated_times\n    \n    # Find the remainder when this sum is divided by 9.\n    remainder_when_divided_by_9 = total_sum_of_digits % 9\n    \n    return remainder_when_divided_by_9\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    # Let the three numbers be a, b, c and a <= b <= c\n    # Given sum: a + b + c = 56\n    # The average of the smallest two is 14, so (a + b) / 2 = 14 => a + b = 28\n    # The average of the largest two is 22, so (b + c) / 2 = 22 => b + c = 44\n\n    # From the given equations:\n    # a + b + c = 56\n    # a + b = 28\n    # b + c = 44\n\n    # Now, we can find the value of c using:\n    # c = 56 - (a + b)\n    c = 56 - 28  # As we already know that a + b = 28\n\n    # We can find the value of a using:\n    # a = (a + b) - b\n    a = 28 - (44 - c)  # As we already know that b + c = 44 and substituting the value of c we found\n\n    # The median number is b, which can be found using:\n    # b = 56 - a - c\n    b = 56 - a - c\n\n    return b\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n\n    num_containers = total_juice // per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Initialize the cost of the items and the amount paid\n    sour_sweets_cost_pence = 12\n    chocolate_drops_cost_pence = 17\n    eliot_paid_pence = 3 * 100  # 3 Â£1 coins in pence\n    maya_paid_pence = 4 * 100   # 4 Â£1 coins in pence\n\n    # Initialize the number of bars bought by Eliot and Maya\n    # and their change; same change for both\n    num_bars = 0\n    change = 0\n\n    # Loop through a reasonable number of bars until the condition is met\n    while True:\n        # Calculate the change for both Eliot and Maya\n        change_eliot = eliot_paid_pence - (sour_sweets_cost_pence * num_bars)\n        change_maya = maya_paid_pence - (chocolate_drops_cost_pence * num_bars)\n\n        # Break the loop if the condition is met\n        if change_eliot == change_maya and change_eliot >= 0:\n            change = change_eliot\n            break\n\n        num_bars += 1\n\n    return num_bars\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [1, 2, 4, 7]\n    \n    # Even number has to end with an even digit.\n    # Since we need the smallest even digit, we place 2 at the end.\n    last_digit = 2\n    # Remaining digits (without the 2)\n    remaining_digits = [1, 4, 7]\n    \n    # The smallest digit should go in the front.\n    # The smallest number from remaining numbers is 1.\n    first_digit = 1\n    remaining_digits.remove(first_digit)\n    \n    # Arrange the remaining two digits in ascending order\n    # to get the smallest number.\n    second_digit, third_digit = sorted(remaining_digits)\n    \n    # Combine the digits to form the smallest number\n    smallest_number = int(f\"{first_digit}{second_digit}{third_digit}{last_digit}\")\n    \n    return smallest_number\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    return 66*2 + 66*3 == 66*5\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Jackson and Chloe's current ages\n    jackson, chloe = symbols('jackson chloe')\n    \n    # Equation 1: Sum of the current ages of Jackson and Chloe\n    equation1 = Eq(jackson + chloe, 54)\n    \n    # Equation 2: In 3 years, Jackson will be 5 times as old as Chloe\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jackson, chloe))\n    \n    # Age of Jackson after 3 years\n    jackson_age_in_3_years = solutions[jackson] + 3\n    \n    return jackson_age_in_3_years\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_charge = 2.5\n    additional_charge = 1.2\n    total_charge = 8.5\n    base_distance = 1.8\n\n    additional_charge_total = total_charge - base_charge\n    additional_distance = additional_charge_total / additional_charge\n\n    total_distance = base_distance + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the price of one pork dumpling and one bun\n    dumpling, bun = symbols('dumpling bun')\n    \n    # Equation for the total price of 6 pork dumplings and 4 buns\n    equation1 = Eq(6 * dumpling + 4 * bun, 92)\n    \n    # Equation for the total price of 3 pork dumplings and 1 bun\n    equation2 = Eq(3 * dumpling + 1 * bun, 41)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dumpling, bun))\n    \n    return solutions[dumpling]\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    ans = 648 * 5\n    return ans\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    from math import ceil\n\n    total_apples = 80\n    min_apples = 3\n\n    # Using the Pigeonhole Principle, find the minimum number of students (pigeonholes)\n    # such that at least one student will get at least 3 apples (pigeons).\n    class_size = ceil(total_apples / min_apples)\n\n    return class_size\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let y represent the number of yellow balloons\n    y = symbols('y')\n    # number of red balloons is twice the number of yellow balloons\n    r = 2 * y\n    # number of blue balloons is three times the number of yellow balloons\n    b = 3 * y\n    # total number of balloons is 150\n    equation = Eq(r + y + b, 150)\n\n    # solve for y\n    solutions = solve(equation, y)\n\n    # find number of red balloons\n    r = 2 * solutions[0]\n\n    return r\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received_chocolates = 8\n    original_chocolates = received_chocolates * 2\n    return original_chocolates\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n\n    big_cars_needed = boys_in_big_cars // 4\n    small_cars_needed = girls_in_small_cars // 2\n\n    total_cars_needed = big_cars_needed + small_cars_needed\n    \n    return total_cars_needed\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces = 56\n    pounds_per_ounce = 1 / 16\n    kg_per_pound = 1 / 2.2\n\n    pounds = ounces * pounds_per_ounce\n    kg = pounds * kg_per_pound\n\n    return round(kg, 1)\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    julia_age = 7\n    mother_age = 36\n    father_age = 42\n    total_ages = julia_age + mother_age + father_age\n    \n    years = 0\n    while total_ages < 100:\n        years += 1\n        total_ages += 3  # each year, all three of them get 1 year older\n\n    return years\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Calculate sum of the increasing sequence from 5 to 80\n    sum_increasing = sum(range(5, 81))  # 5 + 6 + ... + 79 + 80\n\n    # Calculate sum of the decreasing sequence from 79 to 5\n    sum_decreasing = sum(range(5, 80))  # 5 + 6 + ... + 78 + 79\n\n    # The total sum is the sum of both sequences\n    total_sum = sum_increasing + sum_decreasing\n\n    return total_sum\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n\n    return total_percentage_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "import math\n\ndef solution():\n    # Since A must be on the left side of B, and B must be on the left side of C,\n    # there are 3! ways to arrange the other two people around the fixed A, B, C positions.\n    # The remaining two people can be arranged in 2! ways.\n    # Total ways = arrangement of ABC * arrangement of remaining two\n    return math.factorial(3) * math.factorial(2)\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    result = 0\n    for i in range(3, 2013, 7):\n        result += 2019 / (i * (i + 7))\n    ans = result\n    return ans\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "def solution():\n    # Maximize A = abc + bcd + cde + def + efg + fgh + ghi\n    # As abc = 100a + 10b + c and so on, we can rearrange A as:\n    # A = 100(a+b+c+d+e+f+g+h+i) + 10(b+c+d+e+f+g+h) + (c+d+e+f+g+h+i)\n    # Since a-i are all distinct and form the digits 1-9,\n    # the sum a+b+c+d+e+f+g+h+i will always be 45\n    # b+c+d+e+f+g+h is eight times the sum of the numbers from 2 to 8,\n    # which is 8*(sum from 2 to 8) = 8 * (2+3+4+5+6+7+8) = 8*35\n    # c+d+e+f+g+h+i will be the sum of the numbers from 3 to 9\n    # = 3+4+5+6+7+8+9 = 42\n    # So the maximized A would be:\n    # A = 100*45 + 10*8*35 + 42\n    A_max = 100 * 45 + 10 * 8 * 35 + 42\n    return A_max\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_possible_numbers = sorted(set(int(''.join(p)) for p in permutations(digits, 6) if p[0] != '0'))\n    return all_possible_numbers[504]\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Since the pattern cannot be a traditional multiplication, let's assume it is a pattern in the difference of the digits\n    # Let the function representing the pattern be f(a, b) where a and b are the two digits of the number to be multiplied\n    # The pattern seems to be f(a, b) = (b - a) ** 2\n\n    # Extract the digits for 55\n    a, b = divmod(55, 10)\n\n    # Apply the pattern\n    ans = (b - a) ** 2\n    return ans\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # A three-digit number ABC, where A, B, C from {0, 2, 3} and A cannot be 0.\n    count = 0\n    for A in [2, 3]:  # A can be 2 or 3 as it can't be 0 for a three-digit number\n        for B in [0, 2, 3]:\n            for C in [0, 2, 3]:\n                if A != B and B != C and A != C:  # All digits must be different\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    total_work = 1\n    alice_work_rate = 1 / 40\n    bob_work_rate = 1 / 60\n    work_done_in_27_days = 27 * bob_work_rate\n\n    # Let x be the number of days Alice takes off\n    # Then Alice works for (27 - x) days\n    # Equation representing total work done:\n    # (alice_work_rate * (27 - x)) + work_done_in_27_days = total_work\n    x = symbols('x')\n    equation = Eq(alice_work_rate * (27 - x) + work_done_in_27_days, total_work)\n\n    days_off = solve(equation, x)\n\n    return days_off[0]\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    \n    # Total number of students\n    total_students = 36\n    \n    # Total average score for the class\n    total_avg_score = 89\n    \n    # Total score for the entire class\n    total_score = total_avg_score * total_students\n    \n    # boys count\n    boys = total_students - girls\n    \n    # Average score for girls and boys\n    girls_avg_score = 88\n    boys_avg_score = 91\n    \n    # Equation representing total score from girls and boys\n    equation = Eq(girls_avg_score * girls + boys_avg_score * boys, total_score)\n    \n    # Solving the equation\n    solution = solve(equation, girls)\n\n    return solution[0]\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples_of_6_and_9 = []\n    for number in range(21, 50):\n        if number % 6 == 0 and number % 9 == 0:\n            multiples_of_6_and_9.append(number)\n    return multiples_of_6_and_9\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    term7 = 105\n    term8 = 120\n    term9 = 135\n\n    common_difference = term8 - term7\n\n    term100 = term7 + (100 - 7) * common_difference\n\n    return term100\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black, total = symbols('red white black total')\n    total_balls = 136\n\n    equation1 = Eq(red * 2, white)      # Since the ratio of red to white is 1:2\n    equation2 = Eq(white * 4, black * 3)  # Since the ratio of white to black is 3:4\n    equation3 = Eq(red + white + black, total_balls)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # In the worst case scenario, we will pick each sock of a different color until we are forced to pick a matching pair.\n    # With 4 red socks and 4 blue socks, the worst case is picking all 4 red socks first without getting a pair.\n    # The next sock we pick must then be blue, and at this point, we cannot avoid getting at least one pair.\n    # So we need 4 socks (all reds) + 1 sock (the first blue) to ensure at least one pair.\n    # Total number of socks needed = 4 (reds) + 1 (blue) = 5 socks needed to be sure of a matching pair.\n\n    return 5\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    eleventh_square = 11 ** 2\n    return eleventh_square\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4**2) // 2\n    return n\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # Four years ago the combined age of the 3 dogs was 24 years.\n    combined_age_past = 24\n    \n    # Four years have passed since the combined age was given,\n    # so we need to add 4 years for each dog.\n    combined_age_now = combined_age_past + 3 * 4\n    \n    # We want to find the combined age in 2 more years,\n    # so we add 2 more years for each dog.\n    combined_age_future = combined_age_now + 3 * 2\n    \n    return combined_age_future\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_ate = 4\n    sisters_ate = 5 * 4  # Four sisters ate 5 apples each\n    apples_left = 20\n\n    total_apples = justin_ate + sisters_ate + apples_left\n\n    return total_apples\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n\n    minute_angle = 6 * minute\n    hour_angle = (hour % 12) * 30 + (minute / 60) * 30\n\n    angle = abs(hour_angle - minute_angle)\n\n    if angle > 180:\n        angle = 360 - angle\n        \n    return angle\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    # Let the number of marbles Ryan had originally be 2x\n    # Let the number of marbles Audrey had originally be 7x\n    # After the transactions:\n    # Ryan has 2x + 20 marbles\n    # Audrey has 7x - 80 marbles\n    # And the ratio is: (2x + 20) / (7x - 80) = 1/3\n    # Solve for x which represents the original ratio part for Audrey\n    x = symbols('x')\n    equation = Eq((2*x + 20) / (7*x - 80), 1/3)\n    solution = solve(equation, x)\n\n    # Audrey's original number of marbles is 7 times x\n    audrey_marbles = 7 * solution[0]\n\n    return audrey_marbles\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum(60 - i if i % 4 < 2 else i for i in range(60))\n    return ans\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # Sum of beads in one complete pattern (B W R)\n    complete_repeats = total_beads // pattern_length  # Number of complete patterns\n    remaining_beads = total_beads % pattern_length  # Beads outside of the complete patterns\n    black_beads_per_repeat = 3  # Number of black beads in one complete pattern\n    \n    # Calculate the total number of black beads in complete patterns\n    total_black_beads = complete_repeats * black_beads_per_repeat\n\n    # Add the remaining black beads (if any) from the incomplete pattern at the end\n    # Since the black beads always start first in the pattern, we only add remaining black beads if they are present\n    total_black_beads += min(remaining_beads, 3)\n    \n    return total_black_beads\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes = 13 + 23 + 8 + 27\n    required_arrival_time = datetime.strptime('7:45', '%H:%M')\n    wake_up_time = required_arrival_time - timedelta(minutes=total_minutes)\n\n    return wake_up_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    # Generating all possible sums with 3 coins\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                totals.add(i + j + k)\n\n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    entrances = 4\n    people = 3\n    count = 0\n\n    for perm in permutations(range(entrances), people):\n        # Ensure Joe (0) and Mike (1) do not use the same entrance\n        if perm[0] != perm[1]:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens = symbols('chickens')\n    cows = symbols('cows')\n\n    # chickens have 2 legs, cows have 4 legs, and chickens are equal to ducks\n    # The number of heads is chickens + ducks + cows, which is equal to chickens * 2 + cows because chickens = ducks\n    # The number of legs is chickens * 2 + ducks * 2 + cows * 4, which simplifies to chickens * 2 * 2 + cows * 4\n    equation1 = Eq(chickens * 2 + cows, 51)  # Equation for heads\n    equation2 = Eq(chickens * 2 * 2 + cows * 4, 160)  # Equation for legs\n\n    solutions = solve((equation1, equation2), (chickens, cows))\n\n    return solutions[chickens]\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drank = total_juice * (1/5)\n    abigail_drank = 200\n    anna_drank = 120\n\n    juice_left = total_juice - (rebekah_drank + abigail_drank + anna_drank)\n    \n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n\n    ans = (percentage / 100) * quantity\n\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    distance = 3000  # nautical miles\n    time_days = 13\n    time_hours = 22\n    total_time_hours = (time_days * 24) + time_hours  # convert days to hours and add the remaining hours\n    average_speed = distance / total_time_hours  # calculate average speed in nautical miles per hour\n    return round(average_speed)  # round to the nearest integer\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    ans = 2136 // 8\n    return ans\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # volume of the first fruit punch in liters\n    concentration1 = 0.40  # concentration of fruit juice in the first punch\n\n    volume2 = 3  # volume of the second fruit punch in liters\n    concentration2 = 0.70  # concentration of fruit juice in the second punch\n\n    total_volume = volume1 + volume2  # total volume of the mixture\n    total_juice = (volume1 * concentration1) + (volume2 * concentration2)  # total fruit juice in the mixture\n\n    concentration_mixture = total_juice / total_volume  # concentration of the new mixture\n\n    return concentration_mixture\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_to_sister = 339\n    bought_stamps = 455\n    gave_away = 777\n\n    remaining_stamps = initial_stamps - gave_to_sister + bought_stamps - gave_away\n\n    return remaining_stamps\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    # We will calculate the next multiple of 11 after 50\n    # and the last multiple of 11 before 150\n    first_multiple = 55  # The next multiple of 11 after 50\n    last_multiple = 143  # The last multiple of 11 before 150 (143 is 13*11, and the next, 154, is outside the range)\n\n    # Now we calculate the number of multiples by subtracting them and dividing by 11\n    # Then we add one to the result because the range is inclusive\n    num_multiples = ((last_multiple - first_multiple) // 11) + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    albert_and_bella = 2\n\n    total_people = people_in_front_of_bella + people_behind_albert + albert_and_bella\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    sum_numbers = sum(numbers)\n    return sum_numbers\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import primerange\n\n    primes_in_range = list(primerange(20, 30))\n    return primes_in_range[0]\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'w' be the initial number of women, and 'm' be the initial number of men at the bus stop.\n    w, m = symbols('w m')\n    \n    # When 36 women left, the number of women became w - 36.\n    # According to the problem, this is also 3/5 of the number of men.\n    # Therefore, we can write the first equation as: w - 36 = (3/5) * m\n    \n    # When 48 men left on the second bus, m - 48 men remained.\n    # The problem states the number of men and women are then equal.\n    # Hence, we can write the second equation as: w - 36 = m - 48\n    \n    # We can now solve the two equations to find the initial number of women (w) and men (m).\n    \n    equation1 = Eq(w - 36, 3/5 * m)\n    equation2 = Eq(w - 36, m - 48)\n    \n    # Solving the system of equations gives us the initial number of men and women.\n    solution_values = solve((equation1, equation2), (w, m))\n    \n    # The total number of people initially at the bus stop is the sum of women and men.\n    total_people = solution_values[w] + solution_values[m]\n    \n    return total_people\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Fatouma's current age be 'age'\n    age = symbols('age')\n\n    # Fatouma's age in 2 years will be age + 2\n    # Fatouma's age 5 years ago was age - 5\n    # According to Fatouma, in two years, she will be twice as old as she was five years ago\n    equation = Eq(age + 2, 2 * (age - 5))\n\n    # Solve the equation to find Fatouma's age\n    sol = solve(equation, age)\n\n    return sol[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    count = 0\n    combinations = []\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):  # Ensure x2 > x1 to get different numbers\n            for x3 in range(x2 + 1, 14):  # Ensure x3 > x2 to get different numbers\n                if x1 + x2 + x3 == 14:\n                    combinations.append((x1, x2, x3))\n                    count += 1\n    for combo in combinations:\n        print(combo)\n    return count\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_spent = 3 * 0.50\n    change = 5 - total_spent\n    return change\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n\n    difference = english_books - chinese_books\n\n    return difference\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    min_height = 124\n    max_height = 132\n    min_students_same_height = 4\n\n    # According to the pigeonhole principle, \n    # if at least 4 students are of the same height,\n    # and the possible heights are continuous whole numbers,\n    # then the class size should be at least:\n    # (max_height - min_height + 1) * (min_students_same_height - 1) + 1\n    ans = (max_height - min_height + 1) * (min_students_same_height - 1) + 1\n\n    return ans\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime('19:15', '%H:%M')\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cook_duration\n    return start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    num_tickets = 16\n    price_per_ticket = 112\n    \n    total_cost = num_tickets * price_per_ticket\n    \n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    num_poles = 40\n    distance_between_poles = 3\n    total_distance = (num_poles - 1) * distance_between_poles\n    return total_distance\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n    all_three = 5\n\n    total_students = (go + checkers + chess) - (go_checkers + go_chess + checkers_chess) + all_three\n    \n    return total_students\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # Winning positions are positions from where if you're playing,\n    # you guarantee a win with perfect play. If there are 4 oranges\n    # left and it's your turn, no matter if you take 1, 2 or 3 oranges,\n    # you're leaving the opponent a winning position (1, 2 or 3 oranges\n    # respectively), consequently making 4 a losing position for you.\n\n    # To win, Fred must leave George in a losing position after his first turn.\n    # Losing positions are every multiple of 4 (since from there, whatever you take,\n    # your opponent can take 1, 2 or 3 to leave you in another multiple of 4 position)\n\n    # To make George on a losing position of multiple of 4, Fred should take\n    # a certain number of oranges to leave 12 oranges on the table, so he should take:\n    oranges_to_take = 15 % 4\n\n    return oranges_to_take\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Let n be the number of years later\n    # Oliver's age n years later: 20 + n\n    # Lin's age n years later: 26 + n\n    # Their sum of age n years later: (20 + n) + (26 + n) = 48\n    # Simplify the equation: 46 + 2n = 48\n    # Solve for n: 2n = 48 - 46\n    n = (48 - 46) / 2\n\n    return int(n)\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_in_meters = 736 / 100\n    return cm_in_meters\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = 0\n    for i in range(32, 65, 2):\n        ans += i\n        ans -= (i - 2)\n    return ans\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    cube_root = int(245 ** (1/3))\n    while (245 * cube_root**3) % 245 != 0 or not (245 * cube_root**3 // 245).is_integer():\n        cube_root += 1\n    p = 245 * cube_root**3 // 245\n    return p\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 5):\n        e, s, a, m, o = p\n        if e != '0' and s != '0' and a != '0':\n            esse = int(e+s+s+e)\n            sasmo = int(s+a+s+m+o)\n            if esse + 2018 == sasmo:\n                return sum(int(x) for x in [s, a, s, m, o])\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_production = int(this_year_production * (1 + (1/4)))\n\n    return last_year_production\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    students_absent = 2  # one on sick leave and one on personal leave\n    students_present = total_students - students_absent\n    \n    attendance_rate = (students_present / total_students) * 100\n    return round(attendance_rate, 2)\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    ans = (8 * 15) / 5\n    return ans\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    common_difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    ans = sum(sum(1/i for i in range(2, n+1)) for n in range(2, 2018))\n    return ans\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 0.30 * 270\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda x: abs(100 - x))\n    return closest_number\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "from math import ceil\n\ndef solution():\n    daily_savings = 2.4\n    target_savings = 150\n\n    weeks_needed = ceil((target_savings / daily_savings) / 7)\n    \n    return weeks_needed\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Since Tim stands 4th from the front and 3rd from the back, there must be (4 - 1) + (3 - 1) + 1 members in the vertical line.\n    vertical_members = (4 - 1) + (3 - 1) + 1\n\n    # Since Tim stands 1st from the left and 4th from the right, there must be (1 - 1) + (4 - 1) + 1 members in the horizontal line.\n    horizontal_members = (1 - 1) + (4 - 1) + 1\n\n    # The total number of band members is the product of members in the vertical line and the horizontal line.\n    total_members = vertical_members * horizontal_members\n\n    return total_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    # Let's represent apples as 'a' and oranges as 'o'.\n    # According to the problem, the ratio of apples to oranges is 3:8. So we can write:\n    # a/o = 3/8  => 8a = 3o   (1)\n    \n    # When we remove one apple the ratio changes to 1:3. We can write:\n    # (a-1)/o = 1/3   => 3(a-1) = o  (2)\n    \n    # From equation (1) we can express a in terms of o:\n    # 8a = 3o   => a = 3o / 8  (3)\n    \n    # Let's replace a in equation (2) with its expression from equation (3):\n    # 3((3o/8)-1) = o\n    # Expanding the parenthesis we get:\n    # 9o/8 - 3 = o\n    # Solving this for o gives us:\n    # 9o/8 - o = 3\n    # Simplify by getting the same denominator:\n    # (9o - 8o) / 8 = 3\n    # o/8 = 3\n    # o = 3 * 8\n    o = 24\n    \n    return o\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    return 9 + 88\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    return 6.5 / 0.25\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    initial_sum = sum(range(1, 15))  # Sum of the first 14 natural numbers\n    target_sum = initial_sum + 2019  # Total sum after adding 2019\n\n    for i in range(1, target_sum // 8):  # Start from 1 and go up to target_sum//8 to ensure we get 8 numbers\n        consecutive_sum = sum(range(i, i + 8))  # Sum of 8 consecutive natural numbers starting from i\n        if consecutive_sum == target_sum:\n            return i  # Return the starting number of the sequence\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    common_difference = 2\n    \n    num_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_num = factorial(len(word))\n\n    for count in letter_counts.values():\n        total_num //= factorial(count)\n\n    return total_num\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    factor_sum = 836 + 162 + 2\n    ans = common_factor * factor_sum\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n    num_notes = total_amount // note_value\n    return num_notes\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    # Let x be the weight of one chicken\n    # Let y be the weight of one rabbit\n    # Let z be the weight of one kangaroo\n    \n    # According to the question,\n    # 2 * y = 6 * x  => y = 3 * x  (1)\n    # 3 * z = 4 * y  => z = (4/3) * y (2)\n    \n    # Substitute y from equation (1) into equation (2):\n    # z = (4/3) * (3 * x)\n    # z = 4 * x\n    \n    # So, one kangaroo weighs the same as 4 chickens.\n    return 4\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    sum_left = 9*5 + 15*5\n    Y = sum_left // 5\n    return Y\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    cut_wood = 3\n    weave_grass = 1\n    dry_wood = 5\n    mow_grass = 1\n    prepare_food = 1\n    soak_grass = 1\n    choose_wood = 1\n\n    # Identify activities that can be done simultaneously\n    days_for_wood = cut_wood + dry_wood + choose_wood  # 3 (cutting), 5 (drying), 1 (choosing) - drying/cutting can be done parallel\n    days_for_rope = mow_grass + soak_grass + weave_grass  # 1 (mowing), 1 (soaking), 1 (weaving) - soaking/mowing can be done parallel\n    total_days = max(days_for_wood, days_for_rope) + prepare_food  # Adding 1 day for food, which can be done on any other day\n\n    return total_days\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    snow_white_position = 7\n    total = (snow_white_position - 1) * 2\n\n    return total\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    brother_age_3_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    min_participants_in_top_school = 4\n\n    max_schools = participants // (min_participants_in_top_school - 1) + 1\n    return max_schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    ans = (first_term + last_term) * num_terms // 2\n    \n    return ans\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    total_fractional_part = 0\n    for i in range(1, 2019):\n        total_fractional_part += (2018 + i) / 5 - ((2018 + i) // 5)\n    return total_fractional_part\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for i in range(1000, 10000):\n        if (i % 6 == 0) and (int(i / 6)**0.5).is_integer() and (i * 6)**(1/3).is_integer():\n            return i\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return result\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    num1 = 2\n    num2 = 3\n    num3 = 8\n\n    ans = lcm(num1, num2, num3)\n\n    return ans\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statement\n    congruences = [(3, 4), (1, 7), (5, 9)]\n\n    # Solve the system of congruences to find the smallest positive integer\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Speed of faster train (in km per hour)\n    speed_faster = 48\n    # Speed of slower train (in km per hour)\n    speed_slower = 36\n    # The faster train travels 70 km more than the slower train\n    \n    # When two trains are travelling towards each other,\n    # their relative speed is the sum of their speeds.\n    relative_speed = speed_faster + speed_slower\n    \n    # Let the time taken until they pass each other be t hours.\n    # Then we have: distance_faster = speed_faster * t\n    # and distance_slower = speed_slower * t\n    # According to the problem, distance_faster = distance_slower + 70 km\n    # So: (speed_faster * t) = (speed_slower * t) + 70\n    # (speed_faster - speed_slower) * t = 70\n    # t = 70 / (speed_faster - speed_slower)\n    time_taken = 70 / (speed_faster - speed_slower)\n    \n    # The total distance between the two stations is the sum of the distances\n    # travelled by both trains when they pass each other.\n    total_distance = (speed_faster * time_taken) + (speed_slower * time_taken)\n    \n    return total_distance\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    zoey_coins = [50, 20, 10, 5]\n    brother_sum = sum(zoey_coins) / 2\n    for coin in zoey_coins:\n        if sum(zoey_coins) - coin == brother_sum * 2:\n            return coin\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Given position of Tim from front to back and from left to right\n    front_back_position = (4, 3)  # 4th from front, 3rd from back\n    left_right_position = (4, 7)  # 4th from left, 7th from right\n\n    # Calculate total number of rows and columns in the rectangular block\n    total_rows = front_back_position[0] + front_back_position[1] - 1  # Subtract 1 to account for double counting Tim\n    total_columns = left_right_position[0] + left_right_position[1] - 1  # Same as above\n\n    # Calculate number of band members\n    num_band_members = total_rows * total_columns\n\n    return num_band_members\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (4/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    # Let x be the number of boats and y be the number of students.\n    for x in range(1, 100):\n        # The total number of students when one boat is added and each holds 6 people.\n        students_with_one_more_boat = (x + 1) * 6\n        # The total number of students when one boat is subtracted and each holds 9 people.\n        students_with_one_less_boat = (x - 1) * 9\n        # The two expressions should be equal to the number of students.\n        if students_with_one_more_boat == students_with_one_less_boat:\n            return students_with_one_more_boat\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    # Initialize counter for pairs\n    count = 0\n    \n    # Iterate through all possible pairs of two distinct numbers from 1 to 100\n    for i in range(1, 101):\n        for j in range(i+1, 101):  # Ensure j > i to get distinct pairs\n            if (i + j) % 5 == 0:  # Check if sum is multiple of 5\n                count += 1  # Increment the counter if pair is found\n    \n    return count\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for Rasidah's and Chai Seng's initial amounts of money\n    r, c = symbols('r c')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(c, r + 48)                     # Chai Seng had $48 more than Rasidah initially\n    equation2 = Eq(c - (6/7)*c, (1/2)*(r - (3/5)*r))  # Chai Seng's remaining money is half of Rasidah's remaining money\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, c))\n    \n    # Rasidah's initial amount of money\n    return solutions[r]\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    two_digit_numbers = []\n\n    for d1 in digits:\n        for d2 in digits:\n            if d1 != '0' and d1 != d2:\n                two_digit_numbers.append(int(d1 + d2))\n\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create a symbol for the number of friends\n    friends = symbols('friends')\n    \n    # Based on the question, set up the equations\n    equation1 = Eq(18 * friends + 41, 23 * friends - 34)\n    \n    # Solve the equation to find the number of friends\n    num_friends = solve(equation1, friends)[0]\n    \n    # Find the total number of chocolates by considering the first situation\n    total_chocolates = 18 * num_friends + 41\n    \n    # Calculate how many chocolates will be left if she gives each friend 20 pieces\n    chocolates_left = total_chocolates - 20 * num_friends\n    \n    return chocolates_left\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    return 599999 + 59999 + 5999 + 599 + 59 + 5\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for thousands in range(1, 10):\n        for hundreds in range(thousands+1, 10):\n            tens = thousands + hundreds\n            # Since we need digits in increasing order, the tens must be less than 9\n            if tens >= 10 or tens <= hundreds:\n                continue\n            ones = 16 - (thousands + hundreds + tens)\n            # Check if ones is a digit and if it follows the increasing order\n            if 0 <= ones <= 9 and ones > tens:\n                return ones\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007)**2\n    return ans\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    for perm in permutations([2, 4, 6, 8]):\n        number = int(''.join(map(str, perm)))\n        if number % 4 == 0 and number > max_number:\n            max_number = number\n    return max_number\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    whole = 63\n    target = 54\n    fraction_of_whole = target / whole\n    numerator = fraction_of_whole * 7\n    return int(numerator)\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance of the uphill and downhill journey\n    uphill_distance = 3 * 5  # speed * time\n    downhill_distance = 2 * 10  # speed * time\n    \n    # Total distance\n    total_distance = uphill_distance + downhill_distance\n    \n    # Total time\n    total_time = 3 + 2  # time uphill + time downhill\n    \n    # Average speed\n    avg_speed = total_distance / total_time\n\n    return avg_speed\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 1000 + 10 * x + y\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    n = symbols('n')\n    equation1 = Eq(n % 3, 2)\n    equation2 = Eq(n % 7, 6)\n    equation3 = Eq(n % 11, 10)\n\n    ans = solve((equation1, equation2, equation3), (n))\n    return min(s.n for s in ans)\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    base_rate = 2  # dollars per kolowatt-hour for the first 5 kolowatt-hour\n    additional_rate = 1  # dollars for each additional kolowatt-hour\n    fixed_fee = 3  # dollars service fee\n    total_amount = 63  # dollars\n\n    # Total electricity cost for the first 5 kolowatt-hour\n    base_cost = 5 * base_rate\n    # Remaining amount after the base cost and fixed fee\n    remaining_amount = total_amount - base_cost - fixed_fee\n    # Additional kolowatt-hours she can use after the first 5\n    additional_kwh = remaining_amount / additional_rate\n    # Total kolowatt-hours\n    total_kwh = 5 + additional_kwh\n\n    return total_kwh\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 - (-8))\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    cookies_per_small_box = 600\n    small_boxes_needed = total_cookies // cookies_per_small_box\n    if total_cookies % cookies_per_small_box != 0:\n        small_boxes_needed += 1\n    return small_boxes_needed\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    fruit_juice_first = 20 * 0.35\n    fruit_juice_second = 30 * 0.60\n    total_fruit_juice = fruit_juice_first + fruit_juice_second\n    concentration_percent = (total_fruit_juice / total_weight) * 100\n    return concentration_percent\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    num = 4320\n    power_of_two_in_num = 0\n    power_of_three_in_num = 0\n    \n    # Prime factorization of 4320 to get powers of 2 and 3\n    while num % 2 == 0:\n        power_of_two_in_num += 1\n        num //= 2\n    while num % 3 == 0:\n        power_of_three_in_num += 1\n        num //= 3\n\n    # Since (3/2)^n will reduce the power of 2 by n and increase the power of 3 by n,\n    # we need at least as many 2s as the value of n and the resultant power of 3s must be non-negative\n    ans = min(power_of_two_in_num, power_of_three_in_num + power_of_two_in_num)\n    \n    return ans\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # According to the principle of inclusion-exclusion, the maximum number of pupils\n    # who passed all three tests is the total number of pupils - the sum of pupils who\n    # passed each individual test + twice the number of pupils who passed at least one test.\n    # This is because when calculating those who passed at least one, we have subtracted those\n    # who passed all three tests, twice. To maximize the number of pupils passing all three tests,\n    # we take this extreme scenario.\n    \n    total_pupils = 43\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n    \n    # Subtract individuals and add total to account for double subtraction of those who passed all three\n    max_all_three = total_pupils - (math_pass + science_pass + english_pass) + total_pupils\n    \n    return max(max_all_three, 0)  # at least 0 if the above result is negative\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    prime_candidates = [i for i in range(32, 41)]\n    for num in prime_candidates:\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            return num\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    total_cookies = 76\n    cookies_per_box = 6\n    num_boxes = (total_cookies + cookies_per_box - 1) // cookies_per_box\n    return num_boxes\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.5 * 0.2 * 6000\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # 3 fishes for 1 rabbit\n    fish_to_rabbit_ratio = 3\n    \n    # 2 rabbits for 3 packs of wheat\n    rabbit_to_wheat_ratio = 2 / 3\n    \n    # Find how many fishes for 1 pack of wheat\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * (1 / rabbit_to_wheat_ratio)\n    \n    return fish_to_wheat_ratio\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = 'COLLEGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    total_ways = factorial(len(word))\n    for count in letter_counts.values():\n        total_ways //= factorial(count)\n        \n    return total_ways\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original amount of grain in warehouse B be 'b'\n    b = symbols('b')\n\n    # Amount of grain in warehouse A after shipment = 50 + 12\n    warehouse_a_after = 50 + 12\n\n    # Amount of grain in warehouse B after shipment = b - 16\n    warehouse_b_after = b - 16\n\n    # Set up the equation according to the condition given\n    # Warehouse A is 2 times of Warehouse B after shipment\n    equation = Eq(warehouse_a_after, 2 * warehouse_b_after)\n\n    # Solve the equation\n    solution = solve(equation, b)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    # Let x be the total number of people and y be the total number of benches\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x - 3*y, 7)  # 3 people per bench, 7 without seat\n    equation2 = Eq(x - 7*(y-3), 0)  # 7 people per bench, 3 benches left\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):  # Including 0\n        for x2 in range(10 - x1):  # Remaining part for x2\n            x3 = 9 - x1 - x2  # The rest goes to x3\n            count += 1  # Each valid (x1, x2, x3) is a solution\n    return count\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Pencils divided by 4 leaves 1, by 5 leaves 2, by 7 leaves 4\n    congruences = [(1, 4), (2, 5), (4, 7)]\n\n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    pencils, _ = solve_congruence(*congruences)\n\n    # Find the number within the range 400-500\n    while pencils <= 500:\n        if pencils > 400:\n            return pencils\n        pencils += 4 * 5 * 7  # Least common multiple of 4, 5, and 7\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount / ratio_sum) * 3\n    return bigger_share\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell_stickers = 32\n    ginnie_stickers = dell_stickers // 2\n    lyn_stickers = ginnie_stickers // 4\n    total_stickers = ginnie_stickers + lyn_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    result = (19 + 3) / 2\n    return result\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the mass of the empty bottle, y be the mass of the apple juice that can fill the entire bottle\n    x, y = symbols('x y')\n    \n    # When 5/6 of the bottle was filled, the total mass was 4.6kg\n    equation1 = Eq(x + (5/6)*y, 4.6)\n    # When 2/3 of the bottle was filled, the total mass was 4.45kg\n    equation2 = Eq(x + (2/3)*y, 4.45)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Convert the mass of the empty bottle from kg to grams\n    mass_of_bottle_in_grams = solutions[x] * 1000\n    \n    return mass_of_bottle_in_grams\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    return 24 * 65\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # The hundreds digit must be an odd number from 1 to 9\n        for j in range(10):  # The tens digit can be from 0 to 9\n            for k in range(10):  # The units digit can be from 0 to 9\n                if i + j + k == 5: # The sum of the digits must be 5\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    # Number of digits used in one-digit, two-digit, and three-digit numbers.\n    one_digit_pages = 9  # Numbers from 1 to 9\n    two_digit_pages = 90 * 2  # Numbers from 10 to 99\n    three_digit_pages = 900 * 3  # Numbers from 100 to 999\n\n    # Calculate digits used so far until three-digit numbers.\n    total_used = one_digit_pages + two_digit_pages + three_digit_pages\n\n    # Remaining digits to be used in four-digit numbers.\n    remaining_digits = 1101 - total_used\n\n    # Calculate the number of pages with four digits.\n    four_digit_pages = remaining_digits // 4\n\n    # Total pages are the sum of all the pages with one-digit, two-digit,\n    # three-digit numbers, and the pages calculated with four digits.\n    total_pages = 9 + 90 + 900 + four_digit_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    total_pupils = room_a + room_b\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum((-1)**(i % 2) * (20 - i) for i in range(20))\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    term = 1\n    difference = 2\n    while term < 100:\n        term += difference\n        difference += 2\n    return term - difference\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # Let's denote A, B, and C as the weight of Adam, Ben, and Carl respectively.\n    \n    # According to the problem statement, we have:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    \n    # Now, to find the total weight of Adam, Ben, and Carl, we add all three equations:\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 93\n    # 2*(A + B + C) = 292\n    # A + B + C = 292 / 2\n    \n    total_weight = (102 + 97 + 93) // 2\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_spent = 23\n    book_price = 3.40\n    magazine_price = 1.60\n\n    # Assume Clara buys 'n' books and 'm' magazines\n    # n * book_price + m * magazine_price = total_spent\n    # We look for n and m which are non-negative integers\n\n    max_books = total_spent // book_price\n    for n in range(int(max_books)+1):\n        m = (total_spent - n * book_price) / magazine_price\n        if m.is_integer():\n            return int(m)\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    sister_notebooks = andy_notebooks - 38*2  # Andy gives away 38 and they end up with the same amount\n    return sister_notebooks\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(100):  # Assume a realistic age range for Mr. Lv\n        base_10_age_with_zero = int(f\"{age}0\")  # Append a \"0\" to the end of the age in base 10\n        base_3_age = int(str(age), 3)  # Convert the original age from base 10 to base 3\n        if base_3_age == base_10_age_with_zero:\n            return age  # Found the correct age\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n\n    equation1 = Eq(justin, crystal + 64)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    total_pages = solutions[justin] + solutions[crystal] + solutions[ashley]\n\n    return total_pages\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = (5/8 + 1/17) * 8 + 9/17\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            j = 7007 // i\n            if j % 7 == 0 and 10 <= j < 100:\n                factors.append((i, j))\n\n    sum_of_factors = sum(factors[0])  # There will be only one pair of factors satisfying the condition\n    return sum_of_factors\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "from math import factorial\n\ndef solution():\n    # Since the table is circular, fix one person and arrange the remaining 6.\n    # The number of ways to arrange 6 people is 6! (factorial of 6).\n    num_ways = factorial(6)\n    return num_ways\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of orchids as 'o', tulips as 't', and roses as 'r'.\n    o, t, r = symbols('o t r')\n\n    # We know the ratio of the number of orchids to the number of tulips is 3:5.\n    ratio_eq = Eq(o / t, 3 / 5)\n\n    # Total number of flowers before selling.\n    total_eq = Eq(o + t + r, 3616)\n\n    # After selling, 40% of the orchids, 1/5 of the tulips, and 25% of the roses.\n    # The remaining number of flowers is 2644.\n    remaining_eq = Eq((o - 0.4 * o) + (t - 0.2 * t) + (r - 0.25 * r), 2644)\n\n    # Solving the system of equations.\n    solutions = solve((ratio_eq, total_eq, remaining_eq), (o, t, r))\n\n    # We are interested in the number of orchids at first, so we return 'o'.\n    return solutions[o]\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n\n    for prime1 in range(2, 55):\n        prime2 = 55 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime1 * prime2\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10 - 2):\n        for x2 in range(1, 10 - x1 - 1):\n            x3 = 10 - x1 - x2\n            count += 1\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # 1 cookie costs $9\n    cookie_price = 9\n\n    # 3 pieces of cheesecake is equal to 5 cookies\n    cheesecake_price = (5 * cookie_price) / 3\n\n    # 3 pieces of chocolate cake is equal to 2 pieces of cheesecake\n    chocolate_cake_price = (2 * cheesecake_price) / 3\n    \n    return chocolate_cake_price\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n    \n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n    \n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    fraction_per_day = 1/4 / 3\n    total_days = 1 / fraction_per_day\n    return total_days\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    # Initial digits that are already in the seven-digit number\n    fixed_digits = [2, 0, 1, 9]\n    # Calculate the sum of the fixed digits\n    fixed_sum = sum(fixed_digits)\n    \n    # Since the number must be divisible by 9, the sum of the digits must be divisible by 9.\n    # The maximum sum the three digits can have is 9 + 8 + 7 since all digits must be different and not repeating the fixed digits.\n    # Starting from this maximum sum, decrement to find the highest possible sum divisible by 9\n    for s in range(9+8+7, -1, -1):\n        if (fixed_sum + s) % 9 == 0:\n            # Construct a list of the remaining digits that are not used in the fixed part\n            remaining_digits = [d for d in range(10) if d not in fixed_digits]\n            # Generate the digit combinations with the found sum `s`\n            for A in remaining_digits:\n                for M in remaining_digits:\n                    if M != A:\n                        for C in remaining_digits:\n                            if C != A and C != M and A + M + C == s:\n                                # Calculate the final sum of A, M, and C\n                                return A + M + C\n    return None\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    # Let x be the amount of candy each eats, v be the candies Valeria has, and m be the candies Mike has.\n    # We get the two equations:\n    # v - x = 22\n    # m - x = 6\n    # v + m = 36\n    # We'll find v using these equations\n\n    # m = 6 + x\n    # Replacing this expression in the total candies equation:\n    # v + (6 + x) = 36\n    # v + x = 30\n    # Now we have two simpler equations:\n    # v - x = 22\n    # v + x = 30\n\n    # Solve for v\n    v = (22 + 30) // 2\n    return v\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    ans = 237 * 3\n    return ans\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    return 42 // (2 * 7)\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_now, mother_now = symbols('melissa_now mother_now')\n\n    # When Melissa was 8, her mother was 32, so the age difference is 32 - 8 = 24 years\n    age_difference = 32 - 8\n\n    # Melissa's mother is now three times as old as Melissa\n    equation1 = Eq(mother_now, 3 * melissa_now)\n\n    # The age difference should remain the same\n    equation2 = Eq(mother_now - melissa_now, age_difference)\n\n    solutions = solve((equation1, equation2), (melissa_now, mother_now))\n\n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n    joel_removed = remaining_plants * 2 + 2\n    remaining_plants_after_valerie = remaining_plants + joel_removed\n    valerie_removed = remaining_plants_after_valerie * 2 + 3\n    initial_plants = remaining_plants_after_valerie + valerie_removed\n\n    return initial_plants\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    values = {\n        'recurring_decimal': 4.7 + (3/9), # converting to decimal \n        'decimal_1': 4.73,\n        'decimal_2': 4.77,\n        'decimal_3': 4.737\n    }\n    ans = min(values, key=values.get)\n    return values[ans]\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52\n\n    # The total distance the train needs to cover to completely clear the tunnel\n    total_distance = train_length + tunnel_length\n\n    # Time = Distance / Speed\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # The decimal representation of 6/7 is 0.857142 repeated\n    decimal_pattern = \"857142\"  # Pattern that repeats\n    total_digits = 58  # Number of digits we want to sum\n\n    # The sum of numbers in one complete pattern\n    sum_of_pattern = sum(int(digit) for digit in decimal_pattern)\n\n    # How many complete patterns fit into the total digits\n    complete_patterns = total_digits // len(decimal_pattern)\n\n    # How many digits are in the incomplete pattern\n    remaining_digits_count = total_digits % len(decimal_pattern)\n\n    # Calculate the sum of digits for the complete patterns\n    sum_complete_patterns = sum_of_pattern * complete_patterns\n\n    # Calculate the sum of digits for the remaining incomplete pattern\n    sum_remaining_digits = sum(int(decimal_pattern[i]) for i in range(remaining_digits_count))\n\n    # Sum of all\n    total_sum = sum_complete_patterns + sum_remaining_digits\n\n    return total_sum\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    # Let the total number of eggs at first be x\n    # After selling 16 eggs more than half, he sold (x/2 + 16)\n    # Remaining eggs are x - (x/2 + 16)\n    # Then he sold 7 eggs fewer than half of the remaining, i.e., ((x - (x/2 + 16))/2 - 7)\n    # This leaves him with 18 eggs: x - (x/2 + 16) - ((x - (x/2 + 16))/2 - 7) = 18\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x - (x/2 + 16) - ((x - (x/2 + 16))/2 - 7), 18)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    # There are 2 outcomes for each coin toss - heads (H) or tails (T)\n    outcomes_per_toss = 2\n    \n    # Since the coin is tossed two times, we multiply the outcomes of each toss\n    total_outcomes = outcomes_per_toss ** 2\n    \n    return total_outcomes\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p1, p6 = symbols('p1 p6')  # P1 students and P6 students\n\n    # Equation for the number of students\n    equation1 = Eq(p1 + p6, 120)\n    # Equation for the number of buckets\n    equation2 = Eq(p6 * 2 + p1 / 2, 180)\n\n    solutions = solve((equation1, equation2), (p1, p6))\n\n    return solutions[p1]\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n\n    pencils = 55\n    pens = 143\n\n    ans = gcd(pencils, pens)\n\n    return ans\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    remainder = 2\n    quotient = 9\n    divisor = 4\n\n    correct_product = quotient * divisor\n    correct_answer = correct_product + remainder\n\n    return correct_answer\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    count = 0\n    ways = []\n\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                count += 1\n                ways.append((die1, die2))\n    ans = count\n    return ways, ans\n\nways, ans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Given:\n    # Owen gives 3 fish for 1 rabbit.\n    # Oscar gives 2 rabbits for 3 packs of wheat.\n    # We need to find the number of fish for 1 pack of wheat.\n    \n    # If Oscar gives 2 rabbits for 3 packs of wheat,\n    # it means Oscar would give 1 rabbit for 1.5 packs of wheat.\n    \n    # Now knowing Owen gives 3 fish for 1 rabbit,\n    # the number of fish Owen should give for 1.5 packs of wheat would be:\n    # 3 fish * 1.5 packs of wheat per rabbit = 4.5 fish for 1.5 packs of wheat.\n    \n    # Hence, for 1 pack of wheat, Owen should give:\n    # 4.5 fish / 1.5 packs of wheat = 3 fish per pack of wheat\n    \n    # Therefore, Owen should give Dennis 3 fish for a pack of wheat.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    # Calculate the ratio of boxes to kilograms\n    boxes_per_kg = 4 / 14\n    \n    # Calculate the number of boxes needed for 66.5 kilograms\n    boxes_needed = 66.5 * boxes_per_kg\n    \n    # Since the number of boxes must be an integer, take the ceiling of the result\n    from math import ceil\n    num_boxes = ceil(boxes_needed)\n    \n    return num_boxes\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    # Photo\n    from sympy import Symbol, Eq, solve\n\n    # Let s be the side length of the cube.\n    s = Symbol('s', positive=True)\n    \n    # Apply the Pythagorean Theorem to the triangles PAB, PAC, PAD and PAG:\n    PA = Symbol('PA')\n\n    # In triangle PAB, PA^2 + s^2 = PB^2\n    eq1 = Eq(PA**2 + s**2, 60*60*10)\n\n    # In triangle PAC, PA^2 + s^2 + s^2 = PC^2\n    eq2 = Eq(PA**2 + s**2 + s**2, 60*60*5)\n\n    # In triangle PAD, PA^2 + s^2 + s^2 + s^2 = PD^2\n    eq3 = Eq(PA**2 + s**2 + s**2 + s**2, 120*120*2)\n\n    # In triangle PAG, PA^2 + s^2 + s^2 + s^2 + s^2 = PG^2\n    eq4 = Eq(PA**2 + s**2 + s**2 + s^2 + s**2, 36*36*7)\n\n    # Solve the system of equations to find the value of PA.\n    solutions = solve((eq1, eq2, eq3, eq4), (PA, s))\n    # We take the positive solution for PA since it's a distance.\n    PA_value = [sol[0] for sol in solutions if sol[0] > 0]\n    \n    return PA_value[0]\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    age_difference = mike_current_age - eddie_current_age\n\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    \n    return mike_future_age\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from sympy import isprime\n\ndef solution():\n    digits = ['2', '7', '9']\n    primes = set()\n\n    # create all permutations of the digits with 1, 2, and 3 digits\n    for d1 in digits:\n        if isprime(int(d1)):\n            primes.add(int(d1))\n        for d2 in digits:\n            if isprime(int(d1 + d2)):\n                primes.add(int(d1 + d2))\n            for d3 in digits:\n                num = int(d1 + d2 + d3)\n                if isprime(num) and num < 100:\n                    primes.add(num)\n    \n    return len(primes)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    # Let x be the total number of students initially in the canteen.\n    # Initially, 40% of the students were boys, which is 0.4 * x.\n    # After 16 boys left, the number of boys becomes 0.4 * x - 16.\n    # Also, 16 girls entered the canteen, so the total number of students becomes x + 16.\n    # Finally, the boys made up 2/15 of the students in the canteen.\n    # Therefore, we can set up the equation: (0.4 * x - 16) / (x + 16) = 2/15.\n    # To solve this equation for x.\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((0.4 * x - 16) / (x + 16), 2/15)\n    total_students_initially = solve(equation, x)\n\n    # Once we have the total number of students initially,\n    # we can find the number of girls initially by subtracting the\n    # number of boys from the total number of students.\n    total_students_now = total_students_initially[0] + 16  # as 16 girls entered\n    boys_now = 0.4 * total_students_initially[0] - 16  # because 16 boys left\n    girls_now = total_students_now - boys_now  # total minus the number of boys now\n\n    return int(girls_now)\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for N in range(1000, 10000):\n        for i in range(4):  # Loop to remove one digit from N to create M\n            str_N = str(N)\n            M = str_N[:i] + str_N[i+1:]\n            if N - int(M) == 2021:\n                return N\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    # Convert mixed numbers to improper fractions:\n    num1 = 3 + 1/3\n    num2 = 4 + 1/2\n    num3 = 62/75\n    num4 = 3.5\n    num5 = 4 + 2/3\n    num6 = 2 + 2/15\n    num7 = 1 + 1/20\n    \n    # Perform the calculations step by step\n    numerator = (num1 * 1.9 + 19.5 / num2)\n    denominator = (num3 - 0.16)\n    fraction1 = numerator / denominator\n\n    sum_terms = num4 + num5 + num6\n    fraction2 = sum_terms / (0.5 * (num7 + 4.1))\n\n    # Calculate the final result by dividing fraction1 by fraction2\n    ans = fraction1 / fraction2\n\n    return ans\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'b' be the cost of one banana and 'p' be the cost of one pear\n    b, p = symbols('b p')\n\n    # We have two equations based on the given information\n    equation1 = Eq(b + 2 * p, 94)\n    equation2 = Eq(b + p , 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    number_of_tickets = 16\n    cost_per_ticket = 112\n    total_cost = number_of_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    percent_swim = 0.82\n    percent_jog = 0.54\n    percent_neither = 0.16\n\n    # Students who like swimming\n    swim_students = total_students * percent_swim\n\n    # Students who like jogging\n    jog_students = total_students * percent_jog\n\n    # Students who like neither\n    neither_students = total_students * percent_neither\n\n    # Using the inclusion-exclusion principle to find students who like both\n    both_students = (swim_students + jog_students) - (total_students - neither_students)\n\n    return int(both_students)\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    ans = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65) - (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    return ans\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    num_trees = (road_length // distance_between_trees) + 1\n    return num_trees\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    A_rate = 1 / 15   # Worker A can do 1/15th of the job in a day\n    B_rate = 1 / 10   # Worker B can do 1/10th of the job in a day\n\n    # They work together for 4 days\n    work_done = 4 * (A_rate + B_rate)\n\n    # Remaining work to be done by B alone\n    remaining_work = 1 - work_done\n\n    # Time for B to finish the remaining work\n    days_for_B_to_finish = remaining_work / B_rate\n\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    linda_rate = 1 / 5\n    cici_rate = 1 / 6\n    total_rate = linda_rate + cici_rate\n    total_time = 2 * 60  # 2 hours converted to minutes\n\n    problems_solved = total_rate * total_time\n\n    return int(problems_solved)\n    \nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n\n    # Let x be the number of apples Amy gives to John.\n    # After giving x apples, Amy will have 37 - x apples and John will have 15 + x apples.\n    # We know Amy should have 4 more apples than John: (37 - x) = (15 + x) + 4\n    # Solving for x gives x = (37 - 4 - 15) / 2\n\n    x = (amy - 4 - john) / 2\n    return x\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    wait_time = 45 - (18 % 45)\n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    ans = 273 // 7\n    return ans\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    # List all odd numbers less than 17 and more than 13\n    odd_numbers = [x for x in range(14, 17) if x % 2 != 0]\n    ans = odd_numbers[0]  # since the list will contain only one such odd number\n    return ans\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Total amount of grass the pasture has\n    total_grass = 14 * 15  # This can feed 14 goats for 15 days\n    daily_grass_for_one_goat = total_grass / (14 * 15)  # Grass one goat eats daily\n    daily_grass_for_one_rabbit = daily_grass_for_one_goat / 4  # Grass one rabbit eats daily\n    \n    # Total daily grass consumption by 17 goats and 20 rabbits\n    total_daily_consumption = (17 * daily_grass_for_one_goat) + (20 * daily_grass_for_one_rabbit)\n    \n    # Total number of days the pasture can feed 17 goats and 20 rabbits\n    number_of_days = total_grass / total_daily_consumption\n    \n    return int(number_of_days)\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y, z = symbols('x y z')\n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n\n    total_cost = cost_per_person * number_of_people\n\n    return total_cost\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    known_numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_numbers = 10\n    mean_of_numbers = 37\n\n    total_sum = mean_of_numbers * total_numbers\n    sum_of_known_numbers = sum(known_numbers)\n    missing_number = total_sum - sum_of_known_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n    \n    equation1 = Eq(chan/4 - toh/3, 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    slide = 0\n    \n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10\n        if height_climbed >= 45:\n            break\n        slide += 1\n        height_climbed -= slide\n    \n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 3 * (19 - x), 65)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tasha_erasers, sandra_erasers, riley_erasers = symbols('tasha_erasers sandra_erasers riley_erasers')\n\n    equation1 = Eq(sandra_erasers, tasha_erasers / 3)\n    equation2 = Eq(riley_erasers, 3 * sandra_erasers / 5)\n    equation3 = Eq(tasha_erasers, riley_erasers + 60)\n    \n    solutions = solve((equation1, equation2, equation3), (tasha_erasers, sandra_erasers, riley_erasers))\n    \n    return solutions[riley_erasers]\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_for_nine_books = 38.79\n    cost_per_book = total_cost_for_nine_books / 9\n    cost_for_seven_books = cost_per_book * 7\n    return cost_for_seven_books\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n    total_savings = january_savings + february_savings + march_savings\n    number_of_months = 3\n\n    mean_saving = total_savings / number_of_months\n    \n    return mean_saving\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9**2) - 7\n    return x\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    # Define the custom operation\n    def custom_triangle(a, b):\n        num_str = str(a)\n        total = 0\n        \n        for i in range(1, b + 1):\n            total += int(num_str * i)\n            \n        return total\n    \n    # Calculate the answer for the problem 4â³3\n    ans = custom_triangle(4, 3)\n    return ans\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "from fractions import Fraction\n\ndef convert_recurring_decimal_to_fraction(whole, recurring):\n    # Convert integer and recurring parts separately then combine them\n    integer_part = Fraction(whole)\n    recurring_str = str(recurring)\n    recurring_length = len(recurring_str)\n    recurring_part = Fraction(int(recurring_str), 10**recurring_length - 1)\n    return integer_part + recurring_part\n\ndef solution():\n    # Convert all recurring decimals to fractions and sum them up\n    sum_of_fractions = sum([\n        convert_recurring_decimal_to_fraction(0, 1),\n        convert_recurring_decimal_to_fraction(1, 2),\n        convert_recurring_decimal_to_fraction(2, 3),\n        convert_recurring_decimal_to_fraction(3, 4),\n        convert_recurring_decimal_to_fraction(4, 5),\n        convert_recurring_decimal_to_fraction(5, 4),\n        convert_recurring_decimal_to_fraction(7, 8)\n    ])\n    \n    # Convert the fraction back to decimal if needed\n    ans = float(sum_of_fractions)\n    return ans\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    # The original password characters mapped to numbers\n    angel_to_num_map = {'A': '0', 'n': '1', 'g': '4', 'e': '7', 'l': '5'}\n    devil_to_num_map = {k: v for v, k in angel_to_num_map.items()}  # reverse the mapping for devil\n    \n    devil_password = 'Devil'\n    mapped_password = ''.join(devil_to_num_map.get(char, '') for char in devil_password)\n    \n    # Andy's attempt\n    attempt = '4005220912'\n    \n    if attempt == mapped_password:\n        return True  # Andy can unlock the chest\n    else:\n        return mapped_password  # Andy cannot unlock the chest, provide the correct password\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    for n in range(2, 6):  # start from 2 because 6 as the sum of at least two numbers\n        for x1 in range(1, 6):\n            for x2 in range(x1, 6 - x1 + 1):  # start from x1 to handle different numbers and sum limitation\n                if n == 2:\n                    if x1 + x2 == 6:\n                        count += 1\n                for x3 in range(x2, 6 - x1 - x2 + 1): \n                    if n == 3:\n                        if x1 + x2 + x3 == 6:\n                            count += 1\n                    for x4 in range(x3, 6 - x1 - x2 - x3 + 1): \n                        if n == 4:\n                            if x1 + x2 + x3 + x4 == 6:\n                                count += 1\n                        for x5 in range(x4, 6 - x1 - x2 - x3 - x4 + 1): \n                            if n == 5:\n                                if x1 + x2 + x3 + x4 + x5 == 6:\n                                    count += 1\n    return count\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    numbers = list(range(2017, 2036))\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if (numbers[i] + numbers[j] + numbers[k]) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    sheep = 23\n    pens = 11\n\n    min_sheep_most_pen = (sheep + pens - 1) // pens\n\n    return min_sheep_most_pen\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, solve\n\n    a = symbols('a', real=True, positive=True)\n    x = symbols('x')\n\n    # Given equation\n    eq = sqrt(x) - (sqrt(a) - 2/sqrt(a))\n\n    # Solve the equation for x in terms of a\n    x_value = solve(eq, x)[0]\n\n    # Calculate sqrt(x^2 + 8x) in terms of a\n    expression = sqrt(x_value ** 2 + 8 * x_value)\n    \n    # Simplify the expression to get the answer in terms of a\n    ans = expression.simplify()\n\n    return ans\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for number in range(300, 401):\n        if (number % 3 == 2 and number % 4 == 2 and\n            number % 5 == 2 and number % 7 == 5):\n            return number\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "def solution():\n    from math import lcm\n    days_raye = 6\n    days_simon = 12\n    days_taylor = 16\n    ans = lcm(days_raye, days_simon, days_taylor)\n    return ans\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys = 18\n    mean_age_boys = 16.2\n    total_girls = 27\n    mean_age_girls = 16.7\n    total_students = total_boys + total_girls\n\n    sum_age_boys = total_boys * mean_age_boys\n    sum_age_girls = total_girls * mean_age_girls\n    total_sum_age = sum_age_boys + sum_age_girls\n\n    mean_age_all = total_sum_age / total_students\n\n    return mean_age_all\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    # Congruences based on the given remainder conditions\n    congruences = [(1, 6), (8, 13)]\n    num = solve_congruence(*congruences)\n    \n    # Find the first number in the range [200, 300]\n    ans = num[0]\n    while ans < 200:\n        ans += num[1]\n    if ans >= 300:\n        return None\n    \n    return ans\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 3\n\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    # total mass of 3 tables equals total mass of 4 chairs\n    equation1 = Eq(3 * table, 4 * chair)\n    \n    # A table is 2kg heavier than a chair\n    equation2 = Eq(table, chair + 2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    from itertools import permutations\n\n    # \"Angel\" is the original word associate with the number 0141705021\n    original_number = '0141705021'\n    # Creating a mapping from letter to digit\n    original_mapping = {letter: str(digit) for digit, letter in enumerate(\"Angel\")}\n    \n    # Translate the original number to the word based on the mapping\n    original_word = ''.join(original_mapping.keys()[original_mapping.values().index(digit)] for digit in original_number)\n    \n    # Now find all permutations of \"Devil\" which has the same pattern as the original word \"Angel\"\n    for perm in permutations(\"Devil\"):\n        if ''.join(str(original_word.index(letter)) for letter in perm) == original_number:\n            # If the pattern matches, then the password is correct\n            return True, ''.join(str(\"Devil\".index(letter)) for letter in original_word)\n\n    # If no above permutation matches, then Andy cannot unlock the treasure chest\n    # Translate the word \"Devil\" to numbers based on the original mapping (correct password)\n    correct_password = ''.join(original_mapping[letter] if letter in original_mapping else str(\"Devil\".index(letter)) for letter in \"Devil\")\n    return False, correct_password\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # To ensure Sara gets 5 balls of the same color, we consider the worst-case scenario:\n    # Scenario: Sara picks 4 green balls, then 4 yellow balls, and finally 2 red balls (all without getting 5 of the same color).\n    # After picking these balls, any next ball Sara picks must be the 5th ball of either green or yellow, ensuring 5 balls of the same color.\n    \n    # Total balls picked in the worst case scenario:\n    total_balls = 4 + 4 + 2  # 4 green, 4 yellow, 2 red\n    \n    # To get 5 balls of the same color, Sara needs to pick one more ball:\n    total_balls += 1\n    \n    return total_balls\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n    result = a * b + c * d\n    return result\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30  # in meters\n    sam_speed = 1 # Sam's speed in m/s\n    ben_speed = 0.6 # Ben's speed in m/s\n    total_time = 10 * 60  # Total time swimming in seconds\n\n    # Relative speed is how fast the two are approaching each other\n    relative_speed = sam_speed + ben_speed  # In meters per second\n\n    # The total distance they would cover together in 10 minutes\n    total_distance_covered = relative_speed * total_time\n\n    # They meet each time they cover a distance equal to the pool's length\n    meets = total_distance_covered // pool_length\n\n    return int(meets)\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_bob_cindy = 120  # Average height of Bob and Cindy\n    height_doris = 126  # Height of Doris\n\n    # Total height of Bob and Cindy\n    total_height_bob_cindy = average_bob_cindy * 2\n\n    # Total height of all three children\n    total_height_three = total_height_bob_cindy + height_doris\n\n    # Average height of the three children\n    average_three = total_height_three / 3\n\n    return average_three\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    destin, nephew = symbols('destin nephew')\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n    \n    solutions = solve((equation1, equation2), (destin, nephew))\n    \n    sum_of_ages_in_10_years = (solutions[destin] + 10) + (solutions[nephew] + 10)\n    \n    return sum_of_ages_in_10_years\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    ans = 9.97 + 9.98 + 9.99\n    return ans\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "def solution():\n    from math import factorial\n    digits = 3  # The number of digits we have: 1, 3, 5\n    ans = factorial(digits)\n    return ans\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of pies Mrs Tan and Mrs Lim initially had.\n    tan_initial, lim_initial = symbols('tan_initial lim_initial')\n\n    # Since they both had the same number of pies initially\n    equation1 = Eq(tan_initial, lim_initial)\n\n    # Equation after Mrs Tan bought 12 pies and Mrs Lim gave away 4 pies\n    equation2 = Eq(tan_initial + 12, 2 * (lim_initial - 4))\n\n    # Solving both equations\n    solutions = solve((equation1, equation2), (tan_initial, lim_initial))\n\n    return solutions[tan_initial]\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    total_pupils = 40\n    total_average = 35\n    boys_average = 20\n    girls_average = 60\n\n    # Let the number of boys be x\n    # Then the number of girls is (total_pupils - x)\n\n    # Total number of pencils for boys and girls is total_pupils * total_average\n    # Total number of pencils for boys is x * boys_average\n    # Total number of pencils for girls is (total_pupils - x) * girls_average\n\n    # Set up the equation and solve for x\n    # x * boys_average + (total_pupils - x) * girls_average = total_pupils * total_average\n    # 20x + (40 - x) * 60 = 40 * 35\n    # 20x + 2400 - 60x = 1400\n    # -40x = -1000\n    # x = 25\n\n    boys = (total_average * total_pupils - girls_average * total_pupils) / (boys_average - girls_average)\n\n    return int(boys)\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    departure_time = 6 * 60 + 35  # 6:35am in minutes\n    arrival_time = 10 * 60 + 22   # 10:22am in minutes\n\n    duration = arrival_time - departure_time\n\n    return duration\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return ans\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = '34563456'\n    pattern_sum = sum(int(digit) for digit in pattern)\n    repeated_times = 50 // len(pattern)\n    remainder = 50 % len(pattern)\n    total_sum = pattern_sum * repeated_times + sum(int(pattern[i]) for i in range(remainder))\n    return total_sum\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from math import prod\n\n    cards = [6, 12, 35, 175, 245, 300]\n    card_products = [prod(cards[i:i+j]) for i in range(len(cards)) for j in range(1, len(cards) - i + 1)]\n\n    for card in cards:\n        for cp in card_products:\n            if cp % card == 0 and cp // card in card_products:\n                break\n        else:\n            return card\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    age_difference = father_future_age - tom_age\n    father_current_age = tom_age + age_difference\n    return father_current_age\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n\n    # Fraction of students that received 6 sweets each\n    fraction_6_sweets = 3/5\n    \n    # Number of sweets given to the fraction that received 6 sweets each\n    num_sweets_6 = fraction_6_sweets * total_sweets\n    \n    # Number of students that received 6 sweets each\n    num_students_6 = num_sweets_6 / 6\n    \n    # Remaining sweets after giving to the first fraction of students\n    remaining_sweets = total_sweets - num_sweets_6\n    \n    # Fraction of the remainder that received 4 sweets each\n    fraction_4_sweets = 1/4\n    \n    # Number of sweets given to the fraction that received 4 sweets each\n    num_sweets_4 = fraction_4_sweets * remaining_sweets\n    \n    # Number of students that received 4 sweets each\n    num_students_4 = num_sweets_4 / 4\n    \n    # Remaining sweets after giving to the second fraction of students\n    remaining_sweets -= num_sweets_4\n    \n    # Number of students that received 5 sweets each\n    num_students_5 = remaining_sweets / 5\n    \n    # Total number of students in the classroom\n    total_students = num_students_6 + num_students_4 + num_students_5\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3 / 10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    packet_25 = 25\n    packet_20 = 20\n    \n    # Find the least common multiple of the two packet sizes\n    cycle_days = lcm(packet_25, packet_20)\n\n    total_days = cycle_days\n    month = 0\n\n    # Loop through each month and subtract the days until we find the month\n    while total_days > days_in_month[month]:\n        total_days -= days_in_month[month]\n        month += 1\n    \n    # Adjust for zero-based index of the month list\n    correct_month = month + 1\n    \n    return f\"{total_days}th {correct_month}\"\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) // 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    # Convert mixed fractions to improper fractions and then to decimals\n    larger_number = 3 + 1/4\n    smaller_number = 1 + 3/4\n    \n    # Calculate the difference as a decimal\n    difference = larger_number - smaller_number\n    \n    return difference\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    composite_numbers = [n for n in range(4, 100) if any(n % d == 0 for d in range(2, int(n**0.5) + 1))]\n\n    for odd in range(999, 0, -2):  # Check odd numbers from large to small\n        found = False\n        for i in composite_numbers:\n            for j in composite_numbers:\n                for k in composite_numbers:\n                    # The three numbers must be different\n                    if i != j and j != k and i != k and (odd - i - j - k) == 0:\n                        found = True\n                        break\n                if found:\n                    break\n            if found:\n                break\n        # If not found for any combination, odd is the largest number that cannot be split.\n        if not found:\n            ans = odd\n            return ans\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(8*boys + 5*girls, 580)\n    equation2 = Eq(boys, 3*girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    first_term = 3\n    last_term = 99  # The largest number less than 100 with a remainder of 3 when divided by 4\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n    equation1 = Eq(elder + younger, 42)\n    equation2 = Eq(younger - (elder - younger), elder / 2)\n\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n    \n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n    \n    return strawberries_received\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    # Using the inclusion-exclusion principle to find the number of students in both teams\n    both_teams = (sports_team + art_team) - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for a in range(1, 7): # one side should be max half the perimeter to remain an isosceles\n        for b in range(a, 7): # the side cannot be bigger than the half perimeter either\n            c = 12 - a - b\n            if a <= c < b: # two sides need to be equal and by the Triangle Inequality Theorem\n                count += 1\n    return count\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n    \n    students_A = 8\n    students_B = 12\n    students_C = 20\n    \n    return gcd(gcd(students_A, students_B), students_C)\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    # total cost of pencils\n    total_pencil_cost = 3 * 2\n    \n    # cost of pens\n    total_pen_cost = 20 - total_pencil_cost\n\n    # cost per pen\n    cost_per_pen = total_pen_cost / 2\n    \n    return cost_per_pen\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n    \n    # Using the inclusion-exclusion principle\n    # Total students who passed the first OR the second exam\n    passed_either = total_students - failed_second_exam\n    \n    # Subtract students who passed both exams to find those who passed only the first exam\n    passed_only_first = passed_either - (passed_first_exam - passed_second_failed_first)\n    \n    return passed_only_first\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Number of routes between different sites\n    routes_AB = 7\n    routes_BC = 5\n    routes_AC = 4\n    routes_CD = 2\n    routes_AD_direct = 6\n\n    # Calculate total ways from A to D\n    # Via B and then C, Via C directly, and direct A to D\n    total_ways = (routes_AB * routes_BC * routes_CD) + (routes_AC * routes_CD) + routes_AD_direct\n\n    return total_ways\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    cattle = 5\n    days = 10\n\n    hay_per_day_per_cattle = total_hay / (cattle * days)\n\n    return hay_per_day_per_cattle\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    # Let x be the number of chocolate cupcakes and y be the number of cheese cupcakes\n    # We have two equations based on the problem statement:\n    # x + y = 255 (Total number of cupcakes)\n    # 0.6x = 0.25y (Number of cupcakes left after selling)\n    # We need to solve these two equations for x and y\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 255)\n    equation2 = Eq(0.6 * x, 0.25 * y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Number of cupcakes left after selling\n    chocolate_cupcakes_left = 0.6 * solutions[x]\n    cheese_cupcakes_left = 0.25 * solutions[y]\n\n    return chocolate_cupcakes_left\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n    number_of_boxes = total_avocados // per_box\n    return number_of_boxes\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    for age1 in range(1, 10):\n        for age2 in range(age1 + 1, 10):  # age2 must be greater than age1\n            for age3 in range(age2 + 1, 10):  # age3 must be greater than age2\n                if age1 * age2 * age3 == 210:\n                    return age1  # age1 is the youngest\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed = 3/8\n    seedlings_killed = total_seedlings * fraction_killed\n    seedlings_survive = total_seedlings - seedlings_killed\n    return int(seedlings_survive)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    daily_consumption = 12\n    initial_locusts = 100\n    \n    full_days = initial_locusts // daily_consumption\n    remaining_locusts = initial_locusts % daily_consumption\n\n    return remaining_locusts if remaining_locusts != 0 else daily_consumption\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # Assume the number of boys is b and the number of girls is g\n    # b + g = 39 (Total number of students)\n    # 1/4 * b = 2/5 * g (1/4 of the boys equals 2/5 of the girls)\n    # We can set up a system of equations and solve for b and g\n    from sympy import symbols, Eq, solve\n\n    b, g = symbols('b g')\n    equation1 = Eq(b + g, 39)\n    equation2 = Eq(1/4 * b, 2/5 * g)\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Find the difference between the number of boys and girls\n    num_boys = solutions[b]\n    num_girls = solutions[g]\n    difference = num_boys - num_girls\n\n    return difference\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    return (12*92) + (22*82) + (32*72)\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = 726 * 8\n    return round(ans, 1)\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    don, ben = symbols('don ben')\n    \n    # Initial ratio equation: don/ben = 2/3\n    equation1 = Eq(don / ben, 2 / 3)\n    \n    # After Don bought 10 stickers and Ben lost 5 stickers, the ratio became 6/7.\n    equation2 = Eq((don + 10) / (ben - 5), 6 / 7)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (don, ben))\n    \n    return solutions[don]\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n\n    return ans\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n\n    toys_to_give = (amy_toys - sally_toys) // 2\n\n    return toys_to_give\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    total_sum = 0\n    for i in range(2, 2017, 4):\n        total_sum += (i + (i + 2)) - ((i + 1) + (i + 3))\n    return total_sum\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of $5 notes and $10 notes\n    notes_5, notes_10 = symbols('notes_5 notes_10')\n\n    # Equation 1: The total number of notes Jeremy had initially\n    eq1 = Eq(notes_5 + notes_10, 116)\n\n    # Equation 2: After the spending, the relationship between $10 notes and $5 notes\n    eq2 = Eq((notes_10 - 0.6 * notes_10), (notes_5 - 0.25 * notes_5) * (4/7))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (notes_5, notes_10))\n\n    # Extract the number of each note from the solutions\n    n_5 = solutions[notes_5]\n    n_10 = solutions[notes_10]\n\n    # Calculate how much was spent from each type of note\n    spent_5 = n_5 * 0.25 * 5\n    spent_10 = n_10 * 0.6 * 10\n\n    # Sum up the amount spent to get the cost of the bag\n    cost_bag = spent_5 + spent_10\n\n    return cost_bag\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    \n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    a = 10\n    b = 10\n    c = 11\n    return a * b * c\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    total = 0\n    for i in range(1, 21):\n        total += (2 * i - 1) * (2 * i + 1)\n    return total\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length / tree_spacing) + 1\n\n    return int(num_trees)\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    # Given values\n    heather_savings = 12.15\n    zach_mul_heather = 3\n    serena_more_than_zach = 24.50\n    serena_mul_jason = 5\n    jason_more_than_william = 1.54\n\n    # Calculate Zach's savings\n    zach_savings = zach_mul_heather * heather_savings\n\n    # Calculate Serena's savings\n    serena_savings = zach_savings + serena_more_than_zach\n\n    # Calculate Jason's savings\n    jason_savings = serena_savings / serena_mul_jason\n\n    # Calculate William's savings\n    william_savings = jason_savings - jason_more_than_william\n\n    return william_savings\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "from math import factorial as f\n\ndef solution():\n    # Calculate the arrangements of 5 distinct elements (3 girls as 1 unit + 2 other students + 2 brothers)\n    distinct_arrangements = f(5)\n    \n    # Calculate permutations for the triplet sisters\n    triplet_permutations = f(3)\n    \n    # Calculate arrangements excluding the case where the brothers stand together\n    # Considering the brothers as one unit first, we arrange 4 units, then subtract cases where they're together\n    brothers_together = f(4)\n    \n    # Total valid arrangements\n    total_arrangements = (distinct_arrangements - brothers_together) * triplet_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            num = int(f\"21{i}{j}35\")\n            if num % 99 == 0:\n                return num\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_a_week = 7\n    \n    # Using the pigeonhole principle\n    min_students_in_most_populated_week = (total_students // days_in_a_week) + 1\n    \n    return min_students_in_most_populated_week\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    cups_per_gallon = 6\n    order_size = 30\n\n    gallons_needed = order_size / cups_per_gallon\n\n    return gallons_needed\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - 1/2)\n    return ans\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # The week consists of 7 days\n    days_in_week = 7\n    # Getting the maximum number of full weeks within 55 days\n    full_weeks = 55 // days_in_week\n    # One friday for each full week\n    fridays_in_full_weeks = full_weeks\n\n    # The remaining number of days after full weeks\n    remaining_days = 55 % days_in_week\n\n    # If there are more than 6 days after the full weeks,\n    # it means that there is one more Friday.\n    if remaining_days >= 6:\n        fridays_in_full_weeks += 1\n\n    # Return the maximum number of Fridays\n    return fridays_in_full_weeks\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    cost_pencil = 2\n    cost_pen = 4\n\n    pencils_for_one_pen = cost_pen // cost_pencil\n\n    return pencils_for_one_pen\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    N = 5  # Start with the remainder when divided by 7\n    lcm = 2 * 3 * 4 * 5   # LCM of 2, 3, 4, 5 (notice that 6, 8, and 9 are multiples of these)\n\n    while True:\n        if N % 7 == 5 and N % 8 == 0 and N % 9 == 0:\n            return N\n        N += lcm\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    ans = 53 * 47\n    return ans\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song = 3\n    num_songs = 2\n    num_children = 50\n\n    total_time = time_per_song * num_songs * num_children\n\n    return total_time\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percentage_wear_glasses = 20\n    total_girls = 25\n    girls_wearing_glasses = (percentage_wear_glasses / 100) * total_girls\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # Cost of 1 mug and 1 pen\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n    \n    # Cost of 7 mugs and 5 pens\n    total_cost = (7 * cost_per_mug) + (5 * cost_per_pen)\n    \n    # Change from Â£10\n    change = 10 - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    away_ratio = 1 / 5\n    pupils_away = total_pupils * away_ratio\n    pupils_going = total_pupils - pupils_away\n    return int(pupils_going)\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_after_removing_apples = 280\n    number_of_apples_removed = 3\n\n    weight_of_apples_removed = total_weight_with_apples - weight_after_removing_apples\n    weight_per_apple = weight_of_apples_removed / number_of_apples_removed\n    weight_of_basket = total_weight_with_apples - (5 * weight_per_apple)\n    \n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    # Convert the percentage 25% to a decimal\n    decimal_25_percent = 25 / 100\n    \n    # The number 0.3 is already in decimal form\n    decimal_3_tenths = 0.3\n\n    # Compare the decimals and return the larger number\n    if decimal_25_percent > decimal_3_tenths:\n        ans = '25%'\n    else:\n        ans = '0.3'\n    \n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    return 1\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    total_donuts = 6 * 6\n    donuts_eaten = 3\n    donuts_left = total_donuts - donuts_eaten\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least common multiple of 3 and 7\n    ans = 0\n    while True:\n        if str(lcm).endswith('2'):\n            ans = lcm\n            break\n        lcm += 3 * 7  # Increase by the LCM of 3 and 7 to find the next multiple\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n    years_bella_said = 5\n\n    # Calculate the amount after 5 years using the formula for compound interest\n    amount_after_5_years = principal * ((1 + interest_rate) ** years_bella_said)\n\n    # Compare it to the final amount to see if Bella is right\n    if abs(amount_after_5_years - final_amount) < 1e-2:  # Allowing small tolerance for floating point comparison\n        return True\n    else:\n        # If she is wrong, calculate the number of years it actually took to reach final amount\n        # Using the formula: final_amount = principal * ((1 + interest_rate) ** actual_years)\n        actual_years = (final_amount / principal) ** (1/interest_rate) - 1\n        return int(actual_years)\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    num_weeks = 2\n    total_days = days_in_a_week * num_weeks\n    return total_days\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    place_value_first_3 = 3 * 100\n    place_value_second_3 = 3 * 100000\n    difference = place_value_second_3 - place_value_first_3\n    return difference\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    # original relationships\n    equation1 = Eq(cookies, 3 * cakes)\n    # after selling some cookies and cakes\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    ones_digit = (2 ** 17) % 10\n    return ones_digit\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    end_number = 20\n    total_pages = (1 + end_number) * end_number // 2\n    return total_pages\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let j, a and o represent the part of wall that John, Angus and Jonah can build in one hour, respectively.\n    j, a, o = symbols('j a o')\n    \n    # John, Jonah and Angus together take 27 hours to build the wall\n    eq1 = Eq(j + a + o, 1/27)\n    \n    # Jonah and Angus together take 36 hours to build the wall\n    eq2 = Eq(a + o, 1/36)\n    \n    # Solve the system of equations to find John's rate of work\n    solutions = solve((eq1, eq2), (j, a, o))\n    \n    # Calculate the time for John to build the wall on his own\n    john_time = 1 / solutions[j]\n\n    return john_time\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            num = 108200 + a * 10 + b\n            if num % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # The maximum value of d will be when all numbers are multiples of d\n    # As the sum is 1001, the only candidates for d are its factors\n    factors = [i for i in range(1, 1002) if 1001 % i == 0]\n    # The maximum d would also divide the sum (1001) by the number of integers (10)\n    # however, since 1001 is not divisible by 10, we consider the sum being divided by d\n    # and the result must be a whole number as close to 10 as possible\n    d_candidates = [d for d in factors if (1001 // d) % 10 == 0]\n    # Return the maximum possible value of d from the candidates\n    return max(d_candidates)\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Let's denote Claire's age five years ago as C and Daniel's as D.\n    # We know that C + D = 14 (five years ago)\n    # The combined age now is (C + 5) + (D + 5) = C + D + 10\n    # Substituting the known combined age five years ago, we get the current combined age: 14 + 10 = 24\n    # In 3 years, the combined age will be 24 + 3*2 (as both will be 3 years older)\n    combined_age_in_3_years = 24 + 3 * 2\n    \n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    length_ribbon_1 = 45\n    length_ribbon_2 = 30\n\n    longest_piece_length = gcd(length_ribbon_1, length_ribbon_2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # Initialize variables to keep track of the largest total that can't be made\n    z = 1  # Assume a unit value for z to simplify calculations\n    largest_cannot_make = 0\n    counter_can_make = 0\n\n    # Loop to test making different totals\n    while counter_can_make < 5z:  # Using 5 since we need to find consecutive totals that can be made\n        total = largest_cannot_make + 4z\n\n        # Check if the current total can be made with 4z and 5z coins\n        can_make = False\n        for i in range(total // (4z) + 1):  # How many 4z coins to use\n            for j in range(total // (5z) + 1):  # How many 5z coins to use\n                if 4z * i + 5z * j == total:\n                    can_make = True\n                    break\n            if can_make:\n                break\n\n        # Update variables based on whether we can make the current total\n        if can_make:\n            counter_can_make += 1\n        else:\n            largest_cannot_make = total\n            counter_can_make = 0\n\n    # The largest total that cannot be made is stored in largest_cannot_make\n    return largest_cannot_make // z  # Divide by z to get the answer in terms of z\n\n# Call the solution function and store the result in ans variable\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    # Let x be the original number of boys\n    # then (152 - x) will be the original number of girls (since total students are 152)\n    # Removing 1/11 of the boys and 5 girls, we get the equation\n    # x - (1/11)*x = (152 - x) - 5\n    # Simplify the equation to solve for x\n    x = symbols('x')\n    equation = Eq(x - (1/11)*x, (152 - x) - 5)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    weights = solve((equation1, equation2), (apple, pear))\n\n    weight_4_apples_4_pears = 4 * weights[apple] + 4 * weights[pear]\n\n    return weight_4_apples_4_pears\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n    \n    num_boxes = total_pencils // pencils_per_box\n    \n    return num_boxes\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 12 == 3:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    ans = 386 + 99\n    return ans\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    eggs_per_day = 50\n    days_to_adult = 30\n    total_days = 40\n    new_adult_fleas = 0\n\n    for day in range(1, total_days + 1):\n        if day >= days_to_adult:\n            new_adult_fleas += eggs_per_day\n\n    return new_adult_fleas\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    return (7*3) + 24\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    orange_drink_total = 12\n    water_ratio = 3 / 4\n    litres_of_water = orange_drink_total * water_ratio\n\n    return litres_of_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    number_of_rows = 22\n\n    last_term = first_term + (number_of_rows - 1) * difference\n    total_students = number_of_rows * (first_term + last_term) // 2\n\n    return total_students\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n    return total_books\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    # Number of people who speak each language\n    french = 15\n    japanese = 12\n    italian = 13\n    \n    # Number of people who speak two languages\n    french_and_japanese = 5\n    french_and_italian = 3\n    japanese_and_italian = 2\n    \n    # Number of people who speak all three languages\n    all_three = 1\n    \n    # Applying the inclusion-exclusion principle\n    total = (french + japanese + italian) - (french_and_japanese + french_and_italian + japanese_and_italian) + all_three\n    \n    return total\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    result = 30 / 100 * 1600\n    return result\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85  # in pounds\n    pencil_cost = 0.38  # in pounds\n    ruler_cost = 0.59   # in pounds\n\n    remaining_money = total_money - (pencil_cost + ruler_cost)\n    \n    return remaining_money\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert the mixed numbers to improper fractions\n    first_frac = 21 * 286 + 21\n    first_frac /= 286\n\n    second_frac = 6 * 2530 + 647\n    second_frac /= 2530\n\n    third_frac = 1 * 2829 + 1370\n    third_frac /= 2829\n    \n    # Perform the calculation\n    result = Fraction(first_frac) / Fraction(second_frac) * Fraction(third_frac)\n\n    # Convert the result to a mixed number\n    integer_part = result.numerator // result.denominator\n    fractional_part = Fraction(result.numerator % result.denominator, result.denominator)\n\n    return integer_part, fractional_part.numerator, fractional_part.denominator\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Dimensions of the cuboid\n    width = 6\n    height = 10\n    depth = 12\n\n    # Number of small cubes along each dimension\n    # Since the total number of small cubes is 720, we can factorize to get the size of the small cube\n    # We know that 6 * 10 * 12 = 720, so the small cube is 1x1x1 in size\n\n    # Number of small cubes along each dimension with exactly one face painted\n    # We don't count the edges or corners as those will have more than one face painted\n    width_painted = (width - 2) * (height - 2)\n    height_painted = (height - 2) * (depth - 2)\n    depth_painted = (width - 2) * (depth - 2)\n\n    # There are two faces for each dimension\n    total_painted = 2 * (width_painted + height_painted + depth_painted)\n\n    return total_painted\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for num in range(10, 100):\n        if num % 9 == 5 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the rate at which Star can complete the work per hour\n    # Let n be the rate at which Nini can complete the work per hour\n    s, n = symbols('s n')\n\n    # If Star types for 5 hours and Nini for 20 hours, they complete the job\n    # So, the work done by Star and Nini together in those hours is 1 job\n    equation1 = Eq(5*s + 20*n, 1)\n\n    # If Star types for 20 hours and Nini for 8 hours, they complete the job\n    # Similarly, the work done by Star and Nini in those hours is also 1 job\n    equation2 = Eq(20*s + 8*n, 1)\n\n    # Solve the system of equations to find the rates\n    solutions = solve((equation1, equation2), (s, n))\n\n    # Calculate the time it takes for Nini to finish the job by herself\n    # Since the rate is per hour, and one complete job is represented by 1\n    # The time taken by Nini to finish the job is the reciprocal of her rate\n    time_for_nini = 1 / solutions[n]\n\n    return time_for_nini\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # For the first classroom, there are 20 possibilities for the key.\n    # For the second classroom, there are 19 possibilities remaining, and so on.\n\n    # If he tries the keys one by one for all doors, for the last classroom,\n    # he would have tried 20 keys for the first classroom, 19 for the second,\n    # and so on until 1 key for the last classroom.\n\n    # This is the sum of the first 20 natural numbers.\n    num_keys = 20\n    num_attempts = sum(range(1, num_keys + 1))\n\n    return num_attempts\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    num_candy = 140\n    # Prime factorization of 140 = 2^2 * 5 * 7\n    # Each pile must have an odd number of candies, which means the factors of 14 (2 * 7) \n    # can't be distributed among an even number of piles, and 5 can be distributed in any way.\n    # Therefore, we are looking for the number of divisors of 5, which is the prime factorization\n    # of the odd part of 140.\n    \n    # The divisors of 5 are 1 and 5, hence there are 2 ways to distribute the candies\n    # into an odd number of piles:\n    # 1 pile of 140 candies (which is odd) or\n    # 5 piles of 28 candies, because 28 is an even number, each of those piles can be split into 2 piles\n    # resulting in 10 piles of 14 candies, which is an odd number.\n    \n    return 2  # The two possibilities: 1 or 5 piles\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3 / 7\n\n    num_girls = total_students * fraction_girls\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    num1 = 2017 / 2018\n    num2 = 20172017 / 20182018\n    denom = 201720172017 / 201820182018\n\n    ans = (num1 + num2) / denom\n    return ans\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Tom takes 4 stones from Stack B, so the situation is as follows:\n    # Stack A: 20 stones\n    # Stack B: 16 stones\n    # To guarantee a win, Jerry needs to make both stacks have the same number of stones\n    # Because whichever pile Tom takes from next, Jerry can just take the rest from the other pile.\n    \n    # Thus, Jerry should take from Stack A\n    stones_to_take = 20 - 16\n    \n    # Jerry takes 4 stones from Stack A\n    # Answer format: Number of stones, Stack\n    return stones_to_take, 'A'\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Since Johnson takes out the third sheet, the pages on that sheet will be 5 and 6\n    # (Sheets are usually printed double-sided, and page 1 would start on the right side (odd number))\n    \n    # Calculating the sum of the page numbers on the third sheet\n    sum_of_pages = 5 + 6\n    \n    return sum_of_pages\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n\n    return watermelon_to_apples\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    total_digits = 933\n    digits_used = 0\n    page = 1\n\n    while digits_used < total_digits:\n        digits_in_page = len(str(page))\n        # Check if adding this page exceeds the total digits\n        if digits_used + digits_in_page > total_digits:\n            break\n        # Update the digits used and the current page number\n        digits_used += digits_in_page\n        page += 1\n    \n    return page - 1\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    apple_juice_cost = 5\n    orange_juice_cost = 3\n    peach_juice_cost = 10\n\n    apple_juice_cups = 30\n    orange_juice_cups = 50\n    peach_juice_cups = 20\n\n    total_cost = (apple_juice_cost * apple_juice_cups) + \\\n                 (orange_juice_cost * orange_juice_cups) + \\\n                 (peach_juice_cost * peach_juice_cups)\n\n    total_cups = apple_juice_cups + orange_juice_cups + peach_juice_cups\n\n    average_cost_per_cup = total_cost / total_cups\n\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for page in range(1, 301):\n        if '3' in str(page):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Since there are at least 15 pens of each color in Box A initially,\n    # and 20 are taken from Box A, if all 20 taken are of one color,\n    # the minimum number in Box A would be 10.\n    # To ensure there are at least 15 pens of each color in Box A,\n    # we need to return 5 of each color back to Box A, which sums up to 20 pens.\n    # So, we take 20 pens of any one color and return 5 pens of each color.\n    \n    pens_to_return = 5 * 4  # 5 pens of each of the 4 colors\n    return pens_to_return\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    num_digits = 0\n    for i in range(1, 92):\n        num_digits += len(str(i))\n    return num_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15  # Convert 9:15 pm to minutes\n    end_time = (11 * 60) + 6    # Convert 11:06 pm to minutes\n    duration = end_time - start_time\n\n    return duration\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    ans = 1/8\n    return ans\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    milk_chocolates = 12\n    soft_centres = 16\n    \n    # If all milk chocolates have soft centres, then the remaining soft centres must be plain.\n    if milk_chocolates <= soft_centres:\n        plain_soft_centres = soft_centres - milk_chocolates\n    else:\n        plain_soft_centres = 0  # This line isn't strictly necessary due to the given numbers.\n    \n    return plain_soft_centres\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    # Let the length of a side for the square made of boys be b,\n    # and the length of a side for the square made of boys and girls together be g.\n    # Then the total number of boys will be b^2 and the total number of girls will be (g - 2)^2.\n    # According to the problem, we have b^2 - (g - 2)^2 = 32.\n\n    # However, we also know that b = g - 1 because the boys surround the girls in the next outer layer.\n\n    # Substitute b into the above equation and solve for g:\n    # (g - 1)^2 - (g - 2)^2 = 32\n    # Simplify and solve for g:\n    # g^2 - 2g + 1 - (g^2 - 4g + 4) = 32\n    # 2g - 3 = 32\n    # 2g = 35\n    # g = 17.5 which is not an integer, so there's an issue with direct substitution.\n    \n    # We are looking for an integer solution where b is an integer and g is also an integer.\n    # Let's try a different approach by trying each possible value of g starting from the smallest possible value.\n    \n    boys, girls = 0, 0\n    for g in range(1, 100):  # We limit the search to 100 for practical reasons.\n        b = g - 1\n        boys = b * b\n        girls = (g - 2) * (g - 2)\n        if boys - girls == 32:\n            total_students = boys + girls\n            return total_students\n    return None\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    violin_players = 11\n    violin_percentage = 12.5\n    \n    total_pupils = violin_players * 100 / violin_percentage\n    \n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n    \n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n    \n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    dividend, divisor = symbols('dividend divisor')\n\n    # Quotient and remainder\n    quotient = 29\n    remainder = 11\n\n    # Equation 1: Dividend equals divisor times quotient plus remainder\n    equation1 = Eq(dividend, divisor * quotient + remainder)\n\n    # Equation 2: Sum of dividend and divisor\n    equation2 = Eq(dividend + divisor, 431)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (dividend, divisor))\n\n    # Get the divisor and dividend from the solutions\n    solved_divisor = solutions[divisor]\n    solved_dividend = solutions[dividend]\n\n    # Difference between the two numbers\n    difference = abs(solved_dividend - solved_divisor)\n\n    return difference\n\nans = solution()"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of each type of coin\n    x = symbols('x')\n    \n    # Each coin type contributes a different amount towards the total sum\n    total_sum = Eq(1 * x + 2 * x + 5 * x + 10 * x, 90)\n\n    # Solve for x\n    num_coins_per_type = solve(total_sum, x)\n\n    # Total number of coins is the number of each type times 4 (since there are 4 types)\n    total_coins = num_coins_per_type[0] * 4\n\n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the variables for the number of apples (a) and pears (p)\n    a, p = symbols('a p')\n\n    # Create the equations based on the problem statement\n    # Equation 1: Initially, there were a total of 105 apples and pears\n    equation1 = Eq(a + p, 105)\n    # Equation 2: After selling, there were 5/6 as many apples as pears\n    # 5/6 * (a - (1/3)a) = (p - (2/5)p)\n    equation2 = Eq(5/6 * (a - a/3), p - (2/5) * p)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, p))\n    apples = solutions[a]\n    pears = solutions[p]\n\n    # Calculate the total number of apples and pears sold\n    apples_sold = apples / 3\n    pears_sold = 2 / 5 * pears\n\n    # Return the total amount sold\n    return int(apples_sold + pears_sold)\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(B/A, 5/4)\n    equation2 = Eq(C/B, 6/5)\n    equation3 = Eq(C - A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    ans = sum(solutions.values())\n    return ans\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n    \n    # Treat A, B, C, D as one super-student, since they always stick together\n    # Now we have 9 \"students\" to line up\n    ways_to_arrange_students = factorial(9)\n    \n    # Now, within the super-student, A, B, C, D can be arranged in 4! ways\n    ways_to_arrange_ABCD = factorial(4)\n    \n    total_ways = ways_to_arrange_students * ways_to_arrange_ABCD\n    \n    return total_ways\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    total_matches = (6 * (6 - 1)) // 2\n    total_points = total_matches * 2\n    points = [7, 6, 5, 4, 3]\n    remaining_points = total_points - sum(points)\n    return remaining_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Original ratio\n    equation1 = Eq(A/B, 5/3)\n\n    # New ratio after transferring 10 grams from A to B\n    equation2 = Eq((A - 10)/(B + 10), 7/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    A_val, B_val = solutions[A], solutions[B]\n\n    # Calculate the total weight of both bags\n    total_weight = A_val + B_val\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    number_of_girls = (number_of_boys / boys_to_girls_ratio) * 5\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n\n    # Using the formula for the sum of an arithmetic sequence:\n    # total_players = n/2 * (first_line_players + last_line_players)\n    # where n is the number of lines, we solve for n:\n    # n = 2 * total_players / (first_line_players + last_line_players)\n    n = 2 * total_players / (first_line_players + last_line_players)\n\n    # Now, find the common difference using the formula for the nth term of an arithmetic sequence:\n    # last_line_players = first_line_players + (n - 1) * d\n    # Solving for d:\n    d = (last_line_players - first_line_players) / (n - 1)\n\n    return d\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 2 and num % 5 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    product = 48 * 925 * 38 * 435\n    count = 0\n    while product % 10 == 0:\n        count += 1\n        product //= 10\n    return count\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]\n    ans = max(masses)\n    return ans\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    girls_ratio = 6 / 11\n    boys_ratio = 1 - girls_ratio\n\n    boys = total_children * boys_ratio\n  \n    return int(boys)\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from sympy import *\n\n    # Total nights in 1000 days\n    total_nights = 1000\n\n    # Dog barks 3 times every week (every 7 days)\n    barks_per_week = 3\n    weeks = total_nights / 7\n    total_barks = weeks * barks_per_week\n\n    # Probability of dog barking when a thief is around\n    prob_bark_given_thief = 0.9\n    \n    # Since there are 2 thefts, the probability of the dog barking during\n    # the occurrence of the theft is the number of thefts times the \n    # probability of barking given that there is a theft\n    # over the total barks in 1000 days.\n    thefts = 2\n    prob_bark_during_theft = (thefts * prob_bark_given_thief) / total_barks\n    \n    return prob_bark_during_theft\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the symbols for the number of each type of candy\n    orange, apple, grape, pineapple = symbols('orange apple grape pineapple')\n    \n    # Set up the equations according to the problem statement\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    # The total number of candies is 25\n    equation4 = Eq(orange + apple + grape + pineapple, 25)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (orange, apple, grape, pineapple))\n\n    # Return the number of apple candies\n    return solutions[apple]\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    # If Mr Ya gives 13 stickers to each pupil, he will have an excess of 190 stickers.\n    equation1 = Eq(stickers, 13*pupils + 190)\n\n    # If he gives 17 stickers to each pupil, he will have an excess of 50 stickers.\n    equation2 = Eq(stickers, 17*pupils + 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Original relationship between boys and girls.\n    equation1 = Eq(boys, girls - 65)\n    \n    # Numbers after boys and girls left the hall.\n    boys_left = boys - (2/5) * boys\n    girls_left = girls - (3/7) * girls\n    \n    # Equating the number of boys and girls left in the hall.\n    equation2 = Eq(boys_left, girls_left)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    # Calculate total number of students left in the hall.\n    total_left = boys_left.subs(boys, solutions[boys]) + girls_left.subs(girls, solutions[girls])\n    \n    return total_left\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # The two numbers with the smallest difference will have the 1 and 9 in the same position,\n    # with the remaining numbers arranged in ascending and descending order respectively.\n    # Let's start with 1 and 9 at the first position.\n    ascending_number = \"1\"\n    descending_number = \"9\"\n\n    # Now, for the other numbers 2-8, we set them in ascending order for one number\n    # and in descending order for the other, such that for each pair (ascending, descending)\n    # the difference for that particular place value is the smallest.\n    for i in range(8, 1, -1):\n        ascending_number += str(9 - i + 1)\n        descending_number += str(i)\n\n    # Now, we calculate the difference between these two numbers.\n    ans = int(descending_number) - int(ascending_number)\n        \n    return ans\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3  # There are 3 kids\n    num_ways = factorial(num_kids)  # Number of ways to arrange them is 3!\n\n    return num_ways\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define unknown variable for the total number of bricks at first\n    total_bricks = symbols('total_bricks')\n    \n    # Set up the equations based on the problem description\n    # Half the number of bricks on the first trip minus 26\n    first_trip = total_bricks / 2 - 26\n    \n    # 11 more than half the remaining number of bricks (total - first_trip) on the second trip\n    second_trip = (total_bricks - first_trip) / 2 + 11\n    \n    # They moved 68 bricks on their third trip and 25 were left.\n    third_trip = 68\n    remaining_bricks = 25\n\n    # Set up the equation representing the total number of bricks moved and remaining\n    equation = Eq(first_trip + second_trip + third_trip + remaining_bricks, total_bricks)\n\n    # Solve the equation to find the total number of bricks at first\n    num_bricks = solve(equation, total_bricks)\n\n    return num_bricks[0]\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls, b be the number of boys\n    g, b = symbols('g b')\n\n    # Equation for total number of boys and girls\n    equation1 = Eq(g + b, 1690)\n\n    # Equation representing the statement \"There are 90 more boys than girls\"\n    equation2 = Eq(b - g, 90)\n\n    # Solve the system of equations for the number of boys and girls\n    pupils = solve((equation1, equation2), (g, b))\n\n    # Get the number of girls and boys from the solutions\n    num_girls = pupils[g]\n    num_boys = pupils[b]\n\n    # Based on the ratio, compute the number of girls who can swim and who cannot\n    girls_can_swim = num_girls * 31 / (31 + 49)\n    girls_cannot_swim = num_girls * 49 / (31 + 49)\n\n    # Based on the given numbers, compute the number of boys who can swim and who cannot\n    boys_cannot_swim = num_boys / 2 + 60 # adding half the difference (120/2)\n    boys_can_swim = num_boys / 2 - 60 # subtracting half the difference (120/2)\n\n    # Total number of pupils who cannot swim\n    total_cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return int(total_cannot_swim)\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)   # Calculate the number of passengers after the first stop\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)  # Calculate the initial number of passengers\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    current_sum_ages = 22\n    target_sum_ages = 40\n\n    # Since both Geoff and his sister grow older by 1 year each year,\n    # the sum of their ages increases by 2 each year.\n    # Thus, to find out when the sum will be 40,\n    # we can divide the difference between the target sum and\n    # the current sum by 2 to find how many years it will take.\n    years_until_target_sum = (target_sum_ages - current_sum_ages) / 2\n\n    return int(years_until_target_sum)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    count = 0\n    for i in range(1, 21): # The book has 20 pages\n        count += len(str(i)) # Count the number of digits on each page\n    return count\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # Assume the number of students (desks and chairs) form a square array with side length n\n    # Mike's position, being 2nd in any direction, implies he is at (1, n-2) when counting from (0, 0)\n    # This also means the total number of students is n^2\n    # We need to find such an n where n > 2 (since Mike cannot be at the corner or at the edge)\n    # Start checking from n = 3 upwards\n    n = 3\n    while True:\n        total_students = n**2\n        # Check if when removing a row and a column (Mike's position), the rest still form a perfect square\n        remaining_students = (n - 1) ** 2\n        if total_students - remaining_students == n:\n            return total_students\n        n += 1\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    ways = [0] * 11  # The list is initialized with zeros for steps from 0 to 10\n    ways[0] = 1  # There is one way to start at step 0\n\n    for i in range(1, 11):\n        # If there are more than 1 steps behind, add the ways to climb from two steps behind to current step\n        if i - 2 >= 0:\n            ways[i] += ways[i - 2]\n        # If there are more than 2 steps behind, add the ways to climb from three steps behind to current step\n        if i - 3 >= 0:\n            ways[i] += ways[i - 3]\n\n    return ways[10]  # The answer is the number of ways to reach the 10th step\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n    minimum_dividend = (smallest_divisor * quotient) + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # Since the new number is greater by 5877, the change of the digit in the ones place to the thousands place\n    # will add 999 times the digit's value to the original number (because 1000 - 1 = 999).\n    # Hence the ones digit must be 7 because 5877 / 999 = 5 remainder 877, and 877 / 111 = 7 remainder 100,\n    # and 100 cannot be made by multiplying 111 by a number <10. Therefore, ones digit must be 7\n    # x_thousands * 1000 + x_hundreds * 100 + x_tens * 10 + 7 = x_thousands * 100 + x_hundreds * 10 + x_tens + 7000 + 5877\n    # Simplifying we get, x_thousands * 900 + x_hundreds * 90 + x_tens * 9 = 5877\n    # Dividing the whole equation by 9 we get, x_thousands * 100 + x_hundreds * 10 + x_tens = 653\n    # This means x_thousands = 6, x_hundreds = 5 and x_tens = 3\n    # So the answer to the original combination lock number is 6537\n\n    return 6537\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number_str = '1998'\n    n = len(number_str)\n    test_num = int(number_str)\n    \n    while test_num % 33 != 0:\n        number_str += '1998'\n        test_num = int(number_str)\n        n = len(number_str)\n        \n    return n\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    total_miles = 3.75\n    per_run_miles = 1/4\n    number_of_runs = total_miles / per_run_miles\n    return number_of_runs\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    # The sequence seems to follow a pattern where the n-th group is (n, n^2, n^3 * 2^(n-1))\n    first_term = group_number\n    second_term = group_number**2\n    third_term = group_number**3 * 2**(group_number-1)\n    sum_of_numbers = first_term + second_term + third_term\n    return sum_of_numbers\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    girls = boys / boy_to_girl_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    number = 100  # start checking from the smallest 3-digit number\n    while not (number % 5 == 3 and number % 6 == 4 and number % 9 == 1):\n        number += 1\n    return number\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Given proportion 10:x = 14:21\n    return (10 * 21) / 14\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for number in range(10, 100, 10):  # The number ends in 0, so it's a multiple of 10.\n        if number % 6 == 0 and number % 9 == 0:\n            return number\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    incorrect_answer = 5839\n    original_number = 5832\n    tens_to_add = 7 * 10\n\n    correct_answer = original_number + tens_to_add\n\n    return correct_answer != incorrect_answer, correct_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    n = 27\n    ans = 0\n    while n > 0:\n        ans += 1\n        n -= ans\n    return ans\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n    \n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n    \n    return solutions[andrew]\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # Convert 3 m to cm\n    lengths_cm = [147, 32.5, 67]  # Given lengths in cm\n\n    # Sum of the known lengths\n    sum_known_lengths = sum(lengths_cm)\n\n    # The length of the fourth piece is the total length minus the sum of known lengths\n    fourth_length = total_length_cm - sum_known_lengths\n\n    return fourth_length\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "from scipy.stats import binom\n\ndef solution():\n    probabilities = [0.5, 0.4, 0.2]\n    \n    # Calculate the probability of each possible number of people passing\n    most_likely_pass = 0\n    highest_probability = 0\n    for num_pass in range(4):\n        prob = 1\n        for i, p in enumerate(probabilities):\n            if num_pass & (1 << i):\n                prob *= p\n            else:\n                prob *= (1 - p)\n        if prob > highest_probability:\n            highest_probability = prob\n            most_likely_pass = bin(num_pass).count('1')\n\n    return most_likely_pass\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n    leaves_needed = (pieces_of_paper - 1) // interval\n    return leaves_needed\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    expression1 = (101 + 234 + 567) * (234 + 567 + 89)\n    expression2 = (101 + 234 + 567 + 89) * (234 + 567)\n    ans = expression1 - expression2\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    # Initialize the result\n    result = 0\n    \n    # Add fractions from 1/2 to 9/10 twice and 1/1 once\n    for i in range(1, 11):\n        # For fractions 1/2 to 9/10, each appears twice in sequence\n        if i == 1:\n            result += 1 # Add fraction 1/1 once\n        else: \n            result += (2 * (1 / i))\n    \n    return result\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, caps = symbols('watches caps')\n\n    # Initial ratio equation\n    equation1 = Eq(watches/caps, 8/11)\n    # New ratio equation after selling 88 caps\n    equation2 = Eq(watches/(caps - 88), 12/11)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05  # total length in meters\n    total_length_cm = total_length_m * 100  # convert meters to centimeters\n\n    # Let the shorter piece be x cm, then the longer piece is 2x cm\n    # The total length of the ribbon is x + 2x = 3x cm\n    # we can solve for x and find the length of the longer piece\n    shorter_piece_cm = total_length_cm / 3\n    longer_piece_cm = 2 * shorter_piece_cm\n\n    return longer_piece_cm\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Speed is constant, so total time is proportional to the total distance.\n    # The time it takes to deliver to 6 houses is given, i.e., 5 intervals (30 minutes).\n    # To deliver to 10 houses, it would be 9 intervals.\n    # Time for 10 houses (9 intervals) can be calculated by: (30 minutes / 5 intervals) * 9 intervals\n\n    time_for_six_houses = 30  # minutes\n    intervals_for_six_houses = 5  # between the first and the sixth house\n\n    intervals_for_ten_houses = 9  # intervals for ten houses\n    time_for_ten_houses = (time_for_six_houses / intervals_for_six_houses) * intervals_for_ten_houses\n    \n    return time_for_ten_houses\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    cost = litres_used * cost_per_litre\n\n    return cost\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    # We'll iterate through all possible values of the last digit since it defines all other digits.\n    for D in range(1,10): # Last digit can't be 0, hence start from 1.\n        A = D // 4 # First digit is 1/4 of last. Using integer division to ensure A is an integer.\n        if A * 4 == D: # Ensure the last digit is actually four times the first digit\n            B = A - 1 # Second digit is 1 less than first digit\n            C = D * 4 % 10 # If you multiply the original number ABCD by 4, C should be the last digit.\n            if B > 0 and C > 0 and len(set((A,B,C,D))) == 4: # No digits are the same and no digit is negative or zero.\n                # Check if the digits are reversed when multiplied by 4\n                original_number = A * 1000 + B * 100 + C * 10 + D\n                reversed_number = D * 1000 + C * 100 + B * 10 + A\n                if original_number * 4 == reversed_number:\n                    return original_number\n    return 0 # If no number satisfies the condition, return 0.\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # Total coins that can be picked in a round by both players,\n    # to leave a number that is a multiple of 12 for the opponent\n    total_pick_in_round = 11 + 10 + 1 \n    \n    # Initial number of coins to ensure Jack ends up picking last\n    jack_first_pick = 2015 % total_pick_in_round \n\n    return jack_first_pick\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093  # twelve hundred million, thirty-one thousand and ninety three in figures\n    return ans\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            hour_tens, hour_units = divmod(hour, 10)\n            minute_tens, minute_units = divmod(minute, 10)\n            if [hour_tens, hour_units, minute_tens, minute_units].count(4) >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # The equation passes through the origin (0,0),\n    # this gives us the equation y = m * 0 + b, which simplifies to b = 0.\n\n    # It also passes through point (4, 8),\n    # substituting the point into y = mx gives us 8 = 4m,\n    # solving for m we get m = 2.\n\n    m = 8 / 4\n    b = 0\n    # The resulting equation in the form y = mx + b is y = 2x,\n    # therefore the formatted equation is \"y = 2x\".\n\n    ans = f\"y = {m}x\"\n    return ans\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    number = 2015\n    count = 0\n    for digit in str(number):\n        if digit in ['0', '6', '9']:\n            count += 1\n        elif digit == '8':\n            count += 2\n    return count\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # From the pattern, we can see that the elementary pattern is âââââ,\n    # which includes 2 black balls and 3 white balls.\n    \n    # Since Pip arranged 92 white balls, we can calculate the number of times\n    # the elementary pattern repeats. Each repetition contributes 3 white balls.\n    pattern_repeats = 92 // 3 # the number of full patterns\n    \n    # Now we calculate the remaining white balls after the full patterns\n    remaining_white_balls = 92 % 3\n    \n    # Total balls for the full patterns\n    total_balls_full_patterns = pattern_repeats * 5\n    \n    # Now we add the extra balls for the remaining white balls\n    # Add 1 black ball for 1 remaining white ball or add 2 black balls and 2 white balls \n    # for the 2 remaining white balls. If there are no remaining white balls, we do not add any.\n    if remaining_white_balls == 1:\n        total_balls = total_balls_full_patterns + 1 + remaining_white_balls\n    elif remaining_white_balls == 2:\n        total_balls = total_balls_full_patterns + 2 + remaining_white_balls\n    else:\n        total_balls = total_balls_full_patterns\n        \n    return total_balls\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    return 78 + 263 - 174\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if (pears - 2) % 6 == 0 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Let's denote the age of the youngest dwarf as 'a'.\n    # Since they were born in consecutive years, the ages form an arithmetic sequence.\n    # The ages of the youngest three: a, a+1, a+2\n    # Their sum is given to be 42: a + (a + 1) + (a + 2) = 42\n    # Solving for 'a': 3a + 3 = 42  =>  3a = 39  =>  a = 13\n\n    # Now we need to find the age of the oldest one, which is \"a\" (age of the youngest) + 6 years\n    # Because there are seven dwarfs born in consecutive years\n    oldest_age = 13 + 6\n\n    return oldest_age\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    final_passengers = 22\n    remaining_after_second_stop = final_passengers / (1 - 1/3)\n    initial_passengers = remaining_after_second_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    shortened_length_mm = 4\n    shortened_length_cm = shortened_length_mm / 10\n\n    new_length_cm = original_length_cm - shortened_length_cm\n    return new_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the original number of stickers Sam had,\n    # p be the original number of stickers Peter had,\n    # and j be the original number of stickers John had.\n    s, p, j = symbols('s p j')\n\n    # We know the ratio of Sam's to Peter's stickers is 7:5.\n    equation1 = Eq(s / p, 7 / 5)\n\n    # Sam and Peter each gave 20% of their stickers to John.\n    # Sam gave 0.2 * s stickers to John.\n    # Peter gave 0.2 * p stickers to John.\n    # As a result, John's stickers increased by 80%.\n    # John's new sticker count is j + 0.2 * s + 0.2 * p,\n    # which is 1.8 times the original sticker count.\n    equation2 = Eq(j + 0.2 * (s + p), 1.8 * j)\n\n    # In the end, Sam had 20 stickers more than John.\n    # Sam's new sticker count is s - 0.2 * s, which equals 0.8 * s.\n    # John's new sticker count is j + 0.2 * s + 0.2 * p,\n    # And Sam's new sticker count is j + 0.2 * s + 0.2 * p + 20,\n    # We use equation2 for John's new sticker count.\n    equation3 = Eq(0.8 * s, 1.8 * j + 20)\n\n    # We can now solve the system of equations for s, p, and j.\n    solutions = solve((equation1, equation2, equation3), (s, p, j))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Given data\n    section1_distance = 420  # meters\n    section2_distance = 620  # meters\n    total_distance = 1200    # meters\n    section3_distance = total_distance - (section1_distance + section2_distance)  # meters\n\n    speed1 = 7  # meters per second\n    speed2 = 5  # meters per second\n    speed3 = 8  # meters per second\n\n    # Calculating time for each section\n    time_section1 = section1_distance / speed1  # seconds\n    time_section2 = section2_distance / speed2  # seconds\n    time_section3 = section3_distance / speed3  # seconds\n\n    # Total time for the race\n    total_time = time_section1 + time_section2 + time_section3  # seconds\n\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    # Current situation\n    current_average = 89\n    current_total_score = current_average * 4  # The total score from 4 tests\n    target_average = 95\n    max_score_per_test = 100\n\n    # The function will calculate the minimum number of additional tests needed for Paul\n    # to reach or exceed the target average of 95\n    additional_tests = 0\n    while True:\n        additional_tests += 1\n        # Calculate the new total score that Paul must reach to get an average of at least 95\n        required_total_score = (4 + additional_tests) * target_average\n        # Determine if it's possible to reach the required total score with the given number of additional tests\n        if required_total_score - current_total_score <= additional_tests * max_score_per_test:\n            break\n\n    return additional_tests\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_notes, two_notes = symbols('ten_notes two_notes')\n    total_notes = Eq(ten_notes + two_notes, 72)\n    spent_notes = Eq(0.1 * ten_notes + 0.25 * two_notes, 72 - 2 * ten_notes)\n\n    solutions = solve((total_notes, spent_notes), (ten_notes, two_notes))\n\n    ten_notes_left = solutions[ten_notes]\n    two_notes_left = solutions[two_notes]\n\n    gift_cost = 90 * 0.9 * ten_notes_left + 2 * 0.75 * two_notes_left\n\n    return gift_cost\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    # 1/A, 1/B, 1/C - rates of the hoses\n    # 1/A + 1/B = 1/9\n    # 1/A + 1/C = 1/12\n    # 1/B + 1/C = 1/18\n\n    # Solve for 1/A, 1/B, and 1/C\n    from sympy import symbols, solve, Eq\n\n    A, B, C = symbols('A B C')\n    eq1 = Eq(1/A + 1/B, 1/9)\n    eq2 = Eq(1/A + 1/C, 1/12)\n    eq3 = Eq(1/B + 1/C, 1/18)\n\n    solution_dict = solve((eq1, eq2, eq3), (1/A, 1/B, 1/C))  \n\n    # Total rate with all the hoses is 1/A + 1/B + 1/C\n    total_rate = solution_dict[1/A] + solution_dict[1/B] + solution_dict[1/C]\n\n    # Time taken if all three hoses are turned on is the reciprocal of the total rate\n    time_taken = 1 / total_rate\n    return time_taken\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    total_money = 164\n    total_notes = 58\n    value_2_dollar_note = 2\n    value_5_dollar_note = 5\n    for num_5_dollar_notes in range(total_notes + 1):\n        num_2_dollar_notes = total_notes - num_5_dollar_notes\n        if (num_2_dollar_notes * value_2_dollar_note) + (num_5_dollar_notes * value_5_dollar_note) == total_money:\n            return num_5_dollar_notes\n    \nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # Since there are 3 colors, to ensure we have at least one of each color,\n    # we need to take out 3 markers (one of each color).\n    # However, to ensure we have at least 2 of the same color,\n    # the next marker we take out must be the same color as one we already have.\n    # Therefore, the answer is 3 (one of each) + 1 (to guarantee a pair) = 4 markers.\n    return 4\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    first_difference = 120 - 105\n    nth_difference = 100 - 9\n\n    nth_value = 135 + nth_difference * first_difference\n\n    return nth_value\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # since the minimum number of marbles in a box is 2 and they have to be multiples of 2\n    # we can start distributing the marbles in the boxes assuming the count starts from 2\n    # and increases by 2 for each box, except for one box that will have the same count\n    # as another box to satisfy the condition that only two boxes have the same count\n    marbles = [2 * i for i in range(1, 10)]  # 2, 4, 6, ..., 18 for the first 9 boxes\n    min_same = 2 * 2                        # minimal count for the two boxes with the same number of marbles\n    \n    # Now, we add the minimum count for the same marbles to the current marbles list\n    total_marbles = sum(marbles) + min_same\n    return total_marbles\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    seq_sum = sum(range(1, 10)) + sum(range(4, 9))\n    return seq_sum\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n\n    # Using the Pigeonhole Principle: At least one cage must have\n    # ceil(total_pigeons / total_cages) pigeons\n    min_pigeons_per_cage = -(-total_pigeons // total_cages) # Ceiling division\n\n    return min_pigeons_per_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    # Number of sprinklers is one less than the number of parterres\n    num_sprinklers = 1007 - 1\n    return num_sprinklers\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    # Let the price of one muffin be x dollars\n    # The price of one cupcake will then be 3x dollars since it's thrice as much\n    \n    # From the given information, she spent 5/9 of her money on 36 cupcakes + 32 muffins\n    # Therefore, 36 * 3x + 32 * x dollars is equivalent to 5/9 of the total money Cellina had\n    \n    # Also given is that she bought more cupcakes with 1/6 of her money\n    # Since the total she spent on cupcakes is $187.50, and this includes the additional purchase,\n    # we can express: (5/9 * total_money) + (1/6 * total_money) == 187.50\n    \n    # Let the total money Cellina had be total_money\n    # We can thus create an equation involving total_money and x\n    \n    # First, let's find the common multiple for the fractions 5/9 and 1/6 which is 18\n    # Then, our equation to solve for total_money is:\n    # (5/9 * total_money) + (1/6 * total_money) = 187.50\n    # (10/18 + 3/18) * total_money = 187.50\n    # (13/18) * total_money = 187.50\n\n    # Solve for total_money\n    total_money = (187.50 * 18) / 13\n\n    # Now we know the total_money, we need to find out the cost of one muffin x\n    # From the initial spending on cupcakes and muffins\n    # (36 * 3x + 32 * x) = (5/9 * total_money)\n    spend_on_cakes_muffins = (5/9) * total_money\n    # Hence, (108 * x + 32 * x) = spend_on_cakes_muffins\n    # 140x = spend_on_cakes_muffins\n    \n    x = spend_on_cakes_muffins / 140\n    \n    # The amount spent on muffins is 32 * x\n    amount_spent_on_muffins = 32 * x\n\n    return amount_spent_on_muffins\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def is_palindrome(number):\n    return str(number) == str(number)[::-1]\n\ndef solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if is_palindrome(steps):\n            return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    remaining_fraction = 5 / 9\n    given_away = 440\n    original_collection = given_away / (1 - remaining_fraction)\n\n    return int(original_collection)\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n\n    day_one_paved = 8  # in thousands of feet\n    day_two_paved = total_length / 6 + 4  # in thousands of feet\n    total_paved = Eq(day_one_paved + day_two_paved, total_length * 5/12)\n\n    road_length = solve(total_paved, total_length)\n\n    return road_length[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "def solution():\n    from itertools import permutations\n\n    # The digits we can use to form the numbers.\n    digits = [3, 4, 5]\n    \n    # Get all permutations of length 3.\n    all_permutations = list(permutations(digits, 3))\n    \n    # The number of different three-digit numbers that can be formed.\n    ans = len(all_permutations)\n    \n    return ans\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    num = 35\n    while True:\n        if sum(int(digit) for digit in str(num)) == 35 and str(num).endswith('35'):\n            return num\n        num += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    perimeter = (144 + 204) * 2  # Calculate the perimeter of the rectangle\n    num_wheat = 116 - 4  # Subtract the 4 corner wheats\n\n    distance = perimeter / num_wheat  # Calculate the distance between two wheats\n    \n    return distance\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mary, alexis, charlotte_initial, charlotte_final = symbols('mary alexis charlotte_initial charlotte_final')\n    \n    # Mary had 7/5 as many stickers as Alexis\n    equation1 = Eq(mary, (7/5) * alexis)\n    # Mary and Alexis gave 20% of their stickers to Charlotte\n    mary_gives = mary * 20 / 100\n    alexis_gives = alexis * 20 / 100\n    # Charlotte's stickers increased by 80%\n    equation2 = Eq(charlotte_final, charlotte_initial + 0.8 * charlotte_initial)\n    # Total stickers given to Charlotte\n    equation3 = Eq(charlotte_final - charlotte_initial, mary_gives + alexis_gives)\n    # Mary had 20 stickers more than Charlotte in the end\n    equation4 = Eq(mary - mary_gives, charlotte_final + 20)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (mary, alexis, charlotte_initial, charlotte_final))\n    \n    return solutions[alexis]\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_pine_nuts = 112\n    sunny_day_pine_nuts = 20\n    rainy_day_pine_nuts = 12\n\n    # Let the number of rainy days be x.\n    # Then the number of sunny days would be total_days - x.\n    for x in range(total_days + 1):\n        if (x * rainy_day_pine_nuts) + ((total_days - x) * sunny_day_pine_nuts) == total_pine_nuts:\n            return x\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each match eliminates one person.\n    # To find the winner in a four-person tournament, three matches need to be played.\n    # First round: Two matches -> Two winners\n    # Second round: One match between the two winners from the first round -> One winner\n    # Total rounds = 3 matches\n\n    num_players = 4\n    rounds_needed = num_players - 1  # In a knockout, rounds needed are always one less than the number of players\n    return rounds_needed\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_question_correct = 10\n    second_question_correct = 15\n    both_questions_correct = 7\n\n    one_question_correct = (first_question_correct - both_questions_correct) \\\n                         + (second_question_correct - both_questions_correct)\n\n    return one_question_correct\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed of the train in meters per second\n    time = 5    # time in seconds to pass the tree\n\n    length = speed * time\n\n    return length\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    day_off = (end_date - start_date).days + 1\n\n    return day_off\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    while True:\n        a, b = b, a + b\n        if a == 21:  # Stop when reaching the last known term of the sequence\n            return b\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Define the costs for the different packages\n    cost_single = 15\n    cost_double = 28\n    cost_pack_five = 60\n    total_bottles = 17\n    \n    # We will utilize Integer Linear Programming for cost minimization\n    from scipy.optimize import linprog\n    \n    # Coefficients for the objective function (minimize cost)\n    c = [cost_single, cost_double, cost_pack_five]\n    \n    # Inequality constraints matrix (we need at least 17 bottles)\n    A = [[-1, -2, -5]]\n    b = [-total_bottles]\n    \n    # Bounds for each variable (we can't buy negative amounts)\n    x0_bounds = (0, None)\n    x1_bounds = (0, None)\n    x2_bounds = (0, None)\n    \n    # Run the linear programming optimization\n    res = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds, x2_bounds], method='highs')\n    \n    # Calculate the count of each type of package to buy\n    single_bottles = round(res.x[0])\n    double_bottles = round(res.x[1])\n    pack_five_bottles = round(res.x[2])\n    \n    # Calculate the total amount to be spent and return it in pounds (Â£)\n    total_cost_pence = (single_bottles * cost_single) + (double_bottles * cost_double) + (pack_five_bottles * cost_pack_five)\n    total_cost_pounds = total_cost_pence / 100  # Convert pence to pounds\n    \n    return round(total_cost_pounds, 2)\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    rachel, alice = symbols('rachel alice')\n\n    # After Rachel gives Alice 10 pieces, they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If both eat 8 pieces, Rachel has 3 times as many as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    total_mushrooms = Eq(first_hour + second_hour, 40)\n    difference = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((total_mushrooms, difference), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    final_number = 71\n    initial_number = (final_number - 8) / 7\n    return initial_number\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # original equation\n    def eq(): return 285 + 15 / 5 - 2\n\n    # possible ways to insert one or two pairs of brackets\n    equations = [\n        lambda: (285 + 15) / 5 - 2,\n        lambda: 285 + (15 / 5) - 2,\n        lambda: 285 + 15 / (5 - 2),\n        lambda: 285 + 15 / 5 - 2,\n        lambda: (285 + 15 / 5) - 2,\n        lambda: 285 + (15 / 5 - 2),\n        lambda: 285 + (15 / (5 - 2)),\n        lambda: (285 + 15) / (5 - 2),\n    ]\n\n    # calculate and insert unique results into a set to remove duplicates\n    results = set(map(lambda f: f(), equations))\n\n    # return the number of unique results\n    return len(results)\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    # Price of a towel and brush\n    towel_price = 10\n    brush_price = 3\n    # Total amount spent by Bud \n    total_amount = 59\n\n    # Since Bud spent less than 10 on brushes, Bud can only buy\n    # either 1, 2, or 3 brushes (because 3 * 4 = 12, which is more than 10)\n    # We'll look for the number of brushes that makes the amount spent on\n    # towels (a multiple of 10) + amount spent on brushes = 59\n\n    for brushes in range(1, 4):\n        # Calculate money leftover after buying brushes\n        leftover = total_amount - (brushes * brush_price)\n        # Check if leftover is a multiple of the towel price (10)\n        if leftover % towel_price == 0:\n            return brushes\n            \nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rick, morty = symbols('rick morty')\n    \n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n    \n    solutions = solve((equation1, equation2), (rick, morty))\n    \n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    # There are 2 choices for the first digit (1 or 8, since it can't be 0)\n    # There are 2 remaining choices for the second digit (0, and whichever of 1 or 8 wasn't used)\n    # There is 1 choice left for the third digit (the remaining number)\n    count = 2 * 2 * 1  # for each of the three positions\n    return count\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    blue = 11\n\n    # To ensure a blue marble is drawn, we have to consider the worst-case scenario\n    # where we draw all pink and grey marbles first.\n    worst_case_non_blue = pink + grey\n\n    # After drawing all pink and grey marbles, the next draw must be a blue marble.\n    ensure_blue = worst_case_non_blue + 1\n\n    return ensure_blue\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n\n    price_of_computer = sales_tax_paid / sales_tax_rate\n\n    return price_of_computer\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    return (3/10) * (7/6) * 100\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from math import gcd\nfrom itertools import permutations\n\ndef is_coprime_permutation(perm):\n    return all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm) - 1))\n\ndef solution():\n    count = 0\n    for perm in permutations(range(1, 9)):\n        if is_coprime_permutation(perm):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_bears = 35\n    days = 5\n    # Let x be the number of bears made on the first day, then we have an arithmetic sequence,\n    # which means the sum of the sequence is the mean of the first and last term times the number of terms.\n    # x + (x + 2*(days - 1)) = total_bears / days\n    # 2 * x + 2 * 4 = 35 / 5\n    # 2 * x + 8 = 7\n    # 2 * x = -1\n    # x = -1 / 2 which is not possible, so we have an error in the calculation\n    \n    # Correct the calculation\n    # 2x + 8 = 35 / 5 * 2\n    # 2x + 8 = 14\n    # 2x = 14 - 8\n    # x = (14 - 8) / 2\n    # x = 3.\n    # Since she makes 2 more teddy bears each day, on the fifth day she makes:\n    # x + 2*(days - 1) teddy bears on the 5th day\n    first_day_bears = (14 - 8) / 2\n    fifth_day_bears = first_day_bears + 2 * (days - 1)\n    \n    return fifth_day_bears\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs, dragonflies = symbols('frogs dragonflies')\n    original_frogs = symbols('original_frogs')\n\n    equation1 = Eq(frogs - dragonflies, 9)\n    equation2 = Eq(frogs + dragonflies, 21)\n    equations = solve((equation1, equation2), (frogs, dragonflies))\n\n    original_frogs = equations[frogs]\n\n    return original_frogs\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy = 26\n    john = 8\n    s = (amy - john) // 2\n    return s\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # set up the equations based on the problem statement\n    equation1 = Eq(girls - boys, 30)  # there were 30 less boys than girls\n    equation2 = Eq(boys - (3/5)*boys, girls - (5/8)*girls)  # after leaving, boys and girls are equal\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(100):\n        if (24 - i) / 4 == 4:\n            ans = i\n            return ans\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    total_sum = 0\n    \n    for i in range(1, 101):\n        if i % 2 == 0:\n            total_sum += i\n        else:\n            total_sum -= i\n    \n    return total_sum\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n\n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # Worker A and B do 1/3 of the work in 1 hour\n    # Worker B and C do 1/4 of the work in 1 hour\n    # Worker A and C do 1/8 of the work in 1 hour\n    # Let's assume A does 1/a work per hour,\n    # B does 1/b work per hour, and C does 1/c work per hour.\n\n    # So we have the following equations:\n    # 1/a + 1/b = 1/3\n    # 1/b + 1/c = 1/4\n    # 1/a + 1/c = 1/8\n\n    # Sum all the work rates:\n    # 2*(1/a) + 2*(1/b) + 2*(1/c) = 1/3 + 1/4 + 1/8\n\n    # Calculate the sum of the rates\n    sum_rates = 2 * (1/3 + 1/4 + 1/8)\n\n    # Each worker's rate appears twice, so the combined rate of A, B, and C is half of `sum_rates`:\n    combined_rate = sum_rates / 2\n\n    # Time taken for all three workers to complete the job together is the reciprocal of the combined work rate:\n    time_taken = 1 / combined_rate\n\n    return time_taken\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Equation representing the mix of sugar: \n    # (2 kg * 45% + x kg * 15%) / (2 kg + x kg) = 25%\n    equation = Eq((2 * 0.45 + x * 0.15) / (2 + x), 0.25)\n\n    # Solve for x\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n    \n    equation1 = Eq(johnson + vicky, 48)\n    equation2 = Eq(vicky + 8, johnson - 2)\n    \n    solutions = solve((equation1, equation2), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    # Let x be the number of kids and y be the total number of candies\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    # If every kid eats 18 candies, then 12 more candies are needed\n    equation1 = Eq(x * 18, y - 12)\n    \n    # If every kid eats 15 candies, the candies are just enough to be distributed to 2 more kids\n    equation2 = Eq((x + 2) * 15, y)\n    \n    # Solving the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys_in_line = 3\n    girls_in_line = 2\n    total_boys = 42\n\n    ratio = girls_in_line / boys_in_line\n    total_girls = total_boys * ratio\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    ans = 300 - 9 - 19 - 29 - 39 - 49 - 59\n    return ans\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    # Initialize sum\n    total_sum = 0\n    \n    # Start with adding single '2', then '22', etc., up to 2017 2's\n    for i in range(1, 2018):\n        # Each number is i copies of '2', converted to an integer\n        number = int('2' * i)\n        # Add this number to the total sum\n        total_sum += number\n    \n    # Convert sum to a string to work with individual digits\n    total_sum_str = str(total_sum)\n    \n    # Get the last 5 digits of the sum\n    last_five_digits = total_sum_str[-5:]\n    \n    # Convert last five digits to an integer and return the sum of these digits\n    return sum(int(digit) for digit in last_five_digits)\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam, tim = symbols('sam tim')\n\n    # Sam ate 1/4 of her cookies\n    sam_ate = sam / 4\n\n    # Tim bought 1/5 more cookies\n    tim_bought = tim / 5\n\n    # Equation representing the total number of cookies initially\n    equation1 = Eq(sam + tim, 1170)\n\n    # Equation representing the relation after Sam ate cookies and Tim bought more\n    equation2 = Eq(sam - sam_ate + tim + tim_bought, 1170 + tim_bought - 663)\n\n    solutions = solve((equation1, equation2), (sam, tim))\n\n    return solutions[sam_ate]\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kg = total_cost / total_weight\n    return cost_per_kg\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    total_weight_for_6_days = 24\n    weight_per_day = total_weight_for_6_days / 6\n    weight_for_8_days = weight_per_day * 8\n    return weight_for_8_days\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The system of congruences is:\n    # x â¡ 1 (mod 2)\n    # x â¡ 1 (mod 3)\n    # x â¡ 1 (mod 4)\n    # x â¡ 1 (mod 6)\n    # x â¡ 0 (mod 7)\n    \n    # Use the Chinese Remainder Theorem to find x.\n    # We can merge some congruences because:\n    # If x â¡ 1 mod 4, it is also true for mod 2.\n    # If x â¡ 1 mod 6, it is also true for mod 3.\n    # Thus, we only need the congruences for mod 4, 6, and 7.\n    congruences = [(1, 4), (1, 6), (0, 7)]\n\n    # Solve the system of congruences.\n    x = solve_congruence(*congruences)\n\n    # Find the solution within the range [200, 300].\n    ans = next(num for num in range(200, 300) if num % 7 == 0 and all(num % m == 1 for _, m in congruences))\n    return ans\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Initial amounts\n    sally_stamps = 40\n    ting_stamps = 32\n    \n    # After Sally gives x stamps to Ting, their new amounts are:\n    # Sally: 40 - x\n    # Ting: 32 + x\n    # The ratio of Sally to Ting stamps is 1:2, thus we can write:\n    # (40 - x) / (32 + x) = 1 / 2\n    \n    # Solving the equation for x\n    for x in range(1, 40):\n        if (sally_stamps - x) * 2 == (ting_stamps + x):\n            ting_new_stamps = ting_stamps + x\n            break\n    \n    return ting_new_stamps\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Tom's time to complete the job alone be 't'\n    tom = symbols('tom')\n\n    # Jerry's rate of work (envelopes per hour)\n    jerry_rate = 1 / 18\n\n    # Combined rate when Tom and Jerry work together\n    combined_rate = 1 / 6\n\n    # Set up the equation based on the rates of work\n    # 1/tom is Tom's rate of work; combined, they work at 1/6\n    equation = Eq(1/tom + jerry_rate, combined_rate)\n\n    # Solve for 'tom'\n    solution = solve(equation, tom)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result = (77 - 6) / 7\n    return result\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the time before the speed increase be t (minutes)\n    t = symbols('t')\n\n    # The distance David walks at the first speed is 150 metres per minute * t minutes\n    distance_before_increase = 150 * t\n\n    # The time walked after the speed increase is (t + 10)\n    # The distance after the speed increase is (150 + 50) metres per minute * (t - 10) minutes\n    distance_after_increase = 200 * (t - 10)\n\n    # The total distance walked is the sum of the two distances which is 3700 metres\n    equation = Eq(distance_before_increase + distance_after_increase, 3700)\n\n    # Solve for the time t\n    time_before_increase = solve(equation, t)\n\n    # The total time spent walking in the park is the time walked before the speed increase + 10 minutes\n    total_time = time_before_increase[0] + 10\n\n    return total_time\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    total_money = 20\n    price_per_packet = 4\n    sweets_per_packet = 8\n    bonus_sweets_condition = 2\n\n    packets_bought = total_money // price_per_packet\n    total_sweets = packets_bought * sweets_per_packet\n    bonus_sweets = packets_bought // bonus_sweets_condition\n\n    max_sweets = total_sweets + bonus_sweets\n\n    return max_sweets\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal = 0.4 - (1/4)\n    return decimal\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # Start with at least 1 candy for each child\n    candies = [1] * 8\n    \n    # Distribute the remaining candies (88 - 8 = 80) to ensure distinct counts\n    remaining = 88 - sum(candies)\n    i = 7\n    while remaining > 0:\n        # Distribute candies starting from the child who gets the most\n        candies[i] += 1\n        i -= 1\n        # If we reach the first child, go back to the last child\n        if i < 0:\n            i = 7\n        remaining -= 1\n    \n    # Sort candies to identify the child with the most\n    candies.sort()\n    # This child will have the least possible pieces for the most pieces\n    ans = candies[-1]\n    return ans\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # Define the expression without brackets\n    expression = \"285+15/5-2\"\n\n    # Evaluate the original expression\n    original_result = eval(expression)\n\n    # Define all possible single positions to insert the first pair of brackets\n    single_bracket_positions = [\n        \"(285+15)/5-2\",\n        \"285+(15/5)-2\",\n        \"285+15/(5-2)\"\n    ]\n\n    # Define all possible positions to insert two pairs of brackets\n    double_bracket_positions = [\n        \"((285+15)/5)-2\",\n        \"(285+(15/5))-2\",\n        \"(285+15)/(5-2)\",\n        \"285/((15/5)-2)\",\n        \"(285+(15/5-2))\",\n        \"285+((15/5)-2)\"\n    ]\n\n    # Combined list for single and double bracket insertion positions\n    all_positions = single_bracket_positions + double_bracket_positions\n\n    # Use a set to store unique results\n    unique_results = set()\n\n    # Evaluate each expression and add its result to the set\n    for expr in all_positions:\n        unique_results.add(eval(expr))\n\n    # Count the number of unique results including the original expression\n    unique_results.add(original_result)\n\n    # Return the number of unique results\n    return len(unique_results)\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    n = 16\n    zeros_count = 0\n    divisor = 5\n    while n >= divisor:\n        zeros_count += n // divisor\n        divisor *= 5\n    return zeros_count\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    original_pink = 5\n    total_counters = 5 + 7 + 8  # Total counters initially\n\n    # Probability of picking a pink counter\n    original_probability = original_pink / total_counters\n\n    # Double the probability\n    target_probability = 2 * original_probability\n\n    # Let x be the number of extra pink counters to be added\n    # The new probability (which is double the original) will be (5+x)/(20+x)\n    # Set the new probability equal to the target probability and solve for x\n    # (5+x)/(20+x) = target_probability => (5+x)/(20+x) = 2 * (5/20)\n    # Solve the equation for x\n    x = symbols('x')\n    equation = Eq((original_pink + x) / (total_counters + x), target_probability)\n    solution = solve(equation, x)\n\n    # Return the number of extra pink counters needed\n    return solution[0]\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    boys_left_multiplier = 1.5\n    girls_left_multiplier = 1\n    boys_girls_difference_before = 0.4\n    number_of_people_left = 24\n\n    for girls_initial in range(1, 10000):\n        boys_initial = girls_initial * (1 + boys_girls_difference_before)\n        if (boys_initial - number_of_people_left) == boys_left_multiplier * (girls_initial - number_of_people_left):\n            ans = boys_initial\n            return int(ans)\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Worst case scenario: Cindy takes all the socks of the first two colors without getting a pair\n    # That's 3 black socks + 3 grey socks = 6 socks\n    # Then she takes 1 more sock which will guarantee at least one pair, either black or grey\n    # So far she has 7 socks and is guaranteed 1 pair\n    # Worst case continues: Cindy can take 3 red socks, still no pair of red\n    # With the 4th red sock, she is guaranteed a pair of red socks\n    # Now Cindy has minimum 2 pairs of socks (1 pair of red + 1 pair of either black or grey)\n    # Thus, she must take out 7 + 4 = 11 socks to ensure at least 2 pairs in the same color\n    return 11\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cupcakes, muffins = symbols('cupcakes muffins')\n\n    # Given that Demi had an equal number of cupcakes and muffins at first\n    equation1 = Eq(cupcakes, muffins)\n    # After selling, the number of muffins left is twice the number of cupcakes left\n    equation2 = Eq(muffins - 12, 2 * (cupcakes - 60))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cupcakes, muffins))\n\n    # Total number of cupcakes and muffins at first\n    total_at_first = solutions[cupcakes] + solutions[muffins]\n\n    return total_at_first\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_la = 12.25\n    la_to_shanghai = shanghai_to_la + 1.5 # 90 minutes is 1.5 hours\n\n    round_trip = shanghai_to_la + la_to_shanghai\n    return round_trip\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    # Let's denote Helen's daily pocket money as h and George's as g.\n    # According to the question, we have the following equations:\n    # g = h + 3 (George receives $3 more than Helen)\n    # Let's denote the number of days as d.\n    # Helen's savings after d days: d * (h - 5) = 60 (Helen spends $5 every day)\n    # George's savings after d days: d * (g - 5) = d * (h + 3 - 5) = d * (h - 2)\n    # George saves $90 more than Helen: d * (h - 2) = 60 + 90\n    # We combine the equations to solve for h:\n    # d * (h - 2) = 150\n    # d * (h - 5) = 60\n    # d * (h - 2) - d * (h - 5) = 150 - 60\n    # d * 3 = 90\n    # d = 90 / 3\n    d = 90 / 3\n    # Now we substitute d back into one of Helen's equations:\n    # d * (h - 5) = 60\n    # h - 5 = 60 / d\n    h = (60 / d) + 5\n    \n    return h\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    equation1 = Eq(eddi / wiya, 3 / 2)\n    equation2 = Eq((eddi + 4) / wiya, 8 / 5)\n\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    return solutions[wiya]\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    # Calculate the sum of the first part (1 to 30)\n    first_sum = sum(range(1, 31))\n    # Calculate the sum of the second part (29 to 1)\n    second_sum = sum(range(1, 30))\n    # The total sum is the sum of both parts\n    total_sum = first_sum + second_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n    \n    # Using Inclusion-Exclusion Principle\n    both_classes = sport_class + reading_class - total_students\n    \n    return both_classes\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # distance covered during the first 2 hours\n    first_distance = 2 * 40  # speed * time\n    # total distance covered\n    total_distance = first_distance + 280  # first part + remaining\n    # time taken for the remaining distance\n    remaining_time = 280 / 70  # distance / speed\n    # total time taken for the whole trip\n    total_time = 2 + remaining_time  # first part + remaining part\n    # average speed calculation\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    value_of_8 = (number // 10**3) % 10 * 10**3\n    return value_of_8\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the common difference and a be the first term of the arithmetic progression\n    d, a = symbols('d a')\n    \n    # The 9th term is a + 8d\n    # The 15th term is a + 14d\n    # According to the first condition, the 9th term is 18 larger than the 15th term\n    condition_1 = Eq(a + 8*d, (a + 14*d) + 18)\n\n    # The 20th term is a + 19d\n    # The 12th term is a + 11d\n    # According to the second condition, the sum of the 20th term and the 12th term is 88\n    condition_2 = Eq((a + 19*d) + (a + 11*d), 88)\n    \n    # Solve the system of equations to get the values of a and d\n    solutions = solve((condition_1, condition_2), (a, d))\n    \n    # Calculate the 32nd term using the value of d and a from the solution\n    a_value = solutions[a]\n    d_value = solutions[d]\n    term_32 = a_value + 31*d_value  # a + 31d for the 32nd term\n    \n    return term_32\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    pages_with_4 = 4\n    pages_with_3 = 3\n    for num_with_4 in range(total_penpals + 1):\n        num_with_3 = total_penpals - num_with_4\n        if num_with_4 * pages_with_4 + num_with_3 * pages_with_3 == total_pages:\n            return num_with_3\n            \nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # No leading zero (1-9), and two digits each can be 0-9\n    \n    # Cases with no sevens at all\n    no_sevens = 8 * 9 * 9  # excluding 7 for each of the three places\n    \n    # Subtracting cases with no sevens from the total gives at least one seven\n    at_least_one_seven = total_three_digit_numbers - no_sevens\n    \n    # Cases with exactly one seven\n    one_seven_first_position = 1 * 9 * 9  # 7XX\n    one_seven_second_position = 8 * 1 * 9  # X7X (first position can't be 0 or 7)\n    one_seven_third_position = 8 * 9 * 1  # XX7 (again, first position can't be 0)\n\n    # Sum of all cases with exactly one seven\n    exactly_one_seven = one_seven_first_position + one_seven_second_position + one_seven_third_position\n    \n    # Subtracting cases with exactly one seven from cases with at least one gives at least two sevens\n    at_least_two_sevens = at_least_one_seven - exactly_one_seven\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    cycle_days = lcm(25, 20)\n\n    start_day = 1\n    march_days = 31\n\n    next_start_day = start_day + cycle_days\n\n    if next_start_day > march_days:\n        next_start_month = \"April\"\n        next_start_day = next_start_day - march_days\n    else:\n        next_start_month = \"March\"\n\n    return f\"{next_start_day}^{('st' if next_start_day == 1 else 'nd' if next_start_day == 2 else 'rd' if next_start_day == 3 else 'th')} {next_start_month}\"\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the original number\n    x = symbols('x')\n    \n    # Aiden's mistaken calculation: (x / 4) - 25\n    mistaken_calculation = Eq((x / 4) - 25, 2021)\n    \n    # Solve for x based on the mistaken calculation\n    x_value = solve(mistaken_calculation, x)[0]\n    \n    # Calculate the correct answer: (x * 4) + 25\n    correct_answer = (x_value * 4) + 25\n    \n    return correct_answer\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange singing performances\n    # as fixed slots created by dancing performances and the buffer\n    # singing performances in between.\n    # There are 5 slots between dancing performances (4 + 1 for the end)\n    # and we need to distribute 6 singing performances within those slots\n    # with at least 1 singing performance in each of the 4 inner slots.\n    \n    # First calculate the ways to distribute the compulsory singing performances \n    # in the 4 inner slots\n    compulsory_singing_performances = 6 - 4\n    \n    # Then the number of ways to distribute these compulsory singing performances \n    # in the 5 slots is the number of ways to partition the number\n    # into 5 parts, which is also the number of non-negative solutions to the equation\n    # x1 + x2 + x3 + x4 + x5 = 2, which can be calculated using stars and bars method.\n    # Stars and Bars Theorem: (n + k - 1) choose (k - 1),\n    # where n is the number of stars (items to be distributed) and k is the number of bars (containers).\n    # In our case, n = 2 (remaining singing performances), k = 5 (slots)\n    ways_to_place_singing = factorial(compulsory_singing_performances + 5 - 1) // (factorial(5 - 1) * factorial(compulsory_singing_performances))\n    \n    # Calculate the number of ways to arrange the dancing performances\n    # There are 4 dancing performances and they can be arranged in any order\n    # among themselves.\n    ways_to_arrange_dancing = factorial(4)\n    \n    # The total number of ways to arrange the performances is the product of the two values\n    total_ways = ways_to_place_singing * ways_to_arrange_dancing\n    \n    return total_ways\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "from fractions import Fraction\n\ndef solution():\n    # A is the sum of all a_i and is equal to 1\n    A = Fraction(1, 1)\n\n    # According to the definition of the new operation Delta, we have:\n    a1 = A - Fraction(1, 2)\n    a2 = A - Fraction(2, 3)\n    a3 = A - Fraction(7, 8)\n    a4 = A - Fraction(29, 30)\n    a5 = A - Fraction(139, 144)\n    a6 = A - Fraction(839, 840)\n\n    # Since A is the sum of all a_i, we can solve for a0\n    # which is equal to A - (a1 + a2 + a3 + a4 + a5 + a6)\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    # Finding m+n where a0 = m/n in its simplest form\n    m_plus_n = a0.numerator + a0.denominator\n\n    return m_plus_n\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    from math import factorial\n    def count_trailing_zeros(val):\n        count = 0\n        while val % 10 == 0:\n            count += 1\n            val //= 10\n        return count\n\n    product = 75 * 56 * 12 * 105\n    ans = count_trailing_zeros(product)\n\n    return ans\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    possibilities = set(range(0, 10))  # all possible digits\n\n    # Extracting the constraints from the questions and answers.\n    poss_8765 = set([8, 7, 6, 5])  # possible digits from first guess\n    poss_1023 = set([1, 0, 2, 3])  # possible digits from second guess\n    poss_8642 = set([8, 6, 4, 2])  # possible digits from third guess\n    imposs_5430 = set([5, 4, 3, 0])  # impossible digits from fourth guess\n\n    # Removing impossible digits\n    possibilities -= imposs_5430\n\n    # Logic from: \"Is it 8642? Two of the digits are right, and they are in the right digit position\"\n    # Since we know none of the digits from 5430 are in the number, 4 can't be in the second position.\n    # Hence, the right digits in position from 8642 must be 8 and 6.\n    correct_positions = {'8': 0, '6': 1, 'X': 2, 'X': 3}  # 'X' denotes unknown\n\n    # Get the intersection of the remaining possibilities determined by the first and second guesses.\n    # 8765 and 1023 cannot have any correct digits in place. So we can rule out 8 and 6 in other positions,\n    # leaving us with 7, 5, 1, 0, 2, 3 as possible digits for the last two places\n    poss_digits = (poss_8765 | poss_1023) & possibilities\n    poss_digits.discard(8)\n    poss_digits.discard(6)\n\n    ans = ''\n    # Build the answer using known correct positions and possibilities for the last two\n    for i in range(4):\n        if i in correct_positions and correct_positions[i] != 'X':\n            ans += correct_positions[i]\n        else:\n            # From the intersection of poss_digits with the remaining possibilities,\n            # Find two digits that can fit into the 'X' places, also ensuring not to\n            # violate constraints from the first and second guesses (no correct position).\n            for pd in poss_digits:\n                if (i == 2 and pd != '2' and pd != '3' and pd != '0') or \\\n                   (i == 3 and pd in ['0', '3']):\n                    ans += str(pd)\n                    poss_digits.discard(pd)\n                    break\n    \n    return int(ans)\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    # Let the number of books Donna has be x.\n    # Then, Chloe has 4 times as many books as Donna, which is 4x.\n    # Chloe also has 816 more books than Donna, so we can set up the equation:\n    # 4x - x = 816\n    # Simplify the equation to find the value of x:\n    # 3x = 816\n    x = 816 // 3\n    \n    return x\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    # Rearranging the equation to solve for the tildes (represented as x):\n    # ((x + 4) / 8) = 3\n    # (x + 4) = 3 * 8\n    # x = (3 * 8) - 4\n    ans = (3 * 8) - 4\n    return ans\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    base = 999 % 10  # The ones digit of 999.\n    power = 99\n\n    # The ones digit will have a cycle, we just need to find the pattern.\n    # For any base, the ones digit repeats every 4 powers because of the property of congruence in modular arithmetic.\n    # Therefore, we can get the ones digit of the resultant number by finding the ones digit of\n    # base raised to the power of (power % 4).\n    ones_digit_cycle = base ** (power % 4) % 10\n\n    return ones_digit_cycle\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    adults, children, boys, girls = symbols('adults children boys girls')\n\n    # Given relations\n    equation1 = Eq(adults, 3 * children)            # there were three times as many adults as children\n    equation2 = Eq(boys, 2 * girls)                 # twice as many boys as girls\n    equation3 = Eq(adults - girls, 176)             # there were 176 more adults than girls\n\n    # Since adults and children are either boys or girls, we have the total people in terms of boys and girls\n    total_people = Eq(adults + children, boys + girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, total_people), (adults, children, boys, girls))\n\n    # Return the total number of people\n    total = solutions[adults] + solutions[children]\n\n    return total\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 193):\n        if isprime(a):\n            # Calculate b based on the current a\n            b = (193 - 3*a) / 11\n            # Check if b is prime and an integer (whole number)\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    # Iterate over possible two-digit numbers\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b   # This is the number formed by digits 'ab'\n            a0b = 100 * a + b  # This is the number formed by digits 'a0b'\n\n            if ab * 7 == a0b:  # Check the given condition\n                return ab      # If true, return the number 'ab'\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    workers_initial = 3\n    houses_built_initial = 14\n    days_initial = 4\n\n    workers_final = 9\n    days_final = 2\n\n    houses_per_worker_per_day = houses_built_initial / (workers_initial * days_initial)\n    houses_built_final = houses_per_worker_per_day * workers_final * days_final\n\n    return houses_built_final\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    ans = gcd(gcd(12, 15), 60)\n    return ans\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    # Ellie's transaction\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n\n    # Beth's transaction\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    # Solve the system of equations for the price of one banana and one apple\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Annabella pays for 1 banana and 1 apple\n    annabella_pays = solutions[banana] + solutions[apple]\n\n    return float(annabella_pays)\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_people = symbols('total_people')\n    \n    children = (2 / 5) * total_people\n    women = (1 / 4) * total_people\n    men = total_people - children - women\n    equation = Eq(children, men + 20)\n    \n    ans = solve(equation.subs(men, total_people - children - women), total_people)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    price_per_ball, total_money = symbols('price_per_ball total_money')\n    \n    equation1 = Eq(total_money - 5 * price_per_ball, 15)\n    equation2 = Eq(8 * price_per_ball - total_money, 12)\n    \n    solutions = solve((equation1, equation2), (price_per_ball, total_money))\n    \n    return solutions[price_per_ball]\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    from itertools import permutations\n\n    ages = range(1, 29)  # possible ages from 1 to 28\n    min_product = float('inf')  # initialize minimum product to infinity\n    for ages_perm in permutations(ages, 3):\n        fido_age, rex_age, bob_age = sorted(ages_perm)\n        if bob_age - fido_age == 10 and sum(ages_perm) == 28:\n            product = fido_age * rex_age * bob_age\n            if product < min_product:\n                min_product = product\n    return min_product\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans = solve_congruence(*congruences)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9  # The height after the second bounce is 9 cm\n    rebound_ratio = 1 / 3  # The ball rebounds to one third of the height it fell from\n\n    # The height it reaches after the first bounce is three times the height after the second bounce\n    height_after_first_bounce = height_after_second_bounce / rebound_ratio\n\n    # The initial height is then three times the height after the first bounce\n    initial_height = height_after_first_bounce / rebound_ratio\n\n    return initial_height\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    # Perform the calculations step by step\n    numerator1 = 1/30 + 1/6\n    denominator1 = 2/25\n    fraction1 = numerator1 / denominator1\n    \n    numerator2 = 2 - 2/3\n    denominator2 = 8/3\n    fraction2 = numerator2 / denominator2\n    \n    ans = fraction1 + fraction2\n    \n    return ans\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_A_plus_B = 0\n    # Start with 999, the largest 3-digit number, and go down to 100, the smallest 3-digit number\n    for A in range(999, 99, -1):\n        # If 75 is not a factor of A, we skip this number\n        if A % 75 != 0:\n            continue\n\n        # Obtain digits of A\n        digits_A = [int(d) for d in str(A)]\n\n        # Check if A has two equal digits\n        if len(set(digits_A)) != 2:\n            continue\n        \n        # Now find B such that it has two equal digits and has a GCD of 75 with A\n        for B in range(A-1, 99, -1):  # B must be less than A\n            if B % 75 != 0:\n                continue\n\n            # Obtain digits of B\n            digits_B = [int(d) for d in str(B)]\n\n            # Check if B has two equal digits\n            if len(set(digits_B)) != 2:\n                continue\n\n            # Calculate the sum of A and B\n            A_plus_B = A + B\n\n            # We need to update max_A_plus_B with the largest found sum according to the conditions\n            if A_plus_B > max_A_plus_B:\n                max_A_plus_B = A_plus_B\n\n    return max_A_plus_B\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n    \n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    sum_fractions = (1 / (2007*2008)) + (1 / (2008*2009)) + (1 / 2009)\n    ans = 1 / sum_fractions\n    return ans\n    \nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_pupils = 40 + 30\n    total_average = 90\n    difference = 7\n\n    # Total marks for both classes is total pupils multiplied by the total average\n    total_marks = total_pupils * total_average\n\n    # Let x be the average score of Class A, then the average score of Class B will be x + difference\n    # The total marks for class A is 40 * x\n    # The total marks for class B is 30 * (x + difference)\n    # According to the problem we have the equation: 40 * x + 30 * (x + difference) = total_marks\n    # Simplifying the equation: 70 * x + 30 * difference = total_marks\n    # Solve for x: x = (total_marks - 30 * difference) / 70\n\n    x = (total_marks - 30 * difference) / 70\n    class_b_average = x + difference\n\n    return class_b_average\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the time Nancy takes to finish the job by herself\n    # Let l be the time Lee takes to finish the job by herself\n    n, l = symbols('n l')\n\n    # Together, they finish the job in 10 hours, so in 1 hour they do 1/10 of the job\n    # Lee does 1/l of the job in 1 hour and Nancy does 1/n of the job in 1 hour\n    equation1 = Eq(1/l + 1/n, 1/10)\n\n    # Lee works for 6 hours and Nancy works for 20 hours to complete the job\n    equation2 = Eq(6/l + 20/n, 1)\n\n    # Solve the system of equations for n and l\n    solutions = solve((equation1, equation2), (n, l))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    count = 0\n    # Iterate through the number of each type of coin that could be used\n    for ten_pences in range(6):         # He could use 0 to 5 ten-pence coins\n        for twenty_pences in range(4):  # He could use 0 to 3 twenty-pence coins\n            for fifty_pences in range(2):  # He could use 0 to 1 fifty-pence coins\n                # Check if the combination of coins equals 70 pence\n                if ten_pences * 10 + twenty_pences * 20 + fifty_pences * 50 == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    a = 250250\n    return (a ** 2) - (a - 1) * (a + 1)\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    total_people = 30\n    people_behind = 16\n    mark_position = total_people - people_behind - 1\n    \n    return mark_position\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    ans = 0\n    for i in range(1, 201):\n        ans += len(str(i))\n    return ans\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = 9000 + a * 100 + 80 + a\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, chris = symbols('aaron becky chris')\n    equation1 = Eq(aaron - becky, becky - chris)\n    equation2 = Eq(aaron + becky + chris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for J in range(10):\n        number = int(f\"125{J}6\")\n        if number % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n\n    equation = Eq((original_number + 7) * 6, 66)\n    solution = solve(equation, original_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    return 36 + 17 + 18 + 24 + 33\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    a = 9\n    result = 33\n    # a â x = 5a - 2x, and 9 â x = 33\n    \n    # Using the equation to solve for x\n    x = (5 * a - result) / -2\n    return x\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    ans = 476 // 17\n    return ans\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    n = 24\n    sum_squares = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_cubes = ((n * (n + 1)) // 2) ** 2\n\n    ans = sum_cubes - sum_squares\n    \n    return ans\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    friends = 6\n    cards_sent_by_each = friends - 1  # Each friend sends a card to all others, except themselves.\n    total_cards_sent = friends * cards_sent_by_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    # Define time spent going up and down using the ratio\n    total_time = 360  # in minutes\n    ratio_up = 5\n    ratio_down = 4\n    total_ratio = ratio_up + ratio_down\n\n    # Calculate the time spent going up and down\n    time_up = (total_time * ratio_up) / total_ratio\n    time_down = (total_time * ratio_down) / total_ratio\n\n    # Now, assume the speed going down is x and going up is x - 10\n    # The distance covered going up and down is the same:\n    # So, (x - 10) * time_up = x * time_down\n    # x * time_down = (x - 10) * time_up\n    # Solve for x\n    speed_down = (10 * time_up) / (time_up - time_down)\n\n    # Now calculate the speed going up\n    speed_up = speed_down - 10\n\n    # Calculate the total distance\n    total_distance = (speed_up * time_up) + (speed_down * time_down)\n\n    return total_distance\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    initial_watermelons = 94\n    initial_pineapples = 138\n    watermelons_per_day = 9\n    pineapples_per_day = 9\n    ratio = 3\n\n    # Variable for days\n    days = symbols('days')\n\n    # Equations based on the given problem\n    equation = Eq(initial_pineapples - days * pineapples_per_day, \n                  ratio * (initial_watermelons - days * watermelons_per_day))\n\n    # Solve for days\n    days_solution = solve(equation, days)\n\n    # Return the number of days\n    return days_solution[0]\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n    \n    packet_25 = 25\n    packet_20 = 20\n    \n    least_common_multiple = lcm(packet_25, packet_20)\n    \n    # Granny starts new packets on 1st March, so after lcm(25, 20) days,\n    # she will again start new packets of both types.\n    days = least_common_multiple\n    \n    # Since 1st March is the starting day, we subtract 1 to get the next day\n    # she starts new packets of both (1 March itself is day 0 in this calculation).\n    days_to_next_start = days - 1\n\n    # Assuming a non-leap year for simplicity\n    # March has 31 days, so we need to find out which month and day the new start happens\n    days_in_month = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    current_day = 1\n    current_month = 3  # March\n    \n    for days_in_current_month in days_in_month[current_month-1:]:\n        if days_to_next_start >= days_in_current_month:\n            days_to_next_start -= days_in_current_month\n            current_month += 1\n        else:\n            break\n    \n    # At the end of loop, we will have the correct month and the remaining days will\n    # tell us the date in the following month\n    next_start_date = days_to_next_start + 1\n    month = current_month\n    \n    return f\"{next_start_date}/{month}\"\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n    \n    difference = fruits_per_truck - fruits_per_car\n\n    return difference\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    total_days = 329\n    days_per_week = 7\n    number_of_weeks = total_days // days_per_week\n    return number_of_weeks\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    first_bus_time = 9 * 60 + 15  # Convert 9:15 AM to minutes\n    aiden_arrival_time = 9 * 60 + 22  # Convert 9:22 AM to minutes\n    if aiden_arrival_time <= first_bus_time:\n        wait_time = first_bus_time - aiden_arrival_time\n    else:\n        wait_time = 35 - ((aiden_arrival_time - first_bus_time) % 35)\n    return wait_time\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the unknowns, Tom's current age and Jerry's current age\n    tom, jerry = symbols('tom jerry')\n\n    # Equation representing the statement \"Tom will be twice his age in 4 years from now\"\n    eq1 = Eq(tom + 4, 2 * tom)\n\n    # Equation representing the statement \"Three years ago, the sum of Tom's and Jerry's ages was 10\"\n    eq2 = Eq((tom - 3) + (jerry - 3), 10)\n\n    # Solve the system of equations for Tom's and Jerry's current ages\n    ages = solve((eq1, eq2), (tom, jerry))\n\n    # Get Tom's and Jerry's ages from the solutions\n    tom_age = ages[tom]\n    jerry_age = ages[jerry]\n\n    # Define a new symbol for the number of years from now when Jerry's age will be doubled\n    years_from_now = symbols('years_from_now')\n\n    # Equation representing the statement \"In how many years from now will Jerry's age be doubled\"\n    eq3 = Eq(jerry + years_from_now, 2 * jerry)\n\n    # Solve the equation for the number of years from now\n    years_solution = solve(eq3, years_from_now)\n\n    # Get the number of years from the solutions\n    years_from_now_ans = years_solution[0]\n\n    return years_from_now_ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62  # Eddie's speed (metres per minute)\n    brother_speed = 70  # Brother's speed (metres per minute)\n    \n    time_to_meet = 5  # Time until they meet (minutes)\n    \n    # Distance travelled by Eddie until they meet\n    distance_eddie = eddie_speed * time_to_meet\n    # Distance travelled by brother until they meet\n    distance_brother = brother_speed * time_to_meet\n    \n    # Total distance from house to mall is the sum of the distances\n    # travelled by Eddie and his brother until they meet\n    total_distance = distance_eddie + distance_brother\n    \n    return total_distance\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    after_discount = original_price * (1 - discount_rate)\n    final_price = after_discount * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((-1)**(i+1) * i**2 for i in range(3, 52))\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import isprime\n\n    family_ages = {\n        'my_age': 7,\n        'brother_age': 5,\n        'mother_age': 29,\n        'father_age': 31\n    }\n\n    year = 0\n    while True:\n        year += 1\n        family_prime_year = True\n\n        # Increment each family member's age and check if the new age is prime\n        for role, age in family_ages.items():\n            new_age = age + year\n            if not isprime(new_age):\n                family_prime_year = False\n                break\n\n        if family_prime_year:\n            ans = family_ages['father_age'] + year\n            return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    circles = 7\n    ans = 1 + circles + (circles * (circles - 1) // 2) + (circles * (circles - 1) * (circles - 2) // 6)\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_each_friend = 15\n    number_of_friends = 8\n    \n    books_given_to_friends = books_given_each_friend * number_of_friends\n    books_packed_in_box = total_books - books_given_to_friends\n    \n    return books_packed_in_box\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_two_lamp_posts = 3\n\n    # Number of intervals between lamp posts is one less than the number of flowers divided by flowers between any two lamp posts\n    intervals = (total_flowers // flowers_between_two_lamp_posts) + 1\n    \n    road_length = 50\n    distance_between_two_lamp_posts = road_length / intervals\n\n    return distance_between_two_lamp_posts\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    ans = 90009\n    return ans\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n    eq1 = Eq(lora + mother, 44)\n    eq2 = Eq(mother, 3 * lora)\n    \n    solutions = solve((eq1, eq2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    male_fraction = 3 / 5\n\n    males = total_adults * male_fraction\n\n    return int(males)\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    # The unit digit of a number raised to a power follows a cycle.\n    # For 4 the cycle is: 4, 6, 4, 6... repeating every 2 steps.\n    # Therefore, any even power of 4 will have a unit digit of 6.\n    # Since 2008 is even, the unit digit of 4^2008 is 6.\n    ans = 6\n    return ans\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    paths_audio_shop = 6\n    paths_book_shop = 4\n    paths_chapel = 5\n\n    paths_audio_to_school = 2\n    paths_book_to_school = 2\n    paths_chapel_to_school = 3\n\n    total_paths = (paths_audio_shop * paths_audio_to_school +\n                   paths_book_shop * paths_book_to_school +\n                   paths_chapel * paths_chapel_to_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    ans = 76 * 9\n    return ans\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins / 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.5 + twenty_pence_coins * 0.2\n    \n    return total_value\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    belle_sticks = 49\n    sticks_received = 11\n    belle_final = belle_sticks + sticks_received\n    eddie_final = belle_final\n    eddie_initial = eddie_final - sticks_received\n\n    return eddie_initial\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    # Initial total amount\n    total_amount = 705\n\n    # Benson and Clive spent money\n    benson_spent = 34\n    clive_spent = 63\n\n    # Equations based on the problem statement\n    equation1 = Eq(benson + clive, total_amount)  # Total amount equation\n    equation2 = Eq(benson - benson_spent, clive - clive_spent)  # Same amount left after spending\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    exeter_temp_diff = 12\n\n    exeter_temp = glasgow_temp + exeter_temp_diff\n\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5/11) + (2/27)) * 11 + (5/27)\n    return ans\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    number_of_lampposts = 50\n    distance_between_lampposts = 2\n    # The length of the road will be the distance between the first and last lamppost\n    # which is the number of gaps between lampposts multiplied by the distance between them.\n    # There's one less gap than the number of lampposts.\n    length_of_road = (number_of_lampposts - 1) * distance_between_lampposts\n    return length_of_road\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n\n    total_weight = weight_per_box * number_of_boxes\n\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6]\n    perm = permutations(digits)\n    ans = len(list(perm))\n    return ans\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')\n    equation1 = Eq(john + kofi, 25)\n    equation2 = Eq(kofi + 4, john - 3)\n\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    # Total volume of tea Jason and Belinda have together\n    total_tea = 983 + 179\n    # The volume of tea each should have to be equal\n    equal_volume = total_tea / 2\n    # The volume of tea Jason must give to Belinda\n    tea_to_give = 983 - equal_volume\n    return tea_to_give\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = (18 + 2) + 16\n    return ans\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    normal, special = symbols('normal special')\n    \n    # Equation 1: normal rabbits have one head, and the special ones have three heads\n    equation1 = Eq(normal + 3 * special, 53)\n    # Equation 2: normal rabbits have four feet, and the special ones have two feet\n    equation2 = Eq(4 * normal + 2 * special, 102)\n\n    solutions = solve((equation1, equation2), (normal, special))\n\n    # sum of both special and normal rabbits\n    total_rabbits = solutions[normal] + solutions[special]\n\n    return total_rabbits\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    n = 100\n    total = sum((-1)**(i + 1) * i for i in range(1, n + 1))\n    return total\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost_for_13_bananas = 13 * cost_per_banana\n    change = (10 * 100) - total_cost_for_13_bananas  # converting Â£10 to pence\n    return change\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    sweets_with_neelesh_after_eating = 4\n    sweets_with_neelesh_before_eating = sweets_with_neelesh_after_eating + 1\n    full_share = 6 * sweets_with_neelesh_before_eating\n    ayesha_left = full_share - sweets_with_neelesh_before_eating\n    return ayesha_left\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    denominator = 70\n    numerator = 10**500\n\n    # Perform long division to find the 500th digit by taking the remainder of 10^500 divided by 70\n    remainder = numerator % denominator\n\n    for _ in range(499):  # Since we already found the first remainder, we proceed for 499 more digits\n        remainder = (remainder * 10) % denominator  # Multiplying by 10 to find the next digit, and taking mod again\n\n    # Get the 500th digit after decimal by performing one more multiplication by 10\n    digit = (remainder * 10) // denominator\n\n    return digit\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for copper and iron ball weights\n    copper_ball, iron_ball = symbols('copper_ball iron_ball')\n    \n    # Create two equations based on the problem statement\n    equation1 = Eq(8 * copper_ball + 9 * iron_ball, 135)\n    equation2 = Eq(6 * copper_ball + 3 * iron_ball, 75)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (copper_ball, iron_ball))\n    \n    # Return the weight of one copper ball\n    return solutions[copper_ball]\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    # Calculate the numerator sum\n    numerator = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n    \n    # Calculate the denominator sum\n    denominator = sum(1/((20-i)*(i+1)) for i in range(11, 16))\n    \n    # Divide numerator by denominator to get the answer\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    pounds_per_stone = 14\n\n    david_weight_pounds = david_weight_stone * pounds_per_stone\n    weight_difference = abs(david_weight_pounds - andrew_weight_pounds)\n\n    return weight_difference\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of gummy bears and y be the number of lollipops\n    x, y = symbols('x y')\n\n    # Original ratio\n    equation1 = Eq(x / y, 5 / 7)\n\n    # New ratio after adding 120 to both\n    equation2 = Eq((x + 120) / (y + 120), 4 / 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Total pieces of candy now\n    total_candy_now = solutions[x] + solutions[y] + 120 * 2\n\n    return total_candy_now\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    total_marbles = 560\n    marbles_in_A = 80\n    remaining_marbles = total_marbles - marbles_in_A\n    \n    # Let the number of marbles in Box C be c.\n    # Then marbles in Box B is 2c.\n    # total_marbles = marbles_in_A + marbles_in_B + marbles_in_C\n    # 560 = 80 + 2c + c\n    # Solve for c:\n    c = (remaining_marbles) / 3\n\n    return int(c)\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    term = 10\n    last_shown_term = 31\n    difference = 28 - 25  # Common difference in the arithmetic sequence\n\n    first_term = last_shown_term - (term - 1) * difference\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(24 * x - 5 * (3 + x), 4)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    sum_of_numbers = sum(numbers) * 3\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    # Since the series consists of adding the same unit's and ten's digit but incrementing both by 1 each step,\n    # there is a pattern we can observe and simplify the addition with.\n    \n    numbers = [31, 42, 53, 64, 75, 86, 97] # Given sequence\n    ans = sum(numbers) # Summing the sequence\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the base 3 numbers to decimal\n    num1_decimal = int(str(12101), 3)\n    num2_decimal = int(str(2210), 3)\n\n    # Perform subtraction in decimal\n    result_decimal = num1_decimal - num2_decimal\n\n    # Convert the result back to base 3\n    ans = ''\n    while result_decimal > 0:\n        ans = str(result_decimal % 3) + ans\n        result_decimal //= 3\n\n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    ans = 58 * 60\n    return ans\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cake, biscuit = symbols('cake biscuit')\n    \n    # Equation from the first scenario: 1 cake + 2 biscuits = 450 calories \n    equation1 = Eq(cake + 2 * biscuit, 450)\n    \n    # Equation from the second scenario: 2 cakes + 3 biscuits = 800 calories\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct = 12\n    total_marks = (correct_answers * marks_per_correct) + (wrong_answers * 0)\n    total_questions = correct_answers + wrong_answers\n    average_mark = total_marks / total_questions\n    return average_mark\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # no two numbers can differ by 5, so take every 5th number starting from 1 to 20\n    # This is a greedy algorithm approach, where you take the next available number\n    # that meets the constraint with all previous chosen numbers\n\n    numbers = list(range(1, 21))  # first 20 positive integers\n    chosen = []  # list to keep track of the chosen numbers\n\n    for num in numbers:\n        if all(abs(num - x) != 5 for x in chosen):\n            chosen.append(num)\n\n    # Maximum n is the length of the chosen list\n    return len(chosen)\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "from fractions import Fraction\n\ndef solution():\n    num = (Fraction(2017, 1) + Fraction(7, 8)) * (Fraction(11, 3)) - (Fraction(2016875, 1000) * Fraction(11, 3))\n    denom = (Fraction(2017, 1) + Fraction(1, 3) - Fraction(2016875, 1000)) * 17\n    result = (num / denom) * (Fraction(3, 1) + Fraction(23, 32))\n    \n    return result\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for B in range(1, 10):\n        for i in range(0, 10):\n            total_pencils = int(f'{B}{i}{B}')  # This creates the number B1B\n            if total_pencils % 44 == 0:  # Check if the total number of pencils is divisible by the number of pupils\n                pencils_per_pupil = total_pencils // 44\n                return pencils_per_pupil\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kevin, sara, james = symbols('kevin sara james')\n    eq1 = Eq(kevin, sara + 30)\n    eq2 = Eq(james, sara + 40)\n    eq3 = Eq(kevin + sara + james, 160)\n\n    solutions = solve((eq1, eq2, eq3), (kevin, sara, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "def solution():\n    from math import lcm\n    \n    ans = lcm(4, 6, 7)\n    \n    return ans\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote John's current age as j and his mother's current age as m.\n    j, m = symbols('j m')\n    \n    # John's age in 8 years is j + 8.\n    # His mother's age 20 years ago is m - 20.\n    # According to the first condition: John's age in 8 years is the same as his mother's age 20 years ago.\n    equation1 = Eq(j + 8, m - 20)\n\n    # The difference in their ages will always remain constant.\n    age_difference = m - j\n    \n    # When his mother is 5 times John's age,\n    # let's assume John's age at that time is j1.\n    # Since the age difference doesn't change, we can express his mother's age at that time as j1 + age_difference.\n    # So the second condition is: Mother's age = 5 times John's age.\n    equation2 = Eq(j1 + age_difference, 5 * j1)\n\n    # Now we need to replace j1 with (j - age_difference)\n    # Because when John was j1 years old, the age difference was already there.\n    # And also replace age_difference with (m - j), which we have found already.\n    equation2 = equation2.subs(j1, j - (m - j))\n\n    # Now we solve the system of equations to find John's and his mother's current age.\n    solution = solve((equation1, equation2), (j, m))\n\n    # But the question asks for the age of John when his mother was five times his age.\n    # We can find out the age by subtracting the age difference from John's current age.\n    john_current_age = solution[j]\n    mother_current_age = solution[m]\n\n    john_age_when_mother_five_times = john_current_age - (mother_current_age - john_current_age)\n\n    return john_age_when_mother_five_times\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = [M % i for i in range(2, 11)]\n        if len(set(remainders)) == 9 and 0 not in remainders:\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    lcm = lambda a, b: a * b // gcd(a, b)\n    from math import gcd\n    \n    tom_time = 24\n    william_time = 8\n\n    # Least common multiple of both times will give the first meeting time\n    ans = lcm(tom_time, william_time)\n\n    return ans\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    container_capacity = 4\n    num_containers = (total_apples + container_capacity - 1) // container_capacity\n    return num_containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    romily, reema = symbols('romily reema')\n    equation = Eq(romily, reema + 10)\n    return solve(equation, reema)[0]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Applying the Inclusion-Exclusion Principle\n    # students_both represents number of students who participate in both competitions\n    students_both = math_students + art_students - total_students\n\n    return students_both\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    post_spacing = 4\n    num_posts = (field_length / post_spacing) + 1\n\n    return int(num_posts)\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10*a + b\n            ba = 10*b + a\n            if 8*ab == 3*ba:\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 // 34) * 25\n    return ans\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_sum = 10 + 20 + 30 + 50 + 60 + 70\n    negative_sum = 6 + 16 + 26 + 46 + 56 + 66\n    ans = positive_sum - negative_sum\n    return ans\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    import math\n\n    def find_smallest_multiplier(n):\n        prime_factors = {}\n        # Prime factorization\n        for i in range(2, int(math.sqrt(n)) + 1):\n            while n % i == 0:\n                n //= i\n                prime_factors[i] = prime_factors.get(i, 0) + 1\n        if n > 1:\n            prime_factors[n] = prime_factors.get(n, 0) + 1\n\n        # Find the smallest multiplier such that all the prime factors have an even power\n        multiplier = 1\n        for factor, power in prime_factors.items():\n            if power % 2 != 0:\n                multiplier *= factor\n\n        return multiplier\n\n    ans = find_smallest_multiplier(28)\n    return ans\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_population = 64\n    years = 5\n\n    for year in range(years):\n        initial_population = (initial_population * 5) / 2\n    \n    return initial_population\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution():\n    cost_per_mile = 6\n    y = symbols('y')\n    x = symbols('x')\n\n    equation = Eq(y, cost_per_mile * x)\n\n    return equation\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Lunch finished at 2:50 pm\n    lunch_finished_time = datetime.strptime('14:50', '%H:%M')\n\n    # Lunch lasted 20 minutes\n    lunch_duration = timedelta(minutes=20)\n\n    # Time when lunch started\n    lunch_start_time = lunch_finished_time - lunch_duration\n\n    # Benson watched television for 20 minutes\n    tv_duration = timedelta(minutes=20)\n\n    # Time when Benson started watching TV\n    tv_start_time = lunch_start_time - tv_duration\n\n    # Benson played for 10 minutes\n    play_duration = timedelta(minutes=10)\n\n    # Time Benson reached home\n    home_arrival_time = tv_start_time - play_duration\n\n    # Format the result to return only the time\n    return home_arrival_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    import math\n\n    # Treating A and B as one unit, we have 5 units to arrange\n    unit_permutations = math.factorial(5)\n\n    # A and B can arrange themselves in 2! ways as they can switch places\n    ab_arrangements = math.factorial(2)\n\n    # Total arrangements\n    total_arrangements = unit_permutations * ab_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for number in range(99, 9, -1):\n        if (number - 3) % 4 == 0 and (number - 3) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    max_class_size = total_sweets // min_sweets_per_student\n\n    return max_class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    prev_product = 246 * 135\n    difference = (248 - 246) * 135\n    ans = prev_product + difference\n    return ans\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 's' be the total steps of the escalator\n    s = symbols('s')\n    \n    # When Peter walks at 1 step per second, the escalator moves 's-10' steps in 10 seconds\n    # When Peter walks at 2 steps per second, the escalator moves 's-16' steps in 8 seconds (half the time)\n    \n    # Equating the two scenarios gives us:\n    # 10 + (s-10) = 2 * (8 + (s-16))\n    equation = Eq(10 + (s-10), 2 * (8 + (s-16)))\n    \n    # Solve the equation for 's'\n    solution = solve(equation, s)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, green, purple = symbols('red green purple')\n    \n    equation1 = Eq(red, green/4)\n    equation2 = Eq(red, 3*purple/5)\n    equation3 = Eq(4*red + 5*green + 7*purple, 642)\n    \n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n    \n    return solutions[purple]\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum_of_numbers = (3 * 10) + (33 * 0.01) + (300 * 0.001)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    percentage = 25\n    total = 1200\n\n    amount = (percentage / 100) * total\n\n    return amount\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120\n    height_difference = 30\n\n    mark_height = james_height + height_difference\n\n    return mark_height\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    num_children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return num_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jon, miguel = symbols('jon miguel')\n    \n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation1, equation2), (jon, miguel))\n    \n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_blocks = total_blocks / 4\n    remaining_blocks = total_blocks - given_blocks\n    return remaining_blocks\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # Since the hundreds digit needs to be an even number less than 5 (because the ones is twice the hundreds)\n        for tens in range(0, 10):  # The tens digit can be any even number from 0 to 9\n            if tens % 2 == 0 and hundreds != tens:  # The tens digit must be even and different from hundreds\n                ones = 2 * hundreds  # The ones digit is twice the hundreds digit\n                number = 100 * hundreds + 10 * tens + ones\n                if number % 2 == 0 and number % 9 == 0:  # Check if divisible by 2 and 9\n                    if ones < 10:  # The ones digit must be a single digit\n                        ans = number\n                        return ans\n    return None\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the number of chocolates Sally originally had\n    # Let k be the number of chocolates Ken originally had\n    s, k = symbols('s k')\n\n    # Two equations based on the problem statement\n    # Original ratio of chocolates\n    eq1 = Eq(s/k, 5/7)\n\n    # After Ken gives 24 chocolates to Sally, she has twice as many as Ken\n    eq2 = Eq(s + 24, 2 * (k - 24))\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (s, k))\n\n    # Ken's chocolates in the end (after giving 24 to Sally)\n    ken_final = solutions[k] - 24\n\n    return ken_final\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pencil, notebook = symbols('pencil notebook')\n    \n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n    \n    solutions = solve((equation1, equation2), (pencil, notebook))\n    \n    total_cost = solutions[pencil] + solutions[notebook]\n    \n    return total_cost\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raju, vijay, patrick = symbols('raju vijay patrick')\n    eq1 = Eq(raju, 3 * vijay)\n    eq2 = Eq(raju, patrick + 152)\n    eq3 = Eq((raju + vijay + patrick)/3, 507)\n\n    solutions = solve((eq1, eq2, eq3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    square_sides = 4\n    triangle_sides = 3\n    number_thought = (square_sides * 2) - triangle_sides\n    return number_thought\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    # Given parameter\n    bill_amount = 82\n    \n    # Base free hours and bill amount if only $5 per hour is considered\n    base_free_hours = 40\n    max_hours_at_5 = 50\n    max_hours_at_8 = 60\n    cost_after_base_5 = (max_hours_at_5 - base_free_hours) * 5\n    \n    # If the bill is less than or equal to the cost at $5 per hour, then we can directly calculate it\n    if bill_amount <= cost_after_base_5:\n        hours_parked = (bill_amount / 5) + base_free_hours\n        return hours_parked\n    \n    # Otherwise, we add bill amount for each segment and calculate the additional hours\n    additional_bill_at_5 = bill_amount - cost_after_base_5\n    cost_at_5 = (max_hours_at_5 - base_free_hours) * 5\n    cost_at_8 = (max_hours_at_8 - max_hours_at_5) * 8\n    \n    # Check if additional billing is within the $8 segment\n    if additional_bill_at_5 <= cost_at_8:\n        hours_parked = max_hours_at_5 + (additional_bill_at_5 / 8)\n    else:\n        # Otherwise, calculate for the $15 segment\n        additional_bill_at_8 = additional_bill_at_5 - cost_at_8\n        hours_parked = max_hours_at_8 + (additional_bill_at_8 / 15)\n        \n    return hours_parked\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    initial_pay = 7.50\n    increase_percentage = 12 / 100\n    new_pay = initial_pay * (1 + increase_percentage)\n    \n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits_used = 0\n    page_number = 1\n    while digits_used < 1014:\n        digits_used += len(str(page_number))\n        page_number += 1\n    return page_number - 1\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    equation = Eq(57 + magic_number, 4 * (9 + magic_number))\n\n    solutions = solve(equation, magic_number)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_students = 7 + 6\n    total_ways = comb(2, 1) * comb(total_students, 4)\n    ways_without_female = comb(2, 1) * comb(7, 4)\n    ways_with_at_least_one_female = total_ways - ways_without_female\n    return ways_with_at_least_one_female\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary_btc = 3.248\n    debt_btc = 1.6\n\n    months_to_work = debt_btc / monthly_salary_btc\n    \n    return months_to_work\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    sum_series = sum(10 * i - (6 + 10 * (i - 1)) for i in range(1, 8))\n    ans = sum_series + 2021\n    return ans\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbol for the original number\n    number = symbols('number')\n    \n    # Setting up the equation: 3 * number + 6 = number + 16\n    equation = Eq(3 * number + 6, number + 16)\n    \n    # Solving the equation\n    solution = solve(equation, number)\n    \n    # Getting the solution for the original number\n    original_number = solution[0]\n    \n    return original_number\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    # Joanna's weekly pocket money and saving for 5 weeks\n    joanna_weekly_money = 5.00\n    joanna_savings = joanna_weekly_money * 5\n    \n    # Amy's weekly pocket money and savings for 5 weeks subtracting her weekly expenses on stickers\n    amy_weekly_money = 3.50\n    amy_weekly_expense = 0.75\n    amy_savings = (amy_weekly_money * 5) - (amy_weekly_expense * 5)\n    \n    # The difference in savings between Joanna and Amy\n    difference = joanna_savings - amy_savings\n    \n    return difference\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    steps_between = 15 - 10\n    common_difference = term_difference / steps_between\n    twelfth_term = tenth_term + 2 * common_difference\n    return twelfth_term\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    n = symbols('n')\n    degree_of_monomial = -3 + 2*n  # The degree of x^3 is 3, and the degree of y^(2n) is 2n.\n    equation = Eq(degree_of_monomial, 5)\n    solution = solve(equation, n)\n    return solution[0]\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n\n    percentage = (marks_scored / total_marks) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n    total_cups = 45\n\n    total_milk = milk_per_cup * total_cups\n    total_tea = tea_per_cup * total_cups\n    \n    ans = total_milk + total_tea\n    return ans\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n    \n    # Sarah's costs\n    sarah_books_cost = 8 * book_price\n    sarah_pencils_cost = 3 * 0.40   # Since pencil cost is known, we convert p to Â£.\n\n    # Rebecca's costs\n    rebecca_books_cost = 3 * book_price\n    rebecca_pencils_cost = 8 * 0.40  # Same for pencil cost.\n\n    # The difference in cost\n    cost_difference = Eq(sarah_books_cost + sarah_pencils_cost, rebecca_books_cost + rebecca_pencils_cost + 1.00)\n\n    # Solve for the price of the book\n    book_price_value = solve(cost_difference, book_price)\n\n    return book_price_value[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    angela, bernice, candice = symbols('angela bernice candice')\n    price_per_gummy_bear = 6 / 100  # converting pence to pounds\n    total_spent = 3.42\n\n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq(angela * price_per_gummy_bear + bernice * price_per_gummy_bear +\n                   candice * price_per_gummy_bear, total_spent)\n\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Since they are consecutive numbers, let's call the first number n.\n    # Then the second number is n+1, and the third number n+2.\n    # According to the problem, n + (n + 1) + (n + 2) = 60.\n    # Simplifying, we get 3n + 3 = 60, subtracting 3 from both sides gives us 3n = 57.\n    # Dividing both sides by 3, n = 19 -> this is the first number.\n    # The largest number asked in the question is thus n + 2.\n    largest_number = 19 + 2\n    return largest_number\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Since the median of an ordered list is the middle value\n    # and given there are 10 numbers, the median will be the\n    # average of the 5th and 6th terms (n+7) and (n+8).\n    # Therefore, we can solve for n, given that the median (20)\n    # is the average of those two terms: (n+7 + n+8)/2 = 20\n    \n    n = symbols('n')\n    median_equation = Eq((n + 7 + n + 8) / 2, 20)\n    n_value = solve(median_equation, n)[0]\n    \n    # Now calculate the mean of the list. The mean is the sum\n    # of all the terms divided by the number of terms.\n    terms = [n_value, n_value+2, n_value+3, n_value+5, n_value+7,\n             n_value+8, n_value+11, n_value+14, n_value+16, n_value+19]\n    mean = sum(terms) / len(terms)\n    \n    return mean\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shake_groups = 4\n\n    # Total handshakes if all members shake hands once\n    total_handshakes = total_members * (total_members - 1) // 2\n\n    # Handshakes that did not happen within the group of four\n    non_handshakes_within_group = non_shake_groups * (non_shake_groups - 1) // 2\n\n    # Handshakes that did not happen between the group of four and the three they did not shake hands with\n    non_handshakes_with_three = non_shake_groups * 3\n\n    # Subtract the handshakes that did not happen from the total\n    handshakes_that_happened = total_handshakes - non_handshakes_within_group - non_handshakes_with_three\n\n    return handshakes_that_happened\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_all_numbers = n * (n + 1) // 2\n    return sum_all_numbers\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for i in range(1, 10):\n        original_num = i\n        new_num = int(str(i) + '0')\n        \n        if new_num - original_num == 27:\n            return original_num\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Since Bob is always the 3rd in line no matter the direction he counts,\n    # the array must be a 3x3 square, with Bob positioned at the center.\n    num_animals = 3 * 3  # Total number of animals in a 3x3 array\n\n    return num_animals\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let x, y, z be the weights of the apples such that x < y < z\n    # x + y + z = weight of all apples\n    # (y + z) / 2 = 70\n    # (x + z) / 2 = 105\n    \n    # From the above equations:\n    # y + z = 140\n    # x + z = 210\n\n    # Subtracting the second equation from the first:\n    # y - x = -70\n\n    # Now solve for z using the first equation:\n    # z = 140 - y\n\n    # Substitute z in the second equation:\n    # x + (140 - y) = 210\n    # y = 140 - x\n    # Substitute y in terms of x in the above equation: x + (140 - (140 - x)) = 210\n    # Simplifying, x + x = 210\n    # x = 105\n\n    # Now we can find y as 140 - x\n    y = 140 - 105\n    # y = 35\n    \n    # Similarly, find z as 210 - x\n    z = 210 - 105\n    # z = 105\n    \n    # The difference between the heaviest and lightest apple\n    weight_difference = z - y\n    return weight_difference\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n    containers_needed = total_juice // per_container\n\n    return containers_needed\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    plum_trees = 41\n    plum_spacing = 4\n    pine_spacing = 5\n    \n    road_length = (plum_trees - 1) * plum_spacing\n    pine_trees = road_length // pine_spacing + 1\n\n    return pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    return 245 // 5\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of one-cent coins, y the number of two-cent coins,\n    # and z the number of five-cent coins in each stack.\n    x, y, z = symbols('x y z')\n\n    # Equation based on the height of the coins:\n    # 6 one-cent coins have the same height as 5 two-cent coins\n    # 4 one-cent coins have the same height as 3 five-cent coins\n    equation1 = Eq(6*x, 5*y)\n    equation2 = Eq(4*x, 3*z)\n\n    # Sam places coins into three stacks of equal heights\n    # and used a total of 124 coins\n    equation3 = Eq(x + y + z, 124)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Calculate the total value in cents of all the coins\n    total_value = solutions[x] * 1 + solutions[y] * 2 + solutions[z] * 5\n\n    return total_value\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total = 4000 * 12\n    correct_total = incorrect_total + (3040 - 2800)\n    correct_average = correct_total / 12\n    return correct_average\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    for A in range(10):\n        if (A + A == A * 10 + A):\n            return A\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n    \n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    \n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    container_A_initial, container_B_initial = symbols('container_A_initial container_B_initial')\n\n    equation1 = Eq(container_A_initial, container_B_initial + 350)\n    equation2 = Eq(container_B_initial, 2 * (container_A_initial - 500))\n\n    solutions = solve((equation1, equation2), (container_A_initial, container_B_initial))\n\n    return solutions[container_A_initial]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red = 0\n    for green in range(1, 100):\n        blue = 2 * green // 5\n        red = green // 4\n        if blue * 5 == green * 2 and green * 1 == red * 4 and blue + green + red < 100:\n            max_red = max(max_red, red)\n    return max_red\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_money = 200\n    books_cost = 0.25 * initial_money\n    money_left_after_books = initial_money - books_cost\n    dvd_cost = 0.20 * money_left_after_books\n    money_left = money_left_after_books - dvd_cost\n    return money_left\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    boys_initial = 216\n    girls_initial = 153\n    children_joined = 37\n\n    total_children_after_an_hour = boys_initial + girls_initial + children_joined\n\n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    # Since there are 12 months in a year, the number of components produced\n    # each month would be `m` divided by 12.\n    monthly_production = m / 12\n    \n    return monthly_production\n\n# Here 'm' is a variable representing the total number of components produced\n# last year. To get the answer using this function, you would call solution(m)\n# passing the actual value of m.\n# For example:\n# ans = solution(1200)  # If m is 1200, replace 1200 with the actual value of m."
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    # Largest six-digit palindrome which is a multiple of 6\n    # Since it's a multiple of 6, it must be divisible by both 2 and 3\n    # A number is divisible by 2 if its last digit is even\n    # A number is divisible by 3 if the sum of its digits is a multiple of 3\n\n    # Starting from the largest six-digit palindrome\n    for i in range(999999, 100000, -1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:  # Check divisibility by 2 (even number)\n                digits_sum = sum(int(digit) for digit in str(i))  # Sum of the digits\n                if digits_sum % 3 == 0:  # Check divisibility by 3\n                    return i  # Largest six-digit palindrome divisible by 6\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    # Initial amount of pins and needles\n    total_pins_needles = 2540\n    # Amount of pins sold\n    sold_pins = 1820\n    # Remaining pins\n    remaining_pins = total_pins_needles - sold_pins\n    \n    # Since 4/5 of the needles were sold, the remaining needles must be 1/5.\n    # Therefore, the remaining needles should also be equal to the remaining pins.\n    remaining_needles = remaining_pins \n\n    # sold_needles is 4 times the remaining_needles (4/5 were sold)\n    sold_needles = 4 * remaining_needles\n\n    # Total needles initially is the sum of sold_needles and remaining_needles\n    total_needles = sold_needles + remaining_needles\n\n    # Check whether Paul's calculation was correct\n    pauls_remaining_needles = 455\n    is_pauls_solution_correct = (pauls_remaining_needles == remaining_needles)\n\n    # Returning the correct answer and whether Paul's solution was correct as a tuple\n    return (remaining_needles, is_pauls_solution_correct)\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83  # in meters\n    short_by_m = 0.10       # 10 cm in meters\n\n    garage_piece_m = desired_length_m - short_by_m\n\n    return garage_piece_m\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the initial number of marbles Wei Yan had be x\n    x = symbols('x')\n    \n    # He gave 3/8 of them to his friends, so he had 5/8 left\n    after_friends = (5/8) * x\n    \n    # Then he gave 5/7 of the remaining marbles to his brother, leaving 2/7 of the original after_friends amount\n    after_brother = (2/7) * after_friends\n    \n    # His cousin gave him 408 marbles, and in the end he had twice as many as he started with (2x)\n    equation = Eq(after_brother + 408, 2 * x)\n    \n    # Solve for x\n    result = solve(equation, x)\n    return result[0]\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    return (2 / 7) * 315\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    pattern_length = len(pattern)\n    pattern_sum = sum(pattern)\n    \n    # Calculate the number of full pattern repeats in the first 41 numbers\n    full_patterns = 41 // pattern_length\n    \n    # Calculate the sum of all full pattern repeats\n    full_pattern_sum = full_patterns * pattern_sum\n    \n    # Calculate the number of remaining numbers after the full pattern repeats\n    remaining_numbers = 41 % pattern_length\n    \n    # Calculate the sum of the remaining numbers\n    remaining_sum = sum(pattern[:remaining_numbers])\n    \n    # Calculate the total sum of the first 41 numbers\n    total_sum = full_pattern_sum + remaining_sum\n    return total_sum\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple_over_100 = (100 // 11 + 1) * 11\n    largest_multiple_under_300 = (300 // 11) * 11 - 11\n    return smallest_multiple_over_100 + largest_multiple_under_300\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    total = 47\n    count = 0\n    for two_p in range(total // 2 + 1):\n        for five_p in range(total // 5 + 1):\n            if 2 * two_p + 5 * five_p == total:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator_sequence = [(9, 8), (10, 9), (11, 10), (12, 11)]\n    denominator_sequence = [8, 9, 10, 11]\n    \n    numerator = 0\n    for pair in numerator_sequence:\n        numerator += (pair[0] + 10 + 11) / pair[1] * (-1)**(pair[1] % 2)\n    \n    denominator = 0\n    for i, value in enumerate(denominator_sequence):\n        denominator += 1 / value * (-1)**(i % 2)\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11 - x1):\n            x3 = 11 - x1 - x2\n            if x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Initial ages of Brian and his father\n    brian_age = 14\n    father_age = 41\n    \n    # The difference in age will remain constant\n    age_difference = father_age - brian_age\n\n    # Loop over the next possible ages until the reverse condition is satisfied\n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age).zfill(2) == str(father_age).zfill(2)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    # Round off each number to the nearest hundred\n    num1_rounded = round(654876, -2)\n    num2_rounded = round(279745, -2)\n    \n    # Calculate the estimated difference\n    estimated_difference = num1_rounded - num2_rounded\n    \n    return estimated_difference\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for i in range(1, 8):\n        for j in range(1, 8):\n            if i+j == 8 and i != j:\n                count += 1\n    return count // 2  # divided by 2 to account for the fact that (i,j) is the same as (j,i)\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(range(1, 6)) + sum(range(1, 5))\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    return 49 + 83\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = cost_per_kg * 3.5\n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_seconds = 16\n    length_meters = 480\n    \n    speed_meters_per_second = length_meters / time_seconds\n    speed_kilometers_per_hour = (speed_meters_per_second * 3600) / 1000\n    \n    return speed_kilometers_per_hour\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    return (2/5) * 30\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5 / 8) * 4000\n    return result\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    total_lampposts = 113\n    distance_between_lampposts = 8\n\n    road_length = (total_lampposts - 1) * distance_between_lampposts\n\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    return (10**5) // (5**5)\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_students = 40\n    failed_students = 14\n\n    percentage_failed = (failed_students / total_students) * 100\n\n    return percentage_failed\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = 0\n    for page in range(1, 51):\n        if '3' in str(page):\n            erased_sum += page\n    return erased_sum\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    largest = max(numbers)\n    smallest = min(numbers)\n    return largest - smallest\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    per_bag = 12\n\n    full_bags_used, poppers_left = divmod(total_guests, per_bag)\n\n    return poppers_left\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    types_of_pasta = 4\n    types_of_sauces = 3\n    types_of_toppings = 3\n\n    return types_of_pasta * types_of_sauces * types_of_toppings\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    ones_digit_cycle = [7**i % 10 for i in range(1, 5)] \n    return ones_digit_cycle[(2023 - 1) % 4]  \n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # According to the worst case of the pigeonhole principle:\n    # for the first classroom, he tries up to 10 keys,\n    # for the second, up to 9 keys (since one is already matched),\n    # for the third, up to 8 keys, and so on until the last room where he does not need to try (1 key left for the last room).\n    # Therefore, the total number of tries is the sum of the first 10 natural numbers minus 1.\n\n    max_tries = sum(range(1, 11)) - 1  # -1 because the last key doesn't need trying\n\n    return max_tries\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 5 == 3 and num % 6 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    num_str = ''.join(str(i) for i in range(1, 31))\n    smallest_num = '1' + '0' * (len(num_str) - 47) + num_str[-46:]\n    return int(smallest_num)\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    number_of_children = 10\n    number_to_pick = 2\n\n    return comb(number_of_children, number_to_pick)\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n    from sympy import symbols, nsimplify, sqrt\n    from sympy.functions import cbrt\n\n    getcontext().prec = 6  # Setting precision for Decimal calculations\n\n    # Defining repeating decimals using nsimplify function for exact representation\n    neg_thirteen_thirds = nsimplify(\"-13.333333...\")\n    four_nine_repeated = nsimplify(\"4.09\")\n    eleven_one_repeated = nsimplify(\"11.111111...\")\n\n    # Calculating the expression with repeating decimals using sympy functions for exact calculations\n    numerator = cbrt(neg_thirteen_thirds) * four_nine_repeated ** 2\n    denominator = Decimal('59.24') - Decimal(sqrt(eleven_one_repeated).evalf())\n\n    # Expression evaluation\n    expression = numerator / denominator\n    \n    # Rounding off to 3 decimal places\n    ans = round(Decimal(expression.evalf()), 3)\n    \n    return ans\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    girls_fraction = 3 / 4\n    total_fraction = 1\n    boys_fraction = total_fraction - girls_fraction\n    total_members = boys / boys_fraction\n    girls = total_members * girls_fraction\n    return int(girls)\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome number is 10001 (the first with a 1 and then all zeroes until the last digit which is 1)\n    least_5_digit_palindrome = 10001\n    # The greatest 6-digit palindrome number is 999999 (all nines)\n    greatest_6_digit_palindrome = 999999\n    # The difference between the two numbers\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    return difference\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    # given equation 32 - 15 = 12 + â \n    # to find the value of â  we will isolate it:\n    # â  = (32 - 15) - 12\n    ans = (32 - 15) - 12\n    return ans\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    while True:\n        if sara_age + lucy_age == 60:\n            return sara_age - 8\n        sara_age += 1\n        lucy_age += 1\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    return 11 + 17 + 9 - 7 + 12 + 8\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seaters = 6\n    three_seaters = 9\n    \n    total_seating = (two_seaters * 2) + (three_seaters * 3)\n    \n    return total_seating\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for price of one banana and one apple\n    banana, apple = symbols('banana apple')\n    \n    # Eq1: 1.5 = 2*banana + 3*apple\n    eq1 = Eq(1.5, 2*banana + 3*apple)\n    # Eq2: 1.45 = 3*banana + 2*apple\n    eq2 = Eq(1.45, 3*banana + 2*apple)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (banana, apple))\n    \n    # Calculate the cost for 1 banana and 1 apple\n    cost_for_one_each = solutions[banana] + solutions[apple]\n    \n    return cost_for_one_each\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    payment = 16.00  # Paying with 1 pound coins, the immediate greater whole number\n    change = payment - book_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    sequence = [99, -101, 103, -105, 107, -109, 111, -113, 115, -117, 119]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    total_minutes = 5\n\n    total_marshmallows = marshmallows_per_minute * total_minutes\n\n    return total_marshmallows\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    # Convert 201 1/7 to an improper fraction\n    fraction = 201 * 7 + 1\n\n    # Now divide that by 8 and subtract 1/7\n    A = (fraction / 7) / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Rona has to take out at least 1 glove from each color to be sure\n    # that she doesn't have a pair. That's 5 gloves.\n    # But, she needs to take one more glove to guarantee that she has a pair.\n    ans = 5 + 1\n    return ans\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let F be the number of footballs and B be the number of basketballs\n    F, B = symbols('F B')\n\n    # Original ratio of footballs to basketballs\n    original_ratio = Eq(F, 2/5 * B)\n\n    # Ratio after 16 basketballs were sold\n    new_ratio = Eq(F, 2/3 * (B - 16))\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (F, B))\n\n    # Calculate the total number of footballs and basketballs originally\n    total = solutions[F] + solutions[B]\n    \n    return total\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    # Calculate the first multiple of 8 greater than or equal to 30\n    first_multiple = (30 + 7) // 8 * 8   # or -(-30 // 8) * 8\n    # Calculate the last multiple of 8 less than or equal to 82\n    last_multiple = 82 // 8 * 8\n    # Calculate the number of multiples of 8 in the range\n    number_of_multiples = (last_multiple - first_multiple) // 8 + 1\n    \n    return number_of_multiples\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    lines = 13\n    max_junctions = (lines * (lines - 1)) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam Sam had 40 stickers more than Peter.\n    initial_condition = Eq(sam, peter + 40)\n    \n    # Sam gave 20% of his stickers to Peter.\n    after_sam_gives = sam - 0.20 * sam\n\n    # Peter gave 25% of his stickers to Sam.\n    after_peter_gives = peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam)\n\n    # In the end, Sam had 96 stickers more than Peter.\n    final_condition = Eq(after_sam_gives + 0.25 * (peter + 0.20 * sam), after_peter_gives + 96)\n\n    # Solving the system of equations\n    solutions = solve((initial_condition, final_condition), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increase_rate = 0.10\n    decrease_rate = 0.10\n\n    # Price after increase during Spring Festival\n    spring_festival_price = original_price * (1 + increase_rate)\n    \n    # Price after decrease during Lantern Festival\n    lantern_festival_price = spring_festival_price * (1 - decrease_rate)\n    \n    return lantern_festival_price\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Calculate the number of games in the group stage using round-robin formula:\n    # For n players, the number of games is n*(n-1)/2 for each group\n    # There are 4 groups, and each group has 4 people\n    group_games_per_group = 4 * (4 - 1) // 2\n    total_group_games = group_games_per_group * 4\n    \n    # Calculate the number of games in the knockout stage:\n    # There will be 8 contestants, and in a knockout stage, the number of games\n    # will always be one less than the number of contestants since each game\n    # eliminates one contestant until the winner is found.\n    knockout_games = 8 - 1\n    \n    # The sum of the group stage games and the knockout stage games gives the total number of games\n    total_games = total_group_games + knockout_games\n    \n    return total_games\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    flora_age = 5\n    flora_age_two_years_ago = flora_age - 2\n    fathers_age_two_years_ago = 9 * flora_age_two_years_ago\n    fathers_age_now = fathers_age_two_years_ago + 2\n    return fathers_age_now\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert total time spent to hours\n    total_time = 7.2 / 60\n    \n    # Relative speed while running forward\n    forward_speed = 12 + 8  # teacher speed + student speed\n    # Relative speed while running back\n    back_speed = 12 - 8  # teacher speed - student speed\n    \n    # Let's denote the distance from the end of the line to the front as x\n    # Time is distance over speed\n    # Time to run forward is x / forward_speed and time to run back is x / back_speed\n    # Total time is the sum of times\n    # total_time = x / forward_speed + x / back_speed\n    # x = total_time / (1 / forward_speed + 1 / back_speed)\n    \n    x = total_time / (1 / forward_speed + 1 / back_speed)\n    \n    return x\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    sweets_count = 0\n    for sweets in range(31, 40):\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            sweets_count = sweets\n            break\n    return sweets_count\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    # Let x be the current age of the younger brother and y be the current age of the older brother.\n    # When the older brother was x years old, the younger brother was 12.\n    # When the younger brother becomes y years old, the older brother will be 27.\n    # The difference in their ages remains constant, therefore:\n    # y - x = 27 - y and x - 12 = y - x\n    # Solving for x and y, we get the following two equations:\n    # 2 * (y - x) = 27 - 12\n    # 2 * (y - x) = 15\n    # y - x = 15 / 2\n    # y - x = 7.5 and since the ages must be integers, this is not possible.\n    # Therefore, we can adjust our equations.\n    # It means that the older brother was 27 - 12 = 15 years older than the younger when the older was the age the younger is now.\n    # If we assume the younger is x, then the older is x + 15.\n    # (x + 15) + (x + 15) - x = 27, where the first term is the current age of the older brother, and the second term is the age the older brother will be when the younger is as old as the older is currently.\n    # We simplify the equation:\n    # x + 15 + x + 15 - x = 27\n    # x + 15 + 15 = 27\n    # 2x + 30 - x = 27\n    # x = 27 - 30\n    # x = -3\n    # This negative age does not make sense in this context, so we have made an error.\n    # We must re-evaluate our equations: y = x + 15\n    # Then, when the younger brother becomes y years old,\n    # the difference between their future ages will be the same as it is now:\n    # y + (y - x) = 27\n    # Substitute y with x + 15:\n    # x + 15 + ((x + 15) - x) = 27\n    # x + 15 + 15 = 27\n    # x + 30 = 27\n    # x = 27 - 30\n    # x = -3\n    # We have arrived at the same conclusion, so we must reevaluate our equations again:\n    # When the younger becomes y years old, the older will be y + (y - x) = 27\n    # y + (y - x) = 27\n    # x + 15 + (x + 15 - x) = 27\n    # x + 15 + 15 - x = 27\n    # 15 + 15 = 27\n    # This is incorrect as the sum of 15 and 15 is not 27.\n    # There must have been a mistake in formulating the equations.\n    # Let's reformulate them:\n    # y = x + 15 (the difference in ages is 15 years)\n    # In the future, when younger brother is y years old:\n    # y + (y - x) = 27\n    # Now, substitute x with y - 15:\n    # y + (y - (y - 15)) = 27\n    # y + 15 = 27\n    # y = 27 - 15\n    # y = 12\n    # This cannot be correct, as the younger brother is currently 12, so the older can't be 12 as well.\n    # We need to find the correct current age of the older brother.\n    # Let's start over and formulate the equations correctly:\n    # Assume current age of younger brother = y\n    # Current age of older brother = y + d where d is the difference in their ages\n    # (i) When older brother's age was y, the difference d = y - 12\n    # (ii) When younger brother's age will be y + d, the older brother's age will be 27.\n    # Therefore, y + 2d = 27 (since d = y - 12)\n    # Replacing d with y - 12 in equation (ii), we get:\n    # y + 2(y - 12) = 27\n    # y + 2y - 24 = 27\n    # 3y = 27 + 24\n    # 3y = 51\n    # y = 51 / 3\n    # y = 17\n    # Now we have the current age of the younger brother, which is 17 years.\n    # Now, the current age of the older brother (y + d):\n    # d = y - 12 as per equation (i), therefore d = 17 - 12\n    # d = 5\n    # y + d = 17 + 5\n    # y + d = 22\n    # So the current age of the older brother is 22 years old.\n    \n    return 22\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for number in range(8, 86):\n        count += str(number).count('3')\n        if str(number) == '83':\n            return count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        even_number = 2 * i\n        count += str(even_number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    value_in_pounds = 1.25\n    value_in_pence = value_in_pounds * 100  # Convert pounds to pence\n    return value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_cost = ramen_cost - 5\n    duck_cost = 6 * ramen_cost\n    total_cost = ramen_cost + pineapple_cost + duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    # Total distance the snail needs to climb\n    total_distance = 18\n    \n    # Distance snail climbs each day except the 6th day\n    day_climb = 7\n    \n    # Distance the snail climbs on the 6th day\n    sixth_day_climb = 3\n\n    # Calculate the total distance climbed after 5 days\n    distance_after_5_days = day_climb * 5\n\n    # Subtract the distance climbed after 5 days from the total distance\n    remaining_distance = total_distance - distance_after_5_days\n\n    # On the 6th day, the snail climbs out, so the remaining distance must be\n    # equal to what it climbs on the 6th day plus what it slides down\n    slide_down_distance = remaining_distance - sixth_day_climb\n\n    return slide_down_distance\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Convert minutes to hours (20 minutes late = 1/3 hours, 10 minutes early = 1/6 hours)\n    time_late = 20 / 60\n    time_early = 10 / 60\n\n    # Let the actual time taken to travel be t hours and the distance be d km\n    # When travelling at 4 km/h, time is t + 1/3 hours\n    # When travelling at 6 km/h, time is t - 1/6 hours\n\n    # Using the formula: Speed = Distance / Time\n    # And the system of equations:\n    # d = 4 * (t + 1/3)\n    # d = 6 * (t - 1/6)\n\n    # Solving the two equations for d (they are equal for both cases):\n    # 4 * (t + 1/3) = 6 * (t - 1/6)\n\n    # Rearrange the equation to solve for t:\n    # 4t + 4/3 = 6t - 1\n    # 2t = 4/3 + 1\n    # 2t = 7/3\n    # t = 7/6 hours (actual time it would take at a correct speed)\n\n    # Now find the distance using either equation:\n    # d = 4 * (7/6 + 1/3) km\n    # d = 4 * (7/6 + 2/6) km\n    # d = 4 * (9/6) km\n    # d = 4 * 1.5 km\n    d = 4 * 1.5\n\n    return d\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining_candies = 3 # Start with the final amount of candies\n\n    # Reverse Ken's action\n    ken_took = (remaining_candies * 2) - 1 + 2\n    candies_after_nini = remaining_candies + ken_took\n\n    # Reverse Nini's action\n    nini_took = (candies_after_nini * 2) - 3 + 2\n    candies_after_ivy = candies_after_nini + nini_took\n\n    # Reverse Ivy's action\n    ivy_took = (candies_after_ivy * 2) + 2 - 2\n    initial_candies = candies_after_ivy + ivy_took\n\n    # Reverse Eddie's action\n    # Eddie took 1 more than half, so we multiply by 2 and subtract 1\n    eddie_took = (initial_candies * 2) + 1 - 2\n    initial_candies += eddie_took\n\n    return initial_candies\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    letter_combinations = set(permutations('CYZZ'))\n    return len(letter_combinations)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls, 3 * boys)\n    equation2 = Eq(2 * girls + 3 * boys, 99)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    group_size = gcd(gcd(12, 16), 20)\n\n    return group_size\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    return m + n\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    import math\n    shortest_length = math.lcm(2, 3, 5)\n    return shortest_length\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    term_position = 15\n\n    nth_term = first_term + (term_position - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Unit conversion (all to centimeters):\n    # 5 m = 500 cm\n    # 120 cm = 120 cm (unchanged)\n    # 50 mm = 5 cm\n    # 8 feet = 8 * 30.48 cm (1 foot = 30.48 cm)\n\n    heights_cm = [500, 120, 5, 8 * 30.48]\n\n    # typical height range for pupils in cm (usually would be around 120 cm to 160 cm)\n    min_height = 120\n    max_height = 200\n\n    # checking which height estimates are typically possible\n    correct_estimates = [h for h in heights_cm if min_height <= h <= max_height]\n\n    return len(correct_estimates)  # returns the number of correct estimates\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    average_boys = 74\n    average_total = 82\n    \n    # Calculate the total score of all participants\n    total_score_all = (total_boys + total_girls) * average_total\n    # Calculate the total score of the boys\n    total_score_boys = total_boys * average_boys\n    # Calculate the total score of the girls\n    total_score_girls = total_score_all - total_score_boys\n    # Calculate the average score of the girls\n    average_girls = total_score_girls / total_girls\n    \n    return average_girls\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # Use the capture-recapture method to estimate the fish population\n    marked_fish = 100\n    caught_fish_second_time = 200\n    marked_fish_second_time = 25\n\n    # Calculate estimate of the total fish population\n    total_fish_estimate = (marked_fish * caught_fish_second_time) / marked_fish_second_time\n\n    return total_fish_estimate\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_food = 12 * 15\n    days_for_20_rabbits = total_food / 20\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = sum(solutions.values())\n\n    return total_sweets\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_gave = 22\n    dress_cost = 56\n\n    total_money = susan_money + mother_gave\n    money_needed = dress_cost - total_money\n\n    return money_needed\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    mass_per_packet = 0.23\n    packets = 6\n    total_mass = mass_per_packet * packets\n    return total_mass\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of trees planted by boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Equation for the total number of trees\n    equation1 = Eq(boys + girls, 100)\n\n    # Equation for the difference in the number of trees planted by girls and boys\n    equation2 = Eq(girls, boys + 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Define the time Abigail gets up\n    get_up_time = datetime.strptime('07:40', '%H:%M')\n\n    # Add 25 minutes for starting breakfast\n    breakfast_start_time = get_up_time + timedelta(minutes=25)\n\n    # Add 10 minutes for breakfast duration\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n\n    # Add 35 minutes for journey duration\n    school_arrival_time = breakfast_end_time + timedelta(minutes=35)\n\n    # Registration time is 5 minutes before arrival\n    registration_time = school_arrival_time - timedelta(minutes=5)\n\n    # Format the resulting time to return only the time part as a string\n    return registration_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    count = 0\n    for two_gram_weights in range(0, 77 // 2 + 1):\n        for three_gram_weights in range(0, 77 // 3 + 1):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarters_in_one_dollar = 4\n    ans = total_amount * quarters_in_one_dollar\n    return ans\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    n = 20\n    sum_to_n = n * (n + 1) // 2\n    sum_squares_to_n = sum_to_n ** 2\n\n    m = 9\n    sum_to_m = m * (m + 1) // 2\n    sum_squares_to_m = sum_to_m ** 2\n\n    ans = sum_squares_to_n - sum_squares_to_m\n\n    return ans\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_for_four_assignments = 96 + 85 + 89 + 92\n    average_score = 90\n    num_assignments = 5\n\n    total_score_needed = average_score * num_assignments\n    score_on_fifth_assignment = total_score_needed - total_for_four_assignments\n\n    return score_on_fifth_assignment\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are as follows:\n    # x â¡ 3 (mod 4)\n    # x â¡ 4 (mod 5)\n    # x â¡ 6 (mod 7)\n    congruences = [(3, 4), (4, 5), (6, 7)]\n\n    # Solve the system of congruences to find the minimum x\n    x, _ = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure that there are at least 10 pencils for each of 5 different colours\n    # we can take at worst case 10 pencils from 4 colours (10*4) and 9 pencils from \n    # 4 other colours, which will not guarantee us to have 10 pencils of those colours,\n    # and finally take additional pencils to guarantee the 5th colour.\n\n    # So the worst case before drawing a fifth colour is:\n    # 10 pencils each from 4 different colours = 10*4\n    # plus 9 pencils from another 4 different colours = 9*4\n    # This ensures that we have 4 colours with at least 10 pencils, and 4 colours with 9 pencils.\n    pencils = (10*4) + (9*4)\n    # Next, we draw one more pencil, which at this point, will ensure that we have\n    # at least 10 pencils of 5 different colours.\n    pencils += 1\n\n    return pencils\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    # Let's denote the number of girls as 'g' and boys as 'b'.\n    # According to the problem:\n    # b = g + 90\n    # The total number of pupils is 1690, so we have:\n    # g + b = 1690\n    # Now let's denote the number of girls who can swim as 'gs' and cannot swim as 'gn'.\n    # From the ratio given (31:49), we have:\n    # gs / gn = 31 / 49\n    # gs = 31/80 * (gs + gn) = 31/80 * g since gs + gn = g\n    # gn = 49/80 * (gs + gn) = 49/80 * g\n    # Similarly, let's denote the number of boys who can swim as 'bs' and cannot swim as 'bn':\n    # bs = bn - 120\n    # Now, replacing the values of 'g' and 'b' in terms of 'p', where p is the total pupils:\n    # g = 800 and b = 890 (from solving the system of equations)\n    # Therefore:\n    g = 800\n    b = 890\n    # Calculating the number of girls who cannot swim, which is 49/80 of the total girls:\n    gn = 49/80 * g\n    # Similarly, calculating boys who can swim and cannot swim based on the given conditions:\n    # bn - bs = 120 and bn + bs = b so, 2*bn = b + 120\n    bn = (b + 120) / 2\n    # Now, calculating the total number of pupils who cannot swim:\n    total_cannot_swim = gn + bn\n    return int(total_cannot_swim)\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    coach_capacity = 34\n    \n    num_coaches, remainder = divmod(pupils, coach_capacity)\n    if remainder > 0:\n        num_coaches += 1\n\n    return num_coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pip, bud = symbols('pip bud')\n    \n    original_ratio = Eq(4*pip, 7*bud)\n    new_ratio = Eq(8*(pip), 15*(bud + 5))\n    \n    solutions = solve((original_ratio, new_ratio), (pip, bud))\n    \n    return solutions[pip]\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5 = (5 ** 20) % 10\n    last_digit_7 = (7 ** 30) % 10\n\n    ans = (last_digit_5 * last_digit_7) % 10\n    return ans\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    \n    length1 = 39\n    length2 = 52\n\n    ans = gcd(length1, length2)\n    \n    return ans\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # Calculate the total perimeter\n    perimeter = (144 + 204) * 2  # in meters\n\n    # Since wheat are planted on corners, we need to account for those\n    # Subtracting the four corners from the total wheats\n    effective_wheat_count = 116 - 4\n    \n    # Calculate the space between the wheats\n    distance_between_wheat = perimeter / effective_wheat_count\n    return distance_between_wheat\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    return 999 / 2\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    # Joe shares his chocolate bar with his friend, so we divide the chocolate bar into two.\n    total_squares = 16\n    squares_shared = total_squares // 2  # Integer division to split into two equal parts\n    \n    return squares_shared\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B = symbols('A B')  # Define the symbols for A and B grades\n    # Create equations based on Simon and Peter's grades and scores\n    equation1 = Eq(4*A + 4*B, 36)\n    equation2 = Eq(2*A + 3*B, 22)\n    \n    # Solve for the value of A and B\n    solutions = solve((equation1, equation2), (A, B))\n    # Calculate the score of someone with three A grades and five B grades.\n    score = 3*solutions[A] + 5*solutions[B]\n    return score\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 46))\n\n    for a in primes:\n        for b in primes:\n            for c in primes:\n                # Ensure all primes are unique\n                if len({a, b, c}) == 3:\n                    # A's statement implies none of the primes can form a + b = c\n                    if not (a+b in primes or a+c in primes or b+c in primes):\n                        # B knows that b - 1 is not a prime (since difference is 7)\n                        # b cannot be 2 as (b - 1 - 7) 1 isn't a prime\n                        # So it has to be an even number, so b is odd. \n                        # b also can't be too low because (b - 1 - 7) has to be prime\n                        if (b - 1) not in primes and b != 2 and b > 7:\n                            if (b - 1 - 7) in primes:\n                                # C's statement after multiplication by 2 forms a correct sum\n                                if a + 2*c == b or b + 2*c == a:\n                                    return a + b + c\n    return None\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    between_children = 2\n    amanda_from_end = 7\n\n    # We calculate Amanda's position from the start by considering the children between her and Laura\n    # as well as the children behind her up to the end of the queue\n    amanda_position_from_start = laura_position + between_children + 1\n\n    # Total number of children is Amanda's position from the start plus the children behind her\n    total_children = amanda_position_from_start + amanda_from_end - 1\n\n    return total_children\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # A is the smallest prime number\n    A = 2\n    # B is the smallest composite number\n    B = 4\n    # C is neither prime number nor composite number or zero\n    C = 1\n    # D is 2 less than the smallest prime number\n    D = A - 2\n    # E is the largest composite number up to 10\n    E = 9\n    # F only has factors 1 and 5\n    F = 5\n    # G is the greatest factor of 8\n    G = 4\n    # H is the lowest multiple of 6\n    H = 6\n\n    # Concatenate the numbers to form the phone number\n    phone_number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n\n    return phone_number\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_after_stockport = 322\n\n    people_before_stockport = people_after_stockport - people_got_on + people_got_off\n\n    return people_before_stockport\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    day_in_seconds = 24 * 60 * 60\n    part_of_day = (1/4) * (1/6) * (1/8)\n    seconds = day_in_seconds * part_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    return 34 * 100\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of stickers Charlotte had\n    x = symbols('x')\n    \n    # Marry's stickers after giving away 20%\n    mary_stickers = 7 * (x /5) * 0.8\n    # Alexis's stickers after giving away 20%\n    alexis_stickers = 5 * (x /5) * 0.8\n    # Charlotte's stickers increased by 80%\n    charlotte_stickers = x + (7 * (x /5) + 5 * (x /5)) * 0.2\n\n    # Mary has 20 stickers more than Charlotte after distribution\n    equation = Eq(mary_stickers - charlotte_stickers, 20)\n\n    # Solve the equation for x\n    x_value = solve(equation, x)[0]\n    \n    # Calculate the initial amount of stickers Alexis had using x_value\n    alexis_initial_stickers = 5 * (x_value /5)\n\n    return alexis_initial_stickers\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from itertools import permutations\n\ndef solution():\n    nums = [2, 2, 2, 3, 3]\n    perms = set(permutations(nums, 4))   # Create unique permutations of length 4\n    return len(perms)\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    import math\n    \n    # Eddie and his mom and dad can be arranged among themselves in 3! ways (since they want to stand together)\n    family_arrangement = math.factorial(3)\n\n    # Considering Eddie, his mom, and dad as a single unit, now we have this single unit + the rest of the people.\n    # We need to figure out how many people are there in total to calculate the number of ways\n    # the single unit + other people can be arranged.\n    # Assuming \"the family\" includes only Eddie, his mom, and dad, and no other family members need to be arranged.\n    total_people = 3  # Since no other family members are mentioned, it's just Eddie, his mom, and dad\n\n    # Now, calculate the arrangements of the total people (considering the family as one unit)\n    total_arrangement = math.factorial(total_people)\n\n    # Total number of arrangements are the product of arrangements within the family,\n    # and total possible arrangements considering the family as a single unit\n    num_ways = family_arrangement * total_arrangement\n    \n    return num_ways\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                Pip_number = int(f\"{a}{b}{c}{a}\")\n                Bud_number = int(f\"{a}{c}{b}{a}\")\n                if Pip_number + Bud_number == 5510:\n                    return Pip_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Let x be the number of cows that can be fed for 50 days.\n    # Assuming the amount of grass growth in one day is constant and sufficient to feed a fixed number of cows.\n\n    # The amount of grass needed for 25 cows for 10 days is the same as 15 cows for 20 days.\n    # Therefore, 25 cows * 10 days = 15 cows * 20 days.\n    # Let G be the total amount of grass that grew over the period.\n    # G = 25 cows * 10 days = 15 cows * 20 days.\n\n    # Solve for x in terms of G and 50 days:\n    # G = x cows * 50 days.\n    # x = G / 50 days.\n\n    # From the equivalence of grass needed:\n    # 25 cows * 10 days = 15 cows * 20 days.\n    # x = (25 * 10) / 50 days = (15 * 20) / 50 days.\n    # Both expressions should result in the same x, since they represent the same total amount of grass G.\n    x = (25 * 10) / 50\n\n    return x\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    original_ratio = Eq(oranges/lemons, 3/5)\n    new_ratio = Eq((oranges - 48)/lemons, 1/2)\n    \n    solutions = solve((original_ratio, new_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    correct_minuend = 166\n    \n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n    \n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3  # Since first day is 1/3 of the second day\n    third_day = (5 / 3) * second_day\n\n    total_watermelons = first_day + second_day + third_day\n\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    # We need to find the maximum number of days he can take,\n    # so we are looking for the longest arithmetic progression\n    # that will sum up to 95 (the total number of pages).\n    # Since he reads a different number of pages each day, we\n    # can start the progression at 1 page on the first day, 2\n    # on the second, and so on until the sum reaches 95.\n\n    # Initialize the total number of pages read and the number of days\n    total_pages = 95\n    sum_of_pages = 0\n    days = 0\n\n    # Iterate until the sum of pages is less than or equal to total pages\n    while sum_of_pages < total_pages:\n        days += 1\n        sum_of_pages += days\n\n    # If the sum exceeded the total number of pages, the last day\n    # is not fully counted as we can't read partial pages.\n    if sum_of_pages > total_pages:\n        days -= 1\n\n    return days\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount_rate = 0.30\n    additional_discount = 100\n    sales_tax_rate = 0.10\n\n    discount_price = original_price * (1 - discount_rate)\n    price_after_additional_discount = discount_price - additional_discount\n    final_price = price_after_additional_discount * (1 + sales_tax_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    cakes_possible = 250 / flour_per_cake\n    return int(cakes_possible)\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # There are 3! ways to arrange the math books among themselves\n    math_books_arrangements = factorial(3)\n    # There are 2! ways to arrange the English books among themselves\n    english_books_arrangements = factorial(2)\n    # There are 3! ways to arrange the other books among themselves\n    other_books_arrangements = factorial(3)\n\n    # Now consider all math books as a single book, same for English books\n    # So there are 3 \"single\" books to place on the shelf, which can be done in 3! ways\n    single_books_arrangements = factorial(3)\n\n    # Total arrangements are the product of the individual arrangements\n    total_arrangements = (math_books_arrangements * \n                          english_books_arrangements * \n                          other_books_arrangements * \n                          single_books_arrangements)\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ophelia, penelope = symbols('ophelia penelope')\n    \n    equation1 = Eq(ophelia, 4 * penelope)\n    equation2 = Eq((penelope + 21) * 8, 5 * ophelia)\n    \n    solutions = solve((equation1, equation2), (ophelia, penelope))\n    \n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (32 * 8) // 20\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # The number of days Kevin takes off\n    kevin_off = symbols('kevin_off')\n\n    # Ivy's work rate\n    ivy_rate = 1 / 24\n    # Kevin's work rate\n    kevin_rate = 1 / 20\n    # Total work done (1 job)\n    total_work = 1\n\n    # Equation representing the work done by Ivy and Kevin together until Kevin takes days off\n    equation = Eq(ivy_rate * 12 + kevin_rate * (12 - kevin_off), total_work)\n\n    # Solve for the number of days off that Kevin takes\n    solution = solve(equation, kevin_off)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    total_colors = 2  # black and red\n    socks_per_color = 3  # to ensure one pair, she must take one more than twice the number of colors\n    socks_to_take = (socks_per_color * total_colors) + 1\n    return socks_to_take\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    total_statues = 9\n    statues_to_arrange = 4\n\n    arrangements = factorial(total_statues) // factorial(total_statues - statues_to_arrange)\n    \n    return arrangements\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # in pence\n    new_price = 1.00 * 100  # converting pounds to pence\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_rate = 0.08\n    total_cost = bracelet_cost * (1 + gst_rate)\n    return total_cost\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of bicycles and tricycles\n    bicycles, tricycles = symbols('bicycles tricycles')\n\n    # Equation 1: Total number of tricycles and bicycles is 300\n    equation1 = Eq(bicycles + tricycles, 300)\n\n    # Equation 2: Total number of tricycle wheels is 180 more than bicycle wheels\n    # Bicycles have 2 wheels, tricycles have 3 wheels\n    equation2 = Eq(3 * tricycles - 2 * bicycles, 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bicycles, tricycles))\n\n    # Only interested in the number of bicycles\n    return solutions[bicycles]\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    number_of_years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** number_of_years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    depreciation_factor = (1 - depreciation_rate) ** years\n\n    final_value = initial_value * depreciation_factor\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 6 + 9\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    grey_rabbits = 14\n    pattern_total = 1 + 2 + 2  # black, white and grey (1B, 2W, 2G)\n\n    # Each complete pattern contains 2 grey rabbits\n    complete_patterns = grey_rabbits // 2\n\n    # Calculate the number of other rabbits in the complete patterns\n    black_rabbits = complete_patterns * 1\n    white_rabbits = complete_patterns * 2\n\n    # Check if there is an extra grey rabbit without a complete pattern\n    extra_grey = grey_rabbits % 2\n    rabbits_in_incomplete_pattern = 0\n    if extra_grey:\n        # If there's an extra grey, then there must be 1 black and 2 white rabbits before it\n        # because the pattern is (1B, 2W, 2G) and it starts with a black rabbit\n        rabbits_in_incomplete_pattern = 1 + 2 + extra_grey\n\n    # Total number of rabbits\n    total_rabbits = (black_rabbits + white_rabbits + grey_rabbits) + rabbits_in_incomplete_pattern\n\n    return total_rabbits\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = 2015**2 - 2016*2014\n    return ans\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    # In division, dividend = divisor * quotient + remainder\n    # To minimize the dividend, minimize the divisor\n    # The smallest positive divisor that still gives a remainder is 1 more than the remainder\n    # as the remainder has to be strictly less than the divisor. So, minimum divisor = remainder + 1\n    min_divisor = remainder + 1\n    min_dividend = min_divisor * quotient + remainder\n    return min_dividend\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number_with_decimal = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number_with_decimal, 1)\n    is_Tongtong_correct = rounded_number == 9764.0\n    return rounded_number, is_Tongtong_correct\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    not_chocolate_not_foil = 9\n\n    # Number of chocolate biscuits\n    # Using the inclusion-exclusion principle, we can calculate the total number of chocolate biscuits\n    # chocolate = total - (foil_wrappers + not_chocolate_not_foil) + chocolate_with_foil\n    chocolate = total_biscuits - (foil_wrappers - chocolate_with_foil) - not_chocolate_not_foil\n\n    return chocolate\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let original speed be v (meters/minute) and original time be t (minutes)\n    v, t = symbols('v t', real=True, positive=True)\n    \n    # If speed increases by 25%, time decreases by 20 minutes\n    # New speed = 1.25 * v\n    # New time = t - 20\n    equation1 = Eq(1.25 * v * (t - 20), v * t)\n    \n    # If speed decreases by 45 m/min, time increases by 75%\n    # New speed = v - 45\n    # New time = 1.75 * t\n    equation2 = Eq((v - 45) * 1.75 * t, v * t)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (v, t))\n\n    # Distance = original speed * original time\n    distance = solutions[v] * solutions[t]\n    \n    return distance\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number of crystals Jason had initially\n    initial_crystals = symbols('initial_crystals')\n\n    # Equation based on the problem description\n    # After selling to Yvonne and mining 20 more, then selling 14 to Cherlyn, Jason has 35 left.\n\n    equation = Eq((initial_crystals / 2) - 10 + 20 - 14, 35)\n\n    # Solve the equation\n    solutions = solve(equation, initial_crystals)\n\n    # Get the number of crystals Jason had initially\n    return solutions[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # The number of zeros at the end of a product is determined by the number of pairs of 2 and 5\n    # Since there are fewer 2s (10) than 5s (15), the number of zeros will be equal to the number of 2s\n\n    return 10\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    olaf, anna = symbols('olaf anna')\n\n    # At first, Olaf had thrice as many carrots as Anna: olaf = 3 * anna\n    equation1 = Eq(olaf, 3 * anna)\n\n    # After Olaf gave away 335 carrots, Anna had twice as many carrots as Olaf: \n    # anna + 335 = 2 * (olaf - 335)\n    equation2 = Eq(anna + 335, 2 * (olaf - 335))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    # Return the number of carrots Anna has\n    return solutions[anna]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    digit_permutations = permutations(digits)\n    count = 0\n\n    # There are 4 possible positions for the decimal point (after each digit)\n    for perm in digit_permutations:\n        count += 4\n    \n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Bala = 10\n    Bala_behind_Ali = 1\n\n    total_people = people_in_front_of_Ali + Bala_behind_Ali + people_behind_Bala\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    return 397 + 784 + 86\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n    \n    # Total cars - black dodges gives us Ford cars that are not black\n    non_black_fords = total_cars - black_dodges\n\n    # Ford cars that are not black will be blue since all cars are black or blue\n    blue_fords = non_black_fords - (fords - non_black_fords)\n\n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    plant_cost_pence = 85\n    budget_pounds = 30\n    budget_pence = budget_pounds * 100  # Convert pounds to pence\n    plants = budget_pence // plant_cost_pence  # Integer division to get the number of plants\n\n    return plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    sum_eq = Eq(x + y, 80)\n    diff_eq = Eq(x - y, 40)\n    \n    solutions = solve((sum_eq, diff_eq), (x, y))\n    \n    smaller_number = min(solutions[x], solutions[y])\n    \n    return smaller_number\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    for num in range(1, 11 * 7):  # Only need to check up to LCM of 11 and 7\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4 # Start with the smallest composite number greater than 1\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        # Check if all four numbers are composite\n        if all(len([i for i in range(2, x//2+1) if x%i == 0]) > 0 for x in [A, B, C, D]):\n            ans = A + B + C + D\n            break\n        A += 1\n    return ans\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # Using Pigeonhole Principle, to ensure picking at least one of each colored ball,\n    # pick all balls of one color plus one more to ensure at least one ball of next color is picked.\n    total_balls = 8 + 10 + 13  # Total balls\n    max_color_balls = max(8, 10, 13)  # The maximum of one color\n    min_picks = total_balls - max_color_balls + 1  # Picking one of each color\n    \n    return min_picks\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    daily_earnings = 120\n    days_worked = 5\n\n    total_earnings = daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3/8) * 960\n    return ans\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    games_played = comb(num_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    # Assume each child gets at least one apple. We distribute one to each first.\n    distributed_apples = children\n\n    # Remaining apples to distribute\n    remaining_apples = total_apples - distributed_apples\n\n    # In the best case scenario to minimize the maximum number of apples any child gets,\n    # we distribute the apples as evenly as possible among the 7 remaining children\n    # (one child has already received one apple), and then give the rest to the eighth child.\n    apples_to_one_child = remaining_apples // (children - 1)\n\n    # Calculate the minimum possible apples for the child who gets the most\n    max_apples_to_one_child = apples_to_one_child + 1  # the +1 accounts for the apple given at the start\n\n    return max_apples_to_one_child\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    import math\n\n    num1 = 60\n    num2 = 72\n    num3 = 84\n\n    gcd_1_2 = math.gcd(num1, num2)\n    ans = math.gcd(gcd_1_2, num3)\n\n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    correct_mark = 3\n    wrong_mark = -2\n    total_marks = 125\n\n    # Assume all answers are correct\n    assumed_correct_answers = total_marks / correct_mark\n\n    # The difference between assumed correct answers and actual correct answers\n    # Multiplied by the mark difference between a wrong and a right answer\n    # Will give us the total wrong answers\n    wrong_answer_count = (assumed_correct_answers - total_questions) / (correct_mark + abs(wrong_mark))\n\n    # The correct answers will be total questions minus wrong answers\n    correct_answers = total_questions - wrong_answer_count\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    total_counts = 30\n    stop_at = 10\n    clock_numbers = 12\n\n    start_from = (stop_at - (total_counts % clock_numbers)) % clock_numbers\n    start_from = clock_numbers if start_from == 0 else start_from\n\n    return start_from\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n    for i in range(2, 2011):\n        next_number = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_number)\n    ans = sequence[2010]\n    return ans\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds = 24\n    whole_number = (two_thirds * 3) / 2\n    three_quarters = (whole_number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Distance travelled in the first 2 hours.\n    first_distance = 2 * 40\n    \n    # Total distance.\n    total_distance = first_distance + 280\n    \n    # Time taken for the remaining distance.\n    remaining_time = 280 / 70\n    \n    # Total time taken.\n    total_time = 2 + remaining_time\n    \n    # Average speed.\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_money = 20\n    saved_per_day = 1\n    saved_days = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = saved_per_day * saved_days\n    current_money = original_money + total_saved - lent_to_brother - spent_on_snacks\n\n    return current_money\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    parts_per_cow_per_day = 1\n    number_of_cows = 5\n    number_of_days = 3\n\n    total_parts = parts_per_cow_per_day * number_of_cows * number_of_days\n    return total_parts\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    # This sequence is an arithmetic sequence starting from 23 with a common difference of 2.\n    # General term of the sequence can be written as a + (n-1)d where a is the first term, d is the difference, and n is the number of terms\n    a = 23\n    d = 2\n    # The sum of n terms of an arithmetic sequence is given by n/2 * (2a + (n-1)d)\n    # The sum of the sequence is given as m^2. We have to find the m^2 in the form of n/2 * (2a + (n-1)d) and solve for m.\n\n    # Since k > 30, let's start with k = 31 and increment until we find a perfect square\n    k = 31\n    while True:\n        # The last term in the sequence is (2k-1)\n        last_term = (2 * k - 1)\n        # The number of terms n can be derived from the sequence's last term (last_term = a + (n-1)d)\n        n = (last_term - a) / d + 1\n\n        # Calculate the sum of the sequence which is m^2\n        m_squared = n/2 * (2 * a + (n - 1) * d)\n        m = int(m_squared ** 0.5)\n        \n        # Check if m^2 is a perfect square\n        if m * m == m_squared:\n            return m\n\n        k += 1  # increment k to check for the next possible m\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n    eq1 = Eq(2 * banana + 3 * apple, 3)\n    eq2 = Eq(3 * banana + 2 * apple, 4)\n    solutions = solve((eq1, eq2), (banana, apple))\n    \n    annabella_cost = 10 * solutions[banana] + 10 * solutions[apple]\n    return annabella_cost\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors, men, women, children = symbols('total_visitors men women children')\n    men_percent = 37\n\n    # Equation for the percentage of men\n    equation1 = Eq(men, total_visitors * men_percent / 100)\n\n    # Equation for the number of men, women and children\n    equation2 = Eq(men + women + children, total_visitors)\n\n    # Equation for the ratio of women to children\n    equation3 = Eq(women, (children * 4) / 5)\n\n    # Equation that tells there are 12 more men than children\n    equation4 = Eq(men, children + 12)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (total_visitors, men, women, children))\n\n    return solutions[women]\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amount of oil sold from both the buckets\n    x = symbols('x')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq((89 - x), 12 * (45 - x))\n\n    # Solve the equation for x\n    sold_amount = solve(equation1, x)\n\n    return sold_amount[0]\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_train_to_work_late = 0.7\n    prob_train_home_late = 0.4\n\n    prob_both_trains_on_time = (1 - prob_train_to_work_late) * (1 - prob_train_home_late)\n    prob_at_least_one_late = 1 - prob_both_trains_on_time\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_initial = 86\n    lena_gave_away = 29\n    lena_final = 100\n    \n    strawberries_from_mother = lena_final - (lena_initial - lena_gave_away)\n    \n    return strawberries_from_mother\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # From 10 to 99 inclusive\n    numbers_without_six = (8 * 9)  # 1-5 and 7-9 for first digit, 0-5 and 7-9 for second digit (excluding 6)\n    numbers_with_at_least_one_six = total_two_digit_numbers - numbers_without_six\n    \n    return numbers_with_at_least_one_six\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    \n    return ans\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1 Apr 2023', '%d %b %Y')\n    end_date = datetime.strptime('18 May 2023', '%d %b %Y')\n\n    return (end_date - start_date).days + 1\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    total_count = 2022\n    \n    divisible_by_7 = total_count // 7\n    divisible_by_17 = total_count // 17\n    divisible_by_both = total_count // (7 * 17)\n    \n    ans = total_count - (divisible_by_7 + divisible_by_17 - divisible_by_both)\n    return ans\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n\n    relative_speed = speed_a + speed_b\n    time_to_meet = distance / relative_speed\n\n    return time_to_meet\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    # Calculate the last digit of 2023^2\n    last_digit_of_2023_sq = (2023 ** 2) % 10\n\n    # Calculate the last digit of 2^2023\n    # The pattern of the last digit of powers of 2 is [2, 4, 8, 6] and repeats every 4\n    pattern = [2, 4, 8, 6]\n    last_digit_of_2_2023 = pattern[(2023 % 4) - 1]\n\n    # Calculate the last digit of the sum inside the brackets\n    last_digit_inside_brackets = (last_digit_of_2023_sq + last_digit_of_2_2023) % 10\n\n    # Raising to the power of 3 only affects the last digit\n    # The pattern for any number's last digit when raised to power of 3 is fixed\n    last_digit_of_result = (last_digit_inside_brackets ** 3) % 10\n\n    return last_digit_of_result\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    lines = 13\n    max_intersections = lines * (lines - 1) // 2\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5 = 5 ** 20 % 10\n    last_digit_7 = 7 ** 20 % 10\n    ans = (last_digit_5 * last_digit_7) % 10\n    return ans\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "from math import gcd\n\ndef solution():\n    pencils = 28\n    pens = 63\n\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    mango, orange, pear = symbols('mango orange pear')\n    \n    # Equation 1: mango + orange = 3.8\n    eq1 = Eq(mango + orange, 3.8)\n    \n    # Equation 2: mango + pear = 3.4\n    eq2 = Eq(mango + pear, 3.4)\n    \n    # Equation 3: 4*mango + 2*pear + orange = 13.2\n    eq3 = Eq(4*mango + 2*pear + orange, 13.2)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (mango, orange, pear))\n    \n    # Return the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_watermelons = symbols('total_watermelons')\n\n    # Define equations based on the problem description\n    equation = Eq(total_watermelons - (1/3) * total_watermelons - (3/5) * (2/3) * total_watermelons, 48)\n\n    # Solve the equation\n    solutions = solve(equation, total_watermelons)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Given values\n    AB = CD = 14  # in cm\n    pi = 22/7\n    \n    # Calculate the radius for the semicircles and quadrants\n    radius = AB/2  # because the diameter is AB which equals 14 cm\n\n    # Perimeter of one quadrant (90 degrees of a circle with radius r)\n    quadrant_perimeter = (2 * pi * radius) * (90/360)\n    \n    # Perimeter of one semicircle (180 degrees of a circle with radius r)\n    semicircle_perimeter = (2 * pi * radius) * (180/360)\n    \n    # Since we have two of each, multiply by 2\n    total_perimeter_of_quadrants = 2 * quadrant_perimeter\n    total_perimeter_of_semicircles = 2 * semicircle_perimeter\n\n    # Sum up the perimeters of the quadrants and semicircles\n    total_perimeter = total_perimeter_of_quadrants + total_perimeter_of_semicircles\n    \n    return total_perimeter\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    return 2.99 + 12.99 + 22.99\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pasta_price = 95  # pence\n    total_spent = 1170  # pence (1 pound = 100 pence)\n    \n    pasta_packets = 6\n    rice_packets = 5\n    \n    rice_price = symbols('rice_price')\n    \n    # total cost of pasta packets\n    total_pasta_cost = pasta_packets * pasta_price\n    \n    # equation for total cost\n    equation = Eq(rice_packets * rice_price + total_pasta_cost, total_spent)\n    \n    # solve for the price of a packet of rice\n    rice_price_solution = solve(equation, rice_price)\n    \n    return rice_price_solution[0]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for i in range(10, 100):  # Last two digits can range from 10 to 99\n        number = int(\"6\" + str(i))\n        if number % lcm == 0:\n            return number\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    total_cup_noodles = 10\n    chosen_cup_noodles = 6\n    return comb(total_cup_noodles, chosen_cup_noodles)\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    ans = 336 // 6\n    return ans\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    return 45 * (2/3) * (30/100)\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    total_work = 1  # Painting the house is considered as 1 unit of work.\n    energetic_rate = 1 / 20  # Energetic painter's rate per day.\n    combined_rate = 1 / 12  # Combined rate of both painters per day.\n\n    # Lazy painter's rate per day can be computed by subtracting the\n    # energetic painter's rate from the combined rate.\n    lazy_rate = combined_rate - energetic_rate\n\n    # Time taken by the lazy painter to complete 1 unit of work on their own.\n    lazy_time = total_work / lazy_rate\n\n    return lazy_time\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, b, c = symbols('a b c', integer=True)\n\n    # Define the equation based on the complex fraction\n    equation = Eq(13/10, 1 + 1/(a + 1/(b + 1/c)))\n\n    # Solve the equation for a, b, and c\n    solutions = solve(equation, (a, b, c))\n\n    # Must be integers and positive\n    for sol in solutions:\n        if all(isinstance(i, int) and i > 0 for i in sol):\n            # Compute a + 2b + 3c\n            ans = sol[0] + 2 * sol[1] + 3 * sol[2]\n            return ans\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    smallest_pies = 1\n    \n    while True:\n        if (smallest_pies % 4 == 0) and (smallest_pies % 6 == 0):\n            break\n        smallest_pies += 1\n    \n    return smallest_pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3/2\n\n    girls = boys / boys_to_girls_ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # Since they are consecutive numbers, we can calculate the average first\n    average = 1650 / 15\n    \n    # The middle number in the consecutive sequence is the average\n    middle_number = average\n    \n    # smallest number (middle_number - 7 because there are 7 numbers before the middle one)\n    smallest_number = middle_number - 7\n    \n    # largest number (middle_number + 7 because there are 7 numbers after the middle one)\n    largest_number = middle_number + 7\n    \n    # Sum of the largest and smallest number\n    sum_of_largest_and_smallest = smallest_number + largest_number\n    \n    return int(sum_of_largest_and_smallest)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    oddtastic_count = 0\n    for number in range(1, 1000):\n        odd_digits = all(int(digit) % 2 != 0 for digit in str(number))\n        if odd_digits:\n            oddtastic_count += 1\n    return oddtastic_count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # 'a' when divided by 8 gives remainder of 6, therefore a = 8k + 6 for some integer k\n    # 'b' when divided by 8 gives remainder of 7, therefore b = 8m + 7 for some integer m\n    # The remainder of a sum (a+b) when divided by 8 can be found by adding the remainders of the individual terms\n    remainder_a = 6\n    remainder_b = 7\n    # Calculate the remainder of the sum when divided by 8\n    remainder_sum = (remainder_a + remainder_b) % 8\n\n    return remainder_sum\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    num_skirts = 8\n    num_blouses = 2\n    \n    cloth_used_for_skirts = cloth_per_skirt * num_skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = round(remaining_cloth / num_blouses, 1)\n\n    return cloth_per_blouse\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    num_str = ''\n    i = 1\n    while len(num_str) < 2019:\n        num_str += str(i)\n        i += 1\n    return int(num_str[2018])\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    num_keys = 11\n    num_rooms = 11\n\n    # He must try each key and each time he tries a key, the number of possible correct keys reduces by 1.\n    # Therefore, for the first lock, he has at most 11 tries, for the second at most 10 tries, and so on.\n    ans = sum(range(1, num_keys + 1))\n\n    return ans\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6 + 1/2  # total mass in kilograms\n    basket_mass_kg = 500 / 1000  # converting grams to kilograms\n    kitten_mass_kg = 0.6  # mass of each kitten in kilograms\n    num_kittens = 4\n\n    total_kittens_mass_kg = num_kittens * kitten_mass_kg\n    cat_mass_kg = total_mass_kg - basket_mass_kg - total_kittens_mass_kg\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    unique_numbers = set(permutations(digits, 4))  # Generate all unique permutations of length 4\n    ans = len(unique_numbers)  # Count the number of unique permutations\n    return ans\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_friends = 6\n    cost_per_person = total_cost / number_of_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n    new_price = original_price * (1 + increase_percentage / 100)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    mary = 1\n    brothers = 3\n    sisters = 4\n\n    total_people = mary + brothers + sisters\n    eggs = total_people * (total_people - 1)\n\n    return eggs\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    # Convert start and end times to minutes\n    start_time = 7 * 60 + 50  # 7:50 AM in minutes\n    end_time = 8 * 40  # 8:40 AM in minutes\n\n    # Calculate the duration of the journey in minutes\n    duration_minutes = end_time - start_time\n\n    return duration_minutes\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for price of one apple and one banana\n    apple, banana = symbols('apple banana')\n\n    # Define equations based on the given information\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # This is a quadratic sequence where the nth term is given by n*(n+1)/2\n    # Since the previous term (15) corresponds to the 5th term of the sequence, we need to find the 6th term\n    n = 6\n    missing_number = n * (n + 1) // 2\n    return missing_number\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n\n    money_after_dvd = (5/6) * total_money - 5\n    money_after_magazines = (3/5) * money_after_dvd - 12\n    equation = Eq(money_after_magazines, 24)\n\n    initial_money = solve(equation, total_money)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_after_bag = 80 / (1 - 3/5)\n    initial_amount = remaining_after_bag / (1 - 1/5)\n    return initial_amount\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_poured_out = 5\n    remaining_oil = total_oil - oil_poured_out\n    oil_per_tank = remaining_oil / 6\n    return oil_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'n' be the number of years from now when the grandpa's age will be 5 times Johnny's age\n    n = symbols('n')\n\n    # Let's create equations based on the problem statement\n    johnny_age_now = 8\n    grandpa_age_now = 72\n\n    # In n years, Johnny's age will be (johnny_age_now + n)\n    # In n years, Grandpa's age will be (grandpa_age_now + n)\n    # According to the problem, Grandpa's future age will be 5 times Johnny's future age\n    equation = Eq(grandpa_age_now + n, 5 * (johnny_age_now + n))\n\n    # Solve the equation for n\n    solution = solve(equation, n)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    # Pip's position from the front is 8th\n    pip_position_front = 8\n\n    # Bud's position from the end is 10th, but Pip is in front of Bud with 4 children in between\n    # This means Bud's position from the front is Pip's position + 4 (children in between) + 1 (Bud himself)\n    bud_position_front = pip_position_front + 4 + 1\n\n    # Bud's position from the back is 10th, so the total length of the queue is Bud's front position + Bud's back position - 1\n    # We subtract 1 because we are counting Bud twice if we simply add his front and back positions\n    total_children = bud_position_front + 10 - 1\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    equation1 = Eq(bob, alan + 15)  # Bob has $15 more cards than Alan.\n    equation2 = Eq(bob + 25, 3 * alan)  # After Colin gives Bob $25 cards, Bob has 3 times as many as Alan.\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Sum of first n odd numbers: n^2\n    n_odd = (50 // 2) if (50 % 2 == 0) else ((50 // 2) + 1)\n    melvin_sum = n_odd ** 2\n    \n    # Sum of first n even numbers: n(n + 1)\n    n_even = 50 // 2\n    monica_sum = n_even * (n_even + 1)\n    \n    # Difference between Monica's and Melvin's sums\n    difference = monica_sum - melvin_sum\n    \n    return difference\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    principal = 2000  # Initial amount borrowed\n    amount_after_3_years = 2519.42  # Amount owed after 3 years\n    rate = symbols('rate')\n\n    # Create the equation based on the compound interest formula:\n    # final amount = principal * (1 + rate) ** number_of_periods\n    equation = Eq(principal * (1 + rate) ** 3, amount_after_3_years)\n\n    # Solve the equation\n    interest_rate = solve(equation, rate)[0]\n\n    # Returning the interest rate as a percentage rounded to the nearest tenth\n    return round(interest_rate * 100, 1)\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Given the operation m~Î~n = 5m + 3n\n    # and the equation x~Î~9 = 37\n    # We can substitute the operation into the equation:\n    # 5x + 3*9 = 37\n\n    # Now we solve for x:\n    x = (37 - 3*9) / 5\n    return x\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Maximum balls Sheilacan take out without having 4 balls of the same color\n    # Is taking all orange and yellow balls and 3 blue balls.\n    max_without_four_same = 4 + 2 + 3\n    \n    # She needs to take out one more ball to be sure of having 4 of the same color.\n    ans = max_without_four_same + 1\n    \n    return ans\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let e be the number of elderly people Janice wants to give oranges to\n    e = symbols('e')\n\n    # If she gave 20 oranges to each elderly, 10 elderly will not receive any oranges\n    # This means she has enough oranges for (e - 10) elderly people at 20 oranges each\n    equation1 = Eq(20 * (e - 10), 20 * e - (e * 20 - 10 * 20))\n \n    # If she gave 16 oranges to each elderly, she would have enough oranges to pack\n    # 25 boxes of oranges, each containing 2 dozen oranges (which is 24 oranges)\n    # So the total number of oranges is 25 boxes * 24 oranges per box\n    equation2 = Eq(16 * e, 25 * 24)\n\n    # Solve the equations to find the number of elderly\n    num_elderly = solve((equation1, equation2), (e))\n\n    # Now calculate how many oranges Janice should give to each elderly\n    total_oranges = 25 * 24\n    oranges_per_elderly = total_oranges // num_elderly[e]\n\n    return oranges_per_elderly\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    removed_soil_fraction = 1/5\n    remaining_weight = 27\n\n    removed_soil_weight = full_weight * removed_soil_fraction\n    empty_weight = full_weight - (removed_soil_weight + removed_soil_weight * 4)\n    \n    return empty_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    Tim, Tyler = symbols('Tim Tyler')\n\n    equation1 = Eq(Tim / 6, Tyler * 3 / 8)\n    equation2 = Eq(Tim, (Tyler - 96) * 9)\n\n    solutions = solve((equation1, equation2), (Tim, Tyler))\n\n    Tim_cookies = solutions[Tim]\n    Tyler_cookies = solutions[Tyler]\n\n    return Tim_cookies, Tyler_cookies\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    period_1 = 24\n    period_2 = 30\n\n    least_common_multiple = lcm(period_1, period_2)\n\n    hours_passed = least_common_multiple // 60\n    minutes_passed = least_common_multiple % 60\n\n    next_time_hour = 9 + hours_passed\n    next_time_minute = minutes_passed\n\n    # Adjust for 24-hour time format if necessary\n    if next_time_hour >= 24:\n        next_time_hour -= 24\n\n    return f\"{next_time_hour:02d}:{next_time_minute:02d}\"\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n\n    missed_marks = total_marks - scored_marks\n\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 24\n    fraction_filled = 3 / 4\n    full_tank = part_filled / fraction_filled\n    return full_tank\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    choco, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Equations based on the problem statement\n    equation1 = Eq(choco, vanilla + 72)                   # choco is 72 more than vanilla\n    equation2 = Eq(blueberry, vanilla - 36)               # blueberry is 36 less than vanilla\n    equation3 = Eq(choco/6 + vanilla*2/3 + blueberry*7/9, 427) # Amount of cupcakes after selling\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (choco, vanilla, blueberry))\n\n    sold_choco = solutions[choco] / 6     # Sold 1/6th of chocolate cupcakes\n    return int(sold_choco)\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of red marbles and y be the original number of white marbles\n    # Let r be the number of red marbles added by Pip\n    # Let w be the number of white marbles added by Bud, which is r+100\n    x, y, r = symbols('x y r')\n\n    # Original ratio of red to white marbles is 3:2, so we have the equation 3y = 2x\n    equation1 = Eq(3*y, 2*x)\n\n    # After Pip adds r red marbles, the ratio becomes 5:3, so we have the equation 5(y) = 3(x+r)\n    equation2 = Eq(5*y, 3*(x + r))\n\n    # After Bud adds w (= r+100) white marbles, the ratio becomes 5:4, so we have 5(y+r+100) = 4(x+r)\n    equation3 = Eq(5*(y+r+100), 4*(x + r))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, r))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # Let's find the possible values for a based on the remainder when divided by 8\n    possible_values_for_a = [i for i in range(6, 1000) if i % 8 == 6]\n    \n    # Let's find the possible values for b based on the remainder when divided by 8\n    possible_values_for_b = [i for i in range(7, 1000) if i % 8 == 7]\n    \n    # We only need one instance of each since we are looking for the characteristic of the remainder\n    a = possible_values_for_a[0]\n    b = possible_values_for_b[0]\n    \n    # Calculate the remainder of the sum (a + b) when divided by 8\n    remainder_of_sum = (a + b) % 8\n\n    return remainder_of_sum\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mark, david = symbols('mark david')\n    \n    equation1 = Eq(mark - david, 3)\n    equation2 = Eq(mark + david, 89)\n    \n    solutions = solve((equation1, equation2), (mark, david))\n    \n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n\n    # Jessica sits in front of Judy, meaning the desks in front of Jessica and behind Judy include Jessica's and Judy's desks\n    # There is 1 desk (Jessica's) between the front desks and Judy \n    # and another 1 desk (Judy's) between Jessica and the desks at the back\n    total_desks = desks_in_front_of_jessica + 1 + 1 + desks_behind_judy\n\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    return 2.507 + 13.49\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # Let x be the original average weight and n be the original number of people in the group\n    # Let total_weight be the total weight before Aaron joined\n    from sympy import symbols, Eq, solve\n\n    x, n = symbols('x n')\n\n    # Equation for average weight after Aaron joined:\n    equation1 = Eq((n*x + 45) / (n + 1), 61)\n\n    # Equation for average weight after Ben joined:\n    equation2 = Eq((n*x + 45 + 71) / (n + 2), 62)\n\n    # Solving the system of equations for x and n\n    solutions = solve((equation1, equation2), (x, n))\n\n    # Extracting the original average weight (x) from the solutions\n    original_average = solutions[x]\n\n    return original_average\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "def solution():\n    for i in range(10000, 100000):\n        str_num = str(i)\n        if str_num[1] == '0' and str_num[3] == '0':\n            part1 = int(str_num[0])\n            part2 = int(str_num[2])\n            part3 = int(str_num[4])\n            if part1 * part3 == part2:\n                return i\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n\n    work = initial_people * initial_hours  # Total amount of work required to build the bridge\n    required_people = work / target_hours  # Number of people required to build the bridge in target hours\n\n    return int(required_people)\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    # Initialize the number of white and black balls in Bag A\n    white_balls = 1991\n    black_balls = 1000\n    # Count of the total number of balls taken out\n    balls_taken_out = 0\n    \n    while balls_taken_out < 2989:\n        # Two same color balls situation\n        if white_balls % 2 == 0 or black_balls % 2 == 0:\n            # adding one black ball to Bag A occurs only if there are black balls to take\n            if black_balls > 1: \n                black_balls -= 2 # Two black balls taken out\n                black_balls += 1 # One black ball put back\n            else:\n                # If only one black ball left, then two balls taken are either 2 white or 1 black and 1 white\n                if black_balls == 1 and white_balls > 0:\n                    black_balls -= 1 # One black ball taken out\n                    white_balls -= 1 # One white ball taken out\n                    white_balls += 1 # One white ball put back\n                else:\n                    white_balls -= 2 # Two white balls taken out\n                    black_balls += 1 # One black ball put back\n        else:\n            # Two different color balls situation\n            white_balls -= 1 # One white ball taken out\n            black_balls -= 1 # One black ball taken out\n            white_balls += 1 # One white ball put back\n        balls_taken_out += 2\n    \n    # Determine the color of the remaining balls\n    if white_balls > 0:\n        color = \"white\"\n        remaining_balls = white_balls\n    else:\n        color = \"black\"\n        remaining_balls = black_balls\n        \n    return remaining_balls, color\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_n = n * (n + 1) // 2\n    return sum_n\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    meters_to_centimeters = 2.1 * 100\n    n = meters_to_centimeters\n    return int(n)\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    # Initial amount Harry received\n    initial_amount = 30\n    \n    # Cost of items bought\n    cost_of_sweets = 3.99\n    cost_of_magazine = 2.50\n    cost_of_stickers = 0.70\n    cost_of_pizza = 10.99\n    cost_of_orange_juice = 1.50\n    \n    # Total cost of orange juice for four glasses\n    total_cost_of_orange_juice = 4 * cost_of_orange_juice\n    \n    # Total expenses\n    total_expenses = cost_of_sweets + cost_of_magazine + cost_of_stickers + cost_of_pizza + total_cost_of_orange_juice\n    \n    # Calculating the change Harry has left\n    change_left = initial_amount - total_expenses\n    \n    return round(change_left, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 5):\n        for x2 in range(1, 5):\n            if x1 + x2 == 5:\n                count += 1\n            for x3 in range(1, 5):\n                if x1 + x2 + x3 == 5:\n                    count += 1\n                for x4 in range(1, 5):\n                    if x1 + x2 + x3 + x4 == 5:\n                        count += 1\n    return count // 2  # divide by 2 due to the symmetry (order does not matter)\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit cannot be 0\n        for tens in range(0, 10):\n            units = hundreds + 2\n            if units < 10:  # Units digit must be less than 10\n                count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    han, daughter = symbols('han daughter')\n    equation1 = Eq(han, 3 * daughter)\n    equation2 = Eq(han + daughter, 91.2)\n\n    solutions = solve((equation1, equation2), (han, daughter))\n\n    return solutions[han]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2/5)\n    initial_chocolates = remaining_after_students / (20/100)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i + 1)**2 - i**2 for i in range(1, 101, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # To ensure Samantha has more votes than anyone else,\n    # she needs to have at least one more vote than what \n    # would be obtained by ensuring the remaining votes are\n    # split as evenly as possible between the two other students.\n    # The remaining votes after Samantha's are 24, split them evenly\n    # and you get 12 votes for each of the other two students.\n    # So, Samantha needs to have at least 13.\n    return 13\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                totals.add(i + j + k)\n\n    return len(totals)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for x which is the interest rate\n    x = symbols('x')\n\n    # The principal amount\n    principal = 6000\n\n    # The amount at the end of 5 years\n    amount = 8029.35\n\n    # The time period\n    time = 5\n\n    # Create the equation for compound interest\n    # amount = principal * (1 + x/100) ** time\n    equation = Eq(principal * (1 + x / 100) ** time, amount)\n\n    # Solve the equation for the variable x\n    interest_rate = solve(equation, x)\n\n    # Return the interest rate\n    ans = float(interest_rate[0])\n\n    return ans\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages, digits_used = 0, 0\n\n    while digits_used < 291:\n        pages += 1\n        digits_used += len(str(pages))\n\n    return pages - 1 \n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000\n    return kg_to_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_spent = 1500\n    chairs_spent = 360\n\n    percent_spent_on_chairs = (chairs_spent / total_spent) * 100\n\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    read, not_read, total = symbols('read not_read total')\n    # Given ratio read:not_read = 1:5\n    equation1 = Eq(read, total / 6)\n    # After reading 80 more pages, she has read 70% of the magazine\n    equation2 = Eq(read + 80, 0.7 * total)\n\n    # Use sympy to solve the equations\n    solutions = solve((equation1, equation2), (read, total))\n\n    return solutions[total]\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let x be the number of correct answers for CC.\n    # Then Vivi has x + 3 correct answers (because Vivi got 15 more points, which is 3 correct answers worth 5 points each).\n\n    # CC's score: 10x - 5(10 - x) = 10x - 50 + 5x = 15x - 50\n    # Vivi's score: 10(x + 3) - 5(10 - (x + 3)) = 10x + 30 - 50 + 5x + 15 = 15x - 5\n    # Together: (15x - 50) + (15x - 5) = 95\n    # 30x - 55 = 95\n    # 30x = 150\n    # x = 5\n\n    # CC answered 5 questions correctly.\n    return 5\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for one book and one magazine\n    book, magazine = symbols('book magazine')\n\n    # Equation for total cost of 2 books and 3 magazines\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n\n    # Equation for the cost of 1 book and 1 magazine\n    equation2 = Eq(book + magazine, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    # Return the cost of one magazine\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls_rooms = 45 // 5\n    teacher_rooms = 6 // 2\n    total_rooms = girls_rooms + teacher_rooms\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_per_person = 650 / 15\n    flour_needed = flour_per_person * 18\n    return flour_needed\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    cost = (2 * adult_ticket_price) + (3 * child_ticket_price)\n    return cost\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_to_m_conversion_factor = 1000\n    ans = 7000000 / mm_to_m_conversion_factor\n    return ans\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    number = '2581953752'\n    min_sum = float('inf')\n\n    # Try every possible first cut position except the last two digits\n    for i in range(1, len(number) - 1):\n        # Try every possible second cut position after the first cut\n        for j in range(i+1, len(number)):\n            # Split the number into three parts based on cut positions\n            num1 = int(number[:i])\n            num2 = int(number[i:j])\n            num3 = int(number[j:])\n            # Calculate the sum of the three numbers\n            current_sum = num1 + num2 + num3\n            # Check if the current sum is smaller than our min_sum\n            if current_sum < min_sum:\n                min_sum = current_sum\n\n    return min_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbolic variables for the two original numbers\n    x, y = symbols('x y')\n    \n    # The correct sum of the numbers\n    correct_sum_eq = Eq(x + y, 11.63)\n    \n    # The incorrect sum that Oliver got by shifting the decimal\n    incorrect_sum_eq = Eq(x + y / 10, 5.87)\n    \n    # Solve the system of equations\n    solutions = solve((correct_sum_eq, incorrect_sum_eq), (x, y))\n    \n    # Calculate the difference between the two original numbers\n    difference = abs(solutions[x] - solutions[y])\n    \n    # Return one hundred times the difference\n    return 100 * difference\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of members in each club\n    science, literature, math = symbols('science literature math')\n\n    # Equations based on the given ratios and total members\n    equation1 = Eq(science / literature, 9 / 10)\n    equation2 = Eq(literature / math, 5 / 7)\n    equation3 = Eq(science + literature + math, 99)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (science, literature, math))\n\n    # Calculate the difference between math and literature club members\n    difference = solutions[math] - solutions[literature]\n\n    return difference\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # each side has 6 flowers, of which the corner flowers are shared with the adjacent side\n    # there are 4 corner flowers, so we subtract them from the total\n    flowers_per_side = 6\n    corner_flowers = 4\n    total_flowers = (flowers_per_side * 4) - corner_flowers \n    return total_flowers\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m represent Melissa's current age, and mother represent her mother's current age\n    m, mother = symbols('m mother')\n    \n    # Equation representing the time when Melissa was 8 and her mother was 32: mother - m = 32 - 8 = 24\n    equation1 = Eq(mother - m, 24)\n    \n    # Equation representing the current situation: mother = 3 * m\n    equation2 = Eq(mother, 3 * m)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, mother))\n    \n    return solutions[m]\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    n = 48\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    even_factors = [f for f in factors if f % 2 == 0]\n    return len(even_factors)\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Worst case scenario, you take out all the marbles without getting 3 of the same color:\n    \n    # At most 2 blue marbles before getting a 3rd one\n    blue_marbles = 2\n    \n    # At most 2 yellow marbles before getting a 3rd one\n    yellow_marbles = 2\n    \n    # At most 1 red marble (since there's only 1 red marble)\n    red_marble = 1\n    \n    # To ensure the 3rd marble of the same color,\n    # we have to take out all possibilities of the other colors.\n    \n    # For blue or yellow to be the third, we need to take at least 2 blues,\n    # 2 yellows, and the 1 red to guarantee that the next marble will \n    # either be the 3rd blue or 3rd yellow.\n    \n    # 2 (blue) + 2 (yellow) + 1 (red) plus one more to ensure the third of a kind\n    marbles_taken_out = blue_marbles + yellow_marbles + red_marble + 1\n\n    return marbles_taken_out\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    piece1 = 4.8\n    piece2 = 2.73\n    piece3 = original_length - (piece1 + piece2)\n\n    lengths = [piece1, piece2, piece3]\n    difference = max(lengths) - min(lengths)\n\n    return difference\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = \"1234\"\n    repeats, remainder = divmod(47, len(pattern))\n\n    total_sum = sum(int(digit) for digit in pattern) * repeats\n    total_sum += sum(int(pattern[i]) for i in range(remainder))\n    \n    return total_sum\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'b' be the cost of a basketball\n    # Let 'v' be the cost of a volleyball\n    b, v = symbols('b v')\n\n    # 1st equation: the total cost of basketballs and volleyballs\n    eq1 = Eq(5*b + 6*v, 325)\n    \n    # 2nd equation: the cost relation between a basketball and a volleyball\n    eq2 = Eq(b, v + 10)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (b, v))\n\n    # We want the price of a basketball\n    return solutions[b]\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_for_6 = 2.52\n    cost_for_1 = cost_for_6 / 6\n    cost_for_9 = cost_for_1 * 9\n    return cost_for_9\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    total_cost = 132\n\n    # Let's assume the initial amount of money Li Yan had is x.\n    # She spent 1/3 of it on a book, so she spent x/3 on the book.\n    # The remainder is x - x/3 = 2x/3.\n    # She then spent 1/2 of the remainder on a bag, so she spent (1/2) * (2x/3) = x/3 on the bag.\n    # The cost of the book and the bag is x/3 + x/3 = 2x/3 which is given as $132.\n    # Therefore 2x/3 = 132. We solve for x to find the initial amount of money.\n\n    initial_amount = (total_cost * 3) / 2\n\n    return initial_amount\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n\n    # Equations:\n    # 1) boys + girls = 40 (total students)\n    # 2) 20 * boys + 60 * girls = average * total students\n    # Because average is 35 and total students are 40: 35 * 40 = 20 * boys + 60 * (40 - boys)\n    equation = Eq(20 * boys + 60 * (40 - boys), 35 * 40)\n\n    # Solve for number of boys\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    for correct in range(25 + 1):\n        incorrect = 25 - correct\n        score = correct * 4 - incorrect\n        if score == 61:\n            for x in range(correct):\n                if 4 * (correct - x) - (incorrect + x) == 61:\n                    return x\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be between 1 and 9 because it's the first digit of a 2-digit number\n        for b in range(0, 10):  # 'b' must be between 0 and 9 because it's the second digit of a 2-digit number\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    pounds = 1.28\n    pence = 57\n\n    total_pence = (pounds * 100) + pence\n    ans = total_pence / 100\n\n    return ans\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 * 3\n    return ans\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pigs, goats = symbols('pigs goats')\n    equation1 = Eq(3 * pigs + goats, 440)\n    equation2 = Eq(pigs + 2 * goats, 280)\n\n    solutions = solve((equation1, equation2), (pigs, goats))\n\n    total_cost = 5 * solutions[pigs] + 5 * solutions[goats]\n    return total_cost\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for i in range(10000, 100000):\n        if int(str(1) + str(i)) * 3 == int(str(i) + str(1)):\n            return i\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    A_value = solve(equation, A)\n\n    return A_value[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 12\n    \n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Define the pricing parameters\n    base_price_per_cupcake = 4.50\n    base_shipping = 12\n    discount_rate = 0.20\n    total_bill = 120\n\n    # First, calculate the number of cupcakes if no discount applies\n    max_cupcakes_no_discount = (total_bill - base_shipping) / base_price_per_cupcake\n\n    # If Kate orders 20 or fewer cupcakes\n    if max_cupcakes_no_discount <= 20:\n        return int(max_cupcakes_no_discount)\n    \n    # If there are more than 20 cupcakes ordered\n    else:\n        # Find out how many cupcakes Kate could order with the discount applied\n        # after the first 20 cupcakes\n        discount_price_per_cupcake = base_price_per_cupcake * (1 - discount_rate)\n        # Total bill for the first 20 cupcakes\n        total_for_first_20 = 20 * base_price_per_cupcake + base_shipping\n        # Remaining amount for discounted cupcakes\n        remaining_for_discounted_cupcakes = total_bill - total_for_first_20\n        # Number of discounted cupcakes\n        discounted_cupcakes = remaining_for_discounted_cupcakes / discount_price_per_cupcake\n        # Total cupcakes is the sum of the first 20 plus the discounted cupcakes\n        total_cupcakes = 20 + discounted_cupcakes\n        return int(total_cupcakes)\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_now = john_age_now + 42\n    total_age_in_2_years = (john_age_now + 2) + (grandmother_age_now + 2)\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 45) / 3, 2 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days it takes for the lazy one to paint the house on his own\n    x = symbols('x')\n\n    # Rate of work done by the energetic one per day\n    rate_energetic = 1 / 10\n\n    # Rate of work done by the lazy one per day\n    rate_lazy = 1 / x\n\n    # Total rate of work done by both per day\n    total_rate = rate_energetic + rate_lazy\n\n    # Equation based on the fact that together they paint the house in 6 days\n    equation = Eq(1 / total_rate, 6)\n\n    # Solve for x\n    days_lazy = solve(equation, x)\n\n    return days_lazy[0]\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    for brother1 in range(2, 10):\n        for brother2 in range(2, 10):\n            brother3 = 10 - brother1 - brother2\n            if brother3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # Generate the number with an unknown middle digit represented by 'x'\n    number_str = '5' * 19 + 'x' + '9' * 19\n    \n    # Try each digit from 0 to 9 for the middle digit\n    for digit in range(10):\n        # Replace 'x' with the current digit\n        candidate = int(number_str.replace('x', str(digit)))\n        # Check if the candidate is divisible by 7\n        if candidate % 7 == 0:\n            return digit  # Return the digit that makes the number divisible by 7\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    fraction_of_book = 1/5\n    total_pages = pages_first_day / fraction_of_book\n    return int(total_pages)\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    max_height = 131\n    position_of_tom = 10\n    max_height_of_tom = max_height - (31 - position_of_tom)\n\n    return max_height_of_tom\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(10):\n            tens = 2 * hundreds\n            if hundreds == ones + 1 and (hundreds + tens + ones) == 15:\n                return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    last_purchase = 105.6 - 14.4\n    total_spent = last_purchase + 105.6\n    return total_spent\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    thought_number = (result - 10) / 2\n    return thought_number\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # Calculate the worst-case scenario according to the Pigeonhole principle\n    # We take the three largest amounts of marbles to ensure the worst case\n    # which is 12 red, 9 blue, 8 yellow\n    # We add 3 to the sum of these numbers because after we have taken all of these,\n    # we are certain the next one has to be of a different color.\n    worst_case = 12 + 9 + 8 + 3  # The +3 represents drawing one more marble after the other colors\n    \n    return worst_case\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let's denote the number of storybooks Anthea has originally as A.\n    # According to the problem, after giving 4 books to Anthea, Jason and Anthea will have the same number of books.\n    # So we have:\n    # Jason's original number of books - 4 = Anthea's original number of books + 4\n\n    # We know Jason's original number of books, which is 30.\n    # Jason's original number of books - 4 = 30 - 4\n\n    # Now we can solve for A (Anthea's original number of books):\n    # 30 - 4 = A + 4\n    # 26 = A + 4\n    # A = 26 - 4\n    A = 26 - 4\n\n    # The difference between Jason and Anthea at first is:\n    # Jason's books - Anthea's books = 30 - A\n    difference = 30 - A\n\n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(2021):\n        a, b = b, a + b\n    return b % 3\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    # The two-digit numbers with unit digit 6 range from 16 to 96.\n    # We can count the tens place, which goes from 1 to 9 inclusive.\n    count = 9  # There are 9 possibilities for the tens digit (1-9)\n    return count\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    first_number = 208 - magic_number\n    second_number = 136 - magic_number\n    \n    equation = Eq(first_number, 9 * second_number)\n    magic_number_value = solve(equation, magic_number)\n    \n    return magic_number_value[0]\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    remainder_when_5 = 3\n    remainder_when_4 = 9\n\n    gifts = 0\n    while True:\n        gifts += 1\n        if gifts % 5 == remainder_when_5 and gifts % 4 == remainder_when_4:\n            break\n\n    students = (gifts - remainder_when_5) // 5\n    return students\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    ans = 73 * 42\n    return ans\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    number = 840\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_price = 7.85\n    bar_price = 1.83\n    total_bars_price = 2 * bar_price\n    total_cost = box_price + total_bars_price\n    note_value = 20\n    change = note_value - total_cost\n    return change\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    from math import factorial\n\n    # Total family members excluding Lily and her mother is 3\n    # The number of ways to arrange these three people is 3!\n    number_of_ways = factorial(3)\n\n    return number_of_ways\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if (num % 5 == 4) and (num % 7 == 4):\n            return num\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 4, 5, 6, 7, 8]\n    all_possible_numbers = [''.join(p) for p in permutations(map(str, digits), 2)]\n    valid_numbers = []\n\n    # Applying the first hint\n    for number in all_possible_numbers:\n        if int(number[1]) == 2 * int(number[0]):\n            valid_numbers.append(number)\n    \n    # Applying the third hint\n    for number in all_possible_numbers:\n        if int(number[0]) - int(number[1]) == 5:\n            valid_numbers.append(number)\n    \n    # There can be only one odd number from the list\n    odd_numbers = [number for number in valid_numbers if int(number) % 2 != 0]\n    if len(odd_numbers) != 1:\n        return None\n    valid_numbers = [number for number in valid_numbers if int(number) % 2 == 0] + odd_numbers\n\n    # Pair down the list using the second hint\n    max_sum_nine = [number for number in valid_numbers if int(number[0]) + int(number[1]) == 9]\n    valid_numbers = [number for number in valid_numbers if number not in max_sum_nine]\n    \n    # Sort the valid numbers to find the second smallest\n    valid_numbers.sort()\n    if len(valid_numbers) < 2:\n        return None\n\n    return int(valid_numbers[1])\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Declare symbols for the amount of money Alan, Bella and Chloe have\n    alan, bella, chloe = symbols('alan bella chloe')\n    \n    # The total amount of money they have\n    total_money = 200\n    \n    # Ratio of Alan's money to Bella's\n    ratio_alan_bella = Eq(alan / bella, 4 / 3)\n    \n    # Alan has Â£20 more than Chloe\n    alan_more_chloe = Eq(alan, chloe + 20)\n    \n    # The sum of Alan, Bella, and Chloe's money\n    total_money_eq = Eq(alan + bella + chloe, total_money)\n    \n    # Solve the system of equations for Alan, Bella, and Chloe\n    solutions = solve((ratio_alan_bella, alan_more_chloe, total_money_eq), (alan, bella, chloe))\n    \n    # Return the amount of money Chloe has\n    return solutions[chloe]\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    difference = 4\n    last_term = 99\n    num_rows = ((last_term - first_term) // difference) + 1\n    total_seats = (num_rows * (first_term + last_term)) // 2\n    return total_seats\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    return 1.28 - 0.57\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    # Let the total number of visitors be x\n    # Then, children = (3/5)x and remaining visitors = x - (3/5)x = (2/5)x\n    # Men = (1/2) * (2/5)x = (1/5)x\n    # According to the question, children - men = 140\n    # So, (3/5)x - (1/5)x = 140\n    \n    # Solving for x\n    total_visitors = 140 / ((3/5) - (1/5))\n    \n    return int(total_visitors)\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    average_initial = 120\n    sum_initial = average_initial * 3\n\n    average_final = 150\n    sum_final = average_final * 4\n\n    fourth_number = sum_final - sum_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    # Sum of the squares of the first 'n' natural numbers formula: n(n + 1)(2n + 1)/6\n    # We need to find the sum of the squares from 5^2 to 15^2. \n    # So we find the sum from 1^2 to 15^2 using the formula, and then subtract the sum from 1^2 to 4^2.\n    \n    def sum_of_squares(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n    \n    # Kimmy's calculation assumed the series starts at 1, we need to correct it\n    total_sum_of_squares = sum_of_squares(15) - sum_of_squares(4)\n    \n    return total_sum_of_squares\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_incorrect = -2\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if points_correct * correct + points_incorrect * incorrect == 51:\n            return correct\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n    \n    # Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n    \n    # Sam gave 20% of his stickers to Peter\n    # Peter's stickers after getting from Sam\n    peter_after = peter + 0.20 * sam\n    \n    # Peter gave 25% of his new total to Sam\n    # Sam's stickers after exchange\n    sam_after = sam - 0.20 * sam + 0.25 * peter_after\n    \n    # In the end, Sam has 96 stickers more than Peter after the exchange\n    equation2 = Eq(sam_after, peter_after + 96)\n\n    # Solving the system of equations\n    solution = solve((equation1, equation2), (sam, peter))\n    \n    # Peter's initial number of stickers\n    return solution[peter]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the initial amount of money Amy had.\n    x = symbols('x')\n\n    # After spending 6/11 and additional 5\n    remaining_after_highlighters = (6/11)*x + 5\n\n    # The remaining amount of money she has\n    remaining = x - remaining_after_highlighters\n    \n    # After spending 3/10 and additional 12\n    remaining_after_pens = (3/10)*remaining + 12\n\n    # According to the question, she has 30 left after all spending\n    # remaining - remaining_after_pens = 30\n    # remaining is the amount before buying pens, which is x - remaining_after_highlighters\n    equation = Eq((x - remaining_after_highlighters) - remaining_after_pens, 30)\n\n    # Solve the equation to find the initial amount of money 'x'\n    solution = solve(equation, x)\n\n    # Return the result\n    return solution[0]\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let s be Sally's current age and g be Gillian's current age.\n    s, g = symbols('s g')\n    \n    # The ratio of their current ages is 2:7\n    equation1 = Eq(2 * g, 7 * s)\n    \n    # In 15 years, the ratio will be 1:2\n    equation2 = Eq((s + 15) * 2, (g + 15))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, g))\n    \n    # Sally's current age\n    return solutions[s]\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    difference = 5\n    lily_walk_time = hook_walk_time - difference\n    return lily_walk_time\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n    actual_subtrahend = 75\n\n    actual_result = mistaken_result + (actual_subtrahend - mistaken_subtrahend)\n\n    return actual_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = 12  # LCM of 3 and 4\n    count = 0\n    for i in range(1, 41):\n        if i % lcm == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    result = 35 * 9 / 45\n    ans = result * 9\n    return ans\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_apart = 1.5\n    number_of_seeds = 12\n\n    circumference = distance_apart * number_of_seeds\n\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    return (3/8) * 32\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    mass_per_apple = 1 / 9\n    apples_per_kg = 1 / mass_per_apple\n    total_apples = 8 * apples_per_kg\n    cakes_baked = total_apples / 4\n    return int(cakes_baked)\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    for students in range(1, 10000):  # Assuming a reasonable upper limit\n        sqrt_students = int(students**0.5)\n        if students == sqrt_students**2 + 9 and (sqrt_students+1)**2 + 16 == students + 16:\n            return students\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    # Let x be the number of papers cut into three parts\n    # Each paper cut into three adds two additional pieces (since it's divided into three parts)\n    # Original papers = 10, Final papers = 16\n    # Equation: 10 - x (cut papers) + 2x (added pieces) = 16\n    # Solve for x: x = 16 - 10\n    x = (16 - 10) // 2  # The // operator is integer division\n    return x\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_participants = 12 + 8\n    average_score_boys = 10\n    average_score_all = 14\n    \n    total_score_all = average_score_all * total_participants\n    total_score_boys = average_score_boys * 12\n    \n    total_score_girls = total_score_all - total_score_boys\n    average_score_girls = total_score_girls / 8\n    \n    return average_score_girls\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # denomination of coins in pounds\n    coins = [1, 0.5, 0.2, 0.1, 0.05, 0.02, 0.01]\n\n    # iterate over coins to find the smallest value coin in change\n    for small_coin in coins:\n        rem = 2.50  # remaining change\n        for coin in coins:\n            if coin > small_coin:\n                # for coins greater than the smallest, we will have pairs\n                rem -= 2 * int(rem // coin) * coin\n        # check if two of the smallest coins can be taken\n        if rem // small_coin == 2:\n            return small_coin\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Lily originally divides 50 postcards into 5 envelopes,\n    # so each envelope has 10 postcards.\n    original_per_envelope = 50 // 5\n\n    # Let's denote the number of new postcards that her friends gave her as 'new_postcards'.\n    # Since those new postcards were divided equally into another 2 envelopes,\n    # which means per envelope should have the same number of postcards as before.\n    # Let new_postcards // 2 = original_per_envelope\n    # So, we get new_postcards = original_per_envelope * 2\n    new_postcards = original_per_envelope * 2\n\n    # Finally, the total number of postcards is the sum of the original 50 and the new ones.\n    total_postcards = 50 + new_postcards\n\n    return total_postcards\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 80/100  # cost in Pence\n    cost_per_gram = cost_per_100g / 100  # cost in Pence\n    cost_250g_in_pence = cost_per_gram * 250  # cost in Pence for 250 grams\n    cost_250g_in_pounds = cost_250g_in_pence / 100  # convert Pence to Pounds\n\n    return cost_250g_in_pounds\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies Jolie baked at first\n    x = symbols('x')\n    \n    # The number of cookies thrown away (3/5 of the total)\n    thrown_away = 3 * x / 5\n    \n    # The remaining cookies after throwing away\n    remaining = x - thrown_away\n    \n    # The number of cookies sold (75% of the remaining)\n    sold = 0.75 * remaining\n\n    # The given condition in the problem\n    condition = Eq(thrown_away - sold, 42)\n\n    # Solving for x\n    solution = solve(condition, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    capacity = 4\n    containers_needed = (total_apples + capacity - 1) // capacity\n    return containers_needed\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    # Iterate over possible special numbers with unit digit 9\n    for i in range(10, 10000):  \n        if str(i)[-1] == \"9\":  \n            # Move 9 from the end to the start\n            new_number = int(str(i)[-1] + str(i)[:-1])  \n            # Check if the new number is 4 times the special number\n            if new_number == 4 * i:  \n                return i\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for y in range(10):\n        if (1070 + y) % 6 == 0:\n            return y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for number in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if number % 4 == 1 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar_weight = 70\n    water_weight = 490\n    total_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial as fact\n\n    # Laura must stand in the front, which is one fixed position\n    # Rita can stand in any place except the end, so she has 5 options (2nd to 6th)\n    # The remaining 4 students can be arranged in any order in the remaining 4 places\n\n    # Number of ways Rita can choose her place\n    rita_options = 5\n\n    # Number of ways to arrange the remaining 4 students\n    other_students_arrangements = fact(4)\n\n    # Multiply the options for Rita by the arrangements of other students\n    total_ways = rita_options * other_students_arrangements\n\n    return total_ways\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_price = 120\n    discount_price = regular_price * 0.5\n    additional_discount_price = discount_price * 0.8\n    final_price = additional_discount_price\n    return final_price\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    ans = (a + b) * a\n    return ans\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction_sold = 4/7\n\n    total_apples = sold_apples / fraction_sold\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Let the total length of the road be x miles\n    # Jerry travels 3/7 of the length, so he travels (3/7)x miles\n    # Kevin travels 4/7 of the length, because they together travel the complete length of the road\n    # Kevin's speed is given as 80 mph\n    # Jerry in each hour travels (2/5) of the road length which is (2/5)x mph\n\n    # Since time is the same for both travelers when they meet,\n    # their speeds are proportional to the distances they travel.\n    # Ratio of Jerry's distance to Kevin's distance is 3/7 : 4/7 which simplifies to 3:4\n    # Jerry's speed : Kevin's speed = 3:4\n    # Using the proportion (2/5)x / 80 = 3 / 4\n    # Solving for x, we have (2/5)x * 4 = 3 * 80\n    # x = (3 * 80 * 5) / (2 * 4)\n    x = (3 * 80 * 5) / (2 * 4)\n    return x\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    total_pencils = 35 * 40\n    boys, girls = symbols('boys girls')\n    \n    # Total number of pencils is the sum of pencils owned by boys and girls\n    # boys * average_pencils_boys + girls * average_pencils_girls = total_pencils\n    equation1 = Eq(boys * 20 + girls * 60, total_pencils)\n    # The total number of pupils is the sum of boys and girls\n    equation2 = Eq(boys + girls, 40)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    # Probability that Sally wins exactly one game\n    # can occur in two scenarios: Win first game and lose/draw second\n    # OR Lose/draw first game and win second\n    win_probability = 0.3\n    draw_probability = 0.1\n    lose_probability = 1 - win_probability - draw_probability\n    \n    # Win first, lose/draw second\n    scenario1 = win_probability * (lose_probability + draw_probability)\n    \n    # Lose/draw first, win second\n    scenario2 = (lose_probability + draw_probability) * win_probability\n    \n    # Add both scenarios for total probability\n    probability_sally_wins_exactly_one = scenario1 + scenario2\n    \n    return probability_sally_wins_exactly_one\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Singapore is 7 hours ahead of London, so we subtract 7 hours to get the London departure time.\n    sg_departure_time = datetime.strptime('24/08 05:00', '%d/%m %H:%M')\n    london_departure_time = sg_departure_time - timedelta(hours=7)\n\n    # London arrival time is given, so we parse it.\n    london_arrival_time = datetime.strptime('24/08 11:00', '%d/%m %H:%M')\n\n    # The flight duration is the difference between the London arrival time and the London departure time.\n    flight_duration = london_arrival_time - london_departure_time\n\n    # Return the total flight duration in hours.\n    ans = flight_duration.seconds // 3600\n    return ans\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    remainders_4 = 32\n    remainders_7 = 3\n    \n    for lollipops in range(remainders_4, 1000, 4):  # Set a reasonable upper limit for search\n        if (lollipops - remainders_7) % 7 == 0:\n            return lollipops\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for number in range(10,100):\n        if sum(map(int,str(number))) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    # Find the differences between the numbers, which must be multiples of D\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    # The greatest common divisor of these differences will be the largest possible D\n    from math import gcd\n    D = gcd(diff1, diff2)\n    # Now to find the remainder R, use D with any of the given numbers\n    R = 2010 % D\n    # The largest possible value of D + R\n    return D + R\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    # Since 1/13 is a recurring decimal, we find the recurring part of the decimal\n    decimal_part = '0.'\n    remainder = 1\n    remainders = []\n    recurring_cycle = ''\n\n    # Calculate the recurring cycle by long division\n    while remainder not in remainders:\n        remainders.append(remainder)\n        digit, remainder = divmod(remainder * 10, 13)\n        recurring_cycle += str(digit)\n        if remainder == 0:\n            break\n\n    # Get the length of the recurring cycle\n    cycle_length = len(recurring_cycle)\n\n    # Find the position in the cycle where 2012th decimal place would be\n    position_in_cycle = (2012 - 1) % cycle_length\n\n    # Get the corresponding digit\n    digit_in_position = recurring_cycle[position_in_cycle]\n\n    return int(digit_in_position)\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue = 72\n    red_to_blue_ratio = 5/6\n    red = blue * red_to_blue_ratio\n    green = red / 2\n\n    total_marbles = blue + red + green\n    \n    return int(total_marbles)\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    # Let the original number of Eddi's cards be 8x and Wiya's cards be 7x\n    # After giving away 4 cards, Eddi has (8x - 4) cards and Wiya has (7x + 4) cards\n    # The new ratio is 18:17, so we have the equation (8x - 4) / (7x + 4) = 18/17\n    # Solving for x will give us the original number of Eddi's cards, which is 8x\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((8 * x - 4) / (7 * x + 4), 18 / 17)\n    solution = solve(equation, x)\n\n    # Eddi's cards at first\n    eddi_cards = 8 * solution[0]\n    return eddi_cards\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    num = (2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)\n    denom = ((2017 + 1/3) - 2016.875) * 17\n    fraction = (3 + 23/32)\n    ans = num / denom * fraction\n    return ans\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n    piece3 = total_length - (piece1 + piece2)\n    \n    return piece3\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 32):\n        for B in range(1, 32 - A):\n            C = 31 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of students in Class A and Class B\n    a, b, x = symbols('a b x')\n\n    # Equation representing that Class A has 47 more students than Class B\n    equation1 = Eq(a, b + 47)\n    \n    # Equation after moving x students from Class A to Class B,\n    # Class A will have 9 more students than Class B\n    equation2 = Eq(a - x, b + x + 9)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b, x))\n    \n    # Return the number of students that need to be move\n    return solutions[x]\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_in_one_basket = 5\n    number_of_baskets = 7\n    \n    total_footballs = footballs_in_one_basket * number_of_baskets\n    \n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost_price = 25000\n    selling_price = cost_price * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x - y, 57)\n    equation2 = Eq(x + y, 77)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    count = 0\n    for i in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    # Speed of the golden rabbit and the sea turtle\n    speed_rabbit = 330  # in meters per minute\n    speed_turtle = 30    # in meters per minute\n\n    # Golden rabbit runs for 10 minutes then sleeps for 215 minutes\n    rabbit_running_time_before_sleep = 10  # in minutes\n    rabbit_sleep_time = 215  # in minutes\n\n    # Distance covered by rabbit before sleep\n    distance_rabbit_before_sleep = speed_rabbit * rabbit_running_time_before_sleep\n\n    # Distance covered by turtle in the same time (10 minutes)\n    distance_turtle_after_10_minutes = speed_turtle * rabbit_running_time_before_sleep\n\n    # Distance covered by turtle during rabbit's sleep\n    distance_turtle_during_rabbit_sleep = speed_turtle * rabbit_sleep_time\n\n    # Total distance covered by turtle until rabbit wakes up\n    total_distance_turtle = distance_turtle_after_10_minutes + distance_turtle_during_rabbit_sleep\n\n    # Remaining distance for rabbit to finish after waking up\n    remaining_distance_rabbit = 6990 - distance_rabbit_before_sleep\n\n    # Remaining time for rabbit to finish the race\n    remaining_time_rabbit = remaining_distance_rabbit / speed_rabbit\n\n    # Time taken by turtle to reach 6990 meters\n    time_turtle_to_finish = (6990 - total_distance_turtle) / speed_turtle\n\n    # Determine the winner by comparing the remaining time for rabbit and the time taken by turtle\n    if remaining_time_rabbit <= time_turtle_to_finish:\n        winner = \"rabbit\"\n        # Find out where the turtle is when the rabbit finishes\n        distance_between = speed_turtle * remaining_time_rabbit\n    else:\n        winner = \"turtle\"\n        # Find out where the rabbit is when the turtle finishes\n        distance_between = speed_rabbit * (remaining_time_rabbit - (6990 - total_distance_turtle) / speed_turtle)\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    individual_avocados = total_pairs * 2\n    \n    cost_per_avocado_pounds = total_cost_pounds / individual_avocados\n    cost_per_avocado_pence = cost_per_avocado_pounds * 100\n\n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    # Iterate over all 3-digit numbers\n    for i in range(100, 1000):\n        if i % 2 == 1:  # Check if the number is odd\n            digits = [int(d) for d in str(i)]\n            if sum(digits) == 5:  # Check if the sum of digits is 5\n                count += 1\n    return count\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, adults, girls = symbols('boys adults girls')\n    \n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + adults + girls, 480)\n    \n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    score_counts = [0] * (6 * 2 + 1)  # Scores on two dices can range from 2 to 12\n\n    # Calculate the frequency of each possible score\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            score_counts[die1 + die2] += 1\n\n    # Find the score with the maximum frequency\n    max_score = score_counts.index(max(score_counts))\n\n    return max_score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    total_score = 36 * total_average\n    equation = Eq(girls * girls_average + boys * boys_average, total_score)\n\n    solutions = solve(equation, girls)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rhinos = symbols('rhinos')\n    deer = rhinos\n    ostriches = symbols('ostriches')\n\n    # rhinos have 4 legs, deer have 4 legs and ostriches have 2 legs\n    # rhinos + deer + ostriches = 28 heads\n    equation1 = Eq(rhinos + deer + ostriches, 28)\n    # 4*rhinos + 4*deer + 2*ostriches = 88 legs\n    equation2 = Eq(4*rhinos + 4*deer + 2*ostriches, 88)\n\n    solutions = solve((equation1, equation2), (rhinos, ostriches))\n\n    return solutions[rhinos]\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_square_table = 12\n    number_of_square_tables = 8\n\n    # Each square table has 4 sides, and when put together two sides are shared within each pair.\n    # Thus, 8 tables in a row would eliminate 7 shared sides.\n    total_sides = (4 * number_of_square_tables) - (2 * (number_of_square_tables - 1))\n\n    # Since people are evenly spaced, total number of people will be:\n    max_people = people_per_square_table * total_sides // 4\n\n    return max_people\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7, 9786 % 7\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15', '%H:%M')\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    sum_digits = 0\n    page_number = 1\n    \n    # Count the number of digits while sum_digits is less than 339\n    while sum_digits < 339:\n        sum_digits += len(str(page_number))\n        if sum_digits <= 339:\n            page_number += 1\n    \n    return page_number - 1\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the variables representing the number of marbles each person has\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n\n    # Create the equations based on the problem\n    equation1 = Eq(xavier, 3 * andrew)  # Xavier has three times as many marbles as Andrew\n    equation2 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)  # Andrew has 30 less than the average of Boris, Jeffery, Xavier\n\n    # Since we want the sum of Jeffery and Boris's marbles, we only need to solve for two variables.\n    # Substitute the expression for andrew (from equation2) in equation1\n    equation1 = equation1.subs(andrew, (boris + jeffery + xavier) / 3 - 30)\n\n    # Now we can solve the system of equations for the two variables boris and jeffery\n    solutions = solve((equation1, equation2), (boris, jeffery))\n\n    # The solutions for boris and jeffery will be in a dictionary, we need the sum of their marbles\n    return solutions[boris] + solutions[jeffery]\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisors, factorial\n\n    count = 0\n    # Since we are looking for numbers that are multiples of 15, we can start at 15 and go up to at least 15!\n    # This is because 15! will have a large number of factors, and any multiple of 15 below it might only have\n    # up to 15 factors.\n    for n in range(15, factorial(15) + 1, 15):  \n        if len(divisors(n)) == 15:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Find the last digit of 32**33\n    last_digit_32_33 = (32**33) % 10\n    # Find the last digit of 22**29\n    last_digit_22_29 = (22**29) % 10\n    # Subtract and find the last digit of the result\n    ans = (last_digit_32_33 - last_digit_22_29) % 10\n    return ans\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    for n in range(1, 100):  # Assuming there won't be more than 100 layers\n        students = (2*n + 1)**2\n        teachers = (2*n)**2\n        if students - teachers == 52:\n            return students + teachers\n    return None\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    num_players = 12\n    num_to_choose = 6\n    \n    return comb(num_players, num_to_choose)\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100):\n        for B in range(1000, 10000):\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                diff = B - A\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # We know that 8 x 80 x 100 = 8**2 x (80 x 100 / 8)\n    # Further simplification by dividing 80 by 8 gives us 10\n    # So the expression becomes 8**2 x 10 x 100\n    # Since 10 x 100 = 1000, which is 10**3, it's a perfect cube but not a square.\n    # So the boxed number would be the factor that we divided out, which is 10.\n\n    ans = 10\n    return ans\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Original ratio of apples to oranges\n    equation1 = Eq(apples, (5/7) * oranges)\n    # New ratio of apples to oranges after buying 12 more oranges\n    equation2 = Eq(apples, (2/3) * (oranges + 12))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    # Return the number of apples, as per the question\n    return solutions[apples]\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    final_position = 10  # 10 o'clock position\n    total_counts = 30    # Total counts\n    clock_numbers = 12   # Total numbers on the clock\n\n    # Since the counting is periodic with the period equal to the number of clock numbers,\n    # we can use the modulo operation to find the starting number.\n    start_position = (final_position - (total_counts % clock_numbers)) % clock_numbers\n    # If the starting position is 0, it means he started at 12 o'clock.\n    start_position = clock_numbers if start_position == 0 else start_position\n\n    return start_position\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define x, y, z as symbols\n    x, y, z = symbols('x y z')\n    \n    # We are given that 2014/37 can be represented as the nested fraction\n    # So, we create an equation that represents that equality\n    eq = Eq(2014/37, 54 + 1/(x + 1/(y + 1/z)))\n    \n    # We are looking for a solution where x, y, and z are distinct integers\n    # We can manually try finding distinct integer solutions\n    sols = solve(eq, (x, y, z), dict=True)\n    \n    # Iterate over solutions and return the sum of a valid one\n    for sol in sols:\n        vals = list(sol.values())\n        if len(set(vals)) == 3 and all(val.is_integer for val in vals):\n            return sum(vals)\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2 / 3) * snake_hibernation\n    frog_hibernation = (5 / 4) * bear_hibernation\n    return frog_hibernation\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    winners = 9\n    \n    amount_per_person = jackpot // winners\n\n    return amount_per_person\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    number = 100\n    while True:\n        if number % 5 == 1 and number % 6 == 1 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of oil sold from each bucket\n    sold = symbols('sold')\n\n    # Define equations based on the given information\n    equation = Eq((89 - sold) / (45 - sold), 12)\n\n    # Solve the equations to find the amount of oil sold from each bucket\n    solutions = solve(equation, sold)\n\n    # There could be multiple solutions, only one is physically meaningful (positive and less than original)\n    sold_amount = [s for s in solutions if s > 0 and s < 45][0]\n\n    return sold_amount\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import isprime\n\n    a = 31 - 26\n    b = 26 - 20\n    c = 20 - (31 - a)\n\n    if isprime(a) and isprime(b) and isprime(c):\n        return a * b * c\n    else:\n        return None\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # Number of five-legged aliens (himself and 5 brothers)\n    num_aliens = 1 + 5\n\n    # Each alien needs 5 shoes\n    num_shoes_per_alien = 5\n\n    # Each alien also needs 5 pairs of socks (one for each foot)\n    num_socks_per_alien = 5  # in pairs, since socks are sold in pairs\n\n    # Cost of shoes for one alien\n    cost_per_shoe_pack = 78  # per pack of 5\n    total_shoe_cost = num_aliens * cost_per_shoe_pack\n\n    # Cost of socks for one alien\n    cost_per_sock_pack = 12  # per pair\n    total_sock_cost = num_aliens * num_socks_per_alien * cost_per_sock_pack\n\n    # Total cost\n    total_cost = total_shoe_cost + total_sock_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j represent the number of pies Joleen baked\n    # Let r represent the number of pies Rennie baked\n    j, r = symbols('j r')\n\n    # Setting up the equations based on the problem statement\n    equation1 = Eq(j, r + 5)\n    equation2 = Eq(3/4 * r, 2/3 * j)\n\n    # Solving the equations to find the number of pies baked by Joleen and Rennie\n    solutions = solve((equation1, equation2), (j, r))\n\n    # Adding both quantities to get the total number of pies\n    total_pies = solutions[j] + solutions[r]\n\n    return total_pies\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    # average speeds\n    speed_to_park = 5\n    speed_back_home = 4\n\n    # total time in hours (54 mins converted to hours)\n    total_time = 54 / 60\n\n    # let the distance be x km\n    # time to park = distance/speed to park\n    # time back home = distance/speed back home\n    # total time = time to park + time back home\n    # We get the equation: x/5 + x/4 = 54/60\n    # We solve for x\n\n    # Simplifying the equation, we get a common denominator of 20 (LCM of 4 and 5)\n    # (4x + 5x) / 20 = 54/60\n    # 9x = (54/60) * 20\n    # x = ((54/60) * 20) / 9\n\n    x = ((54 / 60) * 20) / 9\n\n    return x\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    both = symbols('both')\n\n    apples = 3 * both\n    bananas = 5 * both\n    total_students = 35\n\n    equation = Eq(apples + bananas - both, total_students)\n\n    solutions = solve(equation, both)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    \n    # If g represents the number of girls and b represents the number of boys,\n    # we have the following two equations:\n    # g = b + 8 (because there are 8 more girls than boys)\n    # g + b = 26 (total number of pupils in class)\n    \n    # From the first equation, we can express b in terms of g: b = g - 8\n    # Substituting b into the second equation, we get:\n    # g + (g - 8) = 26\n    # Simplifying the equation: 2 * g = 26 + 8\n    # Solving for g: g = (26 + 8) / 2\n    \n    girls = (total_pupils + 8) / 2\n    \n    return int(girls)\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    oranges_for_pie_kg = 550 / 1000  # converting grams to kilograms\n    oranges_for_juice_kg = 1050 / 1000  # converting grams to kilograms\n\n    oranges_left_kg = total_oranges_kg - (oranges_for_pie_kg + oranges_for_juice_kg)\n    \n    return oranges_left_kg\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def count_2s(n):\n    count = 0\n    for i in range(n + 1):\n        count += str(i).count('2')\n    return count\n\ndef solution():\n    return count_2s(415)\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    common_difference = 3\n    total_days = 5\n    \n    total_chairs = first_day_chairs\n    for day in range(2, total_days + 1):\n        chairs_today = first_day_chairs + (day - 1) * common_difference\n        total_chairs += chairs_today\n        \n    return total_chairs\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    x, y = symbols('x y')\n    \n    # Convert the given equations into algebraic expressions using sympy\n    equation = Eq(6 * (10 * x + y) + 25, 200 * x + 10 * y)\n    \n    # Solve the equation for variables x and y\n    solution = solve(equation, (x, y))\n    \n    # Calculate value of A (xy should satisfy conditions: 1 <= x <= 9 and 0 <= y <= 9)\n    for s in solution:\n        if 1 <= s[x] <= 9 and 0 <= s[y] <= 9:\n            A = 10 * s[x] + s[y]\n            return A\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    ans = 111111111 * 99999999\n    return ans\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the time (in hours) Nancy takes to finish the job by herself\n    n = symbols('n')\n\n    # Setting up the equation:\n    # 1/n = Nancy's work rate, 1/x = Lee's work rate\n    # They complete 1 job working together for 10 hours: 10 * (1/n + 1/x) = 1\n    # When Nancy works for 20 hours and Lee for 6 hours, they complete 1 job: 20 * (1/n) + 6 * (1/x) = 1\n    # We equate the two expressions to set up the system of equations\n    equation1 = Eq(10 * (1/n + 1/(n-14)), 1)\n    equation2 = Eq(20 * (1/n) + 6 * (1/(n-14)), 1)\n\n    # Solve the system of equations for n\n    solution = solve((equation1, equation2), (n))\n\n    # We return the value of n that corresponds to Nancy's time to finish the job by herself\n    # Selecting the positive solution since time can't be negative\n    nancy_time = [sol[n] for sol in solution if sol[n] > 0]\n\n    return nancy_time[0]\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence_in_pound = 15\n    total_pounds = 3.00\n    total_pence = total_pounds * 100  # 1 pound = 100 pence\n\n    percentage = (pence_in_pound / total_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12/25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    for n in range(100, 191):\n        if n % 4 == 3 and n % 13 == 12:\n            return n\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Maximum picks without getting 3 of the same color:\n    # 2 blue + 2 yellow + 1 red = 5 marbles.\n    # So, we will surely have 3 of the same color on the next draw.\n    ans = 5 + 1\n    return ans\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    # Number of ways to choose 1 pencil out of 15 and 1 ruler out of 20\n    pencil_ruler_combinations = 15 * 20\n    \n    # Number of ways to choose 1 pencil out of 15 and 1 pen out of 10\n    pencil_pen_combinations = 15 * 10\n    \n    # Number of ways to choose 1 ruler out of 20 and 1 pen out of 10\n    ruler_pen_combinations = 20 * 10\n    \n    # Total number of ways to choose any two items\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y_minus_3 = -10\n    y = y_minus_3 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    cost_per_sharpener = 14  # in pence\n    total_cost = 7 * cost_per_sharpener  # total cost for 7 sharpeners in pence\n    amount_paid = 100  # amount paid in pence (Â£1 = 100p)\n\n    change = amount_paid - total_cost  # change in pence\n    return change  # return change in pence\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sebastian, garrett = symbols('sebastian garrett')\n\n    equation1 = Eq(garrett - sebastian, 24)\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n\n    return solutions[garrett]\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Let mary_age be the current age of Mary and son_age be the current age of her son.\n    # According to the problem, the sum of their current ages is 45.\n    mary_age_plus_son_age = 45\n\n    # In 5 years' time, both Mary and her son will be 5 years older.\n    # So we need to add 5 years to both Mary's and her son's current age.\n    # And then, calculate the sum of their ages at that time.\n    sum_of_ages_in_5_years = mary_age_plus_son_age + 5 + 5\n\n    return sum_of_ages_in_5_years\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    tax_rate = 0.06\n    tax_paid = 90\n\n    price_of_sofa = tax_paid / tax_rate\n\n    return price_of_sofa\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls', integer=True)\n\n    # Original condition: boys = girls - 65\n    equation1 = Eq(boys, girls - 65)\n    \n    # After leaving: boys - 2/5*boys = girls - 3/7*girls\n    equation2 = Eq(boys - 2/5 * boys, girls - 3/7 * girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Number of boys and girls remaining\n    boys_remaining = solutions[boys] - 2/5 * solutions[boys]\n    girls_remaining = solutions[girls] - 3/7 * solutions[girls]\n\n    # Total number of students remaining in the hall\n    total_remaining = boys_remaining + girls_remaining\n\n    return total_remaining\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    term_number = 20\n\n    nth_term = first_term + (term_number - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n    number_of_people = 4\n    number_of_days = 7\n\n    total_travel_cost = travel_cost_per_person * number_of_people\n    total_hotel_cost = hotel_cost_per_day_per_person * number_of_days * number_of_people\n    total_spending_money = spending_money_per_person * number_of_people\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # Arranging the grouped books as single units\n    num_groups = 4  # M, C, P, B\n    \n    # Total ways to arrange the 4 groups\n    group_arrangements = factorial(num_groups)\n    \n    # Ways to rearrange books within their own groups\n    math_arrangements = factorial(4)\n    chem_arrangements = factorial(3)\n    phys_arrangements = factorial(2)\n    # Biology book has only 1 arrangement\n    \n    # Multiply together the arrangements of groups and internal arrangements\n    total_arrangements = group_arrangements * math_arrangements * chem_arrangements * phys_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges, bananas = symbols('apples oranges bananas')\n\n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n\n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = \"seventy million seventeen thousand and seven\"\n    num_dict = {\n        'seventy million': 70000000,\n        'seventeen thousand': 17000,\n        'and seven': 7\n    }\n\n    parts = number.split(', ')\n    ans = sum(num_dict[part] for part in parts)\n\n    return ans\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_metres = 8850\n    metres_to_kilometres = 1000\n    height_kilometres = height_metres / metres_to_kilometres\n    return height_kilometres\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('ORANGES') # Total number of letters in the word\n    total_vowels = 3 # Number of vowels A,E,O\n    \n    # Total permutations of the word 'ORANGES'\n    total_permutations = factorial(total_letters)\n    \n    # Total permutations where the vowels (A, E, O) are together\n    # We treat the three vowels as one single unit along with the other 4 consonants,\n    # so we have 5 units to permute in total.\n    vowels_together_permutations = factorial(total_vowels) * factorial(total_letters - total_vowels + 1)\n    \n    # Subtracting the count of permutations where vowels are together from the total permutations.\n    ans = total_permutations - vowels_together_permutations\n    \n    return ans\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n\n    ways_to_select = category1 * category2 * category3\n\n    return ways_to_select\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for a in range(1, 13):\n        for b in range(a, 13):\n            c = 12 - a - b\n            if c >= b and a + b > c:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import solve, symbols, Eq, isprime\n\n    # Define the symbols\n    a, b, c = symbols('a b c')\n\n    # Setup the equations given the problem statement\n    equation1 = Eq(31 + a, 26 + b)\n    equation2 = Eq(26 + b, 20 + c)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, b, c))\n\n    # Find the primes that satisfy the conditions\n    for a_val in solutions[a]:\n        for b_val in solutions[b]:\n            for c_val in solutions[c]:\n                if isprime(a_val) and isprime(b_val) and isprime(c_val):\n                    return a_val * b_val * c_val\n\n    return None\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let the number of stickers originally held by Eugene, Melvin, and David be e, m, and d respectively.\n    e, m, d = symbols('e m d', positive=True, integer=True)\n\n    # Total stickers they have initially\n    eq_total = Eq(e + m + d, 260)\n\n    # The transactions described in the problem\n    m_gains = 2 * m  # Melvin gains twice as many as he had (from Eugene)\n    d_gains = d  # David gains as many as he had (from Melvin)\n    e_gains = e - m_gains  # Eugene's remaining stickers after giving to Melvin\n    final_e = e_gains + d_gains  # Eugene's stickers after getting from David\n    final_m = m + m_gains - d_gains  # Melvin's stickers after all transactions\n    final_d = d + d_gains - e_gains  # David's stickers after all transactions\n\n    # The ratio of their stickers in the end is 46:12:7\n    eq_ratio_e = Eq(final_e, 46)\n    eq_ratio_m = Eq(final_m, 12)\n    eq_ratio_d = Eq(final_d, 7)\n\n    # Find the values of e, m, and d that satisfy both the total and the ratios after transactions\n    sol = solve((eq_total, eq_ratio_e, eq_ratio_m, eq_ratio_d), (e, m, d))\n    return sol[e]\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # Given the conditions, if the last person to move can take the last match, he wins.\n    # Therefore, the player who starts wants to force the game into a state where both piles are equal,\n    # because from that point, any move the second player makes can be mirrored by the first player, leading to a win.\n    # If we start with different sized piles, the first player can make them equal in his first move.\n    # The first player (Eddie) will make the two piles equal by removing 11 matches from pile A.\n    # Then no matter how many matches Wei'er takes from any pile, Eddie can take the same amount from the other pile.\n    # Thus Eddie has a winning strategy and will win if he plays optimally.\n\n    pile_a = 35\n    pile_b = 24\n    eddie_strategy = pile_a - pile_b  # Number of matches to remove from A to equalize the piles\n\n    return eddie_strategy\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n    # Since the table can be rotated and this counts as the same order,\n    # we fix one person and arrange the remaining 5 people around them\n    # which gives us 5! (factorial of 5) different orders.\n    return factorial(5)\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    start = 31\n    end = 41\n    num_terms = (end - start) + 1\n    sum_seq = (start + end) * num_terms // 2\n    return sum_seq\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    sum = 0\n    sign = 1\n    for number in range(80, 55, -2):\n        sum += sign * number\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Initial state: equal number of boys and girls\n    initial_state = Eq(boys, girls)\n    \n    # After the changes: 12 more boys and 8 fewer girls\n    final_state = Eq(boys + 12, 2 * (girls - 8))\n    \n    # Solving the equations\n    solutions = solve((initial_state, final_state), (boys, girls))\n    \n    # The initial total is twice the number of boys or girls because there was an equal number\n    initial_total = 2 * solutions[boys]\n\n    return initial_total\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    return 21 * (2/7)\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 5, 7]\n    perm = permutations(digits)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(2, 25):\n        if isprime(i) and isprime(25 - i):\n            return i * (25 - i)\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Jack's running speeds\n    speed1 = 7  # m/s\n    speed2 = 5  # m/s\n    speed3 = 8  # m/s\n\n    # Distance covered by Jack\n    distance1 = 280  # m\n    distance2 = 400  # m\n    distance3 = 800 - distance1 - distance2  # m\n\n    # Time taken in each stage = Distance / Speed\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    # Total time spent on the entire race\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    return gcd(15, 45)\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time_hour = 6\n    start_time_minute = 52\n    end_time_hour = 8\n    end_time_minute = 24\n\n    start_minutes_total = start_time_hour * 60 + start_time_minute\n    end_minutes_total = end_time_hour * 60 + end_time_minute\n\n    time_spent_minutes = end_minutes_total - start_minutes_total\n\n    return time_spent_minutes\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    total_lamp_posts = 50\n    distance_between_posts = 2\n    # The road length is one less the number of lamp posts times the distance (since first lamp post is at the beginning of the road)\n    road_length = (total_lamp_posts - 1) * distance_between_posts\n    return road_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    peaches = 47\n    students = 6\n    min_peaches = (peaches + students - 1) // students\n    return min_peaches\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate/6 + 2*vanilla/3 + 7*blueberry/9, 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate the number of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    return 48 + 84\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    halfway_number = (18 + 52) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    return (2/9) * 36\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    n = 7  # Number of consecutive numbers\n    total_sum = 140\n    # The sum of seven consecutive numbers formula is: n/2 * (2a + (n - 1)d)\n    # For consecutive numbers, the difference d = 1\n    # Simplifying the formula: n/2 * (2a + (n - 1)) = total_sum\n    # Solving for the first term a gives us: a = (total_sum / n) - (n - 1) / 2\n    # In this case, n is odd so (n - 1) is even and the division by 2 will result in a whole number\n\n    smallest_number = (total_sum // n) - ((n - 1) // 2)\n    return smallest_number\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (3, 9)]\n    least_num_children = solve_congruence(*congruences)[0]\n    return least_num_children\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_card_price_pence = 45\n    stamp_price_pence = 27\n    post_cards_count = 10\n    stamps_count = 10\n    note_value_pounds = 10\n\n    total_cost_pence = (post_card_price_pence * post_cards_count) + (stamp_price_pence * stamps_count)\n    note_value_pence = note_value_pounds * 100\n\n    change_pence = note_value_pence - total_cost_pence\n    change_pounds = change_pence / 100\n\n    return change_pounds\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    total_ways = 3 * 2 # Total ways to arrange the remaining 3 people\n    face_to_face_ways = 1 # Only one way Tony sits face to face with Claire\n    \n    return total_ways - face_to_face_ways\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    smallest_mass = 7.35 # The lowest possible value that rounds to 7.4 when rounded to 1 decimal place\n    return smallest_mass\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Number of tables Frank makes in 1 day\n    tables_per_day_frank = 180 / 10\n\n    # Number of tables Ryan makes in 1 day\n    tables_per_day_ryan = 180 / 15\n\n    # Difference in the number of tables made by Frank and Ryan in 1 day\n    tables_difference = tables_per_day_frank - tables_per_day_ryan\n\n    return tables_difference\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_earned = 165  # in pounds\n    price_per_cake = 0.75  # 75 pence each, which is 0.75 pounds\n    number_of_cakes_sold = total_money_earned / price_per_cake\n    \n    return int(number_of_cakes_sold)\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    # Let the total number of questions Miss Atkinson had to mark be 'x'\n    # Let the original time she had planned be 't'\n    # If she marked 4 questions per minute, she would take x/4 minutes\n    # If she marked 6 questions per minute, she would take x/6 minutes\n    # She would be 5 minutes late if she marked 4 questions per minute (x/4) = t + 5\n    # She would be 5 minutes early if she marked 6 questions per minute (x/6) = t - 5\n    # The difference between the two times is 10 minutes\n    \n    # We therefore have two equations:\n    # x/4 = t + 5\n    # x/6 = t - 5\n    \n    # From these equations, we can find x\n    # To equalize the two scenarios we can use the difference (10 minutes):\n    # (x/4) - (x/6) = 10\n    # (3x - 2x) / 12 = 10\n    # x/12 = 10\n    # x = 10 * 12\n    \n    x = 10 * 12\n    return x\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    wrong_mark = -2\n    total_marks = 79\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * correct_mark + wrong * wrong_mark == total_marks:\n            return correct\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    initial_amount = 1440\n    spent_at_restaurant = (3/7) * initial_amount\n    remainder_after_restaurant = initial_amount - spent_at_restaurant\n    spent_on_fees = (2/9) * remainder_after_restaurant\n    remaining_amount = remainder_after_restaurant - spent_on_fees\n    \n    return remaining_amount\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    # Start with the smallest 2-digit number, 10, and go up to the largest 2-digit number that allows for 5 consecutive numbers, 94.\n    for i in range(10, 95):\n        a, b, c, d, e = i, i+1, i+2, i+3, i+4  # Create a sequence of five consecutive numbers\n\n        # Check the divisibility conditions for the sums of three numbers each.\n        # We need to check all possible sums of three consecutive numbers.\n        for j in range(a, d+1):  # a+b+c, b+c+d or c+d+e\n            sum_first_three = j + (j+1) + (j+2)\n            sum_last_three = (j+1) + (j+2) + (j+3)\n            \n            if sum_first_three % 37 == 0 and sum_last_three % 60 == 0:\n                return e  # Return the largest number if found\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\n# Assuming x and y are given or defined previously\n# For example:\n# x = price per pound of bananas\n# y = price per pound of oranges\n# ans = solution(x, y)"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    total_candies = amy_candies + emma_candies\n    candies_each = total_candies // 2\n    candies_to_give = amy_candies - candies_each\n    return candies_to_give\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    # Convert meters to centimeters\n    meters_in_cm = 3.2 * 100\n    difference = meters_in_cm - 30\n    return difference\n\nans = solution()"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # The clock chimes 3 times in 6 seconds, which means there are 2 intervals of chimes in those 6 seconds.\n    # Therefore, each interval takes 6 seconds / 2 intervals = 3 seconds per interval.\n    chime_interval = 6 / 2\n    \n    # At 6 pm, the clock will chime 6 times, which means there are 5 intervals of chimes.\n    # Therefore, the total time taken is 5 intervals * 3 seconds per interval.\n    total_time = 5 * chime_interval\n    \n    return int(total_time)\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    n = 10  # 30/3 = 10\n    # formula for the sum of squares of the first n natural numbers: n*(n+1)*(2*n+1)/6\n    sum_of_squares = 3 * (n * (n + 1) * (2 * n + 1) // 6)\n    return sum_of_squares\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    count = 0\n    for i in range(1, 41):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # P's work rate in terms of jobs per hour\n    p_rate = 1 / (12 * 8)\n    # Q's work rate in terms of jobs per hour\n    q_rate = 1 / (8 * 10)\n    \n    # Combined work rate of P and Q per hour\n    combined_rate = p_rate + q_rate\n    \n    # Total hours required for P and Q to finish the job\n    total_hours_needed = 1 / combined_rate\n    \n    # Since they work 8 hours a day, calculate the number of days needed\n    # We use ceil to get the smallest integer greater than or equal to the number\n    from math import ceil\n    days_needed = ceil(total_hours_needed / 8)\n\n    return days_needed\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    # Price per kilogram in pounds\n    price_per_kg = 0.56\n    \n    # Total cost for 5 kilograms\n    total_cost = 5 * price_per_kg\n    \n    # Amount given\n    amount_given = 10\n    \n    # Change returned\n    change = amount_given - total_cost\n\n    return change\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(120)\n    total_factors = 1\n    \n    for power in factors.values():\n        total_factors *= (power + 1)\n\n    return total_factors\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    product = 180\n    # Find factors of the product\n    factors = []\n    for i in range(1, int(product**0.5) + 1):\n        if product % i == 0:\n            factors.append((i, product // i))\n    # Calculate the smallest possible difference between the two factors\n    smallest_difference = float('inf')\n    for factor_pair in factors:\n        difference = abs(factor_pair[0] - factor_pair[1])\n        if difference < smallest_difference:\n            smallest_difference = difference\n    return smallest_difference\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    temp_at_midnight = -8\n    temp_at_midday = 13\n\n    overall_temp_change = temp_at_midday - temp_at_midnight\n\n    return overall_temp_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for num in range(5, 16):\n        if num % 3 == 0 and 27 % num == 0:\n            return num\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_weight_durian = 3 * 2.6\n    total_weight_watermelon = 5 * 9.24\n    total_weight = total_weight_durian + total_weight_watermelon\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let the time taken by Max to cover the distance be t minutes.\n    # Then, the time taken by Luca is t + 10 minutes.\n    # Luca's speed is 2, Max's speed is 3 (ratio 2:3).\n    # Time is inversely proportional to speed for a given distance.\n\n    # Let the distance be d.\n    # Luca's speed = d / (t + 10)\n    # Max's speed = d / t\n\n    # According to the ratio 2:3 for their speeds:\n    # d / (t + 10) / (d / t) = 2 / 3\n    # 3d / (t + 10) = 2d / t\n    # 3dt = 2d(t + 10)\n    # 3t = 2t + 20\n    # t = 20 (Max's time)\n\n    # Luca's usual time = 20 + 10 = 30 minutes\n    # Luca's doubled speed time = 30 / 2 = 15 minutes, as distance remains the same.\n\n    return 15\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    pencils = symbols('pencils')\n    pens = pencils\n    equation = Eq(pens - (pencils - 5), 2 * (pencils - 5))\n    \n    pencils_left = solve(equation, pencils)[0]\n    pens_final = pens + 18\n    \n    return pens_final.subs(pencils, pencils_left)\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count(\"3\")\n    return count\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Calculate the distance covered while jogging from 6:30 AM to 7:30 AM\n    jogging_time = 1 # in hours\n    jogging_speed = 6.5 # in miles per hour\n    jogging_distance = jogging_time * jogging_speed\n\n    # Calculate the distance covered while walking from 7:30 AM to 9:30 AM\n    walking_time = 2 # in hours\n    walking_speed = 4.5 # in miles per hour\n    walking_distance = walking_time * walking_speed\n\n    # The total distance is the sum of the jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    return total_distance\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # It was mentioned that 1 mark is deducted for every wrong answer and 2 marks are awarded for every correct one.\n    # Let's denote the number of wrong answers by w and correct answers by c.\n    # We have two equations to represent score and the total number of questions:\n    # Equation for total score: 2c - w = 71\n    # Equation for total number of questions: c + w = 40\n    # We need to solve these two equations to find the real number of correct and wrong answers.\n\n    from sympy import symbols, solve\n\n    c, w = symbols('c w')\n    equation1 = 2*c - w - 71\n    equation2 = c + w - 40\n    solutions = solve((equation1, equation2), (c, w))\n\n    correct_answers = solutions[c]\n    wrong_answers = solutions[w]\n    return wrong_answers\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # Worst case scenario to ensure at least one \"A\" card is without drawing an \"A\" initially\n    # Draw all other patterns: 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K from all suits\n    max_non_A_cards = 12 * 4\n\n    # now we draw one more card, to ensure that it is an \"A\"\n    cards_required = max_non_A_cards + 1\n    \n    return cards_required\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_ship + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for i in range(1, 226):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    initial_length = 240\n    cut1 = 45\n    cut2 = 45\n    length_after_cuts = initial_length - (cut1 + cut2)\n    piece_length = 40\n    number_of_pieces = length_after_cuts // piece_length\n\n    return number_of_pieces\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    # Each of the three positions can be occupied by any of the 3 digits.\n    # Therefore, for each position we have 3 choices.\n    ans = 3 * 3 * 3\n    return ans\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    proportion_left_handed_tennis = 1 / 10\n    proportion_left_handed = 0.25\n\n    # Calculate the number of left handed students\n    left_handed_students = left_handed_tennis_players / proportion_left_handed_tennis\n\n    # Calculate the total number of students\n    total_students = left_handed_students / proportion_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram = 80 / 20\n    grams_needed = 100 / cookies_per_gram\n    return grams_needed\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"10:35\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    count_zeros = 0\n    number = 1\n\n    while count_zeros <= 100:\n        count_zeros += str(number).count('0')\n        if count_zeros >= 100:\n            break\n        number += 1\n        \n    return number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_drunk = 9\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drunk\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_fast = 180\n    time_fast = 6\n    speed_slow = 120\n    time_slow = 8\n\n    distance_fast = speed_fast * time_fast\n    distance_slow = speed_slow * time_slow\n\n    total_distance = distance_fast + distance_slow\n\n    return total_distance\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    elias_position_from_front = 25 + 1  # Elias is directly behind Danya\n    total_people_including_danya = elias_position_from_front + 14 - 1  # Counting Danya herself\n\n    return total_people_including_danya\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Since the numbers are consecutive, they form an arithmetic sequence with a common difference of 1.\n    # Let the first term of the sequence be x.\n    # Then, the sum of the first to the eighth term (x to x+7) is 8x + (1+2+3+4+5+6+7) = 2012.\n    # Simplifying, we get 8x + 28 = 2012. We need to solve for x.\n    # After solving for x, we find the largest number by adding 7 to the first term (x).\n\n    # Calculate the sum of the first seven numbers\n    sum_of_first_seven = (1 + 2 + 3 + 4 + 5 + 6 + 7)\n    # Subtract this sum from the total sum to find 8 times the first number\n    eight_x = 2012 - sum_of_first_seven\n    # Now find the first number\n    x = eight_x // 8\n    # The largest number in the sequence will be x + 7\n    largest_number = x + 7\n\n    return largest_number\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    fraction = 42 / 35\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    ans = 24.4 * 1000\n    return ans\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    # Initial Ratio\n    equation1 = Eq(A, 5/7 * B)\n    # After transferring 3 students\n    equation2 = Eq(A + 3, 4/5 * (B - 3))\n    \n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    return 52248 // 12\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_ml_per_sec = 125\n    total_ml = total_litres * 1000  # converting litres to millilitres\n    time_in_sec = total_ml / flow_rate_ml_per_sec\n    return time_in_sec\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of initial bottles Faye had\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Every time she exchanges, she gains 1/3 of the bottles she has\n    # After 5 swaps, she gets 1 more bottle than expected (4 instead of 3),\n    # so the expected number is 4 - 1 = 3 bottles\n    # Set up the equation for the process\n    equation = Eq(((x - 5 * 3) / 3) ** 5, 3)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Since the number of bottles must be a whole number, we take the integer solution\n    for sol in solution:\n        if sol.is_integer:\n            return sol\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    page = 0\n    digits = 0\n\n    while digits < 237:\n        page += 1\n        digits += len(str(page))\n    \n    return page - 1\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the distance between Ivy's home and the destination as d\n    # and her normal speed as s (in km/h).\n    d, s = symbols('d s')\n    \n    # The time taken for the trip at normal speed is 6 hours (from 1 pm to 7 pm)\n    # Hence, the equation relating distance, speed and time is: d = s * 6\n    \n    # If Ivy increases her speed by 2 km/h (s + 2), her travel time reduces by 1 hour\n    # So the new time taken is 5 hours.\n    # The new equation will be: d = (s + 2) * 5\n    \n    # Setting up the equations based on the above information\n    equation1 = Eq(d, s * 6)\n    equation2 = Eq(d, (s + 2) * 5)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (d, s))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let's denote n as the side length of the smaller square\n    # The number of boys would then be n^2\n    # When the girls join, the side length increases by 1, resulting in a larger square of (n+1)^2\n    # The difference in the number of people between the larger and smaller square is therefore 17 (the number of girls)\n    # So we have the equation (n + 1)^2 - n^2 = 17\n\n    # We can rewrite the equation as:\n    # n^2 + 2n + 1 - n^2 = 17\n    # Which simplifies to:\n    # 2n + 1 = 17\n\n    # Solving for n, we have:\n    # 2n = 17 - 1\n    # n = 16 / 2\n    # n = 8\n\n    # So the total number of boys would be n^2:\n    n = 8\n    num_boys = n ** 2\n\n    return num_boys\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n, a, d = symbols('n a d')  # n=term number, a=first term, d=common difference\n    term_9 = a + 8*d\n    term_15 = a + 14*d\n    term_20 = a + 19*d\n    term_12 = a + 11*d\n    term_32 = a + 31*d\n\n    equation1 = Eq(term_9 - term_15, 18)\n    equation2 = Eq(term_20 + term_12, 88)\n    \n    solutions = solve((equation1, equation2), (a, d))\n    \n    a_solution = solutions[a]\n    d_solution = solutions[d]\n    \n    return a_solution + 31*d_solution\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_total_extra = 1468 - 1462\n    incorrect_day_saving_difference = 1268 - 1082\n    total_days = incorrect_day_saving_difference / incorrect_total_extra\n    return int(total_days)\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    current_year = 2011\n    age_of_oak_tree = current_year - birth_year\n    return age_of_oak_tree\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # If Mr Tung can cut a rope into 4 equal pieces in 12 minutes,\n    # this means he makes 3 cuts (since 1 initial piece requires no cut).\n    \n    # To find out how long it takes to make one cut, we divide the total time by the number of cuts.\n    time_per_cut = 12 / 3\n    \n    # To cut the rope into 12 pieces, he will need to make 11 cuts.\n    time_for_12_pieces = time_per_cut * 11\n    \n    return time_for_12_pieces\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, simplify\n\n    x = symbols('x')\n    chewy_equation = ((8*x + 8)/2) - 3*(x + 6)\n    correct_equation = simplify(chewy_equation)\n\n    return correct_equation\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 31        # Last figure shown (10th term)\n    position = 10        # The position of the last figure in the sequence\n    common_difference = 3  # The common difference in the sequence\n\n    # Calculate the first term using the formula for the nth term of an arithmetic sequence\n    # nth_term = first_term + (position - 1) * common_difference\n    # So, the first_term = nth_term - (position - 1) * common_difference\n    first_term = nth_term - (position - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    # Given: 4 * Lily_age * Marry_age * Carol_age = 2240\n    # Carol_age = Marry_age + 2\n    # Marry_age = Lily_age + 1\n\n    # We can simplify 2240 first by dividing by 4 to get the product of their ages\n    product_of_ages = 2240 // 4\n    \n    # Now we will try every possible age for Lily and calculate Marry's and Carol's accordingly\n    # We will check each combination to see if the product matches product_of_ages\n    for Lily_age in range(1, product_of_ages):  \n        Marry_age = Lily_age + 1\n        Carol_age = Marry_age + 2\n        if Lily_age * Marry_age * Carol_age == product_of_ages:\n            return Carol_age\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red = total_flowers * 2/5\n    purple = total_flowers * 1/8\n    return red + purple\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    num = 38942\n    remainder = num % 9\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n        \n    return ans\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05669  # Since 1 liter = 1.05669 quarts\n    cups = liters_to_quarts / 0.5\n    return round(cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # Considering the worst-case scenario to ensure 3 cars of same color\n    # Pick 2 red, 2 blue, and 2 white - still not guaranteed to have 3 of same color\n    # Then the next pick, regardless of color, will ensure 3 cars of the same color\n    picks = 2 + 2 + 2 + 1\n    \n    return picks\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # As there are identical marbles, we consider this as a partition problem\n    # Number of ways to split 10 identical marbles into 2 piles can be thought of as\n    # putting a divider in between the marbles.\n    # There are 9 spaces between 10 marbles to place a divider.\n    # So, it should be equal to the number of spaces + 1\n    ans = 9 + 1\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    for spiders in range(64 // 8 + 1):\n        ants = (64 - spiders * 8) // 6\n        if spiders * 8 + ants * 6 == 64:\n            max_ants = max(max_ants, ants)\n    return max_ants\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    length_wood1_cm = 85\n    length_wood2_cm = 200  # 2m converted to cm\n    length_wood3_cm = 147\n\n    total_length_cm = length_wood1_cm + length_wood2_cm + length_wood3_cm\n\n    total_length_m = total_length_cm / 100  # Convert cm to m\n\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_part = 2\n    fractional_part = 34\n    fractional_divisor = 100\n    decimal_number = whole_part + fractional_part / fractional_divisor\n    return decimal_number\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vivian, justin = symbols('vivian justin')\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (vivian, justin))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres = 7.5\n    millilitres_per_litre = 1000\n    return litres * millilitres_per_litre\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    expression = ((x - 6) * 6 + 6) / 6\n    equation = Eq(expression, 6)\n    \n    solve_for_x = solve(equation, x)\n    \n    return solve_for_x[0]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    # Initial amount of stamps is unknown\n    # Gave away 14 stamps: -14\n    # Bought 11 stamps: +11\n    # Used 2 stamps: -2\n    # Remaining stamps: 34\n    \n    # We work backwards using inverse operations\n    # Add 2 for the stamps used to send a letter\n    remaining_after_letter = 34 + 2\n    # Subtract 11 for the stamps bought from Singpost\n    remaining_after_buying = remaining_after_letter - 11\n    # Add 14 for the stamps given to her sister\n    initial_stamps = remaining_after_buying + 14\n    \n    return initial_stamps\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spent = initial_amount / 2\n    remaining = initial_amount - spent\n    return remaining\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let's denote the height from which the ball was dropped as h.\n    # After the first bounce, the ball reaches 3h.\n    # After the second bounce, it again reaches 3h (since it's given that the first two bounces are 3 times the height).\n    # Then the bouncing height halves with each subsequent bounce.\n    # Therefore, after the third bounce, the height would be 3h / 2 and after the fourth bounce, it would be (3h / 2) / 2.\n    # Given that the height after the fourth bounce is 36 m, we can set up the equation:\n    # (3h / 2) / 2 = 36 => 3h / 4 = 36 => h = (36 * 4) / 3.\n    # Solve for h.\n    h = (36 * 4) / 3\n    return h\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    original_sum = 11.63\n    wrong_sum = 5.87\n\n    # The original equation assuming x > y\n    equation1 = Eq(x + y, original_sum)\n\n    # Equation when Oliver shifts the decimal of y one position to the left\n    # It's effectively y/10 that is being added to x instead of y\n    equation2 = Eq(x + y/10, wrong_sum)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate 100 times the difference between the two numbers\n    difference = abs(solutions[x] - solutions[y])\n\n    return int(difference * 100)\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    trays = 40\n    total_eggs = eggs_per_tray * trays\n    return total_eggs\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    single_song_price_pence = 99\n    total_songs = 12\n    cd_price_pounds = 8.99\n    \n    total_individual_price_pence = single_song_price_pence * total_songs\n    cd_price_pence = cd_price_pounds * 100\n    \n    savings = total_individual_price_pence - cd_price_pence\n    \n    return savings / 100  # converting pence back to pounds for the final answer\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    for e in range(10):\n                        if len({a, b, c, d, e, 8}) == 6:  # all digits are unique, including 8\n                            number = int(f\"8{a}{b}{c}{d}{e}\")\n                            if number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n                                return number\n    return None\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    differences = set()\n    for i in range(10, 100):\n        original = str(i)\n        reverse = original[::-1]\n        diff = abs(int(original) - int(reverse))\n        differences.add(diff)\n\n    # Checking if all differences are multiples of 9\n    is_multiple_of_9 = all(d % 9 == 0 for d in differences)\n    return is_multiple_of_9\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = set()\n    \n    for d1 in digits:\n        for d2 in digits:\n            if d1 != d2:\n                two_digit_numbers.add(d1 + d2)\n                \n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    digits = list(range(10))\n    # To get the smallest difference, one number should be as high as possible\n    # and the other should be as low as possible using the remaining digits.\n    high = sorted(digits[5:], reverse=True) # maximum 5-digit number from the biggest half digits\n    low = sorted(digits[:5]) # minimum 5-digit number from the smallest half digits\n    \n    # If the smallest digit is 0 (for the smaller number), swap it with the smallest non-zero digit\n    if low[0] == 0:\n        low[0], low[1] = low[1], low[0]\n    \n    # Convert list of ints to int\n    high_num = int(''.join(map(str, high)))\n    low_num = int(''.join(map(str, low)))\n    \n    return high_num - low_num\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's represent the problem with algebra.\n    # Let p be the number of stickers Peter had originally.\n    p = symbols('p')\n\n    # Sam had 40 more stickers than Peter.\n    s = p + 40\n\n    # Sam gave 20% of his stickers to Peter.\n    # Peter now has p + 0.20 * s stickers.\n    new_p = p + 0.20 * s\n\n    # In return, Peter gave 25% of his new total to Sam.\n    # Sam now has (s - 0.20 * s) + 0.25 * new_p = 0.80 * s + 0.25 * new_p stickers.\n    new_s = 0.80 * s + 0.25 * new_p\n\n    # Sam ends up with 96 more stickers than Peter.\n    equation = Eq(new_s, new_p + 96)\n    \n    # Solve the equation for p.\n    solutions = solve((equation), (p))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time_to_pass = 15  # in seconds\n    length_of_train = 450  # in meters\n\n    speed_of_train = length_of_train / time_to_pass  # in meters per second\n    return speed_of_train\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n    return factorial\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt_mass = 8\n    water_mass = 32\n    total_mass = salt_mass + water_mass\n    concentration = (salt_mass / total_mass) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    result = 70 * 40 / 100\n    return result\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_a_pen = pen_cost / pencil_cost\n\n    return int(pencils_for_a_pen)\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_and_bala = 2  # Ali and Bala themselves\n\n    total_people = people_in_front_of_ali + ali_and_bala + people_behind_bala\n\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    cards_sent_by_each = friends - 1\n    total_cards = friends * cards_sent_by_each\n    return total_cards\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    return (18 - 17) + (16 - 15) + (14 - 13)\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    num = 1\n    while True:\n        if all(num % i == 0 for i in range(1, 7)):\n            return num\n        num += 1\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 101+1))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    jugs_added = 4\n\n    total_water = initial_water + jug_capacity * jugs_added\n\n    return total_water\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # According to Newton's third law, for every action, there is an equal and opposite reaction.\n    # Thus, the force exerted by the table on the book (the normal force) is equal in magnitude\n    # and opposite in direction to the gravitational force exerted by the Earth on the book.\n    # Hence, the magnitude of the force exerted by the table on the book is also 20N.\n    \n    force_magnitude = 20\n    return force_magnitude\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan = 74\n    bilal = 86\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    first_period_days = 3\n    second_period_days = 2\n    last_period_days = 2\n\n    first_period_cookies = 9 * first_period_days\n    second_period_cookies = 15 * second_period_days\n    last_period_cookies = 10 * last_period_days\n\n    total_days = first_period_days + second_period_days + last_period_days\n    total_cookies = first_period_cookies + second_period_cookies + last_period_cookies\n\n    average_cookies_per_day = total_cookies / total_days\n\n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    from sympy import symbols, Eq, solve, Rational\n\n    # Let x be the number of days David takes off\n    x = symbols('x')\n\n    # Candy's work rate is 1/20 job per day\n    # David's work rate is 1/25 job per day\n\n    # Candy works for all 12 days, David works for (12 - x) days\n    # Total work done by Candy and David is 1 job\n    equation = Eq((12 / 20) + ((12 - x) / 25), 1)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # There could be multiple solutions, so we should filter out non-sensical ones (like negative days)\n    days_off = [sol for sol in solution if sol >= 0 and sol <= 12]\n    # We expect only one possible solution after filtering\n    return days_off[0]\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')\n    guy_age = y - 3\n    return guy_age\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_fruits, apples_at_start, pears_at_start = symbols('total_fruits apples_at_start pears_at_start')\n\n    # Equation for the number of apples and pears at start\n    eq1 = Eq(apples_at_start, 4/5 * total_fruits)\n    eq2 = Eq(pears_at_start, total_fruits - apples_at_start)\n\n    # Equation after 3/4 of the fruits are removed\n    # 1/4 left of total = 1/8 left of apples at start + 30 pears left\n    eq3 = Eq(1/4 * total_fruits, 1/8 * apples_at_start + 30)\n\n    # Solving the equations\n    solutions = solve((eq1, eq2, eq3), (total_fruits, apples_at_start, pears_at_start), dict=True)\n\n    return solutions[0][total_fruits]\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let T be the variable representing the unknown percentage\n    T = symbols('T')\n    \n    # Calculate the tax for the first $50,000\n    tax_for_first_50k = 0.05 * 50000\n    \n    # Calculate the tax for the remaining $90,000 (140,000 - 50,000)\n    # The tax rate is (8 + T)%\n    tax_for_remaining = (0.08 + T / 100) * (140000 - 50000)\n    \n    # The total tax paid is $15,100\n    total_tax_paid = tax_for_first_50k + tax_for_remaining\n    \n    # Set up the equation and solve for T\n    tax_equation = Eq(total_tax_paid, 15100)\n    solution_T = solve(tax_equation, T)\n    \n    # Extract the solution for T\n    return float(solution_T[0])\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    cakes_made = 6\n    cakes_wanted = 10\n\n    time_per_cake = time_for_6_cakes / cakes_made\n    total_time_for_10_cakes = time_per_cake * cakes_wanted\n    \n    return total_time_for_10_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip = bill * 0.15\n    tax = bill * 0.08\n    total_cost = bill + tip + tax\n    return total_cost\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n    \n    # Constants given in the problem\n    mass = 2             # Mass of the ball in kilograms\n    height = 5.0         # Height from which the ball is dropped in meters\n    g = 9.81             # Acceleration due to gravity in m/s^2\n    \n    # Using the formula for potential energy (PE = mgh) and equating it to kinetic energy (KE = 0.5mv^2) at the floor\n    # PE at the top is equal to KE at the bottom, thus mgh = 0.5mv^2\n    # The mass cancels out from both sides: gh = 0.5v^2\n    # Rearrange the equation to solve for v: v^2 = 2gh; v = sqrt(2gh)\n    v = sqrt(2 * g * height)\n    \n    return v\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # The worst case scenario is that Lily takes out all the balls \n    # of the other two types before getting 6 balls of the same type.\n    # There are 9 basketballs, so she could take out all 9 of them,\n    # and there are 3 volleyballs, so she could take out all 3 of them.\n    # After this, no matter what type of ball she takes out,\n    # she will have 6 footballs by the sixth draw.\n    # Therefore, she must take out 9 basketballs, 3 volleyballs, and 5 footballs\n    # to guarantee 6 balls of the same type, which is football in this case.\n    max_basketballs = 9\n    max_volleyballs = 3\n    num_footballs_needed = 6 - 1  # We subtract 1 because the next ball will be the 6th football.\n    balls_needed = max_basketballs + max_volleyballs + num_footballs_needed\n\n    return balls_needed\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    # Equations based on the given problem:\n    # stickers = 13 * pupils + 190\n    # stickers = 17 * pupils + 50\n    equation1 = Eq(stickers, 13 * pupils + 190)\n    equation2 = Eq(stickers, 17 * pupils + 50)\n\n    # Solve the equations simultaneously\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if sum(map(int, str(num))) == 20 and num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # The problem can be approached as a stars and bars problem.\n    # We have 13 oranges to divide among 3 kids such that each kid gets at least one orange.\n    # After giving each kid 1 orange, we are left with 13-3 = 10 oranges to distribute.\n    # This situation is equivalent to placing two dividers among 10 oranges.\n    # The dividers indicate the division between the oranges for each kid.\n\n    # Calculating the number of ways to position the two dividers in the 12 spaces\n    # available between or at the sides of the 10 oranges.\n    number_of_dividers = 3 - 1  # We need one less divider than the number of kids.\n    oranges_left = 13 - 3  # After giving one orange to each kid.\n\n    # The number of ways to place the dividers is given by the number of combinations.\n    ans = comb(oranges_left + number_of_dividers, number_of_dividers)\n\n    return ans\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2\n    drink_options = 3\n    dessert_options = 4\n\n    total_ways = food_options * drink_options * dessert_options\n\n    return total_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    return 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        s, a, m, o, g = p\n        if s == 0 or o == 0:  # Skip if S or O is zero as they are at the beginning of the numbers\n            continue\n        sasmo = s*10000 + a*1000 + s*100 + m*10 + o\n        ogams = o*10000 + g*1000 + a*100 + m*10 + s\n        if sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    equal_volume = total_water / 2\n    water_to_transfer = equal_volume - 28\n    return water_to_transfer\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "def solution():\n    from sympy import symbols, Eq, solve, sin, cos, pi\n    \n    # Constants provided by the question\n    initial_velocity = 5 # m/s\n    angle_of_projection = 45 # degrees\n    height_of_building = 30 # meters\n    g = 9.81 # acceleration due to gravity in m/s^2\n\n    # Convert angle to radians for Python trig functions\n    angle_in_radians = angle_of_projection * (pi/180)\n    \n    # Resolve the initial velocity into horizontal (u_x) and vertical (u_y) components\n    u_x = initial_velocity * cos(angle_in_radians) # Horizontal component\n    u_y = initial_velocity * sin(angle_in_radians) # Vertical component\n    \n    # Time it takes for the arrow to reach the ground\n    # Use kinematic equation: 0 = u_y*t + (1/2)*(-g)*t^2 + height_of_building\n    t = symbols('t')\n    time_eq = Eq(u_y*t - (1/2)*g*t**2, -height_of_building)\n    time_to_hit_ground = max(solve(time_eq, t)) # We take the positive root\n    \n    # Final vertical velocity (v_y) using v_y = u_y - g*t\n    v_y = u_y - g*time_to_hit_ground\n    \n    # The horizontal component of the velocity remains unchanged (u_x)\n    \n    # Final velocity is the vector sum of the vertical and horizontal components\n    final_velocity = (u_x**2 + v_y**2)**0.5\n    \n    return final_velocity\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P = 2000  # Principal amount\n    A = 2519.42  # Amount after 3 years\n    r = symbols('r')  # Interest rate\n    n = 3  # Number of years\n\n    # Compound interest formula: A = P * (1 + r) ** n\n    equation = Eq(A, P * (1 + r) ** n)\n\n    # Solve for the interest rate\n    interest_rate = solve(equation, r)\n\n    return float(interest_rate[0])\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n\n    equation1 = Eq(2 * elephant, 5 * cow)\n    equation2 = Eq(4 * cow, 3 * horse)\n    equation3 = Eq(3 * horse, 5 * pig)\n\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n\n    # Find the weight of 8 elephants in terms of pigs\n    weight_8_elephants = 8 * solutions[elephant] / solutions[pig]\n\n    return weight_8_elephants\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    # Total money given by Anjali\n    total_money_given = 2 * 10 + 4 * 2 + 8 * 0.50\n    # Change received after the purchase\n    change_received = 0.40\n    # Total cost for 4 cups\n    total_cost_4_cups = total_money_given - change_received\n    # Cost per cup\n    cost_per_cup = total_cost_4_cups / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    ans = (60 / 100) * (2 / 5) * 75\n    return ans\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    mango_price, lychee_price = symbols('mango_price lychee_price')\n\n    # Given conditions\n    total_cost = 1160\n    mangoes = 24\n    lychees = 20\n    price_relation = Eq(lychee_price, 2 * mango_price - 6)\n\n    # Formulate the equations based on the given information\n    cost_equation = Eq(mangoes * mango_price + lychees * lychee_price, total_cost)\n\n    # Solve the system of equations\n    solutions = solve((cost_equation, price_relation), (mango_price, lychee_price))\n\n    # Return the price per box of lychees\n    return solutions[lychee_price]\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percentage = 18\n    tax_percentage = 10\n\n    tip = (tip_percentage / 100) * bill\n    tax = (tax_percentage / 100) * bill\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    # If the total weight of 5 boxes is 350 kg,\n    # then the average weight per box is 350 kg / 5 boxes.\n    average_weight_per_box = 350 / 5\n\n    # The total weight of 3 boxes is 3 times the average weight per box.\n    total_weight_of_3_boxes = 3 * average_weight_per_box\n\n    return total_weight_of_3_boxes\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange the singing performances\n    # We have 6 singing performances, the number of arrangements is 6!\n    singing_ways = factorial(6)\n    \n    # Calculate the minimum slots between dancing performances\n    # Since there must be at least one singing performance between any two dancing performances,\n    # we need to have at least 3 singing performances to separate the 4 dancing performances\n    # which creates 5 slots where the remaining 3 singing performances can be placed\n    # (One at the beginning, three between the dancing, and one at the end)\n    \n    # Calculate the ways to put the remaining 3 singing performances into the 5 slots\n    # The remaining 3 singing performances can be distributed in the slots in Choose(5, 3) ways\n    slots = 5\n    remaining_singing = 3\n    slots_ways = factorial(slots) // (factorial(remaining_singing) * factorial(slots - remaining_singing))\n    \n    # The final answer is the product of singing_ways and slots_ways\n    ans = singing_ways * slots_ways\n    return ans\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "def solution():\n    from math import factorial\n    # The group of comics can be arranged in 4! ways, and the same for the group of fictions (6! ways).\n    comics_factorial = factorial(4)\n    fictions_factorial = factorial(6)\n    \n    # The two groups can be treated as single entities, with 2! ways to arrange those entities.\n    groups_factorial = factorial(2)\n    \n    # The total number of arrangements is the product of these possibilities.\n    total_arrangements = comics_factorial * fictions_factorial * groups_factorial\n    return total_arrangements\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    for dora_correct in range(11):\n        justin_correct = dora_correct + 15//10  # Justin got 15 more points, which means 1.5 more correct answers\n        dora_points = dora_correct * 10 - (10 - dora_correct) * 5\n        justin_points = justin_correct * 10 - (10 - justin_correct) * 5\n        if dora_points + justin_points == 155:\n            return dora_correct\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return latte_litres\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in class B\n    # Total candies sold by class A = 3 groups * 12 candies/group = 36 candies\n    # Total groups in A and B = 3 + 4 = 7 groups\n\n    # The total candies sold on average by all groups = 7 groups * 8 candies/group\n    total_candies = 7 * 8\n\n    # Subtracting the candies sold by class A from the total to find total candies sold by class B\n    candies_B = total_candies - 36\n\n    # Since there are 4 groups in class B, we divide by 4 to find the average for each group in class B\n    average_B = candies_B / 4\n\n    return average_B\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    # Let the total work be LCM of 10, 6 and 20 = 60 units (choosing 60 for simplicity)\n    # Rate of Lee + Rate of Nancy = 60 units / 10 hours = 6 units/hour\n    total_rate = 6\n\n    # Lee works for 6 hours, so the work he does is 6 * Rate of Lee\n    lee_work_for_6_hours = 6 * total_rate  # This equation has both Lee's rate and Total rate\n\n    # Remaining work after Lee's 6 hours\n    remaining_work = 60 - lee_work_for_6_hours\n\n    # Nancy works for 20 hours to finish the remaining work\n    # So, Rate of Nancy = remaining work / 20 hours\n    rate_of_nancy = remaining_work / 20\n\n    # Now, we solve for Lee's rate using the equation: Rate of Lee + Rate of Nancy = total_rate\n    rate_of_lee = total_rate - rate_of_nancy\n\n    # Time taken by Nancy to finish the job by herself = Total work / Rate of Nancy\n    time_taken_by_nancy = 60 / rate_of_nancy\n    \n    return time_taken_by_nancy\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    final_count = 22\n    remaining_after_second_stop = final_count / (1 - 1/3)\n    initial_count = remaining_after_second_stop / (1 - 2/5)\n    return int(initial_count)\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_len = 250\n    used_string_len = 180\n    num_of_pieces = 10\n\n    remaining_string_len = total_string_len - used_string_len\n    length_of_each_piece = remaining_string_len / num_of_pieces\n\n    return length_of_each_piece\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    percentage = 45 / 100\n    number = 80\n    result = percentage * number\n    return result\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "def solution():\n    from math import comb\n    flavours = 7\n    combinations = comb(flavours, 2)\n    return combinations\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "def solution():\n    from math import gcd\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    handshakes = comb(num_people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, milk, dark = symbols('white milk dark')\n\n    ratio_white_milk_dark = Eq(white/milk, 3/7)\n    ratio_milk_dark = Eq(milk/dark, 7/5)\n    difference_dark_white = Eq(dark - white, 8)\n\n    solutions = solve((ratio_white_milk_dark, ratio_milk_dark, difference_dark_white), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = symbols('total_students')\n\n    equation = Eq(total_students / 4 + 3 + (total_students - total_students / 4 - 3) / 3 - 3 + 25, total_students)\n\n    total_students_number = solve(equation, total_students)\n\n    return total_students_number[0]\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    big_square_side = 6\n    small_square_side = 3\n    num_small_squares = (big_square_side // small_square_side) ** 2\n    return num_small_squares\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    centimeters = meters * centimeters_per_meter\n    return centimeters\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    money_spent = 5  # 5p spent\n    fraction_of_total = 1 / 4  # one-quarter spent\n    total_money = money_spent / fraction_of_total\n\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # Let's denote the number of red balls we need to add as x.\n    # The total number of balls after adding x red balls will be 5 (initial red balls) + 10 (green balls) + x (added red balls).\n    # Therefore, the probability of picking a green ball after adding x red balls will be 10 / (5 + x + 10).\n    # According to the question, this probability should be equal to 1/3.\n    # Setting up the equation: 10 / (15 + x) = 1/3\n    # Solving for x we get: x = 30 - 15 => x = 15\n    # So, we need to add 15 red balls.\n    return 15\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    last_digit_32 = pow(32, 33, 10)\n    last_digit_22 = pow(22, 29, 10)\n    ans = (last_digit_32 - last_digit_22) % 10\n    return ans\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    peter_initial = symbols('peter_initial')\n    \n    sam_initial = peter_initial + 40\n    \n    sam_to_peter = 0.20 * sam_initial\n    peter_to_sam = 0.25 * (peter_initial + sam_to_peter)\n    \n    sam_final = sam_initial - sam_to_peter + peter_to_sam\n    peter_final = peter_initial + sam_to_peter - peter_to_sam\n    \n    equation = Eq(sam_final - peter_final, 96)\n    \n    result = solve(equation, peter_initial)\n    \n    return result[0]\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    def count_6s(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('6')\n        return count\n\n    page = 1\n    while True:\n        if count_6s(page) == 18:\n            return page\n        page += 1\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    num_fruits = 2\n    num_vegetables = 3\n\n    ans = num_fruits * num_vegetables\n    return ans\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Ratio formula: a/b = c/d => a = (b * c) / d\n    missing_number = (81 * 4) / 9\n    return missing_number\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 != dice2 and dice2 != dice3 and dice1 != dice3:\n                    if dice1 + dice2 + dice3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    height = 40\n    jump_up = 5\n    slide_down = 3\n    effective_jump = (2 * jump_up) - slide_down\n    jumps_needed = 0\n    current_height = 0\n    \n    while current_height < height:\n        jumps_needed += 1\n        current_height += jump_up\n        \n        if current_height >= height:\n            break\n        \n        if jumps_needed % 2 == 0:\n            current_height -= slide_down\n            \n    return jumps_needed\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum((n**3) / (n * (n + 1) * (n + 2)) for n in range(2, 2013))\n    ans += 1 / 4026\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for i in range(1, 100):\n        if i % 16 == 0 and (i + 1) % 5 == 0 and (i**0.5).is_integer():\n            return i\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    first_term = 15\n    common_difference = 21 - 15  # This is calculated from the second term minus the first term\n\n    next_term = 39 + common_difference  # This is the last term provided plus the common difference\n\n    return next_term\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    # Let x be the number of correct answers.\n    # Then 80 - x is the number of wrong/unanswered questions.\n    # Each correct answer gives 4 marks and each wrong answer deducts 2 marks.\n    # 4 * x - 2 * (80 - x) = 152\n    # Solving for x gives us the number of correct answers.\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * x - 2 * (80 - x), 152)\n    correct_answers = solve(equation, x)\n    \n    return correct_answers[0]\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # We need to divide 16 sausages among 24 people,\n    # Each person should get an equal share, so each person gets 16/24 of a sausage.\n    # We can reduce 16/24 to its simplest form by dividing both numbers by their gcd (8).\n    # 16/24 reduces to 2/3. This means each person gets two-thirds of a sausage.\n    # Thus, each sausage must be cut into 3 pieces to be able to give each person two pieces.\n    # If we have 16 sausages, we can make 15 cuts, and we'll have 48 pieces (16 * 3).\n    # Each person gets 2 pieces; thus, we can serve all 24 people with 15 cuts.\n    \n    return 16 - (16 // 3)\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"RAINBOW\")\n    total_vowels = len(\"AI\") # Number of vowels in RAINBOW\n    total_consonants = total_letters - total_vowels # Number of consonants\n    \n    # Total permutations of the letters\n    total_permutations = factorial(total_letters)\n    \n    # Permutations when vowels are together (treated as one 'item')\n    vowels_together = factorial(total_vowels) * factorial(total_consonants + 1)\n    \n    # Subtracting permutations where vowels are together from total permutations\n    num_ways = total_permutations - vowels_together\n    \n    return num_ways\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # create symbols for Wendy's and Vivien's current ages\n    wendy, vivien = symbols('wendy vivien')\n    \n    # equation representing that Wendy is currently twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # equation representing that Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # solve the system of equations for Wendy's and Vivien's current ages\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years' time.\n    wendy_in_5_years = solutions[wendy] + 5\n    \n    return wendy_in_5_years\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n    \n    # The differences between the numbers\n    diff1 = 51 - 39\n    diff2 = 147 - 51\n    diff3 = 147 - 39\n    \n    # The greatest common divisor will be the integer we're looking for\n    ans = gcd(gcd(diff1, diff2), diff3)\n    \n    return ans\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of water in container A at first\n    # Then x - 350 is the amount of water in container B at first\n    x = symbols('x')\n\n    # After spilling 500 mL, container A has (x - 500) mL of water\n    # At this point, container B has twice as much water as container A\n    equation = Eq(x - 350, 2 * (x - 500))\n\n    # Solve the equation\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week = 2140\n    second_week = first_week - 320\n    third_week = second_week - 210\n\n    total_tickets = first_week + second_week + third_week\n\n    return total_tickets\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    total_digits = 0\n\n    # from 1 to 9, there are 9 * 1 digits\n    total_digits += 9 * 1\n    # from 10 to 99, there are 90 * 2 digits\n    total_digits += 90 * 2\n    # from 100 to 325, there are 226 * 3 digits (since 325 - 99 = 226)\n    total_digits += (325 - 99) * 3\n\n    return total_digits\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # (Lovelle + 5) members speak with Lovelle, 12 members do not.\n    # Each of the (Lovelle + 5) members (including Lovelle) says 3 sentences to each of the others.\n    # Thus, the number of interactions within (Lovelle + 5) members is 3 times the number of pairs of members.\n    # Since Lovelle does not speak to the 12 other members, they are not included in this interaction.\n\n    # Let's denote the number of team members as x.\n    # According to the problem: x = Lovelle + 5 + 12\n\n    # The total number of interaction sentences within the (Lovelle + 5) group is:\n    # 3 * (Lovelle + 5) * 5\n\n    # This also equals the sum of sentences Lovelle said plus the sentences the other 5 said to each other (excluding Lovelle):\n    # 3 * 5 + 3 * 5 * 4\n\n    # Both expressions for the number of sentences should be equal:\n    # 3 * (Lovelle + 5) * 5 = 3 * 5 + 3 * 5 * 4\n    # Simplifying the equation:\n    Lovelle_plus_5 = 3 * 5 + 3 * 5 * 4\n    Lovelle_plus_5 /= 3 * 5\n\n    # Now, calculate the total number of team members.\n    x = Lovelle_plus_5 + 12\n\n    return x\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_permutations = factorial(9) // (factorial(1)*factorial(3)*factorial(3)*factorial(2))\n    bad_permutations = 0\n    \n    # Calculate permutations where the Ts are together\n    # Consider TT as a single letter in permutations\n    total_permutations_with_TT_together = factorial(8) // (factorial(1)*factorial(3)*factorial(3)*factorial(1))\n    \n    # Since we have 2 Ts, we need to multiply by the ways to arrange the 2 Ts\n    bad_permutations += total_permutations_with_TT_together * factorial(2)\n    \n    ans = total_permutations - bad_permutations\n    return ans\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n    \n    return hours_needed\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    return round(418, -1)\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah_before, mark = symbols('sarah_before mark')\n\n    equation1 = Eq(sarah_before, mark + 20)\n    equation2 = Eq(sarah_before + 16, 3 * mark)\n\n    solutions = solve((equation1, equation2), (sarah_before, mark))\n\n    return solutions[sarah_before]\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    ans = (2018 - 20 + 18) // 8\n    return ans\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    ans = 2.98 * 23\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    # Let x be the smallest number of fruit gums there could have been in the packet\n    # After eating two, the number that's left is x - 2\n    # He shared one third of the remaining, which is (x - 2) / 3\n    # The number left after sharing is x - 2 - (x - 2) / 3\n    # This remainder must be divisible by 4 as he ate an equal amount in the next four lessons, let's call this number to eat \"k\"\n    # So we are looking for the smallest x such that x - 2 - (x - 2) / 3 is divisible by 4\n    \n    x = 3 # Start with 3 because x-2 cannot be negative or zero\n    while True:\n        if (x - 2 - (x - 2) / 3) % 4 == 0:\n            break\n        x += 1\n\n    return x\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # The worst case scenario is that the explorer tries each key on each chest\n    # until the last key opens the last chest. So for the first chest, the\n    # explorer tries all 9 keys, for the second chest 8 keys (since one key\n    # has already been used to open the first chest), for the third chest 7 keys,\n    # and for the fourth chest he must try 6 keys (since 3 keys have already been used).\n    # Add the number of attempts for each chest to find the total maximum attempts.\n\n    attempts = 9 + 8 + 7 + 6\n\n    return attempts\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 26, 2))\n    return ans\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Analyzing the pattern, we can see an increase followed by a decrease.\n    # From 2945 to 3445, there's an increase of 500\n    # From 3445 to 3245, there's a decrease of 200\n    # If we continue this pattern, the next change should be an increase of 500.\n    \n    last_number_in_sequence = 3745\n    increase_amount = 500\n    \n    missing_number = last_number_in_sequence + increase_amount\n    \n    return missing_number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    numerator = 15\n    denominator = 1 / 7\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    total_mushrooms = Eq(first_hour + second_hour, 40)\n    difference_mushrooms = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((total_mushrooms, difference_mushrooms), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.10\n    years = 6\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    women, men = symbols('women men')\n\n    equation1 = Eq(women, 4 * men) # There were 4 times as many women as men\n    equation2 = Eq(2 * women + 5 * men, 182) # Total mini cupcakes eaten\n\n    solutions = solve((equation1, equation2), (women, men))\n\n    return solutions[women]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    num_coins = 11\n    coin_diameter = 1.85\n    total_length = (num_coins - 1) * coin_diameter + coin_diameter\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    n = 14\n    a1 = 5\n    d = 8 - 5\n    an = a1 + (n - 1) * d\n    sum_seq = (n * (a1 + an)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number_to_round = 5345\n    rounded_number = round(number_to_round / 100) * 100\n    return rounded_number\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = participants * (participants - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "def solution():\n    from math import factorial\n\n    # For circular arrangements, (n - 1)! is the formula where n is the number of people\n    num_people = 8\n    different_orders = factorial(num_people - 1)\n\n    return different_orders\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    # Set up the proportion to solve for the missing value (represented by â¡)\n    # We know that (3/12) = (â¡/20). To find the value of â¡, we can cross-multiply.\n    # This gives us: 3 * 20 = 12 * â¡\n\n    # Now, we solve for â¡: â¡ = (3 * 20) / 12\n    box = (3 * 20) / 12\n\n    return box\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temperature = -5\n    night_temperature = 10\n    temperature_difference = night_temperature - morning_temperature\n    return temperature_difference\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    difference_in_age_2_years_ago = (mother_age_now - 2) - (sandra_age_now - 2)\n    return difference_in_age_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    initial_ants = symbols('initial_ants')\n\n    after_sweeping = initial_ants - (3/4) * initial_ants\n    after_running_out = after_sweeping - (2/5) * after_sweeping\n    final_ants = after_running_out + 185\n\n    equation = Eq(final_ants, 2 * initial_ants)\n\n    solution = solve(equation, initial_ants)\n\n    return solution[0]\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # The last digit of powers of 2 repeats every 4th power: 2, 4, 8, 6, 2, 4, 8, 6, ...\n    # Hence the last digit of 2^2017 will be the same as that of 2^(2017 mod 4)\n    # For 2^2017, (2017 mod 4) is 1, so the last digit is that of 2^1 which is 2.\n    last_digit_2 = 2\n\n    # The last digit of powers of 3 repeats every 4th power: 3, 9, 7, 1, 3, 9, 7, 1, ...\n    # Hence the last digit of 3^2017 will be the same as that of 3^(2017 mod 4)\n    # For 3^2017, (2017 mod 4) is 1, so the last digit is that of 3^1 which is 3.\n    last_digit_3 = 3\n\n    # Last digit of the product would be the product of the last digits of the individual numbers.\n    last_digit_product = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit_product\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    cost_per_book = 13\n    books_first_day = 89\n    books_second_day = 11\n\n    total_cost = (books_first_day + books_second_day) * cost_per_book\n\n    return total_cost\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    next_term = 8**2\n    return next_term\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n    total_pens = pens_per_friend * number_of_friends\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def get_next_number(n):\n        return (n * 2 + 4) % 100  # Repeats for every 2 digits after 100\n\n    number = 1\n    for _ in range(1, 2022):\n        number = get_next_number(number)\n    \n    return number\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    from math import lcm\n\n    red_flash_rate = 4\n    green_flash_rate = 6\n\n    # Find the least common multiple of the two flash rates\n    flash_together_rate = lcm(red_flash_rate, green_flash_rate)\n\n    # Calculate the total time in minutes\n    total_time = 60\n\n    # Calculate how many times they flash together in one hour\n    flashes_together = total_time // (60 // flash_together_rate)\n\n    # Add 1 for the first time they flash together\n    ans = flashes_together + 1\n\n    return ans\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    first_term = symbols('a')  # First term of the arithmetic progression (a)\n    common_difference = symbols('d')  # Common difference (d)\n\n    # The sum of the first four terms of an arithmetic progression is:\n    # S_4 = a + (a + d) + (a + 2d) + (a + 3d)\n    sum_first_four = 4 * first_term + 6 * common_difference\n\n    # The sum of the last four terms of an arithmetic progression is:\n    # S_8 = (a + 7d) + (a + 6d) + (a + 5d) + (a + 4d)\n    sum_last_four = 4 * first_term + 22 * common_difference\n\n    # The sum of the last four terms is 32 more than the sum of the first four\n    equation = Eq(sum_last_four, sum_first_four + 32)\n\n    # Solve the equation for the common difference (d)\n    solution = solve(equation, common_difference)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 42))  # since 3a + 7b = 41, both a and b must be less than 41\n    for a in primes:\n        for b in primes:\n            if 3 * a + 7 * b == 41:\n                return a + b\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    return (4.5 + 10.3) / 2\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n\n    solutions = solve(equation, n)\n\n    return solutions[0]  # Assuming we want the positive solution\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_ml_per_bottle = (120 / (1 - (3/5)))\n    water_ml_per_bottle = total_ml_per_bottle * (3/5)\n    water_needed_for_6_bottles = water_ml_per_bottle * 6\n    return water_needed_for_6_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    n = 8.2 * 1000  # Convert kilograms to grams\n    return int(n)\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n    cost_price = selling_price / (1 + profit_percent / 100)\n    \n    new_profit = 5000\n    new_selling_price = cost_price + new_profit\n    new_profit_percent = (new_profit / cost_price) * 100\n    \n    return new_profit_percent\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"EARTH\")\n    ans = factorial(total_letters)\n    return ans\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    # Since we are looking for the product of UNIQUE digits and EACH maps to different digits\n    # T, H, I, S, E, A, C, L, U, N each represents different digits 0-9. We need to check all permutations.\n    for perm in permutations(range(10)):\n        T, H, I, S, E, A, C, L, U, N = perm\n        if T == 0 or E == 0:  # leading digit of a number cannot be zero\n            continue\n        each = (E * 1000) + (A * 100) + (C * 10) + H\n        is = (I * 10) + S\n        calculation = each * is\n        # Check if resulting `calculation` string contains all unique digits\n        if len(set(str(calculation))) == 10:\n            return calculation\n    return None\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "def solution():\n    from math import factorial\n\n    def permutations_count(n, counts):\n        perm = factorial(n)\n        for count in counts:\n            perm //= factorial(count)\n        return perm\n\n    total_balls = 7  # two bells, two stars, two red balls, and one green ball\n    identical_counts = [2, 2, 2, 1]  # identical items counts\n\n    return permutations_count(total_balls, identical_counts)\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Fastest and second fastest go together first, taking the time of the fastest.\n    # Fastest comes back.\n    # Slowest two go together, taking the time of the slowest.\n    # Second fastest comes back.\n    # Fastest and second fastest go again.\n    # This minimizes the time wasted on slow crossings and fast returns.\n    \n    fastest = 1\n    second_fastest = 2\n    second_slowest = 5\n    slowest = 10\n    \n    total_time = second_fastest + fastest + slowest + second_fastest\n    \n    return total_time\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150\n    friend_speed = 200\n    time_walked = 10\n\n    # Simon and his friend's distance from school after walking away for 10 minutes\n    simon_distance = simon_speed * time_walked\n    friend_distance = friend_speed * time_walked\n\n    # Simon runs back to school at twice his original speed\n    simon_run_speed = simon_speed * 2\n    time_for_simon_to_return = simon_distance / simon_run_speed\n\n    # Friend's additional distance while Simon is running back\n    friend_additional_distance = friend_speed * time_for_simon_to_return\n\n    # Total distance between Simon and his friend when Simon reaches school\n    distance_between = friend_distance + friend_additional_distance\n\n    return distance_between\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    import math\n\n    # Define a recursive function to calculate derangements (subfactorials)\n    def derangement(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    # Calculate derangements for 7 friends\n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            num = int(f\"2{i}{j}335\")\n            if num % 99 == 0:\n                return num\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 100\n    while n % 7 != 0:\n        n -= 1\n    return n - 7\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # Initial volume in liters\n    container_size = 0.25 * initial_volume  # Size of the other container in liters\n    cup_volume_ml = 150  # Volume of one cup in milliliters\n    num_cups = 14  # Number of cups\n    cups_volume_l = (cup_volume_ml * num_cups) / 1000  # Total volume of cups in liters\n\n    # Calculate the remaining water in the dispenser after filling the container and cups\n    remaining_volume = initial_volume - container_size - cups_volume_l  # in liters\n\n    return remaining_volume\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    return 5 / (1/4)\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed = 3\n    ginny_speed = 4\n    harry_time = 24  # minutes\n\n    ginny_time = (harry_time / harry_speed) * ginny_speed\n    return ginny_time\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages_per_day, total_pages = symbols('pages_per_day total_pages')\n\n    eq1 = Eq(total_pages, pages_per_day * 8)\n    eq2 = Eq(total_pages, (pages_per_day + 2) * (8 - 2))\n\n    solutions = solve((eq1, eq2), (pages_per_day, total_pages))\n\n    return solutions[total_pages]\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    return 828 // 9\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Calculate the rate at which Pip bakes bread: loaves per minute\n    pip_rate = 5 / 20  # loaves of bread per minute\n\n    # Calculate the rate at which Bud bakes bread: loaves per minute\n    bud_rate = 3 / 15  # loaves of bread per minute\n\n    # Calculate the number of loaves baked by Pip in 40 minutes\n    pip_loaves = pip_rate * 40\n\n    # Calculate the number of loaves baked by Bud in 40 minutes\n    bud_loaves = bud_rate * 40\n\n    # Calculate the total loaves baked by Pip and Bud in 40 minutes\n    total_loaves = pip_loaves + bud_loaves\n\n    return total_loaves\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # The house value increase by 10% and equals 11,000 after one year\n    increased_value = 11000\n\n    # Therefore, 10% increase is represented by the value of 11,000\n    # Let the original price be x. Then 0.1 * x = 11,000.\n    original_price = increased_value / 0.1\n\n    # After the second year, the house loses 10% of its value\n    # So the decreased value is 0.9 * Original price\n    decreased_value = original_price * 0.9\n\n    # The profit or loss is calculated as the final value - original value\n    profit_or_loss = decreased_value - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def count_digit_in_position(digit, position, total_length):\n    # Digit can't appear more than once in the same position, e.g., 55 as tens place, \n    # so we treat 0-4 and 6-9 at the same level\n    digit = int(digit)\n    assert 0 <= digit <= 9\n    assert 0 <= position < total_length\n\n    power_of_10 = 10 ** position\n    next_power_of_10 = power_of_10 * 10\n    right = 1 + total_length - position\n    \n    count = (200 // next_power_of_10) * power_of_10  # Full cycles\n\n    # Partial cycle\n    partial = 200 % next_power_of_10 \n    partial -= digit * power_of_10\n    if partial < 0:\n      partial = 0\n    else:\n      partial = min(power_of_10, partial + 1)\n\n    return count + partial\n\n\ndef solution():\n    total_count = 0\n    total_length = len(str(200))\n\n    # Count for each place value (ones, tens, hundreds)\n    for position in range(total_length):\n        total_count += count_digit_in_position('5', position, total_length)\n    \n    return total_count\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # Yohan may pick all the red and black socks first before getting a white pair.\n    # Therefore, he must pick all red and black socks and then one more pair which has to be white.\n    max_non_white_socks = 10 + 10  # red + black socks\n    return max_non_white_socks + 2  # at most, add two more to get a pair of white\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    ans = (12 * 'a' / 4) + (2 * 'a' * 5)\n    return ans\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expression = (6*d) + (5*d) - d\n    simplified_expression = expression.simplify()\n    ans = simplified_expression\n    return ans\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    remaining_cookies = 33\n    remaining_fraction = 1 - (3/8) - (1/6)\n\n    original_cookies = remaining_cookies / remaining_fraction\n\n    return int(original_cookies)\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    numbers = []\n    for i in range(1, 10):\n        numbers.extend([i] * (i + 2))\n    \n    total_numbers = sum([i + 2 for i in range(1, 10)])\n    median_index = (total_numbers + 1) // 2\n    ans = numbers[median_index - 1]\n    \n    return ans\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    # Let the number Jemma thinks be x.\n\n    # According to the problem statement,\n    # (x + 3) * 5 = 35\n    # We solve for x by performing the inverse operations.\n    \n    # Divide both sides by 5\n    result_after_adding = 35 / 5\n    \n    # Now subtract 3 from the result\n    jemmas_number = result_after_adding - 3\n    \n    return jemmas_number\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    total_litres = 120\n    bucket_capacity = 8\n\n    num_buckets_filled = total_litres // bucket_capacity\n\n    return num_buckets_filled\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 5)  # May 5th, 2023 is a Friday\n    end_date = datetime(2023, 6, 7)  # June 7th, 2023\n    current_date = start_date\n    sundays_count = 0\n    \n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sundays_count += 1\n        current_date += timedelta(days=1)\n    \n    return sundays_count\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # kg\n    num_packets = 25\n    flour_per_packet = total_flour / num_packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for K in range(10):\n        number = int(f\"5{K}27{K}\")\n        if number % 3 == 0 and number % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, brownies = symbols('cookies brownies')\n    \n    # original ratio 4:3\n    equation1 = Eq(cookies/brownies, 4/3)\n    # after giving away 6 brownies, the ratio becomes 12:7\n    equation2 = Eq((cookies)/(brownies - 6), 12/7)\n\n    solutions = solve((equation1, equation2), (cookies, brownies))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the original number of red and white marbles\n    r, w = symbols('r w')\n\n    # The original ratio of red to white marbles is 3:2\n    original_ratio = Eq(r / w, 3 / 2)\n\n    # Pip puts p red balls and ratio becomes 5:3\n    p = symbols('p')\n    after_pip_ratio = Eq((r + p) / w, 5 / 3)\n\n    # Bud puts b white balls and ratio becomes 5:4, also b is 100 more than p\n    b = symbols('b')\n    after_bud_ratio = Eq((r + p) / (w + b), 5 / 4)\n    balls_bud_pip_difference = Eq(b - p, 100)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, after_pip_ratio, after_bud_ratio, balls_bud_pip_difference), (r, w, p, b))\n\n    return solutions[w]\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_cost_per_ticket = 93 / 6\n    claire_tickets = 124 / adam_cost_per_ticket\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    term_index = 10\n    last_term = 31\n    common_difference = 3\n    \n    first_term = last_term - (term_index - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Calculate the amount of work done by 1 company in 1 day\n    work_per_company_per_day = 900 / (4 * 5)\n    # Calculate the total amount of work required for the new expressway\n    total_work_needed = 5400\n    # Calculate the amount of work done by 6 companies in 1 day\n    work_per_day_by_6_companies = work_per_company_per_day * 6\n    # Calculate the number of days required by 6 companies to build the new expressway\n    days_needed = total_work_needed / work_per_day_by_6_companies\n    return days_needed\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # Initial purchase at $10\n    buy_1 = 10\n    \n    # Sell at $20\n    sell_1 = 20\n    \n    # Buy back at $30\n    buy_2 = 30\n    \n    # Sell again at $40\n    sell_2 = 40\n    \n    # Calculate total profit\n    total_profit = (sell_1 - buy_1) + (sell_2 - buy_2)\n    \n    return total_profit\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "from itertools import combinations\n\ndef solution():\n    all_numbers = set(range(1, 9))\n    max_card_player_two = 0\n\n    for combo in combinations(all_numbers, 4):\n        if sum(combo) == 23:\n            player_two_cards = all_numbers - set(combo)\n            max_card_player_two = max(max_card_player_two, max(player_two_cards))\n\n    return max_card_player_two\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_pairs = 9\n    shoes_per_pair = 2\n    total_shoes = total_pairs * shoes_per_pair\n    time_per_shoe = 2\n    cobblers = 2\n    \n    total_time_per_shoe = total_shoes * time_per_shoe\n    shortest_time = total_time_per_shoe / cobblers\n    \n    return shortest_time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    total = 0\n    for i in range(1, 21):\n        total += i**2 * (21 - i)\n    return total\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "import math\n\ndef solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    packets_needed = math.ceil(total_cookies / cookies_per_packet)\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    num_players = 6\n    handshakes = comb(num_players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    total_dumplings = luna_dumplings + lucy_dumplings\n    dumplings_each = total_dumplings // 2\n    dumplings_to_give = luna_dumplings - dumplings_each\n    \n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds = 24\n    full_number = (24 * 3) / 2\n    three_quarters = (full_number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    total_score = 168\n    \n    # Assume all attempted questions were correct initially\n    correct_answers = attempted_questions  \n    extra_marks = correct_answers * 4 - total_score\n\n    # Each wrong answer causes a loss of 5 marks (4 not gained + 1 taken off)\n    wrong_answers = extra_marks // 5\n    \n    # The actual number of correct answers is less by the number of wrong answers\n    correct_answers -= wrong_answers\n    \n    return correct_answers\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    ans = sum(range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of the pack sizes\n    least_common_multiple = lcm(6, 8, 9, 15)\n\n    # Find the least number of markers that Mr Manson had to purchase\n    # which is at least 1000 markers in total.\n    min_markers = least_common_multiple\n    while min_markers < 1000:\n        min_markers += least_common_multiple\n\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('CHALLENGE')\n    vowels = 'AEE'\n    consonants = 'CHLLNG'\n    \n    # Treat the three vowels as a single entity for the moment + the consonants\n    entities = len(consonants) + 1\n\n    # Arrange these entities\n    entity_arrangements = factorial(entities)\n\n    # Now arrange the vowels among themselves\n    vowel_arrangements = factorial(len(vowels)) // factorial(vowels.count('E')) # because 'E' repeats\n\n    # The total arrangements are the product of the two possibilities\n    arrangements = entity_arrangements * vowel_arrangements\n    \n    return arrangements\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each digit\n    B, C, D, E = symbols('B C D E', integer=True)\n\n    # Define the range for each digit\n    digits = range(10)\n\n    # Set up the equations based on the given problem\n    equation1 = Eq((10**3 * B + 10**2 * C + 10 * B + D) +\n                   (10**3 * C + 10**2 * D + 10 * B + C), (10**3 * B + 10**2 * D + 10 * E + C))\n\n    # The list to hold the solutions\n    solutions = []\n\n    # Solve for each variable\n    for B_val in digits:\n        for C_val in digits:\n            for D_val in digits:\n                for E_val in digits:\n                    if B_val != C_val and B_val != D_val and B_val != E_val \\\n                       and C_val != D_val and C_val != E_val \\\n                       and D_val != E_val and B_val != 0:\n                        sol = solve((equation1.subs(B, B_val).subs(C, C_val).subs(D, D_val).subs(E, E_val)),\n                                    (B, C, D, E), dict=True)\n                        if sol:\n                            solutions.extend(sol)\n\n    # Get the unique solutions\n    unique_solutions = {tuple(sorted(sol.values())) for sol in solutions}\n    answers = [list(sol) for sol in unique_solutions]\n\n    # Calculate the value of 4-digit number BDEC\n    if len(answers) == 1:\n        B_val, C_val, D_val, E_val = answers[0]\n        ans = 10**3 * B_val + 10**2 * D_val + 10 * E_val + C_val\n        return ans\n    else:\n        return None\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_tailor = 2\n    number_of_tailors = 2\n    number_of_days = 9\n\n    total_dresses = dresses_per_day_per_tailor * number_of_tailors * number_of_days\n    \n    return total_dresses\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_value = 4 * 5 + 1 * 10 + 5 * 12\n    total_cakes = 4 + 1 + 5\n    average_price = total_value / total_cakes\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    per_person = total_cost / people\n    return per_person\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Average spending per month from January to March\n    jan_to_mar_avg = 450\n    jan_to_mar_total = jan_to_mar_avg * 3  # Total spending from January to March\n    \n    # Average spending per month from April to July\n    apr_to_jul_avg = 350\n    apr_to_jul_total = apr_to_jul_avg * 4  # Total spending from April to July\n    \n    # Total spending from August to October\n    aug_to_oct_total = 1250\n    \n    # Average spending per month from November to December\n    nov_to_dec_avg = 400\n    nov_to_dec_total = nov_to_dec_avg * 2  # Total spending from November to December\n    \n    # Total spending for the whole year\n    total_spending = jan_to_mar_total + apr_to_jul_total + aug_to_oct_total + nov_to_dec_total\n    \n    # Average spending per month for the whole year\n    average_per_month = total_spending / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    ans = 143 + 22 + 157\n    return ans\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    # Since the divisor is equal to the quotient and the remainder is 7,\n    # let the divisor (and also the quotient) be x\n    # The dividend will be x*x (divisor times quotient) plus the remainder\n    # To find the least dividend, we need the smallest x such that\n    # x*x + remainder is true, knowing that x must be greater than the remainder.\n    x = remainder + 1  # Starting from one more than the remainder\n    dividend = x * x + remainder  # Calculate the corresponding dividend\n    return dividend\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve, divisors\n\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    eq_cars = Eq(cars, 4/3 * bikes)\n    eq_bikes = Eq(bikes, lorries + lorries / 4)\n    eq_vehicle_sum = Eq(cars + bikes + lorries, 2 * symbols('k', integer=True))\n\n    solutions = solve((eq_cars, eq_bikes), (cars, bikes))\n    \n    for num in divisors(100):\n        total_vehicles = 2 * num\n        lorries_guess = total_vehicles / (1 + 4/3 + 5/4)\n        cars_guess = 4/3 * lorries_guess\n        bikes_guess = lorries_guess + lorries_guess / 4\n        if all([lorries_guess.is_integer, cars_guess.is_integer, bikes_guess.is_integer]):\n            return {\"cars\": int(cars_guess), \"bikes\": int(bikes_guess), \"lorries\": int(lorries_guess)}\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    original_price = 50000\n    depreciation_rate = 0.15\n    years = 2\n    value_after_depreciation = original_price * ((1 - depreciation_rate) ** years)\n    return value_after_depreciation\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    number_of_rows = 12\n    difference = 2  # difference between the number of seats in each row\n\n    # Formula to find the nth term of an arithmetic progression: a_n = a_1 + (n - 1)*d\n    seats_in_twelfth_row = first_term + (number_of_rows - 1) * difference\n\n    return seats_in_twelfth_row\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance_per_minute = 25\n    time_with_one_entrance = 16\n    \n    # Calculate total visitors in 16 minutes\n    total_visitors = visitors_per_minute * time_with_one_entrance\n    \n    # Calculate the check-in rate with two entrances\n    check_in_rate_with_two_entrances = check_in_per_entrance_per_minute * 2\n    \n    # Calculate the time taken for two entrances to clear the line\n    time_with_two_entrances = total_visitors / check_in_rate_with_two_entrances\n    \n    return time_with_two_entrances\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    p = 1\n    while True:\n        if (245 * p) ** (1/3) % 1 == 0:\n            break\n        p += 1\n    return p\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n    days = total_pages / pages_per_day\n    return int(days)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    return 6**2 - 4**2\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine = 142\n    elvis = shermaine + 157\n    claudia = elvis + 202\n    total_rulers = shermaine + elvis + claudia\n    return total_rulers\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000\n    digits_sum = sum(int(digit) for digit in decimal_part)\n    return digits_sum\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    day = 0\n    height = 0\n    while height < 16:\n        day += 1\n        height += 5\n        if height >= 16:\n            break\n        height -= 3\n    return day\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    spent_on_book = initial_amount * 0.10\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_goals = sum(goals) / len(goals)\n    return mean_goals\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    equation1 = Eq(3 * lemons, 5 * oranges)\n    equation2 = Eq(2 * (oranges - 48), lemons)\n\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n    original_number = (final_number - added_number) / 2\n    return original_number\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # Since each student can choose from 1 to 3 types of fruits,\n    # and there are 3 kinds of fruits, we can use the pigeonhole principle.\n    # Possible choices can be represented as {A}, {B}, {C}, {A, B}, {A, C},\n    # {B, C}, and {A, B, C}. There are 7 different combinations a student can choose.\n    # By the pigeonhole principle, to guarantee at least two students\n    # choose the same combination, we need one more student than the number\n    # of combinations, which is 7 + 1.\n\n    num_students = 7 + 1\n\n    return num_students\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2 \n    sides = 3  \n    drinks = 5  \n\n    combos = burgers * sides * drinks \n\n    return combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # 10 pence spent, which is one-quarter\n    initial_amount = spent * 4  # Multiply by 4 to get the full amount\n    return initial_amount\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    return 818 - 271 - 18 + 64 - 29 + 36\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    # Number of students in classes A, B, and C\n    A = 45\n    B = 75\n    C = 210\n\n    # Calculate the greatest common divisor (GCD) of A, B, and C\n    gcd_AB = gcd(A, B)\n    gcd_ABC = gcd(gcd_AB, C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    ducks = 3\n    parrots = 2\n    rabbit = 1\n    \n    # Ducks have 2 legs, parrots have 2 legs, rabbits have 4 legs, and cats have 4 legs.\n    # Let's assume the number of cats Jessica has is c.\n    # Total legs from ducks, parrots, and rabbit:\n    total_legs_other_animals = ducks * 2 + parrots * 2 + rabbit * 4\n    \n    # Total legs including cats:\n    total_legs = 32\n    \n    # Since each cat has 4 legs, the number of cat legs is 4 times the number of cats:\n    # 4 * c + total_legs_other_animals = total_legs\n    cat_legs = total_legs - total_legs_other_animals\n    \n    # Calculate the number of cats:\n    c = cat_legs // 4\n    \n    return c\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n    num_teams = 11\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy_age, father_age, years_ago = symbols('judy_age father_age years_ago')\n\n    # Judy's father is 33 years older than her\n    equation1 = Eq(father_age, judy_age + 33)\n\n    # The sum of their ages is 63 years old\n    equation2 = Eq(judy_age + father_age, 63)\n\n    # Solve the current ages\n    current_ages = solve((equation1, equation2), (judy_age, father_age))\n\n    # Years ago her father's age was four times her age\n    equation3 = Eq(current_ages[father_age] - years_ago, 4 * (current_ages[judy_age] - years_ago))\n\n    # Solve for the years ago\n    years_ago_solution = solve(equation3, years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n\n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the current age of the older brother and y be the current age of the younger brother\n    x, y = symbols('x y')\n\n    # When the older brother was y years old, the younger brother was 12 years old\n    equation1 = Eq(x - y, y - 12)\n\n    # When the younger brother becomes x years old, the older brother will be 27 years old\n    equation2 = Eq(y - x, 27 - x)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    from math import lcm\n\n    # multiples of 6, 8, 9, or 15\n    multiples = [6, 8, 9, 15]\n\n    # least common multiple of the given numbers\n    least_common_multiple = lcm(*multiples)\n\n    # find the minimum number of markers greater than or equal to 1000\n    markers = least_common_multiple\n    while markers < 1000:\n        markers += least_common_multiple\n\n    return markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rooms = symbols('rooms')\n\n    # If there are 4 people in each room, 40 students don't have dormitories,\n    # which means we're 40 short from filling up rooms with 4 students each.\n    # Therefore, total_students = 4 * rooms + 40\n\n    # If there are 6 people in each room, 24 beds will be vacated,\n    # which means we have 24 extra spaces after placing all students.\n    # Therefore, total_students = 6 * rooms - 24\n\n    # Set equations equal to total_students and solve for rooms\n    equation1 = Eq(4 * rooms + 40)\n    equation2 = Eq(6 * rooms - 24)\n\n    # Since both equations equal total_students, we can set them equal to each other\n    solutions = solve((equation1 - equation2), (rooms))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_difference = 15 - 10\n    term_difference = fifteenth_term - tenth_term\n    \n    common_difference = term_difference / position_difference\n    \n    # Calculate the 102nd term using the formula of an arithmetic sequence: \n    # a_n = a_1 + (n - 1) * d\n    # where a_n is the nth term, a_1 is the first term, n is the term number, and d is the common difference.\n    # Since we already have the 10th term, we use it as a base to calculate the 102nd term.\n    nth_term = tenth_term + (102 - 10) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age = 9\n    john_age = 5\n    years_until_jane_15 = 15 - jane_age\n    john_age_when_jane_15 = john_age + years_until_jane_15\n\n    return john_age_when_jane_15\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for number in range(10, 21):\n        if number % 4 == 0 and 36 % number == 0:\n            return number\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    total_eaten = 18\n    fraction_eaten = 3 / 5\n    total_sweets = total_eaten / fraction_eaten\n    sweets_left = total_sweets - total_eaten\n\n    return int(sweets_left)\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbol for the unknown value\n    x = symbols('x')\n    \n    # Setting up the equation (13-x)^2 = 25\n    equation = Eq((13-x)**2, 25)\n    \n    # Solving the equation\n    solutions = solve(equation, x)\n    \n    # We expect two solutions because it is a quadratic equation, but we only need one \n    # as we are dealing only with real and positive whole numbers (and both will be positive)\n    return max(solutions)\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    return ((7 + 3) * 11) - (7 + (3 * 11))\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    cost_price, selling_price = symbols('cost_price selling_price')\n    \n    # Equation for selling price being marked up 20% of cost price\n    equation1 = Eq(selling_price, cost_price * 1.20)\n    # Equation for loss being $40 when sold at 80% of selling price\n    equation2 = Eq(cost_price - 0.80 * selling_price, -40)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_price, selling_price))\n    \n    return solutions[cost_price]\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    only_apples = 20 - 10\n    only_strawberries = 30 - 10\n    both = 10\n    neither = 5\n\n    total_students = only_apples + only_strawberries + both + neither\n\n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanrui, yaokuan = symbols('xuanrui yaokuan')\n\n    equation1 = Eq(xuanrui + yaokuan, 708)\n    equation2 = Eq(xuanrui - 532, yaokuan - 3/7 * yaokuan)\n\n    solutions = solve((equation1, equation2), (xuanrui, yaokuan))\n\n    return solutions[xuanrui]\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Total time to fill the tank when both taps are open\n    both_taps_time = 6\n    \n    # Time for tap X to fill the tank alone\n    tap_x_time = 10\n    \n    # Rate at which tap X fills the tank\n    rate_x = 1 / tap_x_time\n    \n    # Rate at which both taps fill the tank\n    rate_both = 1 / both_taps_time\n    \n    # Using the inclusion-exclusion principle to find the rate of tap Y\n    # Rate of tap Y = Rate of both - Rate of tap X\n    rate_y = rate_both - rate_x\n    \n    # Time for tap Y to fill the tank alone is the reciprocal of rate_y\n    tap_y_time = 1 / rate_y\n\n    return tap_y_time\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_rate = 0.12\n    discount_amount = usual_price * discount_rate\n    final_price = usual_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    points_for_correct = 6\n    points_for_incorrect = -2\n    total_points = 44\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if points_for_correct * correct_answers + points_for_incorrect * incorrect_answers == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    # Calculate the factorial of numbers from 1 to 8\n    factorial_sum = sum([1, 2, 6, 24, 120, 720, 5040, 40320])\n    # Find the last two digits of the sum\n    last_two_digits = factorial_sum % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Calculate the total amount of sugar from Cup A and Cup B\n    sugar_A = 300 * 0.20\n    sugar_B = 300 * 0.30\n    \n    # Calculate the total volume of the mixture\n    total_volume = 300 + 300\n    \n    # Calculate the concentration of sugar in the mixture\n    mixture_sugar_concentration = (sugar_A + sugar_B) / total_volume\n    \n    return mixture_sugar_concentration\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 0.3 + 0.01 + 0.007\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    pounds_to_dollars = 2.50\n    dollars = 1000\n    pounds = dollars / pounds_to_dollars\n    return pounds\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Ahmad's and Ryan's marbles\n    Ahmad, Ryan = symbols('Ahmad Ryan')\n\n    # Given equations\n    eq1 = Eq(Ahmad + Ryan, 1442)      # Ahmad and Ryan have 1442 marbles altogether\n    eq2 = Eq(Ahmad, 6 * Ryan)         # Ahmad has 6 times as many marbles as Ryan\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (Ahmad, Ryan))\n\n    # Calculate how many marbles Ahmad must give to Ryan for equal amounts\n    Ahmad_marbles = solutions[Ahmad]\n    Ryan_marbles = solutions[Ryan]\n    marbles_to_give = (Ahmad_marbles - Ryan_marbles) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let the number of $2-notes be x and $10-notes be y\n    # We have two equations from the problem statement:\n    # x + y = 95 (total notes)\n    # x + 5y = 175 (after exchanging all $10-notes for $2-notes)\n    \n    # Setup the two equations\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    eq1 = Eq(x + y, 95)\n    eq2 = Eq(x + 5 * y, 175)\n    \n    # Solve the simultaneous equations\n    solutions = solve((eq1, eq2), (x, y))\n    \n    # Return the count of $2-notes at first\n    return solutions[x]\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    train_length = 540\n    head_length = 10\n    carriage_length = 27\n    space_between = 1\n\n    # Calculate the total length of carriages excluding the head\n    remaining_length = train_length - head_length\n\n    # Each carriage takes up its own length plus the space after it\n    effective_carriage_length = carriage_length + space_between\n\n    # Calculate the number of carriages without the head, add one space for the end.\n    number_of_carriages = (remaining_length + space_between) // effective_carriage_length\n\n    # The total number of carriages includes the head of the train\n    total_carriages = number_of_carriages + 1\n\n    return total_carriages\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    count_ones = 0\n    count_tens = 0\n    count_hundreds = 0\n    \n    # Count occurrences of 8 in the ones place\n    for i in range(1, 289):\n        if i % 10 == 8:\n            count_ones += 1\n    \n    # Count occurrences of 8 in the tens place\n    for i in range(1, 289):\n        if (i // 10) % 10 == 8:\n            count_tens += 1\n    \n    # Count occurrences of 8 in the hundreds place\n    for i in range(1, 289):\n        if (i // 100) % 10 == 8:\n            count_hundreds += 1\n    \n    # Sum up all occurrences of 8\n    total_count = count_ones + count_tens + count_hundreds\n    \n    return total_count\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    # pen costs 60Â¢ more than the pencil\n    equation1 = Eq(pen, pencil + 0.60)\n    # total cost of a pen and a pencil is $2.90\n    equation2 = Eq(pen + pencil, 2.90)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    for correct in range(51):\n        incorrect = 50 - correct\n        score = correct * 2 - incorrect * 1\n        if score == 82:\n            return correct\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y', integer=True)\n    equation = Eq(24*x - 25*y, 8)\n    solutions = solve(equation, x, y, dict=True)\n\n    # Find the solution with the smallest x\n    smallest_x = min(solutions, key=lambda sol: sol[x])[x]\n    return smallest_x\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Define the three given equations\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Use sympy to solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # Number of triangles equal to one diamond\n    num_triangles = solutions[diamond] / solutions[triangle]\n\n    return num_triangles\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    discounted_price = original_price - discount\n    increase = 0.15 * discounted_price\n    final_price = discounted_price + increase\n    return final_price\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    # Iterate over possible values of x and y\n    for x in range(1, 10): # x cannot be 0, as A is a two-digit number\n        for y in range(10): # y can be 0-9\n            A = 10*x + y # Calculate A using place value principles\n            B = 20*x + 2*y # Calculate B in a similar fashion\n            if B == 25 + 6*A: # Check if condition holds\n                return A\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = sum(1/i for i in range(2001, 2011))\n    S = 1 / S_inverse\n    return int(S)\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    return 521 - 173 - 127\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the cost per kg for each bag\n    cost_per_kg_bag1 = 5 / 2.5\n    cost_per_kg_bag2 = 7.70 / 4\n\n    # Determine which is better value by comparing the cost per kg\n    if cost_per_kg_bag1 < cost_per_kg_bag2:\n        ans = \"2.5kg bag\"\n    else:\n        ans = \"4kg bag\"\n    \n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n    total_cost = price_per_book * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    pages_monday = 280\n    pages_tuesday = pages_monday - 28\n    total_pages_read = pages_monday + pages_tuesday\n    \n    return total_pages_read\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n    trees_per_side = (road_length // interval) + 1 \n    total_trees = 2 * trees_per_side  # because trees are on both sides of the road\n\n    return total_trees\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n    mass_half_full_difference = mass_three_quarters_full - mass_quarter_full\n\n    # Since the difference between 3/4 full and 1/4 full is half the jar content,\n    # we can find the mass of the empty jar by subtracting this difference from the 1/4 full mass.\n    empty_jar_mass = mass_quarter_full - mass_half_full_difference\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    distance = lcm(5, 10, 12)\n    return distance\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = (bus_length * number_of_buses) + (distance_between_buses * (number_of_buses - 1))\n    \n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    x = symbols('x')\n    \n    # Equation for the mistaken calculation \n    mistake_eq = Eq((x / 4) - 25, 2021)\n    \n    # Solve the mistaken equation\n    mistaken_number = solve(mistake_eq, x)[0]\n\n    # Calculate the correct answer\n    correct_answer = (mistaken_number * 4) + 25\n    \n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    total_height_for_28_blocks = 182\n    number_of_blocks = 28\n\n    # Finding the height of one block\n    height_per_block = total_height_for_28_blocks / number_of_blocks\n\n    # Calculating the height for 42 blocks\n    height_for_42_blocks = height_per_block * 42\n\n    return height_for_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    ans = 45 * 7\n    return ans\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term + 1)\n    sum_sequence = num_terms * (first_term + last_term) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        num = int(f\"2{E}3{E}2\")\n        if num % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    x, y = symbols('x y')\n    equation = Eq(x * 3, y * 5)\n    result = solve(equation.subs(x, 5), y)\n\n    return 'directly', result[0]\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.5  # 50% above the cost price\n    discount = selling_price * 0.1  # 10% Christmas discount\n    final_selling_price = selling_price - discount\n    profit = final_selling_price - cost_price\n\n    return profit\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Let's first determine the Fibonacci-like sequence using the information provided\n    # We know that the 4th term is 6 and the 6th term is 15, let's find out the rest.\n    \n    # Initialize an array to hold the sequence, with None placeholders for unknown terms.\n    # We only need to figure out 7 terms as per the question\n    sequence = [None, None, None, 6, None, 15, None]\n   \n    # We work backwards to find the 5th term using the 6th and 4th terms\n    sequence[4] = sequence[5] - sequence[3]\n    \n    # Now we work backwards to find the 3rd term using the 4th and 5th terms.\n    sequence[2] = sequence[3] - sequence[4]\n\n    # Now we continue working backwards to find the first two terms.\n    sequence[1] = sequence[3] - sequence[2]\n    sequence[0] = sequence[2] - sequence[1]\n    \n    # Finally we can find the 7th term by adding the 5th and 6th terms.\n    sequence[6] = sequence[4] + sequence[5]\n    \n    # Return the 7th term\n    return sequence[6]\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 0  # Initialize m\n    while True:\n        # Calculate the number of students originally with m and 5 left out\n        original_students = m**2 + 5\n        # Calculate the new total when 18 more students join\n        new_total = original_students + 18\n        # Check if the new total is a perfect square\n        if (int(new_total**0.5))**2 == new_total:\n            break  # If it is a perfect square, we found our answer\n        m += 1  # Increment m to check the next possible square array size\n    return original_students\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    x_solution = solve(equation, x)\n    return x_solution[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n    total_students = [12, 15, 18]\n    group_size = gcd(gcd(total_students[0], total_students[1]), total_students[2])\n    return group_size\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time = 5 * 60  # converting 5 PM to minutes (17:00 -> 1020 minutes)\n    badminton_time = 45  # badminton time in minutes\n    jogging_time = 30    # jogging time in minutes\n\n    # Total activity time\n    total_activity_time = badminton_time + jogging_time\n\n    # Time when he stopped jogging in minutes since 00:00\n    end_time_in_minutes = start_time + total_activity_time\n\n    # Convert time back to hours and find the minutes past the hour\n    end_hour = end_time_in_minutes // 60\n    end_minute = end_time_in_minutes % 60\n\n    return (end_hour, end_minute)\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    # Calculate the original sum of the 3 numbers with an average of 25\n    original_sum = 3 * 25\n    \n    # Calculate the new sum after changing one number to 16\n    new_sum = 3 * 22\n\n    # The difference between the original sum and the new one is the change in the number\n    change = original_sum - new_sum\n    \n    # Since we know the altered number became 16, we subtract that from the change to get the original number\n    original_number = change + 16\n\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    \n    for correct in range(total_questions):\n        incorrect = total_questions - 1 - correct  # Rex did not attempt one question\n        if correct * points_correct + incorrect * points_incorrect == 66:\n            return correct\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # Define number of vertices (V), edges (E), and faces (F) for a tetrahedron\n    V = 4  # vertices\n    E = 6  # edges\n    F = 4  # faces (including the base)\n\n    # Use the Euler characteristic for polyhedra in three dimensions: V - E + F = 2\n    ans = V - E + F\n\n    return ans\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    total_sugar = (800 * 0.05) + (200 * 0.30) + (300 * 0.10)\n    total_solution = 800 + 200 + 300\n    concentration = (total_sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n\n    total_pens = black_pens + blue_pens + green_pens\n\n    return total_pens\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    \n    # Let the number of girls be 'girls', and therefore the number of boys will be 36 - girls.\n    # Equation based on total average score:\n    # (girls' average score * number of girls + boys' average score * number of boys) / total number of students = total average score\n    # (88 * girls + 91 * (36 - girls)) / 36 = 89\n    \n    equation = Eq((88 * girls + 91 * (36 - girls)) / 36, 89)\n\n    solution = solve(equation, girls)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    # Let x be the number of pencils Andrew has\n    # Then Gill has x + 18 pencils\n    # Together they have x + (x + 18) = 62 pencils\n\n    # Solving for x using algebra\n    x = (62 - 18) / 2\n\n    # The number of pencils Gill has\n    gill_pencils = x + 18\n\n    return int(gill_pencils)\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    total_fruit_juice = 20 * 0.35 + 30 * 0.60\n    percent_concentration = (total_fruit_juice / total_volume) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "def solution():\n    from math import comb\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    return 58 + 74\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    cookies = 148\n    cookies_per_box = 9\n\n    boxes_needed = (cookies + cookies_per_box - 1) // cookies_per_box  # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of badges Wendy made\n    x = symbols('x')\n\n    # After selling 5/7 of the badges, 2/7 of the badges remain\n    remaining_after_first_day = (2/7) * x\n\n    # She sells 1/3 of the remaining badges on the second day\n    sold_on_second_day = (1/3) * remaining_after_first_day\n\n    # She is left with the remaining badges after second day\n    remaining_after_second_day = remaining_after_first_day - sold_on_second_day\n\n    # Wendy then makes an additional 354 badges\n    total_after_making_more = remaining_after_second_day + 354\n\n    # In the end, she had 3 times the number of badges she made at first\n    equation = Eq(total_after_making_more, 3 * x)\n\n    # Solve the equation for x\n    initial_badges = solve(equation, x)\n\n    return initial_badges[0]\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    angel_to_number = {'A': 0, 'n': 1, 'g': 4, 'e': 7, 'l': 5}\n    devil = \"Devil\"\n    devil_to_number = ''.join(str(angel_to_number.get(ch, ch)) for ch in devil)\n    \n    andy_try = \"4005220912\"\n    \n    return devil_to_number == andy_try\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # In a knockout tournament, each round eliminates half the players.\n    # With 4 players, we need two rounds to determine the winner.\n    # First round: 4 players -> 2 winners\n    # Second round: 2 players -> 1 winner\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # Iterate through all possible three-digit numbers where one digit is a 7\n    min_num = 9999\n    for i in range(100, 1000):\n        num_str = str(i)\n        if '7' in num_str:\n            digits = [int(d) for d in num_str]\n            valid = True\n            for x in digits:\n                for y in digits:\n                    if abs(x - y) > 4:\n                        valid = False\n            if valid and i < min_num:\n                min_num = i\n    return min_num\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n\n    produced_by_both = (not_produced_by_A + not_produced_by_B) - total_exhibits\n\n    return produced_by_both\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # Total number of balls of the most abundant color (green in this case)\n    max_color_balls = 13\n    \n    # To ensure one ball of each color is picked, the magician must pick at least\n    # 1 more than the total number of balls of the single most abundant color.\n    ans = max_color_balls + 1 + 1  # One for the blue and one for the red ball.\n\n    return ans\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for number in range(200, 301):\n        if (number % 6 == 3) and (number % 7 == 3) and (number % 11 == 5):\n            return number\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse = symbols('blouse')\n    skirt = blouse + 14\n\n    equation = Eq(3 * skirt + 2 * blouse, 317)\n    \n    blouse_cost = solve(equation, blouse)\n\n    return blouse_cost[0]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Initialize with the smallest prime number greater than 3.\n    # Since 2 is the only even prime and it would result in 8A being even,\n    # which when subtracting an odd number 3B (as B is prime other than 2) would never be a multiple of 3.\n    # Thus, A cannot be 2 and we start checking from the next prime number, which is 3.\n    A = 3\n    while True:\n        if A == 3:\n            B = 2  # Considering the smallest prime, to start with.\n        else:\n            # Since A is prime and greater than 3, it has to be odd.\n            # For 8A - 3B to be a multiple of 3, B also has to be prime and odd (as B=2 won't satisfy the condition).\n            # Hence, we'll select the next odd number such that B is a prime.\n            B = A + 2\n            while any(B % i == 0 for i in range(2, int(B ** 0.5) + 1)):\n                # Keep adding 2 to B until we find the next prime number\n                B += 2\n\n        # Check if 8A - 3B is a multiple of 3\n        if (8 * A - 3 * B) % 3 == 0:\n            return A\n\n        # Move to the next odd number to test for prime A\n        A += 2\n\n        # Break the loop if A is no longer prime\n        if any(A % i == 0 for i in range(2, int(A ** 0.5) + 1)):\n            break\n\n    return A\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # Initial increase of 10% means the house was originally worth 100,000\n    # since 110,000 is 10% more than the original value.\n    original_price = 110000 / 1.10  \n    \n    # After the slump, the house's value decreases by 10%\n    value_after_slump = original_price * 0.90  \n    \n    # The profit or loss compared to the original price\n    profit_or_loss = value_after_slump - original_price  \n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Calculate factorials for the roses, jasmines, and the daisy (considered as a group)\n    roses_factorial = factorial(3)\n    jasmines_factorial = factorial(4)\n    # There is only one way to arrange the single daisy, so its factorial is 1.\n\n    # Calculate the number of ways to permute the groups of flowers themselves (3 groups)\n    groups_factorial = factorial(3)\n\n    # Total number of ways = permutations within groups * permutations of groups\n    total_ways = roses_factorial * jasmines_factorial * groups_factorial\n\n    return total_ways\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    from math import gcd\n\n    multiple_of = 1*2*3*4*5*6\n    factor_of = 1*2*3*4*5*6*7*8\n    count = 0\n\n    for m in range(multiple_of, factor_of + 1, multiple_of):\n        if factor_of % m == 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    sum = 60\n    n = 1\n    while n * (n + 1) // 2 <= sum:\n        n += 1\n    return n - 1\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    # Let the number of friends be f and number of pies be p\n    # From the first scenario, p = 5f + 3\n    # From the second scenario, p = 6f - 2\n    \n    # Use iteration to find the correct number of pies p that satisfies both conditions\n    for f in range(1, 100):  # Assuming the number of friends is less than 100 for computation\n        pies_first_scenario = 5*f + 3\n        pies_second_scenario = 6*f - 2\n        \n        # Check if pies from first scenario equals pies from second scenario\n        if pies_first_scenario == pies_second_scenario:\n            return pies_first_scenario\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_percentage = 20\n    discount_amount = (discount_percentage / 100) * original_price\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "def solution():\n    for S in range(1, 10):  # S cannot be 0 as it is the first digit of a three-digit number\n        for E in range(10):\n            if E != S:\n                SEE = 100 * S + 10 * E + E\n                if SEE == 3 * (S + E):\n                    return SEE\n    return None\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    ml_per_min = 20         # Water leaks at a rate of 20 ml per min\n    min_per_hour = 60       # There are 60 minutes in an hour\n    conversion_factor = 1 / 1000.0  # 1 liter = 1000 ml\n\n    # Calculate the total amount of water leaked in one hour\n    total_ml = ml_per_min * min_per_hour\n\n    # Convert milliliters to liters\n    ans = total_ml * conversion_factor\n\n    return ans\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n\n    mark_height = james_height + difference\n\n    return mark_height\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the given conditions\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n\n    # Use the Chinese Remainder Theorem to find the solution\n    age, _ = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2*watermelon + 3*honeydew, 48)\n    equation2 = Eq(honeydew, 2*watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # Pigeonhole Principle: At least one pair of the same colour\n    # Maximum of different socks without forming a pair = number of colours (3)\n    \n    # One more sock guarantees a pair\n    socks_to_get = (3 * 1) + 1\n\n    return socks_to_get\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000 - 20\n    return number\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    total_pieces_before_cut = 10\n    total_pieces_after_cut = 16\n    # each cut increases the total number of pieces by 2\n    # (one paper is cut into three, giving two more pieces)\n    # hence, to find the number of papers cut,\n    # we should find the increase in paper pieces and divide by 2\n    additional_pieces_required = total_pieces_after_cut - total_pieces_before_cut\n    \n    pieces_cut_into_three = additional_pieces_required // 2\n    \n    return pieces_cut_into_three\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # We take one apple at a time to get the worst case.\n    # 1. Take one red apple - no guarantee of 2 of same color.\n    # 2. Take one green apple - still no guarantee.\n    # Now we take another apple:\n    # 3. Regardless of the color of the third apple, we will have either:\n    # - Two red apples, or\n    # - Two green apples.\n    # Therefore, we must take 3 apples to guarantee 2 of the same color.\n    return 3\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    total_score = sum(scores)\n    num_tests = len(scores)\n    mean_score = total_score / num_tests\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    sum_numbers = 6.3 + 8.7 + 9.6 - 2.6\n    return sum_numbers\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4  # liters\n    water_left = 7  # liters\n\n    original_volume = (pails_filled * water_per_pail) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum(range(2, 47, 2)) - sum(range(1, 46, 2))\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5*(6*c - 1), -35)\n    solution = solve(equation, c)\n    return solution[c]\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    \n    return int(total_age)\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    from math import factorial\n    \n    def last_nonzero_digit(n):\n        while n % 10 == 0:\n            n //= 10\n        return n % 10\n    \n    A = factorial(2010)\n    \n    return last_nonzero_digit(A)\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, pencil_box = symbols('books pencil_box')\n\n    equation1 = Eq(2 * books + 3 * pencil_box, 42)\n    equation2 = Eq(2 * books + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (books, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height = 6 * 150\n    four_players_height = 4 * (150 - 2)\n\n    remaining_height = total_height - four_players_height\n    average_height_other_two = remaining_height / 2\n\n    return average_height_other_two\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Total number of elements from 1 to 8 following the pattern given\n    total_numbers = sum(i for i in range(2, 2+8))\n    \n    # The median index will be the half of the total number\n    median_index = total_numbers // 2\n\n    # Now we will find the value at the median index\n    current_index = 0\n    for number in range(1, 9):\n        # Calculate the number's range in the cumulative series\n        next_index = current_index + number\n        if next_index >= median_index:\n            # We have the number at the median index\n            return number\n        # Update cumulative count\n        current_index = next_index\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    num_participants = 10\n    num_handshakes = comb(num_participants, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    daily_paving = 50\n    days_needed = total_length / daily_paving\n    return days_needed\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    \n    equation = Eq(x**20 * y**15 * z**5, 243)\n    \n    # 243 is 3**5, thus we assume x = 3**(a), y = 3**(b), z = 3**(c) and a + b + c = 5\n    # The given power equation is to be divided in powers of x, y and z: 20a = 15b = 5c = 5\n    # So we can get the relations: a = 1/4, b = 1/3 and c = 1\n    \n    # Substitute given values back into the required objective: x**8 * y**6 * z**2\n    # x**8 * y**6 * z**2 = (3**(a))**8 * (3**(b))**6 * (3**(c))**2\n    # Simplify to get the exponents: 3**(8/4) * 3**(6/3) * 3**(2)\n    # Add the these exponents: 3**2 * 3**2 * 3**2 = 3**6\n    \n    result = 3**6\n    return result\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    daily_fodder_per_cattle = 10\n    number_of_cattles = 8\n    number_of_days = 4\n\n    total_fodder = daily_fodder_per_cattle * number_of_cattles * number_of_days\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 * 2 chickens\n    return 8 * 2\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    from sympy import factorint\n\n    # Condition 1: The product of 42 and x equals to the square of 42\n    # x must be such that 42 * x = 42^2 implies x = 42\n    x = 42\n\n    # Condition 2: Factoring the product of 42 and y, all factors' exponents equal to 1\n    # To satisfy this condition, y must be the product of primes not already in the factorization of 42\n    # Since 42 = 2 * 3 * 7, y must be a product of other primes to avoid higher exponents\n    # However, y should be the smallest such number, hence it should be 1 (y = 1 satisfies the condition)\n    y = 1\n\n    # Sum of x and y\n    return x + y\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600\n    sugar_percentage = 0.22\n\n    sugar_weight = total_weight * sugar_percentage\n\n    return sugar_weight\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let x be the total number of marbles Larry had at first\n    marbles_left = 35\n    marbles_to_nate = 30\n    marbles_to_ollie = 26\n    fraction_to_mark = 5 / 12\n    \n    # Calculate the number of marbles left after giving to Nate and Ollie\n    marbles_after_nate_ollie = marbles_left + marbles_to_nate + marbles_to_ollie\n    \n    # Since Larry gave 5/12 of his marbles to Mark, the remaining 7/12 of the marbles\n    # is equal to marbles_left after giving to Nate and Ollie\n    total_marbles = marbles_after_nate_ollie / (7 / 12)\n    \n    return int(total_marbles)\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total_sum = sum(int(digit) for number in range(1, 100) for digit in str(number))\n    return total_sum\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    part_given = total_money * 1/4\n    return part_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if (int(\"1\" + str(num))) * 3 == (int(str(num) + \"1\")):\n            return num\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for Jess and Jill\n    jess, jill = symbols('jess jill')\n    \n    # Before sharing\n    condition_before = Eq(jill, 6/5 * jess)\n    \n    # After sharing\n    condition_after = Eq(jill - 8, 4/7 * (jess + 8))\n    \n    # Solve the system of equations\n    solutions = solve((condition_before, condition_after), (jess, jill))\n    \n    # Calculate the total number of sweets\n    total_sweets = solutions[jess] + solutions[jill]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    today = datetime.today()\n    years_ago = timedelta(days=(38*365.25 + 6*30)) # approximating months to 30 days\n    birth_date = today - years_ago\n    return birth_date.year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    piece_cut = 3.75\n    remaining_length = original_length - piece_cut\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    ans = sum(i**4 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n    \n    # Generate all permutations of 4 digits\n    permuted_digits = permutations(digits, 4)\n    \n    for perm in permuted_digits:\n        if perm[-1] in ['0', '6', '8'] and perm[0] != '0':  # Last digit must be even, first not zero\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for num in range(40, 81):\n        if num % 4 == 0 and num % 7 == 0:\n            beads.append(num)\n    return beads\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define our symbols\n    pie_price = symbols('pie_price')\n    cake_price = pie_price + 13  # as given, a cake costs $13 more than a pie\n    total_money = 1848\n    pies_sold_to_cakes_sold = 4 / 1  # Ratio of the number of pies to cakes sold\n\n    # Total money is the sum of money from pies and cakes, using the ratio 15:7\n    # Therefore, total_money = 15x (from pies) + 7x (from cakes), where x is a common factor\n    # x is the money collected from selling one part of the ratio\n    # Then, the money collected from pies will be 15x and from cakes will be 7x\n    x = symbols('x')\n    money_pies = 15 * x\n    money_cakes = 7 * x\n\n    # Considering the number of pies sold (4y) and cakes sold (y), where y is the number of cakes sold\n    y = symbols('y')\n    pies_sold = 4 * y\n    cakes_sold = y\n\n    # Write equations based on the money collected and number of pies and cakes sold\n    eq1 = Eq(money_pies + money_cakes, total_money)\n    eq2 = Eq(money_pies, pies_sold * pie_price)\n    eq3 = Eq(money_cakes, cakes_sold * cake_price)\n\n    # Solve the system of equations to find values of x (common factor for money), y (cakes sold), and pie_price\n    solutions = solve((eq1, eq2, eq3), (x, y, pie_price))\n\n    # Return the number of cakes sold\n    return solutions[y]\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Hanson had\n    x = symbols('x')\n\n    # After spending 1/4 and an additional 3 dollars, he has 3/4 remaining\n    # (x - 1/4*x - 3) is the money left after buying CDs\n    # Then he spends 3/5 of what remains plus an additional 6 dollars on batteries\n    # 2/5*(x - 1/4*x - 3) - 6 is what should remain after batteries which is 24 dollars\n    equation = Eq(2/5*(x - 1/4*x - 3) - 6, 24)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n\n    rope1_length = 45\n    rope2_length = 30\n    longest_piece_length = gcd(rope1_length, rope2_length)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Qiqi's speed in m/min\n    speed_qiqi = 60\n    # Weiling's speed in m/min\n    speed_weiling = 72\n    \n    # Time difference in minutes\n    time_difference = 2\n\n    # Weiling arrives 4 minutes before Qiqi\n    additional_time = 4\n\n    # Qiqi's total travel time in minutes when Weiling arrives at school\n    # Weiling travels for (time_qiqi - time_difference - additional_time) minutes\n    # Set the equation: distance = speed_qiqi * time_qiqi = speed_weiling * (time_qiqi - 2 - 4)\n    # Simplify: time_qiqi = (speed_weiling * (time_qiqi - 6)) / speed_qiqi\n\n    # Rearrange the equation to get time_qiqi in terms of speed_qiqi and speed_weiling\n    # time_qiqi * (speed_qiqi - speed_weiling) = 6 * speed_weiling\n    # time_qiqi = (6 * speed_weiling) / (speed_qiqi - speed_weiling)\n\n    time_qiqi = (6 * speed_weiling) / (speed_qiqi - speed_weiling)\n\n    # Calculate the distance using Qiqi's speed and time\n    distance = speed_qiqi * time_qiqi\n\n    return distance\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    men_factorial = factorial(5)      # Ways to arrange 5 men\n    women_factorial = factorial(3)    # Ways to arrange 3 women\n    \n    # Places where women can stand (they cannot be next to each other)\n    # There are 6 possible positions for the first woman (before and after each man)\n    # After putting the first woman, 5 positions left for the second, and then 4 for the third\n    positions_for_women = factorial(6) // factorial(6 - 3)\n    \n    total_ways = men_factorial * women_factorial * positions_for_women\n    \n    return total_ways\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # Since we are only interested in the units digit, we only need to consider the\n    # units digits of powers of 9. The pattern for the units digit of powers of 9 is: 9, 1, 9, 1, ...\n    # 9^1 has a units digit of 9\n    # 9^2 has a units digit of 1 (since 81 ends in 1)\n    # 9^3 has a units digit of 9 (since 9 * 1 = 9)\n    # 9^4 has a units digit of 1 (since 9 * 9 = 81, which ends in 1)\n    # and so on...\n    \n    # Since this pattern repeats every 2 powers, we can determine the units digit of 9^2015 and 9^2016:\n    # 9^2015 will have the same units digit as 9^(2n+1) for some n, which is always 9.\n    # 9^2016 will have the same units digit as 9^(2n) for some n, which is always 1.\n    # Therefore, the sum of units digits is 9 (from 9^2015) + 1 (from 9^2016) = 10.\n    # The units digit of the sum is 0.\n    \n    return 0\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    marc_time = 11*60 + 50  # Convert Marc's time to total minutes past midnight\n    marc_time += 15  # Correct Marc's watch by adding the 15 minutes it's slow\n    \n    half_hour_later = marc_time + 30  # Time in 30 minutes\n    \n    george_time = half_hour_later - 7  # Correct for George's watch being 7 minutes fast\n    \n    # Convert back to hours and minutes\n    george_hours = george_time // 60\n    george_minutes = george_time % 60\n    \n    # Formatting time as hh.mm\n    george_watch_time = george_hours + george_minutes / 100\n\n    return george_watch_time\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45\n    total_amount = 540\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n    \n    tax_eq_1 = Eq(T/100 * 30000 + (T + 3)/100 * (income - 30000), (T + 1)/100 * income)\n    income_sol = solve(tax_eq_1, income)\n    \n    return income_sol[0]\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    correct_mark = 5\n    wrong_mark = -1\n    total_score = 90\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + wrong_answers * wrong_mark == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    # A's work rate is 1 house per 10 hours\n    rate_a = 1 / 10\n    # B's work rate is 1 house per 15 hours\n    rate_b = 1 / 15\n    \n    # Combined work rate when working together\n    rate_together = rate_a + rate_b\n    \n    # Time taken to paint the house when working together is 1 house divided by the combined work rate\n    time_together = 1 / rate_together\n    \n    return time_together\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    height = 31\n    jump_up = 3\n    fall_down = 2\n    jumps = 0\n    current_height = 0\n\n    while current_height < height:\n        jumps += 1\n        current_height += jump_up\n        if current_height >= height:\n            break\n        if jumps % 3 == 0:\n            current_height -= fall_down\n\n    return jumps\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for number in range(1, 101):\n        if number % 3 == 0 and number % 7 == 0 and (number - 2) % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Drawing the worst-case scenario for each color\n    red = 12\n    blue = 9\n    yellow = 8\n    green = 3\n\n    # In the worst case, you could draw all but one of each of the three most populous colors without getting a complete set of four different colors.\n    # So you need to draw one more after that to ensure you have all four colors.\n    # This is because we use the Pigeonhole Principle, assuming the worst-case scenario.\n    worst_case_draws = (red - 1) + (blue - 1) + (yellow - 1) + 1\n\n    return worst_case_draws\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    number_base = \"20190406\"\n    digit_sum = sum(int(digit) for digit in number_base)\n    for A in range(10):\n        if (digit_sum + A) % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # negative because the sequence is decreasing\n\n    # find the last term which is the last positive term\n    # an = a1 + (n-1)d > 0\n    # 0 = 50 + (n-1)(-4) \n    # (n-1)(-4) = -50\n    # n-1 = 50/4\n    # n = 50/4 + 1\n    n = (50 / abs(difference)) + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Gigi's age on 15th May 2002\n    gigi_age_2002 = 45\n\n    # Gigi's birth year\n    gigi_birth_year = 2002 - gigi_age_2002\n    \n    # Gigi's age when she is 22\n    gigi_age_22 = 22\n\n    # Year when Gigi was 22\n    year_gigi_22 = gigi_birth_year + gigi_age_22\n\n    # Jenny's age on 15th May 1995\n    jenny_age_1995 = 22\n    \n    # Jenny's birth year\n    jenny_birth_year = 1995 - jenny_age_1995\n    \n    # Jenny's age when Gigi was 22\n    jenny_age_when_gigi_22 = year_gigi_22 - jenny_birth_year\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    multiple = 0\n    for i in range(10, 1000):  # Arbitrarily set the upper limit to 1000.\n        if i % 3 == 0 and i % 8 == 0 and str(i)[-1] == '2':\n            multiple = i\n            break\n    return multiple\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"451{digit}\")\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return digit\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    ways = 0\n    for group1 in range(1, total_apples):\n        group2 = total_apples - group1\n        if group1 < group2:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration_days = 3 * 7  # Three weeks\n\n    end_date = start_date + timedelta(days=duration_days - 1)  # Subtract 1 because the start day is included\n\n    return end_date.strftime('%d %B')\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import pow, sqrt\n    \n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 5/3)\n    \n    result = numerator / denominator\n    ans = round(result, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_still_water = 25\n    speed_current = 3\n    distance = 140\n\n    speed_downstream = speed_still_water + speed_current\n    time_taken = distance / speed_downstream\n\n    return time_taken\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_rate = 0.15\n\n    discounted_amount = original_price * discount_rate\n    sale_price = original_price - discounted_amount\n\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelet_price = 0.99\n    card_price = 1.98\n    total_cost = (bracelet_price * 5) + (card_price * 2)\n    return round(total_cost, 2)\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cupcake_cost_each = 3.25\n    total_cupcake_cost = 3 * cupcake_cost_each\n    total_drink_cost = total_cost - total_cupcake_cost\n    cost_per_can = total_drink_cost / 2\n    \n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    # let x be the number of correct answers and y be the number of incorrect answers\n    # Since the total number of questions is 20, we have x + y = 20\n    # Every correct answer gives her 5 points and every incorrect answer costs her 2 points.\n    # Therefore, the total score is 5x - 2y = 51\n    # We solve these two equations to find the value of x\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 20)\n    equation2 = Eq(5*x - 2*y, 51)\n    \n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    sequence = [8, 20, 31, 41, 50]\n    differences = [sequence[i] - sequence[i-1] for i in range(1, len(sequence))]\n    next_difference = differences[-1] + (differences[1] - differences[0])\n    next_number = sequence[-1] + next_difference\n    return next_number\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "from math import lcm\n\ndef solution():\n    # Convert minutes to seconds for first and second traffic lights\n    first_light = 30  # 0.5 minutes is 30 seconds\n    second_light = 45  # 0.75 minutes is 45 seconds\n    # Total time when all 3 lights turn green together is 9 minutes = 540 seconds\n    total_time = 9 * 60  \n    \n    # We need to find the lowest common multiple (LCM) of first and second lights\n    # because they all have to turn green at the same time.\n    lcm_first_second = lcm(first_light, second_light)\n    \n    # The third traffic light's change interval has to divide the total_time evenly\n    # and must be greater than or equal to 30 seconds.\n    for time in range(lcm_first_second, total_time + 1):\n        if total_time % time == 0 and time >= 30:\n            return time\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    known_numbers = [9, 1, 7, 4, 3, 6, 8]\n    total_numbers = 8\n    mean_value = 5\n\n    sum_of_known_numbers = sum(known_numbers)\n    total_sum = mean_value * total_numbers\n\n    missing_number = total_sum - sum_of_known_numbers\n    return missing_number\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Assume x buses for A and y buses for B\n    # Total people in A = 36x, Total people in B = 36y - 11\n    # As members from A and B combine in another bus:\n    # A + B = (36x + 36y - 11) = 36(z), where z is an integer (number of buses).\n    # This means (A + B + 11) must be divisible by 36.\n    # As per the given condition, every member of A takes a picture with every member of B:\n    # Total pictures = A * B = (36x) * (36y - 11).\n    # Every roll can take 36 pictures. We calculate how many rolls are used (completely filled):\n    # rolls = (A * B) // 36.\n    # The remaining pictures that can not form a complete roll are:\n    # remaining_pictures = (A * B) % 36.\n    # But since the question asks for the remaining capacity of the roll, we need to subtract\n    # the remaining pictures from the roll's capacity to get the remaining space:\n    # remaining_capacity = 36 - remaining_pictures.\n\n    # Start enumeration to find appropriate values of x and y\n    for x in range(1, 100):  # Assuming there are less than 100 buses for group A\n        for y in range(1, 100):  # Assuming there are less than 100 buses for group B\n            # Check if the combination fits the bus filling rule\n            if (36*x + 36*y - 11) % 36 == 0:\n                # We then calculate the remaining photos on the film\n                remaining_capacity = 36 - (36 * x * (36 * y - 11)) % 36\n                # Check if the remaining capacity is less than 36 (the roll's capacity)\n                # If so, that would be our answer\n                if remaining_capacity < 36:\n                    return remaining_capacity\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for i in range(60, 71):\n        if i % 7 == 0 and i % 9 == 0:\n            return i\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, ming = symbols('daniel ming')\n    equation1 = Eq(daniel, 4 * ming)\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # Since there are 4 individuals, let's name them A, B, C, D for simplicity.\n    # A can pass the ball to 3 different people: B, C, or D.\n    # Then, that person can pass to either of the remaining 2 people (since they can't pass it back to A).\n    # Finally, that last person can only pass to A, since it's the 3rd pass and the ball must return to A.\n    \n    # number of ways A can pass to the next person.\n    first_pass_options = 3  \n    # number of ways the second person can pass to the third (not back to A and not to themselves).\n    second_pass_options = 2  \n    # There is only one way for the last person to pass it back to A.\n    third_pass_options = 1\n    \n    total_methods = first_pass_options * second_pass_options * third_pass_options\n    \n    return total_methods\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    paper_weight_g = 25\n    number_of_girls = 250\n    total_weight_g = paper_weight_g * number_of_girls\n    total_weight_kg = total_weight_g / 1000  # convert grams to kilograms\n    return total_weight_kg\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = 0\n    for i in range(2, 1001, 4):\n        ans += (i+2) ** 2 - i ** 2\n    return ans\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 8, 9]\n    largest_product = 0\n    for perm in permutations(digits):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        largest_product = max(largest_product, product)\n    return largest_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Speed of the line is the same across both bridges\n    # Time to cross the first bridge (8 seconds) gives us the speed:\n    # Speed = total length crossed / time taken\n    # The total length crossed for the first bridge is the length of the bridge plus the length of the line\n    speed_first_bridge = (9 + 3) / 8  # in meters per second\n\n    # Knowing the speed, we can calculate the length of the second bridge.\n    # Let's denote the length of the second bridge as L2.\n    # Time taken to cross the second bridge is 10 seconds, therefore:\n    # 10 seconds = (L2 + length of the line) / speed of the line\n    # Solving for L2 gives us:\n    L2 = (speed_first_bridge * 10) - 3  # Subtract the length of the line\n\n    return L2\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    product = 2688\n    for n in range(2, int(product**(1/3)) + 1, 2):  # Search evens up to cube root\n        if product % n == 0:\n            if product % (n + 2) == 0 and product % (n + 4) == 0 and n * (n + 2) * (n + 4) == product:\n                return n + 4  # Largest of the three even numbers\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = (11 * 60) + 55  # 11.55am in minutes\n    end_time = (13 * 60) + 40    # 1.40pm in minutes (13:40 in 24hr format)\n    \n    time_played = end_time - start_time\n    \n    return time_played\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    left_people = 11\n    right_people = 7\n    crystal = 1  # Don't forget to include Crystal herself\n\n    # She is in only one of the rows, so we need to double the count for two rows,\n    # and add herself to get the total number of people\n    total_people = (left_people + right_people + crystal) * 2\n\n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):  # Loop through all three-digit numbers\n        if num % 3 == 0 and num % 11 == 0:  # Check if divisible by both 3 and 11\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:  # Check if one less is divisible by both 2 and 7\n                return num  # Return the number if it satisfies all conditions\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n    ways = 0\n\n    for group1 in range(1, total_cupcakes):\n        group2 = total_cupcakes - group1\n        if group1 != group2:\n            ways += 1\n\n    # Each division is counted twice (e.g., 1-9 and 9-1), so we halve the count\n    ways //= 2\n    return ways\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(224)\n    total_factors = 1\n    for prime, exponent in factors.items():\n        total_factors *= (exponent + 1)\n    return total_factors\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"8:30\", \"%H:%M\")\n    total_time = 3 * 45 + 2 * 5  # Three 45-minute lessons and two 5-minute intervals\n    break_time = start_time + timedelta(minutes=total_time)\n    return break_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n    \n    # Find GCD of the first two numbers\n    gcd_1 = gcd(28, 84)\n    \n    # Find GCD of the result and the third number\n    ans = gcd(gcd_1, 126)\n    \n    return ans\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):  # hundreds digit, cannot be 0\n        for b in range(0, 10):  # tens digit\n            for c in range(0, 10):  # ones digit\n                if b == a + 5 and c == b - 2 and ((a + b + c) / 2) == b:\n                    return a * 100 + b * 10 + c\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    # Let 'a' be the number of coins Adam had originally\n    # Let 't' be the number of coins Troy had originally\n    # Given that t = 5a (Troy had 5 times as many coins as Adam)\n    # And after Adam took 24 more coins, a + 24 = t/3 (Adam had 1/3 as many coins as Troy)\n    # We need to solve these equations to find the value of 'a' and 't'\n\n    from sympy import symbols, Eq, solve\n\n    a, t = symbols('a t')\n    \n    # Equations according to the problem statement\n    equation1 = Eq(t, 5*a)\n    equation2 = Eq(a + 24, t/3)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (a, t))\n    \n    # The total number of coins they had altogether at first\n    total_coins = solutions[a] + solutions[t]\n\n    return total_coins\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $5 and $10 notes\n    five_notes, ten_notes = symbols('five_notes ten_notes')\n\n    # Equation for the total amount of $5 and $10 notes\n    total_notes_eq = Eq(five_notes + ten_notes, 57)\n\n    # Equation after spending 60% of the $10 notes and 25% of the $5 notes\n    spent_ten_notes_eq = Eq(ten_notes - 0.60 * ten_notes, 2 * (five_notes - 0.25 * five_notes))\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, spent_ten_notes_eq), (five_notes, ten_notes))\n\n    # Find the number of $5 and $10 notes spent\n    spent_five_notes = 0.25 * solutions[five_notes]\n    spent_ten_notes = 0.60 * solutions[ten_notes]\n\n    # Calculate the cost of the bag\n    cost_of_bag = spent_five_notes * 5 + spent_ten_notes * 10\n    \n    return cost_of_bag\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for number in range(1000, 10000):\n        digits = [int(digit) for digit in str(number)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for units in range(0, 10, 2):  # The units digit must be even\n                if hundreds != tens and tens != units and units != hundreds:\n                    if hundreds + tens + units == 8:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    # Let's denote Hanson's original amount of money as x.\n    # After spending 1/4 of his money and an additional $3 on CDs, \n    # Hanson has (3/4)x - 3 left.\n    # Then he spends 3/5 of the remaining amount and an additional $6 on batteries\n    # which leaves him with (2/5)((3/4)x - 3) - 6 = 24\n    # Solve for x.\n    \n    from sympy import symbols, solve\n\n    x = symbols('x')\n    remaining_after_CDs = (3/4) * x - 3\n    remaining_after_batteries = (2/5) * remaining_after_CDs - 6\n\n    equation = remaining_after_batteries - 24\n    \n    original_money = solve(equation, x)\n    \n    return original_money[0]\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    return (1 / 2) * (16 / (1 / 4))\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # To ensure 5 green beads, we consider the worst case scenario.\n    # Darrell could pick all the blue and white beads before getting the 5 green ones.\n    # Maximum number of blue and white beads is 5 + 6 = 11.\n    \n    # After that, he needs to pick 5 green beads for sure.\n    required_green_beads = 5\n    \n    # Total beads required in the worst case scenario is 11 + 5 = 16.\n    total_beads_required = 11 + required_green_beads\n    \n    return total_beads_required\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 6 == 1 and num % 11 == 0:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    return solutions[rachel] + solutions[alice]\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    n = 9\n    r = 4\n    permutations = factorial(n) // factorial(n-r)\n    return permutations\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Calculate the number of games in the group stage\n    # A single round-robin tournament within a group of 4 people means each person plays against the other 3\n    group_games = (4 * 3 // 2) * 4  # each group has 4 members, 4 groups in total\n\n    # Knockout round games calculation:\n    # Top 8 => 4 games\n    # Top 4 => 2 games\n    # Top 2 (final) => 1 game\n    # Plus one more game for third place\n    knockout_games = 4 + 2 + 1 + 1  # 8 to 4, 4 to 2, 1 final and 1 third place match\n\n    # Total games played throughout the contest is the sum of both stages\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_given_away = 76\n    stickers_bought = 65\n    final_stickers = 489\n\n    initial_stickers = final_stickers + stickers_given_away - stickers_bought\n\n    return initial_stickers\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amount of work done by B in one day be 1 unit\n    # Then the work done by A in one day is 2 units (since A is twice as good as B)\n    work_per_day_b = 1\n    work_per_day_a = 2\n\n    # Let 'd' be the number of days B takes to finish the job alone\n    # Then A takes 'd - 12' days to finish the same job\n    d = symbols('d')\n\n    # The job is considered to be 1 whole work\n    # Eq(work_per_day_a * (d - 12) == 1) is A's work equation\n    # Eq(work_per_day_b * d == 1) is B's work equation\n    equation_a = Eq(work_per_day_a * (d - 12), 1)\n    equation_b = Eq(work_per_day_b * d, 1)\n\n    # Solve the equations to find the number of days B takes to complete the job\n    days_b = solve(equation_b, d)[0]\n\n    # Now, we find the combined work per day when A and B work together\n    combined_work_per_day = work_per_day_a + work_per_day_b\n\n    # The time taken by both A and B working together is 1 / combined_work_per_day\n    total_days_together = 1 / combined_work_per_day\n\n    return total_days_together\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 0):\n            break\n\n    return number\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pineapple, apple = symbols('pineapple apple')\n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n    \n    solutions = solve((equation1, equation2), (pineapple, apple))\n    \n    return solutions[pineapple]\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    belinda_after = belinda_tomatoes - 7\n    matthew_tomatoes = belinda_after\n    \n    return matthew_tomatoes\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    digits = '0123456789'\n    for perm in permutations(digits):\n        if perm[0] != '8':  # The leftmost digit must be 8\n            continue\n        num = ''.join(perm)\n        if all(int(num[:i]) % i == 0 for i in range(2, 10)):\n            return int(num)\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    import math\n\n    def sum_of_divisors(n):\n        divisors = {1, n}\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return sum(divisors)\n\n    # lcm of 15 and 21 to get the common multiple which shall have those as factors\n    lcm = (15 * 21) // math.gcd(15, 21)\n\n    # Check multiples of lcm that have exactly 8 factors\n    multiple = lcm\n    while True:\n        if len({i for i in range(1, multiple + 1) if multiple % i == 0}) == 8:\n            return sum_of_divisors(multiple)\n        multiple += lcm\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    base_assembly_rate = 10\n    increased_efficiency = 50 / 100\n    new_assembly_rate = base_assembly_rate * (1 + increased_efficiency)\n    \n    return new_assembly_rate\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    total_animals = 7\n    total_legs = 20\n    # Let r represent the number of rabbits and d represent ducks\n    for r in range(total_animals+1):\n        d = total_animals - r\n        if 4*r + 2*d == total_legs:\n            return r\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    # Calculate the difference between the two numbers\n    difference = 2012 - 1274\n    \n    # Initialize the largest possible value of D - R\n    largest_value = 0\n    \n    # Iterate over possible divisors, starting from the largest possible odd divisor\n    for D in range(difference, 0, -2):\n        if difference % D == 0:  # D should divide the difference\n            R = 2012 % D  # Calculate the remainder when 2012 is divided by D\n            largest_value = D - R  # Calculate D - R\n            break  # As we are iterating from the largest D, the first valid D will be our answer\n    \n    return largest_value\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    grace_juice = (5/7) * total_juice\n    remaining_juice_after_grace = total_juice - grace_juice\n    evelyn_juice = (1/9) * remaining_juice_after_grace\n    remaining_juice = remaining_juice_after_grace - evelyn_juice\n    \n    return remaining_juice\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    count = 0\n    for i in range(32): # Maximum number of 2-gram weights is 31 since 32 * 2 = 64 > 63\n        for j in range(13): # Maximum number of 5-gram weights is 12 since 13 * 5 = 65 > 63\n            if 2 * i + 5 * j == 63:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    def can_win(n):\n        # Base case: If n is 0, then we cannot make a move, hence we lose\n        if n == 0:\n            return False\n        # If we can force the opponent into a losing position by removing 1, 3, 4, or 6,\n        # then we are in a winning position\n        if not can_win(n - 1) or not can_win(n - 3) or not can_win(n - 4) or not can_win(n - 6):\n            return True\n        # If the opponent can always move to a winning position, we are in a losing position\n        return False\n\n    # Starting from 1 to 52, find the first losing position\n    for i in range(1, 53):\n        if not can_win(i):\n            losing_position = i\n            break\n\n    # If the first losing position is reachable by doing valid moves (1, 3, 4, 6)\n    # from the start (0), Betty should let Abby start so Abby ends up in the losing position.\n    # Otherwise, Betty should start and avoid moving to losing positions.\n    if losing_position in (1, 3, 4, 6):\n        return \"Second\", losing_position\n    else:\n        return \"First\", losing_position\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    # Total height of the six players\n    total_height_6 = 6 * 150\n    \n    # Average height of the four players is 2 cm lower than the team's average\n    average_height_4 = 150 - 2\n    \n    # Total height of the four players\n    total_height_4 = 4 * average_height_4\n    \n    # Total height of the remaining two players\n    total_height_2 = total_height_6 - total_height_4\n    \n    # Average height of the remaining two players\n    average_height_2 = total_height_2 / 2\n    \n    return average_height_2\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # Last digit of 4^x follows a pattern: 4, 6, 4, 6, ... since 4^2 = 16 (last digit 6) and 4^3 = 64 (last digit 4)\n    # So, last digit of 4^2009 would be the same as 4^(2009 % 2), which is 4^1, and last digit is 4\n\n    # Last digit of 6^x is always 6, since 6^1 = 6, 6^2 = 36, 6^3 = 216, and so on...\n    # So, the last digit of 6^2010 is 6\n\n    # Adding just the last digits: 4 (from 4^2009) + 6 (from 6^2010)\n    return (4 + 6) % 10  # % 10 is used to find the last digit\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    ans = sum(range(1, 21)) + sum(range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume the individual flow rate of pipes A (a), B (b), and C (c)\n    a, b, c = symbols('a b c')\n\n    # If A and C are turned on, they fill 18 tons from A + the portion from C, which is A+C\n    # If B and C are turned on, they fill 27 tons from B (twice A) + the portion from C, which is 2A+C\n    equation1 = Eq(a + c, 18)\n    equation2 = Eq(b + c, 27)\n    equation3 = Eq(b, 2 * a)\n\n    # Solving the equations to find the individual flow rates\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Total capacity of the pool is the portion filled by A, B and C individually\n    total_capacity = solutions[a] + solutions[b] + solutions[c]\n\n    return total_capacity\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from math import factorial\n\n    # There are 5 choices for the first letter, \n    # 4 choices for the second letter, \n    # 3 for the third, and 2 for the last.\n    # Hence, we can calculate the total possibilities by multiplication\n    ans = factorial(5) // factorial(5 - 4)\n    return ans\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    # Let's denote c as the number of correct answers\n    # Rex did not attempt 1 question, so he answered 24 questions\n    # Let's denote w as the number of wrong answers\n    # Then the number of correct answers will be 24-w\n    # The points for correct answers: 4c\n    # The points for incorrect answers: -2w\n    # Total score = 4c - 2w = 66 \n    # Also we know that each question was either correct or wrong so c + w = 24\n    \n    for correct in range(0, 25): # checking all possibilities from 0 to 24 correct answers\n        wrong = 24 - correct # because one question was not attempted out of 25\n        score = (4 * correct) - (2 * wrong)\n        if score == 66:\n            return correct\n            \n    return None\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    num_left_first = 20\n    num_left_second = 10\n    diff = num_left_first - num_left_second\n    return diff\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    # Define a variable for Alberta's age\n    for age in range(10, 100):  # the age range is between 10 and 99 because we are talking about digits interchange\n        reversed_age = int(str(age)[::-1])  # reverse the digits of Alberta's age\n        if reversed_age + 1 == age // 2:\n            return age\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_amount = 9.32\n    increase_fraction = 1 / 10\n    increase_amount = original_amount * increase_fraction\n    new_amount = original_amount + increase_amount\n    \n    return new_amount\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # The sum of an arithmetic sequence can be found with the formula S_n = n/2 * (a1 + an)\n    # where S_n is the sum of the first n terms, a1 is the first term and an is the nth term.\n    # We also know from the formula of the nth term of an arithmetic sequence that \n    # an = a1 + (n - 1)d, where d is the common difference.\n    \n    # From the given information, we set up the following equations:\n    # S_8  = 8/2 * (a1 + a1 + (8 - 1)d) = 32\n    # S_22 = 22/2 * (a1 + a1 + (22 - 1)d) = 44\n    \n    # Re-writing the equations:\n    # 4 * (2a1 + 7d) = 32\n    # 11 * (2a1 + 21d) = 44\n    \n    # Simplifying:\n    # 2a1 + 7d = 8  ... (1)\n    # 2a1 + 21d = 4  ... (2)\n    \n    # Subtracting equation (1) from (2) gives us:\n    # 14d = -4\n    # d = -4 / 14 = -2 / 7\n    \n    # Substitute the value of d in equation (1):\n    # 2a1 + 7 * (-2 / 7) = 8\n    # 2a1 - 2 = 8\n    # 2a1 = 10\n    # a1 = 5\n    \n    # Now that we have a1 and d, we can find the sum of the first 15 terms S_15.\n    # S_15 = 15/2 * (a1 + a15)\n    \n    # First, let's find a15 = a1 + (15 - 1)d\n    a1 = 5\n    d = -2 / 7\n    a15 = a1 + (15 - 1) * d\n    \n    # Now find S_15\n    S_15 = 15 / 2 * (a1 + a15)\n    \n    return S_15\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n    \n    if fraction_value > decimal_value:\n        ans = \"4/25 is larger\"\n    else:\n        ans = \"0.17 is larger\"\n\n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    total_water = 1000  # 1 litre = 1000 ml\n    poured_water = 200 * 3  # 200 ml in each of 3 cups\n    remaining_water = total_water - poured_water  # water left in the jug\n    return remaining_water\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n\n    difference = (fifteenth_term - tenth_term) / (15 - 10)\n    twelfth_term = tenth_term + (12 - 10) * difference\n\n    return int(twelfth_term)\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 60\n    total_correct = (0.2 * 10) + (0.8 * 20) + (0.9 * 30)\n    overall_score = (total_correct / total_problems) * 100\n    return overall_score\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Let x be the total number of questions.\n    # On the first day, Andrew completes 7 more than half of all the questions: (1/2)*x + 7\n    # Remaining questions after first day: x - ((1/2)*x + 7)\n    # On the second day, Andrew completes 5 fewer than half of the remaining questions: (1/2)*(x - ((1/2)*x + 7)) - 5\n    # Remaining questions after second day: (x - ((1/2)*x + 7)) - ((1/2)*(x - ((1/2)*x + 7)) - 5)\n    # On the third day, he finishes the remaining 23 questions.\n    \n    # Equation: Remaining questions after second day = 23\n    equation = Eq((x - ((1/2)*x + 7)) - ((1/2)*(x - ((1/2)*x + 7)) - 5), 23)\n\n    # Solving the equation for x\n    total_questions = solve(equation, x)\n\n    return total_questions[0]\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    # The number of times a switch is toggled is equal to the number of its factors\n    # A switch is left on if it's toggled an odd number of times\n    # Only perfect squares have an odd number of factors\n    # We need to count the perfect squares up to 250\n\n    count = 0\n    for i in range(1, 251):\n        if i * i <= 250:\n            count += 1\n        else:\n            break\n    \n    return count\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of roses and daisies originally and planted per month\n    original_roses, planted_roses = symbols('original_roses planted_roses')\n    original_daisies, planted_daisies = symbols('original_daisies planted_daisies')\n\n    # Equation 1: The total number of flowers originally is 300\n    equation1 = Eq(original_roses + original_daisies, 300)\n    # Equation 2: The total number of roses after a few months will be 280\n    equation2 = Eq(original_roses + planted_roses, 280)\n    # Equation 3: The total number of daisies after a few months will be 180\n    equation3 = Eq(original_daisies + planted_daisies, 180)\n    # Equation 4: The number of roses and daisies planted each month are the same\n    equation4 = Eq(planted_roses, planted_daisies)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), \\\n                      (original_roses, original_daisies, planted_roses, planted_daisies))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    area_per_large_brick = 6 * 6  # in decimeters^2\n    total_area = area_per_large_brick * 80  # total area covered by 80 large bricks\n\n    area_per_small_brick = 64 / 100  # converting cm^2 to dm^2\n    num_small_bricks = total_area / area_per_small_brick\n\n    return int(num_small_bricks)\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bottle, bag = symbols('bottle bag')\n    \n    equation1 = Eq(2 * bottle + 3 * bag, 255)\n    equation2 = Eq(bottle, bag + 15)\n\n    solutions = solve((equation1, equation2), (bottle, bag))\n\n    return solutions[bag]\n    \nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 4, 5, 7, 8]\n    max_number = 0\n\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 11 == 0 and number > max_number:\n            max_number = number\n    \n    return max_number\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls + boys, 500)\n    equation2 = Eq(girls, boys + 30)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    n = 91\n    if n > 1:\n        for i in range(2, int(n**0.5)+1):\n            if (n % i) == 0:\n                return (i, n//i)  # Return the first found pair of factors\n    return (n,)  # If no factors found, n is prime, but this code should not return this for 91\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    from math import log10\n\n    # A is 4^2018 * 25^2018\n    # We can write it as 2^(2*2018) * 5^(2*2018)\n    # Which simplifies to (2*5)^(2*2018) = 10^(2*2018)\n    # The number of digits in 10^n is n+1\n    power_of_10 = 2 * 2018\n    num_digits = power_of_10 + 1\n\n    return num_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_A = 10\n    length_B = 5 * length_A\n    total_length = length_A + length_B\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n\n    ans = comb(total_players, team_size)\n\n    return ans\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n    cost_price = selling_price / (1 + profit_percent / 100)\n    \n    alternative_profit = 5000\n    alternative_selling_price = cost_price + alternative_profit\n    alternative_profit_percent = (alternative_profit / cost_price) * 100\n\n    return alternative_profit_percent\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    # Assume the side of the square with boys is 'x' and with girls 'y'\n    # Total number of boys B = x^2\n    # Total number of girls G = (x - 2)^2\n    # Since there are 31 more boys than girls, we have the equation:\n    # B - G = 31\n    # x^2 - (x - 2)^2 = 31\n    # Simplifying the equation:\n    # x^2 - x^2 + 4x - 4 = 31\n    # We get:\n    # 4x - 4 = 31 \n    # 4x = 31 + 4\n    # x = (31 + 4) / 4\n    # x = 35 / 4\n    # Since x must be an integer (you can't have a fraction of a row or column),\n    # and the difference between boys and girls has to be 31, we iterate\n    # through possible values of x starting from 5 (since there should be at\n    # least one layer of girls) checking when the difference is 31.\n\n    for x in range(5, 1000):  # Reasonable upper bound\n        B = x**2\n        G = (x - 2)**2\n        if B - G == 31:\n            # Total number of students = boys + girls\n            total_students = B + G\n            return total_students\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    # Let x be the total number of apples Mr. Aziz had initially.\n    # According to the problem, in the end, he is left with 30% of the apples.\n    # It means he has sold 70% of the apples. Furthermore, he sold 80 apples on Tuesday.\n    \n    # According to the problem, 1/5 of x is sold on Monday, and then 80 apples are sold on Tuesday.\n    # The remaining apples are 30% of x. So we can write an equation as follows:\n    # (1 - 1/5)x - 80 = 0.3x\n    # 0.8x - 80 = 0.3x\n    # 0.8x - 0.3x = 80\n    # 0.5x = 80\n    # x = 80 / 0.5\n    # x = 160 (This is the total number of apples he had initially)\n    \n    # Now we need to calculate how many apples were left in the end, which is 30% of the initial amount.\n    apples_left = 160 * 0.3\n    \n    # Return the number of apples left\n    return int(apples_left)\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2  # Because Emily is directly behind Danny\n    \n    total_people = people_in_front_of_emily + people_behind_danny + danny_and_emily\n    \n    return total_people\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    num_pieces = 2\n    length_each_piece = total_length / num_pieces\n    return length_each_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let the first number be x. Then the other numbers will be x+2, x+4, ..., x+12\n    # The fourth number is x+6\n    # The sum of the first and seventh numbers is x + (x+12)\n    # According to the condition: (x + 6) = 1/3 * (x + (x + 12)) + 6\n    # Solve for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6), (1/3) * (x + (x + 12)) + 6)\n\n    first_number = solve(equation, x)[0]\n    \n    # Calculate the sum of the seven consecutive even numbers\n    sum_of_numbers = sum(first_number + 2*i for i in range(7))\n   \n    return sum_of_numbers\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    kilometers = 1.5\n    meters_per_kilometer = 1000\n    meters = kilometers * meters_per_kilometer\n    return meters\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140\n    remaining_sum = total_sum - 180\n    average_of_remaining = remaining_sum / 8\n    return average_of_remaining\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    red = 28\n    red_white = 38\n    white = red_white - red\n    yellow = white * 3\n    purple = yellow * 2\n    total = red + white + yellow + purple\n    return total\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n    total_markers = red_markers + blue_markers + green_markers\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n\n    trees_per_side = (length_of_highway // distance_between_trees) + 1\n    total_trees = 2 * trees_per_side\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd = 1\n    common_difference = 2\n    term_position = 20\n\n    nth_odd_number = first_odd + (term_position - 1) * common_difference\n    return nth_odd_number\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # If the Ferrari driver finished in second place, and overtook 5 cars,\n    # that means there were 5 cars between him and the first place.\n    # Therefore, the total number of cars is his finishing position plus the number of cars overtaken.\n    ans = 2 + 5\n    return ans\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    rings_left = 65\n\n    initial_rings = johnny_rings + amber_rings + rings_left\n\n    return initial_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book = 15.99\n    amy_book = lily_book + 8.01\n    total_paid = lily_book + amy_book\n    return total_paid\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    sum = 0\n    for i in range(1, 21):\n        sum += int(\"5\" * i)\n    ans = sum % 10000\n    return ans\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    # Sum of interior angles of a polygon = (n-2) * 180\n    sum_of_interior_angles = (sides - 2) * 180\n    # Interior angle of a regular polygon = sum of interior angles / number of sides\n    interior_angle = sum_of_interior_angles / sides\n\n    return interior_angle\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    checked = symbols('checked')\n    equation = Eq(7 * checked + checked, 72)\n    solution = solve(equation, checked)\n    white_shirts = 7 * solution[checked]\n    return white_shirts\n\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 25 / 100\n    women_fraction = 1 / 5\n\n    men_count = total_people * men_percentage\n    women_count = total_people * women_fraction\n\n    children_count = total_people - (men_count + women_count)\n\n    return int(children_count)\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # congruences based on the problem statement\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    \n    # the solution to the congruences using the Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    greatest_num = 0\n    for num in range(100, 1000, 2):  # Loop through 3-digit odd numbers\n        if num % 9 == 0 and ((num // 10) % 10) % 4 == 0:  # Divisible by 9, and tens digit divisible by 4\n            greatest_num = max(greatest_num, num)\n    return greatest_num\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    men_for_one_wall = 2\n    days_for_one_wall = 3\n    # If 2 men can build 1 wall in 3 days\n    # 1 man can build 1 wall in 2*3 = 6 days\n    days_per_man_per_wall = men_for_one_wall * days_for_one_wall\n\n    def time_to_build(x_walls, y_men):\n        # If y men are working, they would take days_per_man_per_wall/y\n        # time to build one wall, so for x walls it would be x times that.\n        return (days_per_man_per_wall * x_walls) / y_men\n    \n    # Assuming x and y are defined as below, for example purposes:\n    x = 1  # Change this to the number of walls\n    y = 1  # Change this to the number of men\n\n    return time_to_build(x, y)\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Without the picture, there's no way to accurately determine the pattern.\n    # Therefore, place the assumed pattern logic here once it's provided.\n    # Since I don't have it, I'm just returning an error message.\n\n    ans = 'Pattern picture not provided. Cannot solve without the pattern.'\n    return ans\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    ans = 42 // 6\n    return ans\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # Worst case scenario is drawing all balls of each unique color without getting two balls of the same color\n    # Hence, we draw all 5 green balls and still no two balls of same color\n    # Now, we either draw a white or red ball, and we will definitely have two balls of the same color\n    # So, we add 1 to the number of green balls to get the number of draws required\n\n    num_green = 5\n    ans = num_green + 1\n\n    return ans\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_years\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of girls and boys\n    girls, boys = symbols('girls boys')\n    \n    # Since one-third of the number of girls is equal to one-half of the number of boys\n    equation1 = Eq(girls / 3, boys / 2)\n    \n    # The total number of children is the sum of the number of girls and boys\n    equation2 = Eq(girls + boys, 390)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    # We are interested in the number of girls\n    return solutions[girls]\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    for num in range(60):\n        if num % 4 == 3 and num % 5 == 4 and num % 6 == 5:\n            return num\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef solution():\n    m = 1\n    while True:\n        if sum_of_digits(m) == 5 * sum_of_digits(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters = 24\n    whole_number = (three_quarters * 4) / 3\n    return whole_number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - (2 / 100)\n    return k\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # January to April: $300/month * 4 months\n    jan_to_apr = 300 * 4\n    \n    # May to July: $250/month * 3 months\n    may_to_jul = 250 * 3\n    \n    # August to September: $750 in total for 2 months\n    aug_to_sep = 750\n    \n    # October to December: $300/month * 3 months\n    oct_to_dec = 300 * 3\n    \n    # Total spending from January to December\n    total_spending = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    \n    # Total months from January to December\n    total_months = 12\n    \n    # Average spending per month from January to December\n    average_spending = total_spending / total_months\n    \n    return average_spending\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n    drop_in_temperature = temperature_bottom - temperature_top\n\n    return drop_in_temperature\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    age_difference = father_future_age - tom_age\n\n    father_current_age = tom_age + age_difference\n\n    return father_current_age\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_fraction = 9 / 20\n    women_percentage = 30 / 100\n\n    men_count = total_passengers * men_fraction\n    women_count = total_passengers * women_percentage\n    children_count = total_passengers - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jordan, evie, emily = symbols('jordan evie emily')\n    \n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n    \n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n    \n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"0735\", \"%H%M\")\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = departure_time + journey_duration + walk_duration\n    return arrival_time.strftime(\"%H%M\")\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_for_six = 1.10\n    cost_for_twelve = cost_for_six * 2  # since 12 is twice the amount of 6\n    return cost_for_twelve\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    ans = []\n    for N in range(1, 200):\n        if sum(int(digit) for digit in format(N, 'b')) == 5 and \\\n           sum(int(digit) for digit in format(N, 'o')) == 9 and \\\n           sum(int(digit) for digit in format(N, '4')) == 5 and \\\n           sum(int(digit) for digit in format(N, '6')) == 8:\n            ans.append(N)\n    return ans\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    cost_per_crisp_bag = 16  # in pence\n    total_money = 2 * 100  # converting pounds to pence\n    num_crisp_bags = total_money // cost_per_crisp_bag\n\n    return num_crisp_bags\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    ans = 8.3 * 40\n    return ans\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are 2 choices for the first digit (2 or 3, cannot be 0 for a three-digit number)\n    first_digit_options = 2\n    # There are 3 choices for the second digit (0, 2, or 3, can be reused)\n    second_digit_options = 3\n    # There are 3 choices for the third digit (0, 2, or 3, can be reused)\n    third_digit_options = 3\n    # The total number of different three-digit numbers is the product of the options\n    total_numbers = first_digit_options * second_digit_options * third_digit_options\n\n    return total_numbers\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 4 == 0 and i % 3 == 0 and (i**0.5).is_integer():\n            return i\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    # Let's assume Chip originally had C acorns and Dale had D acorns.\n    # According to the problem after giving 14 acorns away, each one of them has the same amount.\n    # So, we can formulate this as C - 14 = D.\n    # Also, we know the total amount of acorns at first is 124, so C + D = 124.\n    # We can resolve these equations to find C and D.\n    # From first equation, we can derive that D = C - 14.\n\n    # Let's substitute D in the second equation with C - 14:\n    # C + (C - 14) = 124\n    # 2C - 14 = 124\n    # 2C = 124 + 14\n    # 2C = 138\n    # C = 138 / 2\n    # C = 69\n\n    # Chip originally had 69 acorns.\n    return 69\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "def solution():\n    from math import factorial\n\n    total_books = 6 + 2  # Total number of books\n    fiction_books = 6     # Total number of fiction books\n    comic_books = 2       # Total number of comic books\n\n    # Calculate the number of ways to arrange the books using permutations with identical items\n    ans = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n\n    return ans\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    return 85 // 5\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "def solution():\n    # Since we need at least how many prime numbers, we should use the smallest prime number to get the maximum count.\n    # The smallest prime number is 2.\n    \n    # Initialize the sum with the largest prime number less than or equal to 51,\n    # which is 47 (the sum will include at least one prime number).\n    sum_primes = 47\n    count = 1  # Counter for the number of prime numbers\n    \n    # Starting from the largest prime, subtract prime numbers until the sum is zero\n    while sum_primes < 51:\n        sum_primes += 2  # Add the smallest prime number (2)\n        count += 1  # Increase the count each time a prime is added to the sum\n    \n    return count\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')  # Define the unknown variable using sympy symbols\n    total_cost = 8 * x  # Total cost for 8 CDs is 8 times the cost of one CD\n\n    return total_cost  # Return the expression for the total cost\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 41)])\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    time = 1\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for i in range(100, 1000):\n        if i // 24 == 36 and i % 24 == 0:\n            return i\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    apples_used_kg = (750 + 1025) / 1000\n    remaining_apples_kg = total_apples_kg - apples_used_kg\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front = 9\n    amy_position_from_back = 15\n    total_people = people_in_front + amy_position_from_back\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # In the worst scenario, we could draw all balls of two colors first\n    max_balls_same_color = 5\n    # We need to draw one more ball to guarantee the 3rd color\n    balls_needed = 2 * max_balls_same_color + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17  # Initial height of the plant in cm\n    final_height = 65  # Height of the plant after 4 weeks in cm\n    time_period = 4  # Number of weeks\n\n    growth = final_height - initial_height  # Total growth in cm\n    growth_per_week = growth / time_period  # Growth per week in cm\n\n    return growth_per_week\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    favorite_position_from_left = 14\n    books_on_right = 6\n\n    total_books = favorite_position_from_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    pages_4 = 4\n    pages_3 = 3\n    \n    # Assume Oni wrote 3-page letters to all penpals initially.\n    initial_3_page_letters = total_penpals * pages_3\n    \n    # Calculate how many extra pages were written compared to the initial assumption.\n    extra_pages = total_pages - initial_3_page_letters\n    \n    # Calculate how many penpals received 4-page letters instead of 3-page\n    penpals_4_page = extra_pages // (pages_4 - pages_3)\n    \n    # Subtract penpals who received 4-page letters from the total to find those who received 3-page letters\n    penpals_3_page = total_penpals - penpals_4_page\n\n    return penpals_3_page\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n\n    not_prime_count = 0\n    for i in range(1, 21):\n        if not isprime(i):\n            not_prime_count += 1\n\n    return not_prime_count\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for the pieces of ribbon\n    longer_piece, shorter_piece = symbols('longer_piece shorter_piece')\n\n    # Creating the equations based on the problem description\n    equation1 = Eq(longer_piece, 2 * shorter_piece) # One piece is twice as long as the other\n    equation2 = Eq(longer_piece + shorter_piece, 12.75) # The total length of ribbon is 12.75 m\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (longer_piece, shorter_piece))\n\n    return solutions[longer_piece]\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1  # Assume original volume is 1 for simplicity\n    new_volume = (1/2) * (1/2) * (1/2) * original_volume  # Each dimension is halved\n    original_grams = 1200  # Given\n    new_grams = new_volume * original_grams  # The content is proportional to the volume\n    return new_grams\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi, lily, coins_received = symbols('gigi lily coins_received')\n\n    equation1 = Eq(gigi, 120 + coins_received)\n    equation2 = Eq(lily, 24 + coins_received)\n    equation3 = Eq(gigi, 3 * lily)\n\n    solutions = solve((equation1, equation2, equation3), (gigi, lily, coins_received))\n\n    return solutions[coins_received]\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # 100s place can't be 0 for a 3-digit number\n        for tens in range(0, 10):\n            for ones in range(1, 10, 2):  # Only odd numbers for 1s place\n                if hundreds + tens + ones == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # It takes 5 minutes to boil one egg\n    # Assuming we have at least one pot that can boil all 3 eggs simultaneously\n    least_time_to_boil_3_eggs = 5 # Since all 3 eggs can be boiled together in the same pot\n    \n    return least_time_to_boil_3_eggs\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    # We know that when Brian was 14, his father was 41\n    # their ages will reverse only when the units and tens place are switched\n    # Let 'y' be the number of years after Brian's 14th birthday when their\n    # ages reverse again\n\n    brian_age = 14\n    father_age = 41\n    age_difference = father_age - brian_age\n    \n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age).zfill(2) == str(father_age % 100).zfill(2)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    total_students = 35\n    capacity_per_cabin = 6\n    min_cabins_needed = (total_students + capacity_per_cabin - 1) // capacity_per_cabin\n    return min_cabins_needed\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    # Dan wants to take in less calories than yesterday, so calories_today < calories_yesterday\n    calories_today = symbols('calories_today')\n    inequality = calories_today < calories_yesterday\n\n    return inequality\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    # Perform inverse operations\n    before_second_day = (remaining_biscuits + 2) * 2\n    initial_biscuits = (before_second_day + 4) * 2\n    return initial_biscuits\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough = 11.16  # in kg\n    dough_per_cookie = 45 / 1000  # converting g to kg\n    dough_per_brownie = 150 / 1000  # converting g to kg\n    cookies = 240\n    brownies = 2\n\n    dough_used = (dough_per_cookie * cookies) + (dough_per_brownie * brownies)\n    dough_left = total_dough - dough_used\n\n    return dough_left\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n, a1, a2, d = symbols('n a1 a2 d')\n    # From the problem statement, we have:\n    # a1 + (a1+d) + (a1+2d) + (a1+3d) = 124\n    equation1 = Eq(4*a1 + 6*d, 124)\n    # Let the last term be 'a2'. Then:\n    # a2 + (a2-d) + (a2-2d) + (a2-3d) = 156\n    equation2 = Eq(4*a2 - 6*d, 156)\n    # Now the sum of the sequence (n/2) * (a1 + a2) = 210\n    equation3 = Eq(n/2 * (a1 + a2), 210)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (n, a1, a2, d))\n    return solutions[n]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    number_of_children = 5\n    wine_gums_per_child = total_wine_gums // number_of_children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern_length = 5  # The pattern 70, 71, 72, 71, 70 repeats every 5 numbers\n    values = [70, 71, 72, 71, 70]\n\n    index_in_pattern = (1004 - 1) % pattern_length  # -1 because index is 0-based\n    ans = values[index_in_pattern]\n\n    return ans\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms / 2) * (first_term + last_term)\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = 123 + 8765 - 432 - 7654\n    return ans\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    initial_amount = 100\n    daily_change = 5 - 8  # Deposit 5 and spend 8 results in -3 daily change\n    # Since the pattern repeats every 2 days, we divide 15 by 2 to find how many full cycles occurred\n    full_cycles = 15 // 2\n    remaining_days = 15 % 2  # To handle the case where there might be an extra day (odd number of days)\n    \n    amount_after_cycles = initial_amount + daily_change * full_cycles\n    # For the remaining day, which must be an even day since he deposits on odd days, no action is taken\n    final_amount = amount_after_cycles + (5 * remaining_days)  # Deposit 5 more if there is an extra day\n\n    return final_amount\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_money = 200\n    book_percentage = 0.15\n    dvd_percentage = 0.30\n\n    money_spent_on_book = initial_money * book_percentage\n    remaining_money_after_book = initial_money - money_spent_on_book\n    money_spent_on_dvd = remaining_money_after_book * dvd_percentage\n    remaining_money = remaining_money_after_book - money_spent_on_dvd\n\n    return remaining_money\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of chocolates and friends\n    chocolates, friends = symbols('chocolates friends')\n\n    # Equation 1: if each friend gets 18 chocolates, 41 are left\n    eq1 = Eq(chocolates - 18 * friends, 41)\n\n    # Equation 2: if each friend gets 23 chocolates, she is short of 34\n    eq2 = Eq(chocolates - 23 * friends, -34)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (chocolates, friends))\n\n    # Calculate how many pieces will be left if she gave each friend 20 pieces\n    remaining_chocolates = solutions[chocolates] - 20 * solutions[friends]\n\n    return remaining_chocolates\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    from itertools import combinations\n    from math import sqrt\n\n    # Define the conditions provided by the students\n    conditions = [\n        lambda x: x % 27 == 0,  # The number is a multiple of 27\n        lambda x: x % 7 == 0,   # The number is a multiple of 7\n        lambda x: sum([int(d) for d in str(x)]) == 17,  # The sum of the digits is 17\n        lambda x: sqrt(x).is_integer(),  # The number is a perfect square\n        lambda x: 89100 % x == 0  # The number is a factor of 89100\n    ]\n\n    # Check all 3-digit numbers\n    for number in range(100, 1000):\n        # Check each combination of three conditions\n        for condition_combination in combinations(conditions, 3):\n            if all(condition(number) for condition in condition_combination):\n                return number\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    initial_balloons = 40\n    blown_up = 22\n    burst = 3\n    remaining = initial_balloons - (blown_up - burst)\n    return remaining\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Let 'm' represent the number of push-ups Mulan can do\n    # The inequality representing that Mulan can do more push-ups than the best boy soldier (who can do 50)\n    # is m > 50\n    m = symbols('m')\n    inequality = m > 50\n\n    return inequality\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    # Total number of teams\n    total_teams = 32\n\n    # Each team plays with every other team exactly once\n    # Total number of games in such a tournament is given by the combination formula: C(n, 2) = n(n-1)/2\n    total_games = total_teams * (total_teams - 1) // 2\n\n    # Games already played\n    games_played = 87\n\n    # Games to be played to complete the tournament\n    games_left = total_games - games_played\n\n    return games_left\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    midway_number = (15 + 37) / 2\n    return midway_number\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    # Number of pails filled\n    num_pails = 4\n    # Amount of water in each pail\n    water_per_pail = 4  # litres\n    # Amount of water left after filling the pails\n    water_left = 7  # litres\n\n    # Calculate the original volume of water\n    original_volume = (num_pails * water_per_pail) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # from 1 to 8, there are 8 possible minimum values each kid can get\n    # assuming each gets a different number, we can start from 1 and keep adding the next integer\n    # we want to find the smallest maximum value, so we start distributing candies from 1\n    # until we get the number of candies to distribute as less or equal to 88\n    \n    candies = 88\n    min_candies = 0\n    for i in range(1, 9):\n        min_candies += i\n    \n    # subtract min_candies from candies\n    remaining_candies = candies - min_candies\n    \n    # the child who gets the most pieces will at least get 8 + remaining candies\n    # because we have already given out 1 to 8 candies to each child\n    return 8 + remaining_candies\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    ratio_girls = 7\n    ratio_boys = 9\n    difference = 16\n\n    # Let the number of girls be 7x and boys be 9x according to the ratio\n    # 9x - 7x = 16 (because there are 16 more boys than girls)\n    # Solve for x\n    x = difference / (ratio_boys - ratio_girls)\n\n    # Total pupils = girls + boys\n    total_pupils = (ratio_girls * x) + (ratio_boys * x)\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Tom takes 4 stones from stack B first\n    stack_B = 20 - 4\n    \n    # Jerry should make the number of stones in A and B equal, because in perfect play,\n    # where both players make optimal moves, the player who starts with a move that \n    # leaves an equal number of stones in both piles will win. This creates a situation\n    # where the other player will always be forced to leave unequal piles, allowing the\n    # first player to copy their moves and maintain equality until the end.\n    stones_to_take = 20 - stack_B\n    \n    # Jerry should take stones from stack A to keep the number of stones in both\n    # stacks equal, because no matter how many stones Tom takes from either stack\n    # on his next turn, Jerry can always take the same number from the other stack,\n    # ensuring that Tom can never win.\n    stack_to_take_from = 'A'\n\n    # Answer format\n    return f\"Jerry must take {stones_to_take} stone(s) from Stack {stack_to_take_from}.\"\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    # Calculate the expected sum without mistake\n    expected_sum = 37 * (2 * 1 + (37 - 1) * 3) // 2\n\n    # Find the difference caused by the mistake\n    difference = expected_sum - 2011\n\n    # Using the difference, calculate the person who made the mistake\n    person_mistake = difference // 6  # each mistake causes a difference of 2*3\n\n    return person_mistake\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # 2 meters is 200 cm\n    piece_length_cm = 6\n\n    num_pieces = stick_length_cm // piece_length_cm\n\n    return num_pieces\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Since the balls are divided into five consecutive natural numbers\n    # Let the middle number be x (the number of balls received by the middle student)\n    # Then the sum of the balls: (x-2) + (x-1) + x + (x+1) + (x+2) = 5x\n    # According to the question, the sum of the balls is 160, so 5x = 160\n    # Solving for x gives us the number of balls middle student received\n    x = 160 // 5\n\n    # The student with the most balls will have (x+2) balls\n    return x + 2\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(10):\n            M = 100 * i + j  # M is a three-digit number with a 0 in its tens place\n            S = i + j  # S is the sum of all digits in M\n            if M == 67 * S:\n                M_reversed = 10 * i + j * 100  # Reversed M\n                return M_reversed // S  # Divide reversed M by S and return the result\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n    # Using combinations formula nCr = n! / r!(n - r)!\n    ways_to_select = comb(total_balls, balls_to_select)\n    return ways_to_select\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n    \n    days = total_pages / pages_per_day\n    \n    return int(days)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    score_for_correct = 5\n    score_for_wrong = -3\n    total_score = 52\n    \n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * score_for_correct + wrong * score_for_wrong == total_score:\n            return correct\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # We are going to use the pattern in the powers of the last digit of 8\n    # The pattern is: 8, 4, 2, 6, and then it repeats every 4 powers\n    ones_digit_pattern = [8, 4, 2, 6]\n\n    # Find the remainder of 30 when divided by 4 to get the position in the pattern\n    remainder = 30 % 4\n\n    # We subtract 1 because lists in python are zero indexed\n    ones_digit = ones_digit_pattern[remainder - 1]\n\n    return ones_digit\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    # Start with the fraction that needs to be decomposed\n    fraction = (13, 10) # (numerator, denominator)\n    \n    # The process to find 'a' is to perform an integer division by its denominator.\n    # 'a' will be the integer part of the division.\n    a = fraction[0] // fraction[1]\n    \n    # The remainder will be used to find the next fraction for '1/(b + 1/c)'.\n    # The new numerator is the previous denominator and the new denominator is the remainder.\n    remainder = fraction[0] - a * fraction[1]\n    fraction = (fraction[1], remainder)\n    \n    # Now, 'b' can be found using the same method.\n    b = fraction[0] // fraction[1]\n    remainder = fraction[0] - b * fraction[1]\n    fraction = (fraction[1], remainder)\n    \n    # Lastly, 'c' is simply the remaining fractional part flipped.\n    c = fraction[0] // fraction[1]\n    \n    # Calculate the final answer based on a, b, and c.\n    ans = a + 2*b + 3*c\n    return ans\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    difference = 5\n    last_term = 155\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    # Initialize the number of peaches and the number of days\n    peaches = 100\n    days = 0\n    # Start counting days and subtracting peaches; each day one more peach than the day before\n    while peaches > days:\n        days += 1\n        peaches -= days\n    return days\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 21):\n        if i % 6 == 1:\n            total_sum += i\n    return total_sum\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150  # result of 150 divided by the box number\n\n    # Solve for the box number\n    box_number = right_side / left_side\n    return box_number\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_solution_weight = 600  # Weight of the sugar solution\n    sugar_concentration = 0.48   # Sugar concentration in the solution\n    \n    sugar_weight = total_solution_weight * sugar_concentration\n    water_weight = total_solution_weight - sugar_weight\n    \n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    ans = sum([9] * 5)\n    return ans\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n            \nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    fractions_sum = (19 + (4/5)) + (199 + (4/5)) + (1999 + (4/5)) + (19999 + (4/5)) + (199999 + (4/5))\n    return fractions_sum\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n    eq = Eq(1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a, 1370)\n    \n    result = solve(eq)\n    abcd = 1000*result[a] + 100*result[b] + 10*result[c] + result[d]\n\n    return abcd\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction = 5 / 8\n    result = total_pence * fraction\n    return result\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    total_age_now = janice_age + sister_age\n\n    years = (35 - total_age_now)\n\n    return years\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    average_marks = 75\n    total_tests = 3\n    total_marks_two_tests = 172\n    \n    total_marks_all_tests = average_marks * total_tests\n    marks_remaining_test = total_marks_all_tests - total_marks_two_tests\n    \n    return marks_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dad, son = symbols('dad son')\n    \n    equation1 = Eq(dad - 6, 5 * (son - 6))\n    equation2 = Eq(dad + son, 78)\n    \n    solutions = solve((equation1, equation2), (dad, son))\n    \n    return solutions[dad]\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # y, y+1, y+2 are the ages of the youngest three dwarfs\n    # Their sum is y + (y + 1) + (y + 2) = 42\n    # Solving for y gives us the age of the youngest dwarf\n    y = (42 - 3) / 3  # Subtract 3 because we have added 1 and 2, and then divide by 3\n\n    # The ages of the dwarfs form an arithmetic sequence with a common difference of 1.\n    # The middle term (4th dwarf) is (y+3), given the consecutive nature of their ages.\n    middle_dwarf_age = y + 3\n\n    # The ages of the oldest three dwarfs are (middle_dwarf_age+1), (middle_dwarf_age+2), and (middle_dwarf_age+3)\n    # Their sum is 3*middle_dwarf_age + 6, adding 1+2+3 for the consecutive years\n    oldest_three_sum = 3 * middle_dwarf_age + 6\n\n    return oldest_three_sum\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        for j in range(1, i + 1):\n            ans += j / i\n        for j in range(i - 1, 0, -1):\n            ans += j / i\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n    \n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each type of ball price\n    football_price, volleyball_price = symbols('football_price volleyball_price')\n\n    # First situation: 1 football and 2 volleyballs cost $60\n    equation1 = Eq(football_price + 2 * volleyball_price, 60)\n\n    # Second situation: 2 footballs leave her with $16 back from $60\n    equation2 = Eq(2 * football_price, 60 - 16)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (football_price, volleyball_price))\n\n    return solutions[volleyball_price]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from statistics import mean, median, mode\n    from itertools import permutations\n    \n    for ages in permutations(range(1, 20), 5):\n        if mean(ages) == 9 and median(ages) == 8 and mode(ages) == 7 and (max(ages) - min(ages)) == 6:\n            return sorted(ages)[-2]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from fractions import Fraction\n    \n    # Let's denote:\n    # d - number of fruit drops, l - number of lollipops, m - number of milk chocolates, t - total number of sweets\n    # From the problem we know that d = 6, and we have two fractions:\n    # d is 2/7 of m, and m is 3/4 of t. \n    \n    # Since d = 2/7 * m, we can find m by rearranging the terms: m = d / (2/7)\n    m = 6 / Fraction(2, 7)\n    \n    # Since m is 3/4 of t, then t = m / (3/4)\n    t = m / Fraction(3, 4)\n    \n    # The solution needs to be an integer since you can't have a fraction of a sweet\n    return int(t)\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    difference = 630\n    whole_number = 1000\n\n    ans = whole_number - difference\n    return ans\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    from itertools import permutations\n    \n    # We know all digits are different, so let's start with the known digits from the clues.\n    digits = '170327453541'\n    \n    # All digits are unique, so we make a set to remove duplicates and then back to list.\n    unique_digits = list(set(digits))\n    \n    # We now create all 4-digit permutations from the unique digits.\n    for p in permutations(unique_digits, 4):\n        # Convert the tuple to a string number.\n        num = ''.join(p)\n        # Check the conditions based on John's answers:\n        # 1703: Two digits and their positions are correct.\n        # 2745: Two digits are correct but their positions are wrong.\n        # 3541: All digits are correct but all of their positions are wrong.\n        if (num[0] == '1' or num[1] not in '7' or num[2] not in '0' or num[3] not in '3') and \\\n           (num[0] not in '2' or num[1] not in '7' or num[2] not in '4' or num[3] not in '5') and \\\n           (num[0] not in '3' and num[1] not in '5' and num[2] not in '4' and num[3] not in '1'):\n            return num\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    # Calculate the sum of the first 20 natural numbers\n    n = 20\n    sum_n = (n * (n + 1)) // 2\n    \n    # Apply the formula: 1Â³+2Â³+3Â³+......+nÂ³ = (1+2+3+......+n)Â²\n    ans = sum_n**2\n\n    return ans\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n\n    num_books = 3  # There are three books to arrange\n\n    # The number of different arrangements is the factorial of the number of books\n    ans = factorial(num_books)\n\n    return ans\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for lineup in permutations('ABCDE'):\n        if lineup[0] != 'A' and lineup[4] != 'A':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    num_rounds = math.ceil(math.log(num_people, 2))\n    return num_rounds\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # number of pink flowers\n    pink = 3\n    \n    # pink = yellow - 7\n    yellow = pink + 7\n    \n    # red = 3 * yellow\n    red = 3 * yellow\n    \n    # total number of red and yellow flowers\n    total_flowers = red + yellow\n    \n    return total_flowers\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for boys and girls\n    b, g = symbols('b g')\n\n    # Equation for the morning ratio: b = 1.5g\n    # This means boys are 50% more than girls\n    eq1 = Eq(b, 1.5 * g)\n\n    # In the afternoon 12 boys and girls joined\n    # b + 12 boys and g + 12 girls\n    # The ratio becomes 19:14\n    eq2 = Eq((b + 12) / (g + 12), 19/14)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (b, g))\n\n    boys_morning = solutions[b]\n    girls_morning = solutions[g]\n\n    # Total number of children in the Botanic Gardens in the afternoon\n    total_afternoon = (boys_morning + 12) + (girls_morning + 12)\n\n    return total_afternoon\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay = timedelta(minutes=30)\n    actual_arrival_time = scheduled_time + delay\n    return actual_arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    initial_ratio = Eq(apples / oranges, 3 / 8)\n    new_ratio = Eq((apples - 1) / oranges, 1 / 3)\n    \n    solutions = solve((initial_ratio, new_ratio), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    for pencils in range(11):\n        notebooks = 10 - pencils\n        if pencils * 9 + notebooks * 3 == 48:\n            return pencils\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    \n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    v_count = 0\n    for i in range(1, 10):  # hundreds digit, 1-9\n        for j in range(0, 10):  # ones digit, 0-9\n            if i > j:\n                # j should be less than both i and k, so we count from 0 to j for tens\n                v_count += j\n            else:\n                # j is the maximum digit so far, so we count tens less than j but not including i itself\n                for k in range(0, j):\n                    if k != i:\n                        v_count += 1\n    return v_count\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    first_floor_rows = 9\n    seats_per_row = 36\n    total_students = 500\n\n    first_floor_capacity = first_floor_rows * seats_per_row\n    second_floor_students = total_students - first_floor_capacity\n\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    previous_term = 56\n    ratio = previous_term // 28\n    next_term = previous_term * ratio\n    return next_term\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i + 1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    # The problem described is an example of a derangement problem\n    # also known as a permutation where no element appears in its original position (subfactorial).\n    n = 6  # Number of students (and thus number of exercise books)\n    \n    # Using formula for derangement: !n = (n-1)(!(n-1) + !(n-2)), with base cases !0 = 1 and !1 = 0\n    # Recursive function to calculate the subfactorial of n\n    def subfactorial(k):\n        if k == 0:\n            return 1\n        if k == 1:\n            return 0\n        return (k - 1) * (subfactorial(k - 1) + subfactorial(k - 2))\n    \n    # Number of ways each person can get an exercise book not their own is the subfactorial of n\n    return subfactorial(n)\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n    \n    for i in range(1, 51):\n        while i % 2 == 0:\n            count_2 += 1\n            i /= 2\n        while i % 5 == 0:\n            count_5 += 1\n            i /= 5\n    \n    ans = min(count_2, count_5)\n    \n    return ans\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_concentration = 0.65\n\n    sugar_weight = total_weight * sugar_concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    starting_height = 12\n    climb_up = 23\n    climb_down = 31\n    climb_up_again = 17\n\n    final_height = starting_height + climb_up - climb_down + climb_up_again\n\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    # Let's denote:\n    # h - the number of cards Helen has after several rounds.\n    # o - the number of cards Oliver has after several rounds.\n    # x - the number of rounds they played.\n    \n    # From the problem statement, we have:\n    # h + o = 18 + 22 = 40 (The total number of cards remains the same)\n    # h = o + 10 (Helen has 10 more cards than Oliver after several rounds)\n    \n    # We can replace o from the first equation with h from the second equation:\n    # h + (h - 10) = 40\n    # 2h - 10 = 40\n    # 2h = 50\n    # h = 25\n    \n    # Now we calculate the number of cards Helen has after several rounds:\n    h = 25\n    \n    return h\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    from math import log10\n\n    N = 5**100\n    num_digits = int(log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the first number in the sequence be x, then the consecutive even numbers are:\n    # x, x+2, x+4, x+6, x+8, and x+10\n\n    # The sum of these numbers is:\n    # x + (x + 2) + (x + 4) + (x + 6) + (x + 8) + (x + 10) = 510\n    # 6x + 30 = 510\n    # 6x = 480\n    # x = 80\n\n    # Thus, the consecutive even numbers are:\n    # 80, 82, 84, 86, 88, and 90\n\n    # The mean of these numbers is their sum divided by their count:\n    # Mean = (80 + 82 + 84 + 86 + 88 + 90) / 6 = 510 / 6 = 85\n\n    # The median of these numbers is the average of the two middle numbers:\n    # In this case, the middle numbers are 84 and 86\n    # Median = (84 + 86) / 2 = 170 / 2 = 85\n\n    # The difference between the mean and the median is:\n    # Difference = Mean - Median = 85 - 85 = 0\n    # Therefore, the difference between the mean and the median of the numbers is 0.\n\n    return 0\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    # After 900g of mangoes were given away\n    equation1 = Eq(mangoes - 900, strawberries/2)\n\n    # There were 448g more mangoes than strawberries\n    equation2 = Eq(mangoes, strawberries + 448)\n\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the smallest number be x\n    # Then the next numbers would be x+1, x+2, x+3, and x+4\n    # The sum of these 5 numbers is 40\n    # x + (x + 1) + (x + 2) + (x + 3) + (x + 4) = 40\n\n    # Simplifying the equation, we get 5x + 10 = 40\n    # 5x = 40 - 10\n    # 5x = 30\n    # x = 30 / 5\n    # x = 6\n\n    # Smallest number is x, which is 6\n    return 6\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    # Since 1 is neither prime nor composite, we subtract it\n    composite_numbers = total_numbers - prime_numbers - 1\n    \n    return composite_numbers\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(int(digit) for digit in str(year)) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    given_away = 8\n    sweets_left = total_sweets - given_away\n    return sweets_left\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '3', '5', '2']\n    max_number = int(''.join(sorted(digits, reverse=True)))\n    return max_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    number = 4000000 + 400000 + 4\n    return number\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    digits = [0, 1, 3, 4, 6, 8, 9]\n    multiples_of_9 = []\n\n    # Function to check if the number is a multiple of 9\n    def is_multiple_of_9(num):\n        return sum(int(digit) for digit in str(num)) % 9 == 0\n\n    # Function to generate numbers\n    def generate_numbers(current_number, available_digits):\n        if len(current_number) == 5:\n            number = int(''.join(map(str, current_number)))\n            if number >= 10000 and is_multiple_of_9(number):\n                multiples_of_9.append(number)\n        else:\n            for digit in available_digits:\n                new_number = current_number + [digit]\n                new_available_digits = available_digits - {digit}\n                generate_numbers(new_number, new_available_digits)\n\n    generate_numbers([], set(digits))\n\n    # Sorting the multiples of 9\n    multiples_of_9.sort()\n\n    M = multiples_of_9[-1]  # Maximum multiple of 9\n    N = multiples_of_9[0]   # Minimum multiple of 9\n\n    return (M - N) // 9\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n\n    difference_in_addends = incorrect_addend - correct_addend\n    correct_sum = incorrect_sum - difference_in_addends\n\n    return correct_sum\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    # Calculate the total amount of salt in the mixture\n    salt_in_30_percent_solution = 30 * 0.30\n    salt_in_20_percent_solution = 20 * 0.20\n    total_salt = salt_in_30_percent_solution + salt_in_20_percent_solution\n    \n    # Calculate the total weight of the current mixture\n    total_mixture_weight = 30 + 20\n    \n    # Set up the equation to find the amount of water needed\n    # Let x be the grams of water to be added\n    # The final salt concentration should be 10%\n    # (total_salt) / (total_mixture_weight + x) = 10%\n    # Solve this equation for x\n    x = (total_salt - 0.10 * total_mixture_weight) / 0.10\n    \n    return x\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    # The 4th term (a4) and the 12th term (a12) are given\n    a4 = 39\n    a12 = 57\n    # The n-th term of an arithmetic sequence is given by an = a1 + (n - 1)d,\n    # where a1 is the first term and d is the difference between terms\n    # a4 = a1 + 3*d ==> (1)\n    # a12 = a1 + 11*d ==> (2)\n    # Subtract (1) from (2): a12 - a4 = (a1+11*d) - (a1 + 3*d) = 8*d\n    # Solve for d: d = (a12 - a4) / 8\n    d = (a12 - a4) / 8\n    # Substitute the value of d back into (1) to solve for a1\n    # a1 = a4 - 3*d\n    a1 = a4 - 3 * d\n    return a1\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    box = symbols('box')\n\n    equation = Eq(box * box + box, 380)\n\n    solutions = solve(equation, box)\n\n    # Only the positive integer solution is valid\n    ans = [s for s in solutions if s.is_integer and s > 0][0]\n\n    return ans\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # m/min\n    vicky_speed = 250  # m/min\n    race_distance = 3000  # metres\n\n    johnson_time = race_distance / johnson_speed  # time for Johnson to complete the race\n    vicky_time = race_distance / vicky_speed  # time for Vicky to complete the race\n\n    time_difference = vicky_time - johnson_time\n\n    return time_difference\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    num1 = 3.2\n    num2 = 5.6\n    average = (num1 + num2) / 2\n    return average\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n\n    # Get list of prime numbers in the range 1 to 20\n    prime_numbers = list(primerange(1, 21))\n    # Total number of primes in the range\n    num_primes = len(prime_numbers)\n    # Total numbers in the range 1 to 20\n    total_numbers = 20\n    \n    # Calculate the proportion of prime numbers\n    proportion = num_primes / total_numbers\n\n    return round(proportion, 2)\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # According to the Pigeonhole Principle, to ensure at least 3 cards have the same number,\n    # we consider the worst-case scenario where we draw the maximum number of cards without getting 3 of the same number.\n    # Since there are 13 different numbers, the worst case is that we draw 2 cards of each number without getting 3 of the same.\n    # After that, the next card we draw will ensure that we have 3 cards with the same number.\n\n    # 2 cards of each number for all 13 numbers\n    worst_case = 2 * 13\n    # The next draw will ensure we have 3 of the same number, so we add 1\n    ans = worst_case + 1\n\n    return ans\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    total_balls = 80 + 40 + 30\n    # Worst case for getting 29 balls of one color: we could grab all balls of the other two colors first\n    worst_case_for_29 = 40 + 30\n    # To ensure we get 29 of one color, we need one more\n    balls_for_29 = worst_case_for_29 + 1\n\n    # Worst case for getting 28 balls of another color: we could grab all 80 blue balls, and then just to ensure the 28, we need all 29 of the white balls \n    worst_case_for_28 = 80 + 29\n    # To ensure we get 28 of another color, we need 27 more (because we already have 1 from the previous step)\n    balls_for_28 = worst_case_for_28 + (28 - 1)\n\n    # Worst case for getting 10 balls of the last color: we need all the other balls first\n    worst_case_for_10 = worst_case_for_28 + 28\n    # To ensure we get 10 of last color, we need 9 more (because we already have 1 from the previous 28)\n    balls_for_10 = worst_case_for_10 + (10 - 1)\n\n    ans = balls_for_10\n    return ans\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    numbers = [12, 4, 6, 4, 2, 9, None, 7]\n    mean_value = 8\n    total_numbers = len(numbers)\n    sum_with_missing = mean_value * total_numbers\n    sum_of_known_numbers = sum(filter(lambda x: x is not None, numbers))\n    missing_number = sum_with_missing - sum_of_known_numbers\n    return missing_number\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n    combinations = len(notebook_prices) * len(calendar_prices)\n    return combinations\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    return 546 - 287\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume transferred from each bottle\n    x = symbols('x')\n\n    # Initial amounts of lime in each bottle\n    lime_in_A = 5 * 0.10\n    lime_in_B = 3 * 0.20\n\n    # New volume of each bottle after x liters are transferred\n    new_volume_A = 5 - x + x\n    new_volume_B = 3 - x + x\n    \n    # Amount of lime in each bottle after the transfer\n    lime_after_transfer_A = lime_in_A - 0.10 * x + 0.20 * x\n    lime_after_transfer_B = lime_in_B + 0.10 * x - 0.20 * x\n\n    # Concentration in each bottle after transfer should be same, so set them equal\n    equation = Eq(lime_after_transfer_A/new_volume_A, lime_after_transfer_B/new_volume_B)\n\n    # Solving the equation for x\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    # The sum of all whole numbers from 1 to 50 is an arithmetic series\n    # with the first term a1 = 1 and the last term a50 = 50.\n    # This sum is given by: S = (n/2) * (a1 + a50)\n    # We already know this sum S = 1275.\n\n    # Now we want to find the sum of all whole numbers from 2 to 51,\n    # which is the same series but with both the first and last terms incremented by 1.\n    # So the new first term a2 = 2 and the new last term a51 = 51.\n    # Since the other 49 terms are unchanged, the new sum can be found by adding 1 to each term of the original sum\n    # (which is equivalent to adding 50 in total, because there are 50 terms).\n\n    # As the sum of the original series is 1275, we just add 50 to it to find the sum of the new series.\n    new_sum = 1275 + 50\n\n    return new_sum\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    # Calculate the number of full rows needed\n    full_rows = students // tables_per_row\n\n    # Check if we need an additional row for remaining students\n    if students % tables_per_row != 0:\n        full_rows += 1\n\n    return full_rows\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # 8 students including H as a placeholder for the middle position\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n    \n    for perm in permutations(students):\n        # Find position of A, B, and C\n        position_A = perm.index('A')\n        position_B = perm.index('B')\n        position_C = perm.index('C')\n        position_D = perm.index('D')\n        position_E = perm.index('E')\n        position_F = perm.index('F')\n        position_G = perm.index('G')\n        \n        # Check C is in the middle of A and B, not necessarily next to each other\n        if min(position_A, position_B) < position_C < max(position_A, position_B):\n            # Check D and E are next to each other\n            if abs(position_D - position_E) == 1:\n                # Check F and G are next to each other\n                if abs(position_F - position_G) == 1:\n                    count += 1\n\n    # Since H is a placeholder and doesn't actually represent a student,\n    # we divide the final count by 2 because every valid permutation will have\n    # two versions (one with A on the left of C and one with A on the right of C).\n    return count // 2\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    coins = [50, 20, 10, 5]\n\n    for lost_coin in coins:\n        if (total_amount - lost_coin) == 2 * (total_amount - (total_amount - lost_coin)):\n            return lost_coin\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    total = 0\n    pattern = '123'\n    for i in range(1, 124):\n        total += int(pattern * i)\n\n    hundreds_digit = (total // 100) % 10\n\n    return hundreds_digit\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Given ratio of the length to breadth of the painting\n    ratio_length_to_breadth = 5 / 2\n\n    # Length of the painting\n    length_painting = 90\n\n    # Length of the lego is 70.5 cm smaller than the length of the painting\n    length_lego = length_painting - 70.5\n\n    # Calculate breadth of the lego maintaining the same proportion using the ratio\n    breadth_lego = length_lego / ratio_length_to_breadth\n\n    return breadth_lego\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    both = like_bananas + like_apples - total_people\n\n    return both\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 1.10  # 110p converted to pounds\n\n    total_price = cake_price + milk_price\n    to_pay = total_price - voucher\n\n    return round(to_pay, 2)\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_multiplier = 1.25\n    normal_hours = 8\n    total_hours = 10\n\n    overtime_hours = total_hours - normal_hours\n    overtime_rate = normal_rate * overtime_multiplier\n    \n    total_pay = (normal_hours * normal_rate) + (overtime_hours * overtime_rate)\n\n    return total_pay\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200\n    jaan_speed = 8\n\n    jaan_time = jaan_distance / jaan_speed\n    kane_distance = jaan_distance - 12.5\n\n    kane_speed = kane_distance / jaan_time\n\n    return kane_speed\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35 / 100 * 60\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):  # two-digit numbers range from 10 to 99\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    # Solve the system of equations for the rates\n    from sympy import symbols, Eq, solve\n\n    # Let J, R, and P be the rates at which John, Raj, and Pete work per minute\n    J, R, P = symbols('J R P')\n    \n    # Together, they can finish the job in 60 minutes, so their combined rate is 1 job/60 min\n    equation1 = Eq(J + R + P, 1/60)\n    \n    # John and Raj take 72 minutes (1 hour 12 mins) to finish the job, so their combined rate is 1 job/72 min\n    equation2 = Eq(J + R, 1/72)\n    \n    # Raj and Pete take 90 minutes (1 hour 30 mins) to finish the job, so their combined rate is 1 job/90 min\n    equation3 = Eq(R + P, 1/90)\n    \n    # Solve for J, R, and P\n    solutions = solve((equation1, equation2, equation3), (J, R, P))\n    \n    # The time (in minutes) for Raj to complete the job alone is the reciprocal of Raj's rate\n    time_for_raj = 1 / solutions[R]\n\n    return time_for_raj\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols\n    younger, elder = symbols('younger elder')\n\n    # define the equations based on the problem statement\n    equation1 = Eq(younger + elder, 42) # sum of their current ages\n    equation2 = Eq(younger - (elder - younger), elder / 2) # a few years ago condition\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (younger, elder))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # The 99-digit number is a repetition of \"928\" 33 times\n    repeated_digit_string = \"928\" * 33\n    \n    # Convert the string to an actual number\n    long_number = int(repeated_digit_string)\n    \n    # Find the remainder when dividing by 9\n    remainder = long_number % 9\n    \n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # Take all the balls that guarantee not having three of the same color first.\n    # That would be taking 2 of each color:\n    # 2 white, 2 blue, 2 green, and 2 orange = 2 * 4 = 8 balls.\n    # The next ball you take, regardless of the color, will make 3 of a single color.\n    return 8 + 1\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(0, 10):\n            original_number = 10 * tens + ones\n            new_number = 10 * ones + tens\n            if new_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    matches = 30\n    total_matches = lambda n: n * (n - 1)\n    teams = 2\n    while total_matches(teams) < matches:\n        teams += 1\n    return teams\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    lcm, remainder = solve_congruence(*congruences)\n    return remainder\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    boxes_for_14kg = 4\n    total_kg = 66.5\n    boxes_for_66_5kg = (total_kg / 14) * boxes_for_14kg\n    return int(boxes_for_66_5kg)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let x be the number of years later when their sum of ages will be 40\n    # Since their current sum of ages is 34 and every year each of them gets older by 1 year,\n    # after x years, the sum of their ages will be 34 + 2x (because there are two people)\n    # According to the problem, we want to find x such that:\n    # 34 + 2x = 40\n    # Solving for x gives us:\n    x = (40 - 34) / 2\n    return int(x)\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    # Let x be the length of the rope and y be the circumference of the tree.\n    # From the question, we have two equations:\n    # 10y - x = 3 ...(1)\n    # 12y - x = -3 ...(2)\n    # We can solve these equations to find the value of y.\n\n    # Subtract equation (1) from equation (2) to eliminate x.\n    # 12y - 10y = -3 - 3\n    # 2y = -6\n    # y = -6 / 2\n    y = -3\n    \n    # Now, use the value of y to find x using either equation (1) or (2).\n    # Let's use equation (1).\n    # 10 * (-3) - x = 3\n    # -30 - x = 3\n    # -x = 3 + 30\n    # -x = 33\n    # x = -33\n    x = -33\n\n    # Finally, we need to find out how many meters are left after 8 turns.\n    # 8 turns means 8 * y meters of the rope is used.\n    # Leftover rope will be x - 8 * y\n    leftover = x - 8 * y\n\n    return leftover\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    x, y, z = solutions[x], solutions[y], solutions[z]\n    \n    return x + y + z\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # According to the Pigeonhole Principle, if n pigeons are to be placed into m pigeonholes\n    # and n > m, then at least one pigeonhole must contain more than one pigeon.\n    # In this case, if we have 11 countries (pigeonholes) and we want to ensure that at least\n    # 5 participants (pigeons) come from the same country, we consider the worst-case scenario\n    # where each of the 11 countries have 4 participants, which doesn't satisfy the condition.\n    # So we add one more participant to force at least one country to have a 5th participant.\n    \n    # The maximum number of participants that can be distributed without any country\n    # having 5 participants is 11 countries * 4 participants each\n    max_participants_without_5 = 11 * 4\n    \n    # To ensure that at least one country has 5 participants,\n    # we add one more participant to trigger the Pigeonhole Principle.\n    participants_to_ensure_5 = max_participants_without_5 + 1\n    \n    return participants_to_ensure_5\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    kitty, nora = symbols('kitty nora')\n    \n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n    \n    solutions = solve((equation1, equation2), (kitty, nora))\n    \n    return solutions[kitty]\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):  \n        # p is a tuple like (0, 1, 2, 3) where each number represents a different letter\n        A, B, C, D = p\n        # Assume the original conditions provide an equation like ABCD + ABCD = DDCBA\n        # Now we need to fill in the above digits such that the above equation satisfies\n        num1 = A * 1000 + B * 100 + C * 10 + D\n        num2 = D * 10000 + D * 1000 + C * 100 + B * 10 + A\n        if num1 + num1 == num2:\n            return A + B + C + D\n            \nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = symbols('total_money')\n    spent = 3/7 * total_money\n    not_spent = total_money - spent\n    equation = Eq(spent - not_spent, 12)\n    \n    total_money_solution = solve(equation, total_money)\n    spent_on_bag = 3/7 * total_money_solution[0]\n\n    return spent_on_bag\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    number = 111\n    dots = 7\n    subtracted_sum = sum(range(1, dots + 1))\n    result = number - subtracted_sum\n    return result\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    # Let x be the number thought of\n    # According to the problem, the equation is 2*x + 6 = 28\n    # Rearrange the equation to find x\n    x = (28 - 6) / 2\n    \n    return x\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    ans = 2018 * 17\n    return ans\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5  # Calculate the number of terms\n    result = (1/6) * n * (n+1) * (2*n+1) * (5**2)  # Apply the formula for the sum of squares\n    return int(result)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    # Let a, b, c represent the number of toys made by factory A, B, and C respectively.\n    # Given:\n    # a + b + c = 659 (total toys made by all factories)\n    # a + b = 447 (toys made by factory A and B)\n    # b + c = 335 (toys made by factory B and C)\n\n    # Using the given information, we can solve for b (toys made by factory B) as follows:\n    # Subtract the (a + b) equation from the (a + b + c) equation:\n    # (a + b + c) - (a + b) = 659 - 447\n    # c = 212\n\n    # Now substitute c in (b + c) equation:\n    # b + 212 = 335\n    # b = 335 - 212\n    b = 335 - 212\n\n    # Therefore, factory B made\n    return b\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Assume the youngest dwarf's age is x years.\n    # Then, ages of the youngest three dwarfs will be x, x+1, x+2\n    # and their ages sum up will be (x) + (x+1) + (x+2) = 42\n\n    # Solve the equation for x\n    x = (42 - 3) // 3  # subtract 3 (1 for each year added) and divide by 3 (number of dwarfs)\n\n    # Ages of the oldest three dwarfs will be x+4, x+5, x+6\n    # because there are 3 years gap until the age of the 4th dwarf which is not in the youngest three\n    sum_of_oldest_three = (x+4) + (x+5) + (x+6)\n\n    return sum_of_oldest_three\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    # Let x be the total number of stickers Mr. Ya has.\n    # Let y be the number of pupils.\n    # According to the problem:\n    # x = 13y + 190 (1)\n    # x = 17y + 50  (2)\n    # Subtracting equation (2) from (1) gives us:\n    # 0 = -4y + 140\n    # This simplifies to y = 140 / 4\n    y = 140 // 4  # Using integer division since y must be an integer (number of pupils cannot be fractional)\n\n    # Substitute the value of y back into equation (1) to get the value of x (total number of stickers)\n    x = 13 * y + 190  # We can use either equation (1) or (2), the result will be the same\n\n    return x\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    \n    months_needed = debt / monthly_salary\n    \n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    num = 72\n    factors = {i for i in range(1, num // 2 + 1) if num % i == 0}\n    factors.add(num)\n    return sum(factors)\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    avg = sum(numbers) / len(numbers)\n    return avg\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file, storybook = symbols('file storybook')\n\n    equation1 = Eq(7 * file + 4 * storybook, 108)\n    equation2 = Eq(5 * file + 3 * storybook, 80)\n\n    solutions = solve((equation1, equation2), (file, storybook))\n\n    total_cost = solutions[file] + solutions[storybook]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_tray = 1\n    additional_sausages = 21\n\n    total_initial_sausages = initial_trays * initial_mean\n    total_sausages_after = total_initial_sausages + additional_sausages\n    total_trays_after = initial_trays + additional_tray\n    \n    new_average = total_sausages_after / total_trays_after\n    return new_average\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    total_pupils = Eq(girls + boys, 500)\n    girl_boy_difference = Eq(girls, boys + 30)\n    \n    solutions = solve((total_pupils, girl_boy_difference), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    # iterate through possible hundreds digit (1-9)\n    for hundreds in range(1, 10):\n        # iterate through possible ones digit (1-9)\n        for ones in range(1, 10):\n            # iterate through possible tens digit (0-9)\n            for tens in range(0, 10):\n                # check if it's a V-number\n                if tens < hundreds and tens < ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    # Convert mixed fraction to improper fraction\n    numerator = 3 * 2 + 1\n    denominator = 2\n    improper_fraction = numerator / denominator\n\n    # The reciprocal of 1/4\n    reciprocal = 4 / 1\n\n    # Division of fractions is multiplication with its reciprocal\n    ans = improper_fraction * reciprocal\n\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # Speed = distance / time\n    # For the first bridge:\n    # Let x be the length of the second bridge\n    # The train covers its length and the length of the bridge in 20 seconds\n    speed = (137 + 263) / 20\n\n    # For the second bridge:\n    # It takes 27 seconds to cover its own length and the length of the second bridge\n    # 137 + x = speed * 27\n    # Solving for x gives us the length of the second bridge\n    second_bridge_length = (speed * 27) - 137\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani_money = 456\n    brenda_money = 528\n    total_money = rani_money + brenda_money\n    money_to_be_shared = total_money // 2\n    money_brenda_must_give = brenda_money - money_to_be_shared\n\n    return money_brenda_must_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    ans = 8.8 + 5.6\n    return ans\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    ans = 2014 * 40\n    return ans\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n    total_balls = 125\n    equation1 = Eq((2/5) * blue, (3/5) * red)\n    equation2 = Eq(blue + red, total_balls)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    difference = solutions[blue] - solutions[red]\n\n    return difference\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial\n\ndef solution():\n    # The number of ways to give out the first book\n    ways_to_distribute_first_book = 3\n\n    # The number of ways to distribute the remaining 6 books\n    # among 3 students with no restrictions is 3^6\n    ways_to_distribute_rest_of_books = 3 ** 6\n\n    # Total number of ways = ways to distribute first book * ways to distribute rest\n    total_ways = ways_to_distribute_first_book * ways_to_distribute_rest_of_books\n\n    return total_ways\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watch, handbag = symbols('watch handbag')\n\n    # 3 watches + 5 handbags cost $915\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    # 4 watches + 2 handbags cost $632\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    # 2 watches + 2 handbags total cost\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    pieces = 88\n    children = 8\n    \n    # Since each child gets a different number of pieces and each gets at least one,\n    # we'd start by giving each child one piece of candy.\n    pieces -= children\n    \n    # Now we'll distribute the remaining candies in a decreasing manner,\n    # such that the child with the most pieces gets the least amount possible.\n    # For the child who gets the most pieces, we give him (children - 1) pieces firstly,\n    # because the second one will get at least (children - 2) candies due to the different condition, etc.\n    counts = list(range(children - 1, 0, -1))\n    \n    # Now distribute the remaining candies to the children with the most pieces\n    for i in range(pieces):\n        counts[i % (children - 1)] += 1\n    \n    # The first child (index 0) will have the most candies\n    max_pieces = counts[0] + 1  # We add one because we initially gave one candy to each child\n\n    return max_pieces\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_age_2008 = 80\n    daughter_age_1996 = 40\n    year_difference = 2008 - 1996\n\n    daughter_birth_year_age = grandmother_age_2008 - year_difference\n    grandmother_age_at_daughter_birth = daughter_birth_year_age - daughter_age_1996\n    \n    return grandmother_age_at_daughter_birth\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # There are 3 players that could receive the first pass (B, C, or D)\n    first_pass_options = 3\n    \n    # After the first pass, there are 2 players to pass the ball to (excluding the player who has the ball)\n    second_pass_options = 2\n    \n    # For the third pass, the ball must go back to A, so there's only 1 option\n    third_pass_options = 1\n    \n    # The total number of different methods is the product of the options at each pass\n    total_methods = first_pass_options * second_pass_options * third_pass_options\n    \n    return total_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of tokens Nicole and Eddy had at first\n    nicole_initial, eddy_initial = symbols('nicole_initial eddy_initial')\n\n    # Create the equation based on the problem (Nicole had thrice as many tokens as Eddy)\n    equation1 = Eq(nicole_initial, 3 * eddy_initial)\n\n    # Create the equation based on the tokens used and left\n    equation2 = Eq(nicole_initial - 130 + eddy_initial - 38, 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (nicole_initial, eddy_initial))\n\n    # Return the number of tokens Nicole had at first\n    return solutions[nicole_initial]\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * (80 / 100) + (4 / 5) * (100 / 100)\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_solution_salt = 200 * 0.35\n    lenny_solution_salt = 300 * 0.50\n\n    total_salt = leroy_solution_salt + lenny_solution_salt\n    total_solution = 200 + 300\n\n    concentration = (total_salt / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    total_candy = 36\n    difference = 22 - 6\n    valeria_candy_now = (total_candy + difference) // 2\n    return valeria_candy_now\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial\n\n    # Total number of ways without restrictions:\n    total_ways = factorial(8)\n\n    # Treat A and B as a single unit. Hence, we have 7 units to arrange:\n    ab_together = factorial(7)\n\n    # Considering A and B can be arranged in 2 ways (A-B or B-A):\n    ab_arrangements = ab_together * 2\n\n    # Calculate the number of ways where C and D are together to subtract it later\n    # Treating C and D as a single unit, we get 7 units to arrange:\n    cd_together = factorial(7)\n\n    # Considering C and D can be arranged in 2 ways (C-D or D-C):\n    cd_arrangements = cd_together * 2\n\n    # Now, we need to find the arrangements where A-B are together AND C-D are together\n    # Since both A-B and C-D can switch places within their arrangement, we have 2 * 2 ways\n    # And we treat both A-B and C-D as units, leaving us with 6 units to arrange\n    ab_cd_together = 2 * 2 * factorial(6)\n\n    # Final number of arrangements:\n    ans = ab_arrangements - (cd_arrangements - ab_cd_together)\n\n    return ans\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_mass = 300\n    sugar_concentration = 0.35\n    sugar_mass = total_mass * sugar_concentration\n    water_mass = total_mass - sugar_mass\n    return water_mass\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    twelve_power_50 = 12**50\n    k = twelve_power_50 ** (1/75)  # Find the 75th root of 12^50 to get `k`\n\n    return int(k)  # Return the largest whole number k\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    oranges_thrown_away = 34\n    oranges_bought = 25\n    oranges_final_count = 133\n\n    oranges_initial = oranges_final_count - oranges_bought + oranges_thrown_away\n\n    return oranges_initial\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def operation_psi(a, b):\n    if a < b:\n        return a * b + 2\n    else:\n        return a - b + 2\n\ndef solution():\n    intermediate_result = operation_psi(14, 13)\n    final_result = operation_psi(intermediate_result, 12)\n    return final_result\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    digits = 0\n    for i in range(1, 20):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_class_score = 36 * 89\n    total_girls_score = girls * 88\n    total_boys_score = boys * 91\n\n    equation = Eq(total_girls_score + total_boys_score, total_class_score)\n\n    solution = solve(equation, girls)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Given the number of legs for cats, dogs, and a rabbit\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n\n    # Given number of each pet except birds\n    cats = 2\n    dogs = 2\n    rabbits = 1\n\n    # Calculate the total number of legs without birds\n    total_legs_without_birds = (cats * cat_legs) + (dogs * dog_legs) + (rabbits * rabbit_legs)\n\n    # Given total number of legs including birds\n    total_legs = 28\n\n    # Birds have 2 legs each, calculate the number of birds by subtracting the known legs from the total and dividing by 2\n    birds = (total_legs - total_legs_without_birds) // 2\n\n    return birds\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # It takes 5 people 6 hours to paint a fence.\n    # Therefore, the total man-hours required to paint the fence is 5 people * 6 hours = 30 man-hours.\n    \n    # Since the neighbour's fence is twice as long, it would require double the man-hours.\n    neighbour_fence_man_hours = 2 * (5 * 6)\n    \n    # The neighbour wants the fence to be painted in less than 5 hours.\n    # To find the minimum number of people required, we divide the total man-hours needed\n    # by the number of hours available (which is less than 5, so we'll take 4 hours to ensure it's less than 5).\n    hours_available = 4\n    min_people = neighbour_fence_man_hours / hours_available\n    \n    # Since we cannot have a fraction of a person, we'll need to round up to the nearest whole person.\n    from math import ceil\n    min_people = ceil(min_people)\n    \n    return min_people\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_one_flight = 12 / 4  # Time taken to walk up from first to fifth floor is given for 4 flights\n    flights_in_30_minutes = 30 / time_for_one_flight  # Number of flights Alison can walk in 30 minutes\n\n    return int(flights_in_30_minutes)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    butter_per_cookie = 8 / 50\n    cookies_with_given_butter = 21.6 / butter_per_cookie\n    return int(cookies_with_given_butter)\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    return 96 // 3\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert the base-8 number to base-10\n    N_base_8 = \"12345654321\"\n    N_base_10 = int(N_base_8, 8)\n\n    # Find the remainders of N divided by 7 and 9\n    remainder_7 = N_base_10 % 7\n    remainder_9 = N_base_10 % 9\n\n    # Sum of the remainders\n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(belt + wallet + handbag, 840)\n\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_past = 7\n    elapsed_years_since_past = 3\n    future_years_from_now = 4\n    \n    current_combined_age = combined_age_past + 2 * elapsed_years_since_past\n    combined_age_future = current_combined_age + 2 * future_years_from_now\n    \n    return combined_age_future\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6\n    return sum_of_squares\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one book (b) and one magazine (m)\n    b, m = symbols('b m')\n    \n    # Write down the equations based on the problem statement\n    equation1 = Eq(2 * b + 3 * m, 24.90)\n    equation2 = Eq(b + m, 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, m))\n    \n    return solutions[m]\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    x = (22 - 2) / (7 - 3)\n    return x\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from sympy import divisors, is_square\n\n    ans = sum(1 for divisor in divisors(2016) if is_square(divisor))\n    return ans\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Let the three consecutive numbers be x, x+1, and x+2.\n    # The sum of these numbers is 3x + 3.\n    # According to the problem, this sum is 60.\n    # We can set up the equation 3x + 3 = 60 and solve for x.\n\n    x = (60 - 3) // 3  # Subtract 3 from both sides and divide by 3\n\n    # The largest number is the third one, which is x+2.\n    largest_number = x + 2\n\n    return largest_number\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if A != 0 and C != 0 and ((A * 100 + B * 10 + A) + (C * 100 + D * 10 + C)) == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Number of shirts that are not yellow\n    non_yellow_shirts = 6 + 4 + 12\n    \n    # To ensure Annabella gets at least 1 yellow shirt,\n    # she must take out all the non-yellow shirts plus 1 yellow shirt\n    ans = non_yellow_shirts + 1\n    \n    return ans\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_pail, small_pail = symbols('big_pail small_pail')\n\n    equation1 = Eq(3*big_pail + 4*small_pail, 68)\n    equation2 = Eq(4*big_pail + 2*small_pail, 64)\n\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n\n    return solutions[big_pail]\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs = -(-total_pens_needed // 8)  # Ceiling division to find the total packs needed\n    return packs\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    result = 249 * 31\n    return result\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    # List of numbers to compute the sum of.\n    numbers = [9 + 4/5, 99 + 4/5, 199 + 4/5, 2999 + 4/5, 39999 + 4/5, 1]\n    \n    # Compute the sum of numbers.\n    ans = sum(numbers)\n    \n    return ans\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar = 30\n    water = 170\n    total_solution = sugar + water\n    \n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    i = 1\n    while True:\n        if (i % 2 == 1) and (i % 3 == 1) and (i % 4 == 1) and (i % 6 == 1) and (i % 7 == 0):\n            return i\n        i += 1\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age+1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Looking at the sequence, it seems like the numbers are decreasing.\n    # We can try to find a pattern in how much they are decreasing by:\n    \n    # Calculate the differences between the numbers\n    difference1 = 94 - 80  # Difference between first and third term\n    difference2 = 80 - 73  # Difference between third and fourth term\n    difference3 = 73 - 66  # Difference between fourth and fifth term\n\n    # Now let's look for a pattern in the differences\n    pattern_diff_1 = difference1 - difference2\n    pattern_diff_2 = difference2 - difference3\n\n    # The differences between the differences seem to be constant\n    # so we can assume this pattern will continue to the missing number\n\n    # Now we calculate the next difference\n    next_difference = difference2 - pattern_diff_1\n\n    # And finally, we find the missing number\n    missing_number = 94 - next_difference\n\n    return missing_number\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    wine_glasses_sold = 25\n    tumblers_sold = 12\n    ml_per_carton = 1000\n\n    total_ml_sold = (wine_glass_ml * wine_glasses_sold) + (tumbler_ml * tumblers_sold)\n    cartons_needed = total_ml_sold / ml_per_carton\n\n    return int(cartons_needed) if total_ml_sold % ml_per_carton == 0 else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n    position_from_end = total_people - position_from_front + 1\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the multiplying factor for the initial ratios\n    x = symbols('x')\n\n    # Equations based on the problem statement\n    equation1 = Eq(2*x - 52, 9*x - 12)  # After selling avocados and peaches\n    peaches_later = solve(equation1, x)[0] * 9 - 12  # Calculate number of peaches left\n\n    # After selling peaches and lemons, the ratio becomes 6:5\n    equation2 = Eq(6*(peaches_later/6), 5*(8*solve(equation1, x)[0] - 60))\n    lemons_later = solve(equation2)[0] / 5  # Calculate number of lemons left\n\n    # Use the multiplying factor with initial ratios to find the initial amount of each fruit\n    initial_avocados = 2 * solve(equation1, x)[0]\n    initial_peaches = 9 * solve(equation1, x)[0]\n    initial_lemons = 8 * solve(equation1, x)[0]\n\n    # Calculate the total number left after selling\n    avocados_left = initial_avocados - 52\n    total_left = avocados_left + peaches_later + lemons_later\n\n    return int(total_left)\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    count = 0\n    for num in range(1, 61):\n        if num % 3 == 0 and num % 5 == 0:\n            # No action since the student will face the teacher again\n            continue\n        if num % 3 == 0 or num % 5 == 0:\n            # The student will turn around\n            continue\n        count += 1\n    return count\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # Since we only need the last digit of the product,\n    # we can use the pattern that the last digit of powers of 2 follows.\n    # 2 -> 4 -> 8 -> 6 -> 2 -> 4 ...\n    # This pattern repeats every 4 steps\n\n    # The exponent is 859433, so we calculate the remainder of\n    # the exponent divided by the length of pattern\n    remainder = 859433 % 4\n\n    # Create the pattern\n    pattern = [2, 4, 8, 6]\n\n    # The index in the pattern is the remainder - 1, because of 0 indexing in the list\n    # If remainder is 0, it means the actual remainder is 4, so we should return the last element\n    if remainder == 0:\n        ans = pattern[-1]\n    else:\n        ans = pattern[remainder - 1]\n\n    return ans\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from sympy.ntheory import lcm\n    \n    common_multiple = lcm(2, 4, 6)\n    age = 0\n    \n    while True:\n        age += common_multiple\n        if age % 7 == 5:\n            break\n    \n    return age + 1\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef is_divisible(num_str):\n    num = int(num_str)\n    return all(num % int(digit) == 0 for digit in num_str)\n\ndef solution():\n    cards = '1234567'\n    for num_of_digits in range(len(cards), 0, -1):\n        for perm in permutations(cards, num_of_digits):\n            number_str = ''.join(perm)\n            if is_divisible(number_str):\n                return int(number_str)\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    s = 900\n    max_legth = 0\n\n    for i in range(1, 900, 2):\n        sum, length = 0, 0\n        while sum < s:\n            sum += i + 2 * length\n            length += 1\n        if sum == s and length > max_legth:\n            max_legth = length\n            \n    return max_legth\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Jess and Jill's initial sweets\n    jess, jill = symbols('jess jill')\n\n    # Jill has six sweets for every five Jess has initially\n    equation1 = Eq(jill, (6/5) * jess)\n\n    # Jill gives eight sweets to Jess and now has four sweets for every seven Jess has\n    equation2 = Eq((jill - 8), (4/7) * (jess + 8))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    jess_sweets = solutions[jess]\n    jill_sweets = solutions[jill]\n\n    # Calculate the total number of sweets\n    total_sweets = jess_sweets + jill_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    adam_and_ben = 102\n    ben_and_carl = 97\n    adam_and_carl = 93\n\n    total_pair_weight = adam_and_ben + ben_and_carl + adam_and_carl\n    total_weight = total_pair_weight // 2  # Each person has been counted twice\n\n    return total_weight\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    remainder = 2\n    divisor = 53\n    # The next whole number after 120 which leaves a remainder of 2 when divided by 53\n    for number in range(121, 121 + divisor):\n        if number % divisor == remainder:\n            return number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n\n    perimeter = 2 * (length + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest_value = min(numbers)\n    return smallest_value\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    metres = 2\n    centimetres = 2\n    height_in_metres = metres + centimetres / 100\n    return height_in_metres\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_score = first_test_score * 1.25\n    third_test_score = second_test_score * 0.80\n\n    total_score = first_test_score + second_test_score + third_test_score\n    \n    return total_score\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            hour_str = f'{hour:02d}'\n            minute_str = f'{minute:02d}'\n            if hour_str.count('4') + minute_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_saving = 13\n    february_saving = 18\n    march_saving = 5\n    mean_saving = (january_saving + february_saving + march_saving) / 3\n    return mean_saving\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'p' be the number of pupils and 'b' be the total bookmarks Mr. Ng has\n    p, b = symbols('p b')\n\n    # Create equations based on the given information\n    equation1 = Eq(b - 4*p, 8)\n    equation2 = Eq(6*p - b, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (p, b))\n\n    # Mr. Ng's total bookmarks is what we want to find\n    return solutions[b]\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_of_squares = sum([(7 * i) ** 2 for i in range(1, 16)])\n    return sum_of_squares\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    from sympy import isprime\n\n    # Check if 233 is a prime number.\n    # If it is a prime, then Michael is correct because\n    # a prime number cannot be divided evenly by any other number\n    # except 1 and itself.\n    return isprime(233)\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n    \n    primes_list = list(primerange(130, 151))\n    return len(primes_list)\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum_of_money = 4.22 + 31.49 + 0.76\n    return sum_of_money\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    start = 56\n    end = 92\n    multiple_of = 4\n\n    # Fixed incorrect calculation where Sam used multiples of 4 from\n    # 1 instead of 0 as a starting point and makes an off-by-one error.\n    start_multiple = (start-1) // multiple_of\n    end_multiple = end // multiple_of\n    count = end_multiple - start_multiple\n\n    return count\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    students_to_select = 2\n\n    return comb(total_students, students_to_select)\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    v_current = symbols('v_current')\n\n    # Given values\n    distance = 144  # distance between Magic Town and Super Town\n    time_downstream = 8  # time taken to travel downstream\n    speed_still_water = 15  # speed of the ship in still water\n\n    # Equation for downstream travel\n    # distance = (speed_still_water + v_current) * time_downstream\n    equation_downstream = Eq((speed_still_water + v_current) * time_downstream, distance)\n\n    # Solve for current speed\n    solution_current_speed = solve(equation_downstream, v_current)\n\n    # Calculate time to come back upstream\n    # distance = (speed_still_water - v_current) * time_upstream\n    # Therefore, time_upstream = distance / (speed_still_water - v_current)\n    v_current_value = solution_current_speed[0]  # current speed value from the solution\n    time_upstream = distance / (speed_still_water - v_current_value)\n\n    return time_upstream\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the amount of food the kangaroo eats per day as k\n    # Therefore, the amount of food the hippo eats per day is k + 45\n    # In 20 days, the kangaroo will have eaten 20k\n    # In 20 days, the hippo will have eaten 20(k + 45)\n    # According to the problem, the hippo eats 10 times as much as the kangaroo\n    # So, 20(k + 45) = 10 * 20k\n    \n    k = symbols('k')\n    equation = Eq(20 * (k + 45), 10 * 20 * k)\n\n    # Solve the equation to find the value of k\n    solution = solve(equation, k)\n\n    # Calculate the amount of food consumed by the hippo\n    hippo_food = 20 * (solution[k] + 45)\n\n    return hippo_food\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wait_time = timedelta(hours=1, minutes=25)\n    john_wait_time = datetime.strptime(\"15:15\", \"%H:%M\")\n    meet_time = john_wait_time + wait_time\n    ans = meet_time.strftime(\"%H:%M\")\n    return ans\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    for j in range(2, 20):\n        ans += sum(j/i for i in range(j+1, 21))\n    return ans\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # If we take one ball of each color, we are not ensured to have two balls of the same color.\n    # Therefore, after taking one green and one blue, the next ball we take, no matter the color,\n    # will give us at least two balls of the same color. So, we need to take 3 balls to ensure this.\n    return 3\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Worker A completes the job in 15 days, so in one day, worker A does 1/15 of the job\n    work_per_day_A = 1/15\n    # Worker B completes the job in 20 days, so in one day, worker B does 1/20 of the job\n    work_per_day_B = 1/20\n    \n    # In one day, both A and B together do 1/15 + 1/20 of the job, which is the combined work rate\n    combined_work_per_day = work_per_day_A + work_per_day_B\n    \n    # They work together for 2 days\n    work_done_in_2_days = 2 * combined_work_per_day\n    \n    # The remaining job to be done after 2 days\n    remaining_job = 1 - work_done_in_2_days\n    \n    # Now worker A completes the remaining job on his own\n    # The number of days worker A takes to complete the remaining job is the remaining job divided by his work rate\n    days_for_A_to_finish_remaining = remaining_job / work_per_day_A\n    \n    return days_for_A_to_finish_remaining\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    num_zodiac_signs = 12\n    # By Pigeonhole Principle, if we want to guarantee that there are at least 11 students\n    # sharing the same zodiac sign, we must consider the worst case scenario\n    # where each of the 12 zodiac signs has 10 students, hence none has reached 11 yet.\n    # Adding one more student to this scenario will guarantee at least one zodiac sign \n    # to have 11 students.\n\n    students = (num_zodiac_signs * (11 - 1)) + 1\n    return students\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the variable\n    x = symbols('x')\n\n    # Create the equation\n    equation = Eq(3*x + 5, 20)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for p in permutations(students):\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C') or p.index('A') > p.index('C') and p.index('A') < p.index('B'):\n            if abs(p.index('F') - p.index('G')) != 1:\n                if abs(p.index('D') - p.index('E')) == 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    children_count = 9\n    starting_seat = 3\n\n    last_seat = (total_candies - 1 + starting_seat) % children_count\n\n    return last_seat if last_seat else children_count\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    n = 60\n    a = 4\n    d = 3\n    \n    sum_n = (n / 2) * (2 * a + (n - 1) * d)\n    \n    return sum_n\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Ada needs to take out 10 balls of the same color\n    # Worst case scenario using the Pigeonhole principle:\n    # - Take out all yellow balls (5 balls)\n    # - Take out all white balls (15 balls)\n    # At this point, she must have taken out 20 balls but none\n    # of 10 balls of the same color.\n    # Now, whatever ball she takes out, it will be a black one\n    # So she will have 10 black balls after taking out 1 more ball.\n    \n    # Total number of balls she needs to take out = 5 (yellow) + 15 (white) + 1 (black)\n    return 5 + 15 + 1\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n    days = lcm(7, 3)\n    return 2 + days  # Adding the days to 2nd January\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    data_range = max(data) - min(data)\n    return data_range\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    # Using Inclusion-Exclusion Principle\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Calculate the smallest possible number of children who like both cats and dogs\n    both = (children_with_dogs + children_with_cats) - total_children\n\n    return both\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # This is the sum of an arithmetic sequence\n    # Formula for the sum is: S_n = n/2 * (a1 + a_n)\n    # where n is the number of terms, a1 is the first term, and a_n is the last term\n    # In this table, the sequence is from 1 to 1000 inclusive, which is 1000 terms\n    n = 1000\n    a1 = 1\n    a_n = 1000\n\n    # Calculate the sum\n    S_n = n/2 * (a1 + a_n)\n    \n    return S_n\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    total_months = 3\n    total_saving = monthly_saving * total_months\n    return total_saving\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirts, skirts = symbols('shirts skirts')\n\n    shirts_eq = Eq(skirts - 36, shirts)  # The number of shirts is 36 less than skirts\n    total_left_eq = Eq((2/3) * shirts + (5/6) * skirts, 72)  # What's left after selling\n\n    solutions = solve((shirts_eq, total_left_eq), (shirts, skirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    total_distance = 120 * 2  # two-way trip distance\n    expected_average_speed = 30  # expected average speed in miles per hour\n\n    # The time taken to travel to the destination\n    time_to_destination = 120 / 20  # distance/speed\n    \n    # Total expected time for the trip at the average speed\n    total_expected_time = total_distance / expected_average_speed\n    \n    # The time remaining for the return trip\n    time_for_return = total_expected_time - time_to_destination\n    \n    # The speed needed for the return trip to meet the expected average speed\n    speed_for_return = 120 / time_for_return\n    \n    return speed_for_return\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    ans, _ = solve_congruence(*congruences)\n\n    # Ensure the answer is within the specified range\n    while ans < 400:\n        ans += 5 * 6 * 11\n\n    return ans\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    length_of_material = 100\n    width_of_material = 80\n    length_of_cloak = 5\n    width_of_cloak = 4\n\n    number_of_cloaks_lengthwise = length_of_material // length_of_cloak\n    number_of_cloaks_widthwise = width_of_material // width_of_cloak\n\n    total_cloaks = number_of_cloaks_lengthwise * number_of_cloaks_widthwise\n\n    return total_cloaks\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n    total_ratio = nell_ratio + joe_ratio\n\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    count = 0\n    for i in range(1, 35):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # If it takes 2 minutes to cut a metal rod into 2 pieces, it means one cut takes 2 minutes.\n    num_cuts_needed_for_5_pieces = 4  # To get 5 pieces, 4 cuts are needed\n    total_time = num_cuts_needed_for_5_pieces * 2  # Each cut takes 2 minutes\n    return total_time\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(sequence) / len(sequence)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    initial_average = 120\n    final_average = 110\n    num_numbers = 3\n\n    # Calculate the total sum of the initial numbers\n    initial_sum = initial_average * num_numbers\n    final_sum = final_average * (num_numbers + 1)  # One number will be added\n\n    # Calculate the number that needs to be added to get the final average of 110\n    number_to_be_added = final_sum - initial_sum\n\n    return number_to_be_added\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jovan, sean, heman = symbols('jovan sean heman')\n\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(heman, 3 * jovan)\n    equation3 = Eq(heman, jovan + 240)\n\n    solutions = solve((equation1, equation2, equation3), (jovan, sean, heman))\n\n    total_marbles = solutions[jovan] + solutions[sean] + solutions[heman]\n\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if 140 + m == 8 * (10 + m) - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n    \n    # Calculate the amount of hay needed for one horse for one day (unitary method)\n    hay_per_horse_per_day = 1 / (horses_initial * days_initial)\n    \n    # Calculate the number of days the same pile of hay could feed 20 horses\n    days_final = 1 / (hay_per_horse_per_day * horses_final)\n    \n    return days_final\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = (301 + 303 + 305) - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    num1 = 6\n    num2 = 9\n    num3 = 12\n    \n    # Find GCD of the first two numbers\n    ans = gcd(num1, num2)\n    \n    # Find GCD of the result with the third number\n    ans = gcd(ans, num3)\n\n    return ans\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900\n    total_companies = 4\n    total_days = 5\n\n    meters_per_company_per_day = (total_expressway / total_companies) / total_days\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean, median, median_grouped, stdev, variance\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    data_mean = mean(data)\n    deviations = [abs(x - data_mean) for x in data]\n    MAD = mean(deviations)\n    return MAD\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    # The question is equivalent to finding the number of solutions to the equation:\n    # x1 + x2 + x3 = 13 where x1, x2, x3 are non-negative integers representing the oranges given to each kid.\n    \n    # This can be solved by the stars and bars combinatorial method.\n    # The number of ways to divide k items to n containers is C(k+n-1, n-1),\n    # where C(n, k) is the binomial coefficient.\n\n    from math import comb\n\n    # Subtract 1 from both sides of the equation x1 + x2 + x3 = 13 since we can have 0 oranges for a kid.\n    # This results in y1 + y2 + y3 = 10, where each y is x - 1.\n    # Now we want to find the combination of 13 items (oranges) into 3 boxes (kids),\n    # which is equivalent to C(13+3-1, 3-1).\n\n    total_ways = comb(13 + 3 - 1, 3 - 1)\n    return total_ways\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    cost_shoes_per_set = 78\n    cost_socks_per_pair = 12\n    legs_per_alien = 5\n    number_of_aliens = 6\n\n    # Calculate the total number of individual shoes needed\n    total_shoes_needed = legs_per_alien * number_of_aliens\n\n    # Calculate the number of sets of 5 individual shoes needed\n    sets_of_shoes_needed = total_shoes_needed // 5\n\n    # If there are leftover shoes needed, add an extra set\n    if total_shoes_needed % 5 != 0:\n        sets_of_shoes_needed += 1\n\n    # Calculate the total number of pairs of socks needed\n    pairs_of_socks_needed = total_shoes_needed // 2\n    \n    # If there is an odd number of socks needed, add an extra pair\n    if total_shoes_needed % 2 != 0:\n        pairs_of_socks_needed += 1\n\n    # Calculate the total cost for the shoes and socks\n    total_cost = (sets_of_shoes_needed * cost_shoes_per_set) + (pairs_of_socks_needed * cost_socks_per_pair)\n\n    return total_cost\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Explore all possible 4-digit numbers\n    for i in range(1000, 10000):\n        # Original number\n        original = i\n        # Convert the original number to a list of digits\n        digits = [int(digit) for digit in str(original)]\n        # Switch the last digit to the first position\n        new_digits = [digits[-1]] + digits[0:3]\n        # Convert the new list of digits back to the number\n        new_number = int(\"\".join(map(str, new_digits)))\n        # Check if the new number is greater than the original by 5877\n        if new_number - original == 5877:\n            return original\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of $0.50 and $0.10 cookies\n    num_50_cookies, num_10_cookies = symbols('num_50_cookies num_10_cookies')\n\n    # David's cookies cost is thrice as much as Jeremy's\n    # So, if num_50_cookies is the number of David's $0.50 cookies, Jeremy's cost would be 0.50 * num_50_cookies / 3\n    # Jeremy has 3/5 as many $0.50 cookies as $0.10 cookies, so 0.50 * num_50_cookies / 3 = 0.60 * num_10_cookies\n    # Convert the equation to be in terms of num_50_cookies only, because the cost is given for Jeremy's $0.50 cookies\n    jeremy_equation = Eq(num_50_cookies / 3, 3/5 * num_10_cookies)\n    \n    # There are 60 fewer $0.10 cookies than $0.50 cookies\n    diff_equation = Eq(num_50_cookies - num_10_cookies, 60)\n\n    # Solve the system of equations\n    solutions = solve((jeremy_equation, diff_equation), (num_50_cookies, num_10_cookies))\n    \n    # Since we want to find out Jeremy's cookies worth, we will consider Jeremy's number of $0.50 cookies\n    # which is 3/5 the number of his $0.10 cookies num_10_cookies\n    jeremy_num_50_cookies = 3/5 * solutions[num_10_cookies]\n    \n    # Jeremy's cookies worth\n    jeremy_cookies_worth = jeremy_num_50_cookies * 0.50\n\n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "def solution():\n    from itertools import combinations\n    \n    numbers = [6, 12, 35, 175, 245, 300]\n    candy_combinations = list(combinations(numbers, 2))\n    candice_combinations = list(combinations(numbers, 3))\n    \n    candy_products = set(a * b for a, b in candy_combinations)\n    candice_products = set(a * b * c for a, b, c in candice_combinations)\n    \n    common_products = candy_products.intersection(candice_products)\n    \n    for common_product in common_products:\n        for number in numbers:\n            if common_product % number != 0:\n                return number\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    options = [49, 80, 32, 66, 8, 58]\n    for books in options:\n        if (books - 4) % 7 == 0:\n            return books\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    # Distance between consecutive trees is the distance between first and fifth trees divided by 4\n    distance_between_trees = 20 / 4\n\n    # Length of the road including the last tree position is 200m\n    road_length = 200\n\n    # Number of intervals needed is the road length divided by the distance between trees\n    # Since we start with a tree, we need to add 1 to get the total number of trees\n    num_trees = int(road_length / distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    apples_fraction = 5 / 8\n    pears = total_fruit - (apples_fraction * total_fruit)\n    return int(pears)\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # The original expression\n    original_expression = (36 * 21) / (6 * 7)\n    \n    # Step by step evaluation according to Jason's method\n    step1 = 36 * 21 / 6 * 7\n    step2 = (36 / 6) * 21 * 7\n    step3 = 6 * 21 * 7\n    # Final answer according to his calculation\n    final_answer = step3\n    # The correct final answer\n    correct_answer = original_expression\n    \n    # Compare the answer given by Jason with the correct answer\n    if final_answer != correct_answer:\n        return False, correct_answer\n    else:\n        return True, final_answer\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between_ann_david = 3\n    david_position_from_last = 2\n\n    total_people = ann_position + people_between_ann_david + david_position_from_last\n    return total_people\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    girls = 17\n    # Let the side of the square formed by the boys be x.\n    # Then the side of the larger square is x + 1.\n    # The larger square has x^2 boys plus the 17 girls.\n    # The area of the larger square is (x+1)^2.\n    # We can set up the equation (x+1)^2 = x^2 + 17.\n    \n    # We know x is greater than 0, so we start checking from x = 1 upwards.\n    x = 1\n    while True:\n        if (x + 1) ** 2 == x ** 2 + girls:\n            break\n        x += 1\n\n    # The total number of boys is x^2.\n    total_boys = x ** 2\n\n    return total_boys\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = 2 * jane_age\n    cousin_age_future = cousin_age_now + 8\n    \n    return cousin_age_future\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    pages = 0\n    count = 0\n    while count < 22:\n        pages += 1\n        count += str(pages).count('8')\n    return pages\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    \n    third_number = 555 - (first_number + second_number)\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    # Given ratio n:8 = 9:12\n    # we can solve it using cross-multiplication\n    n = (9 * 8) / 12\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    day_distance = 3\n    night_distance = -1\n    total_distance = 9\n    days = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n\n    return days\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    both_competitions = (math_students + art_students) - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal_amount = 800\n    interest_rate_per_annum = 0.08\n    time_in_years = 3\n\n    simple_interest = principal_amount * interest_rate_per_annum * time_in_years\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep_hours = 8\n    mary_sleep_hours = lucy_sleep_hours + 2\n    return mary_sleep_hours\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To guarantee 29 balls of one color, we pick all from two colors not reaching 29 in either\n    # plus 1, which will ensure we have 29 of at least one color due to the Pigeonhole Principle.\n    blue_balls, red_balls, white_balls = 80, 40, 30\n    min_balls_for_29 = max([blue_balls, red_balls, white_balls]) - 28\n    \n    # Now to ensure we have 28 balls of another color, we need to account for the worst case\n    # wherein we pick 29 balls of the same color. We take the sum of remaining balls from the \n    # two other colors and subtract one less than 28 to ensure the 28th ball is picked.\n    remaining_balls_for_28 = (blue_balls + red_balls + white_balls - min_balls_for_29) - 27\n\n    # For the last color where we need 10 balls, we subtract 1 less from what's left after\n    # securing 29 and 28 of the others to ensure we have 10 of the last one.\n    remaining_balls_for_10 = (blue_balls + red_balls + white_balls - (min_balls_for_29 + remaining_balls_for_28)) - 9\n\n    # The final answer is the sum of all these minimums\n    total_balls_picked = min_balls_for_29 + remaining_balls_for_28 + remaining_balls_for_10\n    \n    return total_balls_picked\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4 * x, 19)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_england_mountain = 978\n    height_world_highest_mountain = 8848\n\n    difference = height_world_highest_mountain - height_england_mountain\n\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import primerange\n\n    prime_numbers = list(primerange(1, 50))\n    for number in prime_numbers:\n        if (number + 2) % 3 == 0 and (number - 2) % 5 == 0 and number < 50:\n            return number\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12  # Tap A fills the tank in 12 minutes\n    rate_b = 1 / 8   # Tap B fills the tank in 8 minutes\n    combined_rate = rate_a + rate_b  # Combined rate of A and B\n    time_for_half_tank = (1/2) / combined_rate  # Time to fill half tank with combined rate\n    return time_for_half_tank\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define symbols for the amount of money each person originally had\n    alicia, beth, casey = symbols('alicia beth casey')\n\n    # Alicia spent half of her money\n    alicia_left = alicia / 2\n    # Beth spent $60\n    beth_left = beth - 60\n    # Casey spent 3 times as much money as Alicia did (which is half of what Alicia had)\n    casey_left = casey - 3 * (alicia / 2)\n\n    # They all had the same amount of money left\n    equation1 = Eq(alicia_left, beth_left)\n    equation2 = Eq(beth_left, casey_left)\n\n    # Total money they had is $900\n    equation3 = Eq(alicia + beth + casey, 900)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Any number factorial greater than or equal to 10! has a last digit of 0.\n    # This is because it includes a factor of 10 (and any larger number includes 10 as a factor as well).\n    # 2014! is much larger than 10!, so it also has a last digit of 0.\n    ans = 0\n    return ans \n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    product = 2*2*3*8*5*5*5\n    zeros_count = 0\n    \n    while product % 10 == 0:\n        zeros_count += 1\n        product //= 10\n\n    return zeros_count\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    num = 6 * 5  # Since 30 is 5 times 6, the denominator should also be multiplied by 5\n    den = 20 * 5  # to maintain the ratio.\n    \n    return den  # return the denominator that completes the fraction.\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Define the equation based on the problem description\n    equation = Eq(((x + 6) * 3) / 8 - 8, 1)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    original_number = symbols('original_number')\n    new_number = original_number * 10\n    equation = Eq(original_number + new_number, 253)\n    solved_value = solve(equation, original_number)\n    return solved_value[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    # Let x be the number of cookies eaten on the first day.\n    # Then the number of cookies eaten each day forms an arithmetic sequence:\n    # x, x+6, x+12, x+18, x+24\n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    # Here, n = 5 (days), and the sum is 100 (total cookies)\n    # 5/2 * (x + (x + 24)) = 100\n    # Solve for x:\n    \n    n = 5\n    total_cookies = 100\n    difference = 6\n    \n    last_day_cookies = symbols('x')\n    eq = Eq(n/2 * (last_day_cookies + (last_day_cookies + 4 * difference)), total_cookies)\n    first_day_cookies = solve(eq, last_day_cookies)[0]\n\n    return first_day_cookies - 4 * difference\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_up_seashells = 70\n    number_of_boxes = 8\n    \n    remaining_seashells = (initial_seashells - given_to_sister - given_to_friend + picked_up_seashells)\n    seashells_per_box = remaining_seashells // number_of_boxes\n    \n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for num in range(1, 90):\n        if num % 9 == 0 and (num - 1) % 5 == 0:\n            for i in range(2, num):\n                if (num - 1) % i == 0:\n                    break\n            else:\n                if num - 2 > 1:\n                    return num\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percentage = 18\n    amount = 250\n    result = (percentage / 100) * amount\n    return result\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    import math\n\n    # Since men and women want to stand alternately, we fix positions for men and women.\n    # Let's assume positions 1, 3, 5, 7 are for men and positions 2, 4, 6, 8 are for women.\n    # We can arrange the 4 men in 4! ways and the 4 women in 4! ways.\n\n    men_ways = math.factorial(4)\n    women_ways = math.factorial(4)\n\n    # The total number of ways is the product of the ways to arrange men and women.\n    total_ways = men_ways * women_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n\n    return total_questions\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "def solution():\n    from math import factorial\n\n    total_letters = 5  # The number of letters in \"HAPPY\"\n    p_count = 2  # The letter \"P\" repeats twice\n\n    # Number of ways to arrange the letters (permutations)\n    # with repeated elements: factorial(n) / (factorial(n1) * factorial(n2) * ...)\n    ways = factorial(total_letters) // factorial(p_count)\n\n    return ways\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_three_rolls_mya = cost_per_roll_mya * 3\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley = symbols('ashley')\n    crystal = Eq(2 * ashley)\n    justin = Eq(10 * ashley)\n\n    total_pages = Eq(ashley + 2 * ashley + 10 * ashley, 72 + 3 * ashley)\n  \n    solutions = solve((crystal, justin, total_pages), ashley)\n\n    ashley_pages = solutions[ashley]\n    crystal_pages = 2 * ashley_pages\n    justin_pages = 10 * ashley_pages\n\n    return ashley_pages + crystal_pages + justin_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    boys_fraction = 2 / 5\n    total_fraction = 1\n    \n    girls_fraction = total_fraction - boys_fraction\n    total_children = girls / girls_fraction\n    boys = total_children * boys_fraction\n\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    from sympy import primefactors\n\n    n = 96\n    factors = primefactors(n)\n    \n    num_factors = 1\n    for factor in factors:\n        power = 0\n        while n % factor == 0:\n            n //= factor\n            power += 1\n        num_factors *= (power + 1)\n    return num_factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    # Peter is directly in front of John, so they are two distinct people in between the ones in front and behind\n    total_people = people_in_front_of_peter + 1 + 1 + people_behind_john\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 900 * 0.1 * 0.6\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    # Time Richard catches the plane in England\n    departure_time = 12\n    \n    # Flight duration in hours to St Petersburg\n    flight_duration = 4\n    \n    # Time difference between England and St Petersburg is +3 hours\n    time_difference = 3\n    \n    # Calculate the time when Richard lands in St Petersburg\n    arrival_time = (departure_time + flight_duration + time_difference) % 24\n    \n    return arrival_time\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    future_value = 870\n    annual_interest_rate = 0.09\n    years = 5\n\n    present_value = future_value / ((1 + annual_interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 2):\n        N, O = perm\n        NO = N * 10 + O\n        if N != 0:  # N should not be zero as it's a two-digit number\n            return NO\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum(50 - 2*i - (50 - 2*i - 2) for i in range(0, 10, 2))\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # Number of different colors\n    colors = 3\n    \n    # To guarantee a pair of the same color, Cindy must get one more than the product\n    # of the number of colors and the number of socks for a pair (which is 2)\n    socks_needed = colors * (2 - 1) + 1\n    \n    return socks_needed\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_g = 1000\n    weight_in_kg = 2.5\n    weight_in_g = weight_in_kg * kg_to_g\n    return weight_in_g\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    # Scale factor is 1 km / 5 cm\n    scale_factor = 1 / 5  # km per cm\n\n    # Distance on the map in cm\n    map_distance_cm = 12\n\n    # Convert the distance on the map to distance on the ground in km\n    ground_distance_km = map_distance_cm * scale_factor\n\n    return ground_distance_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    return 2 / 0.1\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    prod = 1\n    for i in range(2, 51):\n        prod *= (1/i - 1/(51-i))\n    return prod\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3/8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n\n    # Calculate the total number of children in the classroom\n    # Let x be the number of boys\n    # Then the number of girls is (total children) - x, and we know that x = 3/8 * total_children\n    # The equation is then: 4x + 12(total_children - x) = 360\n\n    total_children = total_sweets / (sweets_per_boy * fraction_boys + sweets_per_girl * (1 - fraction_boys))\n\n    # Now that we have the total number of children, calculate the number of girls\n    number_of_boys = fraction_boys * total_children\n    number_of_girls = total_children - number_of_boys\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let's denote the number we are looking for as 'n'.\n    n = symbols('n')\n\n    # Based on the problem, the three equations given by the problem are:\n    equation1 = n % 7 == 5    # Remainder 5 when divided by 7\n    equation2 = n % 8 == 6    # Remainder 6 when divided by 8\n    equation3 = n % 10 == 6   # Remainder 6 when divided by 10\n\n    # Sum of the quotients\n    equation4 = (n // 6) + (n // 7) + (n // 8) == 265\n\n    # We need to find possible values for n that satisfy the above equations.\n    # Iterating through possible numbers and checking if all conditions are met\n    num = 0\n    while True:\n        # Check whether the current number satisfies all conditions\n        if num % 7 == 5 and num % 8 == 6 and num % 10 == 6:\n            # Check if the sum of the quotients equals 265\n            if (num // 6) + (num // 7) + (num // 8) == 265:\n                break\n        num += 1\n\n    return num\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kph = 7.2\n    time_seconds = 24\n    \n    # Convert speed from km/h to m/s: (1 km/h = 1000 m / 3600 s)\n    speed_mps = speed_kph * (1000 / 3600)\n    \n    # Calculate distance in meters: distance = speed * time\n    distance_meters = speed_mps * time_seconds\n    \n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    maths_students = 70\n    foreign_language_students = 54\n    \n    both_classes_students = (maths_students + foreign_language_students) - total_students\n    \n    only_maths_students = maths_students - both_classes_students\n\n    return only_maths_students\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    result = 1\n    for i in range(2, 10):\n        result *= (1 + 1/i)\n    return result\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # A composite number is indeed a positive integer that is not prime.\n    # However, Pip's definition overlooks the number 1, which is neither prime nor composite.\n    # So, Pip is not completely correct.\n    # The number 1 is a special case in number theory and does not belong to either category of prime or composite numbers.\n    ans = 'Pip is partially correct. A composite number is a positive integer greater than 1 that is not prime. However, the number 1 is neither prime nor composite.'\n    return ans\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    num = 40309\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num - 40309\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    total_sweets = 42\n    kept_by_kasia = 13\n    shared_sweets = total_sweets - kept_by_kasia\n    sweets_per_friend = shared_sweets // 2\n    given_to_joan = (2 / 7) * sweets_per_friend\n    kept_by_lucie = sweets_per_friend - given_to_joan\n\n    return int(kept_by_lucie)\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    n = 1  # Starting from the smallest square size\n    while True:\n        boys = n ** 2\n        girls = (n - 2) ** 2 if n > 1 else 0\n        diff = boys - girls\n        if diff == 52:\n            total_students = boys + girls\n            return total_students\n        n += 2  # Incrementing by 2 to alternate between boys and girls\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    # Since there are 12 identical balloons, we need to split them into 4 groups with different counts.\n    # We go through all possible combinations of balloon counts for the 4 groups, ensuring each group has at least 1 balloon\n    # and all group counts are unique.\n    for x1 in range(1, 12):\n        for x2 in range(1, 12):\n            for x3 in range(1, 12):\n                for x4 in range(1, 12):\n                    # Check if the sum of all piles is 12, and all piles have different counts of balloons\n                    if x1 + x2 + x3 + x4 == 12 and len({x1, x2, x3, x4}) == 4:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Represent the fraction of the pension as 1, being the whole amount\n    whole_pension = 1\n\n    # On Friday night, he spends one quarter\n    friday_spent = whole_pension / 4\n    # What remains after Friday night\n    remaining_after_friday = whole_pension - friday_spent\n\n    # On Saturday night, he spends one third of what remains\n    saturday_spent = remaining_after_friday / 3\n    # What remains after Saturday night\n    remaining_after_saturday = remaining_after_friday - saturday_spent\n\n    # The remaining fraction of his weekend pension for the rest of the week\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    return 42768 / 120\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    ratio_total = ratio_adults + ratio_children\n\n    adults = (ratio_adults / ratio_total) * total_people\n\n    return int(adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n\n    ans = num_school_bags * num_pencil_boxes\n\n    return ans\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let x be the total capacity of the fish tank\n    # According to the question:\n    # If he uses a 5-litre pail, 4 litres of water will overflow, so the tank capacity would be x = 5l - 4l\n    # If he uses a 3-litre pail, he needs 4 more pails of water, so the total water would be x = 3l + 4 * 3l\n    # Equating the two expressions for x gives us:\n    # 5l - 4l = 3l + 4 * 3l\n    # Solve for l:\n    l = symbols('l')\n    equation = Eq(5*l - 4, 3*l + 4*3)\n    solution = solve(equation, l)\n    \n    # Plug the value of l back into either expression for x:\n    tank_capacity = 5 * solution[0] - 4\n    return int(tank_capacity)\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, pears = symbols('apples pears')\n    \n    # Given ratio of apples to pears is 3:4\n    equation1 = Eq(apples/pears, 3/4)\n    \n    # When 36 pears are replaced by 36 apples, ratio of apples to pears becomes 1.5:1\n    equation2 = Eq((apples + 36) / (pears - 36), 1.5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, pears))\n    \n    return solutions[apples]\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_part = '6129043'\n    non_recurring_start = '6'\n    length_of_recurring = len(recurring_part)\n    \n    total_digits = 212\n    sum_of_digits = 0\n    \n    # First, handle the non-recurring digit\n    sum_of_digits += int(non_recurring_start)\n    total_digits -= 1\n    \n    # Now, handle the recurring part\n    full_repetitions = total_digits // length_of_recurring\n    remaining_digits = total_digits % length_of_recurring\n    \n    # Sum the digits in the recurring part\n    recurring_sum = sum(map(int, recurring_part))\n    sum_of_digits += recurring_sum * full_repetitions\n    \n    # Sum the remaining digits\n    sum_of_digits += sum(map(int, recurring_part[:remaining_digits]))\n    \n    return sum_of_digits\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    # Since a willow is planted between each pair of ginkgo trees, we need one less than the number of ginkgo trees.\n    willow_trees = ginkgo_trees - 1\n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    count = 0\n    n = 1\n    while True:\n        factor = n\n        while factor % 5 == 0:\n            count += 1\n            factor /= 5\n        if count == 28:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    # Let the side of the original square be x.\n    # The number of soldiers in the original square array is x^2.\n    # After 31 soldiers joined, the square becomes (x + 1) by (x + 1),\n    # so the total number is (x + 1)^2.\n    # The difference between the new and the old number of soldiers is 31:\n    # (x + 1)^2 - x^2 = 31.\n\n    x = 1\n    while (x + 1) ** 2 - x ** 2 != 31:\n        x += 1\n\n    # Now we have found the original size of the square (x).\n    # The total number of soldiers after adding 31 is (x + 1)^2.\n    total_soldiers = (x + 1) ** 2\n    return total_soldiers\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    return (2 / 3) * 729\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    n_people = 12\n    handshakes = (n_people * (n_people - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_price = 1.09\n    chocolate_bar_price = 0.55\n    total_lemonade_cost = 5 * lemonade_price\n    total_chocolate_cost = 6 * chocolate_bar_price\n    total_cost = total_lemonade_cost + total_chocolate_cost\n    amount_paid = 10\n    change = amount_paid - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # Daniel can pick one of each color without getting a pair, worst case scenario:\n    picks_without_pair = 5\n\n    # To ensure he has at least one pair, he must pick one more sock:\n    picks_with_one_pair = picks_without_pair + 1\n\n    # To have two pairs, at worst he can pick three socks of the first pair (since one color has only two socks),\n    # and then he would necessarily pick a pair from another color with his next two picks.\n    # Therefore, he needs 3 socks of one color and then 2 more of another color.\n    smallest_number_for_two_pairs = picks_with_one_pair + 3\n    \n    return smallest_number_for_two_pairs\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for Sam's current age\n    sam = symbols('sam')\n    \n    # Create the equations based on the given information\n    # Sam's age in four years is sam + 4\n    # Sam's age four years ago is sam - 4\n    # In four years, Sam will be twice as old as he was four years ago (sam + 4) = 2*(sam - 4)\n    equation = Eq(sam + 4, 2 * (sam - 4))\n    \n    # Solve the equation for Sam's current age\n    solution = solve(equation, sam)\n    \n    # Get Sam's current age, there should be only one solution\n    sam_age = solution[0]\n    \n    return sam_age\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7        # RAINBOW\n    vowels = 3               # A, I, O\n    consonants = 4           # R, N, B, W\n\n    # Calculate arrangements of all letters and vowels\n    total_arrangements = factorial(total_letters)\n    vowel_arrangements = factorial(vowels)\n\n    # Calculate number of ways to arrange consonants and the positions for vowels\n    consonant_positions = consonants + 1  # Places where vowels can be inserted: _R_N_B_W_\n    consonant_arrangements = factorial(consonants)\n    vowel_position_arrangements = factorial(consonant_positions)\n\n    # Calculate ways when vowels are together\n    vowels_together = vowel_position_arrangements * vowel_arrangements\n\n    # Subtracting the arrangements where vowels are together from total arrangements\n    ans = total_arrangements - vowels_together\n\n    return ans\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    odd_numbers = []\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    sum_of_numbers = 492.9 + 73.521 + 32.12\n    return sum_of_numbers\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    result = 3.462 / 0.3\n    return result\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Let's denote the first term of the sequence as a, and the common difference as d.\n    # The sum of the first n terms of an arithmetic sequence is given by the formula: S_n = (n/2) * (2a + (n - 1)d)\n    # We have two equations given by the sums of terms:\n    # S_10 = (10/2) * (2a + (10 - 1)d) = 20\n    # S_30 = (30/2) * (2a + (30 - 1)d) = 90\n\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, d = symbols('a d')\n\n    # Define the equations based on the given sums\n    equation1 = Eq((10 / 2) * (2 * a + (10 - 1) * d), 20)\n    equation2 = Eq((30 / 2) * (2 * a + (30 - 1) * d), 90)\n\n    # Solve the system of equations for a and d\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Return the common difference\n    return solutions[d]\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    equation1 = Eq(chickens + goats, 40)\n    equation2 = Eq(3 * chickens, 5 * cows)\n    equation3 = Eq(2 * goats, 10 * cows)\n\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    chicken_feet = 2 * solutions[chickens]\n    goat_feet = 4 * solutions[goats]\n    cow_feet = 4 * solutions[cows]\n\n    total_feet = chicken_feet + goat_feet + cow_feet\n\n    return total_feet\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):  # 150 pages\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    # Let x be the number of stickers Penny has\n    # Then Amy has (5/4)x stickers\n    # According to the total number of stickers, we have\n    # x + (5/4)x = 117\n    # That's (9/4)x = 117\n    # Solve for x\n\n    x = 117 * 4 / 9\n\n    return int(x)\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_km_per_hr = 3.6\n    speed_m_per_sec = speed_km_per_hr * (1000 / 3600)\n    time_sec = 300\n\n    distance_meters = speed_m_per_sec * time_sec\n\n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Let the number of apples Jack has be x.\n    # According to the information given:\n    # 40 = (4/7) * (1/2) * x\n    # Solving for x:\n    x = 40 / ((4/7) * (1/2))\n    \n    return int(x)\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))  # sum the arithmetic progression with a step of 2 from 200 to 208 inclusive\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    all_numbers = sorted(int(''.join(p)) for p in permutations(digits))\n    closest_number = min(all_numbers, key=lambda x: abs(x - 2978))\n    return closest_number\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    num_lines = 10\n    ans = 1 + num_lines + (num_lines*(num_lines - 1))//2 + (num_lines * (num_lines-1)*(num_lines-2))//6 + (num_lines*(num_lines-1)*(num_lines-2)*(num_lines-3))//24\n    return ans\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Given averages:\n    avg_first_2 = 10\n    avg_last_2 = 22\n    avg_first_last = 14\n\n    # Converting the averages to total sums for pairs:\n    total_first_2 = 2 * avg_first_2  # Sum of the first two numbers\n    total_last_2 = 2 * avg_last_2    # Sum of the last two numbers\n    total_first_last = 2 * avg_first_last  # Sum of the first and last numbers\n\n    # Since the average of the first and last numbers is given,\n    # we know their sum. The sum of the first two and the last two\n    # include one of these numbers each.\n    # Deducting the sum of the first and the last from the sums of\n    # the first two and the last two, we get twice the sum of the middle two numbers.\n\n    twice_middle_sum = (total_first_2 + total_last_2) - total_first_last\n\n    # Finally, the average of the middle two numbers is half of their sum.\n    avg_middle_2 = twice_middle_sum / 2\n\n    return avg_middle_2\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Calculate the number of terms in the sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Calculate the sum of terms in the sequence (arithmetic series formula)\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    avg_ab = 22\n    c = 19\n    sum_ab = 2 * avg_ab\n    sum_abc = sum_ab + c\n    avg_abc = sum_abc / 3\n    return avg_abc\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    average_chinese_english = 34\n    average_english_math = 36\n    average_chinese_math = 44\n\n    # Using Inclusion-Exclusion Principle\n    sum_of_averages = average_chinese_english + average_english_math + average_chinese_math\n    average_all_three = (sum_of_averages - 34) / 2  # 34 is subtracted because it's included twice in the sum\n\n    return average_all_three\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    from datetime import datetime\n\n    # Birthdate of Queen Elizabeth I\n    birthdate = datetime(1533, 9, 7)\n    # Death date of Queen Elizabeth I\n    deathdate = datetime(1603, 3, 24)\n    \n    # Calculate the difference in days\n    difference = deathdate - birthdate\n    # Calculate age in years\n    age_in_years = difference.days // 365\n    \n    return age_in_years\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    total_words_in_6_days = words_in_9_minutes * days\n\n    return total_words_in_6_days\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    \n    # Using Pigeonhole Principle, calculate the minimum number\n    # of cakes in the layer with the most cakes\n    most_cakes = (total_cakes + layers - 1) // layers\n    \n    return most_cakes\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    return (21 + 1) * 7 - (20 + (1 * 7))\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    side_length = int(23 ** 0.5)\n    rope_cut = side_length ** 2\n    return 23 - rope_cut\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        total += (2018 + i) / 5 - ((2018 + i) // 5)\n    return total\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    # Since the number of cookies in each box increases by the same amount,\n    # We have an arithmetic sequence.\n    # The first term a1 is 11 (the number of cookies in box 1)\n    # The number of terms n is 10 (since there are 10 boxes)\n    # The total number of cookies is the sum of an arithmetic sequence.\n    # Let's denote the difference between the number of cookies in two adjacent boxes as 'd'.\n    # Sum of an arithmetic sequence formula: Sum = n/2 * (2*a1 + (n-1)*d)\n    # In our case, Sum = 425, a1 = 11, n = 10. We need to find 'd'.\n   \n    a1 = 11\n    n = 10\n    sum_of_cookies = 425\n    # The equation is:\n    # 425 = 10/2 * (2*11 + (10-1)*d)\n    # 425 = 5 * (22 + 9d)\n    # 85 = 22 + 9d\n    # 63 = 9d\n    # d = 63 / 9   \n    d = (sum_of_cookies / n - 2 * a1) / (n-1)\n    \n    return int(d)\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    original_number = (result + 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n\n    equation1 = Eq((3/4) * chelsia, (2/3) * benson)\n    equation2 = Eq(chelsia + 18, benson)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    chelsia_money = solutions[chelsia]\n    benson_money = solutions[benson]\n\n    total_sum = chelsia_money + benson_money\n\n    return total_sum\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial as f\n\ndef solution():\n    total_digits = 5\n    repetitions = [2, 1, 1, 1]  # frequency of each digit (1 appears twice, 2, 3, and 4 once)\n\n    # Calculate the number of permutations with repeated digits\n    permutations_with_repetitions = f(total_digits)\n    for rep in repetitions:\n        permutations_with_repetitions //= f(rep)\n\n    return permutations_with_repetitions\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Let x be the smallest of the seven consecutive odd numbers\n    # Since the numbers are odd and consecutive, the sequence can be represented as:\n    # x, x+2, x+4, x+6, x+8, x+10, x+12\n    # Their sum is 7x + 2+4+6+8+10+12 = 7x + 42\n    # We know that 7x + 42 = 357\n    # Therefore, 7x = 357 - 42\n    x = (357 - 42) // 7\n    return x\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3/10\n    year_5_girls = year_5_students * 3/5\n    \n    return int(year_5_girls)\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum(1 / i for i in range(1995, 2009))\n    A = 1 / A_inverse\n    ans = int(A)  # Get the integer part of A\n    return ans\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of one chair\n    x = symbols('x')\n    \n    # Each table costs $25 more than each chair\n    table_cost = x + 25\n    \n    # 5 tables and 12 chairs cost $720\n    equation = Eq(5 * table_cost + 12 * x, 720)\n    \n    # Solve the equation\n    chair_cost = solve(equation, x)[0]\n    table_cost = chair_cost + 25\n\n    return table_cost\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the speed of Carter, then the speed of Martin is x + 20\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n\n    # Since the time ratio is inverse of speed ratio, we get the equation:\n    # carter_speed / martin_speed = 13 / 9\n    equation = Eq(carter_speed / (carter_speed + 20), 13 / 9)\n\n    # Solve the equation to find Carter's speed\n    carter_speed_value = solve(equation, carter_speed)[0]\n\n    return carter_speed_value\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # The only even prime number is 2\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    total_cloth = 18\n    remaining_cloth = total_cloth - x\n    return remaining_cloth\n\nans = solution(x)"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    ans = Fraction(3) / Fraction(1, 3)\n    return ans\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    ans = 543 + 284\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # Assuming we take the worst-case scenario before we pick two apples of the same color,\n    # we can take all 14 red apples and still need one more apple to guarantee two of the same color,\n    # which in this case would then be yellow since all reds are already taken.\n    return 14 + 1\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the time George takes to paint the room on his own\n    f, g = symbols('f g')\n\n    # Fred and George together paint 1/6 of the room per hour\n    # Fred alone paints 1/9 of the room per hour\n    # George alone paints 1/g of the room per hour\n    # Together they paint 1/9 + 1/g of the room per hour, and this should be equal to 1/6 (their combined rate)\n    equation = Eq(1/9 + 1/g, 1/6)\n\n    # Solve for g\n    solutions = solve(equation, g)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    return (132 + 68) * (520 - 506)\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    entrances = 5\n    people = 4\n    \n    ways = entrances ** people\n    \n    return ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    return 2.42 * 1.6\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    factors = []\n    num = 7007\n    # Prime factorization of 7007\n    for i in range(2, num + 1):\n        while num % i == 0:\n            factors.append(i)\n            num = num // i\n\n    # Since we are looking for two 2-digit numbers, we pair the prime factors to form 2-digit numbers\n    # The only prime factors of 7007 that can form two 2-digit numbers are 7, 11, and 13 (7*11*13 = 7007)\n    # Thus, the two numbers can only be 77 and 91\n    num1, num2 = 7*11, 7*13\n\n    # Their sum\n    return num1 + num2\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let x be the number of red pens sold\n    # Let r be the initial number of red pens: r = 20 + x\n    # Let b be the initial number of black pens: b = (7/3) * r\n    # After selling x red pens and x black pens, we are left with 20 red pens and (b - x) black pens.\n    # The new ratio is 5:13, therefore (20 / (b - x)) = (5 / 13)\n    # Solve for x\n\n    # Given final number of red pens\n    final_red_pens = 20\n    # Calculate initial number of red pens\n    initial_red_pens = 20 + x\n    # Calculate initial number of black pens\n    initial_black_pens_ratio = 7 / 3\n    initial_black_pens = initial_red_pens * initial_black_pens_ratio\n    # Final number of black pens, after selling x pens\n    final_black_pens = initial_black_pens - x\n    # New ratio\n    new_ratio_numerator = 5\n    new_ratio_denominator = 13\n    # Equation based on the new ratio\n    x = symbols('x')\n    equation = Eq(final_red_pens / (initial_black_pens - x), new_ratio_numerator / new_ratio_denominator)\n    # Solve for x\n    sold_pens = solve(equation, x)\n\n    return sold_pens[0]\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Given data\n    cats_legs = 4\n    dogs_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2  # assuming all birds have two legs\n    \n    # number of each animal\n    cats = 2\n    dogs = 2\n    rabbit = 1\n    \n    # total legs without birds\n    legs_without_birds = cats * cats_legs + dogs * dogs_legs + rabbit * rabbit_legs\n    \n    # total legs of all pets\n    total_legs = 28\n    \n    # calculate the remaining legs which belong to birds\n    remaining_legs = total_legs - legs_without_birds\n    \n    # calculate the number of birds\n    birds = remaining_legs // bird_legs  # Using floor division since number of birds has to be an integer\n    \n    return birds\n\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # The value of the house last year after a 5% increase\n    value_last_year = 10500\n    # Calculate the original value of the house before the increase\n    original_value = value_last_year / 1.05\n    \n    # This year the house loses 5% of its value\n    value_this_year = original_value * 0.95\n\n    # Comparing with the original price, calculate the amount of profit or loss\n    profit_or_loss = value_this_year - original_value\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_5_7 = 200 // (5 * 7)\n\n    ans = count_5 + count_7 - count_5_7\n\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for factor in factors_of_42:\n        if 10 < factor < 20:\n            return factor\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of a ruler and a pen\n    cost_ruler, cost_pen = symbols('cost_ruler cost_pen')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(2 * cost_ruler + 9 * cost_pen, 21.60)\n    equation2 = Eq(cost_ruler, cost_pen + 0.90)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_ruler, cost_pen))\n\n    return solutions[cost_ruler]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    bags_needed = total_weight / bag_weight\n    return int(bags_needed if bags_needed.is_integer() else bags_needed + 1)\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    # Given numbers and average value\n    numbers = [8, 3, 9]\n    average = 6\n    \n    # Calculate the sum of given numbers\n    sum_of_given_numbers = sum(numbers)\n    \n    # The sum of all numbers including the missing one (total numbers = 4), based on the average\n    total_sum = average * 4\n    \n    # Subtract sum of given numbers from total sum to find the missing number\n    missing_number = total_sum - sum_of_given_numbers\n    \n    return missing_number\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "from sympy import primerange\n\ndef solution():\n    primes = set(primerange(1, 50))\n    for number in range(1, 50):\n        if (number + 2) % 3 == 0 and (number - 2) % 5 == 0 and number in primes:\n            return number\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '6', '7', '8', '9']\n    for perm in permutations(digits):\n        first_num = int(''.join(perm[:3]))\n        second_num = int(''.join(perm[3:5]))\n        third_num = int(''.join(perm[5:]))\n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    # Reverse step (8): Add 50\n    result += 50\n\n    # Reverse step (7): Subtract the day of birth\n    # At this step, we realize that any day subtracted from this result must be Leon's day of birth.\n    # Since the largest possible day is 31 (and this fits within the possible result range after reversing the previous steps),\n    # we can find the month by reversing the remaining steps and finding which step (7) result corresponds to a valid day (1-31).\n\n    # Find the maximum possible result after day subtraction (if day was 1)\n    max_possible_result_after_day_subtraction = result - 1\n\n    # Reverse step (6): Divide by 5\n    max_possible_result_after_day_subtraction /= 5\n\n    # Reverse step (5): Add 20\n    max_possible_result_after_day_subtraction += 20\n\n    # Reverse step (4): Divide by 5\n    max_possible_result_after_day_subtraction /= 5\n\n    # Reverse step (3): Subtract 6\n    max_possible_result_after_day_subtraction -= 6\n\n    # Reverse step (2): Divide by 4\n    month = max_possible_result_after_day_subtraction // 4  # Use floor division to get the month\n\n    # Now, calculate the actual result after subtracting the correct month value\n    # to get Leon's day of birth.\n    actual_result_after_month_subtraction = result - (month * 4 * 6 * 5 - 20) * 5\n\n    # Now calculate Leon's day of birth\n    day = actual_result_after_month_subtraction - (month * 4 * 6 * 5 - 20) * 5\n\n    birthday = (int(month), int(day))\n    return birthday\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # Calculate the sum of the increasing sequence from 4 to 400 (inclusive) with a common difference of 4\n    first_term_inc = 4\n    last_term_inc = 400\n    common_difference = 4\n    # Number of terms in the increasing sequence\n    num_terms_inc = (last_term_inc - first_term_inc) // common_difference + 1\n    # Sum of increasing sequence using the arithmetic sum formula\n    sum_inc = (num_terms_inc * (first_term_inc + last_term_inc)) // 2\n\n    # Calculate the sum of the decreasing sequence from 396 to 4 (inclusive) with a common difference of 4\n    first_term_dec = 396\n    last_term_dec = 4\n    # Number of terms in the decreasing sequence\n    num_terms_dec = (first_term_dec - last_term_dec) // common_difference + 1\n    # Sum of decreasing sequence using the arithmetic sum formula\n    sum_dec = (num_terms_dec * (first_term_dec + last_term_dec)) // 2\n\n    # The total sum is the sum of both sequences\n    total_sum = sum_inc + sum_dec\n    return total_sum\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_price = 5\n    refill_price = 1\n    total_money = 10\n\n    initial_cup = 1 if total_money >= initial_price else 0 \n    remaining_money = total_money - initial_price if initial_cup else total_money\n\n    refills = remaining_money // refill_price if remaining_money >= refill_price else 0\n\n    total_cups = initial_cup + refills\n\n    return total_cups\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "def solution():\n    from math import factorial\n\n    # Calculate permutations\n    story_perms = factorial(2)\n    comic_perms = factorial(3)\n    science_perms = factorial(4)\n    \n    # Calculate arrangements of the book groups\n    group_arrangements = factorial(3)\n    \n    # Multiply the permutations of each group by the different arrangements\n    ans = story_perms * comic_perms * science_perms * group_arrangements \n    \n    return ans\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    total_peaches_first = 96\n    days_first = 2\n    monkeys_first = 3\n    days_second = 4\n    monkeys_second = 5\n\n    # Find how many peaches one monkey eats per day\n    peaches_per_monkey_per_day = total_peaches_first / (monkeys_first * days_first)\n\n    # Calculate the total peaches for 5 monkeys over 4 days\n    total_peaches_second = peaches_per_monkey_per_day * monkeys_second * days_second\n\n    return total_peaches_second\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    fixed_tax = 0.06 * 50000\n    additional_tax = (0.06 + T) * (income - 50000)\n    total_tax = fixed_tax + additional_tax\n\n    equation = Eq(total_tax, 10000)\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "from math import comb\n\ndef solution():\n    # Since each friend must get at least 1 ice-cream, we will first give 1 to each.\n    # After that, we have 2 ice-creams left to distribute among the 3 friends.\n    ice_creams_left = 5 - 3  # 5 total - 1 for each friend\n    friends = 3\n\n    # The problem now is the same as finding the number of solutions to the equation:\n    # x + y + z = ice_creams_left, where x, y, z are non-negative integers.\n\n    # The number of ways we can distribute these is given by the following combinatorial\n    # expression, using stars and bars method: comb(ice_creams_left + friends - 1, friends - 1)\n    ways = comb(ice_creams_left + friends - 1, friends - 1)\n\n    return ways\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Number of months from January to March is 3\n    jan_to_mar_total = 3 * 450\n    # Number of months from April to July is 4\n    apr_to_jul_total = 4 * 350\n    # Total from August to October is given directly\n    aug_to_oct_total = 1250\n    # Number of months from November to December is 2\n    nov_to_dec_total = 2 * 400\n\n    # Total spending for the whole year\n    total_year_expense = jan_to_mar_total + apr_to_jul_total + aug_to_oct_total + nov_to_dec_total\n    # Number of months in a year\n    num_months_year = 12\n\n    # Average spending per month for the whole year\n    average_expense_per_month = total_year_expense / num_months_year\n\n    return average_expense_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # meters per minute\n    cycling_speed = 60  # meters per minute\n\n    # Assume the distance to the library is d meters.\n    # Time taken to walk to the library: t1 = d / walking_speed\n    # Time taken to cycle back from the library: t2 = d / cycling_speed\n    # Total distance for the trip: 2 * d\n    # Total time for the trip: t1 + t2 = d/walking_speed + d/cycling_speed\n   \n    # Harmonic mean formula for average speed (v):\n    # v = total distance / total time \n    # v = 2 * d / (t1 + t2)\n    # v = 2*d / ( d/walking_speed + d/cycling_speed)\n    # Simplify the equation for average speed by eliminating d:\n    # v = 2 / (1/walking_speed + 1/cycling_speed)\n    average_speed = 2 / ((1 / walking_speed) + (1 / cycling_speed))\n    \n    return average_speed\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n    solutions = solve(equation, x)\n\n    return solutions[0]  # Assuming we want the first solution\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # The amount needed for each serving of ice cream is the same\n    # Let x be the price for one serving of ice cream\n    # Total money Sophie has = 3 * x + 0.30 (since she bought 3 servings and had 30 cents left)\n    # Total money needed for 5 servings = 5 * x - 2.30 (since she was short of $2.30 for 5 servings)\n\n    # Therefore, we can create the following equation:\n    # 3 * x + 0.30 = 5 * x - 2.30\n    # Now we solve for x\n\n    # Rearrange the equation: 2 * x = 3 * x + 0.30 - (5 * x - 2.30)\n    x = (3 * x + 0.30 - (5 * x - 2.30)) / 2\n\n    # The total money Sophie's mother gave her is the money for 3 servings plus 30 cents\n    # So we substitute x back into the equation: total_money = 3 * x + 0.30\n\n    # Solving for x after rearranging the terms:\n    x = 2.60 / 2\n    total_money = 3 * x + 0.30\n\n    return total_money\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    # We'll brute force the value of M such that 127M is divisible by 25\n    for M in range(10):\n        total_sweets = int(f\"127{M}\")\n        if total_sweets % 25 == 0:\n            return total_sweets // 25\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(9/x, y/2)\n    proportional_relation = solve(equation, y)[0]\n\n    # Find the value of y when x = 3\n    y_value = proportional_relation.subs(x, 3)\n    \n    return str(proportional_relation), y_value\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the digits 2, 3, 5, 6\n    perms = permutations('2356')\n\n    # Initialize the smallest odd number to a large value\n    min_odd = float('inf')\n\n    for perm in perms:\n        num = int(''.join(perm))\n        # Check if the number is odd (last digit is not even)\n        if num % 2 == 1 and num < min_odd:\n            min_odd = num\n\n    return min_odd\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To ensure that you have removed at least two balls of the same color,\n    # you must consider the worst-case scenario where you first take one of each color.\n    # After having one green and one blue, the next ball you take out\n    # must be of the same color as one of those you already removed.\n\n    # So you take one green and one blue (2 balls), and the next one (1 more ball)\n    # will definitely be the same color as one of those.\n    return 2 + 1\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    return 299 + 199 + 99 + 5\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Represent the number we start with as 'x'\n    x = symbols('x')\n\n    # Add 3 to x\n    expr = x + 3\n    # Multiply by 2\n    expr *= 2\n    # Take away 2\n    expr -= 2\n    # Add 10\n    expr += 10\n    # Divide by 2\n    expr /= 2\n    # Take away the number you started with\n    expr -= x\n\n    # Simplify the expression to find the number left\n    number_left = expr.simplify()\n\n    return number_left\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377/6 * 5/3)\n    ans = round(numerator / denominator, 3)\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    total_cost = 20*4 + 10*5 + 20*6\n\n    average_cost = total_cost / total_books\n    \n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n\n    equation1 = Eq(jack, 5 * kyle)\n    equation2 = Eq(kyle, (2/7) * (jack - 72))\n\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    ans = lcm(9, 10, 15)\n    return ans\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    num_orange = 6\n    num_yellow = 10\n    num_pink = 4\n    num_brown = 12\n\n    # Worst case: Annabella takes out all shirts but the yellow ones\n    max_non_yellow = num_orange + num_pink + num_brown\n    \n    # To make sure she gets 1 yellow shirt she needs to take out \n    # one more shirt after the worst case scenario.\n    ans = max_non_yellow + 1\n\n    return ans\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define symbols for the unknown variables\n    felicia_bracelets, janice_bracelets = symbols('felicia_bracelets janice_bracelets')\n\n    # Felicia sold 3/5 of her bracelets, so she has 2/5 left\n    # Janice initially had 96 bracelets\n    # Janice bought 2/5 of the bracelets Felicia sold, which is 2/5 * 3/5 = 6/25 of Felicia's initial bracelets\n    # After selling and buying, the ratio of Felicia's bracelets to Janice's is 5:7\n\n    # Equation representing the update of the number of Janice's bracelets after buying\n    equation1 = janice_bracelets - (felicia_bracelets * 6 / 25) - 96\n\n    # Equation representing the new ratio of bracelets between Felicia and Janice\n    equation2 = (felicia_bracelets * 2 / 5) / (janice_bracelets - (felicia_bracelets * 6 / 25)) - 5 / 7\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (felicia_bracelets, janice_bracelets))\n\n    # Janice bought 6/25 of Felicia's bracelets\n    bracelets_bought = solutions[felicia_bracelets] * 6 / 25\n\n    # Return the number of bracelets Janice bought from Felicia\n    return bracelets_bought\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    total_count = 0\n    # Three cases:\n    # 1. The number has 77 as the first two digits\n    for i in range(10):  # The last digit can be anything from 0 to 9\n        if i != 7:  # The last digit should not be 7 as we are counting only two 7s\n            total_count += 1\n            \n    # 2. The number has 77 as the last two digits\n    for i in range(1, 10):  # The first digit can be anything from 1 to 9 (cannot be 0 for three-digit numbers)\n        if i != 7:  # The first digit should not be 7 as we are counting only two 7s\n            total_count += 1\n            \n    # 3. The number has 7 as the first and last digits or has 7 as the first and second digits\n    for i in range(1, 10):  # The middle digit can be anything from 1 to 9 (including 7 here as the other two are 7)\n        if i != 7:  \n            total_count += 1  # 7 in the first and last positions\n            total_count += 1  # 7 in the first and second positions\n        \n    return total_count\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_price = 3.90\n    single_packet_price = 0.35\n    individual_price = single_packet_price * 15\n    savings = individual_price - multipack_price\n\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_years = 11\n\n    amount = principal * (1 + interest_rate * time_years)\n\n    return amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4) + (3/4) + (3/4)\n    missing_number = (total - 1) * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    n = 20\n    S = 560\n    d = 2\n\n    # Formula for the sum of first n terms of an arithmetic progression: S = n/2 * (2a + (n - 1)d)\n    # Where a is the first term and d is the common difference.\n    # We need to find a, so we'll rearrange the formula to solve for a.\n    a = (S * 2/n - (n - 1) * d) / 2\n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_distance = 8\n    day_distance = 3\n    night_distance = 2\n    days = 0\n    progress = 0\n\n    while progress < total_distance:\n        days += 1\n        progress += day_distance\n        if progress >= total_distance:\n            break\n        progress -= night_distance\n\n    return days\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    pages_first_four_days = 25 * 4\n    pages_next_six_days = 40 * 6\n    pages_last_five_days = 80\n    \n    total_days = 4 + 6 + 5\n    total_pages = pages_first_four_days + pages_next_six_days + pages_last_five_days\n    \n    average_pages_per_day = total_pages / total_days\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate = 54\n    strawberry = chocolate + 12\n    vanilla = 3 * chocolate\n\n    total_cookies = chocolate + strawberry + vanilla\n    return total_cookies\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # Let's denote the amount of toys brother originally had as `brother_original`\n    # We know that Penny had brother_original + 10 toys before giving away\n    \n    # According to the information given after she gives away the toys:\n    # Penny has 14 toys and her brother has 12 toys, so she gave away brother_original + 10 - 14 toys\n    # Hence, brother_original + (brother_original + 10 - 14) = 12, the total amount brother now has\n    \n    brother_final = 12\n    penny_final = 14\n    penny_gave = penny_final - 14\n    \n    # brother_original + (brother_original + 10 - penny_gave) = brother_final\n    # 2 * brother_original + 10 - penny_gave = brother_final\n    # 2 * brother_original = brother_final - 10 + penny_gave\n    # brother_original = (brother_final - 10 + penny_gave) / 2\n    brother_original = (brother_final + 10) / 2\n    \n    return brother_original\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [\n        (3, 4),  # x â¡ 3 (mod 4)\n        (3, 5),  # x â¡ 3 (mod 5)\n        (5, 7),  # x â¡ 5 (mod 7)\n        (9, 11)  # x â¡ 9 (mod 11)\n    ]\n\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for tens_digit in range(1, 10):\n        for ones_digit in range(0, 10):\n            albertas_age = tens_digit * 10 + ones_digit\n            switched_age = ones_digit * 10 + tens_digit\n            if 2 * (switched_age + 1) == albertas_age:\n                return albertas_age\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    # Multiplication out of the multiplication table typically refers to multi-digit numbers\n    # However, the question does not specify the actual operation to be performed\n    # Assuming a placeholder value needs to be multiplied for demonstration (e.g., 123 * 456)\n    # Since no specific numbers are provided, the 'calculate' part of the question is incomplete.\n    # To proceed, we'll demonstrate by multiplying arbitrary large numbers:\n    \n    number1 = 123\n    number2 = 456\n    ans = number1 * number2\n    return ans\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    return n * (n + 1) // 2\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    tickets_unsold = 28\n    percent_unsold = 100 - 60\n    total_tickets = tickets_unsold * 100 / percent_unsold\n    return int(total_tickets)\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    ans = 3588 // 13\n    return ans\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Following the pigeonhole principle, we can consider the worst-case scenario to answer the question.\n    # To ensure that we have 4 cards of the same suit, we can draw up to 3 cards of each suit without having four of the same suit.\n    # Thus, after we draw 3 cards for each of the 4 suits (3 * 4 = 12), the next card we draw must be of a suit we already have,\n    # since there are only 4 suits in total.\n    \n    cards_drawn = (3 * 4) + 1\n    \n    return cards_drawn\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    number = one_quarter * 4\n    two_thirds = (number * 2) / 3\n    return two_thirds\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount spent\n    spent = symbols('spent')\n\n    # Hayden and Mitchell's initial savings\n    hayden_savings = 1420\n    mitchell_savings = 505\n\n    # Equations based on the problem statement\n    # After spending the amount, Hayden's money is 4 times Mitchell's\n    equation = Eq(hayden_savings - spent, 4 * (mitchell_savings - spent))\n\n    # Solve the equation\n    solved_spent = solve(equation, spent)\n\n    return solved_spent[0]\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Initial amounts\n    two_dollar_notes = 5\n    fifty_cent_coins = 7\n    file_cost = 11.95\n\n    # Convert everything to the same unit, typically cents\n    total_money_cents = (two_dollar_notes * 200) + (fifty_cent_coins * 50)\n    file_cost_cents = file_cost * 100\n\n    # Calculate the money left in cents\n    money_left_cents = total_money_cents - file_cost_cents\n\n    # Convert cents back to dollars for the final answer\n    money_left_dollars = money_left_cents / 100\n\n    return money_left_dollars\n    \nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    # Let the total number of children be c\n    # According to the problem, 3/8 of the children were boys, hence 5/8 of the children were girls.\n    # We know there were 45 girls, so we can write the equation: (5/8)*c = 45,\n    # which implies c = (45 * 8) / 5\n    c = (45 * 8) / 5\n    \n    # As 3/7 of the people were adults, 4/7 were children.\n    # Hence we can write the equation (4/7)*p = c, where p is the total number of people.\n    # Which implies p = c * (7/4)\n    p = c * (7/4)\n    \n    # We return the total number of people as an integer\n    return int(p)\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    advance_by_day = 3\n    slide_by_night = 1\n    net_advance_per_day = advance_by_day - slide_by_night\n    day_count = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += advance_by_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_by_night\n        \n    return day_count\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    # Number of ways to choose 3 pupils out of 18\n    ways_to_choose = factorial(18) // (factorial(3) * factorial(18 - 3))\n    # Number of ways to arrange 3 chosen pupils in a row\n    ways_to_arrange = factorial(3)\n    ans = ways_to_choose * ways_to_arrange\n\n    return ans\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_between = ginkgo_trees - 1\n\n    total_willow_trees = willow_trees_between * 2\n\n    return total_willow_trees\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * x - 4, 26)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_ship_still_water = 28  # Speed of the ship in still water in km/h\n    speed_current = 3  # Speed of the current in km/h\n    distance_upstream = 150  # Distance to travel upstream in km\n\n    # Speed of the ship upstream is the speed in still water minus the speed of the current\n    speed_upstream = speed_ship_still_water - speed_current\n\n    # Time is distance divided by speed\n    time_upstream = distance_upstream / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Let x be Adam's weight, y be Ben's weight, and z be Carl's weight.\n    # According to the problem we have:\n    # x + y = 102\n    # y + z = 97\n    # x + z = 93\n    \n    # Adding all three equations we get:\n    # 2 * (x + y + z) = 102 + 97 + 93\n    total_double_weight = 102 + 97 + 93\n    total_weight = total_double_weight // 2  # Divide by 2 to get the total weight of Adam, Ben and Carl\n    return total_weight\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = ramen_cost * 6\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A, B, and C represent the amounts that Andrew, Brian, and Christopher have respectively.\n    A, B, C = symbols('A B C')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(A + B, 40)\n    equation2 = Eq(A + C, 37)\n    equation3 = Eq(B + C, 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Calculate the total amount the boys have altogether\n    total = solutions[A] + solutions[B] + solutions[C]\n\n    return total\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_cost_per_kg = 7.48\n    apple_cost = 0.12\n    yoghurt_cost = 0.46\n\n    cheese_weight_kg = 500 / 1000\n    total_cheese_cost = cheese_cost_per_kg * cheese_weight_kg\n    total_apple_cost = 8 * apple_cost\n    total_yoghurt_cost = 2 * yoghurt_cost\n\n    total_cost = total_cheese_cost + total_apple_cost + total_yoghurt_cost\n    change_from_10_pounds = 10 - total_cost\n\n    return round(change_from_10_pounds, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    total_aircrafts = 1200\n    zack_rate = 150\n    together_time = 6\n\n    # Zack's work in 6 hours\n    zack_work = zack_rate * together_time\n\n    # Remaining work for Andy\n    andy_work = total_aircrafts - zack_work\n\n    # Andy's rate per hour\n    andy_rate = andy_work / together_time\n\n    # Time for Andy to sell all aircrafts by himself\n    andy_time = total_aircrafts / andy_rate\n\n    return andy_time\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n\n    orange_volume = (orange_ratio / ratio_sum) * total_volume\n\n    return orange_volume\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    total_people = 0\n    for n in range(1, 100): # Assuming there won't be more than 100 layers\n        students = (2 * n + 1) ** 2\n        teachers = (2 * n - 1) ** 2\n        if students - teachers == 80:\n            total_people = students + teachers - 1  # Subtract 1 because we've counted the center person twice\n            break\n    return total_people\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    savings = 1 * 7  # Sasa saves $1 every day for one week\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    amount_left = original_amount + savings - lent_to_brother - spent_on_snacks\n\n    return amount_left\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each friend\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n\n    # Alan and Bilal's collections are given\n    eq_alan = Eq(alan, 74)\n    eq_bilal = Eq(bilal, 86)\n\n    # Chloe collects twice as much as David\n    eq_chloe_david = Eq(chloe, 2 * david)\n\n    # David raises three times as much as Emily\n    eq_david_emily = Eq(david, 3 * emily)\n\n    # Sum of all collections is Â£400\n    eq_total = Eq(alan + bilal + chloe + david + emily, 400)\n\n    # Solve the system of equations\n    solutions = solve((eq_alan, eq_bilal, eq_chloe_david, eq_david_emily, eq_total), (alan, bilal, chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is smaller number and y is bigger number\n    eq1 = Eq(x + y, 528)   # Eq1 represents the sum of the numbers being 528\n    eq2 = Eq(y, 3 * x)     # Eq2 represents the bigger number being three times the smaller number\n\n    solution = solve((eq1, eq2), (x, y))\n\n    return solution[y]\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    money_repaid_to_mum = 10.50\n    remaining_money = total_money - money_repaid_to_mum\n    money_spent_on_magazines = remaining_money / 2\n    money_left = remaining_money - money_spent_on_magazines\n    return money_left\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for length and width\n    length, width = symbols('length width')\n\n    # Given\n    # Length = 2 * Width\n    # Perimeter = 2 * (Length + Width) = 72\n    eq_length = Eq(length, 2 * width)\n    eq_perimeter = Eq(2 * (length + width), 72)\n\n    # Solve the system of equations\n    solutions = solve((eq_length, eq_perimeter), (length, width))\n\n    # Extract the length from the solutions object\n    return solutions[length]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    factors = set()\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    from sympy import factorint\n\n    # Factorise 44000 to get its prime factors and their exponents\n    factors = factorint(44000)\n    \n    # loop through the factors and their powers\n    # to ensure the result is a perfect cube, each prime factor's exponent\n    # when divided by 3 must leave a remainder of 0 - which means q must\n    # contain the prime raised to the remainder's power if not zero.\n    q = 1\n    for prime, exponent in factors.items():\n        remainder = exponent % 3\n        if remainder != 0:          # If the remainder is not 0\n            q *= prime ** remainder # q should contain this prime factor to the power of remainder\n\n    return q\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the variables for the money each person initially has\n    steve, mark, ryan = symbols('steve mark ryan')\n\n    # Define the ratio when Steve pays\n    # (steve - meal_cost) / (mark) / (ryan) == 3/8/9\n    meal_cost = symbols('meal_cost')\n    eq1 = Eq((steve - meal_cost) / (mark) / (ryan), 3 / 8 / 9)\n\n    # Define the ratio when Ryan pays\n    # (steve) / (mark) / (ryan - meal_cost) == 5/4/1\n    eq2 = Eq((steve) / (mark) / (ryan - meal_cost), 5 / 4 / 1)\n\n    # Define the ratio when Mark pays\n    # (steve) / (mark - meal_cost) / (ryan) == 10/1/9\n    eq3 = Eq((steve) / (mark - meal_cost) / (ryan), 10 / 1 / 9)\n\n    # Steve had $40 more than Mark\n    eq4 = Eq(steve, mark + 40)\n\n    # Now we solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (steve, mark, ryan, meal_cost))\n\n    return solutions[meal_cost]\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = total_salt / total_solution\n\n    return concentration * 100\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    n3 = 23 # the 3rd term of the arithmetic sequence\n    n15 = 155 # the 15th term of the arithmetic sequence\n    common_difference = (n15 - n3) / (15 - 3) # Calculate common difference\n    return common_difference\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    coefficient_of_static_friction = 0.4  # coefficient of static friction\n    force_applied = 250  # force applied in N\n    g = 9.8  # acceleration due to gravity in m/s^2\n\n    # Calculate the normal force (force exerted by the floor perpendicular to the crate)\n    normal_force = mass * g\n\n    # Calculate the maximum static friction force\n    max_static_friction = coefficient_of_static_friction * normal_force\n\n    # The force of static friction will be the minimum of the force applied and the maximum static friction\n    force_of_static_friction = min(force_applied, max_static_friction)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    equation1 = Eq(b, a - 50)\n    equation2 = Eq(a + 25, 5 * (b - 25))\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return result\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    total_buttons = 24\n    difference = 6\n    \n    # Let the number of buttons James originally has be x\n    # Then Nina originally has x + difference\n    # After Nina gives 6 to James, they have the same number, which means Nina has 6 less and James has 6 more:\n    # x + 6 = (x + difference) - 6\n    # Solving this equation gives us the original number of James' buttons\n    # 2 * x + difference = total_buttons\n    \n    x = (total_buttons - difference) // 2\n    nina_buttons = x + difference\n    \n    return nina_buttons\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_worker_per_hour = (total_parts / total_workers) / total_hours\n\n    return parts_per_worker_per_hour\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    square_root = 1  # Start checking from the first square number\n    while True:\n        square_number = square_root ** 2\n        cube_root = round(square_number ** (1/3))\n        if cube_root ** 3 == square_number - 1:\n            return square_number\n        square_root += 1\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david, bentley, triston = symbols('david bentley triston')\n    \n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    total_distance = 16\n    day_distance = 5\n    night_slide = 3\n    net_distance_per_day = day_distance - night_slide\n    current_distance = 0\n    day = 0\n    \n    while current_distance < total_distance:\n        day += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n\n    return day\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    lcm_rem, modulus = solve_congruence(*congruences)\n\n    return lcm_rem\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction_value = 8 / 100\n    decimal_value = 0.7\n\n    if fraction_value > decimal_value:\n        ans = \"8/100 is larger\"\n    else:\n        ans = \"0.7 is larger\"\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    num1 = Fraction(3)\n    num2 = Fraction(4, 5)\n    num3 = Fraction(10, 9)  # 1 1/9 = 9/9 + 1/9 = 10/9\n    num4 = Fraction(11, 2)  # 5 1/2 = 10/2 + 1/2 = 11/2\n    num5 = Fraction(3, 11)\n\n    # Perform the multiplication\n    result = num1 * num2 * num3 * num4 * num5\n\n    # Convert the result to the simplest form\n    ans = result.limit_denominator()\n\n    return ans\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    # Define the number of chickens that weigh as much as a rabbit\n    rabbit_chickens = 2\n    \n    # Define the number of rabbits that weigh as much as a dog\n    dog_rabbits = 8\n\n    # Calculate the number of chickens that weigh as much as a dog\n    dog_chickens = dog_rabbits * rabbit_chickens\n\n    return dog_chickens\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i))\n    return product\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Given in the problem statement: for each additional bag beyond the three bags, the tax increases by $1.5\n    # This suggests a linear relationship between the number of bags (x) and the tax charged (y).\n    # When x > 3, each additional bag (x - 3) results in an increase in tax by $1.5.\n    # When 0 <= x <= 3, there is no tax, which means y = 0.\n    # The equation representing this relationship is y = 1.5 * (x - 3) for x > 3, and y = 0 for 0 <= x <= 3.\n    # However, since we can't have conditional statements in an algebraic equation, we can use a piecewise function to represent this.\n    # For simplicity in programming, we'll assume we're looking for the equation for x > 3.\n    \n    coefficient = 1.5\n    free_bags = 3\n    \n    # Since we don't have the option to write a piecewise function in code, we'll simply return the equation for the scenario where x > 3.\n    # y = 1.5 * (x - 3)\n    y = coefficient * (x - free_bags)\n    \n    return y  # Here y is a symbolic representation of the tax, depending on the value of x (bags used).\n\n# Since this involves representing an equation, we are not returning a numerical 'ans' but rather a symbolic equation.\nans = solution"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_paid = 275\n    flat_fee = 30\n    daily_fee_first_5_days = 25\n    daily_fee_after_5_days = 20\n    \n    # Calculate cost for first 5 days\n    cost_first_5_days = flat_fee + (5 * daily_fee_first_5_days)\n    \n    # If total paid is less than or equal to cost for 5 days,\n    # then the car was rented for first 5 days or less.\n    if total_paid <= cost_first_5_days:\n        num_days = (total_paid - flat_fee) / daily_fee_first_5_days\n    else:\n        # Calculate number of days after first 5 days\n        additional_days = (total_paid - cost_first_5_days) / daily_fee_after_5_days\n        num_days = 5 + additional_days\n    \n    return int(num_days)\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.10\n    total_distance = initial_height\n    \n    while initial_height > 0:\n        initial_height *= rebound_ratio\n        total_distance += 2 * initial_height\n\n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # For a given sheet in the booklet\n    # the page numbers will be i, i+1, i+2, i+3 where i is the first page number after folding\n    # Folded halfway, the sum of the numbers on one sheet will be i + (i + 1) + (i + 2) + (i + 3)\n    # Simplify the expression: 4i + 6\n    # According to the question, the sum is 58\n    # 4i + 6 = 58 -> 4i = 52 -> i = 13\n    # The pages start at 1 and increment by 4 for each sheet (front and back)\n    # i = 1 + 4(k-1) where k is the number of sheets\n    # 13 = 1 + 4(k-1)\n    # Solve for k: 12 = 4(k-1); 3 = k-1; k = 4\n\n    return 4\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    green, yellow = symbols('green yellow')\n    \n    # Initial condition: the same number of green and yellow cars\n    equation1 = Eq(green, yellow)\n    \n    # After giving away cars: green - 60, yellow - 14\n    # Sam has thrice as many yellow cars as green cars\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (green, yellow))\n    \n    # Getting the number of green cars left after giving away 60\n    green_cars_end = solutions[green] - 60\n    \n    return green_cars_end\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    race_distance = 3000\n    buck_speed = 600  # meters per minute\n    elephant_speed = 250  # meters per minute\n\n    buck_time = race_distance / buck_speed\n    elephant_time = race_distance / elephant_speed\n\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    bad_apples_percentage = 15\n    total_apples = 200\n    bad_apples = (bad_apples_percentage / 100) * total_apples\n    return bad_apples\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    # Calculate the sum of the arithmetic sequence from 4 to 400\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = (last_term - first_term) // difference + 1\n    sum_forward = num_terms * (first_term + last_term) // 2\n    \n    # Calculate the sum of the arithmetic sequence from 396 to 4\n    first_term_back = 396\n    last_term_back = 4\n    num_terms_back = (first_term_back - last_term_back) // difference + 1\n    sum_backward = num_terms_back * (first_term_back + last_term_back) // 2\n    \n    # Since both sequences are virtually the same, we can just multiply the sum by 2\n    # However, since 400 is included in both sums, we subtract it once\n    total_sum = 2 * sum_forward - last_term\n    \n    return total_sum\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "from sympy import symbols, solve\n\ndef solution():\n    # Let t be the time in hours after 6:10 pm when Simon overtakes his wife\n    # Distance covered by Simon in time t is 80*t\n    # Distance covered by his wife in time t is 60*t\n    # Simon's distance needs to be an additional 15 km more than his wife's to overtake\n    t = symbols('t')\n    equation = Eq(80*t, 60*t + 15)\n    time_to_overtake = solve(equation, t)[0]\n\n    # Calculate the overtaking time in hours and minutes from 6:10 pm\n    hours_to_add, minutes_to_add = divmod(time_to_overtake * 60, 60)\n    overtaking_hour = 18 + int(hours_to_add)\n    overtaking_minute = 10 + int(minutes_to_add)\n\n    # Adjust for minutes overflow\n    if overtaking_minute >= 60:\n        overtaking_hour += 1\n        overtaking_minute -= 60\n    \n    return f\"{overtaking_hour:02d}:{overtaking_minute:02d}\"\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # Cost of one pencil\n    cost_per_pencil = 1.80 / 12\n\n    # Ratio of the cost of a pen to the cost of a pencil (7:3)\n    cost_per_pen = (7/3) * cost_per_pencil\n\n    # Cost of 5 pens\n    cost_of_5_pens = 5 * cost_per_pen\n\n    return round(cost_of_5_pens, 2)\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2  # coffee, milk\n    foods = 3   # hamburgers, burritos, bagels\n    \n    combinations = drinks * foods\n    \n    return combinations\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    time_taken_for_2_pancakes = 3  # minutes\n    pancakes_in_12_minutes = (12 / time_taken_for_2_pancakes) * 2\n\n    return pancakes_in_12_minutes\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    lockers = [True] * 101  # True represents unlocked, index 0 is unused\n\n    # Operate lockers by multiples of 3\n    for i in range(3, 101, 3):\n        lockers[i] = not lockers[i]\n\n    # Operate lockers by multiples of 5\n    for i in range(5, 101, 5):\n        lockers[i] = not lockers[i]\n\n    # Count unlocked lockers\n    unlocked_lockers = sum(lockers[1:])  # Exclude index 0\n\n    return unlocked_lockers\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1 / 5\n    \n    original_price = sale_price / (1 - reduction_fraction)\n    \n    return original_price\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "from itertools import combinations\n\ndef solution():\n    # Define the crossing times for each person\n    times = [5, 5, 9, 7]\n\n    # We'll store all the possible combinations of two people crossing the river\n    two_people_crossing = list(combinations(times, 2))\n\n    # Begin by finding the fastest two to cross first\n    min_time = float('inf')\n    for first_cross in two_people_crossing:\n        # Find the fastest single to return\n        for returnee in first_cross:\n            # Remaining people to cross\n            remaining = list(set(times) - set(first_cross))\n            second_cross = list(combinations(remaining, 2))\n            for sc in second_cross:\n                # Find who will return with the torch (has to be the faster of the two)\n                next_returnee = min(sc)\n                # Last person crosses alone\n                last_cross = max(remaining) if len(remaining) > 1 else remaining[0]\n                # Calculate the total time for this scenario\n                total_time = max(first_cross) + returnee + max(sc) + next_returnee + last_cross\n                min_time = min(min_time, total_time)\n\n    return min_time\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_length = 500  # total length of the road in meters\n    total_days = 5  # number of days to complete the road\n\n    meters_per_day = total_length / total_days  # meters paved per day\n\n    return meters_per_day\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Ways to reach the 5th step: 1+1+1+1+1, 1+1+1+2, 1+1+2+1, 1+2+1+1, 2+1+1+1, 2+2+1, 2+1+2, 1+2+2\n    # So, there are 8 ways to reach the 5th step.\n    ways_to_5th_step = 8 \n    \n    # Ways to reach the 10th step from the 5th step: treat step 5 as if it's the bottom step\n    # The problem is now equivalent to asking how many ways to climb 5 steps, which is 8 as calculated above.\n    ways_from_5th_to_10th = ways_to_5th_step \n\n    # Multiply the number of ways to reach the 5th step with the number of ways to reach the 10th from the 5th\n    total_ways = ways_to_5th_step * ways_from_5th_to_10th\n\n    return total_ways\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    # Number of countries\n    countries = 18\n    # Maximum number of participants per country before ensuring 9 from the same country\n    max_participants_before_ensuring = 8\n    # Applying the Pigeonhole Principle to find the minimum number of participants\n    # to ensure that a minimum of 9 people come from the same country\n    ans = (countries * max_participants_before_ensuring) + 1\n    return ans\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    total_cost = cost_per_calculator * 12\n    return total_cost\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # The sum of an arithmetic series is given by (n/2)*(first_term + last_term)\n    # where n is the number of terms, first_term is the first term, and last_term is the last term.\n    \n    # We have the sum of the series, which is 2014, and the number of terms, which is 53.\n    \n    # sum = (n/2)*(first_term + last_term)\n    # 2014 = (53/2)*(first_term + last_termm)\n    # We solve for the last_term since we know the first_term and last_term are consecutive and there are 53 terms.\n    \n    # Let's call the first term 'a', then the last term will be 'a + 52' because there are 53 terms in total.\n    # We can plug this into the equation: 2014 = (53/2) * (a + (a + 52))\n    \n    # Now, let's solve for 'a'.\n    a = symbols('a')\n    equation = Eq((53/2)*(a + (a + 52)), 2014)\n    first_term = solve(equation, a)[0]\n    \n    # Since we need the largest term, which is last_term = first_term + 52\n    last_term = first_term + 52\n    return last_term\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    return 1674\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n\n    # Mistaken calculation: 88 / A = 22\n    mistaken_eq = Eq(88 / A, 22)\n    # Solve for A\n    A_value = solve(mistaken_eq, A)\n\n    # Correct calculation: 98 / A\n    correct_answer = 98 / A_value[0]\n\n    return A_value[0], correct_answer\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    lucas_speed = 5 / 6     # Lucas' speed in laps per minute\n    miller_speed = 5 / 10   # Miller's speed in laps per minute\n    relative_speed = lucas_speed - miller_speed  # relative speed in laps per minute\n\n    # Time for Lucas to overtake Miller once is the time it takes for Lucas to cover 1 lap more than Miller\n    time_to_overtake_once = 1 / relative_speed\n    \n    # The second overtake happens after Lucas covers 1 more lap, so the time between overtakes is the \n    # time taken by Lucas to complete 1 lap at the relative speed\n    time_between_overtakes = time_to_overtake_once * 60  # convert to minutes\n\n    return time_between_overtakes\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    dividend = 5217\n    divisor = 13\n    remainder = dividend % divisor\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes = hours * 60\n    return minutes\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n    children = 3/5 * visitors\n    remaining = visitors - children\n    men = 1/4 * remaining\n\n    equation = Eq(children, men + 120)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_cost = 0.80  # Base cost for up to 15 minutes\n    additional_cost_per_minute = 0.05  # Cost per additional minute\n    total_cost = 1.40  # Total cost of the call\n\n    # Calculate the cost without the base cost\n    additional_cost = total_cost - base_cost\n\n    # Calculate the number of additional minutes\n    additional_minutes = additional_cost / additional_cost_per_minute\n\n    # Total minutes is the sum of the first 15 minutes plus additional minutes\n    total_minutes = 15 + additional_minutes\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # in meters\n    orange_to_purple_ratio = 9.2\n\n    purple_length_m = orange_length_m / orange_to_purple_ratio\n    green_extra_length_cm = 24.9  # in centimeters\n\n    # Convert green_extra_length_cm to meters\n    green_extra_length_m = green_extra_length_cm / 100\n\n    green_length_m = purple_length_m + green_extra_length_m\n\n    return green_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    for A in range(10):\n        if (A + A == 12) and (A - A == 0):\n            return A\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age = 8\n    mother_future_age = 54\n\n    # Let mother's current age be x, and the number of years needed for Tim to be as old as his mother now be y.\n    # We have two equations:\n    # 1. x = tim_age + y (In y years, Tim will be as old as his mother is now.)\n    # 2. mother_future_age = x + y (In y years, Tim's mother will be 54 years.)\n    # Substituting the first equation into the second, we get:\n    # mother_future_age = tim_age + 2y\n    # 54 = 8 + 2y\n    # 2y = 46\n    # y = 23\n    \n    # Now we can find x, the mother's current age:\n    # x = tim_age + y\n    # x = 8 + 23\n    x = tim_age + (mother_future_age - tim_age) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 5 * x, 49.5)\n    \n    result = solve(equation)\n\n    return round(result[0] * 5, 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum = 60\n    money_from_dad = 40\n    days = 3\n\n    total_money = (money_from_mum + money_from_dad) * days\n    return total_money\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kevin_work_days = symbols('kevin_work_days')\n\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n\n    # Equation representing the total work done by Ivy and Kevin until the 18th day\n    equation = Eq(ivy_rate * 18 + kevin_rate * kevin_work_days, 1)\n\n    # Solve for the number of days Kevin worked\n    kevin_worked_days_solution = solve(equation, kevin_work_days)\n\n    # Number of days Kevin took off is the total days minus days he worked\n    kevin_days_off = 18 - kevin_worked_days_solution[0]\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let x be the total number of pupils normally at school\n    # 20% of x are in Year 7 normally\n    # After some Year 7 girls miss school for a sports match, the number of pupils left is 400\n    # and the proportion of these pupils who are in Year 7 is 10%\n    # Let y be the number of Year 7 pupils missing for the sports match\n    # Then we have: (0.2x - y) / 400 = 0.1 and 0.2x = 400 + y\n    # Solving for x and y:\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq((0.2 * x - y) / 400, 0.1)\n    equation2 = Eq(0.2 * x, 400 + y)\n\n    solutions = solve((equation1, equation2), (x, y))\n    return solutions[x]\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    distance_climbed_per_day = 4\n    slide_back_per_night = 1\n    total_distance_to_climb = 25\n    daily_net_distance = distance_climbed_per_day - slide_back_per_night\n    \n    days = 0\n    current_height = 0\n    while True:\n        days += 1                   # Incriment the day\n        current_height += distance_climbed_per_day  # Snail climbs up\n        if current_height >= total_distance_to_climb: # Check if it reached the top\n            break\n        current_height -= slide_back_per_night # Snail slides back\n\n    return days\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number = int('3' * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time it takes for Tim to write the book alone\n    t = symbols('t')\n\n    # Nancy's rate of writing is 1 book/6 days\n    # Tim's rate of writing is 1 book/t days\n    # Combined rate is 1 book/4 days\n\n    # Write the equation based on the rates\n    equation = Eq((1/6) + (1/t), 1/4)\n\n    # Solve for t\n    t_value = solve(equation, t)\n\n    return t_value[0]\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_days = 15\n    bob_money = 100\n    day = 1\n    \n    while day <= total_days:\n        if day % 2 != 0:  # Deposit days (odd days)\n            bob_money += 5\n        else:  # Spend days (even days)\n            bob_money -= 8\n        day += 1\n    \n    return bob_money\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    height_climbed = 0\n    jumps = 0\n\n    while height_climbed < 31:\n        jumps += 3\n        height_climbed += 3 * 3  # squirrel jumps up 3 meters each time, for 3 times\n\n        if height_climbed >= 31:\n            break\n\n        height_climbed -= 2  # squirrel falls 2 meters after every 3 jumps\n\n    return jumps\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    remaining_after_shoes = 40\n    remaining_after_dress = remaining_after_shoes / (3/5)\n    original_amount = remaining_after_dress / (2/3)\n    return original_amount\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    # Define the initial values for the numerator and the denominator\n    numerator = 1\n    denominator_first = 1\n    \n    # Initialize the sum to 0\n    total_sum = 0\n    \n    for i in range(1, 7):\n        # Calculate the first term of the denominator based on previous first denominator and i\n        denominator_first = denominator_first + (i - 1) * 3\n        # The second term of the denominator will always be the first term + 3\n        denominator_second = denominator_first + 3\n        # Calculate the sum of this term\n        term_sum = i / (denominator_first * denominator_second)\n        # Add the sum of this term to the total sum\n        total_sum += term_sum\n    \n    # Finally add the last term which is 1/22\n    total_sum += 1/22\n    \n    # Return the result\n    return total_sum\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    result = 4 * a + 0.6 * b\n    return result\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        while n % 10 == 0:\n            n //= 10\n            count += 1\n        return count\n\n    def prime_factorization(n, prime):\n        count = 0\n        while n > 0:\n            n //= prime\n            count += n\n        return count\n    \n    num_zeros_999 = prime_factorization(factorial(999), 5)\n    num_zeros_300 = prime_factorization(factorial(300), 5)\n    \n    ans = num_zeros_999 - num_zeros_300\n    \n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # total number of students in the outer layer is 60\n    # since it's a square, there are 4 sides\n    # but the 4 corner students are counted twice, once for each side they belong to \n    # hence we subtract 4 to account for the corners\n    students_per_side = (60 + 4) // 4\n\n    # Now calculate the total number of students by adding up the students in each layer\n    # starting with the outermost layer (students_per_side) and going inward.\n    # Each inner layer has 2 fewer students per side.\n    total_students = 0\n    while students_per_side > 0:\n        total_students += students_per_side**2\n        students_per_side -= 2  # move one layer inward\n\n    return total_students\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for num in range(1, 100):\n        if num % 2 == 0 and num % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    for lorries in range(1, 100):\n        bikes = lorries + lorries // 4\n        cars = bikes + bikes // 3\n        total = cars + bikes + lorries\n        if total % 2 == 0 and total < 100:\n            return (cars, bikes, lorries)\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = 18 * 20132013 - 2013 * 180018\n    return ans\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of buttons in boxes A and B at first.\n    a, b = symbols('a b')\n\n    # Create the equations according to the word problem.\n    # Initial difference between A and B is 64 buttons.\n    equation1 = Eq(a, b + 64)\n    \n    # Ken added x buttons to A and removed 2x buttons from B. B has 28 fewer than before.\n    # After changes, B = b - 2x and B has 28 fewer => b - 2x = b - 28 => 2x = 28\n    x = 28 / 2  # since 2x = 28, then x is the number of buttons that were added to A\n    new_b = b - 28\n\n    # The ratio of A to B is now 4:1. \n    # After changes, A = a + x and B = b - 28\n    new_a = a + x\n    equation2 = Eq(4 * new_b, new_a)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Return the number of buttons in box A at first.\n    return solutions[a]\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 1\n    red_tiles = 0\n    green_tiles = 0\n\n    while total_tiles > 0:\n        tiles_in_layer = (layer * 2 - 1) ** 2\n        if layer % 2 == 1:\n            red_tiles += min(tiles_in_layer, total_tiles)\n        else:\n            green_tiles += min(tiles_in_layer, total_tiles)\n            \n        total_tiles -= tiles_in_layer\n        layer += 1\n    \n    more_color = 'red' if red_tiles > green_tiles else 'green'\n    difference = abs(red_tiles - green_tiles)\n    \n    return (more_color, difference)\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    length_of_boulevard = 300\n    interval = 10\n    bins = (length_of_boulevard // interval) + 1\n    return bins\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_needed_per_cake = 326\n    num_cakes = 112\n    total_flour_needed = flour_needed_per_cake * num_cakes\n    return total_flour_needed\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    n = 0\n    while True:\n        number_str = '26' + '2011' * n + '7'\n        number = int(number_str)\n        if number % 33 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    # Let w be the number of rounds Hana won, and l be the number of rounds she lost.\n    # We know that:\n    # 1. The total number of rounds is 12: w + l = 12\n    # 2. The net gain of cards is 24: 4w - 2l = 24\n    # We solve these two equations for l.\n\n    total_rounds = 12\n    net_cards_gain = 24\n    cards_win = 4\n    cards_lose = -2\n\n    # Rearrange the second equation: 4w - 2l = 24\n    # Substitute w from the first equation: 4*(12-l) - 2l = 24\n    # Solve for l:\n    l = (cards_win * total_rounds - net_cards_gain) / (cards_win - cards_lose)\n\n    return int(l)\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    X, Y, Z, discarded, rounds = 20, 19, 18, 0, 0\n\n    while X > 0 and Y > 0 and Z > 0:\n        if X >= Y and X >= Z:\n            X -= 1\n            Y += 1\n            Z += 1\n            discarded += 1\n        elif Y > X and Y >= Z:\n            Y -= 1\n            X += 1\n            Z += 1\n            discarded += 1\n        else:\n            Z -= 1\n            X += 1\n            Y += 1\n            discarded += 1\n        rounds += 1\n\n    return rounds\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # He makes 3 cuts to divide the log into 4 pieces.\n    # Each cut takes 3 / 3 minutes, which is 1 minute per cut.\n    # For 8 pieces, he needs 7 cuts.\n    # So, he'll take 7 * 1 minutes to make those cuts.\n\n    return 7 \n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_count = 236\n    duplicates = 57\n    new_cards = 34\n    \n    final_count = (initial_count - duplicates) + new_cards\n    \n    return final_count\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # This problem is equivalent to finding the number of non-negative solutions to the equation\n    # x1 + x2 + x3 = 7 where x1, x2, x3 represent the number of lollipops on each plate.\n\n    # There is a combinatorial formula for such problems, known as the \"stars and bars\" theorem.\n    # The formula states that the number of non-negative solutions to the equation\n    # x1 + x2 + ... + xn = k is (k + n - 1) choose (n - 1), where n is the number of variables (plates in this case)\n    # and k is the total number we want the variables to sum up to (lollipops in this case).\n\n    from math import comb\n\n    # We have 3 plates and 7 lollipops\n    plates = 3\n    lollipops = 7\n\n    # Applying the stars and bars formula\n    return comb(lollipops + plates - 1, plates - 1)\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the money Rasidah and Chai Seng originally had\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(chai_seng, rasidah + 48)  # Chai Seng had $48 more than Rasidah\n    equation2 = Eq(chai_seng * (1 - 6/7), 1/2 * (rasidah * (1 - 3/5)))  # Relationship after spending\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    total_sum = sum(1/i for i in range(1, 8))\n    return int(total_sum)\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Consider Amy and Judy as a single entity (A-J), and the rest as individual entities.\n    # There are now 7 entities to arrange in a circle.\n    # The number of ways to arrange n distinct objects in a circle is (n-1)!\n    arrangements_of_entities = factorial(7 - 1)\n    \n    # Amy and Judy can switch places with each other\n    # This adds 2 more possible arrangements for each previously found arrangement.\n    arrangements_of_amy_judy = 2\n    \n    # Total arrangements = arrangements of entities * arrangements of Amy and Judy\n    total_arrangements = arrangements_of_entities * arrangements_of_amy_judy\n    return total_arrangements\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "from math import gcd\n\ndef solution():\n    pencils = 56\n    pens = 60\n    max_students = gcd(pencils, pens)\n    return max_students\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, ben = symbols('andy ben')\n\n    # Initial condition: Andy had 84 fewer cookies than Ben\n    eq1 = Eq(andy, ben - 84)\n\n    # Andy bought 1/3 more cookies, so he now has andy + andy/3\n    # Ben bought 1/5 more cookies, so he now has ben + ben/5\n    # After buying, Andy had 1/3 as many cookies as Ben\n    eq2 = Eq(andy + andy/3, (ben + ben/5)/3)\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (andy, ben))\n\n    # Calculating how many cookies Andy had in the end after buying 1/3 more\n    andy_end = solutions[andy] + solutions[andy]/3\n\n    return andy_end\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    rate = 0.015\n    final_amount = 37100\n\n    # A = P * (1 + rt)\n    # 37100 = 35000 * (1 + 0.015 * t)\n    # t = (37100 / 35000 - 1) / 0.015\n    t = (final_amount / principal - 1) / rate\n\n    return round(t)\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    numbers = [0.7, 0.04, 1.006]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # The sequence alternates between adding 1 to a positive number\n    # and subtracting 1 from a negative number, starting with 18.\n    # The next number in the sequence can be found by examining the pattern.\n    \n    # Since the last number we have is 20 which is positive,\n    # we should subtract 1 from the negative number prior to it (-15)\n    # to get the next number in the sequence.\n    \n    n = -15 - 1\n    return n\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n\n    # Find the multiplier that makes the original numerator equal to the new numerator\n    multiplier = new_numerator / original_numerator\n\n    # Multiply the original denominator by the multiplier to find the new denominator\n    new_denominator = original_denominator * multiplier\n\n    return int(new_denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Number of students who passed each test\n    math_passed = 30\n    science_passed = 28\n    english_passed = 25\n\n    # Total pupils who passed at least one test\n    at_least_one_passed = 43\n\n    # Maximum possible number of students who passed all three tests\n    # is found by minimizing the number of students who passed only one or two tests.\n    # Since at_least_one_passed includes pupils who passed one, two, or all tests,\n    # we subtract the individual test passes and add back the maximum possible overlap.\n    \n    max_all_passed = (math_passed + science_passed + english_passed) - at_least_one_passed\n\n    return max_all_passed\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    from itertools import combinations\n\n    # Generate all two-digit numbers divisible by 24\n    numbers_divisible_by_24 = [i for i in range(10, 100) if i % 24 == 0]\n\n    # Generate all combinations of 8 numbers from the list of numbers divisible by 24\n    # Since 4 numbers' divisibility was known with the first question and 6 with the second,\n    # and Tom raised his hand both times, we know Tom's number is divisible by 24.\n    # We can then deduce that there were 4 - 1 = 3 other students with numbers\n    # divisible by 24 and 6 - 4 = 2 students with numbers not divisible by 24 in the first round.\n\n    # Therefore, we need to find a combination of numbers where exactly three are divisible\n    # by both the mystery number and 24, and two are not divisible by 24 but by the mystery number.\n\n    possible_combinations = combinations(numbers_divisible_by_24, 3)\n\n    # Now, find all two-digit numbers that are not divisible by 24\n    numbers_not_divisible_by_24 = [i for i in range(10, 100) if i % 24 != 0]\n\n    # For each possible combination of numbers divisible by 24,\n    # find if there is a valid set of numbers that satisfies the conditions.\n    for nums_div_by_24 in possible_combinations:\n        for mystery_number in range(2, 100):\n            # Ignore mystery numbers that coincide with previously checked numbers.\n            if mystery_number in nums_div_by_24 or mystery_number % 24 == 0:\n                continue\n\n            # Find numbers not divisible by 24 but divisible by the mystery number\n            nums_div_by_mystery_num_but_not_24 = [\n                i for i in numbers_not_divisible_by_24\n                if i % mystery_number == 0 and i not in nums_div_by_24\n            ]\n\n            # We need exactly 2 numbers from this list to combine with the 3 that are divisible by 24.\n            if len(nums_div_by_mystery_num_but_not_24) == 2:\n                # Total 5 numbers, 3 divisible by both 24 and mystery number,\n                # 2 divisible by mystery number but not by 24.\n                # Calculate the sum of the numbers Tom saw excluding his own number.\n                sum_of_friend_numbers = sum(nums_div_by_24) + sum(nums_div_by_mystery_num_but_not_24)\n                return sum_of_friend_numbers\n\n    # If no combination was found that satisfies the condition\n    return None\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    # Fraction operation\n    result = ((1/30 + 1/6) / (2/25)) + ((2 - 2/3) / (8/3))\n    \n    return result\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    count = 0\n    # Since each pencil case cannot be empty, we start from 1 pen in each case\n    for x1 in range(1, 6):\n        for x2 in range(1, 6):\n            for x3 in range(1, 6):\n                if x1 + x2 + x3 == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the distance between home and school\n    d = symbols('d')\n    \n    # Ahmad's speed is 80 m/min, his brother's speed is 50 m/min.\n    # When Ahmad reaches the school, travels distance d and returns 210 meters he meets his brother.\n    # Ahmad travels 2 times the distance minus 210 meters\n    # His brother travels the distance minus 210 meters\n    # They both travel for the same amount of time, hence their speeds and distances are proportional.\n    # 2*d - 210 is the distance Ahmad travels, d - 210 is the distance his brother travels.\n    # Their speed ratio is 80/50 which simplifies to 8/5.\n    # So the equation is: (2*d - 210) / (d - 210) = 8 / 5\n    \n    equation = Eq((2*d - 210) / (d - 210), 8/5)\n    \n    # Solve the equation for d\n    distance = solve(equation, d)\n    \n    return distance[0]\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Let a, b, c, d be the four numbers in descending order: a > b > c > d\n    # According to the question:\n    # d + (a + b + c) / 3 = 39\n    # a + (d + b + c) / 3 = 51\n    # Turning the equations into a system of equations:\n    # 3d + a + b + c = 117\n    # 3a + d + b + c = 153\n    # Subtracting the first equation from the second gives:\n    # 3a - 3d = 36\n    # => a - d = 12\n    # Since a > b > c > d and all are distinct positive whole numbers,\n    # the smallest difference between them is 1, hence we can maximize a by\n    # minimizing d, b, and c, and using the smallest possible increments:\n    # Let d = 1 (the smallest positive whole number)\n    # Then a = d + 12 = 13\n    # We then find b and c such that b > c > d and their sum with a and d fits the equation.\n    # Use the first equation again with the new values of a and d:\n    # 3d + a + b + c = 117\n    # 3 * 1 + 13 + b + c = 117\n    # 16 + b + c = 117\n    # b + c = 101\n    # To maximize a (which is already at maximum), we need to minimize b and c.\n    # Let's set b = c + 1 (since they're distinct and we're minimizing)\n    # We then have:\n    # c + 1 + c = 101\n    # 2c + 1 = 101\n    # 2c = 100\n    # c = 50\n    # So, b = c + 1 = 51\n    # Finally, we have a = 13 (maximized), b = 51, c = 50, d = 1\n    # Therefore, the largest possible value of the largest number is 13.\n\n    return 13\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number_str = str(8844)\n    place_value_1 = int(number_str[0]) * 1000\n    place_value_2 = int(number_str[2]) * 10\n    return place_value_1 - place_value_2\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # A four-digit number is divisible by 5 if its last digit is 0 or 5.\n    # Since the number is 572A and it should be divisible by 5, A can only be 0 or 5.\n    # The number is divisible by 4 if its last two digits are divisible by 4.\n    # In the case of 5720, 20 is divisible by 4.\n    # In the case of 5725, 25 is not divisible by 4.\n    # Therefore, A must be 0 for the number to be divisible by both 4 and 5.\n    A = 0\n    return A\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    num = 40309\n\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n    \n    length1 = 16\n    length2 = 24\n\n    longest_length = gcd(length1, length2)\n\n    return longest_length\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind = 4\n    total_sheep = luna_position + sheep_behind\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    minimum_earnings = 270\n    hours_needed = minimum_earnings / hourly_rate\n    return hours_needed\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8*4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = 10\n    top_students = 3\n    remaining_students = total_students - top_students\n\n    mean_top = 92\n    mean_all = symbols('mean_all')\n\n    equation = Eq(mean_all, (mean_top * top_students + (mean_all - 6) * remaining_students) / total_students)\n    \n    mean_all_value = solve(equation, mean_all)\n\n    return mean_all_value[0]\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # The smallest 5-digit number is 10000\n    # The smallest palindrome greater than or equal to 10000\n    # that is a multiple of 45 can be found by iterating from 10000 onwards\n\n    # Since the number must be divisible by 45 and hence by 9, the sum of the digits must be divisible by 9\n    # Since it's palindromic, the first and last two digits must be the same, i.e., xyzyx\n    # Thus x + y + z + y + x = 2x + 2y + z must be divisible by 9\n    # The smallest x for a five-digit number is 1\n\n    # Find the smallest palindromic multiple of 45\n    smallest_palindrome = None\n    for x in range(1, 10):\n        for y in range(0, 10):\n            for z in range(0, 10):\n                if (2*x + 2*y + z) % 9 == 0:\n                    palindrome = int(str(x) + str(y) + str(z) + str(y) + str(x))\n                    if palindrome >= 10000 and palindrome % 45 == 0:\n                        smallest_palindrome = palindrome\n                        break\n            if smallest_palindrome:\n                break\n        if smallest_palindrome:\n            break\n\n    # The largest palindrome smaller than 100000\n    # that is a multiple of 45 can be found by iterating downwards from 99999\n    \n    # Since the number must be divisible by 45 and hence by 9, the sum of the digits must be divisible by 9\n    # Since it's palindromic, the first and last two digits must be the same, i.e., xyzyx\n    # The largest x for a five-digit number is 9\n    \n    # Find the largest palindromic multiple of 45\n    largest_palindrome = None\n    for x in range(9, 0, -1):\n        for y in range(9, -1, -1):\n            for z in range(9, -1, -1):\n                if (2*x + 2*y + z) % 9 == 0:\n                    palindrome = int(str(x) + str(y) + str(z) + str(y) + str(x))\n                    if palindrome < 100000 and palindrome % 45 == 0:\n                        largest_palindrome = palindrome\n                        break\n            if largest_palindrome:\n                break\n        if largest_palindrome:\n            break\n\n    # Calculate the difference between the largest and smallest palindromic numbers\n    difference = largest_palindrome - smallest_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    # Step 1: Find the remainders of each divisor\n    # When divided by 5, remainder is 1\n    # When divided by 6, remainder is 2\n    # When divided by 11, remainder is 7\n\n    # Step 2: Find the LCM of all the divisors\n    # The LCM of 5, 6, and 11 doesn't need to be found \n    # as it's not used directly in the Chinese Remainder Theorem.\n\n    # Step 3: Solve the system of congruences using the Chinese Remainder Theorem\n    # The unknown = LCM(5, 6, 11) - the common remainder\n    # the common remainder is actually the solution to the congruence system\n    #  x â¡ 1 (mod 5)\n    #  x â¡ 2 (mod 6)\n    #  x â¡ 7 (mod 11)\n    \n    congruences = [(1, 5), (2, 6), (7, 11)]\n    x, _ = solve_congruence(*congruences)\n\n    # Since the question states that the number of biscuits is less than 500,\n    # we need to find the smallest positive solution of the congruences under 500\n    while x >= 500:\n        x -= _  # Subtract the LCM repeatedly until below 500\n\n    return x\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for combo in combinations(bags, 3):\n        jaslin_bags = sum(combo)\n        george_bags = sum(bags) - jaslin_bags\n        if jaslin_bags == 2 * george_bags:\n            return george_bags\n    return None\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:  # Ensure all digits are unique\n            for perm in permutations(digits):\n                if perm[0] != '0' and int(''.join(perm)) <= 2022:\n                    # If the digits are consecutive\n                    sorted_perm = sorted(perm)\n                    if all(int(sorted_perm[i]) + 1 == int(sorted_perm[i+1]) for i in range(len(sorted_perm) - 1)):\n                        lucky_years += 1\n                        break  # Don't count permutations of the same year\n    return lucky_years // 24  # To account for permutations of the four digits\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    speed = 550 / 5  # Speed in km per hour\n    distance_3_hours = speed * 3  # Distance traveled in 3 hours\n\n    return distance_3_hours\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    # Let's denote the number of sweets Beth has originally as B\n    # Then Andre has 24 - B sweets.\n    # After the teacher gives them 4 sweets each,\n    # Beth will have B + 4 sweets\n    # Andre will have 24 - B + 4 = 28 - B sweets\n    # We are given that Andre has 6 more sweets than Beth after receiving the sweets, so\n    # 28 - B = (B + 4) + 6\n    # Solving for B we get:\n    # B + 10 = 28 - B\n    # 2B = 18\n    # B = 9\n    # Thus, Beth had 9 sweets originally and has 9 + 4 = 13 sweets now.\n\n    beth_original = 9\n    beth_now = beth_original + 4\n    return beth_now\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest even number be x.\n    # Then the sequence of the 5 consecutive even numbers is: \n    # x, x + 2, x + 4, x + 6, x + 8\n    # The sum of these numbers is:\n    # x + (x + 2) + (x + 4) + (x + 6) + (x + 8) = 100\n    # 5x + 20 = 100\n    # 5x = 80\n    # x = 16\n    # So the smallest number is 16.\n    smallest_number = (100 - 20) // 5\n    return smallest_number\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_fraction = 1 - 2/5\n    remaining_apples = 150\n    total_apples = remaining_apples / remaining_fraction\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "def solution():\n    from math import lcm\n    ans = lcm(1, 2, 3, 4, 5)\n    return ans\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # Total fruits - no chocolate\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    jumps = 15 - 1  # Since it's from the 1st to the 15th post, we calculate the number of jumps (14)\n    distance_per_jump = 3  # Each jump covers 3 inches\n    total_distance = jumps * distance_per_jump  # Total distance covered in inches\n    return total_distance\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from itertools import permutations\n\ndef solution():\n    # Since we only have 2 of each color, we need to find the permutations of the string 'RRBBYYGGOOPP'\n    blocks = 'RRBBYYGGOOPP'\n    perms = set(permutations(blocks))  # Using a set to eliminate duplicate permutations\n    even_arrangements_count = 0\n    \n    # Define a function to check if the arrangement is even\n    def is_even(arrangement):\n        for color in 'RBGYOP':\n            first_index = arrangement.index(color)\n            second_index = arrangement.index(color, first_index + 1)\n            if (second_index - first_index) % 2 != 1:\n                return False\n        return True\n\n    # Count the even arrangements\n    for perm in perms:\n        if is_even(perm):\n            even_arrangements_count += 1\n\n    # The total number of arrangements is 12! / (2!)^6, since we have 6 colors with 2 blocks each\n    total_arrangements = len(perms)\n    \n    # Reducing the fraction even_arrangements_count / total_arrangements to simplest form\n    from math import gcd\n    divisor = gcd(even_arrangements_count, total_arrangements)\n    m = even_arrangements_count // divisor\n    n = total_arrangements // divisor\n\n    # Return m + n\n    return m + n\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    probability_rain_saturday = 0.7\n    probability_rain_sunday = 0.5\n\n    # Probability it does not rain on both days\n    probability_no_rain_both_days = (1 - probability_rain_saturday) * (1 - probability_rain_sunday)\n\n    # Probability it rains at least one day\n    probability_rain_at_least_one_day = 1 - probability_no_rain_both_days\n\n    return probability_rain_at_least_one_day\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    fill_rate_A = 1 / 36  # Inlet A's rate of filling the pool per minute\n    fill_rate_B = 1 / 48  # Inlet B's rate of filling the pool per minute\n\n    cycle_period = 6  # Total time for both inlets to complete a fill cycle\n    cycle_fill = 1 * fill_rate_A + 2 * fill_rate_B + 2 * fill_rate_A + 1 * fill_rate_B  # Pool fraction filled during a cycle\n\n    # Full cycles required to fill the pool\n    full_cycles = int(1 / cycle_fill)\n\n    # Fill the pool cycle by cycle\n    fill = 0\n    time = 0\n    cycle_orders = [(1, fill_rate_A), (2, fill_rate_B), (2, fill_rate_A), (1, fill_rate_B)]\n    \n    while fill < 1:  # While the pool is not full\n        for duration, fill_rate in cycle_orders:\n            if fill < 1:\n                time += duration\n                fill += duration * fill_rate\n            else:\n                break\n    \n        # If a full cycle is not needed to complete filling, compute the time required to finish\n        if fill > 1:\n            time -= duration\n            fill -= duration * fill_rate\n            fill_needed = 1 - fill\n            time += fill_needed / fill_rate\n\n    return round(time)\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the time Alan takes to paint the room on his own\n    a = symbols('a')\n    \n    # Equation for the rates of work (rate = 1/time)\n    # Alan and Bob together paint 1 room in 4 hours, so their combined rate is 1/4\n    # Bob paints 1 room in 6 hours, so his rate is 1/6\n    # Alan paints 1 room in a hours, so his rate is 1/a\n    # Combined rate of Alan and Bob is the sum of their individual rates\n    equation = Eq(1/a + 1/6, 1/4)\n\n    # Solve the equation for a\n    solution = solve(equation, a)\n    \n    # We just want the positive solution because time cannot be negative\n    alan_time = [sol.evalf() for sol in solution if sol > 0]\n\n    return alan_time[0]\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    correct_points = 10\n    incorrect_points = -3\n    total_questions = 10\n\n    for incorrect in range(total_questions + 1):\n        correct = total_questions - incorrect\n        if correct * correct_points + incorrect * incorrect_points == total_points:\n            return incorrect\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return float(solutions[fred])\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    bought_bottles = 10\n    borrowed_bottles = 1\n    empty_bottles = bought_bottles\n    \n    drinks = bought_bottles\n    \n    while empty_bottles // 2 + borrowed_bottles // 2 > 0:\n        new_bottles = (empty_bottles // 2) + (borrowed_bottles // 2)\n        drinks += new_bottles\n        empty_bottles = empty_bottles % 2 + new_bottles\n        borrowed_bottles = borrowed_bottles % 2\n    \n    return drinks\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    # We need to find the highest power of 10 that divides n!, which is the same as\n    # finding the highest powers of 2 and 5 that divide n!, since 10 = 2 * 5.\n    # Since there are more factors of 2 than factors of 5 in n!, we should find\n    # the number of 5's. Every fifth number contributes at least one 5, every\n    # 25th number contributes at least two 5's, and so on.\n    \n    # Initialize variables to keep track of number of 5's and the highest n found\n    num_fives = 0\n    n = 0\n    \n    # Loop to find the largest n that gives us at least 28 zeros at the end of n!\n    while num_fives < 28:\n        n += 1\n        current = n\n        while current % 5 == 0:\n            num_fives += 1\n            current //= 5\n            \n    return n\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    sweets_start = 320\n    sweets_end = 348\n    sweets_bought_per_week = 30\n    weeks = 7\n\n    sweets_eaten_per_week = ((sweets_start + sweets_bought_per_week * weeks) - sweets_end) // weeks\n\n    return sweets_eaten_per_week\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"281{digit}\")\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n\n    # Calculate Andrea's position from the front\n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n\n    # Subtract Vanessa's position from Andrea's position to find number of children between them\n    # Subtract 1 to exclude Vanessa herself\n    children_between = andrea_position_from_front - vanessa_position_from_front - 1\n\n    return children_between\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the time after which the height of A's waterline will be 3 times that of B\n    t = symbols('t')\n    \n    # Speed of draining pool A is 1/10 per minute\n    # Speed of draining pool B is 1/6 per minute\n    \n    # Let H be the initial height of the water in both pools\n    # After t minutes, height of water in A will be H - (H/10)*t\n    # After t minutes, height of water in B will be H - (H/6)*t\n    # We want H - (H/10)*t to be 3 times H - (H/6)*t\n    \n    equation = Eq(H - (H/10)*t, 3*(H - (H/6)*t))\n\n    # Solving for t\n    t_solution = solve(equation, t)\n\n    return t_solution[0]\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path_length = 5/6\n    fenced_path_length = 2/3\n    unfenced_path_length = total_path_length - fenced_path_length\n    return unfenced_path_length\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # There is only one way to divide the unit of time (1) among the activity.\n    # Since there is no division, and it's just a single unit, the answer is simply 1.\n    return 1\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35 / 100\n    total_amount = 200\n    amount = percentage * total_amount\n    return amount\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 70))\n    for prime in primes:\n        if (69 - prime) in primes:\n            return 69 - 2 * prime\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let's define the number of sweets Chenxi has as x.\n    # Then, Yue Ying has (x - 5) sweets.\n    # After giving 10 sweets, Chenxi has (x - 10) sweets, and Yue Ying has (x - 5 + 10).\n    \n    # Now, we calculate the difference in the number of sweets they have now.\n    difference_after = abs((x - 10) - (x - 5 + 10))\n    \n    # Since the expression above is constant and does not depend on x,\n    # we can simplify it to get the answer:\n    \n    difference_after = abs(-10 + 5 - 10)\n    return difference_after\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Convert minutes to hours\n    late_time_hours = 12 / 60\n    early_time_hours = 8 / 60\n\n    # The distance is the same in both cases, so\n    # distance = speed1 * (time1 + late_time) = speed2 * (time2 - early_time)\n\n    speed1 = 3  # km/h\n    speed2 = 7  # km/h\n\n    # Let the actual time to travel the distance be t hours\n    # then 3 * (t + late_time_hours) = 7 * (t - early_time_hours)\n\n    # Solve the equation for t\n    t = (speed2 * early_time_hours + speed1 * late_time_hours) / (speed2 - speed1)\n\n    # Calculate the distance\n    distance = speed1 * (t + late_time_hours)\n\n    return distance\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original number of students in schools A and B as A and B, respectively.\n    A, B = symbols('A B')\n\n    # According to the problem after transferring 20 students from A to B:\n    # A - 20 = B + 20  (because after transfer, A still has 10 more students than B)\n    # We also know that together the schools have 1050 students so:\n    # A + B = 1050\n    equation1 = Eq(A - B, 30)   # because A has 10 more students than B after moving 20 students\n    equation2 = Eq(A + B, 1050)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_questions = 10\n    correct_points = 10\n    incorrect_points = -5\n    total_points = 70\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_points + incorrect_answers * incorrect_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # Without any brackets, the expression is evaluated as follows according to the order of operations:\n    original = 15 + 5 * 5 + 15 - 6 + 7  # 15 + 25 + 15 - 6 + 7 = 56\n    \n    # We need to insert brackets to maximize this value.\n    # There are multiple ways to insert brackets, but we can leverage the fact that\n    # Multiplication will yield a larger product if we increase its operands.\n    \n    # We should find the largest operands for multiplication and ensure addition is performed first.\n    # If we bracket the addition operations like this: (15+5) * (5+(15-6+7)), we get the maximum result.\n    max_value = (15 + 5) * (5 + (15 - 6 + 7))  # (20) * (5 + (15 + 1)) = 20 * 21 = 420\n\n    return max_value\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    math_students = 20\n    both_classes = 11\n    neither_class = 10\n\n    writing_students_only = total_students - neither_class - (math_students - both_classes)\n    \n    return writing_students_only\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    digits = '08072003'\n    prime_candidates = []\n\n    for number in range(1, 50):\n        if isprime(number):\n            if all(str(number).count(d) <= digits.count(d) for d in set(str(number))):\n                prime_candidates.append(number)\n\n    ans = max(prime_candidates)\n    return ans\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    sum_of_sequence = sum(range(1, 18, 2))\n    return sum_of_sequence\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    # total sum of the five numbers\n    total_sum_five_numbers = 5 * 54\n    # total sum of the first two numbers\n    total_sum_first_two_numbers = 2 * 48\n    # total sum of the last three numbers\n    total_sum_last_three_numbers = total_sum_five_numbers - total_sum_first_two_numbers\n    # average of the last three numbers\n    average_last_three_numbers = total_sum_last_three_numbers / 3\n    return average_last_three_numbers\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    teddy_age, father_age = symbols('teddy_age father_age')\n    \n    # When Teddy was 5, his father's age was 7 times his age.\n    equation1 = Eq(father_age, 7 * 5)\n    \n    # We assume that the difference in age between Teddy and his father will always be the same.\n    age_difference = father_age - teddy_age\n    # When his father is 40, how old will Teddy be?\n    equation2 = Eq(father_age - age_difference, 40)\n    \n    # Solving the equation\n    solutions = solve((equation1, equation2), (teddy_age, father_age))\n    \n    # Teddy's age when his father is 40\n    teddy_age_when_father_40 = solutions[teddy_age]\n    return teddy_age_when_father_40\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    sum_digits = 0\n    for page in range(1, 110):\n        sum_digits += sum(int(digit) for digit in str(page))\n    return sum_digits\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Each new cut can intersect all the previous cuts to create the maximum number of slices\n    # For the first cut, we have 1 slice. Each subsequent cut can intersect all the previous cuts\n    cuts = 4\n    slices = 1  # Start with the entire pizza as one slice\n    for i in range(1, cuts + 1):\n        slices += i\n\n    return slices\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Adriana's working on girls\n    girl_part_of_remainder = 1 - 4/5  # Girls were 1/5 of the remainder after the boys\n    girls_ratio = girl_part_of_remainder * (5/7)  # The incorrect step: It should be multiplied with 5/7 not 2/7\n\n    # Adriana's working on adults\n    adults_ratio = 2/7  # Adults were 2/7 of the total audience\n\n    # Difference according to Adriana's workings (incorrect)\n    # difference_ratio = adults_ratio - girls_ratio  # This is incorrect since girls_ratio was wrong\n\n    # Correct calculation for the difference\n    correct_girls_ratio = 1/5 * (5/7)  # Correct ratio for girls\n    correct_difference_ratio = adults_ratio - correct_girls_ratio\n\n    # If the difference ratio corresponds to 80 people\n    people_for_ratio = 80 / correct_difference_ratio\n\n    # Total number of people at the play\n    total_people = int(people_for_ratio)\n\n    return total_people\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position = 10\n    toys_between = 5\n\n    # The rabbit is to the right of the elephant.\n    # So we add the toys in between and the elephant's position to find the\n    # rabbit's position from the left.\n    rabbit_position_left = elephant_position + toys_between + 1\n\n    # Now, find rabbit's position from the right.\n    rabbit_position_right = total_toys - rabbit_position_left + 1\n\n    return rabbit_position_right\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    return 82 + 5135 + 109\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    return sum((3*i + 2)**2 for i in range(11))\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54  # The area of the triangle\n    base = 9   # The length of the base of the triangle\n\n    # The formula for the area of a triangle is (base * height) / 2 = area\n    # Therefore, height = (2 * area) / base\n    height = (2 * area) / base\n\n    return height\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    percentage = 35 / 100\n    total_amount = 700\n    \n    amount = percentage * total_amount\n    \n    return amount\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of chairs (and also the original number of tables)\n    x = symbols('x')\n    \n    # After selling 42 tables and bringing in 24 chairs, the number of chairs is 4 times the number of tables\n    equation = Eq(x + 24, 4 * (x - 42))\n\n    # Solve for x\n    original_chairs = solve(equation, x)\n\n    # Return the number of original chairs\n    return original_chairs[0]\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    # Let's denote the number of pink dolphins as 'p' and gray dolphins as 'g'.\n    # We know that the total number of dolphins is 48.\n    # According to the problem, the number of gray dolphins is 11 times the number of pink dolphins.\n    # Therefore, we have the two equations:\n    # p + g = 48 (equation 1, total number of dolphins)\n    # g = 11p (equation 2, relation between gray and pink dolphins)\n    \n    # We can substitute g from equation 2 into equation 1 to find the number of pink dolphins.\n    # p + 11p = 48\n    # 12p = 48\n    p = 48 / 12\n    \n    return int(p)  # Casting to int in case division results in a float.\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    left_of_candy = 4\n    right_of_candy = 7\n    candy_cabinet = 1  # Candy's own cabinet\n\n    total_cabinets = left_of_candy + right_of_candy + candy_cabinet\n\n    return total_cabinets\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # 2^2019 can be rewritten as (2^1963) * (2^56)\n    numerator = pow(2, 56)\n    # 4^982 can be rewritten as (2^1964)\n    # Therefore, 4^982 - 2^1963 equals to 2^1963(2 - 1) = 2^1963\n    denominator = pow(2, 1963)\n    \n    # Since we want to find the remainder when this fraction is divided by 5\n    # We reduce numerator and denominator modulo 5\n    numerator_mod = numerator % 5\n    denominator_mod = denominator % 5\n\n    # Division in modulo 5 can be calculated as multiplying by the multiplicative inverse\n    # Since 5 is prime, the multiplicative inverse of any number not divisible by 5 exists\n    # The multiplicative inverse of denominator_mod (which is 2^1963 % 5) can be calculated\n    inverse_mod = pow(denominator_mod, 5-2, 5)\n\n    # Now compute the remainder for the original division\n    ans = (numerator_mod * inverse_mod) % 5\n    return ans\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    ans = 1914 // 6\n    return ans\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    first_day_books = 455\n    second_day_books = 198\n    total_books = first_day_books + second_day_books\n    return total_books\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = total_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    num_classes = 5\n    total_boxes = boxes_per_class * num_classes\n    return total_boxes\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        if int(f\"106{Y}\") % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    # The hundreds place can be 1-6 because the sum of digits is 7\n    # and we need at least 1 in tens and units place each to form a 3-digit number.\n    for hundreds in range(1, 7):\n        # The tens place can be 0-6 since the sum is 7 and hundreds place is already taken some of it.\n        for tens in range(0, 7-hundreds):\n            # The units digit is determined by subtracting the sum of hundreds and tens from 7.\n            units = 7 - hundreds - tens\n            # Check if the units digit is even to satisfy the condition of the number being even.\n            if units % 2 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    # Since the number must be divisible by 2 and 5, it must end with 0.\n    last_digit = 0\n    # Now we need to find the second to last digit, so the number is also divisible by 3.\n    # The sum of its digits must be divisible by 3.\n    for i in range(9, -1, -1):  # Start from 9, counting down to 0\n        if (4 + 9 + i + last_digit) % 3 == 0:  # Check if the sum of the digits is divisible by 3\n            second_last_digit = i\n            break\n\n    # Construct the largest possible four-digit number\n    largest_number = 4900 + 10 * second_last_digit + last_digit\n    return largest_number\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_integers = n * (n + 1) // 2\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n\n    equation1 = Eq(ana, olaf + 116)\n    equation2 = Eq(kristoff, 5.5 * olaf)\n    equation3 = Eq(ana, 150)\n\n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n\n    height_difference = solutions[kristoff] - solutions[ana]\n\n    return height_difference\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let m represent the mass of the empty jar and c the mass of one chocolate\n    # From the first condition, we can write an equation: m + 5c = 185\n    # From the second condition: m + 17c = 317\n\n    # To find the mass of one chocolate, we subtract the first equation from the second:\n    # (m + 17c) - (m + 5c) = 317 - 185\n    # 12c = 132\n    # c = 132 / 12\n    c = 132 / 12\n\n    # Now, to find the mass of the jar with 10 chocolates:\n    # m + 10c = m + 10 * (132 / 12)\n    # But we need the value of m from the first equation: m = 185 - 5c\n    m = 185 - 5 * c\n\n    # So, the mass of the jar with 10 chocolates is:\n    mass_with_10_chocolates = m + 10 * c\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    return 113 - 29\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    # Let x represent the number of motorcycles, y represent the number of cars, and z represent the number of lorries.\n    # We have the following equations:\n    # x + y + z = 27 (total number of vehicles)\n    # 2x + 4y + 6z = 96 (total number of wheels)\n    # y = z (the number of cars is equal to the number of lorries)\n    \n    # So we can rewrite the equations as:\n    # x + 2y = 27 (since y = z)\n    # 2x + 10y = 96 (since 4y + 6z = 10y because y = z)\n    \n    # We can use the linear equations to solve for y (number of cars and lorries)\n    # From the first equation, express x in terms of y: x = 27 - 2y\n    # Substitute x in the second equation:\n    # 2(27 - 2y) + 10y = 96\n    # 54 - 4y + 10y = 96\n    # 6y = 96 - 54\n    # 6y = 42\n    # y = 7\n    \n    y = (96 - 2 * 27) // 6\n    return y\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - 1/10\n    return result\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_weight = 700\n    sugar_concentration = 0.32\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    \n    return water_weight\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of each type of fruit\n    apples, pears, mangoes = symbols('apples pears mangoes')\n    \n    # Given ratios and prices\n    pear_ratio = 4/5\n    mango_ratio = 2/5\n    apple_price = 0.60\n    apple_to_pear_money_ratio = 3/2\n    pear_to_mango_money_ratio = 1/5\n    \n    # Set up the equations based on the information given\n    # pears = pear_ratio * apples\n    # mangoes = mango_ratio * apples\n    # apple_price * apples + (apple_price * apples * 2/3) + (apple_price * apples * 2/3 * 1/5) = 150\n    \n    # Total cost equation\n    total_cost_eq = Eq(apple_price * apples + (apple_price * apples * apple_to_pear_money_ratio) + (apple_price * apples * apple_to_pear_money_ratio * pear_to_mango_money_ratio), 150)\n    \n    # Number of pears and mangoes equations\n    pears_eq = Eq(pears, pear_ratio * apples)\n    mangoes_eq = Eq(mangoes, mango_ratio * apples)\n    \n    # Solve the system of equations\n    solutions = solve((total_cost_eq, pears_eq, mangoes_eq), (apples, pears, mangoes))\n    \n    # Calculate the total number of fruits\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n\n    return total_fruits\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_distance = 800\n    total_trees = 21\n    \n    # Since trees are planted at both ends, the number of intervals is one less than the number of trees\n    intervals = total_trees - 1\n    \n    distance_between_trees = total_distance / intervals\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    return 132 // 11\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    ways = factorial(len(word))\n    for count in letter_counts.values():\n        ways //= factorial(count)\n    \n    return ways\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_age_in_3_years = 9\n    hazel_current_age = hazel_age_in_3_years - 3\n    jessica_current_age = hazel_current_age - 3\n    \n    hazel_age_next_year = hazel_current_age + 1\n    jessica_age_next_year = jessica_current_age + 1\n    \n    total_age_next_year = hazel_age_next_year + jessica_age_next_year\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # The number is divisible by 2, so the last digit must be even.\n    # The number is divisible by 5, so the last digit must be 0 or 5; but since it's also even, it must be 0.\n    # The number must add up to a multiple of 3 and 11 when all digits are summed.\n    \n    for d1 in range(10):      # Iterate over possible digits for the first blank\n        for d2 in range(10):  # Iterate over possible digits for the second blank\n            for d3 in range(10):  # Iterate over possible digits for the third blank\n                number = int(f\"1992{d1}{d2}{d3}0\")\n                # Check divisibility by 3 and 11\n                if number % 3 == 0 and number % 11 == 0:\n                    return number  # Return the smallest number that satisfies all conditions\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_in_half_year = 6\n    total_second_half = average_second_half * months_in_half_year\n    total_year = total_first_half + total_second_half\n    months_in_year = 12\n    average_per_month = total_year / months_in_year\n    return average_per_month\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = last_term - first_term + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_terms\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    return gcd(4811, 1981)\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    total_score_for_six = 6 * 92\n    total_score_for_five = 5 * 94\n    score_sixth_assignment = total_score_for_six - total_score_for_five\n    return score_sixth_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price = 65\n    selling_price = 74\n    remaining_pairs = 5\n    total_profit = 440\n\n    profit_per_pair = selling_price - cost_price\n    pairs_sold = total_profit // profit_per_pair\n    \n    initial_pairs = pairs_sold + remaining_pairs\n\n    return initial_pairs\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    # Let x be the number of cars in the car park at the beginning.\n    # According to the problem, after 8 cars enter and 10 cars exit,\n    # there are 30 cars in the car park now.\n    # So the equation is: x + 8 - 10 = 30\n\n    # Solving the equation for x gives us the number of cars at the beginning.\n    x = 30 + 10 - 8\n    return x\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    halfway_time = datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    \n    duration = end_time - halfway_time\n    start_time = halfway_time - duration\n    \n    return start_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number we are looking for\n    x = symbols('x')\n\n    # multiply it by two and divide the result by four, then multiply the result of that by itself\n    step1 = (2*x)/4\n    step2 = step1**2\n\n    # a number that when I subtract four and divide by ten, gives me six\n    equation = Eq((step2 - 4)/10, 6)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the original number\n    return solution[0]  # since we are looking for a single number\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return int(toys_in_20_minutes)\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "from math import gcd\n\ndef solution():\n    amy_visit = 24\n    ginny_visit = 36\n\n    lcm = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n\n    return lcm\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_liters = 59\n    filled_per_day = 10\n    leaked_per_night = 3\n    effective_fill = filled_per_day - leaked_per_night\n    current_liters = 3  # because it's filled 3 liters already\n    days_passed = 1  # as it starts with the first day\n\n    while current_liters < total_liters:\n        current_liters += effective_fill\n        days_passed += 1\n\n        # if current_liters reaches or exceeds total_liters before leaking at night\n        if current_liters >= total_liters:\n            break\n\n        current_liters -= leaked_per_night\n\n        # to check if pool is filled during the day, not at night\n        if current_liters + filled_per_day > total_liters:\n            days_passed += 1\n            break\n\n    return days_passed\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    # Calculate each of the amounts\n    amounts = [1/2 * 30, 1/3 * 36, 1/4 * 40, 1/5 * 60, 1/6 * 96]\n    \n    # Find the smallest and largest amounts\n    smallest = min(amounts)\n    largest = max(amounts)\n    \n    # Calculate the difference between the smallest and largest\n    diff = largest - smallest\n    \n    return diff\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time_str = \"11:20 PM\"\n    end_time = datetime.strptime(end_time_str, \"%I:%M %p\")\n    duration = timedelta(minutes=225)\n    start_time = end_time - duration\n    ans = start_time.strftime(\"%I:%M %p\")\n    return ans\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # Half an hour converted to seconds\n    current_number = 1\n    digits_written = 0\n\n    while True:\n        digits_in_current_number = len(str(current_number))\n        # If the digits written including the current number exceed the total seconds, break the loop\n        if digits_written + digits_in_current_number > total_seconds:\n            break\n        # Add the digits of the current number to the total digits written\n        digits_written += digits_in_current_number\n        # Move to the next number\n        current_number += 1\n\n    # The last number we have finished writing\n    last_finished_number = current_number - 1\n    return last_finished_number\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    num_blue = 5\n    num_white = 9\n    num_black = 2\n    # At least as many as all non-green marbles must be drawn\n    # before he is guaranteed to get a green one\n    ans = num_blue + num_white + num_black + 1\n    return ans\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    num_teams = 20\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_per_minute = toys_in_3_minutes / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for _ in range(years):\n        initial_rabbits = (initial_rabbits * 3) // 2\n        \n    return initial_rabbits\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_climb = 6 * 6 + 2  # Climb for the first 6 days plus the 7th day\n    remaining_distance = 20 - total_climb  # Remaining distance to climb after 7 days\n    nightly_slide = 6 - remaining_distance  # Slide distance is the climb minus the remaining distance\n    return nightly_slide\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120 = 120 / puffs_per_hour\n\n    return hours_for_120\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # Since it's a single round-robin tournament and there are 8 players,\n    # each player plays against every other player once.\n    # Therefore, every player will play 7 matches.\n    \n    # Now, since all players have a different number of wins, and one is a champion,\n    # it means the maximum number of wins one can have is 7 and the minimum is 0,\n    # following a descending order.\n    \n    # Since the champion has the highest number of wins and wins have to be different,\n    # the champion must have won all of their matches to ensure the maximum wins.\n    # Therefore, the champion has 7 wins.\n\n    return 7\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    weight_metal1 = 6  # mg\n    nickel_percent1 = 45  # percentage of nickel in the first metal\n\n    weight_metal2 = 14  # mg\n    nickel_percent2 = 60  # percentage of nickel in the second metal\n\n    total_weight = weight_metal1 + weight_metal2  # total weight of the new metal\n\n    nickel_weight1 = (nickel_percent1 / 100) * weight_metal1  # weight of nickel in the first metal\n    nickel_weight2 = (nickel_percent2 / 100) * weight_metal2  # weight of nickel in the second metal\n\n    total_nickel = nickel_weight1 + nickel_weight2  # total weight of nickel in the new metal\n\n    nickel_concentration = (total_nickel / total_weight) * 100  # percent concentration of nickel in the new metal\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    sum_of_numbers = 13\n    possible_combinations = combinations_with_replacement(range(1, sum_of_numbers+1), 4)\n    max_product = 0\n    for combination in possible_combinations:\n        if sum(combination) == sum_of_numbers:\n            product = 1\n            for number in combination:\n                product *= number\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Let the walking speed of Candy be x meters per minute\n    # Therefore, the walking speed of Ivy would be x + 20 meters per minute\n    \n    # Candy's walking time in minutes when they meet is 12 minutes\n    # Ivy's walking time in minutes when they meet is 12 + 6 minutes\n    \n    # The distance covered by Candy when they meet is 12 * x meters\n    # The distance covered by Ivy when they meet is (12 + 6) * (x + 20) meters\n    \n    # The total distance is the sum of distances covered by both\n    # So we get the equation:\n    # 12 * x + (12 + 6) * (x + 20) = 1200\n    \n    # Simplify the equation to solve for x\n    # 12x + 18x + 360 = 1200\n    # 30x + 360 = 1200\n    # 30x = 1200 - 360\n    # 30x = 840\n    # x = 840 / 30\n    x = 840 / 30\n    \n    # Return the walking speed of Candy\n    return x\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of years in the future (x)\n    x = symbols('x')\n\n    # Create the equation where Edward's mother's age will be 3 times Edward's age\n    equation = Eq((32 + x), 3 * (8 + x))\n\n    # Solve the equation\n    years = solve(equation, x)\n\n    return years[0]\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio_cm_to_m = 1/6  # From the given scale 1 cm to 6 m.\n    length_on_plan_cm = 5  # Length of the playground on the plan in cm.\n    \n    # Calculate the real length using the scale ratio.\n    real_length_m = length_on_plan_cm / scale_ratio_cm_to_m\n    \n    return real_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100): # 10 is the smallest 2-digit number, 99 is the largest\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    n = 1\n    while True:\n        if (n * n) + 11 + 2 * n + 1 == (n + 1) * (n + 1) + 12:\n            return (n * n) + 11\n        n += 1\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cookie_box_cost = 6\n    money_available = 250\n    \n    num_boxes = money_available // cookie_box_cost\n    \n    return num_boxes\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    return 673 + 56\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen = symbols('pen')\n    pencil = pen - 0.5\n    total_cost = Eq(pen + pencil, 4.5)\n\n    price_of_pen = solve(total_cost, pen)\n\n    return price_of_pen[0]\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    \n    boys = 15\n    total_apples_by_boys = boys * 30\n    total_apples_by_girls = girls * 20\n    average_apples_per_person = 26\n    \n    total_people = boys + girls\n    total_apples = total_apples_by_boys + total_apples_by_girls\n    \n    equation = Eq(total_apples / total_people, average_apples_per_person)\n    \n    num_girls = solve(equation, girls)[0]\n    \n    return num_girls\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_items = 12\n    total_cost = 340\n    basketball_cost = 30\n    volleyball_cost = 25\n\n    # Hypothesis: Let's assume all 12 items were basketballs\n    # Then calculate the cost difference when replacing basketballs with volleyballs\n    cost_difference = basketball_cost - volleyball_cost\n\n    # Calculate the amount spent over what would have been if all items were volleyballs\n    over_cost = total_cost - total_items * volleyball_cost\n    \n    # Calculate the number of basketballs by dividing the over_cost by the cost difference\n    num_basketballs = over_cost // cost_difference\n\n    return num_basketballs\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1/k for k in range(1, j)) for j in range(2, 61))\n    return ans\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    initial_candies = 36\n    given_to_lily = 3/4 * initial_candies\n    remaining_after_lily = initial_candies - given_to_lily\n    given_to_brother = 1/3 * remaining_after_lily\n    remaining_candies = remaining_after_lily - given_to_brother\n    return remaining_candies\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000\n    richie_share = 1/3 * total_wealth\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = 1/2 * remaining_after_richie\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = 2/5 * remaining_after_thrifty\n    archie_share = remaining_after_thrifty - bounty_share\n    \n    return archie_share\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts Roy and Dennis have\n    roy, dennis = symbols('roy dennis')\n\n    # Total money shared\n    total_money = 340\n\n    # Initial equation representing the total amount of money shared\n    equation1 = Eq(roy + dennis, total_money)\n\n    # Equation representing the money left after Roy spent 2/3 of his money\n    equation2 = Eq(roy - (2/3) * roy, dennis - (1/4) * dennis * 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (roy, dennis))\n\n    # Calculate the amount of money Dennis had in the end\n    dennis_end = solutions[dennis] - (1/4) * solutions[dennis]\n\n    return dennis_end\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    # Let the amount of mint candies be m, chocolate be c, and strawberry be s\n    # Let the total mass of the containers be T1, T2, T3 for the three containers respectively\n  \n    # We have the following relationships:\n    # T1 = m + c + s\n    # T2 = m + c + 7/2 * s\n    # T3 = m + c + 9/2 * s\n    \n    # and the fractions for strawberry:\n    # s / T1 = 2/5 => s = 2/5 * T1\n    # s / T2 = 2/7 => s = 2/7 * T2\n    # s / T3 = 2/9 => s = 2/9 * T3\n    \n    # We also know the total mass of the containers combined:\n    # T1 + T2 + T3 = 1371\n    \n    # Replacing s with the fractions we have:\n    # T1 = m + c + 2/5 * T1\n    # T2 = m + c + 2/7 * T2 => T2 = 5/5 * T2 = (m + c) * 5/3 + 2/5 * T2\n    # T3 = m + c + 2/9 * T3 => T3 = 7/7 * T3 = (m + c) * 7/5 + 2/5 * T3\n    \n    # Let's set up the system of equations:\n    # (3/5) * T1 = m + c\n    # (5/3) * (m + c) = (3/5) * T2\n    # (7/5) * (m + c) = (3/5) * T3\n    \n    # Now we can express T2 and T3 in terms of T1:\n    # T2 = (5/3) * (3/5) * T1 = T1\n    # T3 = (7/5) * (3/5) * T1 = T1\n    \n    # Since T1 = T2 = T3, we can divide the total mass by 3:\n    T1 = 1371 / 3\n    \n    # The mass of strawberry candies in container 1:\n    s = 2 / 5 * T1\n    \n    # Since T1 = T2 = T3, the mass of strawberry candies will be the same in each container:\n    total_strawberry_mass = s * 3\n    \n    return total_strawberry_mass\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of curry puffs sold on Friday be 'friday'\n    friday = symbols('friday')\n\n    # Define the equations based on the problem statement\n    equation = Eq(friday + (friday + 27) + (friday - 14), 475)\n\n    # Solve the equation\n    solutions = solve(equation, friday)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    ans = 675 // 25\n    return ans\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    digits = 300\n    pages_with_1_digit = 9                        # pages 1-9\n    pages_with_2_digits = 90 * 2                  # pages 10-99\n    pages_with_3_digits = digits - pages_with_1_digit - pages_with_2_digits\n    \n    pages_with_3_digits = pages_with_3_digits // 3\n    \n    last_page = 99 + pages_with_3_digits\n    \n    return last_page\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "from sympy import isqrt, divisors\n\ndef solution():\n    number = 693\n    factors = divisors(number)\n    \n    for d in factors:\n        if (number * d) == isqrt(number * d) ** 2:\n            return d\n        \nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    last_digit_13 = 3 ** (242 % 4)\n    last_digit_17 = 7 ** (379 % 4)\n    last_digit_4 = 6  # 4^2 = 16 which has a unit digit of 6 and any higher even power will have the same unit digit\n\n    last_digit_sum = (last_digit_13 + (last_digit_17 * last_digit_4)) % 10\n\n    return last_digit_sum\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    num_balls = 8\n    ball_cost = 20.45\n    num_hula_hoops = 6\n    \n    total_ball_cost = num_balls * ball_cost\n    total_hula_hoop_cost = total_cost - total_ball_cost\n    cost_per_hula_hoop = total_hula_hoop_cost / num_hula_hoops\n    \n    return cost_per_hula_hoop\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    \n    solutions = solve(equation, A)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    # Calculate the total cost of the steak\n    total_cost = 3.5 * 7.5\n    \n    # Calculate the remaining money Vani has after buying the steak\n    remaining_money = 20 - total_cost\n    \n    # If the remaining money is negative, Vani needs more money\n    if remaining_money < 0:\n        return abs(remaining_money)\n    else:\n        # If the remaining money is positive or zero, Vani does not need more money\n        return 0\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    volume_per_carton = 3  # in liters\n    total_juice = total_cartons * volume_per_carton\n    juice_consumed = 9  # in liters\n    remaining_juice = total_juice - juice_consumed\n    container_volume = 5  # in liters\n    \n    containers_needed = (remaining_juice + container_volume - 1) // container_volume\n    \n    return containers_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    position_from_start = 12\n\n    position_from_end = total_people - position_from_start + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    return 498 + 349\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    marry, alexis, charlotte_initial, charlotte_final = symbols('marry alexis charlotte_initial charlotte_final')\n    \n    # Marry had 7/5 as many stickers as Alexis\n    equation1 = Eq(marry, alexis * (7/5))\n    \n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    marry_share = marry * 0.20\n    alexis_share = alexis * 0.20\n    \n    # Charlotte's stickers increased by 80%\n    equation2 = Eq(charlotte_final, charlotte_initial * 1.80)\n    \n    # The combined share equals the increase in Charlotte's stickers\n    equation3 = Eq(marry_share + alexis_share, charlotte_final - charlotte_initial)\n    \n    # Marry had 20 stickers more than Charlotte in the end\n    equation4 = Eq(marry - marry_share, charlotte_final + 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte_initial, charlotte_final))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    light, heavy = symbols('light heavy')\n    equation1 = Eq(6 * light + 6 * heavy, 65.7)\n    equation2 = Eq(heavy, 2 * light)\n\n    solutions = solve((equation1, equation2), (light, heavy))\n\n    return round(solutions[light])\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    # Benson and Clive had a total of $705\n    equation1 = Eq(benson + clive, 705)\n    # Benson bought a calculator for $34\n    # Clive bought a badminton racket for $63\n    # They then had the same amount of money left\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    # How much did Clive have at first\n    return solutions[clive]\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_A = 42\n    sweets_B = 4 * sweets_A\n    sweets_C = 2 * sweets_B\n\n    return sweets_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    total_pens = 126\n    # Let the number of pens Denise has be x.\n    # Then Jay has 6x pens.\n    # Together they have x + 6x = 126 pens.\n    # So we solve for x: 7x = 126\n    x = total_pens // 7  # Integer division\n    return x\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    # From the given information, we can create equations:\n    # (A + B) / 2 = 50  => A + B = 100\n    # (B + C) / 2 = 43  => B + C = 86\n    # (A + C) / 2 = 45  => A + C = 90\n    \n    # Adding all three equations: 2A + 2B + 2C = 276\n    # Dividing by 2 to get A + B + C\n    A_plus_B_plus_C = 276 / 2\n    \n    # The average of A, B, and C is (A + B + C) / 3\n    average_ABC = A_plus_B_plus_C / 3\n    \n    return average_ABC\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # Cost of 5 chocolate bars\n    cost_per_chocolate = 1.26\n    total_cost_chocolate = 5 * cost_per_chocolate\n\n    # Total cost of 6 cookies is same as total cost of 5 chocolate bars\n    total_cost_cookies = total_cost_chocolate\n\n    # Cost of each cookie\n    cost_per_cookie = total_cost_cookies / 6\n\n    # Money at first\n    total_money = 9.05\n\n    # Cost of 4 cookies\n    cost_4_cookies = 4 * cost_per_cookie\n\n    # Money left after buying 4 cookies\n    money_left = total_money - cost_4_cookies\n\n    return round(money_left, 2)  # round to 2 decimal places as required for currency\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of boys be 'b' and the number of girls be 'g'\n    b, g = symbols('b g')\n\n    # Every 3 boys share 1 ball, and every 2 girls share 1 ball. \n    equation1 = Eq((b/3 + g/2), 250)\n    # The total number of children is 650.\n    equation2 = Eq(b + g, 650)\n\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    for number in range(1, 100):  # We assume the number is less than 100 for practical purposes\n        if 8 * 11 == number * 9 + 34:\n            return number\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # girl = number of girls after 25 left the classroom\n    # boy = number of boys after 15 left the classroom\n    girl, boy = symbols('girl boy')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(girl, (2/3) * (boy + 15))  # Girls are 2/3 the number of boys after 15 left\n    equation2 = Eq(girl + 25, boy)  # Number of girls before 25 left equals number of boys after 15 left\n\n    # Solve the equations for boy and girl\n    solutions = solve((equation1, equation2), (girl, boy))\n\n    # Calculate the total number at first\n    total_students = solutions[girl] + 25 + solutions[boy] + 15\n\n    return total_students\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    decrease = 12\n    midnight_temp = midday_temp - decrease\n    return midnight_temp\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    total_spent = 6400\n    discount_rate = 0.80\n    original_price = total_spent / (1 - discount_rate)\n    savings = original_price - total_spent\n    return savings\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_side_length = 7  # Side length of the square base in cm\n    hole_side_length = 3  # Side length of the square hole in cm\n    volume_with_hole = 320  # Volume of the prism with hole in cm^3\n\n    # Area of the base square\n    base_area = base_side_length ** 2\n    # Area of the hole\n    hole_area = hole_side_length ** 2\n    # Subtract the hole area from the base area to get the effective area for volume calculation\n    effective_base_area = base_area - hole_area\n\n    # Calculate the height using the volume formula V = base_area * height\n    height = volume_with_hole / effective_base_area\n\n    return height\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let x be the number of 10-cent coins and y be the number of 50-cent coins.\n    # According to the problem, the ratio of 10-cent to 50-cent coins is 8:3, therefore x/y = 8/3.\n\n    # The total value of the 10-cent coins is x * 10 cents, and the total value of the 50-cent coins is y * 50 cents.\n    # The sum of these values is 7590 cents (because $75.90 is equivalent to 7590 cents).\n\n    # The equations based on the given conditions are:\n    # 10x + 50y = 7590 (total value of coins in cents)\n    # x/y = 8/3 (ratio of the number of coins)\n\n    # We need to find y (the number of 50-cent coins) and multiply by 50 to get the value in cents of the 50-cent coins.\n    # We can express x in terms of y using the ratio: x = (8/3) * y\n\n    # Substitute the expression for x in terms of y into the total value equation:\n    # 10*(8/3)*y + 50*y = 7590\n    # Solve this equation for y:\n\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    equation = Eq(10 * (8/3) * y + 50 * y, 7590)\n    number_of_50cent_coins = solve(equation, y)[0]\n\n    # Calculate the total value of the 50-cent coins\n    value_of_50cent_coins = 50 * number_of_50cent_coins\n\n    # Convert from cents to dollars\n    return value_of_50cent_coins / 100\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    # Initialize the minimum number of cuts required\n    # Knowing that with each cut we can increase the number of pieces by the number of cuts made so far + 1\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        cuts += 1\n        pieces += cuts\n    \n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # Initialize variables\n    current_sum = 0\n    n = 1\n\n    # Find the block in which the 2008th number lies\n    while current_sum + n < 2008:\n        current_sum += n\n        n += 1\n\n    # The position of the number in its block\n    position = 2008 - current_sum\n\n    return position\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "def solution():\n    from math import factorial\n\n    # Total people excluding Amy and Judy to arrange is 6 (since Amy and Judy sit together, we treat them as one unit)\n    # Hence, we are arranging 7 units around a circular table\n    distinct_arrangements = factorial(6)  # For circular arrangements: (n-1)!\n    \n    # Now, Amy and Judy can swap their seats in 2! ways\n    arrangements_Amy_Judy = factorial(2)\n\n    # Total arrangements is product of the two possibilities above\n    total_arrangements = distinct_arrangements * arrangements_Amy_Judy\n\n    return total_arrangements\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5  # Weight of one x in grams\n    # 3 x's balance with 10 y's, so we can write the equation as 3*x_weight = 10*y_weight\n    # Thus y_weight = (3 * x_weight) / 10\n    y_weight = (3 * x_weight) / 10\n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = [6, 10, 14, 18, 22, 26]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 5, 9]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit must be between 1 and 9 (inclusive) for a three-digit number\n        for j in range(10):  # The second digit must be between 0 and 9 (inclusive)\n            for k in range(10):  # The third digit must be between 0 and 9 (inclusive)\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 101):\n        if i % 5 == 2:\n            total_sum += i\n    return total_sum\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    # Let x be the number of cucumbers Tommy sold\n    # According to the problem, the number of tomatoes is 3 more than 3 times the number of cucumbers: 27 = 3 * x + 3\n    # We need to find x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')  # Define the symbol x for the unknown\n    equation = Eq(3 * x + 3, 27)  # Create the equation\n    \n    # Solve the equation for x\n    num_cucumbers = solve(equation, x)[0]\n    \n    return num_cucumbers\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_to_avril = total_bags // 3\n    left_for_pip = total_bags - given_to_avril\n    return left_for_pip\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        # Skip if A is 0, as it wouldn't be a 3-digit number\n        if A == 0:\n            continue\n        ABC = A * 100 + B * 10 + C\n        return ABC\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    n = 31\n    # 16th term (a16) is 100 which is the first day she ate mosquitoes, and difference (d) is 6\n    a16 = 100\n    d = 6\n\n    # 16th term formula: a16 = a1 + (16 - 1) * d, where a1 is the first term\n    # So, a1 = a16 - (16 - 1) * d\n    a1 = a16 - (16 - 1) * d\n\n    # Sum of n terms of an arithmetic sequence: S = n/2 * (2a1 + (n - 1)d)\n    S = n / 2 * (2 * a1 + (n - 1) * d)\n    return int(S)\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # The strategy to win a game like this is to always leave your opponent with a multiple of 3\n    # as after your turn, because whatever they take (1 or 2), you can force them to leave a multiple of 3.\n    # You start with 7, so you want to reduce this to 6 on your first turn to leave a multiple of 3\n    # for Dylan, ensuring you can continue the pattern and win.\n    \n    # Determine the number of matches Chris should take:\n    chris_take = 7 % 3  # This will give either 1 or 2, which is the number Chris must take to leave Dylan with 6 matches.\n\n    return chris_take\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    morning_time = (9 * 60) + 23  # Convert 9.23am to minutes\n    afternoon_time = (13 * 60) + 6  # Convert 1.06pm to minutes (13 because it's after 12pm)\n\n    minutes_between = afternoon_time - morning_time  # Calculate the difference\n\n    return minutes_between\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        ABAC = 1000 * A + 100 * B + 10 * A + C\n        DBEC = 1000 * D + 100 * B + 10 * E + C\n        ACEDC = 10000 * A + 1000 * C + 100 * E + 10 * D + C\n        if ABAC + DBEC == ACEDC:\n            return DBEC\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    # Using the difference of two squares formula a^2 - b^2 = (a + b)(a - b)\n    # Pip's incorrect answer was based on a misconception of the formula.\n    result = 64**2 - 36\n    return result\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Assuming the information given about the number of restaurants,\n    # quantity of cuisines, etc., are missing in the question. \n    # With no concrete data, we cannot calculate the number of choices.\n    pass\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    # Since 1+2+3+...+9 is an arithmetic sequence, we can use the formula for the sum of an arithmetic sequence\n    # sum = n/2 * (first_term + last_term), where n is the number of terms\n    n1 = 9\n    sum1 = n1 * (1 + n1) // 2\n\n    # The sequence then goes 8+7+6+...+1, which is another arithmetic sequence missing the 9\n    # We can calculate this using the same formula but since we've already added the numbers 1 through 9,\n    # we only need to add 8 through 1 again.\n    n2 = 8\n    sum2 = n2 * (1 + n2) // 2\n\n    # The total sum is the sum of both sequences.\n    total_sum = sum1 + sum2\n\n    return total_sum\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Angel bought 3 notebooks, 4 pencil cases and 5 erasers at $50\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n\n    # A notebook and a pencil case cost $6\n    equation2 = Eq(notebook + pencil_case, 6)\n\n    # A pencil case and an eraser cost $8\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    return (53 - 50) + (47 - 44) + (41 - 38) + (35 - 32) + (29 - 26) + 23\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    ans = 6.6 * 30\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48  # distance in meters\n    speed = 8      # speed in meters per minute\n    time_taken = distance / speed  # time taken in minutes\n\n    return int(time_taken)\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_age = 4 * 25\n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n    dad_age = total_age - (harry_age + mom_age + sister_age)\n    return dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Convert all measurements to centimeters.\n    measurements = [8300, 200, 8, 50]\n\n    # Standard height of a classroom door in centimeters (approximately 200cm).\n    standard_door_height = 200 \n\n    # Find the measurement closest to the standard height.\n    closest_height = min(measurements, key=lambda x: abs(x - standard_door_height))\n\n    return closest_height\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, E, _, _ = perm\n        if A == 0:\n            continue  # A cannot be zero since it's the first digit of a 4-digit number\n        AEEA = int(f\"{A}{E}{E}{A}\")\n        EAEA = int(f\"{E}{A}{E}{A}\")\n        if AEEA + AEEA == EAEA:\n            return AEEA\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    digits = 450\n    total_pages = 0\n    current_digits = 0\n\n    while current_digits < digits:\n        total_pages += 1\n        current_digits += len(str(total_pages))\n\n    # Adjust for the last increment which crossed the limit\n    if current_digits > digits:\n        total_pages -= 1\n\n    return total_pages\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    remaining_after_lunch = 1 - 5/12  # After buying lunch\n    remaining_after_dinner = 1 - 2/7  # After buying dinner\n\n    money_left = 45\n    initial_money = money_left / (remaining_after_lunch * remaining_after_dinner)\n\n    return initial_money\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 1524\n    digit_count = 0\n    page_number = 0\n    \n    while digit_count < total_digits:\n        page_number += 1\n        digit_count += len(str(page_number))\n        \n    return page_number\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    # Total number of games played is combination of 5 choose 2,\n    # because each player plays with every other player exactly once\n    total_games = (5 * 4) // 2\n\n    # Sum of all games won by the four players,\n    # which is also the total number of games lost by the players\n    games_won = 2 + 1 + 4 + 3\n\n    # Games won by Gina is the remaining games\n    gina_wins = total_games - games_won\n\n    return gina_wins\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    difference = max(numbers) - min(numbers)\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Constants given in the problem\n    angle_degrees = 20\n    distance = 400  # meters\n    coefficient_of_friction = 0.2\n    gravitational_acceleration = 9.81  # m/s^2\n\n    # Converting the angle to radians for trigonometric calculations\n    angle_radians = math.radians(angle_degrees)\n\n    # Finding the component of gravitational acceleration parallel to the slope\n    gravitational_component_parallel = gravitational_acceleration * math.sin(angle_radians)\n\n    # The deceleration due to friction is the coefficient multiplied by the component of gravity perpendicular to the slope\n    frictional_deceleration = coefficient_of_friction * gravitational_acceleration * math.cos(angle_radians)\n\n    # The net acceleration is the parallel component of gravity minus the deceleration from friction\n    net_acceleration = gravitational_component_parallel - frictional_deceleration\n\n    # Using kinematics equation: final_velocity^2 = initial_velocity^2 + 2 * acceleration * distance\n    # Since the initial velocity is 0 (starting from rest), the equation simplifies to:\n    final_velocity = math.sqrt(2 * net_acceleration * distance)\n\n    return final_velocity\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    # Let's denote e as the number of questions Eddie answered correctly,\n    # and a as the number of questions Avril answered correctly.\n\n    for e in range(11):  # Eddie can answer from 0 to 10 questions correctly\n        for a in range(11):  # Avril can answer from 0 to 10 questions correctly\n            # Eddie's points\n            eddie_points = e * 10 + (10 - e) * (-5)\n            # Avril's points\n            avril_points = a * 10 + (10 - a) * (-5)\n            # The total points they got together\n            total_points = eddie_points + avril_points\n            # If Eddie got 15 more points than Avril\n            points_difference = eddie_points - avril_points\n\n            # Check if this satisfies the condition\n            if total_points == 155 and points_difference == 15:\n                return a  # Return the number of correct answers for Avril\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_cost = 5\n    bag_cost = 10\n    total_spent = 300\n\n    per_group_cost = 4 * shirt_cost + bag_cost  # Cost of 4 shirts and 1 bag\n    number_of_groups = total_spent // per_group_cost\n    shirts_bought = number_of_groups * 4  # 4 shirts per group\n    \n    if shirts_bought * shirt_cost + number_of_groups * bag_cost == total_spent:\n        correct = True\n    else:\n        correct = False\n    \n    return correct, shirts_bought\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # Number of jobs completed by one man in a day\n    man_work_per_day = 1 / (6 * 5)\n    # Number of jobs completed by one woman in a day\n    woman_work_per_day = 1 / (5 * 6)\n\n    # Work done by 10 men and 5 women in a day\n    total_work_per_day = 10 * man_work_per_day + 5 * woman_work_per_day\n\n    # Total number of days needed to complete the job by 10 men and 5 women\n    total_days = 1 / total_work_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial condition: thrice as many boys as girls\n    equation1 = Eq(boys, 3 * girls)\n\n    # After 12 boys left and 20 girls joined, the number became equal\n    equation2 = Eq(boys - 12, girls + 20)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    import math\n    # weights of type A, B, and C coffee beans\n    weight_A = 56\n    weight_B = 96\n    weight_C = 120\n\n    # calculate the greatest common divisor (GCD)\n    gcd_AB = math.gcd(weight_A, weight_B)\n    gcd_ABC = math.gcd(gcd_AB, weight_C)\n\n    # the greatest mass for each packet is the GCD of all three weights\n    return gcd_ABC\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    number = 35\n    factors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors.append(i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anna_age, mother_age, years = symbols('anna_age mother_age years')\n\n    # Anna's current age is 8 years old\n    anna_current_age = Eq(anna_age, 8)\n    # Anna's mother's current age is 44 years old\n    mother_current_age = Eq(mother_age, 44)\n    # In 'years' years, Anna's mother will be three times as old as Anna\n    future_ages_relation = Eq(mother_age + years, 3 * (anna_age + years))\n\n    # Solve the system of equations\n    solutions = solve((anna_current_age, mother_current_age, future_ages_relation), (anna_age, mother_age, years))\n\n    return solutions[years]\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    min_apples = (30 - 5) // 6  # Subtracting one apple for each of the other five children\n    if (30 - 5) % 6 != 0:       # If there's a remainder, add one more to the count\n        min_apples += 1\n    return min_apples + 1        # Adding one because each child gets at least one apple\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, banana, orange = symbols('apple banana orange')\n    \n    equation1 = Eq(banana, 2 * apple)\n    equation2 = Eq(orange, 3 * apple)\n    equation3 = Eq(apple + banana + orange, 24)\n    \n    solutions = solve((equation1, equation2, equation3), (apple, banana, orange))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    for chickens in range(13):\n        rabbits = 12 - chickens\n        if chickens * 2 + rabbits * 4 == 34:\n            return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = (2.4 * 52) / 100 + (7.6 * 52) / 100\n    return ans\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for num in range(99, 9, -1):\n        if (num - 3) % 4 == 0 and (num - 3) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # Convert total lengths to cm (1 m = 100 cm)\n    may_length_extra = 2.4 * 100\n\n    # Equation: May's total length = Nancy's total length + 2.4 m\n    # 40 * may_short + 70 * may_long = 70 * nancy_long + may_length_extra\n    # Since May and Nancy have an equal number of ribbons:\n    # may_short + may_long = nancy_long\n    # We know may_short = 7 and nancy_long = 18 from the problem statement\n    # Let's solve for may_long:\n    may_short = 7\n    nancy_long = 18\n\n    # Use the given values to calculate may_long\n    may_long = (70 * nancy_long + may_length_extra - 40 * may_short) / 70\n\n    # The total number of May's ribbons is the sum of her short and long ribbons\n    total_may_ribbons = may_short + may_long\n\n    return int(total_may_ribbons)\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio = 3 + 1\n    red_ratio = 3\n    total_paint = 1  # litre\n\n    red_paint = (red_ratio / total_ratio) * total_paint\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n    \n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    mean = 6\n    total_numbers = len(numbers) + 1\n    total_sum = mean * total_numbers\n    missing_number = total_sum - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_amount = 68\n    amount_given = total_amount / 4\n    amount_left = total_amount - amount_given\n    return amount_left\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red = symbols('blue red')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_for_12 = 1.02  # mass for 12 packets in kg\n    mass_per_packet = total_mass_for_12 / 12  # mass for 1 packet in kg\n    total_mass_for_4 = mass_per_packet * 4  # mass for 4 packets in kg\n    return total_mass_for_4\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # To ensure each child gets a different number of apples and the child\n    # with the most gets the least possible, we should distribute the apples \n    # in increasing order starting from 1.\n    # So, for 7 children we will give out 1 to 7 apples respectively.\n    # Let's calculate how many we have distributed and how many left for the 8th child.\n\n    # Distribute apples to the first 7 children, 1 to 7\n    distributed = sum(range(1, 8))  # This is 1 + 2 + ... + 7\n\n    # Subtract the distributed apples from the total number of apples\n    remaining = 50 - distributed\n\n    return remaining\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    incorrect_divisor = 122\n    incorrect_result = incorrect_divisor * 99.396\n    correct_divisor = 1.22\n    true_result = incorrect_result / correct_divisor\n    return true_result\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Let's denote the amount of grass pasture can feed one cow for one day as x.\n    # Therefore, the grassland can feed one cow for 8 * 10 days which is equal to 4 * 15 days.\n    # From this, we can find out how much pasture can feed one cow for one day.\n    x = (8 * 10) / (4 * 15)\n    \n    # Now, we know that the amount of grass is enough to feed one cow for x days.\n    # We want to find out how many cows can it feed for 5 days.\n    # Total amount of grass available for cows in 5 days is x * 5.\n    # Number of cows it can feed is the available grass divided by the days we want to feed them.\n\n    num_cows = (x * 5) / 5\n    return int(num_cows)\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    # Cost of 3 identical tapes\n    cost_of_tapes = 3 * 9  # Each tape costs Â£9\n    \n    # Total cost of 4 CDs and 3 tapes\n    total_cost = 83\n    \n    # Calculate the cost of 4 CDs\n    cost_of_cds = total_cost - cost_of_tapes\n    \n    # Cost of each CD\n    cost_per_cd = cost_of_cds / 4\n    \n    return cost_per_cd\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Initialize symbols for the number of cards Hisham and Melissa have\n    hisham, melissa = symbols('hisham melissa')\n\n    # Equation representing Melissa having twice as many cards as Hisham\n    equation1 = Eq(melissa, 2 * hisham)\n\n    # Equation representing the total number of cards\n    equation2 = Eq(hisham + melissa, 876)\n\n    # Solve for the number of cards Hisham and Melissa have\n    solutions = solve((equation1, equation2), (hisham, melissa))\n\n    # Calculate number of cards Melissa should give to Hisham so both have the same number\n    cards_to_give = (solutions[melissa] - solutions[hisham]) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    answer = 35\n    added_number = 8\n    multiplied_number = 3\n    \n    original_number = (answer - added_number) / multiplied_number\n\n    return int(original_number)\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n    greatest_common_divisor = gcd(boys, girls)\n    ans = boys // greatest_common_divisor\n\n    return ans\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # converting liters to millilitres\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    ans = 36 * (\n        1/(1*6) + 1/(6*11) +\n        1/(11*16) + 1/(16*21) +\n        1/(21*26) + 1/(26*31) +\n        1/(31*36)\n    )\n    return ans\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Since the 4th number is 6 and the 6th number is 15, let's denote the sequence as:\n    # a, b, a+b, a+2b, 2a+3b, 3a+5b\n    # We know that the 4th number is 6 (a+2b) and the 6th number is 15 (3a+5b)\n\n    # From the given data, we set up two equations:\n    # a + 2b = 6 -> equation 1\n    # 3a + 5b = 15 -> equation 2\n\n    # We can now solve these equations to find the values of a and b.\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    equation1 = Eq(a + 2*b, 6)\n    equation2 = Eq(3*a + 5*b, 15)\n\n    # Solving for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Once we have a and b, we can find the 5th number in the sequence as:\n    # 5th number = 2a + 3b\n    fifth_number = 2*solutions[a] + 3*solutions[b]\n\n    # The 7th number in the sequence is the sum of the 5th and 6th numbers.\n    # 7th number = 5th number + 6th number\n    seventh_number = fifth_number + 15\n\n    return seventh_number\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # Calculate the work rate for men and women\n    man_rate = 1 / (24 * 16)  # job per day per man\n    woman_rate = 1 / (16 * 24)  # job per day per woman\n\n    # Total daily work rate with 10 men and 6 women\n    total_rate = (10 * man_rate) + (6 * woman_rate)\n\n    # Number of days to complete the job with the combined work rate\n    days_to_complete = 1 / total_rate\n\n    return days_to_complete\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    min_odd_5_digit_number = float('inf')\n    \n    for perm in permutations(digits):\n        if perm[-1] % 2 != 0:  # Ensuring the last digit is odd\n            num = int(''.join(map(str, perm)))\n            if 10000 <= num < min_odd_5_digit_number:  # number must be 5-digit\n                min_odd_5_digit_number = num\n                \n    return min_odd_5_digit_number\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # For 4 identical rectangles there's a pattern for max regions:\n    # A single rectangle divides the plane into 2 regions.\n    # Two rectangles can divide the plane into at most 4 regions if placed parallel and non-overlapping, or 5 if they cross over.\n    # Three rectangles can make up to 8 regions if parallel, 9 if two are parallel and one crosses them, or 11 if all three cross over.\n    # Following the pattern, four rectangles can divide the plane into a maximum of 14 regions when all cross over.\n    return 14\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = bill_coins * 4\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    solution = solve(equation, julie)\n\n    total_earnings = marion.subs(julie, solution[julie]) + ethan.subs(julie, solution[julie]) + solution[julie]\n\n    return total_earnings\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    # Total people\n    total_people = 5\n    \n    # Eddie can be in any of the 4 positions (not in the middle)\n    eddie_positions = 4\n    \n    # The remaining people can be arranged in any order\n    # Number of ways the remaining people can be arranged\n    remaining_people_arrangements = factorial(total_people - 1)\n\n    # Using multiplication principle\n    total_arrangements = eddie_positions * remaining_people_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # geometric sequence formula a_n = a_1 * r^(n-1)\n    # a_2 / a_1 = a_3 / a_2\n    # n / 96 = 24 / n\n    # n^2 = 96 * 24\n    n_squared = 96 * 24\n    n = n_squared**0.5  # Square root of n_squared\n\n    return int(n)\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    # Let the total amount of money Hamid had initially be x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    watch = x / 3\n    tie = 56\n    remaining = 3 * x / 8\n    \n    # The equation representing the situation is:\n    # amount spent on watch + amount spent on tie + remaining amount = initial amount\n    equation = Eq(watch + tie + remaining, x)\n    \n    # Solve the equation for x\n    solved = solve(equation, x)\n    \n    # Total amount spent is the amount spent on the watch plus the amount spent on the tie\n    total_spent = watch.subs(x, solved[0]) + tie\n    \n    return total_spent\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(1, 10)):\n        num = int(''.join(map(str, perm)))\n        if num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    relative_speed = eddie_speed + train_speed  # m/s\n    time_to_pass = 10  # seconds\n\n    length_of_train = relative_speed * time_to_pass  # m\n\n    return length_of_train\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    max_value = 0\n    for signs in product(['+', '*'], repeat=3):\n        expression = f\"1{signs[0]}2{signs[1]}3{signs[2]}4\"\n        value = eval(expression)\n        if value > max_value:\n            max_value = value\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    correct_marks = 8\n    incorrect_penalty = -3\n    total_questions = 12\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_marks + incorrect_answers * incorrect_penalty == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, (a + b) % 3\n    ans = a\n    return ans\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700\n    bridge_length = 900\n    speed = 400\n\n    # The total distance to cover is the length of the train plus the length of the bridge\n    total_distance = train_length + bridge_length\n\n    # Time = Distance / Speed\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel_current_age, mom_current_age = symbols('hazel_current_age mom_current_age')\n    \n    # Hazel will be three times her current age in 12 years\n    equation1 = Eq(hazel_current_age + 12, 3 * hazel_current_age)\n    \n    # On Hazel's 18th birthday, her mom will be three times her age then\n    equation2 = Eq(mom_current_age + (18 - hazel_current_age), 3 * 18)\n\n    solutions = solve((equation1, equation2), (hazel_current_age, mom_current_age))\n\n    return solutions[mom_current_age]\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the original number of stickers Sam and Peter have\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 more stickers than Peter initially\n    equation1 = Eq(sam, peter + 40)\n    \n    # Sam gives 20% of his stickers to Peter, i.e., Sam has 80% left\n    # Peter gives 25% of his initial stickers to Sam, i.e., he is left with 75% of his initial stickers\n    # After the exchange, Sam has 96 more stickers than Peter\n    equation2 = Eq(sam * 0.8 + peter * 0.25, peter * 0.75 + sam * 0.2 + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n    \n    return solutions[peter]\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n\n    while peter_age != pip_age + pit_age:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n\n    return peter_age\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # The sum of an arithmetic sequence can be calculated by the formula: sum = n/2 * (first_term + last_term)\n    # The average of the first 5 terms = 10 / 5 = 2\n    # The average of the last 5 terms = 120 / 5 = 24\n    # The nth term of an arithmetic sequence can be calculated by: nth_term = first_term + (n - 1) * difference\n    # Thus, the last term of the 60 numbers is the average of the last 5 numbers plus 2 times the common difference \n    # And the first term of the 60 numbers is the average of the first 5 numbers minus 2 times the common difference\n    # Hence, last_term = 24 + 2 * difference and first_term = 2 - 2 * difference\n    # Also, last_term = first_term + (60 - 1) * difference\n    # 24 + 2 * difference = 2 - 2 * difference + 59 * difference\n    # Solving for difference gives us: difference = (24 - 2) / (59 - 2) = 22 / 57\n    difference = 22 / 57\n\n    # Now we calculate the actual first and last term using the found difference\n    first_term = 2 - 2 * difference\n    last_term = 24 + 2 * difference\n\n    # Sum of all 60 numbers using the sum formula for arithmetic sequences\n    total_sum = 60 / 2 * (first_term + last_term)\n\n    return total_sum\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    sheet_number = 5\n    total_sheets = 36 // 4\n    \n    front_page_number = (sheet_number - 1) * 2 + 1\n    back_page_number = (total_sheets - sheet_number + 1) * 2\n\n    sum_of_page_numbers = front_page_number + (front_page_number + 1) + back_page_number + (back_page_number + 1)\n\n    return sum_of_page_numbers\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c be the original cost per laptop, and n be the number of laptops\n    c, n = symbols('c n', real=True, positive=True)\n    \n    # The original profit is the difference between selling price and cost times number of laptops\n    original_profit = Eq(n * (2000 - c), 60000)\n    \n    # New cost per laptop after it decreased by 1/5 of the original cost\n    new_cost = c - (c / 5)\n    \n    # New profit is 30% more than the original profit\n    new_profit = Eq(n * (2000 - new_cost), 60000 * 1.30)\n    \n    # We need to solve the system of equations for n\n    solutions = solve((original_profit, new_profit), (c, n))\n    \n    return solutions[n]\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 numbers, thus 12 possible consecutive numbers (1-2, 2-3, ..., 12-13)\n    # There are 4 different patterns\n    # To make sure we do NOT have consecutive numbers, the maximum cards draw\n    # would be without pairing any two consecutive numbers\n    \n    # We could have 4 cards of number 1, then 4 cards of number 3, and so on\n    # without drawing cards 2, 4, ..., 12, 13.\n    # That would be 6 non-consecutive numbers * 4 patterns = 24 cards\n    \n    # The next card we draw must either be a number that pairs with a consecutive\n    # number that we have already or itâs a new number starting a new possible pairing.\n    # Since we already have filled all available non-consecutive spaces, drawing one more\n    # card would ensure at least 1 consecutive pair.\n\n    max_cards_without_consecutive = 6 * 4\n    return max_cards_without_consecutive + 1\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    return 10 * 2\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    a_values = range(1, 29)  # Since M is positive, a < 28 (a cannot be 28 because it's already a divisor)\n    for a in a_values:\n        for r in range(1, 7):  # Start with the smallest remainder for 7 so that we get the smallest M\n            remainders = [r, r+a, r+2*a, r+4*a]  # Arithmetic progression with common difference 'a'\n            if all(remainders[i] < div for i, div in enumerate([7, 9, a, 28])):  # Check divisors conditions\n                M = max(remainders[i] * div + remainders[i] for i, div in enumerate([7, 9, a, 28]))\n                return M  # Return the first (smallest) M that satisfies all the conditions\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    \n    # Calculate the number of rows using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    num_rows = ((last_term - first_term) // difference) + 1\n\n    # Calculate the sum of the arithmetic sequence using the formula:\n    # sum = n/2 * (first_term + last_term)\n    total_seats = num_rows / 2 * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    # Number of single digits (1-9): 9 digits\n    single_digits = 9\n\n    # Number of two digits (10-99): 90 numbers * 2 digits each = 180 digits\n    two_digits = 90 * 2\n    \n    # Number of three digits (100-129): 30 numbers * 3 digits each = 90 digits\n    three_digits = 30 * 3\n    \n    # Total digits written\n    total_digits = single_digits + two_digits + three_digits\n    \n    return total_digits\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar_weight = 80\n    water_weight = 420\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    for total_students in range(1, 10000, 2):  # Start from 1 and go up by 2 to maintain odd square numbers\n        half_layers = (total_students // 2) + 1\n        boys = half_layers ** 2\n        girls = (half_layers - 1) ** 2\n        if boys - girls == 36:\n            return boys + girls\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    together_time = 4\n\n    together_rate = total_people / together_time\n    gloria_rate = together_rate - ellie_rate\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    return (2 / 5) * 15\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Number of man-days to dig 120 metres\n    man_days_for_120 = 3 * 2  # 3 men * 2 days\n\n    # Number of man-days to dig 1 metre\n    man_days_per_metre = man_days_for_120 / 120\n    \n    # Total number of man-days to dig 880 metres\n    total_man_days_for_880 = man_days_per_metre * 880\n    \n    # Number of days for 4 men to dig 880 metres\n    days_for_4_men = total_man_days_for_880 / 4\n\n    return days_for_4_men\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    first_shelf = 18\n    second_shelf = 24\n    \n    # Let x be the number of books to move from the first to the second shelf.\n    # After moving x books, we'll have (first_shelf - x) books on the first shelf \n    # and (second_shelf + x) books on the second shelf.\n    # We want the second shelf to have twice as many books as the first shelf,\n    # so we set up the equation: second_shelf + x = 2 * (first_shelf - x)\n    # Solving for x:\n    x = symbols('x')\n    equation = Eq(second_shelf + x, 2 * (first_shelf - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = (285 + Fraction(6, 7)) + (181 + Fraction(10, 11)) + (153 + Fraction(12, 13))\n    denominator = Fraction(1, 7) + Fraction(1, 11) + Fraction(1, 13)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time = 20  # time in seconds\n    distance = 300  # distance in meters\n\n    speed = distance / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5*x), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Total number of pupils in the class\n    pupils = symbols('pupils')\n    \n    # Given that 5 pupils are in the school band\n    band = 5\n    \n    # Remaining pupils after removing those in the band\n    remaining = pupils - band\n    \n    # Fraction of remaining pupils in the choir\n    choir_fraction = 3 / 4\n    \n    # Therefore, number of pupils in the choir is 3/4 of the remaining\n    choir = choir_fraction * remaining\n    \n    # 2/9 of the class are neither in the band nor the choir\n    neither_fraction = 2 / 9\n    \n    # Therefore, the number of pupils who are neither in the band nor the choir\n    # is 2/9 of the total pupils\n    neither = neither_fraction * pupils\n    \n    # The sum of pupils in the band, in the choir and neither in the band nor the choir\n    # should equal the total number of pupils\n    equation = Eq(band + choir + neither, pupils)\n    \n    # Solve the equation for the total number of pupils\n    total_pupils = solve(equation, pupils)\n    \n    return total_pupils[0]\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    n = 11\n\n    # Calculate common difference\n    difference = (ninth_term - third_term) // (9 - 3)\n\n    # Calculate first term\n    first_term = third_term - 2 * difference\n\n    # Calculate 11th term\n    eleventh_term = first_term + (n - 1) * difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    # Set a starting point for the number of lollipops (lollipops should be greater than 32 since that's the remainder when using 4 per box)\n    lollipops = 32\n\n    # Increment the number of lollipops by 1 until a solution is found\n    while True:\n        # Check if it fits the condition for both 4 lollipops per box and 7 lollipops per box\n        if lollipops % 4 == 32 and lollipops % 7 == 3:\n            break\n        lollipops += 1\n\n    return lollipops\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of long tubes and short tubes\n    long_tubes, short_tubes = symbols('long_tubes short_tubes', integer=True)\n\n    # Equation representing the total number of tennis balls\n    equation = Eq(8*long_tubes + 5*short_tubes, 47)\n\n    # Since the number of tennis balls is fixed and the capacity of the long tube is greater,\n    # we should minimize the number of long tubes. Hence, solve for the maximum number of short tubes first.\n    solutions = solve((equation,), (long_tubes, short_tubes))\n\n    # Extract the number of long tubes from the solutions\n    long_tubes_solution = [s[long_tubes] for s in solutions if s[long_tubes] >= 0 and s[short_tubes] >= 0]\n\n    # Since it's possible there could be multiple valid combinations, return the least number of long tubes\n    return min(long_tubes_solution)\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    numbers = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    ans = sum(x**3 for x in numbers)\n    return ans\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_rate = 15 / 100\n    discounted_amount = original_price * discount_rate\n    sale_price = original_price - discounted_amount\n    return sale_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let x be the number that 4.32 is multiplied by.\n    # The incorrect multiplication result is 4.32 * x * 10 (as the decimal point is not placed).\n    # The correct result should be 4.32 * x.\n    # According to the problem, the difference between the incorrect and correct result is 2138.4:\n    # 4.32 * x * 10 - 4.32 * x = 2138.4\n    # 43.2 * x - 4.32 * x = 2138.4\n    # 38.88 * x = 2138.4\n    # x = 2138.4 / 38.88\n    x = 2138.4 / 38.88\n    # Now calculate the true result\n    true_result = 4.32 * x\n    return true_result\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # Calculate the differences between the numbers,\n    # since the problem states that the remainders are the same when dividing by A.\n    diff1 = 2758 - 2017\n    diff2 = 3670 - 2758\n\n    # Find the greatest common divisor of the differences,\n    # this will give us the possible values of A excluding 1 and itself.\n    from math import gcd\n    possible_A = gcd(diff1, diff2)\n\n    # Find the divisors of the gcd, which are the possible values of A.\n    divisors = []\n    for i in range(2, possible_A):\n        if possible_A % i == 0:\n            divisors.append(i)\n\n    # Summing all possible values except 1 and the number itself\n    ans = sum(divisors)\n    return ans\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let F be Felicia's bracelets and J be Janice's bracelets\n    # We are given that J_initial = 96\n    # Janice's final bracelets = J_initial + (2/5) * (3/5) * F\n    # Felicia's final bracelets = F - (3/5) * F = (2/5) * F\n    # Ratio of final Felicia's bracelets to Janice's bracelets = 5 : 7\n\n    J_initial = 96\n    bracelet_ratio = 5 / 7\n\n    # Let x be the initial number of Felicia's bracelets\n    # (2/5) * x / (J_initial + (2/5) * (3/5) * x) = 5/7\n    # Solving for x gives us Felicia's initial bracelet count\n\n    # Cross multiply to get\n    # 7 * (2/5) * x = 5 * (J_initial + (2/5) * (3/5) * x)\n    # Simplify and solve for x\n    x = (5 * J_initial) / (7 * (2/5) - 5 * (2/5) * (3/5))\n\n    # Now we find the number of bracelets Janice bought\n    # Which is (2/5) * (3/5) * Felicia's initial bracelets\n\n    bracelets_bought = (2/5) * (3/5) * x\n    return int(bracelets_bought)\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_candies = 448\n    equation1 = Eq(boys * 5 + girls * 3, total_candies)\n    equation2 = Eq(girls, boys + 8)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    milk, fruit = symbols('milk fruit')\n\n    original_ratio = Eq(milk / fruit, 7/9)\n    new_ratio = Eq((milk - 8) / fruit, 2/3)\n\n    solutions = solve((original_ratio, new_ratio), (milk, fruit))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (2, 5)]\n    B, _ = solve_congruence(*congruences)\n    \n    return B\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            return count\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    friends = 60 // 4\n    apples_needed = friends * (4 + 1)\n    return apples_needed\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Grandmother's age in 2008\n    grandmothers_age_2008 = 80\n    # Grandmother's age in 1996\n    grandmothers_age_1996 = grandmothers_age_2008 - (2008 - 1996)\n\n    # Mum's age in 1996\n    mums_age_1996 = 40\n\n    # Grandmother's age when mum was born\n    grandmothers_age_when_mum_born = grandmothers_age_1996 - mums_age_1996\n\n    return grandmothers_age_when_mum_born\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of lemonades and y be the number of \"1000 Plus\" drinks\n    x, y = symbols('x y')\n\n    # We have two equations based on the problem statement:\n    # 1. 4x + 7y = 2012 (total income)\n    # 2. x + y <= 350 (total bottles)\n    # We need to find the minimum y when x + y = 350\n    # Substitute x from the second equation into the first\n    x = 350 - y\n\n    # Now our goal is to minimize y since x + y = 350 (max number of bottles)\n    # Since x is expressed in terms of y, we plug x into the income equation\n    income_eq = Eq(4 * (350 - y) + 7 * y, 2012)\n\n    # Solve for the value of y that minimizes the number of \"1000 Plus\" bottles\n    solutions = solve(income_eq, y)\n\n    # Return the minimum value of y, as it's possible to have multiple solutions\n    return min(solutions)\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    ans = 546 + 287\n    return ans\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # This problem can be solved using the concept of the Pigeonhole Principle.\n    # The worst-case scenario is when Yohan picks every other color except white until he is forced to pick a white sock.\n    \n    # Yohan has to pick all the red and black socks first in the worst case.\n    red_socks = 10\n    black_socks = 10\n\n    # After picking all the red and black socks, the next two socks he picks must be white to guarantee a pair.\n    white_socks_needed = 2\n\n    # Total socks Yohan must take to guarantee a pair of white socks.\n    total_socks = red_socks + black_socks + white_socks_needed\n\n    return total_socks\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    # Total number of groups\n    total_groups = 24\n    # Total number of students\n    total_students = 112\n    # Variables for the count of groups of 4 and 6\n    groups_of_4 = 0\n    groups_of_6 = 0\n\n    # Iterate from 0 to the total number of groups\n    for groups_of_6 in range(total_groups + 1):\n        # Calculate the groups of 4 based on the number of groups of 6\n        groups_of_4 = total_groups - groups_of_6\n        # Check if the total number of students fits the distribution of groups\n        if (groups_of_4 * 4 + groups_of_6 * 6 == total_students):\n            break\n\n    return groups_of_6\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    average_initial = 60\n    total_initial = average_initial * 3\n    \n    average_final = 90\n    total_final = average_final * 4\n    \n    fourth_number = total_final - total_initial\n    \n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    num_metres = 0.52\n    num_centimetres = num_metres * 100\n    return num_centimetres\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    for A in range(1, 10):  # A cannot be 0 as it is a 3-digit number\n        for B in range(0, 10):\n            for C in range(0, 10):\n                if A != B and B != C and A != C:\n                    ABC = 100 * A + 10 * B + C\n                    BCA = 100 * B + 10 * C + A\n                    CAB = 100 * C + 10 * A + B\n                    if ABC + BCA + CAB == 3 * ABC:\n                        return ABC\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Owen the fisher trades 3 fish for 2 rabbit\n    fish_per_rabbit = 3/2\n\n    # Oscar the hunter trades 3 rabbits for 4 packs of wheat\n    rabbit_per_wheat = 3/4\n\n    # Calculate the fish per pack of wheat by multiplying the ratios\n    fish_per_wheat = fish_per_rabbit * rabbit_per_wheat\n\n    # Calculate how many fish Owen should give for 8 packs of wheat\n    total_fish_for_8_wheat = fish_per_wheat * 8\n\n    return total_fish_for_8_wheat\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    factorial = 1\n    for i in range(1, 26):\n        factorial *= i\n\n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # Since the decimal repeats every two digits, and we are summing the\n    # first 20 digits, we will have 10 repetitions of \"A2\".\n    \n    # Thus, the sum of one repetition of the two digits is 80 / 10 = 8.\n    # The digit '2' is known, so we need to find A such that A + 2 = 8.\n    A = 8 - 2  # Subtract 2 from 8 to find the value of A.\n    \n    return A\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    handbag_discount = 0.20\n    handbag_after_discount = 428\n    purse_discount = 0.28\n    total_discount = 121\n\n    handbag_before_discount = handbag_after_discount / (1 - handbag_discount)\n    purse_before_discount = (total_discount - handbag_before_discount * handbag_discount) / purse_discount\n\n    return purse_before_discount\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    distance_climbed = 0\n    day = 0\n    while distance_climbed < 25:\n        day += 1\n        distance_climbed += 4\n        if distance_climbed >= 25:\n            break\n        distance_climbed -= 1\n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    sally_dances_per_week = 2\n    num_weeks = 2\n    return sally_dances_per_week * num_weeks\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Calculate the jogging distance\n    jogging_time = 0.5  # 6:30 AM to 7:00 AM is 0.5 hour\n    jogging_speed = 6  # miles per hour\n    jogging_distance = jogging_time * jogging_speed\n\n    # Calculate the walking distance\n    walking_time = 1  # 7:00 AM to 8:00 AM is 1 hour\n    walking_speed = 5  # miles per hour\n    walking_distance = walking_time * walking_speed\n\n    # Total distance traveled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let x be the original amount of money\n    x = Symbol('x')\n\n    # Money spent on chair\n    chair = 120\n\n    # Money spent on jacket is 40% of remainder after buying chair\n    jacket = 0.4 * (x - chair)\n\n    # He had 30% of his original amount left, so 70% has been spent\n    spent = 0.7 * x\n\n    # Equation representing the total money spent on chair and jacket\n    equation = chair + jacket - spent\n\n    # Solve the equation to find the original amount of money\n    original_amount = solve(equation, x)\n\n    # There might be multiple solutions, but we need the one that makes sense in the context\n    for amount in original_amount:\n        if amount > 0:\n            return amount\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import gcd \n\ndef solution():\n    a = 6\n    b = 10\n    lcm = a * b // gcd(a, b)\n    return lcm\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n\n    # Calculate the minimum number of books in the layer with the most books\n    # using the Pigeonhole Principle. The formula is:\n    # ceiling(total_items / total_containers)\n    most_books = -(-total_books // layers)  # Ceiling division in Python\n\n    return most_books\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books bought initially\n    x = symbols('x')\n\n    # Initial total cost for x books\n    initial_cost = x * 3.5\n\n    # Cost of 2 additional books\n    additional_cost = 2 * 6\n\n    # The new average cost for x+2 books\n    new_avg = 4\n\n    # Total number of books is now x + 2\n    equation = Eq((initial_cost + additional_cost) / (x + 2), new_avg)\n\n    # Solve the equation\n    num_books = solve(equation, x)\n\n    # Number of books bought initially + 2 additional books\n    return num_books[0] + 2\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for hundred in range(1, 4):  # The hundreds place can only be 1, 2, or 3\n        for ten in range(0, 4):  # The tens place can be 0, 1, 2, or 3\n            for one in range(0, 4):  # The ones place can be 0, 1, 2, or 3\n                if hundred != ten and hundred != one and ten != one:  # All digits must be different\n                    count += 1\n    # Subtract cases where ten's place is zero as we cannot have a zero in the hundred place\n    count -= 3  # there are three permutations where ten's place can be zero (0**)\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # Since the sequence is decreasing\n    \n    # formula to find the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # we want to find n such that a_n < 0\n    # 0 > 50 + (n - 1) * (-4)\n    # (n - 1) * 4 < 50\n    # n - 1 < 12.5\n    # n < 13.5\n    # since n must be an integer, n â¤ 13\n\n    num_terms = 13  # The first 13 terms are non-negative, the 14th is the first negative term\n\n    return num_terms\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "from sympy import symbols, solve\n\ndef solution():\n    a, b, c = symbols('a b c')\n    \n    sum_eq = a + b + c - 31\n    product = a * b * c\n    \n    # Find critical point which can give the maximum value for abc\n    critical_points = solve([sum_eq, product.diff(a), product.diff(b)], (a, b, c))\n    \n    # Filter out positive integer solutions\n    positive_solutions = [s for s in critical_points if all(map(lambda val: val.is_real and val > 0, s))]\n    \n    # Calculate the product for the positive integer solutions\n    max_value = max([product.subs({a: s[0], b: s[1], c: s[2]}) for s in positive_solutions])\n\n    return max_value\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight = 1200  # 1.2kg in grams\n    piece_weight = 30\n    num_pieces = total_weight / piece_weight\n    return num_pieces\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05669  # 1 liter is approximately 1.05669 US quarts\n    cups_of_coke = liters_to_quarts / 0.5  # Each cup capacity is 0.5 quarts\n    return round(cups_of_coke)\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let r represent the number of pieces of candy that Rachel has originally\n    # let a represent the number of pieces of candy that Alice has originally\n    r, a = symbols('r a')\n    \n    # if Rachel gives Alice 10 pieces of candy, then they would have the same number of pieces\n    equation1 = Eq(r - 10, a + 10)\n    \n    # if they both eat 8 pieces of candy, Rachel has 3 times as many pieces of candy left over as Alice\n    equation2 = Eq((r - 8)/3, a - 8)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # calculate the total number of pieces of candy originally\n    total_candy = solutions[r] + solutions[a]\n    \n    return total_candy\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(1, 10):  # F cannot be 0 because it's a digit in a 6-digit number\n                    num1 = 500000 + A * 10000 + 2000 + 100 * C + E * 10 + F\n                    num2 = 600000 + E * 10000 + F * 1000 + A * 100 + 200 + 10 * C\n                    if 5 * num1 == 6 * num2:\n                        return F * 1000 + A * 100 + C * 10 + E\n    return None\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    result = 18 // 3\n    return result\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n\n    total_shapes = squares + circles + triangles\n\n    return total_shapes\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    jogging_time = 1  # From 6:30 a.m. to 7:30 a.m.\n    walking_time = 2  # From 7:30 a.m. to 9:30 a.m.\n\n    jogging_speed = 6  # miles per hour\n    walking_speed = 5  # miles per hour\n\n    # Total distance = distance jogged + distance walked\n    total_distance = (jogging_speed * jogging_time) + (walking_speed * walking_time)\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n\n    equation1 = Eq(angel, (5/6) * belle)\n    equation2 = Eq(angel - 58, 0.75 * belle)\n\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    return (4/9) * 36\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for current age of dad and son\n    dad_current, son_current = symbols('dad_current son_current')\n\n    # Equation 1: Six years ago, dad's age was 5 times son's age\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n\n    # Equation 2: Sum of ages of dad and son this year is 78\n    equation2 = Eq(dad_current + son_current, 78)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 20 / 100\n    bank_charge_rate = 0.5 / 100\n\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_rate\n\n    return bank_charge\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    account_balance = -76.20\n    payment = 120.75\n\n    new_balance = account_balance + payment\n\n    return new_balance\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of children and y be the original amount of money\n    x, y = symbols('x y')\n\n    # If there was 20p more, each child would receive 70p\n    equation1 = Eq(y + 20, 70 * x)\n    \n    # If each child received 60p, 2.10 pounds would be left\n    equation2 = Eq(60 * x, y - 210)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set((x1, x2, x3))) == 3:\n                    count += 1\n    return count // 6  # We divide by 6 to account for permutations of the vases\n    \nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    # Iterate through all possible numbers with a 9 in the units place.\n    for num in range(10, 10000):  # Assuming the number does not exceed 4 digits.\n        if str(num)[-1] == '9':  # Checking if 9 is in the units column.\n            # Remove the 9 from the units column and place it on the left.\n            new_num = int('9' + str(num)[:-1])\n            # Check if the new number is four times the original number.\n            if new_num == 4 * num:\n                return num  # This is the special number.\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n\n    # Eddie is fixed at the left end\n    # Avril can be either on the immediate right of Eddie, which is 1 option for her position\n    total_positions_for_avril = 1\n    \n    # The remaining 5 can be arranged in any order which is 5 factorial\n    remaining_students_permutations = factorial(5)\n    \n    # The answer is the product of the positions for Avril and the permutations of the remaining students\n    ans = total_positions_for_avril * remaining_students_permutations\n    return ans\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime('2nd March', '%dth %B')\n    end_date = datetime.strptime('15th April', '%dth %B')\n\n    # Compute difference between dates to obtain the duration of the trip\n    return (end_date - start_date).days\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    increase_percentage = 45 / 100\n    increased_amount = original_price * increase_percentage\n    new_price = original_price + increased_amount\n\n    return new_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]\n    mean_value = 6\n    total_numbers = 8\n    \n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(known_numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Using the pigeonhole principle to determine the minimum number of gloves required\n    # for Dilly to have a matching pair.\n    blue_gloves = 1 + 3  # left-hand blue + right-hand blue\n    green_gloves = 2 + 4  # left-hand green + right-hand green\n    \n    # Pick one from each color first, as Dilly can identify colors:\n    dilly_picks = 2\n    \n    # If not matching, Dilly must pick more. Gloves picked from the same color need to\n    # be considered separately, as Dilly cannot distinguish left from right.\n    # To guarantee a matching pair, pick all from one color + 1 more from the other color\n    max_same_color = max(blue_gloves, green_gloves)\n    \n    # Add to the colored gloves already picked to ensure a matching pair:\n    dilly_picks += max_same_color\n    \n    return dilly_picks\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Original interval distance\n    original_interval = 3\n    \n    # New interval distance\n    new_interval = 5\n    \n    # Total circumference\n    circumference = 300\n    \n    # Holes already dug\n    holes_dug = 30\n\n    # Remaining distance after digging 30 holes\n    remaining_distance = circumference - holes_dug * original_interval\n\n    # Calculate how many more holes needed with new interval of 5m\n    additional_holes = remaining_distance / new_interval\n    \n    # Round up since you can't dig a fraction of a hole\n    additional_holes = -(-additional_holes // 1) # Ceiling division\n    \n    return int(additional_holes)\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    combinations = pasta_choices * sauce_choices * topping_choices\n\n    return combinations\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    def fib(n):\n        a, b = 1, 1\n        for _ in range(n-1):\n            a, b = b, a + b\n        return a\n\n    # Ways to reach the 5th step\n    ways_to_5th = fib(5)\n    \n    # Ways to reach the 10th step from the 5th step\n    ways_from_5th_to_10th = fib(6)  # because it's like starting from the first step to reach the 6th step\n\n    # Total ways\n    total_ways = ways_to_5th * ways_from_5th_to_10th\n    return total_ways\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    return solutions[rachel] + solutions[alice]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum((i * (16 - i)) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            break\n        cookies += 1\n    return cookies\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((x + 3)/4, 12)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for number in range(1, 51):\n        if '3' in str(number):\n            erased_sum += number\n    return erased_sum\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    digits_used = 792\n    current_sum = 0\n    pages = 0\n    \n    for i in range(1, digits_used + 1):\n        if i < 10:\n            current_sum += 1\n        elif i < 100:\n            current_sum += 2\n        elif i < 1000:\n            current_sum += 3\n        \n        if current_sum > digits_used:\n            break\n        pages = i\n    \n    return pages\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length / pipe_length\n\n    return int(num_pipes) + (1 if total_length%pipe_length != 0 else 0)\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_average = 80\n    billy_average_first_four = 89\n    billy_target_average = ivan_average + 10\n\n    # Ivan's total score for five assignments\n    ivan_total = ivan_average * 5\n\n    # Billy's total score for the first four assignments\n    billy_total_first_four = billy_average_first_four * 4\n\n    # Billy's required total score to reach his target average\n    billy_required_total = billy_target_average * 5\n\n    # Billy's score in the fifth assignment to achieve his goal\n    billy_fifth_assignment_score = billy_required_total - billy_total_first_four\n\n    return billy_fifth_assignment_score\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "import itertools\n\ndef solution():\n    expressions = [\n        \"({}+{})*({}+{}-{}+{})\",\n        \"({}+{}*{}+{})-({}+{})\",\n        \"({}+{}*({}+{}))-{}+{}\",\n        \"{}+({}*({}+{})-{})+{}\",\n        \"{}+({}*(5+{})+{}-{})+{}\",\n        \"{}+{}*({}+({}+{}-{}))+{}\",\n    ]\n    numbers = [15, 5, 5, 15, 6, 7]\n    max_value = float('-inf')\n\n    for expr in expressions:\n        current_value = eval(expr.format(*numbers))\n        max_value = max(max_value, current_value)\n\n    return max_value\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # For two whole numbers to add up to 1000, we can consider the numbers as pairs: (0, 1000), (1, 999), ..., (999, 1), (1000, 0).\n    # Each unique pair consists of two numbers that add up to 1000.\n    # Since the order of the numbers in the pairs doesn't matter for the sum, the pair (1, 999) is the same as (999, 1).\n    # Thus, we are looking for the number of unique pairs which is half the total number of pairs plus one for the middle pair (500, 500).\n    total_sum = 1000\n    num_ways = (total_sum // 2) + 1\n    return num_ways\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 1260\n    factors = factorint(1260)\n    m = 1\n\n    # For each factor if it's not a square, multiply it by the missing exponent\n    for base, exponent in factors.items():\n        if exponent % 2 != 0:\n            m *= base\n\n    return m\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for cards in range(1, 28):\n        if cards % 4 == 3 and cards % 7 == 3:\n            return cards % 28\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n\n    return boats_needed\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    for number in range(10, 100):  # Search through all two-digit numbers\n        if number % 8 == 6 and number % 11 == 6:\n            return number  # Return the first number that satisfies the condition\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # The ones digit of powers of 9 cycles: 9, 1, 9, 1, ...\n    # That's because 9^1 ends with 9 and 9^2 ends with 1.\n    # Since the cycle is of length 2, the ones digit for 9^99 will be the same as for 9^1, which is 9.\n\n    ans = 9\n    return ans\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    total_cost = 151.25 + 24.15\n    return total_cost\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    # Given values of the 7th, 8th, and 9th terms\n    seventh_term = 39\n    eighth_term = 44\n    ninth_term = 49\n\n    # Calculate the common difference of the sequence\n    common_diff = eighth_term - seventh_term\n\n    # We want to find the 100th term, to calculate it we use the formula\n    # nth_term = a + (n - 1) * d\n    # where a is the first term, d is the common difference, and n is the term number\n    # But we need the first term for that, so let's calculate it based on the 7th term\n    # seventh_term = a + (7 - 1) * d\n    first_term = seventh_term - (7 - 1) * common_diff\n\n    # Now calculate the 100th term\n    hundredth_term = first_term + (100 - 1) * common_diff\n    \n    return hundredth_term\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    total_stickers = 38 + 14\n    stickers_left = total_stickers - 9\n    return stickers_left\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    remainder = 2**2015 % 3\n    return remainder\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total value of the five other ponies be x\n    x = symbols('x')\n\n    # Number of ponies in each stable before Rein Beau moved\n    ponies_in_small_stable = 3\n    ponies_in_large_stable = 3\n\n    # After Rein Beau moves, number of ponies in each stable\n    ponies_in_small_after = 2\n    ponies_in_large_after = 4\n\n    # The value of Rein Beau\n    rein_beau_value = 250000\n\n    # Average value rise in each stable after Rein Beau moves\n    average_rise = 10000\n\n    # Equations set up from the problem\n    equation = Eq((x + rein_beau_value) / ponies_in_large_after - x / ponies_in_large_stable, average_rise)\n\n    # Solve the equation to find the total value of the five ponies\n    total_value_five_ponies = solve(equation, x)[0]\n\n    # The total value of all ponies is then the value of Rein Beau plus the other five\n    total_value_six_ponies = total_value_five_ponies + rein_beau_value\n\n    return total_value_six_ponies\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "def solution():\n    from math import factorial\n\n    # 4 pupils who insist on standing together can be treated as one unit\n    # Now we have 5 \"units\" to arrange\n    units_arrangement = factorial(5)\n\n    # The 4 pupils can also arrange themselves in 4! ways\n    pupils_arrangement = factorial(4)\n\n    # Multiply the number of ways they can be arranged as units\n    # with the number of ways they can arrange themselves within their unit\n    total_ways = units_arrangement * pupils_arrangement\n\n    return total_ways\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    total_weight = sugar + 21\n\n    concentration = (sugar / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    \n    # Reverse step (5): Add 50 to the result\n    step4 = result + 50\n    \n    # Reverse steps (3) and (4): Since the day was added twice after multiplying by 50,\n    # we can simply subtract it from the step 4 result and then divide by 50 to reverse both steps\n    # We need to find a day (d) such that (step4 - 2*d) is divisible by 50\n    for d in range(1, 32):  # Assuming James was not born on the 31st of a month\n        if (step4 - 2*d) % 50 == 0:\n            step2 = (step4 - 2*d) // 50\n            break\n    \n    # Reverse step (2): Subtract 1 from the result\n    step1 = step2 - 1\n    \n    # Reverse step (1): Divide the result by 4\n    month = step1 // 4\n    \n    # The day has already been found in the loop\n    birthday = \"{:02d}/{:02d}\".format(month, d)\n    \n    return birthday\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    lamb_price_per_kilo = 8.70\n    beef_price_per_kilo = 9.40\n\n    lamb_weight = 7\n    beef_weight = 30\n\n    total_cost = (lamb_price_per_kilo * lamb_weight) + (beef_price_per_kilo * beef_weight)\n\n    return total_cost\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # We define x as the smallest of the three consecutive numbers,\n    # then the other two numbers will be x+1 and x+2.\n    # According to the question, their sum is 60.\n    # So we have the equation: x + (x+1) + (x+2) = 60\n    # Simplifying: 3x + 3 = 60\n    # Solving for x: 3x = 57\n    # Then, x = 57 / 3\n\n    x = 57 // 3\n    # The largest number would then be x + 2\n    largest_number = x + 2\n    return largest_number\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    return 234 + 578\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let g be the number of gold medals and s be the number of silver medals.\n    # We then have two equations based on the problem statement:\n    # 5g + 4s = 331 (total points)\n    # g + s = 80 (total medals)\n    # We need to solve this system to find the value of g.\n\n    # Rearrange the second equation to get s in terms of g.\n    # s = 80 - g\n    \n    # Now substitute s in the first equation and solve for g.\n    for g in range(80 + 1):  # +1 because range is non-inclusive\n        s = 80 - g\n        if 5 * g + 4 * s == 331:\n            # At this point, we've found the number of gold medals g that satisfies the equations.\n            return g\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the rate of work for the master be m and for the apprentice be a\n    m, a = symbols('m a')\n    \n    # Equation representing work done with 1 master and 3 apprentices in 4 days\n    eq1 = Eq(4 * (1 * m + 3 * a), 1)\n    # Equation representing work done with 2 masters and 1 apprentice in 3 days\n    eq2 = Eq(3 * (2 * m + 1 * a), 1)\n    \n    # Solve the system of equations for m and a\n    solution = solve((eq1, eq2), (m, a))\n    \n    # Calculate the time it takes 1 apprentice to do the work alone using the rate a\n    time_for_apprentice = 1 / solution[a]\n    \n    return time_for_apprentice\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    position_elephant = 10  # 10th from left\n    position_rabbit = 9  # 9th from right\n    dolls_between = 5  # 5 dolls between rabbit and elephant\n    \n    # Total dolls = position of elephant + dolls between + (position of rabbit - 1)\n    # (position of rabbit - 1) because we have to exclude the rabbit itself.\n    total_dolls = position_elephant + dolls_between + position_rabbit\n\n    return total_dolls\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    # Let the total number of spectators be x\n    women = 80\n    children_fraction = 1/3\n    men_fraction = 5/8\n    \n    # Calculate the number of spectators that are not children\n    not_children = (1 - children_fraction)\n    \n    # Calculate the number of men based on the fraction of the remaining spectators after children are accounted for\n    men = (men_fraction * not_children)\n    \n    # Since the number of men and the number of women add up to the total number of non-children spectators\n    # We can find the total using the equation: men * x + women = not_children * x\n    # Rearrange the equation to solve for x\n    x = women / (not_children - men)\n    \n    return int(x)\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * (11/52 / (2 + 3/4) * (4.3 - 1.8)) * 26\n    return result\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # From the given examples, we can infer the following rules for the â operation:\n    # If the first number is greater or equal to the second number: a â b = a + b\n    # If the second number is greater than the first number: a â b = b\n    # Therefore, the operation prioritizes the larger value and then follows a simple rule:\n    # If they're equal or the first one is larger, it adds the two numbers.\n    # if the second one is larger, it just takes that value.\n    \n    # Now we apply these rules to 11 â 10:\n    a, b = 11, 10\n    if a >= b:\n        ans = a + b\n    else:\n        ans = b\n\n    return ans\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    primes_sum = sum(primerange(50, 61))\n    return primes_sum\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    num_students = 0\n    for side_length in range(2, 100): # Assuming a reasonable max side length, can be adjusted\n        boys = side_length ** 2 - (side_length - 2) ** 2 if side_length > 1 else 1\n        girls = (side_length - 2) ** 2 - (side_length - 4) ** 2 if side_length > 3 else 0\n        if boys - girls == 32:\n            num_students = side_length ** 2\n            break\n    return num_students\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_roses, original_daisies, months, planted_per_month = symbols('original_roses original_daisies months planted_per_month')\n    \n    # 300 = original_roses + original_daisies\n    equation1 = Eq(original_roses + original_daisies, 300)\n    \n    # After a few months: 280 = original_roses + months*planted_per_month\n    equation2 = Eq(original_roses + months*planted_per_month, 280)\n    \n    # After a few months: 180 = original_daisies + months*planted_per_month\n    equation3 = Eq(original_daisies + months*planted_per_month, 180)\n\n    solutions = solve((equation1, equation2, equation3), (original_roses, original_daisies, months, planted_per_month))\n    \n    return solutions[original_roses]\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    other_books = total_books - english_books\n    # Let x be the number of comics, then 2x will be the number of Chinese books\n    # Together they make up the rest of the books: x + 2x = other_books\n    comics = other_books // 3\n    \n    return comics\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_volume = 6\n\n    total_volume = coffee_volume * (milk_ratio + coffee_ratio) / coffee_ratio\n\n    return total_volume\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    # Calculate the common difference\n    common_difference = (38 - 23) / (15 - 10)\n    \n    # Calculate the first term using the 10th term\n    first_term = 23 - (10 - 1) * common_difference\n    \n    # Calculate the 102nd term\n    nth_term = first_term + (102 - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    total_accurate_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + missed_shots\n    average_score = total_accurate_score / total_shots\n\n    return average_score\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    ans = ((1/30 + 1/6) / (2/25)) + ((2 - 2/3) / (8/3))\n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    # The function will count the ways to partition the number 8 into the sum of two or more non-zero natural numbers.\n    def partitions(n, I=1):\n        yield (n,)\n        for i in range(I, n // 2 + 1):\n            for p in partitions(n - i, i):\n                yield (i,) + p\n\n    # To find all unique partitions of the number 8\n    unique_partitions = set(partitions(8))\n\n    # To count the number of different ways to rewrite 8\n    count = len(unique_partitions) - 1  # Subtract 1 to exclude the partition (8,) itself\n\n    return count\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n    num_boxes = -(-total_eggs // eggs_per_box) # Ceiling division\n\n    return num_boxes\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_weight = 0.6 # kilograms\n    total_cost = 11.4 # dollars\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Since there are 8 children and each must get at least 1 apple,\n    # we distribute 1 apple to each child first, using up 8 apples.\n    apples_left = 50 - 8\n\n    # Now we have 42 apples left to distribute such that each child gets a different amount.\n    # We need to minimize the number of apples for the child who gets the most.\n\n    # In order to minimize the maximal number, we need to maximize the number of apples\n    # that other children receive, meaning we distribute apples in increasing order\n    # starting with 1 apple for the first child. For 7 children, these numbers should be\n    # as close as possible to each other: 1, 2, 3, ..., 7 (without the 8th child).\n\n    # We calculate the sum of the first 7 natural numbers, because we will distribute\n    # at least that many apples to the first 7 children.\n    min_sum_for_7_children = sum(range(1, 8))  # This is 1+2+3+4+5+6+7\n    # Any apples left after ensuring each of the first 7 children have a different number\n    # will go to the 8th child. Thus the 8th child will get at least as many apples as left.\n    apples_for_8th_child = apples_left - min_sum_for_7_children\n\n    return apples_for_8th_child\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    return -7 - 4\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    base_amount = 350\n    percentage1 = 20 / 100\n    percentage2 = 50 / 100\n    ans = base_amount * percentage1 * percentage2\n    return ans\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    # Total distance to be covered for the entire train to be in the tunnel\n    total_distance = train_length + tunnel_length\n\n    # Time taken for the entire train to be in the tunnel\n    time_taken = total_distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # Max men with neither = total men - max men with either bow ties or spectacles\n    max_neither = total_men - max(bow_ties, spectacles)\n\n    return max_neither\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    result = (1/3) * 414\n    return result\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n\n    equation = Eq(blue + red + green, 112)\n\n    solution = solve(equation, blue)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    apples = 19\n    children = 5\n    max_apples = apples - sum(range(children))\n    return max_apples\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n\n    # Treat Ali and Bala as a single entity, so we have 4 entities to arrange (Ali&Bala, Charles, Dan, Ella)\n    # Plus, Dan has a fixed position on the left.\n    # That leaves us with Ali&Bala, Charles, and Ella to be arranged in 3! ways.\n    arrangements = factorial(3)\n\n    # Ali and Bala can switch places within their single entity position.\n    # Therefore, we multiply the previous number by 2! (Ali and Bala's arrangements)\n    ali_bala_arrangements = factorial(2)\n\n    total_arrangements = arrangements * ali_bala_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Owen trades 3 fishes for 2 rabbits: fish/rabbit ratio is 3/2\n    fish_to_rabbit = 3 / 2\n    # Oscar trades 3 rabbits for 4 packs of wheat: rabbit/wheat ratio is 3/4\n    rabbit_to_wheat = 3 / 4\n    \n    # To simplify the trade between fish and packs of wheat directly,\n    # we multiply the ratios: fish_to_rabbit * rabbit_to_wheat = fish/wheat ratio\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat\n    \n    # Now we find out how many fishes Owen should give for 8 packs of wheat\n    # Wheat demanded is 8, we apply the fish_to_wheat ratio to find out the fish needed\n    fishes_needed = fish_to_wheat * 8\n    \n    return fishes_needed\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    count = 0\n    # pages 1 to 9, 9 pages with 1 digit each\n    count += 1 * 9\n    \n    # pages 10 to 99, 90 pages with 2 digits each (99 - 10 + 1 = 90)\n    count += 2 * 90\n    \n    # pages 100 to 140, 41 pages with 3 digits each (140 - 100 + 1 = 41)\n    count += 3 * 41\n    \n    return count\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            if (10 * tens + ones) - (50 + 3) == 36:\n                correct_difference = (10 * tens + ones) - (30 + 2)\n                return correct_difference\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Drawing all balls of the most abundant color plus one each of the other two colors\n    # ensures having three different colored balls.\n    \n    # The worst case scenario is drawing all red balls first,\n    # as they are the most abundant.\n    red_balls = 15  \n\n    # Then we need to draw one white ball\n    one_white_ball = 1\n\n    # And we also need to draw one yellow ball\n    one_yellow_ball = 1\n\n    # The minimum number of balls we need to draw\n    min_balls_needed = red_balls + one_white_ball + one_yellow_ball\n\n    return min_balls_needed\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = range(2, 36, 3)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n\n    average_students = total_students / num_classes\n\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_for_fences = 3.2\n    used_for_woods = 6.5\n\n    remaining_length = total_length - (used_for_fences + used_for_woods)\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = '278'\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ellen, lenny = symbols('ellen lenny')\n    \n    # Ellen gives away 12 sweets\n    equation1 = Eq((ellen - 12) / (ellen + lenny - 12), 13/24)\n    \n    # Lenny gives away 12 sweets\n    equation2 = Eq((lenny - 12) / (ellen + lenny - 12), 3/8)\n    \n    solutions = solve((equation1, equation2), (ellen, lenny))\n    \n    return solutions[ellen] + solutions[lenny]\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    tax_under_50k = 0.06 * 50000\n    tax_above_50k = (0.06 + T / 100) * (income - 50000)\n\n    equation = Eq(tax_under_50k + tax_above_50k, 10000)\n    \n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # Since we want the smallest difference, we should make the numbers as close as possible\n    # Using digits 0 through 9, we need to assign the largest digits to the higher places in one number\n    # and the smallest to the other, while ensuring one is not significantly larger than the other.\n    # Starting with the largest places, we'd try to balance the numbers:\n    # Example: for the first (highest) position, assign 9 to one and 0 to the other (0 cannot be the leading digit)\n    # For the next positions, alternate the assignment of the next largest/smallest available digits.\n    \n    # Therefore, the first (largest) 5-digit number could be 97531, using the largest available digits in order.\n    # And the second 5-digit number could be 86420, using the rest of the digits in reverse order (from largest to smallest).\n    # This should give us the smallest possible difference.\n    \n    first_number = int(\"97531\")\n    second_number = int(\"86420\")\n    \n    # Compute the difference\n    difference = first_number - second_number\n    \n    return difference\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200\n    tunnel_length = 500\n    speed = 10\n\n    total_distance = train_length + tunnel_length\n    time_to_pass = total_distance / speed  # time = distance / speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    # Let jessie's weight be x\n    # Then Buzz's weight is 3x\n    # According to the question: 3x - x = 450\n    # So we solve for x to find Jessie's weight first\n    x = 450 / (3 - 1)\n    \n    # Buzz's weight is 3 times Jessie's weight\n    buzz_weight = 3 * x\n    \n    return buzz_weight\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49\n    pounds = 2\n    total_cost_in_pence = cost_per_pound * pounds\n    one_pound_in_pence = 100\n    change_in_pence = one_pound_in_pence - total_cost_in_pence\n    return change_in_pence\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n\n    n = 0\n    while True:\n        # Check if all the numbers are prime\n        if (isprime(n) and isprime(n + 4) and isprime(n + 6) and isprime(n + 132) and isprime(n + 250)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "def solution():\n    from math import factorial as fact\n\n    def comb(n, r):\n        return fact(n) // (fact(r) * fact(n - r))\n\n    # Total number of presents\n    total_presents = 7\n\n    # Total number of children\n    total_children = 5\n\n    # Case 1: Richard gets the toy car, Kevin cannot get the toy car or puzzle\n    # Amy has 5 presents left to give to 4 children\n    case1 = comb(5, 4)\n\n    # Case 2: Richard gets the puzzle, Kevin cannot get the puzzle or calculator\n    # Amy has 5 presents left to give to 4 children\n    case2 = comb(5, 4)\n\n    # Case 3: Kevin gets the toy car, Richard cannot get the toy car or puzzle\n    # Amy has 5 presents left to give to 4 children\n    case3 = comb(5, 4)\n\n    # Case 4: Kevin gets the calculator, Richard cannot get the toy car or puzzle\n    # Amy has 5 presents left to give to 4 children\n    case4 = comb(5, 4)\n\n    # Subtract the case where both Richard and Kevin pick their first choice, as it's counted twice\n    both_first_choice = 1\n    \n    # Calculate total number of ways to distribute presents\n    total_ways = case1 + case2 + case3 + case4 - both_first_choice\n\n    return total_ways\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200  # total weight of the sugar solution\n    concentration = 0.15  # concentration of sugar in the solution\n\n    # To find the weight of the sugar, multiply the total weight by the concentration\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((4 * i**2) for i in range(1, 2021//2))\n    return ans\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    speed_jack = 15\n    speed_rose = 10\n    time = 10\n\n    relative_speed = speed_jack - speed_rose\n    distance = relative_speed * time\n\n    return distance\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of each rabbit\n    first_rabbit, second_rabbit, third_rabbit = symbols('first_rabbit second_rabbit third_rabbit')\n    \n    # Create equations based on the given information\n    equation1 = Eq(second_rabbit, first_rabbit + 2)                   # 2 pounds more than the first\n    equation2 = Eq(third_rabbit, second_rabbit - 80/100)             # 80 pence less than the second\n    equation3 = Eq(first_rabbit + second_rabbit + third_rabbit, 19.7)  # Total cost of three rabbits\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first_rabbit, second_rabbit, third_rabbit))\n\n    # Return the cost of the first rabbit\n    return solutions[first_rabbit]\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    remainder = 48739 % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4.6 * x - 35/100, 0.57)\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    count_multiples_of_7 = 5000 // 7\n    count_multiples_of_13 = 5000 // 13\n    count_multiples_of_both = 5000 // (7 * 13)\n\n    ans = count_multiples_of_7 + count_multiples_of_13 - count_multiples_of_both\n    return ans\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    t_shirts_bought = 138\n    money_left = 56\n    t_shirts_total = 145\n\n    money_spent_on_t_shirts = t_shirts_total - t_shirts_bought\n    price_per_t_shirt = money_left / money_spent_on_t_shirts\n    total_money_had = price_per_t_shirt * t_shirts_total\n\n    return total_money_had\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom sympy.utilities.iterables import multiset_permutations\n\ndef solution():\n    # Total letter count\n    total_letters = 7\n    # Count of each letter\n    count_s = 3\n    count_u = 1\n    count_c = 2\n    count_e = 1\n    # Factorial of the count of each letter\n    fact_s = factorial(count_s)\n    fact_u = factorial(count_u)\n    fact_c = factorial(count_c)\n    fact_e = factorial(count_e)\n    # Total combinations without restriction\n    total_combinations = factorial(total_letters) // (fact_s * fact_c * fact_u * fact_e)\n    \n    # Generate all valid permutations where no two 'S' are consecutive\n    def is_valid(permutation):\n        for i in range(len(permutation) - 1):\n            if permutation[i] == 'S' and permutation[i + 1] == 'S':\n                return False\n        return True\n    \n    # Count valid permutations\n    count = 0\n    for perm in multiset_permutations(\"SUCCESS\"):\n        if is_valid(perm):\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # Let x be the number of days David worked alone\n    # Then (14 - x) is the number of days Emma worked on the journal\n\n    # David's work per day is 1/10 and Emma's work per day is 1/18\n    # David worked for x days so he completed x/10 of the work\n    # Emma worked for (14 - x) days so she completed (14 - x)/18 of the work\n    # Together they completed the whole journal, hence the equation is:\n    # x/10 + (14 - x)/18 = 1 (The whole work)\n\n    # Multiplying by 90 (LCM of 10 and 18) to clear the denominators\n    # We get: 9x + 5(14 - x) = 90\n    # Solving for x:\n    x = (90 - 5*14) / (9 - 5)\n\n    # Therefore, Emma worked for (14 - x) days\n    days_emma_worked = 14 - x\n\n    return days_emma_worked\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n\n    # Using the formula for the sum of cubes: 1Â³ + 2Â³ + 3Â³ + ... + nÂ³ = (1 + 2 + 3 + ... + n)Â²\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_integers = n * (n + 1) // 2\n    \n    ans = sum_of_cubes / sum_of_integers\n\n    return ans\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    # Pigeonhole principle\n    # The heights can range from 124 to 132 cm, giving us 9 possible heights.\n    # There are at least 4 students of the same height.\n    # To guarantee a group of at least 4 students with the same height,\n    # we need to take 3 students per height and add one more student (the pigeonhole principle worst case).\n    heights_range = 132 - 124 + 1  # 9 possible heights\n    students_per_height = 3\n    additional_student = 1\n\n    # Calculate class size\n    class_size = (heights_range * students_per_height) + additional_student\n\n    return class_size\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    total_numbers = 14\n    average = 119\n    # The sum of all numbers in the sequence\n    total_sum = average * total_numbers\n    # Since the numbers are consecutive even numbers, the difference between each number is 2\n    difference = 2\n    # Middle term is average - 1 (because even numbers and we want to find the smallest)\n    middle_term = average - 1\n    # Smallest number calculation with (n-1)/2 terms being less than the median\n    smallest_number = middle_term - (total_numbers - 1) * difference / 2\n    return int(smallest_number)\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay = 6.50\n    increase_percentage = 12 / 100\n    new_pay = original_pay * (1 + increase_percentage)\n    return new_pay\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    # For a number to be divisible by 11, the difference between the sum of the digits\n    # in the odd positions and the sum of the digits in the even positions should be 0 or a multiple of 11.\n    for a in range(10):\n        num = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        odd_sum = 1 + 2 + 3 + 4 + 5\n        even_sum = 5 * a\n        if (odd_sum - even_sum) % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # It takes Rachel 12 minutes to make 4 cuts to divide the wood into 5 sections.\n    # Therefore, each cut takes 12/4 = 3 minutes.\n    cut_time_per_section = 12 / 4\n    \n    # If Rachel needs to cut the wood 5 times, it takes:\n    total_time_for_5_cuts = cut_time_per_section * 5\n    \n    return total_time_for_5_cuts\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    base = 3\n    exponent = 2009\n    cycle = [3, 9, 7, 1] # Cycle of last digits for powers of 3\n\n    # Since the powers of 3 have a cycle of 4 in their units digit, we can find the units digit of any power by finding the remainder of the exponent divided by 4\n    last_digit_index = exponent % len(cycle) - 1\n    ans = cycle[last_digit_index]\n    \n    return ans\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girls = 36\n    boys_fraction = 5 / 9\n    adults_fraction = 2 / 5\n    \n    remaining_people = girls / (1 - boys_fraction)\n    total_people = remaining_people / (1 - adults_fraction)\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 2 == 0 and num % 5 == 0 and (num ** 0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_amount = 126  # Since we are working in pence\n    coin_values = [2, 5]\n\n    # Let x be the number of each coin type in the bag\n    # We have 2 * x (for 2p) + 5 * x (for 5p) = 126 pence\n    # Combine like terms: 7 * x = 126\n    # Solve for x: x = 126 / 7\n    \n    x = total_amount // sum(coin_values)\n    \n    # Since there's an equal number of 2p and 5p coins,\n    # the total number of coins is 2 * x, one x for each coin\n    total_coins = 2 * x\n\n    return total_coins\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    child_ticket_cost = 30\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n\n    senior_discount = 0.20\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n\n    return senior_ticket_cost\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men = 3\n    days = 30\n    work = men * days  # Total work done is equal to men times days\n\n    # Now we find out how many days 2 people would take to build the house\n    # Work remains the same, so new_days times 2 (people) equals to the total work\n    new_men = 2\n    new_days = work / new_men  # Solve for new_days\n\n    return new_days\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_now = symbols('will_now')\n    \n    # Define the equation based on the problem statement\n    equation = Eq(will_now + 8, 4 * (will_now - 4))\n    \n    # Solve the equation for Will's current age\n    will_age_now = solve(equation, will_now)\n\n    return will_age_now[0]\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols for the number of books each of the kids get\n    b1, b2, b3, b4 = symbols('b1 b2 b3 b4', integer=True, nonnegative=True)\n    \n    # Define the equation representing the total number of books\n    equation = Eq(b1 + b2 + b3 + b4, 20)\n    \n    # Since the sympy solve() function does not handle non-negative integer restrictions well,\n    # we use a manual iterative approach to count the combinations.\n    \n    # It's a stars and bars problem (partitioning problem) where we have 20 books (stars)\n    # and we need to place 3 bars to form 4 sections (for 4 kids).\n    # We can choose 3 positions for bars out of 20 books (plus the bars).\n    # This is represented by the binomial coefficient C(n+k-1, k-1),\n    # where n is the number of stars and k is the number of kids.\n    \n    # Calculate the number of ways using the combinations function from the math module\n    from math import comb\n    count = comb(20 + 4 - 1, 4 - 1)  # C(20+4-1, 4-1)\n\n    return count\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    # According to the Law of Addition, we just add up the different ways of each mode of transport\n    total_ways = trains + cars + boats\n\n    return total_ways\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_sum = (num_terms * (first_term + last_term)) // 2\n\n    return total_sum\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n\n    num_days = total_pages // pages_per_day\n    if total_pages % pages_per_day != 0:\n        num_days += 1\n    \n    return num_days\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n\n    balance = principal * ((1 + rate) ** time)\n\n    return round(balance, 4)\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the portions of Mike, Mason and Chewy\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    # Create equations based on the given information\n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 0.4 * mike)\n    equation3 = Eq(mike - mason, 550)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    # Calculate the total amount of soup (converting from ml to litres by dividing by 1000)\n    total_soup = (solutions[mike] + solutions[mason] + solutions[chewy]) / 1000\n\n    return total_soup\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import factorial\n\ndef solution():\n    # 30 books are to be distributed, but since each kid gets at least two books,\n    # we distribute 2 books to each kid first, leaving 30 - 5 * 2 = 20 books.\n    remaining_books = 30 - 5 * 2\n\n    # Now we need to determine how many ways to distribute the remaining books\n    # to 5 kids, which is equivalent to placing 4 dividers among the books\n    # (a stars and bars problem). This can be calculated using combinations.\n\n    # Total slots for books + dividers\n    total_slots = remaining_books + 5 - 1 # We subtract 1 because we have one less divider than the number of kids\n\n    # We choose 4 positions out of these slots for the dividers, the remaining will be for the books.\n    num_ways = factorial(total_slots) // (factorial(4) * factorial(total_slots - 4))\n\n    return num_ways\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n    \n    return like_neither\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one jug and one cup\n    jug, cup = symbols('jug cup')\n\n    # Equation 1: The cost of 4 jugs and 5 cups is $85\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n\n    # Equation 2: The cost of 2 jugs and 2 cups is $40\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    # Return the cost of one cup\n    return solutions[cup]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]  # coins in pence\n    amount_paid = 200  # assuming Susan pays with a Â£2 coin which is common\n    change = amount_paid - 44  # change to give in pence\n    num_coins = 0  # to count the smallest number of coins\n\n    # loop through the coins to give the smallest amount of change\n    for coin in coins:\n        while change >= coin:\n            change -= coin\n            num_coins += 1\n\n    # including the coin paid by Susan\n    num_coins += 1\n\n    return num_coins\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_each = 28\n    total_chairs = classrooms * chairs_each\n    return total_chairs\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    # Generate all permutations of the operations\n    operations = list(permutations(['+', '-', '*', '/'], 4))\n\n    # Define the fractions involved in the problem\n    fractions = [Fraction(1, 2), Fraction(1, 3), Fraction(1, 4), Fraction(1, 5)]\n    denominators = [9, 8, 7, 6]\n\n    max_sum = -float('inf')  # Initialize max sum as negative infinity\n    second_largest_term = 0  # Initialize the second-largest term\n\n    # Transform the expressions using the permutations\n    for ops in operations:\n        terms = []\n        for op, frac, den in zip(ops, fractions, denominators):\n            if op == '+':\n                terms.append(frac + Fraction(1, den))\n            elif op == '-':\n                terms.append(frac - Fraction(1, den))\n            elif op == '*':\n                terms.append(frac * Fraction(1, den))\n            elif op == '/':\n                terms.append(frac / Fraction(1, den))\n        \n        # Calculate the sum of the terms for the current permutation\n        current_sum = sum(terms)\n\n        # Update max sum and find the second-largest term\n        if max_sum < current_sum:\n            max_sum = current_sum\n            # Sort terms to find the second-largest\n            sorted_terms = sorted(terms, reverse=True)\n            second_largest_term = sorted_terms[1]\n\n    # Convert the second-largest term to its simplest form of Fraction, A/B\n    simplified_term = second_largest_term.limit_denominator()\n    A = simplified_term.numerator\n    B = simplified_term.denominator\n\n    return A + B\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    a = 235\n    b = 567\n    total_after_transfer = (a + b) / 2\n\n    return int(total_after_transfer)\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    return 818 - 271 - 18 + 64 - 29 + 36\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Rational\n\n    x = symbols('x')\n    inequality = (x + 3) / (2 * x + 5) > Rational('0.505')\n\n    sol = solve(inequality, x)\n\n    # because x must be an integer and the solution should be less than 47.5,\n    # we take the floor of 47.5 which is 47\n    return sol[0].evalf()\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    sum_odds = 0\n    sum_evens = 0\n    for i in range(1, 89, 2):\n        sum_odds += i\n    for i in range(2, 89, 2):\n        sum_evens += i\n    ans = sum_evens - sum_odds\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    remaining = 20.35\n    initial_amount = spent + remaining\n    return initial_amount\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    nth_term = lambda a, d, n: a + (n - 1) * d\n\n    a10 = 23  # The 10th term of the arithmetic sequence\n    a15 = 38  # The 15th term of the arithmetic sequence\n\n    # Calculate the common difference (d)\n    d = (a15 - a10) / (15 - 10)\n\n    # Find the 12th term using the common difference\n    a12 = nth_term(a10, d, 12 - 10)\n\n    return int(a12)\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "from math import gcd\n\ndef solution():\n    class_a = 24\n    class_b = 36\n    class_c = 42\n\n    gcf_ab = gcd(class_a, class_b)\n    gcf_abc = gcd(gcf_ab, class_c)\n    \n    return gcf_abc\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum([4*i for i in range(1, 51)])\n    return ans\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    terms = [\n        (1, 1*2),\n        (2, 2*4),\n        (3, 4*7),\n        (4, 7*11),\n        (5, 11*16),\n        (6, 16*22),\n        (7, 22*29),\n        (1, 29)\n    ]\n    \n    ans = sum(numerator / denominator for numerator, denominator in terms)\n    return ans\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # There are 12 points, and to form a right-angled triangle, we need 3 points.\n    # For a triangle to have a right angle, one of the points must be the vertex of the right angle. \n    # There are 12 choices for the vertex.\n    # Once the vertex is chosen, the two points that form the sides of the right angle must be adjacent to the vertex\n    # In other words, from the vertex, we can go 1 step clockwise or counterclockwise to get one side \n    # and we can go 2 steps from the vertex to complete the right angle (since the points are equally spaced on the circle). \n    # Therefore, for each choice of vertex, there are 4 configurations of a right-angled triangle \n    # (since you can go in the clockwise or counterclockwise direction for each of the two sides of the right angle).\n    \n    # The number of ways to choose the vertex:\n    num_vertex_choices = 12\n    \n    # The number of configurations for each vertex choice:\n    configurations_per_vertex = 4\n    \n    # Total number of right-angled triangles:\n    total_right_angled_triangles = num_vertex_choices * configurations_per_vertex\n    \n    return total_right_angled_triangles\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_lunch_cost = 4.36\n    total_days = 5\n\n    total_cost = children * daily_lunch_cost * total_days\n\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    correct_answers = symbols('correct_answers')\n\n    # Justin gets 5 points for each correct answer and loses 3 points for each wrong answer.\n    # Let's assume all answers are correct first, so he'll get 20 * 5 points.\n    # Then, for each incorrect answer, he actually loses not just 3 points, but also doesn't get 5 points for that question.\n    # That is a total loss of 8 points per incorrect answer.\n\n    total_questions = 20\n    points_for_correct = 5\n    points_lost_otherwise = 3\n    total_points = 76\n\n    # Equation: 5 * correct_answers - 3 * (total_questions - correct_answers) = total_points\n    equation = Eq(points_for_correct * correct_answers - points_lost_otherwise * (total_questions - correct_answers), total_points)\n\n    solutions = solve(equation, correct_answers)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    result = (3/8) * 16\n    return result\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let cp be the cost price\n    cp = symbols('cp')\n    \n    # Marked price is 20% above cost price\n    marked_price = cp * 1.2\n    \n    # Selling price is 90% of the marked price\n    selling_price = marked_price * 0.9\n    \n    # Profit is given as $120, which is selling price minus cost price\n    profit = Eq(selling_price - cp, 120)\n    \n    # Solve for the cost price\n    cost_price = solve(profit, cp)\n    \n    return cost_price[0]\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Abs, Eq, solve\n    \n    x = symbols('x')\n    equation1 = Eq(Abs(x+1), 2*x + 5)\n\n    solutions = solve(equation1, x)\n\n    return solutions\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n\n    total_cost = cost_per_person * number_of_people\n\n    return total_cost\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    number1 = 13.8\n    number2 = 18.6\n    middle_number = (number1 + number2) / 2\n    return middle_number\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if (10 * a + b) + (10 * b + a) + b == (100 * a + 10 * a + b):\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    handshakes = (num_people * (num_people - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # First case: Four different colored socks\n    # Number of ways to arrange them is simply 4! (4 factorial)\n    ways_different_socks = factorial(4)\n    \n    # Second case: Two different colored pairs of socks\n    # Number of arrangements of the pairs is 2! (2 factorial)\n    # Each pair can be arranged internally in 2! ways, \n    # and since there are two pairs, we must multiply by 2! again\n    ways_pair_socks = factorial(2) * factorial(2) * factorial(2)\n    \n    # Return a tuple with both results\n    return (ways_different_socks, ways_pair_socks)\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    num_triangles = comb(num_points, num_vertices)\n    return num_triangles\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # The aim is to leave your opponent with 4n+2 apples if possible,\n    # Because no matter how many apples (1, 2, 3) the opponent picks,\n    # you can always pick 4 - the opponent's pick, leaving them with a multiple of 4 again\n\n    total_apples = 18\n\n    # We want to force Ben to start his turn with 14 apples because 14 is of the form 4n+2\n    # By doing so, Anthea will be in a winning position if she keeps following the strategy\n    # to maintain the 4n+2 situation.\n    # To leave Ben with a multiple of 4 plus 2 apples, Anthea should take 18 - (4*4 + 2) apples\n    \n    return total_apples - (4 * 4 + 2) # Anthea should take 2 apples\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of sweets Andre and Beth originally had as andre and beth\n    andre, beth = symbols('andre beth')\n\n    # Equation 1: Total number of sweets they both had originally\n    equation1 = Eq(andre + beth, 24)\n\n    # After the teacher gave them 4 sweets each\n    # Equation 2: Andre now has 6 sweets more than Beth\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n\n    # Using sympy's solve to solve the equations\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Beth's sweets now (after receiving 4 more sweets from the teacher)\n    beth_now = solutions[beth] + 4\n\n    return beth_now\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_men = 4500\n    taller_than_190cms = 750\n\n    between_180_and_190cms = total_men - taller_than_190cms\n\n    return between_180_and_190cms\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the mass of a table and a chair\n    table_mass, chair_mass = symbols('table_mass chair_mass')\n\n    # Equation representing the total mass of 3 tables and 4 chairs being equal\n    equation1 = Eq(3 * table_mass, 4 * chair_mass)\n\n    # Equation representing the mass of a table being 2kg heavier than a chair\n    equation2 = Eq(table_mass, chair_mass + 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table_mass, chair_mass))\n\n    # Return the mass of a table\n    return solutions[table_mass]\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial\n\n    # Judy can stand at either 2 positions (either end of the line)\n    judy_positions = 2\n\n    # The remaining 5 friends can be arranged in any order\n    friend_permutations = factorial(5)\n\n    # Total ways = judy positions * ways to arrange friends\n    total_ways = judy_positions * friend_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_of_6_bars = 3.18\n    cost_of_1_bar = cost_of_6_bars / 6\n    cost_of_5_bars = cost_of_1_bar * 5\n    return cost_of_5_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    # Total sweets before teacher gave them more\n    total_before = Eq(andre + beth, 24)\n\n    # Total sweets after teacher gave them more\n    total_after = Eq(andre + 4 + beth + 4, 24 + 4 + 4)\n\n    # Andre has 6 more sweets than Beth after teacher gave them more\n    difference = Eq(andre - beth, 6)\n\n    # Solve the system of equations\n    solutions = solve((total_before, total_after, difference), (andre, beth))\n\n    return solutions[beth]\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq((number - 6) / 12, 2)\n\n    ans = solve(equation, number)[0]\n\n    return ans\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # If the Ferrari driver finished in second place and overtook 5 cars,\n    # it means there was 1 car that the Ferrari driver did not overtake,\n    # which was the car in the first place.\n    # Therefore, the total number of cars is the sum of:\n    # (number of cars overtaken) + (Ferrari's final position) + (the car not overtaken)\n    total_cars = 5 + 1 + 1\n    \n    return total_cars\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the younger sister's time spent on Maths and English\n    y_math, y_english = symbols('y_math y_english')\n    \n    # Equation representing the elder sister's total time\n    # Elder sister spent y_math + 10 minutes on Maths\n    # and y_english - 4 minutes on English\n    equation1 = Eq(y_math + 10 + y_english - 4, 88)\n    \n    # Equation representing the younger sister's time relationship between Maths and English\n    equation2 = Eq(y_math, y_english - 12)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (y_math, y_english))\n    \n    return solutions[y_english]\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # The average of four numbers is 130, so the sum of those numbers is 4 * 130\n    sum_of_four_numbers = 4 * 130\n    \n    # If one number is removed and the average becomes 110, the sum of the remaining three numbers is 3 * 110\n    sum_of_three_numbers = 3 * 110\n    \n    # The difference between the sum of the four numbers and three numbers is the number that was removed\n    number_removed = sum_of_four_numbers - sum_of_three_numbers\n    \n    return number_removed\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let x be the value of one silver spoon\n    # Let y be the value of one gold ring\n    # 12x = 3/4 * 6y -> 12x = 4.5y\n    # We need to find how many silver spoons are equal to 3 gold rings\n    # Let's call that number 'n', so we have: nx = 3y\n    \n    # From the first equation we have x/y = 4.5 / 12\n    # substitute y from nx = 3y to get the value of n:\n    # nx = 3 * (x * 4.5 / 12)\n    \n    # Simplify the equation\n    n = 3 * (4.5 / 12)\n    \n    return int(n)\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "def solution():\n    from math import gcd\n    from fractions import Fraction\n\n    # Convert minutes to seconds for easier calculation\n    light1_cycle = 60  # 1 minute\n    light2_cycle = 90  # 1.5 minutes\n    \n    # Calculate the least common multiple of the first two traffic lights\n    lcm = light1_cycle * light2_cycle // gcd(light1_cycle, light2_cycle)\n    \n    # The third light must sync every 9 minutes which is 540 seconds\n    sync_time = 540\n    # The time for the third light must be a divisor of the LCM and sync_time\n    # It must also be greater or equal to 30 seconds\n\n    min_time = 30  # Minimum change time in seconds required for the third traffic light\n    # Find the largest factor of sync_time that is also a factor of the LCM and is >= min_time\n    for i in range(min_time, lcm + 1):\n        if sync_time % i == 0 and lcm % i == 0:\n            return i\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # To ensure Leo's victory, he must take away a number of apples such that\n    # the remaining number of apples is a multiple of 3. Since Mia can only take\n    # 1 or 2 apples at a time, Leo can then always choose to take 3 - Mia's move,\n    # ensuring that the total number of apples taken by both is 3.\n    #\n    # Assuming Mia plays optimally, Leo must get the remaining number of apples\n    # to be a multiple of 3 after his first move. If it is not, Mia can always adjust\n    # her move to force the total number taken to be a multiple of 3, eventually leaving\n    # 1 or 2 apples for Leo, which guarantees her victory.\n    \n    # Total number of apples\n    total_apples = 14\n    \n    # Leo's first move\n    for first_move in range(1, 3):\n        if (total_apples - first_move) % 3 == 0:\n            return first_move\n            \n    # If we can't find such a move, return -1 as an error (though this won't happen)\n    return -1\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    # Let n be the size of the array, which is an odd number because the outermost layer is full of boys\n    # and the innermost layer has only one student which has to be a boy to satisfy the condition\n    # Let's try with n = 3, 5, 7,... until we find the difference to be 55\n    \n    n = 1\n    boys = girls = 0\n    \n    while True:\n        # The number of boys in the outer layer is 4*n - 4 (four sides, subtract the four corners which are counted twice)\n        # since n starts at 1 and increases, we're not worrying about the corners when n = 1 as it represents\n        # a single boy\n        boys += 4*n - 4 if n > 1 else 1\n        # Every inner layer (second layer onwards, odd layers) will have girls of the same count\n        girls += (4*(n-2) - 4) if n > 2 else 0\n        \n        # If the difference between the number of boys and girls is 55, break the loop\n        if boys - girls == 55:\n            break\n        \n        # Move to the next layer\n        n += 2\n\n    # Count the total number of students, considering the sum of arithmetic progression:\n    # n * n (sum of the first n odd numbers is n squared, which is the total students in a square array)\n    total_students = n * n\n\n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n    \n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    ans = 527 - 382\n    return ans\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    from_front = 5\n    from_back = 7\n    from_left = 2\n    from_right = 4\n\n    total_rows = from_front + from_back - 1\n    total_columns = from_left + from_right - 1\n\n    total_students = total_rows * total_columns\n\n    return total_students\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_cost = 28\n    total_items = 12\n    cost_marker = 3\n    cost_brush = 1\n\n    # Assume all items were brushes, which cost $1 each. \n    # Calculate how much more we paid than the cost of brushes alone.\n    extra_cost = total_cost - total_items * cost_brush\n\n    # Each marker costs $2 more than a brush.\n    # Therefore, the number of markers is equal to the extra cost divided by this difference.\n    num_markers = extra_cost // (cost_marker - cost_brush)\n\n    return num_markers\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    ans = 40 * 700\n    return ans\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    # Let the total number of teachers be T and the number of female teachers be F.\n    # The average weight of all teachers is 65.\n    # The total weight of all teachers is therefore 65 * T.\n    \n    # There are 3 male teachers with an average weight of 75.\n    # The total weight of the male teachers is therefore 3 * 75.\n    \n    # The average weight of the female teachers is 60.\n    # Therefore, the total weight of the female teachers is 60 * F.\n    \n    # The total weight of all teachers is also the sum of the total weight of male and female teachers:\n    # 65T = 3*75 + 60F\n    \n    # We know that the total number of teachers T is the sum of the number of male teachers and female teachers:\n    # T = 3 + F\n    \n    # Substituting T in the weight equation we get:\n    # 65(3 + F) = 3*75 + 60F\n    # 195 + 65F = 225 + 60F\n    # 65F - 60F = 225 - 195\n    # 5F = 30\n    # F = 30 / 5\n    # F = 6\n    \n    F = 6\n    return F\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import factorint\n\n    # Calculate the prime factorization of 33 * 55\n    factors = factorint(33 * 55)\n\n    # Multiply the factors by 2 and add 1 to make them even if necessary\n    # because for a number to be a perfect square, all prime factor exponents have to be even.\n    for prime in factors:\n        if factors[prime] % 2 == 1:\n            factors[prime] += 1  # Make the exponent even\n\n    # Calculate the smallest m by multiplying the factors with odd exponents in the original factorization\n    m = 1\n    for prime, exponent in factors.items():\n        m *= prime ** (exponent // 2)\n\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Start with at least 2 pieces on each plate\n    count = 0\n    for plate1 in range(2, 8 - 2*2 + 1):  # Ensure other plates have at least 2 pieces\n        for plate2 in range(2, 8 - plate1 - 2 + 1):  # Ensure last plate has at least 2 pieces\n            plate3 = 8 - plate1 - plate2\n            if plate3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n\n    # Since Star must be the first runner, there are 4 remaining teammates to arrange\n    remaining_teammates = 4\n\n    # The number of ways to arrange the 4 remaining teammates is the factorial of 4\n    num_ways = factorial(remaining_teammates)\n\n    return num_ways\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    # Create a function that matches the pattern of the given operation\n    def operation(a, b):\n        return (a + b) ** 2 - (a + b)\n\n    # Apply the function to the terms 6 and 12\n    ans = operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    time_for_31_segments = 60  # minutes\n    cuts_for_31_segments = 30  # since 31 segments require 30 cuts\n    cuts_for_50_segments = 49  # since 50 segments require 49 cuts\n\n    # Time for a single cut\n    time_per_cut = time_for_31_segments / cuts_for_31_segments\n\n    # Total time for 49 cuts to get 50 segments\n    time_for_50_segments = time_per_cut * cuts_for_50_segments\n\n    return time_for_50_segments\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans_candidate, _ = solve_congruence(*congruences)\n    while ans_candidate < 100:\n        ans_candidate += 3 * 5 * 7\n    if ans_candidate > 200:\n        return None\n    return ans_candidate\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    number = symbols('number')\n    equation = Eq(number - number * 30/100, 210)\n    solution = solve(equation, number)\n    return solution[0]\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # To make the process efficient, we loop through 1 to 9 for the thousands place\n    # because 0 can't be in the thousands place for a four-digit number\n    # and the digits are increasing from left to right\n    for d1 in range(1, 10):\n        for d2 in range(d1 + 1, 10):\n            for d3 in range(d2 + 1, 10):\n                for d4 in range(d3 + 1, 10):\n                    num1 = int(f\"{d1}{d2}{d3}{d4}\")  # The number with increasing digits\n                    num2 = int(f\"{d4}{d3}{d2}{d1}\")  # The number with decreasing digits\n                    # We're looking for the possible values for the third number\n                    # which has a thousands digit less than 'd1' and a units digit more than 'd4'\n                    for t1 in range(0, d1):\n                        for u1 in range(d4 + 1, 10):\n                            num3 = t1*1000 + d2*100 + d3*10 + u1\n                            if num1 + num2 + num3 == 26352:\n                                return min(num1, num2, num3)\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2003  # Start the search from the year following 2002\n    while str(year) != str(year)[::-1]:  # Check if year is a palindrome\n        year += 1  # Move to the next year\n\n    # Calculate the difference between 2002 and the next palindrome year\n    ans = year - 2002\n    return ans\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candy, nancy, gift = symbols('candy nancy gift')\n\n    equation1 = Eq(candy - gift, nancy + gift - 8)\n    equation2 = Eq(candy, 11)\n    equation3 = Eq(nancy, 9)\n\n    solutions = solve((equation1, equation2, equation3), (candy, nancy, gift))\n\n    return solutions[candy]\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    original_price = 200\n    increase_percentage = 0.45\n    new_price = original_price + (original_price * increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('ARRANGE')\n    count_A = 'ARRANGE'.count('A')\n    count_R = 'ARRANGE'.count('R')\n    count_N = 'ARRANGE'.count('N')\n    count_G = 'ARRANGE'.count('G')\n    count_E = 'ARRANGE'.count('E')\n\n    # Number of ways to arrange the letters is total factorial divided by \n    # the factorial of each letter count since there are repetitions\n    ways = factorial(total_letters) // (factorial(count_A) * factorial(count_R) * factorial(count_N) * factorial(count_G) * factorial(count_E))\n\n    return ways\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2*x - 5), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum = 60  # pence\n    money_from_dad = 40  # pence\n    days = 3  # Monday, Tuesday, Wednesday\n\n    total_money = (money_from_mum + money_from_dad) * days\n\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 24 == 0 and number // 24 == 36:\n            return number\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    temperature_at_midnight = -5\n    temperature_at_midday = 17\n\n    overall_temperature_change = temperature_at_midday - temperature_at_midnight\n\n    return overall_temperature_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    counter = 1\n    while term <= 50:\n        counter += 1\n        term += counter\n\n    return term\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    # Compute the total cost of the pens in pounds\n    total_cost_pens = 3 * 43 / 100\n    \n    # Compute the total cost of the booklets\n    total_cost_booklets = 4 * 1.85\n    \n    # Compute the total cost\n    total_cost = total_cost_pens + total_cost_booklets\n    \n    # Amount of money to start with\n    money_start = 10\n    \n    # Compute the change\n    change = money_start - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    sibel_position_from_back = 14\n\n    total_people = people_in_front + sibel_position_from_back - 1 # Subtract 1 because Sibel is counted in both \n\n    return total_people\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # The population of St. Petersburg (Russia) according to a specific reference\n    # Since the user has not provided a specific year or source for the population data,\n    # I'll use a placeholder value and the real value should be fetched from a reliable source.\n    population = 5384342  # This value is a placeholder\n\n    return population\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n    ans = prime(3)\n    return ans\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for first_digit in range(1, 10):  # First digit must be non-zero for a 3-digit number\n        for second_digit in range(0, 10):\n            if abs(first_digit - second_digit) >= 7:\n                for third_digit in range(0, 10):\n                    if abs(second_digit - third_digit) >= 7:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for num in range(5000, 10000):\n        digits = [int(d) for d in str(num)]\n        thousands_digit = digits[0]\n        if all(thousands_digit % d == 0 for d in digits[1:] if d != 0):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 7) / 9, 9)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # In a circle, for the 4th child to be opposite the 22nd child,\n    # there must be an equal number of children between them.\n    # This is half the circle's circumference in terms of the number of children.\n    \n    children_between = (22 - 4)\n    total_children = 2 * children_between  # Total children is double the number between 4th and 22nd child\n\n    return total_children\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily = 24\n    gina = lily // 2\n    fiona = gina // 4\n    total_dresses = gina + fiona\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # Define a function to find the common digits between two combinations\n    def common_digits(comb1, comb2):\n        return sum(a == b for a, b in zip(comb1, comb2))\n\n    # Attempt combinations given the clues\n    for digit1 in range(10):\n        for digit2 in range(10):\n            for digit3 in range(10):\n                for digit4 in range(10):\n                    test_combination = (digit1, digit2, digit3, digit4)\n\n                    # Apply the given conditions\n                    if common_digits(test_combination, (5, 6, 4, 8)) == 2 and \\\n                       common_digits(test_combination, (3, 6, 2, 8)) == 2 and \\\n                       common_digits(test_combination, (3, 1, 4, 7)) == 2 and \\\n                       common_digits(test_combination, (5, 6, 2, 9)) == 2 and \\\n                       all(d not in test_combination for d in (1, 2, 5, 8)):\n                        # The correct combination is found, convert to string numbers\n                        return ''.join(map(str, test_combination))\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_week_coins = 10\n    common_difference = 4\n    num_weeks = 10\n\n    # Using the arithmetic sum formula: S_n = n/2 * (2a + (n - 1)d)\n    total_coins = (num_weeks / 2) * (2 * first_week_coins + (num_weeks - 1) * common_difference)\n\n    return int(total_coins)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarter_full = 350\n    mass_half_full = (mass_three_quarter_full - mass_quarter_full) / 2\n    empty_jar_mass = mass_quarter_full - mass_half_full\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    rate = 1.5 / 100\n\n    # Calculate the number of years using the formula for compound interest\n    # A = P(1 + r/n)^(nt), where A is the amount of money accumulated after n years, including interest.\n    # P is the principal amount, r is the annual interest rate, n is the number of times that interest is compounded per year\n    # and t is the time the money is invested for.\n    # Since the interest is paid yearly, n is 1.\n\n    # Rearrange the formula to solve for t: t = log(A/P) / (n * log(1 + r/n))\n    # Since we're dealing with simple interest, we can use de formula A = P * (1 + r*t)\n    \n    t = (final_amount/principal - 1) / rate  # Solving for t with simple interest calculation\n    \n    return round(t)\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    total_average_weight = 65\n    male_teachers = 3\n    male_average_weight = 75\n    female_average_weight = 60\n\n    # Calculate total weight of all teachers at Star School\n    total_weight = total_average_weight * (male_teachers + 1)  # Including the unknown number of female teachers\n\n    # Calculate total weight of male teachers\n    male_total_weight = male_teachers * male_average_weight\n\n    # Calculate total weight of female teachers\n    female_total_weight = total_weight - male_total_weight\n\n    # Calculate the number of female teachers\n    number_of_female_teachers = female_total_weight / female_average_weight\n\n    return number_of_female_teachers\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Creating symbols for the marks\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Equations based on the problem statement\n    equation1 = Eq((A + B + C) / 3, 95)  # Average of A, B, C\n    equation2 = Eq((B + C + D) / 3, 94)  # Average of B, C, D\n    equation3 = Eq(E, 96)                # E's marks\n    equation4 = Eq(B, D)                 # B and D have the same score\n\n    # Additional information based on the constraints\n    equation5 = (A > 91)                 # All marks are above 91\n    equation6 = (B > 91)\n    equation7 = (C > 91)\n    equation8 = (D > 91)\n    equation9 = (E > 91)\n    equation10 = (A > E)                 # A has the highest mark\n    equation11 = (E > B)                 # E has the second highest mark\n    equation12 = (E > C)                 \n    equation13 = (E > D)                 \n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5,\n                       equation6, equation7, equation8, equation9, equation10,\n                       equation11, equation12, equation13), (A, B, C, D, E), dict=True)\n\n    # Since there are many possible solutions, we return the one where E=96 and A>E\n    for sol in solutions:\n        if sol[A] > sol[E] == 96 and sol[B] == sol[D]:\n            return sol[D]\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_liters = 13.15\n    bottle_portion_liters = 9.1 * (1/7)\n    cup_capacity_liters = 4 * (350 / 1000)\n    \n    remaining_soda = total_soda_liters - (bottle_portion_liters + cup_capacity_liters)\n    \n    return remaining_soda\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for father's and son's current age\n    father, son = symbols('father son')\n    \n    # Equation representing the relationship of their ages 6 years ago\n    equation1 = Eq(father - 6, 5 * (son - 6))\n    \n    # Equation representing the sum of their current ages\n    equation2 = Eq(father + son, 78)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (father, son))\n    \n    # Father's age is what we're interested in\n    return solutions[father]\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    return 245 - 182\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    a, b = symbols('a b')\n\n    # Define the equation representing the relationship between a, b and 2023.\n    equation1 = Eq(a**2, 2023)\n    equation2 = Eq(b**2, 2023)\n\n    # Solve the system of equations for a and b.\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Compute the expression a+b-ab for each solution (there will be four due to the \n    # symmetry of the square roots, but we need any one of them as they are equivalent).\n    expr_val = solutions[0][0] + solutions[0][1] - solutions[0][0]*solutions[0][1]\n\n    return expr_val\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # To ensure victory, Rose must leave a number of marbles such that\n    # Kylie is forced to leave Rose with a winning position on the next turn.\n    # We can deduce the strategy by working backwards from the end of the game.\n\n    # If 3 marbles are left when it's Rose's turn, she can pick 2 and win.\n    # If 2 marbles are left when it's Rose's turn, she can pick 1 or 2 and win.\n    # If 1 marble is left when it's Rose's turn, she picks 1 and wins.\n\n    # If 4 marbles are left when it's Kylie's turn, no matter what she does, \n    # Rose will win on the next turn by picking 1 or 2 marbles.\n    # Therefore, Rose must make sure there are 4 marbles left for Kylie.\n\n    # If we calculate backwards for every 4 marbles, we have winning positions at:\n    # 4, 8, 12 marbles. 14 marbles is two more than a winning position.\n\n    # Thus, Rose should remove 2 marbles, so there are 12 left for Kylie,\n    # which is a wining position for Rose no matter what Kylie does.\n\n    # Rose picks 2 marbles.\n    return 2\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pence = 45 * 100  # Convert pounds to pence\n    coin_value_pence = 5\n    num_coins = total_pence // coin_value_pence\n    return num_coins\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from sympy import symbols, solve\n\n    m = 2.0  # Mass in kg\n    k = 500  # Spring force constant in N/m\n    A = 0.08  # Amplitude in meters\n    x = 0.04  # Position from equilibrium in meters\n\n    # Total mechanical energy (E) of the spring-mass system at any point is given by:\n    # E = (1/2) * k * A^2\n    # where k is the spring constant and A is the amplitude\n    E = (1/2) * k * A**2\n\n    # Kinetic energy (KE) when the block is at a distance x from equilibrium is:\n    # KE = E - Potential energy at x (PE)\n    # PE = (1/2) * k * x^2\n    # Therefore, KE = E - (1/2) * k * x^2\n    KE = E - (1/2) * k * x**2\n\n    # Speed v of the block can be found using the kinetic energy equation:\n    # KE = (1/2) * m * v^2\n    # Solving for v we get:\n    v = symbols('v')\n    equation = Eq((1/2) * m * v**2, KE)\n    speed = solve(equation, v)\n\n    # We are interested in the positive root since speed is a scalar\n    speed_of_block = speed[1]\n\n    return E, speed_of_block\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols\n    pip_per_min, bud_per_min = symbols('pip_per_min bud_per_min')\n    \n    # Since Pip runs 20 more meters than Bud each minute\n    pip_bud_relation = Eq(pip_per_min, bud_per_min + 20)\n    \n    # Total distance run by both in 3 minutes is 540 meters\n    total_distance = Eq(3 * (pip_per_min + bud_per_min), 540)\n    \n    # Solve the system of equations\n    solutions = solve((pip_bud_relation, total_distance), (pip_per_min, bud_per_min))\n    \n    # Pip's distance in 3 minutes\n    pip_total_distance = 3 * solutions[pip_per_min]\n    \n    return pip_total_distance\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    # Converting hexadecimal numbers to decimal\n    decimal_sum = int('2A3', 16) + int('17B', 16)\n    \n    # Converting the decimal sum back to hexadecimal\n    hex_sum = hex(decimal_sum)\n\n    # Removing '0x' prefix and converting the result to uppercase\n    ans = hex_sum.upper().replace('0X', '')\n\n    return ans\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    initial_coffee_percent = 60\n    final_coffee_percent = 40\n    # If initially 60% were coffee, 40% were tea.\n    initial_tea_percent = 100 - initial_coffee_percent\n    \n    # In the final situation, if 40% were coffee, 60% are tea.\n    final_tea_percent = 100 - final_coffee_percent\n    \n    # Let the initial total number of bottles be 100 for simplicity.\n    # Then the initial number of tea bottles is 40.\n    initial_tea_bottles = initial_tea_percent\n    \n    # After adding more tea, the final percentage of tea bottles is 60.\n    # The final total number of bottles is still the same because the percentage of coffee \n    # has gone down to 40%. Hence the final number of tea bottles is 60.\n    final_tea_bottles = final_tea_percent\n    \n    # Calculating the percentage increase:\n    increase_in_tea_bottles = final_tea_bottles - initial_tea_bottles\n    percentage_increase = (increase_in_tea_bottles / initial_tea_bottles) * 100\n    \n    return percentage_increase\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of coins in each box\n    A, B, C = symbols('A B C')\n\n    # Create equations based on the problem description\n    # Box A contains 4 times as many coins as Box B\n    equation1 = Eq(A, 4 * B)\n    # 6% of Box A's coins are transferred to Box C, and 20% of Box B's coins are transferred to Box C\n    # 0.22C is 22% more than the orginal number of coins in Box C, which is now 1220\n    equation2 = Eq(0.06 * A + 0.20 * B + 0.78 * C, 1220)\n    # Rearrange equation2 to get the original amount of coins in Box C as a standalone term on the right side\n    # And obtain the relationship between Box C's original amount and Box A and B\n    original_C = symbols('original_C')\n    equation3 = Eq(C, original_C / 0.78)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C, original_C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_money = (5 * 2) + (2 * 5) + (3 * 10)\n    total_flowers = 5 + 2 + 3\n    average_price = total_money / total_flowers\n    return average_price\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    percentage_of_300 = 40 / 100 * 300\n    percentage_of_percentage = 30 / 100 * percentage_of_300\n    final_percentage = 25 / 100 * percentage_of_percentage\n    return final_percentage\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    total_time = 1 + 3 + 4 + 1\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money = 60  # in pence\n    james_money = 110  # Â£1.10 converted to pence\n    \n    total_money_pence = lewis_money + james_money\n    total_money_pounds = total_money_pence / 100  # convert pence back to pounds\n    \n    return total_money_pounds\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    # Let t be the number of tricycles and c be the number of cars.\n    # We know the following two equations based on the problem statement:\n    # t + c = 24  (total number of tricycles and cars)\n    # 3t + 4c = 86 (total number of wheels)\n    # We can solve for t using these two equations\n    \n    total_vehicles = 24\n    total_wheels = 86\n\n    for t in range(total_vehicles + 1):\n        c = total_vehicles - t\n        if 3 * t + 4 * c == total_wheels:\n            return t\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13):\n        for x2 in range(3, 13):\n            x3 = 13 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    return 7 * 0.4\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"WINNING\")\n    w_count = \"WINNING\".count(\"W\")\n    i_count = \"WINNING\".count(\"I\")\n    n_count = \"WINNING\".count(\"N\")\n    g_count = \"WINNING\".count(\"G\")\n\n    ans = factorial(total_letters) // (factorial(w_count) * factorial(i_count) * factorial(n_count) * factorial(g_count))\n    \n    return ans\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # in kilograms\n    final_velocity = 8  # in meters per second\n    time = 4  # in seconds\n\n    acceleration = final_velocity / time  # in meters per second squared\n    force = mass * acceleration  # Force = mass * acceleration (Newton's second law)\n\n    return force\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Before adding pens\n    total_pens_initial = 96\n    ratio_blue_red = 3/5\n    red_pens_initial = (total_pens_initial * 5) / (3 + 5)\n    blue_pens_initial = total_pens_initial - red_pens_initial\n\n    # After adding pens\n    red_pens_after_adding = red_pens_initial + 60\n    total_pens_after_adding = red_pens_after_adding / (1 - 0.4)\n    blue_pens_after_adding = total_pens_after_adding * 0.4\n\n    # Blue pens added\n    blue_pens_added = blue_pens_after_adding - blue_pens_initial\n\n    return int(blue_pens_added)\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of lemonade bottles, y be the number of \"1000 Plus\" bottles\n    x, y = symbols('x y')\n\n    # Equations based on the problem statement\n    equation1 = Eq(4*x + 7*y, 2012)  # income from sales\n    equation2 = Eq(x + y, 350)       # total number of bottles\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Since we need the minimum number of \"1000 Plus\" bottles, we need to maximize lemonade sales\n    # So we find the solution with maximum x\n    max_lemonade_sales_solution = max(solutions, key=lambda sol: sol[x])\n\n    return max_lemonade_sales_solution[y]\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # Using the Frobenius Coin Problem formula to find the largest number of wings \n    # that cannot be purchased exactly with boxes of 3 and 7\n    # The largest number is given by (m * n) - m - n where m and n are coprime integers\n    m = 3\n    n = 7\n    ans = (m * n) - m - n\n    return ans\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    num = 20172017\n    divisor = 2017\n    ans = num // divisor\n    return ans\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "from itertools import permutations\n\ndef solution():\n    def number_of_factors(n):\n        return sum(n % i == 0 for i in range(1, n + 1))\n\n    def is_compatible(permutation, may_knows_her_number):\n        # Checking if two students know their number of factors\n        known_factors_count = sum(number_of_factors(num) in [2, 3, 4, 5] for num in permutation)\n        # The May's condition checks: greater than Mark by 1 and smaller than Alice by 2\n        # (which must be an odd number)\n        return (known_factors_count == 2 and may_knows_her_number)\n\n    # Create all permutations of 9 numbers from the 13\n    all_combinations = list(permutations(range(1, 14), 9))\n\n    # Assuming May is the second student, May's number should be odd and there's a number smaller by 1\n    # and there should be a number greater than May's by 2 (which Alice observes)\n    for combination in all_combinations:\n        for i, may_number in enumerate(combination):\n            # We know that May's number is smaller than an odd number (Alice's) by 2\n            # and is bigger than (Mark's) by 1. So there is Mark's and Alice's numbers.\n            if may_number % 2 == 1 and (may_number + 2) in combination and (may_number - 1) in combination:\n                # Check if this permutation is compatible with the conditions\n                if is_compatible(combination, True):\n                    remaining_numbers = set(range(1, 14)) - set(combination)\n                    return eval('*'.join(str(num) for num in remaining_numbers))\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    correct, incorrect = symbols('correct incorrect')\n    \n    score = Eq(5 * correct - 2 * incorrect, 151)\n    answers_relation = Eq(correct, 3 * incorrect + 12)\n    \n    solutions = solve((score, answers_relation), (correct, incorrect))\n    \n    return solutions[correct]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_km = 32\n    num_friends = 11\n\n    total_cost = cost_per_km * total_km\n    cost_per_person = total_cost / num_friends\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watches = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watches - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert to base 10, perform addition and convert back to base 7\n    sum_base_10 = int('45', 7) + int('66', 7)\n    ans = ''\n    while sum_base_10 > 0:\n        ans = str(sum_base_10 % 7) + ans\n        sum_base_10 //= 7\n    return ans\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    ans = 628 * 5\n    return ans\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # Start with the largest two consecutive numbers and work down\n    for i in range(19, 1, -1):\n        if 20 % i != 0 and (20 % (i - 1) != 0 or 20 % (i + 1) != 0):\n            return i + (i - 1)\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Each match involves two players, so the total number of matches is half the sum of individual matches played.\n    total_matches_played = 4 + 6 + 2 + 1 + 3 + 5\n\n    # There is an even number of match plays since each match has two players.\n    # If the total so far is odd, F must have played an odd number of matches to make the total even.\n    # If the total so far is even, F must have played an even number of matches to keep the total even.\n    if total_matches_played % 2 == 0:\n        # F has played an even number of matches\n        return 0\n    else:\n        # F has played an odd number of matches to make the total sum even\n        return 1\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    ans = 67 * 23\n    return ans\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jamie, natasha = symbols('jamie natasha')\n    equation1 = Eq(jamie, natasha + 18)\n    equation2 = Eq(jamie/natasha, 5/3)\n\n    solutions = solve((equation1, equation2), (jamie, natasha))\n\n    total_stamps = solutions[jamie] + solutions[natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (first_term + last_term) * num_terms // 2\n    return sum_seq\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    sum_of_numbers = 0\n    for number in range(161, 15 * 15):  # Stop at 15*15 since beyond that the quotient would be greater than the remainder\n        quotient, remainder = divmod(number, 15)\n        if quotient == remainder:\n            sum_of_numbers += number\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    linda_current_age, cici_current_age = symbols('linda_current_age cici_current_age')\n\n    # When Cici was born, Linda was 11 years old.\n    equation1 = Eq(cici_current_age, linda_current_age - 11)\n\n    # The sum of their ages 4 years later will be 37.\n    equation2 = Eq((linda_current_age + 4) + (cici_current_age + 4), 37)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (linda_current_age, cici_current_age))\n\n    # How old will Linda be 3 years later?\n    linda_age_in_3_years = solutions[linda_current_age] + 3\n\n    return linda_age_in_3_years\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    least_possible_sum = first_number_min + second_number_min\n    return least_possible_sum\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    entrances = 5\n    people = 4\n    \n    # Each person has 5 choices, independently of the choices of the others\n    ways = entrances ** people\n    \n    return ways\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_one_way = 300  # in meters\n    speed_uphill = 10  # in m/min\n    speed_downhill = 30  # in m/min\n\n    time_uphill = distance_one_way / speed_uphill\n    time_downhill = distance_one_way / speed_downhill\n\n    total_time = time_uphill + time_downhill\n    total_distance = distance_one_way * 2\n\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    peaches = 18\n    peaches_per_bag = 2\n    bags_needed = peaches // peaches_per_bag\n    return bags_needed\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Count of each fruit type after taking out the leftovers\n    apples = 226 - 10\n    pears = 352 - 28\n    oranges = 157 - 13\n\n    # Calculate the greatest common divisor (GCD) of the three numbers\n    gcd_apples_pears = gcd(apples, pears)\n    gcd_all = gcd(gcd_apples_pears, oranges)\n\n    # The biggest possible number of students is the GCD\n    ans = gcd_all\n    return ans\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    number = \"\"\n    i = 1\n    while len(number) < 200:\n        number += str(i)\n        i += 1\n    return int(number[199])\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n\n    # Total number of friends\n    total_friends = 6  # Judy + 5 friends\n\n    # Judy can stand in the first place or the last place, so there are 2 choices for Judy\n    judy_positions = 2\n\n    # Remaining people can be arranged in factorial of (total_friends - 1) ways\n    friends_arrangement = factorial(total_friends - 1)  # factorial(5)\n\n    # Apply multiplication principle\n    total_ways = judy_positions * friends_arrangement\n\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    first_number = 6\n    lcm = 12\n\n    for second_number in range(1, lcm + 1):\n        if (first_number * second_number) % lcm == 0 and \\\n           {1, 2} == set([x for x in range(1, min(first_number, second_number) + 1) if first_number % x == 0 and second_number % x == 0]):\n            return second_number\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost = symbols('cost')\n    price = cost + 40\n    selling_price = price * 0.8\n    profit = selling_price - cost\n\n    equation = Eq(profit, 12)\n    cost_value = solve(equation, cost)\n\n    return cost_value[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = (6.25 * 8.27 * 16) + (1.25 * 0.827 * 8)\n    return ans\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of qualified products and y be the number of unqualified products.\n    x, y = symbols('x y')\n\n    # Each day 500 televisions are produced.\n    total_tvs_per_day = 500\n\n    # The factory produced televisions for four days.\n    total_days = 4\n\n    # Qualified TV product is worth 5 points.\n    points_per_qualified = 5\n\n    # Unqualified product results in a loss of 18 points.\n    points_per_unqualified = -18\n\n    # Total points earned during four days.\n    total_points = 9931\n\n    # The total number of televisions produced in four days is the number of qualified plus unqualified.\n    equation1 = Eq(x + y, total_tvs_per_day * total_days)\n\n    # The total points are the sum of points from qualified and unqualified products.\n    equation2 = Eq(points_per_qualified * x + points_per_unqualified * y, total_points)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    total_for_seven_numbers = 7 * 12\n    total_for_eight_numbers = 8 * 11\n    eighth_number = total_for_eight_numbers - total_for_seven_numbers\n\n    return eighth_number\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d represent Daniel's current age and da represent his daughter's current age\n    d, da = symbols('d da')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(d - 2, 6 * (da - 2))\n    equation2 = Eq(d + 2, 4 * (da + 2))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (d, da))\n    \n    # Return Daniel's current age\n    return solutions[d]\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    seq_sum = sum(range(1, 9)) + sum(range(7, 0, -1)) + sum(range(1, 3))\n    return seq_sum\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roosters, hens = symbols('roosters hens')\n\n    equation1 = Eq(hens, 6 * roosters)\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n\n    solutions = solve((equation1, equation2), (roosters, hens))\n\n    total_chickens = solutions[roosters] + solutions[hens]\n\n    return total_chickens\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    ans = 8000 * 0.7\n    return ans\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    recurring_sequence = \"538462\"\n    sequence_length = len(recurring_sequence)\n    position = 2021\n    remainder = position % sequence_length\n\n    if remainder == 0:\n        # If the remainder is 0, the previous digit is the last digit of the sequence\n        remainder = sequence_length\n\n    return int(recurring_sequence[remainder - 1])\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let the original speed of April be 'a' and Baye be 'b'.\n    # Distance travelled by April before meeting Baye is (1800 + 800) meters.\n    # Distance travelled by Baye before meeting April is (1800 - 800) meters.\n    # We know that April runs 4 times faster after reaching Q.\n    # Therefore, time taken by April to reach Q = time taken by her to meet Baye after Q.\n    # So, (1800 / a) = (800 / (4a)).\n    # This implies a = 4b.\n    # Now, when April is at P after meeting Baye, the total distance she travelled is 2 * 1800 meters.\n    # In this time, Baye has moved (1800 / a) * b + (800 / (4a)) * b meters away from P towards Q.\n    \n    # Calculate the distance Baye would have travelled\n    distance_baye_travelled = (1800 / 4) + (800 / 16)\n    distance_baye_away_from_q = 1800 - distance_baye_travelled\n    return distance_baye_away_from_q\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for number in range(1, 101):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    result = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return result\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(C, B - 75)\n    equation3 = Eq(A + B + C, 835)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the total amount of money Bud had initially\n    x = symbols('x')\n\n    # Bud spends 1/3 of her money on a book\n    book_cost = x / 3\n    \n    # Bud spends 2/5 of her money on a bag\n    bag_cost = (2 * x) / 5\n\n    # The book and the bag cost Â£132 altogether\n    total_cost = Eq(book_cost + bag_cost, 132)\n\n    # Solve for x to find out how much money Bud had initially\n    initial_money = solve(total_cost, x)[0]\n\n    return initial_money\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    ans = 4125 - 837\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # single and double-digit palindromes\n    for i in range(1, 10):\n        count += 1  # one-digit palindromes\n        count += 1  # two-digit palindromes, e.g. 11, 22, ...\n    \n    # three-digit palindromes\n    for i in range(1, 10):  # hundreds place\n        for j in range(0, 10):  # tens place (does not affect palindrome property)\n            count += 1  # e.g., 101, 111, 121, ...\n    \n    return count\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    count = 0\n    for i in range(1, 216):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(\"1\" + str(num)) == int(str(num) + \"1\") / 3:\n            return num\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # The worst case scenario is that Darrell picks all the blue and white beads first\n    max_blue_and_white = 5 + 6\n    # To ensure 5 green beads, Darrell must then draw 5 more beads\n    must_draw_green = 5\n    # Total number of beads Darrell must draw to ensure 5 green beads\n    total_draws = max_blue_and_white + must_draw_green\n    return total_draws\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    # Count numbers divisible by 5\n    count_div_by_5 = 105 // 5\n    \n    # Count numbers divisible by 7\n    count_div_by_7 = 105 // 7\n    \n    # Count numbers divisible by both 5 and 7, i.e., divisible by 35\n    count_div_by_5_and_7 = 105 // 35\n    \n    # Apply the inclusion-exclusion principle\n    ans = count_div_by_5 + count_div_by_7 - count_div_by_5_and_7\n    \n    return ans\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    pages = 81\n    total_digits = 0\n    \n    # Single-digit page numbers from 1 to 9\n    total_digits += 9\n    \n    # Double-digit page numbers from 10 to 81\n    # There are (81 - 9) double-digit numbers\n    total_digits += (pages - 9) * 2\n    \n    return total_digits\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    count = 0\n    for x1 in range(7):\n        for x2 in range(7):\n            x3 = 6 - x1 - x2\n            if x3 >= 0:\n                count += 1\n    # We need to divide by 3! to account for the identical baskets\n    return count // 6\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    def new_operation(a, b):\n        return 5 * a - 2 * b\n    \n    ans = new_operation(6, 2)\n    return ans\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # John walks from the first floor to the fourth floor which involves climbing 3 intervals (1st to 2nd, 2nd to 3rd and 3rd to 4th)\n    intervals_1_4 = 3\n\n    # He takes 12 minutes to walk up 3 intervals, hence the time to walk one interval\n    time_per_interval = 12 / intervals_1_4\n\n    # For the first floor to the eighth floor, there are 7 intervals (1st to 2nd, ..., 7th to 8th)\n    intervals_1_8 = 7\n\n    # Time taken for 7 intervals\n    time_1_8 = time_per_interval * intervals_1_8\n\n    return time_1_8\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas = 15\n    num_months = 5  # March to July\n\n    total_pizzas = average_pizzas * num_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n    \n    # The sum of divisor, dividend, quotient and remainder is 40\n    # divisor + dividend + quotient + remainder = 40\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, 40 - remainder - divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    \n    return len(possible_values)\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    initial_birds_to_squirrels_ratio = 8 / 5\n    squirrel_increase_percentage = 0.20\n\n    # Given initial conditions, let the initial number of birds be 8x and squirrels be 5x\n    # where x is a common multiplier\n    initial_birds = 8\n    initial_squirrels = 5\n    initial_total = initial_birds + initial_squirrels\n    final_squirrels = initial_squirrels * (1 + squirrel_increase_percentage)\n    \n    # Since the total number of birds and squirrels remains the same\n    final_total = initial_total\n    final_birds = final_total - final_squirrels\n    \n    # Find the percentage decrease in the number of birds\n    birds_flew_percentage = ((initial_birds - final_birds) / initial_birds) * 100\n\n    return birds_flew_percentage\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    page_difference = 4\n\n    days = ((last_day_pages - first_day_pages) // page_difference) + 1\n\n    return days\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    Fiona, Gary, Harold = symbols('Fiona Gary Harold')\n    \n    equation1 = Eq(Fiona + Gary, 973)\n    equation2 = Eq(Fiona + Harold, 1823)\n    equation3 = Eq(Harold, 6 * Gary)\n\n    solutions = solve((equation1, equation2, equation3), (Fiona, Gary, Harold))\n\n    return solutions[Fiona]\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    def custom_operation(x, y):\n        return (x - 1) + (y - 1)\n        \n    ans = custom_operation(9, 20)\n    \n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    total_juice = total_cartons * juice_per_carton\n    juice_drunk = 9\n    remaining_juice = total_juice - juice_drunk\n    container_volume = 5\n    containers_needed = -(-remaining_juice // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    first_term = 7\n    common_difference = 15 - 7  # The sequence is arithmetic so common_difference is constant\n\n    # The next term is the previous one plus the common difference.\n    # The fourth term is 31, so to find the fifth term we add the common difference.\n    next_term = 31 + common_difference\n\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    return sum(range(1, 51))\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    ans = 7 * 8\n    return ans\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    required_loafs = 35\n    cups_needed = required_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from itertools import permutations\n    \n    max_value = 0\n    # Since 0 is not allowed, our range is 1 to 9 (inclusive)\n    for p in permutations(range(1, 10), 4): # Permutations of 4 digits\n        D, A, R, T = p\n        if D + A + R + T == 11 and T + A + R + T == 12 and C + A + R + T == 13:\n            max_value = max(max_value, A + R + T)\n\n    return max_value\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 101):  # Given A is an integer, we limit the range to a sensible upper limit\n        if 5/9 < 9/A < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    # Each of the 4 friends sends a card to the other 3 friends\n    cards_sent_by_each = 3\n    total_friends = 4\n\n    # Since each friend sends cards to each of the other friends\n    total_cards_sent = cards_sent_by_each * total_friends\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(boys + girls, 39)\n    equation2 = Eq(boys/4, 2/5 * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    ans = solutions[boys] - solutions[girls]\n\n    return ans\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left_of_tanya = 3\n    members_right_of_tanya = 5\n    tanya = 1 # Tanya herself\n\n    total_members = members_left_of_tanya + tanya + members_right_of_tanya\n\n    return total_members\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5\n    max_load_per_van = 12\n    num_vans = -(-total_weight // max_load_per_van)\n\n    return num_vans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    num = 87878\n    # Start from 9999 as it's the largest four-digit number and go down until we find a prime\n    for i in range(9999, 1000, -1):\n        if num % i == 0:\n            # Check if the factor is a prime number\n            if all(i % j != 0 for j in range(2, int(i**0.5) + 1)):\n                return i\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # First part\n    distance_1 = 280\n    speed_1 = 7\n    time_1 = distance_1 / speed_1  # Time = Distance / Speed\n\n    # Second part\n    distance_2 = 400\n    speed_2 = 5\n    time_2 = distance_2 / speed_2\n\n    # Third part\n    distance_3 = 800 - distance_1 - distance_2\n    speed_3 = 8\n    time_3 = distance_3 / speed_3\n\n    # Total time\n    total_time = time_1 + time_2 + time_3\n\n    return total_time\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    daniel, patrick = symbols('daniel patrick')\n    \n    # Daniel gives away 24 stickers\n    daniel_after = daniel - 24\n    # Patrick buys 10 stickers\n    patrick_after = patrick + 10\n    # In the end, Patrick has twice as many as Daniel\n    equation = Eq(patrick_after, 2 * daniel_after)\n    # They had an equal number at first\n    initial_condition = Eq(daniel, patrick)\n    \n    # Solving the simultaneous equations\n    solutions = solve((equation, initial_condition), (daniel, patrick))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def count_partitions(n, max_value):\n        if n == 0:\n            return 1\n        if n < 0 or max_value == 0:\n            return 0\n        return count_partitions(n, max_value - 1) + count_partitions(n - max_value, max_value)\n    \n    return count_partitions(5, 5)\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = 82\n    plane_height = 569\n    vertical_distance = whale_depth + plane_height\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    max_left_handed_girls = girls - (total_pupils - right_handed)\n    right_handed_girls = girls - max_left_handed_girls\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_worker = 6\n    total_days = 9\n    total_skirts = sum([(skirts_per_worker * day) for day in range(1, total_days + 1)])\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    # Since we want the smallest difference, we should make the two numbers as close as possible\n    # Hence, one number should start with 1, and the other should start with 9\n    # The second digits should be 2 and 8, respectively, to keep the numbers close\n    # We continue this pattern, alternating the digits from the ends towards the middle\n    # The middle digit will be 5 for both numbers, maintaining the requirement that all digits are used\n    num1 = int('123456789')\n    num2 = int('987654321')\n    \n    # Calculate the difference\n    ans = abs(num1 - num2)\n    \n    return ans\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the total number of fruits\n    total_fruits = symbols('total_fruits')\n    \n    # According to the problem:\n    # (2/3) * total_fruits - (1 - (2/3) - (1/9)) * total_fruits = 12\n    # The number of lemons equals to the total fruits minus apples and bananas\n    # number_of_lemons = total_fruits - (2/3 * total_fruits) - (1/9 * total_fruits)\n    # But we know that apples are 12 more than lemons:\n    # (2/3 * total_fruits) - number_of_lemons = 12\n    \n    # Equation representing the relationship between apples and lemons\n    equation = Eq((2/3)*total_fruits - ((1 - (2/3) - (1/9))*total_fruits), 12)\n    \n    # Solve the equation\n    total_fruits_solution = solve(equation, total_fruits)\n    \n    # Now, we can calculate the number of lemons\n    lemons = total_fruits_solution[0] - (2/3 * total_fruits_solution[0]) - (1/9 * total_fruits_solution[0])\n    \n    return int(lemons)\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n\n    # P(A | B) = P(A and B) / P(B)\n    # Here we want to find P(B | A), where:\n    # A is the event that the animal lives over 20 years,\n    # B is the event that the animal lives over 25 years,\n    # P(A and B) is the probability the animal lives over 25 years,\n    # which is equivalent to P(B), since living over 25 implies living over 20.\n    # P(A) is the probability the animal lives over 20 years.\n    \n    probability_over_25 = probability_over_25_given_over_20\n    probability_of_living_over_25_given_over_20 = probability_over_25 / probability_over_20\n    \n    return probability_of_living_over_25_given_over_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # Number of taps\n    taps = 5\n    \n    # Time taken for taps to fill a 1-litre jug (in minutes)\n    time_for_1_litre = 2\n\n    # The rate at which one tap fills a jug (litres/minute)\n    rate_per_tap = 1 / (taps * time_for_1_litre)\n\n    # The volume of the jug to fill in litres\n    jug_volume = 0.5  # 500 ml is half a litre\n\n    # Time taken for one tap to fill a 500ml jug\n    time_for_500_ml = jug_volume / rate_per_tap\n\n    return time_for_500_ml\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_erasers, brother_erasers = symbols('john_erasers brother_erasers')\n\n    equation1 = Eq(john_erasers, brother_erasers + 32)\n    equation2 = Eq(john_erasers + brother_erasers, 246)\n\n    solutions = solve((equation1, equation2), (john_erasers, brother_erasers))\n\n    return solutions[brother_erasers]\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    a = 1\n    while True:\n        if a * a + a + a == 399:\n            break\n        a += 1\n    return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110\n    sally_height = ben_height + 20\n    return sally_height\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v be the total visitors at the fair\n    v = symbols('v')\n\n    # Children were 3/5 of the visitors\n    children = 3 * v / 5\n\n    # Remaining visitors\n    remaining = v - children\n\n    # Men were half of the remaining visitors\n    men = remaining / 2\n\n    # There were 140 more children than men\n    equation = Eq(children, men + 140)\n\n    # Solve the equation\n    visitors = solve(equation, v)\n\n    return visitors[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    all_three_digit_numbers = list(permutations(digits, 3))\n    all_sums = []\n    \n    for i in range(len(all_three_digit_numbers)):\n        for j in range(i+1, len(all_three_digit_numbers)):\n            num1 = int(''.join(map(str, all_three_digit_numbers[i])))\n            num2 = int(''.join(map(str, all_three_digit_numbers[j])))\n            all_sums.append(num1 + num2)\n    \n    ans = max(all_sums)\n    return ans\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    percentage = 40\n    total = 3280\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_volume_litres = 2  # Total volume in litres\n    drank_volume_millilitres = 350  # Volume drank in millilitres\n\n    total_volume_millilitres = total_volume_litres * 1000  # Convert total volume to millilitres\n    remaining_volume_millilitres = total_volume_millilitres - drank_volume_millilitres  # Calculate remaining volume\n\n    remaining_volume_litres = remaining_volume_millilitres / 1000  # Convert remaining volume back to litres\n\n    return remaining_volume_litres\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Given pattern: 1, 8, 16, 23, 46, 53, ...\n    # Analyzing the pattern:\n    # After 1, it adds 7 (1+7=8)\n    # Then it doubles the number (8*2=16)\n    # Then it adds 7 again (16+7=23)\n    # Again, it doubles the number (23*2=46)\n    # Pattern identified: add 7, then next term doubles, and repeat\n    \n    # Starting with the given sequence\n    sequence = [1, 8, 16, 23, 46, 53]\n\n    # Since these are the first six terms and pattern is repeating every two terms,\n    # the next operation should be to double the last number (like second and fourth terms)\n    next_number = sequence[-1] * 2\n\n    return next_number\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    # Let x be the tons of water A can fill\n    # Let y be the tons of water B can fill\n    # Let z be the tons of water C can fill\n    # Since the flow rate of B is twice that of A: y = 2x\n    # When A and C are turned on, the total is x + z = 18\n    # When B and C are turned on, the total is y + z = 27\n    # Now we solve the system of equations:\n    # x + z = 18\n    # 2x + z = 27\n    # Subtract the first equation from the second to find the value of x\n    x = (27 - 18) / 2\n    # Now find the value of z\n    z = 18 - x\n    # The total capacity of the pool is the sum of the water from A and C or B and C\n    pool_capacity = x + z\n\n    return pool_capacity\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    pay_per_match = 500\n    pay_per_goal = 100\n    number_of_matches = 20\n    average_goals_per_game = 2\n\n    total_earnings = (pay_per_match * number_of_matches) + (pay_per_goal * average_goals_per_game * number_of_matches)\n\n    return total_earnings\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let G be the total amount of grass\n    # rate_h is the rate at which one horse eats grass per day\n    # rate_s is the rate at which one sheep eats grass per day\n    # According to the problem:\n    # 20 horses eat all grass in 12 days => 20 * rate_h * 12 = G\n    # 60 sheep eat all grass in 24 days => 60 * rate_s * 24 = G\n\n    # As the amount of grass a horse eats per day is equal to that 4 sheep eat per day\n    # rate_h = 4 * rate_s\n\n    # From the above two equations we can derive that:\n    # 20 * (4 * rate_s) * 12 = G\n    # 60 * rate_s * 24 = G\n    # Therefore:\n    # 960 * rate_s = G\n    # 1440 * rate_s = G\n\n    # From the above two equations, by dividing them we get:\n    # 960 * rate_s / (1440 * rate_s) = 1\n    # 2/3 = 1\n\n    # If 12 horses and 88 sheep can eat all grass we get:\n    # 12 horses eat 12 * 4 * rate_s per day\n    # 88 sheep eat 88 * rate_s per day\n    # In total they eat (12 * 4 + 88) * rate_s amount of grass per day\n\n    # The time T it takes for 12 horses and 88 sheep to eat G amount of grass is:\n    # (12 * 4 + 88) * rate_s * T = G\n    # T = G / ((12 * 4 + 88) * rate_s)\n    # T = 960 / (48 + 88)\n    # T = 960 / 136\n    # T = 30 / 17 days\n\n    T = (960 / (48 + 88))\n    return T\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_weight = 8  # Total kilograms of oranges\n    total_cost = 26.8  # Total cost of oranges\n\n    cost_per_kilogram = total_cost / total_weight\n\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    a = 1\n    n = 10\n    sun_operation_sum = sum(a + 2*i for i in range(n))\n    return sun_operation_sum\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        M, A, T, H = perm\n        if M == 0 or H == 0:  # leading digit cannot be 0\n            continue\n        MATH = M*1000 + A*100 + T*10 + H\n        HTAM = H*1000 + T*100 + A*10 + M\n        if MATH + HTAM == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    number_of_balls = 16\n\n    cost_per_ball = total_cost / number_of_balls\n\n    return cost_per_ball\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    count = 0\n    # Count for numbers having exactly two sevens\n    for digit in range(1, 10):\n        if digit != 7:\n            count += 2  # For numbers like 77x and x77 where x is not 7\n            if digit > 7:\n                count += 1  # For numbers like 7x7 where x is not 7\n\n    # Count for numbers having three sevens (777)\n    count += 1\n\n    return count\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # Treat Mr. Spencer and his 2 children as a single entity.\n    # There are 4 entities to arrange (Mr. Spencer with his 2 children and 3 other people).\n    entity_arrangements = factorial(4)\n\n    # Mr. Spencer can sit in 3 different seats, with one child on the left and one on the right.\n    spencer_child_arrangements = factorial(3)\n\n    # The total arrangements is the product of entity arrangements and Spencer child arrangements.\n    total_arrangements = entity_arrangements * spencer_child_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    eaten_by_bill = total_sweets / 2\n    remaining_sweets = total_sweets - eaten_by_bill\n    given_away = remaining_sweets / 3\n    sweets_left = remaining_sweets - given_away\n\n    return sweets_left\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    num1 = 1.9\n    num2 = 1.99\n    \n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Number of 2-dollar and 5-dollar notes\n    n2, n5 = symbols('n2 n5', integer=True)\n\n    # Total number of notes before spending\n    total_notes = Eq(n2 + n5, 55)\n\n    # After spending 1/3 of the 2-dollar notes\n    spent_n2 = n2 / 3\n\n    # Number of 2-dollar notes remaining\n    remaining_n2 = n2 - spent_n2\n\n    # Received 8 more 5-dollar notes\n    new_n5 = n5 + 8\n\n    # Relationship between 5-dollar notes and remaining notes\n    five_notes_relation = Eq(new_n5, (3/7) * (remaining_n2 + new_n5))\n\n    # Solve the system of equations\n    solutions = solve((total_notes, five_notes_relation), (n2, n5))\n\n    # Calculate total money at first (2 * number of $2 notes + 5 * number of $5 notes)\n    total_money = 2 * solutions[n2] + 5 * solutions[n5]\n\n    return total_money\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # in meters\n    speed = 7      # in meters per minute\n    \n    time_taken = distance / speed  # time = distance / speed\n    \n    return time_taken\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_questions = 6\n    correct_points = 5\n    wrong_deduction = 2\n    total_score = 23\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_points - wrong_answers * wrong_deduction\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result_after_operations = 18\n    initial_result = (result_after_operations - 7) * 3\n    return initial_result\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    n = 20\n    first_odd_number = 1\n    common_difference = 2\n    nth_odd_number = first_odd_number + (n - 1) * common_difference\n    \n    return nth_odd_number\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    from sympy import divisors\n\n    # get divisors of 24 and 52\n    divisors_of_24 = divisors(24)\n    divisors_of_52 = divisors(52)\n\n    # find the common B, since A*B = 24 and B*C = 52\n    common_B = [b for b in divisors_of_24 if b in divisors_of_52]\n\n    # initialize minimum A+C to a high number\n    min_A_plus_C = float('inf')\n    for B in common_B:\n        A = 24 // B\n        C = 52 // B\n\n        # update the minimum A+C\n        min_A_plus_C = min(min_A_plus_C, A + C)\n\n    return min_A_plus_C\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n\n    # There are 5 \"groups\" to consider: ABC, E, F, and the two other individual students.\n    group_permutations = factorial(5)\n    \n    # ABC can be arranged in 3! ways internally.\n    abc_internal_permutations = factorial(3)\n    \n    # E and F can switch places, so there are 2! ways for them.\n    ef_internal_permutations = factorial(2)\n    \n    # Multiply the number of permutations for groups and internal arrangements.\n    total_permutations = group_permutations * abc_internal_permutations * ef_internal_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scarfs_per_day, total_scarfs = symbols('scarfs_per_day total_scarfs')\n    equation1 = Eq(total_scarfs, 6 * scarfs_per_day)\n    equation2 = Eq(total_scarfs, 4 * (scarfs_per_day + 24))\n\n    solutions = solve((equation1, equation2), (scarfs_per_day, total_scarfs))\n\n    return solutions[total_scarfs]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # If he gives each student 6 sweets, he will be short of 26 sweets.\n    # If he gives each student 5 sweets, he will be short of 5 sweets.\n    # Let the total number of sweets be x and the number of students be n.\n    # Then we have the following equations:\n    # x - 6*n = -26  (1)\n    # x - 5*n = -5   (2)\n    \n    # Subtracting equation (2) from equation (1) gives us:\n    # (6*n - 26) - (5*n - 5) = 0\n    # n = 21\n    # Now we'll substitute n into equation (2):\n    # x - 5*21 = -5\n    # x = -5 + 5*21\n    x = -5 + 5*21\n    \n    return x\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boys and g represent the number of girls originally.\n    b, g = symbols('b g')\n\n    # The ratio of boys to girls was initially 5:3\n    equation1 = Eq(b/g, 5/3)\n\n    # After 15 boys left, the ratio became 5:6\n    equation2 = Eq((b - 15)/g, 5/6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Calculate the total number of pupils originally\n    total_pupils = solutions[b] + solutions[g]\n\n    return total_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):  # Ensure x2 is greater than x1 for difference\n            for x3 in range(x2 + 1, 15):  # Ensure x3 is greater than x2 for difference\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    return sum(range(2, 15 + 1, 2))\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_fraction = 1/3\n    original_price = sale_price / (1 - discount_fraction)\n    return original_price\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    product = 10 * 20 * 30 * 40\n    return product\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    # Get the prime factorization of 675\n    factors = factorint(675)\n\n    # Duplicate factors to make it a square\n    b = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            b *= prime\n\n    return b\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost_pence = 695  # The cost of a multipack in pence\n    individual_can_cost_pence = 65  # The cost of a single can in pence\n    total_individual_cost_pence = 12 * individual_can_cost_pence  # Total cost when buying cans individually\n    \n    savings = total_individual_cost_pence - multipack_cost_pence  # The savings made by buying a multipack\n    return savings\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    # Let j be the current age of Josh\n    # Shelby's current age is given as 65\n    shelby_current_age = 65\n    # Shelby's age 5 years ago was (shelby_current_age - 5)\n    shelby_age_5_years_ago = shelby_current_age - 5\n    # Josh's age 5 years ago was (3/5) times Shelby's age at that time\n    josh_age_5_years_ago = (3/5) * shelby_age_5_years_ago\n    # Josh's current age is (josh_age_5_years_ago + 5)\n    josh_current_age = josh_age_5_years_ago + 5\n    \n    return josh_current_age\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_of_amount = total_amount / 4\n    return quarter_of_amount\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    ab = 102  # Adam and Ben\n    bc = 97   # Ben and Carl\n    ac = 93   # Adam and Carl\n\n    total_weight = (ab + bc + ac) / 2  # Since Ben's weight is counted twice in ab and bc, and so on\n\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, banana = symbols('apple banana')\n    \n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n    \n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    result = 55 / 100 * 80\n    return result\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    count = 0\n    \n    # Numbers with 4 digits, count all permutations as all of them will be between 3267 and 5120\n    # 4! (4 factorial) permutations for every combination of 4 different digits selected from 6\n    from math import factorial\n    count += factorial(4) * factorial(6) // factorial(6 - 4) \n    \n    # Numbers with 3 digits, they will all be less than 3267\n    # As we have 6 digits to choose from, there are 6P3 permutations\n    count += factorial(6) // factorial(6 - 3)\n    \n    # Numbers less than 3267 but with 4 digits\n    # Choosing 3 as first digit, we have 5 options for second digit (all except 3)\n    # Then 4 options for third digit (can't be first two selected digits)\n    # Then 3 options for the last digit (can't be first three selected digits)\n    count += 1 * 5 * 4 * 3\n\n    # Choosing 4 can't be done as it would exceed 5120\n    \n    # Now handle the numbers between 3267 and 5120 which start with 5 specifically\n    # 5000 to 5120, the remaining three digits can be any of the five remaining digit options\n    \n    # For 51xx, the second digit has to be 1, and we have 4 options for the last two digits\n    count += 1 * factorial(4)\n\n    # For 52xx, no options are available as it exceeds 5120\n    \n    # For numbers in 5x00 to 5x20, where x is from 1 to 4, we have 1 option for x and then 4!/2! for the two remaining slots\n    count += 4 * factorial(4) // factorial(2)\n\n    return count\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    more_singapore_stamps = singapore_stamps - malaysia_stamps\n\n    return more_singapore_stamps\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500  # The initial amount deposited\n    rate = 0.08  # Annual interest rate\n    time = 10  # Number of years\n\n    # Compound interest formula: A = P (1 + r/n)^(nt)\n    # Since interest is compounded yearly, n = 1\n    account_balance = principal * ((1 + rate)**time)\n\n    return account_balance\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    num1 = 10000 + 24\n    num2 = 3000 + 968\n    ans = num1 + num2\n    return ans\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # Alan and Bob together\n    rate_alan_bob = 1 / 4  # the rate they finish the work together \n    # Bob alone\n    rate_bob = 1 / 6       # the rate only Bob finishes the work\n    \n    # Alan alone\n    # Let 1/x be the rate of Alan. Then the rate of Alan and Bob together is (1/x + 1/6)\n    # This must equal the rate at which Alan and Bob together can complete the work, which is 1/4.\n    # Therefore, 1/x + 1/6 = 1/4. Solving for x gives us the rate at which Alan works alone.\n    rate_alan = rate_alan_bob - rate_bob  # Subtract Bob's rate from their combined rate to isolate Alan's rate\n    time_alan = 1 / rate_alan             # The time Alan takes is the reciprocal of his rate\n    \n    return time_alan\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    from math import gcd\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food_consumption = 15\n    number_of_weeks = 26\n    total_food_required = weekly_food_consumption * number_of_weeks\n    return total_food_required\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    score = symbols('score')\n    equation = Eq(score - 30, (score / 2) + 10)\n    solution = solve(equation, score)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    peter_votes = 35\n    remaining_votes = total_votes - (22 + 27 + peter_votes)\n    votes_needed_for_majority = (total_votes // 2) + 1\n\n    return votes_needed_for_majority - peter_votes\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - (6*6) - (8*8)\n    return ans\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the initial amount of money both Alex and Nicholas had\n    x = symbols('x')\n\n    # After Alex spent $58, he has x - 58 left\n    # After Nicholas spent $13, he has x - 13 left\n    # The amount of money Nicholas had left is 6 times that of Alex's\n    equation = Eq((x - 13), 6 * (x - 58))\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the total amount they had initially together\n    return 2 * solution[0]\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    flour_left = 21\n    \n    flour_used = total_flour - flour_left\n    \n    return flour_used\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    day_code = {0: '0001', 1: '0002', 2: '0003', 3: '0004', 4: '0005', 5: '0006', 6: '0007'}\n    days_later = 28\n    current_day_code = 1  # Monday\n\n    day_in_future = (current_day_code + days_later % 7) % 7\n    ans = day_code[day_in_future]\n\n    return ans\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    return 6 * 0.001\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n    num_poles = (road_length - interval) // interval\n    return num_poles\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = symbols('a')\n    equation = Eq(a**(2/3), 9)\n\n    solutions = solve(equation, a)\n    return max(solutions)  # Return the non-negative solution as 'a' is more likely to be a positive real number.\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean_value = 11\n    total_numbers = len(numbers) + 1  # Adding one for the unknown x\n    total_sum = mean_value * total_numbers\n    x = total_sum - sum(numbers)\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    value_of_first_7 = 7 * 1000  # 7 in the thousands place\n    value_of_second_7 = 7 * 10    # 7 in the tens place\n    difference = value_of_first_7 - value_of_second_7\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return int(total_cost_for_12_people)\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    pencils_plus_rulers = 52\n    more_pencils = 10\n    \n    # Assuming the number of rulers is r, then pencils will be r + 10\n    # r + (r + 10) = 52\n    # 2r + 10 = 52\n    # 2r = 52 - 10\n    # 2r = 42\n    # r = 42 / 2\n    # r = 21\n    rulers = (pencils_plus_rulers - more_pencils) / 2\n    \n    return int(rulers)\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # You need 3 reds + 3 yellows + 3 blues + 1 extra to ensure 4 of the same color\n    ans = 3 + 3 + 3 + 1\n    return ans\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys = 200\n    boys_ratio = 5\n    girls_ratio = 6\n    total_ratio = boys_ratio + girls_ratio\n    girls = (girls_ratio * boys) / boys_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    decimal_part = '3' * 1000  # Since 1/3 = 0.333... we can represent the first 1000 digits after the decimal as '333...3' (1000 times)\n    digits_sum = sum(int(digit) for digit in decimal_part)  # Sum all the digits which are all '3' so 3 * 1000\n    return digits_sum\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15 / 100\n    amount = 29\n    result = percentage * amount\n    return result\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    # Solve the linear equation 4 * x - 13 = 55\n    x = (55 + 13) // 4\n    return x\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    ans = fraction + percentage + decimal\n    return ans\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variable for the original concentration in container A\n    original_concentration = symbols('x')\n\n    # After adding 10 grams of solution to A, the new concentration in A is (30*x)/(30+10)\n    concentration_A = (30 * original_concentration) / (30 + 10)\n\n    # After moving 10 grams from A to B, the concentration in B is (10/40) * concentration_A (because B is diluted with A)\n    concentration_B = (10 / 40) * concentration_A\n\n    # After moving 10 grams from B to C, the concentration in C is (10/50) * concentration_B\n    # We know the final concentration in C is 0.5%, which we write as 0.005\n    equation = Eq((10 / 50) * concentration_B, 0.005)\n\n    # Solving for the original concentration in container A\n    solution = solve(equation, original_concentration)\n\n    return float(solution[0])\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    # The question asks for multiples of 2 up to 100.\n    # Since 2 is the first multiple of 2 and 100 is the last multiple of 2 in the range,\n    # we can find the number of multiples by dividing 100 by 2.\n    \n    ans = 100 // 2\n    return ans\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    factor_pairs = [(i, 2016 // i) for i in range(1, int(2016**0.5) + 1) if 2016 % i == 0]\n    for pair in factor_pairs:\n        for factor in range(1, pair[0] + 1):\n            if (factor * pair[0] * pair[1]) % 1377 == 0:\n                common_factor = (factor * pair[0] * pair[1]) // 1377\n                if common_factor < factor:\n                    continue\n                age_c1 = common_factor - 2\n                age_c2 = pair[0] / common_factor - 1\n                age_c3 = pair[1] / common_factor - 1\n                if age_c2 > 0 and age_c3 > 0 and age_c2.is_integer() and age_c3.is_integer():\n                    return int(age_c1 * age_c2 * age_c3)\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    from math import factorial\n\n    # Two people who want to stand next to each other are treated as one unit.\n    # There are 4 units to arrange (3 individuals + 1 pair).\n    unit_arrangements = factorial(4)\n\n    # The pair can be arranged in 2 ways (person A next to B, or person B next to A)\n    pair_arrangements = factorial(2)\n    \n    # The total number of ways is the product of unit and pair arrangements.\n    total_ways = unit_arrangements * pair_arrangements\n\n    return total_ways\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_first_three_days = 33\n    average_last_four_days = 18\n    total_last_four_days = average_last_four_days * 4\n    total_week = total_first_three_days + total_last_four_days\n    average_per_day = total_week / 7\n    return average_per_day\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    mass_metal_1 = 12  # mg\n    nickel_percent_1 = 0.40\n    mass_metal_2 = 13  # mg\n    nickel_percent_2 = 0.60\n    \n    total_nickel = (mass_metal_1 * nickel_percent_1) + (mass_metal_2 * nickel_percent_2)\n    total_mass = mass_metal_1 + mass_metal_2\n\n    nickel_concentration = (total_nickel / total_mass) * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    return 15 / (1/7)\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a round-robin tournament with 8 players, each player plays 7 games (one against each of the other players).\n    # There will be a total of 7 games won for each of the 7 losers.\n    # The champion must win against all the other players.\n    # The total number of games won should be the sum of integers from 1 to 7 (because each player registers a distinct number of wins).\n    total_wins = sum(range(1, 8))\n    # The champion's number of wins is the maximum in this sequence, which is 7.\n    champ_wins = 7\n\n    return champ_wins\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    s = 3405\n    n = 1\n    while n * (n + 1) // 2 <= s:\n        total = n * (n + 1) // 2\n        if total + n == s:\n            return n\n        n += 1\n    return None\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    possible_values = set()\n    remainder = 3\n    for divisor in range(1, 40):\n        for quotient in range(1, (40 - remainder) // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    return len(possible_values)\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's symbolize the number of chicken in each pen originally as 'c' and total chickens as 't'\n    c, t = symbols('c t')\n    \n    # Original situation\n    original_pens = 24\n    # After building more pens\n    new_pens = original_pens + 6\n    \n    # We set up the equations based on the problem statement\n    # Original number of chickens in each pen times number of pens equals total chickens\n    equation1 = Eq(c * original_pens, t)\n    # After building more pens and reducing 6 chickens from each\n    equation2 = Eq((c - 6) * new_pens, t)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (c, t))\n    \n    return solutions[t]\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    math_club_total = 146 + 94\n    history_club_total = (7 / 8) * math_club_total\n    return int(history_club_total)\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # sum of the first n terms of an arithmetic series formula: S_n = n/2 * (a_1 + a_n)\n    # sum of the first 6 terms (S_6) = 64: S_6 = 6/2 * (2a_1 + 5d) = 64\n    # sum of the first 12 terms (S_12) = 156: S_12 = 12/2 * (2a_1 + 11d) = 156\n    \n    # from S_6 and S_12, we can set up a system of equations:\n    # 1. 3 * (2a_1 + 5d) = 64\n    # 2. 6 * (2a_1 + 11d) = 156\n    \n    # Now we solve for a_1 (the first term) and d (the common difference)\n    from sympy import symbols, Eq, solve\n    a_1, d = symbols('a_1 d')\n    equation1 = Eq(3 * (2 * a_1 + 5 * d), 64)\n    equation2 = Eq(6 * (2 * a_1 + 11 * d), 156)\n    \n    solutions = solve((equation1, equation2), (a_1, d))\n    \n    # We can now calculate the sum of the first 18 terms (S_18) knowing a_1 and d\n    S_18 = 18/2 * (2 * solutions[a_1] + 17 * solutions[d])\n    \n    return S_18\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    import math\n    ans = math.gcd(45, 60)\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    time = 30\n    train_speed = 20  # meters per second\n    \n    bridge_length = (train_speed * time) - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_current_age = 10\n    ashley_age_three_years_ago = ashley_current_age - 3\n    brother_age_three_years_ago = ashley_age_three_years_ago - 2\n    brother_current_age = brother_age_three_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n    hebe_score = (hebe_percentage / 100) * total_marks\n    more_marks = hebe_score - emily_score\n    return more_marks\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 3 choices for the first digit (3 or 4), since it can't be 0 for a three-digit number.\n    # There are 3 choices for the second digit (0, 3, or 4).\n    # There are 3 choices for the third digit (0, 3, or 4).\n    count = 2 * 3 * 3\n    \n    return count\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Jogging time from 6:30 a.m. to 7:00 a.m. is 0.5 hours (30 minutes)\n    jogging_time = 0.5  # hours\n    # Walking time from 7:00 a.m. to 8:00 a.m. is 1 hour\n    walking_time = 1.0  # hour\n    \n    # Speed of jogging\n    jogging_speed = 9.0  # km/h\n    # Speed of walking\n    walking_speed = 7.5  # km/h\n    \n    # Distance covered while jogging\n    jogging_distance = jogging_speed * jogging_time\n    # Distance covered while walking\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    return common_factor * (55 - 44)\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wins, losses = symbols('wins losses')\n    total_games = 63\n    \n    # Equation: wins = 2 * losses\n    # Another equation: wins + losses = total_games\n    equation1 = Eq(wins, 2 * losses)\n    equation2 = Eq(wins + losses, total_games)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (wins, losses))\n    \n    return solutions[losses]\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    # Directly calculate the given expression in Python\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    ans = 3647 // 7\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of animals initially as 'total'\n    # Let's denote the initial number of cows as 'cows'\n    # Then, the initial number of goats will be 'total - cows'\n    # According to the problem, 65% of the animals were cows\n    # The number of goats doubled, which means the initial number of goats is 'goats_initial'\n    # and the final number of goats is '2 * goats_initial' \n    # The percentage of cows increased by 20% meaning the final percentage of cows is 65% + 20% = 85%\n    # After 240 more cows and goats were added, the total number of animals becomes 'total + 240'\n\n    total, cows, goats_initial = symbols('total cows goats_initial')\n\n    # Now set up the equations\n    equation1 = Eq(cows, 0.65 * total)  # 65% of the animals were cows\n    equation2 = Eq(total - cows, goats_initial) # Remaining animals were goats\n    equation3 = Eq(cows + goats_initial + 240, total + 240) # After adding 240 animals\n    equation4 = Eq(cows + 240, 0.85 * (total + 240))  # Percentage of cows increased to 85%\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total, cows, goats_initial))\n\n    # Number of goats initially is stored in 'goats_initial'\n    goats_initial = solutions[goats_initial]\n\n    return goats_initial\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    area_x = (3**2 * (3**(1/2))) / 4\n    area_y = (9**2 * (3**(1/2))) / 4\n\n    ans = area_y / area_x\n    return int(ans)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 7 == 4 and i % 8 == 4 and i % 9 == 4:\n            return i\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_cost = Eq(5*x*12 + 3*x*5, 120)\n    x_value = solve(total_cost, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "def solution():\n    from math import comb\n\n    num_students = 5\n    num_selections = comb(num_students, 2)\n\n    return num_selections\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    # The girls can be treated as a single unit since they want to stand together, so we are arranging 7 units (3 boys + 1 group of girls + 3 teachers)\n    total_units = 7\n    # Calculate arrangements of these 7 units\n    unit_arrangements = factorial(total_units)\n\n    # The girls within their own group can be arranged in 3! ways.\n    girl_arrangements = factorial(3)\n\n    # There are 4 slots where the boys can stand without being adjacent (before and after each unit and the group of girls)\n    boy_slots = total_units - 3 + 1  # Subtract 3 boys and add 1 for the initial space\n    # We need to choose 3 spots for the 3 boys\n    boy_arrangements = factorial(boy_slots) // factorial(boy_slots - 3)\n\n    # The total different ways they can line up\n    ans = unit_arrangements * girl_arrangements * boy_arrangements\n    return ans\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Since numbers on planet Zog are written in reverse\n    # reverse the given numbers and perform subtraction\n    num1_reversed = int(str(729)[::-1])\n    num2_reversed = int(str(26)[::-1])\n\n    # Perform subtraction of the reversed numbers\n    result = num1_reversed - num2_reversed\n\n    # Reverse the result again to get the answer as Pluto would write it\n    pluto_answer = int(str(result)[::-1])\n\n    return pluto_answer\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    larger_number = 8 * 9 * 10\n    smaller_number = 1 * 2 * 3\n    difference = larger_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_each = 9\n    total_roses = bouquets * roses_each\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soups = 2  # 1 soup of the day + option not to choose soup\n    desserts = 3  # 2 desserts + option not to choose dessert\n\n    combinations = appetisers * main_courses * soups * desserts\n\n    return combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    children = [i for i in range(100, 201) if i % 8 == 3 and i % 9 == 1]\n    return children[0]\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of 5\n    # First term (a1) is 6, last term (an) is 41, we need to find the number of terms (n) and then the sum\n\n    # The common difference (d)\n    d = 5\n    # The first term (a1)\n    a1 = 6\n    # The last term (an)\n    an = 41\n\n    # The number of terms (n) in the arithmetic sequence.\n    # n = ((an - a1) / d) + 1\n    n = ((an - a1) / d) + 1\n\n    # The sum of an arithmetic sequence can be found by the formula: S = n/2 * (a1 + an)\n    sum_seq = (n / 2) * (a1 + an)\n\n    return int(sum_seq)\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 rabbits = 8 * 2 chickens = 16 chickens\n    chickens_per_dog = 8 * 2\n    return chickens_per_dog\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    # Let the number of blue balls be x.\n    # The total number of ways to pick 2 balls out of 4+ x is C(4+x, 2).\n    # The number of ways to pick 2 red balls out of 4 is C(4, 2).\n    # The probability of picking 2 red balls is C(4, 2) / C(4+x, 2).\n\n    from math import comb\n\n    # Calculate the number of combinations for picking 2 red balls.\n    red_comb = comb(4, 2)\n\n    # We solve the equation: red_comb / total_comb = 2/7\n    x = 0\n    while True:\n        total_comb = comb(4 + x, 2)\n        if red_comb / total_comb == 2 / 7:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    slices_left = 4\n    slices_given_away = 2\n    fraction_eaten = 3/5\n\n    total_slices_before_given_away = slices_left / (1 - fraction_eaten)\n    total_slices_at_first = total_slices_before_given_away + slices_given_away\n\n    return int(total_slices_at_first)\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, danny = symbols('mike danny')\n\n    # If they work together, they finish in 10 hours\n    equation1 = Eq(1/mike + 1/danny, 1/10)\n\n    # Mike types for 8 hours then Danny types for 13 hours to finish the job\n    equation2 = Eq(8/mike + 13/danny, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mike, danny))\n\n    # We need the time it takes for Danny to finish the job by himself\n    return solutions[danny]\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "def solution():\n    from math import factorial\n\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # The product 2^27 can be achieved by having 27 twos.\n    # A 10-digit number can have at most nine 2's since the tenth digit can't be zero (leading digit).\n    # The remaining product has to be made up by using 4's, 8's or 16's\n    # 4 is 2^2, 8 is 2^3, and 16 is 2^4.\n    \n    # Case 1: Nine 2's and one 16 (2^4), which is one way to arrange.\n    # Case 2: Eight 2's and one 8 (2^3), with the rest being 1's.\n    # Case 3: Seven 2's and two 4's (2^2 each).\n    # For Case 2 and Case 3, the number of arrangements can be calculated using combinations.\n\n    # Case 1: One 16 and the rest are 2's (9 of them)\n    # There are ten positions where the 16 could go, the rest will be 2's.\n    case_1 = 10\n\n    # Case 2: One 8 and the rest are 2's (8 of them)\n    # There are ten positions where the 8 could go, the rest will be 2's.\n    case_2 = 10\n    \n    # Case 3: Two 4's and the rest are 2's (7 of them)\n    # There are ten positions, we need to choose 2 for the 4's.\n    case_3 = nCr(10, 2)\n\n    ans = case_1 + case_2 + case_3\n\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    position_1 = 3 * 10**2 # The place value of the first 3 (hundreds place)\n    position_2 = 3 * 10**5 # The place value of the second 3 (hundreds of thousands place)\n    difference = position_2 - position_1\n    return difference\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    total_cases = 2\n\n    # According to the Pigeonhole principle\n    min_pencils_in_one_case = (total_pencils + total_cases - 1) // total_cases\n\n    return min_pencils_in_one_case\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    def custom_oplus(a, b):\n        return sum(a + i for i in range(b + 1))\n    \n    for m in range(100):\n        if custom_oplus(m, 10) == 66:\n            return m\n            \nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = (51+40+30+20) - (45+35+25+15) + 50\n    return ans\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    spacing = 3\n\n    # Number of chesses on one side equals to the side length divided by chess spacing, minus 1\n    # because the chess on the corner will be counted once for two adjacent sides.\n    chess_per_side = side_length // spacing\n\n    # Total number of chesses equals to 4 times chesses on one side (4 sides of the square),\n    # and we add 4 to include the chesses on the four corners.\n    total_chess = 4 * (chess_per_side - 1) + 4\n\n    return total_chess\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # To minimize the number of red squares, we distribute the digits as evenly as possible.\n    # Each digit should appear at most 4 times since at 5, they would be painted red.\n    # Distribute the digits 0-9 evenly across 100 squares, \n    # which means each digit appears 4 times in 40 squares. \n    # The remaining 60 squares can be filled with the 6 other digits, which also appear 4 times each.\n    \n    # Total red squares: None, as no digit appears 5 or more times.\n    return 0\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = -4\n\n    # Using the formula for the nth term of an arithmetic sequence:\n    # a_n = a_1 + (n-1)*d\n    # To find when the term becomes negative: a_n < 0\n    # 0 > 50 + (n-1)*(-4)\n    # We need to isolate n:\n    # (n-1)*(-4) < -50\n    # n-1 > 12.5\n    # n > 13.5\n    # Since n must be an integer and we're looking for the first negative term:\n\n    num_terms = 13  # Because on the 14th term, the sequence will become negative\n\n    return num_terms\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent = 2.89\n    received = 4/5\n\n    remaining_amount = initial_amount - spent + received\n\n    return remaining_amount\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):  # since 100^2 = 10000, which is not a 4-digit number\n        num = i ** 2\n        first_two = num // 100\n        last_two = num % 100\n        if first_two // 10 == first_two % 10 and last_two // 10 == last_two % 10:\n            return num\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    n = 1\n    count = 0\n    while True:\n        if n % 5 == 0:\n            temp = n\n            while temp % 5 == 0:\n                count += 1\n                temp //= 5\n        if count == 28:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    return (3 * m - 1) + m\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    # Combined speed of Tim and Bob per hour\n    combined_speed = 56 + 74\n    \n    # Initial distance between Tim and Bob\n    initial_distance = 780\n    \n    # Remaining distance after meeting for the first time\n    remaining_distance = 130\n    \n    # Distance covered until the remaining distance is 130 km\n    distance_covered = initial_distance - remaining_distance\n    \n    # Time required to cover the distance_covered at the combined_speed\n    time = distance_covered / combined_speed\n    \n    return time\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import lcm\n    return lcm(4, 7, 8)\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    # Given numbers\n    numbers = [3, 4, 6, 10]\n\n    # Calculate the sum of the four numbers.\n    sum_of_numbers = sum(numbers)\n\n    # As the mean of the five numbers is 5, the sum of the five numbers must be 5 times 5.\n    total_sum = 5 * 5\n\n    # Calculate the fifth number by subtracting the sum of the four numbers from the total sum.\n    fifth_number = total_sum - sum_of_numbers\n\n    return fifth_number\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:  # Each digit should be unique.\n            perms = set(permutations(digits))\n            for perm in perms:\n                consecutive = sorted(int(digit) for digit in perm)\n                if all(consecutive[i] + 1 == consecutive[i + 1] for i in range(len(consecutive) - 1)):\n                    count += 1\n                    break  # Once a permutation is found, break, as we don't need to count duplicates.\n    return count\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    distance_climbed_per_day = 3\n    distance_slid_at_night = 1\n    net_distance_per_day = distance_climbed_per_day - distance_slid_at_night\n    total_distance = 11\n    days_to_reach_top_except_last_day = (total_distance - distance_climbed_per_day) / net_distance_per_day\n    if days_to_reach_top_except_last_day == int(days_to_reach_top_except_last_day):\n        ans = int(days_to_reach_top_except_last_day) + 1\n    else:\n        ans = int(days_to_reach_top_except_last_day) + 2\n    return ans\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    # 0.8354854... where 8 and 4 are recurring\n    recurring_sequence = '8354'\n    sum_digits = 0\n    number_of_digits = 84\n\n    # Sum the recurring sequence as many times as it fits into the number_of_digits\n    full_cycles = number_of_digits // len(recurring_sequence)\n    remaining_digits = number_of_digits % len(recurring_sequence)\n\n    for digit in recurring_sequence:\n        sum_digits += full_cycles * int(digit)\n\n    # Add the remaining digits\n    for i in range(remaining_digits):\n        sum_digits += int(recurring_sequence[i])\n\n    return sum_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n    average_distance = (eddie + jenny + jason) / 3\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # The time between each strike is the total time minus the time of the strikes themselves\n    # divided by one less than the number of strikes (since we don't count the time before the first strike)\n    time_between_strikes = (43 - 6 * 3) / (6 - 1)\n    # The total time for 12 strikes is the time for the strikes themselves plus the time between them\n    # multiplied by one less than the number of strikes (11 intervals between 12 strikes)\n    total_time = 12 * 3 + time_between_strikes * (12 - 1)\n    return int(total_time)\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n\n    cost_per_person = total_cost / num_people\n\n    return cost_per_person\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    # Start from the smallest possible square and check conditions\n    m = 0\n    while True:\n        m += 1\n        # Find the number of students (m^2 + 5)\n        students = m**2 + 5\n        # Check if by adding 18 the total becomes a perfect square\n        if ((students + 18)**0.5).is_integer():\n            break\n    # Return the number of students originally\n    return students\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    # Using the direct proportionality concept\n    # people * hours = constant\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n    \n    constant_work = initial_people * initial_hours\n    required_people = constant_work // target_hours\n    \n    return required_people\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import comb\n\ndef solution():\n    # Since each of the 6 kids must get at least one pen, we give them each one pen.\n    remaining_pens = 20 - 6\n    \n    # Now we need to distribute the remaining pens to 6 kids,\n    # which is equivalent to the number of partitions of 'remaining_pens' into 6 parts,\n    # or the number of solutions to the equation x1 + x2 + x3 + x4 + x5 + x6 = remaining_pens\n    # with each xi >= 0. This is a stars and bars problem and its solution is given by comb(N + k - 1, k - 1)\n    # with N = remaining_pens and k = 6.\n    ans = comb(remaining_pens + 6 - 1, 6 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    # James takes 30 minutes to finish one quiz, so for 4 quizzes:\n    total_minutes = 30 * 4\n    \n    # Convert minutes to hours\n    hours = total_minutes / 60\n    \n    return hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # No leading zero allowed for the Hundreds\n    without_zeros = 9 * 9 * 9  # 9 options for each digit, leading zero not allowed in hundreds place\n    numbers_with_at_least_one_zero = total_three_digit_numbers - without_zeros\n    return numbers_with_at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # in kilograms\n    speed = 30  # in meters per second\n\n    kinetic_energy = 0.5 * mass * speed ** 2\n\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for num in range(100, 201):\n        if (num % 3 == 1) and (num % 4 == 1) and (num % 5 == 1) and (num % 7 == 2):\n            return num\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - first_term  # The difference between the second and the first term\n    nth_term = first_term + (7 - 1) * common_difference  # The formula for the nth term of an arithmetic sequence\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for num in range(100, 300):  # Iterate through the range of 3-digit numbers below 300\n        if num % 5 == 2 and num % 6 == 2 and num % 7 == 2:  # Check the remainders\n            return num  # Return the first number that fits all conditions\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1\n    length_each_piece = total_length / pieces\n    return length_each_piece\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # Assuming that the thousands place cannot be 0\n    for thousands_place in range(1, 10):\n        for tens_place in range(10):\n            for hundreds_place in range(1, 10):\n                if (thousands_place != tens_place and \n                    thousands_place != hundreds_place and \n                    tens_place != hundreds_place and \n                    hundreds_place + tens_place == 13):\n                    # ones place is the greatest odd number, which is 9\n                    ones_place = 9\n                    # Check if they're all different\n                    if len({thousands_place, hundreds_place, tens_place, ones_place}) == 4:\n                        return int(f\"{thousands_place}{hundreds_place}{tens_place}{ones_place}\")\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let's denote Jerry's speed as 's' and Kevin's speed as '1.5s'\n    # The total distance they have to cover is 225 miles\n    \n    # Using the formula: Distance = Speed * Time\n    # Jerry's distance = s * t\n    # Kevin's distance = 1.5s * t\n    \n    # The sum of the distances they both cover is 225 miles\n    # Therefore: s * t + 1.5s * t = 225\n    # Simplifying: 2.5s * t = 225\n    \n    # Since we need to find the distance Jerry has covered, we find his time first\n    # Jerry's distance = s * (225 / (2.5s))\n    \n    # The speed 's' cancels out, leaving us with:\n    # Jerry's distance = 225 / 2.5\n    jerry_distance = 225 / 2.5\n\n    return jerry_distance\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    original_height = 100  # Assume an original height of 100 units. Any value works due to percentage.\n    bounce_height = 75 / 100 * original_height  # Height after first bounce\n    bounce_count = 0\n\n    while bounce_height >= 25 / 100 * original_height:\n        bounce_count += 1\n        bounce_height *= 75 / 100\n\n    return bounce_count\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    sequence = [5, 8, 11, 14, 17, 20]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    ans = 597 * 63\n    return ans\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_wall_width = 4800  # width of the wall in mm\n    picture_width = 210  # width of one picture in mm\n    num_pictures = 10  # total number of pictures to hang\n    \n    # calculate the total space occupied by the pictures\n    total_pictures_width = num_pictures * picture_width\n    \n    # calculate the total spacing available between the pictures\n    space_available = total_wall_width - total_pictures_width\n    \n    # calculate the space between each picture\n    space_between_pictures = space_available // (num_pictures - 1)\n    \n    # find the centre of the wall\n    centre_of_wall = total_wall_width // 2\n    \n    # the third picture will be 1 space to the right of the centre,\n    # so we need to calculate the distance from the centre of the wall to the \n    # centre of the third picture\n    # the centre of the first picture is at position 0 (extreme left)\n    # the centre of the third picture is 2 spaces away from it\n    \n    # centre of the second picture is at the extreme right\n    # centre of the first picture + space between pictures + half of picture width\n    centre_of_third_picture = picture_width + space_between_pictures + (picture_width // 2)\n    \n    # calculate the distance from the centre of the third picture to the centre of the wall\n    distance_from_centre = centre_of_wall - centre_of_third_picture\n\n    return distance_from_centre\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    banana_price = solutions[banana]\n    apple_price = solutions[apple]\n\n    ans = banana_price + apple_price\n\n    return ans\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100\n    \n    principal = interest / rate\n    \n    return principal\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    # Let uncle_age be the current age of Doris's uncle\n    uncle_age = symbols('uncle_age')\n\n    # By the time Doris reaches her uncle's current age, the uncle will be 40.\n    # We are to find out the current age of the uncle.\n    # The difference in their ages will always remain constant. Hence, we can express it as follows:\n    # uncle_age + (uncle_age - doris_age) = 40\n    equation = Eq(uncle_age + (uncle_age - doris_age), 40)\n\n    # Solve the equation\n    solutions = solve(equation, uncle_age)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    return 1348 - 234 - 76 + 2234 - 48 - 24\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_money = symbols('original_money')\n    \n    equation = Eq(original_money - 200 - (2/7)*(original_money - 200), (1/3) * original_money)\n    \n    ans = solve(equation, original_money)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # Considering Tom and Harry as one unit and Ronda fixed at the end, we have 5 units to arrange.\n    units_to_arrange = factorial(5)  # 5 units can be arranged in 5! ways.\n\n    # Tom and Harry can switch places within their unit, so that's 2! ways.\n    tom_harry_arrangements = factorial(2)\n\n    # Total arrangements would be the arrangements of the units multiplied by the arrangements of Tom and Harry.\n    total_arrangements = units_to_arrange * tom_harry_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # Timothy's reasoning is to find a number that, when added to 8, results in 15\n    # The straightforward answer is to subtract 8 from 15\n    correct_answer = 15 - 8\n    # Check if Timothy's answer is correct\n    timothy_answer_is_correct = (correct_answer == 7)\n    \n    # This will return a tuple with two elements.\n    # The first element is a boolean indicating whether Timothy's answer is correct. \n    # The second element is the correct answer.\n    return timothy_answer_is_correct,  correct_answer\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    lowest_possible_price = rounded_price - 99\n    return lowest_possible_price\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    principal = 5000\n    rate_first_three_years = 0.05\n    rate_last_two_years = 0.08\n    \n    # compound the interest for the first three years\n    amount_after_three_years = principal * (1 + rate_first_three_years) ** 3\n    \n    # compound the interest for the next two years\n    final_amount = amount_after_three_years * (1 + rate_last_two_years) ** 2\n    \n    # round the final amount to the nearest tenth\n    ans = round(final_amount, 1)\n    \n    return ans\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_average = 89\n    desired_average = 95\n    total_tests_taken = 4\n    total_current_score = current_average * total_tests_taken\n    tests_needed = 0\n    \n    while True:\n        tests_needed += 1\n        new_average = (total_current_score + 100 * tests_needed) / (total_tests_taken + tests_needed)\n        if new_average >= desired_average:\n            break\n            \n    return tests_needed\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Calculate the time taken for each segment of the race\n    time_for_first_segment = 540 / 9\n    time_for_middle_segment = 300 / 6\n    time_for_final_segment = (1000 - 540 - 300) / 10\n\n    # Total time is the sum of times for all segments\n    total_time = time_for_first_segment + time_for_middle_segment + time_for_final_segment\n    \n    return total_time\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    d, s = symbols('d s')  # d for distance, s for speed\n\n    # First scenario: speed increases by 20%, time decreases by 1 hour\n    eq1 = Eq(d / s, d / (s * 1.2) + 1)\n\n    # Second scenario: first 200 km at usual speed, then speed increases by 25%, time decreases by 12 minutes (0.2 hours)\n    eq2 = Eq(200 / s + (d - 200) / s, 200 / s + (d - 200) / (s * 1.25) + 12/60)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (d, s))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    extra_performances = 2  # Lia and Liz each prepare an extra performance\n\n    total_performances = total_classes + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    age_difference = uncle_future_age - doris_age\n    uncle_current_age = age_difference + doris_age\n    return uncle_current_age\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # meters per second\n\n    total_distance = train_length + bridge_length\n    time_to_cross = total_distance / speed\n\n    return time_to_cross\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    time_diff = (9 * 60 + 25) - (8 * 60 + 30)\n    return time_diff\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define two symbols for the number of sheep and cows originally\n    sheep, cows = symbols('sheep cows')\n    \n    # Set up the initial equation based on the question\n    initial_eq = Eq(sheep, (5/7) * cows)\n    \n    # Set up the final equation after adding and removing animals\n    final_eq = Eq(cows - 7, (3/4) * (sheep + 21))\n    \n    # Solve the system of equations to find the original number of sheep and cows\n    solutions = solve((initial_eq, final_eq), (sheep, cows))\n    \n    return solutions[sheep]\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b be the cost of each book and p be the cost of each pencil box\n    b, p = symbols('b p')\n\n    # Equation representing first scenario: 2 books + 3 pencil boxes = $42\n    equation1 = Eq(2*b + 3*p, 42)\n\n    # Equation representing second scenario: 2 books + 6 pencil boxes = $60\n    equation2 = Eq(2*b + 6*p, 60)\n\n    # Solving the system of equations to find the cost of each pencil box\n    solutions = solve((equation1, equation2), (b, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Geoff's current age + Sister's current age = 22 (Given)\n    current_sum_ages = 22\n    # Final sum of ages we want to achieve = 30\n    final_sum_ages = 30\n    # The difference in the sum of ages we want to achieve and the current sum ages\n    sum_ages_difference = final_sum_ages - current_sum_ages\n    # Since both Geoff and his sister get 1 year older every year, the sum of their ages increases by 2 each year.\n    # Therefore, the number of years needed for the sum of their ages to be 30 is the difference divided by 2.\n    years_needed = sum_ages_difference / 2\n\n    return int(years_needed)\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    a_time = 6\n    b_time = a_time * 2  # B's efficiency is half of A, so B would take twice the time to complete the job alone\n\n    a_rate = 1 / a_time  # A's work rate per day\n    b_rate = 1 / b_time  # B's work rate per day\n\n    combined_rate = a_rate + b_rate  # The combined work rate per day of A and B\n\n    days_to_complete = 1 / combined_rate  # The time it takes to complete the job together\n\n    return days_to_complete\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 50  # in cents\n    mamee_cost = haribo_cost - 30\n    big_jelly_cost = 6 * mamee_cost  # in cents\n\n    return big_jelly_cost / 100  # convert to dollars\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    numerator = 18 * 32\n    denominator = 36\n    ans = numerator // denominator\n    return ans\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies = symbols('candies')\n\n    anna_part = 3/8\n    belle_part = 1/4\n\n    cathy_and_dawn_part = 1 - anna_part - belle_part\n\n    equation = Eq(anna_part * candies + belle_part * candies - cathy_and_dawn_part * candies, 90)\n\n    total_candies = solve(equation, candies)\n\n    return total_candies[0]\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_bricks = 4\n\n    # Joel removes 2 less than half of the remaining plants before him.\n    # Therefore, if x is the number Joel was to remove half, we have x/2 - 2 = remaining_bricks\n    # It follows that x = 2 * (remaining_bricks + 2)\n    before_joel = 2 * (remaining_bricks + 2)\n\n    # Valerie removes 3 less than half of the remaining plants before her.\n    # Similarly, if y is the number Valerie was to remove half, we have y/2 - 3 = before_joel\n    # It follows that y = 2 * (before_joel + 3)\n    before_valerie = 2 * (before_joel + 3)\n\n    # Ethan removes 1 less than half of the initial plants.\n    # If z is the number Ethan was to remove half, we have z/2 - 1 = before_valerie\n    # It follows that z = 2 * (before_valerie + 1)\n    initial_bricks = 2 * (before_valerie + 1)\n\n    return initial_bricks\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the number of fish balls made at first as a symbol\n    initial_fish_balls = symbols('initial_fish_balls')\n    \n    # Create an equation based on the problem statement\n    morning_sold = 3/4 * initial_fish_balls\n    remaining_after_morning = initial_fish_balls - morning_sold\n    afternoon_sold = 1/3 * remaining_after_morning\n    remaining_after_afternoon = remaining_after_morning - afternoon_sold\n    \n    # Mr. Tan had twice the number of fish balls he made at first after making another 506\n    final_fish_balls = 2 * initial_fish_balls\n    \n    # Create the equation representing the final state\n    equation = Eq(remaining_after_afternoon + 506, final_fish_balls)\n    \n    # Solve the equation for the number of fish balls made at first\n    solution = solve(equation, initial_fish_balls)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    books_to_give = (beck_books - chris_books) // 2\n    return books_to_give\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for the type of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # create equations based on the problem description\n    equation1 = Eq(chocolate, vanilla + 72)  # Sally had 72 more chocolate cupcakes than vanilla cupcakes.\n    equation2 = Eq(blueberry, vanilla - 36)  # She had 36 lesser blueberry cupcakes than vanilla cupcakes.\n\n    # Since Sally sold certain fractions of the cupcakes and had 427 left altogether, this gives us our third equation.\n    equation3 = Eq(chocolate - chocolate/6 + vanilla - 2*vanilla/3 + blueberry - 7*blueberry/9, 427)\n\n    # solve for the number of chocolate, vanilla, and blueberry cupcakes\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    chocolate_cupcakes = solutions[chocolate]\n\n    # number of chocolate cupcakes Sally sold\n    chocolate_sold = chocolate_cupcakes / 6\n\n    return int(chocolate_sold)\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8)*92 + 7*0.625 + (62.5/100)\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boy_ratio = 2\n    girl_ratio = 7\n    boys = 14\n\n    total_students = boys / boy_ratio * (boy_ratio + girl_ratio)\n\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_cost = 3\n    marble_cake_cost = strawberry_cake_cost + 2\n    cheese_cake_cost = 3 * marble_cake_cost\n\n    cost_of_2_cheese_cakes = 2 * cheese_cake_cost\n\n    return cost_of_2_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    # The equation is:\n    # circle * 3 + 17 = 6*6 + 2\n    # Let's solve for circle\n    \n    # Assume circle is 'x'\n    # x * 3 + 17 = 6*6 + 2\n    \n    # Simplify the right hand side of the equation\n    rhs = 6*6 + 2  # 36 + 2\n    \n    # We bring 17 to the right hand side\n    rhs -= 17  # (36 + 2) - 17\n    \n    # the equation is now: x * 3 = rhs\n    # We can now solve for x by dividing rhs by 3\n    x = rhs / 3\n    \n    # return the value of x\n    return x\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Creating the system of congruences based on the problem statement\n    congruences = [(1, 3), (3, 5), (5, 7)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    num, mod = solve_congruence(*congruences)\n\n    # Loop through the possible values within the range 400 to 500\n    while num <= 500:\n        if 400 <= num <= 500:\n            return num\n        num += mod\n\n    return None\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    num = 36\n    ans = sum(2 for i in range(1, int(num**0.5)+1) if num % i == 0)\n    return ans\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    total_pigs = 8\n    green_apples = 1 * total_pigs\n    red_apples = total_pigs // 2\n    total_apples = green_apples + red_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    death_ratio = 1 / 4\n    alive_seeds = total_seeds * (1 - death_ratio)\n    return alive_seeds\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    shirt, pants = symbols('shirt pants')\n    \n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n    \n    solutions = solve((equation1, equation2), (shirt, pants))\n    \n    total_price = solutions[shirt] + solutions[pants]\n    \n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n    deposit_amount = 10\n    spend_amount = 8\n    cycle_days = 2  # Deposit and spend cycle every two days\n\n    # Calculate full cycles of deposit and spend\n    full_cycles = total_days // cycle_days \n    remaining_days = total_days % cycle_days\n\n    # Total money after full cycles\n    money_after_full_cycles = initial_amount + (deposit_amount - spend_amount) * full_cycles\n\n    # Add deposit for the remaining day if there is one\n    if remaining_days > 0:\n        money_after_full_cycles += deposit_amount\n\n    return money_after_full_cycles\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_durians = total_durians * (4/6)\n    durians_left = total_durians - sold_durians\n    return int(durians_left)\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    result = 54 * 4 - 178\n    original_number = result / 2\n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n    average_apples = total_apples / num_students\n    return average_apples\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4 * 3 * 2 * 1 # Total ways without any restrictions\n    opposite_ways = 2 * 1 * 2 * 1 # Ways where Claire is sitting opposite to Tony\n    \n    # Subtract the opposite ways from the total ways\n    ans = total_ways - opposite_ways\n    return ans\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for a banana and a pear\n    banana, pear = symbols('banana pear')\n\n    # Now we write the equations according to the problem\n    # Max buys 1 banana and 2 pears for 94p\n    equation1 = Eq(banana + 2 * pear, 94)\n    # Emily buys 1 banana and 1 pear for 62p\n    equation2 = Eq(banana + 1 * pear, 62)\n\n    # We will solve these equations for banana and pear\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    # We're interested in the cost of 1 banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    speed_original = symbols('speed_original')\n    distance = speed_original * 8  # Distance is equal to speed times time\n    speed_faster = speed_original + 5\n    new_time = 7  # She wants to arrive one hour earlier than 8 hours\n    equation = Eq(speed_faster * new_time, distance)\n\n    # solve for the original speed\n    speed_original_solution = solve(equation, speed_original)[0]\n    \n    # calculate the distance\n    distance_solution = speed_original_solution * 8\n\n    return distance_solution\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    all_permutations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_permutations[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of stickers Charlotte had\n    # Marry had 7 units of stickers, Alexis had 5 units of stickers\n    # Since they gave 20% of their stickers, Charlotte receives 0.2 * 7x from Marry and 0.2 * 5x from Alexis\n    # Charlotte's stickers increased by 80%, so the stickers she received equals 0.8x\n    # Marry had 20 stickers more than Charlotte after giving away stickers, which is (1 - 0.2) * 7x + 20 = x + 20\n\n    x, ratio_unit = symbols('x ratio_unit')\n    equation1 = Eq(0.2 * 7 * ratio_unit + 0.2 * 5 * ratio_unit, 0.8 * x)\n    equation2 = Eq((1 - 0.2) * 7 * ratio_unit + 20, x + 20)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, ratio_unit))\n\n    # Alexis had 5 units of stickers at first\n    alexis_stickers = solutions[ratio_unit] * 5\n\n    return alexis_stickers\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    # We can use binary representation to identify the poison bottle\n    # In binary, with N digits we can represent 2^N different values\n    # We need to find the smallest N such that 2^N >= 1000\n    \n    import math\n    \n    num_bottles = 1000\n    \n    # Calculate the minimum number of test tubes using logarithm base 2\n    min_test_tubes = math.ceil(math.log(num_bottles, 2))\n    \n    return min_test_tubes\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    # Since each brother has at least two books, start the count from 2 books for each\n    for x1 in range(2, 11):\n        for x2 in range(2, 11):\n            x3 = 10 - x1 - x2  # The remaining books for the third brother\n            if x3 >= 2:  # Each brother should have at least two books\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the four angles of the quadrilateral\n    angle1, angle2, angle3, angle4 = symbols('angle1 angle2 angle3 angle4')\n\n    # Two of the angles are right angles\n    equation1 = Eq(angle1, 90)\n    equation2 = Eq(angle2, 90)\n\n    # One of the others is five times larger than the fourth angle\n    equation3 = Eq(angle3, 5 * angle4)\n\n    # Sum of angles in a quadrilateral is 360 degrees\n    equation4 = Eq(angle1 + angle2 + angle3 + angle4, 360)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (angle1, angle2, angle3, angle4))\n\n    # The largest angle is angle3\n    return solutions[angle3]\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs = 10\n    total_distance = 36\n    \n    # Initially, there are 9 gaps between chairs\n    initial_gaps = total_chairs - 1\n    initial_distance_per_gap = total_distance / initial_gaps\n\n    # After removing 3 chairs, there will be 7 chairs and thus 6 gaps\n    remaining_chairs = total_chairs - 3\n    remaining_gaps = remaining_chairs - 1\n    new_distance_per_gap = initial_distance_per_gap * (initial_gaps / remaining_gaps)\n\n    return new_distance_per_gap\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    ans = 768 / 3\n    return ans\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = None\n    for small_boxes in range(54 // 5 + 1): # start range from 0 to the max number of small boxes possible\n        for medium_boxes in range(54 // 7 + 1): # start range from 0 to the max number of medium boxes possible\n            for large_boxes in range(54 // 10 + 1): # start range from 0 to the max number of large boxes possible\n                if 5 * small_boxes + 7 * medium_boxes + 10 * large_boxes == 54: # if the current combination equals 54 apples\n                    total_boxes = small_boxes + medium_boxes + large_boxes\n                    if min_boxes is None or total_boxes < min_boxes: # if fewer boxes are used in this combination\n                        min_boxes = total_boxes # update the minimum number of boxes\n    return min_boxes\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            pair = 7007 // i\n            if pair % 7 == 0 and 10 <= pair < 100:\n                factors.append(i)\n                factors.append(pair)\n                break\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    def count_ways(n):\n        if n <= 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return count_ways(n-1) + count_ways(n-2) + count_ways(n-3)\n    \n    # Counting the ways to reach the 4th step.\n    ways_to_step_4 = count_ways(4)\n    \n    # Counting the ways to climb from the 6th to the 10th step,\n    # since Jimmy can't step on the 5th.\n    ways_from_step_6_to_10 = count_ways(10-5)\n    \n    # Total ways avoiding the 5th step will be \n    # the product of the two counts calculated above.\n    total_ways_avoiding_step_5 = ways_to_step_4 * ways_from_step_6_to_10\n    \n    return total_ways_avoiding_step_5\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    median_pos = len(sequence) // 2\n    \n    if len(sequence) % 2 == 1:\n        median = sequence[median_pos]\n    else:\n        median = (sequence[median_pos - 1] + sequence[median_pos]) / 2\n    return median\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6) / 3, 5)\n    solution_dict = solve(equation, x)\n\n    return solution_dict[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6 / 7) * 42\n    return ans\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_rate_single = 25\n\n    # Time required for no waiting line using one entrance\n    time_single = 16\n    total_visitors = visitors_per_minute * time_single\n    \n    # Check-in rate using two entrances\n    check_in_rate_double = 2 * check_in_rate_single\n    \n    # Time required for no waiting line using two entrances\n    time_double = total_visitors / check_in_rate_double\n\n    return time_double\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    total_distance = 16\n    distance_per_day = 5\n    distance_per_night = 3\n    net_distance_per_day = distance_per_day - distance_per_night\n    \n    # The snail reaches 16 metres before the slide down at night of that day\n    # We check how many whole days it takes to get to just under 16 metres\n    days_until_last_day = (total_distance - distance_per_day) // net_distance_per_day\n    \n    # The next day, the snail reaches the top before sliding down\n    total_days = days_until_last_day + 1\n\n    return total_days\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    cookies_given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - cookies_given_away\n    num_bottles = remaining_cookies / cookies_per_bottle\n\n    return int(num_bottles)\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    # Converting 15 minutes to hours\n    time_hours = 15 / 60\n\n    # Speed limit in miles per hour\n    speed_mph = 65\n\n    # Distance in miles\n    distance_miles = time_hours * speed_mph\n\n    # Convert miles to kilometers\n    distance_km = distance_miles * 1.60934\n\n    return distance_km\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_before, dragonflies_before = symbols('frogs_before dragonflies_before')\n\n    equation1 = Eq(frogs_before - dragonflies_before, 9)\n    equation2 = Eq(frogs_before - (11 - dragonflies_before), dragonflies_before)\n\n    solutions = solve((equation1, equation2), (frogs_before, dragonflies_before))\n\n    return solutions[frogs_before]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    greatest_multiple = 999 // 25 * 25\n    return greatest_multiple\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, muffins = symbols('cookies muffins')\n    \n    # The number of cookies she baked was 24 more than the number of muffins.\n    equation1 = Eq(cookies, muffins + 24)\n    \n    # After selling 3/4 of her muffins and 5/8 of her cookies, she had 74 left\n    equation2 = Eq((1 - 3/4) * muffins + (1 - 5/8) * cookies, 74)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cookies, muffins))\n    \n    return solutions[cookies]\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Assuming the cost for met, a cup of coffee, and entry fee per person is given as follows:\n    cost_per_ticket = 5  # Cost for one hockey match ticket\n    cost_for_met = 2 * 4 # Cost for met both ways\n    cost_per_coffee = 2  # Cost for one cup of coffee\n\n    # Total cost per person including Richard himself\n    total_cost_per_person = cost_per_ticket + cost_for_met + cost_per_coffee\n\n    # Total number of people Richard can afford (including himself)\n    number_of_people = 40 // total_cost_per_person\n\n    # Number of friends Richard can treat\n    number_of_friends = number_of_people - 1  # Subtracting Richard\n\n    return number_of_friends\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    # the number is not divisible by 5, so A cannot be 0 or 5\n    # it has to be an even number, so A must be 2, 4, 6, or 8\n    for A in [2, 4, 6, 8]:\n        # construct the number with the current value of A\n        number = int(f\"123{A}456{A}789{A}\")\n        \n        # check if the number is divisible by 9\n        if number % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    # Sum of the series 1+2+3+...+n is given by n(n+1)/2\n    # The sum of the cubes 1^3 + 2^3 + ... + n^3 is given by (n(n+1)/2)^2\n    n = 12  # As we need to find the sum up to 12^3\n\n    # Calculate the sum of the series from 2 to 12\n    sum_series = sum(range(2, n + 1))\n    \n    # Calculate the sum of the cubes using the formula\n    sum_cubes = sum_series**2\n\n    return sum_cubes\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Ratio of speed is driver:cyclist = 13:2\n    # Let the time taken by the driver be 't' minutes.\n    # Since speed = distance/time, the driver covers the distance in t minutes,\n    # the cyclist will cover the same distance in (13/2) * t minutes.\n    # Given that the cyclist takes 143 minutes more than the driver,\n    # we have: (13/2) * t = t + 143\n    # Solving for t:\n    t = symbols('t')\n    equation = Eq((13/2) * t, t + 143)\n    solution = solve(equation, t)\n    return solution[0]  # Return the time for the driver\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = (48 - 47) + (46 - 45) + (44 - 43) + (42 - 41) + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    cost_sausage_rolls = 4 * 24\n    cost_hotdogs = 5 * 81\n    cost_drinks = 7 * 20\n    total_cost = cost_sausage_rolls + cost_hotdogs + cost_drinks\n    return total_cost\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    total_ways = trains + cars + flights\n\n    return total_ways\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the total number of coins\n    x = symbols('x')\n\n    # equation representing the problem\n    equation = Eq(1/4 * x + 2, 1/3 * x)\n\n    # solve for x\n    num_coins = solve(equation, x)\n\n    return num_coins[0]\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    import math\n    ans = math.gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_length = 500\n    total_days = 5\n    meters_per_day = total_length / total_days\n    return meters_per_day\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange 5 singing shows among themselves.\n    sing_arrangements = factorial(5)\n\n    # The comedy shows cannot be performed consecutively.\n    # We can think of the 5 singing shows as creating 6 \"slots\" in which we can place comedy shows.\n    # The slots are before the first show, between the singing shows, and after the last show.\n    # This is similar to arranging 6 spaces (S) and the 3 comedy shows (C) - SSCSSCSSC.\n    # We need to choose 3 slots out of the 6 to place the comedy shows.\n    slots = 6\n    comedies = 3\n    slot_arrangements = factorial(slots) // (factorial(comedies) * factorial(slots - comedies))\n\n    # The total number of ways to arrange the shows is the product\n    # of the singing shows arrangements and the slot arrangements.\n    total_arrangements = sing_arrangements * slot_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    statements = [False] * 5  # Create a list to represent the truth value of statements\n\n    # We should check which statement can be true alone, without making others true as well.\n\n    # If statement 1 is true, then all others would be true, which is a contradiction.\n    statements[0] = False\n\n    # If statement 2 is true, then statement 5 would also be true, again causing a contradiction.\n    statements[1] = False\n\n    # If statement 3 is true, then statement 1 or 2 would also have to be true, causing a contradiction.\n    statements[2] = False\n\n    # If statement 4 is true, then all above statements including itself and statement 1 would be true, contradiction.\n    statements[3] = False\n\n    # If statement 5 is true, then all above statements would have to be false, which makes this statement correct.\n    # This is the only statement that can be true by itself.\n    statements[4] = True\n\n    # Now, finding the index of the true statement. \n    # We add 1 to the index because the statements are numbered starting with 1 not 0.\n    ans = statements.index(True) + 1\n\n    return ans\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    sorted_values = sorted(values)\n    mid_index = len(sorted_values) // 2\n    return sorted_values[mid_index]\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # find cycles in repeating decimals\n    cycle_length = sum(range(1, 10))  # 1+2+3+4+5+6+7+8+9\n    sum_of_cycles = sum(range(1, 10)) * 45  # sum from 1 to 9, 1+2+3+4+5+6+7+8+9 and each digit appears 45 times in a cycle \n\n    # calculate complete cycles and remaining digits\n    complete_cycles, remaining_digits = divmod(2100, cycle_length)\n\n    # sum of complete cycles\n    sum_complete_cycles = complete_cycles * sum_of_cycles\n\n    # sum of remaining digits\n    sum_remaining_digits = 0\n    digit_tracker = 1\n    for i in range(remaining_digits):\n        sum_remaining_digits += digit_tracker\n        if i >= sum(range(1, digit_tracker)):\n            digit_tracker += 1\n\n    # combining both\n    ans = sum_complete_cycles + sum_remaining_digits\n\n    return ans\n\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n    \n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    # Let the original number be x\n    # According to the problem x/2 - 9 = 12\n    # Rearrange the equation: x/2 = 12 + 9\n    # Multiply both sides by 2 to find x: x = (12 + 9) * 2\n    original_number = (12 + 9) * 2\n    return original_number\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n    # Since the table can be rotated and the order is the same, \n    # fix one person and arrange the remaining 5; this is a circular permutation\n    # Number of ways to arrange n people around a circular table is (n-1)!\n    num_ways = factorial(5)\n    return num_ways\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    min_even_number = float('inf')\n    for perm in permutations(digits):\n        if perm[-1] % 2 == 0:  # Check if the last digit is even\n            number = int(''.join(map(str, perm)))\n            min_even_number = min(min_even_number, number)\n    return min_even_number\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n    ans = total_dollars * quarters_in_one_dollar\n    return ans\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    \n    ans = lcm(3, 4, 10)\n    \n    return ans\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "import math\n\ndef solution():\n    students = 17\n    capacity = 4\n    kayaks_needed = math.ceil(students / capacity)\n    return kayaks_needed\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of steps on the escalator\n    # v is the speed of the escalator in steps per second\n    x, v = symbols('x v')\n\n    # Equation when Peter walks 1 step per second for 10 steps\n    equation1 = Eq(x, 10 + 10*v)\n    # Equation when Peter walks 2 steps per second for 16 steps\n    equation2 = Eq(x, 16 + 8*v)\n\n    # Solve the system of equations for x and v\n    solutions = solve((equation1, equation2), (x, v))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_length = 2000\n\n    result = (percentage / 100) * total_length\n\n    return result\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_bar_cost_p = 72\n    balloon_cost_p = 20\n    payment_p = 1000  # 1 pound = 100 pence, hence 10 pounds = 1000 pence\n    change_p = 388  # 3 pounds and 88 pence = 388 pence\n\n    # Calculate the money spent on balloons\n    spent_on_balloons_p = payment_p - chocolate_bar_cost_p - change_p\n\n    # Calculate the number of balloons\n    num_balloons = spent_on_balloons_p / balloon_cost_p\n\n    return num_balloons\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    part1 = (4 + 2) * 13\n    part2 = 4 + (2 * 13)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    a = 4 * (3 ** 0.5)\n    equation = 3 * a == (3 * x) ** 0.5\n    x = (3 * a) ** 2 / 3\n    return x\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for i in range(74, 200):\n        if len(set(str(i))) == len(str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let the age of the youngest dwarf be x years\n    # Then the ages of the youngest three dwarfs in consecutive years will be x, (x+1), and (x+2)\n    # Their total age is given to be 42 years\n    # x + (x+1) + (x+2) = 42\n    # Solving the equation gives us 3x + 3 = 42 => x = (42-3) / 3 => x = 13\n    \n    # Age of the youngest dwarf\n    youngest_dwarf_age = (42 - 3) / 3\n    \n    # Age of the oldest dwarf\n    oldest_dwarf_age = youngest_dwarf_age + 6  # As they are born in 7 consecutive years\n    \n    # Ages of the oldest three dwarfs will be (oldest_dwarf_age-2), (oldest_dwarf_age-1), oldest_dwarf_age\n    # Total age of the oldest three dwarfs\n    total_age_oldest_three = (oldest_dwarf_age - 2) + (oldest_dwarf_age - 1) + oldest_dwarf_age\n    \n    return total_age_oldest_three\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    # Mark's initial amount of money\n    total_money = 243\n\n    # Mark spent 2/9 of his money on cupcakes and pizza\n    spent_money = (2 / 9) * total_money\n    remaining_money = total_money - spent_money\n\n    # The ratio of the cost of 3 slices of pizza to 2 cupcakes\n    cost_ratio = 3 / 2\n\n    # Let the cost of one cupcake be x\n    # So the cost of one slice of pizza is (2/3)*x\n    # Total cost for 5 cupcakes and 6 slices of pizza is 5x + 6*(2/3)*x\n    # Which is equal to spent_money\n    # From the equation 5x + 4x = spent_money, we solve for the cost of one cupcake x\n    x = spent_money / 9\n\n    # The greatest number of cupcakes that Mark could buy with the remaining money\n    max_cupcakes = remaining_money // x\n\n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15  # Calculate common difference from the first two terms.\n\n    # Formula to find number of terms in arithmetic sequence: n = (last - first) / difference + 1\n    num_months = (last_term - first_term) // difference + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    from math import sqrt\n\n    count = 0\n    num = 2\n    for i in range(1, 6):\n        if sqrt(num).is_integer():\n            count += 1\n        num = num * 10 + 5\n\n    return count\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 5]\n    perm = permutations(digits, 3)  # Get all permutations of length 3\n    return len(list(perm))  # Convert the permutations into a list and get the length\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original = 98\n    new = 44.1\n    percent_change = ((new - original) / original) * 100\n    return percent_change\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    # The initial number of pieces of paper\n    initial_pieces = 10\n    \n    # The final number of pieces of paper\n    final_pieces = 16\n    \n    # Calculate the number of cuts needed\n    cuts_needed = final_pieces - initial_pieces\n    \n    # Each cut generates one extra piece, so the number of pieces\n    # cut into three parts is the same as the number of cuts needed.\n    pieces_cut = cuts_needed\n    \n    return pieces_cut\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_trees = 8\n    apples_per_tree = 10\n    rotten_fraction = 1 / 4\n\n    total_apples = total_trees * apples_per_tree\n    rotten_apples = total_apples * rotten_fraction\n    non_rotten_apples = total_apples - rotten_apples\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original = 160\n    new = 168\n    increase = new - original\n    percentage_increase = (increase / original) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = 0.70 * total_pupils\n    swimming_girls = 200\n\n    # Let x be the number of boys in the school, so (380 - x) is the number of girls.\n    # 40% of the boys cannot swim, hence 60% of the boys can swim.\n    # Therefore, the number of swimming boys is 0.60 * x.\n    # The total number of pupils who can swim is the sum of swimming boys and swimming girls.\n    # Hence, 0.60 * x + 200 (swimming girls) = 0.70 * 380 (swimming pupils)\n    # So, x = (swimming_pupils - swimming_girls) / 0.60\n\n    boys = (swimming_pupils - swimming_girls) / 0.60\n    girls = total_pupils - boys\n\n    return int(girls)\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * (6*x + 1) - 2*x, 89)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rice_sack, oatmeal_packet = symbols('rice_sack oatmeal_packet')\n    \n    # total mass equation\n    equation1 = Eq(3 * rice_sack + 3 * oatmeal_packet, 36)\n    # relationship between mass of rice sack and oatmeal packet\n    equation2 = Eq(rice_sack, 2 * oatmeal_packet)\n    \n    # solve equations\n    solutions = solve((equation1, equation2), (rice_sack, oatmeal_packet))\n    \n    return solutions[rice_sack]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the amount of 10% sugar water\n    x = symbols('x')\n    \n    # Equation for the total amount of sugar coming from both solutions\n    equation = Eq(0.30 * 4 + 0.10 * x, 0.26 * (4 + x))\n    \n    # Solve the equation\n    amount_10_percent = solve(equation, x)\n    \n    return amount_10_percent[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    discount_percentage = (total_discount / original_price) * 100\n    return discount_percentage\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    ans = 0\n    n = 200\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            ans += 1\n    return ans - 1  # Subtract 1 to exclude the number itself as a sum of one part\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    parts_per_worker_per_minute = (120 / 6) / 4\n    total_parts = parts_per_worker_per_minute * 3 * 10\n    return int(total_parts)\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let m be the mass of the empty jar and c be the mass of one chocolate.\n    # We can write down two equations based on the given information:\n    # m + 5c = 185 (1)\n    # m + 17c = 317 (2)\n    \n    # We want to find out the mass when the jar has 10 chocolates:\n    # m + 10c (3)\n\n    # You can solve equations (1) and (2) to find the values of m and c.\n    # First, subtract equation (1) from equation (2) to find c.\n    # (m + 17c) - (m + 5c) = 317 - 185\n    # 12c = 132\n    c = 132 / 12\n    \n    # Now, substitute the value of c back into equation (1) to find m.\n    # m + 5c = 185\n    m = 185 - 5 * c\n    \n    # Finally, use m and c to find the mass of the jar with 10 chocolates using equation (3).\n    # m + 10c\n    mass_with_10_chocolates = m + 10 * c\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def new_operation(a, b):\n        return a * b - a - b + 1\n    \n    ans = new_operation(new_operation(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import factorint\n\n    # Get the prime factors of 2240 and their exponents in factorint format: {prime: exponent}\n    prime_factors = factorint(2240)\n    \n    # For 2240/n to be a square, all primes in the factorization of 2240 must have an even power\n    # We will look for the largest n such that 2240/n is a square. This is done by taking the primes\n    # with an odd exponent in 2240 and multiplying them.\n    n = 1\n    for prime, exponent in prime_factors.items():\n        if exponent % 2 != 0:\n            n *= prime\n\n    return n\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    dorothy = 96\n    timmy = dorothy // 8\n    kevin = timmy + 45\n    return kevin\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    perimeter = (144 + 204) * 2\n    wheat_count = 116\n    # Since there's one wheat at each corner, we subtract 4 from the wheat count\n    spacing = perimeter / (wheat_count - 4)\n    return spacing\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    time_per_cat_per_fish = 10  # Each cat takes 10 minutes to catch a fish\n    # Since the 5 cats can work simultaneously, the total time does not change\n    total_time_to_catch_five_fish = time_per_cat_per_fish\n    return total_time_to_catch_five_fish\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_time = symbols('total_time')\n\n    # Robert spent half the time working\n    # so half the time is left\n    # After spending half the remaining time reading and relaxing,\n    # and spending 4 days at a friend's house, he had 2 weeks left.\n    # Equation:\n    # total_time / 2 / 2 - 4 = 2 weeks\n    # Weeks to days: 2 weeks = 14 days\n    equation = Eq(total_time / 2 / 2 - 4, 14)\n\n    # Solve for total_time\n    solutions = solve(equation, total_time)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of sweets Lana had originally as 'l'\n    # and the number of sweets Mark had originally as 'm'.\n    l, m = symbols('l m')\n    \n    # From the problem, we have two equations\n    # Lana had 1/3 remain after giving away (which means she had 2/3 left)\n    # Mark had m - 34 sweets left after eating\n    # And together they originally had 674 sweets\n    equation1 = Eq(l + m, 674)\n    equation2 = Eq((2/3) * l, m - 34)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (l, m))\n    \n    # Calculate how many more sweets Lana had than Mark\n    lana_more = solutions[l] - solutions[m]\n    \n    return lana_more\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = 2 / 7 * total_bracelets\n    remainder = total_bracelets - morning_bracelets\n    afternoon_bracelets = 3 / 5 * remainder\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    bracelets_left = total_bracelets - bracelets_made\n    \n    return int(bracelets_left)\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    # Let x be the number we are looking for\n    # According to the problem, after performing operations on x, we get 81\n\n    # x + 3 -> adding 3\n    # (x + 3) / 4 -> divided by 4\n    # ((x + 3) / 4) * 9 -> then multiplied by 9\n    # The result is 81\n\n    # Now we can work backwards from 81 to find x\n    result = 81\n    result = result / 9  # Divide by 9\n    result = result * 4  # Multiply by 4\n    result = result - 3  # Subtract 3\n\n    return result\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # Total perimeter of the field\n    perimeter = 2 * (144 + 204)  # in meters\n\n    # Since there is a wheat at every corner, we need to account for those first before dividing the remaining.\n    # There are 4 corners, so we subtract 4 from the total number of wheat to distribute along the perimeter.\n    wheat_to_distribute = 116 - 4\n\n    # The distance between each wheat is the total perimeter divided by the number of intervals,\n    # which is one less than the number of wheat to distribute (since intervals are between wheats).\n    distance_between_wheat = perimeter / wheat_to_distribute\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, watermelon = symbols('pineapple watermelon')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon - pineapple, 5.6)\n\n    solutions = solve((equation1, equation2), (pineapple, watermelon))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations('123456789', 4):\n        a, c, e, f = perm\n        abcdef = int(f\"2{a}0{c}{e}{f}\")\n        efabcd = int(f\"{e}{f}2{a}0{c}\")\n\n        if 5 * abcdef == 6 * efabcd:\n            face = int(f\"{f}{a}{c}{e}\")\n            return face\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    # Total people to interview\n    total_people = 200\n    # Ellie can interview 40 people per week\n    ellie_rate = 40\n    # Combined, they can finish in 4 weeks\n    combined_weeks = 4\n    # Total number of interviews done by both in 4 weeks\n    combined_work_done = combined_weeks * (ellie_rate + 0) # Placeholder 0 for Gloria's rate\n    # This should be equal to the total people\n    gloria_rate = symbols('gloria_rate')\n    equation = Eq(combined_weeks * (ellie_rate + gloria_rate), total_people)\n    # Solve for Gloria's rate\n    gloria_rate = solve(equation, gloria_rate)[0]\n    # Now find out how long Gloria takes to finish all interviews by herself\n    gloria_weeks = total_people / gloria_rate\n    \n    return gloria_weeks\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    return (3/8) * 48\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    leak_rate_per_minute = 15\n    minutes_in_hour = 60\n    total_minutes = 2 * minutes_in_hour\n    total_leak_ml = leak_rate_per_minute * total_minutes\n    liters_per_ml = 1 / 1000\n    total_leak_liters = total_leak_ml * liters_per_ml\n    return total_leak_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    length_of_road = 150\n    distance_per_tree = 10\n\n    # Including trees at both ends.\n    num_trees = (length_of_road // distance_per_tree) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    total_rice = 15 * 0.40 + 60 * x  # Let x be the percentage of rice in dogfood B\n    percent_rice_mixture = 0.28\n    \n    # Set up the equation and solve for x: total_rice = total_weight * percent_rice_mixture\n    x = (total_weight * percent_rice_mixture - 15 * 0.40) / 60\n    \n    return x * 100  # Convert the decimal to a percentage\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    # Let the numbers be a, b, c and d where a > b > c > d\n    # d + (a + b + c) / 3 = 39\n    # a + (b + c + d) / 3 = 51\n    # => 3d + a + b + c = 117\n    # => a + b + c + 3d = 153\n    # Subtracting the first equation from the second one, we get:\n    # a - d = 153 - 117\n    # => a - d = 36\n    # Now, since a > b > c > d, the largest possible value for the largest number a\n    # would be when the difference between a and d is maximized.\n    # Therefore, we set d to the smallest possible value, which is 1,\n    # (since we are dealing with distinct positive whole numbers) and calculate a.\n    d = 1\n    a = 36 + d\n    \n    return a\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns: price of one book and one pen\n    book, pen = symbols('book pen')\n\n    # Set up the equations according to the given information\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pens, 9)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (book, pen))\n\n    # Get the price of one pen\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    ten_dollar_notes = 2\n    five_dollar_notes = 5\n    twenty_cent_coins = 4\n    \n    total_received = (ten_dollar_notes * 10) + (five_dollar_notes * 5) + (twenty_cent_coins * 0.20)\n    amount_spent = 100 - total_received\n    \n    return amount_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, B * 4/3)\n    equation2 = Eq(A, C + 20)\n    equation3 = Eq(A + B + C, 200)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_to_fry_one_plate = 3\n    total_time = 18\n    number_of_plates = total_time // time_to_fry_one_plate\n    return number_of_plates\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Barbara's speed is 60 metres per minute\n    # Catherine's speed is 45 metres per minute\n\n    # Let the distance to the shopping mall be 'd' metres\n    # When Barbara reaches the shopping mall, she has travelled 'd' metres\n    # By the time Barbara reaches the mall, Catherine still has 60 metres to go,\n    # which means Catherine has travelled 'd - 60' metres.\n\n    # Since they start at the same time and Barbara's speed to Catherine's speed is 60:45 or 4:3,\n    # the distances they traveled should also be in the ratio 4:3.\n\n    # Barbara's distance / Catherine's distance should be equal to Barbara's speed / Catherine's speed:\n    # d / (d - 60) = 60 / 45\n    # Simplifying: 3d / (d - 60) = 4\n    # Cross-multiply to solve for 'd': 3d = 4(d - 60)\n\n    # Solve the equation 3d = 4(d - 60)\n    # 3d = 4d - 240\n    # Bring 4d to the left side: 3d - 4d = -240\n    # -d = -240\n    # d = 240\n\n    # Therefore, the shopping mall is 240 metres away from their starting point.\n    ans = 240\n    return ans\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nini, dad = symbols('nini dad')\n\n    equation1 = Eq(dad, nini + 25)\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n\n    solutions = solve((equation1, equation2), (nini, dad))\n\n    return solutions[nini]\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    numerator = 471471471471\n    denominator = 157157157157\n    ans = numerator // denominator\n    return ans\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    x, y = symbols('x y')\n    \n    # Define the equation\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n    \n    # Solve the equation for x\n    solutions = solve(equation, x)\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if i % 4 != 0 and i % 6 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    sold_first_day = total_pears * 2 / 5\n    remaining_after_first_day = total_pears - sold_first_day\n    sold_second_day = remaining_after_first_day * 7 / 9\n\n    return int(sold_second_day)\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n    \n    ways_to_pick = boys * girls\n    \n    return ways_to_pick\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    return 462 + 268\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n    \n    count = 0\n    for i in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if isprime(i):\n            reversed_i = int(str(i)[::-1])  # Reverse the digits\n            if isprime(reversed_i) and reversed_i != i:  # Check if reversed number is prime and different\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    # If at least one student gets at least 3 apples, we can subtract those 3 apples\n    apples_left = 29 - 3\n    \n    # Now we distribute at least one apple to each remaining student\n    # Since every student must get at least one apple, the number of students\n    # will be the number of apples left after giving 3 apples to one student\n    class_size = apples_left\n\n    return class_size\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for green and blue balls\n    green, blue = symbols('green blue')\n\n    # Create the equation based on the given problem\n    # After removing 2/5 of the blue balls and 28 green balls, the remaining numbers are equal\n    equation1 = Eq(blue - (2/5) * blue, green - 28)\n\n    # The total number of green and blue balls at first is 140\n    equation2 = Eq(blue + green, 140)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (green, blue))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Since the alcoholic goes to three fixed bars at random,\n    # and he is not in two of them, then he must be in the third one.\n    # The probability of the alcoholic being at any bar is 1/3.\n    # However, since we already know he is not at two of the bars, \n    # the probability that he is in the third bar is certain, i.e., 1 or 100%.\n    \n    probability = 1\n    \n    return probability\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n\n    equation1 = Eq(eliot, 2 * cousin)  # Eliot is now twice his cousin's age\n    equation2 = Eq(eliot + 4, 16)      # Eliot will be 16 in 4 years\n\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    # We need the cousin's age in 4 years\n    cousin_future_age = solutions[cousin] + 4\n\n    return cousin_future_age\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    first_number = 387\n    second_number = 729\n    ans = (first_number + second_number) / 2\n    return ans\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    elaine_future_age = 12\n    age_difference = elaine_future_age - elaine_current_age\n    mandy_future_age = mandy_current_age + age_difference\n    return mandy_future_age\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    # Convert the mixed numbers to improper fractions\n    num1 = (1 * 99 + 3) / 99\n    num2 = (3 * 33 + 3) / 33\n    num3 = (9 * 11 + 3) / 11\n    \n    den1 = (1 * 99 + 1) / 99\n    den2 = (3 * 33 + 1) / 33\n    den3 = (9 * 11 + 1) / 11\n    \n    # Sum the fractions in the numerator and denominator\n    numerator = num1 + num2 + num3\n    denominator = den1 + den2 + den3\n    \n    # Calculate the final result by dividing the sums\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Let x be the distance Nancy walked when they meet\n    # Randy walks x+10 meters when they meet\n    # Their walking ratio is 2:3\n    # So for every 2 meters Nancy walks, Randy walks 3 meters\n    # We set up the equation 2/3 = x / (x+10)\n\n    # To clear the denominator, multiply both sides by 3(x+10)\n    # We get 2(x+10) = 3x\n    # Expanding and simplifying this equation gives us 2x + 20 = 3x\n    # Bringing the x terms to one side, we have x = 20\n\n    # Now we calculate the total distance by adding the distance Nancy and Randy walked\n    # Since Nancy walked x and Randy walked x + 10, the total distance is x + (x + 10)\n    total_distance = 20 + (20 + 10)\n\n    return total_distance\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # The repeating decimal can be represented as 0.2014 + 0.00001414...\n    # Where 0.2014 is the non-repeating part and 0.00001414... is the repeating part\n    # To solve the repeating part, let's call it \"y\"\n    # y = 0.00001414...\n    # Multiply y by 10000 to shift the repeating part to the left of the decimal\n    # 10000y = 1414.1414...\n    # Subtract y from 10000y\n    # 10000y - y = 1414\n    # 9999y = 1414\n    # y = 1414 / 9999\n    \n    y = 1414 / 9999\n\n    # add the non-repeating part to the repeating part\n    # x / 9900 = 0.2014 + y\n    decimal_value = 0.2014 + y\n    \n    # Multiply by 9900 to find x\n    x = decimal_value * 9900\n\n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n\n    equation1 = Eq(ali, (bronson + charlie)/2 - 5)\n    equation2 = Eq(bronson, 2 * ali)\n\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for digit1 in range(1, 10):  # hundreds place cannot be 0\n        for digit2 in range(0, 10):\n            for digit3 in range(0, 10, 2):  # ones place must be even\n                if digit1 != digit2 and digit1 != digit3 and digit2 != digit3:\n                    if digit1 + digit2 + digit3 == 8:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    # This problem can be solved using the capture-recapture method\n    # We assume that the proportion of marked fish in the second catch\n    # represents the same proportion of marked to unmarked fish in the pond\n    # Let x be the total number of fish in the pond\n    \n    # Number of marked fish in the first catch\n    marked_first_catch = 100\n    \n    # Number of fish caught in the second catch\n    caught_second_catch = 100\n    \n    # Number of marked fish caught in the second catch\n    marked_second_catch = 16\n    \n    # Proportion of marked fish in the second catch\n    proportion_marked = marked_second_catch / caught_second_catch\n    \n    # Estimate the total number of fish in the pond using proportion\n    # marked_first_catch / x = proportion_marked\n    # x = marked_first_catch / proportion_marked\n    estimated_total_fish = marked_first_catch / proportion_marked\n    \n    return int(estimated_total_fish)\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for i in range(10000, 100000):  # Loop through possible five-digit numbers\n        original = i * 10 + 2  # Create the original six-digit number\n        new_number = int('2' + str(i))  # Create the new number by adding '2' at the beginning\n        if original == new_number * 3:  # Check if the new number is one-third of the original\n            return original  # Return the original number\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_cereal_bars = 43\n    people = 4\n\n    remainder = total_cereal_bars % people\n\n    return remainder\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_but_failed_first = 3\n\n    passed_both_exams = (passed_first_exam + failed_second_exam - total_students) + passed_second_but_failed_first\n    only_passed_first = passed_first_exam - passed_both_exams\n\n    return only_passed_first\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    large_sack, small_sack = symbols('large_sack small_sack')\n    \n    equation1 = Eq(large_sack, small_sack + 0.20 * small_sack)\n    equation2 = Eq(large_sack + small_sack, 77)\n    \n    solutions = solve((equation1, equation2), (large_sack, small_sack))\n    \n    return solutions[large_sack]\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # There are 6 permutations for 3 distinct digits to form a 3-digit number\n    # Each digit will appear in the units, tens, and hundreds place exactly 2 times.\n    \n    # Multiply each digit by its place value (1 for units, 10 for tens, 100 for hundreds)\n    # and sum up the permutations for each digit.\n    sum_per_digit_place = (a + b + c) * (1 + 10 + 100)\n    \n    # Since each digit appears in each place twice, multiply by 2\n    total_sum = sum_per_digit_place * 2\n    \n    return total_sum\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "ç½ç»æéï¼è¯·éè¯"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5/9, 2)\n    return ans\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            product = ab * ba\n            if product % 100 == 0 and ('0' not in str(ab)[:2]):\n                return ab\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    ans = 0\n    for i in range(1, 59):\n        ans += len(str(i))\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome number would be 10001\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome number would be 999999\n    greatest_6_digit_palindrome = 999999\n    \n    # Calculating the difference between the greatest 6-digit and the least 5-digit palindrome numbers\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    min_cabins = (students + cabin_capacity - 1) // cabin_capacity\n    return min_cabins\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of oranges (o) and apples (a) Mrs Lee had at first\n    o, a = symbols('o a')\n\n    # Equation representing the total number of fruits\n    equation1 = Eq(o + a, 125)\n\n    # Equation representing the condition after selling the fruits\n    # She sold half of the apples (a/2) and 35 oranges\n    # Afterwards, she had an equal number of oranges and apples remaining\n    equation2 = Eq(o - 35, a / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (o, a))\n\n    # We want the number of oranges originally, which is 'o'\n    return solutions[o]\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    # initialize the total length of digits from the right\n    total_length = 0\n    \n    # loop through the numbers backwards as we count from the right\n    for i in range(1200, 0, -1):\n        # find the length of current number\n        length_of_number = len(str(i))\n        # update the total length of digits\n        total_length += length_of_number\n        \n        # check if the total_length reached or passed 2011\n        if total_length >= 2011:\n            # calculate the excess digits after the 2011th digit\n            excess_digits = total_length - 2011\n            # find the digit by indexing\n            digit = str(i)[length_of_number - 1 - excess_digits]\n            return int(digit)\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    return 14 + 6  # Adding the number of books to the right of the picture book to its position from the left\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    coins = symbols('coins')\n\n    # Let's denote the current number of heads as heads\n    # So we have the equation: heads = coins / 4\n    # After flipping two more coins, we have the number of heads as: heads + 2\n    # The new equation becomes: heads + 2 = coins / 3\n\n    # Replace heads in the second equation with coins / 4 from the first equation\n    # coins / 4 + 2 = coins / 3\n    equation = Eq(coins / 4 + 2, coins / 3)\n\n    # Solve the equation for the number of coins\n    solution = solve(equation, coins)\n\n    # Since the number of coins must be an integer, we select the positive integer solution\n    return solution[0]\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # km per minute\n    speed_planet2 = 40  # km per minute\n\n    combined_speed = speed_planet1 + speed_planet2  # km per minute\n\n    time_before_collision = 5  # minutes\n\n    distance_apart = combined_speed * time_before_collision\n\n    return distance_apart\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    # Highest multiple of 5 less than or equal to 50\n    last_multiple = 50 // 5 * 5\n    # Number of multiples\n    num_multiples = last_multiple // 5\n    # Sum of an arithmetic sequence formula: n/2 * (first_term + last_term)\n    sum_multiples = num_multiples / 2 * (5 + last_multiple)\n    return int(sum_multiples)\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # let's denote:\n    # c = number of cars, m = number of motorbikes\n    # Each car has 4 tyres and each motorbike has 2 tyres\n    #\n    # We have the following system of equations:\n    # c + m = 140 (total number of vehicles)\n    # 4c + 2m = 490 (total number of tyres)\n    \n    # From the first equation, we can express m as m = 140 - c\n    # Substituting m in the second equation, we get:\n    # 4c + 2(140 - c) = 490\n    # Simplify and solve for c:\n    c = (490 - 2 * 140) / 2\n    \n    return int(c)\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.20\n    original_price = paid_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    digit_options = 6  # 0, 1, 2, 3, 4, 5\n    # First digit cannot be 0, so it has 5 options (1, 2, 3, 4, 5)\n    # Second digit can be any of the 6 options, including 0.\n    return (digit_options - 1) * digit_options\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 8\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    return 125 * (76 + 12)\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = -1\n    daily_progress = day_distance + night_distance\n    current_distance = 0\n    day_count = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, solve\n\n    a = symbols('a')\n    x = symbols('x')\n\n    # Setting up the equations based on the given conditions\n    eq1 = (190 - a) % x\n    eq2 = (137 - (a + 4)) % x\n    eq3 = (101 - (a + 6)) % x\n\n    # Since all these should be 0 because they are divisible\n    solutions = solve((eq1, eq2, eq3), (a, x))\n    \n    # Multiple solutions can exist, filter out the one that meets the given conditions\n    for solution in solutions:\n        if solution[a] >= 0 and solution[x] > solution[a]:  # a should be non-negative and x should be greater than a\n            valid_solution = solution\n            break\n    \n    # Calculate the remainder when 299 is divided by the valid number 'x'\n    remainder = 299 % valid_solution[x]\n    return remainder\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number_to_round = 8.765\n    ans = round(number_to_round, 1)\n    return ans\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    added_number = 12\n\n    original_number = (result - added_number) / 2\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    for i in range(1, 2*13):\n        if i % 2 == 1 and i % 13 == 1:\n            return i\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * 25 / 100 + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    number_of_classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n\n    total_donation = number_of_classes * students_per_class * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    money_spent = 2  # in pence\n    fraction_of_total = 1 / 4\n    total_money = money_spent / fraction_of_total\n    \n    return total_money\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    from sympy import isprime\n\n    max_sum = 0\n    for x in range(2, 200):\n        if isprime(x):\n            y = (200 - x) / (x - 1)\n            if y.is_integer() and y != x and isprime(int(y)):\n                sum_xy = x + int(y)\n                if sum_xy > max_sum:\n                    max_sum = sum_xy\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    count_2 = 2\n    count_3 = 2\n    total_permutations = factorial(total_digits)\n    permutations_of_2 = factorial(count_2)\n    permutations_of_3 = factorial(count_3)\n\n    ans = total_permutations // (permutations_of_2 * permutations_of_3)\n    return ans\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    teams = 8\n    total_matches = teams * (teams - 1) // 2\n    return total_matches\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    return (7/9) * 27\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "from fractions import Fraction\n\ndef solution():\n    num1 = 5 + Fraction(1, 6)\n    num2 = 6 + Fraction(1, 5)\n    den1 = Fraction(1, 6)\n    den2 = Fraction(1, 5)\n    \n    result = (num1 + num2) / (den1 + den2)\n\n    return result\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    meters_per_day = 1000 / 5\n    days_for_2600m = 2600 / meters_per_day\n    return days_for_2600m\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for each dwarf's height\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n    \n    # Given conditions\n    eq1 = Eq(doc, happy + 10)           # Doc is 10 cm taller than Happy\n    eq2 = Eq(happy, dopey + 10)         # Happy is 10 cm taller than Dopey\n    eq3 = Eq(sleepy, 80)                # Sleepy is 80 cm tall\n    eq4 = Eq(doc + sleepy, dopey + sneezy) # Doc and Sleepy have the same combined height as Dopey and Sneezy\n    \n    # Dopey, Sneezy, Bashful and Grumpy are all the same height\n    eq5 = Eq(dopey, sneezy)             \n    eq6 = Eq(dopey, bashful)\n    eq7 = Eq(dopey, grumpy)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6, eq7), (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n    \n    # Sum the heights of all dwarfs to find the total height\n    total_height = sum(solutions.values())\n    \n    return total_height\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    # Create list of three-digit numbers using each of the digits 3, 5, and 9 once only.\n    digits = '359'\n    three_digit_numbers = [''.join(p) for p in permutations(digits)]\n\n    # Convert string representation of numbers to integers and sort them.\n    three_digit_numbers = sorted(map(int, three_digit_numbers))\n\n    # Get the number in the fifth position after sorting.\n    return three_digit_numbers[4]\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance = 250\n    time = 5\n    speed = distance / time\n    \n    travel_time = 3\n    travel_distance = speed * travel_time\n    \n    return travel_distance\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for number in range(10, 60):\n        if number % 8 == 3 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    # Number of gaps between trees is one less than the number of trees\n    num_gaps = 30 - 1\n    distance_between_trees = 5  # distance in meters between each tree\n\n    # Total length of the road is the number of gaps times the distance between each\n    road_length = num_gaps * distance_between_trees\n\n    return road_length\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the numbers on Qiang, Rory, and Sophia's hats as q, r, and s, respectively.\n    q, r, s = symbols('q r s')\n    \n    # From the problem statement, we have the following equations:\n    # q + r = 22 (since Sophia sees 22)\n    # q + s = 17 (since Rory sees 17)\n    # r + s = 11 (since Qiang sees 11)\n    \n    equation1 = Eq(q + r, 22)\n    equation2 = Eq(q + s, 17)\n    equation3 = Eq(r + s, 11)\n    \n    # We solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (q, r, s))\n    \n    # Finally, we are interested in the largest number on a hat.\n    max_number = max(solutions[q], solutions[r], solutions[s])\n    \n    return max_number\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    result = 1.5 * 1.3333333333333333 * 1.25 * 1.2 * 1.1666666666666667 * 1.1428571428571428 * 1.125 * 1.1111111111111112\n    return result\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # The sum of an arithmetic sequence can be determined to be odd or even\n    # by considering the number of terms and the parity of the first and last term.\n\n    first_term = 12\n    last_term = 90\n    difference = 1\n\n    # Calculate the number of terms in the sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # The sum is odd if there is an odd number of odd terms, or\n    # an odd number of terms and both the first and last terms are odd.\n\n    # Check if the first and last term are both odd\n    first_term_odd = first_term % 2 != 0\n    last_term_odd = last_term % 2 != 0\n\n    # Check if the number of terms is odd\n    num_terms_odd = num_terms % 2 != 0\n\n    # Determine if the sum is odd or even\n    if first_term_odd and last_term_odd and num_terms_odd:\n        return \"Odd\"\n    else:\n        if num_terms_odd:\n            # If the number of terms is odd, the sum will alternate between odd and even\n            # The first term is even in this case, so we need to check if there is an odd\n            # number of even terms. If num_terms is odd, there will be an even number of\n            # even terms, making the sum even.\n            return \"Even\"\n        else:\n            # If the number of terms is even, the sum is always even\n            return \"Even\"\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for num in range(2, 21):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_capacity = 25\n    \n    buses_needed = total_people / max_capacity\n    return int(buses_needed) if buses_needed.is_integer() else int(buses_needed) + 1\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    pages = 345\n\n    # Calculate the total number of digits\n    # 1-9 (9 pages with 1 digit), 10-99 (90 pages with 2 digits), 100-345 (246 pages with 3 digits)\n    total_digits = 9 * 1 + 90 * 2 + (pages - 99) * 3\n\n    return total_digits\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_prize = symbols('total_prize')\n    equation = Eq((total_prize / 5) + (total_prize / 15), 360)\n    total_prize_solution = solve(equation, total_prize)\n\n    return total_prize_solution[0]\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Distance covered in the first 30 minutes is (x miles/hour * 0.5 hour)\n    distance_first_30 = x * 0.5\n\n    # Distance covered in the second 30 minutes is ((x-20) miles/hour * 0.5 hour)\n    distance_second_30 = (x - 20) * 0.5\n\n    # Distance covered in the last 30 minutes is ((x+10) miles/hour * 0.5 hour)\n    distance_last_30 = (x + 10) * 0.5\n\n    # Total distance is the sum of distances covered in all three intervals\n    total_distance = distance_first_30 + distance_second_30 + distance_last_30\n\n    # Create the equation representing the total distance\n    equation = Eq(total_distance, 70)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "from math import factorial\n\ndef solution():\n    # The coach has fixed position in the middle\n    # 1 position for the coach with only one option of placement\n    coach_positions = 1\n    \n    # The captain has 2 options to stand next to the coach\n    captain_options = 2\n\n    # Remaining players excluding coach and captain can be arranged in 5! ways\n    remaining_players_permutations = factorial(5)\n\n    # Applying the multiplication principle\n    total_ways = coach_positions * captain_options * remaining_players_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    # Let the number of penguins be x\n    # Let the total fish be f\n    \n    # Equation when giving 3 fish to each penguin:\n    # f = 3*x + 25\n    \n    # Equation when giving 6 fish to each penguin with one penguin getting 1 fish:\n    # f = 6*(x - 1) + 1\n    \n    # Set the two expressions for f equal to each other and solve for x\n    x = symbols('x')\n    equation = Eq(3*x + 25, 6*(x - 1) + 1)\n    solutions = solve(equation, x)\n    \n    # The number of penguins is the solution for x\n    return solutions[0]\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    students_difference = 20\n    total_students = 0\n\n    # Start with 1 boy as the smallest possible square\n    # then increase side length by 2 to keep adding layers\n    side_length = 1\n    \n    while True:\n        boys = side_length ** 2\n        girls = (side_length - 2) ** 2 if side_length > 1 else 0\n        difference = boys - girls\n        \n        if difference == students_difference:\n            total_students = boys + girls\n            break\n        else:\n            side_length += 2  # Increase side length to add another layer\n        \n    return total_students\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_terms = 0\n    term_value = 1\n    \n    for i in range(1, 31):\n        sum_terms += term_value\n        if i == term_value*(term_value+1)//2:\n            term_value += 1\n    \n    return sum_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = (25 / 100 * 20) + (1 / 5 * 30) + (2 / 3 * 18)\n    return ans\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    # Write the equations\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    # Total money\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n\n    # The maximum votes that can be obtained by other candidates (total - Cindy's votes)\n    max_other_votes = total_votes - cindy_votes\n\n    # The maximum number of votes someone else can still received is when both Alice and Betty receive the same number of votes.\n    max_votes_other = (max_other_votes - 1) // 2\n\n    # Cindy needs at least one more than whoever has the maximum of Alice's and Betty's votes after division\n    cindy_needs = max_votes_other + 1\n\n    # However, Cindy needs to exceed the current highest vote count, so we compare to the current highest vote count, which is Betty.\n    more_votes_needed = max(betty_votes + 1 - cindy_votes, cindy_needs)\n    \n    return more_votes_needed\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Calculate the first part of the expression\n    first_numerator = 7 / (-3.33333333333333333)  # 3.333... is 10/3 when turned into a fraction\n    first_denominator = (-0.027) ** (1/3)\n    first_part = first_numerator / first_denominator\n    \n    # Calculate the second part of the expression\n    second_numerator = 2**3 / 4**2\n    second_denominator = 0.125 * (1.8 - (0.2 * 7))\n    second_part = second_numerator / second_denominator\n\n    # Calculate the third part of the expression\n    repeating_fraction = 0.142857  # Since the digits 142857 are repeating\n    third_fraction = 0.1 / repeating_fraction\n    third_part = third_fraction + (2 * 0.3)\n\n    # Subtract the third part from the sum of first two parts to obtain the final result\n    ans = (first_part + second_part) - third_part\n    return ans\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Given that Gina was 50 years old on 10th May 2005\n    gina_age_on_2005 = 50\n    \n    # Given that James was 20 years old on 10th May 1997\n    james_age_on_1997 = 20\n    \n    # We need to find Gina's age when James was born, which is (1997 - 20) years = 1977\n    # Therefore, we need to find how old Gina was in 1977\n    # Calculate the difference in years between 2005 and 1977 to determine Gina's age in 1977\n    year_difference = 2005 - 1977\n    \n    # Subtract the year difference from Gina's age in 2005 to find her age in 1977\n    gina_age_when_james_born = gina_age_on_2005 - year_difference\n    \n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total sales\n    x = symbols('x')\n\n    # Define the piecewise commission function\n    commission = 0.02 * x if x <= 25000 else 0.02 * 25000 + 0.05 * (x - 25000)\n    \n    # Equation for the total salary\n    total_salary = Eq(2500 + commission, 3300)\n\n    # Solve for x\n    sales = solve(total_salary, x)\n\n    return sales[0]\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    total_digits = 1014\n    pages = 0\n    digits = 0\n    \n    while digits < total_digits:\n        pages += 1\n        digits += len(str(pages))\n\n    return pages\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's call r and a the number of marbles Ryan and Audrey had initially.\n    r, a = symbols('r a')\n\n    # According to the problem, we have two equations.\n    # The first equation comes from the initial ratio of marbles.\n    equation1 = Eq(r / a, 2 / 7)\n\n    # The second equation comes from the changed ratio after transactions.\n    equation2 = Eq((r + 20) / (a - 80), 1 / 3)\n\n    # Solving the two equations will give us the value of a, the number of marbles Audrey had initially.\n    solutions = solve((equation1, equation2), (r, a))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_of_six = 6 * 150\n    total_height_of_four = 4 * (150 - 2)\n    \n    total_height_of_two = total_height_of_six - total_height_of_four\n    average_height_of_two = total_height_of_two / 2\n    \n    return average_height_of_two\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    fruits = 3\n    vegetables = 4\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    prob_pass_first_try = 0.4\n    prob_fail_first_try = 1 - prob_pass_first_try\n    prob_pass_second_try = 0.5\n    prob_fail_second_try = 1 - prob_pass_second_try\n    prob_pass_third_try = 0.3\n    \n    prob_pass_before_fourth = prob_pass_first_try + (prob_fail_first_try * prob_pass_second_try) + (prob_fail_first_try * prob_fail_second_try * prob_pass_third_try)\n    \n    return prob_pass_before_fourth\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_ways = ways_A_to_B * ways_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    n = 30\n\n    last_term = first_term + (n - 1) * common_difference\n    sum_of_sequence = (n * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    product = 1\n    for i in range(1, 16):\n        product *= i\n\n    count = 0\n    while product % 10 == 0:\n        count += 1\n        product //= 10\n\n    return count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    equation = Eq(age/4 + 32, age - 22)\n\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_distance = 18\n    day_climb = 7\n    sixth_day_climb = 3\n    days_passed = 5\n\n    distance_climbed_except_sixth_day = days_passed * day_climb\n    remaining_distance_after_sixth_day = total_distance - distance_climbed_except_sixth_day - sixth_day_climb\n    # On the 6th night, the snail will climb out without sliding back\n    slide_down_at_night = day_climb - remaining_distance_after_sixth_day\n\n    return slide_down_at_night\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    # Initialize variables to keep track of the difference between boys and girls and the total students.\n    diff_boys_girls = 44\n    total_students = 0\n    layer = 0\n\n    # loop until the difference between boys and girls meets the required condition\n    while True:\n        boys = (layer * 2 + 1)**2 # number of boys is the square of the odd layer number\n        girls = layer**2 * 4 if layer > 0 else 0 # number of girls is four times the square of even layer number\n\n        # Check if the difference in the current configuration is equal to the required difference\n        if boys - girls == diff_boys_girls:\n            total_students = boys + girls\n            break\n        layer += 1\n        \n    return total_students\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_length, original_width = symbols('original_length original_width')\n    new_length = original_length + 12\n\n    # Equation for the perimeter of the new rectangle\n    eq_perimeter = Eq(2 * new_length + 2 * original_width, 38)\n\n    # Solve for original width using the equation of the new perimeter\n    solved = solve(eq_perimeter, original_width)\n    original_width_value = solved[0]\n\n    # Calculate the original perimeter\n    original_perimeter = 2 * original_length + 2 * original_width_value\n\n    return original_perimeter.subs(original_length, new_length - 12)\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum((2*i - 1)**2 for i in range(1, 46)) - sum(2*i**2 for i in range(1, 45))\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    num = 2**19 - 1\n    remainder = num % 5\n    return remainder\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    # Let the number of apples the second student gets be x\n    # As student gets a positive integer number of apples, \n    # and they need to be different,\n    # therefore the first student must receive less than x apples, \n    # the third and fourth students must receive more than x apples.\n    # Considering the condition that all of them together have 48 apples,\n    # we can start with the maximum number x can be, \n    # and subtract the minimal number of apples the other three students would get.\n    \n    # In such a case, the first student would get 1 apple least,\n    # and the third and fourth students would get at least x+1 and x+2 apples respectively.\n    # So the equation would be: 1 + x + (x+1) + (x+2) = 48\n    # To find the largest possible x, we'll solve for x:\n    \n    for x in range(48, 0, -1):  # We iterate backwards since we're finding the maximum\n        if 1 + x + (x+1) + (x+2) == 48:\n            break\n\n    return x\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Since the boat can only take 2 people at a time, and one person must come back \n    # after each crossing to ensure the boat is taken back for use,\n    # we devise the quickest strategy for the group to cross.\n\n    # Fastest (Eddie, 1 min) goes with the three others one by one and returns with the boat\n    # First, Eddie (1 min) and Jack (2 min) go, Eddie returns, 2 + 1 = 3 minutes\n    # Second, Eddie (1 min) and Rose (5 min) go, Eddie returns, 5 + 1 = 6 minutes\n    # Total time so far = 3 + 6 = 9 minutes\n\n    # Now, Jack goes back to get Mary, because Eddie returning would be faster\n    # Jack (2 min) and Mary (10 min) go, Jack returns, 10 + 2 = 12 minutes\n    # Total time so far = 9 + 12 = 21 minutes\n\n    # Finally, Jack (2 min) crosses with Eddie (1 min) who has come back for him.\n    # This takes additional 2 minutes\n    # Total time so far = 21 + 2 = 23 minutes\n\n    # This is the strategy that minimizes the time for all to cross the bridge.\n    return 23\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    import math\n    num_students = 4\n    ans = math.factorial(num_students)\n    return ans\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    ans = (8 - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    return 50 / (5 / 3)\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    # Almaz's remaining salary after buying the television\n    remaining_salary_after_tv = 1 - 5/9\n    \n    # Almaz's remaining salary after buying the table\n    remaining_salary_after_table = remaining_salary_after_tv * (1 - 3/4)\n    \n    # She had $160 left, which is the remaining salary after buying the table\n    final_remaining_salary = remaining_salary_after_table\n    \n    # Calculate Almaz's original salary\n    original_salary = 160 / final_remaining_salary\n    \n    # Calculate the cost of the television\n    cost_of_tv = original_salary * (5/9)\n\n    return cost_of_tv\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    # There are 7 people but the table can be rotated so we fix one person\n    # and then arrange the other 6 people around the table.\n    ans = factorial(6)  # Fix one seat and permute the rest\n    return ans\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # On the first day, Jenny eats chocolate, which leaves peaches and strawberries for the second day.\n    # On the second day, she can either eat peaches or strawberries.\n    # If she eats peaches on the second day, she can only eat strawberries on the third day.\n    # If she eats strawberries on the second day, she can only eat peaches on the third day.\n    # Each choice on the second day leads to only one choice for the third day.\n    # So there are 2 different ways of eating for Jenny over the three days.\n\n    return 2\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    num_points = 15\n    num_vertices = 3\n    ans = comb(num_points, num_vertices)\n    return ans\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for John and Emma's current age\n    john_age, emma_age = symbols('john_age emma_age')\n    \n    # Equation representing sum of their ages in 3 years\n    sum_age_equation = Eq(john_age + 3 + emma_age + 3, 27)\n    \n    # Equation representing Emma's age as the difference between her and John's age\n    emma_age_equation = Eq(emma_age, john_age - emma_age)\n    \n    # Solve the system of equations\n    solutions = solve((sum_age_equation, emma_age_equation), (john_age, emma_age))\n    \n    return solutions[emma_age]\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n    \n    total_sheets = sheets_per_quire * quires_per_ream * reams\n    \n    return total_sheets\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_earning_per_day = 70\n    number_of_working_days = 6  # From Monday to Saturday\n\n    total_earnings = average_earning_per_day * number_of_working_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x - 4, 26)\n    solution = solve(equation)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Define the speed of Tom and Jack\n    speed_tom = 48\n    speed_jack = 50\n\n    # Jack starts 3 hours after Tom\n    start_difference = 3\n\n    # 5 hours after Jack starts, the cars are 15 km apart\n    time_after_jack_starts = 5\n\n    # Calculate the distance Tom travels in the (3 + 5) hours before meeting Jack\n    distance_tom = speed_tom * (start_difference + time_after_jack_starts)\n\n    # Calculate the distance Jack travels in the 5 hours before meeting Tom\n    distance_jack = speed_jack * time_after_jack_starts\n\n    # The total distance between A and B is the sum of the distances traveled by both, minus the final 15 km gap\n    total_distance = distance_tom + distance_jack + 15\n\n    return total_distance\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_fraction = 3/5\n    present_pupils = 18\n\n    total_pupils = present_pupils / present_fraction\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    children = symbols('children')\n    \n    # Each child has 2 legs, each dog has 4 legs, and there are 3 times as many dogs as there are children.\n    legs_equation = Eq(children*2 + 3*children*4, 56)\n\n    solution = solve(legs_equation, children)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    z = (4 * 7 + 5 * 7) // 7\n    return z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    result = 5.2 + 6.7 + 4.8  # Add the numbers\n    return result\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_people = symbols('total_people')\n    \n    # Given that 25% chose tea\n    tea = 0.25 * total_people\n    # Given that 7 people chose coffee, this is a fixed number\n    coffee = 7\n    # Given that 30% chose cola\n    cola = 0.30 * total_people\n    # Given that the 'Water' section is 36 degrees on a pie chart, which is 10% of the total circle (360 degrees)\n    water_percentage = 36 / 360\n    water = water_percentage * total_people\n    \n    # The sum of people who chose tea, coffee, cola and water should be equal to the total number of people\n    equation = Eq(tea + coffee + cola + water, total_people)\n    \n    # Solve for the total number of people\n    solution = solve(equation, total_people)\n    return solution[0]\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_in_meters = 1.36\n    height_in_cm = height_in_meters * 100\n    return height_in_cm\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday_cookies, sunday_cookies = symbols('saturday_cookies sunday_cookies')\n    equation1 = Eq(saturday_cookies, 4 * sunday_cookies - 5)\n    equation2 = Eq(saturday_cookies, sunday_cookies + 43)\n\n    solutions = solve((equation1, equation2), (saturday_cookies, sunday_cookies))\n\n    return solutions[saturday_cookies]\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_income = 500\n    income_tax_rate = 0.03\n    income_tax = initial_income * income_tax_rate\n    final_income = initial_income - income_tax\n    return final_income\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    spacing = 2\n\n    # Calculate number of trees on the length side (subtracting the corner tree shared with the width side)\n    trees_on_length = (length // spacing) * 2 - 2\n    # Calculate number of trees on the width side (both sides of the width are the same, no need to subtract corner trees as they are already accounted)\n    trees_on_width = (width // spacing) * 2\n\n    # Total trees needed\n    total_trees = trees_on_length + trees_on_width\n\n    return total_trees\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n\n    sweets_each = total_sweets // people\n\n    return sweets_each\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_charge = 110\n    adult_price = 20\n    children_price = 15\n    children_count = 0\n    \n    # Starting with two adults because there were at least two adults.\n    for adults_count in range(2, total_charge // adult_price + 1):\n        total_adults_price = adults_count * adult_price\n        if (total_charge - total_adults_price) % children_price == 0:\n            children_count = (total_charge - total_adults_price) // children_price\n            break\n            \n    return children_count\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    # Calculating the missing value in the box\n    result_from_multiplication = 0.6 * 100\n    ans = 180 / result_from_multiplication\n\n    return ans\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 10**4):\n            original_number = j * 10 + 9\n            new_number = int(str(9) + str(j))\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    squash_ratio = 1\n    water_ratio = 9\n    total_ratio = squash_ratio + water_ratio\n\n    squash_volume = 750  # in millilitres\n    total_volume = (squash_volume / squash_ratio) * total_ratio\n\n    bottle_volume = 1000  # 1 litre = 1000 millilitres\n\n    num_bottles = total_volume // bottle_volume\n\n    return int(num_bottles)\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    modulus = 7\n    \n    remainder = pow(base, exponent, modulus)\n    \n    return remainder\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    result = 6**2015 + (2015 * 6) + 2015**6\n    last_2_digits = result % 100  # Modulo 100 gives the last two digits\n    return last_2_digits\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789', 4):  # Create permutations of 4 distinct digits\n        A, C, E, F = perm\n        ABCDEF = int(f\"{A}2{C}0{E}{F}\")\n        EFABCD = int(f\"{E}{F}A2{C}0\")\n        # Multiply and check for the condition\n        if 5 * ABCDEF == 6 * EFABCD:\n            FACE = int(f\"{F}{A}{C}{E}\")\n            return FACE\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    total_cost = 132\n    # Let x be the total money Li Yan had initially.\n    # She spent 1/3 on a book: (1/3) * x\n    # The remainder is 2/3 of x: (2/3) * x\n    # She then spends 1/2 of the remainder on a bag: (1/2) * (2/3) * x = (1/3) * x\n    # Cost of book and bag together: (1/3) * x + (1/3) * x = 132\n    # This implies that (2/3) * x = 132\n    # Solving for x gives us the initial amount of money Li Yan had.\n    initial_money = (3/2) * total_cost\n\n    return initial_money\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount = 0.10\n    discounted_price = original_price * (1 - discount)\n    return discounted_price\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_position = 6\n    amy_position = 8\n\n    total_children = jolene_position + amy_position - 1\n\n    return total_children\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    from fractions import Fraction\n\n    # The fraction of the cookies that were sold in the first month\n    first_month_fraction_sold = 1680\n\n    # The fraction of the cookies sold in the second month is 7/20 more than the first month\n    second_month_fraction_sold = Fraction(7, 20)\n\n    # The change in the fraction of cookies kept is 3/20 less\n    fraction_decrease_kept = Fraction(3, 20)\n\n    # Calculate the fraction sold in the second month\n    second_month_fraction_total = second_month_fraction_sold + Fraction(first_month_fraction_sold)\n\n    # Calculate the initial total number of cookies\n    total_cookies = first_month_fraction_sold / (1 - second_month_fraction_total + fraction_decrease_kept)\n\n    return total_cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # As we know the number has 8 factors, which means there are 3 for which we don't know the values (the number itself is the 8th factor).\n    # The smallest number that has 1, 2, 4, 7, and 8 as factors is the least common multiple (LCM) of these numbers.\n    # We also know that the factors of a number are in pairs that multiply to the number itself.\n    # The LCM of 1, 2, 4, 7, and 8 should be multiplied by another number to give the required number.\n\n    from math import gcd\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n    \n    # Since 7 is a prime number and it is not a factor of 8 or of 1, 2, and 4, the required number must be a multiple of 7 times the LCM of 1, 2, 4, and 8.\n    lcm_1248 = lcm(lcm(lcm(1, 2), 4), 8)\n    candidate = lcm_1248 * 7\n\n    # Calculate the number of factors of the candidate. If it has 8 factors, then it is our number.\n    def count_factors(n):\n        count = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                count += 2 # i and n / i\n                if i == n // i: # Correct for a perfect square\n                    count -= 1\n        return count\n    \n    # Check if the candidate is the correct answer by verifying it has 8 factors.\n    if count_factors(candidate) == 8:\n        return candidate\n    # Otherwise, we cannot determine the number with the given information.\n    else:\n        return None\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote c as the number of cows and g as the number of goats originally in the farm.\n    c, g = symbols('c g')\n    \n    # According to the problem, 65% of animals are cows and the rest are goats initially.\n    equation1 = Eq(c, 0.65 * (c + g))\n    \n    # When 240 animals are added, number of cows increased by 20% which means cows are 85% now.\n    # Also the number of goats doubled.\n    equation2 = Eq(0.85 * (c + g + 240), c + 240)\n    equation3 = Eq(2 * g, g + 240)\n    \n    # We need to solve the three equations.\n    solutions = solve((equation1, equation2, equation3), (c, g))\n    \n    return solutions[g]\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps = 0\n    current_height = 0\n    \n    while current_height < height:\n        # The monkey jumps up and increases its height.\n        jumps += 1\n        current_height += jump_up\n        \n        # If it reaches the top, it no longer slides down.\n        if current_height >= height:\n            break\n        \n        # After every 2 jumps, it slides down.\n        if jumps % 2 == 0:\n            current_height -= slide_down\n\n    return jumps\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 5 == 1) and (number % 6 == 2) and (number % 11 == 9):\n            break\n        number += 1\n    return number\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    ans = 253 * 160\n    return ans\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_price_pence = 46\n    pounds_to_pence = 300\n    number_of_stamps = pounds_to_pence // stamp_price_pence\n\n    return number_of_stamps\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    total_adventurers = 39\n    boat_capacity = 7\n    trip_duration = 2 # in minutes\n\n    # A trip across the river involves sending adventurers and bringing the boat back\n    # The last trip does not require returning the boat, hence we subtract one return trip from the total trips\n    trips_required = (total_adventurers // boat_capacity) + (1 if total_adventurers % boat_capacity > 0 else 0)\n    total_time = (2 * (trips_required - 1) + 1) * trip_duration # subtracting one because the last trip doesn't require a return\n\n    return total_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time Ryan would drive at his usual speed\n    t = symbols('t')\n    usual_speed = 45\n    reduced_speed = 30\n    # Time with reduced speed is t + 2\n\n    # The distance covered is the same, hence usual_speed * t = reduced_speed * (t + 2)\n    equation = Eq(usual_speed * t, reduced_speed * (t + 2))\n\n    # solve for t\n    time_at_usual_speed = solve(equation, t)[0]\n\n    return time_at_usual_speed\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(100) // factorial(98)\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"976{digit}3\")\n        if number % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    partitions = [0] * (5 + 1)\n    partitions[0] = 1   # base case: there's one way to partition 0\n\n    for num in range(1, 5 + 1):\n        for i in range(num, 5 + 1):\n            partitions[i] += partitions[i - num]\n\n    return partitions[5] - 1  # subtract 1 because the number itself is not considered a split\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Sum of the first sequence from 3 to 10\n    sum_forward = sum(range(3, 11))\n\n    # Sum of the second sequence from 6 down to 3\n    sum_backward = sum(range(3, 7))\n\n    # Add both sums while subtracting the repeated 6\n    ans = sum_forward + sum_backward - 6\n    \n    return ans\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for i in range(3, 1997):\n        a, b = b, a + b\n        a, b = a % 3, b % 3\n    return b\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219 ** 2) / (14 / 3 + 38 / 59)\n    denominator = 2.501 ** 3\n    result = numerator / denominator\n    ans = round(result, 3)\n    return ans\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of sweets Mr. Lim has, and y be the number of students.\n    x, y = symbols('x y')\n    equation1 = Eq(x - 6*y, -26)  # 6 sweets per student, short of 26\n    equation2 = Eq(x - 5*y, -5)   # 5 sweets per student, short of 5\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    return solutions[x]\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n\n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # If there exist 8 numbers a1, a2, ..., a8, such that each consecutive \n    # pair has a difference of 1, then we can write them as:\n    # a1, a1+1, a1+2, a1+3, a1+4, a1+5, a1+6, a1+7\n    \n    # The sum of these numbers will be:\n    # sum = 8*a1 + (1+2+3+4+5+6+7)\n    # sum = 8*a1 + 28\n    \n    # We want to find if there exists an integer a1 such that\n    # 8*a1 + 28 = 225\n    # 8*a1 = 225 - 28\n    # 8*a1 = 197\n    \n    # Since 197 is not divisible by 8, there is no integer value for a1\n    # that satisfies this equation. Hence, it's not possible to get a sum of 225.\n    \n    # As an additional note, since the question involves odd and even numbers,\n    # 225 is an odd number, and the sum of an even number (8) of consecutive integers\n    # (whether starting with an odd or even number) is always even.\n    # As 225 is odd, it cannot be expressed as the sum of 8 such consecutive numbers.\n    \n    is_possible = False\n    explanation = \"The sum of an even number of consecutive integers is always even.\"\n    return is_possible, explanation\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for their ages\n    leo, son = symbols('leo son')\n\n    # Set up the equations based on the problem statement\n    # \"When I was your age\" -> leo - son\n    # \"You were 4 years old.\" -> leo - son = son - 4\n    equation1 = Eq(leo - son, son - 4)\n\n    # \"When you reach my age\" -> son + (leo - son)\n    # \"I will be 70 years old.\" -> leo + (leo - son) = 70\n    equation2 = Eq(leo + (leo - son), 70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo, son))\n\n    return solutions[leo]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # Total performances\n    total_singing = 4\n    total_dancing = 3\n    \n    # Since we need at least one singing between two dancing performances,\n    # we can place the dancing performances in the \"gaps\" created by singing performances\n    # There are total_singing + 1 gaps (beginning, between each performance, and the end)\n    possible_gaps = total_singing + 1\n    \n    # We choose 3 gaps from the possible gaps to place the dancing performances\n    gaps_chosen = factorial(possible_gaps) // (factorial(total_dancing) * factorial(possible_gaps - total_dancing))\n    \n    # The singing performances can be arranged in any order.\n    singing_arrangements = factorial(total_singing)\n    \n    # Multiply the two together for the final answer\n    ans = gaps_chosen * singing_arrangements\n    \n    return ans\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    # The perimeter of the pentagonal garden\n    perimeter = 5 * 432\n    # Since there is a sunflower on each corner, we need to subtract 5 to account for those.\n    perimeter_without_corners = perimeter - 5\n    # Calculate the number of sunflowers that can be planted apart from the corners.\n    sunflowers_along_sides = perimeter_without_corners // 4\n    # Adding the corner sunflowers back.\n    total_sunflowers = sunflowers_along_sides + 5\n    return total_sunflowers\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    # Let x be the number of years later that Dad's age will be 4 times Heidi's age.\n    # Dad's current age is 50 and Heidi's current age is 8.\n    \n    # Dad's age in x years will be 50 + x.\n    # Heidi's age in x years will be 8 + x.\n    \n    # According to the problem, Dad's age in x years is 4 times Heidi's age in x years.\n    # So we have the equation: 50 + x = 4 * (8 + x)\n    \n    # We can solve for x as follows:\n    x = symbols('x') # Create a symbol for x\n    equation = Eq(50 + x, 4 * (8 + x)) # Setup the equation\n    solution = solve(equation, x) # Solve the equation for x\n    \n    return solution[0] # solution is a list, we're interested in the first (and only) value\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    factor_5 = 0\n    factor_2 = 0\n\n    for i in range(1, 61):\n        while i % 5 == 0:\n            factor_5 += 1\n            i //= 5\n        while i % 2 == 0:\n            factor_2 += 1\n            i //= 2\n\n    ans = min(factor_5, factor_2)\n    return ans\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    return (11 * 14 + 26) / 15\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Average of three numbers is 120\n    average_initial = 120\n    sum_initial = 3 * average_initial   # Sum of three numbers\n\n    # When the fourth number is added\n    average_final = 150\n    sum_final = 4 * average_final       # Sum of four numbers\n\n    # The fourth number is the difference between the final sum and initial sum\n    fourth_number = sum_final - sum_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    result = (3/13) * 52\n    return result\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n\n    discounted_amount = (original_price * discount_percentage) / 100\n    final_price = original_price - discounted_amount\n\n    return final_price\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    # A square number is an integer that is the square of an integer.\n    # Since 216r must be a square number, we need to factorize 216 to see\n    # what prime numbers r needs to have to make the product a square number.\n    \n    from sympy import factorint\n\n    # Factorize 216 to find its prime factors\n    factors_216 = factorint(216)\n\n    # In order for 216r to be square, each prime factor's exponent must be even\n    # Currently for 216 = 2^3 * 3^3, both exponents are odd\n    # To make them even, r should at least contain 2^1 * 3^1\n    r = 2 * 3\n\n    return r\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "ç½ç»æéï¼è¯·éè¯"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = 1  # Start with the smallest possible non-zero divisor\n\n    # The smallest possible dividend = smallest_divisor * quotient + remainder\n    smallest_dividend = smallest_divisor * quotient + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    return 285 // 3\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # Since some teachers know both French and Japanese, let's find out the number of teachers\n    # who know both using the Inclusion-Exclusion Principle\n    both_languages_teachers = french_teachers + japanese_teachers - total_teachers\n    \n    # Now, let's find the number of teachers who only know French\n    only_french_teachers = french_teachers - both_languages_teachers\n    \n    return only_french_teachers\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    total_permutations = factorial(6)  # Total ways to arrange 6 people\n    permutations_with_teddy_leftmost = factorial(5)  # Ways to arrange remaining 5 friends when Teddy is leftmost\n\n    # Subtract the invalid arrangement from the total\n    valid_permutations = total_permutations - permutations_with_teddy_leftmost\n    return valid_permutations\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    n = 1  # We start with the first term\n\n    while first_term >= 0:\n        first_term += common_difference\n        if first_term >= 0:\n            n += 1\n\n    return n\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the cost of one bag of sweets and y be the cost of one can of drink\n    x, y = symbols('x y')\n    \n    # Equation for Rachel's purchase\n    equation1 = Eq(3*x + 5*y, 4.90)\n    \n    # Equation for Rosie's purchase\n    equation2 = Eq(x + 3*y, 2.70)\n    \n    # Solve for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # We want the cost of a bag of sweets, which is x\n    return solutions[x]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    value_in_pence = 963\n    fraction = 4 / 9\n\n    result = value_in_pence * fraction\n\n    return result\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        if (i // 10 + i % 10) % 7 == 0:  # If the sum of digits is a multiple of 7\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    def diff_squares(a, b):\n        return (a + b) * (a - b)\n\n    ans = sum(diff_squares(1000 - i * 20, 990 - i * 20) for i in range(5))\n\n    return ans\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # Given that the sum of seven consecutive numbers is 280,\n    # we can represent the middle number as n, thus:\n    # (n-3) + (n-2) + (n-1) + n + (n+1) + (n+2) + (n+3) = 280\n    # Which simplifies to:\n    # 7n = 280\n    # We can then find n, the middle number:\n    n = 280 // 7\n    \n    # Since we want the largest number, which is (n+3) based on our representation:\n    largest_number = n + 3\n    return largest_number\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    ans = sum((-1)**((i+1)%2) * (20 - i) for i in range(0, 18, 2))\n    return ans\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    for a in range(100, 1000):\n        for b in range(a+1, 1000):  # b must be greater than a to be distinct\n            if a % 75 == 0 and b % 75 == 0:  \n                # Check if both A and B have 75 as their highest common factor\n                a_digits = set(str(a))\n                b_digits = set(str(b))\n                if len(a_digits) <= 2 and len(b_digits) <= 2 and a_digits != b_digits:\n                    # Check if both A and B have two equal digits\n                    sum_ab = a + b\n                    if sum_ab > max_sum:\n                        max_sum = sum_ab\n    return max_sum\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    bigger_number = solutions[x]\n\n    return bigger_number\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # This sequence can be expressed as the sum of n^3, starting from n=2 to n=9\n    ans = sum(n**3 for n in range(2, 10))\n    return ans\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial as f\n\ndef solution():\n    # Calculate combinations of placing 4 separators (magazines) between 5 storybooks\n    # With 5 storybooks, there are 6 positions (including ends) for magazines\n    # We need to choose 4 out of these 6 positions\n    positions = f(6) // (f(4) * f(6-4))\n    \n    # Calculate permutations of magazines and storybooks\n    # There are 5 magazines and 5 storybooks, which can be arranged in their own group\n    mag_perm = f(5)\n    storybook_perm = f(5)\n    \n    # Total arrangements = positions to insert magazines * permutations of magazines * permutations of storybooks\n    total_arrangements = positions * mag_perm * storybook_perm\n    return total_arrangements\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n\n    equation1 = Eq(alex + brayden, 756)\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    skip_next = False\n\n    for throw in throws:\n        if skip_next:\n            position -= throw\n            skip_next = False\n        elif throw == 6:\n            skip_next = True\n        else:\n            position += throw\n\n    return position\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate_money = 13\n    james_money = 28\n    \n    total_money = kate_money + james_money\n    # After James gives money to Kate, they have the same amount, which is half of the total\n    each_gets = total_money / 2\n\n    # The amount James gives to Kate is the difference between what he has and what each gets after sharing\n    james_gives = james_money - each_gets\n\n    return james_gives\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    # Let's denote the total number of fruit gums as x.\n    # According to the problem:\n    # After eating 2 in the Music lesson, (x - 2) fruit gums are left.\n    # One third of the remaining is shared with friends: (x - 2) / 3.\n    # The rest of the fruit gums are eaten equally in the next 4 lessons:\n    # ((x - 2) - (x - 2) / 3) / 4 should be an integer since an equal amount is eaten in each lesson.\n    # Thus, ((x - 2) * 2 / 3) / 4 should be an integer.\n    # The smallest integer x that satisfies this condition is what we are looking for.\n    \n    x = 3  # Starting with the smallest possible number of gums where sharing 1/3 and dividing by 4 is possible.\n    while True:\n        if ((x - 2) * 2 / 3) % 4 == 0:\n            return x\n        x += 1  # Increment x to check the next possible number of gums.\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum_original = 10 * 10\n    total_sum_remaining = 9 * 9\n    removed_number = total_sum_original - total_sum_remaining\n    return removed_number\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6\n    time_seconds = 300\n    \n    # Convert speed from km/h to m/s (1 km/h = 0.277778 m/s)\n    speed_ms = speed_kmh * (1000 / 3600)\n    \n    # Calculate distance in meters\n    distance_meters = speed_ms * time_seconds\n    \n    return distance_meters\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    # For a number to be divisible by 99, it must be divisible by both 9 and 11.\n     \n    # Since A and B are digits in a 6-digit number 42A28B, the sum of the digits should be divisible by 9\n    # For divisibility by 11, the difference between the sum of digits at odd positions and\n    # the sum of digits at even positions should be either 0 or a multiple of 11.\n    \n    # 4 + A + 2 + B should be divisible by 9\n    # (Sum of odd positioned digits) - (Sum of even positioned digits) = (4 + 2 + B) - (2 + A + 8)\n    # 6 + B - (A + 10)\n    # B - A - 4 should be divisible by 11\n\n    # A + B + 8 should be divisible by 9\n    for A in range(10): # Since A and B are digits, their range is 0-9\n        for B in range(10):\n            if (4 + A + 2 + B + 8) % 9 == 0:\n                if (6 + B - (A + 10)) % 11 == 0:\n                    return 10 * A + B  # Convert A and B to a 2-digit number AB\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = symbols('total_money') # Setting the total money as an unknown variable\n    each_brother_share_with_sister = total_money / 4 # If they share equally, each gets 1/4 of the total money\n    each_brother_share_without_sister = total_money / 3 # If only the brothers share, each gets 1/3 of the total money\n    \n    # Setting up the equation which described in the problem\n    equation = Eq(each_brother_share_without_sister, each_brother_share_with_sister + 20)\n    \n    # Solve the equation to find out the total money\n    solution = solve(equation, total_money)\n\n    return solution[0] # Return the numerical value of the original sum of money\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # Calculate the sum of the sequence 1 + 3 + 5 + ... + 21 using the formula for the sum of an arithmetic series:\n    # sum = n/2 * (first_term + last_term), where n = number of terms\n    first_term = 1\n    last_term = 21\n    difference = 2\n    n = ((last_term - first_term) // difference) + 1\n    sum_of_series = (n * (first_term + last_term)) // 2\n    \n    # Use the given formula: 1Â³ + 2Â³ + 3Â³ + ... + nÂ³ = (1 + 2 + 3 + ... + n)Â²\n    # Here the sum of series is (1 + 3 + 5 + ... + 21)\n    ans = sum_of_series ** 2\n    return ans\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    averages = [36, 38, 39, 45, 49]\n    total_sum = sum(averages) * 4\n\n    smallest_sum = min(averages) * 4\n    largest_number = total_sum - smallest_sum\n\n    return largest_number\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, blue_initial = symbols('red green blue_initial')\n    \n    # Since Lauren gave away 112 blue beads\n    blue_left = blue_initial - 112\n\n    # Given relations\n    eq1 = Eq(red, 2 * green) # red is twice green\n    eq2 = Eq(blue_left, red - 50) # blue is 50 less than red\n    eq3 = Eq(red + green + blue_left, 350) # Total beads left\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (red, green, blue_initial))\n\n    # blue_initial is the original number of blue beads Lauren had\n    return solutions[blue_initial]\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    # The equation is (1/3) * art_books = (4/5) * science_books\n    # Given:\n    art_books = 360\n    # Find science_books:\n    # (1/3) * 360 = (4/5) * science_books\n    # science_books = (1/3) * 360 / (4/5)\n    science_books = (1/3) * art_books / (4/5)\n\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    # Let the number of stickers Katelyn has be 2x\n    # Let the number of stickers Jared has be 5x\n    # According to the problem, Jared has 60 more stickers than Katelyn\n    # So we can set up the following equation: 5x - 2x = 60\n\n    # Solving for x\n    x = 60 / (5 - 2)\n\n    # Now we can find the total number of stickers by adding Katelyn's and Jared's stickers\n    # Total stickers = 2x + 5x = 7x\n    total_stickers = 7 * x\n\n    return int(total_stickers)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total_estimate = sum(rounded_numbers)\n    return total_estimate\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    textbooks_chinese = 42\n    textbooks_math = 63\n    textbooks_nature = 28\n\n    # Calculate the greatest common divisor (GCD) of the three numbers\n    gcd_pair = gcd(textbooks_chinese, textbooks_math)\n    greatest_common_divisor = gcd(gcd_pair, textbooks_nature)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    first_interest_rate = 0.05\n    second_interest_rate = 0.10\n    first_duration = 3\n    second_duration = 2\n\n    first_growth = (1 + first_interest_rate)**first_duration\n    second_growth = (1 + second_interest_rate)**second_duration\n\n    final_amount = initial_investment * first_growth * second_growth\n\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # Every person should receive 16/24 of a sausage.\n    # Since 16 and 24 have a common divisor of 8, simplify the fraction 16/24 to 2/3.\n    # Each sausage can be cut into 3 equal parts, with 2 parts going to each person.\n    # To share 16 sausages equally among 24 people with each person getting 2/3 of a sausage,\n    # you need to make 2 cuts on each sausage to create 3 parts.\n    # So with 16 sausages, the total cuts needed would be 16 * 2 = 32.\n    \n    cuts_per_sausage = 2\n    total_sausages = 16\n    total_cuts = cuts_per_sausage * total_sausages\n    \n    return total_cuts\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the work Star can do in one hour,\n    # and y be the work Nini can do in one hour.\n    star, nini = symbols('star nini')\n    \n    # Star and Nini together finish the job in the following conditions:\n    equation1 = Eq(5 * star + 20 * nini, 1)  # 5 hours of Star's work and 20 hours of Nini's work complete the job\n    equation2 = Eq(20 * star + 8 * nini, 1)  # 20 hours of Star's work and 8 hours of Nini's work complete the job\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (star, nini))\n    \n    # The time it takes for Nini to finish the job alone is the reciprocal of her hourly work rate\n    nini_time_alone = 1 / solutions[nini]\n    \n    return nini_time_alone\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    rate_per_company = 900 / (4 * 5)  # rate at which one company builds the expressway in meters per day\n    total_length = 2700  # total length of the expressway to be built\n    days_needed = total_length / rate_per_company  # days required for one company to build the expressway\n\n    return days_needed\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Qiqi's speed in m/min\n    qiqi_speed = 60\n    # Weiling's speed in m/min\n    weiling_speed = 72\n    # Weiling starts 2 minutes later\n    weiling_delay = 2\n    # Weiling arrives 4 minutes before Qiqi\n    time_difference = 4\n\n    # Let d be the distance from the library to the school in meters.\n    # Weiling's time to reach the school is (d / weiling_speed) minutes.\n    # Qiqi's time to reach the school is (d / qiqi_speed) minutes.\n    # According to the problem, the time difference is (weiling_delay + time_difference) minutes.\n    # Form the equation:\n    # d / qiqi_speed - (d / weiling_speed) = weiling_delay + time_difference\n\n    # Solve the equation for distance (d)\n    d = (weiling_delay + time_difference) / (1 / qiqi_speed - 1 / weiling_speed)\n    \n    return d\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import timedelta, datetime\n\n    # St Petersburg is GMT+3 and Manchester is GMT+0 \n    time_difference = timedelta(hours=3)\n    \n    # The plane arrives at 12 noon St Petersburg time\n    arrival_time_spb = datetime.strptime('12:00', '%H:%M')\n    \n    # When the plane left Manchester\n    departure_time_man = arrival_time_spb - time_difference\n    \n    # Format the result to get only the time part\n    ans = departure_time_man.strftime('%H:%M')\n    \n    return ans\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    lbs = kg * kg_to_lbs\n    return lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n\n    ben_height = jane_height - difference\n\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    ben_position_from_front = 6\n    frank_position_from_back = 9\n    people_between = 10\n\n    total_people = ben_position_from_front + people_between + frank_position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_amount = 6  # in litres\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_amount = (coffee_amount / coffee_ratio) * total_ratio\n\n    return latte_amount\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for num in range(100,1000):\n        if num % 8 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum_pos = sum(range(4, 34, 4))\n    sum_neg = sum(range(2, 32, 4))\n    ans = sum_pos - sum_neg\n    return ans\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = 72 / 100 * 140\n    return result\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09  # 9%\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    # Applying addition\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    # Given 42663, we will find the remainder of 42663^2 when divided by 9\n    base = 42663\n    remainder_base = base % 9\n    # (a * b) % m = [(a % m) * (b % m)] % m\n    remainder_square = (remainder_base ** 2) % 9\n    \n    return remainder_square\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    # Let the total number of marbles be x\n    # According to the problem, we have the following equation\n    # (2/5)x + (1/3)x + 96 = x\n    # To solve for x, we can find a common denominator and combine terms\n    # Common denominator for 5 and 3 is 15, so we multiply terms to get:\n    # (6/15)x + (5/15)x + 96 = x\n    # (11/15)x + 96 = x\n    # Now we can isolate x by subtracting (11/15)x from both sides:\n    # 96 = x - (11/15)x\n    # 96 = (15/15)x - (11/15)x\n    # 96 = (4/15)x\n    # Then we divide both sides by (4/15) to get x:\n    # x = 96 / (4/15)\n    # x = 96 * (15/4)\n    x = 96 * (15/4)\n    \n    return int(x)\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    total_sum = 0\n    mod = 10000  # we are only interested in the last 4 digits\n    for i in range(1, 2016):\n        # add each number which is a series of i '1's\n        # this is equivalent to multiplying 1/9 by 10^i - 1\n        total_sum += (10**i - 1) // 9\n        total_sum %= mod  # get the last 4 digits after each addition\n    return total_sum\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds digit must be 1-9\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # ones digit must be even\n                if hundreds + tens + ones == 8 and 100*hundreds + 10*tens + ones >= 100:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    unit_digit_13 = pow(13, 242, 10)\n    unit_digit_17 = pow(17, 379, 10)\n    unit_digit_4 = pow(4, 2012, 10)\n    \n    ans = (unit_digit_13 + unit_digit_17 * unit_digit_4) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # If we take one marble, we are not assured of anything.\n    # When we take a second marble, it could be of the same color or different.\n    # To be sure we get 2 marbles of the same colour:\n    # If we have taken 2 marbles and they are of different colors (worst case),\n    # the next marble we take must be of the same colour as one of the two we've already taken\n    # because there are only two colors in total.\n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3\n    nth_term = 7\n\n    term = first_term + (nth_term - 1) * common_difference\n\n    return term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let x be the total original amount of money Mrs Chen had.\n    # She spent $36, so she had x - 36 left.\n    # Then she spent 3/4 of the remaining money on cups, so she had 1/4*(x - 36) left.\n    # According to the problem, she had 1/6 of the original sum of money left, so:\n    # 1/4*(x - 36) = x/6\n    # Solving for x will give us the original sum of money.\n\n    # Multiply both sides by 24 to clear the fractions:\n    # 6*(x - 36) = 4*x\n    # 6x - 216 = 4x\n    # Subtract 4x from both sides:\n    # 2x - 216 = 0\n    # Add 216 to both sides:\n    # 2x = 216\n    # Divide both sides by 2:\n    # x = 108\n\n    # So Mrs Chen originally had $108.\n    return 108\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "def solution():\n    from itertools import permutations\n\n    largest_A = 0\n    for p in permutations(range(1, 10)):\n        abc = p[0] * 100 + p[1] * 10 + p[2]\n        bcd = p[1] * 100 + p[2] * 10 + p[3]\n        cde = p[2] * 100 + p[3] * 10 + p[4]\n        defg = p[3] * 100 + p[4] * 10 + p[5]\n        efg = p[4] * 100 + p[5] * 10 + p[6]\n        fgh = p[5] * 100 + p[6] * 10 + p[7]\n        ghi = p[6] * 100 + p[7] * 10 + p[8]\n\n        A = abc + bcd + cde + defg + efg + fgh + ghi\n\n        largest_A = max(largest_A, A)\n\n    return largest_A\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # Initialization of variables\n    max_product = 2019\n    min_product = 2020\n    sum_of_ages = 0  # Place-holder for the sum of all five ages\n\n    # Constraints\n    # John's age (j) and Mary's age (m): j = m + 1\n    # Children's ages (c1, c2, c3): c2 = c1 + 2, c3 = c1 + 4\n    # Product of parents' ages this year: m * (m + 1) < max_product (2019)\n    # Product of children's ages this year: c1 * (c1 + 2) * (c1 + 4) < max_product\n    # Products of ages next year: (m + 1) * (m + 2) > min_product (2020) and\n    #                               (c1 + 1) * (c1 + 3) * (c1 + 5) > min_product\n\n    # Trying out possible combinations of ages, considering the constraints\n    for m in range(1, 100):  # Reasonable bound for Mary's age\n        j = m + 1\n\n        # Check if current product of parents' ages satisfies the condition\n        if m * j >= max_product:\n            break\n    \n        for c1 in range(1, 100):  # Reasonable bound for the first child's age\n            c2 = c1 + 2\n            c3 = c1 + 4\n\n            # Check the product of children's ages\n            if c1 * c2 * c3 >= max_product:\n                break\n\n            # Check the product of parents' ages next year\n            if (m + 1) * (j + 1) <= min_product:\n                continue\n\n            # Check the product of children's ages next year\n            if (c1 + 1) * (c2 + 1) * (c3 + 1) <= min_product:\n                continue\n\n            # If all conditions satisfied, calculate the sum of all five ages\n            sum_of_ages = j + m + c1 + c2 + c3\n            return sum_of_ages  # Return the result as we found a valid combination\n\n    return sum_of_ages  # placeholder\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 2011  # Start at 2011 because we count 8 as the first number\n    current = 8\n\n    # While loop iterates until we reach the 2012th number\n    while count > 0:\n        current += 1\n        # If the leftmost digit of current is 8, decrement count\n        if str(current)[0] == '8':\n            count -= 1\n\n    return current\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    count = 0\n    for A in range(2, 15):\n        for B in range(4, 15):\n            for C in range(3, 15):\n                D = 15 - A - B - C\n                if D >= 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # Convert 1 hour into minutes and seconds\n    total_time_minutes = 60  # 1 hour is 60 minutes\n    total_time_seconds = total_time_minutes * 60  # convert minutes to seconds\n\n    # The given time for covering 1 mile\n    given_time_minutes = 2  # 2 minutes\n    given_time_seconds = 30  # 30 seconds\n    given_time_total_seconds = given_time_minutes * 60 + given_time_seconds\n\n    # Calculate the number of miles in the total time\n    miles = total_time_seconds / given_time_total_seconds\n\n    return miles\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    ans = 25 / 100 * 80\n    return ans\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Since the balls are distributed as five consecutive natural numbers,\n    # Let the middle number be 'n', thus the numbers are (n-2), (n-1), n, (n+1), (n+2)\n    # The sum of these 5 numbers should be 160:\n    # (n-2) + (n-1) + n + (n+1) + (n+2) = 160\n    # 5n = 160\n    # n = 160 / 5\n    # n = 32 (the middle number of the sequence)\n    \n    # The student with the most balls has (n+2) balls\n    most_balls = 32 + 2  # (n+2)\n    \n    return most_balls\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    tax = 7000\n    initial_tax_rate = 0.15\n    additional_tax_rate = 0.20\n    initial_income_taxed = 20000\n\n    initial_tax = initial_income_taxed * initial_tax_rate\n    if tax <= initial_tax:\n        income = tax / initial_tax_rate\n    else:\n        additional_tax = tax - initial_tax\n        additional_income = additional_tax / additional_tax_rate\n        income = initial_income_taxed + additional_income\n\n    return income\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    ans = 1.4 * (1/10)\n    return ans\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    decimal_str = str(1 / 13).lstrip(\"0.\")[2:]  # Get rid of '0.' at the beginning\n    length_of_cycle = len(decimal_str)\n    digit_position = (2022 % length_of_cycle) - 1  # Correct for zero-based indexing\n    if digit_position < 0:\n        digit_position += length_of_cycle\n    return int(decimal_str[digit_position])\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    # Two watermelons and three honeydews cost $48\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    \n    # Each honeydew costs twice as much as each watermelon\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    \n    return solutions[honeydew]\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    # Lengths of the ropes\n    rope1 = 28\n    rope2 = 14\n    rope3 = 56\n\n    # Calculate the greatest common divisor (GCD) of the lengths\n    gcd1 = gcd(rope1, rope2)\n    longest_length = gcd(gcd1, rope3)\n\n    return longest_length\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if 2 * chickens + 4 * rabbits == total_legs:\n            return chickens\n    return None\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    total_boys = 17\n    boys_packed = 4\n    girls_school_lunch = 7\n    \n    boys_home = 3\n    total_home = 5\n    girls_home = total_home - boys_home\n    \n    total_girls = total_students - total_boys\n    girls_packed = total_girls - girls_home - girls_school_lunch\n    \n    total_packed = boys_packed + girls_packed\n    return total_packed\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_cost = 20 * 6 + 20 * 5 + 20 * 4\n    total_chocolate = 20 + 20 + 20\n    average_cost = total_cost / total_chocolate\n\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_already_made = 720\n    total_sets = 3600\n    days_for_sets_already_made = 5\n    \n    rate_per_day = sets_already_made / days_for_sets_already_made\n    remaining_sets = total_sets - sets_already_made\n    remaining_days = remaining_sets / rate_per_day\n    \n    total_days = days_for_sets_already_made + remaining_days\n    \n    return total_days\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Equation representing that after selling 290, B is 3 times A\n    equation = Eq(B, 3 * (A - 290))\n\n    # Solving the equation B = 3A - 3*290 under the condition A = B\n    solutions = solve((equation, Eq(A, B)), (A, B))\n\n    # The number of packs of potato chips they both had at first are 2 times A or B\n    total_packs = solutions[A] * 2\n\n    return total_packs\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = set()\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    last_number = 100\n    divisor = 12\n    num_divisible = (last_number - 1) // divisor\n    return num_divisible\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in meters/second\n    time = 19   # time in seconds to pass the tree\n\n    # The train passes completely in 19 seconds, so the length is speed * time\n    length = speed * time\n\n    return length\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    man_rate = 1 / 15\n    together_rate = 1 / 12\n    wife_rate = together_rate - man_rate\n    wife_time = 1 / wife_rate\n    return int(wife_time)\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    return result\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_fruits = 18 + 30  # Total number of pears and strawberries\n    friends_count = 6\n    fruits_per_friend = total_fruits // friends_count\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    tricycles = 6\n    wheels_per_tricycle = 3\n\n    total_wheels = tricycles * wheels_per_tricycle\n\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    discount_threshold = 3\n    books_to_get_free = 1\n    books_to_buy = 5\n    \n    # calculating the actual number of books Subhan pays for\n    books_paid_for = books_to_buy - (books_to_buy // (discount_threshold + books_to_get_free))\n    \n    total_cost = books_paid_for * book_price\n\n    return total_cost\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 6, 3*x - 3)\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154  # Base is below sea level\n    mount_fuji_tip = 3776          # Tip is above sea level\n\n    # Distance is the absolute difference in elevations\n    distance = abs(turpan_depression_base - mount_fuji_tip)\n\n    return distance\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of women, men, and children\n    women, men, children = symbols('women men children', integer=True)\n    \n    # Given that 2/5 of the people were women, and the total number of\n    # people is the sum of women, men, and children\n    total = women + men + children\n    \n    # Equations based on the problem statement\n    equation1 = Eq(women, total * 2/5)\n    equation2 = Eq(men, 3 * children)\n    equation3 = Eq(women, children + 190)\n    \n    # Solve the equations for women, men, and children\n    solutions = solve((equation1, equation2, equation3), (women, men, children, total))\n    \n    # Return the total number of people\n    return solutions[total]\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        return 0\n    else:\n        ans = 4 - remainder\n        return ans\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # b for boys, g for girls\n    b, g = symbols('b g')\n\n    # Total number of pencils\n    total_pencils = 35 * 40\n\n    # Average pencil per boy\n    avg_boy = 20\n\n    # Average pencil per girl\n    avg_girl = 60\n\n    # Equation 1: b + g = 40 (total number of pupils)\n    equation1 = Eq(b + g, 40)\n\n    # Equation 2: 20b + 60g = total_pencils (pencils for boys and girls)\n    equation2 = Eq(20*b + 60*g, total_pencils)\n\n    # Solve equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 51):\n        total_sum += int('1' * i)\n    ans = total_sum % 100\n    return ans\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both_competitions = 20\n    total_students = coding_only + math_only + both_competitions\n    return total_students\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define a symbol for the unknown true result\n    true_result = symbols('true_result')\n    \n    # Create an equation based on the problem: \n    # If Leo forgets the decimal point, he divides by 211 instead of 2.11.\n    # The incorrect result is given by the true result multiplied by the ratio of the wrong divisor to the correct one, which is 211 / 2.11.\n    # This result is 98.01 less than the true one.\n    equation = Eq(true_result * (211 / 2.11) - true_result, 98.01)\n    \n    # Solve the equation for the true result\n    solved = solve(equation, true_result)\n\n    return float(solved[0])\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the cost of one apple as 'a' and one banana as 'b'.\n    a, b = symbols('a b')\n    \n    # We set up equations based on the scenarios provided.\n    eq1 = Eq(6*a + 7*b, 8*a + 4*b) # both options cost the same\n    eq2 = Eq(a, b) # without loss of generality, we can assume 1 apple costs the same as 1 banana to find the relative costs\n\n    # Solve the system of equations for 'a' and 'b'.\n    solutions = solve((eq1, eq2), (a, b))\n\n    # We want to find how many bananas can be bought with no change left. \n    # We use one of the original equations to get the total money Einstein has, say for 6 apples and 7 bananas.\n    total_money = 6 * solutions[a] + 7 * solutions[b]\n\n    # Since we set the cost of one banana equal to the cost of one apple,\n    # we can buy as many bananas as the total money / cost of one banana.\n    num_bananas = total_money / solutions[b]\n\n    return int(num_bananas)\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    count = 0\n    # Since there are minimum numbers of envelopes for each mailbox, we start with those\n    min_A = 2\n    min_B = 4\n    min_C = 3\n    min_D = 0  # No minimum for mailbox D\n\n    # We then calculate the remaining number of envelopes left after minimum allocation\n    remaining_envelopes = 15 - (min_A + min_B + min_C + min_D)\n\n    # Now we have to distribute the remaining envelopes in any of the 4 mailboxes\n\n    for extra_A in range(0, remaining_envelopes + 1):  # Possible extra envelopes for A\n        for extra_B in range(0, remaining_envelopes - extra_A + 1):  # Possible extra envelopes for B\n            for extra_C in range(0, remaining_envelopes - extra_A - extra_B + 1):  # Possible extra envelopes for C\n                # Whatever is left goes to D\n                extra_D = remaining_envelopes - extra_A - extra_B - extra_C\n                # Since there are no conditions on D, we don't need to check for a minimum\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n    \n    ans = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    return ans\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    sold_second_half = (remaining_eggs + 4) * 2\n    initial_eggs = (sold_second_half + 5) * 2\n\n    return initial_eggs\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of money John and Choon Mui had initially\n    john_initial, choonmui_initial = symbols('john_initial choonmui_initial')\n\n    # Create the equation based on the problem statement\n    # They initially had the same amount of money\n    equation1 = Eq(john_initial, choonmui_initial)\n    # After spending, John's amount is four times Choon Mui's amount left\n    equation2 = Eq(john_initial - 30, 4 * (choonmui_initial - 150))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_initial, choonmui_initial))\n    \n    # Calculate how much John had left after spending\n    john_left = solutions[john_initial] - 30\n\n    return john_left\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male_day1, female_day1 = symbols('male_day1 female_day1')\n\n    # Equations based on the problem statement\n    equation1 = Eq(male_day1, female_day1 + 450)\n    equation2 = Eq((female_day1 * 1.15) + (male_day1 * 0.82), 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male_day1, female_day1))\n\n    # We want the number of male visitors on the first day\n    return solutions[male_day1]\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    increase_percentage = 10 / 100\n    increased_amount = original_amount * (1 + increase_percentage)\n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    real_length_m = 8\n    scale_ratio = 1/20\n    model_length_m = real_length_m * scale_ratio\n    model_length_cm = model_length_m * 100\n    return model_length_cm\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    # 1 mile = 1.60934 kilometers\n    mile_to_km = 1.60934\n    # Speed in miles per hour\n    speed_mph = 65\n    # Time in minutes\n    time_minutes = 15\n    # Convert time to hours\n    time_hours = time_minutes / 60\n    # Calculate distance in miles\n    distance_miles = speed_mph * time_hours\n    # Convert distance to kilometers\n    distance_km = distance_miles * mile_to_km\n    \n    return distance_km\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n\n    return like_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    return count\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    daily_advance = 3\n    nightly_retreat = 1\n    net_daily_advance = daily_advance - nightly_retreat\n\n    # The snail reaches the top before sliding down on the last day.\n    days = (total_distance - daily_advance) // net_daily_advance + 1\n\n    return days\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial as fact\n\n    # Total possible permutations for 4 people\n    total_perms = fact(4)\n\n    # Derangements (permutations where no element appears in its original position) for 4 people\n    # Enumerated manually: 2 1 4 3, 2 3 4 1, 2 4 1 3, 3 1 4 2, 3 4 1 2, 3 4 2 1, 4 1 2 3, 4 3 1 2, 4 3 2 1\n    derangement_perms = 9\n\n    return derangement_perms\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.95*x - (2/5)*x, 55)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    return 2.4 * (3.7 + 1.3) / 2\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    # Initialize the candidate number\n    candidate = 2  # We start checking from the smallest number with remainder 2 when divided by 7\n\n    # Loop through all numbers less than 100 to find one that satisfies both conditions\n    while candidate < 100:\n        if candidate % 7 == 2 and candidate % 13 == 2:\n            return candidate\n        candidate += 7  # We only need to check every 7th number since it must leave a remainder of 2 when divided by 7\n\n    return -1  # Return -1 if no solution is found\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_wage = 78 / 6.5\n    total_hours = 8 * 5  # Assuming a week is 5 working days\n    total_earnings = hourly_wage * total_hours\n\n    remaining_debt = 700 - total_earnings\n    return remaining_debt\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    \n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('20:30', '%H:%M')\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    start_time_formatted = start_time.strftime('%I:%M %p')\n    return start_time_formatted\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let's define each digit as a separate symbol.\n    A = symbols('A')\n\n    # According to the puzzle vertical form, we have the following relationships:\n    #  A\n    # +A\n    # --\n    # AA\n    # This implies that 10A + A = AA, which simplifies to 11A = 10*A + A.\n    # Setting up the equation.\n    equation = 11*A - 10*A - A\n\n    # Solving the equation.\n    solution = solve(equation, A)\n\n    # There will be only one solution for A since it's linear.\n    return solution[0]\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    \n    for num in range(100, 1000):\n        num_str = str(num)\n        if num_str.count('0') == 1 and '0' not in num_str[0]:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    arjun_interval = 2 * 7  # Because 2 weeks\n    yahya_interval = 10     # Because 10 days\n    \n    # Find the least common multiple (LCM) of the two intervals\n    days_until_same_haircut = lcm(arjun_interval, yahya_interval)\n    \n    return days_until_same_haircut\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Distance covered in each stage\n    distance_stage1 = 280  # meters\n    distance_stage2 = 400  # meters\n    distance_stage3 = 800 - (distance_stage1 + distance_stage2)  # meters, remaining distance\n\n    # Speed in each stage\n    speed_stage1 = 7  # meters per second\n    speed_stage2 = 5  # meters per second\n    speed_stage3 = 8  # meters per second\n\n    # Time taken to complete each stage\n    time_stage1 = distance_stage1 / speed_stage1  # time = distance / speed\n    time_stage2 = distance_stage2 / speed_stage2\n    time_stage3 = distance_stage3 / speed_stage3\n\n    # Calculate total time\n    total_time = time_stage1 + time_stage2 + time_stage3\n    \n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total = 0\n    for i in range(10):\n        for j in range(10):\n            if (2 + i + 9 + j) % 3 == 0 and j == 0 or j == 5: # Divisible by 3 and ends with 0 or 5\n                total += int(f\"2{i}9{j}\")\n    return total\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    distance_apart = 7\n\n    # Since no trees are planted at the ends, the effective length for planting is reduced by the distance apart from each end\n    effective_length = highway_length - 2 * distance_apart\n\n    # Calculate the number of trees that can be planted in the effective length\n    num_trees = (effective_length // distance_apart) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    return 34 + 2 - 11 + 14\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    fake_note_value = 50\n    cost_of_shoes = 30\n    \n    # Lucas loses both the cost of the shoes and has to repay the supermarket for the fake note\n    total_loss = cost_of_shoes + fake_note_value\n    \n    return total_loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    ans = (5 / 7) * 112\n    return ans\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "def solution():\n    from math import factorial\n\n    # Consider A, B, C as a single unit, and then there are 8 units to arrange.\n    units = 8\n    # The single unit (A, B, C) itself can be arranged in 3! ways.\n    abc_permutations = factorial(3)\n    # The remaining 8 units can be arranged in 8! ways.\n    rest_permutations = factorial(units)\n\n    total_ways = abc_permutations * rest_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # Constructing the initial number as a string\n    number = ''.join(str(i) for i in range(1, 31))\n    \n    # To get the smallest number after removing 46 digits, we should remove digits from the left\n    # because the leftmost digits have higher values.\n    # Since we are removing 46 digits, we take the substring that starts from the 47th digit.\n    smallest_number = number[46:]\n    \n    # Convert the result to an integer to remove leading zeroes if there are any\n    smallest_number = int(smallest_number)\n    \n    return smallest_number\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    return 6 * 9 * 12\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, you need to consider the worst-case scenario.\n    # This would be picking all the blue balls first.\n    total_blue_balls = 6\n    # After taking all blue balls, the next ball has to be white.\n    balls_needed = total_blue_balls + 1\n    return balls_needed\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    ans = comb(15, 4)\n    return ans\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n\n    total_marbles = james + linda + ben\n\n    return total_marbles\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    return (1+2+3+4)*1 - (2020+2019+2018)*0\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    # There are 3 rulers, each of length 20cm.\n    # Each overlap is 3cm and there are 2 overlaps.\n    \n    total_length_of_rulers = 3 * 20  # Total length of the rulers without overlap\n    total_overlap_length = 2 * 3     # Total length of overlap\n    \n    # The length of the bundle will be the total length of the rulers minus the total overlap.\n    bundle_length = total_length_of_rulers - total_overlap_length\n    \n    return bundle_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Star jogs from 6:30 AM to 7:30 AM at 6 mph\n    jogging_time_hours = 1\n    jogging_speed_mph = 6\n    jogging_distance = jogging_speed_mph * jogging_time_hours\n\n    # Star walks from 7:30 AM to 9:30 AM at 5 mph\n    walking_time_hours = 2\n    walking_speed_mph = 5\n    walking_distance = walking_speed_mph * walking_time_hours\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    initial_cups = 721\n    new_cups = 0\n    while initial_cups >= 7:\n        # Make new cups from the used cups\n        made_cups = initial_cups // 7\n        new_cups += made_cups\n        \n        # Update the number of initial cups, taking into account the remaining cups\n        initial_cups = initial_cups % 7 + made_cups\n        \n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    number = 2000\n    less_by = 222\n\n    ans = number - less_by\n    return ans\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    days = 6\n    total_pages = (14 * 3) + (9 * 2) + 12\n    average_pages = total_pages / days\n    return average_pages\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    A_students = 8\n    B_students = 12\n    C_students = 20\n\n    gcd_AB = gcd(A_students, B_students)\n    gcd_ABC = gcd(gcd_AB, C_students)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # convert meters to centimeters\n    distance_between_cauliflowers_cm = 15\n    first_cauliflower_cm = 20\n    cauliflower_width_cm = 45\n\n    # Calculate the useful length after considering the space taken by the first cauliflower\n    useful_length_cm = plot_length_cm - first_cauliflower_cm - cauliflower_width_cm\n\n    # Calculate the number of remaining spaces available for cauliflowers\n    number_of_spaces = useful_length_cm // (distance_between_cauliflowers_cm + cauliflower_width_cm)\n\n    # Add the first cauliflower to the count\n    total_cauliflowers = number_of_spaces + 1\n\n    return total_cauliflowers\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    return ans\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # meters per second\n    distance = 1.5 * 10**3  # meters (1.5 kilometers)\n    \n    time = distance / speed_of_sound  # time = distance / speed\n\n    return time\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of members in Badminton and Bowling clubs\n    B, Bo = symbols('B Bo')\n\n    # Equation for initially members in Badminton being three times Bowling members\n    equation1 = Eq(B, 3 * Bo)\n    \n    # Equation for both clubs having the same number after the respective members left\n    equation2 = Eq(B - 36, Bo - 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (B, Bo))\n\n    return solutions[B] - 36  # Number of members each club had in the end\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    n = 72\n    ans = len([i for i in range(1, n + 1) if n % i == 0])\n    return ans\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    ans = number1 - number2\n    return ans\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    # total number of cards\n    total_cards = 504 // 126  # since average value is 126\n\n    # having 4 numbers and a difference of 6 means they are consecutive odd numbers\n    # so, if the numbers are x-3, x-1, x+1, x+3 (odd numbers are consecutive at a gap of 2)\n    # then their sum is 4x and the average is x which is 126\n    \n    smallest_number = 126 - 3\n    return smallest_number\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Wendy's and Vivien's current ages\n    wendy, vivien = symbols('wendy vivien')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(wendy, 2 * vivien)  # Wendy is twice as old as Vivien\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)  # 10 years ago, Vivien was 1/4 as old as Wendy\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Find Wendy's age in 5 years' time\n    wendy_in_5_years = solutions[wendy] + 5\n    \n    return wendy_in_5_years\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    # Initialize the zero count\n    zeros_count = 0\n\n    # Prime factors for counting trailing zeros are 2 and 5\n    # Count the multiples of 5 (only 5s in this case since each 5 will have a corresponding 2 for sure)\n    for i in range(301, 1000):\n        number = i\n\n        # Factor out the 5s from the number\n        while number % 5 == 0:\n            zeros_count += 1\n            number /= 5\n\n    return zeros_count\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_of_fractions = sum(1 / i for i in range(10, 20))\n    return int(sum_of_fractions)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for num in range(10, 100):\n        if num % 6 == 0 and (num - 1) % 13 == 0:\n            return num\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    # Speed of the golden rabbit in meters per minute\n    speed_rabbit = 330\n    # Speed of the sea turtle in meters per minute\n    speed_turtle = 30\n    # The race distance in meters\n    race_distance = 6990\n    # The duration of the rabbit's sleep in minutes\n    sleep_duration = 215\n    # The time after which the rabbit starts to sleep in minutes\n    sleep_start = 10\n\n    # The distance covered by the rabbit before sleep\n    distance_rabbit_before_sleep = speed_rabbit * sleep_start\n\n    # The distance covered by the turtle in the same amount of time\n    distance_turtle_during_rabbit_sleep = speed_turtle * (sleep_duration + sleep_start)\n\n    # Total distance covered by the turtle when the rabbit wakes up\n    distance_turtle_when_rabbit_awakes = distance_turtle_during_rabbit_sleep + distance_rabbit_before_sleep\n\n    # Remaining distance for the rabbit when he wakes up\n    remaining_distance_rabbit = race_distance - distance_rabbit_before_sleep\n\n    # Time taken by rabbit to complete the race after waking up\n    time_rabbit_after_sleep = remaining_distance_rabbit / speed_rabbit\n\n    # Total time taken by rabbit including the sleep\n    total_time_rabbit = sleep_duration + sleep_start + time_rabbit_after_sleep\n\n    # Distance covered by turtle in total time taken by rabbit\n    distance_turtle_in_rabbit_time = speed_turtle * total_time_rabbit\n\n    # Determine the winner and the distance between them at the finish line\n    if distance_turtle_in_rabbit_time >= race_distance:\n        winner = \"turtle\"\n        distance_at_finish = distance_turtle_in_rabbit_time - race_distance\n    else:\n        winner = \"rabbit\"\n        distance_at_finish = race_distance - distance_turtle_in_rabbit_time\n\n    return winner, int(distance_at_finish)\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    return 617 - 385\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    girls, girls_swim, girls_not_swim = symbols('girls girls_swim girls_not_swim')\n    boys, boys_swim, boys_not_swim = symbols('boys boys_swim boys_not_swim')\n    total_pupils, total_not_swim = symbols('total_pupils total_not_swim')\n    \n    # Given conditions\n    equation1 = Eq(girls + 90, boys)  # There are 90 more boys than girls\n    equation2 = Eq(girls_not_swim / girls_swim, 49 / 31)  # Ratio of girls who can't swim to girls who can swim\n    equation3 = Eq(boys_not_swim, boys_swim + 120)  # Boys who can't swim are 120 more than boys who can swim\n    equation4 = Eq(girls + boys, 1690)  # Total number of pupils in school\n    equation5 = Eq(girls_swim + girls_not_swim, girls)  # Total girls divided into swimmers and non-swimmers\n    equation6 = Eq(boys_swim + boys_not_swim, boys)  # Total boys divided into swimmers and non-swimmers\n    equation7 = Eq(girls_not_swim + boys_not_swim, total_not_swim)  # Total pupils who can't swim\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7),\n                      (girls, girls_swim, girls_not_swim, boys, boys_swim, boys_not_swim, total_not_swim))\n    \n    return solutions[total_not_swim]\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bolt, boris = symbols('bolt boris')\n    \n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n    \n    solutions = solve((equation1, equation2), (bolt, boris))\n    \n    total_distance = solutions[bolt] + solutions[boris]\n    \n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    total_students = (english_classes + math_classes) - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n\n    # Total number of ways to arrange seven people\n    total_arrangements = factorial(7)\n\n    # Number of ways to arrange the three people who don't want to stand\n    # next to each other. We treat them as a single unit.\n    together_arrangements = factorial(5) * factorial(3)\n\n    # Subtract the arrangements where the three are together from the total\n    ans = total_arrangements - together_arrangements\n    return ans\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    number_of_rows = 25\n    \n    # Calculate the common difference of the arithmetic sequence\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    # Sum of arithmetic series formula: n/2 * (2a + (n - 1)d)\n    total_athletes = number_of_rows / 2 * (2 * first_term + (number_of_rows - 1) * common_difference)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    annual_increase = 0.10\n    # Since the money increases by 10% each year, we need to divide the final amount\n    # by 1.10 for each year to get the amount for the previous year.\n    amount_2019 = final_amount / (1 + annual_increase)\n    amount_2018 = amount_2019 / (1 + annual_increase)\n    \n    # amount_2018 is the amount Euan received in 2018\n    return amount_2018\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n % p == 0:\n            n //= p\n            count += 1\n        return count\n    \n    def count_zeros(n):\n        count_2 = 0\n        count_5 = 0\n        for i in range(1, n+1):\n            count_2 += count_factors(i, 2)\n            count_5 += count_factors(i, 5)\n        return min(count_2, count_5)\n    \n    return count_zeros(789)\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Let x be the number of students in Team B\n    average_A = 76\n    average_B = 67\n    combined_average = 70\n    num_students_A = 20\n    \n    # Using the formula for combined average (average_A * num_students_A + average_B * x) / (num_students_A + x) = combined_average\n    # We solve for x, which is the number of students in Team B\n\n    x = symbols('x')\n    equation = Eq((average_A * num_students_A + average_B * x) / (num_students_A + x), combined_average)\n    num_students_B = solve(equation, x)[0]\n\n    return num_students_B\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    max_participants = 100\n    min_participants_per_school = 4\n\n    max_schools = max_participants // min_participants_per_school\n    \n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if str(hour).count('4') + str(minute).count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all possible 3-digit numbers using the given digits\n    digits = [1, 2, 3, 7, 8, 9]\n    all_3_digit_nums = list(permutations(digits, 3))\n    \n    # Create list of integers from the tuples of permutations\n    all_3_digit_ints = [int(''.join(map(str, num))) for num in all_3_digit_nums]\n    \n    # Sort all integers and remove duplicates\n    all_3_digit_ints = sorted(set(all_3_digit_ints))\n    \n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n    # Iterate through all unique pairs of 3-digit numbers\n    for i in range(len(all_3_digit_ints)):\n        for j in range(i + 1, len(all_3_digit_ints)):  # Ensure each number is used only once\n            product = all_3_digit_ints[i] * all_3_digit_ints[j]\n            # Update the minimum product if a lower product is found\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    max_dice_roll = 6\n    final_position = 25\n    min_rolls = (final_position - 1) // max_dice_roll + 1\n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 19\n    last_term = 2019\n    difference = 100  # pattern is to add 100 to the previous term to get the next\n\n    # formula for the number of terms in an arithmetic sequence: n = (last - first) // difference + 1\n    num_terms = (last_term - first_term) // difference + 1\n\n    # formula for the sum of an arithmetic sequence: S_n = n/2 * (first + last)\n    sum_sequence = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    # The numbers must satisfy A+B+E = 1 (carry over), C+D+F = 9, and G = 3 since the numbers are from 1 to 9\n    # Now, we need to find permutations of A, B, C, D, E, and F (excluding 3)\n    perms = permutations(set(range(1, 10)) - {3}, 6)\n\n    max_product = 0\n    min_product = float('inf')\n    \n    for perm in perms:\n        A, B, C, D, E, F = perm\n        # Check if A + B + E has a carry over of 1 so A can't be 9, B can't be 9 and E can't be 9\n        if A + B + E != 12: \n            continue\n        \n        # Check if C + D + F has a sum of 9\n        if C + D + F != 9:\n            continue\n\n        # Now we construct the numbers and compute their product\n        num_ABCD = A * 1000 + B * 100 + C * 10 + D\n        num_EFG = E * 100 + F * 10 + 3  # G is always 3\n        \n        product = num_ABCD * num_EFG\n\n        max_product = max(max_product, product)\n        min_product = min(min_product, product)\n\n    # Finally, return the difference between the max and min products\n    ans = max_product - min_product\n    return ans\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    smallest_2digit_number = None\n    # Since the sum of the digits should be 15 and it is a 2-digit number,\n    # we start from 1 at ten's place and go up to 9 (since 0 would not make it a 2-digit number)\n    for ten_digit in range(1, 10):\n        # Calculate the unit digit by subtracting the ten's digit from 15 (sum of the digits)\n        unit_digit = 15 - ten_digit\n        # Check if the unit digit is less than 10 to form a valid 2-digit number\n        if 0 <= unit_digit < 10:\n            # Form the 2-digit number\n            number = ten_digit * 10 + unit_digit\n            # If not set, set the smallest 2-digit number, else compare with current smallest\n            if smallest_2digit_number is None:\n                smallest_2digit_number = number\n            else:\n                smallest_2digit_number = min(smallest_2digit_number, number)\n            break  # no need to check further since we found the smallest\n    return smallest_2digit_number\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    depth = 220\n    climb_per_hour = 40\n    slip_per_rest = 10\n    net_climb_per_hour = climb_per_hour - slip_per_rest\n    \n    # Calculate full hours until just before reaching the top\n    full_hours = (depth - climb_per_hour) // net_climb_per_hour\n    \n    # Include the final hour to reach the top and don't slip back\n    total_hours = full_hours + 1\n\n    return total_hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    for num in range(30, 0, -1):\n        if isprime(num):\n            return num\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    return 3989 - (3000 + 80 + 9)\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cabbage_price = 0.96\n    cabbages_bought = 8\n    lettuces_bought = 6\n\n    total_cost = cabbage_price * cabbages_bought\n    lettuce_price = total_cost / lettuces_bought\n\n    return lettuce_price\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n    saved_money = total_money - spent_money\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30  # distance between the first and the last plant\n    original_num_plants = 11  # original number of potted plants\n    plants_removed = 8  # number of potted plants removed\n    remaining_plants = original_num_plants - plants_removed\n\n    # The number of intervals is one less than the number of plants\n    original_intervals = original_num_plants - 1\n    new_intervals = remaining_plants - 1\n    \n    # Calculate the new interval distance\n    new_interval_distance = total_distance / new_intervals\n    \n    return new_interval_distance\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    # Calculate the rate of typing for the entire group per minute\n    group_rate_per_minute = 6000 / 20  # words per minute for the whole group of 5 typists\n    \n    # Calculate the rate per typist per minute\n    typist_rate_per_minute = group_rate_per_minute / 5\n    \n    # Calculate the new rate per minute with only 3 typists\n    new_group_rate_per_minute = typist_rate_per_minute * 3\n    \n    # Calculate the time needed for 9000 words with 3 typists\n    time_needed = 9000 / new_group_rate_per_minute\n    \n    # Return the time needed in minutes\n    return time_needed\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = 13 * 60 + 52  # convert start time to total minutes past midnight\n    end_time = 14 * 60 + 5     # convert end time to total minutes past midnight\n\n    total_minutes = end_time - start_time  # calculate the total duration of the call in minutes\n    cost_per_minute = 14  # cost per minute in pence\n\n    total_cost = total_minutes * cost_per_minute  # calculate the total cost of the call\n\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    n = 20\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return sum(factors)\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    ans = 0.4 * 320\n    return ans\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    # We need to count the number of three-digit numbers which have at least one '2' and '3'.\n    # These numbers can have the digits 2 and 3 in various combinations:\n    # - 2XY (where X and Y can be 2 or 3)\n    # - 3XY (where X and Y can be 2 or 3)\n    # - X2Y (where X and Y can be 2 or 3)\n    # - XY2 (where X and Y can be 2 or 3)\n    # - X3Y (where X and Y can be 2 or 3)\n    # - XY3 (where X and Y can be 2 or 3)\n    #\n    # However, the combinations 222 and 333 do not contain each digit at least once,\n    # so we need to subtract those cases.\n\n    # There's a total of 2 choices for each digit's position (either 2 or 3)\n    # Thus for a three-digit number, there would be 2 * 2 * 2 = 8 possibilities in total\n    total_possibilities = 2 ** 3\n\n    # But we have to exclude the possibilities of all 2s and all 3s.\n    invalid_possibilities = 2\n\n    # So, the answer would be total possibilities excluding invalid ones\n    return total_possibilities - invalid_possibilities\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('17/10/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('20/12/2023', '%d/%m/%Y')\n\n    current_date = start_date\n    sunday_count = 0\n\n    while current_date <= end_date:\n        if current_date.isoweekday() == 7:  # Sunday is 7th day of the week in ISO standard\n            sunday_count += 1\n        current_date += timedelta(days=1)\n    \n    return sunday_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_pay = pen_price + ruler_price\n    return total_pay\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, peach = symbols('apple peach')\n    \n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n    \n    solutions = solve((equation1, equation2), (apple, peach))\n    \n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of tarts\n    strawberry, apple = symbols('strawberry apple')\n    \n    # Given that she bought twice as many apple tarts\n    apple_quantity = 2 * strawberry\n    \n    # Define the price for each type of tart\n    apple_price, strawberry_price = symbols('apple_price strawberry_price')\n    \n    # The cost difference between tarts\n    price_difference = Eq(strawberry_price, apple_price + 0.40)\n    \n    # The total cost for the tarts\n    total_cost = Eq(apple_quantity * apple_price + strawberry * strawberry_price, 40)\n    \n    # Substitute the apple quantity to simplify the equation\n    total_cost = total_cost.subs(apple, 2 * strawberry)\n    \n    # Solve the system of equations\n    solutions = solve((price_difference, total_cost), (apple_price, strawberry_price, strawberry))\n    \n    # Number of tarts \n    strawberry_tarts = solutions[strawberry]\n    apple_tarts = 2 * strawberry_tarts\n    \n    return apple_tarts + strawberry_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "from math import gcd\nfrom fractions import Fraction\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef solution():\n    # Convert times to seconds for consistency\n    first_light = 30  # 30 seconds for the first light\n    second_light = 45  # 0.75 minutes is 45 seconds for the second light\n\n    # Least time for the third light in seconds\n    min_third_light = 30  # At least 30 seconds\n\n    # Find the least common multiple of the first two lights\n    lcm_first_second = lcm(first_light, second_light)\n    \n    # Each traffic light must turn green every 9 minutes (540 seconds)\n    nine_minutes = 540\n    \n    # Check for the smallest time for the third light that satisfies the condition\n    third_light = min_third_light\n    while True:\n        if (lcm(lcm_first_second, third_light) == nine_minutes):\n            break\n        third_light += 1\n        \n    # Return the time in minutes\n    return Fraction(third_light, 60)\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "import math\n\ndef solution():\n    total_skiboards = 5\n    people = 5  # Pip, Bud, and 3 friends\n    # Each person can pick a skiboard in a unique way before they run out.\n    ways_to_pick = math.factorial(total_skiboards)\n\n    return ways_to_pick\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    total_pieces, fitted_pieces = symbols('total_pieces fitted_pieces')\n\n    # Equation representing 20% of the pieces fitted on the first day\n    equation1 = Eq(fitted_pieces, total_pieces * 0.20)\n\n    # Equation representing the situation after the second day\n    equation2 = Eq(fitted_pieces + 60, (2 / 7) * total_pieces)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_pieces, fitted_pieces))\n\n    # Return the total number of pieces in the puzzle\n    return solutions[total_pieces]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_from_left = 18\n    tony_position_from_right = 17\n\n    tony_position_from_left = total_children - tony_position_from_right + 1\n    \n    children_between_henry_tony = tony_position_from_left - henry_position_from_left + 1\n    \n    return children_between_henry_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    millimetres_in_one_metre = 1000\n    ans = 2 * millimetres_in_one_metre\n    return ans\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_ten = total_numbers // 10\n    not_multiples_of_ten = total_numbers - multiples_of_ten\n    percentage = (not_multiples_of_ten / total_numbers) * 100\n    return percentage\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_amount = 4\n    paid_back = initial_amount * 0.30\n    owes = initial_amount - paid_back\n    return owes\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    meeting_time = 10  # time in hours when they meet\n\n    total_distance = (jack_speed + rose_speed) * meeting_time\n\n    return total_distance\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    original_melvin = 40\n    gained_from_nelson = 5 / 8 * original_melvin\n    melvin_after_first_round = original_melvin + gained_from_nelson\n\n    lost_to_oliver_each = 1 / 4 * original_melvin\n    melvin_after_second_round = melvin_after_first_round - lost_to_oliver_each\n    nelson_after_second_round = original_melvin - gained_from_nelson - lost_to_oliver_each\n    oliver_after_second_round = lost_to_oliver_each * 2\n\n    gained_final_round = 1 / 8 * original_melvin\n    melvin_final = melvin_after_second_round + gained_final_round\n    nelson_final = nelson_after_second_round - gained_final_round\n    oliver_final = oliver_after_second_round\n    \n    total_cards_initially = melvin_final + nelson_final + oliver_final\n    \n    return total_cards_initially\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    num = 24\n    odd_factors = [i for i in range(1, num + 1, 2) if num % i == 0]\n    n = sum(odd_factors)\n    return n\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n\n    cards = [6, 12, 35, 175, 245, 300]\n    all_products = {}\n\n    # Generate products for all combinations of choosing 2 cards by Candy\n    for combo in combinations(cards, 2):\n        prod_combo = prod(combo)\n        if prod_combo not in all_products:\n            all_products[prod_combo] = []\n        all_products[prod_combo].append(combo)\n\n    # Generate products for all combinations of choosing 3 cards by Candice\n    for combo in combinations(cards, 3):\n        prod_combo = prod(combo)\n        if prod_combo in all_products:\n            return (set(cards) - set(all_products[prod_combo][0]) - set(combo)).pop()\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Polly's age when the first child was born: 20\n    # Polly's age when the second child was born: 22\n    # Polly's age when the third child was born: 24\n\n    # Let Polly's age be x when the sum of her children's ages equals her age\n    # Her first child's age would then be x - 20\n    # Her second child's age would be x - 22\n    # Her third child's age would be x - 24\n\n    # The given condition is:\n    # x = (x - 20) + (x - 22) + (x - 24)\n\n    # Simplifying the equation\n    # x = 3x - 66\n    # 2x = 66\n    # x = 33\n\n    # Since we need to return the variable 'ans', we assign the result to it.\n    ans = 33\n    return ans\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Let b represent the number of birds Tina has\n    # Let's calculate the total number of legs from cats, dogs, and the rabbit\n    legs_from_cats_dogs_rabbit = (2 * 4) + (2 * 4) + (1 * 4)  # cats and dogs have 4 legs, rabbit has 4 legs\n\n    # The total number of legs minus the number of legs from cats, dogs, and the rabbit\n    # gives us the number of legs from birds\n    legs_from_birds = 28 - legs_from_cats_dogs_rabbit\n\n    # Since birds have 2 legs, we can find the number of birds by dividing the\n    # legs_from_birds by 2\n    birds = legs_from_birds // 2\n\n    return birds\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    # Applying the Law of Addition and Multiplication\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n    \n    # The question seems to imply that we return both parts\n    ans = (part1, part2)\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight = 20\n    multiplier = 5\n    empty_suitcase_weight = total_weight / multiplier\n    \n    return empty_suitcase_weight\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    # Calculate the sum of the arithmetic sequence\n    num_terms = int((last_term - first_term) / difference + 1)\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - (big_boxes * 6)) // 4\n        if (small_boxes * 4 + big_boxes * 6) == 50 and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    combined_age_past = 10\n    years_since_then = 4 + 2\n\n    combined_future_age = combined_age_past + 2 * years_since_then\n    return combined_future_age\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let the smaller number be x and the larger number be y.\n    # We know that y - x = 39 and y + x = 59.\n    # Now we solve the system of equations for x:\n    # Adding both equations together:\n    # (y - x) + (y + x) = 39 + 59\n    # 2y = 98\n    # y = 98 / 2 = 49\n    \n    # Now that we know what y is, substitute in the first equation to find x:\n    # y - x = 39\n    # 49 - x = 39\n    # - x = 39 - 49\n    # - x = -10\n    # x = 10\n    \n    # The value of the smaller number x is 10\n    return 10\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = (5 * 4) + (6 * 8)\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    m = symbols('m')\n    equation = Eq(14 * 10 + m, 8 * (10 + m) - 3)\n    \n    solution = solve(equation, m)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    A_times_B = 30\n    B_times_C = 35\n    C_times_A = 42\n\n    A_squared_times_B_squared_times_C_squared = A_times_B * B_times_C * C_times_A\n\n    ABC = int(A_squared_times_B_squared_times_C_squared ** (1/3))\n\n    A = A_times_B // ABC\n    B = B_times_C // ABC\n    C = C_times_A // ABC\n\n    return A + B + C\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_after_stop = x - 12 + y\n    return passengers_after_stop\n\n# The values of x and y are not provided, thus the function takes x and y as parameters\n# and returns the algebraic expression representing the situation.\n# To get a specific answer, you would call solution with specific values for x and y, like so:\n# ans = solution(30, 10)  # for example if there were initially 30 passengers and 10 got on"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    return 0.15 * 340\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    result = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n    return result\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100*a + 10*b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n\n    while True:\n        years += 1\n        if (mother_age + years) == 3 * (justin_age + years):\n            break\n\n    return years\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the graph passes through the origin (0, 0), we know that b = 0\n    b = 0 \n\n    # Now we need to find the value of m using the point (4, 8)\n    # 8 = m * 4 + b, since b is 0, we have 8 = m * 4, so m = 8/4 = 2\n\n    m = 8 / 4\n\n    # The equation of the line is y = mx + b\n    return f\"y = {m}x + {b}\"\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n    \n    solutions = solve((equation1,), (cora, qingle))\n\n    # Calculate difference in the number of sweets they have at first\n    difference = solutions[cora] - solutions[qingle]\n\n    return difference\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let j represent the original number of shells Jane has\n    # Let e represent the original number of shells Eric has\n    j, e = symbols('j e')\n    \n    # Original ratio\n    equation1 = Eq(j, 5/7 * e)\n    # New ratio after Eric gives Jane 6 shells\n    equation2 = Eq((j + 6)/(e - 6), 11/13)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, e))\n    \n    # Calculate total number of shells they have together\n    total_shells = solutions[j] + solutions[e]\n\n    return total_shells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    max_number = 0\n    current_number = 0\n    warren_add = 20\n    naida_subtract = 1\n\n    while warren_add > 0:\n        current_number += warren_add\n        max_number = max(max_number, current_number)\n        current_number -= naida_subtract\n        warren_add -= 1\n        naida_subtract += 1\n        \n    return max_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    # Rate of the first faucet\n    rate_first_faucet = 1 / 20\n    \n    # Since the other three faucets are 3 times faster, their rates are each 3 times the rate_first_faucet\n    rate_other_faucets = 3 * rate_first_faucet\n    \n    # Since there are three of these other faucets, the combined rate of the three is 3 times rate_other_faucets\n    combined_rate_other_faucets = 3 * rate_other_faucets\n    \n    # Total rate when all four faucets are opened is the sum of the rates\n    total_rate = rate_first_faucet + combined_rate_other_faucets\n    \n    # Time to fill the pool is the reciprocal of the total rate\n    time_to_fill = 1 / total_rate\n    \n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    prime_factors_48 = 2**4 * 3\n    prime_factors_925 = 5**2 * 37\n    prime_factors_38 = 2 * 19\n    prime_factors_435 = 3 * 5 * 29\n    \n    prime_factors_2 = 4 + 1  # Sum of the exponent of prime factor 2\n    prime_factors_5 = 2  # Sum of the exponent of prime factor 5\n    \n    # The number of zeros at the end is equal to the minimum of the exponents of 2 and 5\n    num_zeros = min(prime_factors_2, prime_factors_5)\n    \n    return num_zeros\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [5, 3, 9, 4, 8]\n    smallest_even_number = float('inf')\n    \n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 2 == 0 and number < smallest_even_number:\n            smallest_even_number = number\n    \n    return smallest_even_number if smallest_even_number != float('inf') else None\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_players = 52\n    violin_players = 38\n    both = piano_players // 4  # 1/4 of the pianists play the violin\n    neither = total_pupils - (piano_players + violin_players - both)\n    return neither\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time = 11\n\n    final_amount = principal * (1 + interest_rate * time)\n    \n    return final_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7  # There are 7 days in a week\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_second_stop = 22\n    remaining_after_first_stop = remaining_after_second_stop / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    from sympy import symbols, integrate, sqrt\n\n    # Variables for integration\n    x, y = symbols('x y')\n\n    # For an isosceles right triangle with waist length 2, the hypotenuse will be sqrt(2**2 + 2**2) = sqrt(8)\n    hypotenuse = sqrt(8)\n\n    # The locus of points at a distance less than 1 from the right angle vertex is a quarter circle with radius 1\n    radius = 1\n\n    # Integrate over the quarter circle to find the area of region with points at distance <1 from the origin\n    quarter_circle_area = integrate(integrate(1, (y, 0, sqrt(radius**2 - x**2))), (x, 0, radius))\n\n    # Area of the right angle triangle\n    triangle_area = (2 * 2) / 2\n\n    # Probability calculation as the ratio of the two areas\n    probability = quarter_circle_area / triangle_area\n\n    return float(probability)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):  # Loop over possible values for the first digit.\n        for D in range(1, 10, 4):  # Loop over possible values for the last digit, which should be a multiple of 4 since A is D/4.\n            if A == D // 4:  # Check if first digit is one fourth of the last digit.\n                for B in range(A - 1, A):  # Second digit is one less than the first digit.\n                    for C in range(0, 10):  # Loop over possible values for the third digit.\n                        if len({A, B, C, D}) == 4:  # Make sure all digits are different.\n                            ABCD = 1000 * A + 100 * B + 10 * C + D\n                            DCBA = 1000 * D + 100 * C + 10 * B + A\n                            if ABCD * 4 == DCBA:  # Check the condition of the problem.\n                                return ABCD  # If the condition is met, return the number.\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    A_in_Maths = 10\n    A_in_English = 15\n    A_in_Both = 2\n\n    A_in_Either = A_in_Maths + A_in_English - A_in_Both\n    return A_in_Either\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Given times\n    leave_school_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    catch_bus_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    bus_ride_duration = timedelta(minutes=18)\n    arrive_home_time = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    # Calculate walking time to bus stop\n    walk_to_bus_stop_duration = catch_bus_time - leave_school_time\n    \n    # Calculate walking time from bus drop off to home\n    bus_drop_off_time = catch_bus_time + bus_ride_duration\n    walk_home_duration = arrive_home_time - bus_drop_off_time\n    \n    # Total walking time\n    total_walking_time = walk_to_bus_stop_duration + walk_home_duration\n    \n    # Converting total walking time to minutes\n    total_walking_minutes = total_walking_time.total_seconds() / 60\n    \n    return int(total_walking_minutes)\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_numbers_count = len(numbers) + 1  # Including the unknown 'a'\n    total_sum = mean_value * total_numbers_count\n    sum_of_known_numbers = sum(numbers)\n    a = total_sum - sum_of_known_numbers\n    return a\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    # Let x be the number Freddie chooses\n    x = symbols('x')\n    \n    # Freddie divides it by 3 and then adds 10 to the result\n    equation = Eq(x/3 + 10, 25)\n\n    # Solve for x\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    total = 2030452\n    known_part = 30000 + 452\n    missing_number = (total - known_part) // 2\n\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 20 / 100 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    length_cm = 150\n    length_m = (length_cm / 2) / 100\n    return length_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Applying the Pigeonhole Principle for worst case scenario:\n    # Lina must take out at least one more than the number of colors to ensure a pair\n    num_colors = 3\n    socks_to_ensure_pair = num_colors + 1\n    \n    return socks_to_ensure_pair\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return int(n)\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_for_3_tests = 75 * 3\n    total_for_2_tests = 172\n    marks_remaining_test = total_for_3_tests - total_for_2_tests\n    return marks_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n    time = 1\n    interest = principal * interest_rate * time\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    return 452 - 191\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the unknown variable\n    number = symbols('number')\n\n    # Equation based on the problem statement\n    equation = Eq((number + 3) / 4 * 9, 81)\n\n    # Solve the equation\n    solution = solve(equation, number)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator = sum(1 / ((20-i) * (i+1)) for i in range(11, 16))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_victoria_row = 6 + 7 + 1  # Including Victoria\n    total_rows = 1 + 8 + 1  # Including the row Victoria is in\n    total_pupils = pupils_in_victoria_row * total_rows\n\n    return total_pupils\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    gave_to_lily = total_candy * (3/4)\n    remaining_candy = total_candy - gave_to_lily\n    gave_to_brother = remaining_candy * (1/3)\n    final_candy = remaining_candy - gave_to_brother\n    return final_candy\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Sugar amount for Mr. Smith's drink\n    sugar_mister = 300 * 0.50 + 600 * 0.20\n    \n    # Total volume for Mr. Smith's drink\n    total_volume_mister = 300 + 600\n    \n    # The combined sugar percentage for Mr. Smith's drink\n    percentage_mister = sugar_mister / total_volume_mister\n    \n    # Define x as a symbol\n    x = symbols('x')\n    \n    # Sugar amount for Mrs. Smith's drink (with x being the unknown percentage for the 300 mL drink)\n    sugar_missus = 700 * 0.10 + 300 * x / 100\n    \n    # Total volume for Mrs. Smith's drink\n    total_volume_missus = 700 + 300\n    \n    # The equation to solve (the two sugar percentages should be equal)\n    equation = Eq(sugar_missus / total_volume_missus, percentage_mister)\n    \n    # Solve for x\n    solution_x = solve(equation, x)\n    \n    # Return x rounded to the nearest two decimal places\n    return round(solution_x[0], 2)\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the time taken for Peter to reach his friend's house from 8:00 am\n    x = symbols('x')\n    \n    # Distance covered from 8:00 am to 8:30 am\n    distance_covered_half_hour = 6300 - 1800\n    \n    # Rate of jogging (assuming constant speed)\n    rate_of_jogging = distance_covered_half_hour / 0.5 # dividing by half hour (0.5 hours)\n    \n    # Equation representing the remaining distance to be covered after 8:30 am\n    equation = Eq(rate_of_jogging * x, 1800)\n    \n    # Solve for the time taken from 8:30 am to reach friend's house\n    x_value = solve(equation, x)[0]\n    \n    # Total time taken from 8:00 am to reach friend's house: 0.5 hours from 8:00 to 8:30, plus x_value hours from 8:30\n    total_time_hours = 0.5 + x_value\n    \n    # Convert time to minutes and add to the base time of 8:00 am (in minutes, where 8:00 am is represented as 480 minutes)\n    final_time_in_minutes = 480 + total_time_hours * 60\n    \n    # Convert to 24-hour time format\n    arrival_hour = int(final_time_in_minutes // 60)\n    arrival_minute = int(final_time_in_minutes % 60)\n\n    return f\"{arrival_hour}:{arrival_minute:02d}\"\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the money Amy had at first as M.\n    M = symbols('M')\n\n    # Price per donut and muffin\n    price_per_donut = 10 / 7\n    price_per_muffin = 6 / 3\n\n    # Number of donuts and muffins Amy bought\n    donuts = symbols('donuts')\n    muffins = symbols('muffins')\n\n    # Creating equations based on the problem\n    # Half of Amy's money was spent on donuts (donuts * price per donut)\n    # The remaining half was spent on muffins (muffins * price per muffin)\n    # Amy bought 54 more donuts than muffins\n    equation1 = Eq(donuts * price_per_donut, M/2)\n    equation2 = Eq(muffins * price_per_muffin, M/2)\n    equation3 = Eq(donuts - muffins, 54)\n\n    # Solve equations to find out the number of donuts and muffins\n    solutions = solve((equation1, equation2, equation3), (M, donuts, muffins))\n    money = solutions[M]\n\n    return money\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    # Let's assume the current year is `year`.\n    # May's current age is 7 years.\n    # Kenny's and his younger brother's combined age in 3 years will be 3 times May's age when she is 10.\n    \n    # May's age after 3 years will be 10 years.\n    mays_age_in_3_years = 10  \n    # The sum of the ages of Kenny's and his younger brother's in 3 years.\n    combined_age_in_3_years = 3 * mays_age_in_3_years\n    # Kenny is 2 years older than his younger brother.\n    kenny_age_diff = 2  \n    \n    # Since we have the combined age in 3 years and we know Kenny is 2 years older we can solve for \n    # Kenny's age and his brother's age in 3 years.\n    # Let kenny_age_in_3_years be Kenny's age in 3 years and brother_age_in_3_years be his brother's age in 3 years.\n    # We have:\n    # kenny_age_in_3_years + brother_age_in_3_years = combined_age_in_3_years\n    # kenny_age_in_3_years = brother_age_in_3_years + kenny_age_diff\n    # By substitution:\n    # brother_age_in_3_years + (brother_age_in_3_years + kenny_age_diff) = combined_age_in_3_years\n\n    # Solve for brother_age_in_3_years:\n    brother_age_in_3_years = (combined_age_in_3_years - kenny_age_diff) // 2\n    # Now, we have brother_age_in_3_years, we can find Kenny's age in 3 years:\n    kenny_age_in_3_years = brother_age_in_3_years + kenny_age_diff\n\n    # The difference in years between Kenny and May currently is Kenny's age in 3 years minus May's age in 3 years\n    age_difference = kenny_age_in_3_years - mays_age_in_3_years\n\n    return age_difference\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    distance_per_tooth = 30 / (9 - 4)\n    total_distance_mm = distance_per_tooth * (100 - 1)\n    total_distance_cm = total_distance_mm / 10\n    return total_distance_cm\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    # Total number of apples to be distributed\n    total_apples = 14\n    # Number of children\n    num_children = 5\n\n    # The largest possible number of apples the child who gets the most can get,\n    # if each child gets at least one apple, can be found by subtracting the minimum\n    # number of apples the other children can get (1 apple each) from the total number of apples\n    # and then giving the rest to one child\n    apples_for_most_child = total_apples - (num_children - 1)\n\n    return apples_for_most_child\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Total cost of sweets\n    total_cost = 10  # in pounds\n\n    # Total weight of sweets in kilograms\n    weight_kg = 5\n\n    # Weight per bag in kilograms\n    weight_per_bag_kg = 250 / 1000  # 250g to kg\n\n    # Number of bags\n    number_of_bags = weight_kg / weight_per_bag_kg\n\n    # Selling price per bag in pounds\n    selling_price_per_bag = 65 / 100  # 65p to pounds\n\n    # Total revenue from selling all bags\n    total_revenue = number_of_bags * selling_price_per_bag\n\n    # Total profit\n    profit = total_revenue - total_cost\n\n    # Percentage profit\n    percentage_profit = (profit / total_cost) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    # Total permutations for 5 people\n    total_permutations = 5 * 4 * 3 * 2 * 1\n    \n    # Permutations where the two people are next to each other\n    # When two people are together, treat them as one person, so we have 4 entities to arrange\n    together_permutations = 4 * 3 * 2 * 1\n    \n    # The two people can switch places among themselves in 2 ways\n    switch_places = 2\n    \n    # Subtract the permutations where the two are together from the total\n    ans = total_permutations - (together_permutations * switch_places)\n    \n    return ans\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Calculate the difference in years between 1996 and 2008\n    years_between = 2008 - 1996\n    \n    # Calculate the age of grandmother in 1996\n    grandmother_age_in_1996 = 80 - years_between\n    \n    # Calculate how many years ago from 1996 was mum 25\n    years_when_mum_was_25 = 40 - 25\n    \n    # Calculate the age of grandmother when mum was 25\n    grandmother_age_when_mum_was_25 = grandmother_age_in_1996 - years_when_mum_was_25\n    \n    return grandmother_age_when_mum_was_25\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    \n    monday_sales = (2/3) * total_vegetables\n    tuesday_sales = (2/5) * (total_vegetables - monday_sales)\n    \n    sales_monday_and_tuesday = monday_sales + tuesday_sales\n\n    return sales_monday_and_tuesday\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    return 26.1 / 10000\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    total = 0\n    for i in range(1, 857, 10):\n        total += (i * 5) - ((i + 1) * 5)\n    return total\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # There are 5 identical ice-cream cones and 3 friends.\n    # Since each friend should get at least 1 ice-cream cone, we distribute 1 to each first.\n    # This leaves us with 5 - 3 = 2 ice-cream cones to distribute.\n    # Now, the problem becomes a classic \"stars and bars\" problem\n    # (identical items into distinct bins) with 2 identical items and 3 bins.\n    \n    # We need to find the number of solutions to the equation:\n    # x1 + x2 + x3 = 2 where x1, x2, x3 >= 0 (since each friend already has one cone).\n    \n    # Using the \"stars and bars\" theorem, we have (n + k - 1) C (k - 1) ways to do this\n    # where n is the number of items to distribute and k is the number of bins.\n    # In our case, n = 2 (remaining cones) and k = 3 (friends).\n    \n    # Therefore, the formula becomes (2 + 3 - 1) C (3 - 1) = 4 C 2.\n\n    from math import comb\n    ans = comb(4, 2)\n    \n    return ans\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P, Q = symbols('P Q')\n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P - Q, 2700)\n\n    solutions = solve((equation1, equation2), (P, Q))\n\n    return solutions[Q]\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # We need to ensure we get 16 balls of one color and 13 of another,\n    # so we need to consider the worst-case scenario.\n    \n    # Calculate the worst case for picking 15 balls of each color.\n    # Since we want 16 of one color, we need to add one more from that color.\n    # To also get 13 of another color, we'd need to pick at most 12 from each of the remaining colors.\n    # In the worst case, we are picking one less than required from each color:\n    # 15 from the 16's, 25 from the 26's, etc.\n    # Then we will have 15 + 25 + 33 + 23 + 39 balls\n    # Now we can pick one more ball to ensure at least 16 of one color.\n    # Then we need to continue picking in the worst case until we get 13 of another color.\n    \n    worst_case = (15 + 12 + 12 + 12 + 12) + 1\n    # With one more ball, we have 16 of the first color.\n    \n    # Picking further, ensuring we don't get 13 of the second color until we picked 12 of each.\n    # We then pick one more to guarantee 13 of the second color.\n    worst_case += (12 + 11 + 11 + 11 + 11) + 1\n    \n    return worst_case\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    biscuits_given = total_biscuits / 4\n    biscuits_left = total_biscuits - biscuits_given\n    return biscuits_left\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    # Equations given\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the cost of one table and c be the cost of one chair.\n    t, c = symbols('t c')\n\n    # Given that 2 tables and 5 chairs cost Â£220\n    equation1 = Eq(2 * t + 5 * c, 220)\n\n    # Given that the cost of one table is the same as the cost of 3 chairs\n    equation2 = Eq(t, 3 * c)\n\n    # Solve the system of equations for t and c\n    solutions = solve((equation1, equation2), (t, c))\n\n    # We are interested in the cost of each table\n    return solutions[t]\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining = 4 / 5\n    original_money = spent / (1 - remaining)\n    return original_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 40 / 100 * 75\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann = 3\n    sana = 6\n    nancy = 8\n    total_coins = joann + sana + nancy\n    return total_coins\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    import math\n    \n    num_teams = 16\n    num_rounds = int(math.log2(num_teams))\n\n    return num_rounds\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    # Using the ratio of speeds to determine the shares of the distance covered by Lucas and his mother\n    lucas_speed_ratio = 3\n    mother_speed_ratio = 5\n    total_ratio = lucas_speed_ratio + mother_speed_ratio\n\n    # The initial distance between them\n    initial_distance = 20\n    \n    # The remaining distance when they are 4 miles apart\n    remaining_distance = 4\n\n    # The distance covered is the initial distance minus the remaining distance\n    distance_covered = initial_distance - remaining_distance\n\n    # Lucas's share of the distance covered\n    lucas_distance_covered = (lucas_speed_ratio / total_ratio) * distance_covered\n\n    return lucas_distance_covered\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    number_of_terms = 30\n    \n    # Sum of the first n terms of an arithmetic sequence: n/2 * (2a + (n - 1)d)\n    ans = number_of_terms / 2 * (2 * first_term + (number_of_terms - 1) * common_difference)\n    return ans\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n\n    # Calculate the number of pizzas per person (unit rate)\n    pizzas_per_person = pizzas_initial / people_initial\n\n    # Calculate the total number of pizzas needed for the final number of people\n    pizzas_needed = pizzas_per_person * people_final\n\n    return int(pizzas_needed) if pizzas_needed.is_integer() else round(pizzas_needed)\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    ans = 21 * (5 / 35)\n    return int(ans)\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    difference_eq = Eq(marion - ethan, -168)\n    \n    solutions = solve((difference_eq,), (julie,))\n    \n    julie_pay = solutions[julie]\n    marion_pay = 2 * julie_pay\n    ethan_pay = 5 * julie_pay\n\n    total_pay = julie_pay + marion_pay + ethan_pay\n\n    return total_pay\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    big_class, small_class = symbols('big_class small_class')\n\n    # Each student in the big class gets 2 apples\n    eq1 = Eq(2 * big_class + 2 * small_class, 48)\n    # Each student in the big class gets 3 oranges, small class gets 2 oranges\n    eq2 = Eq(3 * big_class + 2 * small_class, 55)\n\n    solutions = solve((eq1, eq2), (big_class, small_class))\n\n    return solutions[small_class]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    from math import sqrt, floor, ceil\n\n    count = 0\n    # Iterate through natural numbers from 1 to 2016\n    for i in range(1, 2017):\n        # Multiply the number by 72 and check if it's a perfect square\n        if ceil(sqrt(i * 72)) == floor(sqrt(i * 72)):\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    num_lollipops = 10\n    total_cost = cost_per_lollipop * num_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cards, wands = symbols('cards wands')\n    equation1 = Eq(wands, cards + 17)\n    equation2 = Eq(wands + cards, 69)\n    \n    solutions = solve((equation1, equation2), (cards, wands))\n    \n    return solutions[wands]\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # x â¡ 0 (mod 5)\n    # x â¡ 6 (mod 7)   because one child has to sit out, so it should be 7-1.\n    # x â¡ 7 (mod 8)   because one child has to sit out, so it should be 8-1.\n    congruences = [(0, 5), (6, 7), (7, 8)]\n\n    x, mod = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made = 100\n    butter_used = 40\n    desired_cookies = 150\n\n    butter_for_desired_cookies = (butter_used * desired_cookies) / cookies_made\n\n    return butter_for_desired_cookies\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages of Danny and Efron\n    danny_current, efron_current = symbols('danny_current efron_current')\n    \n    # Equation based on current age ratio\n    equation1 = Eq(danny_current, 8/3 * efron_current)\n    \n    # Equation based on Efron being 30 years younger\n    equation2 = Eq(efron_current, danny_current - 30)\n    \n    # Solve the system of equations for current age\n    ages_current = solve((equation1, equation2), (danny_current, efron_current))\n    \n    # Determine the ages\n    danny_age_now = ages_current[danny_current]\n    efron_age_now = ages_current[efron_current]\n    \n    # Define a symbol for the number of years in the future\n    years = symbols('years')\n    \n    # Equation based on future age ratio\n    equation3 = Eq((danny_age_now + years) / (efron_age_now + years), 5/3)\n    \n    # Solve for years\n    years_future = solve(equation3, years)\n    \n    return years_future[0]\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10): # The second digit can't be zero\n        first_digit = 1 + 2 * second_digit\n        if first_digit >= 10:  # The first digit must be a single digit\n            break\n        for third_digit in range(0, 10):\n            if 9 < first_digit + second_digit + third_digit < 14:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    result = -6 / 6\n    return result\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    colors_pencils = 15\n    colors_rulers = 20\n    colors_pens = 10\n\n    # Choose two different items from pencils and rulers\n    pencil_ruler_combinations = colors_pencils * colors_rulers\n    \n    # Choose two different items from pencils and pens\n    pencil_pen_combinations = colors_pencils * colors_pens\n    \n    # Choose two different items from rulers and pens\n    ruler_pen_combinations = colors_rulers * colors_pens\n\n    # Sum up all possible combinations\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Group Stage\n    teams_per_group = 4\n    games_per_group = (teams_per_group * (teams_per_group - 1)) // 2\n    total_group_games = games_per_group * 8\n    \n    # Knockout Stage\n    # Round of 16, Quarter-Finals, Semi-Finals, Third Place and Final\n    total_knockout_games = 16 // 2 + 8 // 2 + 4 // 2 + 1 + 1\n    \n    # Total games played\n    total_games_played = total_group_games + total_knockout_games\n    \n    return total_games_played\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    n = 224\n    factors = 0\n    \n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n            \n    return factors\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of apples and bananas\n    apple, banana = symbols('apple banana')\n\n    # Equation 1: cost for 3 apples and 2 bananas\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n\n    # Equation 2: cost for 1 apple and 1 banana\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculating the cost to buy 5 bananas\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    # Let the number be x\n    # x - 30% of x is 210\n    # This gives us x - 0.30x = 210\n    # Which simplifies to 0.70x = 210\n    # So x = 210 / 0.70\n    x = 210 / 0.70\n    return x\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    total_matches = 15\n    # Since every team plays with every other team once, the number of matches\n    # will be the combination of n teams taken 2 at a time (nC2)\n    # nC2 = n! / (2! * (n-2)!)\n    # We know nC2 = total_matches, so we can set up an equation and solve for n.\n    \n    # As nC2 is n(n-1)/2, we need to solve the quadratic equation n(n-1)/2 = total_matches\n    from math import factorial as fact\n    \n    # We start from 3 because 2 teams would only play 1 match\n    n = 3\n    while (n * (n - 1) // 2) != total_matches:\n        n += 1\n    \n    return n\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    # The total number of ways to choose one of each item is the product of the individual choices\n    total_ways = pencils * rulers * pens\n\n    return total_ways\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    # Let x be the number of correct answers\n    for x in range(11):  # Since there are 10 questions, he can answer correctly from 0 to 10\n        correct_points = 6 * x\n        incorrect_points = -2 * (10 - x)  # Points lost from incorrect answers\n        total_points = correct_points + incorrect_points\n        if total_points == 44:\n            return x\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, t_shirt = symbols('shorts t_shirt')\n    \n    equation1 = Eq(2 * shorts + 3 * t_shirt, 26)\n    equation2 = Eq(2 * shorts + 5 * t_shirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, t_shirt))\n\n    return solutions[t_shirt]\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n    third_term = second_term + common_difference\n    return third_term\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    triangles, quadrilaterals, pentagons = symbols('triangles quadrilaterals pentagons')\n\n    # There are 2 pentagons \n    pentagons = 2\n\n    # Each shape contributes to the number of sides respectively\n    sides_from_triangles = 3 * triangles\n    sides_from_quadrilaterals = 4 * quadrilaterals\n    sides_from_pentagons = 5 * pentagons\n\n    # The total sides from shapes form an equation with the given total number of sides (394)\n    total_sides_eq = Eq(sides_from_triangles + sides_from_quadrilaterals + sides_from_pentagons, 394)\n\n    # The number of quadrilaterals is 82 more than that of triangles\n    quadrilateral_triangle_relation_eq = Eq(quadrilaterals, triangles + 82)\n\n    # Solve the system of equations\n    solutions = solve((total_sides_eq, quadrilateral_triangle_relation_eq), (triangles, quadrilaterals))\n\n    # Return the number of quadrilaterals\n    return solutions[quadrilaterals]\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    number_of_gaps = 3  # since there are 4 lamp posts, there are 3 gaps between them\n\n    total_distance = distance_between_posts * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Total number of students\n    total_students = 150\n    # Total number of teams\n    total_teams = total_students // 3\n\n    # Number of teams with only 1 boy\n    one_boy_teams = 15\n    # Number of teams with two or more boys\n    two_or_more_boys_teams = 27\n\n    # All-boys teams plus all-girls teams equals total teams\n    # Let all_boys_teams be x, so all_girls_teams will be x/2\n    # x + x/2 = total_teams - one_boy_teams - two_or_more_boys_teams\n    all_boys_teams = 2 * (total_teams - one_boy_teams - two_or_more_boys_teams)\n    all_girls_teams = all_boys_teams // 2\n\n    # The number of girls is therefore:\n    girls = (all_girls_teams + one_boy_teams) * 3\n\n    return total_students - girls\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let rachel_sweets and alice_sweets be the number of sweets Rachel and Alice have respectively\n    rachel_sweets, alice_sweets = symbols('rachel_sweets alice_sweets')\n\n    # If Rachel gives Alice 10 sweets, they have the same number\n    equation1 = Eq(rachel_sweets - 10, alice_sweets + 10)\n\n    # If they both eat 8 sweets, Rachel has 3 times as many as Alice\n    equation2 = Eq((rachel_sweets - 8) / 3, alice_sweets - 8)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (rachel_sweets, alice_sweets))\n\n    # The total number of sweets they had originally is the sum of their individual amounts\n    total_sweets = solutions[rachel_sweets] + solutions[alice_sweets]\n\n    return total_sweets\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for i in range(10, 100):  # Loop through all two-digit numbers\n        number = int('6' + str(i))  # Create the three-digit number\n        # Check if the number is divisible by the lcm\n        if number % lcm == 0:\n            return number\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2*5*7*2*5*7*2*5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # 1 dog weighs as much as 8 rabbits\n    dog_to_rabbit = 8\n    # 1 rabbit weighs as much as 2 chickens\n    rabbit_to_chicken = 2\n    \n    # How many chickens weigh as much as 1 dog?\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Distance remains constant, only speed changes.\n    # The time taken to travel at 10 km/h let be t1 hours and at 15 km/h be t2 hours.\n    # If Ben cycles at x km/h to arrive at 9 am, let the time taken be t hours.\n    \n    # Difference in time between arriving at 10 am and 8 am is 2 hours.\n    # So t1 - t2 = 2 hours.\n\n    # Time taken to travel at 10 km/h (arriving at 10 am) is t + 1 hour.\n    # Time taken to travel at 15 km/h (arriving at 8 am) is t + 3 hours.\n\n    # Since distance is the same:\n    # Speed * Time = Distance\n    # So, 10(t + 1) = 15(t + 3)\n\n    # Solve for t:\n    t = (15 * 3 - 10) / (10 - 15)\n\n    # Speed needed to arrive at 9 am is:\n    speed_at_9_am = distance / t\n    distance = 10 * (t + 1)  # Using the speed of 10 km/h to find distance\n    speed_at_9_am = distance / (t + 2)  # He needs to arrive 1 hour earlier than at 10 am\n\n    return speed_at_9_am\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    gloves_needed = 1 + 2 + 1  # One more than the sum of the max of each color\n    return gloves_needed\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert numbers from base 7 to base 10\n    num1_base10 = int(str(61), 7)\n    num2_base10 = int(str(34), 7)\n    \n    # Subtract the numbers in base 10\n    result_base10 = num1_base10 - num2_base10\n    \n    # Convert the result back to base 7\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 7) + ans\n        result_base10 //= 7\n    return ans if ans else '0'\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_initial_candies = 5 * 12\n    total_students_after = 5 + 1\n    candies_per_student_after = total_initial_candies // total_students_after\n    return candies_per_student_after\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n\n    jacob_height = (raj_height + david_height) / 2\n\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    num_cards = 0\n    while True:\n        num_cards += 1\n        if num_cards % 4 == 3 and num_cards % 5 == 4 and num_cards % 7 == 6:\n            return num_cards\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    original_price = 1.20\n    depreciation_rate = 0.04\n    years = 5\n    approximate_depreciation = 0.8154\n\n    final_value = original_price * (1 - depreciation_rate) ** years\n    final_value = round(final_value, 4)  # Using the approximation\n\n    return final_value\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    # The word 'REVISE' contains 6 letters with the letter 'E' repeating twice.\n    total_letters = 6\n    repeating_e = 2\n    \n    # Number of arrangements = total number of letters factorial / product of factorials of repeating letters\n    num_arrangements = factorial(total_letters) // factorial(repeating_e)\n    \n    return num_arrangements\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, yuna = symbols('eugene yuna')\n\n    # Eugene had 3 times as many pins as Yuna\n    equation1 = Eq(eugene, 3 * yuna)\n\n    # After Yuna bought 76 pins, Yuna had 7/9 as many pins as Eugene\n    equation2 = Eq(yuna + 76, 7/9 * eugene)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (eugene, yuna))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    return 825\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    students_diff = 52\n    total_students = 0\n    boys = girls = 0\n\n    # Since the difference between boys and girls is given, and they are arranged in alternating square layers,\n    # we can set up the following relation:\n    # (x+2)^2 - x^2 = students_diff, where x is the size of the side of the inner square (girls or boys)\n    # This simplifies to 4x + 4 = students_diff\n    # Solving for x, we get: x = (students_diff - 4) / 4\n    # We need to determine if x is odd or even to know if it's girls or boys. Additionally, it needs to be an integer.\n    # We iterate over possible sizes and check if the condition is satisfied. We start from 1 because 0 would imply no students.\n\n    size = 1\n    while True:\n        inner = size * size\n        outer = (size + 2) ** 2\n        diff = outer - inner\n        if diff == students_diff:\n            if size % 2 == 0:\n                girls = inner\n                boys = outer\n            else:\n                boys = inner\n                girls = outer\n            break\n        size += 1\n\n    total_students = boys + girls\n    \n    return total_students\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    normal_price = 480\n    discount_rate = 0.35\n    sale_price = normal_price * (1 - discount_rate)\n    return sale_price\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # To be divisible by 9, the sum of the digits must be divisible by 9.\n    # The sum of the first 5 digits is 1 + 2 + 3 + 4 + 5 = 15.\n    # Let the last digit be A.\n    # The sum of the digits is 15 + A, and for the number to be divisible by 9, (15 + A) % 9 = 0.\n    # The smallest non-negative A that satisfies this condition is A = 3.\n    \n    # Now we want to find the remainder when this 6-digit number is divided by 4.\n    # Only the last two digits of a number affect its remainder when divided by 4.\n    # Therefore, we only need to look at the number 5A.\n    # When A = 3, the number is 53.\n    remainder_by_4 = 53 % 4\n    \n    return remainder_by_4\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # Since the goal is to force Dan to pick the last match,\n    # Kelly needs to leave a multiple of 3 for Dan on each turn.\n\n    # This means Kelly should always aim to make the remaining\n    # number of matches a multiple of 3 after her turn.\n    \n    # There are 11 matches to start with. The closest multiple of 3\n    # that is less than 11 is 9 (since 3 * 3 = 9).\n    # To leave 9 matches for Dan, Kelly must take away:\n    required_to_leave_multiple_of_3 = 11 - 9\n    \n    # Kelly must take away 2 matches in her first turn.\n    return required_to_leave_multiple_of_3\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (n * (n + 1) * (2 * n + 1)) // 6\n    return ans\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = Fraction(5, 1) + Fraction(1, 7) + Fraction(3, 1) + Fraction(3, 11) + Fraction(1, 1) + Fraction(13, 23)\n    denominator = Fraction(3, 1) + Fraction(3, 7) + Fraction(2, 1) + Fraction(2, 11) + Fraction(1, 1) + Fraction(1, 23)\n    \n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    import math\n    ans = math.factorial(3)\n    return ans\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n\n    # Let total_flowers be the total number of flowers in the garden\n    # According to the problem, 1/2 of the flowers are red\n    red_flowers = total_flowers / 2\n\n    # 4/7 of the remaining flowers (total_flowers - red_flowers) are pink\n    pink_flowers = 4 / 7 * (total_flowers - red_flowers)\n\n    # There are 6 more red flowers than pink flowers\n    equation = Eq(red_flowers - pink_flowers, 6)\n\n    # Solve for the total number of flowers\n    solution = solve(equation, total_flowers)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n    equation = Eq(4 * square - 3, 65)\n    solutions = solve(equation, square)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 39):  # 39*2 is just less than 77\n        for three_gram_weights in range(0, 26):  # 26*3 is just less than 77\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n\n    # Let the number of cars be c and motorcycles be m.\n    # Each car has 4 wheels and each motorcycle has 2 wheels.\n    # We have two equations:\n    # c + m = total_vehicles -> Equation 1 (total number of vehicles)\n    # 4c + 2m = total_wheels -> Equation 2 (total number of wheels)\n    \n    # We can solve Equation 1 for m: m = total_vehicles - c\n    # Substituting for m in Equation 2 gives us:\n    # 4c + 2(total_vehicles - c) = total_wheels\n    # 4c + 54 - 2c = 78\n    # 2c = 24\n    # c = 12\n\n    cars = (total_wheels - 2 * total_vehicles) / 2\n    return int(cars)\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, nicole = symbols('jason nicole')\n    jason_start = 20\n\n    # After Nicole gives Jason 18 stickers\n    jason_after = jason_start + 18\n    nicole_after = nicole - 18\n\n    # Jason has 5 fewer stickers than Nicole after the transaction\n    equation = Eq(jason_after + 5, nicole_after)\n\n    # Nicole had more stickers than Jason initially\n    nicole_initial_condition = nicole > jason_start\n\n    solution = solve((equation, nicole_initial_condition), nicole)\n    nicole_start = solution[nicole]\n\n    if nicole_start.is_real and nicole_start > jason_start:  # Checking additional condition for a realistic solution\n        return nicole_start\n    else:\n        return \"No solution found\"\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original dimensions of the cuboid: length (l), breadth (b), height (h)\n    # New dimensions after changes: length increased by 10% -> 1.1l,\n    # breadth reduced to 4/5 -> 4/5b, height ratio 11:10 -> 11/10h\n    \n    # Original volume: V_original = l * b * h\n    # New volume: V_new = (1.1l) * (4/5b) * (11/10h)\n    \n    # Ratio of new volume to original volume:\n    # V_new / V_original = (1.1l * 4/5b * 11/10h) / (l * b * h)\n    volume_ratio = (1.1 * 4/5 * 11/10)\n    \n    # Convert the ratio to a percentage:\n    new_volume_percentage = volume_ratio * 100\n    \n    return new_volume_percentage\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    total_distance_m = total_distance_km * 1000  # Convert 5 km to meters\n    number_of_intervals = 9 + 1  # 9 marshals create 10 intervals\n    distance_between_marshals = total_distance_m / number_of_intervals\n\n    return distance_between_marshals\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_sum = 74 * 7\n    correct_sum = incorrect_sum - (81 - 18)\n    correct_average = correct_sum / 7\n    return correct_average\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_first_part = 180  # meters per minute\n    time_first_part = 6     # minutes\n\n    speed_second_part = 120  # meters per minute\n    time_second_part = 8     # minutes\n\n    distance_first_part = speed_first_part * time_first_part\n    distance_second_part = speed_second_part * time_second_part\n\n    total_distance = distance_first_part + distance_second_part\n\n    return total_distance\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_per_picture = 10  # minutes\n    total_time = 1 * 60 + 20  # one hour and twenty minutes in minutes\n    num_pictures = total_time / time_per_picture\n    return int(num_pictures)\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    total_tiles = 400\n    current_layer = 1\n    red_tiles = 0\n    green_tiles = 0\n\n    while total_tiles > 0:\n        side_length = int(total_tiles ** 0.5)\n        layer_tiles = 4 * (side_length - 1)\n        if current_layer % 2 == 1:  # Red Layer if current layer is odd\n            red_tiles += layer_tiles\n        else:                       # Green Layer if current layer is even\n            green_tiles += layer_tiles\n        total_tiles -= layer_tiles\n        current_layer += 1\n    \n    # Adding the centre tile\n    if current_layer % 2 == 1:\n        red_tiles += 1\n    else:\n        green_tiles += 1\n\n    if red_tiles > green_tiles:\n        dominant_color = 'red'\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = 'green'\n        more_tiles = green_tiles - red_tiles\n\n    return (dominant_color, more_tiles)\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    interest_rate = 0.03\n\n    # Interest for the first year\n    first_year_interest = principal * interest_rate\n    # Total amount at the end of the first year\n    total_after_first_year = principal + first_year_interest\n\n    # Interest for the second year (compound interest includes interest on the first year's interest)\n    second_year_interest = total_after_first_year * interest_rate\n\n    # Total interest earned at the end of the second year\n    total_interest = first_year_interest + second_year_interest\n\n    return total_interest\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    # Convert the mixed number to an improper fraction\n    # The mixed number is 1 4/7, which can be converted as follows:\n    # = 1 + (4/7)\n    # = (7/7) + (4/7)\n    # = (7 + 4)/7\n    # = 11/7\n    improper_fraction = 11 / 7\n    \n    # Convert the improper fraction to a decimal\n    # and round it to 1 decimal place\n    decimal_value = round(improper_fraction, 1)\n    \n    return decimal_value\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_part = '428571'  # The recurring part in the fraction 3/7\n    index = (69 - 1) % len(recurring_part)  # Since we start from the first position\n    return int(recurring_part[index])\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    remaining_sweets = y / 2\n    return remaining_sweets\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let megacorp_2014 be the number of widgets Megacorp sold in 2014. Since Vastco sold 68% more,\n    # Vastco's sales in 2014 was megacorp_2014 * 168 / 100\n    # In 2015, Vastco sold 44% more, so Vastco's sales in 2015 was megacorp_2014 * (1 + 68/100) * (1 + 32/100)\n    # This equals megacorp_2014 * (1 + x%) in 2015 for Megacorp, where x is the percentage increase for Megacorp from 2014 to 2015\n\n    # Establish the relationship between the two companies' sales in 2015\n    # megacorp_2014 * (1 + x/100) = megacorp_2014 * (1 + 68/100) * (1 + 32/100) / (1 + 44/100)\n    # Simplify the relationship to find the percentage x\n    # (1 + x/100) = (1 + 68/100) * (1 + 32/100) / (1 + 44/100)\n    # x/100 = (1.68 * 1.32 / 1.44) - 1\n    # x = ( (1.68 * 1.32 / 1.44) - 1 ) * 100\n\n    x = ( (1.68 * 1.32 / 1.44) - 1 ) * 100\n    return round(x, 2)\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_salt = 300 * 0.35\n    daisy_salt = 200 * 0.50\n    total_salt = dylan_salt + daisy_salt\n    total_solution = 300 + 200\n    concentration = total_salt / total_solution\n    return concentration\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    # Let's assume Ken bought the goods for $100 (it could be any amount, \n    # we just need a reference point for percentages).\n    cost_price = 100\n    planned_profit = 50  # 50% planned profit\n    total_planned_profit = cost_price * (planned_profit / 100)\n    \n    # On the first day, he sold 70% of his goods at 50% profit\n    first_day_sales = cost_price * 0.7\n    first_day_profit = first_day_sales * 0.5\n    \n    # The remaining goods amount to 30% of the original\n    remaining_goods = cost_price * 0.3\n    \n    # Total actual profit is 82% of the planned profit\n    actual_profit = total_planned_profit * 0.82\n    \n    # Calculate second day's profit by subtracting first day's profit from total actual profit\n    second_day_profit = actual_profit - first_day_profit\n    \n    # Find the selling price of the remaining goods on the second day\n    second_day_selling_price = remaining_goods + second_day_profit\n    \n    # Discount rate is the reduction in price (i.e., how much less he sold the remaining goods for compared to their cost)\n    discount_amount = remaining_goods - second_day_selling_price\n\n    # Discount rate percentage\n    discount_rate = (discount_amount / remaining_goods) * 100\n    \n    return discount_rate\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = 48\n\n    while empty_bottles >= 4:\n        new_bottles = empty_bottles // 4\n        total_bottles += new_bottles\n        empty_bottles = empty_bottles - (new_bottles * 4) + new_bottles\n\n    if empty_bottles == 3:  # Customer can borrow 1 bottle.\n        total_bottles += 1\n\n    return total_bottles\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Defining the symbols for the ages of sons and daughters\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n\n    # Equations based on the given conditions\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation2 = Eq(younger_son - older_son, 3)\n    equation3 = Eq(younger_daughter - older_daughter, 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # The age of the youngest child (either the younger son or the younger daughter, whichever is smaller)\n    youngest_child_age = min(solutions[younger_son], solutions[younger_daughter])\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Johnny's approach step by step:\n    # Digits for numbers 1-9\n    digits_1_9 = 9 * 1\n    # Digits for numbers 10-99\n    digits_10_99 = (99 - 10 + 1) * 2\n    # Digits for numbers 100-113\n    digits_100_113 = (113 - 100 + 1) * 3\n\n    # Total number of digits written by Johnny\n    total_digits = digits_1_9 + digits_10_99 + digits_100_113\n\n    return total_digits\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n    # assuming each worker works at the same rate\n    # total work is workers * days\n    total_work = workers * days\n    # days taken for 1 worker = total work / workers\n    days_for_1_worker = total_work / 1\n    return days_for_1_worker\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    # Let x be the total number of pearls originally on the strand\n    # According to the problem, the pearls are split into fractions of the total number and three remain on the strand\n    # We can set up the equation:\n    # (1/2)*x + (1/4)*x + (1/6)*x + 3 = x\n    # Solving for x will give us the original number of pearls on the strand\n\n    from fractions import Fraction\n\n    total_fraction = Fraction(1, 2) + Fraction(1, 4) + Fraction(1, 6)\n    remaining_pearls = 3\n    # 1 - the sum of fractions will give us the fraction that represents the remaining pearls on the strand\n    fraction_for_remaining_pearls = 1 - total_fraction\n    # Since the remaining pearls correspond to the fraction left, we can find the original total count by\n    # dividing the count of remaining pearls by their fraction of the total\n    original_count = remaining_pearls / fraction_for_remaining_pearls\n\n    return original_count\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import permutations\n\ndef solution():\n    entrances = ['A', 'B', 'C']\n    count = 0\n    for p in permutations(entrances * 4, 4):\n        if len(set(p)) == 3:  # each entrance must be entered by at least one person\n            count += 1\n    count //= 6  # divide by permutations of the 3 entrances to not overcount\n    return count\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of white rabbits\n    white_rabbits = symbols('white_rabbits')\n\n    # According to the problem, set up the equations\n    black_rabbits = white_rabbits + 14\n    grey_rabbits = white_rabbits - 2\n    total_rabbits = Eq(white_rabbits + black_rabbits + grey_rabbits, 84)\n\n    # Solve the equation\n    solutions = solve(total_rabbits, white_rabbits)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_erasers, brother_erasers = symbols('john_erasers brother_erasers')\n\n    equation1 = Eq(john_erasers, brother_erasers + 32)\n    equation2 = Eq(john_erasers + brother_erasers, 246)\n\n    solutions = solve((equation1, equation2), (john_erasers, brother_erasers))\n\n    return solutions[brother_erasers]\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    total_earnings = 92\n\n    # Assume all glasses are delivered safely, he would earn $100.\n    # The difference between this assumption and the actual earnings\n    # gives us twice the number of glasses broken because for each glass broken\n    # he loses $2 (doesn't earn $1 and pays $1).\n    broken_glasses = (total_glasses - total_earnings) // 2\n\n    return broken_glasses\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    # Mayank thinks of a number: x\n    # He doubles it and then adds 4: 2*x + 4\n    # He gets the answer 40: 2*x + 4 = 40\n    # We have to find x\n\n    # Inverse operation of adding 4 is subtracting 4\n    result_minus_4 = 40 - 4  # 40 - 4 = 36\n\n    # Inverse operation of doubling is halving\n    original_number = result_minus_4 / 2  # 36 / 2 = 18\n\n    return original_number\n\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # Using the formula for the number of matches in a round-robin tournament:\n    # Total rounds = n * (n-1) / 2, where n is the number of teams, we solve for n.\n    # Rearranging the formula: n^2 - n - 2 * Total rounds = 0.\n    \n    total_rounds = 45\n    # Coefficients for the quadratic a*n^2 + b*n + c = 0\n    a, b, c = 1, -1, -2 * total_rounds\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Since we're looking for a positive number of teams, we only consider the positive solution.\n    n = (-b + discriminant**0.5) / (2*a)\n\n    return int(n)\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 15\n    change = 1200 - total_cost\n    \n    return change\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for num in [2, 6, 1, 10, 5, 3]:\n        if (num * 3) == 6:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            x3 = 15 - x1 - x2\n            if x3 >= 3:\n               count += 1\n    return count // 6  # Divide by 6 to account for permutations of the three numbers\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    # Let x be the number of people and y be the original number of boats.\n    # The problem translates into two equations:\n    # (1) (y - 1) * 9 = x\n    # (2) (y + 1) * 6 = x\n\n    # Both equations equal x, so they should be equal to each other:\n    # (y - 1) * 9 = (y + 1) * 6\n    # Expanding both sides:\n    # 9y - 9 = 6y + 6\n    # Subtract 6y from both sides:\n    # 3y - 9 = 6\n    # Add 9 to both sides:\n    # 3y = 15\n    # Divide both sides by 3:\n    # y = 5\n    # Now substitute y back into one of the equations to find x:\n    # x = (y - 1) * 9\n    # x = (5 - 1) * 9\n    y = 5\n    x = (y - 1) * 9\n\n    return x\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    # Let the smallest odd integer be x.\n    # The next consecutive odd integers would be x+2 and x+4.\n    # Their sum is given to be 57.\n    # x + (x + 2) + (x + 4) = 57\n    # 3x + 6 = 57\n    # 3x = 57 - 6\n    # x = (57 - 6) / 3\n    # x = 51 / 3\n    # x = 17\n    # So, the smallest odd integer is 17.\n\n    return 17\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for num in range(5, 16):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "from math import gcd\n\ndef solution():\n    pencils = 32\n    pens = 40\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')\n    \n    for perm in permutations(digits, 4):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        min_sum = min(min_sum, num1 + num2)\n\n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks_for_4_tests = 4 * 60\n    new_total_marks_with_5th_test = total_marks_for_4_tests + 70\n    new_average = new_total_marks_with_5th_test / 5\n    return new_average\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    # Let p be the number of cookies Peter had initially\n    from sympy import symbols, Eq, solve\n\n    j, p = symbols('j p')\n    \n    # John had 180 more cookies than Peter initially\n    equation1 = Eq(j, p + 180)\n    \n    # Given: John sold 4/5 of her cookies\n    john_sold = 4/5 * j\n    \n    # Remaining cookies with John\n    john_remaining = j - john_sold\n\n    # Given: Peter sold 3/10 of her cookies\n    peter_sold = 3/10 * p\n    \n    # Remaining cookies with Peter\n    peter_remaining = p - peter_sold\n    \n    # After selling, John had 1/2 as many cookies as Peter left\n    equation2 = Eq(john_remaining, 1/2 * peter_remaining)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, p))\n    \n    # Answer: Number of cookies John had initially\n    return solutions[j]\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    # Loop through all 3-digit numbers\n    for i in range(100, 1000):\n        str_i = str(i)\n        # Check if third digit is the sum of the first two\n        if int(str_i[2]) == int(str_i[0]) + int(str_i[1]):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    number_of_cups = 6\n    first_sale_discount = 1  # $1 discount on every cup\n    second_sale_discount = 0.1  # 10% discount on the total price\n\n    # First sale discount\n    total_price_after_first_sale = (full_price_per_cup - first_sale_discount) * number_of_cups\n\n    # Second sale discount\n    total_price_after_second_sale = total_price_after_first_sale * (1 - second_sale_discount)\n\n    return total_price_after_second_sale\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    horses_apples = 20\n    pigs_apples = 15\n    rabbits_apples = 5\n\n    total_animals = total_horses + total_pigs + total_rabbits\n\n    total_apples_eaten = (total_horses * horses_apples) + (total_pigs * pigs_apples) + (total_rabbits * rabbits_apples)\n\n    average_apples_eaten = total_apples_eaten / total_animals\n\n    return average_apples_eaten\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    ans = round(number, -2)\n    return ans\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans = solve_congruence(*congruences)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_drink = 12\n    water_fraction = 3 / 4\n    water_in_drink = total_drink * water_fraction\n    return water_in_drink\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    return 145 + 37\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of students in Class B be 'b'\n    # According to the problem, the number of students in Class A is then 'b + 3'\n\n    # Let the total number of peaches be 'p'\n\n    b, p = symbols('b p')\n\n    # If all peaches are given to Class A, each student gets 5 peaches, and 10 are left\n    equation1 = Eq((b + 3) * 5 + 10, p)\n\n    # If all peaches are given to Class B, each student gets 8 peaches, and 2 more are needed\n    equation2 = Eq(b * 8 + 2, p)\n\n    # Solving the two equations for 'b' and 'p'\n    solutions = solve((equation1, equation2), (b, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    # The pattern of the sum is that each term adds another '2' to the previous term.\n    # We need to find out the last 5 digits of the sum S. \n    # Because of the nature of the series, the last 5 digits will only be affected\n    # by the last 5 digits of each number in the series added together.\n\n    # Initialize the sum of the last 5 digits\n    sum_last_5_digits = 0\n    \n    # Iterate over each term in the series\n    for i in range(1, 2018):\n        # Create the number by repeating the digit '2' for i times\n        number = int('2' * i)\n        \n        # Add only the last 5 digits of the current number to the sum\n        sum_last_5_digits += number % 100000\n    \n    # Get the last 5 digits of the final sum\n    ans = sum_last_5_digits % 100000\n    return ans\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    benson_left, jayden_left = symbols('benson_left jayden_left')\n    \n    # Benson spent $74\n    benson_spent = 74\n    # Jayden spent $120\n    jayden_spent = 120\n    \n    # Combined total at first\n    total = 590\n\n    # Write the equations based on the problem statement\n    # Benson left is three times Jayden left\n    equation1 = Eq(benson_left, 3 * jayden_left)\n    # Combined money left after spending\n    equation2 = Eq(benson_left + jayden_left, total - benson_spent - jayden_spent)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (benson_left, jayden_left))\n\n    return solutions[jayden_left]\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    product = 547 * 479\n    n = product % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    centimetres = metres * 100\n    return centimetres\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for number in range(1, 380):\n        if number * number + number == 380:\n            return number\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_pet_owners = 143\n    own_dog = 100\n    own_goldfish = 14\n    own_both = 9\n\n    # Using the principle of Inclusion-Exclusion\n    own_either_or_both = own_dog + own_goldfish - own_both\n    own_neither = total_pet_owners - own_either_or_both\n\n    return own_neither\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    raspberry_part = 1\n\n    total_volume = 300\n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n\n    return raspberry_volume\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # Assume Betty's speed is b m/min and Kevin's speed is k m/min.\n    # We know from the problem that:\n    # 1. After Kevin has walked for 3 minutes, he reaches the store:\n    #    Kevin_distance = k * 3\n    # 2. After Betty has walked for 9 minutes (6 + 3 minutes), she is 900 meters from the cinema:\n    #    Betty_distance = b * 9 = 900\n    # Hence, Betty's speed is b = 900 / 9 = 100 m/min.\n    # 3. When Betty reaches the store (after 6 minutes), Kevin has walked 150 meters, which implies Betty's distance to the store:\n    #    Betty_store_distance = b * 6 = 100 * 6 = 600 meters\n    # 4. Kevin's speed can then be calculated as:\n    #    Kevin_distance_to_store = 600 meters\n    #    Kevin_walked_distance = 150 meters\n    #    Kevin_remaining_distance_to_store = 600 - 150 = 450 meters\n    #    Kevin's speed: k = Kevin_remaining_distance_to_store / 3 = 450 / 3 = 150 m/min.\n    # 5. To find out how many minutes earlier Betty leaves than Kevin:\n    #    Betty_to_store = b * Betty_leaving_time_difference = 600 meters\n    #    Kevin_to_store = k * Betty_leaving_time_difference = 150 meters\n    #    Betty_leaving_time_difference = Kevin_to_store / k\n    # Substitute k = 150m/min to find Betty's leaving time difference:\n    Betty_speed = 100  # m/min\n    Kevin_speed = 150  # m/min\n    Kevin_walked = 150  # meters\n    Betty_store_distance = Betty_speed * 6  # 600 meters\n    Betty_leaving_time_difference = (Betty_store_distance - Kevin_walked) / Kevin_speed\n    return Betty_leaving_time_difference\n\nans = solution()"
    ]
}